generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                              String                  @id @default(cuid())
  email                           String                  @unique
  password                        String?
  firstName                       String
  lastName                        String
  phone                           String?                 @unique
  createdAt                       DateTime                @default(now())
  updatedAt                       DateTime                @updatedAt
  lastLogin                       DateTime?
  status                          UserStatus              @default(PENDING_PHONE_VERIFICATION) // שינוי ברירת מחדל
  role                            UserRole                @default(CANDIDATE)
  isVerified                      Boolean                 @default(false)
  isPhoneVerified                 Boolean                 @default(false)
  isProfileComplete               Boolean                 @default(false)
  firstPartyInquiries             AvailabilityInquiry[]   @relation("FirstPartyInquiries")
  matchmakerAvailabilityInquiries AvailabilityInquiry[]   @relation("MatchmakerInquiries")
  secondPartyInquiries            AvailabilityInquiry[]   @relation("SecondPartyInquiries")
  givenFeedback                   DateFeedback[]          @relation("UserFeedback")
  sentInvitations                 Invitation[]            @relation("MatchmakerInvitations")
  receivedInvitation              Invitation?             @relation("ReceivedInvitation")
  firstPartySuggestions           MatchSuggestion[]       @relation("FirstPartySuggestions")
  createdSuggestions              MatchSuggestion[]       @relation("MatchmakerSuggestions")
  accounts                        Account[]
  sessions                        Session[]
  secondPartySuggestions          MatchSuggestion[]       @relation("SecondPartySuggestions")
  profile                         Profile?
  verifiedUsers                   Profile[]               @relation("VerifiedByMatchmaker")
  questionnaireResponses          QuestionnaireResponse[]
  sentSuggestionInquiries         SuggestionInquiry[]     @relation("SentSuggestionInquiries")
  receivedSuggestionInquiries     SuggestionInquiry[]     @relation("ReceivedSuggestionInquiries")
  images                          UserImage[]
  verifications                   Verification[]
  videos                          Video[]
  approvedSuggestions             MatchSuggestion[]       @relation("ApprovedSuggestions")
  reviewedSuggestions             MatchSuggestion[]       @relation("ReviewedSuggestions")
  oneTimeAuthTokens               OneTimeAuthToken[]

  @@index([email])
  @@index([role])
  @@index([status])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model OneTimeAuthToken {
  id        String   @id @default(cuid())
  token     String   @unique // הטוקן החד-פעמי
  userId    String // מזהה המשתמש אליו הטוקן משויך
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime // תאריך ושעת תפוגה של הטוקן
  createdAt DateTime @default(now())

  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Verification {
  id          String             @id @default(cuid())
  userId      String?
  type        VerificationType
  token       String
  target      String? // הוספת שדה למטרה (מספר טלפון/אימייל)
  expiresAt   DateTime
  status      VerificationStatus @default(PENDING)
  attempts    Int                @default(0)
  metadata    Json?
  createdAt   DateTime           @default(now())
  completedAt DateTime?
  user        User?              @relation(fields: [userId], references: [id])

  @@index([userId, type, status]) // אינדקס משופר
  @@index([target, type, status]) // אינדקס לחיפוש לפי מטרה
  @@index([token, type, status]) // אופציונלי: אינדקס גם על הטוקן אם החיפושים יתבצעו ישירות עליו
}

model Profile {
  id                        String             @id @default(cuid())
  userId                    String             @unique
  gender                    Gender
  birthDate                 DateTime
  nativeLanguage            String?
  additionalLanguages       String[]
  height                    Int?
  maritalStatus             String?
  occupation                String?
  education                 String?
  address                   String?
  city                      String?
  origin                    String?
  religiousLevel            String?
  about                     String?
  hobbies                   String?
  parentStatus              String?
  siblings                  Int?
  position                  Int?
  preferredAgeMin           Int?
  preferredAgeMax           Int?
  preferredHeightMin        Int?
  preferredHeightMax        Int?
  preferredReligiousLevels  String[]           @default([])
  preferredLocations        String[]           @default([])
  preferredEducation        String[]           @default([])
  preferredOccupations      String[]           @default([])
  contactPreference         String?
  referenceName1            String?
  referencePhone1           String?
  referenceName2            String?
  referencePhone2           String?
  isProfileVisible          Boolean            @default(true)
  preferredMatchmakerGender Gender?
  matchingNotes             String?
  verifiedBy                String?
  availabilityStatus        AvailabilityStatus @default(AVAILABLE)
  availabilityNote          String?
  availabilityUpdatedAt     DateTime?
  createdAt                 DateTime           @default(now())
  updatedAt                 DateTime           @updatedAt
  lastActive                DateTime?
  user                      User               @relation(fields: [userId], references: [id])
  verifiedByMatchmaker      User?              @relation("VerifiedByMatchmaker", fields: [verifiedBy], references: [id])
}

model Meeting {
  id            String          @id @default(cuid())
  suggestionId  String
  scheduledDate DateTime
  status        MeetingStatus
  location      String?
  notes         String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  feedback      DateFeedback[]  @relation("MeetingFeedback")
  suggestion    MatchSuggestion @relation(fields: [suggestionId], references: [id])

  @@index([suggestionId])
  @@index([status])
}

model MatchSuggestion {
  id                    String                    @id @default(cuid())
  matchmakerId          String
  firstPartyId          String
  secondPartyId         String
  status                MatchSuggestionStatus     @default(DRAFT)
  priority              Priority                  @default(MEDIUM)
  internalNotes         String?
  firstPartyNotes       String?
  secondPartyNotes      String?
  matchingReason        String?
  followUpNotes         String?
  responseDeadline      DateTime?
  decisionDeadline      DateTime?
  lastStatusChange      DateTime?
  previousStatus        MatchSuggestionStatus?
  lastActivity          DateTime                  @default(now())
  firstPartySent        DateTime?
  firstPartyResponded   DateTime?
  secondPartySent       DateTime?
  secondPartyResponded  DateTime?
  firstMeetingScheduled DateTime?
  closedAt              DateTime?
  category              SuggestionCategory        @default(ACTIVE)
  createdAt             DateTime                  @default(now())
  updatedAt             DateTime                  @updatedAt
  feedback              DateFeedback[]            @relation("SuggestionFeedback")
  firstParty            User                      @relation("FirstPartySuggestions", fields: [firstPartyId], references: [id], onDelete: Cascade)
  matchmaker            User                      @relation("MatchmakerSuggestions", fields: [matchmakerId], references: [id], onDelete: Cascade)
  secondParty           User                      @relation("SecondPartySuggestions", fields: [secondPartyId], references: [id], onDelete: Cascade)
  meetings              Meeting[]
  inquiries             SuggestionInquiry[]
  statusHistory         SuggestionStatusHistory[]
  approvedBy            User[]                    @relation("ApprovedSuggestions")
  reviewedBy            User[]                    @relation("ReviewedSuggestions")

  @@index([category])
  @@index([matchmakerId])
  @@index([firstPartyId])
  @@index([secondPartyId])
  @@index([status])
  @@index([priority])
  @@index([lastActivity])
}

model SuggestionStatusHistory {
  id           String                @id @default(cuid())
  suggestionId String
  status       MatchSuggestionStatus
  reason       String?
  notes        String?
  createdAt    DateTime              @default(now())
  suggestion   MatchSuggestion       @relation(fields: [suggestionId], references: [id], onDelete: Cascade)

  @@index([suggestionId])
}

model Invitation {
  id           String           @id @default(cuid())
  matchmakerId String
  email        String
  token        String           @unique
  expires      DateTime
  status       InvitationStatus @default(PENDING)
  metadata     Json?
  userId       String?          @unique
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  matchmaker   User             @relation("MatchmakerInvitations", fields: [matchmakerId], references: [id])
  user         User?            @relation("ReceivedInvitation", fields: [userId], references: [id])

  @@index([matchmakerId])
  @@index([email])
  @@index([status])
}

model Video {
  id        String      @id @default(cuid())
  userId    String
  url       String
  type      VideoType
  status    VideoStatus @default(PENDING)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  user      User        @relation(fields: [userId], references: [id])
}

model AvailabilityInquiry {
  id                  String   @id @default(cuid())
  matchmakerId        String
  firstPartyId        String
  secondPartyId       String
  firstPartyResponse  Boolean?
  secondPartyResponse Boolean?
  note                String?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  expiresAt           DateTime
  firstParty          User     @relation("FirstPartyInquiries", fields: [firstPartyId], references: [id])
  matchmaker          User     @relation("MatchmakerInquiries", fields: [matchmakerId], references: [id])
  secondParty         User     @relation("SecondPartyInquiries", fields: [secondPartyId], references: [id])

  @@index([matchmakerId])
  @@index([firstPartyId])
  @@index([secondPartyId])
}

model QuestionnaireResponse {
  id                    String    @id @default(cuid())
  userId                String
  valuesAnswers         Json?
  personalityAnswers    Json?
  relationshipAnswers   Json?
  partnerAnswers        Json?
  religionAnswers       Json?
  valuesCompleted       Boolean   @default(false)
  personalityCompleted  Boolean   @default(false)
  relationshipCompleted Boolean   @default(false)
  partnerCompleted      Boolean   @default(false)
  religionCompleted     Boolean   @default(false)
  worldsCompleted       String[]
  completed             Boolean   @default(false)
  startedAt             DateTime
  completedAt           DateTime?
  lastSaved             DateTime  @default(now())
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  user                  User      @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([completed])
  @@index([valuesCompleted])
  @@index([personalityCompleted])
  @@index([relationshipCompleted])
  @@index([partnerCompleted])
  @@index([religionCompleted])
}

model UserImage {
  id                 String   @id @default(cuid())
  url                String
  isMain             Boolean  @default(false)
  cloudinaryPublicId String?
  userId             String
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model DateFeedback {
  id            String          @id @default(cuid())
  suggestionId  String
  partyId       String
  meetingId     String
  meetingNumber Int
  feedback      String
  status        String
  nextSteps     String?
  createdAt     DateTime        @default(now())
  meeting       Meeting         @relation("MeetingFeedback", fields: [meetingId], references: [id])
  party         User            @relation("UserFeedback", fields: [partyId], references: [id])
  suggestion    MatchSuggestion @relation("SuggestionFeedback", fields: [suggestionId], references: [id])

  @@index([suggestionId])
  @@index([partyId])
  @@index([meetingId])
}

model SuggestionInquiry {
  id           String          @id @default(cuid())
  suggestionId String
  fromUserId   String
  toUserId     String
  question     String
  answer       String?
  status       InquiryStatus   @default(PENDING)
  createdAt    DateTime        @default(now())
  answeredAt   DateTime?
  fromUser     User            @relation("SentSuggestionInquiries", fields: [fromUserId], references: [id])
  suggestion   MatchSuggestion @relation(fields: [suggestionId], references: [id], onDelete: Cascade)
  toUser       User            @relation("ReceivedSuggestionInquiries", fields: [toUserId], references: [id])

  @@index([suggestionId])
  @@index([fromUserId])
  @@index([toUserId])
}

enum MeetingStatus {
  SCHEDULED
  COMPLETED
  CANCELLED
  RESCHEDULED
}

enum Gender {
  MALE
  FEMALE
}

enum UserRole {
  CANDIDATE
  MATCHMAKER
  ADMIN
}

enum UserStatus {
  PENDING_EMAIL_VERIFICATION
  PENDING_PHONE_VERIFICATION // ממתין לאימות טלפון לאחר הרשמה
  ACTIVE
  INACTIVE
  BLOCKED
}

enum VideoType {
  INTRODUCTION
  PERSONAL_STORY
  OTHER
}

enum VideoStatus {
  PENDING
  APPROVED
  REJECTED
}

enum ContactMethod {
  EMAIL
  WHATSAPP
  PHONE
}

enum MatchSuggestionStatus {
  DRAFT
  PENDING_FIRST_PARTY
  FIRST_PARTY_APPROVED
  FIRST_PARTY_DECLINED
  PENDING_SECOND_PARTY
  SECOND_PARTY_APPROVED
  SECOND_PARTY_DECLINED
  AWAITING_MATCHMAKER_APPROVAL
  CONTACT_DETAILS_SHARED
  AWAITING_FIRST_DATE_FEEDBACK
  THINKING_AFTER_DATE
  PROCEEDING_TO_SECOND_DATE
  ENDED_AFTER_FIRST_DATE
  MEETING_PENDING
  MEETING_SCHEDULED
  MATCH_APPROVED
  MATCH_DECLINED
  DATING
  ENGAGED
  MARRIED
  EXPIRED
  CLOSED
  CANCELLED
}

enum SuggestionCategory {
  ACTIVE
  PENDING
  HISTORY
}

enum AvailabilityStatus {
  AVAILABLE
  UNAVAILABLE
  DATING
  ENGAGED
  MARRIED
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  EXPIRED
  CANCELLED
}

enum VerificationType {
  EMAIL
  PHONE_WHATSAPP
  DOCUMENT
  REFERENCE
  PASSWORD_RESET
}

enum VerificationStatus {
  PENDING
  COMPLETED
  EXPIRED
  FAILED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum InquiryStatus {
  PENDING
  ANSWERED
  CLOSED
}
