generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                              String                  @id @default(cuid())
  email                           String                  @unique
  password                        String?
  firstName                       String
  lastName                        String
  phone                           String?                 @unique
  createdAt                       DateTime                @default(now())
  updatedAt                       DateTime                @updatedAt
  lastLogin                       DateTime?
  status                          UserStatus              @default(PENDING_PHONE_VERIFICATION)
  role                            UserRole                @default(CANDIDATE)
  isVerified                      Boolean                 @default(false)
  isPhoneVerified                 Boolean                 @default(false)
  isProfileComplete               Boolean                 @default(false)
  firstPartyInquiries             AvailabilityInquiry[]   @relation("FirstPartyInquiries")
  matchmakerAvailabilityInquiries AvailabilityInquiry[]   @relation("MatchmakerInquiries")
  secondPartyInquiries            AvailabilityInquiry[]   @relation("SecondPartyInquiries")
  givenFeedback                   DateFeedback[]          @relation("UserFeedback")
  sentInvitations                 Invitation[]            @relation("MatchmakerInvitations")
  receivedInvitation              Invitation?             @relation("ReceivedInvitation")
  firstPartySuggestions           MatchSuggestion[]       @relation("FirstPartySuggestions")
  createdSuggestions              MatchSuggestion[]       @relation("MatchmakerSuggestions")
  accounts                        Account[]
  sessions                        Session[]
  secondPartySuggestions          MatchSuggestion[]       @relation("SecondPartySuggestions")
  profile                         Profile?
  verifiedUsers                   Profile[]               @relation("VerifiedByMatchmaker")
  questionnaireResponses          QuestionnaireResponse[]
  sentSuggestionInquiries         SuggestionInquiry[]     @relation("SentSuggestionInquiries")
  receivedSuggestionInquiries     SuggestionInquiry[]     @relation("ReceivedSuggestionInquiries")
  images                          UserImage[]
  verifications                   Verification[]
  videos                          Video[]
  approvedSuggestions             MatchSuggestion[]       @relation("ApprovedSuggestions")
  reviewedSuggestions             MatchSuggestion[]       @relation("ReviewedSuggestions")
  oneTimeAuthTokens               OneTimeAuthToken[]

  @@index([email])
  @@index([role])
  @@index([status])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade) // ✅ היה קיים

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model OneTimeAuthToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade) // ✅ היה קיים
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade) // ✅ היה קיים

  @@index([userId])
}

model Verification {
  id          String             @id @default(cuid())
  userId      String?
  type        VerificationType
  token       String
  target      String?
  expiresAt   DateTime
  status      VerificationStatus @default(PENDING)
  attempts    Int                @default(0)
  metadata    Json?
  createdAt   DateTime           @default(now())
  completedAt DateTime?
  user        User?              @relation(fields: [userId], references: [id], onDelete: Cascade) // ❗️ הוספתי/שיניתי

  @@index([userId, type, status])
  @@index([target, type, status])
  @@index([token, type, status])
}

model Profile {
  id                        String             @id @default(cuid())
  userId                    String             @unique
  gender                    Gender
  birthDate                 DateTime
  nativeLanguage            String?
  additionalLanguages       String[]
  height                    Int?
  maritalStatus             String?
  occupation                String?
  education                 String?
  educationLevel            String?
  city                      String?
  origin                    String?
  religiousLevel            String?
  shomerNegiah              Boolean?
  serviceType               ServiceType?
  serviceDetails            String?
  headCovering              HeadCoveringType?
  kippahType                KippahType?
  hasChildrenFromPrevious   Boolean?           @default(false)
  profileCharacterTraits    String[]           @default([])
  profileHobbies            String[]           @default([])
  aliyaCountry              String?
  aliyaYear                 Int?
  about                     String?
  parentStatus              String?
  siblings                  Int?
  position                  Int?
  preferredAgeMin           Int?
  preferredAgeMax           Int?
  preferredHeightMin        Int?
  preferredHeightMax        Int?
  preferredReligiousLevels  String[]           @default([])
  preferredLocations        String[]           @default([])
  preferredEducation        String[]           @default([])
  preferredOccupations      String[]           @default([])
  contactPreference         String?
  isProfileVisible          Boolean            @default(true)
  preferredMatchmakerGender Gender?
  matchingNotes             String?
  verifiedBy                String? // Foreign key field for verifiedByMatchmaker
  availabilityStatus        AvailabilityStatus @default(AVAILABLE)
  availabilityNote          String?
  availabilityUpdatedAt     DateTime?
  createdAt                 DateTime           @default(now())
  updatedAt                 DateTime           @updatedAt
  lastActive                DateTime?

  user                 User  @relation(fields: [userId], references: [id], onDelete: Cascade) // ❗️ הוספתי/שיניתי
  verifiedByMatchmaker User? @relation("VerifiedByMatchmaker", fields: [verifiedBy], references: [id], onDelete: SetNull) // ❗️ הוספתי/שיניתי (ודא ש-verifiedBy אופציונלי)
}

model Meeting {
  id            String          @id @default(cuid())
  suggestionId  String
  scheduledDate DateTime
  status        MeetingStatus
  location      String?
  notes         String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  feedback      DateFeedback[]  @relation("MeetingFeedback")
  suggestion    MatchSuggestion @relation(fields: [suggestionId], references: [id], onDelete: Cascade) // ❗️ הוספתי/שיניתי

  @@index([suggestionId])
  @@index([status])
}

model MatchSuggestion {
  id                    String                    @id @default(cuid())
  matchmakerId          String
  firstPartyId          String
  secondPartyId         String
  status                MatchSuggestionStatus     @default(DRAFT)
  priority              Priority                  @default(MEDIUM)
  internalNotes         String?
  firstPartyNotes       String?
  secondPartyNotes      String?
  matchingReason        String?
  followUpNotes         String?
  responseDeadline      DateTime?
  decisionDeadline      DateTime?
  lastStatusChange      DateTime?
  previousStatus        MatchSuggestionStatus?
  lastActivity          DateTime                  @default(now())
  firstPartySent        DateTime?
  firstPartyResponded   DateTime?
  secondPartySent       DateTime?
  secondPartyResponded  DateTime?
  firstMeetingScheduled DateTime?
  closedAt              DateTime?
  category              SuggestionCategory        @default(ACTIVE)
  createdAt             DateTime                  @default(now())
  updatedAt             DateTime                  @updatedAt
  feedback              DateFeedback[]            @relation("SuggestionFeedback")
  firstParty            User                      @relation("FirstPartySuggestions", fields: [firstPartyId], references: [id], onDelete: Cascade) // ✅ היה קיים
  matchmaker            User                      @relation("MatchmakerSuggestions", fields: [matchmakerId], references: [id], onDelete: Cascade) // ✅ היה קיים
  secondParty           User                      @relation("SecondPartySuggestions", fields: [secondPartyId], references: [id], onDelete: Cascade) // ✅ היה קיים
  meetings              Meeting[]
  inquiries             SuggestionInquiry[]
  statusHistory         SuggestionStatusHistory[]
  approvedBy            User[]                    @relation("ApprovedSuggestions")
  reviewedBy            User[]                    @relation("ReviewedSuggestions")

  @@index([category])
  @@index([matchmakerId])
  @@index([firstPartyId])
  @@index([secondPartyId])
  @@index([status])
  @@index([priority])
  @@index([lastActivity])
}

model SuggestionStatusHistory {
  id           String                @id @default(cuid())
  suggestionId String
  status       MatchSuggestionStatus
  reason       String?
  notes        String?
  createdAt    DateTime              @default(now())
  suggestion   MatchSuggestion       @relation(fields: [suggestionId], references: [id], onDelete: Cascade) // ✅ היה קיים

  @@index([suggestionId])
}

model Invitation {
  id           String           @id @default(cuid())
  matchmakerId String
  email        String
  token        String           @unique
  expires      DateTime
  status       InvitationStatus @default(PENDING)
  metadata     Json?
  userId       String?          @unique
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  matchmaker   User             @relation("MatchmakerInvitations", fields: [matchmakerId], references: [id], onDelete: Cascade) // ❗️ הוספתי/שיניתי
  user         User?            @relation("ReceivedInvitation", fields: [userId], references: [id], onDelete: Cascade) // ❗️ הוספתי/שיניתי

  @@index([matchmakerId])
  @@index([email])
  @@index([status])
}

model Video {
  id        String      @id @default(cuid())
  userId    String
  url       String
  type      VideoType
  status    VideoStatus @default(PENDING)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade) // ❗️ הוספתי/שיניתי
}

model AvailabilityInquiry {
  id                  String   @id @default(cuid())
  matchmakerId        String
  firstPartyId        String
  secondPartyId       String
  firstPartyResponse  Boolean?
  secondPartyResponse Boolean?
  note                String?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  expiresAt           DateTime
  firstParty          User     @relation("FirstPartyInquiries", fields: [firstPartyId], references: [id], onDelete: Cascade) // ❗️ הוספתי/שיניתי
  matchmaker          User     @relation("MatchmakerInquiries", fields: [matchmakerId], references: [id], onDelete: Cascade) // ❗️ הוספתי/שיניתי
  secondParty         User     @relation("SecondPartyInquiries", fields: [secondPartyId], references: [id], onDelete: Cascade) // ❗️ הוספתי/שיניתי

  @@index([matchmakerId])
  @@index([firstPartyId])
  @@index([secondPartyId])
}

model QuestionnaireResponse {
  id                    String    @id @default(cuid())
  userId                String
  valuesAnswers         Json?
  personalityAnswers    Json?
  relationshipAnswers   Json?
  partnerAnswers        Json?
  religionAnswers       Json?
  valuesCompleted       Boolean   @default(false)
  personalityCompleted  Boolean   @default(false)
  relationshipCompleted Boolean   @default(false)
  partnerCompleted      Boolean   @default(false)
  religionCompleted     Boolean   @default(false)
  worldsCompleted       String[]
  completed             Boolean   @default(false)
  startedAt             DateTime
  completedAt           DateTime?
  lastSaved             DateTime  @default(now())
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade) // ❗️ הוספתי/שיניתי

  @@index([userId])
  @@index([completed])
  @@index([valuesCompleted])
  @@index([personalityCompleted])
  @@index([relationshipCompleted])
  @@index([partnerCompleted])
  @@index([religionCompleted])
}

model UserImage {
  id                 String   @id @default(cuid())
  url                String
  isMain             Boolean  @default(false)
  cloudinaryPublicId String?
  userId             String
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade) // ✅ היה קיים

  @@index([userId])
}

model DateFeedback {
  id            String          @id @default(cuid())
  suggestionId  String
  partyId       String
  meetingId     String
  meetingNumber Int
  feedback      String
  status        String
  nextSteps     String?
  createdAt     DateTime        @default(now())
  meeting       Meeting         @relation("MeetingFeedback", fields: [meetingId], references: [id], onDelete: Cascade) // ❗️ הוספתי/שיניתי
  party         User            @relation("UserFeedback", fields: [partyId], references: [id], onDelete: Cascade) // ❗️ הוספתי/שיניתי
  suggestion    MatchSuggestion @relation("SuggestionFeedback", fields: [suggestionId], references: [id], onDelete: Cascade) // ❗️ הוספתי/שיניתי

  @@index([suggestionId])
  @@index([partyId])
  @@index([meetingId])
}

model SuggestionInquiry {
  id           String          @id @default(cuid())
  suggestionId String
  fromUserId   String
  toUserId     String
  question     String
  answer       String?
  status       InquiryStatus   @default(PENDING)
  createdAt    DateTime        @default(now())
  answeredAt   DateTime?
  fromUser     User            @relation("SentSuggestionInquiries", fields: [fromUserId], references: [id], onDelete: Cascade) // ❗️ הוספתי/שיניתי
  suggestion   MatchSuggestion @relation(fields: [suggestionId], references: [id], onDelete: Cascade) // ✅ היה קיים
  toUser       User            @relation("ReceivedSuggestionInquiries", fields: [toUserId], references: [id], onDelete: Cascade) // ❗️ הוספתי/שיניתי

  @@index([suggestionId])
  @@index([fromUserId])
  @@index([toUserId])
}

// --- Enums ---
enum ServiceType {
  MILITARY_COMBATANT
  MILITARY_SUPPORT
  MILITARY_OFFICER
  MILITARY_INTELLIGENCE_CYBER_TECH
  NATIONAL_SERVICE_ONE_YEAR
  NATIONAL_SERVICE_TWO_YEARS
  HESDER_YESHIVA
  YESHIVA_ONLY_POST_HS
  PRE_MILITARY_ACADEMY_AND_SERVICE
  EXEMPTED
  CIVILIAN_SERVICE
  OTHER
}

enum HeadCoveringType {
  FULL_COVERAGE
  PARTIAL_COVERAGE
  HAT_BERET
  SCARF_ONLY_SOMETIMES
  NONE
}

enum KippahType {
  BLACK_VELVET
  KNITTED_SMALL
  KNITTED_LARGE
  CLOTH
  BRESLEV
  NONE_AT_WORK_OR_CASUAL
  NONE_USUALLY
  OTHER
}

enum MeetingStatus {
  SCHEDULED
  COMPLETED
  CANCELLED
  RESCHEDULED
}

enum Gender {
  MALE
  FEMALE
}

enum UserRole {
  CANDIDATE
  MATCHMAKER
  ADMIN
}

enum UserStatus {
  PENDING_EMAIL_VERIFICATION
  PENDING_PHONE_VERIFICATION
  ACTIVE
  INACTIVE
  BLOCKED
}

enum VideoType {
  INTRODUCTION
  PERSONAL_STORY
  OTHER
}

enum VideoStatus {
  PENDING
  APPROVED
  REJECTED
}

enum ContactMethod {
  EMAIL
  WHATSAPP
  PHONE
}

enum MatchSuggestionStatus {
  DRAFT
  PENDING_FIRST_PARTY
  FIRST_PARTY_APPROVED
  FIRST_PARTY_DECLINED
  PENDING_SECOND_PARTY
  SECOND_PARTY_APPROVED
  SECOND_PARTY_DECLINED
  AWAITING_MATCHMAKER_APPROVAL
  CONTACT_DETAILS_SHARED
  AWAITING_FIRST_DATE_FEEDBACK
  THINKING_AFTER_DATE
  PROCEEDING_TO_SECOND_DATE
  ENDED_AFTER_FIRST_DATE
  MEETING_PENDING
  MEETING_SCHEDULED
  MATCH_APPROVED
  MATCH_DECLINED
  DATING
  ENGAGED
  MARRIED
  EXPIRED
  CLOSED
  CANCELLED
}

enum SuggestionCategory {
  ACTIVE
  PENDING
  HISTORY
}

enum AvailabilityStatus {
  AVAILABLE
  UNAVAILABLE
  DATING
  PAUSED
  ENGAGED
  MARRIED
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  EXPIRED
  CANCELLED
}

enum VerificationType {
  EMAIL
  PHONE_WHATSAPP
  DOCUMENT
  REFERENCE
  PASSWORD_RESET
}

enum VerificationStatus {
  PENDING
  COMPLETED
  EXPIRED
  FAILED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum InquiryStatus {
  PENDING
  ANSWERED
  CLOSED
}
