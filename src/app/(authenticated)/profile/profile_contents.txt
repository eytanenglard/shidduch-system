################################################################################
# Directory Content Map For: C:\Users\user\Desktop\matchpoint\shidduch-system\src\app\(authenticated)\profile
# Generated on: 2025-06-22 02:23:04
################################################################################

================================================================================
Directory: C:\Users\user\Desktop\matchpoint\shidduch-system\src\app\(authenticated)\profile
================================================================================

--------------------------------------------------------------------------------
File: C:\Users\user\Desktop\matchpoint\shidduch-system\src\app\(authenticated)\profile\page.tsx
--------------------------------------------------------------------------------
Content:
"use client";

import React, { Suspense } from "react";
import UnifiedProfileDashboard from "./components/dashboard/UnifiedProfileDashboard";
import { useSearchParams } from "next/navigation";
import { Loader2 } from "lucide-react";

// A small wrapper to handle Suspense for useSearchParams
const ProfilePageContent = () => {
  const searchParams = useSearchParams();
  const viewOnly = searchParams.get("viewOnly") === "true";
  const userId = searchParams.get("userId") || undefined;
  const initialTab = searchParams.get("tab") || "overview"; // Get initial tab

  return (
    <div className="min-h-screen bg-background" dir="rtl">
      <UnifiedProfileDashboard 
        viewOnly={viewOnly} 
        userId={userId} 
        initialTab={initialTab} 
      />
    </div>
  );
};

const ProfilePage = () => {
  return (
    <Suspense fallback={
      <div className="flex items-center justify-center min-h-screen bg-gradient-to-br from-cyan-50 via-white to-pink-50">
        <div className="flex items-center gap-2 text-lg text-cyan-600">
          <Loader2 className="animate-spin h-6 w-6" />
          <span>טוען פרופיל...</span>
        </div>
      </div>
    }>
      <ProfilePageContent />
    </Suspense>
  );
};

export default ProfilePage;
--- End of Content for page.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\user\Desktop\matchpoint\shidduch-system\src\app\(authenticated)\profile\profile_contents.txt
--------------------------------------------------------------------------------
[This is the output log file itself. Content not included.]

================================================================================
Directory: C:\Users\user\Desktop\matchpoint\shidduch-system\src\app\(authenticated)\profile\components
================================================================================

(This directory contains subdirectories but no files directly. See subdirectories below.)

================================================================================
Directory: C:\Users\user\Desktop\matchpoint\shidduch-system\src\app\(authenticated)\profile\components\dashboard
================================================================================

--------------------------------------------------------------------------------
File: C:\Users\user\Desktop\matchpoint\shidduch-system\src\app\(authenticated)\profile\components\dashboard\ProfileChecklist.tsx
--------------------------------------------------------------------------------
Content:
"use client";

import React, { useState, useMemo } from 'react';
import Link from 'next/link';
import { Progress } from "@/components/ui/progress";
import { Button } from '@/components/ui/button';
import { CheckCircle, User, BookOpen, Camera, Target, ChevronUp, ChevronDown, Sparkles, Edit3 } from 'lucide-react';
import { motion, AnimatePresence } from 'framer-motion';
import { cn } from "@/lib/utils";
import type { User as SessionUserType } from '@/types/next-auth';
import type { QuestionnaireResponse } from '@prisma/client';

// Helper Types & Constants
const QUESTION_COUNTS: Record<'VALUES' | 'PERSONALITY' | 'RELATIONSHIP' | 'PARTNER' | 'RELIGION', number> = {
    VALUES: 19, PERSONALITY: 19, RELATIONSHIP: 19, PARTNER: 17, RELIGION: 19
};

const WORLD_NAMES_MAP = {
    values: 'ערכים', personality: 'אישיות', relationship: 'זוגיות', partner: 'פרטנר', religion: 'דת ומסורת'
} as const;

type WorldKey = keyof typeof WORLD_NAMES_MAP;

interface ChecklistItemProps {
    id: string;
    isCompleted: boolean;
    title: string;
    description: string;
    link?: string;
    onClick?: () => void;
    icon: React.ElementType;
    missingItems?: string[];
    worldProgress?: { world: string; completed: number; total: number; isDone: boolean }[];
    isActive: boolean;
    setActiveItemId: React.Dispatch<React.SetStateAction<string | null>>;
}

const ChecklistItem: React.FC<ChecklistItemProps> = ({
    id, isCompleted, title, description, link, onClick, icon: Icon,
    missingItems, worldProgress, isActive, setActiveItemId
}) => {
    const canExpand = (missingItems && missingItems.length > 0) || (worldProgress && worldProgress.length > 0);
    const isExpanded = isActive && canExpand;

    const handleInteraction = () => {
        if (isCompleted) return;
        if (onClick) {
            onClick();
        } else if (canExpand && !link) {
            setActiveItemId(prev => (prev === id ? null : id));
        }
    };
    
    const cardContent = (
      <>
        <div className="relative w-full flex justify-center mb-3">
            <div className={cn(
                "relative flex items-center justify-center w-14 h-14 rounded-2xl transition-all duration-300 transform group-hover:scale-110",
                isCompleted ? "bg-emerald-100 shadow-emerald-500/10" : "bg-cyan-100 shadow-cyan-500/10"
            )}>
                <Icon className={cn("w-7 h-7 transition-colors duration-300", isCompleted ? "text-emerald-500" : "text-cyan-600")} />
            </div>
            {isCompleted && (
                <motion.div initial={{ scale: 0, opacity: 0 }} animate={{ scale: 1, opacity: 1 }} transition={{ type: "spring", stiffness: 400, damping: 20, delay: 0.2 }} className="absolute -top-1 -right-1">
                    <CheckCircle className="w-5 h-5 text-emerald-500 bg-white rounded-full p-0.5" fill="white" />
                </motion.div>
            )}
        </div>
        <h4 className={cn("font-bold text-sm text-center transition-colors", isCompleted ? 'text-gray-400 line-through' : 'text-gray-800')}>{title}</h4>
        {!isCompleted && <p className="text-xs text-center text-gray-500 mt-1 leading-tight h-8">{description}</p>}
      </>
    );

    const interactiveContent = (
      link && !isCompleted ? (
        <Link href={link} passHref legacyBehavior>
          <a className="block h-full w-full">{cardContent}</a>
        </Link>
      ) : (
        <button onClick={handleInteraction} className="h-full w-full text-left" disabled={isCompleted}>{cardContent}</button>
      )
    );

    return (
        <motion.div
            layout
            onMouseEnter={() => canExpand && setActiveItemId(id)}
            className={cn(
                "relative flex flex-col rounded-2xl transition-all duration-300 group overflow-hidden",
                isCompleted ? 'bg-white/40' : 'bg-white/70 shadow-md',
                isExpanded && "shadow-xl bg-white"
            )}
        >
            <div className={cn("p-4", !isCompleted && "cursor-pointer")}>
                {interactiveContent}
            </div>
            <AnimatePresence>
                {isExpanded && (
                    <motion.div layout initial={{ opacity: 0, height: 0 }} animate={{ opacity: 1, height: 'auto' }} exit={{ opacity: 0, height: 0 }} transition={{ duration: 0.3, ease: 'easeInOut' }} className="overflow-hidden">
                        <div className="bg-slate-50/70 border-t border-slate-200 px-4 py-3 text-sm">
                            <h4 className="font-semibold text-xs mb-2 text-gray-800">מה חסר להשלמת השלב?</h4>
                            {missingItems && (<ul className="list-disc pr-4 space-y-1.5 text-gray-600 text-xs">{missingItems.map(item => <li key={item}>{item}</li>)}</ul>)}
                            {worldProgress && (<div className="space-y-2">{worldProgress.map(world => (<div key={world.world} className="flex items-center justify-between text-xs"><span className={cn("font-medium", world.isDone ? "text-emerald-600" : "text-gray-700")}>{world.world}</span><div className="flex items-center gap-2"><span className="font-mono text-xs">{world.completed}/{world.total}</span>{world.isDone && <CheckCircle className="h-4 w-4 text-emerald-500" />}</div></div>))}</div>)}
                        </div>
                    </motion.div>
                )}
            </AnimatePresence>
        </motion.div>
    );
};

interface ProfileChecklistProps {
  user: SessionUserType;
  hasSeenPreview: boolean;
  onPreviewClick: () => void;
  // הוסף את השורה הבאה
  questionnaireResponse: QuestionnaireResponse | null;
}

export const ProfileChecklist: React.FC<ProfileChecklistProps> = ({ user, onPreviewClick, hasSeenPreview, questionnaireResponse }) => {
    const [isMinimized, setIsMinimized] = useState(false);
    const [activeItemId, setActiveItemId] = useState<string | null>(null);

    const getMissingItems = useMemo(() => {
        const p = user.profile;
        if (!p) return { personalDetails: [], partnerPreferences: [] };
        return {
            personalDetails: [
                (!p.about || p.about.trim().length < 100) && 'כתיבת "קצת עליי" (100+ תווים)',
                !p.height && 'גובה', !p.maritalStatus && 'מצב משפחתי', !p.city && 'עיר מגורים',
                !p.occupation && 'עיסוק', !p.educationLevel && 'רמת השכלה', !p.origin && 'מוצא/עדה',
                !p.religiousLevel && 'רמה דתית', !p.serviceType && 'סוג שירות צבאי/לאומי',
                (!p.profileHobbies || p.profileHobbies.length === 0) && 'תחביבים',
                (!p.profileCharacterTraits || p.profileCharacterTraits.length === 0) && 'תכונות אופי',
            ].filter((item): item is string => !!item),
            
            partnerPreferences: [
                (!p.preferredAgeMin || !p.preferredAgeMax) && 'טווח גילאים מועדף',
                (!p.preferredHeightMin || !p.preferredHeightMax) && 'טווח גובה מועדף',
                (!p.preferredReligiousLevels || p.preferredReligiousLevels.length === 0) && 'רמות דתיות מועדפות',
                (!p.preferredLocations || p.preferredLocations.length === 0) && 'אזורי מגורים מועדפים',
                (!p.preferredMaritalStatuses || p.preferredMaritalStatuses.length === 0) && 'מצב משפחתי מועדף',
                !p.preferredShomerNegiah && 'העדפת שמירת נגיעה',
                !p.preferredPartnerHasChildren && 'העדפה לגבי ילדים מקשר קודם',
                (!p.preferredCharacterTraits || p.preferredCharacterTraits.length === 0) && 'תכונות אופי מועדפות',
                (!p.preferredHobbies || p.preferredHobbies.length === 0) && 'תחביבים מועדפים',
            ].filter((item): item is string => !!item),
        };
    }, [user.profile]);

    const questionnaireProgress = useMemo(() => {
    // אנחנו כבר לא צריכים להסתמך על המידע הלא אמין מה-session
    if (!questionnaireResponse) return null;

    // ה-prop הוא כבר האובייקט הבודד והעדכני, אין צורך במיון
    const qr = questionnaireResponse; 
    
    const getAnswerCount = (answers: unknown): number => Array.isArray(answers) ? answers.length : 0;
    
    return (Object.keys(WORLD_NAMES_MAP) as WorldKey[]).map(key => {
        const uppercaseKey = key.toUpperCase() as keyof typeof QUESTION_COUNTS;
        const answersField = `${key}Answers` as keyof QuestionnaireResponse;
        return {
            world: WORLD_NAMES_MAP[key],
            completed: getAnswerCount(qr[answersField]),
            total: QUESTION_COUNTS[uppercaseKey],
            isDone: qr.worldsCompleted?.includes(uppercaseKey) ?? false
        };
    });
}, [questionnaireResponse]); // <-- עדכון התלות ל-prop החדש
const questionnaireCompleted = questionnaireResponse?.completed ?? false;
    const tasks = [
        { id: 'photo', isCompleted: (user.images?.length ?? 0) >= 3, title: 'העלאת תמונות', description: 'הכרטיס ביקור הראשוני שלך.', link: '/profile?tab=photos', icon: Camera, missingItems: (user.images?.length ?? 0) < 3 ? [`נדרשות לפחות 3 תמונות (הועלו: ${user.images?.length ?? 0})`] : [] },
        { id: 'personal_details', isCompleted: getMissingItems.personalDetails.length === 0, title: 'פרטים אישיים', description: 'הבסיס להכיר אותך לעומק.', link: '/profile?tab=overview', icon: User, missingItems: getMissingItems.personalDetails },
        { id: 'partner_preferences', isCompleted: getMissingItems.partnerPreferences.length === 0, title: 'העדפות בן/בת זוג', description: 'לדייק את מי שמחפשים.', link: '/profile?tab=preferences', icon: Target, missingItems: getMissingItems.partnerPreferences },
        { id: 'questionnaire', isCompleted: questionnaireCompleted, title: 'שאלון התאמה', description: 'המפתח להתאמות AI.', link: '/questionnaire', icon: BookOpen, worldProgress: questionnaireProgress ?? undefined },
        { id: 'review', isCompleted: hasSeenPreview, title: 'תצוגה מקדימה', description: 'לראות איך אחרים רואים אותך.', onClick: onPreviewClick, icon: Edit3, missingItems: !hasSeenPreview ? ['יש לצפות בתצוגה המקדימה של הפרופיל'] : [] },
    ];

    const completedCount = tasks.filter(t => t.isCompleted).length;
    const isAllComplete = completedCount === tasks.length;
    const completionPercentage = Math.round((completedCount / tasks.length) * 100);

    return (
        <AnimatePresence>
            <motion.div layout initial={{ opacity: 0, y: -20 }} animate={{ opacity: 1, y: 0 }} exit={{ opacity: 0, height: 0, transition: { duration: 0.4 } }} transition={{ duration: 0.5, ease: "easeOut" }} className="mb-8 rounded-3xl shadow-xl border border-white/50 bg-white/70 backdrop-blur-md overflow-hidden">
                <div className="p-4 sm:p-6">
                    <div className="md:flex md:items-center md:justify-between">
                        <div className="flex-1 text-center md:text-right">
                             <h2 className="text-xl font-bold text-slate-800 flex items-center justify-center md:justify-start gap-2">
                                {isAllComplete && <Sparkles className="w-6 h-6 text-amber-500" />}
                                {isAllComplete ? `כל הכבוד, ${user.firstName}! הפרופיל שלך מושלם!` : `ברוך הבא, ${user.firstName}! בוא נכין את הפרופיל שלך להצלחה`}
                            </h2>
                            <AnimatePresence initial={false}>
                                {!isMinimized && (<motion.p initial={{ opacity: 0, height: 0, marginTop: 0 }} animate={{ opacity: 1, height: 'auto', marginTop: '0.25rem' }} exit={{ opacity: 0, height: 0, marginTop: 0 }} className="text-slate-600 text-sm md:text-base overflow-hidden">{isAllComplete ? 'השלמת את כל השלבים. פרופיל עשיר הוא המפתח למציאת ההתאמה המדויקת ביותר.' : 'השלמת הצעדים הבאים תקדם אותך משמעותית למציאת התאמה.'}</motion.p>)}
                            </AnimatePresence>
                        </div>
                        <div className="mt-4 md:mt-0 md:w-auto lg:w-1/3 flex items-center gap-4">
                             <div className="flex-1">
                                <div className="flex justify-between items-center text-sm mb-1">
                                    <span className="font-medium text-gray-700">השלמת הפרופיל</span>
                                    <span className="font-bold text-cyan-600">{completionPercentage}%</span>
                                </div>
                                <Progress value={completionPercentage} className="h-2 bg-slate-200/70" />
                            </div>
                            <Button variant="ghost" size="icon" className="text-slate-500 hover:bg-slate-200/50 rounded-full flex-shrink-0" onClick={() => setIsMinimized(!isMinimized)} aria-label={isMinimized ? "הרחב" : "מזער"}>
                                {isMinimized ? <ChevronDown className="h-5 w-5" /> : <ChevronUp className="h-5 w-5" />}
                            </Button>
                        </div>
                    </div>
                    <AnimatePresence initial={false}>
                        {!isMinimized && (
                            <motion.div key="checklist-content" initial={{ height: 0, opacity: 0 }} animate={{ height: "auto", opacity: 1, transition: { opacity: { delay: 0.1 } } }} exit={{ height: 0, opacity: 0, transition: { duration: 0.3 } }} className="overflow-hidden" onMouseLeave={() => setActiveItemId(null)}>
                                <div className="mt-6 grid grid-cols-2 sm:grid-cols-3 md:grid-cols-5 gap-3 sm:gap-4">
                                    {tasks.map((task) => (<ChecklistItem key={task.id} {...task} isActive={activeItemId === task.id} setActiveItemId={setActiveItemId} />))}
                                </div>
                            </motion.div>
                        )}
                    </AnimatePresence>
                </div>
            </motion.div>
        </AnimatePresence>
    );
};
--- End of Content for ProfileChecklist.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\user\Desktop\matchpoint\shidduch-system\src\app\(authenticated)\profile\components\dashboard\UnifiedProfileDashboard.tsx
--------------------------------------------------------------------------------
Content:
// src/app/(authenticated)/profile/components/dashboard/UnifiedProfileDashboard.tsx
"use client";

import React, { useState, useEffect, useCallback } from "react";
import { useSession } from "next-auth/react";
import Link from 'next/link';
import { useRouter } from "next/navigation";
import { toast } from "sonner";
import { cn } from "@/lib/utils";
import type { User as SessionUserType } from '@/types/next-auth';

import { ProfileChecklist } from "./ProfileChecklist";

// UI Components
import { Button } from "@/components/ui/button";
import { Dialog, DialogContent, DialogTrigger } from "@/components/ui/dialog";
import { Alert, AlertDescription } from "@/components/ui/alert";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { ScrollArea, ScrollBar } from "@/components/ui/scroll-area";

// Shared Profile Components
import {
  ProfileCard,
  PhotosSection,
  PreferencesSection,
  ProfileSection,
  QuestionnaireResponsesSection,
} from "@/app/components/profile";

// Icons
import { Eye, Loader2 } from "lucide-react";

// Types
import type {
  UserProfile,
  UserImage,
  QuestionnaireResponse,
  UpdateValue,
} from "@/types/next-auth";

interface UnifiedProfileDashboardProps {
  viewOnly?: boolean;
  userId?: string;
  initialTab?: string;
}

const UnifiedProfileDashboard: React.FC<UnifiedProfileDashboardProps> = ({
  viewOnly = false,
  userId,
  initialTab = "overview",
}) => {
  const { data: session, status: sessionStatus, update: updateSession } = useSession();
  const router = useRouter();
  
  const [profileData, setProfileData] = useState<UserProfile | null>(null);
  const [images, setImages] = useState<UserImage[]>([]);
  const [questionnaireResponse, setQuestionnaireResponse] = useState<QuestionnaireResponse | null>(null);
  const [activeTab, setActiveTab] = useState(initialTab);
  const [isEditing, setIsEditing] = useState(false);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState("");
  const [previewOpen, setPreviewOpen] = useState(false);

  // --- START OF FIX 2: State management for hasSeenPreview ---
  // Initialize state based on the user's profile from the session.
  // This ensures the initial state is correct without waiting for a new fetch.
  const [hasSeenPreview, setHasSeenPreview] = useState(
    session?.user?.profile?.hasViewedProfilePreview || false
  );
  // --- END OF FIX 2 ---

  useEffect(() => {
    setActiveTab(initialTab);
  }, [initialTab]);

  const handleTabChange = (newTab: string) => {
    setActiveTab(newTab);
    router.push(`/profile?tab=${newTab}`, { scroll: false });
  };
  
  const isOwnProfile = !userId || (session?.user?.id === userId);

  const loadData = useCallback(async () => {
    setIsLoading(true);
    setError("");
    try {
      const profileUrl = userId ? `/api/profile?userId=${userId}` : "/api/profile";
      const profileResponse = await fetch(profileUrl);
      const profileJson = await profileResponse.json();

      if (!profileResponse.ok || !profileJson.success) {
        throw new Error(profileJson.message || "Failed to load profile");
      }
      setProfileData(profileJson.profile);
      setImages(profileJson.images || []);
      // --- START OF FIX 2: Update hasSeenPreview from fresh data ---
      if (profileJson.profile?.hasViewedProfilePreview) {
        setHasSeenPreview(true);
      }
      // --- END OF FIX 2 ---

      const questionnaireUrl = userId ? `/api/profile/questionnaire?userId=${userId}` : "/api/profile/questionnaire";
      const questionnaireResponse = await fetch(questionnaireUrl);
      const questionnaireJson = await questionnaireResponse.json();

      if (!questionnaireResponse.ok || !questionnaireJson.success) {
        console.warn("Could not load questionnaire:", questionnaireJson.message);
        setQuestionnaireResponse(null);
      } else {
        setQuestionnaireResponse(questionnaireJson.questionnaireResponse);
      }
    } catch (err: unknown) {
      console.error("Failed to load profile data:", err);
      let errorMessage = "שגיאה בטעינת הנתונים";
      if (err instanceof Error) {
        errorMessage = err.message || errorMessage;
      }
      setError(errorMessage);
      toast.error(errorMessage);
    } finally {
      setIsLoading(false);
    }
  }, [userId]);

  useEffect(() => {
    loadData();
  }, [loadData]);

  // --- START OF FIX 2: New async function to handle preview click ---
  const handlePreviewClick = async () => {
    // Open the preview modal immediately for good UX
    setPreviewOpen(true);

    // If the user hasn't seen it before (based on our state), update the backend.
    if (!hasSeenPreview) {
      try {
        const response = await fetch('/api/profile/viewed-preview', {
          method: 'POST',
        });

        if (!response.ok) {
          throw new Error('Failed to update preview status');
        }
        
        // Update local state to reflect the change immediately
        setHasSeenPreview(true);
        toast.success("תודה! שלב 'הצפייה בתצוגה' הושלם.");

        // Force a session update to make sure the new `hasViewedProfilePreview` flag
        // is synced with the session object for other components to use.
        await updateSession();
        
      } catch (error) {
        console.error("Error in handlePreviewClick:", error);
        toast.error("שגיאה בעדכון סטטוס הצפייה בתצוגה המקדימה.");
      }
    }
  };
  // --- END OF FIX 2 ---

  const handleSave = async (formData: Partial<UserProfile>) => {
    // This function remains unchanged.
    setIsLoading(true);
    try {
      const response = await fetch("/api/profile/update", {
        method: "PUT",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(formData),
      });

      const data = await response.json();
      if (data.success && data.profile) {
        await updateSession();
        setProfileData(data.profile);
        setIsEditing(false);
        toast.success("הפרופיל עודכן בהצלחה");
        setError("");
      } else {
        setError(data.message || "שגיאה בעדכון הפרופיל");
        toast.error(data.message || "שגיאה בעדכון הפרופיל");
      }
    } catch (err) {
      console.error("Save error:", err);
      setError("שגיאה בעדכון הפרופיל");
      toast.error("שגיאה בעדכון הפרופיל");
    } finally {
      setIsLoading(false);
    }
  };

  // handleImageUpload, handleSetMainImage, handleDeleteImage, handleQuestionnaireUpdate remain unchanged.
  const handleImageUpload = async (file: File) => {
    const formData = new FormData();
    formData.append("file", file);
    setIsLoading(true);
    try {
      const response = await fetch("/api/profile/images", {
        method: "POST",
        body: formData,
      });
      const data = await response.json();
      if (data.success) {
        setImages((prev) => [...prev, data.image]);
        await updateSession();
        toast.success("התמונה הועלתה בהצלחה");
        setError("");
      } else {
        setError(data.message || "שגיאה בהעלאת התמונה");
        toast.error(data.message || "שגיאה בהעלאת התמונה");
      }
    } catch (err) {
      console.error("Upload error:", err);
      setError("שגיאה בהעלאת התמונה");
      toast.error("שגיאה בהעלאת התמונה");
    } finally {
      setIsLoading(false);
    }
  };

  const handleSetMainImage = async (imageId: string) => {
    setIsLoading(true);
    try {
      const response = await fetch(`/api/profile/images/${imageId}`, {
        method: "PUT",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ isMain: true }),
      });
      const data = await response.json();
      if (data.success) {
        setImages(data.images);
        await updateSession();
        toast.success("התמונה הראשית עודכנה בהצלחה");
        setError("");
      } else {
        setError(data.message || "שגיאה בעדכון התמונה הראשית");
        toast.error(data.message || "שגיאה בעדכון התמונה הראשית");
      }
    } finally {
      setIsLoading(false);
    }
  };

  const handleDeleteImage = async (imageId: string) => {
    setIsLoading(true);
    try {
      const response = await fetch(`/api/profile/images/${imageId}`, {
        method: "DELETE",
      });
      const data = await response.json();
      if (data.success) {
        setImages((prev) => prev.filter((img) => img.id !== imageId));
        await updateSession();
        toast.success("התמונה נמחקה בהצלחה");
        setError("");
      } else {
        setError(data.message || "שגיאה במחיקת התמונה");
        toast.error(data.message || "שגיאה במחיקת התמונה");
      }
    } catch (err) {
      console.error("Delete image error:", err);
      setError("שגיאה במחיקת התמונה");
      toast.error("שגיאה במחיקת התמונה");
    } finally {
      setIsLoading(false);
    }
  };

  const handleQuestionnaireUpdate = async (world: string, questionId: string, value: UpdateValue) => {
    setIsLoading(true);
    try {
      const payload = { worldKey: world, questionId: questionId, value };
      const response = await fetch("/api/profile/questionnaire", {
        method: "PATCH",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(payload),
      });

      const data = await response.json();
      if (data.success) {
        setQuestionnaireResponse(data.data);
        toast.success("השאלון עודכן בהצלחה");
        setError("");
      } else {
        setError(data.message || "שגיאה בעדכון השאלון");
        toast.error(data.message || "שגיאה בעדכון השאלון");
      }
    } catch (err) {
      console.error("Failed to update questionnaire:", err);
      setError("שגיאה בעדכון השאלון");
      toast.error("שגיאה בעדכון השאלון");
    } finally {
      setIsLoading(false);
    }
  };
  
  // Loading and error states remain unchanged.
  if (isLoading && !profileData) {
    return (
      <div className="flex items-center justify-center min-h-screen bg-gradient-to-br from-cyan-50 via-white to-pink-50" dir="rtl">
        <div className="flex items-center gap-2 text-lg text-cyan-600">
          <Loader2 className="animate-spin h-6 w-6" />
          <span>טוען נתונים...</span>
        </div>
      </div>
    );
  }

  if (error && !profileData) {
    return (
      <div className="flex items-center justify-center min-h-screen bg-gradient-to-br from-red-50 via-white to-orange-50 p-4" dir="rtl">
        <Alert variant="destructive" className="max-w-md mx-auto">
          <AlertDescription className="text-center">{error}</AlertDescription>
        </Alert>
      </div>
    );
  }

  const user = session?.user as SessionUserType | undefined;
  
  return (
    <div className="relative min-h-screen w-full" dir="rtl">
      <div className="absolute inset-0 bg-gradient-to-br from-cyan-50 via-white to-pink-50 animate-gradient-slow -z-10" style={{ backgroundSize: "400% 400%" }} />
      <div className="absolute inset-0 opacity-10 bg-[radial-gradient(#06b6d4_1px,transparent_1px)] [background-size:30px_30px] -z-10"></div>
      <div className="relative max-w-7xl mx-auto py-8 sm:py-12 px-4 sm:px-6 lg:px-8 z-10">
        <div className="space-y-6 md:space-y-8">
          {error && <Alert variant="destructive"><AlertDescription>{error}</AlertDescription></Alert>}

          {/* --- START OF FIX 2: Connect the new handler to the component --- */}
                {isOwnProfile && user && (
       <ProfileChecklist 
    user={{
        ...user,
        images: images 
    }}
    hasSeenPreview={hasSeenPreview}
    onPreviewClick={handlePreviewClick}
    // העבר את ה-state של השאלון ישירות לקומפוננטה
    questionnaireResponse={questionnaireResponse}
/>
          )}

          {/* --- END OF FIX 2 --- */}

          {!viewOnly && isOwnProfile && (
            <div className="flex justify-center my-6 md:my-8">
              <div id="onboarding-target-preview-profile" className="flex justify-center my-6 md:my-8">
                <Dialog open={previewOpen} onOpenChange={setPreviewOpen}>
                  <DialogTrigger asChild>
                    <Button onClick={handlePreviewClick} variant="outline" size="lg" className="px-8 py-3 text-base sm:text-lg gap-2 rounded-full border-2 border-cyan-200 text-cyan-600 hover:bg-cyan-50 hover:border-cyan-400 transition-all duration-300 shadow-sm hover:shadow-md">
                      תצוגה מקדימה של הפרופיל <Eye className="w-5 h-5 sm:w-6 sm:h-6" />
                    </Button>
                  </DialogTrigger>
                  <DialogContent className="w-[95vw] max-w-6xl max-h-[90vh] overflow-y-auto p-6 bg-white/95 backdrop-blur-md rounded-3xl shadow-2xl border-none" dir="rtl">
                    {profileData ? <ProfileCard profile={profileData} images={images} questionnaire={questionnaireResponse} viewMode="candidate" /> : <p className="text-center text-gray-500 py-10">טוען תצוגה מקדימה...</p>}
                  </DialogContent>
                </Dialog>
              </div>
            </div>
          )}

          <Tabs value={activeTab} onValueChange={handleTabChange} className="w-full">
            <div className="flex justify-center mb-6 md:mb-8">
              <ScrollArea dir="rtl" className="w-auto max-w-full">
                <TabsList className="h-auto p-1.5 bg-white/70 backdrop-blur-sm rounded-full shadow-md gap-1 inline-flex flex-nowrap">
                  <TabsTrigger value="overview" className="px-3 sm:px-6 py-1.5 sm:py-2 rounded-full text-xs sm:text-base font-medium text-gray-600 data-[state=active]:bg-gradient-to-r data-[state=active]:from-cyan-100 data-[state=active]:to-pink-100 data-[state=active]:text-cyan-700 data-[state=active]:shadow-inner transition-all duration-300 whitespace-nowrap">פרטים כלליים</TabsTrigger>
                  <TabsTrigger value="photos" className="px-3 sm:px-6 py-1.5 sm:py-2 rounded-full text-xs sm:text-base font-medium text-gray-600 data-[state=active]:bg-gradient-to-r data-[state=active]:from-cyan-100 data-[state=active]:to-pink-100 data-[state=active]:text-cyan-700 data-[state=active]:shadow-inner transition-all duration-300 whitespace-nowrap">תמונות</TabsTrigger>
                  <TabsTrigger value="preferences" className="px-3 sm:px-6 py-1.5 sm:py-2 rounded-full text-xs sm:text-base font-medium text-gray-600 data-[state=active]:bg-gradient-to-r data-[state=active]:from-cyan-100 data-[state=active]:to-pink-100 data-[state=active]:text-cyan-700 data-[state=active]:shadow-inner transition-all duration-300 whitespace-nowrap">העדפות</TabsTrigger>
                  <TabsTrigger value="questionnaire" className="px-3 sm:px-6 py-1.5 sm:py-2 rounded-full text-xs sm:text-base font-medium text-gray-600 data-[state=active]:bg-gradient-to-r data-[state=active]:from-cyan-100 data-[state=active]:to-pink-100 data-[state=active]:text-cyan-700 data-[state=active]:shadow-inner transition-all duration-300 whitespace-nowrap">שאלון</TabsTrigger>
                </TabsList>
                <ScrollBar orientation="horizontal" className="mt-1" />
              </ScrollArea>
            </div>
            <div className="bg-white/80 backdrop-blur-lg rounded-3xl shadow-xl p-6 md:p-8 lg:p-10 transition-all duration-300 ease-in-out">
              <TabsContent value="overview" id="onboarding-target-edit-profile" className="focus-visible:ring-0 focus-visible:ring-offset-0">
                {profileData ? <ProfileSection profile={profileData} isEditing={isEditing} setIsEditing={setIsEditing} onSave={handleSave} viewOnly={viewOnly || !isOwnProfile} /> : <p className="text-center text-gray-500 py-10">טוען סקירה כללית...</p>}
              </TabsContent>
              <TabsContent value="photos" id="onboarding-target-photos" className="focus-visible:ring-0 focus-visible:ring-offset-0">
                <PhotosSection images={images} isUploading={isLoading} disabled={viewOnly || !isOwnProfile} onUpload={handleImageUpload} onSetMain={handleSetMainImage} onDelete={handleDeleteImage} />
              </TabsContent>
              <TabsContent value="preferences" id="onboarding-target-preferences" className="focus-visible:ring-0 focus-visible:ring-offset-0">
                {profileData ? <PreferencesSection profile={profileData} isEditing={isEditing} setIsEditing={setIsEditing} onChange={handleSave} viewOnly={viewOnly || !isOwnProfile} /> : <p className="text-center text-gray-500 py-10">טוען העדפות...</p>}
              </TabsContent>
              <TabsContent value="questionnaire" id="onboarding-target-questionnaire-tab" className="focus-visible:ring-0 focus-visible:ring-offset-0">
                {questionnaireResponse ? <QuestionnaireResponsesSection questionnaire={questionnaireResponse} onUpdate={handleQuestionnaireUpdate} isEditable={!viewOnly && isOwnProfile} /> : <div className="text-center py-12 text-gray-500">{isLoading ? "טוען שאלון..." : "לא מולאו תשובות לשאלון."}{!isLoading && isOwnProfile && (<Button asChild variant="link" className="mt-2 text-cyan-600"><Link href="/questionnaire"> למילוי השאלון</Link></Button>)}</div>}
              </TabsContent>
            </div>
          </Tabs>
        </div>
      </div>
    </div>
  );
};

export default UnifiedProfileDashboard;
--- End of Content for UnifiedProfileDashboard.tsx ---

