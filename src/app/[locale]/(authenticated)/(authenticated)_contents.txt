################################################################################
# Directory Content Map For: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\app\[locale]\(authenticated)
# Generated on: 2025-10-09 12:34:16
################################################################################

================================================================================
Directory: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\app\[locale]\(authenticated)
================================================================================

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\app\[locale]\(authenticated)\(authenticated)_contents.txt
--------------------------------------------------------------------------------
[This is the output log file itself. Content not included.]

================================================================================
Directory: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\app\[locale]\(authenticated)\admin
================================================================================

(This directory contains subdirectories but no files directly. See subdirectories below.)

================================================================================
Directory: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\app\[locale]\(authenticated)\admin\engagement
================================================================================

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\app\[locale]\(authenticated)\admin\engagement\page.tsx
--------------------------------------------------------------------------------
Content:
// בתוך page.tsx
   import { getServerSession } from 'next-auth';
   import { redirect } from 'next/navigation';
      import EngagementDashboard from '@/components/admin/EngagementDashboard';

   export default async function EngagementPage() {
     const session = await getServerSession();
     if (session?.user?.role !== 'ADMIN') {
       redirect('/');
     }
     
     return <EngagementDashboard />;
   }
--- End of Content for page.tsx ---

================================================================================
Directory: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\app\[locale]\(authenticated)\matches
================================================================================

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\app\[locale]\(authenticated)\matches\MatchesClientPage.tsx
--------------------------------------------------------------------------------
Content:
// src/app/[locale]/matches/MatchesClientPage.tsx

'use client';

import { useSession } from 'next-auth/react';
import MatchSuggestionsContainer from '@/components/suggestions/MatchSuggestionsContainer';
import { Skeleton } from '@/components/ui/skeleton';
import type {
  SuggestionsDictionary,
  ProfileCardDict,
} from '@/types/dictionary';

/**
 * הממשק (interface) מגדיר את ה-props שהרכיב הזה מקבל.
 * הוא מצפה לקבל אובייקט 'dict' המכיל את שני מילוני התרגום
 * הדרושים לו ולרכיבי הילד שלו: מילון ההצעות ומילון כרטיס הפרופיל.
 */
interface MatchesClientPageProps {
  suggestionsDict: SuggestionsDictionary;
  profileCardDict: ProfileCardDict;
}

/**
 * רכיב צד-לקוח (Client Component) האחראי על הצגת עמוד ההצעות.
 * הוא מנהל את אימות המשתמש ומעביר את הנתונים והתרגומים לרכיב התצוגה הראשי.
 */
export default function MatchesClientPage({ suggestionsDict, profileCardDict }: MatchesClientPageProps) {
  // קבלת נתוני המשתמש והסטטוס של החיבור
  const { data: session, status } = useSession();

  // בזמן שהחיבור מתבצע, הצג שלד טעינה (skeleton)
  if (status === 'loading') {
    return (
      <div className="container mx-auto p-6 space-y-4">
        <Skeleton className="h-48 w-full rounded-2xl" />
        <Skeleton className="h-48 w-full rounded-2xl" />
        <Skeleton className="h-48 w-full rounded-2xl" />
      </div>
    );
  }

  // אם המשתמש אינו מחובר, הצג הודעה מתאימה
  if (!session?.user?.id) {
    // ניתן להוסיף כאן רכיב מעוצב יותר או הפנייה לדף ההתחברות
    return (
      <div className="container mx-auto p-6 text-center text-red-600">
        אינך מורשה לצפות בדף זה. יש להתחבר למערכת.
      </div>
    );
  }

  // אם המשתמש מחובר, רנדר את קונטיינר ההצעות והעבר לו את הנתונים הנדרשים
  return (
    <MatchSuggestionsContainer
      userId={session.user.id}
      suggestionsDict={suggestionsDict}
      profileCardDict={profileCardDict}
    />
  );
}
--- End of Content for MatchesClientPage.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\app\[locale]\(authenticated)\matches\page.tsx
--------------------------------------------------------------------------------
Content:
// src/app/[locale]/matches/page.tsx

import { getDictionary } from '@/lib/dictionaries';
import type { Locale } from '../../../../../i18n-config';
import MatchesClientPage from './MatchesClientPage';

export default async function MatchesPage({
  params: { locale },
}: {
  params: { locale: Locale };
}) {
  const dictionary = await getDictionary(locale);

  // ✅ חילוץ החלקים הרלוונטיים מהמילון המלא
  return (
    <MatchesClientPage
      suggestionsDict={dictionary.suggestions}
      profileCardDict={dictionary.profilePage.profileCard} // <--- prop נפרד, בדיוק כמו ב-HomePage
    />
  );
}
--- End of Content for page.tsx ---

================================================================================
Directory: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\app\[locale]\(authenticated)\matchmaker
================================================================================

(This directory contains subdirectories but no files directly. See subdirectories below.)

================================================================================
Directory: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\app\[locale]\(authenticated)\matchmaker\clients
================================================================================

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\app\[locale]\(authenticated)\matchmaker\clients\CandidatesManagerClient.tsx
--------------------------------------------------------------------------------
Content:
// File: CandidatesManagerClient.tsx

'use client';

import CandidatesManager from '@/components/matchmaker/new/CandidatesManager/index';
import type { MatchmakerPageDictionary } from '@/types/dictionaries/matchmaker';
import type { ProfilePageDictionary } from '@/types/dictionary';

interface CandidatesManagerClientProps {
  matchmakerDict: MatchmakerPageDictionary;
  profileDict: ProfilePageDictionary;
  locale: string; // ▼▼▼ ADDED: locale prop ▼▼▼
}

export default function CandidatesManagerClient({
  matchmakerDict,
  profileDict,
  locale, // ▼▼▼ ADDED: destructure locale ▼▼▼
}: CandidatesManagerClientProps) {
  // ▼▼▼ CHANGE: Pass the dictionaries and the new locale prop down ▼▼▼
  return (
    <CandidatesManager
      matchmakerDict={matchmakerDict}
      profileDict={profileDict}
      locale={locale}
    />
  );
}
--- End of Content for CandidatesManagerClient.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\app\[locale]\(authenticated)\matchmaker\clients\page.tsx
--------------------------------------------------------------------------------
Content:
// File: src/app/some-path/page.tsx

import { getDictionary } from '@/lib/dictionaries';
import type { Locale } from '../../../../../../i18n-config';
import CandidatesManagerClient from './CandidatesManagerClient';

// This is a Server Component
export default async function ClientsPage({
  params: { locale },
}: {
  params: { locale: Locale };
}) {
  // Load the full dictionary on the server
  const dictionary = await getDictionary(locale);

  // Pass the required dictionary slices as props to the client component
  return (
    <CandidatesManagerClient
      matchmakerDict={dictionary.matchmakerPage}
      profileDict={dictionary.profilePage}
      locale={locale}
    />
  );
}
--- End of Content for page.tsx ---

================================================================================
Directory: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\app\[locale]\(authenticated)\matchmaker\suggestions
================================================================================

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\app\[locale]\(authenticated)\matchmaker\suggestions\MatchmakerDashboardPageClient.tsx
--------------------------------------------------------------------------------
Content:
// src/app/[locale]/matchmaker/dashboard/MatchmakerDashboardPageClient.tsx

"use client";

import { Suspense } from "react";
import MatchmakerDashboard from "@/components/matchmaker/suggestions/container/MatchmakerDashboard";
import { Card, CardContent } from "@/components/ui/card";
import type {
  SuggestionsDictionary,
  MatchmakerPageDictionary,
  ProfilePageDictionary,
} from "@/types/dictionary";

// ✅ 1. הגדר את ה-props כפרמטרים נפרדים
interface MatchmakerDashboardPageClientProps {
  suggestionsDict: SuggestionsDictionary;
  matchmakerDict: MatchmakerPageDictionary;
  profileDict: ProfilePageDictionary;
}

// ✅ 2. עדכן את הרכיב כך שיקבל את המילונים הנפרדים
export default function MatchmakerDashboardPageClient({
  suggestionsDict,
  matchmakerDict,
  profileDict,
}: MatchmakerDashboardPageClientProps) {
  return (
    <div className="min-h-screen bg-background">
      <Suspense
        fallback={
          <Card className="m-4">
            <CardContent className="p-6">
              <div className="flex justify-center items-center">
                <div className="text-xl">טוען...</div>
              </div>
            </CardContent>
          </Card>
        }
      >
        {/* ✅ 3. העבר את המילונים הנפרדים הלאה לרכיב MatchmakerDashboard */}
        <MatchmakerDashboard
          suggestionsDict={suggestionsDict}
          matchmakerDict={matchmakerDict}
          profileDict={profileDict}
        />
      </Suspense>
    </div>
  );
}
--- End of Content for MatchmakerDashboardPageClient.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\app\[locale]\(authenticated)\matchmaker\suggestions\page.tsx
--------------------------------------------------------------------------------
Content:
// src/app/[locale]/matchmaker/dashboard/page.tsx

import { getDictionary } from '@/lib/dictionaries';
import type { Locale } from '../../../../../../i18n-config';
import MatchmakerDashboardPageClient from './MatchmakerDashboardPageClient';
import type {
  MatchmakerPageDictionary,
  SuggestionsDictionary,
  ProfilePageDictionary,
} from '@/types/dictionary';

// זהו רכיב שרת (Server Component).
export default async function SuggestionsPage({
  params: { locale },
}: {
  params: { locale: Locale };
}) {
  // 1. טוענים את המילון המלא כאן, בצד השרת.
  const dictionary = await getDictionary(locale);

  // ✅ 2. קוראים לרכיב הלקוח ומעבירים לו את המילונים כ-props נפרדים.
  return (
    <MatchmakerDashboardPageClient
      suggestionsDict={dictionary.suggestions as SuggestionsDictionary}
      matchmakerDict={dictionary.matchmakerPage as MatchmakerPageDictionary}
      profileDict={dictionary.profilePage as ProfilePageDictionary}
    />
  );
}
--- End of Content for page.tsx ---

================================================================================
Directory: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\app\[locale]\(authenticated)\messages
================================================================================

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\app\[locale]\(authenticated)\messages\MessagesClientPage.tsx
--------------------------------------------------------------------------------
Content:
// src/app/[locale]/messages/MessagesClientPage.tsx
'use client';

import React, { useState, useEffect, useCallback } from 'react';
import { useSession } from 'next-auth/react';
import { Loader2, Inbox, Zap, RefreshCw } from 'lucide-react';
import { AnimatePresence, motion } from 'framer-motion';
import type { FeedItem } from '@/types/messages';
import NotificationCard from '@/components/messages/NotificationCard';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { cn } from '@/lib/utils';
import { Alert, AlertTitle, AlertDescription } from '@/components/ui/alert';
import type { MessagesPageDict } from '@/types/dictionary';
import type { Locale } from '../../../../../i18n-config';

type FilterType = 'all' | 'action_required' | 'updates';

interface MessagesClientPageProps {
  dict: MessagesPageDict;
  locale: Locale;
}

export default function MessagesClientPage({ dict, locale }: MessagesClientPageProps) {
  const { data: session } = useSession();
  const [feedItems, setFeedItems] = useState<FeedItem[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [activeFilter, setActiveFilter] = useState<FilterType>('all');

  const userId = session?.user?.id;

  const fetchFeed = useCallback(async () => {
    setIsLoading(true);
    setError(null);
    try {
      const response = await fetch('/api/messages/feed');
      if (!response.ok) throw new Error('Failed to fetch activity feed');
      const data = await response.json();
      if (data.success) {
        setFeedItems(data.feed);
      } else {
        throw new Error(data.error || 'API returned an error');
      }
    } catch (err) {
      setError(
        err instanceof Error ? err.message : 'An unknown error occurred'
      );
    } finally {
      setIsLoading(false);
    }
  }, []);

  useEffect(() => {
    if (userId) {
      fetchFeed();
    } else {
      setIsLoading(false); 
    }
  }, [userId, fetchFeed]);

  const filteredItems = React.useMemo(() => {
    if (activeFilter === 'all') return feedItems;
    if (activeFilter === 'action_required')
      return feedItems.filter((item) => item.type === 'ACTION_REQUIRED');
    if (activeFilter === 'updates')
      return feedItems.filter(
        (item) =>
          item.type === 'STATUS_UPDATE' || item.type === 'NEW_SUGGESTION'
      );
    return feedItems;
  }, [feedItems, activeFilter]);

  const actionRequiredCount = feedItems.filter(
    (item) => item.type === 'ACTION_REQUIRED'
  ).length;

  if (isLoading) {
    return (
      <div className="flex items-center justify-center h-[calc(100vh-80px)]">
        <Loader2 className="h-10 w-10 animate-spin text-cyan-600" />
      </div>
    );
  }

  return (
    <div 
      className="min-h-screen bg-gradient-to-br from-slate-50 via-cyan-50/20 to-emerald-50/20"
      dir={locale === 'he' ? 'rtl' : 'ltr'}
    >
      <div className="container mx-auto px-4 py-8 max-w-4xl">
        <header className="text-center mb-10">
          <h1 className="text-3xl md:text-4xl font-bold bg-gradient-to-r from-purple-600 via-cyan-600 to-emerald-600 bg-clip-text text-transparent mb-3">
            {dict.header.title}
          </h1>
          <p className="text-lg text-gray-600">
            {dict.header.subtitle}
          </p>
        </header>

        <AnimatePresence>
          {actionRequiredCount > 0 && (
            <motion.div
              initial={{ opacity: 0, y: -20, height: 0 }}
              animate={{ opacity: 1, y: 0, height: 'auto' }}
              exit={{ opacity: 0, y: -20, height: 0 }}
              transition={{ duration: 0.5, ease: 'easeInOut' }}
              className="mb-8"
            >
              <Alert className="bg-gradient-to-r from-orange-400 to-amber-400 text-white border-0 shadow-2xl rounded-2xl">
                <Zap className="h-5 w-5 text-white" />
                <AlertTitle className="font-bold text-lg">
                  {actionRequiredCount === 1
                    ? dict.actionBanner.titleSingle
                    : dict.actionBanner.titleMultiple.replace('{{count}}', actionRequiredCount.toString())}
                </AlertTitle>
                <AlertDescription>
                  {dict.actionBanner.description}
                </AlertDescription>
              </Alert>
            </motion.div>
          )}
        </AnimatePresence>

        <div className="flex flex-col sm:flex-row justify-between items-center gap-4 mb-8">
          <div className="flex items-center gap-2 p-1 bg-white/80 backdrop-blur-sm rounded-full shadow-md border border-gray-200">
            <Button
              variant={activeFilter === 'all' ? 'default' : 'ghost'}
              onClick={() => setActiveFilter('all')}
              className="rounded-full"
            >
              {dict.filters.all}
            </Button>
            <Button
              variant={activeFilter === 'action_required' ? 'default' : 'ghost'}
              onClick={() => setActiveFilter('action_required')}
              className="rounded-full relative"
            >
              {dict.filters.actionRequired}
              {actionRequiredCount > 0 && (
                <Badge className="absolute -top-1 -right-2 bg-orange-500 text-white animate-pulse">
                  {actionRequiredCount}
                </Badge>
              )}
            </Button>
            <Button
              variant={activeFilter === 'updates' ? 'default' : 'ghost'}
              onClick={() => setActiveFilter('updates')}
              className="rounded-full"
            >
              {dict.filters.updates}
            </Button>
          </div>
          <Button variant="outline" onClick={fetchFeed} disabled={isLoading}>
            <RefreshCw
              className={cn('w-4 h-4', locale === 'he' ? 'ml-2' : 'mr-2', isLoading && 'animate-spin')}
            />
            {dict.filters.refresh}
          </Button>
        </div>

        {error && (
          <div className="text-center p-4 bg-red-50 text-red-700 rounded-lg">
            {dict.error.replace('{{error}}', error)}
          </div>
        )}

        {filteredItems.length === 0 && !isLoading ? (
          <div className="flex flex-col items-center justify-center min-h-[400px] text-center p-8 bg-white/50 rounded-2xl shadow-inner border border-gray-200/50">
            <Inbox className="w-20 h-20 text-gray-300 mb-6" />
            <h3 className="text-2xl font-bold text-gray-700">{dict.emptyState.title}</h3>
            <p className="text-gray-500 mt-2 max-w-md">
              {activeFilter === 'all'
                ? dict.emptyState.descriptionAll
                : dict.emptyState.descriptionFiltered}
            </p>
          </div>
        ) : (
          <div className="space-y-4">
            <AnimatePresence>
              {filteredItems.map((item, index) => (
                <motion.div
                  key={item.id}
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  exit={{ opacity: 0, y: -20 }}
                  transition={{ duration: 0.3, delay: index * 0.05 }}
                >
                  <NotificationCard 
                    item={item} 
                    userId={userId!} 
                    dict={dict.notificationCard}
                    locale={locale}
                  />
                </motion.div>
              ))}
            </AnimatePresence>
          </div>
        )}
      </div>
    </div>
  );
}
--- End of Content for MessagesClientPage.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\app\[locale]\(authenticated)\messages\page.tsx
--------------------------------------------------------------------------------
Content:
// src/app/[locale]/messages/page.tsx
import { getDictionary } from '@/lib/dictionaries';
import type { Locale } from '../../../../../i18n-config';
import MessagesClientPage from './MessagesClientPage';

export default async function MessagesPage({
  params: { locale },
}: {
  params: { locale: Locale };
}) {
  const dictionary = await getDictionary(locale);

  // חילוץ החלק הרלוונטי מהמילון המלא והעברתו כ-prop
  return <MessagesClientPage dict={dictionary.messagesPage} locale={locale} />;
}
--- End of Content for page.tsx ---

================================================================================
Directory: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\app\[locale]\(authenticated)\profile
================================================================================

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\app\[locale]\(authenticated)\profile\ProfilePageClient.tsx
--------------------------------------------------------------------------------
Content:
'use client';

import React, { Suspense } from 'react';
import UnifiedProfileDashboard from '@/components/profile/sections/UnifiedProfileDashboard';
import { useSearchParams } from 'next/navigation';
import { ProfilePageDictionary } from '@/types/dictionary';

// ממשק ה-props של ProfilePageContent מעודכן לכלול את locale
interface ProfilePageContentProps {
  dict: ProfilePageDictionary;
  locale: string; // <-- הוספה
}

// A small wrapper to handle Suspense for useSearchParams
// הקומפוננטה מקבלת עכשיו locale
const ProfilePageContent = ({ dict, locale }: ProfilePageContentProps) => {
  const searchParams = useSearchParams();
   const tabFromUrl = searchParams.get('tab');
  console.log(
    '---[ CLIENT LOG 1 | ProfilePageClient.tsx ]--- קורא את פרמטר ה-URL. הערך של "tab" הוא:',
    tabFromUrl
  );
  const viewOnly = searchParams.get('viewOnly') === 'true';
  const userId = searchParams.get('userId') || undefined;
  const initialTab = searchParams.get('tab') || 'overview';
 console.log(
    `---[ CLIENT LOG 2 | ProfilePageClient.tsx ]--- מגדיר את initialTab לערך "${initialTab}". הערך הזה מועבר ל-UnifiedProfileDashboard.`
  );
  // הערה: אין צורך ב-dir="rtl" כאן, כי הקומפוננטה הפנימית תטפל בזה
  return (
    <div className="min-h-screen bg-background">
      <UnifiedProfileDashboard
        viewOnly={viewOnly}
        userId={userId}
        initialTab={initialTab}
        dict={dict}
        locale={locale} // <-- העברת ה-locale לקומפוננטה
      />
    </div>
  );
};

// ממשק ה-props של ProfilePageClient מעודכן לכלול את locale
interface ProfilePageClientProps {
  dict: ProfilePageDictionary;
  locale: string; // <-- הוספה
}

// רכיב הלקוח הראשי מקבל עכשיו גם את המילון וגם את ה-locale
const ProfilePageClient = ({ dict, locale }: ProfilePageClientProps) => {
  return (
    <Suspense>
      {/* Suspense פנימי עבור useSearchParams */}
      {/* מעבירים את ה-locale הלאה ל-ProfilePageContent */}
      <ProfilePageContent dict={dict} locale={locale} />
    </Suspense>
  );
};

export default ProfilePageClient;
--- End of Content for ProfilePageClient.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\app\[locale]\(authenticated)\profile\page.tsx
--------------------------------------------------------------------------------
Content:
import React, { Suspense } from 'react';
import { Loader2 } from 'lucide-react';
import { getDictionary } from '@/lib/dictionaries';
import { Locale } from '@/../i18n-config'; // שיניתי את הנתיב כדי שיתאים לפרויקט סטנדרטי, שנה חזרה אם צריך
import ProfilePageClient from './ProfilePageClient';

// רכיב השרת
export default async function ProfilePage({
  params: { locale },
}: {
  params: { locale: Locale };
}) {
  console.log(
    `---[ SERVER LOG | page.tsx ]--- עמוד הפרופיל נטען עבור שפה: "${locale}". הוא יטען את ProfilePageClient שאחראי על קריאת הטאב מה-URL.`
  );
  // 1. טעינת המילון בצד השרת
  const dictionary = await getDictionary(locale);

  // 2. רינדור רכיב הלקוח עם המילון, עטוף ב-Suspense
  return (
    <Suspense
      fallback={
        <div className="flex items-center justify-center min-h-screen bg-gradient-to-br from-cyan-50 via-white to-pink-50">
          <div className="flex items-center gap-2 text-lg text-cyan-600">
            <Loader2 className="animate-spin h-6 w-6" />
            {/* שימוש במילון ב-fallback */}
            <span>{dictionary.profilePage.pageLoader}</span>
          </div>
        </div>
      }
    >
      {/* 
        ▼▼▼ התיקון נמצא כאן ▼▼▼
        הוספנו את ה-prop 'locale' והעברנו לו את המשתנה locale
        שקיבלנו בפרמטרים של העמוד.
      */}
      <ProfilePageClient dict={dictionary.profilePage} locale={locale} />
    </Suspense>
  );
}
--- End of Content for page.tsx ---

================================================================================
Directory: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\app\[locale]\(authenticated)\settings
================================================================================

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\app\[locale]\(authenticated)\settings\SettingsClientPage.tsx
--------------------------------------------------------------------------------
Content:
// src/app/[locale]/settings/SettingsClientPage.tsx

"use client";

import { useSession } from "next-auth/react";
import AccountSettings from "@/components/profile/account-settings";
import { Skeleton } from "@/components/ui/skeleton";
import type { AccountSettingsDict } from "@/types/dictionary";
import type { Locale } from "../../../../../i18n-config"; // ✨ שינוי 1: ייבוא טיפוס השפה

// ✨ שינוי 2: עדכון הממשק לקבלת המילון וגם את השפה (locale)
interface SettingsClientPageProps {
  dict: AccountSettingsDict;
  locale: Locale;
}

export default function SettingsClientPage({ dict, locale }: SettingsClientPageProps) {
  const { data: session, status } = useSession();

  if (status === "loading") {
    return (
      <div className="container mx-auto p-6 max-w-2xl">
        <Skeleton className="h-[600px] w-full rounded-2xl" />
      </div>
    );
  }

  if (status === "unauthenticated") {
    return (
      <div className="container mx-auto p-6 text-center text-red-600">
        Access Denied. Please sign in to view your account settings.
      </div>
    );
  }
  
  if (!session?.user) {
    return (
      <div className="container mx-auto p-6 text-center text-red-600">
        Error: Could not load user data. The session might be invalid.
      </div>
    );
  }

  const userData = {
    id: session.user.id,
    email: session.user.email,
    firstName: session.user.firstName,
    lastName: session.user.lastName,
    role: session.user.role,
    status: session.user.status,
    isVerified: session.user.isVerified,
    lastLogin: session.user.lastLogin ?? null,
    createdAt: session.user.createdAt,
    marketingConsent: session.user.marketingConsent,
  };

  // ✨ שינוי 3: העברת המילון וה-locale שהתקבלו ב-props לרכיב AccountSettings
  return <AccountSettings user={userData} dict={dict} locale={locale} />;
}
--- End of Content for SettingsClientPage.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\app\[locale]\(authenticated)\settings\page.tsx
--------------------------------------------------------------------------------
Content:
// src/app/[locale]/settings/page.tsx

import { getDictionary } from '@/lib/dictionaries';
import type { Locale } from '../../../../../i18n-config';
import SettingsClientPage from './SettingsClientPage';
import { redirect } from 'next/navigation';
import { getServerSession } from 'next-auth';
import { authOptions } from '@/lib/auth';

export default async function SettingsPage({
  params: { locale },
}: {
  params: { locale: Locale };
}) {
  const session = await getServerSession(authOptions);
  if (!session?.user) {
    redirect(`/${locale}/auth/signin?callbackUrl=/${locale}/settings`);
  }

  const dictionary = await getDictionary(locale);

  return (
    <div className="container mx-auto p-4 sm:p-6">
      {/* ✨ שינוי: העברת ה-locale שהתקבל מה-URL כ-prop לקומפוננטת הלקוח */}
      <SettingsClientPage
        dict={dictionary.profilePage.accountSettings}
        locale={locale}
      />
    </div>
  );
}
--- End of Content for page.tsx ---

