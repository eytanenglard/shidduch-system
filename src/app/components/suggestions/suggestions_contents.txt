################################################################################
# Directory Content Map For: C:\Users\user\Desktop\matchpoint\shidduch-system\src\app\components\suggestions
# Generated on: 2025-08-05 18:05:42
################################################################################

================================================================================
Directory: C:\Users\user\Desktop\matchpoint\shidduch-system\src\app\components\suggestions
================================================================================

--------------------------------------------------------------------------------
File: C:\Users\user\Desktop\matchpoint\shidduch-system\src\app\components\suggestions\MatchSuggestionsContainer.tsx
--------------------------------------------------------------------------------
Content:
// src/app/components/suggestions/MatchSuggestionsContainer.tsx

'use client';

import React, { useState, useEffect, useCallback } from 'react';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card';
import {
  Clock,
  History,
  AlertCircle,
  RefreshCw,
  Bell,
  TrendingUp,
  Users,
  CheckCircle,
  Target,
  Sparkles,
  Heart,
  Zap,
  XCircle,
  Loader2, // הוספת אייקון טעינה מה-AI
} from 'lucide-react';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { toast } from 'sonner';
import type { MatchSuggestion } from '@prisma/client';
import type { UserProfile, UserImage } from '@/types/next-auth';

import SuggestionsList from './list/SuggestionsList';
import type { ExtendedMatchSuggestion } from './types';
import { cn } from '@/lib/utils';
import {
  getEnhancedStatusInfo,
  getPartyIndicator,
} from '@/lib/utils/suggestionUtils';

import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
} from '@/components/ui/alert-dialog';

// קומפוננטת מסך הטעינה המשופר, כפי שהוצע על ידי ה-AI
const LoadingSkeleton: React.FC = () => (
  <div className="min-h-screen bg-gradient-to-br from-slate-50 via-cyan-50/20 to-emerald-50/20">
    <div className="container mx-auto px-4 py-8">
      {/* Hero Skeleton */}
      <div className="mb-8">
        <div className="text-center mb-8">
          <div className="inline-flex items-center gap-3 mb-4">
            <div className="p-3 rounded-full bg-gradient-to-r from-purple-100 to-cyan-100 animate-pulse">
              <div className="w-8 h-8 bg-gray-300 rounded-full animate-pulse"></div>
            </div>
          </div>
          <div className="space-y-4">
            <div className="h-12 bg-gradient-to-r from-gray-200 to-gray-300 rounded-2xl mx-auto w-80 animate-pulse"></div>
            <div className="h-6 bg-gray-200 rounded-xl mx-auto w-96 animate-pulse"></div>
          </div>
        </div>
        <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
          {Array.from({ length: 3 }).map((_, index) => (
            <div
              key={index}
              className="border-0 shadow-lg overflow-hidden bg-white rounded-2xl animate-pulse"
            >
              <div className="p-6">
                <div className="flex items-center justify-between mb-4">
                  <div className="p-3 rounded-xl bg-gray-200 w-12 h-12"></div>
                  <div className="text-right">
                    <div className="w-16 h-8 bg-gray-200 rounded-lg mb-2"></div>
                  </div>
                </div>
                <div className="space-y-2">
                  <div className="h-6 bg-gray-200 rounded-lg w-3/4"></div>
                  <div className="h-4 bg-gray-200 rounded-lg w-1/2"></div>
                </div>
              </div>
            </div>
          ))}
        </div>
      </div>

      {/* Main Card Skeleton */}
      <div className="shadow-2xl border-0 bg-white/95 backdrop-blur-sm overflow-hidden rounded-3xl">
        {/* Header Skeleton */}
        <div className="px-8 py-6 bg-gradient-to-r from-cyan-50/80 via-white to-emerald-50/30 border-b border-gray-100">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-3">
              <div className="w-10 h-10 bg-gray-200 rounded-full animate-pulse"></div>
            </div>
            <div className="h-6 bg-gray-200 rounded-lg w-32 animate-pulse"></div>
            <div className="w-16 h-4"></div>
          </div>
        </div>

        {/* Content Skeleton */}
        <div className="p-6">
          {/* Tabs Skeleton */}
          <div className="flex justify-center mb-6">
            <div className="grid grid-cols-3 bg-purple-50/50 rounded-2xl p-1 h-14 w-fit gap-2">
              {Array.from({ length: 3 }).map((_, index) => (
                <div
                  key={index}
                  className="px-6 py-3 rounded-xl bg-gray-200 animate-pulse w-24 h-10"
                ></div>
              ))}
            </div>
          </div>

          {/* Loading Animation */}
          <div className="flex flex-col items-center justify-center min-h-[400px] text-center space-y-6">
            <div className="relative">
              <div className="w-24 h-24 rounded-full bg-gradient-to-br from-purple-100 via-cyan-100 to-emerald-100 animate-pulse border-4 border-white shadow-xl"></div>
              <div className="absolute inset-0 flex items-center justify-center">
                <Loader2 className="w-12 h-12 text-purple-600 animate-spin" />
              </div>
              <div className="absolute inset-0 rounded-full bg-gradient-to-r from-purple-400 via-cyan-400 to-emerald-400 opacity-20 animate-ping"></div>
            </div>

            <div className="space-y-3">
              <h3 className="text-2xl font-bold bg-gradient-to-r from-purple-600 via-cyan-600 to-emerald-600 bg-clip-text text-transparent">
                טוען את ההצעות שלך...
              </h3>
              <p className="text-gray-600 max-w-md leading-relaxed">
                אנחנו מכינים עבורך את ההצעות המתאימות ביותר
              </p>
            </div>

            <div className="flex items-center gap-2">
              {Array.from({ length: 3 }).map((_, index) => (
                <div
                  key={index}
                  className="w-3 h-3 rounded-full bg-gradient-to-r from-purple-500 to-cyan-500 animate-bounce"
                  style={{ animationDelay: `${index * 0.2}s` }}
                ></div>
              ))}
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
);

// קומפוננטת סטטיסטיקות מפושטת ונקייה עם עיצוב חדש
const WelcomeStats: React.FC<{
  activeSuggestions: ExtendedMatchSuggestion[];
  historySuggestions: ExtendedMatchSuggestion[];
  pendingCount: number;
  userId: string;
}> = ({ activeSuggestions, historySuggestions, pendingCount, userId }) => {
  const totalSuggestions = activeSuggestions.length + historySuggestions.length;
  const approvedCount = [...activeSuggestions, ...historySuggestions].filter(
    (s) =>
      s.status === 'FIRST_PARTY_APPROVED' ||
      s.status === 'SECOND_PARTY_APPROVED'
  ).length;

  const myTurnCount = activeSuggestions.filter((s) => {
    const isFirstParty = s.firstPartyId === userId;
    return (
      (s.status === 'PENDING_FIRST_PARTY' && isFirstParty) ||
      (s.status === 'PENDING_SECOND_PARTY' && !isFirstParty)
    );
  }).length;

  const stats = [
    {
      label: 'הצעות חדשות',
      value: activeSuggestions.length,
      icon: <Sparkles className="w-5 h-5" />,
      color: 'from-cyan-500 to-blue-500',
      description: 'ממתינות לתשובתך',
    },
    {
      label: 'התור שלך',
      value: myTurnCount,
      icon: <Zap className="w-5 h-5" />,
      color: 'from-orange-500 to-amber-500',
      description: 'דורשות החלטה ממך',
      pulse: myTurnCount > 0,
    },
    {
      label: 'אושרו',
      value: approvedCount,
      icon: <CheckCircle className="w-5 h-5" />,
      color: 'from-emerald-500 to-green-500',
      description: 'הצעות שאושרו',
    },
  ];

  return (
    <div className="mb-8">
      <div className="text-center mb-8">
        <div className="inline-flex items-center gap-3 mb-4">
          <div className="p-3 rounded-full bg-gradient-to-r from-purple-100 to-cyan-100">
            <Heart className="w-8 h-8 text-purple-600" />
          </div>
        </div>
        <h1 className="text-3xl md:text-4xl font-bold bg-gradient-to-r from-purple-600 via-cyan-600 to-emerald-600 bg-clip-text text-transparent mb-3">
          ההצעות שלך
        </h1>
        <p className="text-lg text-gray-600 max-w-2xl mx-auto">
          כל הצעה היא הזדמנות שנבחרה בקפידה עבורך על ידי הצוות שלנו.
        </p>
      </div>
      <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
        {stats.map((stat, index) => (
          <Card
            key={index}
            className="border-0 shadow-lg overflow-hidden bg-white hover:shadow-xl transition-all duration-300 group"
          >
            <CardContent className="p-6">
              <div className="flex items-center justify-between mb-4">
                <div
                  className={cn(
                    'p-3 rounded-xl bg-gradient-to-r text-white shadow-lg group-hover:scale-110 transition-transform duration-300',
                    stat.color,
                    stat.pulse && 'animate-pulse'
                  )}
                >
                  {stat.icon}
                </div>
                <div className="text-right">
                  <div
                    className={cn(
                      'text-3xl font-bold text-gray-900',
                      stat.pulse && 'animate-bounce'
                    )}
                  >
                    {stat.value}
                  </div>
                </div>
              </div>
              <div className="space-y-1">
                <h3 className="font-bold text-lg text-gray-800">
                  {stat.label}
                </h3>
                <p className="text-sm text-gray-600">{stat.description}</p>
              </div>
            </CardContent>
          </Card>
        ))}
      </div>
    </div>
  );
};

interface MatchSuggestionsContainerProps {
  userId: string;
  className?: string;
}

const MatchSuggestionsContainer: React.FC<MatchSuggestionsContainerProps> = ({
  userId,
  className,
}) => {
  // States
  const [activeSuggestions, setActiveSuggestions] = useState<
    ExtendedMatchSuggestion[]
  >([]);
  const [historySuggestions, setHistorySuggestions] = useState<
    ExtendedMatchSuggestion[]
  >([]);
  const [isLoading, setIsLoading] = useState(true);
  const [isRefreshing, setIsRefreshing] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [activeTab, setActiveTab] = useState('active');
  const [viewMode, setViewMode] = useState<'grid' | 'list'>('grid');
  const [hasNewSuggestions, setHasNewSuggestions] = useState(false);
  const [isUserInActiveProcess, setIsUserInActiveProcess] = useState(false);

  // --- START: State חדש לניהול חלון האישור ---
  const [showConfirmDialog, setShowConfirmDialog] = useState(false);
  const [suggestionForAction, setSuggestionForAction] =
    useState<ExtendedMatchSuggestion | null>(null);
  const [actionType, setActionType] = useState<'approve' | 'decline' | null>(
    null
  );
  // --- END: State חדש ---

  // Calculate counts
  const pendingCount = activeSuggestions.filter(
    (s) =>
      s.status === 'PENDING_FIRST_PARTY' || s.status === 'PENDING_SECOND_PARTY'
  ).length;

  const myTurnCount = activeSuggestions.filter((s) => {
    const isFirstParty = s.firstPartyId === userId;
    return (
      (s.status === 'PENDING_FIRST_PARTY' && isFirstParty) ||
      (s.status === 'PENDING_SECOND_PARTY' && !isFirstParty)
    );
  }).length;

  // Fetch suggestions function
  const fetchSuggestions = useCallback(
    async (showLoadingState = true) => {
      try {
        if (showLoadingState) {
          setIsLoading(true);
        } else {
          setIsRefreshing(true);
        }
        setError(null);

        const [activeResponse, historyResponse] = await Promise.all([
          fetch(`/api/suggestions/active`),
          fetch(`/api/suggestions/history`),
        ]);

        if (!activeResponse.ok || !historyResponse.ok) {
          const activeError = !activeResponse.ok
            ? await activeResponse.text()
            : '';
          const historyError = !historyResponse.ok
            ? await historyResponse.text()
            : '';
          console.error('Fetch errors:', { activeError, historyError });
          throw new Error(
            `Failed to fetch suggestions (${activeResponse.status}/${historyResponse.status})`
          );
        }

        const activeData = await activeResponse.json();
        const historyData = await historyResponse.json();

        if (
          !showLoadingState &&
          activeData.suggestions.length > activeSuggestions.length
        ) {
          setHasNewSuggestions(true);
          toast.success('התקבלו הצעות שידוך חדשות!', {
            description: 'בדוק את ההצעות החדשות שמחכות לך',
            duration: 5000,
          });
        }

        setActiveSuggestions(activeData.suggestions);
        setHistorySuggestions(historyData.suggestions);
      } catch (error) {
        console.error('Error loading suggestions:', error);
        setError(
          `אירעה שגיאה בטעינת ההצעות: ${
            error instanceof Error ? error.message : 'שגיאה לא ידועה'
          }`
        );
        toast.error('שגיאה בטעינת ההצעות', {
          description: 'נסה לרענן את הדף או פנה לתמיכה',
        });
      } finally {
        setIsLoading(false);
        setIsRefreshing(false);
      }
    },
    [activeSuggestions.length]
  );

  // Handle suggestion status change (This is now the central logic)
  const handleStatusChange = useCallback(
    async (suggestionId: string, newStatus: string, notes?: string) => {
      try {
        const response = await fetch(
          `/api/suggestions/${suggestionId}/status`,
          {
            method: 'PATCH',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ status: newStatus, notes }),
          }
        );

        if (!response.ok) {
          const errorData = await response.json();
          throw new Error(
            errorData.error || 'Failed to update suggestion status'
          );
        }

        await fetchSuggestions(false);

        const statusMessages: Record<string, string> = {
          FIRST_PARTY_APPROVED: 'אישרת את ההצעה בהצלחה',
          SECOND_PARTY_APPROVED: 'אישרת את ההצעה בהצלחה',
          FIRST_PARTY_DECLINED: 'דחית את ההצעה בהצלחה',
          SECOND_PARTY_DECLINED: 'דחית את ההצעה בהצלחה',
        };

        let description: string;
        if (newStatus === 'FIRST_PARTY_APPROVED') {
          description =
            'באישורך, ההצעה נשלחה לצד השני. אם גם הצד השני יאשר, פרטי הקשר המלאים שלכם יוחלפו.';
        } else if (newStatus === 'SECOND_PARTY_APPROVED') {
          description =
            'מעולה! כעת, מאחר ושניכם אישרתם, פרטי הקשר שלך יישלחו לצד הראשון ופרטיו יישלחו אליך.';
        } else if (newStatus.includes('DECLINED')) {
          description = 'תודה על המשוב - זה עוזר לנו להציע התאמות טובות יותר';
        } else {
          description = 'השדכן יקבל הודעה ויתקדם עם התהליך';
        }

        toast.success(statusMessages[newStatus] || 'הסטטוס עודכן בהצלחה', {
          description,
        });
      } catch (error) {
        console.error('Error updating suggestion status:', error);
        toast.error(
          `אירעה שגיאה בעדכון הסטטוס: ${
            error instanceof Error ? error.message : 'שגיאה לא ידועה'
          }`
        );
      }
    },
    [fetchSuggestions]
  );

  // --- START: פונקציות חדשות לניהול הדיאלוג ---

  // פונקציה שמופעלת מהילדים כדי לבקש פתיחת דיאלוג
  const handleRequestAction = useCallback(
    (suggestion: ExtendedMatchSuggestion, action: 'approve' | 'decline') => {
      setSuggestionForAction(suggestion);
      setActionType(action);
      setShowConfirmDialog(true);
    },
    []
  );

  // פונקציה שמופעלת בלחיצה על "אישור" בתוך הדיאלוג
  const handleConfirmAction = useCallback(async () => {
    if (!suggestionForAction || !actionType) return;

    const isFirstParty = suggestionForAction.firstPartyId === userId;
    let newStatus = '';
    if (actionType === 'approve') {
      newStatus = isFirstParty
        ? 'FIRST_PARTY_APPROVED'
        : 'SECOND_PARTY_APPROVED';
    } else {
      newStatus = isFirstParty
        ? 'FIRST_PARTY_DECLINED'
        : 'SECOND_PARTY_DECLINED';
    }

    // קריאה לפונקציה המרכזית שמעדכנת סטטוס
    await handleStatusChange(suggestionForAction.id, newStatus);

    // סגירת הדיאלוג ואיפוס ה-state
    setShowConfirmDialog(false);
    setSuggestionForAction(null);
    setActionType(null);
  }, [suggestionForAction, actionType, userId, handleStatusChange]);

  // --- END: פונקציות חדשות ---

  // Initial load and periodic refresh
  useEffect(() => {
    fetchSuggestions();

    const intervalId = setInterval(
      () => {
        fetchSuggestions(false);
      },
      5 * 60 * 1000
    ); // Refresh every 5 minutes

    return () => clearInterval(intervalId);
  }, [userId, fetchSuggestions]);

  // Effect to determine if user is in an active process
  useEffect(() => {
    const activeProcessStatuses: MatchSuggestion['status'][] = [
      'FIRST_PARTY_APPROVED',
      'SECOND_PARTY_APPROVED',
      'AWAITING_MATCHMAKER_APPROVAL',
      'CONTACT_DETAILS_SHARED',
      'AWAITING_FIRST_DATE_FEEDBACK',
      'THINKING_AFTER_DATE',
      'PROCEEDING_TO_SECOND_DATE',
      'MEETING_PENDING',
      'MEETING_SCHEDULED',
      'MATCH_APPROVED',
      'DATING',
      'ENGAGED',
    ];

    const hasActiveProcess = activeSuggestions.some((s) =>
      activeProcessStatuses.includes(s.status)
    );
    setIsUserInActiveProcess(hasActiveProcess);
  }, [activeSuggestions]);

  // Clear new suggestions notification when changing to active tab
  useEffect(() => {
    if (activeTab === 'active') {
      setHasNewSuggestions(false);
    }
  }, [activeTab]);

  // Handle manual refresh
  const handleRefresh = useCallback(async () => {
    await fetchSuggestions(false);
    toast.success('הנתונים עודכנו בהצלחה', {
      description: 'כל ההצעות עודכנו למצב הנוכחי',
    });
  }, [fetchSuggestions]);

  // אם נמצא במצב טעינה, הצג את מסך הטעינה המשופר
  if (isLoading) {
    return <LoadingSkeleton />;
  }

  return (
    <div
      className={cn(
        'min-h-screen bg-gradient-to-br from-slate-50 via-cyan-50/20 to-emerald-50/20',
        className
      )}
    >
      <div className="container mx-auto px-4 py-8">
        <WelcomeStats
          activeSuggestions={activeSuggestions}
          historySuggestions={historySuggestions}
          pendingCount={pendingCount}
          userId={userId}
        />

        <Card className="shadow-2xl border-0 bg-white/95 backdrop-blur-sm overflow-hidden">
          <CardHeader className="pb-4 bg-gradient-to-r from-white via-cyan-50/30 to-emerald-50/30 border-b border-gray-100">
            <div className="flex items-center justify-between">
              <div className="flex items-center gap-3">
                <Button
                  variant="ghost"
                  size="icon"
                  onClick={handleRefresh}
                  disabled={isRefreshing}
                  className="rounded-full h-10 w-10 hover:bg-cyan-100 transition-colors"
                  aria-label="רענן הצעות"
                >
                  <RefreshCw
                    className={cn(
                      'h-5 w-5 text-cyan-600',
                      isRefreshing && 'animate-spin'
                    )}
                  />
                </Button>

                {hasNewSuggestions && (
                  <Badge className="bg-gradient-to-r from-orange-500 to-amber-500 text-white border-0 shadow-xl animate-pulse">
                    <Bell className="w-3 h-3 ml-1" />
                    הצעות חדשות
                  </Badge>
                )}
              </div>
              <div className="text-center flex-grow">
                <CardTitle className="text-xl font-bold text-gray-800">
                  ניהול ההצעות
                </CardTitle>
              </div>
              <div className="w-16"></div> {/* Spacer */}
            </div>
          </CardHeader>

          <CardContent className="p-6">
            <Tabs
              value={activeTab}
              onValueChange={setActiveTab}
              dir="rtl"
              className="space-y-6"
            >
              <div className="flex justify-center">
                <TabsList className="grid grid-cols-3 bg-purple-50/50 rounded-2xl p-1 h-14 w-fit">
                  <TabsTrigger
                    value="active"
                    className="relative flex items-center gap-3 px-6 py-3 rounded-xl transition-all data-[state=active]:bg-white data-[state=active]:shadow-lg font-semibold text-base"
                  >
                    <Target className="w-5 h-5 text-purple-500" />
                    <span>פעילות</span>
                    {activeSuggestions.length > 0 && (
                      <Badge className="bg-purple-500 text-white border-0 px-2 py-1 text-xs font-bold rounded-full min-w-[24px] h-6">
                        {activeSuggestions.length}
                      </Badge>
                    )}
                  </TabsTrigger>

                  {myTurnCount > 0 && (
                    <TabsTrigger
                      value="urgent"
                      className="flex items-center gap-3 px-6 py-3 rounded-xl transition-all data-[state=active]:bg-white data-[state=active]:shadow-lg font-semibold text-base"
                    >
                      <Zap className="w-5 h-5 text-orange-500" />
                      <span>התור שלך</span>
                      <Badge className="bg-gradient-to-r from-orange-500 to-amber-500 text-white border-0 px-2 py-1 text-xs font-bold rounded-full min-w-[24px] h-6 animate-pulse shadow-lg">
                        {myTurnCount}
                      </Badge>
                    </TabsTrigger>
                  )}

                  <TabsTrigger
                    value="history"
                    className="flex items-center gap-3 px-6 py-3 rounded-xl transition-all data-[state=active]:bg-white data-[state=active]:shadow-lg font-semibold text-base"
                  >
                    <History className="w-5 h-5 text-gray-500" />
                    <span>היסטוריה</span>
                    {historySuggestions.length > 0 && (
                      <Badge className="bg-gray-500 text-white border-0 px-2 py-1 text-xs font-bold rounded-full min-w-[24px] h-6">
                        {historySuggestions.length}
                      </Badge>
                    )}
                  </TabsTrigger>
                </TabsList>
              </div>

              {error && (
                <Alert
                  variant="destructive"
                  className="border-red-200 bg-red-50"
                  dir="rtl"
                >
                  <AlertCircle className="h-5 w-5 ml-2" />
                  <AlertDescription className="text-red-800 font-medium">
                    {error}
                  </AlertDescription>
                </Alert>
              )}

              <TabsContent value="active" className="space-y-6">
                <SuggestionsList
                  suggestions={activeSuggestions}
                  userId={userId}
                  viewMode={viewMode}
                  isLoading={isRefreshing}
                  onStatusChange={handleStatusChange}
                  onActionRequest={handleRequestAction}
                  onRefresh={handleRefresh}
                  isUserInActiveProcess={isUserInActiveProcess}
                />
              </TabsContent>

              <TabsContent value="history" className="space-y-6">
                <SuggestionsList
                  suggestions={historySuggestions}
                  userId={userId}
                  viewMode={viewMode}
                  isLoading={isRefreshing}
                  isHistory={true}
                  onStatusChange={handleStatusChange}
                  onActionRequest={handleRequestAction}
                  onRefresh={handleRefresh}
                  isUserInActiveProcess={isUserInActiveProcess}
                />
              </TabsContent>

              <TabsContent value="urgent" className="space-y-6">
                <SuggestionsList
                  suggestions={activeSuggestions.filter((s) => {
                    const isFirstParty = s.firstPartyId === userId;
                    return (
                      (s.status === 'PENDING_FIRST_PARTY' && isFirstParty) ||
                      (s.status === 'PENDING_SECOND_PARTY' && !isFirstParty)
                    );
                  })}
                  userId={userId}
                  viewMode={viewMode}
                  isLoading={isRefreshing}
                  onStatusChange={handleStatusChange}
                  onActionRequest={handleRequestAction}
                  onRefresh={handleRefresh}
                  isUserInActiveProcess={isUserInActiveProcess}
                />
              </TabsContent>
            </Tabs>
          </CardContent>
        </Card>
      </div>

      <AlertDialog open={showConfirmDialog} onOpenChange={setShowConfirmDialog}>
        <AlertDialogContent className="border-0 shadow-2xl rounded-2xl z-[9999]">
          <AlertDialogHeader>
            <AlertDialogTitle className="text-xl font-bold text-center">
              {actionType === 'approve'
                ? 'אישור הצעת השידוך'
                : 'דחיית הצעת השידוך'}
            </AlertDialogTitle>
            <AlertDialogDescription className="text-center text-gray-600 leading-relaxed">
              {actionType === 'approve'
                ? 'אישור הצעה הוא צעד מרגש. האם אתה בטוח שברצונך להתקדם? לאחר האישור, השדכן יקבל הודעה וימשיך בתהליך עבורכם.'
                : 'כל תשובה מקדמת אותך. האם אתה בטוח שברצונך לדחות הצעה זו? המשוב שלך חשוב מאוד ויעזור לנו לדייק את החיפוש עבורך.'}
            </AlertDialogDescription>
          </AlertDialogHeader>
          <AlertDialogFooter className="gap-3">
            <AlertDialogCancel className="rounded-xl">ביטול</AlertDialogCancel>
            <AlertDialogAction
              onClick={handleConfirmAction}
              className={cn(
                'rounded-xl font-medium shadow-lg hover:shadow-xl transition-all duration-300',
                actionType === 'approve'
                  ? 'bg-gradient-to-r from-green-500 to-green-600 hover:from-green-600 hover:to-green-700'
                  : 'bg-gradient-to-r from-red-500 to-red-600 hover:from-red-600 hover:to-red-700'
              )}
            >
              {actionType === 'approve' ? (
                <>
                  <CheckCircle className="w-4 h-4 ml-2" />
                  אישור ההצעה
                </>
              ) : (
                <>
                  <XCircle className="w-4 h-4 ml-2" />
                  דחיית ההצעה
                </>
              )}
            </AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>
    </div>
  );
};

export default MatchSuggestionsContainer;
--- End of Content for MatchSuggestionsContainer.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\user\Desktop\matchpoint\shidduch-system\src\app\components\suggestions\suggestions_contents.txt
--------------------------------------------------------------------------------
[This is the output log file itself. Content not included.]

--------------------------------------------------------------------------------
File: C:\Users\user\Desktop\matchpoint\shidduch-system\src\app\components\suggestions\types.ts
--------------------------------------------------------------------------------
Content:
// src/app/components/suggestions/types.ts

import type {
  MatchSuggestion,
  Profile,
  User,
  UserImage,
  QuestionnaireResponse as PrismaQuestionnaireResponse,
} from '@prisma/client';

// --- הוספה חדשה ---
// הגדרת טיפוס מרכזי לעולמות השאלון
export type WorldId =
  | 'values'
  | 'personality'
  | 'relationship'
  | 'partner'
  | 'religion';

// This type now accurately reflects the structure of Prisma's Profile model.
export type UserProfile = Profile;

// --- שינוי קל להוספת טיפוס ברור יותר ---
export type QuestionnaireResponse = PrismaQuestionnaireResponse;

// PartyInfo now includes fields from both User and Profile, creating a complete picture.
export interface PartyInfo {
  // Fields from User model
  id: string;
  email: string;
  firstName: string;
  lastName: string;
  isProfileComplete: boolean;

  // Relation to Profile (which can be null)
  profile: UserProfile | null;

  // Relation to Images (which is a full UserImage array)
  images: UserImage[];

  // --- שינוי: שימוש בטיפוס המדויק ---
  questionnaireResponses?: QuestionnaireResponse[];
}

export interface StatusHistoryItem {
  id: string;
  suggestionId: string;
  status: string;
  notes?: string | null;
  createdAt: Date | string;
}

// This now correctly expects PartyInfo which can have a null profile.
export interface ExtendedMatchSuggestion
  extends Omit<MatchSuggestion, 'firstParty' | 'secondParty' | 'matchmaker'> {
  matchmaker: {
    firstName: string;
    lastName: string;
  };
  firstParty: PartyInfo;
  secondParty: PartyInfo;
  statusHistory: StatusHistoryItem[];
}
--- End of Content for types.ts ---

================================================================================
Directory: C:\Users\user\Desktop\matchpoint\shidduch-system\src\app\components\suggestions\cards
================================================================================

--------------------------------------------------------------------------------
File: C:\Users\user\Desktop\matchpoint\shidduch-system\src\app\components\suggestions\cards\MinimalSuggestionCard.tsx
--------------------------------------------------------------------------------
Content:
// src/app/components/suggestions/cards/MinimalSuggestionCard.tsx

import React from 'react';
import Image from 'next/image';
import { formatDistanceToNow, isAfter, subDays } from 'date-fns';
import { he } from 'date-fns/locale';
import {
  User,
  MapPin,
  Briefcase,
  Eye,
  CheckCircle,
  XCircle,
  MessageCircle,
  Heart,
  BookOpen,
  Scroll,
  Calendar,
  AlertTriangle,
  Sparkles,
  ChevronLeft,
  Star,
  Quote,
  Zap,
} from 'lucide-react';

import { Card, CardContent, CardFooter } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { Avatar, AvatarFallback } from '@/components/ui/avatar';
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from '@/components/ui/tooltip';
import { toast } from 'sonner';
import { cn } from '@/lib/utils';
import { getRelativeCloudinaryPath, getInitials } from "@/lib/utils";import {
  getEnhancedStatusInfo,
  getPartyIndicator,
} from '@/lib/utils/suggestionUtils';
import type { ExtendedMatchSuggestion } from '../types';

interface MinimalSuggestionCardProps {
  suggestion: ExtendedMatchSuggestion;
  userId: string;
  onClick: (suggestion: ExtendedMatchSuggestion) => void;
  onApprove?: (suggestion: ExtendedMatchSuggestion) => void;
  onInquiry?: (suggestion: ExtendedMatchSuggestion) => void;
  onDecline?: (suggestion: ExtendedMatchSuggestion) => void;
  className?: string;
  isHistory?: boolean;
  isApprovalDisabled?: boolean;
}

const calculateAge = (birthDate?: Date | string | null): number | null => {
  if (!birthDate) return null;
  const today = new Date();
  const birth = new Date(birthDate);
  if (isNaN(birth.getTime())) return null;
  let age = today.getFullYear() - birth.getFullYear();
  const m = today.getMonth() - birth.getMonth();
  if (m < 0 || (m === 0 && today.getDate() < birth.getDate())) {
    age--;
  }
  return age > 0 ? age : null;
};

const MinimalSuggestionCard: React.FC<MinimalSuggestionCardProps> = ({
  suggestion,
  userId,
  onClick,
  onApprove,
  onInquiry,
  onDecline,
  className,
  isHistory = false,
  isApprovalDisabled = false,
}) => {
  const targetParty =
    suggestion.firstPartyId === userId
      ? suggestion.secondParty
      : suggestion.firstParty;
  const isFirstParty = suggestion.firstPartyId === userId;

  if (!targetParty || !targetParty.profile) {
    console.error('MinimalSuggestionCard: targetParty or profile is missing.', {
      suggestion,
    });
    return null;
  }

  const mainImage = targetParty.images?.find((img) => img.isMain);
  const age = calculateAge(targetParty.profile.birthDate);

  // Use the enhanced status info
  const statusInfo = getEnhancedStatusInfo(suggestion.status, isFirstParty);
  const partyIndicator = getPartyIndicator(suggestion.status, isFirstParty);

  const hasDeadline =
    suggestion.decisionDeadline &&
    new Date(suggestion.decisionDeadline) > new Date();
  const isUrgent =
    hasDeadline &&
    subDays(new Date(suggestion.decisionDeadline!), 2) < new Date();

  // Truncate matching reason for the teaser
  const reasonTeaser = suggestion.matchingReason
    ? suggestion.matchingReason.length > 100
      ? `${suggestion.matchingReason.substring(0, 100)}...`
      : suggestion.matchingReason
    : 'השדכן/ית זיהו פוטנציאל מיוחד שכדאי לבדוק!';

  return (
    <Card
      className={cn(
        'group w-full rounded-2xl overflow-hidden shadow-lg border-0 bg-white transition-all duration-500 hover:shadow-xl hover:-translate-y-1 cursor-pointer',
        isUrgent && 'ring-2 ring-orange-300 ring-opacity-60',
        className
      )}
      onClick={(e) => {
        // Allow clicking the card to open details, but not if a button was clicked
        if (!(e.target as Element).closest('button')) {
          onClick(suggestion);
        }
      }}
    >
      {/* Header עם מידע השדכן ו-STATUS ENHANCED */}
      <div className="relative p-4 bg-gradient-to-r from-cyan-50/80 via-white to-emerald-50/50 border-b border-cyan-100/50">
        <div className="flex items-center justify-between">
          <div className="flex items-center gap-3">
            <Avatar className="w-10 h-10 border-2 border-white shadow-md">
              <AvatarFallback className="bg-gradient-to-br from-cyan-500 to-emerald-500 text-white font-bold text-sm">
                {getInitials(
                  `${suggestion.matchmaker.firstName} ${suggestion.matchmaker.lastName}`
                )}
              </AvatarFallback>
            </Avatar>
            <div>
              <p className="text-xs text-cyan-600 font-medium">הצעה מ</p>
              <p className="text-sm font-bold text-gray-800">
                {suggestion.matchmaker.firstName}{' '}
                {suggestion.matchmaker.lastName}
              </p>
            </div>
          </div>

          {/* Enhanced Status Section */}
          <div className="flex flex-col items-end gap-1">
            <Badge
              className={cn(
                'flex items-center gap-1.5 border shadow-sm font-semibold text-xs',
                statusInfo.className,
                statusInfo.pulse && 'animate-pulse'
              )}
            >
              <statusInfo.icon className="w-3 h-3" />
              <span>{statusInfo.shortLabel}</span>
            </Badge>

            {/* Party Indicator - רק אם יש תור של מישהו */}
            {partyIndicator.show && (
              <Badge
                className={cn(
                  'text-xs px-2 py-0.5 font-bold shadow-sm',
                  partyIndicator.className
                )}
              >
                {partyIndicator.text === 'תורך!' && (
                  <Zap className="w-2.5 h-2.5 ml-1" />
                )}
                {partyIndicator.text}
              </Badge>
            )}
          </div>
        </div>

        {isUrgent && (
          <div className="absolute top-2 left-2">
            <Badge className="flex items-center gap-1.5 bg-gradient-to-r from-orange-500 to-red-500 text-white border-0 shadow-lg animate-pulse">
              <AlertTriangle className="w-3 h-3" />
              <span className="font-semibold text-xs">דחוף</span>
            </Badge>
          </div>
        )}
      </div>

      {/* Image Section */}
      <div className="relative h-64">
        {mainImage?.url ? (
          <Image
            src={getRelativeCloudinaryPath(mainImage.url)}
            alt={`תמונה של ${targetParty.firstName}`}
            fill
            className="object-cover object-center transition-transform duration-700 group-hover:scale-105"
            sizes="(max-width: 768px) 100vw, (max-width: 1200px) 50vw, 33vw"
          />
        ) : (
          <div className="w-full h-full bg-gradient-to-br from-slate-100 to-slate-200 flex items-center justify-center">
            <User className="w-20 h-20 text-slate-400" />
          </div>
        )}
        <div className="absolute inset-0 bg-gradient-to-t from-black/70 via-black/20 to-transparent" />

        {/* Name and Age overlay */}
        <div className="absolute bottom-4 right-4 left-4 text-white">
          <div className="flex items-end justify-between">
            <div>
              <h3 className="text-2xl font-bold tracking-tight [text-shadow:0_2px_8px_rgba(0,0,0,0.8)]">
                {targetParty.firstName}
              </h3>
              {age && (
                <p className="text-lg font-medium text-white/90 [text-shadow:0_1px_4px_rgba(0,0,0,0.8)]">
                  {age}
                </p>
              )}
            </div>

            {/* אייקון מיוחד */}
            <div className="p-2 rounded-full bg-white/20 backdrop-blur-sm">
              <Sparkles className="w-5 h-5 text-white" />
            </div>
          </div>
        </div>
      </div>

      <CardContent className="p-5 space-y-4">
        {/* Enhanced Status Description */}
        {statusInfo.description && (
          <div className="p-3 bg-gradient-to-r from-slate-50 to-gray-50 rounded-lg border border-slate-200">
            <div className="flex items-start gap-2">
              <statusInfo.icon className="w-4 h-4 text-slate-600 mt-0.5 flex-shrink-0" />
              <p className="text-sm text-slate-700 font-medium leading-relaxed">
                {statusInfo.description}
              </p>
            </div>
          </div>
        )}

        {/* Core Info Grid */}
        <div className="grid grid-cols-2 gap-3">
          {targetParty.profile.city && (
            <div className="flex items-center gap-2 p-2 bg-cyan-50/50 rounded-lg border border-cyan-100/50">
              <MapPin className="w-4 h-4 text-cyan-600 flex-shrink-0" />
              <span className="text-sm font-medium text-gray-700 truncate">
                {targetParty.profile.city}
              </span>
            </div>
          )}
          {targetParty.profile.occupation && (
            <div className="flex items-center gap-2 p-2 bg-emerald-50/50 rounded-lg border border-emerald-100/50">
              <Briefcase className="w-4 h-4 text-emerald-600 flex-shrink-0" />
              <span className="text-sm font-medium text-gray-700 truncate">
                {targetParty.profile.occupation}
              </span>
            </div>
          )}
          {targetParty.profile.religiousLevel && (
            <div className="flex items-center gap-2 p-2 bg-blue-50/50 rounded-lg border border-blue-100/50">
              <Scroll className="w-4 h-4 text-blue-600 flex-shrink-0" />
              <span className="text-sm font-medium text-gray-700 truncate">
                {targetParty.profile.religiousLevel}
              </span>
            </div>
          )}
          {targetParty.profile.education && (
            <div className="flex items-center gap-2 p-2 bg-green-50/50 rounded-lg border border-green-100/50">
              <BookOpen className="w-4 h-4 text-green-600 flex-shrink-0" />
              <span className="text-sm font-medium text-gray-700 truncate">
                {targetParty.profile.education}
              </span>
            </div>
          )}
        </div>

        {/* Matchmaker's reasoning highlight */}
        <div className="relative p-4 bg-gradient-to-r from-cyan-50/50 to-blue-50/50 border border-cyan-100/50 rounded-xl">
          <div className="flex items-start gap-3">
            <Quote className="w-4 h-4 text-cyan-500 mt-1 flex-shrink-0" />
            <div className="flex-1">
              <h4 className="text-sm font-bold text-cyan-800 mb-1">
                למה זו התאמה מיוחדת?
              </h4>
              <p className="text-sm text-cyan-700 leading-relaxed">
                {reasonTeaser}
              </p>
            </div>
          </div>

          {/* זווית עיצובית */}
          <div className="absolute top-0 right-0 w-6 h-6 bg-gradient-to-br from-cyan-200/50 to-blue-200/50 rounded-bl-xl"></div>
        </div>

        {/* CTA hint */}
        <div className="text-center py-2">
          <p className="text-xs text-gray-500 font-medium">
            לחץ לפרטים מלאים ועוד תובנות
          </p>
        </div>
      </CardContent>

      {!isHistory && (
        <CardFooter className="p-4 bg-gradient-to-r from-gray-50/50 to-slate-50/50 border-t border-gray-100">
          {(suggestion.status === 'PENDING_FIRST_PARTY' && isFirstParty) ||
          (suggestion.status === 'PENDING_SECOND_PARTY' && !isFirstParty) ? (
            <div className="grid grid-cols-2 gap-3 w-full">
              <Button
                size="sm"
                variant="outline"
                className="w-full text-red-600 hover:text-red-700 hover:bg-red-50 border-red-200 rounded-xl font-medium transition-all duration-300"
                onClick={(e) => {
                  e.stopPropagation();
                  onDecline?.(suggestion);
                }}
              >
                <XCircle className="w-4 h-4 ml-2" />
                לא מתאים
              </Button>
              <TooltipProvider>
                <Tooltip delayDuration={100}>
                  <TooltipTrigger asChild>
                    <div className="w-full">
                      <Button
                        size="sm"
                        variant="default"
                        className="w-full bg-gradient-to-r from-emerald-500 to-green-500 hover:from-emerald-600 hover:to-green-600 text-white shadow-lg hover:shadow-xl transition-all duration-300 rounded-xl font-medium"
                        disabled={isApprovalDisabled}
                        onClick={(e) => {
                          e.stopPropagation();
                          if (isApprovalDisabled) {
                            toast.info('לא ניתן לאשר הצעה חדשה', {
                              description: 'יש לך כבר הצעה אחרת בתהליך פעיל.',
                            });
                          } else {
                            onApprove?.(suggestion);
                          }
                        }}
                      >
                        <Heart className="w-4 h-4 ml-2" />
                        מעוניין/ת להכיר!
                      </Button>
                    </div>
                  </TooltipTrigger>
                  {isApprovalDisabled && (
                    <TooltipContent>
                      <p>לא ניתן לאשר הצעה חדשה כשיש הצעה בתהליך פעיל.</p>
                    </TooltipContent>
                  )}
                </Tooltip>
              </TooltipProvider>
            </div>
          ) : (
            <div className="grid grid-cols-2 gap-3 w-full">
              <Button
                size="sm"
                variant="outline"
                className="w-full border-gray-200 hover:bg-cyan-50 hover:border-cyan-200 rounded-xl font-medium transition-all duration-300"
                onClick={(e) => {
                  e.stopPropagation();
                  onInquiry?.(suggestion);
                }}
              >
                <MessageCircle className="w-4 h-4 ml-2" />
                שאלה לשדכן/ית
              </Button>
              <Button
                size="sm"
                variant="default"
                className="w-full bg-gradient-to-r from-cyan-500 to-blue-500 hover:from-cyan-600 hover:to-blue-600 text-white shadow-lg hover:shadow-xl transition-all duration-300 rounded-xl font-medium"
                onClick={() => onClick(suggestion)}
              >
                <Eye className="w-4 h-4 ml-2" />
                צפה בפרטים
                <ChevronLeft className="w-3 h-3 mr-1" />
              </Button>
            </div>
          )}
        </CardFooter>
      )}
    </Card>
  );
};

export default MinimalSuggestionCard;
--- End of Content for MinimalSuggestionCard.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\user\Desktop\matchpoint\shidduch-system\src\app\components\suggestions\cards\SuggestionQuickView.tsx
--------------------------------------------------------------------------------
Content:
// src/app/components/suggestions/cards/SuggestionQuickView.tsx

import React from "react";
import { Button } from "@/components/ui/button";
import {
  Heart,
  User,
  Clock,
  Eye,
  Scroll,
  GraduationCap,
  Briefcase,
  MapPin,
  MessageCircle,
  CheckCircle,
  XCircle,
} from "lucide-react";
import type { ExtendedMatchSuggestion } from "../types";

interface SuggestionQuickViewProps {
  suggestion: ExtendedMatchSuggestion;
  userId?: string;
  onAction: (action: "approve" | "reject" | "ask" | "view") => void;
}

const SuggestionQuickView: React.FC<SuggestionQuickViewProps> = ({
  suggestion,
  userId,
  onAction,
}) => {
  const handleClick = (e: React.MouseEvent) => {
    e.stopPropagation();
  };

  const profile = userId
    ? suggestion.firstPartyId === userId
      ? suggestion.secondParty.profile
      : suggestion.firstParty.profile
    : suggestion.secondParty.profile;

  // --- SOLUTION: Add this guard clause ---
  // If there's no profile, don't render anything.
  // This tells TypeScript that in the code that follows, 'profile' is guaranteed to exist.
  if (!profile) {
    return null;
  }

  return (
    <div
      className="bg-white/95 backdrop-blur-sm p-4 rounded-lg shadow-lg flex flex-col"
      onClick={handleClick}
    >
      <div className="flex-1 space-y-4 text-right overflow-y-auto max-h-96">
        <div className="grid grid-cols-2 gap-3">
          {/* Now all these accesses are safe */}
          {profile.height && (
            <div className="flex items-center justify-end gap-2 text-sm text-gray-600">
              <span>{profile.height} ס״מ</span>
              <User className="w-4 h-4" />
            </div>
          )}

          {profile.maritalStatus && (
            <div className="flex items-center justify-end gap-2 text-sm text-gray-600">
              <span>{profile.maritalStatus}</span>
              <Heart className="w-4 h-4" />
            </div>
          )}

          {profile.religiousLevel && (
            <div className="flex items-center justify-end gap-2 text-sm text-gray-600">
              <span>{profile.religiousLevel}</span>
              <Scroll className="w-4 h-4" />
            </div>
          )}

          {profile.education && (
            <div className="flex items-center justify-end gap-2 text-sm text-gray-600">
              <span>{profile.education}</span>
              <GraduationCap className="w-4 h-4" />
            </div>
          )}
        </div>

        {profile.about && (
          <div className="border-t border-gray-100 pt-3">
            <h4 className="text-sm font-medium mb-1">אודות:</h4>
            <p className="text-sm text-gray-600 leading-relaxed line-clamp-3">
              {profile.about}
            </p>
          </div>
        )}

        {suggestion.matchingReason && (
          <div className="border-t border-gray-100 pt-3">
            <h4 className="text-sm font-medium mb-1">סיבת ההצעה:</h4>
            <p className="text-sm text-gray-600 leading-relaxed line-clamp-3">
              {suggestion.matchingReason}
            </p>
          </div>
        )}

        <div className="border-t border-gray-100 pt-3 space-y-2">
          {profile.city && (
            <div className="flex items-center justify-end gap-2 text-sm text-gray-600">
              <span>{profile.city}</span>
              <MapPin className="w-4 h-4" />
            </div>
          )}

          {profile.occupation && (
            <div className="flex items-center justify-end gap-2 text-sm text-gray-600">
              <span>{profile.occupation}</span>
              <Briefcase className="w-4 h-4" />
            </div>
          )}
        </div>

        {suggestion.decisionDeadline && (
          <div className="border-t border-gray-100 pt-3">
            <div className="flex items-center justify-end gap-2 text-sm text-yellow-600">
              <span>
                נדרשת תשובה עד{" "}
                {new Date(suggestion.decisionDeadline).toLocaleDateString(
                  "he-IL"
                )}
              </span>
              <Clock className="w-4 h-4" />
            </div>
          </div>
        )}
      </div>

      <div className="grid grid-cols-2 gap-2 mt-4 pt-3 border-t border-gray-100">
        <Button
          variant="default"
          className="w-full"
          onClick={() => onAction("view")}
        >
          <Eye className="w-4 h-4 ml-2" />
          צפייה בפרופיל
        </Button>

        <Button
          variant="default"
          className="w-full bg-green-600 hover:bg-green-700"
          onClick={() => onAction("approve")}
        >
          <CheckCircle className="w-4 h-4 ml-2" />
          אישור הצעה
        </Button>

        <Button
          variant="outline"
          className="w-full text-red-600 hover:text-red-700 hover:bg-red-50"
          onClick={() => onAction("reject")}
        >
          <XCircle className="w-4 h-4 ml-2" />
          דחיית הצעה
        </Button>

        <Button
          variant="outline"
          className="w-full"
          onClick={() => onAction("ask")}
        >
          <MessageCircle className="w-4 h-4 ml-2" />
          שאלה לשדכן
        </Button>
      </div>
    </div>
  );
};

export default SuggestionQuickView;
--- End of Content for SuggestionQuickView.tsx ---

================================================================================
Directory: C:\Users\user\Desktop\matchpoint\shidduch-system\src\app\components\suggestions\compatibility
================================================================================

--------------------------------------------------------------------------------
File: C:\Users\user\Desktop\matchpoint\shidduch-system\src\app\components\suggestions\compatibility\MatchCompatibilityView.tsx
--------------------------------------------------------------------------------
Content:
// src/app/components/suggestions/compatibility/MatchCompatibilityView.tsx

import React from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Progress } from "@/components/ui/progress";
import { Badge } from "@/components/ui/badge";
import {
  Heart,
  User,
  Scroll,
  GraduationCap,
  MapPin,
  BookOpen,
  Home,
  Languages,
  Star,
  CheckCircle,
  XCircle,
  AlertTriangle,
  TrendingUp,
  Target,
  Users,
  Calendar,
} from "lucide-react";
import { cn } from "@/lib/utils";
import type { PartyInfo } from "../types";
import type { UserProfile } from "@/types/next-auth";

interface CompatibilityItem {
  criterion: string;
  icon: React.ReactNode;
  compatible: boolean;
  reason: string;
  first?: string | number | null;
  second?: string | number | null;
  importance: 'high' | 'medium' | 'low';
  category: 'basic' | 'lifestyle' | 'values' | 'preferences';
}

interface MatchCompatibilityProps {
  firstParty: PartyInfo;
  secondParty: PartyInfo;
  matchingReason?: string | null;
  className?: string;
}

const calculateAge = (birthDate?: Date | string | null): number | null => {
  if (!birthDate) return null;

  try {
    const today = new Date();
    const birth = new Date(birthDate);
    if (isNaN(birth.getTime())) return null;

    let age = today.getFullYear() - birth.getFullYear();
    const monthDiff = today.getMonth() - birth.getMonth();

    if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birth.getDate())) {
      age--;
    }
    return age >= 0 ? age : null;
  } catch (error) {
    console.error("Error calculating age:", error);
    return null;
  }
};

const getImportanceColor = (importance: string) => {
  switch (importance) {
    case 'high':
      return 'from-red-400 to-red-500';
    case 'medium':
      return 'from-amber-400 to-orange-500';
    case 'low':
      return 'from-cyan-400 to-blue-500';
    default:
      return 'from-gray-400 to-gray-500';
  }
};

const getCategoryColor = (category: string) => {
  switch (category) {
    case 'basic':
      return 'from-cyan-50 to-blue-50';
    case 'lifestyle':
      return 'from-emerald-50 to-green-50';
    case 'values':
      return 'from-blue-50 to-cyan-50';
    case 'preferences':
      return 'from-green-50 to-emerald-50';
    default:
      return 'from-gray-50 to-slate-50';
  }
};

const CompatibilityCard: React.FC<{
  item: CompatibilityItem;
  index: number;
  firstParty: PartyInfo;
  secondParty: PartyInfo;
}> = ({ item, index, firstParty, secondParty }) => {
  const importanceColor = getImportanceColor(item.importance);
  const categoryColor = getCategoryColor(item.category);
  
  return (
    <Card className={cn(
      "border-0 shadow-lg transition-all duration-300 hover:shadow-xl hover:-translate-y-1 overflow-hidden bg-gradient-to-br",
      categoryColor
    )}>
      <CardContent className="p-5">
        <div className="flex items-start gap-4">
          {/* Icon */}
          <div className={cn(
            "flex-shrink-0 w-12 h-12 rounded-xl bg-gradient-to-br text-white flex items-center justify-center shadow-md",
            item.compatible 
              ? "from-emerald-500 to-green-500" 
              : "from-red-400 to-rose-500"
          )}>
            {item.icon}
          </div>
          
          {/* Content */}
          <div className="flex-1 space-y-3">
            <div className="flex items-start justify-between gap-2">
              <div className="flex-1">
                <div className="flex items-center gap-2 mb-1">
                  <h4 className="font-bold text-gray-800 text-base">{item.criterion}</h4>
                  <Badge 
                    variant="outline" 
                    className={cn(
                      "text-xs px-2 py-0.5 font-semibold border-0 text-white",
                      importanceColor
                    )}
                  >
                    {item.importance === 'high' ? 'חשוב' : 
                     item.importance === 'medium' ? 'בינוני' : 'נמוך'}
                  </Badge>
                </div>
                <p className={cn(
                  "text-sm font-medium leading-relaxed",
                  item.compatible ? "text-emerald-700" : "text-red-700"
                )}>
                  {item.reason}
                </p>
              </div>
              
              <div className="flex-shrink-0">
                {item.compatible ? (
                  <CheckCircle className="w-6 h-6 text-emerald-500" />
                ) : (
                  <XCircle className="w-6 h-6 text-red-500" />
                )}
              </div>
            </div>

            {/* Details */}
            {(item.first != null || item.second != null) && (
              <div className="grid grid-cols-2 gap-3 pt-3 border-t border-white/50">
                <div className="text-center bg-white/60 backdrop-blur-sm rounded-lg p-2">
                  <div className="text-xs text-gray-500 font-medium mb-1">
                    {firstParty.firstName}
                  </div>
                  <div className="font-semibold text-gray-800 text-sm">
                    {item.first ?? "לא צוין"}
                  </div>
                </div>
                <div className="text-center bg-white/60 backdrop-blur-sm rounded-lg p-2">
                  <div className="text-xs text-gray-500 font-medium mb-1">
                    {secondParty.firstName}
                  </div>
                  <div className="font-semibold text-gray-800 text-sm">
                    {item.second ?? "לא צוין"}
                  </div>
                </div>
              </div>
            )}
          </div>
        </div>
      </CardContent>
    </Card>
  );
};

const CategorySection: React.FC<{
  title: string;
  icon: React.ElementType;
  items: CompatibilityItem[];
  color: string;
  firstParty: PartyInfo;
  secondParty: PartyInfo;
}> = ({ title, icon: Icon, items, color, firstParty, secondParty }) => {
  const compatibleCount = items.filter(item => item.compatible).length;
  const compatibilityRate = items.length > 0 ? (compatibleCount / items.length) * 100 : 0;
  
  if (items.length === 0) return null;
  
  return (
    <div className="space-y-4">
      <div className="flex items-center justify-between">
        <div className="flex items-center gap-3">
          <div className={cn("p-2 rounded-lg bg-gradient-to-r text-white shadow-md", color)}>
            <Icon className="w-5 h-5" />
          </div>
          <div>
            <h3 className="text-lg font-bold text-gray-800">{title}</h3>
            <p className="text-sm text-gray-600">{compatibleCount} מתוך {items.length} קריטריונים תואמים</p>
          </div>
        </div>
        <div className="text-center">
          <div className={cn("text-2xl font-bold", compatibilityRate >= 70 ? "text-emerald-600" : compatibilityRate >= 50 ? "text-amber-600" : "text-red-600")}>
            {Math.round(compatibilityRate)}%
          </div>
          <div className="text-xs text-gray-500">התאמה</div>
        </div>
      </div>
      
      <div className="grid gap-4">
        {items.map((item, index) => (
          <CompatibilityCard key={index} item={item} index={index} firstParty={firstParty} secondParty={secondParty} />
        ))}
      </div>
    </div>
  );
};

const MatchCompatibilityView: React.FC<MatchCompatibilityProps> = ({
  firstParty,
  secondParty,
  matchingReason,
  className,
}) => {
  // FIX: Add a guard clause to handle the possibility of null profiles.
  // If either profile is null, we cannot perform the analysis and should return early.
  if (!firstParty.profile || !secondParty.profile) {
    return (
      <Card className={cn("shadow-xl border-0 overflow-hidden", className)}>
        <CardHeader className="bg-gradient-to-r from-cyan-50/80 via-white to-emerald-50/50 border-b border-gray-100">
          <CardTitle className="flex items-center gap-3 text-2xl">
            <div className="p-3 rounded-xl bg-gradient-to-r from-cyan-500 to-emerald-500 text-white shadow-lg">
              <Heart className="w-6 h-6" />
            </div>
            <div>
              <span className="font-bold text-gray-800">ניתוח התאמה</span>
            </div>
          </CardTitle>
        </CardHeader>
        <CardContent className="p-8">
          <div className="text-center py-12">
            <AlertTriangle className="w-16 h-16 mx-auto mb-4 text-gray-400" />
            <h3 className="text-lg font-semibold text-gray-600 mb-2">לא ניתן לחשב התאמה</h3>
            <p className="text-gray-500 max-w-md mx-auto">
              אחד או יותר מהפרופילים אינם מלאים ולכן לא ניתן לבצע ניתוח התאמה מפורט.
            </p>
          </div>
        </CardContent>
      </Card>
    );
  }

  // After the guard clause, TypeScript knows .profile is non-null.
  const firstProfile = firstParty.profile;
  const secondProfile = secondParty.profile;
  
  const firstPartyAge = calculateAge(firstProfile.birthDate);
  const secondPartyAge = calculateAge(secondProfile.birthDate);

  // Helper functions
  const isWithinRange = (value: number | null | undefined, min: number | null | undefined, max: number | null | undefined): boolean => {
    if (value == null) return false;
    const minOk = min == null || value >= min;
    const maxOk = max == null || value <= max;
    return minOk && maxOk;
  }

  const isInPreferredList = (value: string | null | undefined, preferredList: string[] | null | undefined): boolean => {
    if (value == null) return false;
    if (preferredList == null || preferredList.length === 0) return true;
    return preferredList.includes(value);
  }

  // Calculate compatibility items
  const calculateCompatibilityItems = (): CompatibilityItem[] => {
    const items: CompatibilityItem[] = [];

    // Age compatibility
    if (firstPartyAge != null && secondPartyAge != null) {
      const firstAgePreferenceMatch = isWithinRange(
        secondPartyAge,
        firstProfile.preferredAgeMin,
        firstProfile.preferredAgeMax
      );

      const secondAgePreferenceMatch = isWithinRange(
        firstPartyAge,
        secondProfile.preferredAgeMin,
        secondProfile.preferredAgeMax
      );

      const compatible = firstAgePreferenceMatch && secondAgePreferenceMatch;
      items.push({
        criterion: "גיל",
        icon: <User className="w-6 h-6" />,
        compatible,
        reason: compatible ? "התאמה הדדית בציפיות הגיל" : "אי התאמה בציפיות הגיל",
        first: firstPartyAge,
        second: secondPartyAge,
        importance: 'high',
        category: 'basic'
      });
    }

    // Height compatibility
    const firstHeight = firstProfile.height;
    const secondHeight = secondProfile.height;
    if (firstHeight != null && secondHeight != null) {
      const firstHeightPreferenceMatch = isWithinRange(
        secondHeight,
        firstProfile.preferredHeightMin,
        firstProfile.preferredHeightMax
      );

      const secondHeightPreferenceMatch = isWithinRange(
        firstHeight,
        secondProfile.preferredHeightMin,
        secondProfile.preferredHeightMax
      );

      const compatible = firstHeightPreferenceMatch && secondHeightPreferenceMatch;
      items.push({
        criterion: "גובה",
        icon: <TrendingUp className="w-6 h-6" />,
        compatible,
        reason: compatible ? "התאמה הדדית בציפיות הגובה" : "אי התאמה בציפיות הגובה",
        first: `${firstHeight} ס"מ`,
        second: `${secondHeight} ס"מ`,
        importance: 'medium',
        category: 'basic'
      });
    }

    // Location compatibility
    const firstCity = firstProfile.city;
    const secondCity = secondProfile.city;
    if (firstCity != null && secondCity != null) {
      const firstLocationPreferenceMatch = isInPreferredList(
        secondCity,
        firstProfile.preferredLocations
      );

      const secondLocationPreferenceMatch = isInPreferredList(
        firstCity,
        secondProfile.preferredLocations
      );

      const compatible = firstLocationPreferenceMatch && secondLocationPreferenceMatch;
      items.push({
        criterion: "מקום מגורים",
        icon: <MapPin className="w-6 h-6" />,
        compatible,
        reason: compatible ? "התאמה הדדית בהעדפות מיקום" : "אי התאמה בהעדפות מיקום",
        first: firstCity,
        second: secondCity,
        importance: 'high',
        category: 'lifestyle'
      });
    }

    // Religious level compatibility
    const firstReligious = firstProfile.religiousLevel;
    const secondReligious = secondProfile.religiousLevel;
    if (firstReligious != null && secondReligious != null) {
      const firstReligiousPreferenceMatch = isInPreferredList(
        secondReligious,
        firstProfile.preferredReligiousLevels
      );

      const secondReligiousPreferenceMatch = isInPreferredList(
        firstReligious,
        secondProfile.preferredReligiousLevels
      );

      const compatible = firstReligiousPreferenceMatch && secondReligiousPreferenceMatch;
      items.push({
        criterion: "רמה דתית",
        icon: <Scroll className="w-6 h-6" />,
        compatible,
        reason: compatible ? "התאמה הדדית בהעדפות רמה דתית" : "אי התאמה בהעדפות רמה דתית",
        first: firstReligious,
        second: secondReligious,
        importance: 'high',
        category: 'values'
      });
    }

    // Education compatibility
    const firstEdu = firstProfile.education;
    const secondEdu = secondProfile.education;
    if (firstEdu != null && secondEdu != null) {
      const firstEducationPreferenceMatch = isInPreferredList(
        secondEdu,
        firstProfile.preferredEducation
      );

      const secondEducationPreferenceMatch = isInPreferredList(
        firstEdu,
        secondProfile.preferredEducation
      );

      const compatible = firstEducationPreferenceMatch && secondEducationPreferenceMatch;
      items.push({
        criterion: "השכלה",
        icon: <GraduationCap className="w-6 h-6" />,
        compatible,
        reason: compatible ? "התאמה הדדית בהעדפות השכלה" : "אי התאמה בהעדפות השכלה",
        first: firstEdu,
        second: secondEdu,
        importance: 'medium',
        category: 'preferences'
      });
    }

    // Occupation compatibility
    const firstOcc = firstProfile.occupation;
    const secondOcc = secondProfile.occupation;
    if (firstOcc != null && secondOcc != null) {
      const firstOccupationPreferenceMatch = isInPreferredList(
        secondOcc,
        firstProfile.preferredOccupations
      );

      const secondOccupationPreferenceMatch = isInPreferredList(
        firstOcc,
        secondProfile.preferredOccupations
      );

      const compatible = firstOccupationPreferenceMatch && secondOccupationPreferenceMatch;
      items.push({
        criterion: "תעסוקה",
        icon: <BookOpen className="w-6 h-6" />,
        compatible,
        reason: compatible ? "התאמה הדדית בהעדפות תעסוקה" : "אי התאמה בהעדפות תעסוקה",
        first: firstOcc,
        second: secondOcc,
        importance: 'medium',
        category: 'lifestyle'
      });
    }

    // Origin compatibility
    const firstOrigin = firstProfile.origin;
    const secondOrigin = secondProfile.origin;
    if (firstOrigin != null && secondOrigin != null) {
      const sameOrigin = firstOrigin === secondOrigin;
      items.push({
        criterion: "מוצא",
        icon: <Home className="w-6 h-6" />,
        compatible: true,
        reason: sameOrigin ? "מוצא זהה" : "מוצא שונה - מעשיר את הקשר",
        first: firstOrigin,
        second: secondOrigin,
        importance: 'low',
        category: 'values'
      });
    }

    // Language compatibility
    const firstLang = firstProfile.nativeLanguage;
    const secondLang = secondProfile.nativeLanguage;
    if (firstLang != null && secondLang != null) {
      const nativeMatch = firstLang === secondLang;
      const firstSpeaksSecondNative = firstProfile.additionalLanguages?.includes(secondLang) ?? false;
      const secondSpeaksFirstNative = secondProfile.additionalLanguages?.includes(firstLang) ?? false;

      const sharedLanguage = nativeMatch || firstSpeaksSecondNative || secondSpeaksFirstNative;

      items.push({
        criterion: "שפה",
        icon: <Languages className="w-6 h-6" />,
        compatible: sharedLanguage,
        reason: sharedLanguage ? "יש שפה משותפת" : "אין שפה משותפת מוכרת",
        first: firstLang,
        second: secondLang,
        importance: 'medium',
        category: 'lifestyle'
      });
    }

    return items;
  };

  const compatibilityItems = calculateCompatibilityItems();
  const compatibleCount = compatibilityItems.filter(item => item.compatible).length;
  const compatibilityScore = compatibilityItems.length > 0 
    ? Math.round((compatibleCount / compatibilityItems.length) * 100) 
    : 0;

  // Group items by category
  const basicItems = compatibilityItems.filter(item => item.category === 'basic');
  const lifestyleItems = compatibilityItems.filter(item => item.category === 'lifestyle');
  const valuesItems = compatibilityItems.filter(item => item.category === 'values');
  const preferencesItems = compatibilityItems.filter(item => item.category === 'preferences');

  const getScoreColor = (score: number) => {
    if (score >= 80) return "text-emerald-600";
    if (score >= 60) return "text-cyan-600";
    if (score >= 40) return "text-amber-600";
    return "text-red-600";
  };

  const getScoreDescription = (score: number) => {
    if (score >= 80) return "התאמה מעולה";
    if (score >= 60) return "התאמה טובה";
    if (score >= 40) return "התאמה בינונית";
    return "התאמה מאתגרת";
  };

  return (
    <Card className={cn("shadow-xl border-0 overflow-hidden", className)}>
      <CardHeader className="bg-gradient-to-r from-cyan-50/80 via-white to-emerald-50/50 border-b border-gray-100">
        <CardTitle className="flex items-center gap-3 text-2xl">
          <div className="p-3 rounded-xl bg-gradient-to-r from-cyan-500 to-emerald-500 text-white shadow-lg">
            <Heart className="w-6 h-6" />
          </div>
          <div>
            <span className="font-bold text-gray-800">ניתוח התאמה מפורט</span>
            <p className="text-sm text-gray-600 font-normal mt-1">
              ניתוח מעמיק של נקודות החיבור והאתגרים הפוטנציאליים
            </p>
          </div>
        </CardTitle>
      </CardHeader>

      <CardContent className="p-8 space-y-8">
        {/* Overall Score */}
        <Card className="border-0 shadow-lg bg-gradient-to-r from-slate-50 to-gray-50">
          <CardContent className="p-6">
            <div className="text-center space-y-4">
              <div className="flex items-center justify-center gap-3">
                <Star className="w-8 h-8 text-yellow-500 fill-current" />
                <div>
                  <div className={cn("text-4xl font-bold", getScoreColor(compatibilityScore))}>
                    {compatibilityScore}%
                  </div>
                  <div className="text-lg font-semibold text-gray-700">
                    {getScoreDescription(compatibilityScore)}
                  </div>
                </div>
              </div>
              
              <Progress value={compatibilityScore} className="h-3" />
              
              <div className="flex justify-between text-sm text-gray-600">
                <span>{compatibleCount} מתוך {compatibilityItems.length} קריטריונים תואמים</span>
                <span>ציון כללי: {compatibilityScore}%</span>
              </div>
            </div>
          </CardContent>
        </Card>

        {compatibilityItems.length > 0 ? (
          <div className="space-y-8">
            {/* Basic Info */}
            <CategorySection
              title="מידע בסיסי"
              icon={User}
              items={basicItems}
              color="from-cyan-500 to-blue-500"
              firstParty={firstParty}
              secondParty={secondParty}
            />

            {/* Values */}
            <CategorySection
              title="ערכים והשקפה"
              icon={Heart}
              items={valuesItems}
              color="from-emerald-500 to-green-500"
              firstParty={firstParty}
              secondParty={secondParty}
            />

            {/* Lifestyle */}
            <CategorySection
              title="סגנון חיים"
              icon={Target}
              items={lifestyleItems}
              color="from-blue-500 to-cyan-500"
              firstParty={firstParty}
              secondParty={secondParty}
            />

            {/* Preferences */}
            <CategorySection
              title="העדפות אישיות"
              icon={Star}
              items={preferencesItems}
              color="from-green-500 to-emerald-500"
              firstParty={firstParty}
              secondParty={secondParty}
            />
          </div>
        ) : (
          <div className="text-center py-12">
            <AlertTriangle className="w-16 h-16 mx-auto mb-4 text-gray-400" />
            <h3 className="text-lg font-semibold text-gray-600 mb-2">אין מספיק נתונים</h3>
            <p className="text-gray-500 max-w-md mx-auto">
              לא נמצא מספיק מידע משותף כדי לבצע ניתוח התאמה מפורט
            </p>
          </div>
        )}

        {/* Matchmaker Rationale */}
        {matchingReason && (
          <Card className="border-0 shadow-lg bg-gradient-to-r from-cyan-50 to-emerald-50">
            <CardContent className="p-6">
              <div className="flex items-start gap-4">
                <div className="p-3 rounded-xl bg-gradient-to-r from-cyan-500 to-emerald-500 text-white shadow-md flex-shrink-0">
                  <Users className="w-6 h-6" />
                </div>
                <div className="flex-1">
                  <h3 className="font-bold text-cyan-800 text-lg mb-2">
                    נימוק השדכן להצעה
                  </h3>
                  <p className="text-cyan-700 leading-relaxed">{matchingReason}</p>
                </div>
              </div>
            </CardContent>
          </Card>
        )}
      </CardContent>
    </Card>
  );
};

export default MatchCompatibilityView;
--- End of Content for MatchCompatibilityView.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\user\Desktop\matchpoint\shidduch-system\src\app\components\suggestions\compatibility\UserAiAnalysisDisplay.tsx
--------------------------------------------------------------------------------
Content:
// src/app/components/suggestions/compatibility/UserAiAnalysisDisplay.tsx
'use client';

import React from 'react';
import {
  Card,
  CardContent,
  CardHeader,
  CardTitle,
  CardDescription,
} from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Progress } from '@/components/ui/progress';
import {
  Heart,
  Lightbulb,
  MessageSquareQuote,
  Sparkles,
  TrendingUp,
  Target,
  Brain,
  Users,
  CheckCircle,
  AlertCircle,
  Star,
} from 'lucide-react';
import type { AiSuggestionAnalysisResult } from '@/lib/services/aiService';
import { cn } from '@/lib/utils';

interface UserAiAnalysisDisplayProps {
  analysis: AiSuggestionAnalysisResult;
}

// Score color helper עם הפלטה החדשה
const getScoreColor = (score: number) => {
  if (score >= 85)
    return {
      text: 'text-emerald-600',
      bg: 'from-emerald-50 to-green-50',
      progress: 'bg-gradient-to-r from-emerald-500 to-green-500',
      badge: 'bg-gradient-to-r from-emerald-500 to-green-500',
    };
  if (score >= 70)
    return {
      text: 'text-cyan-600',
      bg: 'from-cyan-50 to-blue-50',
      progress: 'bg-gradient-to-r from-cyan-500 to-blue-500',
      badge: 'bg-gradient-to-r from-cyan-500 to-blue-500',
    };
  if (score >= 55)
    return {
      text: 'text-blue-600',
      bg: 'from-blue-50 to-cyan-50',
      progress: 'bg-gradient-to-r from-blue-500 to-cyan-500',
      badge: 'bg-gradient-to-r from-blue-500 to-cyan-500',
    };
  return {
    text: 'text-amber-600',
    bg: 'from-amber-50 to-orange-50',
    progress: 'bg-gradient-to-r from-amber-500 to-orange-500',
    badge: 'bg-gradient-to-r from-amber-500 to-orange-500',
  };
};

// Score interpretation helper
const getScoreInterpretation = (score: number) => {
  if (score >= 85)
    return {
      level: 'התאמה מעולה',
      description: 'רמת התאמה גבוהה מאוד עם פוטנציאל רב להצלחה',
      icon: <Star className="w-5 h-5" fill="currentColor" />,
    };
  if (score >= 70)
    return {
      level: 'התאמה טובה',
      description: 'בסיס חזק לקשר משמעותי עם אתגרים מינימליים',
      icon: <CheckCircle className="w-5 h-5" />,
    };
  if (score >= 55)
    return {
      level: 'התאמה בינונית',
      description: 'פוטנציאל טוב עם נקודות לעבודה משותפת',
      icon: <Target className="w-5 h-5" />,
    };
  return {
    level: 'התאמה מאתגרת',
    description: 'דורש השקעה ותקשורת מעמיקה יותר',
    icon: <AlertCircle className="w-5 h-5" />,
  };
};

const Section: React.FC<{
  title: string;
  icon: React.ElementType;
  iconColorClass: string;
  bgColorClass: string;
  children: React.ReactNode;
}> = ({ title, icon: Icon, iconColorClass, bgColorClass, children }) => (
  <Card className={cn('overflow-hidden border-0 shadow-lg', bgColorClass)}>
    <CardHeader className="pb-4">
      <CardTitle className="flex items-center gap-3 text-xl">
        <div
          className={cn(
            'p-3 rounded-xl shadow-md',
            iconColorClass.replace('text-', 'bg-').replace('-600', '-100')
          )}
        >
          <Icon className={cn('w-6 h-6', iconColorClass)} />
        </div>
        <span className="font-bold text-gray-800">{title}</span>
      </CardTitle>
    </CardHeader>
    <CardContent className="pt-0">{children}</CardContent>
  </Card>
);

const CompatibilityPoint: React.FC<{
  point: { area: string; explanation: string };
  index: number;
}> = ({ point, index }) => (
  <div className="group p-4 bg-white/70 backdrop-blur-sm rounded-xl border border-emerald-100 shadow-sm hover:shadow-md transition-all duration-300 hover:-translate-y-1">
    <div className="flex items-start gap-3">
      <div className="flex-shrink-0 w-8 h-8 rounded-full bg-gradient-to-r from-emerald-400 to-green-500 text-white flex items-center justify-center text-sm font-bold shadow-md">
        {index + 1}
      </div>
      <div className="flex-1 space-y-2">
        <h4 className="font-semibold text-emerald-800 text-base leading-tight">
          {point.area}
        </h4>
        <p className="text-sm text-emerald-900/80 leading-relaxed">
          {point.explanation}
        </p>
      </div>
    </div>
  </div>
);

const ConsiderationPoint: React.FC<{
  point: { area: string; explanation: string };
  index: number;
}> = ({ point, index }) => (
  <div className="group p-4 bg-white/70 backdrop-blur-sm rounded-xl border border-cyan-100 shadow-sm hover:shadow-md transition-all duration-300 hover:-translate-y-1">
    <div className="flex items-start gap-3">
      <div className="flex-shrink-0 w-8 h-8 rounded-full bg-gradient-to-r from-cyan-400 to-blue-500 text-white flex items-center justify-center text-sm font-bold shadow-md">
        {index + 1}
      </div>
      <div className="flex-1 space-y-2">
        <h4 className="font-semibold text-cyan-800 text-base leading-tight">
          {point.area}
        </h4>
        <p className="text-sm text-cyan-900/80 leading-relaxed">
          {point.explanation}
        </p>
      </div>
    </div>
  </div>
);

const ConversationStarter: React.FC<{
  starter: string;
  index: number;
}> = ({ starter, index }) => (
  <div className="group flex items-start gap-3 p-3 bg-white/60 backdrop-blur-sm rounded-lg border border-blue-100 hover:bg-white/80 transition-all duration-300 hover:shadow-sm">
    <div className="flex-shrink-0 w-6 h-6 rounded-full bg-gradient-to-r from-blue-400 to-cyan-500 text-white flex items-center justify-center text-xs font-bold shadow-sm">
      {index + 1}
    </div>
    <p className="text-sm text-blue-900 leading-relaxed font-medium">
      {starter}
    </p>
  </div>
);

const UserAiAnalysisDisplay: React.FC<UserAiAnalysisDisplayProps> = ({
  analysis,
}) => {
  const scoreColors = getScoreColor(analysis.overallScore);
  const scoreInterpretation = getScoreInterpretation(analysis.overallScore);

  return (
    <div className="space-y-8 p-2">
      {/* Header Summary */}
      <Card
        className={cn(
          'text-center border-0 shadow-xl overflow-hidden bg-gradient-to-br',
          scoreColors.bg
        )}
      >
        <CardContent className="p-8 relative">
          {/* Background decoration */}
          <div className="absolute top-0 right-0 w-32 h-32 bg-white/10 rounded-full blur-2xl"></div>
          <div className="absolute bottom-0 left-0 w-24 h-24 bg-white/10 rounded-full blur-xl"></div>

          <div className="relative z-10 space-y-6">
            <div className="flex justify-center mb-4">
              <div
                className={cn('p-4 rounded-2xl shadow-lg', scoreColors.badge)}
              >
                <Brain className="w-8 h-8 text-white" />
              </div>
            </div>

            <div className="space-y-3">
              <h2 className="text-3xl font-bold text-gray-800 tracking-tight">
                {analysis.matchTitle}
              </h2>
              <p className="text-lg text-gray-700 max-w-2xl mx-auto leading-relaxed">
                {analysis.matchSummary}
              </p>
            </div>

            <div className="space-y-4">
              <div className="flex items-center justify-center gap-3">
                {scoreInterpretation.icon}
                <Badge
                  className={cn(
                    'text-xl font-bold px-6 py-3 rounded-2xl text-white border-0 shadow-lg',
                    scoreColors.badge
                  )}
                >
                  ציון התאמה: {analysis.overallScore}%
                </Badge>
              </div>

              <div className="max-w-md mx-auto space-y-2">
                <Progress
                  value={analysis.overallScore}
                  className="h-3 bg-white/50"
                />
                <div className="flex justify-between text-sm font-medium text-gray-600">
                  <span>{scoreInterpretation.level}</span>
                  <span>{analysis.overallScore}%</span>
                </div>
                <p className="text-sm text-gray-600 text-center">
                  {scoreInterpretation.description}
                </p>
              </div>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Compatibility Points */}
      <Section
        title="נקודות חיבור חזקות"
        icon={Heart}
        iconColorClass="text-emerald-600"
        bgColorClass="bg-gradient-to-br from-emerald-50/80 to-green-50/60"
      >
        <div className="space-y-4">
          {analysis.compatibilityPoints.length > 0 ? (
            analysis.compatibilityPoints.map((point, index) => (
              <CompatibilityPoint key={index} point={point} index={index} />
            ))
          ) : (
            <div className="text-center py-8 text-gray-500">
              <Heart className="w-12 h-12 mx-auto mb-3 opacity-50" />
              <p>לא נמצאו נקודות חיבור ספציפיות בניתוח</p>
            </div>
          )}
        </div>
      </Section>

      {/* Points to Consider */}
      <Section
        title="נקודות למחשבה וצמיחה"
        icon={Lightbulb}
        iconColorClass="text-cyan-600"
        bgColorClass="bg-gradient-to-br from-cyan-50/80 to-blue-50/60"
      >
        <div className="space-y-4">
          {analysis.pointsToConsider.length > 0 ? (
            analysis.pointsToConsider.map((point, index) => (
              <ConsiderationPoint key={index} point={point} index={index} />
            ))
          ) : (
            <div className="text-center py-8 text-gray-500">
              <Lightbulb className="w-12 h-12 mx-auto mb-3 opacity-50" />
              <p>לא נמצאו נקודות מיוחדות לתשומת לב</p>
            </div>
          )}
        </div>
      </Section>

      {/* Conversation Starters */}
      <Section
        title="נושאים מומלצים לפתיחת שיחה"
        icon={MessageSquareQuote}
        iconColorClass="text-blue-600"
        bgColorClass="bg-gradient-to-br from-blue-50/80 to-cyan-50/60"
      >
        <div className="space-y-3">
          {analysis.suggestedConversationStarters.length > 0 ? (
            analysis.suggestedConversationStarters.map((starter, index) => (
              <ConversationStarter
                key={index}
                starter={starter}
                index={index}
              />
            ))
          ) : (
            <div className="text-center py-8 text-gray-500">
              <MessageSquareQuote className="w-12 h-12 mx-auto mb-3 opacity-50" />
              <p>לא נמצאו הצעות ספציפיות לפתיחת שיחה</p>
            </div>
          )}
        </div>
      </Section>

      {/* Bottom Note */}
      <Card className="border-0 shadow-lg bg-gradient-to-r from-cyan-50 to-emerald-50">
        <CardContent className="p-6 text-center">
          <div className="flex items-center justify-center gap-2 mb-3">
            <Sparkles className="w-5 h-5 text-cyan-600" />
            <span className="font-semibold text-cyan-800">הערה חשובה</span>
          </div>
          <p className="text-sm text-cyan-700 leading-relaxed max-w-2xl mx-auto">
            זכרו, ניתוח זה הוא כלי עזר והמלצה בלבד. הוא נועד להאיר נקודות למחשבה
            ולעורר שיחה. הכימיה האמיתית והחיבור העמוק נוצרים במפגש האנושי.
          </p>
        </CardContent>
      </Card>
    </div>
  );
};

export default UserAiAnalysisDisplay;
--- End of Content for UserAiAnalysisDisplay.tsx ---

================================================================================
Directory: C:\Users\user\Desktop\matchpoint\shidduch-system\src\app\components\suggestions\dialogs
================================================================================

--------------------------------------------------------------------------------
File: C:\Users\user\Desktop\matchpoint\shidduch-system\src\app\components\suggestions\dialogs\AskMatchmakerDialog.tsx
--------------------------------------------------------------------------------
Content:
// src/app/components/suggestions/dialogs/AskMatchmakerDialog.tsx

import React, { useState } from "react";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogFooter,
  DialogDescription,
} from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Textarea } from "@/components/ui/textarea";
import { Label } from "@/components/ui/label";
import { Card, CardContent } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { 
  MessageCircle, 
  Send, 
  AlertCircle, 
  Heart,
  Users,
  BookOpen,
  Calendar,
  Lightbulb,
  Clock,
  User,
  Sparkles
} from "lucide-react";
import { Alert, AlertDescription } from "@/components/ui/alert";
import { Avatar, AvatarFallback } from "@/components/ui/avatar";
import { cn } from "@/lib/utils";

interface AskMatchmakerDialogProps {
  isOpen: boolean;
  onClose: () => void;
  onSubmit: (question: string) => Promise<void>;
  matchmakerName?: string;
  suggestionId?: string;
}

interface QuestionTopic {
  id: string;
  label: string;
  icon: React.ElementType;
  color: string;
  description: string;
  questions: string[];
}

const questionTopics: QuestionTopic[] = [
  {
    id: "values",
    label: "ערכים ואמונות",
    icon: Heart,
    color: "from-cyan-500 to-blue-500",
    description: "שאלות על השקפת עולם ומערכת ערכים",
    questions: [
      "האם יש משהו שחשוב לדעת לגבי השקפת העולם שלו/ה?",
      "מה מידת החשיבות שהוא/היא מייחס/ת לנושאים דתיים?",
      "האם יש לו/ה קווים אדומים בנושאי השקפה?",
      "איך הוא/היא רואה את התפקיד של המסורת בחיי היומיום?",
    ]
  },
  {
    id: "family",
    label: "משפחה ורקע",
    icon: Users,
    color: "from-emerald-500 to-green-500",
    description: "שאלות על המשפחה והרקע האישי",
    questions: [
      "איך ניתן לתאר את המשפחה שלו/ה?",
      "האם יש דברים חשובים לדעת לגבי המשפחה?",
      "מה חשוב לו/ה בנושא בניית משפחה?",
      "איך הקשר שלו/ה עם המשפחה המורחבת?",
    ]
  },
  {
    id: "career",
    label: "תעסוקה ולימודים",
    icon: BookOpen,
    color: "from-blue-500 to-cyan-500",
    description: "שאלות על קריירה והשכלה",
    questions: [
      "מה התוכניות המקצועיות שלו/ה לטווח הארוך?",
      "האם הוא/היא מעוניין/ת בשינוי תעסוקתי?",
      "איך הוא/היא רואה את האיזון בין קריירה ומשפחה?",
      "מה התחומים שמעניינים אותו/ה ללימוד נוסף?",
    ]
  },
  {
    id: "personality",
    label: "אופי ומזג",
    icon: Sparkles,
    color: "from-pink-500 to-rose-500",
    description: "שאלות על אישיות ותכונות אופי",
    questions: [
      "איך היית מתאר/ת את האופי שלו/ה?",
      "מה הן התכונות החזקות ביותר שלו/ה?",
      "האם יש משהו שכדאי לדעת לגבי המזג?",
      "איך הוא/היא מתמודל/ת עם לחץ ואתגרים?",
    ]
  },
  {
    id: "future",
    label: "תוכניות לעתיד",
    icon: Calendar,
    color: "from-amber-500 to-orange-500",
    description: "שאלות על חזון ותוכניות עתידיות",
    questions: [
      "מה החלומות שלו/ה לטווח הארוך?",
      "האם יש לו/ה תוכניות לשינוי מקום מגורים?",
      "מה החזון שלו/ה לחיי המשפחה?",
      "איך הוא/היא רואה את החיים שלו/ה בעוד 10 שנים?",
    ]
  },
  {
    id: "other",
    label: "שאלה אחרת",
    icon: Lightbulb,
    color: "from-gray-500 to-slate-500",
    description: "שאלה ספציפית או נושא אחר",
    questions: ["יש לי שאלה ספציפית..."]
  }
];

export const AskMatchmakerDialog: React.FC<AskMatchmakerDialogProps> = ({
  isOpen,
  onClose,
  onSubmit,
  matchmakerName,
}) => {
  const [question, setQuestion] = useState("");
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [selectedTopic, setSelectedTopic] = useState<string | null>(null);

  const handleSubmit = async () => {
    if (!question.trim()) return;

    try {
      setIsSubmitting(true);
      setError(null);
      await onSubmit(question);
      setQuestion("");
      setSelectedTopic(null);
      onClose();
    } catch (error) {
      console.error("Error submitting question:", error);
      setError("אירעה שגיאה בשליחת השאלה. אנא נסה שוב מאוחר יותר.");
    } finally {
      setIsSubmitting(false);
    }
  };

  const getInitials = (name?: string) => {
    if (!name) return "שד";
    const parts = name.split(" ");
    if (parts.length === 1) return parts[0].charAt(0);
    return `${parts[0].charAt(0)}${parts[parts.length - 1].charAt(0)}`;
  };

  const selectedTopicData = questionTopics.find(t => t.id === selectedTopic);

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="max-w-2xl max-h-[90vh] flex flex-col p-0 border-0 shadow-2xl rounded-3xl bg-white overflow-hidden">
        {/* Header */}
        <DialogHeader className="px-8 py-6 bg-gradient-to-r from-cyan-50/80 via-white to-emerald-50/50 border-b border-gray-100">
          <div className="flex items-center gap-4 mb-4">
            <Avatar className="w-16 h-16 border-4 border-white shadow-lg">
              <AvatarFallback className="bg-gradient-to-br from-cyan-500 to-emerald-500 text-white text-xl font-bold">
                {getInitials(matchmakerName)}
              </AvatarFallback>
            </Avatar>
            <div className="flex-1">
              <DialogTitle className="text-2xl font-bold text-gray-800 mb-1">
                שאלה ל{matchmakerName ? ` ${matchmakerName}` : "שדכן"}
              </DialogTitle>
              <DialogDescription className="text-gray-600 text-base">
                השדכן/ית זמין/ה לענות על כל שאלה שיש לך לגבי המועמד/ת
              </DialogDescription>
            </div>
            <Badge className="bg-gradient-to-r from-green-500 to-emerald-500 text-white border-0 shadow-md px-3 py-1">
              <Clock className="w-3 h-3 ml-1" />
              זמין/ה עכשיו
            </Badge>
          </div>
        </DialogHeader>

        {/* Content */}
        <div className="flex-1 overflow-y-auto p-8 space-y-6">
          {error && (
            <Alert variant="destructive" className="border-red-200 bg-red-50">
              <AlertCircle className="h-5 w-5" />
              <AlertDescription className="text-red-800 font-medium">{error}</AlertDescription>
            </Alert>
          )}

          {/* Topic Selection */}
          <div className="space-y-4">
            <div className="text-center">
              <h3 className="text-lg font-semibold text-gray-800 mb-2">איזה נושא מעניין אותך?</h3>
              <p className="text-sm text-gray-600">בחר קטגוריה כדי לקבל שאלות לדוגמה</p>
            </div>
            
            <div className="grid grid-cols-2 lg:grid-cols-3 gap-3">
              {questionTopics.map((topic) => (
                <Card
                  key={topic.id}
                  className={cn(
                    "cursor-pointer transition-all duration-300 border-2 hover:shadow-lg hover:-translate-y-1",
                    selectedTopic === topic.id
                      ? "border-cyan-300 bg-cyan-50 shadow-md"
                      : "border-gray-200 hover:border-cyan-200"
                  )}
                  onClick={() => setSelectedTopic(topic.id)}
                >
                  <CardContent className="p-4 text-center">
                    <div className={cn("w-12 h-12 rounded-xl mx-auto mb-3 flex items-center justify-center bg-gradient-to-r text-white shadow-md", topic.color)}>
                      <topic.icon className="w-6 h-6" />
                    </div>
                    <h4 className="font-semibold text-gray-800 text-sm mb-1">{topic.label}</h4>
                    <p className="text-xs text-gray-600 leading-relaxed">{topic.description}</p>
                  </CardContent>
                </Card>
              ))}
            </div>
          </div>

          {/* Sample Questions */}
          {selectedTopicData && (
            <Card className="bg-gradient-to-r from-cyan-50/50 to-emerald-50/50 border-cyan-200/50">
              <CardContent className="p-6">
                <div className="flex items-center gap-2 mb-4">
                  <selectedTopicData.icon className="w-5 h-5 text-cyan-600" />
                  <h4 className="font-semibold text-cyan-800">שאלות לדוגמה - {selectedTopicData.label}</h4>
                </div>
                <div className="space-y-2 max-h-32 overflow-y-auto scrollbar-elegant">
                  {selectedTopicData.questions.map((q, index) => (
                    <Button
                      key={index}
                      variant="ghost"
                      className="w-full justify-end text-right hover:bg-cyan-100 hover:text-cyan-800 transition-colors rounded-lg p-3 h-auto"
                      onClick={() => setQuestion(q)}
                    >
                      <span className="text-sm leading-relaxed">{q}</span>
                    </Button>
                  ))}
                </div>
              </CardContent>
            </Card>
          )}

          {/* Question Input */}
          <div className="space-y-3">
            <Label htmlFor="question" className="text-base font-semibold text-gray-800">
              שאלתך
            </Label>
            <Textarea
              id="question"
              value={question}
              onChange={(e) => setQuestion(e.target.value)}
              placeholder="כתוב כאן את שאלתך... השדכן/ית ישמח/תשמח לעזור ולהשיב"
              className="min-h-[120px] text-right border-gray-200 focus:border-cyan-300 focus:ring-cyan-200 rounded-xl text-base leading-relaxed resize-none"
            />
            <div className="flex justify-between items-center text-xs text-gray-500">
              <span>{question.length}/500 תווים</span>
              <span>השאלה תישלח ישירות לשדכן/ית</span>
            </div>
          </div>
        </div>

        {/* Footer */}
        <DialogFooter className="px-8 py-6 border-t border-gray-100 bg-gray-50/50">
          <div className="flex gap-3 w-full">
            <Button
              type="button"
              variant="outline"
              onClick={onClose}
              disabled={isSubmitting}
              className="flex-1 border-gray-200 hover:bg-gray-50 rounded-xl font-medium"
            >
              ביטול
            </Button>
            <Button
              type="submit"
              onClick={handleSubmit}
              disabled={!question.trim() || isSubmitting}
              className="flex-1 bg-gradient-to-r from-cyan-500 to-emerald-500 hover:from-cyan-600 hover:to-emerald-600 text-white shadow-lg hover:shadow-xl transition-all duration-300 rounded-xl font-medium"
            >
              {isSubmitting ? (
                <>
                  <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin ml-2" />
                  שולח...
                </>
              ) : (
                <>
                  <Send className="w-4 h-4 ml-2" />
                  שלח שאלה
                </>
              )}
            </Button>
          </div>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
};

export default AskMatchmakerDialog;
--- End of Content for AskMatchmakerDialog.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\user\Desktop\matchpoint\shidduch-system\src\app\components\suggestions\dialogs\UserAiAnalysisDialog.tsx
--------------------------------------------------------------------------------
Content:
// File: src/app/components/suggestions/dialogs/UserAiAnalysisDialog.tsx
'use client';

import React, { useState, useEffect } from 'react';
import { Button } from '@/components/ui/button';
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription,
  DialogTrigger,
  DialogClose,
} from '@/components/ui/dialog';
import { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert';
import { Progress } from '@/components/ui/progress';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { ScrollArea } from '@/components/ui/scroll-area';
import { toast } from 'sonner';
import { motion, AnimatePresence } from 'framer-motion';
import {
  Loader2,
  Sparkles,
  AlertTriangle,
  Bot,
  Brain,
  Heart,
  Users,
  Target,
  ArrowLeft,
  CheckCircle,
  Info,
  MessageSquare,
  X,
  XCircle,
} from 'lucide-react';
import { cn } from '@/lib/utils';
import type { AiSuggestionAnalysisResult } from '@/lib/services/aiService';

// --- Interfaces ---
interface UserAiAnalysisDialogProps {
  suggestedUserId: string;
  isDemo?: boolean;
  demoAnalysisData?: AiSuggestionAnalysisResult | null;
  currentUserName?: string;
  suggestedUserName?: string;
}

// --- Demo Data ---
const mockAnalysisResult: AiSuggestionAnalysisResult = {
  overallScore: 91,
  matchTitle: 'שילוב של שאפתנות ועומק רגשי',
  matchSummary:
    'החיבור בין דניאל לנועה מציג פוטנציאל גבוה ליצירת זוגיות יציבה וצומחת. השילוב בין האופי המעשי והשאפתני של דניאל לבין העומק הרגשי והיצירתיות של נועה יוצר בסיס מעניין לשותפות ארוכת טווח, המבוססת על ערכים משותפים וכבוד הדדי.',
  compatibilityPoints: [
    {
      area: 'ערכים משותפים וראיית עולם',
      explanation:
        'שניכם רואים בזוגיות שותפות אמת ובמשפחה ערך עליון. הרצון של נועה ב"טוב לב" והרצון של דניאל ב"שותפות" מתחברים באופן מושלם לבסיס של קשר בריא.',
    },
    {
      area: 'התאמה אינטלקטואלית ורגשית',
      explanation:
        'הרצון של נועה ב"שיחות עומק" והחיפוש אחר אינטליגנציה וסקרנות תואמים את אופיו האנליטי והלמדני של דניאל. יש פוטנציאל לחיבור אינטלקטואלי מרתק.',
    },
    {
      area: 'יציבות ואמינות',
      explanation:
        'הדגש של דניאל על יושרה ואחריות, והיותו "אדם של עשייה", עונים על הצורך בביטחון ויציבות שחשובים בבניית קשר רציני.',
    },
    {
      area: 'סגנון חיים מאוזן',
      explanation:
        'שניכם מעריכים איזון בין פעילות למנוחה, ובין בילויים בחוץ לזמן איכות שקט. האהבה המשותפת לטיולים בטבע יכולה להוות מקור לחוויות משותפות רבות.',
    },
  ],
  pointsToConsider: [
    {
      area: 'שמירת נגיעה',
      explanation:
        'נועה, חשוב לדעת שדניאל שומר נגיעה. זוהי נקודה מהותית שכדאי לדבר עליה בפתיחות ובכבוד כדי להבין את המשמעויות עבור שניכם.',
    },
    {
      area: 'מיקום גיאוגרפי',
      explanation:
        'דניאל מתגורר בירושלים ואת בתל אביב. זהו פער שיש לתת עליו את הדעת ולדון בגמישות של שניכם לגבי מקום מגורים עתידי.',
    },
    {
      area: 'שאיפות קריירה שונות',
      explanation:
        'המסלול של דניאל בהייטק מאוד תובעני, בעוד את מחפשת איזון עם עולם היצירה. זו הזדמנות לדבר על איך תומכים אחד בשנייה בשאיפות שונות.',
    },
  ],
  suggestedConversationStarters: [
    'מהי "שותפות" אמיתית בעיניך, ואיך היא באה לידי ביטוי ביום-יום?',
    'איך אתם מאזנים בין השאיפות המקצועיות שלכם לבין הרצון לחיים אישיים, רוחניים ויצירתיים מלאים?',
    'ספרו על פרויקט או אתגר שלקחתם על עצמכם ומה למדתם מהתהליך.',
    'מה הדבר הכי חשוב לכם שבן/בת הזוג יבינו עליכם כבר בהתחלה?',
  ],
};

// --- Sub-components for better modularity ---

const AnalysisItem: React.FC<{
  icon: React.ElementType;
  iconColor: string;
  area: string;
  explanation: string;
}> = ({ icon: Icon, iconColor, area, explanation }) => (
  <div className="flex items-start gap-4 p-3 rounded-lg hover:bg-slate-50 transition-colors">
    <div
      className={cn(
        'mt-1 flex-shrink-0 rounded-full p-2 bg-opacity-10',
        iconColor.replace('text-', 'bg-')
      )}
    >
      <Icon className={cn('h-5 w-5', iconColor)} />
    </div>
    <div>
      <h4 className="font-semibold text-gray-800">{area}</h4>
      <p className="text-sm text-gray-600 leading-relaxed">{explanation}</p>
    </div>
  </div>
);

const LoadingScreen: React.FC<{ progress: number; step: number }> = ({
  progress,
  step,
}) => {
  const loadingSteps = [
    { icon: Brain, label: 'מעבד פרופילים' },
    { icon: Heart, label: 'בוחן ערכים' },
    { icon: Users, label: 'מודד תאימות' },
    { icon: Target, label: 'מציע תובנות' },
    { icon: Sparkles, label: 'מסיים ניתוח' },
  ];

  return (
    <div className="flex flex-col items-center justify-center h-full text-center space-y-8 p-8">
      <div className="relative">
        <div className="w-24 h-24 rounded-full bg-gradient-to-br from-blue-100 via-purple-50 to-pink-100 animate-pulse border-4 border-white shadow-xl" />
        <div className="absolute inset-0 flex items-center justify-center">
          <Loader2 className="w-12 h-12 text-blue-600 animate-spin" />
        </div>
      </div>
      <div className="space-y-3">
        <h3 className="text-2xl font-bold bg-gradient-to-r from-blue-600 via-purple-600 to-pink-600 bg-clip-text text-transparent">
          מנתח התאמה עמוקה...
        </h3>
        <p className="text-gray-600 max-w-md text-lg">
          אנו בוחנים עשרות פרמטרים כדי לספק לך תמונה מקיפה ומדויקת
        </p>
      </div>
      <div className="w-full max-w-md space-y-4">
        <Progress value={progress} className="h-3 bg-gray-200" />
        <p className="text-sm text-gray-500 font-medium">{progress}% הושלם</p>
      </div>
      {step < loadingSteps.length && (
        <motion.div
          key={step}
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5 }}
          className="flex items-center gap-4 p-4 bg-white rounded-xl shadow-lg border border-gray-100"
        >
          <div className="p-3 rounded-full bg-gradient-to-br from-blue-500 to-purple-500 text-white shadow-lg">
            {React.createElement(loadingSteps[step].icon, {
              className: 'w-5 h-5',
            })}
          </div>
          <p className="font-semibold text-gray-800">
            {loadingSteps[step].label}
          </p>
        </motion.div>
      )}
    </div>
  );
};

const ErrorScreen: React.FC<{ error: string; onRetry: () => void }> = ({
  error,
  onRetry,
}) => (
  <div className="flex flex-col items-center justify-center h-full text-center space-y-6 p-8">
    <XCircle className="w-16 h-16 text-red-400" />
    <div className="space-y-4 max-w-md">
      <h3 className="text-2xl font-bold text-gray-800">משהו השתבש בדרך...</h3>
      <Alert variant="destructive">
        <AlertTriangle className="h-5 w-5" />
        <AlertTitle className="font-semibold">
          לא הצלחנו להשלים את הניתוח
        </AlertTitle>
        <AlertDescription className="mt-2">
          {error || 'אנו מתנצלים על התקלה. אנא נסו שוב או פנו לתמיכה.'}
        </AlertDescription>
      </Alert>
    </div>
    <Button onClick={onRetry}>
      <Brain className="w-4 h-4 ml-2" />
      נסה שוב
    </Button>
  </div>
);

// --- DialogBody component: contains all logic and complex JSX (גרסה מתוקנת) ---
const DialogBody: React.FC<
  UserAiAnalysisDialogProps & { onOpenChange: (open: boolean) => void }
> = ({
  suggestedUserId,
  isDemo = false,
  demoAnalysisData = null,
  currentUserName,
  suggestedUserName,
  onOpenChange,
}) => {
  const [analysis, setAnalysis] = useState<AiSuggestionAnalysisResult | null>(
    null
  );
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [loadingProgress, setLoadingProgress] = useState(0);
  const [currentStep, setCurrentStep] = useState(0);

  const fetchAnalysis = async () => {
    setIsLoading(true);
    setError(null);
    setLoadingProgress(0);
    setCurrentStep(0);

    if (isDemo) {
      const timer = setInterval(() => {
        setLoadingProgress((prev) => {
          const newProgress = Math.min(prev + 2, 100);
          setCurrentStep(Math.floor(newProgress / 20));
          return newProgress;
        });
      }, 80);
      setTimeout(() => {
        clearInterval(timer);
        setAnalysis(demoAnalysisData || mockAnalysisResult);
        setIsLoading(false);
      }, 4000);
      return;
    }

    try {
      const response = await fetch('/api/ai/analyze-suggestion', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ suggestedUserId }),
      });
      const result = await response.json();
      if (!response.ok || !result.success) {
        throw new Error(result.message || 'שגיאה בקבלת ניתוח ההצעה.');
      }
      setAnalysis(result.data);
    } catch (err) {
      const errorMessage =
        err instanceof Error ? err.message : 'אירעה שגיאה לא צפויה.';
      setError(errorMessage);
      toast.error('שגיאה בתהליך הניתוח', { description: errorMessage });
    } finally {
      setIsLoading(false);
    }
  };

  useEffect(() => {
    fetchAnalysis();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [suggestedUserId, isDemo]);

  return (
    <>
      <DialogHeader className="p-6 border-b flex-row justify-between items-center flex-shrink-0">
        <div className="flex items-center gap-4">
          <div className="p-3 rounded-full bg-gradient-to-br from-blue-500 via-purple-500 to-pink-500 text-white shadow-lg">
            <Bot className="w-7 h-7" />
          </div>
          <div>
            <DialogTitle className="text-xl font-bold bg-gradient-to-r from-blue-600 via-purple-600 to-pink-600 bg-clip-text text-transparent">
              ניתוח התאמה חכם
            </DialogTitle>
            <DialogDescription className="text-sm">
              {currentUserName} ⟵ {suggestedUserName}
            </DialogDescription>
          </div>
        </div>
        <DialogClose asChild>
          <Button variant="ghost" size="icon">
            <X className="h-5 w-5" />
          </Button>
        </DialogClose>
      </DialogHeader>

      <main className="flex-1 flex flex-col min-h-0 bg-white">
        <AnimatePresence mode="wait">
          {isLoading ? (
            <motion.div key="loading" exit={{ opacity: 0 }} className="flex-1">
              <LoadingScreen progress={loadingProgress} step={currentStep} />
            </motion.div>
          ) : error ? (
            <motion.div key="error" exit={{ opacity: 0 }} className="flex-1">
              <ErrorScreen error={error} onRetry={fetchAnalysis} />
            </motion.div>
          ) : analysis ? (
            <motion.div
              key="content"
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              className="flex-1 flex flex-col min-h-0"
            >
              <Tabs
                defaultValue="summary"
                className="flex-1 flex flex-col min-h-0"
              >
                <TabsList className="mx-4 mt-4 bg-slate-100 p-1 rounded-lg flex-shrink-0">
                  <TabsTrigger value="summary">סיכום וחיבור</TabsTrigger>
                  <TabsTrigger value="consider">נקודות למחשבה</TabsTrigger>
                  <TabsTrigger value="conversation">נושאים לשיחה</TabsTrigger>
                </TabsList>

                <ScrollArea className="flex-1">
                  <div className="p-6">
                    <TabsContent value="summary" className="space-y-6 mt-0">
                      <div className="p-4 bg-slate-50 rounded-lg border border-slate-200">
                        <h3 className="font-semibold text-gray-800 mb-2 flex items-center gap-2 text-blue-600">
                          <Info className="w-5 h-5" />
                          {analysis.matchTitle}
                        </h3>
                        <p className="text-sm text-gray-600 leading-relaxed">
                          {analysis.matchSummary}
                        </p>
                      </div>
                      <div>
                        <h3 className="font-semibold text-gray-800 mb-3 flex items-center gap-2">
                          <CheckCircle className="w-5 h-5 text-green-500" />
                          נקודות חוזק וחיבור
                        </h3>
                        <div className="space-y-4">
                          {analysis.compatibilityPoints.map((point) => (
                            <AnalysisItem
                              key={point.area}
                              icon={CheckCircle}
                              iconColor="text-green-500"
                              {...point}
                            />
                          ))}
                        </div>
                      </div>
                    </TabsContent>

                    <TabsContent value="consider" className="mt-0">
                      <h3 className="font-semibold text-gray-800 mb-3 flex items-center gap-2">
                        <AlertTriangle className="w-5 h-5 text-amber-500" />
                        נקודות למחשבה ולשיחה פתוחה
                      </h3>
                      <div className="space-y-4">
                        {analysis.pointsToConsider.map((point) => (
                          <AnalysisItem
                            key={point.area}
                            icon={AlertTriangle}
                            iconColor="text-amber-500"
                            {...point}
                          />
                        ))}
                      </div>
                    </TabsContent>

                    <TabsContent value="conversation" className="mt-0">
                      <h3 className="font-semibold text-gray-800 mb-3 flex items-center gap-2">
                        <MessageSquare className="w-5 h-5 text-indigo-500" />
                        נושאים מומלצים לפתיחת שיחה
                      </h3>
                      <ul className="space-y-3 list-inside">
                        {analysis.suggestedConversationStarters.map(
                          (starter, index) => (
                            <li
                              key={index}
                              className="flex items-start gap-2 p-2 rounded-md hover:bg-indigo-50/50"
                            >
                              <MessageSquare className="w-4 h-4 text-indigo-400 mt-1 flex-shrink-0" />
                              <span className="text-sm text-gray-700">
                                {starter}
                              </span>
                            </li>
                          )
                        )}
                      </ul>
                    </TabsContent>
                  </div>
                </ScrollArea>
              </Tabs>
            </motion.div>
          ) : null}
        </AnimatePresence>
      </main>
      <div className="p-4 bg-gray-50/80 border-t flex justify-end flex-shrink-0">
        <Button variant="ghost" onClick={() => onOpenChange(false)}>
          <ArrowLeft className="w-4 h-4 ml-2" />
          סגור
        </Button>
      </div>
    </>
  );
};

// --- Main exported wrapper component ---
export const UserAiAnalysisDialog: React.FC<UserAiAnalysisDialogProps> = (
  props
) => {
  const [isOpen, setIsOpen] = useState(false);

  const handleOpenChange = (open: boolean) => {
    setIsOpen(open);
  };

  const triggerButton = (
    <Button
      variant="outline"
      size="lg"
      className="relative overflow-hidden group bg-gradient-to-r from-blue-50 via-purple-50 to-pink-50 border-2 border-blue-200 text-blue-700 hover:from-blue-100 hover:to-pink-100 hover:border-blue-300 transition-all duration-300 shadow-lg hover:shadow-xl rounded-xl"
    >
      <div className="absolute inset-0 bg-gradient-to-r from-transparent via-white/40 to-transparent transform -translate-x-full group-hover:animate-shimmer" />
      <div className="relative z-10 flex items-center gap-3">
        <div className="relative">
          <Brain className="w-6 h-6 transition-transform duration-500 group-hover:rotate-12 group-hover:scale-110 text-blue-600" />
          <Sparkles className="w-3 h-3 absolute -top-1 -right-1 text-purple-500 opacity-0 group-hover:opacity-100" />
        </div>
        <span className="text-lg font-bold">ניתוח התאמה מבוסס AI</span>
      </div>
    </Button>
  );

  return (
    <Dialog open={isOpen} onOpenChange={handleOpenChange}>
      <DialogTrigger asChild>{triggerButton}</DialogTrigger>
      <DialogContent
        className="max-w-4xl w-[95vw] h-[90vh] flex flex-col p-0 overflow-hidden shadow-2xl rounded-2xl bg-gray-50"
        dir="rtl"
      >
        {isOpen && <DialogBody {...props} onOpenChange={handleOpenChange} />}
      </DialogContent>
      <style jsx global>{`
        @keyframes shimmer {
          100% {
            transform: translateX(100%);
          }
        }
        .animate-shimmer {
          animation: shimmer 2s infinite;
        }
      `}</style>
    </Dialog>
  );
};
--- End of Content for UserAiAnalysisDialog.tsx ---

================================================================================
Directory: C:\Users\user\Desktop\matchpoint\shidduch-system\src\app\components\suggestions\inquiries
================================================================================

--------------------------------------------------------------------------------
File: C:\Users\user\Desktop\matchpoint\shidduch-system\src\app\components\suggestions\inquiries\InquiryThreadView.tsx
--------------------------------------------------------------------------------
Content:
// src/app/components/suggestions/inquiries/InquiryThreadView.tsx

import React, { useState, useEffect, useCallback } from "react";
import {
  Card,
  CardContent,
  CardHeader,
  CardTitle,
  CardFooter,
} from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Textarea } from "@/components/ui/textarea";
import { Avatar, AvatarFallback } from "@/components/ui/avatar";
import { Badge } from "@/components/ui/badge";
import { Skeleton } from "@/components/ui/skeleton";
import { format } from "date-fns";
import { he } from "date-fns/locale";
import { 
  Send, 
  MessageCircle, 
  Loader2, 
  CheckCircle, 
  Clock, 
  AlertTriangle,
  User,
  MessageSquare,
  Sparkles,
  ArrowDown
} from "lucide-react";
import { toast } from "sonner";
import { cn } from "@/lib/utils";

interface Inquiry {
  id: string;
  suggestionId: string;
  fromUserId: string;
  toUserId: string;
  question: string;
  answer: string | null;
  status: "PENDING" | "ANSWERED" | "CLOSED";
  createdAt: string | Date;
  answeredAt: string | Date | null;
  fromUser: {
    id: string;
    firstName: string;
    lastName: string;
    email: string;
  };
  toUser: {
    id: string;
    firstName: string;
    lastName: string;
    email: string;
  };
}

interface InquiryThreadViewProps {
  suggestionId: string;
  userId: string;
  showComposer?: boolean;
  className?: string;
}

const getStatusInfo = (status: Inquiry["status"]) => {
  switch (status) {
    case "PENDING":
      return {
        label: "ממתין לתשובה",
        className: "bg-gradient-to-r from-amber-100 to-orange-100 text-amber-800 border-amber-200",
        icon: <Clock className="w-3 h-3" />,
        pulse: true,
      };
    case "ANSWERED":
      return {
        label: "נענה",
        className: "bg-gradient-to-r from-emerald-100 to-green-100 text-emerald-800 border-emerald-200",
        icon: <CheckCircle className="w-3 h-3" />,
        pulse: false,
      };
    case "CLOSED":
      return {
        label: "סגור",
        className: "bg-gradient-to-r from-gray-100 to-slate-100 text-gray-700 border-gray-200",
        icon: <MessageCircle className="w-3 h-3" />,
        pulse: false,
      };
    default:
      return {
        label: String(status),
        className: "bg-gradient-to-r from-gray-100 to-slate-100 text-gray-700 border-gray-200",
        icon: <AlertTriangle className="w-3 h-3" />,
        pulse: false,
      };
  }
};

const MessageBubble: React.FC<{
  inquiry: Inquiry;
  userId: string;
  isLatest: boolean;
}> = ({ inquiry, userId, isLatest }) => {
  const isMyQuestion = inquiry.fromUserId === userId;
  const statusInfo = getStatusInfo(inquiry.status);
  
  const formatDate = (date: string | Date | null) => {
    if (!date) return "";
    try {
      return format(new Date(date), "dd בMMMM yyyy, HH:mm", { locale: he });
    } catch (e) {
      console.error("Error formatting date:", date, e);
      return "תאריך לא תקין";
    }
  };

  const getInitials = (firstName: string, lastName: string) => {
    return `${firstName.charAt(0)}${lastName.charAt(0)}`.toUpperCase();
  };

  return (
    <div className={cn(
      "relative transition-all duration-300",
      isLatest && "animate-fade-in-up"
    )}>
      {/* Question */}
      <div className={cn(
        "flex gap-4 mb-4",
        isMyQuestion ? "flex-row-reverse" : "flex-row"
      )}>
        <Avatar className="w-10 h-10 flex-shrink-0 shadow-md">
          <AvatarFallback className={cn(
            "font-bold text-sm",
            isMyQuestion 
              ? "bg-gradient-to-br from-cyan-500 to-blue-500 text-white" 
              : "bg-gradient-to-br from-emerald-500 to-green-500 text-white"
          )}>
            {getInitials(inquiry.fromUser.firstName, inquiry.fromUser.lastName)}
          </AvatarFallback>
        </Avatar>

        <div className={cn("flex-1 max-w-[85%]", isMyQuestion ? "ml-auto" : "mr-auto")}>
          {/* Header */}
          <div className={cn(
            "flex items-center gap-2 mb-2",
            isMyQuestion ? "flex-row-reverse justify-start" : "flex-row justify-start"
          )}>
            <span className="font-semibold text-gray-800 text-sm">
              {inquiry.fromUser.firstName} {inquiry.fromUser.lastName}
            </span>
            <Badge 
              className={cn(
                "text-xs px-2 py-1 font-medium border shadow-sm",
                statusInfo.className,
                statusInfo.pulse && "animate-pulse-subtle"
              )}
            >
              {statusInfo.icon}
              <span className="mr-1">{statusInfo.label}</span>
            </Badge>
            <span className="text-xs text-gray-400">
              {formatDate(inquiry.createdAt)}
            </span>
          </div>

          {/* Question Bubble */}
          <div className={cn(
            "p-4 rounded-2xl shadow-md relative max-w-full",
            isMyQuestion
              ? "bg-gradient-to-r from-cyan-500 to-blue-500 text-white rounded-br-md"
              : "bg-white border border-gray-200 text-gray-800 rounded-bl-md"
          )}>
            <p className="text-sm leading-relaxed whitespace-pre-wrap break-words">
              {inquiry.question}
            </p>
            
            {/* Triangle pointer */}
            <div className={cn(
              "absolute top-4 w-3 h-3 transform rotate-45",
              isMyQuestion
                ? "-right-1.5 bg-cyan-600"
                : "-left-1.5 bg-white border-l border-b border-gray-200"
            )} />
          </div>
        </div>
      </div>

      {/* Answer */}
      {inquiry.answer && inquiry.answeredAt && (
        <div className="flex gap-4 mt-6 mb-2">
          <Avatar className="w-10 h-10 flex-shrink-0 shadow-md">
            <AvatarFallback className="bg-gradient-to-br from-emerald-500 to-green-600 text-white font-bold text-sm">
              {getInitials(inquiry.toUser.firstName, inquiry.toUser.lastName)}
            </AvatarFallback>
          </Avatar>

          <div className="flex-1 max-w-[85%]">
            {/* Answer Header */}
            <div className="flex items-center gap-2 mb-2">
              <span className="font-semibold text-gray-800 text-sm">
                {inquiry.toUser.firstName} {inquiry.toUser.lastName}
              </span>
              <Badge className="bg-gradient-to-r from-emerald-500 to-green-500 text-white border-0 text-xs px-2 py-1 font-medium">
                <CheckCircle className="w-3 h-3 mr-1" />
                תשובה
              </Badge>
              <span className="text-xs text-gray-400">
                {formatDate(inquiry.answeredAt)}
              </span>
            </div>

            {/* Answer Bubble */}
            <div className="p-4 bg-gradient-to-r from-emerald-50 to-green-50 border border-emerald-200 rounded-2xl rounded-bl-md shadow-md relative">
              <p className="text-sm text-emerald-900 leading-relaxed whitespace-pre-wrap break-words">
                {inquiry.answer}
              </p>
              
              {/* Triangle pointer */}
              <div className="absolute top-4 -left-1.5 w-3 h-3 bg-emerald-50 border-l border-b border-emerald-200 transform rotate-45" />
            </div>
          </div>
        </div>
      )}

      {/* Separator */}
      {!isLatest && (
        <div className="flex items-center my-6">
          <div className="flex-1 h-px bg-gradient-to-r from-transparent via-gray-200 to-transparent" />
          <ArrowDown className="w-4 h-4 text-gray-400 mx-3" />
          <div className="flex-1 h-px bg-gradient-to-r from-transparent via-gray-200 to-transparent" />
        </div>
      )}
    </div>
  );
};

const InquiryThreadView: React.FC<InquiryThreadViewProps> = ({
  suggestionId,
  userId,
  showComposer = true,
  className,
}) => {
  const [inquiries, setInquiries] = useState<Inquiry[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [newQuestion, setNewQuestion] = useState("");
  const [isSending, setIsSending] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const fetchInquiries = useCallback(async () => {
    if (!suggestionId) {
      setInquiries([]);
      setIsLoading(false);
      return;
    }

    try {
      setIsLoading(true);
      setError(null);

      const response = await fetch(`/api/suggestions/${suggestionId}/inquiries`);

      if (!response.ok) {
        const errorData = await response.json().catch(() => ({}));
        console.error("Failed to fetch inquiries:", response.status, errorData);
        throw new Error(`Failed to fetch inquiries (${response.status})`);
      }

      const data = await response.json();
      setInquiries(Array.isArray(data.inquiries) ? data.inquiries : []);
    } catch (error) {
      console.error("Error fetching inquiries:", error);
      setError("אירעה שגיאה בטעינת השאלות");
    } finally {
      setIsLoading(false);
    }
  }, [suggestionId]);

  useEffect(() => {
    fetchInquiries();
  }, [fetchInquiries]);

  const handleSendQuestion = async () => {
    if (!newQuestion.trim()) return;

    try {
      setIsSending(true);
      setError(null);

      const response = await fetch(`/api/suggestions/${suggestionId}/inquiries`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ question: newQuestion }),
      });

      if (!response.ok) {
        const errorData = await response.json().catch(() => ({}));
        console.error("Failed to send inquiry:", response.status, errorData);
        throw new Error(`Failed to send inquiry (${response.status})`);
      }

      await fetchInquiries();
      setNewQuestion("");
      toast.success("השאלה נשלחה בהצלחה", {
        description: "השדכן יקבל הודעה ויחזור אליך בהקדם"
      });
    } catch (error) {
      console.error("Error sending inquiry:", error);
      setError("אירעה שגיאה בשליחת השאלה");
      toast.error("אירעה שגיאה בשליחת השאלה");
    } finally {
      setIsSending(false);
    }
  };

  const pendingCount = inquiries.filter(i => i.status === "PENDING").length;
  const answeredCount = inquiries.filter(i => i.status === "ANSWERED").length;

  return (
    <Card className={cn("shadow-xl border-0 bg-white overflow-hidden", className)}>
      <CardHeader className="pb-4 bg-gradient-to-r from-cyan-50/80 via-white to-emerald-50/50 border-b border-gray-100">
        <div className="flex items-center justify-between">
          <div className="flex items-center gap-3">
            <div className="p-2 rounded-lg bg-gradient-to-r from-cyan-500 to-emerald-500 text-white shadow-md">
              <MessageSquare className="w-5 h-5" />
            </div>
            <div>
              <CardTitle className="text-xl font-bold text-gray-800">
                שיחה עם השדכן
              </CardTitle>
              <p className="text-sm text-gray-600 mt-1">
                שאל שאלות וקבל תשובות מקצועיות
              </p>
            </div>
          </div>
          
          {inquiries.length > 0 && (
            <div className="flex items-center gap-2">
              {answeredCount > 0 && (
                <Badge className="bg-gradient-to-r from-emerald-500 to-green-500 text-white border-0 px-3 py-1 shadow-md">
                  <CheckCircle className="w-3 h-3 ml-1" />
                  {answeredCount} נענו
                </Badge>
              )}
              {pendingCount > 0 && (
                <Badge className="bg-gradient-to-r from-amber-500 to-orange-500 text-white border-0 px-3 py-1 shadow-md animate-pulse-subtle">
                  <Clock className="w-3 h-3 ml-1" />
                  {pendingCount} ממתינות
                </Badge>
              )}
            </div>
          )}
        </div>
      </CardHeader>

      <CardContent className="flex-1 max-h-[500px] overflow-y-auto p-6 space-y-6 scrollbar-elegant">
        {isLoading ? (
          <div className="space-y-6">
            {Array.from({ length: 2 }).map((_, i) => (
              <div key={i} className="flex gap-4">
                <Skeleton className="h-10 w-10 rounded-full" />
                <div className="space-y-2 flex-1">
                  <Skeleton className="h-4 w-24" />
                  <Skeleton className="h-16 w-full rounded-2xl" />
                </div>
              </div>
            ))}
          </div>
        ) : error ? (
          <div className="text-center py-8">
            <div className="w-16 h-16 rounded-full bg-red-100 flex items-center justify-center mx-auto mb-4">
              <AlertTriangle className="w-8 h-8 text-red-500" />
            </div>
            <h3 className="font-semibold text-red-800 mb-2">שגיאה בטעינה</h3>
            <p className="text-red-600 text-sm mb-4">{error}</p>
            <Button
              variant="outline"
              size="sm"
              onClick={fetchInquiries}
              className="border-red-300 text-red-600 hover:bg-red-50"
            >
              נסה שוב
            </Button>
          </div>
        ) : inquiries.length === 0 ? (
          <div className="text-center py-12">
            <div className="w-20 h-20 rounded-full bg-gradient-to-br from-cyan-100 to-emerald-100 flex items-center justify-center mx-auto mb-6">
              <MessageCircle className="w-10 h-10 text-cyan-500" />
            </div>
            <h3 className="text-xl font-semibold text-gray-700 mb-2">
              התחל שיחה עם השדכן
            </h3>
            <p className="text-gray-500 max-w-md mx-auto leading-relaxed">
              יש לך שאלות על המועמד/ת? השדכן כאן כדי לעזור ולספק מידע נוסף שיעזור לך להחליט
            </p>
            {showComposer && (
              <div className="mt-6">
                <Sparkles className="w-6 h-6 text-cyan-500 mx-auto mb-2" />
                <p className="text-sm text-cyan-600 font-medium">
                  התחל לכתוב שאלה למטה
                </p>
              </div>
            )}
          </div>
        ) : (
          <div className="space-y-6">
            {inquiries.map((inquiry, index) => (
              <MessageBubble
                key={inquiry.id}
                inquiry={inquiry}
                userId={userId}
                isLatest={index === inquiries.length - 1}
              />
            ))}
          </div>
        )}
      </CardContent>

      {showComposer && (
        <CardFooter className="p-6 border-t border-gray-100 bg-gradient-to-r from-gray-50 to-white space-y-4">
          <div className="w-full space-y-3">
            <div className="flex items-center gap-2 text-sm text-gray-600">
              <User className="w-4 h-4 text-cyan-500" />
              <span>שאלה חדשה לשדכן</span>
            </div>
            
            <Textarea
              placeholder="כתוב כאן את שאלתך... השדכן ישמח לעזור ולהשיב"
              value={newQuestion}
              onChange={(e) => setNewQuestion(e.target.value)}
              className="text-right border-gray-200 focus:border-cyan-300 focus:ring-cyan-200 rounded-xl resize-none"
              rows={3}
              disabled={isSending}
            />
            
            <div className="flex justify-between items-center">
              <span className="text-xs text-gray-500">
                {newQuestion.length}/500 תווים
              </span>
              
              <Button
                onClick={handleSendQuestion}
                disabled={!newQuestion.trim() || isSending || isLoading}
                className="bg-gradient-to-r from-cyan-500 to-emerald-500 hover:from-cyan-600 hover:to-emerald-600 text-white shadow-lg hover:shadow-xl transition-all duration-300 rounded-xl"
              >
                {isSending ? (
                  <>
                    <Loader2 className="h-4 w-4 animate-spin ml-2" />
                    שולח...
                  </>
                ) : (
                  <>
                    <Send className="h-4 w-4 ml-2" />
                    שלח שאלה
                  </>
                )}
              </Button>
            </div>
          </div>
        </CardFooter>
      )}
    </Card>
  );
};

export default InquiryThreadView;
--- End of Content for InquiryThreadView.tsx ---

================================================================================
Directory: C:\Users\user\Desktop\matchpoint\shidduch-system\src\app\components\suggestions\list
================================================================================

--------------------------------------------------------------------------------
File: C:\Users\user\Desktop\matchpoint\shidduch-system\src\app\components\suggestions\list\SuggestionsList.tsx
--------------------------------------------------------------------------------
Content:
// src/app/components/suggestions/list/SuggestionsList.tsx

'use client';
import React, { useState, useEffect } from 'react';
import {
  User,
  Search,
  Filter,
  SortAsc,
  SortDesc,
  Calendar,
  Grid3X3,
  List as ListIcon,
  Check,
  XCircle,
  Sparkles,
  Heart,
  Clock,
  Users,
  TrendingUp,
  BarChart3,
} from 'lucide-react';
import { Skeleton } from '@/components/ui/skeleton';
import { Input } from '@/components/ui/input';
import { Button } from '@/components/ui/button';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select';
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuGroup,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuTrigger,
} from '@/components/ui/dropdown-menu';
import { Badge } from '@/components/ui/badge';
import { Card, CardContent } from '@/components/ui/card';
import { toast } from 'sonner';
import MinimalSuggestionCard from '../cards/MinimalSuggestionCard';
import SuggestionDetailsModal from '../modals/SuggestionDetailsModal';
import AskMatchmakerDialog from '../dialogs/AskMatchmakerDialog';
import { cn } from '@/lib/utils';
import type { ExtendedMatchSuggestion } from '../types';

// --- START: עדכון ה-props ---
interface SuggestionsListProps {
  suggestions: ExtendedMatchSuggestion[];
  userId: string;
  isHistory?: boolean;
  viewMode: 'grid' | 'list';
  isLoading?: boolean;
  className?: string;
  onStatusChange?: (
    suggestionId: string,
    newStatus: string,
    notes?: string
  ) => Promise<void>;
  onRefresh?: () => void;
  isUserInActiveProcess?: boolean;
  onActionRequest: (
    suggestion: ExtendedMatchSuggestion,
    action: 'approve' | 'decline'
  ) => void; // Prop חדש ומרכזי
}
// --- END: עדכון ה-props ---

type SortOption = 'newest' | 'oldest' | 'deadline' | 'priority';
type FilterOption =
  | 'all'
  | 'pending'
  | 'accepted'
  | 'declined'
  | 'contact_shared';

const EmptyState: React.FC<{
  isFiltered: boolean;
  isHistory: boolean;
  onClearFilters: () => void;
}> = ({ isFiltered, isHistory, onClearFilters }) => (
  <div className="flex flex-col items-center justify-center min-h-[400px] text-center p-8">
    <div className="relative mb-8">
      <div className="w-32 h-32 rounded-full bg-gradient-to-br from-purple-100 to-pink-100 flex items-center justify-center shadow-lg">
        {isFiltered ? (
          <Search className="w-16 h-16 text-purple-400" />
        ) : isHistory ? (
          <Clock className="w-16 h-16 text-gray-400" />
        ) : (
          <Heart className="w-16 h-16 text-pink-400" />
        )}
      </div>
      {!isFiltered && !isHistory && (
        <div className="absolute -top-2 -right-2 w-8 h-8 rounded-full bg-gradient-to-r from-cyan-400 to-blue-500 flex items-center justify-center shadow-lg">
          <Sparkles className="w-4 h-4 text-white" />
        </div>
      )}
    </div>
    <h3 className="text-2xl font-bold text-gray-800 mb-3">
      {isFiltered
        ? 'לא נמצאו תוצאות'
        : isHistory
          ? 'אין הצעות בהיסטוריה'
          : 'ההצעות בדרך אליך'}
    </h3>
    <p className="text-gray-600 max-w-md mx-auto mb-6 leading-relaxed">
      {isFiltered
        ? 'נסה לשנות את קריטריוני החיפוש או הסינון כדי למצוא את מה שאתה מחפש'
        : isHistory
          ? 'כשיהיו לך הצעות שהושלמו, הן יופיעו כאן'
          : 'השדכנים שלנו עובדים עכשיו על מציאת ההתאמות המושלמות עבורך'}
    </p>
    {isFiltered && (
      <Button
        onClick={onClearFilters}
        className="bg-gradient-to-r from-purple-500 to-pink-500 hover:from-purple-600 hover:to-pink-600 text-white shadow-lg hover:shadow-xl transition-all duration-300 rounded-xl"
      >
        <XCircle className="w-4 h-4 ml-2" />
        נקה סינון
      </Button>
    )}
  </div>
);

const StatsBar: React.FC<{
  total: number;
  filtered: number;
  pending: number;
  isHistory: boolean;
}> = ({ total, filtered, pending, isHistory }) => (
  <Card className="mb-6 border-0 shadow-lg bg-gradient-to-r from-white via-purple-50/50 to-pink-50/50">
    <CardContent className="p-4">
      <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
        <div className="text-center">
          <div className="flex items-center justify-center gap-2 mb-1">
            <BarChart3 className="w-4 h-4 text-blue-500" />
            <span className="text-2xl font-bold text-blue-600">{filtered}</span>
          </div>
          <p className="text-xs text-gray-600 font-medium">מוצגות כעת</p>
        </div>
        <div className="text-center">
          <div className="flex items-center justify-center gap-2 mb-1">
            <Users className="w-4 h-4 text-purple-500" />
            <span className="text-2xl font-bold text-purple-600">{total}</span>
          </div>
          <p className="text-xs text-gray-600 font-medium">סהכ הצעות</p>
        </div>
        {!isHistory && (
          <div className="text-center">
            <div className="flex items-center justify-center gap-2 mb-1">
              <Clock className="w-4 h-4 text-orange-500" />
              <span className="text-2xl font-bold text-orange-600">
                {pending}
              </span>
            </div>
            <p className="text-xs text-gray-600 font-medium">ממתינות</p>
          </div>
        )}
        <div className="text-center">
          <div className="flex items-center justify-center gap-2 mb-1">
            <TrendingUp className="w-4 h-4 text-green-500" />
            <span className="text-2xl font-bold text-green-600">
              {total > 0 ? Math.round(((total - pending) / total) * 100) : 0}%
            </span>
          </div>
          <p className="text-xs text-gray-600 font-medium">קצב התקדמות</p>
        </div>
      </div>
    </CardContent>
  </Card>
);

const SuggestionsList: React.FC<SuggestionsListProps> = ({
  suggestions: initialSuggestions,
  isHistory = false,
  viewMode: initialViewMode,
  isLoading = false,
  userId,
  className,
  onStatusChange,
  onRefresh,
  isUserInActiveProcess = false,
  onActionRequest, // קבלת הפונקציה מהאב
}) => {
  // State
  const [selectedSuggestion, setSelectedSuggestion] =
    useState<ExtendedMatchSuggestion | null>(null);
  const [showAskDialog, setShowAskDialog] = useState(false);
  // --- START: הסרת state מיותר ---
  // const [showStatusDialog, setShowStatusDialog] = useState(false);
  // const [actionType, setActionType] = useState<"approve" | "decline" | null>(null);
  // --- END: הסרת state מיותר ---
  const [searchQuery, setSearchQuery] = useState('');
  const [sortOption, setSortOption] = useState<SortOption>('newest');
  const [filterOption, setFilterOption] = useState<FilterOption>('all');
  const [viewMode, setViewMode] = useState<'grid' | 'list'>(initialViewMode);
  const [filteredSuggestions, setFilteredSuggestions] =
    useState<ExtendedMatchSuggestion[]>(initialSuggestions);

  // Calculate stats
  const pendingCount = initialSuggestions.filter(
    (s) =>
      s.status === 'PENDING_FIRST_PARTY' || s.status === 'PENDING_SECOND_PARTY'
  ).length;

  // Filter and sort suggestions
  useEffect(() => {
    let result = [...initialSuggestions];

    // Apply search filter
    if (searchQuery) {
      const query = searchQuery.toLowerCase();
      result = result.filter((suggestion) => {
        const targetParty =
          suggestion.firstPartyId === userId
            ? suggestion.secondParty
            : suggestion.firstParty;
        return (
          targetParty.firstName.toLowerCase().includes(query) ||
          targetParty.lastName.toLowerCase().includes(query) ||
          targetParty.profile?.city?.toLowerCase().includes(query) ||
          targetParty.profile?.occupation?.toLowerCase().includes(query) ||
          targetParty.profile?.religiousLevel?.toLowerCase().includes(query)
        );
      });
    }

    // Apply status filter
    if (filterOption !== 'all') {
      switch (filterOption) {
        case 'pending':
          result = result.filter(
            (s) =>
              s.status === 'PENDING_FIRST_PARTY' ||
              s.status === 'PENDING_SECOND_PARTY'
          );
          break;
        case 'accepted':
          result = result.filter(
            (s) =>
              s.status === 'FIRST_PARTY_APPROVED' ||
              s.status === 'SECOND_PARTY_APPROVED'
          );
          break;
        case 'declined':
          result = result.filter(
            (s) =>
              s.status === 'FIRST_PARTY_DECLINED' ||
              s.status === 'SECOND_PARTY_DECLINED'
          );
          break;
        case 'contact_shared':
          result = result.filter((s) => s.status === 'CONTACT_DETAILS_SHARED');
          break;
      }
    }

    // Apply sorting
    switch (sortOption) {
      case 'newest':
        result.sort(
          (a, b) =>
            new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime()
        );
        break;
      case 'oldest':
        result.sort(
          (a, b) =>
            new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime()
        );
        break;
      case 'deadline':
        result.sort((a, b) => {
          if (!a.decisionDeadline) return 1;
          if (!b.decisionDeadline) return -1;
          return (
            new Date(a.decisionDeadline).getTime() -
            new Date(b.decisionDeadline).getTime()
          );
        });
        break;
      case 'priority':
        const priorityOrder = { URGENT: 0, HIGH: 1, MEDIUM: 2, LOW: 3 };
        result.sort(
          (a, b) =>
            (priorityOrder[a.priority as keyof typeof priorityOrder] || 4) -
            (priorityOrder[b.priority as keyof typeof priorityOrder] || 4)
        );
        break;
    }
    setFilteredSuggestions(result);
  }, [initialSuggestions, searchQuery, sortOption, filterOption, userId]);

  // Handlers
  const handleOpenDetails = (suggestion: ExtendedMatchSuggestion) => {
    setSelectedSuggestion(suggestion);
  };

  const handleInquiry = (suggestion: ExtendedMatchSuggestion) => {
    setSelectedSuggestion(suggestion);
    setShowAskDialog(true);
  };

  // --- START: פישוט ה-handler ---
  const handleStatusAction = (
    suggestion: ExtendedMatchSuggestion,
    action: 'approve' | 'decline'
  ) => {
    onActionRequest(suggestion, action);
  };
  // --- END: פישוט ה-handler ---

  // --- START: הסרת handler מיותר ---
  // const handleActionConfirm = async () => { ... } // הפונקציה הזו נמחקת
  // --- END: הסרת handler מיותר ---

  const handleSendQuestion = async (questionText: string) => {
    if (!selectedSuggestion) return;
    try {
      const response = await fetch(
        `/api/suggestions/${selectedSuggestion.id}/inquiries`,
        {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ question: questionText }),
        }
      );
      if (!response.ok) throw new Error('Failed to send inquiry');
      toast.success('השאלה נשלחה בהצלחה לשדכן', {
        description: 'השדכן יחזור אליך עם תשובה בהקדם',
      });
      setShowAskDialog(false);
    } catch (error) {
      console.error('Error sending question:', error);
      toast.error('אירעה שגיאה בשליחת השאלה');
    }
  };

  const clearFilters = () => {
    setSearchQuery('');
    setFilterOption('all');
  };

  // Render loading state
  if (isLoading) {
    return (
      <div className={cn('space-y-6', className)}>
        <Card className="border-0 shadow-lg">
          <CardContent className="p-4">
            <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
              {Array.from({ length: 4 }).map((_, i) => (
                <div key={i} className="text-center space-y-2">
                  <Skeleton className="h-6 w-12 mx-auto" />
                  <Skeleton className="h-3 w-16 mx-auto" />
                </div>
              ))}
            </div>
          </CardContent>
        </Card>
        <div className="flex flex-col gap-4">
          <div className="flex gap-2">
            <Skeleton className="h-10 flex-1" />
            <Skeleton className="h-10 w-20" />
            <Skeleton className="h-10 w-32" />
          </div>
        </div>
        <div
          className={cn(
            viewMode === 'grid'
              ? 'grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6'
              : 'space-y-4'
          )}
        >
          {Array.from({ length: 6 }).map((_, i) => (
            <Skeleton key={i} className="h-80 w-full rounded-2xl" />
          ))}
        </div>
      </div>
    );
  }

  return (
    <>
      <div className={cn('space-y-6', className)}>
        <StatsBar
          total={initialSuggestions.length}
          filtered={filteredSuggestions.length}
          pending={pendingCount}
          isHistory={isHistory}
        />

        <Card className="border-0 shadow-lg bg-white/80 backdrop-blur-sm">
          <CardContent className="p-6">
            <div className="flex flex-col gap-4">
              <div className="flex items-center gap-3">
                <div className="relative flex-1">
                  <Search className="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5" />
                  <Input
                    type="text"
                    placeholder="חיפוש לפי שם, עיר, או מקצוע..."
                    value={searchQuery}
                    onChange={(e) => setSearchQuery(e.target.value)}
                    className="pr-12 text-right border-gray-200 focus:border-purple-300 focus:ring-purple-200 rounded-xl h-12"
                  />
                </div>
                <DropdownMenu>
                  <DropdownMenuTrigger asChild>
                    <Button
                      variant="outline"
                      size="icon"
                      className="h-12 w-12 border-gray-200 hover:border-purple-300 hover:bg-purple-50 rounded-xl transition-colors"
                    >
                      <Filter className="h-5 w-5" />
                    </Button>
                  </DropdownMenuTrigger>
                  <DropdownMenuContent align="end" className="w-56">
                    <DropdownMenuLabel className="text-right">
                      סינון הצעות
                    </DropdownMenuLabel>
                    <DropdownMenuGroup>
                      <DropdownMenuItem onClick={() => setFilterOption('all')}>
                        <Check
                          className={cn(
                            'mr-2 h-4 w-4',
                            filterOption === 'all' ? 'opacity-100' : 'opacity-0'
                          )}
                        />
                        הכל
                      </DropdownMenuItem>
                      <DropdownMenuItem
                        onClick={() => setFilterOption('pending')}
                      >
                        <Check
                          className={cn(
                            'mr-2 h-4 w-4',
                            filterOption === 'pending'
                              ? 'opacity-100'
                              : 'opacity-0'
                          )}
                        />
                        ממתינות לתשובה
                      </DropdownMenuItem>
                      <DropdownMenuItem
                        onClick={() => setFilterOption('accepted')}
                      >
                        <Check
                          className={cn(
                            'mr-2 h-4 w-4',
                            filterOption === 'accepted'
                              ? 'opacity-100'
                              : 'opacity-0'
                          )}
                        />
                        מאושרות
                      </DropdownMenuItem>
                      <DropdownMenuItem
                        onClick={() => setFilterOption('declined')}
                      >
                        <Check
                          className={cn(
                            'mr-2 h-4 w-4',
                            filterOption === 'declined'
                              ? 'opacity-100'
                              : 'opacity-0'
                          )}
                        />
                        שנדחו
                      </DropdownMenuItem>
                      <DropdownMenuItem
                        onClick={() => setFilterOption('contact_shared')}
                      >
                        <Check
                          className={cn(
                            'mr-2 h-4 w-4',
                            filterOption === 'contact_shared'
                              ? 'opacity-100'
                              : 'opacity-0'
                          )}
                        />
                        פרטי קשר שותפו
                      </DropdownMenuItem>
                    </DropdownMenuGroup>
                  </DropdownMenuContent>
                </DropdownMenu>
                <Select
                  value={sortOption}
                  onValueChange={(value) => setSortOption(value as SortOption)}
                >
                  <SelectTrigger className="w-48 h-12 border-gray-200 focus:border-purple-300 rounded-xl">
                    <SelectValue placeholder="מיון לפי" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="newest">
                      <div className="flex items-center gap-2">
                        <SortDesc className="h-4 w-4" />
                        החדש ביותר
                      </div>
                    </SelectItem>
                    <SelectItem value="oldest">
                      <div className="flex items-center gap-2">
                        <SortAsc className="h-4 w-4" />
                        הישן ביותר
                      </div>
                    </SelectItem>
                    <SelectItem value="deadline">
                      <div className="flex items-center gap-2">
                        <Calendar className="h-4 w-4" />
                        תאריך יעד
                      </div>
                    </SelectItem>
                    <SelectItem value="priority">
                      <div className="flex items-center gap-2">
                        <Filter className="h-4 w-4" />
                        עדיפות
                      </div>
                    </SelectItem>
                  </SelectContent>
                </Select>
                <div className="flex border border-gray-200 rounded-xl overflow-hidden">
                  <Button
                    variant={viewMode === 'grid' ? 'default' : 'ghost'}
                    size="icon"
                    className={cn(
                      'h-12 w-12 rounded-none',
                      viewMode === 'grid'
                        ? 'bg-purple-500 hover:bg-purple-600'
                        : 'hover:bg-purple-50'
                    )}
                    onClick={() => setViewMode('grid')}
                  >
                    <Grid3X3 className="h-4 w-4" />
                  </Button>
                  <Button
                    variant={viewMode === 'list' ? 'default' : 'ghost'}
                    size="icon"
                    className={cn(
                      'h-12 w-12 rounded-none',
                      viewMode === 'list'
                        ? 'bg-purple-500 hover:bg-purple-600'
                        : 'hover:bg-purple-50'
                    )}
                    onClick={() => setViewMode('list')}
                  >
                    <ListIcon className="h-4 w-4" />
                  </Button>
                </div>
              </div>
              {(searchQuery || filterOption !== 'all') && (
                <div className="flex items-center gap-2 pt-2 border-t border-gray-100">
                  <span className="text-sm text-gray-500 font-medium">
                    סינון פעיל:
                  </span>
                  {searchQuery && (
                    <Badge
                      variant="outline"
                      className="flex items-center gap-1 bg-purple-50 text-purple-700 border-purple-200"
                    >
                      חיפוש: {searchQuery}
                      <Button
                        variant="ghost"
                        size="icon"
                        className="h-4 w-4 p-0 hover:bg-transparent"
                        onClick={() => setSearchQuery('')}
                      >
                        <XCircle className="h-3 w-3" />
                      </Button>
                    </Badge>
                  )}
                  {filterOption !== 'all' && (
                    <Badge
                      variant="outline"
                      className="flex items-center gap-1 bg-pink-50 text-pink-700 border-pink-200"
                    >
                      {filterOption === 'pending' && 'ממתינות לתשובה'}
                      {filterOption === 'accepted' && 'מאושרות'}
                      {filterOption === 'declined' && 'שנדחו'}
                      {filterOption === 'contact_shared' && 'פרטי קשר שותפו'}
                      <Button
                        variant="ghost"
                        size="icon"
                        className="h-4 w-4 p-0 hover:bg-transparent"
                        onClick={() => setFilterOption('all')}
                      >
                        <XCircle className="h-3 w-3" />
                      </Button>
                    </Badge>
                  )}
                  <Button
                    variant="ghost"
                    size="sm"
                    className="text-xs text-gray-500 hover:text-gray-700"
                    onClick={clearFilters}
                  >
                    נקה הכל
                  </Button>
                </div>
              )}
            </div>
          </CardContent>
        </Card>

        <div className="flex justify-between items-center text-sm text-gray-600">
          <span>
            מציג {filteredSuggestions.length}{' '}
            {filteredSuggestions.length === 1 ? 'הצעה' : 'הצעות'} מתוך{' '}
            {initialSuggestions.length}
          </span>
          {filteredSuggestions.length > 0 && (
            <div className="flex items-center gap-2">
              <Sparkles className="w-4 h-4 text-purple-500" />
              <span className="font-medium">התאמות איכותיות עבורך</span>
            </div>
          )}
        </div>

        {filteredSuggestions.length === 0 ? (
          <EmptyState
            isFiltered={searchQuery !== '' || filterOption !== 'all'}
            isHistory={isHistory}
            onClearFilters={clearFilters}
          />
        ) : (
          <div
            className={cn(
              viewMode === 'grid'
                ? 'grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6'
                : 'space-y-6',
              'animate-fade-in-up'
            )}
          >
            {filteredSuggestions.map((suggestion, index) => (
              <div
                key={suggestion.id}
                className="animate-scale-in"
                style={{
                  animationDelay: `${index * 100}ms`,
                  animationFillMode: 'both',
                }}
              >
                <MinimalSuggestionCard
                  suggestion={suggestion}
                  userId={userId}
                  onClick={() => handleOpenDetails(suggestion)}
                  onInquiry={() => handleInquiry(suggestion)}
                  onApprove={() => handleStatusAction(suggestion, 'approve')}
                  onDecline={() => handleStatusAction(suggestion, 'decline')}
                  isHistory={isHistory}
                  isApprovalDisabled={isUserInActiveProcess}
                  className={cn(
                    'card-hover-elegant',
                    viewMode === 'list' ? 'flex' : ''
                  )}
                />
              </div>
            ))}
          </div>
        )}
      </div>

      {/* Modals */}
      <SuggestionDetailsModal
        suggestion={selectedSuggestion}
        userId={userId}
        isOpen={!!selectedSuggestion && !showAskDialog} // תנאי פשוט יותר
        onClose={() => setSelectedSuggestion(null)}
        onStatusChange={onStatusChange}
        onActionRequest={onActionRequest} // העברת הפונקציה הלאה
        questionnaire={
          selectedSuggestion?.secondParty?.questionnaireResponses?.[0] || null
        }
      />

      <AskMatchmakerDialog
        isOpen={showAskDialog}
        onClose={() => setShowAskDialog(false)}
        onSubmit={handleSendQuestion}
        matchmakerName={selectedSuggestion?.matchmaker.firstName}
        suggestionId={selectedSuggestion?.id}
      />

      {/* --- START: הסרת ה-AlertDialog מכאן --- */}
      {/* <AlertDialog open={showStatusDialog} onOpenChange={setShowStatusDialog}> ... </AlertDialog> */}
      {/* --- END: הסרת ה-AlertDialog --- */}
    </>
  );
};

export default SuggestionsList;
--- End of Content for SuggestionsList.tsx ---

================================================================================
Directory: C:\Users\user\Desktop\matchpoint\shidduch-system\src\app\components\suggestions\modals
================================================================================

--------------------------------------------------------------------------------
File: C:\Users\user\Desktop\matchpoint\shidduch-system\src\app\components\suggestions\modals\SuggestionDetailsModal.tsx
--------------------------------------------------------------------------------
Content:
// src/app/components/suggestions/modals/SuggestionDetailsModal.tsx
'use client';

import React, { useState, useEffect, useCallback, useMemo } from 'react';
import Image from 'next/image';
import { Dialog, DialogContent } from '@/components/ui/dialog';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Button } from '@/components/ui/button';
import { ScrollArea } from '@/components/ui/scroll-area';
import { Card, CardContent } from '@/components/ui/card';
import { Avatar, AvatarFallback } from '@/components/ui/avatar';
import { Badge } from '@/components/ui/badge';
import {
  CheckCircle,
  XCircle,
  MessageCircle,
  X,
  Loader2,
  Sparkles,
  User,
  Info,
  Heart,
  Quote,
  MapPin,
  Briefcase,
  GraduationCap,
  ChevronUp,
  Scroll as ScrollIcon,
  GitCompareArrows,
  Star,
  Eye,
  Calendar,
  ArrowRight,
  Users,
  Target,
  Lightbulb,
  Gift,
  Phone,
  MessageSquare,
  Crown,
  Zap,
  Telescope,
  ChevronDown,
  BookOpen,
  Home,
  Music,
  Camera,
  Coffee,
  Globe,
  Maximize,
  Minimize,
  AlertTriangle,
  Bot,
  PartyPopper,
  Flame,
  TrendingUp,
  Timer,
  Compass,
  Shield,
  Handshake,
  Diamond,
  Gem,
  Award,
  Trophy,
  Wand2,
  Fingerprint,
  Puzzle,
  Network,
  Rocket,
  Sunrise,
  Mountain,
} from 'lucide-react';
import { toast } from 'sonner';
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from '@/components/ui/tooltip';
import { getInitials, cn, getRelativeCloudinaryPath } from '@/lib/utils';
import type { QuestionnaireResponse } from '@/types/next-auth';
import type { AiSuggestionAnalysisResult } from '@/lib/services/aiService';

import { ProfileCard } from '@/app/components/profile';
import SuggestionTimeline from '../timeline/SuggestionTimeline';
import InquiryThreadView from '../inquiries/InquiryThreadView';
import { AskMatchmakerDialog } from '../dialogs/AskMatchmakerDialog';
import { UserAiAnalysisDialog } from '../dialogs/UserAiAnalysisDialog';
import type { ExtendedMatchSuggestion } from '../types';

interface SuggestionDetailsModalProps {
  suggestion: ExtendedMatchSuggestion | null;
  userId: string;
  isOpen: boolean;
  onClose: () => void;
  onStatusChange?: (suggestionId: string, newStatus: string) => Promise<void>;
  questionnaire: QuestionnaireResponse | null;
  onActionRequest: (
    suggestion: ExtendedMatchSuggestion,
    action: 'approve' | 'decline'
  ) => void;
  isDemo?: boolean;
  demoAnalysisData?: AiSuggestionAnalysisResult | null;
}

const useIsMobile = () => {
  const [isMobile, setIsMobile] = useState(false);
  useEffect(() => {
    const checkDevice = () => {
      const isMobileDevice =
        window.innerWidth < 768 ||
        /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(
          navigator.userAgent
        );
      setIsMobile(isMobileDevice);
    };
    checkDevice();
    window.addEventListener('resize', checkDevice);
    window.addEventListener('orientationchange', checkDevice);
    return () => {
      window.removeEventListener('resize', checkDevice);
      window.removeEventListener('orientationchange', checkDevice);
    };
  }, []);
  return isMobile;
};

const useViewportHeight = () => {
  const [viewportHeight, setViewportHeight] = useState(() =>
    typeof window !== 'undefined' ? window.innerHeight : 0
  );
  useEffect(() => {
    const updateHeight = () => {
      if (window.visualViewport) {
        setViewportHeight(window.visualViewport.height);
      } else {
        setViewportHeight(window.innerHeight);
      }
    };
    updateHeight();
    if (window.visualViewport) {
      window.visualViewport.addEventListener('resize', updateHeight);
      return () =>
        window.visualViewport?.removeEventListener('resize', updateHeight);
    } else {
      window.addEventListener('resize', updateHeight);
      return () => window.removeEventListener('resize', updateHeight);
    }
  }, []);
  return viewportHeight;
};

const useFullscreenModal = (isOpen: boolean) => {
  const [isFullscreen, setIsFullscreen] = useState(false);
  const [isTransitioning, setIsTransitioning] = useState(false);
  const toggleFullscreen = useCallback(() => {
    setIsTransitioning(true);
    setIsFullscreen((prev) => !prev);
    setTimeout(() => setIsTransitioning(false), 300);
  }, []);
  useEffect(() => {
    if (!isOpen) {
      setIsFullscreen(false);
      setIsTransitioning(false);
    }
  }, [isOpen]);
  return { isFullscreen, isTransitioning, toggleFullscreen };
};

const EnhancedHeroSection: React.FC<{
  matchmaker: { firstName: string; lastName: string };
  targetParty: ExtendedMatchSuggestion['secondParty'];
  personalNote?: string | null;
  matchingReason?: string | null;
  onViewProfile: () => void;
  onStartConversation: () => void;
}> = ({
  matchmaker,
  targetParty,
  personalNote,
  matchingReason,
  onViewProfile,
  onStartConversation,
}) => {
  const age = targetParty.profile?.birthDate
    ? new Date().getFullYear() -
      new Date(targetParty.profile.birthDate).getFullYear()
    : null;
  const mainImage = targetParty.images?.find((img) => img.isMain)?.url;

  interface ExcitementFactor {
    icon: React.ElementType;
    label: string;
    value: string;
    color: string;
    glow: string;
  }

  const getExcitementFactors = (): ExcitementFactor[] => {
    const factors: ExcitementFactor[] = [];
    if (targetParty.profile?.religiousLevel)
      factors.push({
        icon: ScrollIcon,
        label: 'השקפת עולם',
        value: targetParty.profile.religiousLevel,
        color: 'from-purple-500 to-violet-600',
        glow: 'shadow-purple-200',
      });
    if (targetParty.profile?.city)
      factors.push({
        icon: MapPin,
        label: 'אזור מגורים',
        value: targetParty.profile.city,
        color: 'from-emerald-500 to-green-600',
        glow: 'shadow-emerald-200',
      });
    if (targetParty.profile?.education)
      factors.push({
        icon: GraduationCap,
        label: 'רקע והשכלה',
        value: targetParty.profile.education,
        color: 'from-blue-500 to-cyan-600',
        glow: 'shadow-blue-200',
      });
    if (targetParty.profile?.occupation)
      factors.push({
        icon: Briefcase,
        label: 'תחום עיסוק',
        value: targetParty.profile.occupation,
        color: 'from-amber-500 to-orange-600',
        glow: 'shadow-amber-200',
      });
    return factors;
  };
  const excitementFactors = getExcitementFactors();

  return (
    <div className="relative min-h-screen bg-gradient-to-br from-slate-50 via-white to-blue-50 overflow-hidden">
      <div className="absolute inset-0">
        <div className="absolute top-10 right-10 w-72 h-72 bg-gradient-to-br from-purple-200/40 to-pink-200/40 rounded-full blur-3xl animate-float"></div>
        <div
          className="absolute bottom-10 left-10 w-64 h-64 bg-gradient-to-br from-cyan-200/40 to-blue-200/40 rounded-full blur-2xl animate-float"
          style={{ animationDelay: '2s' }}
        ></div>
        <div
          className="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-96 h-96 bg-gradient-to-br from-emerald-200/20 to-green-200/20 rounded-full blur-3xl animate-float"
          style={{ animationDelay: '4s' }}
        ></div>
      </div>
      <div className="relative z-10 p-4 md:p-8 lg:p-12">
        <div className="text-center mb-8 lg:mb-12">
          <div className="inline-flex items-center gap-2 mb-6 p-3 bg-white/90 backdrop-blur-lg rounded-2xl shadow-lg border border-purple-100 animate-fade-in-up">
            <Avatar className="w-12 h-12 border-2 border-white shadow-lg">
              <AvatarFallback className="bg-gradient-to-br from-purple-600 to-pink-600 text-white text-sm font-bold">
                {getInitials(`${matchmaker.firstName} ${matchmaker.lastName}`)}
              </AvatarFallback>
            </Avatar>
            <div className="text-right">
              <p className="text-xs font-medium text-purple-600 mb-1">
                הצעה מ-
              </p>
              <p className="text-lg font-bold text-gray-800">
                {matchmaker.firstName} {matchmaker.lastName}
              </p>
            </div>
          </div>
          <div className="max-w-4xl mx-auto mb-8">
            {/* --- START: UPDATED TEXT --- */}
            <h1
              className="text-4xl md:text-5xl lg:text-6xl font-bold bg-gradient-to-r from-purple-600 via-pink-600 to-blue-600 bg-clip-text text-transparent mb-6 leading-tight animate-fade-in-up"
              style={{ animationDelay: '0.5s' }}
            >
              זו הצעה שנבחרה במיוחד עבורך
            </h1>
            <p
              className="text-xl md:text-2xl text-gray-700 leading-relaxed font-medium animate-fade-in-up"
              style={{ animationDelay: '1s' }}
            >
              חשבנו עליך כשראינו את הפרופיל הזה.
              <br />
              אנו מאמינים שיש כאן בסיס אמיתי להיכרות משמעותית.
            </p>
            {/* --- END: UPDATED TEXT --- */}
          </div>
        </div>
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-8 lg:gap-12 mb-12">
          <div
            className="relative group animate-fade-in-up"
            style={{ animationDelay: '1.5s' }}
          >
            <div className="absolute -inset-4 bg-gradient-to-r from-purple-400/50 via-pink-400/50 to-blue-400/50 rounded-3xl blur-lg opacity-70 group-hover:opacity-100 transition-opacity animate-pulse"></div>
            <Card className="relative overflow-hidden shadow-2xl border-0 bg-white/95 backdrop-blur-sm">
              <div className="relative h-96 lg:h-[600px]">
                {mainImage ? (
                  <Image
                    src={getRelativeCloudinaryPath(mainImage)}
                    alt={`תמונה של ${targetParty.firstName}`}
                    fill
                    className="object-cover transition-transform duration-700 group-hover:scale-105"
                    sizes="(max-width: 1024px) 100vw, 50vw"
                  />
                ) : (
                  <div className="w-full h-full bg-gradient-to-br from-purple-100 via-pink-100 to-blue-100 flex items-center justify-center">
                    <User className="w-24 h-24 text-purple-400" />
                  </div>
                )}
                <div className="absolute inset-0 bg-gradient-to-t from-black/80 via-black/20 to-transparent" />
                <div className="absolute bottom-0 right-0 left-0 p-6">
                  <div className="bg-white/95 backdrop-blur-lg rounded-2xl p-6 shadow-2xl">
                    <div className="flex items-center justify-between mb-4">
                      <div>
                        <h2 className="text-4xl font-bold text-gray-900 mb-2 tracking-tight">
                          {targetParty.firstName}
                        </h2>
                        {age && (
                          <Badge className="bg-gradient-to-r from-purple-500 to-pink-500 text-white border-0 shadow-lg text-lg px-4 py-2">
                            <Calendar className="w-4 h-4 ml-2" />
                            {age} שנים
                          </Badge>
                        )}
                      </div>
                      <div className="text-center">
                        <div className="w-16 h-16 rounded-full bg-gradient-to-r from-emerald-400 to-cyan-500 flex items-center justify-center shadow-lg mb-2">
                          <Telescope className="w-8 h-8 text-white" />
                        </div>
                        <Button
                          onClick={onViewProfile}
                          className="bg-gradient-to-r from-emerald-500 to-cyan-500 hover:from-emerald-600 hover:to-cyan-600 text-white shadow-xl rounded-full px-6 py-3 font-bold text-base"
                        >
                          גלה עוד ←
                        </Button>
                      </div>
                    </div>
                    <div className="grid grid-cols-2 gap-3 text-sm">
                      {targetParty.profile?.city && (
                        <div className="flex items-center gap-2 p-2 bg-emerald-50 rounded-lg">
                          <MapPin className="w-4 h-4 text-emerald-600" />
                          <span className="font-medium text-gray-700">
                            {targetParty.profile.city}
                          </span>
                        </div>
                      )}
                      {targetParty.profile?.occupation && (
                        <div className="flex items-center gap-2 p-2 bg-blue-50 rounded-lg">
                          <Briefcase className="w-4 h-4 text-blue-600" />
                          <span className="font-medium text-gray-700 truncate">
                            {targetParty.profile.occupation}
                          </span>
                        </div>
                      )}
                    </div>
                  </div>
                </div>
              </div>
            </Card>
          </div>
          <div
            className="space-y-8 animate-fade-in-up"
            style={{ animationDelay: '2s' }}
          >
            <Card className="border-0 shadow-2xl bg-gradient-to-br from-purple-50 via-pink-50 to-white overflow-hidden">
              <CardContent className="p-8 relative">
                <div className="absolute top-0 right-0 w-32 h-32 bg-gradient-to-br from-purple-200/30 to-pink-200/30 rounded-full blur-2xl"></div>
                <div className="absolute bottom-0 left-0 w-24 h-24 bg-gradient-to-br from-blue-200/30 to-cyan-200/30 rounded-full blur-xl"></div>
                <div className="relative z-10">
                  <div className="text-center mb-8">
                    <div className="inline-flex items-center gap-2 mb-4">
                      <Trophy className="w-8 h-8 text-yellow-500" />
                      <Diamond className="w-6 h-6 text-purple-500" />
                      <Gem className="w-7 h-7 text-pink-500" />
                    </div>
                    {/* --- START: UPDATED TEXT --- */}
                    <h2 className="text-3xl md:text-4xl font-bold bg-gradient-to-r from-purple-600 via-pink-600 to-blue-600 bg-clip-text text-transparent mb-4 leading-tight">
                      הסיפור שמאחורי ההתאמה
                    </h2>
                    <p className="text-lg text-gray-700 leading-relaxed">
                      אנו מקשיבים למה שחשוב לך, גם בין השורות.
                      <br />
                      הנה כמה מהחיבורים שזיהינו כאן.
                    </p>
                    {/* --- END: UPDATED TEXT --- */}
                  </div>
                  {excitementFactors.length > 0 && (
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-8">
                      {excitementFactors.map((factor, index) => (
                        <div
                          key={index}
                          className={cn(
                            'relative p-4 bg-white/80 rounded-xl shadow-lg hover:shadow-xl transition-all duration-300 hover:-translate-y-2 group',
                            factor.glow
                          )}
                        >
                          <div className="flex items-center gap-3">
                            <div
                              className={cn(
                                'w-12 h-12 rounded-full bg-gradient-to-r text-white flex items-center justify-center shadow-lg group-hover:scale-110 transition-transform',
                                factor.color
                              )}
                            >
                              <factor.icon className="w-6 h-6" />
                            </div>
                            <div className="flex-1">
                              <p className="font-bold text-gray-800 text-sm mb-1">
                                {factor.label}
                              </p>
                              <p className="text-gray-600 text-xs leading-relaxed">
                                {factor.value}
                              </p>
                            </div>
                          </div>
                          <div className="absolute top-1 right-1">
                            <div className="w-2 h-2 bg-gradient-to-r from-yellow-400 to-orange-400 rounded-full animate-ping"></div>
                          </div>
                        </div>
                      ))}
                    </div>
                  )}
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <Button
                      onClick={onViewProfile}
                      size="lg"
                      className="bg-gradient-to-r from-purple-500 to-pink-500 hover:from-purple-600 hover:to-pink-600 text-white shadow-xl rounded-xl h-14 font-bold text-base transform hover:scale-105 transition-all"
                    >
                      <User className="w-5 h-5 ml-2" />
                      צפה בפרופיל המלא
                      <ArrowRight className="w-4 h-4 mr-2" />
                    </Button>
                    <Button
                      onClick={onStartConversation}
                      variant="outline"
                      size="lg"
                      className="border-2 border-purple-300 text-purple-600 hover:bg-purple-50 shadow-lg rounded-xl h-14 font-bold text-base transform hover:scale-105 transition-all"
                    >
                      <MessageSquare className="w-5 h-5 ml-2" />
                      יש לי שאלות
                    </Button>
                  </div>
                </div>
              </CardContent>
            </Card>
            {(personalNote || matchingReason) && (
              <Card className="border-0 shadow-xl bg-gradient-to-br from-cyan-50 to-blue-50 overflow-hidden">
                <CardContent className="p-6 relative">
                  <div className="absolute top-0 right-0 w-20 h-20 bg-gradient-to-br from-cyan-200/30 to-blue-200/30 rounded-full blur-xl"></div>
                  <div className="relative z-10">
                    <div className="flex items-start gap-4">
                      <div className="p-4 rounded-full bg-gradient-to-r from-cyan-500 to-blue-500 text-white shadow-lg flex-shrink-0">
                        <Lightbulb className="w-7 h-7" />
                      </div>
                      <div className="flex-1">
                        <div className="flex items-center gap-2 mb-4">
                          <h3 className="font-bold text-cyan-800 text-xl">
                            💭 התובנה המקצועית
                          </h3>
                        </div>
                        {personalNote && (
                          <div className="mb-4 p-4 bg-white/70 rounded-xl shadow-inner border border-cyan-100">
                            <div className="flex items-start gap-2">
                              <Quote className="w-5 h-5 text-cyan-500 mt-1 flex-shrink-0" />
                              <div>
                                <h4 className="font-semibold text-cyan-800 mb-2">
                                  למה זה מתאים דווקא לך:
                                </h4>
                                <p className="text-cyan-900 leading-relaxed italic font-medium">
                                  “{personalNote}”
                                </p>
                              </div>
                            </div>
                          </div>
                        )}
                        {matchingReason && (
                          <div className="p-4 bg-white/70 rounded-xl shadow-inner border border-blue-100">
                            <div className="flex items-start gap-2">
                              <Puzzle className="w-5 h-5 text-blue-500 mt-1 flex-shrink-0" />
                              <div>
                                <h4 className="font-semibold text-blue-800 mb-2">
                                  החיבור שאנחנו רואים:
                                </h4>
                                <p className="text-blue-900 leading-relaxed font-medium">
                                  “{matchingReason}”
                                </p>
                              </div>
                            </div>
                          </div>
                        )}
                      </div>
                    </div>
                  </div>
                </CardContent>
              </Card>
            )}
            <Card className="border-0 shadow-xl bg-gradient-to-r from-emerald-500 to-cyan-500 text-white overflow-hidden">
              <CardContent className="p-6 text-center relative">
                <div className="absolute inset-0 bg-gradient-to-r from-emerald-600/20 to-cyan-600/20"></div>
                <div className="relative z-10">
                  <div className="flex justify-center mb-4">
                    <div className="flex items-center gap-2">
                      <Rocket className="w-8 h-8 animate-bounce" />
                      <Sunrise className="w-6 h-6" />
                      <Mountain className="w-7 h-7" />
                    </div>
                  </div>
                  {/* --- START: UPDATED TEXT --- */}
                  <h3 className="text-2xl font-bold mb-3">
                    מה עכשיו? ההחלטה בידיים שלך
                  </h3>
                  <p className="text-emerald-100 text-lg leading-relaxed mb-4">
                    כל החלטה שתקבל/י היא צעד נכון במסע שלך.
                    <br />
                    קח/י את הזמן, ובחר/י מה שהכי מרגיש לך נכון.
                  </p>
                  {/* --- END: UPDATED TEXT --- */}
                  <div className="flex justify-center">
                    <Badge className="bg-white/20 text-white border-white/30 px-4 py-2 text-base">
                      <Timer className="w-4 h-4 ml-2" />
                      הזמן הכי טוב הוא עכשיו
                    </Badge>
                  </div>
                </div>
              </CardContent>
            </Card>
          </div>
        </div>
      </div>
    </div>
  );
};

// ... (Rest of the file remains unchanged)
// The components EnhancedQuickActions, EnhancedTabsSection, and the main SuggestionDetailsModal
// will remain as they are, since their logic is not affected by these text changes.

const EnhancedQuickActions: React.FC<{
  isExpanded: boolean;
  onToggleExpand: () => void;
  canAct: boolean;
  isSubmitting: boolean;
  onApprove: () => void;
  onDecline: () => void;
  onAskQuestion: () => void;
}> = ({
  isExpanded,
  onToggleExpand,
  canAct,
  isSubmitting,
  onApprove,
  onDecline,
  onAskQuestion,
}) => (
  <div
    className={cn(
      'flex-shrink-0 bg-gradient-to-r from-white via-purple-50/50 to-pink-50/50 backdrop-blur-sm border-t border-purple-100 transition-all duration-500 ease-in-out relative overflow-hidden',
      isExpanded ? 'p-4 md:p-6' : 'py-3 px-4 md:px-6'
    )}
  >
    <div className="absolute inset-0 bg-gradient-to-r from-purple-100/20 via-pink-100/20 to-blue-100/20"></div>
    <div className="max-w-4xl mx-auto relative z-10">
      <div
        className="flex justify-between items-center cursor-pointer group"
        onClick={onToggleExpand}
      >
        <div className="flex items-center gap-3">
          <div className="w-10 h-10 rounded-full bg-gradient-to-r from-purple-500 to-pink-500 flex items-center justify-center shadow-lg">
            <PartyPopper className="w-5 h-5 text-white" />
          </div>
          <div>
            <p className="text-base font-bold text-purple-700">
              {isExpanded
                ? '✨ זה הרגע הכי חשוב - מה ההחלטה שלך?'
                : '🎯 פעולות מהירות'}
            </p>
            {isExpanded && (
              <p className="text-sm text-gray-600 mt-1">
                כל החלטה היא הזדמנות חדשה
              </p>
            )}
          </div>
        </div>
        <Button
          variant="ghost"
          size="icon"
          className="rounded-full h-10 w-10 text-purple-500 hover:bg-purple-100/50 group-hover:scale-110 transition-all"
        >
          {isExpanded ? (
            <ChevronDown className="w-5 h-5" />
          ) : (
            <ChevronUp className="w-5 h-5" />
          )}
        </Button>
      </div>
      {isExpanded && (
        <div className="mt-6 animate-in fade-in-50 slide-in-from-bottom-4 duration-500">
          <div className="grid grid-cols-1 gap-4 md:flex md:gap-6">
            {canAct && (
              <div className="relative md:flex-1">
                <div className="absolute -inset-1 bg-gradient-to-r from-emerald-400 to-green-500 rounded-2xl blur opacity-60 animate-pulse"></div>
                <Button
                  className="relative w-full bg-gradient-to-r from-emerald-500 via-green-500 to-emerald-600 hover:from-emerald-600 hover:via-green-600 hover:to-emerald-700 text-white shadow-2xl hover:shadow-3xl transition-all duration-300 rounded-2xl h-16 font-bold text-lg transform hover:scale-105 overflow-hidden"
                  disabled={isSubmitting}
                  onClick={onApprove}
                >
                  <div className="absolute inset-0 bg-gradient-to-r from-white/20 to-transparent opacity-0 hover:opacity-100 transition-opacity"></div>
                  {isSubmitting ? (
                    <div className="flex items-center">
                      <Loader2 className="w-6 h-6 animate-spin ml-3" />
                      <span>שולח...</span>
                    </div>
                  ) : (
                    <div className="flex items-center justify-center relative z-10">
                      <div className="flex items-center gap-3">
                        <Heart className="w-6 h-6 animate-pulse" />
                        <span>💝 מעוניין/ת להכיר!</span>
                        <Sparkles className="w-5 h-5" />
                      </div>
                    </div>
                  )}
                </Button>
              </div>
            )}
            <Button
              variant="outline"
              onClick={onAskQuestion}
              disabled={isSubmitting}
              className="w-full md:flex-1 border-2 border-purple-200 text-purple-600 hover:bg-purple-50 hover:border-purple-300 transition-all duration-300 rounded-2xl h-16 font-bold text-lg shadow-lg hover:shadow-xl transform hover:scale-105"
            >
              <div className="flex items-center justify-center gap-3">
                <MessageCircle className="w-6 h-6" />
                <span>🤔 שאלות לשדכן</span>
              </div>
            </Button>
            {canAct && (
              <Button
                variant="ghost"
                className="w-full md:flex-1 text-gray-600 hover:bg-gray-100 hover:text-gray-700 transition-all duration-300 rounded-2xl h-16 font-bold text-lg md:border-2 md:border-gray-200 md:shadow-lg md:hover:border-gray-300 transform hover:scale-105"
                disabled={isSubmitting}
                onClick={onDecline}
              >
                {isSubmitting ? (
                  <div className="flex items-center">
                    <Loader2 className="w-5 h-5 animate-spin ml-2" />
                    <span>מעדכן...</span>
                  </div>
                ) : (
                  <div className="flex items-center justify-center gap-3">
                    <XCircle className="w-5 h-5" />
                    <span>😔 לא מתאים כרגע</span>
                  </div>
                )}
              </Button>
            )}
          </div>
          {canAct && (
            <div className="mt-4 text-center">
              <p className="text-sm text-gray-600 leading-relaxed">
                <span className="font-semibold text-purple-600">💡 זכור:</span>{' '}
                כל החלטה שתקבל תעביר אותנו צעד אחד קדימה במציאת ההתאמה המושלמת
                עבורך
              </p>
            </div>
          )}
        </div>
      )}
    </div>
  </div>
);

const EnhancedTabsSection: React.FC<{
  activeTab: string;
  onTabChange: (tab: string) => void;
  onClose: () => void;
  isFullscreen: boolean;
  onToggleFullscreen: () => void;
  isMobile: boolean;
  isTransitioning?: boolean;
}> = ({
  activeTab,
  onTabChange,
  onClose,
  isFullscreen,
  onToggleFullscreen,
  isMobile,
  isTransitioning = false,
}) => (
  <div className="border-b border-purple-100 px-2 sm:px-6 pt-4 bg-gradient-to-r from-purple-50/80 to-pink-50/80 backdrop-blur-sm sticky top-0 z-20">
    <div className="flex items-center justify-between mb-4">
      <TabsList className="grid w-full grid-cols-4 bg-white/90 backdrop-blur-sm rounded-3xl p-2 h-20 shadow-xl border-2 border-purple-100 overflow-hidden">
        <TabsTrigger
          value="presentation"
          className="flex flex-col items-center justify-center gap-1.5 rounded-2xl text-xs sm:text-sm data-[state=active]:bg-gradient-to-br data-[state=active]:from-purple-500 data-[state=active]:to-pink-500 data-[state=active]:text-white data-[state=active]:shadow-xl font-bold transition-all duration-300 hover:scale-105 relative overflow-hidden group"
        >
          <div className="absolute inset-0 bg-gradient-to-r from-purple-600/0 to-pink-600/0 group-data-[state=active]:from-purple-600/20 group-data-[state=active]:to-pink-600/20 transition-all"></div>
          <Sparkles className="w-5 h-5 sm:w-6 sm:h-6 relative z-10" />
          <span className="relative z-10">
            <span className="hidden sm:inline">הצגה מרשימה</span>
            <span className="sm:hidden">הצגה</span>
          </span>
        </TabsTrigger>
        <TabsTrigger
          value="profile"
          className="flex flex-col items-center justify-center gap-1.5 rounded-2xl text-xs sm:text-sm data-[state=active]:bg-gradient-to-br data-[state=active]:from-emerald-500 data-[state=active]:to-green-500 data-[state=active]:text-white data-[state=active]:shadow-xl font-bold transition-all duration-300 hover:scale-105 relative overflow-hidden group"
        >
          <div className="absolute inset-0 bg-gradient-to-r from-emerald-600/0 to-green-600/0 group-data-[state=active]:from-emerald-600/20 group-data-[state=active]:to-green-600/20 transition-all"></div>
          <User className="w-5 h-5 sm:w-6 sm:h-6 relative z-10" />
          <span className="relative z-10">
            <span className="hidden sm:inline">פרופיל מלא</span>
            <span className="sm:hidden">פרופיל</span>
          </span>
        </TabsTrigger>
        <TabsTrigger
          value="compatibility"
          className="flex flex-col items-center justify-center gap-1.5 rounded-2xl text-xs sm:text-sm data-[state=active]:bg-gradient-to-br data-[state=active]:from-blue-500 data-[state=active]:to-cyan-500 data-[state=active]:text-white data-[state=active]:shadow-xl font-bold transition-all duration-300 hover:scale-105 relative overflow-hidden group"
        >
          <div className="absolute inset-0 bg-gradient-to-r from-blue-600/0 to-cyan-600/0 group-data-[state=active]:from-blue-600/20 group-data-[state=active]:to-cyan-600/20 transition-all"></div>
          <GitCompareArrows className="w-5 h-5 sm:w-6 sm:h-6 relative z-10" />
          <span className="relative z-10">
            <span className="hidden sm:inline">ניתוח התאמה</span>
            <span className="sm:hidden">התאמה</span>
          </span>
        </TabsTrigger>
        <TabsTrigger
          value="details"
          className="flex flex-col items-center justify-center gap-1.5 rounded-2xl text-xs sm:text-sm data-[state=active]:bg-gradient-to-br data-[state=active]:from-gray-500 data-[state=active]:to-slate-500 data-[state=active]:text-white data-[state=active]:shadow-xl font-bold transition-all duration-300 hover:scale-105 relative overflow-hidden group"
        >
          <div className="absolute inset-0 bg-gradient-to-r from-gray-600/0 to-slate-600/0 group-data-[state=active]:from-gray-600/20 group-data-[state=active]:to-slate-600/20 transition-all"></div>
          <Info className="w-5 h-5 sm:w-6 sm:h-6 relative z-10" />
          <span className="relative z-10">
            <span className="hidden sm:inline">פרטים ותקשורת</span>
            <span className="sm:hidden">פרטים</span>
          </span>
        </TabsTrigger>
      </TabsList>
      <div className="flex items-center gap-2 ml-4">
        {!isMobile && (
          <TooltipProvider>
            <Tooltip>
              <TooltipTrigger asChild>
                <Button
                  variant="ghost"
                  size="icon"
                  onClick={onToggleFullscreen}
                  className="rounded-full h-12 w-12 text-blue-500 hover:text-blue-600 hover:bg-blue-50 transition-all hover:scale-110 fullscreen-button icon-transition"
                  disabled={isTransitioning}
                >
                  {isFullscreen ? (
                    <Minimize className="w-6 h-6" />
                  ) : (
                    <Maximize className="w-6 h-6" />
                  )}
                </Button>
              </TooltipTrigger>
              <TooltipContent side="bottom">
                <p>{isFullscreen ? 'צמצם חלון' : 'הגדל למסך מלא'}</p>
              </TooltipContent>
            </Tooltip>
          </TooltipProvider>
        )}
        <Button
          variant="ghost"
          size="icon"
          onClick={onClose}
          className="rounded-full h-12 w-12 text-gray-400 hover:text-gray-600 hover:bg-gray-100 transition-all hover:scale-110"
        >
          <X className="w-6 h-6" />
        </Button>
      </div>
    </div>
  </div>
);

const SuggestionDetailsModal: React.FC<SuggestionDetailsModalProps> = ({
  suggestion,
  userId,
  isOpen,
  onClose,
  onStatusChange,
  questionnaire,
  onActionRequest,
  isDemo = false,
  demoAnalysisData = null,
}) => {
  const [activeTab, setActiveTab] = useState('presentation');
  const [showAskDialog, setShowAskDialog] = useState(false);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [isQuestionnaireLoading, setIsQuestionnaireLoading] = useState(false);
  const [isActionsExpanded, setIsActionsExpanded] = useState(false);

  const isMobile = useIsMobile();
  const viewportHeight = useViewportHeight();
  const { isFullscreen, isTransitioning, toggleFullscreen } =
    useFullscreenModal(isOpen);

  useEffect(() => {
    if (isOpen) {
      setActiveTab('presentation');
      setIsActionsExpanded(false);
      if (isMobile || isFullscreen) {
        document.body.style.overflow = 'hidden';
        document.documentElement.style.overflow = 'hidden';
        if (isMobile) {
          document.documentElement.style.setProperty(
            '--vh',
            `${viewportHeight * 0.01}px`
          );
        }
      }
    } else {
      document.body.style.overflow = '';
      document.documentElement.style.overflow = '';
      document.documentElement.style.removeProperty('--vh');
    }
    return () => {
      document.body.style.overflow = '';
      document.documentElement.style.overflow = '';
      document.documentElement.style.removeProperty('--vh');
    };
  }, [isOpen, suggestion?.id, isMobile, isFullscreen, viewportHeight]);

  const isFirstParty = suggestion?.firstPartyId === userId;
  const targetParty = suggestion
    ? isFirstParty
      ? suggestion.secondParty
      : suggestion.firstParty
    : null;
  const profileWithUser = useMemo(() => {
    if (!targetParty || !targetParty.profile) {
      return null;
    }
    return {
      ...targetParty.profile,
      user: {
        firstName: targetParty.firstName,
        lastName: targetParty.lastName,
      },
    };
  }, [targetParty]);

  if (!suggestion || !targetParty || !profileWithUser) return null;

  const canActOnSuggestion =
    (isFirstParty && suggestion.status === 'PENDING_FIRST_PARTY') ||
    (!isFirstParty && suggestion.status === 'PENDING_SECOND_PARTY');

  const triggerConfirmDialog = (action: 'approve' | 'decline') => {
    if (suggestion) {
      onActionRequest(suggestion, action);
    }
  };

  const handleSendQuestion = async (question: string) => {
    setIsSubmitting(true);
    try {
      const response = await fetch(
        `/api/suggestions/${suggestion.id}/inquiries`,
        {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ question }),
        }
      );
      if (!response.ok) throw new Error('Failed to send inquiry.');
      toast.success('🚀 שאלתך נשלחה בהצלחה!', {
        description: 'השדכן יחזור אליך עם תשובה בהקדם',
      });
      setShowAskDialog(false);
    } catch (error) {
      toast.error('אירעה שגיאה בשליחת השאלה.');
    } finally {
      setIsSubmitting(false);
    }
  };

  const getModalClasses = () => {
    const baseClasses =
      'p-0 shadow-2xl border-0 bg-white overflow-hidden z-[50] flex flex-col transition-all duration-300 ease-in-out';
    if (isMobile) {
      return `${baseClasses} !w-screen !h-screen !max-w-none !max-h-none !rounded-none !fixed !inset-0`;
    } else if (isFullscreen) {
      return `${baseClasses} !w-screen !h-screen !max-w-none !max-h-none !rounded-none !fixed !inset-0 !m-0 !translate-x-0 !translate-y-0 !transform-none`;
    } else {
      return `${baseClasses} md:max-w-7xl md:w-[95vw] md:h-[95vh] md:rounded-3xl`;
    }
  };

  return (
    <>
      <Dialog open={isOpen} onOpenChange={onClose}>
        <DialogContent
          className={cn(getModalClasses())}
          dir="rtl"
          onOpenAutoFocus={(e) => e.preventDefault()}
          data-fullscreen={isFullscreen}
          data-mobile={isMobile}
          style={
            isFullscreen && !isMobile
              ? {
                  position: 'fixed',
                  top: 0,
                  left: 0,
                  right: 0,
                  bottom: 0,
                  width: '100vw',
                  height: '100vh',
                  maxWidth: 'none',
                  maxHeight: 'none',
                  borderRadius: 0,
                  margin: 0,
                  transform: 'none',
                }
              : undefined
          }
        >
          <ScrollArea className="flex-grow min-h-0 modal-scroll">
            <Tabs
              value={activeTab}
              onValueChange={setActiveTab}
              className="h-full"
            >
              <EnhancedTabsSection
                activeTab={activeTab}
                onTabChange={setActiveTab}
                onClose={onClose}
                isFullscreen={isFullscreen}
                onToggleFullscreen={!isMobile ? toggleFullscreen : () => {}}
                isMobile={isMobile}
                isTransitioning={isTransitioning}
              />
              <TabsContent value="presentation" className="mt-0">
                <EnhancedHeroSection
                  matchmaker={suggestion.matchmaker}
                  targetParty={targetParty}
                  personalNote={
                    isFirstParty
                      ? suggestion.firstPartyNotes
                      : suggestion.secondPartyNotes
                  }
                  matchingReason={suggestion.matchingReason}
                  onViewProfile={() => setActiveTab('profile')}
                  onStartConversation={() => setShowAskDialog(true)}
                />
              </TabsContent>
              <TabsContent
                value="profile"
                className="mt-0 p-4 md:p-6 bg-gradient-to-br from-slate-50 to-blue-50 min-h-screen"
              >
                {isQuestionnaireLoading ? (
                  <div className="flex justify-center items-center h-64">
                    <div className="text-center">
                      <Loader2 className="w-12 h-12 animate-spin text-purple-600 mx-auto mb-4" />
                      <p className="text-lg font-semibold text-gray-700">
                        טוען פרופיל מפורט...
                      </p>
                      <p className="text-sm text-gray-500 mt-2">
                        זה יכול לקחת מספר שניות
                      </p>
                    </div>
                  </div>
                ) : profileWithUser ? (
                  <ProfileCard
                    profile={profileWithUser}
                    isProfileComplete={targetParty.isProfileComplete}
                    images={targetParty.images}
                    questionnaire={questionnaire}
                    viewMode="candidate"
                  />
                ) : (
                  <div className="text-center p-12">
                    <div className="w-24 h-24 rounded-full bg-red-100 flex items-center justify-center mx-auto mb-6">
                      <AlertTriangle className="w-12 h-12 text-red-500" />
                    </div>
                    <h3 className="text-2xl font-bold text-gray-800 mb-4">
                      שגיאה בטעינת פרופיל
                    </h3>
                    <p className="text-gray-600 max-w-md mx-auto leading-relaxed">
                      לא הצלחנו לטעון את הפרופיל. אנא פנה לשדכן לקבלת עזרה
                      נוספת.
                    </p>
                    <Button
                      onClick={() => setShowAskDialog(true)}
                      className="mt-6 bg-gradient-to-r from-purple-500 to-pink-500 text-white"
                    >
                      <MessageCircle className="w-4 h-4 ml-2" />
                      פנה לשדכן
                    </Button>
                  </div>
                )}
              </TabsContent>
              <TabsContent
                value="compatibility"
                className="mt-0 p-4 md:p-6 bg-gradient-to-br from-slate-50 to-blue-50 min-h-screen"
              >
                <div className="flex flex-col items-center justify-center h-full min-h-[600px] text-center space-y-8 p-6">
                  <div className="relative">
                    <div className="w-32 h-32 rounded-full bg-gradient-to-br from-blue-100 to-cyan-100 flex items-center justify-center mx-auto shadow-2xl">
                      <Bot className="w-16 h-16 text-blue-500" />
                    </div>
                    <div className="absolute -top-4 -right-4 w-12 h-12 bg-gradient-to-r from-yellow-400 to-orange-500 rounded-full flex items-center justify-center shadow-lg animate-bounce">
                      <Wand2 className="w-6 h-6 text-white" />
                    </div>
                  </div>
                  <div className="space-y-4 max-w-2xl">
                    <h3 className="text-3xl font-bold text-gray-800">
                      🔮 רוצה מבט מעמיק יותר?
                    </h3>
                    <p className="text-xl text-gray-600 leading-relaxed">
                      ה-AI החכם שלנו יכול לנתח את כל הנתונים ולספק לך תובנות
                      מקצועיות על פוטנציאל החיבור, נקודות חוזק, וגם רעיונות
                      לפתיחת שיחה.
                    </p>
                    <div className="flex items-center justify-center gap-4 text-sm text-gray-500 font-medium">
                      <div className="flex items-center gap-2">
                        <TrendingUp className="w-4 h-4" />
                        <span>ניתוח עמוק</span>
                      </div>
                      <div className="flex items-center gap-2">
                        <Network className="w-4 h-4" />
                        <span>נקודות חיבור</span>
                      </div>
                      <div className="flex items-center gap-2">
                        <Compass className="w-4 h-4" />
                        <span>הדרכה אישית</span>
                      </div>
                    </div>
                  </div>
                  <UserAiAnalysisDialog
                    suggestedUserId={targetParty.id}
                    isDemo={isDemo}
                    demoAnalysisData={demoAnalysisData}
                  />
                </div>
              </TabsContent>
              <TabsContent
                value="details"
                className="mt-0 p-6 md:p-8 space-y-8 bg-gradient-to-br from-slate-50 to-gray-50 min-h-screen"
              >
                <div className="max-w-6xl mx-auto space-y-8">
                  <SuggestionTimeline
                    statusHistory={suggestion.statusHistory}
                  />
                  <InquiryThreadView
                    suggestionId={suggestion.id}
                    userId={userId}
                    showComposer={true}
                  />
                </div>
              </TabsContent>
            </Tabs>
          </ScrollArea>
          <EnhancedQuickActions
            isExpanded={isActionsExpanded}
            onToggleExpand={() => setIsActionsExpanded((prev) => !prev)}
            canAct={canActOnSuggestion}
            isSubmitting={isSubmitting}
            onApprove={() => triggerConfirmDialog('approve')}
            onDecline={() => triggerConfirmDialog('decline')}
            onAskQuestion={() => setShowAskDialog(true)}
          />
        </DialogContent>
      </Dialog>
      <AskMatchmakerDialog
        isOpen={showAskDialog}
        onClose={() => setShowAskDialog(false)}
        onSubmit={handleSendQuestion}
        matchmakerName={`${suggestion.matchmaker.firstName} ${suggestion.matchmaker.lastName}`}
        suggestionId={suggestion.id}
      />
    </>
  );
};

export default SuggestionDetailsModal;
--- End of Content for SuggestionDetailsModal.tsx ---

================================================================================
Directory: C:\Users\user\Desktop\matchpoint\shidduch-system\src\app\components\suggestions\presentation
================================================================================

--------------------------------------------------------------------------------
File: C:\Users\user\Desktop\matchpoint\shidduch-system\src\app\components\suggestions\presentation\CompatibilityHighlights.tsx
--------------------------------------------------------------------------------
Content:
// src/app/components/suggestions/presentation/CompatibilityHighlights.tsx
import React from 'react';
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from '@/components/ui/badge';
import { Check, BookOpen, Scroll, MapPin, Briefcase, Heart } from 'lucide-react';

interface ProfileData {
  religiousLevel?: string | null;
  education?: string | null;
  city?: string | null;
  occupation?: string | null;
}

interface CompatibilityHighlightsProps {
  firstPartyProfile: ProfileData;
  secondPartyProfile: ProfileData;
  matchingReason?: string | null;
}

interface Highlight {
  icon: React.ElementType;
  title: string;
  description: string;
  color: 'green' | 'blue' | 'indigo' | 'rose' | 'teal' | 'amber';
}

const CompatibilityHighlights: React.FC<CompatibilityHighlightsProps> = ({ firstPartyProfile, secondPartyProfile, matchingReason }) => {
  const highlights: Highlight[] = [];

  // 1. Religious Level
  if (firstPartyProfile.religiousLevel && firstPartyProfile.religiousLevel === secondPartyProfile.religiousLevel) {
    highlights.push({ icon: Scroll, title: "השקפת עולם דומה", description: `שניכם הגדרתם את עצמכם כ: ${firstPartyProfile.religiousLevel}`, color: 'indigo' });
  }

  // 2. Location (proximity logic would be better, but for now we'll check same city)
  if (firstPartyProfile.city && firstPartyProfile.city === secondPartyProfile.city) {
    highlights.push({ icon: MapPin, title: "קירבה גיאוגרפית", description: `שניכם גרים ב${firstPartyProfile.city}`, color: 'teal' });
  }

  // 3. Education - simple check for existence
  if (firstPartyProfile.education && secondPartyProfile.education) {
     highlights.push({ icon: BookOpen, title: "רקע והשכלה", description: `רקע לימודי ותעסוקתי שמשתלב היטב`, color: 'blue' });
  }
  
  // 4. From matching reason text
  const reasonText = matchingReason?.toLowerCase() || '';
  if (reasonText.includes('אופי') || reasonText.includes('אישיות')) {
     highlights.push({ icon: Heart, title: "התאמה אישיותית", description: 'השדכן/ית זיהו פוטנציאל לחיבור עמוק ברמה האישית.', color: 'rose' });
  }

  if (highlights.length === 0) {
      // Add a default highlight if none were found
      highlights.push({ icon: Check, title: "פוטנציאל להתאמה", description: 'השדכן/ית זיהו כאן הזדמנות שכדאי לבדוק!', color: 'green' });
  }

  return (
    <Card>
      <CardHeader>
        <CardTitle className="text-xl text-center">נקודות החיבור המרכזיות</CardTitle>
      </CardHeader>
      <CardContent>
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
          {highlights.slice(0, 3).map((item, index) => (
            <div key={index} className={`p-4 rounded-lg border-2 border-${item.color}-200 bg-${item.color}-50 text-center transition-transform hover:scale-105`}>
              <div className={`mx-auto w-12 h-12 rounded-full bg-${item.color}-500 text-white flex items-center justify-center mb-3 shadow-lg`}>
                <item.icon className="w-6 h-6" />
              </div>
              <h4 className={`font-bold text-lg text-${item.color}-800`}>{item.title}</h4>
              <p className="text-sm text-gray-600 mt-1">{item.description}</p>
            </div>
          ))}
        </div>
      </CardContent>
    </Card>
  );
};

export default CompatibilityHighlights;
--- End of Content for CompatibilityHighlights.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\user\Desktop\matchpoint\shidduch-system\src\app\components\suggestions\presentation\MatchPresentationView.tsx
--------------------------------------------------------------------------------
Content:
// src/app/components/suggestions/presentation/MatchPresentationView.tsx
'use client';
import React from 'react';
import Image from 'next/image';
import {
  Heart,
  Sparkles,
  User,
  BookOpen,
  Scroll,
  MapPin,
  Briefcase,
  Quote,
  GraduationCap,
  ChevronLeft,
  type LucideProps,
} from 'lucide-react';
import { Avatar, AvatarFallback } from '@/components/ui/avatar';
import { Button } from '@/components/ui/button';
import { Card, CardContent } from '@/components/ui/card';
import { UserAiAnalysisDialog } from '../dialogs/UserAiAnalysisDialog';
import { getInitials } from '@/lib/utils';
import { cn } from '@/lib/utils';
import type { ExtendedMatchSuggestion } from '../types';

// --- קומפוננטות עזר פנימיות לעיצוב החדש ---

/**
 * HeroIntroduction: פתיח אישי מהשדכן.
 * יוצר את המסגרת הרגשית להצעה.
 */
const HeroIntroduction: React.FC<{
  matchmaker: { firstName: string; lastName: string };
  personalNote?: string | null;
}> = ({ matchmaker, personalNote }) => (
  <div className="text-center p-6 rounded-2xl bg-gradient-to-br from-purple-100/50 via-pink-100/50 to-blue-100/50 border border-purple-200/40 shadow-lg">
    <div className="flex justify-center mb-4">
      <Avatar className="w-16 h-16 border-4 border-white shadow-md">
        <AvatarFallback className="bg-purple-500 text-white text-xl font-bold">
          {getInitials(`${matchmaker.firstName} ${matchmaker.lastName}`)}
        </AvatarFallback>
      </Avatar>
    </div>
    <h2 className="text-2xl md:text-3xl font-bold text-gray-800 tracking-tight">
      הצעה מיוחדת בדרך אליך...
    </h2>
    <p className="text-gray-600 mt-2">
      מחשבות מהשדכן/ית, {matchmaker.firstName}:
    </p>
    {personalNote && (
      <div className="mt-4 max-w-2xl mx-auto">
        <div className="relative bg-white/60 p-4 rounded-xl shadow-inner border border-purple-100">
          <Quote className="absolute top-2 right-2 w-8 h-8 text-purple-200/80 transform scale-x-[-1]" />
          <p className="text-lg text-purple-800 italic font-medium leading-relaxed">
            {personalNote}
          </p>
          <Quote className="absolute bottom-2 left-2 w-8 h-8 text-purple-200/80" />
        </div>
      </div>
    )}
  </div>
);

/**
 * ProfilePeek: כרטיס הצצה למועמד/ת.
 * עונה על השאלה "מי?" ויוצר סקרנות.
 */
const ProfilePeek: React.FC<{
  targetParty: ExtendedMatchSuggestion['secondParty'];
  onViewProfileClick: () => void;
}> = ({ targetParty, onViewProfileClick }) => {
  const age = targetParty.profile?.birthDate
    ? new Date().getFullYear() -
      new Date(targetParty.profile.birthDate).getFullYear()
    : null;
  const mainImage = targetParty.images?.find((img) => img.isMain)?.url;
  return (
    <Card className="overflow-hidden shadow-xl transition-all hover:shadow-2xl">
      <div className="grid grid-cols-1 md:grid-cols-3">
        <div className="relative h-64 md:h-auto">
          {mainImage ? (
            <Image
              src={mainImage}
              alt={`תמונה של ${targetParty.firstName}`}
              fill
              className="object-cover"
            />
          ) : (
            <div className="w-full h-full bg-slate-200 flex items-center justify-center">
              <User className="w-16 h-16 text-slate-400" />
            </div>
          )}
        </div>
        <div className="md:col-span-2 p-6 flex flex-col justify-between bg-white">
          <div>
            <p className="text-sm font-semibold text-blue-600">
              הזדמנות להכיר את
            </p>
            <h3 className="text-3xl font-extrabold text-gray-900 mt-1">
              {targetParty.firstName} {targetParty.lastName}
              {age && (
                <span className="text-2xl font-bold text-gray-500 ml-2">
                  , {age}
                </span>
              )}
            </h3>
            <div className="mt-4 grid grid-cols-2 gap-4 text-sm">
              <div className="flex items-center gap-2 text-gray-700">
                <MapPin className="w-4 h-4 text-teal-500" />
                <span>{targetParty.profile?.city || 'לא צוין'}</span>
              </div>
              <div className="flex items-center gap-2 text-gray-700">
                <Briefcase className="w-4 h-4 text-emerald-500" />
                <span>{targetParty.profile?.occupation || 'לא צוין'}</span>
              </div>
            </div>
          </div>
          <div className="mt-6 text-left">
            <Button
              onClick={onViewProfileClick}
              size="lg"
              className="font-bold"
            >
              לפרופיל המלא
              <ChevronLeft className="w-5 h-5 mr-2" />
            </Button>
          </div>
        </div>
      </div>
    </Card>
  );
};

/**
 * KeyIngredients: רכיבי המפתח להתאמה.
 * הופך נתונים לסיפור שיווקי ומשכנע.
 */
const KeyIngredients: React.FC<{
  matchingReason?: string | null;
}> = ({ matchingReason }) => {
  // לוגיקה פשוטה לחילוץ נקודות מסיבת ההתאמה
  const getHighlightsFromReason = () => {
    const highlights: { icon: React.ElementType; text: string }[] = [];
    const reason = matchingReason?.toLowerCase() || '';
    if (reason.includes('ערכים') || reason.includes('השקפה')) {
      highlights.push({ icon: Scroll, text: 'ערכים והשקפת עולם' });
    }
    if (reason.includes('אישיות') || reason.includes('אופי')) {
      highlights.push({ icon: Heart, text: 'חיבור אישיותי' });
    }
    if (reason.includes('רקע') || reason.includes('השכלה')) {
      highlights.push({ icon: GraduationCap, text: 'רקע וסגנון חיים' });
    }
    if (highlights.length === 0 && matchingReason) {
      highlights.push({ icon: Sparkles, text: 'ניצוץ מיוחד' });
    }
    return highlights;
  };

  const highlights = getHighlightsFromReason();

  if (highlights.length === 0) return null;

  return (
    <div className="text-center">
      <h3 className="text-2xl font-bold text-gray-800 mb-6">
        רכיבי מפתח להתאמה מוצלחת
      </h3>
      <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
        {highlights.map((item, index) => (
          <div
            key={index}
            className="bg-white p-6 rounded-xl shadow-lg border-t-4 border-blue-500 transform transition-transform hover:-translate-y-2"
          >
            <div className="mx-auto w-14 h-14 rounded-full bg-blue-100 text-blue-600 flex items-center justify-center mb-4">
              <item.icon className="w-7 h-7" />
            </div>
            <h4 className="font-bold text-xl text-gray-800">{item.text}</h4>
          </div>
        ))}
      </div>
      {matchingReason && (
        <Card className="mt-6 bg-blue-50 border-blue-200">
          <CardContent className="p-4">
            <p className="text-gray-700 text-center">
              <span className="font-semibold">פירוט מהשדכן/ית:</span>{' '}
              {matchingReason}
            </p>
          </CardContent>
        </Card>
      )}
    </div>
  );
};

// --- הקומפוננטה הראשית המעודכנת ---
interface MatchPresentationViewProps {
  suggestion: ExtendedMatchSuggestion;
  userId: string;
  onSwitchTab: (tab: 'profile' | 'details' | 'compatibility') => void;
}

const MatchPresentationView: React.FC<MatchPresentationViewProps> = ({
  suggestion,
  userId,
  onSwitchTab,
}) => {
  const isFirstParty = suggestion.firstPartyId === userId;
  const targetParty = isFirstParty
    ? suggestion.secondParty
    : suggestion.firstParty;

  // פונקציה שתעביר את המשתמש לטאב הפרופיל
  const handleViewProfile = () => {
    onSwitchTab('profile');
  };

  return (
    <div className="p-4 md:p-8 space-y-8 bg-gradient-to-b from-slate-50 to-blue-50">
      {/* 1. הפתיח האישי */}
      <HeroIntroduction
        matchmaker={suggestion.matchmaker}
        personalNote={
          isFirstParty
            ? suggestion.firstPartyNotes
            : suggestion.secondPartyNotes
        }
      />

      {/* 2. כרטיס הצצה למועמד/ת */}
      <ProfilePeek
        targetParty={targetParty}
        onViewProfileClick={handleViewProfile}
      />

      {/* 3. רכיבי המפתח להתאמה */}
      <KeyIngredients matchingReason={suggestion.matchingReason} />

      {/* 4. חוות דעת נוספת - AI */}
      <div className="text-center pt-4 border-t border-gray-200">
        <h3 className="text-xl font-semibold text-gray-700 mb-3">
          רוצה חוות דעת נוספת?
        </h3>
        <p className="text-gray-600 max-w-xl mx-auto mb-4">
          קבל ניתוח מעמיק מבוסס AI על נקודות החיבור, פוטנציאל לצמיחה ואפילו
          רעיונות לפתיחת שיחה.
        </p>
        <UserAiAnalysisDialog suggestedUserId={targetParty.id} />
      </div>
    </div>
  );
};

export default MatchPresentationView;
--- End of Content for MatchPresentationView.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\user\Desktop\matchpoint\shidduch-system\src\app\components\suggestions\presentation\MatchmakerRationale.tsx
--------------------------------------------------------------------------------
Content:
// src/app/components/suggestions/presentation/MatchmakerRationale.tsx
import React from 'react';
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from "@/components/ui/card";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { Heart, MessageSquareQuote, Sparkles } from 'lucide-react';
// --- START OF CHANGE ---
// Now this import will work correctly
import { getInitials } from '@/lib/utils';
// --- END OF CHANGE ---

interface MatchmakerRationaleProps {
  matchmaker: { firstName: string; lastName: string; };
  generalReason?: string | null;
  personalNote?: string | null;
  targetPartyName: string;
}

const MatchmakerRationale: React.FC<MatchmakerRationaleProps> = ({ matchmaker, generalReason, personalNote, targetPartyName }) => {
  const fullName = `${matchmaker.firstName} ${matchmaker.lastName}`;

  return (
    <Card className="bg-gradient-to-br from-purple-50 via-pink-50 to-blue-50 shadow-xl border-purple-200/50">
      <CardHeader className="text-center">
        <div className="flex justify-center items-center gap-3 mb-3">
          <Avatar className="w-12 h-12 border-2 border-white shadow-lg">
            {/* You can add an AvatarImage here in the future if matchmakers have profile pictures */}
            {/* <AvatarImage src={matchmaker.avatarUrl} /> */}
            <AvatarFallback className="bg-purple-500 text-white font-bold">
              {/* This function call is now valid */}
              {getInitials(fullName)}
            </AvatarFallback>
          </Avatar>
          <div>
            <CardDescription className="text-sm text-purple-800">מחשבות מהשדכן/ית {fullName}</CardDescription>
            <CardTitle className="text-2xl font-bold text-gray-800">הצעה מיוחדת עבורך</CardTitle>
          </div>
        </div>
      </CardHeader>
      <CardContent className="space-y-6 text-center">
        {personalNote && (
          <div className="bg-white/70 p-4 rounded-xl shadow-inner border border-purple-100">
            <h3 className="font-semibold text-lg text-purple-700 flex items-center justify-center gap-2 mb-2">
              <Heart className="w-5 h-5" />
              למה חשבתי שזה מתאים במיוחד עבורך
            </h3>
            <p className="text-gray-700 text-base leading-relaxed italic">
              {personalNote}
            </p>
          </div>
        )}
        
        {generalReason && (
          <div className="bg-white/70 p-4 rounded-xl shadow-inner border border-blue-100">
            <h3 className="font-semibold text-lg text-blue-700 flex items-center justify-center gap-2 mb-2">
              <Sparkles className="w-5 h-5" />
              החיבור הכללי שאנו רואים
            </h3>
            <p className="text-gray-600 text-base leading-relaxed">
              {generalReason}
            </p>
          </div>
        )}

        {!personalNote && !generalReason && (
            <p className="text-gray-500">השדכן/ית סומך/ת על הנתונים שידברו בעד עצמם.</p>
        )}
      </CardContent>
    </Card>
  );
};

export default MatchmakerRationale;
--- End of Content for MatchmakerRationale.tsx ---

================================================================================
Directory: C:\Users\user\Desktop\matchpoint\shidduch-system\src\app\components\suggestions\timeline
================================================================================

--------------------------------------------------------------------------------
File: C:\Users\user\Desktop\matchpoint\shidduch-system\src\app\components\suggestions\timeline\SuggestionTimeline.tsx
--------------------------------------------------------------------------------
Content:
// src/app/components/suggestions/timeline/SuggestionTimeline.tsx

import React from "react";
import { format } from "date-fns";
import { he } from "date-fns/locale";
import {
  Clock,
  MessageCircle,
  User,
} from "lucide-react";
import { cn } from "@/lib/utils";
import { Badge } from "@/components/ui/badge";
import { Card, CardContent } from "@/components/ui/card";
import { getEnhancedStatusInfo } from "@/lib/utils/suggestionUtils";
import type { MatchSuggestionStatus } from "@prisma/client";

interface StatusHistoryItem {
  id: string;
  status: string;
  notes?: string | null;
  createdAt: Date | string;
}

interface SuggestionTimelineProps {
  statusHistory: StatusHistoryItem[];
  userId?: string;
  className?: string;
}

const getCategoryColor = (category: string) => {
  switch (category) {
    case "pending":
      return "border-purple-200";
    case "approved":
      return "border-emerald-200";
    case "progress":
      return "border-blue-200";
    case "completed":
      return "border-yellow-200";
    case "declined":
      return "border-red-200";
    default:
      return "border-gray-200";
  }
};

const TimelineNode: React.FC<{
  statusInfo: ReturnType<typeof getEnhancedStatusInfo>;
  isLatest: boolean;
  isLast: boolean;
}> = ({ statusInfo, isLatest, isLast }) => {
  const IconComponent = statusInfo.icon;
  
  return (
    <div className="relative flex items-center">
      {/* Connecting Line */}
      {!isLast && (
        <div 
          className={cn(
            "absolute top-12 right-6 w-0.5 h-16 bg-gradient-to-b rounded-full",
            isLatest ? "from-cyan-300 to-cyan-100" : "from-gray-300 to-gray-100"
          )}
        />
      )}
      
      {/* Node Circle */}
      <div className={cn(
        "relative z-10 w-12 h-12 rounded-full shadow-lg flex items-center justify-center text-white",
        statusInfo.className.includes('purple') ? "bg-gradient-to-br from-purple-400 to-purple-500" :
        statusInfo.className.includes('emerald') || statusInfo.className.includes('green') ? "bg-gradient-to-br from-emerald-400 to-green-500" :
        statusInfo.className.includes('blue') || statusInfo.className.includes('cyan') ? "bg-gradient-to-br from-blue-400 to-cyan-500" :
        statusInfo.className.includes('red') || statusInfo.className.includes('rose') ? "bg-gradient-to-br from-red-400 to-rose-500" :
        statusInfo.className.includes('yellow') || statusInfo.className.includes('amber') ? "bg-gradient-to-br from-yellow-400 to-amber-500" :
        statusInfo.className.includes('orange') ? "bg-gradient-to-br from-orange-400 to-orange-500" :
        "bg-gradient-to-br from-gray-400 to-gray-500",
        isLatest && "ring-4 ring-cyan-200 animate-pulse-subtle"
      )}>
        <IconComponent className="w-6 h-6" />
      </div>
    </div>
  );
};

const SuggestionTimeline: React.FC<SuggestionTimelineProps> = ({ 
  statusHistory,
  userId,
  className
}) => {
  // Sort history from newest to oldest
  const sortedHistory = [...statusHistory].sort((a, b) => 
    new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime()
  );

  if (sortedHistory.length === 0) {
    return (
      <Card className={cn("border-0 shadow-lg", className)}>
        <CardContent className="p-8 text-center">
          <Clock className="w-12 h-12 mx-auto mb-4 text-gray-400" />
          <h3 className="text-lg font-semibold text-gray-600 mb-2">אין היסטוריה זמינה</h3>
          <p className="text-gray-500">עדיין לא בוצעו פעולות על ההצעה הזו</p>
        </CardContent>
      </Card>
    );
  }

  // Get info for the latest status to use in the summary section
  const latestStatusInfo = getEnhancedStatusInfo(
    sortedHistory[0].status as MatchSuggestionStatus,
    userId ? true : false
  );

  return (
    <Card className={cn("border-0 shadow-lg overflow-hidden", className)}>
      <CardContent className="p-6">
        <div className="flex items-center gap-3 mb-6">
          <div className="p-2 rounded-lg bg-gradient-to-r from-cyan-500 to-emerald-500 text-white shadow-md">
            <Clock className="w-5 h-5" />
          </div>
          <div>
            <h3 className="text-xl font-bold text-gray-800">מסלול ההצעה</h3>
            <p className="text-sm text-gray-600">עקוב אחר התקדמות ההצעה לאורך זמן</p>
          </div>
        </div>
        
        <div className="space-y-6">
          {sortedHistory.map((item, index) => {
            const statusInfo = getEnhancedStatusInfo(
              item.status as MatchSuggestionStatus,
              userId ? true : false
            );
            const isLatest = index === 0;
            const isLast = index === sortedHistory.length - 1;
            
            const formattedDate = format(
              new Date(item.createdAt),
              "dd בMMMM yyyy",
              { locale: he }
            );
            
            const formattedTime = format(
              new Date(item.createdAt),
              "HH:mm",
              { locale: he }
            );
            
            return (
              <div key={item.id} className="flex gap-4">
                <TimelineNode 
                  statusInfo={statusInfo}
                  isLatest={isLatest}
                  isLast={isLast}
                />
                
                <div className="flex-1 pb-4">
                  <Card className={cn(
                    "border-2 transition-all duration-300 hover:shadow-md",
                    getCategoryColor(statusInfo.category),
                    isLatest && "shadow-md"
                  )}>
                    <CardContent className={cn(
                      "p-4",
                      statusInfo.className.includes('purple') ? "bg-purple-50" :
                      statusInfo.className.includes('emerald') || statusInfo.className.includes('green') ? "bg-emerald-50" :
                      statusInfo.className.includes('blue') || statusInfo.className.includes('cyan') ? "bg-blue-50" :
                      statusInfo.className.includes('red') || statusInfo.className.includes('rose') ? "bg-red-50" :
                      statusInfo.className.includes('yellow') || statusInfo.className.includes('amber') ? "bg-yellow-50" :
                      statusInfo.className.includes('orange') ? "bg-orange-50" :
                      "bg-gray-50"
                    )}>
                      <div className="flex justify-between items-start mb-3">
                        <div className="flex-1">
                          <div className="flex items-center gap-2 mb-1">
                            <Badge 
                              className={cn(
                                "border-0 shadow-sm font-semibold",
                                statusInfo.className
                              )}
                            >
                              {statusInfo.label}
                            </Badge>
                            {isLatest && (
                              <Badge variant="outline" className="bg-white/80 text-cyan-600 border-cyan-200 text-xs">
                                עכשיו
                              </Badge>
                            )}
                          </div>
                          <p className={cn(
                            "text-sm font-medium mb-2",
                            statusInfo.className.includes('purple') ? "text-purple-700" :
                            statusInfo.className.includes('emerald') || statusInfo.className.includes('green') ? "text-emerald-700" :
                            statusInfo.className.includes('blue') || statusInfo.className.includes('cyan') ? "text-blue-700" :
                            statusInfo.className.includes('red') || statusInfo.className.includes('rose') ? "text-red-700" :
                            statusInfo.className.includes('yellow') || statusInfo.className.includes('amber') ? "text-yellow-700" :
                            statusInfo.className.includes('orange') ? "text-orange-700" :
                            "text-gray-700"
                          )}>
                            {statusInfo.description}
                          </p>
                        </div>
                        
                        <div className="text-left text-xs text-gray-500 space-y-1">
                          <div className="font-medium">{formattedDate}</div>
                          <div className="flex items-center gap-1">
                            <Clock className="w-3 h-3" />
                            {formattedTime}
                          </div>
                        </div>
                      </div>
                      
                      {item.notes && (
                        <div className="mt-3 p-3 bg-white/60 backdrop-blur-sm rounded-lg border border-white/40">
                          <div className="flex items-start gap-2">
                            <MessageCircle className="w-4 h-4 text-gray-500 mt-0.5 flex-shrink-0" />
                            <p className="text-sm text-gray-700 leading-relaxed">{item.notes}</p>
                          </div>
                        </div>
                      )}
                    </CardContent>
                  </Card>
                </div>
              </div>
            );
          })}
        </div>

        {/* Summary */}
        <div className="mt-8 pt-6 border-t border-gray-200">
          <div className="grid grid-cols-2 md:grid-cols-4 gap-4 text-center">
            <div className="space-y-1">
              <div className="text-2xl font-bold text-cyan-600">{sortedHistory.length}</div>
              <div className="text-xs text-gray-500 font-medium">שלבים סה״כ</div>
            </div>
            <div className="space-y-1">
              <div className="text-2xl font-bold text-emerald-600">
                {Math.ceil((Date.now() - new Date(sortedHistory[sortedHistory.length - 1].createdAt).getTime()) / (1000 * 60 * 60 * 24))}
              </div>
              <div className="text-xs text-gray-500 font-medium">ימים פעילים</div>
            </div>
            <div className="space-y-1">
              <div className="text-2xl font-bold text-blue-600">
                {sortedHistory.filter(s => s.status.includes('APPROVED')).length}
              </div>
              <div className="text-xs text-gray-500 font-medium">אישורים</div>
            </div>
            <div className="space-y-1">
              <div className="text-2xl font-bold text-amber-600">
                {latestStatusInfo.category === 'completed' ? '🎉' : 
                 latestStatusInfo.category === 'progress' ? '⏳' : 
                 latestStatusInfo.category === 'approved' ? '✅' : '📋'}
              </div>
              <div className="text-xs text-gray-500 font-medium">סטטוס נוכחי</div>
            </div>
          </div>
        </div>
      </CardContent>
    </Card>
  );
};

export default SuggestionTimeline;
--- End of Content for SuggestionTimeline.tsx ---

