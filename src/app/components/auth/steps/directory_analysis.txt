מבנה התיקייה:
steps
  BasicInfoStep.tsx
  CompleteStep.tsx
  EmailVerificationCodeStep.tsx
  OptionalInfoStep.tsx
  PersonalDetailsStep.tsx
  WelcomeStep.tsx

תוכן הקבצים:

==================================================
Contents of C:\Users\eytan\Desktop\שידוכים\shidduch-system\src\app\components\auth\steps\BasicInfoStep.tsx:
==================================================
// src/app/components/auth/steps/BasicInfoStep.tsx
"use client";

import { useState, useEffect } from "react";
import { useRegistration } from "../RegistrationContext";
import { Button } from "@/components/ui/button";
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import {
  ArrowLeft,
  ArrowRight,
  User,
  Mail,
  Lock,
  AlertCircle,
  Loader2,
} from "lucide-react";
import { motion } from "framer-motion";

const isValidEmail = (email: string): boolean => {
  const emailRegex = /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,}$/i;
  return email.trim() !== "" && emailRegex.test(email);
};
const isValidPassword = (password: string): boolean => {
  const passwordRegex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)[a-zA-Z\d]{8,}$/;
  return passwordRegex.test(password);
};

const BasicInfoStep: React.FC = () => {
  const { data, updateField, prevStep, proceedToEmailVerification } =
    useRegistration();
  const [passwordVisible, setPasswordVisible] = useState(false);
  const [passwordError, setPasswordError] = useState("");
  const [emailError, setEmailError] = useState("");
  const [isFormValid, setIsFormValid] = useState(false);

  const [isLoading, setIsLoading] = useState(false);
  const [apiError, setApiError] = useState<string | null>(null);

  useEffect(() => {
    const isEmailValid = isValidEmail(data.email);
    const isPasswordValid = isValidPassword(data.password);
    const isNameValid =
      data.firstName.trim().length > 0 && data.lastName.trim().length > 0;

    setEmailError(
      data.email.trim() !== "" && !isEmailValid ? "כתובת אימייל לא תקינה" : ""
    );
    setPasswordError(
      data.password.trim() !== "" && !isPasswordValid
        ? "הסיסמה חייבת להכיל לפחות 8 תווים, אות גדולה, אות קטנה ומספר"
        : ""
    );

    setIsFormValid(
      isEmailValid && isPasswordValid && isNameValid && !isLoading
    );
  }, [data.email, data.password, data.firstName, data.lastName, isLoading]);

  const handleEmailBlur = () => {
    if (data.email.trim() === "") {
      setEmailError(""); // No error if empty, required handled by form submit
    } else if (!isValidEmail(data.email)) {
      setEmailError("כתובת אימייל לא תקינה");
    } else {
      setEmailError("");
    }
  };
  const handlePasswordBlur = () => {
    if (data.password.trim() === "") {
      setPasswordError(""); // No error if empty
    } else if (!isValidPassword(data.password)) {
      setPasswordError(
        "הסיסמה חייבת להכיל לפחות 8 תווים, אות גדולה, אות קטנה ומספר"
      );
    } else {
      setPasswordError("");
    }
  };

  const handleRegisterSubmit = async () => {
    // Final validation check before submission
    const isEmailValid = isValidEmail(data.email);
    const isPasswordValid = isValidPassword(data.password);
    const isFirstNameValid = data.firstName.trim().length > 0;
    const isLastNameValid = data.lastName.trim().length > 0;

    if (
      !isEmailValid ||
      !isPasswordValid ||
      !isFirstNameValid ||
      !isLastNameValid
    ) {
      setApiError("אנא מלא את כל השדות הנדרשים בצורה תקינה.");
      // Trigger blur to show individual field errors if not already shown
      if (!isEmailValid && data.email.trim() !== "") handleEmailBlur();
      else if (data.email.trim() === "") setEmailError("שדה אימייל הוא חובה");
      if (!isPasswordValid && data.password.trim() !== "") handlePasswordBlur();
      else if (data.password.trim() === "")
        setPasswordError("שדה סיסמה הוא חובה");
      if (!isFirstNameValid) setApiError((prev) => prev + " שם פרטי חסר."); // Example, better to highlight field
      if (!isLastNameValid) setApiError((prev) => prev + " שם משפחה חסר.");
      return;
    }
    if (emailError || passwordError) {
      // If there are specific field errors, don't submit
      setApiError("אנא תקן את השגיאות המסומנות.");
      return;
    }

    setIsLoading(true);
    setApiError(null);

    try {
      const response = await fetch("/api/auth/register", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          email: data.email,
          password: data.password,
          firstName: data.firstName,
          lastName: data.lastName,
        }),
      });

      const result = await response.json();

      if (!response.ok) {
        throw new Error(
          result.error || `שגיאה ${response.status}: ${response.statusText}`
        );
      }

      if (result.success && result.email) {
        proceedToEmailVerification(result.email);
      } else {
        console.error(
          "Registration API success but no email returned or success false:",
          result
        );
        setApiError(
          result.error || "אירעה שגיאה במעבר לשלב אימות המייל. אנא נסה שנית."
        );
      }
    } catch (error) {
      console.error("Registration API error:", error);
      setApiError(
        error instanceof Error ? error.message : "אירעה שגיאה בלתי צפויה בהרשמה"
      );
    } finally {
      setIsLoading(false);
    }
  };

  const containerVariants = {
    hidden: { opacity: 0 },
    visible: { opacity: 1, transition: { staggerChildren: 0.1 } },
  };
  const itemVariants = {
    hidden: { opacity: 0, y: 20 },
    visible: { opacity: 1, y: 0, transition: { duration: 0.5 } },
  };

  return (
    <motion.div
      className="space-y-5"
      variants={containerVariants}
      initial="hidden"
      animate="visible"
    >
      {apiError && (
        <motion.div variants={itemVariants}>
          <Alert variant="destructive" className="mb-4">
            <AlertCircle className="h-4 w-4" />
            <AlertTitle>שגיאה בהרשמה</AlertTitle>
            <AlertDescription>{apiError}</AlertDescription>
          </Alert>
        </motion.div>
      )}

      <motion.h2
        className="text-xl font-bold text-gray-800 mb-4"
        variants={itemVariants}
      >
        פרטי חשבון
      </motion.h2>

      <motion.div variants={itemVariants} className="space-y-4">
        {/* Email Field */}
        <div className="space-y-1">
          <label
            htmlFor="emailBasic"
            className="block text-sm font-medium text-gray-700"
          >
            אימייל <span className="text-red-500">*</span>
          </label>
          <div className="relative">
            <Mail className="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-5 w-5" />
            <input
              type="email"
              id="emailBasic"
              value={data.email}
              onChange={(e) => updateField("email", e.target.value)}
              onBlur={handleEmailBlur}
              placeholder="you@example.com"
              disabled={isLoading}
              required
              className={`w-full pr-10 pl-3 py-3 border rounded-lg focus:ring-2 focus:outline-none transition-colors ${
                isLoading ? "bg-gray-100" : ""
              } ${
                emailError
                  ? "border-red-500 focus:ring-red-200"
                  : "border-gray-300 focus:ring-cyan-200 focus:border-cyan-500"
              }`}
            />
            {emailError && !isLoading && (
              <div className="absolute inset-y-0 left-0 flex items-center pl-3 pointer-events-none">
                <AlertCircle className="h-5 w-5 text-red-500" />
              </div>
            )}
          </div>
          {emailError && (
            <p className="text-red-500 text-xs mt-1">{emailError}</p>
          )}
        </div>

        {/* Password Field */}
        <motion.div variants={itemVariants} className="space-y-1">
          <label
            htmlFor="passwordBasic"
            className="block text-sm font-medium text-gray-700"
          >
            סיסמה <span className="text-red-500">*</span>
          </label>
          <div className="relative">
            <Lock className="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-5 w-5" />
            <input
              type={passwordVisible ? "text" : "password"}
              id="passwordBasic"
              value={data.password}
              onChange={(e) => updateField("password", e.target.value)}
              onBlur={handlePasswordBlur}
              placeholder="לפחות 8 תווים"
              disabled={isLoading}
              required
              className={`w-full pr-10 pl-10 py-3 border rounded-lg focus:ring-2 focus:outline-none transition-colors ${
                isLoading ? "bg-gray-100" : ""
              } ${
                passwordError
                  ? "border-red-300 focus:ring-red-200"
                  : "border-gray-300 focus:ring-cyan-200 focus:border-cyan-500"
              }`}
            />
            <button
              type="button"
              onClick={() => setPasswordVisible(!passwordVisible)}
              className="absolute inset-y-0 left-0 flex items-center pl-3 focus:outline-none"
              aria-label={passwordVisible ? "הסתר סיסמה" : "הצג סיסמה"}
            >
              <span className="text-gray-500">
                {passwordVisible ? "🙈" : "👁️"}
              </span>
            </button>
            {passwordError && !isLoading && (
              <div className="absolute inset-y-0 left-10 flex items-center pl-3 pointer-events-none">
                <AlertCircle className="h-5 w-5 text-red-500" />
              </div>
            )}
          </div>
          {passwordError && (
            <p className="text-red-500 text-xs mt-1">{passwordError}</p>
          )}
          {!passwordError && (
            <p className="text-gray-500 text-xs mt-1">
              הסיסמה חייבת להכיל לפחות 8 תווים, אות גדולה באנגלית, אות קטנה
              באנגלית ומספר.
            </p>
          )}
        </motion.div>

        {/* First Name Field */}
        <motion.div variants={itemVariants} className="space-y-1">
          <label
            htmlFor="firstNameBasic"
            className="block text-sm font-medium text-gray-700"
          >
            שם פרטי <span className="text-red-500">*</span>
          </label>
          <div className="relative">
            <User className="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-5 w-5" />
            <input
              type="text"
              id="firstNameBasic"
              value={data.firstName}
              onChange={(e) => updateField("firstName", e.target.value)}
              placeholder="ישראל"
              disabled={isLoading}
              required
              className={`w-full pr-10 pl-3 py-3 border rounded-lg focus:ring-2 focus:outline-none transition-colors ${
                isLoading ? "bg-gray-100" : ""
              } border-gray-300 focus:ring-cyan-200 focus:border-cyan-500`}
            />
          </div>
        </motion.div>

        {/* Last Name Field */}
        <motion.div variants={itemVariants} className="space-y-1">
          <label
            htmlFor="lastNameBasic"
            className="block text-sm font-medium text-gray-700"
          >
            שם משפחה <span className="text-red-500">*</span>
          </label>
          <div className="relative">
            <User className="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-5 w-5" />
            <input
              type="text"
              id="lastNameBasic"
              value={data.lastName}
              onChange={(e) => updateField("lastName", e.target.value)}
              placeholder="ישראלי"
              disabled={isLoading}
              required
              className={`w-full pr-10 pl-3 py-3 border rounded-lg focus:ring-2 focus:outline-none transition-colors ${
                isLoading ? "bg-gray-100" : ""
              } border-gray-300 focus:ring-cyan-200 focus:border-cyan-500`}
            />
          </div>
        </motion.div>
      </motion.div>

      <motion.div
        variants={itemVariants}
        className="flex justify-between pt-4 mt-4"
      >
        <Button
          type="button"
          onClick={prevStep}
          variant="outline"
          className="flex items-center gap-2 border-gray-300"
          disabled={isLoading}
        >
          <ArrowRight className="h-4 w-4" /> חזרה
        </Button>

        <Button
          type="button"
          onClick={handleRegisterSubmit}
          disabled={!isFormValid || isLoading} // isFormValid כבר כולל את isLoading
          className={`flex items-center gap-2 min-w-[200px] justify-center ${
            isFormValid && !isLoading // בדוק שוב את התנאי כאן, כי isFormValid כבר תלוי ב-isLoading
              ? "bg-gradient-to-r from-cyan-500 to-pink-500 hover:from-cyan-600 hover:to-pink-600"
              : "bg-gray-300 cursor-not-allowed"
          }`}
        >
          {isLoading ? (
            <>
              <Loader2 className="h-4 w-4 animate-spin mr-2" />
              <span>יוצר חשבון...</span>
            </>
          ) : (
            <>
              <span>צור חשבון והמשך לאימות</span>
              <ArrowLeft className="h-4 w-4" />
            </>
          )}
        </Button>
      </motion.div>
    </motion.div>
  );
};

export default BasicInfoStep;


==================================================
Contents of C:\Users\eytan\Desktop\שידוכים\shidduch-system\src\app\components\auth\steps\CompleteStep.tsx:
==================================================
"use client";

import { useRouter } from 'next/navigation';
import { useRegistration } from '../RegistrationContext';
import { Button } from '@/components/ui/button';
import { ArrowLeft, CheckCircle, Mail, User } from 'lucide-react';
import { motion } from 'framer-motion';
import Link from 'next/link';

const CompleteStep: React.FC = () => {
  const { data } = useRegistration();
  const router = useRouter();

  // Animation variants
  const containerVariants = {
    hidden: { opacity: 0 },
    visible: { 
      opacity: 1,
      transition: { 
        staggerChildren: 0.15,
        delayChildren: 0.3
      }
    }
  };
  
  const itemVariants = {
    hidden: { opacity: 0, y: 20 },
    visible: { 
      opacity: 1, 
      y: 0,
      transition: { duration: 0.6, ease: "easeOut" }
    }
  };

  const circleVariants = {
    hidden: { scale: 0.8, opacity: 0 },
    visible: { 
      scale: 1, 
      opacity: 1,
      transition: { 
        duration: 0.6,
        ease: "easeOut"
      }
    }
  };


  const navigateToProfile = () => {
    router.push('/profile');
  };

  const navigateToQuestionnaire = () => {
    router.push('/questionnaire');
  };

  return (
    <motion.div 
      className="space-y-6 text-center"
      variants={containerVariants}
      initial="hidden"
      animate="visible"
    >
      {/* Success animation */}
      <motion.div
        className="flex justify-center mb-6"
        variants={circleVariants}
      >
        <div className="relative w-28 h-28 rounded-full bg-gradient-to-r from-cyan-500 to-pink-500 flex items-center justify-center">
          <motion.div 
            className="absolute inset-1 bg-white rounded-full flex items-center justify-center"
            animate={{ scale: [0.6, 1] }}
            transition={{ duration: 0.5, delay: 0.5 }}
          >
            <CheckCircle className="h-14 w-14 text-green-500" />
          </motion.div>
        </div>
      </motion.div>
      
      <motion.h2 
        className="text-2xl font-bold text-gray-800"
        variants={itemVariants}
      >
        הרשמה הושלמה בהצלחה!
      </motion.h2>
      
      <motion.div variants={itemVariants}>
        {!data.isGoogleSignup && (
          <div className="p-4 bg-cyan-50 rounded-lg mb-5">
            <div className="flex items-center gap-2 text-cyan-700 mb-2">
              <Mail className="h-5 w-5" />
              <h3 className="font-medium">לא לשכוח לאמת את האימייל</h3>
            </div>
            <p className="text-sm text-cyan-600">
              שלחנו לך מייל לכתובת <span className="font-bold">{data.email}</span>.
              <br />
              אנא לחץ על הקישור במייל כדי להשלים את תהליך האימות.
            </p>
          </div>
        )}
        
        <p className="text-gray-600 mb-6">
          {data.isGoogleSignup 
            ? 'הפרופיל שלך הושלם בהצלחה!' 
            : 'ברכות על ההרשמה! המשיכו בתהליך כדי למצוא את השידוך המושלם עבורך.'}
        </p>
      </motion.div>
      
      <motion.div
        variants={itemVariants}
        className="flex flex-col gap-4"
      >
        <Button
          onClick={navigateToProfile}
          className="w-full py-3 bg-gradient-to-r from-cyan-500 to-pink-500 hover:from-cyan-600 hover:to-pink-600 rounded-lg shadow-lg flex items-center justify-center gap-2 group relative overflow-hidden"
        >
          {/* Button shimmer effect */}
          <span className="absolute inset-0 w-full h-full bg-gradient-to-r from-white/0 via-white/30 to-white/0 transform -translate-x-full group-hover:animate-shimmer"></span>
          
          <User className="h-5 w-5 text-white" />
          <span className="text-white">לפרופיל שלי</span>
          <ArrowLeft className="h-4 w-4 text-white opacity-0 group-hover:opacity-100 transform translate-x-2 group-hover:translate-x-0 transition-all duration-300" />
        </Button>
        
        <Button
          onClick={navigateToQuestionnaire}
          variant="outline"
          className="w-full py-3 border-2 border-cyan-200 text-cyan-600 hover:bg-cyan-50 hover:border-cyan-300 flex items-center justify-center gap-2"
        >
          <span>למילוי שאלון התאמה</span>
          <ArrowLeft className="h-4 w-4" />
        </Button>
        
        <Link href="/" className="text-sm text-gray-500 hover:text-gray-700 hover:underline mt-2">
          חזרה לדף הבית
        </Link>
      </motion.div>
    </motion.div>
  );
};

export default CompleteStep;

==================================================
Contents of C:\Users\eytan\Desktop\שידוכים\shidduch-system\src\app\components\auth\steps\EmailVerificationCodeStep.tsx:
==================================================
// src/app/components/auth/steps/EmailVerificationCodeStep.tsx
"use client";

import { useState, useRef, KeyboardEvent, useEffect, FormEvent } from "react";
import { useRouter } from "next/navigation"; // ייבוא useRouter
import { useRegistration } from "../RegistrationContext";
import { Button } from "@/components/ui/button";
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Loader2, AlertCircle, MailCheck, ArrowRight } from "lucide-react";
import { motion } from "framer-motion";
import { Input } from "@/components/ui/input"; // Using Shadcn Input for consistency

const OTP_LENGTH = 6; // Should match backend (VerificationService)

const EmailVerificationCodeStep: React.FC = () => {
  const {
    data,
    // completeEmailVerification, // לא נשתמש ישירות אם מפנים לדף התחברות
    exitEmailVerification: goBackToBasicInfo, // עדיין רלוונטי אם המשתמש רוצה לחזור
  } = useRegistration();

  const router = useRouter(); // אתחול ה-router

  const [otp, setOtp] = useState<string[]>(new Array(OTP_LENGTH).fill(""));
  const [isLoading, setIsLoading] = useState(false);
  const [isResending, setIsResending] = useState(false);
  const [apiError, setApiError] = useState<string | null>(null);
  const [resendMessage, setResendMessage] = useState<string | null>(null);
  const inputRefs = useRef<(HTMLInputElement | null)[]>([]);

  useEffect(() => {
    // התמקדות אוטומטית באינפוט הראשון כשהקומפוננטה נטענת
    if (inputRefs.current[0]) {
      inputRefs.current[0]?.focus();
    }
  }, []);

  const handleChange = (element: HTMLInputElement, index: number) => {
    const value = element.value.replace(/[^0-9]/g, ""); // אפשר רק מספרים

    if (value.length > 1 && index < OTP_LENGTH) {
      // טיפול בהדבקה של מספר תווים לתוך input יחיד
      const chars = value.split("");
      let currentIdx = index;
      const newOtp = [...otp]; // העתק של המערך הנוכחי

      for (
        let i = 0;
        i < chars.length && currentIdx < OTP_LENGTH;
        i++, currentIdx++
      ) {
        newOtp[currentIdx] = chars[i];
        if (currentIdx < OTP_LENGTH - 1) {
          // אין צורך ב-setTimeout כאן אם מעדכנים את ה-state פעם אחת בסוף
        }
      }
      setOtp(newOtp); // עדכן את ה-state פעם אחת עם כל השינויים
      // התמקד ב-input הבא אחרי האחרון שמולא, או באחרון אם הכל מלא
      const nextFocusIndex = Math.min(index + chars.length, OTP_LENGTH - 1);
      if (inputRefs.current[nextFocusIndex] && chars.length > 0) {
        setTimeout(() => inputRefs.current[nextFocusIndex]?.focus(), 0);
      }
      return;
    }

    // טיפול בהקלדה של תו בודד
    const newOtp = [...otp];
    newOtp[index] = value; // קח רק את התו האחרון אם הוקלדו כמה (למקרה שה-maxLength לא עובד במפתיע)
    setOtp(newOtp);

    // העבר פוקוס ל-input הבא אם יש ערך והוא לא האחרון
    if (value && index < OTP_LENGTH - 1) {
      if (inputRefs.current[index + 1]) {
        inputRefs.current[index + 1]?.focus();
      }
    }
  };

  const handleKeyDown = (e: KeyboardEvent<HTMLInputElement>, index: number) => {
    if (e.key === "Backspace") {
      e.preventDefault(); // מנע את התנהגות ברירת המחדל של הדפדפן
      const newOtp = [...otp];
      if (newOtp[index]) {
        // אם ה-input הנוכחי מכיל ערך, מחק אותו
        newOtp[index] = "";
        setOtp(newOtp);
        // אין צורך להעביר פוקוס אחורה, המשתמש יכול לעשות זאת ידנית אם רוצה
      } else if (index > 0) {
        // אם ה-input הנוכחי ריק והוא לא הראשון, העבר פוקוס ל-input הקודם
        if (inputRefs.current[index - 1]) {
          inputRefs.current[index - 1]?.focus();
        }
      }
    } else if (e.key === "ArrowLeft" && index > 0) {
      e.preventDefault();
      if (inputRefs.current[index - 1]) {
        inputRefs.current[index - 1]?.focus();
      }
    } else if (e.key === "ArrowRight" && index < OTP_LENGTH - 1) {
      e.preventDefault();
      if (inputRefs.current[index + 1]) {
        inputRefs.current[index + 1]?.focus();
      }
    }
  };

  const handleFormSubmit = async (e: FormEvent) => {
    e.preventDefault(); // מנע הגשת טופס רגילה
    const enteredCode = otp.join("");
    if (enteredCode.length !== OTP_LENGTH) {
      setApiError(`הקוד חייב להכיל ${OTP_LENGTH} ספרות.`);
      return;
    }

    setIsLoading(true);
    setApiError(null);
    setResendMessage(null);

    try {
      const response = await fetch("/api/auth/verify-email-code", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          email: data.emailForVerification, // ודא ששדה זה מכיל את האימייל הנכון מהקונטקסט
          code: enteredCode,
        }),
      });

      const result = await response.json();

      if (!response.ok || !result.success) {
        throw new Error(result.error || "שגיאה באימות הקוד");
      }

      // --- הצלחה! הפנה את המשתמש לדף ההתחברות ---
      // אתה יכול להעביר את האימייל כדי למלא אותו אוטומטית בדף ההתחברות
      // ולהוסיף פרמטר שמציין שהאימות הצליח, כדי להציג הודעה למשתמש.
      const emailQueryParam = data.emailForVerification
        ? `?email=${encodeURIComponent(
            data.emailForVerification
          )}&verified=true`
        : "?verified=true";
      router.push(`/auth/signin${emailQueryParam}`);

      // אין צורך לקרוא ל-completeEmailVerification מהקונטקסט,
      // מכיוון שהמשתמש יצטרך להתחבר מחדש, והסשן יווצר לאחר התחברות מוצלחת.
      // הפונקציה completeEmailVerification בקונטקסט בעיקר מעבירה לשלב הבא ברישום,
      // וכאן אנחנו משנים את הזרימה.
    } catch (error) {
      setApiError(
        error instanceof Error ? error.message : "אירעה שגיאה בלתי צפויה"
      );
      setOtp(new Array(OTP_LENGTH).fill("")); // נקה את השדות במקרה של שגיאה
      if (inputRefs.current[0]) {
        inputRefs.current[0]?.focus(); // החזר פוקוס לשדה הראשון
      }
    } finally {
      setIsLoading(false);
    }
  };

  const handleResendCode = async () => {
    setIsResending(true);
    setApiError(null);
    setResendMessage(null);

    try {
      const response = await fetch("/api/auth/resend-verification-code", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ email: data.emailForVerification }), // ודא ששדה זה נכון
      });
      const result = await response.json();
      if (!response.ok || !result.success) {
        throw new Error(result.error || "שגיאה בשליחה חוזרת של הקוד");
      }
      setResendMessage(result.message || "קוד חדש נשלח בהצלחה.");
      setOtp(new Array(OTP_LENGTH).fill("")); // נקה שדות
      if (inputRefs.current[0]) {
        inputRefs.current[0]?.focus(); // החזר פוקוס לשדה הראשון
      }
    } catch (error) {
      setApiError(
        error instanceof Error ? error.message : "אירעה שגיאה בשליחה חוזרת"
      );
    } finally {
      setIsResending(false);
    }
  };

  const handlePaste = (e: React.ClipboardEvent<HTMLDivElement>) => {
    const pasteData = e.clipboardData
      .getData("text")
      .replace(/[^0-9]/g, "") // אפשר רק מספרים
      .slice(0, OTP_LENGTH); // קח רק את מספר הספרות הנכון

    if (pasteData.length > 0) {
      e.preventDefault();
      const newOtp = new Array(OTP_LENGTH).fill("");
      for (let i = 0; i < pasteData.length; i++) {
        newOtp[i] = pasteData[i];
      }
      setOtp(newOtp);
      // העבר פוקוס לשדה האחרון שמולא או לשדה הבא אחריו
      const focusIndex = Math.min(pasteData.length, OTP_LENGTH - 1);
      if (inputRefs.current[focusIndex]) {
        setTimeout(() => inputRefs.current[focusIndex]?.focus(), 0);
      }
    }
  };

  // הגדרות אנימציה (Framer Motion)
  const containerVariants = {
    hidden: { opacity: 0 },
    visible: { opacity: 1, transition: { staggerChildren: 0.1 } },
  };
  const itemVariants = {
    hidden: { opacity: 0, y: 20 },
    visible: { opacity: 1, y: 0, transition: { duration: 0.5 } },
  };

  return (
    <motion.div
      className="space-y-6 text-center p-4 sm:p-6"
      variants={containerVariants}
      initial="hidden"
      animate="visible"
    >
      <motion.div variants={itemVariants}>
        <MailCheck className="h-12 w-12 text-cyan-500 mx-auto mb-3" />
        <h2 className="text-xl sm:text-2xl font-bold text-gray-800">
          אימות כתובת מייל
        </h2>
        <p className="text-gray-600 mt-2 text-sm sm:text-base">
          שלחנו קוד אימות בן {OTP_LENGTH} ספרות לכתובת{" "}
          <strong className="font-semibold text-gray-700">
            {data.emailForVerification || "האימייל שלך"}
          </strong>
          .
          <br />
          אנא הזן את הקוד שקיבלת.
        </p>
      </motion.div>

      {apiError && (
        <motion.div variants={itemVariants}>
          <Alert variant="destructive">
            <AlertCircle className="h-4 w-4" />
            <AlertTitle>שגיאה</AlertTitle>
            <AlertDescription>{apiError}</AlertDescription>
          </Alert>
        </motion.div>
      )}
      {resendMessage && !apiError && (
        <motion.div variants={itemVariants}>
          <Alert
            variant="default"
            className="bg-green-50 border-green-300 text-green-700"
          >
            <MailCheck className="h-4 w-4 text-green-600" />
            <AlertTitle>הודעה</AlertTitle>
            <AlertDescription>{resendMessage}</AlertDescription>
          </Alert>
        </motion.div>
      )}

      <form onSubmit={handleFormSubmit}>
        <motion.div
          variants={itemVariants}
          className="flex justify-center space-x-2 sm:space-x-3 rtl:space-x-reverse"
          dir="ltr" // כפה כיווניות LTR עבור שדות ה-OTP
          onPaste={handlePaste} // הוסף מטפל בהדבקה לקונטיינר
        >
          {otp.map((digit, index) => (
            <Input
              key={index}
              type="text" // טקסט כדי לאפשר שליטה טובה יותר ולראות את הספרה
              maxLength={1}
              value={digit}
              onChange={(e) =>
                handleChange(e.target as HTMLInputElement, index)
              }
              onKeyDown={(e) =>
                handleKeyDown(e as KeyboardEvent<HTMLInputElement>, index)
              }
              ref={(el) => {
                // <--- **** FIX HERE ****
                inputRefs.current[index] = el;
              }}
              className="w-10 h-12 sm:w-12 sm:h-14 text-center text-lg sm:text-xl font-semibold border-2 border-gray-300 rounded-md focus:border-cyan-500 focus:ring-1 focus:ring-cyan-500 outline-none transition-colors disabled:bg-gray-100 appearance-none"
              disabled={isLoading || isResending}
              aria-label={`OTP digit ${index + 1}`}
              autoComplete="one-time-code" // עוזר למילוי אוטומטי מ-SMS/אימייל
              inputMode="numeric" // מקלדת טובה יותר בנייד
            />
          ))}
        </motion.div>

        <motion.div variants={itemVariants} className="space-y-4 mt-6">
          <Button
            type="submit" // הפוך את זה לכפתור ההגשה של הטופס
            disabled={
              isLoading || isResending || otp.join("").length !== OTP_LENGTH
            }
            className="w-full flex items-center justify-center gap-2 bg-gradient-to-r from-cyan-500 to-pink-500 hover:from-cyan-600 hover:to-pink-600"
          >
            {isLoading ? (
              <>
                <Loader2 className="h-5 w-5 animate-spin" />
                <span>מאמת קוד...</span>
              </>
            ) : (
              "אמת קוד והמשך" // הטקסט יפנה להתחברות
            )}
          </Button>
        </motion.div>
      </form>

      <motion.div
        variants={itemVariants}
        className="text-sm text-gray-500 mt-2"
      >
        לא קיבלת קוד?{" "}
        <Button
          type="button"
          variant="link"
          onClick={handleResendCode}
          disabled={isLoading || isResending}
          className="p-0 h-auto text-cyan-600 hover:text-cyan-700 disabled:text-gray-400"
        >
          {isResending ? (
            <>
              <Loader2 className="h-4 w-4 animate-spin ml-1 rtl:mr-1 rtl:ml-0" />
              <span>שולח קוד חדש...</span>
            </>
          ) : (
            "שלח קוד חדש"
          )}
        </Button>
      </motion.div>

      <motion.div variants={itemVariants} className="mt-6">
        <Button
          type="button"
          onClick={goBackToBasicInfo} // הפונקציה מהקונטקסט לחזרה לשלב הקודם
          variant="outline"
          className="flex items-center gap-2 border-gray-300 text-sm"
          disabled={isLoading || isResending}
        >
          <ArrowRight className="h-4 w-4" /> חזור למילוי פרטים
        </Button>
      </motion.div>
    </motion.div>
  );
};

export default EmailVerificationCodeStep;


==================================================
Contents of C:\Users\eytan\Desktop\שידוכים\shidduch-system\src\app\components\auth\steps\OptionalInfoStep.tsx:
==================================================
// src/app/components/auth/steps/OptionalInfoStep.tsx
"use client";

import { useState } from "react";
import { useRouter } from "next/navigation";
import { useRegistration } from "../RegistrationContext";
import { Button } from "@/components/ui/button";
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Input } from "@/components/ui/input";
import {
  ArrowLeft,
  ArrowRight,
  Ruler,
  Briefcase,
  GraduationCap,
  Loader2,
  AlertCircle,
} from "lucide-react";
import { motion } from "framer-motion";

// Define the possible states during form submission
type SubmissionStatus = "idle" | "savingProfile" | "sendingCode" | "error"; // שינוי saving ל-savingProfile

const OptionalInfoStep: React.FC = () => {
  const { data, updateField, prevStep } = useRegistration();
  const router = useRouter();

  const [submissionStatus, setSubmissionStatus] =
    useState<SubmissionStatus>("idle");
  const [error, setError] = useState<string | null>(null);

  const handleSubmit = async () => {
    setSubmissionStatus("savingProfile"); // Start saving profile data
    setError(null);

    try {
      // --- Step 1: Save Profile Data ---
      const profileData = {
        // Data from previous steps (PersonalDetailsStep)
        phone: data.phone, // Phone is needed for User update inside complete-profile API
        gender: data.gender,
        birthDate: data.birthDate,
        maritalStatus: data.maritalStatus,
        // Data from this step (OptionalInfoStep)
        height: data.height,
        occupation: data.occupation,
        education: data.education,
      };

      console.log("OptionalInfoStep: Submitting profile data:", profileData);

      const profileResponse = await fetch("/api/auth/complete-profile", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(profileData),
        credentials: "include", // <-- *** הוספנו את זה ***
      });

      if (!profileResponse.ok) {
        let errorMessage = `שגיאה ${profileResponse.status}`;
        try {
          const errorData = await profileResponse.json();
          errorMessage =
            errorData.error ||
            `שגיאה ${profileResponse.status}: נתונים לא תקינים או בעיית שרת.`;
          console.error(
            "OptionalInfoStep: API Error Details (complete-profile):",
            errorData
          );
        } catch (parseError) {
          errorMessage = `שגיאה ${profileResponse.status}: ${profileResponse.statusText}`;
          console.error(
            "OptionalInfoStep: Failed to parse error response (complete-profile):",
            parseError
          );
        }
        throw new Error(errorMessage); // זרוק שגיאה כדי להפסיק את התהליך
      }

      const profileResult = await profileResponse.json();
      console.log(
        "OptionalInfoStep: Profile data saved successfully:",
        profileResult
      );

      // --- Step 2: Send Phone Verification Code ---
      setSubmissionStatus("sendingCode");
      console.log(
        "OptionalInfoStep: Attempting to send phone verification code..."
      );

      const sendCodeResponse = await fetch("/api/auth/send-phone-code", {
        method: "POST",
        headers: { "Content-Type": "application/json" }, // Content-Type עדיין חשוב, גם אם אין body
        // body: JSON.stringify({}), // שלח אובייקט ריק אם ה-API דורש body כלשהו
        credentials: "include", // <-- *** הוספנו את זה ***
      });

      if (!sendCodeResponse.ok) {
        let errorMessage = `שגיאה ${sendCodeResponse.status}`;
        try {
          const errorData = await sendCodeResponse.json();
          errorMessage =
            errorData.error ||
            `שגיאה ${sendCodeResponse.status}: לא ניתן היה לשלוח קוד אימות.`;
          console.error(
            "OptionalInfoStep: API Error Details (send-phone-code):",
            errorData
          );
        } catch (parseError) {
          errorMessage = `שגיאה ${sendCodeResponse.status}: ${sendCodeResponse.statusText}`;
          console.error(
            "OptionalInfoStep: Failed to parse error response (send-phone-code):",
            parseError
          );
        }
        throw new Error(errorMessage); // זרוק שגיאה
      }

      const sendCodeResult = await sendCodeResponse.json();
      console.log(
        "OptionalInfoStep: Verification code sent successfully:",
        sendCodeResult
      );

      // --- Step 3: Redirect to Verification Page ---
      console.log("OptionalInfoStep: Redirecting to /auth/verify-phone...");
      router.push("/auth/verify-phone"); // נווט לדף אימות הטלפון
    } catch (err) {
      console.error(
        "OptionalInfoStep: Error during profile completion or OTP sending:",
        err
      );
      setError(err instanceof Error ? err.message : "אירעה שגיאה לא צפויה");
      setSubmissionStatus("error"); // עדכן סטטוס לשגיאה
    }
    // אין צורך ב-finally להחזרת סטטוס ל-idle אם יש ניווט,
    // אבל אם נשארים בדף עקב שגיאה, הכפתור צריך להיות פעיל שוב.
    // הסטטוס 'error' יאפשר להציג את השגיאה, אבל לא ימנע לחיצה חוזרת אם צריך.
  };

  // --- Animation Variants ---
  const containerVariants = {
    hidden: { opacity: 0 },
    visible: {
      opacity: 1,
      transition: { staggerChildren: 0.1 },
    },
  };

  const itemVariants = {
    hidden: { opacity: 0, y: 20 },
    visible: {
      opacity: 1,
      y: 0,
      transition: { duration: 0.5 },
    },
  };
  // --- End Animation Variants ---

  // --- Helper to get button text based on status ---
  const getButtonText = (): string => {
    switch (submissionStatus) {
      case "savingProfile":
        return "שומר פרטים...";
      case "sendingCode":
        return "שולח קוד אימות...";
      case "error":
        // במקרה של שגיאה, חזור לטקסט המקורי כדי לאפשר ניסיון חוזר
        return data.isCompletingProfile ? "סיום והמשך לאימות" : "סיום והרשמה";
      case "idle":
      default:
        return data.isCompletingProfile ? "סיום והמשך לאימות" : "סיום והרשמה"; // טקסט דינמי בהתאם למצב
    }
  };
  // --- End Helper ---

  const isSubmitting =
    submissionStatus === "savingProfile" || submissionStatus === "sendingCode";

  // --- Render Component ---
  return (
    <motion.div
      className="space-y-5"
      variants={containerVariants}
      initial="hidden"
      animate="visible"
    >
      {/* Title and Description */}
      <motion.h2
        className="text-xl font-bold text-gray-800 mb-1"
        variants={itemVariants}
      >
        מידע נוסף (אופציונלי)
      </motion.h2>
      <motion.p className="text-gray-600 text-sm mb-4" variants={itemVariants}>
        מידע זה יעזור לנו להתאים לך שידוכים מדויקים יותר. כל השדות הבאים הם
        אופציונליים אך מומלצים.
      </motion.p>

      {/* Display Error Alert if exists */}
      {error &&
        submissionStatus === "error" && ( // הצג שגיאה רק אם הסטטוס הוא error
          <motion.div variants={itemVariants}>
            <Alert variant="destructive" className="mb-4">
              <AlertCircle className="h-4 w-4" />
              <AlertTitle>שגיאה</AlertTitle>
              <AlertDescription>{error}</AlertDescription>
            </Alert>
          </motion.div>
        )}

      {/* Form Fields Container */}
      <motion.div variants={itemVariants} className="space-y-4">
        {/* Height Field */}
        <div className="space-y-1">
          <label
            htmlFor="heightOptional"
            className="block text-sm font-medium text-gray-700 flex items-center gap-1"
          >
            <Ruler className="h-4 w-4 text-gray-400" />
            גובה (בסמ)
          </label>
          <Input
            type="number"
            id="heightOptional"
            min="120"
            max="220"
            value={data.height ?? ""}
            onChange={(e) =>
              updateField(
                "height",
                e.target.value
                  ? parseInt(e.target.value, 10) || undefined
                  : undefined
              )
            }
            placeholder="לדוגמה: 175"
            className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-cyan-200 focus:border-cyan-500 focus:outline-none disabled:bg-gray-100"
            disabled={isSubmitting} // Disable during submission
          />
        </div>

        {/* Occupation Field */}
        <div className="space-y-1">
          <label
            htmlFor="occupationOptional"
            className="block text-sm font-medium text-gray-700 flex items-center gap-1"
          >
            <Briefcase className="h-4 w-4 text-gray-400" />
            עיסוק
          </label>
          <Input
            type="text"
            id="occupationOptional"
            value={data.occupation ?? ""}
            onChange={(e) => updateField("occupation", e.target.value)}
            placeholder="לדוגמה: מהנדס תוכנה, מורה, סטודנט/ית"
            className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-cyan-200 focus:border-cyan-500 focus:outline-none disabled:bg-gray-100"
            disabled={isSubmitting} // Disable during submission
          />
        </div>

        {/* Education Field */}
        <div className="space-y-1">
          <label
            htmlFor="educationOptional"
            className="block text-sm font-medium text-gray-700 flex items-center gap-1"
          >
            <GraduationCap className="h-4 w-4 text-gray-400" />
            השכלה
          </label>
          <Input
            type="text"
            id="educationOptional"
            value={data.education ?? ""}
            onChange={(e) => updateField("education", e.target.value)}
            placeholder="לדוגמה: תואר ראשון במדעי המחשב"
            className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-cyan-200 focus:border-cyan-500 focus:outline-none disabled:bg-gray-100"
            disabled={isSubmitting} // Disable during submission
          />
        </div>
      </motion.div>
      {/* End Form Fields Container */}

      {/* Navigation Buttons */}
      <motion.div
        variants={itemVariants}
        className="flex justify-between pt-4 mt-6"
      >
        {/* Back Button */}
        <Button
          type="button"
          onClick={prevStep}
          variant="outline"
          className="flex items-center gap-2 border-gray-300"
          disabled={isSubmitting} // Disable button while submitting
        >
          <ArrowRight className="h-4 w-4" /> {/* RTL: Right arrow for back */}
          חזרה
        </Button>

        {/* Submit/Complete Button */}
        <Button
          type="button"
          onClick={handleSubmit}
          disabled={isSubmitting} // Disable button while submitting
          className="bg-gradient-to-r from-cyan-500 to-pink-500 hover:from-cyan-600 hover:to-pink-600 flex items-center gap-2 min-w-[180px] justify-center px-4 py-2 disabled:opacity-70"
        >
          {isSubmitting ? (
            <>
              <Loader2 className="h-4 w-4 animate-spin mr-2" />
              <span>{getButtonText()}</span> {/* טקסט דינמי */}
            </>
          ) : (
            <>
              <span>{getButtonText()}</span> {/* טקסט דינמי */}
              <ArrowLeft className="h-4 w-4 ml-2" />{" "}
              {/* RTL: Left arrow for continue */}
            </>
          )}
        </Button>
      </motion.div>
      {/* End Navigation Buttons */}
    </motion.div>
  );
};

export default OptionalInfoStep;


==================================================
Contents of C:\Users\eytan\Desktop\שידוכים\shidduch-system\src\app\components\auth\steps\PersonalDetailsStep.tsx:
==================================================
"use client";

import { useState, useEffect } from "react";
import { useRegistration } from "../RegistrationContext";
import { Button } from "@/components/ui/button";
import { ArrowLeft, ArrowRight, Phone, Calendar, User } from "lucide-react";
import { Gender } from "@prisma/client";
import { motion } from "framer-motion";

const PersonalDetailsStep: React.FC = () => {
  const { data, updateField, nextStep, prevStep } = useRegistration();
  const [phoneError, setPhoneError] = useState("");
  const [ageError, setAgeError] = useState("");
  const [isFormValid, setIsFormValid] = useState(false);

  // Form validation
  useEffect(() => {
    // Validate all required fields
    const isPhoneValid = !phoneError && data.phone.length >= 10;
    const isBirthDateValid = !ageError && data.birthDate !== "";
    const isGenderValid = data.gender !== "";
    const isMaritalStatusValid = data.maritalStatus !== "";

    setIsFormValid(
      isPhoneValid && isBirthDateValid && isGenderValid && isMaritalStatusValid
    );
  }, [
    data.phone,
    data.birthDate,
    data.gender,
    data.maritalStatus,
    phoneError,
    ageError,
  ]);

  // Phone validation
  const validatePhone = (phone: string): boolean => {
    const phoneRegex = /^0\d{9}$/;
    const isValid = phone.trim() !== "" && phoneRegex.test(phone);

    if (!isValid && phone.trim() !== "") {
      setPhoneError("מספר טלפון לא תקין (צריך להתחיל ב-0 ולהכיל 10 ספרות)");
    } else {
      setPhoneError("");
    }

    return isValid;
  };

  // Age validation
  const validateAge = (birthDate: string): boolean => {
    if (!birthDate) return false;

    const birthDateObj = new Date(birthDate);
    const age = Math.floor(
      (new Date().getTime() - birthDateObj.getTime()) / 31557600000
    );

    if (age < 18) {
      setAgeError("גיל מינימלי להרשמה הוא 18");
      return false;
    } else {
      setAgeError("");
      return true;
    }
  };

  const handleContinue = () => {
    if (isFormValid) {
      nextStep();
    }
  };

  // Animation variants
  const containerVariants = {
    hidden: { opacity: 0 },
    visible: {
      opacity: 1,
      transition: {
        staggerChildren: 0.1,
      },
    },
  };

  const itemVariants = {
    hidden: { opacity: 0, y: 20 },
    visible: {
      opacity: 1,
      y: 0,
      transition: { duration: 0.5 },
    },
  };

  return (
    <motion.div
      className="space-y-5"
      variants={containerVariants}
      initial="hidden"
      animate="visible"
    >
      <motion.h2
        className="text-xl font-bold text-gray-800 mb-4"
        variants={itemVariants}
      >
        פרטים אישיים
      </motion.h2>

      <motion.div variants={itemVariants} className="space-y-4">
        <div className="space-y-1">
          <label
            htmlFor="phone"
            className="block text-sm font-medium text-gray-700"
          >
            טלפון נייד
          </label>
          <div className="relative">
            <Phone className="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-5 w-5" />
            <input
              type="tel"
              id="phone"
              value={data.phone}
              onChange={(e) => updateField("phone", e.target.value)}
              onBlur={() => validatePhone(data.phone)}
              placeholder="0501234567"
              className={`w-full pr-10 pl-3 py-3 border rounded-lg focus:ring-2 focus:outline-none transition-colors
                ${
                  phoneError
                    ? "border-red-300 focus:ring-red-200"
                    : "border-gray-300 focus:ring-cyan-200 focus:border-cyan-500"
                }`}
            />
          </div>
          {phoneError && (
            <p className="text-red-500 text-xs mt-1">{phoneError}</p>
          )}
        </div>

        <motion.div variants={itemVariants} className="space-y-1">
          <label
            htmlFor="gender"
            className="block text-sm font-medium text-gray-700"
          >
            מגדר
          </label>
          <div className="grid grid-cols-2 gap-4 mt-1">
            <button
              type="button"
              onClick={() => updateField("gender", Gender.MALE)}
              className={`flex items-center justify-center gap-3 py-3 rounded-lg border-2 transition-all
                ${
                  data.gender === Gender.MALE
                    ? "border-cyan-500 bg-cyan-50 text-cyan-700"
                    : "border-gray-200 hover:border-gray-300 text-gray-700"
                }`}
            >
              <span className="text-2xl">👨</span>
              <span>זכר</span>
            </button>

            <button
              type="button"
              onClick={() => updateField("gender", Gender.FEMALE)}
              className={`flex items-center justify-center gap-3 py-3 rounded-lg border-2 transition-all
                ${
                  data.gender === Gender.FEMALE
                    ? "border-pink-500 bg-pink-50 text-pink-700"
                    : "border-gray-200 hover:border-gray-300 text-gray-700"
                }`}
            >
              <span className="text-2xl">👩</span>
              <span>נקבה</span>
            </button>
          </div>
        </motion.div>

        <motion.div variants={itemVariants} className="space-y-1">
          <label
            htmlFor="birthDate"
            className="block text-sm font-medium text-gray-700"
          >
            תאריך לידה
          </label>
          <div className="relative">
            <Calendar className="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-5 w-5" />
            <input
              type="date"
              id="birthDate"
              value={data.birthDate}
              onChange={(e) => {
                updateField("birthDate", e.target.value);
                validateAge(e.target.value);
              }}
              max={
                new Date(new Date().setFullYear(new Date().getFullYear() - 18))
                  .toISOString()
                  .split("T")[0]
              }
              className={`w-full pr-10 pl-3 py-3 border rounded-lg focus:ring-2 focus:outline-none transition-colors
                ${
                  ageError
                    ? "border-red-300 focus:ring-red-200"
                    : "border-gray-300 focus:ring-cyan-200 focus:border-cyan-500"
                }`}
            />
          </div>
          {ageError && <p className="text-red-500 text-xs mt-1">{ageError}</p>}
        </motion.div>

        <motion.div variants={itemVariants} className="space-y-1">
          <label
            htmlFor="maritalStatus"
            className="block text-sm font-medium text-gray-700"
          >
            מצב משפחתי
          </label>
          <div className="relative">
            <User className="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-5 w-5" />
            <select
              id="maritalStatus"
              value={data.maritalStatus}
              onChange={(e) => updateField("maritalStatus", e.target.value)}
              className="w-full pr-10 pl-3 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-cyan-200 focus:border-cyan-500 focus:outline-none appearance-none bg-white"
            >
              <option value="">בחר מצב משפחתי</option>
              <option value="רווק/ה">רווק/ה</option>
              <option value="גרוש/ה">גרוש/ה</option>
              <option value="אלמן/ה">אלמן/ה</option>
            </select>
            <div className="absolute left-3 top-1/2 transform -translate-y-1/2 pointer-events-none">
              <svg
                className="h-5 w-5 text-gray-400"
                fill="none"
                viewBox="0 0 24 24"
                stroke="currentColor"
              >
                <path
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  strokeWidth="2"
                  d="M19 9l-7 7-7-7"
                />
              </svg>
            </div>
          </div>
        </motion.div>
      </motion.div>

      <motion.div
        variants={itemVariants}
        className="flex justify-between pt-4 mt-4"
      >
        <Button
          onClick={prevStep}
          variant="outline"
          className="flex items-center gap-2 border-gray-300"
        >
          <ArrowRight className="h-4 w-4" />
          חזרה
        </Button>

        <Button
          onClick={handleContinue}
          disabled={!isFormValid}
          className={`flex items-center gap-2 ${
            isFormValid
              ? "bg-gradient-to-r from-cyan-500 to-pink-500 hover:from-cyan-600 hover:to-pink-600"
              : "bg-gray-300 cursor-not-allowed"
          }`}
        >
          המשך
          <ArrowLeft className="h-4 w-4" />
        </Button>
      </motion.div>
    </motion.div>
  );
};

export default PersonalDetailsStep;


==================================================
Contents of C:\Users\eytan\Desktop\שידוכים\shidduch-system\src\app\components\auth\steps\WelcomeStep.tsx:
==================================================
"use client";

import { useState } from "react";
import { useRegistration } from "../RegistrationContext";
import { signIn } from "next-auth/react";
import { Button } from "@/components/ui/button";
import { Heart, ArrowLeft, Mail } from "lucide-react";
import Link from "next/link";

const WelcomeStep: React.FC = () => {
  const { nextStep,  } = useRegistration();
  const [isGoogleLoading, setIsGoogleLoading] = useState(false);

  const handleGoogleSignIn = async () => {
    try {
      setIsGoogleLoading(true);

      // Store this information for potential fallback
      localStorage.setItem("registration_started", "true");

      // Use NextAuth to handle Google sign-in
      // The redirect/callback will be handled by NextAuth
      await signIn("google", { callbackUrl: "/auth/google-callback" });
    } catch (error) {
      console.error("Google sign-in error:", error);
      setIsGoogleLoading(false);
    }
  };

  const handleEmailSignUp = () => {
    nextStep();
  };

  return (
    <div className="space-y-6 text-center">
      {/* Welcome animation */}
      <div className="flex justify-center mb-4">
        <div className="relative">
          <div className="w-20 h-20 rounded-full bg-pink-100 flex items-center justify-center animate-pulse">
            <Heart className="h-10 w-10 text-pink-500 fill-pink-500" />
          </div>
          <div className="absolute -top-2 -right-2 w-8 h-8 rounded-full bg-cyan-500 flex items-center justify-center text-white font-bold animate-bounce">
            <span className="text-sm">👋</span>
          </div>
        </div>
      </div>

      <h2 className="text-2xl font-bold text-gray-800">ברוכים הבאים!</h2>

      <p className="text-gray-600 max-w-sm mx-auto">
        אנחנו שמחים שבחרת להצטרף אלינו. בואו נתחיל בתהליך הרשמה קצר ופשוט שיאפשר
        לנו להכיר אותך טוב יותר.
      </p>

      {/* Buttons */}
      <div className="space-y-4 mt-8">
        <Button
          onClick={handleGoogleSignIn}
          disabled={isGoogleLoading}
          variant="outline"
          size="lg"
          className="w-full relative border-2 border-gray-300 hover:border-gray-400 py-6 rounded-xl flex items-center justify-center gap-3 group"
        >
          {isGoogleLoading ? (
            <div className="animate-spin h-5 w-5 border-2 border-gray-500 rounded-full border-t-transparent" />
          ) : (
            <>
              <svg className="h-5 w-5" viewBox="0 0 24 24" aria-hidden="true">
                <path
                  d="M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z"
                  fill="#4285F4"
                />
                <path
                  d="M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z"
                  fill="#34A853"
                />
                <path
                  d="M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z"
                  fill="#FBBC05"
                />
                <path
                  d="M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z"
                  fill="#EA4335"
                />
              </svg>
              <span className="text-gray-700 font-medium">המשך עם Google</span>
            </>
          )}
        </Button>

        <Button
          onClick={handleEmailSignUp}
          size="lg"
          className="w-full py-6 rounded-xl bg-gradient-to-r from-cyan-500 to-pink-500 hover:from-cyan-600 hover:to-pink-600 shadow-lg flex items-center justify-center gap-3 group relative overflow-hidden"
        >
          {/* Button background shimmer effect */}
          <span className="absolute inset-0 w-full h-full bg-gradient-to-r from-white/0 via-white/30 to-white/0 transform -translate-x-full group-hover:animate-shimmer"></span>
          <Mail className="h-5 w-5 text-white" />
          <span className="text-white font-medium">המשך עם אימייל</span>
          <ArrowLeft className="h-5 w-5 text-white opacity-0 group-hover:opacity-100 transition-opacity" />
        </Button>
      </div>

      {/* Already have an account link */}
      <div className="mt-8 pt-4 border-t border-gray-200">
        <p className="text-gray-600 text-sm">
          כבר יש לך חשבון?{" "}
          <Link
            href="/auth/signin"
            className="text-cyan-600 font-medium hover:text-cyan-700 hover:underline"
          >
            התחברות
          </Link>
        </p>
      </div>
    </div>
  );
};

export default WelcomeStep;

