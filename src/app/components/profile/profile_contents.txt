################################################################################
# Directory Content Map For: C:\Users\user\Desktop\matchpoint\shidduch-system\src\app\components\profile
# Generated on: 2025-07-20 14:53:53
################################################################################

================================================================================
Directory: C:\Users\user\Desktop\matchpoint\shidduch-system\src\app\components\profile
================================================================================

--------------------------------------------------------------------------------
File: C:\Users\user\Desktop\matchpoint\shidduch-system\src\app\components\profile\ProfileCard.tsx
--------------------------------------------------------------------------------
Content:
"use client";

import React, { useState, useMemo, useCallback, useEffect } from "react";
import Image from "next/image";
import { cn } from "@/lib/utils";
import {
  ResizableHandle,
  ResizablePanel,
  ResizablePanelGroup,
} from "@/components/ui/resizable";

// UI Components
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import {
  Dialog,
  DialogContent,
  DialogTitle,
  DialogHeader,
  DialogFooter,
} from "@/components/ui/dialog";
import { ScrollArea, ScrollBar } from "@/components/ui/scroll-area";
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip";
import { ToggleGroup, ToggleGroupItem } from "@/components/ui/toggle-group";
import { Skeleton } from "@/components/ui/skeleton";
import { Separator } from "@/components/ui/separator";

// Icons
import {
  User, Heart, FileText, Image as ImageIcon, Info as InfoIcon, Eye, Phone, 
  ChevronLeft, ChevronRight, Briefcase, GraduationCap, Users, BookOpen, 
  School, Lock, Languages, Calendar, Star, MapPin, CheckCircle, Clock, 
  Cake, Gem, Sparkles, Users2, Award, Palette, Smile, X, BookMarked, 
  Search, Target, UserCheck, Link as LinkIcon, Handshake, Edit3, 
  ExternalLink, Bot, Coffee, Camera, Music, Globe, Compass, Telescope, 
  Crown, Zap, Gift, ArrowRight, Quote, ChevronDown, Moon, Sun, Baby, 
  Home, Flame, MessageCircle, Play, Plus, Lightbulb, Mountain, Share2,
  Download, Printer, Bookmark, Search as SearchIcon, Filter, SortDesc,
  MessageSquare, Phone as PhoneIcon, Mail, Send, Stars,
  Sparkle, Sunrise, Sunset, TreePine, Flower, Rainbow, Waves, Wind, Shield,
  Maximize, Minimize
} from "lucide-react";

// Types and Interfaces
import type {
  UserProfile, UserImage as UserImageType, QuestionnaireResponse, FormattedAnswer,
  ServiceType, HeadCoveringType, KippahType
} from "@/types/next-auth";
import { languageOptions } from "@/lib/languageOptions";
import type { Candidate } from "@/app/components/matchmaker/new/types/candidates";

import NewSuggestionForm from "@/app/components/matchmaker/suggestions/NewSuggestionForm";

// Define interfaces
interface CreateSuggestionData {
  priority: "LOW" | "MEDIUM" | "HIGH" | "URGENT";
  firstPartyId: string;
  secondPartyId: string;
  status:
    | "DRAFT"
    | "PENDING_FIRST_PARTY"
    | "FIRST_PARTY_APPROVED"
    | "FIRST_PARTY_DECLINED"
    | string;
  firstPartyNotes?: string;
  secondPartyNotes?: string;
}

interface ExcitementFactor {
  icon: React.ElementType;
  text: string;
  gradient: string;
}

// --- Color Palette & Theme ---
const COLOR_PALETTES = {
  professional: {
    name: "מקצועי",
    colors: {
      primary: {
        main: "from-gray-700 via-gray-800 to-gray-900",
        accent: "from-blue-600 via-blue-700 to-blue-800",
        light: "from-gray-100 via-gray-200 to-gray-300",
        romantic: "from-blue-600 via-blue-700 to-blue-800",
        rose: "from-blue-500 via-blue-600 to-blue-700",
        gold: "from-gray-400 via-gray-500 to-gray-600",
        elegant: "from-gray-700 via-gray-800 to-gray-900",
      },
      secondary: {
        sage: "from-gray-300 via-gray-400 to-gray-500",
        sky: "from-blue-100 via-blue-200 to-blue-300",
        lavender: "from-gray-200 via-gray-300 to-gray-400",
        peach: "from-orange-100 via-amber-100 to-yellow-200"
      },
      neutral: {
        warm: "from-gray-50 via-white to-gray-100",
        cool: "from-slate-50 via-gray-50 to-zinc-50",
        elegant: "from-white via-gray-50 to-neutral-100"
      }
    },
    shadows: {
      elegant: "shadow-xl shadow-gray-200/25",
      warm: "shadow-lg shadow-gray-200/30",
      soft: "shadow-md shadow-gray-100/40"
    }
  },
  feminine: {
    name: "נשי",
    colors: {
      primary: {
        main: "from-rose-400 via-pink-400 to-rose-500",
        accent: "from-pink-500 via-rose-500 to-red-400",
        light: "from-pink-100 via-rose-100 to-red-100",
        romantic: "from-rose-400 via-pink-400 to-rose-500",
        rose: "from-rose-400 via-pink-400 to-rose-500",
        gold: "from-amber-200 via-yellow-200 to-orange-300",
        elegant: "from-pink-500 via-rose-500 to-red-400",
      },
      secondary: {
        sage: "from-pink-200 via-rose-200 to-red-200",
        sky: "from-purple-200 via-pink-200 to-rose-300",
        lavender: "from-purple-200 via-violet-200 to-purple-300",
        peach: "from-pink-200 via-rose-200 to-orange-300"
      },
      neutral: {
        warm: "from-rose-50 via-pink-50 to-orange-50",
        cool: "from-purple-50 via-pink-50 to-rose-50",
        elegant: "from-pink-50 via-rose-50 to-neutral-100"
      }
    },
    shadows: {
      elegant: "shadow-xl shadow-pink-200/25",
      warm: "shadow-lg shadow-rose-200/30",
      soft: "shadow-md shadow-pink-100/40"
    }
  },
  masculine: {
    name: "גברי",
    colors: {
      primary: {
        main: "from-blue-600 via-indigo-600 to-blue-700",
        accent: "from-cyan-500 via-blue-500 to-indigo-600",
        light: "from-blue-100 via-indigo-100 to-cyan-100",
        romantic: "from-cyan-500 via-blue-500 to-indigo-600",
        rose: "from-cyan-500 via-blue-500 to-indigo-600",
        gold: "from-blue-200 via-cyan-200 to-teal-300",
        elegant: "from-blue-600 via-indigo-600 to-blue-700",
      },
      secondary: {
        sage: "from-emerald-300 via-teal-300 to-cyan-400",
        sky: "from-blue-200 via-sky-200 to-indigo-300",
        lavender: "from-indigo-200 via-blue-200 to-cyan-300",
        peach: "from-blue-200 via-cyan-200 to-teal-300"
      },
      neutral: {
        warm: "from-blue-50 via-indigo-50 to-cyan-50",
        cool: "from-slate-50 via-blue-50 to-indigo-50",
        elegant: "from-gray-50 via-blue-50 to-neutral-100"
      }
    },
    shadows: {
      elegant: "shadow-xl shadow-blue-200/25",
      warm: "shadow-lg shadow-indigo-200/30",
      soft: "shadow-md shadow-blue-100/40"
    }
  },
  luxury: {
    name: "יוקרתי",
    colors: {
      primary: {
        main: "from-amber-500 via-yellow-500 to-amber-600",
        accent: "from-purple-600 via-indigo-600 to-purple-700",
        light: "from-amber-100 via-yellow-100 to-gold-100",
        romantic: "from-purple-600 via-indigo-600 to-purple-700",
        rose: "from-purple-600 via-indigo-600 to-purple-700",
        gold: "from-amber-500 via-yellow-500 to-amber-600",
        elegant: "from-amber-500 via-yellow-500 to-amber-600",
      },
      secondary: {
        sage: "from-emerald-400 via-teal-400 to-cyan-500",
        sky: "from-indigo-300 via-purple-300 to-violet-400",
        lavender: "from-purple-300 via-violet-300 to-indigo-400",
        peach: "from-amber-300 via-yellow-300 to-orange-400"
      },
      neutral: {
        warm: "from-amber-50 via-yellow-50 to-orange-50",
        cool: "from-purple-50 via-indigo-50 to-violet-50",
        elegant: "from-gray-50 via-amber-50 to-neutral-100"
      }
    },
    shadows: {
      elegant: "shadow-xl shadow-amber-200/25",
      warm: "shadow-lg shadow-yellow-200/30",
      soft: "shadow-md shadow-amber-100/40"
    }
  }
} as const;

type ColorPaletteName = keyof typeof COLOR_PALETTES;

// --- Enhanced Data & Translation Maps ---
const maritalStatusMap: { [key: string]: { label: string; icon: React.ElementType; color: string } } = {
  single: { label: "רווק/ה", icon: Heart, color: "text-rose-600" },
  divorced: { label: "גרוש/ה", icon: Sunrise, color: "text-amber-600" },
  widowed: { label: "אלמן/ה", icon: Stars, color: "text-purple-600" },
  annulled: { label: "מוכן/ה לאהבה חדשה", icon: Rainbow, color: "text-pink-600" },
  any: { label: "פתוח/ה לכל האפשרויות", icon: Sparkles, color: "text-indigo-600" }
};

const religiousLevelMap: { [key: string]: { label: string; icon: React.ElementType; color: string } } = {
  charedi: { label: "חרדי/ת", icon: BookMarked, color: "text-indigo-700" },
  charedi_modern: { label: "חרדי/ת מודרני/ת", icon: BookOpen, color: "text-indigo-600" },
  dati_leumi_torani: { label: "דתי/ה לאומי/ת תורני/ת", icon: Star, color: "text-blue-700" },
  dati_leumi_liberal: { label: "דתי/ה לאומי/ת ליברלי/ת", icon: Flower, color: "text-blue-600" },
  dati_leumi_standard: { label: "דתי/ה לאומי/ת", icon: Crown, color: "text-blue-600" },
  masorti_strong: { label: "מסורתי/ת (חזק)", icon: TreePine, color: "text-emerald-700" },
  masorti_light: { label: "מסורתי/ת (קל)", icon: Wind, color: "text-emerald-600" },
  secular_traditional_connection: { label: "חילוני/ת עם זיקה", icon: Waves, color: "text-cyan-600" },
  secular: { label: "חילוני/ת", icon: Sunrise, color: "text-orange-600" },
  spiritual_not_religious: { label: "רוחני/ת", icon: Sparkle, color: "text-purple-600" },
  other: { label: "ייחודי/ת", icon: Rainbow, color: "text-pink-600" },
  "לא משנה": { label: "פתוח/ה לכל השקפה", icon: Globe, color: "text-gray-600" }
};

const educationLevelMap: { [key: string]: { label: string; icon: React.ElementType; color: string } } = {
  high_school: { label: "תיכונית", icon: School, color: "text-blue-600" },
  vocational: { label: "מקצועית", icon: Award, color: "text-green-600" },
  academic_student: { label: "במהלך לימודים", icon: BookOpen, color: "text-orange-600" },
  academic_ba: { label: "בוגר/ת תואר ראשון", icon: GraduationCap, color: "text-purple-600" },
  academic_ma: { label: "בוגר/ת תואר שני", icon: Star, color: "text-indigo-600" },
  academic_phd: { label: "דוקטור/ת", icon: Crown, color: "text-rose-600" },
  yeshiva_seminary: { label: "לימודים תורניים", icon: BookMarked, color: "text-amber-600" },
  other: { label: "ייחודי/ת", icon: Sparkles, color: "text-pink-600" },
  "ללא העדפה": { label: "הכל פתוח", icon: Globe, color: "text-gray-600" }
};

const serviceTypeMap: { [key: string]: { label: string; icon: React.ElementType; color: string } } = {
  MILITARY_COMBATANT: { label: "לוחם/ת", icon: Award, color: "text-red-600" },
  MILITARY_SUPPORT: { label: "תומך/ת לחימה", icon: Users, color: "text-orange-600" },
  MILITARY_OFFICER: { label: "קצין/ה", icon: Crown, color: "text-purple-600" },
  MILITARY_INTELLIGENCE_CYBER_TECH: { label: "טכנולוגיה ומודיעין", icon: Zap, color: "text-blue-600" },
  NATIONAL_SERVICE_ONE_YEAR: { label: "שירות לאומי", icon: Heart, color: "text-pink-600" },
  NATIONAL_SERVICE_TWO_YEARS: { label: "שירות לאומי מורחב", icon: Stars, color: "text-rose-600" },
  HESDER_YESHIVA: { label: "ישיבת הסדר", icon: BookMarked, color: "text-indigo-600" },
  YESHIVA_ONLY_POST_HS: { label: "לימודים תורניים", icon: BookOpen, color: "text-amber-600" },
  PRE_MILITARY_ACADEMY_AND_SERVICE: { label: "מכינה ושירות", icon: GraduationCap, color: "text-green-600" },
  EXEMPTED: { label: "פטור", icon: Shield, color: "text-gray-600" },
  CIVILIAN_SERVICE: { label: "שירות אזרחי", icon: Users2, color: "text-teal-600" },
  OTHER: { label: "ייחודי", icon: Sparkles, color: "text-purple-600" }
};

const headCoveringMap: { [key: string]: { label: string; icon: React.ElementType; color: string } } = {
  FULL_COVERAGE: { label: "כיסוי מלא", icon: Crown, color: "text-purple-600" },
  PARTIAL_COVERAGE: { label: "כיסוי חלקי", icon: Flower, color: "text-pink-600" },
  HAT_BERET: { label: "כובע/ברט", icon: Sun, color: "text-orange-600" },
  SCARF_ONLY_SOMETIMES: { label: "מטפחת לאירועים", icon: Sparkle, color: "text-rose-600" },
  NONE: { label: "ללא כיסוי", icon: Wind, color: "text-blue-600" },
  any: { label: "גמיש/ה", icon: Rainbow, color: "text-indigo-600" }
};

const kippahTypeMap: { [key: string]: { label: string; icon: React.ElementType; color: string } } = {
  BLACK_VELVET: { label: "קטיפה שחורה", icon: Crown, color: "text-indigo-700" },
  KNITTED_SMALL: { label: "סרוגה קטנה", icon: Star, color: "text-blue-600" },
  KNITTED_LARGE: { label: "סרוגה גדולה", icon: Stars, color: "text-blue-700" },
  CLOTH: { label: "בד", icon: Flower, color: "text-green-600" },
  BRESLEV: { label: "ברסלב", icon: Sparkle, color: "text-purple-600" },
  NONE_AT_WORK_OR_CASUAL: { label: "לא בעבודה", icon: Briefcase, color: "text-gray-600" },
  NONE_USUALLY: { label: "לרוב לא", icon: Wind, color: "text-gray-500" },
  OTHER: { label: "ייחודי", icon: Rainbow, color: "text-pink-600" },
  any: { label: "גמיש", icon: Globe, color: "text-teal-600" }
};

const languageMap = languageOptions.reduce((acc, lang) => {
  acc[lang.value] = { label: lang.label, icon: Globe, color: "text-blue-600" };
  return acc;
}, {} as { [key: string]: { label: string; icon: React.ElementType; color: string } });

const contactPreferenceMap: { [key: string]: { label: string; icon: React.ElementType; color: string } } = {
  direct: { label: "ישירות", icon: PhoneIcon, color: "text-green-600" },
  matchmaker: { label: "דרך השדכן/ית", icon: Users, color: "text-purple-600" },
  both: { label: "גמיש/ה", icon: MessageSquare, color: "text-blue-600" }
};

const characterTraitMap: { [key: string]: { label: string; icon: React.ElementType; color: string } } = {
  empathetic: { label: "אמפתי/ת", icon: Heart, color: "text-rose-600" },
  driven: { label: "שאפתן/ית", icon: Zap, color: "text-orange-600" },
  optimistic: { label: "אופטימי/ת", icon: Sunrise, color: "text-yellow-600" },
  family_oriented: { label: "משפחתי/ת", icon: Users2, color: "text-pink-600" },
  intellectual: { label: "אינטלקטואל/ית", icon: BookOpen, color: "text-indigo-600" },
  organized: { label: "מאורגנ/ת", icon: CheckCircle, color: "text-green-600" },
  calm: { label: "רגוע/ה", icon: Waves, color: "text-blue-600" },
  humorous: { label: "מצחיק/ה", icon: Smile, color: "text-purple-600" },
  sociable: { label: "חברותי/ת", icon: Users, color: "text-cyan-600" },
  sensitive: { label: "רגיש/ה", icon: Flower, color: "text-pink-600" },
  independent: { label: "עצמאי/ת", icon: Crown, color: "text-amber-600" },
  creative: { label: "יצירתי/ת", icon: Palette, color: "text-rose-600" },
  honest: { label: "כן/ה וישר/ה", icon: Star, color: "text-blue-600" },
  responsible: { label: "אחראי/ת", icon: Award, color: "text-green-600" },
  easy_going: { label: "זורם/ת וקליל/ה", icon: Wind, color: "text-teal-600" },
  no_strong_preference: { label: "פתוח/ה לגילוי", icon: Compass, color: "text-gray-600" }
};

const hobbiesMap: { [key: string]: { label: string; icon: React.ElementType; color: string } } = {
  travel: { label: "טיולים", icon: Compass, color: "text-green-600" },
  sports: { label: "ספורט", icon: Zap, color: "text-orange-600" },
  reading: { label: "קריאה", icon: BookOpen, color: "text-indigo-600" },
  cooking_baking: { label: "בישול ואפיה", icon: Coffee, color: "text-amber-600" },
  music_playing_instrument: { label: "מוזיקה", icon: Music, color: "text-purple-600" },
  art_crafts: { label: "אומנות ויצירה", icon: Palette, color: "text-pink-600" },
  volunteering: { label: "התנדבות", icon: Heart, color: "text-rose-600" },
  learning_courses: { label: "למידה", icon: GraduationCap, color: "text-blue-600" },
  board_games_puzzles: { label: "משחקים", icon: Play, color: "text-cyan-600" },
  movies_theater: { label: "סרטים ותיאטרון", icon: Camera, color: "text-red-600" },
  dancing: { label: "ריקוד", icon: Sparkle, color: "text-pink-600" },
  writing: { label: "כתיבה", icon: Edit3, color: "text-gray-600" },
  nature_hiking: { label: "טבע וטיולים", icon: TreePine, color: "text-green-600" },
  photography: { label: "צילום", icon: Camera, color: "text-blue-600" },
  no_strong_preference: { label: "פתוח/ה לגילוי יחד", icon: Rainbow, color: "text-gray-600" }
};

// --- Main Profile Card Component ---
interface ProfileCardProps {
  profile: Omit<UserProfile, 'isProfileComplete'>; // 1. המידע מה-DB
  isProfileComplete: boolean; // 2. המידע מגיע בנפרד
  images?: UserImageType[];
  questionnaire?: QuestionnaireResponse | null;
  viewMode?: "matchmaker" | "candidate";
  className?: string;
  candidate?: Candidate;
  allCandidates?: Candidate[];
  onCreateSuggestion?: (data: CreateSuggestionData) => Promise<void>;
}

const ProfileCard: React.FC<ProfileCardProps> = ({
  profile: profileData, // שנה שם כדי למנוע התנגשות
  isProfileComplete, // קבל את הערך החדש
  candidate,
  images = [],
  questionnaire,
  viewMode = "candidate",
  className,
  allCandidates = [],
  onCreateSuggestion
}) => {
const profile = useMemo(() => ({
  ...profileData,
  isProfileComplete,
}), [profileData, isProfileComplete]);
  const [isClient, setIsClient] = useState(false);
  const [isDesktop, setIsDesktop] = useState(true);
  const [selectedImageForDialog, setSelectedImageForDialog] = useState<UserImageType | null>(null);
  const [activeTab, setActiveTab] = useState("essence");
  const [isSuggestDialogOpen, setIsSuggestDialogOpen] = useState(false);
  const [mobileViewLayout, setMobileViewLayout] = useState<'focus' | 'detailed'>('focus');
  const [selectedPalette, setSelectedPalette] = useState<ColorPaletteName>('feminine');
  const [isFullscreen, setIsFullscreen] = useState(false);

  // Get current theme based on selected palette
  const THEME = useMemo(() => COLOR_PALETTES[selectedPalette], [selectedPalette]);
    
    const WORLDS: { [key: string]: { 
      label: string; 
      icon: React.ElementType; 
      gradient: string; 
      description: string;
      accentColor: string;
    } } = useMemo(() => ({
      values: { 
        label: "הערכים והעקרונות שמנחים אותי", 
        icon: BookMarked, 
        gradient: THEME.colors.primary.accent,
        description: "מה חשוב לי בחיים ומה מוביל אותי",
        accentColor: "blue"
      },
      personality: { 
        label: "האישיות והתכונות הייחודיות שלי", 
        icon: Sparkles, 
        gradient: THEME.colors.primary.light,
        description: "איך אני באמת ומה מאפיין אותי",
        accentColor: "purple"
      },
      relationship: { 
        label: "החזון שלי לזוגיות ומשפחה", 
        icon: Heart, 
        gradient: THEME.colors.primary.main,
        description: "איך אני רואה את עתיד הזוגיות שלי",
        accentColor: "rose"
      },
      partner: { 
        label: "מה אני מחפש/ת בבן/בת הזוג", 
        icon: Users, 
        gradient: THEME.colors.secondary.sky,
        description: "התכונות והערכים שחשובים לי בפרטנר",
        accentColor: "blue"
      },
      religion: { 
        label: "הדת והרוחניות בחיי", 
        icon: Star, 
        gradient: THEME.colors.secondary.peach,
        description: "המקום של האמונה והמסורת בעולמי",
        accentColor: "amber"
      },
      general: { 
        label: "עוד דברים חשובים שכדאי לדעת עליי", 
        icon: FileText, 
        gradient: THEME.colors.secondary.lavender,
        description: "פרטים נוספים שמשלימים את התמונה",
        accentColor: "purple"
      }
    }), [THEME]);

  // --- Enhanced Helper Functions ---
  const formatEnumValue = (
    value: string | null | undefined, 
    map: { [key: string]: { label: string; icon: React.ElementType; color: string } }, 
    placeholder: string = "עוד נגלה יחד..."
  ): { label: string; icon: React.ElementType; color: string } => {
    if (!value || !map[value]) return { 
      label: placeholder, 
      icon: Telescope, 
      color: "text-gray-500" 
    };
    return map[value];
  };

  const getInitials = (firstName?: string, lastName?: string): string => {
    let initials = "";
    if (firstName && firstName.length > 0) initials += firstName[0];
    if (lastName && lastName.length > 0) initials += lastName[0];
    if (initials.length === 0 && firstName && firstName.length > 0) {
      initials = firstName.length > 1 ? firstName.substring(0, 2) : firstName[0];
    }
    return initials.toUpperCase() || "♥";
  };

  const calculateAge = (birthDate: Date | string | null | undefined): number => {
    if (!birthDate) return 0;
    try {
      const today = new Date();
      const birth = new Date(birthDate);
      if (isNaN(birth.getTime())) return 0;
      let age = today.getFullYear() - birth.getFullYear();
      const monthDiff = today.getMonth() - birth.getMonth();
      if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birth.getDate())) {
        age--;
      }
      return age > 0 ? age : 0;
    } catch (e) {
      return 0;
    }
  };

  const formatAvailabilityStatus = useCallback((status: UserProfile["availabilityStatus"] | undefined) => {
    const statusMap = {
      AVAILABLE: { 
        text: "זמין/ה להכרות מרגשות", 
        gradient: THEME.colors.primary.main, 
        icon: Heart, 
        pulse: true,
        bgColor: "bg-gradient-to-r from-emerald-500 to-green-500"
      },
      UNAVAILABLE: { 
        text: "לא זמין/ה כרגע", 
        gradient: "from-gray-400 to-gray-500", 
        icon: Clock, 
        pulse: false,
        bgColor: "bg-gradient-to-r from-gray-400 to-gray-500"
      },
      DATING: { 
        text: "בתהליך היכרות", 
        gradient: THEME.colors.primary.accent, 
        icon: Coffee, 
        pulse: false,
        bgColor: "bg-gradient-to-r from-amber-500 to-orange-500"
      },
      PAUSED: { 
        text: "בהפסקה זמנית", 
        gradient: THEME.colors.secondary.sky, 
        icon: Moon, 
        pulse: false,
        bgColor: "bg-gradient-to-r from-blue-500 to-cyan-500"
      },
      ENGAGED: { 
        text: "מאורס/ת", 
        gradient: THEME.colors.primary.light, 
        icon: Star, 
        pulse: false,
        bgColor: "bg-gradient-to-r from-pink-500 to-rose-500"
      },
      MARRIED: { 
        text: "נשוי/אה", 
        gradient: THEME.colors.primary.main, 
        icon: Heart, 
        pulse: false,
        bgColor: "bg-gradient-to-r from-rose-500 to-pink-500"
      }
    };
    
    return statusMap[status as keyof typeof statusMap] || {
      text: "מסתורי/ת...", 
      gradient: THEME.colors.secondary.lavender, 
      icon: Sparkles, 
      pulse: true,
      bgColor: "bg-gradient-to-r from-purple-500 to-indigo-500"
    };
  }, [THEME]);

  const formatBooleanPreference = (
    value: boolean | null | undefined, 
    yesLabel: string = "כן", 
    noLabel: string = "לא", 
    notSpecifiedLabel: string = "נגלה יחד"
  ): { label: string; icon: React.ElementType; color: string } => {
    if (value === true) return { label: yesLabel, icon: CheckCircle, color: "text-green-600" };
    if (value === false) return { label: noLabel, icon: X, color: "text-red-500" };
    return { label: notSpecifiedLabel, icon: Telescope, color: "text-gray-500" };
  };

  const formatStringBooleanPreference = (
    value: string | null | undefined, 
    options: { [key: string]: { label: string; icon: React.ElementType; color: string } } = {
      yes: { label: "כן", icon: CheckCircle, color: "text-green-600" },
      no: { label: "לא", icon: X, color: "text-red-500" },
      flexible: { label: "גמיש/ה", icon: Rainbow, color: "text-indigo-600" }
    }, 
    notSpecifiedLabel: { label: string; icon: React.ElementType; color: string } = {
      label: "נגלה יחד", icon: Telescope, color: "text-gray-500"
    }
  ): { label: string; icon: React.ElementType; color: string } => {
    if (value && options[value.toLowerCase()]) {
      return options[value.toLowerCase()];
    }
    return notSpecifiedLabel;
  };

  // --- Enhanced Helper Components ---

  const DetailItem: React.FC<{
    icon: React.ElementType;
    label: string;
    value: React.ReactNode;
    className?: string;
    iconColorClass?: string;
    valueClassName?: string;
    tooltip?: string;
    variant?: "default" | "highlight" | "elegant" | "romantic";
    size?: "sm" | "md" | "lg";
  }> = ({ 
    icon: Icon, 
    label, 
    value, 
    className, 
    iconColorClass = "text-rose-500", 
    valueClassName, 
    tooltip, 
    variant = "default",
    size = "md"
  }) => {
    const variants = {
      default: "bg-white border border-gray-200 hover:border-rose-300 hover:shadow-md",
      highlight: `bg-gradient-to-r ${THEME.colors.neutral.warm} border border-rose-200 shadow-sm`,
      elegant: `bg-gradient-to-br ${THEME.colors.neutral.elegant} border border-amber-200 ${THEME.shadows.elegant}`,
      romantic: `bg-gradient-to-r ${THEME.colors.neutral.warm} border border-pink-200 ${THEME.shadows.soft}`
    };

    const sizes = {
      sm: "p-3 gap-2",
      md: "p-4 gap-3", 
      lg: "p-5 gap-4"
    };

    const content = (
      <div className={cn(
        "flex items-start rounded-xl transition-all duration-300",
        variants[variant],
        sizes[size],
        className
      )}>
        <div className={cn(
          "p-2 rounded-lg flex-shrink-0 shadow-sm",
          variant === "highlight" || variant === "elegant" 
            ? `bg-gradient-to-r ${THEME.colors.primary.rose} text-white` 
            : "bg-rose-50 border border-rose-200",
          !variant && iconColorClass
        )}>
          <Icon className={cn(
            "w-4 h-4",
            variant === "highlight" || variant === "elegant" ? "text-white" : iconColorClass
          )} />
        </div>
        <div className="min-w-0 flex-1">
          <p className={cn(
            "text-xs font-semibold mb-1 tracking-wide",
            variant === "highlight" || variant === "elegant" 
              ? "text-rose-700" 
              : "text-gray-600"
          )}>{label}</p>
          <div className={cn(
            "text-sm font-medium break-words leading-relaxed",
            variant === "highlight" || variant === "elegant" 
              ? "text-gray-800" 
              : "text-gray-700",
            valueClassName
          )}>
            {value || "עוד נגלה יחד..."}
          </div>
        </div>
      </div>
    );

    if (tooltip) {
      return (
        <Tooltip>
          <TooltipTrigger asChild>{content}</TooltipTrigger>
          <TooltipContent side="top" className="max-w-xs text-center bg-white border border-rose-200 shadow-lg">
            <p className="text-gray-700">{tooltip}</p>
          </TooltipContent>
        </Tooltip>
      );
    }
    return content;
  };

  const EmptyState: React.FC<{
    icon: React.ElementType;
    title: string;
    description?: string;
    className?: string;
    action?: React.ReactNode;
    variant?: "mystery" | "adventure" | "discovery" | "romantic";
  }> = ({ icon: Icon, title, description, className, action, variant = "discovery" }) => {
    const variants = {
      mystery: {
        bg: `bg-gradient-to-br ${THEME.colors.secondary.lavender}`,
        border: "border-purple-200",
        iconBg: `bg-gradient-to-r ${THEME.colors.primary.romantic}`,
        textColor: "text-purple-700",
        titleColor: "text-purple-800"
      },
      adventure: {
        bg: `bg-gradient-to-br ${THEME.colors.secondary.sage}`,
        border: "border-emerald-200",
        iconBg: `bg-gradient-to-r ${THEME.colors.primary.rose}`,
        textColor: "text-emerald-700",
        titleColor: "text-emerald-800"
      },
      discovery: {
        bg: `bg-gradient-to-br ${THEME.colors.secondary.peach}`,
        border: "border-amber-200",
        iconBg: `bg-gradient-to-r ${THEME.colors.primary.gold}`,
        textColor: "text-amber-700",
        titleColor: "text-amber-800"
      },
      romantic: {
        bg: `bg-gradient-to-br ${THEME.colors.neutral.warm}`,
        border: "border-rose-200",
        iconBg: `bg-gradient-to-r ${THEME.colors.primary.rose}`,
        textColor: "text-rose-700",
        titleColor: "text-rose-800"
      }
    };

    const config = variants[variant];

    return (
      <div className={cn(
        "flex flex-col items-center justify-center py-8 text-center rounded-xl border border-dashed",
        config.bg,
        config.border,
        THEME.shadows.soft,
        className
      )}>
        <div className={cn("p-4 rounded-full mb-4", config.iconBg, THEME.shadows.warm)}>
          <Icon className="w-8 h-8 text-white" />
        </div>
        <h3 className={cn("text-lg font-bold mb-2", config.titleColor)}>{title}</h3>
        {description && (
          <p className={cn("text-sm mt-1 max-w-xs leading-relaxed", config.textColor)}>
            {description}
          </p>
        )}
        {action && <div className="mt-6">{action}</div>}
      </div>
    );
  };

  const SectionCard: React.FC<{
    title: string;
    subtitle?: string;
    icon?: React.ElementType;
    children: React.ReactNode;
    className?: string;
    contentClassName?: string;
    headerClassName?: string;
    action?: React.ReactNode;
    variant?: "default" | "elegant" | "romantic" | "highlight";
    gradient?: string;
  }> = ({ 
    title, 
    subtitle,
    icon: Icon, 
    children, 
    className, 
    contentClassName, 
    headerClassName, 
    action, 
    variant = "default",
    gradient
  }) => {
    const variants = {
      default: {
        card: "bg-white border-gray-200 shadow-lg hover:shadow-xl",
        header: "bg-gradient-to-r from-gray-50 to-white border-gray-200",
        iconBg: "bg-gray-100 border border-gray-200",
        iconColor: "text-gray-600"
      },
      elegant: {
        card: `bg-white border-amber-200 ${THEME.shadows.elegant}`,
        header: `bg-gradient-to-r ${gradient || THEME.colors.neutral.warm} border-amber-200`,
        iconBg: `bg-gradient-to-r ${THEME.colors.primary.gold} text-white`,
        iconColor: "text-white"
      },
      romantic: {
        card: `bg-white border-rose-200 ${THEME.shadows.soft}`,
        header: `bg-gradient-to-r ${gradient || THEME.colors.neutral.warm} border-rose-200`,
        iconBg: `bg-gradient-to-r ${THEME.colors.primary.rose} text-white`,
        iconColor: "text-white"
      },
      highlight: {
        card: `bg-white border-pink-200 ${THEME.shadows.soft} ring-1 ring-pink-100`,
        header: `bg-gradient-to-r ${gradient || THEME.colors.primary.romantic} border-pink-200`,
        iconBg: `bg-gradient-to-r ${THEME.colors.primary.elegant} text-white`,
        iconColor: "text-white"
      }
    };

    const config = variants[variant];

    return (
      <div className={cn(
        "rounded-2xl border overflow-hidden flex flex-col transition-all duration-300",
        config.card,
        className
      )}>
        <div className={cn(
          "flex items-center justify-between gap-3 p-4 border-b",
          config.header,
          headerClassName
        )}>
          <div className="flex items-center gap-3 min-w-0">
            {Icon && (
              <div className={cn("p-2 rounded-lg shadow-sm", config.iconBg)}>
                <Icon className={cn("w-5 h-5", config.iconColor)} />
              </div>
            )}
            <div className="min-w-0">
              <h3 className={cn(
                "text-base font-bold truncate",
                variant === "default" ? "text-gray-800" : "text-gray-800"
              )}>
                {title}
              </h3>
              {subtitle && (
                <p className="text-xs text-gray-600 mt-0.5 truncate">{subtitle}</p>
              )}
            </div>
          </div>
          {action && <div className="ml-auto flex-shrink-0">{action}</div>}
        </div>
        <div className={cn("p-4", contentClassName)}>{children}</div>
      </div>
    );
  };
  
  // Color Palette Selector Component
  const ColorPaletteSelector = () => (
    <div className="flex items-center gap-2 p-2 bg-white/90 backdrop-blur-sm rounded-xl border border-gray-200 shadow-sm">
      <Palette className="w-4 h-4 text-gray-500" />
      <select 
        value={selectedPalette}
        onChange={(e) => setSelectedPalette(e.target.value as ColorPaletteName)}
        className="text-xs bg-transparent border-none outline-none font-medium text-gray-600"
      >
        {Object.entries(COLOR_PALETTES).map(([key, palette]) => (
          <option key={key} value={key}>{palette.name}</option>
        ))}
      </select>
    </div>
  );

  // --- Enhanced Profile Header ---
  const ProfileHeader: React.FC<{
    profile: UserProfile;
    age: number;
    mainImageToDisplay: UserImageType | null;
    availability: ReturnType<typeof formatAvailabilityStatus>;
    viewMode: "matchmaker" | "candidate";
    onSuggestClick: () => void;
    isMobile?: boolean;
    selectedPalette: ColorPaletteName;
  }> = ({ profile, age, mainImageToDisplay, availability, viewMode, onSuggestClick, isMobile = false, selectedPalette }) => {
    
    // **בעיה 3: תיקון באג לוגי**
    // הוספנו את `selectedPalette` למערך התלויות של `useMemo`.
    // בלעדיו, הדגשים לא היו מתעדכנים עם שינוי ערכת הצבעים.
    const personalityHighlights = useMemo(() => {
      const currentTheme = COLOR_PALETTES[selectedPalette];
      const highlights: ExcitementFactor[] = [];
      
      if (profile.profileCharacterTraits?.length > 0) {
        const trait = profile.profileCharacterTraits[0];
        const traitData = formatEnumValue(trait, characterTraitMap, trait);
        highlights.push({
          icon: traitData.icon,
          text: traitData.label,
          gradient: currentTheme.colors.primary.light
        });
      }

      if (profile.profileHobbies?.length > 0) {
        const hobby = profile.profileHobbies[0];
        const hobbyData = formatEnumValue(hobby, hobbiesMap, hobby);
        highlights.push({
          icon: hobbyData.icon,
          text: hobbyData.label,
          gradient: currentTheme.colors.secondary.sage
        });
      }

      if (profile.city) {
        highlights.push({
          icon: MapPin,
          text: `גר/ה ב${profile.city}`,
          gradient: currentTheme.colors.secondary.sky
        });
      }

      return highlights.slice(0, 3);
    }, [profile, selectedPalette]);

    return (
      <div className="relative overflow-hidden">
        {/* Elegant Background */}
        <div className={cn("absolute inset-0 bg-gradient-to-br", THEME.colors.neutral.warm)}>
          <div className="absolute top-10 right-10 w-32 h-32 bg-gradient-to-br from-rose-200/40 to-pink-200/40 rounded-full blur-2xl animate-pulse"></div>
          <div className="absolute bottom-10 left-10 w-24 h-24 bg-gradient-to-br from-amber-200/40 to-orange-200/40 rounded-full blur-xl animate-pulse" style={{ animationDelay: "1s" }}></div>
          <div className="absolute top-1/2 left-1/2 w-20 h-20 bg-gradient-to-br from-purple-200/30 to-pink-200/30 rounded-full blur-lg animate-pulse" style={{ animationDelay: "2s" }}></div>
        </div>

        <div className="relative z-10 p-6">
          <div className={cn("flex gap-6", isMobile ? "flex-col items-center text-center" : "flex-row items-start")}>
            
            {/* Enhanced Profile Image */}
            <div className="relative flex-shrink-0">
              <div className={cn(
                "relative h-36 w-36 rounded-full overflow-hidden border-4 border-white shadow-2xl",
                "ring-4 ring-rose-200/50",
                THEME.shadows.elegant
              )}>
                {mainImageToDisplay?.url ? (
                  <Image
                    src={mainImageToDisplay.url}
                    alt={`תמונת פרופיל של ${profile.user?.firstName || 'מועמד יקר'}`}
                    fill
                    className="object-cover"
                    sizes="144px"
                    priority
                  />
                ) : (
                  <div className={cn(
                    "w-full h-full flex items-center justify-center",
                    `bg-gradient-to-br ${THEME.colors.primary.romantic}`
                  )}>
                    <span className="text-5xl font-bold text-white">
                      {getInitials(profile.user?.firstName, profile.user?.lastName)}
                    </span>
                  </div>
                )}
              </div>

              {/* Elegant Status Badge */}
              <div className="absolute -bottom-2 -right-2">
                <Badge className={cn(
                  "text-xs px-3 py-2 text-white border-0 font-bold",
                  availability.bgColor,
                  availability.pulse && "animate-pulse",
                  THEME.shadows.warm
                )}>
                  <availability.icon className="w-3 h-3 ml-1" />
                  {availability.text}
                </Badge>
              </div>
            </div>

            {/* **בעיה 1: פתרון** */}
            {/* המבנה של ה-div הזה שונה כדי להבטיח זרימה אנכית נכונה ולמנוע חפיפה של תוכן. */}
            <div className="flex-1 min-w-0 flex flex-col justify-start items-start">
              <div className="w-full">
                 {!isMobile && (
                  <div className="flex justify-end mb-2">
                    <ColorPaletteSelector />
                  </div>
                )}
                
                {/* Name and Age */}
                <div className={cn("mb-4 w-full", isMobile && "text-center")}>
                    <h1 className={cn(
                      "text-4xl md:text-5xl font-extrabold leading-tight mb-2",
                      "bg-gradient-to-r from-gray-800 via-gray-900 to-black bg-clip-text text-transparent",
                       isMobile && "mx-auto" // Center title on mobile
                    )}>
                      {profile.user?.firstName ? (
                        <>
                          הכירו את {profile.user.firstName}
                          {profile.user.lastName && ` ${profile.user.lastName}`}
                        </>
                      ) : (
                        "מישהו מיוחד מחכה להכרות"
                      )}
                    </h1>

                    {age > 0 && (
                      <div className="mt-3">
                        <p className="text-xl text-gray-700 font-semibold flex items-center justify-center lg:justify-start gap-2">
                          <Cake className="w-5 h-5 text-blue-500" />
                          {/* שיפור UX: טקסט גיל ניטרלי */}
                          גיל: {age}
                        </p>
                      </div>
                    )}
                </div>

                {/* Personality Highlights */}
                {personalityHighlights.length > 0 && (
                  <div className={cn("flex gap-3 flex-wrap mt-4 w-full", isMobile ? "justify-center" : "justify-start")}>
                    {personalityHighlights.map((highlight, index) => (
                      <div
                        key={index}
                        className={cn(
"flex items-center gap-2 px-4 py-2 rounded-full text-gray-700 font-semibold text-sm",                          THEME.shadows.soft
                        )}
                      >
                        <highlight.icon className="w-4 h-4" />
                        <span>{highlight.text}</span>
                      </div>
                    ))}
                  </div>
                )}
              </div>

              {/* Key Facts Grid */}
              <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mt-6 w-full">
                {profile.city && (
                  <div className={cn(
                    "flex items-center gap-3 p-3 bg-white/80 backdrop-blur-sm rounded-xl",
                    "border border-rose-200/50 shadow-sm hover:shadow-md transition-all"
                  )}>
                    <MapPin className="w-5 h-5 text-rose-500" />
                    <div>
                      <p className="text-xs text-gray-500 font-medium">מיקום</p>
                      <p className="text-sm font-semibold text-gray-800">{profile.city}</p>
                    </div>
                  </div>
                )}

                {profile.occupation && (
                  <div className={cn(
                    "flex items-center gap-3 p-3 bg-white/80 backdrop-blur-sm rounded-xl",
                    "border border-amber-200/50 shadow-sm hover:shadow-md transition-all"
                  )}>
                    <Briefcase className="w-5 h-5 text-amber-600" />
                    <div>
                      <p className="text-xs text-gray-500 font-medium">עיסוק</p>
                      <p className="text-sm font-semibold text-gray-800">{profile.occupation}</p>
                    </div>
                  </div>
                )}

                {profile.religiousLevel && (
                  <div className={cn(
                    "flex items-center gap-3 p-3 bg-white/80 backdrop-blur-sm rounded-xl",
                    "border border-purple-200/50 shadow-sm hover:shadow-md transition-all"
                  )}>
                    <BookMarked className="w-5 h-5 text-purple-600" />
                    <div>
                      <p className="text-xs text-gray-500 font-medium">השקפה</p>
                      <p className="text-sm font-semibold text-gray-800">
                        {formatEnumValue(profile.religiousLevel, religiousLevelMap).label}
                      </p>
                    </div>
                  </div>
                )}
              </div>

              {/* Action Button for Matchmakers */}
              {viewMode === 'matchmaker' && (
                <div className={cn("pt-6 w-full flex", isMobile ? "justify-center" : "justify-end")}>
                  <Button
                    size="lg"
                    className={cn(
                      "bg-gradient-to-r from-rose-500 via-pink-500 to-rose-600",
                      "hover:from-rose-600 hover:via-pink-600 hover:to-rose-700",
                      "text-white font-bold rounded-full px-8 py-3",
                      "shadow-xl hover:shadow-2xl transition-all duration-300 transform hover:scale-105"
                    )}
                    onClick={onSuggestClick}
                  >
                    <Heart className="w-5 h-5 ml-2" />
                    הצע התאמה מושלמת
                    <ArrowRight className="w-5 h-5 mr-2" />
                  </Button>
                </div>
              )}
            </div>
          </div>

          {/* Inspirational Quote */}
          <div className="mt-8 text-center">
            <div className={cn(
              "inline-flex items-center gap-3 px-6 py-3 rounded-full",
              `bg-gradient-to-r ${THEME.colors.primary.romantic}`,
              "text-white shadow-lg"
            )}>
              <Quote className="w-5 h-5" />
              <p className="text-lg font-medium italic">
                כל סיפור אהבה מתחיל בהכרות אחת מיוחדת...
              </p>
              <Quote className="w-5 h-5 transform rotate-180" />
            </div>
          </div>
        </div>
      </div>
    );
  };


  // --- Enhanced Questionnaire Item ---
  const QuestionnaireItem: React.FC<{
    answer: FormattedAnswer;
    worldColor?: string;
    worldGradient?: string;
  }> = ({ answer, worldColor = "rose", worldGradient }) => {
    return (
      <div className={cn(
        "p-5 rounded-xl border transition-all duration-300 hover:shadow-lg",
        "bg-gradient-to-br from-white to-gray-50/30",
        `border-${worldColor}-200 hover:border-${worldColor}-300`
      )}>
        <div className="flex items-start gap-4">
          <div className={cn(
            "p-3 rounded-lg flex-shrink-0 text-white shadow-md",
            worldGradient ? `bg-gradient-to-r ${worldGradient}` : `bg-gradient-to-r from-${worldColor}-400 to-${worldColor}-500`
          )}>
            <Quote className="w-5 h-5" />
          </div>
          <div className="flex-1 min-w-0">
            <h4 className="text-sm font-bold mb-3 text-gray-800 leading-relaxed">
              {answer.question}
            </h4>
            <div className={cn(
              "p-4 rounded-lg border-r-4 bg-white/60",
              `border-${worldColor}-400`
            )}>
              <p className="text-sm text-gray-700 leading-relaxed italic">
                <Quote className="w-4 h-4 inline ml-1 text-gray-400" />
                {answer.displayText || answer.answer}
                <Quote className="w-4 h-4 inline mr-1 text-gray-400 transform rotate-180" />
              </p>
            </div>
          </div>
        </div>
      </div>
    );
  };

  useEffect(() => {
    setIsClient(true);
    const checkScreenSize = () => setIsDesktop(window.innerWidth >= 1024);
    checkScreenSize();
    window.addEventListener("resize", checkScreenSize);

    const onFullscreenChange = () => {
        setIsFullscreen(!!document.fullscreenElement);
    };
    document.addEventListener('fullscreenchange', onFullscreenChange);

    return () => {
        window.removeEventListener("resize", checkScreenSize);
        document.removeEventListener('fullscreenchange', onFullscreenChange);
    };
  }, []);
  
  const hasAnyPreferences = useMemo(() => {
    return (
      (profile.preferredMaritalStatuses && profile.preferredMaritalStatuses.length > 0) ||
      (profile.preferredReligiousLevels && profile.preferredReligiousLevels.length > 0) ||
      (profile.preferredEducation && profile.preferredEducation.length > 0) ||
      (profile.preferredOccupations && profile.preferredOccupations.length > 0) ||
      (profile.preferredLocations && profile.preferredLocations.length > 0) ||
      (profile.preferredCharacterTraits && profile.preferredCharacterTraits.length > 0) ||
      (profile.preferredHobbies && profile.preferredHobbies.length > 0)
    );
  }, [profile]);

  const orderedImages = useMemo(() => {
    const validImages = (images || []).filter(img => img.url);
    const mainImg = validImages.find(img => img.isMain);
    const otherImages = validImages.filter(img => !img.isMain);
    return mainImg ? [mainImg, ...otherImages] : validImages;
  }, [images]);

  const mainImageToDisplay = useMemo(() => orderedImages.length > 0 ? orderedImages[0] : null, [orderedImages]);
  const age = useMemo(() => calculateAge(profile.birthDate), [profile.birthDate]);
  const availability = useMemo(() => formatAvailabilityStatus(profile.availabilityStatus), [profile.availabilityStatus, formatAvailabilityStatus]);

  const hasDisplayableQuestionnaireAnswers = useMemo(() =>
    questionnaire &&
    questionnaire.formattedAnswers &&
    Object.values(questionnaire.formattedAnswers)
      .flat()
      .some((a) => a.isVisible !== false && (a.answer || a.displayText)),
    [questionnaire]
  );

  const currentDialogImageIndex = useMemo(() =>
    selectedImageForDialog ? orderedImages.findIndex(img => img.id === selectedImageForDialog.id) : -1,
    [selectedImageForDialog, orderedImages]
  );

  const handleOpenImageDialog = (image: UserImageType) => image.url && setSelectedImageForDialog(image);
  const handleCloseImageDialog = () => setSelectedImageForDialog(null);

  const handleDialogNav = (direction: "next" | "prev") => {
    if (currentDialogImageIndex === -1 || orderedImages.length <= 1) return;
    const newIndex = (currentDialogImageIndex + (direction === 'next' ? 1 : -1) + orderedImages.length) % orderedImages.length;
    setSelectedImageForDialog(orderedImages[newIndex]);
  };

  const handleCreateSuggestion = async (data: CreateSuggestionData) => {
    if (onCreateSuggestion) {
      await onCreateSuggestion(data);
    }
    setIsSuggestDialogOpen(false);
  };
  
  const handleToggleFullscreen = () => {
    const elem = document.getElementById('profile-card-container');
    if (!elem) return;
    
    if (!document.fullscreenElement) {
      elem.requestFullscreen().catch(err => {
        console.error(`Error attempting to enable full-screen mode: ${err.message} (${err.name})`);
      });
    } else {
      document.exitFullscreen();
    }
  };

  // Enhanced tab configuration with THEME dependency
  const tabItems = useMemo(() => [
    { 
      value: "essence", 
      label: "המהות", 
      icon: Sparkles, 
      gradient: THEME.colors.primary.light, 
      description: "מי זה האדם הזה באמת" 
    },
    { 
      value: "story", 
      label: "הסיפור", 
      icon: BookOpen, 
      gradient: THEME.colors.primary.accent, 
      description: "הרקע והדרך שהובילה לכאן" 
    },
    { 
      value: "vision", 
      label: "החזון", 
      icon: Heart, 
      gradient: THEME.colors.primary.main, 
      description: "החלום לזוגיות ומשפחה" 
    },
    { 
      value: "search", 
      label: "החיפוש", 
      icon: Target, 
      gradient: THEME.colors.secondary.sky, 
      description: "מה מחפש בבן/בת הזוג" 
    },
    ...(hasDisplayableQuestionnaireAnswers ? [{
      value: "deeper",
      label: "עומק",
      icon: Telescope,
      gradient: THEME.colors.secondary.peach,
      description: "תשובות מעמיקות מהלב"
    }] : []),
    ...(viewMode === "matchmaker" ? [{
      value: "professional",
      label: "מקצועי",
      icon: Lock,
      gradient: THEME.colors.secondary.lavender,
      description: "מידע לשדכן בלבד"
    }] : []),
  ], [hasDisplayableQuestionnaireAnswers, viewMode, THEME]);

  const renderPreferenceBadges = (
    title: string,
    icon: React.ElementType,
    values: string[] | undefined,
    translationMap: { [key: string]: { label: string; icon: React.ElementType; color: string } },
    gradientClass: string = THEME.colors.secondary.sky
  ) => {
    if (!values || values.length === 0) {
      // לא נציג כלום כאן אם אין ערכים, כדי למנוע כפילויות.
      // הבדיקה הראשית נעשית בלשונית החיפוש.
      return null;
    }

    const IconComponent = icon;
    return (
      <div className="space-y-4">
        <div className="flex items-center gap-3">
          <div className={cn("p-2 rounded-lg bg-gradient-to-r", gradientClass)}>
            <IconComponent className="w-5 h-5 text-white" />
          </div>
          <h4 className="text-base font-bold text-gray-800">{title}</h4>
        </div>
        <div className="flex flex-wrap gap-3">
          {values.map((val) => {
            const itemData = translationMap[val] || { label: val, icon: Sparkles, color: "text-gray-600" };
            return (
              <Badge
                key={val}
                variant="outline"
                className={cn(
                  "flex items-center gap-2 text-sm px-4 py-2 font-semibold border-2",
                  "bg-white hover:bg-gray-50 transition-all hover:scale-105",
                  "border-gray-200 hover:border-rose-300",
                  THEME.shadows.soft
                )}
              >
                <itemData.icon className={cn("w-4 h-4", itemData.color)} />
                {itemData.label}
              </Badge>
            );
          })}
        </div>
      </div>
    );
  };

  // Enhanced Main Content Tabs
  const MainContentTabs = () => (
    <Tabs value={activeTab} onValueChange={setActiveTab} className="w-full flex flex-col flex-grow min-h-0">
      <div className={cn(
        "bg-white/95 backdrop-blur-md p-3 rounded-2xl mb-6 border border-gray-200/50",
        THEME.shadows.elegant,
        "sticky top-0 z-20"
      )}>
        <ScrollArea dir="rtl" className="w-full">
          <TabsList className="h-auto inline-flex bg-transparent p-2 gap-2">
            {tabItems.map((tab) => (
              <TabsTrigger
                key={tab.value}
                value={tab.value}
                className={cn(
                  "flex flex-col items-center gap-2 px-4 py-4 text-xs rounded-xl",
                  "whitespace-nowrap transition-all duration-300",
                  "text-gray-600 hover:text-gray-800 hover:bg-rose-50",
                  "min-w-[90px] border border-transparent",
                  activeTab === tab.value && cn(
                    "font-bold text-white shadow-lg border-white/20",
                    `bg-gradient-to-r ${tab.gradient}`
                  )
                )}
              >
                <tab.icon className="w-5 h-5" />
                <span className="font-semibold">{tab.label}</span>
                {tab.description && activeTab === tab.value && (
                  <span className="text-[10px] text-white/90 leading-tight text-center max-w-[80px] font-normal">
                    {tab.description}
                  </span>
                )}
              </TabsTrigger>
            ))}
          </TabsList>
          <ScrollBar orientation="horizontal" />
        </ScrollArea>
      </div>

      <div className="space-y-8 focus:outline-none flex-grow min-h-0">
        
        {/* Essence Tab - The Heart of the Person */}
        <TabsContent value="essence" className="mt-0">
          <div className="space-y-8">
            
            <SectionCard
              title="הנשמה והמהות"
              subtitle="מי זה האדם הזה באמת"
              icon={Heart}
              variant="romantic"
              gradient={THEME.colors.primary.main}
            >
              <div className="grid grid-cols-1 lg:grid-cols-2 gap-8 items-start">
                
                <div className="relative">
                  <div className={cn(
                    "relative aspect-[3/4] rounded-2xl overflow-hidden",
                    "border-4 border-white shadow-2xl ring-4 ring-rose-200/50"
                  )}>
                    {mainImageToDisplay?.url ? (
                      <Image
                        src={mainImageToDisplay.url}
                        alt={`${profile.user?.firstName || 'מועמד'} נראה/ת מדהים/ה`}
                        fill
                        className="object-cover transition-transform duration-700 hover:scale-105"
                        sizes="(max-width: 1024px) 100vw, 50vw"
                        priority
                      />
                    ) : (
                      <div className={cn(
                        "w-full h-full flex items-center justify-center",
                        `bg-gradient-to-br ${THEME.colors.primary.romantic}`
                      )}>
                        <div className="text-center text-white">
                          <User className="w-24 h-24 mx-auto mb-4 opacity-80" />
                          <p className="text-xl font-bold">התמונה המושלמת</p>
                          <p className="text-sm opacity-80">מחכה להיחשף</p>
                        </div>
                      </div>
                    )}

                    <div className="absolute top-4 right-4">
                      {profile.gender === "FEMALE" && (
                        <Badge className={cn(
                          "bg-gradient-to-r from-pink-500 to-rose-500 text-white border-0",
                          THEME.shadows.warm
                        )}>
                          <Crown className="w-3 h-3 ml-1" />
                          נסיכה
                        </Badge>
                      )}
                      {profile.gender === "MALE" && (
                        <Badge className={cn(
                          "bg-gradient-to-r from-blue-500 to-cyan-500 text-white border-0",
                          THEME.shadows.warm
                        )}>
                          <Zap className="w-3 h-3 ml-1" />
                          נסיך
                        </Badge>
                      )}
                    </div>
                  </div>
                </div>

                <div className="space-y-6">
                  <div className="text-center lg:text-right">
                    <h2 className={cn(
                      "text-3xl md:text-4xl font-extrabold mb-4 leading-tight",
                      "bg-gradient-to-r from-rose-600 via-pink-600 to-amber-600 bg-clip-text text-transparent"
                    )}>
                      {profile.user?.firstName || "מישהו מדהים"}
                    </h2>

                    {age > 0 && (
                      <p className="text-xl text-gray-700 font-bold mb-6 flex items-center justify-center lg:justify-start gap-2">
                        <Cake className="w-5 h-5 text-rose-500" />
                        גיל: {age}
                      </p>
                    )}

                    {profile.about ? (
                      <div className={cn(
                        "relative p-6 rounded-2xl border border-rose-200/50",
                        `bg-gradient-to-r ${THEME.colors.neutral.warm}`,
                        THEME.shadows.soft
                      )}>
                        <Quote className="absolute top-3 right-3 w-8 h-8 text-rose-300" />
                        <p className="text-lg text-gray-800 leading-relaxed italic font-medium text-center lg:text-right">
                          {profile.about}
                        </p>
                        <Quote className="absolute bottom-3 left-3 w-8 h-8 text-rose-300 transform rotate-180" />
                      </div>
                    ) : (
                      <EmptyState
                        icon={Telescope}
                        title="הסיפור האישי מחכה להיכתב"
                        description="יש כאן אדם מעניין שמחכה לגילוי יחד איתך"
                        variant="romantic"
                      />
                    )}
                  </div>

                  <div className="grid grid-cols-1 gap-4">
                    {profile.city && (
                      <DetailItem
                        icon={MapPin}
                        label="הבית שבלב"
                        value={`${profile.city} - המקום שקורא לי בית`}
                        variant="highlight"
                        size="md"
                      />
                    )}

                    {profile.occupation && (
                      <DetailItem
                        icon={Briefcase}
                        label="התחום שמלהיב אותי"
                        value={`${profile.occupation} - כאן אני נותן/ת את הלב`}
                        variant="highlight"
                        size="md"
                      />
                    )}

                    {profile.religiousLevel && (
                      <DetailItem
                        icon={BookMarked}
                        label="השקפת העולם שמנחה אותי"
                        value={formatEnumValue(profile.religiousLevel, religiousLevelMap).label}
                        variant="highlight"
                        size="md"
                      />
                    )}
                  </div>
                </div>
              </div>
            </SectionCard>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              
              <SectionCard
                title="תכונות הזהב שלי"
                subtitle="מה שעושה אותי מיוחד/ת"
                icon={Sparkles}
                variant="elegant"
                gradient={THEME.colors.primary.light}
              >
                <div className="space-y-4">
                  {profile.profileCharacterTraits?.length > 0 ? (
                    <div className="flex flex-wrap gap-3">
                      {profile.profileCharacterTraits.map(trait => {
                        const traitData = formatEnumValue(trait, characterTraitMap, trait);
                        return (
                          <Badge
                            key={trait}
                            className={cn(
                              "flex items-center gap-2 px-4 py-2 font-semibold text-sm",
                              "bg-gradient-to-r from-purple-100 to-pink-100 text-purple-800",
                              "border border-purple-200 rounded-full",
                              "hover:scale-105 transition-transform",
                              THEME.shadows.soft
                            )}
                          >
                            <traitData.icon className={cn("w-4 h-4", traitData.color)} />
                            {traitData.label}
                          </Badge>
                        );
                      })}
                    </div>
                  ) : (
                    <EmptyState
                      icon={Sparkles}
                      title="תכונות מיוחדות מחכות לגילוי"
                      description="האישיות הייחודית תתגלה בהכרות"
                      variant="mystery"
                    />
                  )}
                </div>
              </SectionCard>

              <SectionCard
                title="מה שאני אוהב/ת לעשות"
                subtitle="התחביבים והתשוקות שלי"
                icon={Heart}
                variant="elegant"
                gradient={THEME.colors.secondary.sage}
              >
                <div className="space-y-4">
                  {profile.profileHobbies?.length > 0 ? (
                    <div className="flex flex-wrap gap-3">
                      {profile.profileHobbies.map(hobby => {
                        const hobbyData = formatEnumValue(hobby, hobbiesMap, hobby);
                        return (
                          <Badge
                            key={hobby}
                            className={cn(
                              "flex items-center gap-2 px-4 py-2 font-semibold text-sm",
                              "bg-gradient-to-r from-emerald-100 to-cyan-100 text-emerald-800",
                              "border border-emerald-200 rounded-full",
                              "hover:scale-105 transition-transform",
                              THEME.shadows.soft
                            )}
                          >
                            <hobbyData.icon className={cn("w-4 h-4", hobbyData.color)} />
                            {hobbyData.label}
                          </Badge>
                        );
                      })}
                    </div>
                  ) : (
                    <EmptyState
                      icon={Mountain}
                      title="הרפתקאות מחכות לנו יחד"
                      description="נגלה ביחד מה אנחנו אוהבים לעשות"
                      variant="adventure"
                    />
                  )}
                </div>
              </SectionCard>
            </div>

            <div className={cn(
              "text-center p-8 rounded-2xl text-white",
              `bg-gradient-to-r ${THEME.colors.primary.main}`,
              THEME.shadows.elegant
            )}>
              <h3 className="text-2xl font-bold mb-4">
                מוכנים להכיר את {profile.user?.firstName || "המועמד המושלם"}?
              </h3>
              <p className="text-lg mb-6 opacity-90">
                עוד המון דברים מעניינים מחכים לגילוי...
              </p>
              <div className="flex flex-wrap justify-center gap-4">
                <Button
                  onClick={() => setActiveTab('story')}
                  className={cn(
                    "bg-white text-gray-600 hover:bg-gray-50 font-bold px-6 py-3 rounded-full",
                    THEME.shadows.warm
                  )}
                >
                  <BookOpen className="w-5 h-5 ml-2" />
                  בואו נכיר את הסיפור
                </Button>
                <Button
                  onClick={() => setActiveTab('vision')}
                  variant="outline"
className="bg-white/20 hover:bg-white border border-white/30 text-white hover:text-rose-600 font-bold px-6 py-3 rounded-full backdrop-blur-sm transition-all"                >
                  <Heart className="w-5 h-5 ml-2" />
                  מה החלום לזוגיות
                </Button>
              </div>
            </div>
          </div>
        </TabsContent>

        {/* Story Tab - Background & Journey */}
        <TabsContent value="story" className="mt-0 space-y-6">
          <div className="text-center mb-8">
            <h2 className={cn(
              "text-3xl font-bold mb-4",
              "bg-gradient-to-r from-purple-600 to-pink-600 bg-clip-text text-transparent"
            )}>
              הסיפור והמסע של {profile.user?.firstName || "המועמד"}
            </h2>
            <p className="text-gray-600 text-lg">השורשים, הדרך והערכים שעיצבו את האדם הזה</p>
          </div>

          <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
            
            <SectionCard
              title="הזהות הדתית והרוחנית"
              subtitle="המקום של האמונה והמסורת בחיי"
              icon={BookMarked}
              variant="elegant"
              gradient={THEME.colors.primary.gold}
            >
              <div className="space-y-5">
                <DetailItem
                  icon={BookMarked}
                  label="השקפת העולם שמנחה אותי"
                  value={formatEnumValue(profile.religiousLevel, religiousLevelMap).label}
                  variant="highlight"
                />
                
                <DetailItem
                  icon={Heart}
                  label="שמירת נגיעה"
                  value={formatBooleanPreference(profile.shomerNegiah, "כן, זה חשוב לי", "לא").label}
                  variant="elegant"
                />

                {profile.gender === "FEMALE" && profile.headCovering && (
                  <DetailItem
                    icon={Crown}
                    label="כיסוי ראש"
                    value={formatEnumValue(profile.headCovering, headCoveringMap).label}
                    variant="elegant"
                  />
                )}

                {profile.gender === "MALE" && profile.kippahType && (
                  <DetailItem
                    icon={Crown}
                    label="סוג כיפה"
                    value={formatEnumValue(profile.kippahType, kippahTypeMap).label}
                    variant="elegant"
                  />
                )}
              </div>
            </SectionCard>

            <SectionCard
              title="השכלה ועולם המקצוע"
              subtitle="הדרך האקדמית והמקצועית שלי"
              icon={GraduationCap}
              variant="elegant"
              gradient={THEME.colors.secondary.sky}
            >
              <div className="space-y-5">
                <DetailItem
                  icon={GraduationCap}
                  label="רמת ההשכלה"
                  value={formatEnumValue(profile.educationLevel, educationLevelMap).label}
                  variant="highlight"
                />

                {profile.education && (
                  <DetailItem
                    icon={BookOpen}
                    label="פירוט הלימודים"
                    value={profile.education}
                    variant="elegant"
                    valueClassName="whitespace-pre-wrap"
                  />
                )}

                <DetailItem
                  icon={Briefcase}
                  label="התחום המקצועי"
                  value={profile.occupation || "מקצוע מעניין מחכה לגילוי"}
                  variant="elegant"
                />

                <DetailItem
                  icon={Award}
                  label="השירות הצבאי/לאומי"
                  value={formatEnumValue(profile.serviceType, serviceTypeMap).label}
                  variant="elegant"
                />

                {profile.serviceDetails && (
                  <DetailItem
                    icon={InfoIcon}
                    label="פרטי השירות"
                    value={profile.serviceDetails}
                    variant="elegant"
                    valueClassName="whitespace-pre-wrap"
                  />
                )}
              </div>
            </SectionCard>
          </div>

          <SectionCard
            title="הרקע המשפחתי והתרבותי"
            subtitle="המשפחה והמקורות שעיצבו אותי"
            icon={Users2}
            variant="romantic"
            gradient={THEME.colors.primary.accent}
          >
            <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-5">
              <DetailItem
                icon={Users2}
                label="סטטוס ההורים"
                value={profile.parentStatus || "נגלה יחד"}
                variant="elegant"
              />
              
              <DetailItem
                icon={Users}
                label="אחים ואחיות"
                value={profile.siblings ? `${profile.siblings} אחים/אחיות` : "נגלה יחד"}
                variant="elegant"
              />
              
              <DetailItem
                icon={Crown}
                label="המקום במשפחה"
                value={profile.position ? `מקום ${profile.position}` : "נגלה יחד"}
                variant="elegant"
              />

              {profile.aliyaCountry && (
                <DetailItem
                  icon={Globe}
                  label="ארץ המוצא"
                  value={`${profile.aliyaCountry} - השורשים שלי`}
                  variant="elegant"
                />
              )}

              {profile.aliyaYear && (
                <DetailItem
                  icon={Calendar}
                  label="שנת העלייה"
                  value={`${profile.aliyaYear} - הגעתי הביתה`}
                  variant="elegant"
                />
              )}

              {profile.nativeLanguage && (
                <DetailItem
                  icon={Languages}
                  label="השפה הראשונה"
                  value={formatEnumValue(profile.nativeLanguage, languageMap).label}
                  variant="elegant"
                />
              )}
            </div>

            {profile.additionalLanguages && profile.additionalLanguages.length > 0 && (
              <div className="mt-6 pt-6 border-t border-gray-200">
                <h4 className="text-base font-bold text-gray-800 mb-4 flex items-center gap-2">
                  <Languages className="w-5 h-5 text-blue-500" />
                  שפות נוספות שאני מדבר/ת
                </h4>
                <div className="flex flex-wrap gap-3">
                  {profile.additionalLanguages.map(lang => {
                    const langData = formatEnumValue(lang, languageMap);
                    return (
                      <Badge
                        key={lang}
                        className={cn(
                          "flex items-center gap-2 px-4 py-2 font-semibold text-sm",
                          "bg-gradient-to-r from-blue-100 to-cyan-100 text-blue-800",
                          "border border-blue-200 rounded-full",
                          THEME.shadows.soft
                        )}
                      >
                        <langData.icon className={cn("w-4 h-4", langData.color)} />
                        {langData.label}
                      </Badge>
                    );
                  })}
                </div>
              </div>
            )}
          </SectionCard>
        </TabsContent>

        {/* Vision Tab - Dreams & Aspirations */}
        <TabsContent value="vision" className="mt-0 space-y-6">
          <div className="text-center mb-8">
            <h2 className={cn(
              "text-3xl font-bold mb-4",
              "bg-gradient-to-r from-rose-600 to-pink-600 bg-clip-text text-transparent"
            )}>
              החזון והחלום לזוגיות של {profile.user?.firstName || "המועמד"}
            </h2>
            <p className="text-gray-600 text-lg">איך אני רואה את העתיד שלנו יחד</p>
          </div>

          <SectionCard
            title="הזוגיות שאני חולם/ת עליה"
            subtitle="המחשבות והרגשות שלי על אהבה ומשפחה"
            icon={Heart}
            variant="romantic"
            gradient={THEME.colors.primary.main}
          >
            {profile.matchingNotes ? (
              <div className={cn(
                "p-6 rounded-2xl border border-rose-200",
                `bg-gradient-to-r ${THEME.colors.neutral.warm}`,
                THEME.shadows.soft
              )}>
                <div className="flex items-start gap-4">
                  <div className={cn(
                    "p-3 rounded-full bg-gradient-to-r",
                    THEME.colors.primary.rose
                  )}>
                    <Heart className="w-6 h-6 text-white" />
                  </div>
                  <div>
                    <h4 className="font-bold text-rose-800 mb-3 text-lg">
                      המחשבות שלי על הזוגיות המושלמת:
                    </h4>
                    <p className="text-rose-700 leading-relaxed whitespace-pre-wrap italic text-lg">
                      <Quote className="w-5 h-5 inline ml-1 text-rose-400" />
                      {profile.matchingNotes}
                      <Quote className="w-5 h-5 inline mr-1 text-rose-400 transform rotate-180" />
                    </p>
                  </div>
                </div>
              </div>
            ) : (
              // שיפור UX: טקסט משופר למצב ריק
              <EmptyState
                icon={Heart}
                title="החזון לזוגיות טרם פורט"
                description="זו הזדמנות מצוינת להתחיל שיחה ולגלות יחד!"
                variant="romantic"
              />
            )}

            <div className="mt-8 space-y-6">
              <h4 className="text-xl font-bold text-gray-800 flex items-center gap-3">
                <Baby className="w-6 h-6 text-pink-500" />
                החזון למשפחה
              </h4>
              
              <div className="grid grid-cols-1 sm:grid-cols-2 gap-5">
                {profile.maritalStatus && ["divorced", "widowed", "annulled"].includes(profile.maritalStatus) && (
                  <DetailItem
                    icon={Baby}
                    label="ילדים מקשר קודם"
                    value={formatBooleanPreference(
                      profile.hasChildrenFromPrevious, 
                      "יש ילדים יקרים", 
                      "אין ילדים", 
                      "נגלה יחד"
                    ).label}
                    variant="elegant"
                  />
                )}

                {(profile.preferredAgeMin || profile.preferredAgeMax) && (
                  <DetailItem
                    icon={Calendar}
                    label="הגיל המועדף עליי"
                    value={`${profile.preferredAgeMin || '?'} - ${profile.preferredAgeMax || '?'} שנים`}
                    variant="highlight"
                  />
                )}

                {(profile.preferredHeightMin || profile.preferredHeightMax) && (
                  <DetailItem
                    icon={User}
                    label="הגובה המועדף"
                    value={`${profile.preferredHeightMin || '?'} - ${profile.preferredHeightMax || '?'} ס״מ`}
                    variant="highlight"
                  />
                )}

                <DetailItem
                  icon={Heart}
                  label="שמירת נגיעה בזוגיות"
                  value={formatStringBooleanPreference(profile.preferredShomerNegiah).label}
                  variant="elegant"
                />
              </div>
            </div>
          </SectionCard>
        </TabsContent>

        {/* **בעיה 2: פתרון** */}
        {/* החלפנו את הלוגיקה כדי להציג הודעה אחת כללית אם אין העדפות כלל */}
        <TabsContent value="search" className="mt-0 space-y-6">
          <div className="text-center mb-8">
            <h2 className={cn(
              "text-3xl font-bold mb-4",
              "bg-gradient-to-r from-blue-600 to-cyan-600 bg-clip-text text-transparent"
            )}>
              מה {profile.user?.firstName || "המועמד"} מחפש/ת בבן/בת הזוג
            </h2>
            <p className="text-gray-600 text-lg">התכונות והערכים שחשובים בהתאמה</p>
          </div>

          {hasAnyPreferences ? (
            <div className="space-y-8">
              {renderPreferenceBadges(
                "סטטוסים משפחתיים מועדפים",
                Heart,
                profile.preferredMaritalStatuses,
                maritalStatusMap,
                THEME.colors.primary.main
              )}

              {renderPreferenceBadges(
                "רמות דתיות מועדפות",
                BookMarked,
                profile.preferredReligiousLevels,
                religiousLevelMap,
                THEME.colors.secondary.peach
              )}

              {renderPreferenceBadges(
                "רמות השכלה מועדפות",
                GraduationCap,
                profile.preferredEducation,
                educationLevelMap,
                THEME.colors.secondary.sky
              )}
              
              {/* החלקים הבאים יוצגו רק אם יש להם ערכים */}
              {profile.preferredOccupations && profile.preferredOccupations.length > 0 && renderPreferenceBadges(
                "תחומי עיסוק מועדפים",
                Briefcase,
                profile.preferredOccupations,
                {},
                THEME.colors.secondary.sage
              )}

              {profile.preferredLocations && profile.preferredLocations.length > 0 && renderPreferenceBadges(
                "מקומות מגורים מועדפים",
                MapPin,
                profile.preferredLocations,
                {},
                THEME.colors.secondary.peach
              )}
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                {profile.preferredCharacterTraits && profile.preferredCharacterTraits.length > 0 && (
                  <SectionCard
                    title="תכונות אופי מועדפות"
                    subtitle="איך אני רואה את בן/בת הזוג שלי"
                    icon={Sparkles}
                    variant="elegant"
                    gradient={THEME.colors.primary.light}
                  >
                    <div className="flex flex-wrap gap-3">
                      {profile.preferredCharacterTraits.map(trait => {
                        const traitData = formatEnumValue(trait, characterTraitMap, trait);
                        return (
                          <Badge
                            key={trait}
                            className={cn(
                              "flex items-center gap-2 px-3 py-2 font-semibold text-sm",
                              "bg-gradient-to-r from-purple-100 to-violet-100 text-purple-800",
                              "border border-purple-200 rounded-full",
                              THEME.shadows.soft
                            )}
                          >
                            <traitData.icon className={cn("w-4 h-4", traitData.color)} />
                            {traitData.label}
                          </Badge>
                        );
                      })}
                    </div>
                  </SectionCard>
                )}

                {profile.preferredHobbies && profile.preferredHobbies.length > 0 && (
                  <SectionCard
                    title="תחביבים מועדפים"
                    subtitle="מה נעשה יחד בזמן הפנוי"
                    icon={Heart}
                    variant="elegant"
                    gradient={THEME.colors.secondary.sage}
                  >
                    <div className="flex flex-wrap gap-3">
                      {profile.preferredHobbies.map(hobby => {
                        const hobbyData = formatEnumValue(hobby, hobbiesMap, hobby);
                        return (
                          <Badge
                            key={hobby}
                            className={cn(
                              "flex items-center gap-2 px-3 py-2 font-semibold text-sm",
                              "bg-gradient-to-r from-emerald-100 to-green-100 text-emerald-800",
                              "border border-emerald-200 rounded-full",
                              THEME.shadows.soft
                            )}
                          >
                            <hobbyData.icon className={cn("w-4 h-4", hobbyData.color)} />
                            {hobbyData.label}
                          </Badge>
                        );
                      })}
                    </div>
                  </SectionCard>
                )}
              </div>
            </div>
          ) : (
            <EmptyState
              icon={Compass}
              title="פתוח/ה לכל האפשרויות"
              description="הלב פתוח להכיר אדם מיוחד, ללא דרישות מוקדמות. יש כאן מקום לגילויים מרגשים יחד."
              variant="discovery"
            />
          )}
        </TabsContent>

        {/* Deeper Tab - Questionnaire Answers */}
        {hasDisplayableQuestionnaireAnswers && (
          <TabsContent value="deeper" className="mt-0 space-y-6">
            <div className="text-center mb-8">
              <h2 className={cn(
                "text-3xl font-bold mb-4",
                "bg-gradient-to-r from-amber-600 to-orange-600 bg-clip-text text-transparent"
              )}>
                התשובות העמוקות מהלב של {profile.user?.firstName || "המועמד"}
              </h2>
              <p className="text-gray-600 text-lg">מחשבות אישיות ותובנות על החיים והאהבה</p>
            </div>

            {Object.entries(WORLDS).map(([worldKey, worldConfig]) => {
              const answersForWorld = (questionnaire?.formattedAnswers?.[worldKey as keyof typeof questionnaire.formattedAnswers] ?? [])
                .filter(answer => answer.isVisible !== false && (answer.answer || answer.displayText));

              if (answersForWorld.length === 0) return null;

              return (
                <SectionCard
                  key={worldKey}
                  title={worldConfig.label}
                  subtitle={worldConfig.description}
                  icon={worldConfig.icon}
                  variant="elegant"
                  gradient={worldConfig.gradient}
                >
                  <div className="grid grid-cols-1 gap-6">
                    {answersForWorld.map(answer => (
                      <QuestionnaireItem
                        key={answer.questionId}
                        answer={answer}
                        worldColor={worldConfig.accentColor}
                        worldGradient={worldConfig.gradient}
                      />
                    ))}
                  </div>
                </SectionCard>
              );
            })}
          </TabsContent>
        )}

        {/* Professional Tab - Matchmaker Info */}
        {viewMode === "matchmaker" && (
          <TabsContent value="professional" className="mt-0">
            <div className="text-center mb-8">
              <h2 className={cn(
                "text-3xl font-bold mb-4",
                "bg-gradient-to-r from-indigo-600 to-purple-600 bg-clip-text text-transparent"
              )}>
                מידע מקצועי לשדכן
              </h2>
              <p className="text-gray-600 text-lg">פרטים רגישים וחשובים לתהליך השידוך</p>
            </div>

            <SectionCard
              title="מידע סודי לשדכנים בלבד"
              subtitle="פרטים מקצועיים לתהליך השידוך"
              icon={Lock}
              variant="elegant"
              gradient={THEME.colors.primary.gold}
            >
              <div className={cn(
                "p-6 rounded-2xl border-2 border-amber-300/70",
                `bg-gradient-to-br ${THEME.colors.secondary.peach}`,
                THEME.shadows.elegant
              )}>
                
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
                  <DetailItem
                    icon={Phone}
                    label="העדפת יצירת קשר"
                    value={formatEnumValue(profile.contactPreference, contactPreferenceMap, "נגלה יחד").label}
                    variant="elegant"
                  />

                  <DetailItem
                    icon={Users}
                    label="העדפת מגדר שדכן/ית"
                    value={profile.preferredMatchmakerGender ?
                      (profile.preferredMatchmakerGender === "MALE" ? "שדכן גבר" : "שדכנית אישה") :
                      "אין העדפה מיוחדת"
                    }
                    variant="elegant"
                  />
                </div>

                {profile.matchingNotes && (
                  <div className="mt-6">
                    <h4 className="text-lg font-bold text-amber-700 mb-3 flex items-center gap-2">
                      <Edit3 className="w-5 h-5" />
                      הערות מיוחדות לשדכנים:
                    </h4>
                    <div className={cn(
                      "p-4 rounded-xl border border-amber-200/80",
                      "bg-amber-100/70 shadow-inner"
                    )}>
                      <p className="text-amber-800 whitespace-pre-wrap leading-relaxed font-medium">
                        {profile.matchingNotes}
                      </p>
                    </div>
                  </div>
                )}

                <div className={cn(
                  "mt-6 p-4 rounded-xl border border-indigo-200",
                  "bg-gradient-to-r from-indigo-100 to-purple-100"
                )}>
                  <h4 className="font-bold text-indigo-800 mb-3 flex items-center gap-2">
                    <Lightbulb className="w-5 h-5" />
                    תובנות מקצועיות:
                  </h4>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4 text-indigo-700 text-sm">
                    <div className="flex items-center gap-2">
                      <Calendar className="w-4 h-4" />
                      <span>פרופיל נוצר: {profile.createdAt ? new Date(profile.createdAt).toLocaleDateString('he-IL') : 'לא ידוע'}</span>
                    </div>
                    {profile.lastActive && (
                      <div className="flex items-center gap-2">
                        <Clock className="w-4 h-4" />
                        <span>פעילות אחרונה: {new Date(profile.lastActive).toLocaleDateString('he-IL')}</span>
                      </div>
                    )}
                    <div className="flex items-center gap-2">
                      <CheckCircle className="w-4 h-4" />
                      <span>השלמת פרופיל: {profile.isProfileComplete ? 'מושלם ✅' : 'דורש השלמה ⚠️'}</span>
                    </div>
                    <div className="flex items-center gap-2">
                      <Heart className="w-4 h-4" />
                      <span>סטטוס זמינות: {availability.text}</span>
                    </div>
                  </div>
                </div>
              </div>
            </SectionCard>
          </TabsContent>
        )}
      </div>
    </Tabs>
  );

  // Enhanced Image Gallery for Mobile
  const MobileImageGallery = () => (
    orderedImages.length > 0 && (
      <div className={cn(
        "px-4 pt-4 pb-3",
        `bg-gradient-to-r ${THEME.colors.neutral.warm}`
      )}>
        <div className="text-center mb-4">
          <h3 className="text-lg font-bold text-gray-800 mb-1 flex items-center justify-center gap-2">
            <Camera className="w-5 h-5 text-rose-500" />
            הגלריה של {profile.user?.firstName || "המועמד"}
          </h3>
          <p className="text-sm text-gray-600">לחץ על תמונה להגדלה</p>
        </div>
        <ScrollArea dir="rtl" className="w-full whitespace-nowrap">
          <div className="flex gap-4 pb-3">
            {orderedImages.map((image, idx) => (
              <div
                key={image.id}
                className={cn(
                  "relative w-36 h-48 flex-shrink-0 rounded-2xl overflow-hidden cursor-pointer group",
                  "border-3 border-white shadow-lg hover:shadow-xl transition-all duration-300 hover:scale-105"
                )}
                onClick={() => handleOpenImageDialog(image)}
              >
                <Image
                  src={image.url}
                  alt={`תמונה מדהימה ${idx + 1}`}
                  fill
                  className="object-cover transition-transform duration-500 group-hover:scale-110"
                  sizes="144px"
                />
                <div className="absolute inset-0 bg-gradient-to-t from-black/60 via-transparent to-transparent"></div>

                {image.isMain && (
                  <Badge className={cn(
                    "absolute top-2 right-2 text-[10px] font-bold gap-1 px-2 py-1",
                    "bg-gradient-to-r from-yellow-400 to-amber-500 text-black",
                    THEME.shadows.warm
                  )}>
                    <Star className="w-2.5 h-2.5 fill-current" />
                    ראשי
                  </Badge>
                )}

                <div className="absolute bottom-2 left-2 right-2 text-center">
                  <p className="text-white text-xs font-medium drop-shadow-lg">
                    תמונה {idx + 1}
                  </p>
                </div>
              </div>
            ))}
          </div>
          <ScrollBar orientation="horizontal" />
        </ScrollArea>
      </div>
    )
  );

  // Mobile Header with Enhanced Toggle
  const MobileHeader = () => (
    <div className={cn(
      "p-3 flex-shrink-0 flex justify-center items-center border-b border-rose-200/50",
      `bg-gradient-to-r ${THEME.colors.neutral.warm}`,
      "sticky top-0 z-30 backdrop-blur-md"
    )}>
      <ToggleGroup
        type="single"
        value={mobileViewLayout}
        onValueChange={(value: 'focus' | 'detailed') => { if (value) setMobileViewLayout(value); }}
        className={cn(
          "bg-white/95 backdrop-blur-sm rounded-2xl border border-rose-200/50 p-1",
          THEME.shadows.soft
        )}
      >
        <ToggleGroupItem
          value="focus"
          aria-label="Focus view"
          className={cn(
            "rounded-xl px-4 py-2 transition-all duration-300",
            "data-[state=on]:bg-gradient-to-r data-[state=on]:from-rose-500 data-[state=on]:to-pink-500",
            "data-[state=on]:text-white data-[state=on]:shadow-md"
          )}
        >
          <Heart className="h-4 w-4" />
          <span className="mr-2 text-sm font-medium">היכרות</span>
        </ToggleGroupItem>
        <ToggleGroupItem
          value="detailed"
          aria-label="Detailed view"
          className={cn(
            "rounded-xl px-4 py-2 transition-all duration-300",
            "data-[state=on]:bg-gradient-to-r data-[state=on]:from-purple-500 data-[state=on]:to-indigo-500",
            "data-[state=on]:text-white data-[state=on]:shadow-md"
          )}
        >
          <FileText className="h-4 w-4" />
          <span className="mr-2 text-sm font-medium">מפורט</span>
        </ToggleGroupItem>
      </ToggleGroup>
    </div>
  );

  // Enhanced Mobile Layouts
  const DetailedMobileLayout = () => (
    <div className="flex-1 min-h-0 overflow-y-auto">
      <ProfileHeader
        profile={profile}
        age={age}
        mainImageToDisplay={mainImageToDisplay}
        availability={availability}
        viewMode={viewMode}
        onSuggestClick={() => setIsSuggestDialogOpen(true)}
        isMobile={true}
          selectedPalette={selectedPalette}
      />
      <MobileImageGallery />
      <div className={cn("p-4", `bg-gradient-to-br ${THEME.colors.neutral.cool}`)}>
        <MainContentTabs />
      </div>
    </div>
  );

  const FocusMobileLayout = () => (
    <div className="flex-1 min-h-0 overflow-y-auto">
      <ProfileHeader
        profile={profile}
        age={age}
        mainImageToDisplay={mainImageToDisplay}
        availability={availability}
        viewMode={viewMode}
        onSuggestClick={() => setIsSuggestDialogOpen(true)}
        isMobile={true}
          selectedPalette={selectedPalette}
      />
      <MobileImageGallery />

      <div className={cn("p-4 space-y-6", `bg-gradient-to-br ${THEME.colors.neutral.warm}`)}>
        
        {profile.about ? (
          <SectionCard 
            title="קצת עליי" 
            icon={Heart} 
            variant="romantic"
            gradient={THEME.colors.primary.main}
          >
            <div className={cn(
              "p-4 rounded-xl border border-rose-200/50",
              `bg-gradient-to-r ${THEME.colors.neutral.warm}`
            )}>
              <p className="text-gray-800 leading-relaxed italic font-medium">
                <Quote className="w-4 h-4 inline ml-1 text-rose-400" />
                {profile.about}
                <Quote className="w-4 h-4 inline mr-1 text-rose-400 transform rotate-180" />
              </p>
            </div>
          </SectionCard>
        ) : (
          <SectionCard 
            title="הסיפור שלי" 
            icon={Telescope} 
            variant="romantic"
          >
            <EmptyState
              icon={Telescope}
              title="יש כאן הרבה לגלות!"
              description="הסיפור האישי מחכה להיכתב יחד איתך..."
              variant="romantic"
            />
          </SectionCard>
        )}

        <SectionCard 
          title="תמצית מהירה" 
          icon={Zap} 
          variant="elegant"
          gradient={THEME.colors.primary.gold}
        >
          <div className="grid grid-cols-2 gap-4">
            <DetailItem
              icon={BookMarked}
              label="השקפה"
              value={formatEnumValue(profile.religiousLevel, religiousLevelMap).label}
              variant="elegant"
              size="sm"
            />
            <DetailItem
              icon={Heart}
              label="שמירת נגיעה"
              value={formatBooleanPreference(profile.shomerNegiah).label}
              variant="elegant"
              size="sm"
            />
            <DetailItem
              icon={Briefcase}
              label="עיסוק"
              value={profile.occupation || "נגלה יחד"}
              variant="elegant"
              size="sm"
            />
            <DetailItem
              icon={GraduationCap}
              label="השכלה"
              value={formatEnumValue(profile.educationLevel, educationLevelMap).label}
              variant="elegant"
              size="sm"
            />
          </div>
        </SectionCard>

        {(profile.profileCharacterTraits?.length > 0 || profile.profileHobbies?.length > 0) && (
          <SectionCard 
            title="מה מיוחד בי" 
            icon={Sparkles} 
            variant="romantic"
            gradient={THEME.colors.primary.romantic}
          >
            <div className="space-y-5">
              {profile.profileCharacterTraits?.length > 0 && (
                <div>
                  <h4 className="text-sm font-bold text-purple-700 mb-3 flex items-center gap-2">
                    <Sparkles className="w-4 h-4" />
                    התכונות שלי:
                  </h4>
                  <div className="flex flex-wrap gap-2">
                    {profile.profileCharacterTraits.slice(0, 4).map(trait => {
                      const traitData = formatEnumValue(trait, characterTraitMap, trait);
                      return (
                        <Badge
                          key={trait}
                          className={cn(
                            "flex items-center gap-1 px-3 py-1 text-xs font-semibold",
                            "bg-gradient-to-r from-purple-100 to-violet-100 text-purple-800",
                            "border border-purple-200 rounded-full"
                          )}
                        >
                          <traitData.icon className="w-3 h-3" />
                          {traitData.label}
                        </Badge>
                      );
                    })}
                  </div>
                </div>
              )}

              {profile.profileHobbies?.length > 0 && (
                <div>
                  <h4 className="text-sm font-bold text-emerald-700 mb-3 flex items-center gap-2">
                    <Heart className="w-4 h-4" />
                    מה אני אוהב/ת:
                  </h4>
                  <div className="flex flex-wrap gap-2">
                    {profile.profileHobbies.slice(0, 4).map(hobby => {
                      const hobbyData = formatEnumValue(hobby, hobbiesMap, hobby);
                      return (
                        <Badge
                          key={hobby}
                          className={cn(
                            "flex items-center gap-1 px-3 py-1 text-xs font-semibold",
                            "bg-gradient-to-r from-emerald-100 to-green-100 text-emerald-800",
                            "border border-emerald-200 rounded-full"
                          )}
                        >
                          <hobbyData.icon className="w-3 h-3" />
                          {hobbyData.label}
                        </Badge>
                      );
                    })}
                  </div>
                </div>
              )}
            </div>
          </SectionCard>
        )}

        <SectionCard 
          title="מה אני מחפש/ת" 
          icon={Target} 
          variant="highlight"
          gradient={THEME.colors.secondary.sky}
        >
          {profile.matchingNotes ? (
            <div className={cn(
              "p-4 rounded-xl border border-blue-200/50",
              "bg-gradient-to-r from-blue-50 to-cyan-50"
            )}>
              <p className="text-blue-700 leading-relaxed italic font-medium">
                <Quote className="w-4 h-4 inline ml-1 text-blue-400" />
                {profile.matchingNotes}
                <Quote className="w-4 h-4 inline mr-1 text-blue-400 transform rotate-180" />
              </p>
            </div>
          ) : (
            <EmptyState
              icon={Heart}
              title="החלום שלי לזוגיות עדיין נכתב..."
              description="אבל בטוח שנגלה יחד מה מתאים לנו!"
              variant="adventure"
            />
          )}

          {(profile.preferredAgeMin || profile.preferredAgeMax) && (
            <div className="mt-5">
              <DetailItem
                icon={Calendar}
                label="טווח גילאים מועדף"
                value={`${profile.preferredAgeMin || '?'} - ${profile.preferredAgeMax || '?'} שנים`}
                variant="elegant"
                size="sm"
              />
            </div>
          )}
        </SectionCard>

        <div className={cn(
          "text-center p-6 rounded-2xl text-white",
          `bg-gradient-to-r ${THEME.colors.primary.main}`,
          THEME.shadows.elegant
        )}>
          <h3 className="text-xl font-bold mb-3">רוצים לדעת עוד?</h3>
          <p className="mb-4 opacity-90">עוד המון דברים מעניינים מחכים לגילוי...</p>
          <Button
            onClick={() => setMobileViewLayout('detailed')}
            className={cn(
              "bg-white text-gray-600 hover:bg-gray-50 font-bold px-6 py-3 rounded-full",
              THEME.shadows.warm
            )}
          >
            <Eye className="w-5 h-5 ml-2" />
            בואו נכיר לעומק
          </Button>
        </div>
      </div>
    </div>
  );

  if (!isClient) {
    return (
      <Card dir="rtl" className={cn(
        "w-full bg-white shadow-2xl rounded-2xl overflow-hidden border-0 flex flex-col h-full",
        className
      )}>
        <div className={cn(
          "p-6 border-b border-gray-200/80",
          `bg-gradient-to-r ${THEME.colors.neutral.warm}`
        )}>
          <div className="flex flex-col sm:flex-row items-center sm:items-start gap-6">
            <Skeleton className="h-36 w-36 rounded-full flex-shrink-0" />
            <div className="flex-grow w-full space-y-4">
              <Skeleton className="h-12 w-3/4" />
              <Skeleton className="h-6 w-1/2" />
              <div className="grid grid-cols-2 sm:grid-cols-3 gap-4 mt-4">
                <Skeleton className="h-12 w-full rounded-xl" />
                <Skeleton className="h-12 w-full rounded-xl" />
                <Skeleton className="h-12 w-full rounded-xl" />
              </div>
            </div>
          </div>
        </div>
        <div className="p-6 flex-grow">
          <div className="space-y-4">
            <Skeleton className="h-8 w-full rounded-xl" />
            <Skeleton className="h-32 w-full rounded-xl" />
            <Skeleton className="h-24 w-full rounded-xl" />
          </div>
        </div>
      </Card>
    );
  }

  return (
    <TooltipProvider>
      <Card
        dir="rtl"
        id="profile-card-container"
        className={cn(
          "w-full shadow-2xl rounded-2xl overflow-hidden border-0 flex flex-col max-h-[calc(100vh-2rem)] h-full relative",
          `bg-gradient-to-br ${THEME.colors.neutral.elegant}`,
          THEME.shadows.elegant,
          className
        )}
      >
        <Tooltip>
            <TooltipTrigger asChild>
                <Button 
                    variant="ghost" 
                    size="icon" 
                    className="absolute top-2 right-2 z-50 text-gray-500 hover:text-gray-800 hover:bg-white/50 rounded-full"
                    onClick={handleToggleFullscreen}
                >
                    {isFullscreen ? <Minimize className="w-5 h-5" /> : <Maximize className="w-5 h-5" />}
                </Button>
            </TooltipTrigger>
            <TooltipContent>
                <p>{isFullscreen ? 'צא ממסך מלא' : 'הצג במסך מלא'}</p>
            </TooltipContent>
        </Tooltip>

        {isDesktop ? (
          <ResizablePanelGroup direction="horizontal" dir="rtl" className="flex-grow min-h-0">
            <ResizablePanel defaultSize={60} minSize={40} className="min-w-0 flex flex-col">
              <ProfileHeader
                profile={profile}
                age={age}
                mainImageToDisplay={mainImageToDisplay}
                availability={availability}
                viewMode={viewMode}
                onSuggestClick={() => setIsSuggestDialogOpen(true)}
                selectedPalette={selectedPalette}
              />
              <ScrollArea className="flex-grow min-h-0">
                <div className="p-6">
                  <MainContentTabs />
                </div>
              </ScrollArea>
            </ResizablePanel>

            <ResizableHandle withHandle className={cn(
              "bg-gradient-to-b from-rose-200 to-pink-200 hover:from-rose-300 hover:to-pink-300",
              "transition-all duration-300"
            )} />

            <ResizablePanel defaultSize={40} minSize={25} className="min-w-0 flex flex-col">
              <ScrollArea className="flex-grow min-h-0">
                <div className="p-6 space-y-6">
                  
                  <SectionCard
                    title="הגלריה האישית"
                    subtitle="התמונות שמספרות את הסיפור"
                    icon={Camera}
                    variant="romantic"
                    gradient={THEME.colors.primary.rose}
                  >
                    {orderedImages.length > 0 ? (
                      <div className="space-y-4">
                        <div
                          className={cn(
                            "relative aspect-video rounded-2xl overflow-hidden cursor-pointer group",
                            "border-3 border-white shadow-lg hover:shadow-xl transition-all duration-300"
                          )}
                          onClick={() => handleOpenImageDialog(orderedImages[0])}
                        >
                          <Image
                            src={orderedImages[0].url}
                            alt="תמונה ראשית מדהימה"
                            fill
                            className="object-cover transition-transform duration-500 group-hover:scale-105"
                            sizes="35vw"
                            priority
                          />
                          <div className="absolute inset-0 bg-gradient-to-t from-black/60 via-transparent to-transparent opacity-0 group-hover:opacity-100 transition-opacity flex items-center justify-center">
                            <div className="text-center text-white">
                              <Eye className="w-8 h-8 mx-auto mb-2" />
                              <p className="font-bold">לחץ להגדלה</p>
                            </div>
                          </div>
                        </div>

                        {orderedImages.length > 1 && (
                          <div className="grid grid-cols-2 sm:grid-cols-3 gap-3">
                            {orderedImages.slice(1, 7).map(img => (
                              <div
                                key={img.id}
                                className={cn(
                                  "relative aspect-square rounded-xl overflow-hidden cursor-pointer",
                                  "border-2 border-transparent hover:border-rose-400 transition-all duration-300",
                                  "shadow-md hover:shadow-lg"
                                )}
                                onClick={() => handleOpenImageDialog(img)}
                              >
                                <Image
                                  src={img.url}
                                  alt="תמונת פרופיל נוספת"
                                  fill
                                  className="object-cover hover:scale-110 transition-transform duration-300"
                                  sizes="15vw"
                                />
                              </div>
                            ))}
                          </div>
                        )}
                      </div>
                    ) : (
                      <EmptyState
                        icon={Camera}
                        title="התמונות בדרך אלינו..."
                        description="הגלריה האישית מחכה להיחשף"
                        variant="romantic"
                      />
                    )}
                  </SectionCard>

                  <SectionCard
                    title="הנקודות החמות"
                    subtitle="מה שחשוב לדעת ברגע הראשון"
                    icon={Flame}
                    variant="highlight"
                    gradient={THEME.colors.primary.gold}
                  >
                    <div className="space-y-4">
                      <DetailItem
                        icon={BookMarked}
                        label="השקפת עולם"
                        value={formatEnumValue(profile.religiousLevel, religiousLevelMap).label}
                        variant="highlight"
                      />
                      <DetailItem
                        icon={Heart}
                        label="שמירת נגיעה"
                        value={formatBooleanPreference(profile.shomerNegiah).label}
                        variant="elegant"
                      />
                      <DetailItem
                        icon={Briefcase}
                        label="התחום המקצועי"
                        value={profile.occupation || "מקצוע מעניין מחכה לגילוי"}
                        variant="elegant"
                      />
                      <DetailItem
                        icon={GraduationCap}
                        label="רמת השכלה"
                        value={formatEnumValue(profile.educationLevel, educationLevelMap).label}
                        variant="elegant"
                      />
                      <DetailItem
                        icon={MapPin}
                        label="מיקום"
                        value={profile.city || "איפה שהלב נמצא"}
                        variant="elegant"
                      />

                      {profile.maritalStatus && ["divorced", "widowed", "annulled"].includes(profile.maritalStatus) && (
                        <DetailItem
                          icon={Baby}
                          label="ילדים מקשר קודם"
                          value={formatBooleanPreference(
                            profile.hasChildrenFromPrevious, 
                            "יש ילדים יקרים", 
                            "אין ילדים", 
                            "נגלה יחד"
                          ).label}
                          variant="elegant"
                        />
                      )}
                    </div>
                  </SectionCard>

                  <SectionCard
                    title="הסיפור שמאחורי הפרופיל"
                    subtitle="מילים מהלב"
                    icon={Quote}
                    variant="romantic"
                    gradient={THEME.colors.primary.romantic}
                  >
                    {profile.about ? (
                      <div className={cn(
                        "p-4 rounded-xl border border-rose-200/50 shadow-inner",
                        `bg-gradient-to-r ${THEME.colors.neutral.warm}`
                      )}>
                        <Quote className="w-6 h-6 text-rose-400 mb-2" />
                        <p className="text-gray-800 leading-relaxed italic font-medium">
                          {profile.about}
                        </p>
                      </div>
                    ) : (
                      <EmptyState
                        icon={Telescope}
                        title="הסיפור מחכה להיכתב..."
                        description="יש כאן אדם מעניין שמחכה לגילוי!"
                        variant="discovery"
                      />
                    )}
                  </SectionCard>

                  <SectionCard
                    title="החלום לזוגיות"
                    subtitle="מה מחכה למי שיבוא"
                    icon={Target}
                    variant="highlight"
                    gradient={THEME.colors.secondary.sky}
                  >
                    {profile.matchingNotes ? (
                      <div className={cn(
                        "p-4 rounded-xl border border-blue-200/50 shadow-inner",
                        "bg-gradient-to-r from-blue-50 to-cyan-50"
                      )}>
                        <Heart className="w-6 h-6 text-blue-400 mb-2" />
                        <p className="text-blue-700 leading-relaxed italic font-medium">
                          {profile.matchingNotes}
                        </p>
                      </div>
                    ) : (
                      <EmptyState
                        icon={Heart}
                        title="החלום עדיין לא נכתב..."
                        description="אבל בטוח שזה יהיה משהו יפה!"
                        variant="adventure"
                      />
                    )}

                    <div className="mt-4 space-y-3">
                      {(profile.preferredAgeMin || profile.preferredAgeMax) && (
                        <DetailItem
                          icon={Calendar}
                          label="טווח גילאים מועדף"
                          value={`${profile.preferredAgeMin || '?'} - ${profile.preferredAgeMax || '?'} שנים`}
                          variant="elegant"
                        />
                      )}

                      {profile.preferredReligiousLevels && profile.preferredReligiousLevels.length > 0 && (
                        <div>
                          <p className="text-sm font-bold text-indigo-700 mb-2 flex items-center gap-2">
                            <BookMarked className="w-4 h-4" />
                            רמות דתיות מועדפות:
                          </p>
                          <div className="flex flex-wrap gap-2">
                            {profile.preferredReligiousLevels.slice(0, 3).map(level => {
                              const levelData = formatEnumValue(level, religiousLevelMap, level);
                              return (
                                <Badge
                                  key={level}
                                  className={cn(
                                    "flex items-center gap-1 text-xs px-2 py-1 font-semibold rounded-full",
                                    "bg-gradient-to-r from-indigo-100 to-purple-100 text-indigo-800",
                                    "border border-indigo-200"
                                  )}
                                >
                                  <levelData.icon className="w-3 h-3" />
                                  {levelData.label}
                                </Badge>
                              );
                            })}
                          </div>
                        </div>
                      )}
                    </div>
                  </SectionCard>
                </div>
              </ScrollArea>
            </ResizablePanel>
          </ResizablePanelGroup>
        ) : (
          <div className="flex flex-col h-full w-full">
            <MobileHeader />
            {mobileViewLayout === 'detailed' ? <DetailedMobileLayout /> : <FocusMobileLayout />}
          </div>
        )}

        {selectedImageForDialog && (
          <Dialog open={!!selectedImageForDialog} onOpenChange={isOpen => !isOpen && handleCloseImageDialog()}>
            <DialogContent className={cn(
              "max-w-5xl w-[95vw] h-[90vh] p-0 border-none rounded-2xl flex flex-col",
              "bg-black/95 backdrop-blur-md"
            )} dir="rtl">
              <DialogHeader className={cn(
                "p-4 text-white flex-row justify-between items-center border-b border-gray-700/50",
                "bg-black/80 backdrop-blur-sm"
              )}>
                <DialogTitle className="text-lg font-bold flex items-center gap-2">
                  <Camera className="w-5 h-5" />
                  תמונה {currentDialogImageIndex + 1} מתוך {orderedImages.length}
                </DialogTitle>
                <Button
                  variant="ghost"
                  size="icon"
                  className="text-gray-300 hover:text-white hover:bg-white/10 rounded-full transition-all"
                  onClick={handleCloseImageDialog}
                >
                  <X className="w-5 h-5" />
                </Button>
              </DialogHeader>

              <div className="relative flex-1 w-full min-h-0">
                <Image
                  key={selectedImageForDialog.id}
                  src={selectedImageForDialog.url}
                  alt={`תמונה מוגדלת ${currentDialogImageIndex + 1}`}
                  fill
                  className="object-contain"
                  sizes="90vw"
                  priority
                />

                {orderedImages.length > 1 && (
                  <>
                    <Button
                      variant="ghost"
                      size="icon"
                      className={cn(
                        "absolute right-4 top-1/2 -translate-y-1/2 h-14 w-14 rounded-full",
                        "bg-black/50 hover:bg-black/70 text-white border border-white/20",
                        "backdrop-blur-sm transition-all hover:scale-110"
                      )}
                      onClick={() => handleDialogNav("prev")}
                    >
                      <ChevronRight className="h-6 w-6" />
                    </Button>
                    <Button
                      variant="ghost"
                      size="icon"
                      className={cn(
                        "absolute left-4 top-1/2 -translate-y-1/2 h-14 w-14 rounded-full",
                        "bg-black/50 hover:bg-black/70 text-white border border-white/20",
                        "backdrop-blur-sm transition-all hover:scale-110"
                      )}
                      onClick={() => handleDialogNav("next")}
                    >
                      <ChevronLeft className="h-6 w-6" />
                    </Button>
                  </>
                )}
              </div>

              {orderedImages.length > 1 && (
                <DialogFooter className="border-t border-gray-700/50 bg-black/80 backdrop-blur-sm p-0">
                  <ScrollArea dir="rtl" className="w-full">
                    <div className="flex gap-2 p-3 justify-center">
                      {orderedImages.map(img => (
                        <div
                          key={img.id}
                          className={cn(
                            "relative flex-shrink-0 w-16 h-16 rounded-lg overflow-hidden cursor-pointer",
                            "border-2 transition-all hover:scale-105",
                            img.id === selectedImageForDialog.id
                              ? "border-rose-400 ring-2 ring-rose-400/50"
                              : "border-white/20 opacity-60 hover:opacity-100 hover:border-white/40"
                          )}
                          onClick={() => setSelectedImageForDialog(img)}
                        >
                          <Image
                            src={img.url}
                            alt="תמונה קטנה"
                            fill
                            className="object-cover"
                            sizes="64px"
                          />
                        </div>
                      ))}
                    </div>
                    <ScrollBar orientation="horizontal" />
                  </ScrollArea>
                </DialogFooter>
              )}
            </DialogContent>
          </Dialog>
        )}

        {viewMode === 'matchmaker' && candidate && (
          <NewSuggestionForm
            isOpen={isSuggestDialogOpen}
            onClose={() => setIsSuggestDialogOpen(false)}
            candidates={allCandidates}
            selectedCandidate={candidate}
            onSubmit={handleCreateSuggestion}
          />
        )}
      </Card>
    </TooltipProvider>
  );
};

export default ProfileCard;
--- End of Content for ProfileCard.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\user\Desktop\matchpoint\shidduch-system\src\app\components\profile\constants.ts
--------------------------------------------------------------------------------
Content:
// src/components/shared/profile/constants.ts
import { Heart, User, Users, Scroll, GraduationCap, MapPin } from "lucide-react";

export const WORLDS = {
  values: {
    key: "values",
    title: "ערכים ואמונות",
    icon: Heart,
    color: "text-pink-500",
    bgColor: "bg-pink-50",
    borderColor: "border-pink-200",
  },
  personality: {
    key: "personality",
    title: "אישיות",
    icon: User,
    color: "text-blue-500",
    bgColor: "bg-blue-50",
    borderColor: "border-blue-200",
  },
  relationship: {
    key: "relationship",
    title: "זוגיות ומשפחה",
    icon: Users,
    color: "text-purple-500",
    bgColor: "bg-purple-50",
    borderColor: "border-purple-200",
  },
  religion: {
    key: "religion",
    title: "דת ומסורת",
    icon: Scroll,
    color: "text-indigo-500",
    bgColor: "bg-indigo-50",
    borderColor: "border-indigo-200",
  },
  partner: {
    key: "partner",
    title: "העדפות בן/בת זוג",
    icon: Heart,
    color: "text-red-500",
    bgColor: "bg-red-50",
    borderColor: "border-red-200",
  },
} as const;

export const RELIGIOUS_LEVELS = [
  "חרדי",
  "חרדי מודרני",
  "דתי",
  "דתי-לייט",
  "מסורתי"
] as const;

export const MARITAL_STATUS = [
  "single",
  "divorced",
  "widowed"
] as const;

export const EDUCATION_LEVELS = [
  "תיכונית",
  "על תיכונית",
  "אקדמית",
  "תורנית"
] as const;

export const OCCUPATION_TYPES = [
  "עובד/ת",
  "סטודנט/ית",
  "אברך/אברכית",
  "עצמאי/ת"
] as const;

export const LOCATIONS = [
  "צפון",
  "מרכז",
  "דרום",
  "ירושלים",
  "יהודה ושומרון"
] as const;

export const PROFILE_SECTIONS = {
  BASIC_INFO: {
    title: "פרטים אישיים",
    icon: User,
  },
  EDUCATION: {
    title: "השכלה ותעסוקה",
    icon: GraduationCap,
  },
  LOCATION: {
    title: "מיקום",
    icon: MapPin,
  },
  FAMILY: {
    title: "מידע משפחתי",
    icon: Users,
  },
  PREFERENCES: {
    title: "העדפות",
    icon: Heart,
  },
} as const;

export const COMMUNICATION_STYLES = [
  "ישיר",
  "עקיף",
  "דיפלומטי"
] as const;

export const STRESS_MANAGEMENT = [
  "רגוע",
  "לחוץ",
  "משתנה"
] as const;

export const CONTACT_PREFERENCES = [
  { value: "direct", label: "ישירות" },
  { value: "matchmaker", label: "דרך השדכן/ית" },
  { value: "both", label: "שתי האפשרויות" }
] as const;

// הגדרות עבור הוולידציה
export const VALIDATION_RULES = {
  AGE: {
    MIN: 18,
    MAX: 99
  },
  HEIGHT: {
    MIN: 100,
    MAX: 250
  },
  NAME: {
    MIN_LENGTH: 2,
    MAX_LENGTH: 50
  }
} as const;
--- End of Content for constants.ts ---

--------------------------------------------------------------------------------
File: C:\Users\user\Desktop\matchpoint\shidduch-system\src\app\components\profile\index.ts
--------------------------------------------------------------------------------
Content:
// src/components/shared/profile/index.ts

// Main Components
export { default as ProfileCard } from './ProfileCard';

// Sections
export { default as PhotosSection } from './sections/PhotosSection';
export { default as PreferencesSection } from './sections/PreferencesSection';
export { default as ProfileSection } from './sections/ProfileSection';
export { default as QuestionnaireResponsesSection } from './sections/QuestionnaireResponsesSection';

// Elements
export { default as StatsCard } from './elements/StatsCard';
export { default as VisibilityControl } from './elements/VisibilityControl';
export { default as MinimalCard } from './elements/MinimalCard';

// Types
export * from './types/profile';
export * from './types/questionnaire';
--- End of Content for index.ts ---

--------------------------------------------------------------------------------
File: C:\Users\user\Desktop\matchpoint\shidduch-system\src\app\components\profile\profile_contents.txt
--------------------------------------------------------------------------------
[This is the output log file itself. Content not included.]

--------------------------------------------------------------------------------
File: C:\Users\user\Desktop\matchpoint\shidduch-system\src\app\components\profile\utils.ts
--------------------------------------------------------------------------------
Content:
// src/components/shared/profile/utils.ts
import type { UserProfile } from "@/types/next-auth";

export const calculateAge = (birthDate: Date): number => {
  const today = new Date();
  const birth = new Date(birthDate);
  let age = today.getFullYear() - birth.getFullYear();
  const monthDiff = today.getMonth() - birth.getMonth();
  
  if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birth.getDate())) {
    age--;
  }
  return age;
};

export const formatProfileData = (profile: UserProfile) => {
  return {
    ...profile,
    age: calculateAge(new Date(profile.birthDate)),
    // Add any other formatting needed
  };
};

export const validateProfileData = (data: Partial<UserProfile>) => {
  const errors: Record<string, string> = {};
  
  // Add validation rules as needed
  if (data.height && (data.height < 100 || data.height > 250)) {
    errors.height = "גובה חייב להיות בין 100 ל-250 ס\"מ";
  }
  
  return {
    isValid: Object.keys(errors).length === 0,
    errors
  };
};
--- End of Content for utils.ts ---

================================================================================
Directory: C:\Users\user\Desktop\matchpoint\shidduch-system\src\app\components\profile\elements
================================================================================

--------------------------------------------------------------------------------
File: C:\Users\user\Desktop\matchpoint\shidduch-system\src\app\components\profile\elements\MinimalCard.tsx
--------------------------------------------------------------------------------
Content:
// src/components/shared/profile/elements/MinimalCard.tsx
import React from "react";
import { Card } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { User, MapPin, Scroll, Heart } from "lucide-react";
import Image from "next/image";
import { calculateAge } from "../utils";
import type { UserProfile, UserImage } from "@/types/next-auth";

interface MinimalCardProps {
  profile: UserProfile;
  mainImage?: UserImage;
  onClick?: () => void;
  className?: string;
}

const MinimalCard: React.FC<MinimalCardProps> = ({
  profile,
  mainImage,
  onClick,
  className = "",
}) => {
  const age = calculateAge(new Date(profile.birthDate));

  // Handle cases where profile.user might be undefined
  const userName = profile.user
    ? `${profile.user.firstName} ${profile.user.lastName}`
    : "שם לא זמין"; // "Name not available" in Hebrew

  return (
    <Card
      onClick={onClick}
      className={`relative overflow-hidden cursor-pointer hover:shadow-md transition-shadow ${className}`}
    >
      <div className="flex gap-4 p-4">
        {/* תמונת פרופיל */}
        <div className="relative w-24 h-24 rounded-lg overflow-hidden bg-gray-100">
          {mainImage ? (
            <Image
              src={mainImage.url}
              alt="תמונת פרופיל"
              fill
              className="object-cover"
              sizes="96px"
            />
          ) : (
            <div className="w-full h-full flex items-center justify-center">
              <User className="w-8 h-8 text-gray-400" />
            </div>
          )}
        </div>

        {/* מידע בסיסי */}
        <div className="flex-1 space-y-2">
          <div>
            <h3 className="text-lg font-medium">{userName}</h3>
            <p className="text-sm text-gray-500">{age} שנים</p>
          </div>

          <div className="flex flex-wrap gap-2">
            {profile.city && (
              <Badge variant="secondary" className="flex items-center gap-1">
                <MapPin className="w-3 h-3" />
                {profile.city}
              </Badge>
            )}
            {profile.religiousLevel && (
              <Badge variant="secondary" className="flex items-center gap-1">
                <Scroll className="w-3 h-3" />
                {profile.religiousLevel}
              </Badge>
            )}
          </div>

          {/* סטטוס זמינות */}
          <div className="flex items-center gap-2 text-sm">
            {profile.availabilityStatus === "AVAILABLE" ? (
              <Badge variant="success" className="flex items-center gap-1">
                <Heart className="w-3 h-3" />
                פנוי/ה להצעות
              </Badge>
            ) : (
              <Badge variant="secondary" className="flex items-center gap-1">
                <Heart className="w-3 h-3" />
                בתהליך הכרות
              </Badge>
            )}
          </div>
        </div>
      </div>
    </Card>
  );
};

export default MinimalCard;
--- End of Content for MinimalCard.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\user\Desktop\matchpoint\shidduch-system\src\app\components\profile\elements\StatsCard.tsx
--------------------------------------------------------------------------------
Content:
import React from "react";
import { Card, CardContent } from "@/components/ui/card";
import { Progress } from "@/components/ui/progress";
import { cn } from "@/lib/utils";

interface StatsCardProps {
  /**
   * The icon to display in the card
   */
  icon: React.ElementType;

  /**
   * The title text to display
   */
  title: string;

  /**
   * The main value to display
   */
  value: string | number;

  /**
   * Optional progress value (0-100)
   */
  progress?: number;

  /**
   * Optional trend information
   */
  trend?: {
    value: number;
    label: string;
    isPositive?: boolean;
  };

  /**
   * Visual variant of the card
   */
  variant?: "default" | "success" | "warning" | "destructive";

  /**
   * Additional CSS classes
   */
  className?: string;
}

const StatsCard: React.FC<StatsCardProps> = ({
  icon: Icon,
  title,
  value,
  progress,
  trend,
  variant = "default",
  className,
}) => {
  // Determine variant-specific background color
  const getVariantStyles = () => {
    switch (variant) {
      case "success":
        return "bg-emerald-50 dark:bg-emerald-900/20";
      case "warning":
        return "bg-amber-50 dark:bg-amber-900/20";
      case "destructive":
        return "bg-red-50 dark:bg-red-900/20";
      default:
        return "bg-card";
    }
  };

  // Special handling for availability status
  const isAvailabilityStatus = title === "סטטוס פניות";
  const isAvailable = typeof value === 'string' && value.toLowerCase() === 'available';

  // Render the value with special handling for availability status
  const renderValue = () => {
    if (isAvailabilityStatus) {
      return (
        <div className="mt-1">
          <span className={cn(
            "inline-flex px-3 py-1 rounded-full text-sm font-semibold tracking-wide",
            isAvailable 
              ? "bg-emerald-100 text-emerald-800 dark:bg-emerald-900/30 dark:text-emerald-300"
              : "bg-gray-100 text-gray-800 dark:bg-gray-800 dark:text-gray-200"
          )}>
            {value}
          </span>
        </div>
      );
    }
    return <h3 className="text-2xl font-semibold">{value}</h3>;
  };

  return (
    <Card
      className={cn(
        "hover:shadow-md transition-shadow",
        getVariantStyles(),
        className
      )}
    >
      <CardContent className="p-6">
        {/* Header Section */}
        <div className="flex items-center space-x-4 rtl:space-x-reverse">
          <div className="p-2 bg-primary/10 rounded-full">
            <Icon className="w-6 h-6 text-primary" />
          </div>
          <div className="flex-1 space-y-1">
            <p className="text-sm text-muted-foreground">{title}</p>
            {renderValue()}
          </div>
        </div>

        {/* Progress Bar Section */}
        {progress !== undefined && (
          <div className="mt-4 space-y-2">
            <Progress 
              value={progress} 
              className="h-2"
              aria-label={`${title} progress: ${progress}%`}
            />
            <p className="text-sm text-muted-foreground text-right">
              {progress}%
            </p>
          </div>
        )}

        {/* Trend Section */}
        {trend && (
          <div className="mt-4 flex items-center">
            <span
              className={cn(
                "text-sm font-medium",
                trend.isPositive ? "text-emerald-600" : "text-red-600"
              )}
            >
              {trend.isPositive ? "+" : "-"}
              {trend.value}%
            </span>
            <span className="text-sm text-muted-foreground mr-2">
              {trend.label}
            </span>
          </div>
        )}
      </CardContent>
    </Card>
  );
};

// Default export
export default StatsCard;

// Named exports for specific use cases
export type { StatsCardProps };
--- End of Content for StatsCard.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\user\Desktop\matchpoint\shidduch-system\src\app\components\profile\elements\VisibilityControl.tsx
--------------------------------------------------------------------------------
Content:
import React from "react";
import { Eye, EyeOff } from "lucide-react";
import { Switch } from "@/components/ui/switch";
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip";
import { cn } from "@/lib/utils";

interface VisibilityControlProps {
  /**
   * Current visibility state
   */
  isVisible: boolean;

  /**
   * Callback when visibility changes
   */
  onChange: (isVisible: boolean) => void;

  /**
   * Optional class name for additional styling
   */
  className?: string;

  /**
   * Optional disabled state
   */
  disabled?: boolean;

  /**
   * Optional custom tooltip text
   */
  tooltipText?: {
    visible?: string;
    hidden?: string;
    action?: string;
  };
}

const VisibilityControl: React.FC<VisibilityControlProps> = ({
  isVisible,
  onChange,
  className,
  disabled = false,
  tooltipText = {
    visible: "תשובה זו גלויה למועמדים",
    hidden: "תשובה זו מוסתרת מהמועמדים",
    action: "לחץ כדי",
  },
}) => {
  return (
    <div
      className={cn(
        "flex items-center gap-2 bg-secondary/20 p-2 rounded-md",
        disabled && "opacity-50 cursor-not-allowed",
        className
      )}
    >
      {/* Icon */}
      {isVisible ? (
        <Eye 
          className="h-4 w-4 text-primary" 
          aria-hidden="true"
        />
      ) : (
        <EyeOff 
          className="h-4 w-4 text-muted-foreground" 
          aria-hidden="true"
        />
      )}

      {/* Switch with Tooltip */}
      <TooltipProvider>
        <Tooltip>
          <TooltipTrigger asChild>
            <div className="relative">
              <Switch
                checked={isVisible}
                onCheckedChange={onChange}
                disabled={disabled}
                className={cn(
                  "data-[state=checked]:bg-primary",
                  disabled && "cursor-not-allowed"
                )}
                aria-label={`Toggle visibility: currently ${isVisible ? 'visible' : 'hidden'}`}
              />
              {/* Visually hidden text for screen readers */}
              <span className="sr-only">
                {isVisible ? "הסתר תוכן" : "הצג תוכן"}
              </span>
            </div>
          </TooltipTrigger>
          <TooltipContent 
            side="left" 
            className="max-w-[200px]"
            dir="rtl"
          >
            <p>
              {isVisible ? tooltipText.visible : tooltipText.hidden}
            </p>
            <p className="text-xs text-muted-foreground mt-1">
              {tooltipText.action} {isVisible ? "להסתיר" : "להציג"} תשובה זו
            </p>
          </TooltipContent>
        </Tooltip>
      </TooltipProvider>
    </div>
  );
};

// Default export
export default VisibilityControl;

// Named exports for types
export type { VisibilityControlProps };
--- End of Content for VisibilityControl.tsx ---

================================================================================
Directory: C:\Users\user\Desktop\matchpoint\shidduch-system\src\app\components\profile\sections
================================================================================

--------------------------------------------------------------------------------
File: C:\Users\user\Desktop\matchpoint\shidduch-system\src\app\components\profile\sections\PhotosSection.tsx
--------------------------------------------------------------------------------
Content:

"use client";

import React, { useRef, useState, useEffect, useCallback } from "react"; // Added useCallback
import Image from "next/image";
import { cn } from "@/lib/utils";

// UI Components
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import {
  Dialog,
  DialogContent,
  DialogTitle,
  DialogDescription,
  DialogHeader,
  DialogFooter, // Added DialogFooter
} from "@/components/ui/dialog"; // Removed Card components as we use divs/structure directly now for more control

import { toast } from "sonner";

// Icons
import {
  Camera,
  Star,
  Loader2,
  ChevronLeft,
  ChevronRight,
  Upload,
  Trash2,
  X, // Icon for closing dialog
} from "lucide-react";

// Types
import type { UserImage } from "@/types/next-auth";

interface PhotosSectionProps {
  images: UserImage[];
  isUploading: boolean; // Note: Changed interpretation, this prop seems external loading state, use internal `isProcessing` for actions within component
  disabled?: boolean;
  maxImages?: number;
  onUpload: (file: File) => Promise<void>;
  onSetMain: (imageId: string) => Promise<void>;
  onDelete: (imageId: string) => Promise<void>;
  // Removed style props as per previous fix request and current design goals
}

const PhotosSection: React.FC<PhotosSectionProps> = ({
  images,
  isUploading: isExternallyUploading, // Renamed to avoid confusion with internal processing state
  disabled = false,
  maxImages = 5,
  onUpload,
  onSetMain,
  onDelete,
}) => {
  // Refs
  const fileInputRef = useRef<HTMLInputElement>(null);

  // State
  const [showImageViewer, setShowImageViewer] = useState(false);
  const [selectedViewerIndex, setSelectedViewerIndex] = useState<number | null>(null);
  const [isProcessing, setIsProcessing] = useState(false); // Internal state for actions like delete, set main
  const [deleteConfirmOpen, setDeleteConfirmOpen] = useState(false);
  const [imageToDelete, setImageToDelete] = useState<string | null>(null);
  const [lastUploadedImageId, setLastUploadedImageId] = useState<string | null>(null); // Track ID instead of index

  // Combined Loading State
  const isLoading = isExternallyUploading || isProcessing;

  // Effect to open viewer for newly uploaded image
  useEffect(() => {
    if (lastUploadedImageId) {
      const newIndex = images.findIndex(img => img.id === lastUploadedImageId);
      if (newIndex !== -1) {
          setSelectedViewerIndex(newIndex);
          setShowImageViewer(true);
      }
      setLastUploadedImageId(null); // Reset tracker
    }
  }, [images, lastUploadedImageId]); // Depend on images array as well

  // --- Event Handlers ---

  const handleFileSelect = async (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (!file) return;

    // Basic Validations (already implemented, kept as is)
    const validTypes = ["image/jpeg", "image/png", "image/jpg", "image/webp"]; // Added webp
    if (!validTypes.includes(file.type)) {
      toast.error("סוג קובץ לא חוקי. יש להעלות JPG, PNG, או WEBP.");
      return;
    }
    const maxSize = 5 * 1024 * 1024; // 5MB
    if (file.size > maxSize) {
      toast.error("הקובץ גדול מדי (מקסימום 5MB).");
      return;
    }

    // Prevent multiple uploads
    if (isLoading) return;

    // Use the external onUpload handler
    try {
      // Note: We don't set isProcessing here, assuming isExternallyUploading reflects the upload state
      await onUpload(file);
      // We need the ID of the new image to track it.
      // Assuming onUpload updates the `images` prop via the parent component,
      // we'll rely on the useEffect to find and show the new image.
      // We need a way to get the ID - this might require adjustment in the parent or API response.
      // For now, we'll assume the parent handles setting the ID correctly and updates `images`.
      // A potential workaround is to find the image added (if only one is added)
      // This is brittle. A better approach is if `onUpload` returns the new image ID.
      // Let's simulate getting the last image ID for the effect hook.
      // This requires the parent component to update `images` prop immediately after upload success.
      // const newImage = images[images.length - 1]; // Risky assumption
      // if (newImage) setLastUploadedImageId(newImage.id);

      toast.success("התמונה הועלתה בהצלחה.");

      // Automatically set as main if it's the very first image
      if (images.length === 0) {
        // Need the ID here too. This logic might need to move to the parent
        // or the API should return the ID for immediate use.
        // Assuming the `images` prop updates quickly after onUpload resolves:
        const newImageId = images.find(img => !img.isMain)?.id; // Find the first non-main, likely the new one
        if (newImageId) {
            await handleSetMainImage(newImageId, false); // Set main without toast
        }
      }

    } catch (error) {
      console.error("Error during upload process:", error);
      // Toast handled by onUpload or here as fallback
      if (!(error instanceof Error && error.message.includes("Toast"))) {
         toast.error("שגיאה בהעלאת התמונה.");
      }
    } finally {
      // Reset file input regardless of success/fail
      if (fileInputRef.current) {
        fileInputRef.current.value = "";
      }
      //setIsProcessing(false); // Only manage internal processing state
    }
  };

  const triggerFileInput = () => {
    if (!isLoading && !disabled && images.length < maxImages) {
      fileInputRef.current?.click();
    }
  };

  const handleImageClick = (index: number) => {
    setSelectedViewerIndex(index);
    setShowImageViewer(true);
  };

  const closeImageViewer = useCallback(() => { // Use useCallback for keydown listener
    setShowImageViewer(false);
    setSelectedViewerIndex(null);
  }, []);

  const handleNextImage = useCallback(() => { // Use useCallback
      setSelectedViewerIndex((prevIndex) => {
          if (prevIndex === null || prevIndex >= images.length - 1) return prevIndex;
          return prevIndex + 1;
      });
  }, [images.length]);

  const handlePreviousImage = useCallback(() => { // Use useCallback
      setSelectedViewerIndex((prevIndex) => {
          if (prevIndex === null || prevIndex <= 0) return prevIndex;
          return prevIndex - 1;
      });
  }, []); // Dependency images.length removed as index check handles boundary


  // Handler for delete confirmation
  const confirmDelete = async () => {
    if (!imageToDelete || isProcessing) return;

    setIsProcessing(true);
    try {
      const imageIndex = images.findIndex((img) => img.id === imageToDelete);
      if (imageIndex === -1) throw new Error("Image not found for deletion.");

      const imageObj = images[imageIndex];

      // If deleting the main image, and there are others, set a new main one
      if (imageObj.isMain && images.length > 1) {
        const nextMainIndex = imageIndex === 0 ? 1 : 0; // Pick first or second
        await onSetMain(images[nextMainIndex].id);
      }

      // Call the external delete handler
      await onDelete(imageToDelete);

      toast.success("התמונה נמחקה בהצלחה.");
      closeImageViewer(); // Close viewer if open
      setDeleteConfirmOpen(false); // Close confirmation dialog
      setImageToDelete(null); // Reset delete target

    } catch (error) {
      console.error("Error deleting image:", error);
      toast.error("שגיאה במחיקת התמונה.");
    } finally {
      setIsProcessing(false);
    }
  };

  // Open confirmation dialog
  const requestDelete = (imageId: string, event?: React.MouseEvent) => {
    event?.stopPropagation(); // Prevent grid click or other triggers
    if (isLoading) return;
    setImageToDelete(imageId);
    setDeleteConfirmOpen(true);
  };


  // Handler for setting main image
  const handleSetMainImage = async (imageId: string, showToast = true, event?: React.MouseEvent) => {
    event?.stopPropagation();
    if (isLoading) return;

    const currentImage = images.find(img => img.id === imageId);
    if (!currentImage || currentImage.isMain) return; // Already main or not found

    setIsProcessing(true);
    try {
      await onSetMain(imageId);
      if (showToast) {
        toast.success("התמונה הראשית עודכנה.");
      }
    } catch (error) {
      console.error("Error setting main image:", error);
      toast.error("שגיאה בעדכון התמונה הראשית.");
    } finally {
      setIsProcessing(false);
    }
  };

   // Prevent event bubbling for controls
   const handleControlClick = (e: React.MouseEvent) => {
    e.stopPropagation();
   };

   // Keyboard navigation for viewer
   useEffect(() => {
    const handleKeyDown = (e: KeyboardEvent) => {
      if (!showImageViewer) return;

      switch (e.key) {
        case "ArrowRight": // Assuming RTL means right arrow goes to PREVIOUS visually (index decreases)
          handlePreviousImage();
          break;
        case "ArrowLeft": // Assuming RTL means left arrow goes to NEXT visually (index increases)
          handleNextImage();
          break;
        case "Escape":
          closeImageViewer();
          break;
      }
    };

    window.addEventListener("keydown", handleKeyDown);
    return () => {
      window.removeEventListener("keydown", handleKeyDown);
    };
  }, [showImageViewer, handlePreviousImage, handleNextImage, closeImageViewer]); // Add dependencies


  // --- Render ---

  return (
    // Inspired Card Structure
    <div dir="rtl" className="bg-white/80 backdrop-blur-lg rounded-3xl shadow-xl p-6 md:p-8">
      {/* Header */}
      <div className="flex flex-col sm:flex-row items-start sm:items-center justify-between mb-6 pb-4 border-b border-gray-200/80">
        <div className="mb-3 sm:mb-0 text-right">
          <h2 className="text-xl font-semibold text-gray-800">תמונות פרופיל</h2>
          <p className="mt-1 text-sm text-gray-600">
            העלה עד {maxImages} תמונות. התמונה הראשית תוצג בכרטיס. (מומלץ: תמונות ברורות של הפנים)
          </p>
        </div>
        {!disabled && (
          <Button
            variant="outline"
            onClick={triggerFileInput}
            disabled={isLoading || images.length >= maxImages}
            className="rounded-full border-2 border-cyan-300 text-cyan-700 hover:bg-cyan-50/50 hover:border-cyan-400 transition-all duration-300 px-5 py-2.5 text-sm font-medium flex items-center gap-2 self-end sm:self-center" // Adjusted padding/text size
          >
            {isExternallyUploading ? ( // Show spinner only for external upload
              <Loader2 className="w-4 h-4 animate-spin" />
            ) : (
              <Upload className="w-4 h-4" />
            )}
            <span>העלאת תמונה</span>
          </Button>
        )}
      </div>

      {/* Input for file selection (hidden) */}
      <input
        type="file"
        ref={fileInputRef}
        className="hidden"
        accept="image/jpeg,image/png,image/jpg,image/webp" // Added webp
        onChange={handleFileSelect}
        disabled={isLoading || disabled || images.length >= maxImages}
      />

      {/* Images Grid */}
      <div className="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-5 gap-4 md:gap-5">
        {/* Render Images */}
        {images.map((image, index) => (
          <div
            key={image.id}
            className="relative group aspect-square rounded-xl overflow-hidden cursor-pointer bg-gray-100 shadow-md hover:shadow-lg transition-all duration-300 ease-in-out"
            onClick={() => handleImageClick(index)}
          >
            <Image
              src={image.url}
              alt={`תמונת פרופיל ${index + 1}`}
              fill
              className="object-cover transition-transform duration-300 group-hover:scale-105"
              sizes="(max-width: 640px) 50vw, (max-width: 768px) 33vw, (max-width: 1024px) 25vw, 20vw"
              priority={index < 2} // Prioritize loading first few images
            />

            {/* Controls Overlay - Always visible, subtle */}
            {!disabled && (
              <div
                className="absolute top-2 right-2 z-10 flex gap-1.5 opacity-85 group-hover:opacity-100 transition-opacity duration-200"
                onClick={handleControlClick} // Prevent triggering image click
              >
                {/* Set Main Button */}
                <Button
                  variant="secondary"
                  size="icon"
                  className={cn(
                    "w-8 h-8 rounded-full shadow-md border border-white/30 bg-black/40 text-white hover:bg-black/60 transition-colors",
                    image.isMain ? "cursor-default" : "hover:text-yellow-300" // Visual cue for main
                  )}
                  onClick={(e) => handleSetMainImage(image.id, true, e)}
                  disabled={image.isMain || isLoading}
                  title={image.isMain ? "תמונה ראשית" : "הפוך לתמונה ראשית"}
                >
                  <Star
                    className={cn(
                      "w-4 h-4 transition-colors",
                      image.isMain ? "text-yellow-400 fill-yellow-400" : "text-white"
                    )}
                  />
                </Button>

                {/* Delete Button */}
                <Button
                  variant="secondary"
                  size="icon"
                  className="w-8 h-8 rounded-full shadow-md border border-white/30 bg-black/40 text-white hover:bg-red-600 hover:border-red-700 transition-colors"
                  onClick={(e) => requestDelete(image.id, e)}
                  disabled={isLoading}
                  title="מחק תמונה"
                >
                  <Trash2 className="w-4 h-4" />
                </Button>
              </div>
            )}

            {/* Main Image Badge */}
            {image.isMain && (
              <Badge className="absolute bottom-2 left-2 rounded-full px-2.5 py-0.5 text-xs font-medium shadow-md text-white bg-gradient-to-r from-cyan-500 to-pink-500 border-none">
                ראשי
              </Badge>
            )}
          </div>
        ))}

        {/* Upload Placeholder */}
        {!disabled && images.length < maxImages && (
          <div
            onClick={triggerFileInput}
            className="flex flex-col items-center justify-center text-center p-4 aspect-square rounded-xl border-2 border-dashed border-cyan-300/70 bg-cyan-50/30 hover:bg-cyan-50/60 hover:border-cyan-400 transition-colors duration-300 cursor-pointer group"
          >
            <Upload className="w-8 h-8 text-cyan-500 mb-2 transition-transform group-hover:scale-110" />
            <span className="text-sm font-medium text-cyan-700">העלאת תמונה</span>
            <span className="text-xs text-cyan-600/90 mt-1">
              עד {maxImages - images.length} תמונות נוספות
            </span>
          </div>
        )}
      </div>

      {/* Empty State (if no images and not disabled) */}
      {images.length === 0 && !disabled && (
         <div className="text-center py-16 mt-6 bg-gradient-to-br from-cyan-50/20 to-pink-50/20 rounded-xl border border-dashed border-gray-300">
              <Camera className="w-12 h-12 mx-auto text-gray-400/80" />
              <p className="mt-4 text-gray-600 font-medium">
                אין עדיין תמונות בפרופיל
              </p>
         <p className="text-sm text-gray-500 mt-1 px-4">
  תמונה טובה היא הרושם הראשוני שלכם. כדאי להעלות אחת כדי להשלים את הפרופיל.
</p>
          </div>
      )}
      {/* Empty State (if disabled and no images) */}
       {images.length === 0 && disabled && (
         <div className="text-center py-16 mt-6 bg-gray-50/50 rounded-xl border border-gray-200">
              <Camera className="w-12 h-12 mx-auto text-gray-400" />
              <p className="mt-4 text-gray-500 font-medium">
                לא הועלו תמונות לפרופיל זה.
              </p>
          </div>
      )}

      {/* Delete Confirmation Dialog */}
      <Dialog open={deleteConfirmOpen} onOpenChange={setDeleteConfirmOpen}>
        <DialogContent className="sm:max-w-md bg-white/95 backdrop-blur-md rounded-2xl shadow-2xl border-none p-6" dir="rtl">
          <DialogHeader>
            <DialogTitle className="text-lg font-semibold text-gray-800">אישור מחיקת תמונה</DialogTitle>
            <DialogDescription className="text-sm text-gray-600 mt-2">
              האם למחוק את התמונה לצמיתות? לא ניתן לשחזר פעולה זו.
            </DialogDescription>
          </DialogHeader>
          <DialogFooter className="mt-6 flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2 sm:space-x-reverse gap-2">
            <Button
              type="button"
              variant="outline"
              onClick={() => setDeleteConfirmOpen(false)}
              disabled={isLoading}
              className="rounded-full px-5"
            >
              ביטול
            </Button>
            <Button
              type="button"
              variant="destructive"
              onClick={confirmDelete}
              disabled={isLoading}
               className="rounded-full px-5"
            >
              {isProcessing ? (
                <Loader2 className="w-4 h-4 ml-2 animate-spin" />
              ) : (
                <Trash2 className="w-4 h-4 ml-2" /> // Keep icon consistent
              )}
              <span>מחק</span>
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>

       {/* Image Viewer Dialog */}
       <Dialog open={showImageViewer} onOpenChange={setShowImageViewer}>
        <DialogContent
            className="p-0 m-0 w-screen h-screen max-w-none sm:max-w-full sm:h-full bg-black/90 backdrop-blur-sm border-none rounded-none flex items-center justify-center outline-none"
            aria-describedby={undefined} // Remove default description link if header is hidden
            >
            {/* Close Button */}
            <Button
                variant="ghost"
                size="icon"
                className="absolute top-4 left-4 z-50 bg-black/40 hover:bg-black/60 text-white rounded-full w-10 h-10 sm:w-12 sm:h-12 transition-colors"
                onClick={closeImageViewer}
                aria-label="סגור תצוגת תמונה"
            >
                <X className="w-6 h-6" />
            </Button>

            {/* Image Display Area */}
            {selectedViewerIndex !== null && images[selectedViewerIndex] && (
                <div className="relative w-full h-full flex items-center justify-center">
                    {/* Image */}
                     <div className="relative w-[95%] h-[85%] sm:w-[90%] sm:h-[90%]">
                        <Image
                            src={images[selectedViewerIndex].url}
                            alt={`תצוגה מוגדלת של תמונה ${selectedViewerIndex + 1}`}
                            fill
                            className="object-contain select-none" // Prevent image selection/drag
                            sizes="90vw" // Simplified sizes for viewer
                            priority // Load the viewed image with high priority
                        />
                    </div>


                    {/* Viewer Controls (Nav + Actions) */}
                    <div className="absolute top-0 left-0 w-full h-full pointer-events-none">
                         {/* Navigation */}
                         {images.length > 1 && (
                            <>
                            {/* Previous Button (Visually Right in RTL) */}
                            <Button
                                variant="ghost"
                                size="icon"
                                className="absolute right-2 sm:right-4 top-1/2 transform -translate-y-1/2 z-40 bg-black/40 hover:bg-black/60 text-white rounded-full w-10 h-10 sm:w-12 sm:h-12 transition-colors pointer-events-auto"
                                onClick={(e) => {e.stopPropagation(); handlePreviousImage();}}
                                disabled={selectedViewerIndex === 0}
                                aria-label="התמונה הקודמת"
                            >
                                <ChevronRight className="w-7 h-7" />
                            </Button>
                             {/* Next Button (Visually Left in RTL) */}
                            <Button
                                variant="ghost"
                                size="icon"
                                className="absolute left-2 sm:left-4 top-1/2 transform -translate-y-1/2 z-40 bg-black/40 hover:bg-black/60 text-white rounded-full w-10 h-10 sm:w-12 sm:h-12 transition-colors pointer-events-auto"
                                onClick={(e) => {e.stopPropagation(); handleNextImage();}}
                                disabled={selectedViewerIndex === images.length - 1}
                                aria-label="התמונה הבאה"
                            >
                                <ChevronLeft className="w-7 h-7" />
                            </Button>
                            </>
                         )}

                        {/* Action Buttons (Top Right) */}
                         {!disabled && (
                            <div className="absolute top-4 right-4 z-50 flex flex-col sm:flex-row gap-2 pointer-events-auto">
                                {/* Set as Main Button */}
                                {!images[selectedViewerIndex].isMain && (
                                <Button
                                    variant="secondary"
                                    className="rounded-full bg-white/70 backdrop-blur-sm shadow-md hover:bg-white/90 text-gray-800 px-3 py-1.5 text-xs sm:text-sm border border-white/20 flex items-center gap-1.5"
                                    onClick={(e) => handleSetMainImage(images[selectedViewerIndex].id, true, e)}
                                    size="sm"
                                    disabled={isLoading}
                                >
                                    <Star className="w-4 h-4" />
                                    <span>הפוך לראשי</span>
                                </Button>
                                )}

                                {/* Delete Button */}
                                <Button
                                    variant="destructive" // Using destructive variant directly
                                    className="rounded-full bg-red-600/80 hover:bg-red-700 text-white px-3 py-1.5 text-xs sm:text-sm shadow-md border-none flex items-center gap-1.5"
                                    onClick={(e) => requestDelete(images[selectedViewerIndex].id, e)}
                                    size="sm"
                                    disabled={isLoading}
                                >
                                    <Trash2 className="w-4 h-4" />
                                    <span>מחק תמונה</span>
                                </Button>
                            </div>
                        )}

                        {/* Counter */}
                        {images.length > 0 && (
                           <div className="absolute bottom-4 left-1/2 transform -translate-x-1/2 bg-black/60 text-white px-3 py-1 rounded-full text-xs sm:text-sm font-medium select-none">
                             {selectedViewerIndex + 1} / {images.length}
                           </div>
                        )}
                    </div>
                 </div>
            )}
        </DialogContent>
       </Dialog>
    </div>
  );
};

export default PhotosSection;

--- End of Content for PhotosSection.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\user\Desktop\matchpoint\shidduch-system\src\app\components\profile\sections\PreferencesSection.tsx
--------------------------------------------------------------------------------
Content:
// src/app/(authenticated)/profile/components/dashboard/PreferencesSection.tsx
"use client";
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from "@/components/ui/tooltip";
import { Info } from "lucide-react";
import React, { useState, useEffect } from "react";
import { Card, CardHeader, CardTitle, CardContent } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import {
  Pencil,
  Save,
  X,
  FileText, // Icon for General Description
  SlidersHorizontal, // Icon for Age/Height
  MapPin, // Icon for Location/Religious (expanded)
  GraduationCap, // Icon for Education/Occupation (expanded)
  Users, // Icon for Family/Personal Background (new)
  Sparkles, // Icon for Character/Hobbies (new)
  Heart, // For shomer negiah, children etc.
  Briefcase, // For service type
  Shield, // Could be for traits
  Palette, // Could be for hobbies
  Smile, // Could be for traits
} from "lucide-react";
import { UserProfile } from "@/types/next-auth";
import { cn } from "@/lib/utils";
import {
  Gender,
  ServiceType,
  HeadCoveringType,
  KippahType,
} from "@prisma/client";
interface PreferencesSectionProps {
  profile: UserProfile | null;
  isEditing: boolean;
  viewOnly?: boolean;
  setIsEditing: (value: boolean) => void;
  onChange: (data: Partial<UserProfile>) => void;
}

// --- Options for existing multi-select fields ---
const locationOptions = [
  { value: "צפון", label: "צפון" },
  { value: "מרכז", label: "מרכז" },
  { value: "דרום", label: "דרום" },
  { value: "ירושלים", label: "ירושלים" },
  { value: "יהודה ושומרון", label: "יהודה ושומרון" },
  { value: 'חו"ל', label: 'חו"ל' },
];

const religiousLevelOptions = [
  { value: "חרדי", label: "חרדי" },
  { value: "חרדי מודרני", label: "חרדי מודרני" },
  { value: "דתי", label: "דתי" },
  { value: "דתי-לייט", label: "דתי-לייט" },
  { value: "מסורתי", label: "מסורתי" },
  { value: "חילוני", label: "חילוני" },
  { value: "לא משנה", label: "ללא העדפה / גמיש" },
];

const educationPreferenceOptions = [
  { value: "תיכונית", label: "תיכונית" },
  { value: "על תיכונית", label: "על תיכונית" },
  { value: "אקדמית", label: "אקדמית" },
  { value: "תורנית", label: "תורנית" },
  { value: "ללא העדפה", label: "ללא העדפה" },
];

const occupationPreferenceOptions = [
  { value: "עובד/ת", label: "עובד/ת" },
  { value: "סטודנט/ית", label: "סטודנט/ית" },
  { value: "אברך/כולל", label: "אברך/כולל" },
  { value: "עצמאי/ת", label: "עצמאי/ת" },
  { value: "שירות צבאי/לאומי", label: "שירות צבאי/לאומי" },
  { value: "ללא העדפה", label: "ללא העדפה" },
];

// --- Options for NEW fields ---
const preferredShomerNegiahOptions = [
  { value: "yes", label: "כן, חשוב לי" },
  { value: "no", label: "לא, אין העדפה" }, // Or "לא, לא רלוונטי"
  { value: "flexible", label: "גמיש/תלוי באדם" },
];

const preferredPartnerHasChildrenOptions = [
  { value: "yes_ok", label: "כן, זה בסדר גמור" },
  { value: "no_preferred", label: "מעדיפ/ה שלא יהיו" },
  { value: "does_not_matter", label: "לא משנה לי" },
];

const preferredOriginOptions = [
  { value: "ashkenazi", label: "אשכנזי/ה" },
  { value: "sephardi", label: "ספרדי/ה" },
  { value: "mizrachi", label: "מזרחי/ה" },
  { value: "temani", label: "תימני/ה" },
  { value: "mixed", label: "מעורב/ת" },
  { value: "ethiopian", label: "אתיופי/ה" },
  { value: "american", label: "אמריקאי/ה" },
  { value: "european", label: "אירופאי/ה" },
  { value: "russian_speaking", label: "ממדינות דוברות רוסית" },
  { value: "french_speaking", label: "ממדינות דוברות צרפתית" },
  { value: "south_american", label: "דרום אמריקאי/ה" },
  { value: "other", label: "אחר" },
  { value: "no_preference", label: "ללא העדפה מיוחדת" },
];

const preferredAliyaStatusOptions = [
  { value: "oleh", label: "עולה חדש/ה" },
  { value: "tzabar", label: "צבר/ית" },
  { value: "no_preference", label: "ללא העדפה" },
];

// Options copied/adapted from ProfileSection.tsx (or similar source)
const maritalStatusOptions = [
  // For preferredMaritalStatuses
  { value: "single", label: "רווק/ה" },
  { value: "divorced", label: "גרוש/ה" },
  { value: "widowed", label: "אלמן/ה" },
  { value: "annulled", label: "נישואין שבוטלו" },
  { value: "any", label: "כל האפשרויות פתוחות" },
];

const serviceTypeOptions = [
  // For preferredServiceTypes
  { value: ServiceType.MILITARY_COMBATANT, label: "צבאי - לוחם/ת" },
  { value: ServiceType.MILITARY_SUPPORT, label: "צבאי - תומכ/ת לחימה" },
  { value: ServiceType.MILITARY_OFFICER, label: "צבאי - קצונה" },
  {
    value: ServiceType.MILITARY_INTELLIGENCE_CYBER_TECH,
    label: "צבאי - מודיעין/סייבר/טכנולוגי",
  },
  { value: ServiceType.NATIONAL_SERVICE_ONE_YEAR, label: "שירות לאומי - שנה" },
  {
    value: ServiceType.NATIONAL_SERVICE_TWO_YEARS,
    label: "שירות לאומי - שנתיים",
  },
  { value: ServiceType.HESDER_YESHIVA, label: "ישיבת הסדר" },
  {
    value: ServiceType.YESHIVA_ONLY_POST_HS,
    label: "ישיבה גבוהה / מדרשה (ללא שירות)",
  },
  {
    value: ServiceType.PRE_MILITARY_ACADEMY_AND_SERVICE,
    label: "מכינה קדם-צבאית ושירות",
  },
  { value: ServiceType.EXEMPTED, label: "פטור משירות" },
  { value: ServiceType.CIVILIAN_SERVICE, label: "שירות אזרחי" },
  { value: ServiceType.OTHER, label: "אחר / לא רלוונטי" },
  { value: "no_preference", label: "ללא העדפה / לא משנה" },
];

const headCoveringOptions = [
  // For preferredHeadCoverings (if user is Male)
  { value: HeadCoveringType.FULL_COVERAGE, label: "כיסוי ראש מלא" },
  { value: HeadCoveringType.PARTIAL_COVERAGE, label: "כיסוי ראש חלקי" },
  { value: HeadCoveringType.HAT_BERET, label: "כובע / ברט" },
  {
    value: HeadCoveringType.SCARF_ONLY_SOMETIMES,
    label: "מטפחת (רק באירועים/בית כנסת)",
  },
  { value: HeadCoveringType.NONE, label: "ללא כיסוי ראש" },
  { value: "any", label: "כל האפשרויות פתוחות" },
];

const kippahTypeOptions = [
  // For preferredKippahTypes (if user is Female)
  { value: KippahType.BLACK_VELVET, label: "קטיפה שחורה" },
  { value: KippahType.KNITTED_SMALL, label: "סרוגה קטנה" },
  { value: KippahType.KNITTED_LARGE, label: "סרוגה גדולה" },
  { value: KippahType.CLOTH, label: "בד" },
  { value: KippahType.BRESLEV, label: "ברסלב (לבנה גדולה)" },
  { value: KippahType.NONE_AT_WORK_OR_CASUAL, label: "לא בעבודה / ביומיום" },
  { value: KippahType.NONE_USUALLY, label: "לרוב לא חובש" },
  { value: KippahType.OTHER, label: "אחר" },
  { value: "any", label: "כל האפשרויות פתוחות" },
];

const characterTraitsOptions = [
  // For preferredCharacterTraits
  { value: "empathetic", label: "אמפתי/ת", icon: Heart },
  { value: "driven", label: "שאפתן/ית", icon: Briefcase },
  { value: "optimistic", label: "אופטימי/ת", icon: Smile },
  { value: "family_oriented", label: "משפחתי/ת", icon: Users },
  { value: "intellectual", label: "אינטלקטואל/ית", icon: GraduationCap },
  { value: "organized", label: "מאורגנ/ת", icon: Palette },
  { value: "calm", label: "רגוע/ה", icon: Heart },
  { value: "humorous", label: "בעל/ת חוש הומור", icon: Smile },
  { value: "sociable", label: "חברותי/ת", icon: Users },
  { value: "sensitive", label: "רגיש/ה", icon: Heart },
  { value: "independent", label: "עצמאי/ת", icon: MapPin }, // Icon might need adjustment
  { value: "creative", label: "יצירתי/ת", icon: Palette },
  { value: "honest", label: "כן/ה וישר/ה", icon: Shield },
  { value: "responsible", label: "אחראי/ת", icon: Shield },
  { value: "easy_going", label: "זורם/ת וקליל/ה", icon: Smile },
  { value: "no_strong_preference", label: "ללא העדפה חזקה", icon: Sparkles },
];

const hobbiesOptions = [
  // For preferredHobbies
  { value: "travel", label: "טיולים", icon: MapPin },
  { value: "sports", label: "ספורט", icon: Briefcase }, // Icon might need adjustment
  { value: "reading", label: "קריאה", icon: GraduationCap },
  { value: "cooking_baking", label: "בישול/אפיה", icon: Palette },
  { value: "music_playing_instrument", label: "מוזיקה/נגינה", icon: Palette }, // Icon might need adjustment
  { value: "art_crafts", label: "אומנות/יצירה", icon: Palette },
  { value: "volunteering", label: "התנדבות", icon: Heart },
  { value: "learning_courses", label: "למידה/קורסים", icon: GraduationCap },
  { value: "board_games_puzzles", label: "משחקי קופסא/פאזלים", icon: Smile },
  { value: "movies_theater", label: "סרטים/תיאטרון", icon: Smile },
  { value: "dancing", label: "ריקוד", icon: Users },
  { value: "writing", label: "כתיבה", icon: GraduationCap },
  { value: "nature_hiking", label: "טבע/טיולים רגליים", icon: MapPin },
  { value: "photography", label: "צילום", icon: Palette },
  { value: "no_strong_preference", label: "ללא העדפה חזקה", icon: Sparkles },
];

const PreferencesSection: React.FC<PreferencesSectionProps> = ({
  profile,
  isEditing,
  viewOnly = false,
  setIsEditing,
  onChange,
}) => {
  const [formData, setFormData] = useState<Partial<UserProfile>>({});
  const [initialData, setInitialData] = useState<Partial<UserProfile>>({});

  useEffect(() => {
    if (profile) {
      const nullToUndefined = <T,>(value: T | null): T | undefined =>
        value === null ? undefined : value;

      const newFormData: Partial<UserProfile> = {
        ...profile,
        // Numeric fields
        preferredAgeMin: nullToUndefined(profile.preferredAgeMin),
        preferredAgeMax: nullToUndefined(profile.preferredAgeMax),
        preferredHeightMin: nullToUndefined(profile.preferredHeightMin),
        preferredHeightMax: nullToUndefined(profile.preferredHeightMax),

        // String fields
        matchingNotes: profile.matchingNotes ?? "",
        contactPreference: nullToUndefined(profile.contactPreference),
        preferredShomerNegiah: nullToUndefined(profile.preferredShomerNegiah),
        preferredPartnerHasChildren: nullToUndefined(
          profile.preferredPartnerHasChildren
        ),
        preferredAliyaStatus: nullToUndefined(profile.preferredAliyaStatus),

        // Array fields
        preferredLocations: profile.preferredLocations ?? [],
        preferredReligiousLevels: profile.preferredReligiousLevels ?? [],
        preferredEducation: profile.preferredEducation ?? [],
        preferredOccupations: profile.preferredOccupations ?? [],
        preferredMaritalStatuses: profile.preferredMaritalStatuses ?? [],
        preferredOrigins: profile.preferredOrigins ?? [],
        preferredServiceTypes: profile.preferredServiceTypes ?? [],
        preferredHeadCoverings: profile.preferredHeadCoverings ?? [],
        preferredKippahTypes: profile.preferredKippahTypes ?? [],
        preferredCharacterTraits: profile.preferredCharacterTraits ?? [],
        preferredHobbies: profile.preferredHobbies ?? [],
      };
      setFormData(newFormData);
      setInitialData(newFormData);
    }
  }, [profile]);

  useEffect(() => {
    if (!isEditing && initialData) {
      // Check initialData to prevent reset before it's set
      setFormData(initialData);
    }
  }, [isEditing, initialData]);

  const handleInputChange = (
    e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>
  ) => {
    const { name, value, type } = e.target;
    const field = name as keyof UserProfile;

    setFormData((prev) => {
      let processedValue: string | number | undefined;
      if (type === "number") {
        const num = parseInt(value, 10);
        processedValue = isNaN(num) ? undefined : num;
      } else {
        processedValue = value === "" ? undefined : value; // Treat empty string as undefined for optional fields
      }
      return { ...prev, [field]: processedValue };
    });
  };

  const handleSelectChange = (field: keyof UserProfile, value: string) => {
    setFormData((prev) => ({
      ...prev,
      [field]:
        value === "" ||
        value === "לא_משנה" ||
        value === "any" ||
        value === "no_preference"
          ? undefined
          : (value as UserProfile[typeof field]),
    }));
  };

  const handleMultiSelectChange = (field: keyof UserProfile, value: string) => {
    setFormData((prev) => {
      const currentValues =
        (Array.isArray(prev[field]) ? (prev[field] as string[]) : []) ?? [];
      let newValues;
      if (
        value === "any" ||
        value === "no_preference" ||
        value === "לא_משנה" ||
        value === "no_strong_preference"
      ) {
        newValues = currentValues.includes(value) ? [] : [value]; // Select "any" deselects others, or selects only "any"
      } else {
        // Remove "any" or "no_preference" if another specific option is selected
        const filteredValues = currentValues.filter(
          (v) =>
            v !== "any" &&
            v !== "no_preference" &&
            v !== "לא_משנה" &&
            v !== "no_strong_preference"
        );
        newValues = filteredValues.includes(value)
          ? filteredValues.filter((v) => v !== value)
          : [...filteredValues, value];
      }
      return { ...prev, [field]: newValues };
    });
  };

  const handleSave = () => {
    // Filter out empty strings from array fields before saving, if desired
    const dataToSave = { ...formData };
    // Example: dataToSave.preferredLocations = dataToSave.preferredLocations?.filter(loc => loc !== "");
    onChange(dataToSave);
    setIsEditing(false);
    setInitialData(dataToSave);
  };

  const handleCancel = () => {
    setFormData(initialData);
    setIsEditing(false);
  };

  const renderMultiSelectBadges = (
    fieldValues: string[] | undefined | null,
    options: { value: string; label: string; icon?: React.ElementType }[],
    badgeClass: string = "bg-sky-100 text-sky-700",
    emptyPlaceholder: string = "לא נבחרו פריטים."
  ) => {
    if (!fieldValues || fieldValues.length === 0) {
      return <p className="text-sm text-gray-500 italic">{emptyPlaceholder}</p>;
    }
    return fieldValues.map((value) => {
      const option = options.find((opt) => opt.value === value);
      return option ? (
        <Badge
          key={value}
          variant="secondary"
          className={cn(
            "mr-1 mb-1 text-xs px-2 py-0.5 rounded-full flex items-center",
            badgeClass
          )}
        >
          {option.icon && <option.icon className="w-3 h-3 rtl:ml-1 mr-1" />}
          {option.label}
        </Badge>
      ) : null;
    });
  };

  const getSelectDisplayValue = (
    value: string | undefined | null,
    options: { value: string; label: string }[],
    placeholder: string = "לא צוין."
  ) => {
    if (!value)
      return <span className="text-gray-500 italic">{placeholder}</span>;
    const option = options.find((opt) => opt.value === value);
    return option ? (
      option.label
    ) : (
      <span className="text-gray-500 italic">{placeholder}</span>
    );
  };

  return (
    <div className="relative" dir="rtl">
      <div className="sticky top-0 z-10 bg-gradient-to-b from-white via-white/95 to-white/0 pt-4 pb-3 backdrop-blur-sm">
        <div className="container mx-auto max-w-screen-xl px-4">
          <div className="flex items-center justify-between">
            <div>
              <h1 className="text-xl md:text-2xl font-bold text-slate-800">
                העדפות התאמה
              </h1>
              <p className="text-sm text-slate-500">
                {isEditing && !viewOnly
                  ? "ערוך/י את העדפותיך למציאת התאמה."
                  : "העדפות שהוגדרו לחיפוש התאמה."}
              </p>
            </div>
            {!viewOnly && (
              <div className="flex gap-2">
                {!isEditing ? (
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={() => setIsEditing(true)}
                    className="rounded-full shadow-sm hover:shadow-md transition-all duration-300 border-cyan-400 text-cyan-700 hover:bg-cyan-50"
                  >
                    <Pencil className="w-3.5 h-3.5 ml-1.5" />
                    עריכה
                  </Button>
                ) : (
                  <>
                    <Button
                      variant="outline"
                      size="sm"
                      onClick={handleCancel}
                      className="rounded-full shadow-sm hover:shadow-md transition-all duration-300 border-gray-300 text-gray-700 hover:bg-gray-50"
                    >
                      <X className="w-3.5 h-3.5 ml-1.5" />
                      ביטול
                    </Button>
                    <Button
                      variant="default"
                      size="sm"
                      onClick={handleSave}
                      className="rounded-full shadow-sm hover:shadow-md transition-all duration-300 bg-cyan-600 hover:bg-cyan-700 text-white"
                    >
                      <Save className="w-3.5 h-3.5 ml-1.5" />
                      שמירה
                    </Button>
                  </>
                )}
              </div>
            )}
          </div>
        </div>
      </div>

      <div className="container mx-auto max-w-screen-xl py-6 px-4">
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
          {/* --- Column 1 --- */}
          <div className="space-y-6">
            {/* Card: General Description & Contact Preferences */}
            <Card className="bg-white/80 backdrop-blur-md rounded-2xl shadow-lg border border-gray-200/40 overflow-hidden">
              <CardHeader className="bg-gradient-to-r from-slate-50/40 to-gray-100/40 border-b border-gray-200/50 p-4 flex items-center space-x-2 rtl:space-x-reverse">
                <FileText className="w-5 h-5 text-slate-600" />
                <CardTitle className="text-base font-semibold text-gray-700">
                  תיאור כללי והעדפות קשר
                </CardTitle>
              </CardHeader>
              <CardContent className="p-4 md:p-6 space-y-5">
                <div>
              <div className="flex items-center gap-1.5">
    <Label htmlFor="matchingNotes" className="text-sm font-medium text-gray-700">
        תיאור כללי על המועמד/ת המבוקש/ת
    </Label>
    <TooltipProvider delayDuration={100}>
        <Tooltip>
            <TooltipTrigger type="button"><Info className="w-4 h-4 text-gray-400 hover:text-gray-600" /></TooltipTrigger>
            <TooltipContent side="top" className="max-w-xs text-center">
                <p>זהו אחד השדות החשובים ביותר! תאר/י במילים שלך את סוג האדם שאת/ה מחפש/ת. התיאור הזה יעזור לשדכנים להבין את הראש שלך מעבר לנתונים היבשים.</p>
            </TooltipContent>
        </Tooltip>
    </TooltipProvider>
</div>
                  {isEditing ? (
                    <Textarea
                      id="matchingNotes"
                      name="matchingNotes"
                      value={formData.matchingNotes || ""}
                      onChange={handleInputChange}
                      placeholder="פרט/י על סוג האדם שאת/ה מחפש/ת, תכונות חשובות, ציפיות וכו'..."
                      className="text-sm focus:ring-cyan-500 min-h-[100px] rounded-lg"
                      rows={4}
                    />
                  ) : (
                    <p className="mt-1 text-sm text-gray-700 whitespace-pre-wrap min-h-[60px] bg-slate-50/70 p-3 rounded-lg border border-slate-200/50">
                      {formData.matchingNotes || (
                        <span className="text-gray-500 italic">
                          לא הוזן תיאור.
                        </span>
                      )}
                    </p>
                  )}
                </div>
                <div>
                  <Label
                    htmlFor="contactPreference"
                    className="block mb-1.5 text-xs font-medium text-gray-600"
                  >
                    אופן יצירת קשר מועדף (לאחר אישור הצעה)
                  </Label>
                  {isEditing ? (
                    <Select
                      name="contactPreference"
                      value={formData.contactPreference || ""}
                      onValueChange={(value: string) =>
                        handleSelectChange("contactPreference", value)
                      }
                    >
                      <SelectTrigger
                        id="contactPreference"
                        className="h-9 text-sm focus:ring-cyan-500"
                      >
                        <SelectValue placeholder="בחר/י אפשרות..." />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="direct">ישירות</SelectItem>
                        <SelectItem value="matchmaker">דרך השדכן/ית</SelectItem>
                        <SelectItem value="both">שתי האפשרויות</SelectItem>
                      </SelectContent>
                    </Select>
                  ) : (
                    <p className="text-sm text-gray-800 font-medium mt-1">
                      {getSelectDisplayValue(
                        formData.contactPreference,
                        [
                          { value: "direct", label: "ישירות" },
                          { value: "matchmaker", label: "דרך השדכן/ית" },
                          { value: "both", label: "שתי האפשרויות" },
                        ],
                        "לא צוין"
                      )}
                    </p>
                  )}
                </div>
              </CardContent>
            </Card>

            {/* Card: Age & Height Preferences */}
            <Card className="bg-white/80 backdrop-blur-md rounded-2xl shadow-lg border border-gray-200/40 overflow-hidden">
              <CardHeader className="bg-gradient-to-r from-indigo-50/40 to-purple-50/40 border-b border-gray-200/50 p-4 flex items-center space-x-2 rtl:space-x-reverse">
                <SlidersHorizontal className="w-5 h-5 text-indigo-700" />
                <CardTitle className="text-base font-semibold text-gray-700">
                  העדפות גיל וגובה
                </CardTitle>
              </CardHeader>
              <CardContent className="p-4 md:p-6">
                <div className="grid grid-cols-1 sm:grid-cols-2 gap-x-6 gap-y-5">
                  <div>
                <div className="flex items-center gap-1.5">
    <Label className="text-xs font-medium text-gray-600">
      טווח גילאים מועדף
    </Label>
    <TooltipProvider delayDuration={100}>
        <Tooltip>
            <TooltipTrigger type="button"><Info className="w-4 h-4 text-gray-400 hover:text-gray-600" /></TooltipTrigger>
            <TooltipContent side="top">
                <p>הגדרת טווח גילאים רחב יותר תגדיל את כמות ההצעות שתקבל/י.</p>
            </TooltipContent>
        </Tooltip>
    </TooltipProvider>
</div>
                    <div className="flex items-center gap-2">
                      <Input
                        type="number"
                        name="preferredAgeMin"
                        placeholder="מגיל"
                        aria-label="גיל מינימלי מועדף"
                        value={formData.preferredAgeMin ?? ""}
                        onChange={handleInputChange}
                        disabled={!isEditing}
                        className="h-9 text-sm focus:ring-cyan-500 disabled:bg-gray-100/70"
                      />
                      <span className="text-gray-500">-</span>
                      <Input
                        type="number"
                        name="preferredAgeMax"
                        placeholder="עד גיל"
                        aria-label="גיל מקסימלי מועדף"
                        value={formData.preferredAgeMax ?? ""}
                        onChange={handleInputChange}
                        disabled={!isEditing}
                        className="h-9 text-sm focus:ring-cyan-500 disabled:bg-gray-100/70"
                      />
                    </div>
                    {!isEditing &&
                      !formData.preferredAgeMin &&
                      !formData.preferredAgeMax && (
                        <p className="text-xs text-gray-500 italic mt-1">
                          לא הוגדר טווח גילאים.
                        </p>
                      )}
                  </div>
                  <div>
                    <Label className="block mb-1.5 text-xs font-medium text-gray-600">
                      טווח גבהים מועדף (סמ)
                    </Label>
                    <div className="flex items-center gap-2">
                      <Input
                        type="number"
                        name="preferredHeightMin"
                        placeholder="מ-"
                        aria-label="גובה מינימלי מועדף בסנטימטרים"
                        value={formData.preferredHeightMin ?? ""}
                        onChange={handleInputChange}
                        disabled={!isEditing}
                        className="h-9 text-sm focus:ring-cyan-500 disabled:bg-gray-100/70"
                      />
                      <span className="text-gray-500">-</span>
                      <Input
                        type="number"
                        name="preferredHeightMax"
                        placeholder="עד-"
                        aria-label="גובה מקסימלי מועדף בסנטימטרים"
                        value={formData.preferredHeightMax ?? ""}
                        onChange={handleInputChange}
                        disabled={!isEditing}
                        className="h-9 text-sm focus:ring-cyan-500 disabled:bg-gray-100/70"
                      />
                    </div>
                    {!isEditing &&
                      !formData.preferredHeightMin &&
                      !formData.preferredHeightMax && (
                        <p className="text-xs text-gray-500 italic mt-1">
                          לא הוגדר טווח גבהים.
                        </p>
                      )}
                  </div>
                </div>
              </CardContent>
            </Card>
          </div>

          {/* --- Column 2 --- */}
          <div className="space-y-6">
            {/* Card: Location, Religious & Lifestyle Preferences */}
            <Card className="bg-white/80 backdrop-blur-md rounded-2xl shadow-lg border border-gray-200/40 overflow-hidden">
              <CardHeader className="bg-gradient-to-r from-sky-50/40 to-blue-50/40 border-b border-gray-200/50 p-4 flex items-center space-x-2 rtl:space-x-reverse">
                <MapPin className="w-5 h-5 text-sky-700" />
                <CardTitle className="text-base font-semibold text-gray-700">
                  מיקום, רמה דתית ואורח חיים
                </CardTitle>
              </CardHeader>
              <CardContent className="p-4 md:p-6 space-y-6">
                <div>
                  <Label className="block mb-2 text-xs font-medium text-gray-600">
                    אזורי מגורים מועדפים
                  </Label>
                  {isEditing ? (
                    <div className="flex flex-wrap gap-2">
                      {locationOptions.map((loc) => (
                        <Button
                          key={loc.value}
                          type="button"
                          variant={
                            (formData.preferredLocations || []).includes(
                              loc.value
                            )
                              ? "default"
                              : "outline"
                          }
                          size="sm"
                          onClick={() =>
                            handleMultiSelectChange(
                              "preferredLocations",
                              loc.value
                            )
                          }
                          className={cn(
                            "rounded-full text-xs px-3 py-1.5 transition-all",
                            (formData.preferredLocations || []).includes(
                              loc.value
                            )
                              ? "bg-sky-500 hover:bg-sky-600 text-white border-sky-500"
                              : "border-gray-300 text-gray-600 hover:bg-gray-50 hover:border-gray-400"
                          )}
                        >
                          {loc.label}
                        </Button>
                      ))}
                    </div>
                  ) : (
                    <div className="mt-1 flex flex-wrap gap-1.5">
                      {renderMultiSelectBadges(
                        formData.preferredLocations,
                        locationOptions,
                        "bg-sky-100 text-sky-700",
                        "לא נבחרו אזורי מגורים."
                      )}
                    </div>
                  )}
                </div>
                <div>
                 <div className="flex items-center gap-1.5">
    <Label className="text-xs font-medium text-gray-600">
      רמות דתיות מועדפות
    </Label>
    <TooltipProvider delayDuration={100}>
        <Tooltip>
            <TooltipTrigger type="button"><Info className="w-4 h-4 text-gray-400 hover:text-gray-600" /></TooltipTrigger>
            <TooltipContent side="top" className="max-w-xs text-center">
                <p>מומלץ לבחור 1-3 רמות שמתאימות לך. בחירה רחבה מדי עלולה להוביל להצעות פחות מדויקות.</p>
            </TooltipContent>
        </Tooltip>
    </TooltipProvider>
</div>
                  {isEditing ? (
                    <div className="flex flex-wrap gap-2">
                      {religiousLevelOptions.map((level) => (
                        <Button
                          key={level.value}
                          type="button"
                          variant={
                            (formData.preferredReligiousLevels || []).includes(
                              level.value
                            )
                              ? "default"
                              : "outline"
                          }
                          size="sm"
                          onClick={() =>
                            handleMultiSelectChange(
                              "preferredReligiousLevels",
                              level.value
                            )
                          }
                          className={cn(
                            "rounded-full text-xs px-3 py-1.5 transition-all",
                            (formData.preferredReligiousLevels || []).includes(
                              level.value
                            )
                              ? "bg-pink-500 hover:bg-pink-600 text-white border-pink-500"
                              : "border-gray-300 text-gray-600 hover:bg-gray-50 hover:border-gray-400"
                          )}
                        >
                          {level.label}
                        </Button>
                      ))}
                    </div>
                  ) : (
                    <div className="mt-1 flex flex-wrap gap-1.5">
                      {renderMultiSelectBadges(
                        formData.preferredReligiousLevels,
                        religiousLevelOptions,
                        "bg-pink-100 text-pink-700",
                        "לא נבחרו רמות דתיות."
                      )}
                    </div>
                  )}
                </div>
                <div>
                  <Label
                    htmlFor="preferredShomerNegiah"
                    className="block mb-1.5 text-xs font-medium text-gray-600"
                  >
                    שמירת נגיעה אצל הצד השני
                  </Label>
                  {isEditing ? (
                    <Select
                      name="preferredShomerNegiah"
                      value={formData.preferredShomerNegiah || ""}
                      onValueChange={(value) =>
                        handleSelectChange("preferredShomerNegiah", value)
                      }
                    >
                      <SelectTrigger
                        id="preferredShomerNegiah"
                        className="h-9 text-sm focus:ring-cyan-500"
                      >
                        <SelectValue placeholder="בחר/י העדפה..." />
                      </SelectTrigger>
                      <SelectContent>
                        {preferredShomerNegiahOptions.map((opt) => (
                          <SelectItem key={opt.value} value={opt.value}>
                            {opt.label}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  ) : (
                    <p className="text-sm text-gray-800 font-medium mt-1">
                      {getSelectDisplayValue(
                        formData.preferredShomerNegiah,
                        preferredShomerNegiahOptions
                      )}
                    </p>
                  )}
                </div>
                {/* Conditional rendering for preferredHeadCoverings / preferredKippahTypes */}
                {profile?.gender === Gender.MALE && (
                  <div>
                    <Label className="block mb-2 text-xs font-medium text-gray-600">
                      העדפת כיסוי ראש לבת הזוג
                    </Label>
                    {isEditing ? (
                      <div className="flex flex-wrap gap-2">
                        {headCoveringOptions.map((opt) => (
                          <Button
                            key={opt.value}
                            type="button"
                            variant={
                              (formData.preferredHeadCoverings || []).includes(
                                opt.value as HeadCoveringType
                              )
                                ? "default"
                                : "outline"
                            }
                            size="sm"
                            onClick={() =>
                              handleMultiSelectChange(
                                "preferredHeadCoverings",
                                opt.value as HeadCoveringType
                              )
                            }
                            className={cn(
                              "rounded-full text-xs px-3 py-1.5 transition-all",
                              (formData.preferredHeadCoverings || []).includes(
                                opt.value as HeadCoveringType
                              )
                                ? "bg-purple-500 hover:bg-purple-600 text-white border-purple-500"
                                : "border-gray-300 text-gray-600 hover:bg-gray-50 hover:border-gray-400"
                            )}
                          >
                            {opt.label}
                          </Button>
                        ))}
                      </div>
                    ) : (
                      <div className="mt-1 flex flex-wrap gap-1.5">
                        {renderMultiSelectBadges(
                          formData.preferredHeadCoverings as string[],
                          headCoveringOptions,
                          "bg-purple-100 text-purple-700",
                          "לא נבחרו העדפות כיסוי ראש."
                        )}
                      </div>
                    )}
                  </div>
                )}
                {profile?.gender === Gender.FEMALE && (
                  <div>
                    <Label className="block mb-2 text-xs font-medium text-gray-600">
                      העדפת סוג כיפה לבן הזוג
                    </Label>
                    {isEditing ? (
                      <div className="flex flex-wrap gap-2">
                        {kippahTypeOptions.map((opt) => (
                          <Button
                            key={opt.value}
                            type="button"
                            variant={
                              (formData.preferredKippahTypes || []).includes(
                                opt.value as KippahType
                              )
                                ? "default"
                                : "outline"
                            }
                            size="sm"
                            onClick={() =>
                              handleMultiSelectChange(
                                "preferredKippahTypes",
                                opt.value as KippahType
                              )
                            }
                            className={cn(
                              "rounded-full text-xs px-3 py-1.5 transition-all",
                              (formData.preferredKippahTypes || []).includes(
                                opt.value as KippahType
                              )
                                ? "bg-orange-500 hover:bg-orange-600 text-white border-orange-500"
                                : "border-gray-300 text-gray-600 hover:bg-gray-50 hover:border-gray-400"
                            )}
                          >
                            {opt.label}
                          </Button>
                        ))}
                      </div>
                    ) : (
                      <div className="mt-1 flex flex-wrap gap-1.5">
                        {renderMultiSelectBadges(
                          formData.preferredKippahTypes as string[],
                          kippahTypeOptions,
                          "bg-orange-100 text-orange-700",
                          "לא נבחרו העדפות סוג כיפה."
                        )}
                      </div>
                    )}
                  </div>
                )}
              </CardContent>
            </Card>

            {/* Card: Education, Occupation & Service Preferences */}
            <Card className="bg-white/80 backdrop-blur-md rounded-2xl shadow-lg border border-gray-200/40 overflow-hidden">
              <CardHeader className="bg-gradient-to-r from-teal-50/40 to-green-50/40 border-b border-gray-200/50 p-4 flex items-center space-x-2 rtl:space-x-reverse">
                <GraduationCap className="w-5 h-5 text-teal-700" />
                <CardTitle className="text-base font-semibold text-gray-700">
                  השכלה, תעסוקה ושירות
                </CardTitle>
              </CardHeader>
              <CardContent className="p-4 md:p-6 space-y-6">
                <div>
                  <Label className="block mb-2 text-xs font-medium text-gray-600">
                    רמות השכלה מועדפות
                  </Label>
                  {isEditing ? (
                    <div className="flex flex-wrap gap-2">
                      {educationPreferenceOptions.map((edu) => (
                        <Button
                          key={edu.value}
                          type="button"
                          variant={
                            (formData.preferredEducation || []).includes(
                              edu.value
                            )
                              ? "default"
                              : "outline"
                          }
                          size="sm"
                          onClick={() =>
                            handleMultiSelectChange(
                              "preferredEducation",
                              edu.value
                            )
                          }
                          className={cn(
                            "rounded-full text-xs px-3 py-1.5 transition-all",
                            (formData.preferredEducation || []).includes(
                              edu.value
                            )
                              ? "bg-teal-500 hover:bg-teal-600 text-white border-teal-500"
                              : "border-gray-300 text-gray-600 hover:bg-gray-50 hover:border-gray-400"
                          )}
                        >
                          {edu.label}
                        </Button>
                      ))}
                    </div>
                  ) : (
                    <div className="mt-1 flex flex-wrap gap-1.5">
                      {renderMultiSelectBadges(
                        formData.preferredEducation,
                        educationPreferenceOptions,
                        "bg-teal-100 text-teal-700",
                        "לא נבחרו רמות השכלה."
                      )}
                    </div>
                  )}
                </div>
                <div>
                  <Label className="block mb-2 text-xs font-medium text-gray-600">
                    תחומי עיסוק מועדפים
                  </Label>
                  {isEditing ? (
                    <div className="flex flex-wrap gap-2">
                      {occupationPreferenceOptions.map((occ) => (
                        <Button
                          key={occ.value}
                          type="button"
                          variant={
                            (formData.preferredOccupations || []).includes(
                              occ.value
                            )
                              ? "default"
                              : "outline"
                          }
                          size="sm"
                          onClick={() =>
                            handleMultiSelectChange(
                              "preferredOccupations",
                              occ.value
                            )
                          }
                          className={cn(
                            "rounded-full text-xs px-3 py-1.5 transition-all",
                            (formData.preferredOccupations || []).includes(
                              occ.value
                            )
                              ? "bg-green-500 hover:bg-green-600 text-white border-green-500"
                              : "border-gray-300 text-gray-600 hover:bg-gray-50 hover:border-gray-400"
                          )}
                        >
                          {occ.label}
                        </Button>
                      ))}
                    </div>
                  ) : (
                    <div className="mt-1 flex flex-wrap gap-1.5">
                      {renderMultiSelectBadges(
                        formData.preferredOccupations,
                        occupationPreferenceOptions,
                        "bg-green-100 text-green-700",
                        "לא נבחרו תחומי עיסוק."
                      )}
                    </div>
                  )}
                </div>
                <div>
                  <Label className="block mb-2 text-xs font-medium text-gray-600">
                    סוג שירות מועדף (צבאי/לאומי)
                  </Label>
                  {isEditing ? (
                    <div className="flex flex-wrap gap-2">
                      {serviceTypeOptions.map((opt) => (
                        <Button
                          key={opt.value}
                          type="button"
                          variant={
                            (formData.preferredServiceTypes || []).includes(
                              opt.value as ServiceType
                            )
                              ? "default"
                              : "outline"
                          }
                          size="sm"
                          onClick={() =>
                            handleMultiSelectChange(
                              "preferredServiceTypes",
                              opt.value as ServiceType
                            )
                          }
                          className={cn(
                            "rounded-full text-xs px-3 py-1.5 transition-all",
                            (formData.preferredServiceTypes || []).includes(
                              opt.value as ServiceType
                            )
                              ? "bg-lime-500 hover:bg-lime-600 text-white border-lime-500"
                              : "border-gray-300 text-gray-600 hover:bg-gray-50 hover:border-gray-400"
                          )}
                        >
                          {opt.label}
                        </Button>
                      ))}
                    </div>
                  ) : (
                    <div className="mt-1 flex flex-wrap gap-1.5">
                      {renderMultiSelectBadges(
                        formData.preferredServiceTypes as string[],
                        serviceTypeOptions,
                        "bg-lime-100 text-lime-700",
                        "לא נבחרו העדפות שירות."
                      )}
                    </div>
                  )}
                </div>
              </CardContent>
            </Card>
          </div>

          {/* --- Column 3 --- */}
          <div className="space-y-6">
            {/* Card: Personal & Family Background Preferences */}
            <Card className="bg-white/80 backdrop-blur-md rounded-2xl shadow-lg border border-gray-200/40 overflow-hidden">
              <CardHeader className="bg-gradient-to-r from-rose-50/40 to-fuchsia-50/40 border-b border-gray-200/50 p-4 flex items-center space-x-2 rtl:space-x-reverse">
                <Users className="w-5 h-5 text-rose-700" />
                <CardTitle className="text-base font-semibold text-gray-700">
                  רקע אישי ומשפחתי
                </CardTitle>
              </CardHeader>
              <CardContent className="p-4 md:p-6 space-y-6">
                <div>
                  <Label className="block mb-2 text-xs font-medium text-gray-600">
                    מצב משפחתי מועדף
                  </Label>
                  {isEditing ? (
                    <div className="flex flex-wrap gap-2">
                      {maritalStatusOptions.map((opt) => (
                        <Button
                          key={opt.value}
                          type="button"
                          variant={
                            (formData.preferredMaritalStatuses || []).includes(
                              opt.value
                            )
                              ? "default"
                              : "outline"
                          }
                          size="sm"
                          onClick={() =>
                            handleMultiSelectChange(
                              "preferredMaritalStatuses",
                              opt.value
                            )
                          }
                          className={cn(
                            "rounded-full text-xs px-3 py-1.5 transition-all",
                            (formData.preferredMaritalStatuses || []).includes(
                              opt.value
                            )
                              ? "bg-rose-500 hover:bg-rose-600 text-white border-rose-500"
                              : "border-gray-300 text-gray-600 hover:bg-gray-50 hover:border-gray-400"
                          )}
                        >
                          {opt.label}
                        </Button>
                      ))}
                    </div>
                  ) : (
                    <div className="mt-1 flex flex-wrap gap-1.5">
                      {renderMultiSelectBadges(
                        formData.preferredMaritalStatuses,
                        maritalStatusOptions,
                        "bg-rose-100 text-rose-700",
                        "לא נבחרו העדפות למצב משפחתי."
                      )}
                    </div>
                  )}
                </div>
                <div>
                  <Label
                    htmlFor="preferredPartnerHasChildren"
                    className="block mb-1.5 text-xs font-medium text-gray-600"
                  >
                    העדפה לגבי ילדים מקשר קודם
                  </Label>
                  {isEditing ? (
                    <Select
                      name="preferredPartnerHasChildren"
                      value={formData.preferredPartnerHasChildren || ""}
                      onValueChange={(value) =>
                        handleSelectChange("preferredPartnerHasChildren", value)
                      }
                    >
                      <SelectTrigger
                        id="preferredPartnerHasChildren"
                        className="h-9 text-sm focus:ring-cyan-500"
                      >
                        <SelectValue placeholder="בחר/י העדפה..." />
                      </SelectTrigger>
                      <SelectContent>
                        {preferredPartnerHasChildrenOptions.map((opt) => (
                          <SelectItem key={opt.value} value={opt.value}>
                            {opt.label}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  ) : (
                    <p className="text-sm text-gray-800 font-medium mt-1">
                      {getSelectDisplayValue(
                        formData.preferredPartnerHasChildren,
                        preferredPartnerHasChildrenOptions
                      )}
                    </p>
                  )}
                </div>
                <div>
                  <Label className="block mb-2 text-xs font-medium text-gray-600">
                    מוצא/עדה מועדפים
                  </Label>
                  {isEditing ? (
                    <div className="flex flex-wrap gap-2">
                      {preferredOriginOptions.map((opt) => (
                        <Button
                          key={opt.value}
                          type="button"
                          variant={
                            (formData.preferredOrigins || []).includes(
                              opt.value
                            )
                              ? "default"
                              : "outline"
                          }
                          size="sm"
                          onClick={() =>
                            handleMultiSelectChange(
                              "preferredOrigins",
                              opt.value
                            )
                          }
                          className={cn(
                            "rounded-full text-xs px-3 py-1.5 transition-all",
                            (formData.preferredOrigins || []).includes(
                              opt.value
                            )
                              ? "bg-fuchsia-500 hover:bg-fuchsia-600 text-white border-fuchsia-500"
                              : "border-gray-300 text-gray-600 hover:bg-gray-50 hover:border-gray-400"
                          )}
                        >
                          {opt.label}
                        </Button>
                      ))}
                    </div>
                  ) : (
                    <div className="mt-1 flex flex-wrap gap-1.5">
                      {renderMultiSelectBadges(
                        formData.preferredOrigins,
                        preferredOriginOptions,
                        "bg-fuchsia-100 text-fuchsia-700",
                        "לא נבחרו העדפות מוצא/עדה."
                      )}
                    </div>
                  )}
                </div>
                <div>
                  <Label
                    htmlFor="preferredAliyaStatus"
                    className="block mb-1.5 text-xs font-medium text-gray-600"
                  >
                    העדפת סטטוס עליה
                  </Label>
                  {isEditing ? (
                    <Select
                      name="preferredAliyaStatus"
                      value={formData.preferredAliyaStatus || ""}
                      onValueChange={(value) =>
                        handleSelectChange("preferredAliyaStatus", value)
                      }
                    >
                      <SelectTrigger
                        id="preferredAliyaStatus"
                        className="h-9 text-sm focus:ring-cyan-500"
                      >
                        <SelectValue placeholder="בחר/י העדפה..." />
                      </SelectTrigger>
                      <SelectContent>
                        {preferredAliyaStatusOptions.map((opt) => (
                          <SelectItem key={opt.value} value={opt.value}>
                            {opt.label}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  ) : (
                    <p className="text-sm text-gray-800 font-medium mt-1">
                      {getSelectDisplayValue(
                        formData.preferredAliyaStatus,
                        preferredAliyaStatusOptions
                      )}
                    </p>
                  )}
                </div>
              </CardContent>
            </Card>

            {/* Card: Character & Hobbies Preferences */}
            <Card className="bg-white/80 backdrop-blur-md rounded-2xl shadow-lg border border-gray-200/40 overflow-hidden">
              <CardHeader className="bg-gradient-to-r from-amber-50/40 to-yellow-50/40 border-b border-gray-200/50 p-4 flex items-center space-x-2 rtl:space-x-reverse">
                <Sparkles className="w-5 h-5 text-amber-700" />
                <CardTitle className="text-base font-semibold text-gray-700">
                  אופי ותחומי עניין
                </CardTitle>
              </CardHeader>
              <CardContent className="p-4 md:p-6 space-y-6">
                <div>
                  <Label className="block mb-2 text-xs font-medium text-gray-600">
                    תכונות אופי מועדפות (עד 3)
                  </Label>
                  {isEditing ? (
                    <div className="flex flex-wrap gap-2">
                      {characterTraitsOptions.map((opt) => (
                        <Button
                          key={opt.value}
                          type="button"
                          variant={
                            (formData.preferredCharacterTraits || []).includes(
                              opt.value
                            )
                              ? "default"
                              : "outline"
                          }
                          size="sm"
                          onClick={() =>
                            handleMultiSelectChange(
                              "preferredCharacterTraits",
                              opt.value
                            )
                          }
                          disabled={
                            !viewOnly &&
                            (formData.preferredCharacterTraits || []).length >=
                              3 &&
                            !(formData.preferredCharacterTraits || []).includes(
                              opt.value
                            ) &&
                            opt.value !== "no_strong_preference"
                          }
                          className={cn(
                            "rounded-full text-xs px-3 py-1.5 transition-all flex items-center",
                            (formData.preferredCharacterTraits || []).includes(
                              opt.value
                            )
                              ? "bg-yellow-500 hover:bg-yellow-600 text-white border-yellow-500"
                              : "border-gray-300 text-gray-600 hover:bg-gray-50 hover:border-gray-400"
                          )}
                        >
                          {opt.icon && (
                            <opt.icon className="w-3.5 h-3.5 rtl:ml-1.5 mr-1.5" />
                          )}
                          {opt.label}
                        </Button>
                      ))}
                    </div>
                  ) : (
                    <div className="mt-1 flex flex-wrap gap-1.5">
                      {renderMultiSelectBadges(
                        formData.preferredCharacterTraits,
                        characterTraitsOptions,
                        "bg-yellow-100 text-yellow-700",
                        "לא נבחרו תכונות אופי מועדפות."
                      )}
                    </div>
                  )}
                </div>
                <div>
                  <Label className="block mb-2 text-xs font-medium text-gray-600">
                    תחביבים מועדפים (עד 3)
                  </Label>
                  {isEditing ? (
                    <div className="flex flex-wrap gap-2">
                      {hobbiesOptions.map((opt) => (
                        <Button
                          key={opt.value}
                          type="button"
                          variant={
                            (formData.preferredHobbies || []).includes(
                              opt.value
                            )
                              ? "default"
                              : "outline"
                          }
                          size="sm"
                          onClick={() =>
                            handleMultiSelectChange(
                              "preferredHobbies",
                              opt.value
                            )
                          }
                          disabled={
                            !viewOnly &&
                            (formData.preferredHobbies || []).length >= 3 &&
                            !(formData.preferredHobbies || []).includes(
                              opt.value
                            ) &&
                            opt.value !== "no_strong_preference"
                          }
                          className={cn(
                            "rounded-full text-xs px-3 py-1.5 transition-all flex items-center",
                            (formData.preferredHobbies || []).includes(
                              opt.value
                            )
                              ? "bg-amber-500 hover:bg-amber-600 text-white border-amber-500"
                              : "border-gray-300 text-gray-600 hover:bg-gray-50 hover:border-gray-400"
                          )}
                        >
                          {opt.icon && (
                            <opt.icon className="w-3.5 h-3.5 rtl:ml-1.5 mr-1.5" />
                          )}
                          {opt.label}
                        </Button>
                      ))}
                    </div>
                  ) : (
                    <div className="mt-1 flex flex-wrap gap-1.5">
                      {renderMultiSelectBadges(
                        formData.preferredHobbies,
                        hobbiesOptions,
                        "bg-amber-100 text-amber-700",
                        "לא נבחרו תחביבים מועדפים."
                      )}
                    </div>
                  )}
                </div>
              </CardContent>
            </Card>
          </div>
        </div>
      </div>
    </div>
  );
};

export default PreferencesSection;
--- End of Content for PreferencesSection.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\user\Desktop\matchpoint\shidduch-system\src\app\components\profile\sections\ProfileSection.tsx
--------------------------------------------------------------------------------
Content:
// src/app/components/profile/sections/ProfileSection.tsx
"use client";
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from "@/components/ui/tooltip";
import React, { useState, useEffect } from "react";
import {
  Gender,
  AvailabilityStatus,
  ServiceType,
  HeadCoveringType,
  KippahType,
} from "@prisma/client";
import { Card, CardHeader, CardTitle, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Checkbox } from "@/components/ui/checkbox";
import {
  Pencil,
  Save,
  X,
  Users,
  BookOpen,
  Briefcase,
  Shield,
  Heart,
  MapPin,
  Languages,
  Palette,
  Smile,
  UserCircle,
  Info,
} from "lucide-react";
import { UserProfile } from "@/types/next-auth";
import { cn } from "@/lib/utils";
import { Badge } from "@/components/ui/badge";
import { languageOptions } from "@/lib/languageOptions"; 
import { toast } from "sonner";

const maritalStatusOptions = [
  { value: "single", label: "רווק/ה" },
  { value: "divorced", label: "גרוש/ה" },
  { value: "widowed", label: "אלמן/ה" },
  { value: "annulled", label: "נישואין שבוטלו" },
];

const religiousLevelOptions = [
  { value: "charedi", label: "חרדי/ת" },
  { value: "charedi_modern", label: "חרדי/ת מודרני/ת" },
  { value: "dati_leumi_torani", label: "דתי/ה לאומי/ת תורני/ת" },
  { value: "dati_leumi_liberal", label: "דתי/ה לאומי/ת ליברלי/ת" },
  { value: "dati_leumi_standard", label: "דתי/ה לאומי/ת (סטנדרטי)" },
  { value: "masorti_strong", label: "מסורתי/ת (קרוב/ה לדת)" },
  { value: "masorti_light", label: "מסורתי/ת (קשר קל למסורת)" },
  { value: "secular_traditional_connection", label: "חילוני/ת עם זיקה למסורת" },
  { value: "secular", label: "חילוני/ת" },
  { value: "spiritual_not_religious", label: "רוחני/ת (לאו דווקא דתי/ה)" },
  { value: "other", label: "אחר (נא לפרט ב'אודות')" },
];

const educationLevelOptions = [
  { value: "high_school", label: "תיכונית" },
  { value: "vocational", label: "מקצועית / תעודה" },
  { value: "academic_student", label: "סטודנט/ית לתואר" },
  { value: "academic_ba", label: "תואר ראשון (BA/BSc)" },
  { value: "academic_ma", label: "תואר שני (MA/MSc)" },
  { value: "academic_phd", label: "דוקטורט (PhD)" },
  { value: "yeshiva_seminary", label: "לימודים תורניים (ישיבה/מדרשה/כולל)" },
  { value: "other", label: "אחר" },
];

const serviceTypeOptions = [
  { value: ServiceType.MILITARY_COMBATANT, label: "צבאי - לוחם/ת" },
  { value: ServiceType.MILITARY_SUPPORT, label: "צבאי - תומכ/ת לחימה" },
  { value: ServiceType.MILITARY_OFFICER, label: "צבאי - קצונה" },
  {
    value: ServiceType.MILITARY_INTELLIGENCE_CYBER_TECH,
    label: "צבאי - מודיעין/סייבר/טכנולוגי",
  },
  { value: ServiceType.NATIONAL_SERVICE_ONE_YEAR, label: "שירות לאומי - שנה" },
  {
    value: ServiceType.NATIONAL_SERVICE_TWO_YEARS,
    label: "שירות לאומי - שנתיים",
  },
  { value: ServiceType.HESDER_YESHIVA, label: "ישיבת הסדר" },
  {
    value: ServiceType.YESHIVA_ONLY_POST_HS,
    label: "ישיבה גבוהה / מדרשה (ללא שירות צבאי/לאומי)",
  },
  {
    value: ServiceType.PRE_MILITARY_ACADEMY_AND_SERVICE,
    label: "מכינה קדם-צבאית ושירות",
  },
  { value: ServiceType.EXEMPTED, label: "פטור משירות" },
  { value: ServiceType.CIVILIAN_SERVICE, label: "שירות אזרחי" },
  { value: ServiceType.OTHER, label: "אחר / לא רלוונטי" },
];

const headCoveringOptions = [
  { value: HeadCoveringType.FULL_COVERAGE, label: "כיסוי ראש מלא" },
  { value: HeadCoveringType.PARTIAL_COVERAGE, label: "כיסוי ראש חלקי" },
  { value: HeadCoveringType.HAT_BERET, label: "כובע / ברט" },
  {
    value: HeadCoveringType.SCARF_ONLY_SOMETIMES,
    label: "מטפחת (רק באירועים/בית כנסת)",
  },
  { value: HeadCoveringType.NONE, label: "ללא כיסוי ראש" },
];

const kippahTypeOptions = [
  { value: KippahType.BLACK_VELVET, label: "קטיפה שחורה" },
  { value: KippahType.KNITTED_SMALL, label: "סרוגה קטנה" },
  { value: KippahType.KNITTED_LARGE, label: "סרוגה גדולה" },
  { value: KippahType.CLOTH, label: "בד" },
  { value: KippahType.BRESLEV, label: "ברסלב (לבנה גדולה)" },
  { value: KippahType.NONE_AT_WORK_OR_CASUAL, label: "לא בעבודה / ביומיום" },
  { value: KippahType.NONE_USUALLY, label: "לרוב לא חובש" },
  { value: KippahType.OTHER, label: "אחר" },
];

const characterTraitsOptions = [
  { value: "empathetic", label: "אמפתי/ת", icon: Heart },
  { value: "driven", label: "שאפתן/ית", icon: Briefcase },
  { value: "optimistic", label: "אופטימי/ת", icon: Smile },
  { value: "family_oriented", label: "משפחתי/ת", icon: Users },
  { value: "intellectual", label: "אינטלקטואל/ית", icon: BookOpen },
  { value: "organized", label: "מאורגנ/ת", icon: Palette },
  { value: "calm", label: "רגוע/ה", icon: Heart },
  { value: "humorous", label: "בעל/ת חוש הומור", icon: Smile },
  { value: "sociable", label: "חברותי/ת", icon: Users },
  { value: "sensitive", label: "רגיש/ה", icon: Heart },
  { value: "independent", label: "עצמאי/ת", icon: MapPin },
  { value: "creative", label: "יצירתי/ת", icon: Palette },
  { value: "honest", label: "כן/ה וישר/ה", icon: Shield },
  { value: "responsible", label: "אחראי/ת", icon: Shield },
  { value: "easy_going", label: "זורם/ת וקליל/ה", icon: Smile },
];

const hobbiesOptions = [
  { value: "travel", label: "טיולים", icon: MapPin },
  { value: "sports", label: "ספורט", icon: Briefcase }, 
  { value: "reading", label: "קריאה", icon: BookOpen },
  { value: "cooking_baking", label: "בישול/אפיה", icon: Palette },
  { value: "music_playing_instrument", label: "מוזיקה/נגינה", icon: Languages },
  { value: "art_crafts", label: "אומנות/יצירה", icon: Palette },
  { value: "volunteering", label: "התנדבות", icon: Heart },
  { value: "learning_courses", label: "למידה/קורסים", icon: BookOpen },
  { value: "board_games_puzzles", label: "משחקי קופסא/פאזלים", icon: Smile },
  { value: "movies_theater", label: "סרטים/תיאטרון", icon: Smile },
  { value: "dancing", label: "ריקוד", icon: Users },
  { value: "writing", label: "כתיבה", icon: BookOpen },
  { value: "nature_hiking", label: "טבע/טיולים רגליים", icon: MapPin },
  { value: "photography", label: "צילום", icon: Palette },
];

const preferredMatchmakerGenderOptions = [
  { value: "MALE", label: "משדך" },
  { value: "FEMALE", label: "שדכנית" },
  { value: "NONE", label: "ללא העדפה" },
];

interface ProfileSectionProps {
  profile: UserProfile | null;
  isEditing: boolean;
  setIsEditing: (value: boolean) => void;
  viewOnly?: boolean;
  onSave: (data: Partial<UserProfile>) => void;
}

const ensureDateObject = (
  value: string | number | Date | null | undefined
): Date | undefined => {
  if (!value) return undefined;
  if (value instanceof Date && !isNaN(value.getTime())) {
    return value;
  }
  if (typeof value === "string" || typeof value === "number") {
    const date = new Date(value);
    if (!isNaN(date.getTime())) {
      return date;
    }
  }
  return undefined;
};

const ProfileSection: React.FC<ProfileSectionProps> = ({
  profile: profileProp,
  isEditing,
  setIsEditing,
  viewOnly = false,
  onSave,
}) => {
  const [formData, setFormData] = useState<Partial<UserProfile>>({});
  const [loading, setLoading] = useState(true);
  const [initialData, setInitialData] = useState<Partial<UserProfile>>({});

  const initializeFormData = (profileData: UserProfile | null) => {
    const dataToSet: Partial<UserProfile> = {
      gender: profileData?.gender || undefined,
      birthDate: ensureDateObject(profileData?.birthDate),
      nativeLanguage: profileData?.nativeLanguage || undefined,
      additionalLanguages: profileData?.additionalLanguages || [],
      height: profileData?.height ?? undefined,
      maritalStatus: profileData?.maritalStatus || undefined,
      occupation: profileData?.occupation || "",
      education: profileData?.education || "",
      educationLevel: profileData?.educationLevel || undefined,
      city: profileData?.city || "",
      origin: profileData?.origin || "",
      religiousLevel: profileData?.religiousLevel || undefined,
      about: profileData?.about || "",
      parentStatus: profileData?.parentStatus || undefined,
      siblings: profileData?.siblings ?? undefined,
      position: profileData?.position ?? undefined,
      isProfileVisible: profileData?.isProfileVisible ?? true,
      preferredMatchmakerGender:
        profileData?.preferredMatchmakerGender || undefined,
      availabilityStatus:
        profileData?.availabilityStatus || AvailabilityStatus.AVAILABLE,
      availabilityNote: profileData?.availabilityNote || "",
      availabilityUpdatedAt: ensureDateObject(
        profileData?.availabilityUpdatedAt
      ),
      matchingNotes: profileData?.matchingNotes || "",
      shomerNegiah: profileData?.shomerNegiah ?? undefined,
      serviceType: profileData?.serviceType || undefined,
      serviceDetails: profileData?.serviceDetails || "",
      headCovering: profileData?.headCovering || undefined,
      kippahType: profileData?.kippahType || undefined,
      hasChildrenFromPrevious:
        profileData?.hasChildrenFromPrevious ?? undefined,
      profileCharacterTraits: profileData?.profileCharacterTraits || [],
      profileHobbies: profileData?.profileHobbies || [],
      aliyaCountry: profileData?.aliyaCountry || "",
      aliyaYear: profileData?.aliyaYear ?? undefined,
      preferredAgeMin: profileData?.preferredAgeMin ?? undefined,
      preferredAgeMax: profileData?.preferredAgeMax ?? undefined,
      preferredHeightMin: profileData?.preferredHeightMin ?? undefined,
      preferredHeightMax: profileData?.preferredHeightMax ?? undefined,
      preferredReligiousLevels: profileData?.preferredReligiousLevels || [],
      preferredLocations: profileData?.preferredLocations || [],
      preferredEducation: profileData?.preferredEducation || [],
      preferredOccupations: profileData?.preferredOccupations || [],
      contactPreference: profileData?.contactPreference || undefined,
      id: profileData?.id,
      userId: profileData?.userId,
      createdAt: ensureDateObject(profileData?.createdAt),
      updatedAt: ensureDateObject(profileData?.updatedAt),
      lastActive: ensureDateObject(profileData?.lastActive),
    };
    setFormData(dataToSet);
    setInitialData(dataToSet);
  };

  useEffect(() => {
    setLoading(true);
    if (profileProp) {
      initializeFormData(profileProp);
      setLoading(false);
    } else {
      const fetchProfileAndInitialize = async () => {
        try {
          const response = await fetch("/api/profile");
          if (!response.ok) throw new Error("Failed to fetch profile");
          const data = await response.json();
          if (data.success && data.profile) {
            initializeFormData(data.profile);
          } else {
            initializeFormData(null);
          }
        } catch (error) {
          console.error("Failed to fetch profile:", error);
          initializeFormData(null);
        } finally {
          setLoading(false);
        }
      };
      fetchProfileAndInitialize();
    }
  }, [profileProp]);

  const handleChange = (
    field: keyof UserProfile,
    value:
      | UserProfile[keyof UserProfile]
      | string
      | number
      | boolean
      | Date
      | string[]
      | null
  ) => {
    setFormData((prev) => {
      let finalValue: UserProfile[keyof UserProfile] | undefined = undefined;

      if (
        field === "height" ||
        field === "siblings" ||
        field === "position" ||
        field === "aliyaYear" ||
        field === "preferredAgeMin" ||
        field === "preferredAgeMax" ||
        field === "preferredHeightMin" ||
        field === "preferredHeightMax"
      ) {
        const rawValue = value as string | number;
        if (rawValue === "" || rawValue === null || rawValue === undefined) {
          finalValue = undefined;
        } else {
          const parsed = parseInt(String(rawValue), 10);
          finalValue = !isNaN(parsed)
            ? (parsed as UserProfile[typeof field])
            : undefined;
        }
      } else if (field === "birthDate") {
        finalValue = ensureDateObject(
          value as string | Date | null | undefined
        ) as UserProfile[typeof field];
      } else if (
        typeof prev[field] === "boolean" ||
        field === "shomerNegiah" ||
        field === "hasChildrenFromPrevious" ||
        field === "isProfileVisible"
      ) {
        finalValue = value as boolean as UserProfile[typeof field];
      } else if (Array.isArray(prev[field])) {
        finalValue = value as string[] as UserProfile[typeof field];
      } else if (value === "" || value === null) {
        const nullableStringFields: (keyof UserProfile)[] = [
          "nativeLanguage",
          "occupation",
          "education",
          "city",
          "origin",
          "religiousLevel",
          "about",
          "parentStatus",
          "serviceDetails",
          "aliyaCountry",
          "availabilityNote",
          "matchingNotes",
          "educationLevel",
          "maritalStatus",
          "serviceType",
          "headCovering",
          "kippahType",
          "preferredMatchmakerGender",
          "contactPreference",
        ];
        if (nullableStringFields.includes(field as keyof UserProfile)) {
          finalValue = undefined;
        } else {
          finalValue = value as UserProfile[typeof field];
        }
      } else {
        finalValue = value as UserProfile[typeof field];
      }

      return {
        ...prev,
        [field]: finalValue,
      };
    });
  };

  const handleMultiSelectToggle = (
    field: keyof UserProfile,
    optionValue: string
  ) => {
    setFormData((prev) => {
      const currentValues = (prev[field] as string[]) || [];
      const newValues = currentValues.includes(optionValue)
        ? currentValues.filter((v) => v !== optionValue)
        : [...currentValues, optionValue];
      return { ...prev, [field]: newValues };
    });
  };

  const handleSave = () => {
    if (formData.about && formData.about.trim().length < 100) {
      toast.error("שגיאת ולידציה", {
        description: 'השדה "קצת עליי" חייב להכיל לפחות 100 תווים.',
        duration: 5000,
      });
      return;
    }
    const dataToSave = { ...formData };
    onSave(dataToSave);
    setIsEditing(false);
    setInitialData(dataToSave);
  };

  const handleCancel = () => {
    setFormData(initialData);
    setIsEditing(false);
  };

  const renderDisplayValue = (
    value: string | number | Date | undefined | null,
    placeholder: string = "לא צוין"
  ) => {
    if (value === undefined || value === null || value === "") {
      return <span className="italic text-gray-500">{placeholder}</span>;
    }
    if (value instanceof Date && !isNaN(value.getTime())) {
      return new Intl.DateTimeFormat("he-IL").format(value);
    }
    return String(value);
  };

  const renderSelectDisplayValue = (
    value: string | undefined | null,
    options: { value: string; label: string }[],
    placeholder: string = "לא צוין"
  ) => {
    if (!value) {
      return <span className="italic text-gray-500">{placeholder}</span>;
    }
    const option = options.find((opt) => opt.value === value);
    return option ? (
      option.label
    ) : (
      <span className="italic text-gray-500">{placeholder}</span>
    );
  };

  const renderBooleanDisplayValue = (
    value: boolean | undefined | null,
    trueLabel: string = "כן",
    falseLabel: string = "לא",
    placeholder: string = "לא צוין"
  ) => {
    if (value === undefined || value === null) {
      return <span className="italic text-gray-500">{placeholder}</span>;
    }
    return value ? trueLabel : falseLabel;
  };

  if (loading) {
    return <div className="text-center p-4">טוען נתוני פרופיל...</div>;
  }

  const renderMultiSelectBadges = (
    fieldValues: string[] | undefined,
    options: { value: string; label: string; icon?: React.ElementType }[],
    emptyPlaceholder: string = "לא נבחרו פריטים."
  ) => {
    if (!fieldValues || fieldValues.length === 0) {
      return <p className="text-sm text-gray-500 italic">{emptyPlaceholder}</p>;
    }
    return fieldValues.map((value) => {
      const option = options.find((opt) => opt.value === value);
      return option ? (
        <Badge
          key={value}
          variant="secondary"
          className="mr-1 mb-1 bg-sky-100 text-sky-700 text-xs px-2 py-0.5 rounded-full"
        >
          {option.icon && <option.icon className="w-3 h-3 mr-1" />}
          {option.label}
        </Badge>
      ) : null;
    });
  };

  return (
    <div className="relative" dir="rtl">
      <div className="sticky top-0 z-10 bg-gradient-to-b from-white via-white/95 to-white/0 pt-4 pb-3 backdrop-blur-sm">
        <div className="container mx-auto max-w-screen-xl px-4">
          <div className="flex items-center justify-between">
            <div>
              <h1 className="text-xl md:text-2xl font-bold text-slate-800">
                פרופיל אישי
              </h1>
              <p className="text-sm text-slate-500">
                {isEditing && !viewOnly
                  ? "ערוך/י את פרטי הפרופיל שלך."
                  : "פרטי הפרופיל של המועמד/ת."}
              </p>
            </div>
            {!viewOnly && (
              <div className="flex gap-2">
                {!isEditing ? (
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={() => setIsEditing(true)}
                    className="rounded-full shadow-sm hover:shadow-md transition-all duration-300 border-cyan-400 text-cyan-700 hover:bg-cyan-50"
                  >
                    <Pencil className="w-3.5 h-3.5 ml-1.5" />
                    עריכה
                  </Button>
                ) : (
                  <>
                    <Button
                      variant="outline"
                      size="sm"
                      onClick={handleCancel}
                      className="rounded-full shadow-sm hover:shadow-md transition-all duration-300 border-gray-300 text-gray-700 hover:bg-gray-50"
                    >
                      <X className="w-3.5 h-3.5 ml-1.5" />
                      ביטול
                    </Button>
                    <Button
                      variant="default"
                      size="sm"
                      onClick={handleSave}
                      className="rounded-full shadow-sm hover:shadow-md transition-all duration-300 bg-cyan-600 hover:bg-cyan-700 text-white"
                    >
                      <Save className="w-3.5 h-3.5 ml-1.5" />
                      שמירה
                    </Button>
                  </>
                )}
              </div>
            )}
          </div>
        </div>
      </div>

      <div className="container mx-auto max-w-screen-xl py-6 px-4">
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
          <div className="space-y-6">
            <Card className="bg-white/80 backdrop-blur-md rounded-2xl shadow-lg border border-gray-200/40 overflow-hidden">
              <CardHeader className="bg-gradient-to-r from-cyan-50/40 to-pink-50/40 border-b border-gray-200/50 p-4 flex items-center space-x-2 rtl:space-x-reverse">
                <UserCircle className="w-5 h-5 text-cyan-700" />
                <CardTitle className="text-base font-semibold text-gray-700">
                  פרטים אישיים ודמוגרפיים
                </CardTitle>
              </CardHeader>
              <CardContent className="p-4 md:p-6">
                <div className="grid grid-cols-1 sm:grid-cols-2 gap-x-6 gap-y-5">
                  <div>
                    <Label className="block mb-1.5 text-xs font-medium text-gray-600">
                      מגדר
                    </Label>
                    {isEditing && !viewOnly ? (
                      <Select
                        value={formData.gender || ""}
                        onValueChange={(value) =>
                          handleChange("gender", value as Gender)
                        }
                      >
                        <SelectTrigger className="h-9 text-sm focus:ring-cyan-500">
                          <SelectValue placeholder="בחר/י מגדר" />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="MALE">זכר</SelectItem>
                          <SelectItem value="FEMALE">נקבה</SelectItem>
                        </SelectContent>
                      </Select>
                    ) : (
                      <p className="text-sm text-gray-800 font-medium mt-1">
                        {renderDisplayValue(
                          formData.gender === "MALE"
                            ? "זכר"
                            : formData.gender === "FEMALE"
                            ? "נקבה"
                            : undefined
                        )}
                      </p>
                    )}
                  </div>
                  <div>
                    <Label className="block mb-1.5 text-xs font-medium text-gray-600">
                      תאריך לידה
                    </Label>
                    {isEditing && !viewOnly ? (
                      <Input
                        type="date"
                        value={
                          formData.birthDate instanceof Date &&
                          !isNaN(formData.birthDate.getTime())
                            ? formData.birthDate.toISOString().split("T")[0]
                            : ""
                        }
                        onChange={(e) =>
                          handleChange("birthDate", e.target.value || undefined)
                        }
                        className="h-9 text-sm focus:ring-cyan-500"
                        max={new Date().toISOString().split("T")[0]}
                      />
                    ) : (
                      <p className="text-sm text-gray-800 font-medium mt-1">
                        {renderDisplayValue(formData.birthDate)}
                      </p>
                    )}
                  </div>
                  <div>
                    <Label className="block mb-1.5 text-xs font-medium text-gray-600">
                      גובה (סמ)
                    </Label>
                    {isEditing && !viewOnly ? (
                      <Input
                        type="number"
                        value={formData.height ?? ""}
                        onChange={(e) => handleChange("height", e.target.value)}
                        className="h-9 text-sm focus:ring-cyan-500"
                        placeholder="גובה בסמ"
                        min="100"
                        max="250"
                      />
                    ) : (
                      <p className="text-sm text-gray-800 font-medium mt-1">
                        {renderDisplayValue(
                          formData.height ? `${formData.height} ס"מ` : undefined
                        )}
                      </p>
                    )}
                  </div>
                  <div>
                    <Label className="block mb-1.5 text-xs font-medium text-gray-600">
                      עיר מגורים
                    </Label>
                    {isEditing && !viewOnly ? (
                      <Input
                        value={formData.city || ""}
                        onChange={(e) => handleChange("city", e.target.value)}
                        placeholder="לדוגמה: ירושלים"
                        className="h-9 text-sm focus:ring-cyan-500"
                      />
                    ) : (
                      <p className="text-sm text-gray-800 font-medium mt-1">
                        {renderDisplayValue(formData.city)}
                      </p>
                    )}
                  </div>
                  <div>
                    <Label className="block mb-1.5 text-xs font-medium text-gray-600">
                      מוצא / עדה
                    </Label>
                    {isEditing && !viewOnly ? (
                      <Input
                        value={formData.origin || ""}
                        onChange={(e) => handleChange("origin", e.target.value)}
                        placeholder="לדוגמה: אשכנזי, ספרדי"
                        className="h-9 text-sm focus:ring-cyan-500"
                      />
                    ) : (
                      <p className="text-sm text-gray-800 font-medium mt-1">
                        {renderDisplayValue(formData.origin)}
                      </p>
                    )}
                  </div>
                  <div>
                    <Label className="block mb-1.5 text-xs font-medium text-gray-600">
                      עלה/תה לארץ
                    </Label>
                    {isEditing && !viewOnly ? (
                      <Input
                        value={formData.aliyaCountry || ""}
                        onChange={(e) =>
                          handleChange("aliyaCountry", e.target.value)
                        }
                        placeholder="אם רלוונטי, מאיזו מדינה?"
                        className="h-9 text-sm focus:ring-cyan-500"
                      />
                    ) : (
                      <p className="text-sm text-gray-800 font-medium mt-1">
                        {renderDisplayValue(
                          formData.aliyaCountry,
                          "לא רלוונטי"
                        )}
                      </p>
                    )}
                  </div>
                  <div>
                    <Label className="block mb-1.5 text-xs font-medium text-gray-600">
                      שנת עליה
                    </Label>
                    {isEditing && !viewOnly ? (
                      <Input
                        type="number"
                        value={formData.aliyaYear ?? ""}
                        onChange={(e) =>
                          handleChange("aliyaYear", e.target.value)
                        }
                        disabled={!formData.aliyaCountry}
                        placeholder="אם רלוונטי"
                        className="h-9 text-sm focus:ring-cyan-500"
                        min="1900"
                        max={new Date().getFullYear()}
                      />
                    ) : (
                      <p className="text-sm text-gray-800 font-medium mt-1">
                        {renderDisplayValue(
                          formData.aliyaYear,
                          formData.aliyaCountry ? "לא צוינה שנה" : "לא רלוונטי"
                        )}
                      </p>
                    )}
                  </div>
                  <div>
                    <Label className="block mb-1.5 text-xs font-medium text-gray-600">
                      שפת אם
                    </Label>
                    {isEditing && !viewOnly ? (
                      <Select
                        value={formData.nativeLanguage || ""}
                        onValueChange={(value) =>
                          handleChange("nativeLanguage", value || undefined)
                        }
                      >
                        <SelectTrigger className="h-9 text-sm focus:ring-cyan-500">
                          <SelectValue placeholder="בחר/י שפת אם" />
                        </SelectTrigger>
                        <SelectContent className="max-h-[200px]">
                          {languageOptions.map((lang) => (
                            <SelectItem key={lang.value} value={lang.value}>
                              {lang.label}
                            </SelectItem>
                          ))}
                        </SelectContent>
                      </Select>
                    ) : (
                      <p className="text-sm text-gray-800 font-medium mt-1">
                        {renderSelectDisplayValue(
                          formData.nativeLanguage,
                          languageOptions
                        )}
                      </p>
                    )}
                  </div>
                  <div className="sm:col-span-2 lg:col-span-1">
                    <Label className="block mb-1.5 text-xs font-medium text-gray-600">
                      שפות נוספות
                    </Label>
                    {isEditing && !viewOnly ? (
                      <Select
                        onValueChange={(value) => {
                          const currentLanguages =
                            formData.additionalLanguages || [];
                          if (!currentLanguages.includes(value)) {
                            handleChange("additionalLanguages", [
                              ...currentLanguages,
                              value,
                            ]);
                          }
                        }}
                      >
                        <SelectTrigger className="h-9 text-sm focus:ring-cyan-500">
                          <SelectValue placeholder="הוסף/י שפה..." />
                        </SelectTrigger>
                        <SelectContent className="max-h-[200px]">
                          {languageOptions
                            .filter(
                              (lang) =>
                                !(formData.additionalLanguages || []).includes(
                                  lang.value
                                ) && lang.value !== formData.nativeLanguage
                            )
                            .map((lang) => (
                              <SelectItem key={lang.value} value={lang.value}>
                                {lang.label}
                              </SelectItem>
                            ))}
                        </SelectContent>
                      </Select>
                    ) : null}
                    <div className="mt-2 flex flex-wrap gap-1.5">
                      {(formData.additionalLanguages || []).map((langValue) => {
                        const lang = languageOptions.find(
                          (l) => l.value === langValue
                        );
                        return lang ? (
                          <Badge
                            key={lang.value}
                            variant="secondary"
                            className="bg-cyan-100/70 text-cyan-800 px-2 py-0.5 rounded-full text-[11px] font-medium flex items-center"
                          >
                            {lang.label}
                            {isEditing && !viewOnly && (
                              <button
                                type="button"
                                onClick={() =>
                                  handleChange(
                                    "additionalLanguages",
                                    (formData.additionalLanguages || []).filter(
                                      (l) => l !== langValue
                                    )
                                  )
                                }
                                className="mr-1.5 text-cyan-600 hover:text-cyan-800 text-xs"
                                aria-label={`הסר ${lang.label}`}
                              >
                                ×
                              </button>
                            )}
                          </Badge>
                        ) : null;
                      })}
                      {(!isEditing || viewOnly) &&
                        (!formData.additionalLanguages ||
                          formData.additionalLanguages.length === 0) && (
                          <p className="text-sm text-gray-500 italic">
                            לא צוינו שפות נוספות.
                          </p>
                        )}
                    </div>
                  </div>
                </div>
              </CardContent>
            </Card>

            <Card className="bg-white/80 backdrop-blur-md rounded-2xl shadow-lg border border-gray-200/40 overflow-hidden">
              <CardHeader className="bg-gradient-to-r from-purple-50/40 to-indigo-50/40 border-b border-gray-200/50 p-4 flex items-center space-x-2 rtl:space-x-reverse">
                <Users className="w-5 h-5 text-purple-700" />
                <CardTitle className="text-base font-semibold text-gray-700">
                  מצב משפחתי ורקע
                </CardTitle>
              </CardHeader>
              <CardContent className="p-4 md:p-6">
                <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-x-6 gap-y-5 items-start">
                  <div>
                    <Label className="block mb-1.5 text-xs font-medium text-gray-600">
                      מצב משפחתי
                    </Label>
                    {isEditing && !viewOnly ? (
                      <Select
                        value={formData.maritalStatus || ""}
                        onValueChange={(value) =>
                          handleChange("maritalStatus", value || undefined)
                        }
                      >
                        <SelectTrigger className="h-9 text-sm focus:ring-cyan-500">
                          <SelectValue placeholder="בחר/י מצב" />
                        </SelectTrigger>
                        <SelectContent>
                          {maritalStatusOptions.map((opt) => (
                            <SelectItem key={opt.value} value={opt.value}>
                              {opt.label}
                            </SelectItem>
                          ))}
                        </SelectContent>
                      </Select>
                    ) : (
                      <p className="text-sm text-gray-800 font-medium mt-1">
                        {renderSelectDisplayValue(
                          formData.maritalStatus,
                          maritalStatusOptions
                        )}
                      </p>
                    )}
                  </div>
                  {(formData.maritalStatus === "divorced" ||
                    formData.maritalStatus === "widowed" ||
                    formData.maritalStatus === "annulled") && (
                    <div
                      className={cn(
                        "pt-1 sm:pt-0",
                        isEditing && !viewOnly ? "sm:pt-5" : "sm:pt-0"
                      )}
                    >
                      <Label className="block mb-1.5 text-xs font-medium text-gray-600">
                        ילדים מקשר קודם?
                      </Label>
                      {isEditing && !viewOnly ? (
                        <div className="flex items-center space-x-2 rtl:space-x-reverse mt-2">
                          <Checkbox
                            id="hasChildrenFromPrevious"
                            checked={formData.hasChildrenFromPrevious || false}
                            onCheckedChange={(checked) =>
                              handleChange(
                                "hasChildrenFromPrevious",
                                checked as boolean
                              )
                            }
                          />
                          <Label
                            htmlFor="hasChildrenFromPrevious"
                            className="text-sm font-normal text-gray-700"
                          >
                            יש ילדים
                          </Label>
                        </div>
                      ) : (
                        <p className="text-sm text-gray-800 font-medium mt-1">
                          {renderBooleanDisplayValue(
                            formData.hasChildrenFromPrevious
                          )}
                        </p>
                      )}
                    </div>
                  )}
                  <div>
                    <Label className="block mb-1.5 text-xs font-medium text-gray-600">
                      מצב הורים
                    </Label>
                    {isEditing && !viewOnly ? (
                      <Input
                        value={formData.parentStatus || ""}
                        onChange={(e) =>
                          handleChange("parentStatus", e.target.value)
                        }
                        placeholder="לדוגמה: נשואים, גרושים"
                        className="h-9 text-sm focus:ring-cyan-500"
                      />
                    ) : (
                      <p className="text-sm text-gray-800 font-medium mt-1">
                        {renderDisplayValue(formData.parentStatus)}
                      </p>
                    )}
                  </div>
                  <div>
                    <Label className="block mb-1.5 text-xs font-medium text-gray-600">
                      מספר אחים/אחיות
                    </Label>
                    {isEditing && !viewOnly ? (
                      <Input
                        type="number"
                        value={formData.siblings ?? ""}
                        onChange={(e) =>
                          handleChange("siblings", e.target.value)
                        }
                        className="h-9 text-sm focus:ring-cyan-500"
                        placeholder="כולל אותך"
                        min="0"
                      />
                    ) : (
                      <p className="text-sm text-gray-800 font-medium mt-1">
                        {renderDisplayValue(formData.siblings)}
                      </p>
                    )}
                  </div>
                  <div>
                    <Label className="block mb-1.5 text-xs font-medium text-gray-600">
                      מיקום במשפחה
                    </Label>
                    {isEditing && !viewOnly ? (
                      <Input
                        type="number"
                        value={formData.position ?? ""}
                        onChange={(e) =>
                          handleChange("position", e.target.value)
                        }
                        className="h-9 text-sm focus:ring-cyan-500"
                        placeholder="לדוגמה: 1 (בכור/ה)"
                        min="0"
                      />
                    ) : (
                      <p className="text-sm text-gray-800 font-medium mt-1">
                        {renderDisplayValue(formData.position)}
                      </p>
                    )}
                  </div>
                </div>
              </CardContent>
            </Card>

            <Card className="bg-white/80 backdrop-blur-md rounded-2xl shadow-lg border border-gray-200/40 overflow-hidden">
              <CardHeader className="bg-gradient-to-r from-yellow-50/40 to-amber-50/40 border-b border-gray-200/50 p-4 flex items-center space-x-2 rtl:space-x-reverse">
                <BookOpen className="w-5 h-5 text-amber-700" />
                <CardTitle className="text-base font-semibold text-gray-700">
                  דת ואורח חיים
                </CardTitle>
              </CardHeader>
              <CardContent className="p-4 md:p-6">
                <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-x-6 gap-y-5 items-start">
                  <div>
                    <Label className="block mb-1.5 text-xs font-medium text-gray-600">
                      רמה דתית
                    </Label>
                    {isEditing && !viewOnly ? (
                      <Select
                        value={formData.religiousLevel || ""}
                        onValueChange={(value) =>
                          handleChange("religiousLevel", value || undefined)
                        }
                      >
                        <SelectTrigger className="h-9 text-sm focus:ring-cyan-500">
                          <SelectValue placeholder="בחר/י רמה" />
                        </SelectTrigger>
                        <SelectContent className="max-h-[250px]">
                          {religiousLevelOptions.map((opt) => (
                            <SelectItem key={opt.value} value={opt.value}>
                              {opt.label}
                            </SelectItem>
                          ))}
                        </SelectContent>
                      </Select>
                    ) : (
                      <p className="text-sm text-gray-800 font-medium mt-1">
                        {renderSelectDisplayValue(
                          formData.religiousLevel,
                          religiousLevelOptions
                        )}
                      </p>
                    )}
                  </div>
                  <div
                    className={cn(
                      "pt-1 sm:pt-0",
                      isEditing && !viewOnly ? "sm:pt-5" : "sm:pt-0"
                    )}
                  >
                    <Label className="block mb-1.5 text-xs font-medium text-gray-600">
                      שומר/ת נגיעה?
                    </Label>
                    {isEditing && !viewOnly ? (
                      <div className="flex items-center space-x-2 rtl:space-x-reverse mt-2">
                        <Checkbox
                          id="shomerNegiah"
                          checked={formData.shomerNegiah || false}
                          onCheckedChange={(checked) =>
                            handleChange("shomerNegiah", checked as boolean)
                          }
                        />
                        <Label
                          htmlFor="shomerNegiah"
                          className="text-sm font-normal text-gray-700"
                        >
                          כן
                        </Label>
                      </div>
                    ) : (
                      <p className="text-sm text-gray-800 font-medium mt-1">
                        {renderBooleanDisplayValue(formData.shomerNegiah)}
                      </p>
                    )}
                  </div>
                  {formData.gender === Gender.FEMALE && (
                    <div>
                      <Label className="block mb-1.5 text-xs font-medium text-gray-600">
                        כיסוי ראש
                      </Label>
                      {isEditing && !viewOnly ? (
                        <Select
                          value={formData.headCovering || ""}
                          onValueChange={(value) =>
                            handleChange(
                              "headCovering",
                              (value as HeadCoveringType) || undefined
                            )
                          }
                        >
                          <SelectTrigger className="h-9 text-sm focus:ring-cyan-500">
                            <SelectValue placeholder="בחר/י סוג כיסוי" />
                          </SelectTrigger>
                          <SelectContent>
                            {headCoveringOptions.map((opt) => (
                              <SelectItem key={opt.value} value={opt.value}>
                                {opt.label}
                              </SelectItem>
                            ))}
                          </SelectContent>
                        </Select>
                      ) : (
                        <p className="text-sm text-gray-800 font-medium mt-1">
                          {renderSelectDisplayValue(
                            formData.headCovering,
                            headCoveringOptions,
                            "ללא"
                          )}
                        </p>
                      )}
                    </div>
                  )}
                  {formData.gender === Gender.MALE && (
                    <div>
                      <Label className="block mb-1.5 text-xs font-medium text-gray-600">
                        סוג כיפה
                      </Label>
                      {isEditing && !viewOnly ? (
                        <Select
                          value={formData.kippahType || ""}
                          onValueChange={(value) =>
                            handleChange(
                              "kippahType",
                              (value as KippahType) || undefined
                            )
                          }
                        >
                          <SelectTrigger className="h-9 text-sm focus:ring-cyan-500">
                            <SelectValue placeholder="בחר/י סוג כיפה" />
                          </SelectTrigger>
                          <SelectContent className="max-h-[200px]">
                            {kippahTypeOptions.map((opt) => (
                              <SelectItem key={opt.value} value={opt.value}>
                                {opt.label}
                              </SelectItem>
                            ))}
                          </SelectContent>
                        </Select>
                      ) : (
                        <p className="text-sm text-gray-800 font-medium mt-1">
                          {renderSelectDisplayValue(
                            formData.kippahType,
                            kippahTypeOptions,
                            "ללא"
                          )}
                        </p>
                      )}
                    </div>
                  )}
                  <div>
                    <Label className="block mb-1.5 text-xs font-medium text-gray-600">
                      מגדר שדכן/ית מועדף
                    </Label>
                    {isEditing && !viewOnly ? (
                      <Select
                        value={formData.preferredMatchmakerGender || ""}
                        onValueChange={(value) =>
                          handleChange(
                            "preferredMatchmakerGender",
                            (value as Gender) || undefined
                          )
                        }
                      >
                        <SelectTrigger className="h-9 text-sm focus:ring-cyan-500">
                          <SelectValue placeholder="בחר/י העדפה (לא חובה)" />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="MALE">משדך</SelectItem>
                          <SelectItem value="FEMALE">שדכנית</SelectItem>
                          <SelectItem value="NONE">ללא העדפה</SelectItem>
                        </SelectContent>
                      </Select>
                    ) : (
                      <p className="text-sm text-gray-800 font-medium mt-1">
                        {renderSelectDisplayValue(
                          formData.preferredMatchmakerGender,
                          preferredMatchmakerGenderOptions,
                          "ללא העדפה"
                        )}
                      </p>
                    )}
                  </div>
                </div>
              </CardContent>
            </Card>
          </div>

          <div className="space-y-6">
            <Card className="bg-white/80 backdrop-blur-md rounded-2xl shadow-lg border border-gray-200/40 overflow-hidden">
              <CardHeader className="bg-gradient-to-r from-slate-50/40 to-gray-100/40 border-b border-gray-200/50 p-4 flex items-center space-x-2 rtl:space-x-reverse">
                <Info className="w-5 h-5 text-slate-600" />
                <CardTitle className="text-base font-semibold text-gray-700">
                  קצת עלי ומידע נוסף
                </CardTitle>
              </CardHeader>
              <CardContent className="p-4 md:p-6">
                <div className="space-y-6">
                  <div>
                  <div className="flex items-center gap-1.5 mb-2">
                    <Label htmlFor="about" className="text-sm font-medium text-gray-700">
                        ספר/י קצת על עצמך (תיאור חופשי)
                    </Label>
                    <TooltipProvider delayDuration={100}>
                        <Tooltip>
                            <TooltipTrigger type="button" className="text-gray-400 hover:text-gray-600">
                                <Info className="w-4 h-4" />
                            </TooltipTrigger>
                            <TooltipContent side="top" className="max-w-xs text-center">
                                <p>כאן המקום שלך לבלוט! ספר/י על התשוקות שלך, מה מצחיק אותך, ומה את/ה מחפש/ת. 
                                <br/>
                                <strong className="text-cyan-600">שים/י לב: נדרשים לפחות 100 תווים.</strong></p>
                            </TooltipContent>
                        </Tooltip>
                    </TooltipProvider>
                  </div>
                    {isEditing && !viewOnly ? (
                      <div>
                        <Textarea
                          id="about"
                          value={formData.about || ""}
                          onChange={(e) => handleChange("about", e.target.value)}
                          className={cn(
                            "text-sm focus:ring-cyan-500 min-h-[120px] rounded-lg",
                            formData.about && formData.about.trim().length < 100 ? "border-red-400 focus:ring-red-300" : ""
                          )}
                          placeholder="תאר/י את עצמך, מה מאפיין אותך, מה חשוב לך..."
                          rows={5}
                        />
                         {formData.about && (
                            <div className={cn(
                                "text-xs mt-1 text-right",
                                formData.about.trim().length < 100 ? "text-red-600" : "text-gray-500"
                            )}>
                                {formData.about.trim().length} / 100+ תווים
                            </div>
                         )}
                      </div>
                    ) : (
                      <p className="mt-1 text-sm text-gray-700 whitespace-pre-wrap min-h-[60px] bg-slate-50/70 p-3 rounded-lg border border-slate-200/50">
                        {formData.about || (
                          <span className="text-gray-500 italic">
                            לא הוזן תיאור אישי.
                          </span>
                        )}
                      </p>
                    )}
                  </div>
                  <div>
                   <div className="flex items-center gap-1.5 mb-2">
                    <Label className="text-sm font-medium text-gray-700">
                        הערות נוספות לשדכן/ית (לא יוצג לצד השני)
                    </Label>
                    <TooltipProvider delayDuration={100}>
                        <Tooltip>
                        <TooltipTrigger type="button" className="text-gray-400 hover:text-gray-600">
                            <Info className="w-4 h-4" />
                        </TooltipTrigger>
                        <TooltipContent side="top" className="max-w-xs text-center">
                            <p>מידע שחשוב לנו לדעת כדי למצוא התאמה טובה, אך לא תרצה/י שיופיע בפרופיל הגלוי. למשל: נושאים רגישים, העדפות ספציפיות מאוד, או רקע נוסף.</p>
                        </TooltipContent>
                        </Tooltip>
                    </TooltipProvider>
                    </div>
                    {isEditing && !viewOnly ? (
                      <Textarea
                        value={formData.matchingNotes || ""}
                        onChange={(e) =>
                          handleChange("matchingNotes", e.target.value)
                        }
                        className="text-sm focus:ring-cyan-500 min-h-[90px] rounded-lg"
                        placeholder="דברים נוספים שחשוב שהשדכן/ית יידעו עליך..."
                        rows={3}
                      />
                    ) : (
                      <p className="mt-1 text-sm text-gray-700 whitespace-pre-wrap min-h-[50px] bg-slate-50/70 p-3 rounded-lg border border-slate-200/50">
                        {formData.matchingNotes || (
                          <span className="text-gray-500 italic">
                            אין הערות נוספות לשדכן/ית.
                          </span>
                        )}
                      </p>
                    )}
                  </div>
                </div>
              </CardContent>
            </Card>

            <Card className="bg-white/80 backdrop-blur-md rounded-2xl shadow-lg border border-gray-200/40 overflow-hidden">
              <CardHeader className="bg-gradient-to-r from-teal-50/40 to-green-50/40 border-b border-gray-200/50 p-4 flex items-center space-x-2 rtl:space-x-reverse">
                <Briefcase className="w-5 h-5 text-teal-700" />
                <CardTitle className="text-base font-semibold text-gray-700">
                  השכלה, עיסוק ושירות
                </CardTitle>
              </CardHeader>
              <CardContent className="p-4 md:p-6">
                <div className="grid grid-cols-1 sm:grid-cols-2 gap-x-6 gap-y-5">
                  <div>
                    <Label className="block mb-1.5 text-xs font-medium text-gray-600">
                      רמת השכלה
                    </Label>
                    {isEditing && !viewOnly ? (
                      <Select
                        value={formData.educationLevel || ""}
                        onValueChange={(value) =>
                          handleChange("educationLevel", value || undefined)
                        }
                      >
                        <SelectTrigger className="h-9 text-sm focus:ring-cyan-500">
                          <SelectValue placeholder="בחר/י רמה" />
                        </SelectTrigger>
                        <SelectContent>
                          {educationLevelOptions.map((opt) => (
                            <SelectItem key={opt.value} value={opt.value}>
                              {opt.label}
                            </SelectItem>
                          ))}
                        </SelectContent>
                      </Select>
                    ) : (
                      <p className="text-sm text-gray-800 font-medium mt-1">
                        {renderSelectDisplayValue(
                          formData.educationLevel,
                          educationLevelOptions
                        )}
                      </p>
                    )}
                  </div>
                  <div className="sm:col-span-2">
                    <Label className="block mb-1.5 text-xs font-medium text-gray-600">
                      פירוט השכלה (מוסד, תחום)
                    </Label>
                    {isEditing && !viewOnly ? (
                      <Input
                        value={formData.education || ""}
                        onChange={(e) =>
                          handleChange("education", e.target.value)
                        }
                        placeholder="לדוגמה: אוני' בר אילן, משפטים"
                        className="h-9 text-sm focus:ring-cyan-500"
                      />
                    ) : (
                      <p className="text-sm text-gray-800 font-medium mt-1">
                        {renderDisplayValue(formData.education)}
                      </p>
                    )}
                  </div>
                  <div className="sm:col-span-2">
                    <Label className="block mb-1.5 text-xs font-medium text-gray-600">
                      עיסוק נוכחי
                    </Label>
                    {isEditing && !viewOnly ? (
                      <Input
                        value={formData.occupation || ""}
                        onChange={(e) =>
                          handleChange("occupation", e.target.value)
                        }
                        placeholder="לדוגמה: מורה, מהנדס תוכנה"
                        className="h-9 text-sm focus:ring-cyan-500"
                      />
                    ) : (
                      <p className="text-sm text-gray-800 font-medium mt-1">
                        {renderDisplayValue(formData.occupation)}
                      </p>
                    )}
                  </div>
                  <div>
                    <Label className="block mb-1.5 text-xs font-medium text-gray-600">
                      שירות (צבאי/לאומי/אחר)
                    </Label>
                    {isEditing && !viewOnly ? (
                      <Select
                        value={formData.serviceType || ""}
                        onValueChange={(value) =>
                          handleChange(
                            "serviceType",
                            (value as ServiceType) || undefined
                          )
                        }
                      >
                        <SelectTrigger className="h-9 text-sm focus:ring-cyan-500">
                          <SelectValue placeholder="בחר/י סוג שירות" />
                        </SelectTrigger>
                        <SelectContent className="max-h-[250px]">
                          {serviceTypeOptions.map((opt) => (
                            <SelectItem key={opt.value} value={opt.value}>
                              {opt.label}
                            </SelectItem>
                          ))}
                        </SelectContent>
                      </Select>
                    ) : (
                      <p className="text-sm text-gray-800 font-medium mt-1">
                        {renderSelectDisplayValue(
                          formData.serviceType,
                          serviceTypeOptions
                        )}
                      </p>
                    )}
                  </div>
                  <div className="sm:col-span-2">
                    <Label className="block mb-1.5 text-xs font-medium text-gray-600">
                      פירוט על השירות
                    </Label>
                    {isEditing && !viewOnly ? (
                      <Input
                        value={formData.serviceDetails || ""}
                        onChange={(e) =>
                          handleChange("serviceDetails", e.target.value)
                        }
                        placeholder="חיל, יחידה, תפקיד, שם ישיבה/מכינה"
                        className="h-9 text-sm focus:ring-cyan-500"
                      />
                    ) : (
                      <p className="text-sm text-gray-800 font-medium mt-1">
                        {renderDisplayValue(formData.serviceDetails)}
                      </p>
                    )}
                  </div>
                </div>
              </CardContent>
            </Card>

            <Card className="bg-white/80 backdrop-blur-md rounded-2xl shadow-lg border border-gray-200/40 overflow-hidden">
              <CardHeader className="bg-gradient-to-r from-amber-50/40 to-yellow-50/40 border-b border-gray-200/50 p-4 flex items-center space-x-2 rtl:space-x-reverse">
                <Smile className="w-5 h-5 text-amber-600" />
                <CardTitle className="text-base font-semibold text-gray-700">
                  תכונות אופי ותחביבים
                </CardTitle>
              </CardHeader>
              <CardContent className="p-4 md:p-6 space-y-6">
                <div>
                  <Label className="block mb-2 text-sm font-medium text-gray-700">
                    תכונות אופי בולטות (עד 3)
                  </Label>
                  {isEditing && !viewOnly ? (
                    <div className="flex flex-wrap gap-2">
                      {characterTraitsOptions.map((trait) => (
                        <Button
                          key={trait.value}
                          type="button"
                          variant={
                            (formData.profileCharacterTraits || []).includes(
                              trait.value
                            )
                              ? "default"
                              : "outline"
                          }
                          size="sm"
                          onClick={() =>
                            handleMultiSelectToggle(
                              "profileCharacterTraits",
                              trait.value
                            )
                          }
                          disabled={
                            !viewOnly &&
                            (formData.profileCharacterTraits || []).length >=
                              3 &&
                            !(formData.profileCharacterTraits || []).includes(
                              trait.value
                            )
                          }
                          className={cn(
                            "rounded-full text-xs px-3 py-1.5 transition-all", 
                            (formData.profileCharacterTraits || []).includes(
                              trait.value
                            )
                              ? "bg-amber-500 hover:bg-amber-600 text-white border-amber-500"
                              : "border-gray-300 text-gray-600 hover:bg-gray-50 hover:border-gray-400"
                          )}
                        >
                          {trait.icon && (
                            <trait.icon className="w-3.5 h-3.5 ml-1.5 rtl:mr-1.5 rtl:ml-0" />
                          )}
                          {trait.label}
                        </Button>
                      ))}
                    </div>
                  ) : (
                    <div className="mt-1 flex flex-wrap gap-1.5">
                      {renderMultiSelectBadges(
                        formData.profileCharacterTraits,
                        characterTraitsOptions,
                        "לא נבחרו תכונות אופי."
                      )}
                    </div>
                  )}
                </div>
                <div>
                  <Label className="block mb-2 text-sm font-medium text-gray-700">
                    תחביבים עיקריים (עד 3)
                  </Label>
                  {isEditing && !viewOnly ? (
                    <div className="flex flex-wrap gap-2">
                      {hobbiesOptions.map((hobby) => (
                        <Button
                          key={hobby.value}
                          type="button"
                          variant={
                            (formData.profileHobbies || []).includes(
                              hobby.value
                            )
                              ? "default"
                              : "outline"
                          }
                          size="sm"
                          onClick={() =>
                            handleMultiSelectToggle(
                              "profileHobbies",
                              hobby.value
                            )
                          }
                          disabled={
                            !viewOnly &&
                            (formData.profileHobbies || []).length >= 3 &&
                            !(formData.profileHobbies || []).includes(
                              hobby.value
                            )
                          }
                          className={cn(
                            "rounded-full text-xs px-3 py-1.5 transition-all",
                            (formData.profileHobbies || []).includes(
                              hobby.value
                            )
                              ? "bg-sky-500 hover:bg-sky-600 text-white border-sky-500"
                              : "border-gray-300 text-gray-600 hover:bg-gray-50 hover:border-gray-400"
                          )}
                        >
                          {hobby.icon && (
                            <hobby.icon className="w-3.5 h-3.5 ml-1.5 rtl:mr-1.5 rtl:ml-0" />
                          )}
                          {hobby.label}
                        </Button>
                      ))}
                    </div>
                  ) : (
                    <div className="mt-1 flex flex-wrap gap-1.5">
                      {renderMultiSelectBadges(
                        formData.profileHobbies,
                        hobbiesOptions,
                        "לא נבחרו תחביבים."
                      )}
                    </div>
                  )}
                </div>
              </CardContent>
            </Card>
          </div>
        </div>
      </div>
    </div>
  );
};

export default ProfileSection;
--- End of Content for ProfileSection.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\user\Desktop\matchpoint\shidduch-system\src\app\components\profile\sections\QuestionnaireResponsesSection.tsx
--------------------------------------------------------------------------------
Content:
// src/app/components/profile/sections/QuestionnaireResponsesSection.tsx

import React, { useState, useMemo, useEffect } from "react"; // Added useEffect
import Link from "next/link";
import {
  Card,
  CardHeader,
  CardTitle,
  CardContent,
  CardDescription,
} from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { Textarea } from "@/components/ui/textarea";
import { Switch } from "@/components/ui/switch";
import {
  Book,
  CheckCircle,
  Clock,
  Pencil,
  X,
  Save,
  Eye,
  EyeOff,
  Loader2,
  ArrowRight,
} from "lucide-react";
import { cn } from "@/lib/utils";
import { toast } from "sonner";
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip";
import type {
  QuestionnaireResponse,
  FormattedAnswer,
  UpdateValue,
} from "@/types/next-auth";

import { WORLDS } from "../constants";

// --- קבוע עבור כתובת השאלון ---
const QUESTIONNAIRE_URL = "/questionnaire"; // שימוש בנתיב יחסי אם האפליקציה רצה באותו דומיין
// אם אתה צריך את הכתובת המלאה (פחות מומלץ אם זה באותו אתר):
// const QUESTIONNAIRE_URL = "http://localhost:3000/questionnaire";

interface QuestionnaireResponsesSectionProps {
  questionnaire: QuestionnaireResponse | null;
  onUpdate?: (
    world: string,
    questionId: string,
    value: UpdateValue
  ) => Promise<void>;
  isEditable?: boolean;
  isFirstInList?: boolean;
  viewMode?: "matchmaker" | "candidate";
}

// --- QuestionCard Component ---
interface QuestionCardProps {
  question: string;
  answer: FormattedAnswer;
  isEditingGlobally: boolean;
  worldKey: string;
  onUpdate: (
    world: string,
    questionId: string,
    value: UpdateValue
  ) => Promise<void>;
  isFirstInList?: boolean;
}

const QuestionCard: React.FC<QuestionCardProps> = ({
  question,
  answer,
  isEditingGlobally,
  worldKey,
  onUpdate,
  isFirstInList,
}) => {
  const [isEditingText, setIsEditingText] = useState(false);
  const [editValue, setEditValue] = useState(answer.displayText);
  const [isSavingText, setIsSavingText] = useState(false);
  const [isSavingVisibility, setIsSavingVisibility] = useState(false);

  // --- START OF MODIFIED SECTION ---
  // Local state for optimistic UI update of visibility
  const [currentIsVisible, setCurrentIsVisible] = useState(
    answer.isVisible ?? true
  );

  // Sync local state if the prop changes (e.g., due to parent update or initial load)
  useEffect(() => {
    setCurrentIsVisible(answer.isVisible ?? true);
  }, [answer.isVisible]);
  // --- END OF MODIFIED SECTION ---

  const isSaving = isSavingText || isSavingVisibility;

  const handleStartEdit = () => {
    if (isSaving) return;
    setIsEditingText(true);
    setEditValue(answer.displayText);
  };

  const handleSaveText = async () => {
    if (!editValue?.trim()) {
      toast.error("לא ניתן לשמור תשובה ריקה.");
      return;
    }
    if (editValue.trim() === answer.displayText) {
      setIsEditingText(false);
      return;
    }

    setIsSavingText(true);
    try {
      await onUpdate(worldKey, answer.questionId, {
        type: "answer",
        value: editValue.trim(),
      });
      toast.success("התשובה עודכנה בהצלחה");
      setIsEditingText(false);
      // No need to update editValue here, as parent will re-render with new answer prop
    } catch (error) {
      console.error("Error updating answer:", error);
      toast.error("שגיאה בעדכון התשובה");
    } finally {
      setIsSavingText(false);
    }
  };

  const handleCancelEdit = () => {
    setIsEditingText(false);
    setEditValue(answer.displayText);
  };

  const handleVisibilityChange = async (newIsVisibleState: boolean) => {
    // --- START OF MODIFIED SECTION ---
    // Optimistically update the local UI state
    setCurrentIsVisible(newIsVisibleState);
    // --- END OF MODIFIED SECTION ---
    setIsSavingVisibility(true);
    try {
      await onUpdate(worldKey, answer.questionId, {
        type: "visibility",
        isVisible: newIsVisibleState,
      });
      toast.success("הגדרות הנראות עודכנו");
      // If successful, the parent should eventually re-render with the updated answer.isVisible,
      // and the useEffect will sync if needed, but currentIsVisible is already correct.
    } catch (error) {
      console.error("Error updating visibility:", error);
      toast.error("שגיאה בעדכון הנראות");
      // --- START OF MODIFIED SECTION ---
      // Revert optimistic update on error
      setCurrentIsVisible(answer.isVisible ?? true);
      // --- END OF MODIFIED SECTION ---
    } finally {
      setIsSavingVisibility(false);
    }
  };

  // --- START OF MODIFIED SECTION ---
  // Update visibilityLabel to use currentIsVisible
  const visibilityLabel = `הצג תשובה זו למועמדים: ${
    currentIsVisible ? "מופעל" : "כבוי"
  }`;
  // --- END OF MODIFIED SECTION ---

  return (
    <div className="rounded-lg border bg-card p-4 shadow-sm transition-shadow duration-300 hover:shadow-md">
      <div className="flex items-start justify-between gap-4">
        <div className="flex-1 min-w-0">
          <div className="flex flex-col sm:flex-row items-start sm:items-center justify-between mb-3 gap-2">
            <h4 className="font-medium text-sm sm:text-base flex-1 text-right">
              {question}
            </h4>
            <div
              className="flex items-center gap-2 self-end sm:self-center"
              dir="ltr"
            >
              {isSavingVisibility && (
                <Loader2 className="h-4 w-4 animate-spin text-muted-foreground" />
              )}
              <TooltipProvider delayDuration={200}>
                <Tooltip>
                  <TooltipTrigger asChild>
                    <div
                      className={cn(
                        "flex items-center gap-1.5 px-2.5 py-1 rounded-full text-xs shrink-0 flex-row-reverse",
                        "transition-colors duration-200",
                        // --- START OF MODIFIED SECTION ---
                        currentIsVisible // Use currentIsVisible for styling
                          ? // --- END OF MODIFIED SECTION ---
                            "bg-emerald-100/70 text-emerald-800"
                          : "bg-gray-100 text-gray-600"
                      )}
                    >
                      {/* --- START OF MODIFIED SECTION --- */}
                      {currentIsVisible ? ( // Use currentIsVisible for icon and text
                        <Eye className="h-3.5 w-3.5" />
                      ) : (
                        <EyeOff className="h-3.5 w-3.5" />
                      )}
                      <span className="font-medium whitespace-nowrap" dir="rtl">
                        {currentIsVisible ? "גלוי למועמדים" : "מוסתר"}
                      </span>
                      {/* --- END OF MODIFIED SECTION --- */}
                    </div>
                  </TooltipTrigger>
                  <TooltipContent side="top" dir="rtl">
                    <p>
                      {/* --- START OF MODIFIED SECTION --- */}
                      {currentIsVisible // Use currentIsVisible for tooltip content
                        ? // --- END OF MODIFIED SECTION ---
                          "תשובה זו גלויה למועמדים פוטנציאליים"
                        : "תשובה זו מוסתרת וגלויה רק לך ולשדכנים"}
                    </p>
                  </TooltipContent>
                </Tooltip>
              </TooltipProvider>

              {isEditingGlobally && (
                <div id={isFirstInList ? 'onboarding-target-visibility-control' : undefined}>
                <Switch
                  // --- START OF MODIFIED SECTION ---
                  checked={currentIsVisible} // Control Switch with local state
                  // --- END OF MODIFIED SECTION ---
                  onCheckedChange={handleVisibilityChange}
                  disabled={isSaving}
                  className="data-[state=checked]:bg-emerald-500 data-[state=unchecked]:bg-gray-300 transform scale-90"
                  aria-label={visibilityLabel}
                />
                </div>
              )}
            </div>
          </div>

          {isEditingText ? (
            <div className="space-y-2 mt-1">
              <Textarea
                value={editValue}
                onChange={(e) => setEditValue(e.target.value)}
                className="min-h-[80px] text-sm focus:ring-cyan-500 focus:border-cyan-500"
                placeholder="הקלד/י את תשובתך כאן..."
                disabled={isSavingText}
              />
              <div className="flex justify-end gap-2">
                <Button
                  size="sm"
                  variant="ghost"
                  onClick={handleCancelEdit}
                  disabled={isSavingText}
                  className="text-gray-600 hover:bg-gray-100"
                >
                  <X className="h-4 w-4 ml-1" />
                  ביטול
                </Button>
                <Button
                  size="sm"
                  onClick={handleSaveText}
                  disabled={isSavingText || !editValue?.trim()}
                  className="bg-cyan-600 hover:bg-cyan-700 text-white"
                >
                  {isSavingText ? (
                    <Loader2 className="h-4 w-4 animate-spin" />
                  ) : (
                    <CheckCircle className="h-4 w-4 ml-1" />
                  )}
                  שמירה
                </Button>
              </div>
            </div>
          ) : (
            <div className="relative group overflow-hidden mt-1">
              <div className="p-3 bg-gray-50/50 rounded-md border border-gray-200/60 min-h-[40px]">
                <p className="text-sm text-gray-800 break-words overflow-wrap-anywhere whitespace-pre-wrap">
                  {answer.displayText}
                </p>
                <TooltipProvider delayDuration={200}>
                  <Tooltip>
                    <TooltipTrigger asChild>
                      <span className="text-xs text-gray-400 block mt-2 text-left">
                        {new Date(answer.answeredAt).toLocaleDateString(
                          "he-IL",
                          { year: "numeric", month: "2-digit", day: "2-digit" }
                        )}
                      </span>
                    </TooltipTrigger>
                    <TooltipContent side="top" dir="rtl">
                      <p>תאריך עדכון אחרון</p>
                    </TooltipContent>
                  </Tooltip>
                </TooltipProvider>
              </div>
              {isEditingGlobally && !isSaving && (
                <Button
                  variant="ghost"
                  size="icon"
                  className="absolute top-0 right-0 opacity-0 group-hover:opacity-100 transition-opacity duration-200 h-7 w-7 text-cyan-600 hover:bg-cyan-50"
                  onClick={handleStartEdit}
                  title="עריכת תשובה"
                >
                  <Pencil className="h-4 w-4" />
                  <span className="sr-only">עריכת תשובה</span>
                </Button>
              )}
              {isSavingText && !isEditingText && (
                <div className="absolute top-1 right-1">
                  <Loader2 className="h-4 w-4 animate-spin text-cyan-500" />
                </div>
              )}
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

// --- WorldSection Component ---
// (ללא שינוי)
interface WorldSectionProps {
  worldKey: keyof typeof WORLDS;
  worldConfig: (typeof WORLDS)[keyof typeof WORLDS];
  answers: FormattedAnswer[];
  isEditingGlobally: boolean;
  onUpdate: (
    world: string,
    questionId: string,
    value: UpdateValue
  ) => Promise<void>;
  isCompleted: boolean;
  className?: string;
}

const WorldSection: React.FC<WorldSectionProps> = ({
  worldKey,
  worldConfig,
  answers,
  isEditingGlobally,
  onUpdate,
  isCompleted,
  className,
}) => {
  const { title, icon: Icon, color, bgColor, borderColor } = worldConfig;

  return (
    <Card
      className={cn(
        "overflow-hidden shadow-sm border",
        bgColor,
        borderColor,
        className
      )}
    >
      <CardHeader
        className="p-4 border-b"
        style={{
          borderColor: `rgba(var(--${color.split("-")[1]}-200-rgb), 0.5)`,
        }}
      >
        <div className="flex items-center justify-between">
          <div className="flex items-center gap-3">
            <div
              className={cn(
                "p-2 rounded-full",
                color.replace("text-", "bg-") + "/10"
              )}
            >
              <Icon className={cn("h-5 w-5", color)} />
            </div>
            <div>
              <CardTitle className="text-md sm:text-lg text-gray-800">
                {title}
              </CardTitle>
              <CardDescription className="text-xs text-gray-500 mt-0.5">
                {answers.length} {answers.length === 1 ? "תשובה" : "תשובות"}
              </CardDescription>
            </div>
          </div>
          <Badge
            variant={isCompleted ? "success" : "secondary"}
            className={cn(
              "gap-1 text-xs px-2 py-0.5 rounded-full",
              isCompleted
                ? "bg-emerald-100 text-emerald-800"
                : "bg-blue-100 text-blue-800"
            )}
          >
            {isCompleted ? (
              <CheckCircle className="h-3 w-3" />
            ) : (
              <Clock className="h-3 w-3" />
            )}
            {isCompleted ? "הושלם" : "בתהליך"}
          </Badge>
        </div>
      </CardHeader>
      <CardContent className="p-4 pt-4">
        <div className="space-y-4">
          {answers.map((answer, index) => (
            <QuestionCard
              key={answer.questionId}
              question={answer.question}
              answer={answer}
              isFirstInList={index === 0}
              isEditingGlobally={isEditingGlobally}
              worldKey={worldKey}
              onUpdate={onUpdate}
              
            />
          ))}
        </div>
      </CardContent>
    </Card>
  );
};

// --- QuestionnaireResponsesSection Component ---
const QuestionnaireResponsesSection: React.FC<
  QuestionnaireResponsesSectionProps
> = ({ questionnaire, onUpdate, isEditable = false }) => {
  const [isEditingGlobally, setIsEditingGlobally] = useState(false);

  const worldsWithAnswers = useMemo(() => {
    if (!questionnaire?.formattedAnswers) return [];
    return Object.entries(WORLDS)
      .map(([key, config]) => ({
        key: key as keyof typeof WORLDS,
        config,
        answers:
          questionnaire.formattedAnswers?.[
            key as keyof typeof questionnaire.formattedAnswers
          ] ?? [],
        isCompleted:
          (questionnaire[
            `${key}Completed` as keyof QuestionnaireResponse
          ] as boolean) ?? false,
      }))
      .filter((world) => world.answers.length > 0);
  }, [questionnaire]);

  if (!questionnaire) {
    return (
      <Card className="text-center py-12 text-gray-500 bg-gray-50 rounded-lg border border-dashed">
        <Book className="h-10 w-10 mx-auto mb-3 opacity-50 text-gray-400" />
        <p className="font-medium">לא מולא שאלון עבור פרופיל זה.</p>
        <p className="text-sm mt-1">אין תשובות להציג.</p>
        <div className="mt-6">
          <Button
            asChild
            variant="default"
            className="bg-cyan-600 hover:bg-cyan-700"
          >
            <Link
              href={QUESTIONNAIRE_URL}
              className="flex items-center gap-1.5"
            >
              מלא את השאלון
              <ArrowRight className="h-4 w-4" />
            </Link>
          </Button>
        </div>
      </Card>
    );
  }

  const hasAnyAnswers = worldsWithAnswers.length > 0;

  return (
    <div className="space-y-6">
      <Card className="shadow-sm border">
        <CardHeader className="p-4">
          <div className="flex flex-col sm:flex-row items-start sm:items-center justify-between gap-3">
            <div className="flex items-center gap-3">
              {questionnaire.completed ? (
                <CheckCircle className="h-5 w-5 text-emerald-500 flex-shrink-0" />
              ) : (
                <Clock className="h-5 w-5 text-blue-500 flex-shrink-0" />
              )}
              <div>
                <p className="font-semibold text-base text-gray-800">
                  {questionnaire.completed ? "שאלון הושלם" : "שאלון בתהליך"}
                </p>
                <p className="text-xs text-gray-500 mt-0.5">
                  {hasAnyAnswers
                    ? `עודכן לאחרונה: ${new Date(
                        questionnaire.lastSaved
                      ).toLocaleDateString("he-IL")}`
                    : "השאלון טרם החל"}
                </p>
              </div>
            </div>

            <div className="flex flex-col sm:flex-row items-center gap-2 self-end sm:self-center">
              <Button
                asChild
                variant="outline"
                size="sm"
                className="rounded-full px-4 py-2 text-xs sm:text-sm"
              >
                <Link
                  href={QUESTIONNAIRE_URL}
                  className="flex items-center gap-1.5"
                >
                  עבור לשאלון
                  <ArrowRight className="h-4 w-4" />
                </Link>
              </Button>
              {isEditable && hasAnyAnswers && onUpdate && (
                <Button
                  variant="outline"
                  size="sm"
                  onClick={() => setIsEditingGlobally(!isEditingGlobally)}
                  className="gap-1.5 rounded-full px-4 py-2 text-xs sm:text-sm"
                >
                  {isEditingGlobally ? (
                    <>
                      <Save className="h-4 w-4" />
                      סיום עריכה
                    </>
                  ) : (
                    <>
                      <Pencil className="h-4 w-4" />
                      עריכת תשובות
                    </>
                  )}
                </Button>
              )}
            </div>
          </div>
        </CardHeader>
      </Card>

      {hasAnyAnswers ? (
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          {worldsWithAnswers.map(({ key, config, answers, isCompleted }) => (
            <WorldSection
              key={key}
              worldKey={key}
              worldConfig={config}
              answers={answers}
              isEditingGlobally={isEditingGlobally}
              onUpdate={onUpdate!}
              isCompleted={isCompleted}
            />
          ))}
        </div>
      ) : (
        <div className="text-center py-10 text-gray-500 bg-gray-50/50 rounded-lg border border-gray-200">
          <Book className="h-8 w-8 mx-auto mb-2 opacity-50 text-gray-400" />
          <p className="font-medium text-lg">השאלון טרם מולא במלואו</p>
          <p className="text-sm mt-1 text-gray-600">
            עדיין אין תשובות להציג, אך ניתן להמשיך למלא את השאלון.
          </p>
          <div className="mt-6">
            <Button
              asChild
              variant="default"
              className="bg-cyan-600 hover:bg-cyan-700 text-white"
            >
              <Link
                href={QUESTIONNAIRE_URL}
                className="flex items-center gap-1.5 px-6 py-2"
              >
                המשך מילוי השאלון
                <ArrowRight className="h-4 w-4" />
              </Link>
            </Button>
          </div>
        </div>
      )}
    </div>
  );
};

export default QuestionnaireResponsesSection;
--- End of Content for QuestionnaireResponsesSection.tsx ---

================================================================================
Directory: C:\Users\user\Desktop\matchpoint\shidduch-system\src\app\components\profile\types
================================================================================

--------------------------------------------------------------------------------
File: C:\Users\user\Desktop\matchpoint\shidduch-system\src\app\components\profile\types\profile.ts
--------------------------------------------------------------------------------
Content:
import type { UserProfile, UserImage, QuestionnaireResponse } from "@/types/next-auth";

// Define specific types for questionnaire updates
export interface QuestionnaireUpdateValue {
  type: 'answer' | 'visibility';
  value?: string;
  isVisible?: boolean;
}

// Interfaces for the main sections
export interface PhotosSectionProps {
  images: UserImage[];
  isUploading: boolean;
  disabled?: boolean;
  onUpload: (file: File) => Promise<void>;
  onSetMain: (imageId: string) => Promise<void>;
  onDelete: (imageId: string) => Promise<void>;
}


export interface PreferencesSectionProps {
  profile: UserProfile | null;
  isEditing: boolean;
  viewOnly?: boolean;
  setIsEditing: (value: boolean) => void;
  onChange: (data: Partial<UserProfile>) => void;
}

export interface QuestionnaireResponsesSectionProps {
  questionnaire: QuestionnaireResponse | null;
  onUpdate?: (world: string, questionId: string, value: QuestionnaireUpdateValue) => Promise<void>;
  isEditable?: boolean;
  viewMode?: "matchmaker" | "candidate";
}

// Types for the extended profile data
export interface ExtendedProfileData {
  personalityTraits?: {
    temperament?: string;
    decisionMaking?: string;
    stressManagement?: string;
    communicationStyle?: string;
  };
  spiritualProfile?: {
    prayerStyle?: string;
    secularStudiesAttitude?: string;
    modestyLevel?: string;
    childrenEducationApproach?: string;
  };
  familyBackground?: {
    parentsSpiritualLevel?: string;
    parentsOccupations?: {
      father?: string;
      mother?: string;
    };
    familyDynamics?: string;
  };
  lifestylePreferences?: {
    careerAspiration?: string;
    futureStudyPlans?: string;
    livingPreferences?: {
      proximity?: string;
    };
    relationshipExpectations?: string;
  };
  healthProfile?: {
    generalHealth?: string;
    dietaryRestrictions?: string[];
    physicalActivity?: string;
  };
  personalValues?: {
    parentalRespect?: number;
    communityInvolvement?: string;
    volunteeringPreferences?: string;
    financialManagement?: string;
  };
  futureGoals?: string[];
  [key: string]: unknown;
}

// Additional utility types
export type ViewMode = "matchmaker" | "candidate";
export type CardSize = "sm" | "md" | "lg";
--- End of Content for profile.ts ---

--------------------------------------------------------------------------------
File: C:\Users\user\Desktop\matchpoint\shidduch-system\src\app\components\profile\types\questionnaire.ts
--------------------------------------------------------------------------------
Content:
// src/components/shared/profile/types/questionnaire.ts

export type QuestionnaireAnswerValue = {
  type: 'answer';
  value: string;
} | {
  type: 'visibility';
  isVisible: boolean;
} | string | number | boolean;

export interface FormattedAnswer {
  questionId: string;
  question: string;
  value: QuestionnaireAnswerValue;
  displayText: string;
  answeredAt: string;
  category?: string;
  isVisible: boolean;
}

export interface QuestionnaireResponse {
  id: string;
  userId: string;
  formattedAnswers: {
    values: FormattedAnswer[];
    personality: FormattedAnswer[];
    relationship: FormattedAnswer[];
    partner: FormattedAnswer[];
    religion: FormattedAnswer[];
  };
  valuesCompleted: boolean;
  personalityCompleted: boolean;
  relationshipCompleted: boolean;
  partnerCompleted: boolean;
  religionCompleted: boolean;
  worldsCompleted: string[];
  completed: boolean;
  startedAt: string | Date;
  completedAt?: string | Date;
  lastSaved: string | Date;
}

export interface QuestionnaireWorld {
  key: string;
  title: string;
  icon: React.ElementType;
  color: string;
  bgColor: string;
  borderColor: string;
}

export interface QuestionCardProps {
  question: string;
  answer: FormattedAnswer;
  isEditing: boolean;
  onEdit: (value: string) => void;
  onVisibilityChange: (isVisible: boolean) => void;
}

export interface WorldSectionProps {
  title: string;
  icon: React.ElementType;
  answers: FormattedAnswer[];
  isEditing: boolean;
  onEdit: (questionId: string, value: string) => void;
  onVisibilityChange: (questionId: string, isVisible: boolean) => void;
  isCompleted: boolean;
  className?: string;
}
--- End of Content for questionnaire.ts ---

