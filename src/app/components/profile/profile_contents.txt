################################################################################
# Directory Content Map For: C:\Users\user\Desktop\matchpoint\shidduch-system\src\app\components\profile
# Generated on: 2025-06-22 16:43:01
################################################################################

================================================================================
Directory: C:\Users\user\Desktop\matchpoint\shidduch-system\src\app\components\profile
================================================================================

--------------------------------------------------------------------------------
File: C:\Users\user\Desktop\matchpoint\shidduch-system\src\app\components\profile\ProfileCard.tsx
--------------------------------------------------------------------------------
Content:
// src/app/components/profile/ProfileCard.tsx
import React, { useState, useMemo, useCallback, useEffect } from "react";
import Image from "next/image";
import { cn } from "@/lib/utils";
import {
  ResizableHandle,
  ResizablePanel,
  ResizablePanelGroup,
} from "@/components/ui/resizable";

// UI Components
import { Card } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import {
  Dialog,
  DialogContent,
  DialogTitle,
  DialogHeader,
  DialogFooter,
} from "@/components/ui/dialog";
import { ScrollArea, ScrollBar } from "@/components/ui/scroll-area"; // <--- ודא שזה מיובא
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip";

// Icons
import {
  User,
  Heart,
  FileText,
  Image as ImageIcon,
  Info as InfoIcon,
  Eye,
  Phone,
  ChevronLeft,
  ChevronRight,
  Briefcase,
  GraduationCap,
  Users,
  BookOpen,
  School,
  Lock,
  Languages,
  Calendar,
  Star,
  MapPin,
  CheckCircle,
  Clock,
  Cake,
  Gem,
  Sparkles,
  Users2,
  Award,
  Palette,
  Smile,
  X,
  BookMarked,
  Maximize,
  Minimize,
  GripVertical,
  Search,
  Target,
  UserCheck,
  Link,
  Handshake,
  Edit3,
  ExternalLink,
  Bot,
  ShieldQuestion,
} from "lucide-react";

// Constants
const WORLDS: {
  [key: string]: { label: string; icon: React.ElementType; color: string };
} = {
  values: { label: "ערכים ועקרונות", icon: BookOpen, color: "blue" },
  personality: { label: "אישיות ותכונות", icon: Smile, color: "green" },
  relationship: { label: "זוגיות ומשפחה", icon: Heart, color: "rose" },
  partner: { label: "ציפיות מבן/בת הזוג", icon: Users, color: "indigo" },
  religion: { label: "דת ואמונה", icon: BookMarked, color: "amber" },
  general: { label: "שאלות כלליות", icon: FileText, color: "slate" },
};

// Types
import type {
  UserProfile,
  UserImage as UserImageType,
  QuestionnaireResponse,
  FormattedAnswer,
  ServiceType,
  HeadCoveringType,
  KippahType,
} from "@/types/next-auth";

// --- Helper Functions ---
const getInitials = (firstName?: string, lastName?: string): string => {
  let initials = "";
  if (firstName && firstName.length > 0) initials += firstName[0];
  if (lastName && lastName.length > 0) initials += lastName[0];
  if (initials.length === 0 && firstName && firstName.length > 0) {
    initials = firstName.length > 1 ? firstName.substring(0, 2) : firstName[0];
  }
  return initials.toUpperCase() || "?";
};

const calculateAge = (birthDate: Date | string | null | undefined): number => {
  if (!birthDate) return 0;
  try {
    const today = new Date();
    const birth = new Date(birthDate);
    if (isNaN(birth.getTime())) return 0;
    let age = today.getFullYear() - birth.getFullYear();
    const monthDiff = today.getMonth() - birth.getMonth();
    if (
      monthDiff < 0 ||
      (monthDiff === 0 && today.getDate() < birth.getDate())
    ) {
      age--;
    }
    return age > 0 ? age : 0;
  } catch (e) {
    if (process.env.NODE_ENV === "development")
      console.error("Error calculating age:", e);
    return 0;
  }
};

const formatAvailabilityStatus = (
  status: UserProfile["availabilityStatus"] | undefined
) => {
  switch (status) {
    case "AVAILABLE":
      return {
        text: "פנוי/ה להצעות",
        color: "bg-emerald-500",
        icon: CheckCircle,
      };
    case "UNAVAILABLE":
      return { text: "לא פנוי/ה כרגע", color: "bg-red-500", icon: X };
    case "DATING":
      return { text: "בתהליך הכרות", color: "bg-amber-500", icon: Clock };
    case "PAUSED":
      return { text: "בהפסקה מהצעות", color: "bg-sky-500", icon: Clock };
    case "ENGAGED":
      return { text: "מאורס/ת", color: "bg-fuchsia-500", icon: Heart };
    case "MARRIED":
      return { text: "נשוי/אה", color: "bg-rose-500", icon: Heart };
    default:
      return { text: "סטטוס לא ידוע", color: "bg-slate-500", icon: InfoIcon };
  }
};

const formatCategoryLabel = (
  value: string | null | undefined,
  placeholder: string = "לא צוין"
): string => {
  if (!value || value.trim() === "") return placeholder;
  // Enhanced formatter for mixed case and specific abbreviations if needed
  // For now, keeping the existing logic which is generally good.
  // Example of more complex: value.replace(/_/g, ' ').replace(/\b(HS|BA|MA|PhD)\b/g, match => match.toUpperCase()).replace(/\b\w/g, l => l.toUpperCase());
  return value
    .replace(/_/g, " ")
    .replace(/\b(hs)\b/gi, (match) => match.toUpperCase()) // Example for HS
    .replace(/\b\w/g, (l) => l.toUpperCase())
    .replace(/ Hs$/, " HS") // Corrects trailing "Hs"
    .replace(/ Yes$/, " Yes")
    .replace(/ No$/, " No");
};

const formatBooleanPreference = (
  value: boolean | null | undefined,
  yesLabel: string = "כן",
  noLabel: string = "לא",
  notSpecifiedLabel: string = "לא צוין"
): string => {
  if (value === true) return yesLabel;
  if (value === false) return noLabel;
  return notSpecifiedLabel;
};

const formatStringBooleanPreference = (
  value: string | null | undefined,
  options: { [key: string]: string } = {
    yes: "כן",
    no: "לא",
    flexible: "גמיש/ה",
  },
  notSpecifiedLabel: string = "לא צוין"
): string => {
  if (value && options[value.toLowerCase()]) {
    return options[value.toLowerCase()];
  }
  return notSpecifiedLabel;
};

// --- Helper Components ---
const DetailItem: React.FC<{
  icon: React.ElementType;
  label: string;
  value: React.ReactNode;
  className?: string;
  iconColorClass?: string;
  valueClassName?: string;
  tooltip?: string;
}> = ({
  icon: Icon,
  label,
  value,
  className,
  iconColorClass = "text-gray-500",
  valueClassName,
  tooltip,
}) => {
  const content = (
    <div className={cn("flex items-start gap-1.5 sm:gap-2", className)}>
      <Icon
        className={cn(
          "w-3.5 h-3.5 mt-0.5 sm:mt-1 flex-shrink-0 sm:w-4 sm:h-4",
          iconColorClass
        )}
      />
      <div>
        <p className="text-[11px] sm:text-xs font-medium text-gray-500">
          {label}
        </p>
        <p
          className={cn(
            "text-xs sm:text-sm font-semibold text-gray-800 min-w-0 break-words",
            valueClassName
          )}
        >
          {value || "לא צוין"}
        </p>
      </div>
    </div>
  );

  if (tooltip) {
    return (
      <Tooltip>
        <TooltipTrigger asChild>{content}</TooltipTrigger>
        <TooltipContent side="top" className="max-w-xs text-center">
          <p>{tooltip}</p>
        </TooltipContent>
      </Tooltip>
    );
  }
  return content;
};

const EmptyState: React.FC<{
  icon: React.ElementType;
  message: string;
  description?: string;
  className?: string;
}> = ({ icon: Icon, message, description, className }) => (
  <div
    className={cn(
      "flex flex-col items-center justify-center py-6 sm:py-10 text-center",
      className
    )}
  >
    <Icon className="w-10 h-10 sm:w-12 sm:h-12 mb-2.5 sm:mb-3 text-gray-400/70" />
    <p className="text-sm sm:text-base font-semibold text-gray-600">
      {message}
    </p>
    {description && (
      <p className="text-xs sm:text-sm text-gray-500 mt-1 max-w-xs">
        {description}
      </p>
    )}
  </div>
);

const SectionCard: React.FC<{
  title: string;
  icon?: React.ElementType;
  children: React.ReactNode;
  className?: string;
  contentClassName?: string;
  titleClassName?: string;
  action?: React.ReactNode;
  description?: string;
}> = ({
  title,
  icon: Icon,
  children,
  className,
  contentClassName,
  titleClassName,
  action,
  description,
}) => {
  return (
    <div
      className={cn(
        "bg-white rounded-lg sm:rounded-xl shadow-lg border border-gray-200/60 overflow-hidden flex flex-col min-w-0",
        className
      )}
    >
      <div
        className={cn(
          "flex items-center justify-between gap-2 p-2.5 sm:p-3 md:p-3.5 border-b border-gray-200/70 bg-slate-50/80 min-w-0",
          titleClassName
        )}
      >
        <div className="flex items-center gap-1.5 sm:gap-2 min-w-0">
          {Icon && (
            <Icon className="w-4 h-4 sm:w-5 sm:h-5 text-cyan-600 flex-shrink-0" />
          )}
          <div className="min-w-0">
            <h3 className="text-sm sm:text-base md:text-lg font-semibold text-gray-700 truncate">
              {title}
            </h3>
            {description && (
              <p className="text-[11px] sm:text-xs text-gray-500 mt-0.5 truncate">
                {description}
              </p>
            )}
          </div>
        </div>
        {action && <div className="ml-auto flex-shrink-0">{action}</div>}
      </div>
      <div className={cn("p-2.5 sm:p-3 md:p-4 min-w-0", contentClassName)}>
        {children}
      </div>
    </div>
  );
};

// --- Profile Header Component ---
const ProfileHeader: React.FC<{
  profile: UserProfile;
  age: number; // This is already calculated
  userInitials: string;
  mainImageToDisplay: UserImageType | null;
  availability: ReturnType<typeof formatAvailabilityStatus>;
  viewMode: "matchmaker" | "candidate";
}> = ({
  profile,
  age,
  userInitials,
  mainImageToDisplay,
  availability,
  viewMode,
}) => {
  // Log 1: Check incoming props and calculated age at the component level
  console.log(
    "[ProfileHeader] Props:",
    {
      birthDate: profile.birthDate,
      birthDateIsApproximate: profile.birthDateIsApproximate,
      calculatedAge: age,
      firstName: profile.user?.firstName, // For identification
    }
  );

  const allProfileDetails = useMemo(
    () => {
      // Log 2: Inside useMemo, before defining the age detail object
      console.log(
        "[ProfileHeader useMemo] Values for age calculation:",
        {
          age, // Calculated age passed to useMemo
          birthDateIsApproximate: profile.birthDateIsApproximate,
        }
      );

      return [
        {
          label: "גיל",
          value: (() => {
            // Log 3: Inside the IIFE for age value
            console.log(
              "[ProfileHeader Age IIFE] Checking conditions:",
              {
                currentAge: age,
                isApprox: profile.birthDateIsApproximate,
              }
            );

            if (age > 0) {
              console.log("[ProfileHeader Age IIFE] Condition: age > 0 is TRUE");
              return (
                <>
                  {age}
                  {profile.birthDateIsApproximate && (
                    <Tooltip>
                      <TooltipTrigger asChild>
                        <span className="text-xs text-gray-500 cursor-help"> (משוער)</span>
                      </TooltipTrigger>
                      <TooltipContent side="top">
                        <p className="text-xs max-w-xs text-center">
                          הגיל הוזן על ידי השדכן והוא משקף את הגיל בקירוב
                        </p>
                      </TooltipContent>
                    </Tooltip>
                  )}
                </>
              );
            }

            console.log("[ProfileHeader Age IIFE] Condition: age > 0 is FALSE");
            if (profile.birthDateIsApproximate === true) {
              console.log("[ProfileHeader Age IIFE] Condition: profile.birthDateIsApproximate === true is TRUE");
              return (
                <Tooltip>
                  <TooltipTrigger asChild>
                    <span>משוער (לא צוין ערך)</span>
                  </TooltipTrigger>
                  <TooltipContent side="top">
                    <p className="text-xs max-w-xs text-center">
                      צוין שהגיל הוא הערכה, אך לא הוזן תאריך לידה ספציפי.
                    </p>
                  </TooltipContent>
                </Tooltip>
              );
            }
            console.log("[ProfileHeader Age IIFE] Condition: profile.birthDateIsApproximate === true is FALSE, returning '-'");
            return "-";
          })(),
          icon: Cake,
          color: "pink-600",
          condition: age > 0 || profile.birthDateIsApproximate === true,
        },
        // ... (rest of allProfileDetails objects)
        {
          label: "מצב משפחתי",
          value: profile.maritalStatus
            ? formatCategoryLabel(profile.maritalStatus, "-")
            : "-",
          icon: Heart,
          color: "rose-600",
          condition: !!profile.maritalStatus,
        },
        {
          label: "סטטוס",
          value: availability.text,
          icon: availability.icon,
          color: availability.color.replace("bg-", ""),
          isBadge: true,
          badgeColor: availability.color,
          badgeTextColor: "text-white",
        },
        {
          label: "עיר",
          value: profile.city,
          icon: MapPin,
          color: "teal-600",
          condition: !!profile.city,
        },
        {
          label: "מוצא",
          value: profile.origin,
          icon: Gem,
          color: "purple-600",
          condition: !!profile.origin,
        },
        {
          label: "רמה דתית",
          value: profile.religiousLevel
            ? formatCategoryLabel(profile.religiousLevel)
            : "-",
          icon: BookMarked,
          color: "indigo-600",
          condition: !!profile.religiousLevel,
        },
        {
          label: "עיסוק",
          value: profile.occupation,
          icon: Briefcase,
          color: "emerald-600",
          condition: !!profile.occupation,
        },
        {
          label: "השכלה",
          value: profile.educationLevel
            ? formatCategoryLabel(profile.educationLevel)
            : profile.education || "-",
          icon: GraduationCap,
          color: "sky-600",
          condition: !!(profile.educationLevel || profile.education),
        },
        {
          label: "גובה",
          value: profile.height ? `${profile.height} ס״מ` : "-",
          icon: User,
          color: "slate-600",
          condition: !!profile.height,
        },
        {
          label: "שומר/ת נגיעה",
          value: formatBooleanPreference(profile.shomerNegiah),
          icon: Sparkles,
          color: "pink-600",
          condition:
            typeof profile.shomerNegiah === "boolean" ||
            profile.shomerNegiah === null,
        },
        ...(profile.gender === "FEMALE"
          ? [
              {
                label: "כיסוי ראש",
                value: profile.headCovering
                  ? formatCategoryLabel(profile.headCovering)
                  : "-",
                icon: UserCheck,
                color: "slate-600",
                condition: !!profile.headCovering,
              },
            ]
          : []),
        ...(profile.gender === "MALE"
          ? [
              {
                label: "סוג כיפה",
                value: profile.kippahType
                  ? formatCategoryLabel(profile.kippahType)
                  : "-",
                icon: UserCheck,
                color: "slate-600",
                condition: !!profile.kippahType,
              },
            ]
          : []),
        {
          label: "שפת אם",
          value: profile.nativeLanguage
            ? formatCategoryLabel(profile.nativeLanguage)
            : "-",
          icon: Languages,
          color: "emerald-600",
          condition: !!profile.nativeLanguage,
        },
      ].filter(
        (detail) =>
          detail.condition !== false && detail.value && detail.value !== "-"
      );
    },
    // Dependencies for useMemo
    [profile, age, availability] // profile includes birthDate, birthDateIsApproximate
  );

  // ... (rest of ProfileHeader JSX)
  return (
    <div className="p-3 sm:p-4 md:p-5 bg-gradient-to-br from-slate-100 via-white to-sky-100/30 border-b border-slate-200/80">
      <div className="flex flex-col sm:flex-row items-center sm:items-start gap-3 sm:gap-4 md:gap-6">
        <div className="relative h-20 w-20 sm:h-24 sm:w-24 md:h-32 md:w-32 rounded-full overflow-hidden border-2 border-white shadow-xl ring-2 ring-cyan-500/60 flex-shrink-0">
          {mainImageToDisplay && mainImageToDisplay.url ? (
            <Image
              src={mainImageToDisplay.url}
              alt={`תמונת פרופיל ראשית של ${
                profile.user?.firstName || "מועמד"
              }`}
              fill
              className="object-cover"
              sizes="(max-width: 640px) 80px, (max-width: 768px) 96px, 128px"
              priority
            />
          ) : (
            <div className="w-full h-full flex items-center justify-center bg-gradient-to-br from-slate-200 to-slate-300">
              <span className="text-3xl sm:text-4xl md:text-5xl font-medium text-slate-500">
                {userInitials}
              </span>
            </div>
          )}
        </div>
        <div className="flex-grow text-center sm:text-right space-y-2 sm:space-y-2.5">
          <div>
            <h1 className="text-xl sm:text-2xl md:text-3xl font-bold text-slate-800">
              {profile.user?.firstName || "שם פרטי"}{" "}
              {profile.user?.lastName || "שם משפחה"}
            </h1>
          </div>
          <div className="grid grid-cols-2 gap-x-2 gap-y-1.5 pt-1 sm:grid-cols-3 sm:gap-x-3 sm:gap-y-2 md:grid-cols-3 lg:grid-cols-4">
            {allProfileDetails.map((detail, index) => {
              const IconComponent = detail.icon;
              const valueContent =
                typeof detail.value === "string"
                  ? detail.value
                  : React.isValidElement(detail.value)
                  ? detail.value
                  : "-";

              if (detail.isBadge) {
                return (
                  <div key={index} className="flex items-center gap-1">
                    <IconComponent
                      className={cn(
                        "w-3 h-3 sm:w-3.5 sm:h-3.5 flex-shrink-0",
                        detail.badgeTextColor
                          ? detail.badgeTextColor
                          : `text-${detail.color}`
                      )}
                    />
                    <div className="min-w-0">
                      <span className="text-[10px] sm:text-xs text-slate-500 whitespace-nowrap">
                        {detail.label}:
                      </span>
                      <Badge
                        className={cn(
                          "text-[9px] sm:text-[10px] px-1 py-px sm:px-1.5 sm:py-0.5 font-medium ml-0.5 sm:ml-1",
                          detail.badgeColor,
                          detail.badgeTextColor
                        )}
                      >
                        {valueContent}
                      </Badge>
                    </div>
                  </div>
                );
              }
              return (
                <div key={index} className="flex items-center gap-1 min-w-0">
                  <IconComponent
                    className={cn(
                      "w-3 h-3 sm:w-3.5 sm:h-3.5 flex-shrink-0",
                      `text-${detail.color}`
                    )}
                  />
                  <div className="min-w-0">
                    <span className="text-[10px] sm:text-xs text-slate-500 whitespace-nowrap">
                        {detail.label}:
                    </span>
                    <span
                      className="ml-0.5 sm:ml-1 text-xs sm:text-sm font-medium text-slate-700 truncate"
                      title={
                        typeof valueContent === "string" && valueContent.length > 20
                          ? valueContent
                          : undefined
                      }
                    >
                      {valueContent}
                    </span>
                  </div>
                </div>
              );
            })}
          </div>
          {profile.lastActive && viewMode === "matchmaker" && (
            <p className="text-[10px] sm:text-xs text-slate-500 flex items-center gap-1 pt-1 sm:pt-1.5 justify-center sm:justify-start">
              <Clock className="w-2.5 h-2.5 sm:w-3 sm:h-3" />
              נצפה לאחרונה:{" "}
              {new Date(profile.lastActive).toLocaleDateString("he-IL", {
                day: "2-digit",
                month: "2-digit",
                year: "2-digit",
              })}
            </p>
          )}
          {viewMode === "matchmaker" && (
            <div className="pt-1 sm:pt-2 flex justify-center sm:justify-start">
              <Button
                variant="outline"
                size="xs" // ensures it's small
                className="text-cyan-600 border-cyan-500 hover:bg-cyan-50 text-[10px] sm:text-xs px-2 py-1"
              >
                <Link className="w-3 h-3 sm:w-3.5 sm:h-3.5 ml-1 sm:ml-1.5" />
                הצע התאמה
              </Button>
            </div>
          )}
        </div>
      </div>
    </div>
  );
};


// ProfileCard.tsx - QuestionnaireItem component

const QuestionnaireItem: React.FC<{
  answer: FormattedAnswer;
  worldColor?: string;
}> = ({ answer, worldColor = "slate" }) => {
  return (
    <div
      className={cn(
        "p-2.5 sm:p-3.5 rounded-md sm:rounded-lg border hover:shadow-md transition-shadow",
        `bg-${worldColor}-50/50 border-${worldColor}-200/70`,
        "flex flex-col min-w-0" // min-w-0 חשוב למניעת גלישה של האלמנט עצמו
      )}
    >
      <p // Question
        className={cn(
          "text-xs sm:text-sm font-medium mb-1 sm:mb-1.5 min-w-0 break-words", // break-words לשאלה (בדרך כלל מספיק)
          `text-${worldColor}-700`
        )}
      >
        {answer.question}
      </p>
      <p // Answer
        className={cn(
          "text-sm sm:text-base font-semibold text-slate-800 whitespace-pre-wrap min-w-0",
          "break-all" // <--- שינוי: מ-break-words ל-break-all
        )}
      >
        {answer.displayText || answer.answer}
      </p>
    </div>
  );
};

interface ProfileCardProps {
  profile: UserProfile;
  images?: UserImageType[];
  questionnaire?: QuestionnaireResponse | null;
  viewMode?: "matchmaker" | "candidate";
  className?: string;
}

const ProfileCard: React.FC<ProfileCardProps> = ({
  profile,
  images = [],
  questionnaire,
  viewMode = "candidate",
  className,
}) => {
  const [isClient, setIsClient] = useState(false);
  const [isDesktop, setIsDesktop] = useState(true);

  useEffect(() => {
    setIsClient(true);
    const checkScreenSize = () => {
      setIsDesktop(window.innerWidth >= 768); // md breakpoint
    };
    checkScreenSize();
    window.addEventListener("resize", checkScreenSize);
    return () => window.removeEventListener("resize", checkScreenSize);
  }, []);

  const [selectedImageForDialog, setSelectedImageForDialog] =
    useState<UserImageType | null>(null);
  const orderedImages = useMemo(() => {
    if (!images || images.length === 0) return [];
    const validImages = images.filter((img) => img.url);
    const mainImg = validImages.find((img) => img.isMain);
    const otherImages = validImages.filter((img) => !img.isMain);
    return mainImg ? [mainImg, ...otherImages] : otherImages;
  }, [images]);

  const [activeMainImageIndex, setActiveMainImageIndex] = useState<number>(
    () => {
      const mainIndex = orderedImages.findIndex((img) => img.isMain);
      return mainIndex !== -1 ? mainIndex : orderedImages.length > 0 ? 0 : -1;
    }
  );

  const [activeTab, setActiveTab] = useState("about_me");

  const [mainContentPanelSize, setMainContentPanelSize] = useState(65);
  const [sidePhotosPanelSize, setSidePhotosPanelSize] = useState(35);

  const age = useMemo(
    () => calculateAge(profile.birthDate),
    [profile.birthDate]
  );
  const userInitials = useMemo(
    () => getInitials(profile.user?.firstName, profile.user?.lastName),
    [profile.user?.firstName, profile.user?.lastName]
  );

  const mainImageToDisplay = useMemo(() => {
    if (activeMainImageIndex !== -1 && orderedImages[activeMainImageIndex]) {
      return orderedImages[activeMainImageIndex];
    }
    return null;
  }, [orderedImages, activeMainImageIndex]);

  const availability = useMemo(
    () => formatAvailabilityStatus(profile.availabilityStatus),
    [profile.availabilityStatus]
  );

  const handleOpenImageDialog = (image: UserImageType) =>
    image.url && setSelectedImageForDialog(image);
  const handleCloseImageDialog = () => setSelectedImageForDialog(null);

  const currentDialogImageIndex = useMemo(() => {
    if (!selectedImageForDialog || !selectedImageForDialog.url) return -1;
    return orderedImages.findIndex(
      (img) => img.id === selectedImageForDialog.id
    );
  }, [selectedImageForDialog, orderedImages]);

  const handleDialogNav = (direction: "next" | "prev") => {
    if (currentDialogImageIndex === -1 || orderedImages.length <= 1) return;
    let newIndex =
      direction === "next"
        ? currentDialogImageIndex + 1
        : currentDialogImageIndex - 1;
    newIndex = (newIndex + orderedImages.length) % orderedImages.length;
    setSelectedImageForDialog(orderedImages[newIndex]);
  };

  const hasDisplayableQuestionnaireAnswers = useMemo(
    () =>
      questionnaire &&
      questionnaire.formattedAnswers &&
      Object.values(questionnaire.formattedAnswers).some((answers) => {
        const typedAnswers = (answers || []) as FormattedAnswer[];
        return typedAnswers.some(
          (a) => a.isVisible !== false && (a.answer || a.displayText)
        );
      }),
    [questionnaire]
  );

  const tabItems = useMemo(
    () => [
      { value: "about_me", label: "קצת עליי", icon: User, activeColor: "cyan" },
      {
        value: "background_worldview",
        label: "רקע והשקפה",
        icon: BookOpen,
        activeColor: "indigo",
      },
      {
        value: "looking_for",
        label: "מה הם מחפשים?",
        icon: Target,
        activeColor: "green",
      },
      ...(questionnaire
        ? [
            {
              value: "questionnaire",
              label: "מהשאלון",
              icon: FileText,
              activeColor: "pink",
            },
          ]
        : []),
      {
        value: "photos_tab",
        label: "תמונות",
        icon: ImageIcon,
        activeColor: "slate",
        count: orderedImages.length,
      },
      ...(viewMode === "matchmaker"
        ? [
            {
              value: "matchmaker_info",
              label: "מידע לשדכן",
              icon: Lock,
              activeColor: "amber",
            },
          ]
        : []),
    ],
    [orderedImages.length, questionnaire, viewMode]
  );

  const togglePanels = useCallback(() => {
    if (mainContentPanelSize > 50) {
      setMainContentPanelSize(30);
      setSidePhotosPanelSize(70);
    } else {
      setMainContentPanelSize(65);
      setSidePhotosPanelSize(35);
    }
  }, [mainContentPanelSize]);

  const renderPreferenceBadges = (
    label: string,
    icon: React.ElementType,
    iconColorClass: string,
    values:
      | string[]
      | ServiceType[]
      | HeadCoveringType[]
      | KippahType[]
      | undefined,
    badgeColorClass: string,
    formatter: (val: string) => string = formatCategoryLabel
  ) => {
    if (!values || values.length === 0) return null;
    const IconComponent = icon;
    return (
      <div>
        <p
          className={cn(
            "text-xs font-medium text-slate-500 mb-1 sm:mb-1.5 flex items-center gap-1 sm:gap-1.5",
            iconColorClass
          )}
        >
          <IconComponent className="w-3.5 h-3.5 sm:w-4 sm:h-4" /> {label}
        </p>
        <div className="flex flex-wrap gap-1 sm:gap-1.5">
          {(values as string[]).map((val) => (
            <Badge
              key={val}
              variant="outline"
              className={cn(
                "text-[10px] sm:text-xs px-1.5 py-0.5 sm:px-2",
                badgeColorClass
              )}
            >
              {formatter(val)}
            </Badge>
          ))}
        </div>
      </div>
    );
  };

  const MainContentTabs = ({
    inScrollArea = false,
  }: {
    inScrollArea?: boolean;
  }) => (
    <Tabs
      value={activeTab}
      onValueChange={setActiveTab}
      className="w-full flex flex-col flex-grow min-h-0"
    >
      <div
        className={cn(
          "bg-white/90 backdrop-blur-sm p-1 sm:p-1.5 rounded-md sm:rounded-lg mb-2.5 sm:mb-3 shadow-md border border-gray-200/80 flex-shrink-0",
          inScrollArea ? "sticky top-0 z-20" : ""
        )}
      >
        <ScrollArea dir="rtl" className="w-full">
          {" "}
          {/* ודא שזה כאן */}
          <TabsList className="h-auto inline-flex bg-transparent flex-nowrap justify-start p-0.5 sm:p-1">
            {tabItems.map((tab) => (
              <TabsTrigger
                key={tab.value}
                value={tab.value}
                className={cn(
                  // הקטנתי ריווחים ופונטים למובייל עוד קצת
                  "flex items-center gap-0.5 px-1 py-0.5 text-[9px] rounded-sm", // Mobile base (very compact)
                  "sm:gap-1 sm:px-1.5 sm:py-1 sm:text-[10px] sm:rounded-md", // SM breakpoint
                  "md:gap-1.5 md:px-2 md:py-1.5 md:text-xs", // MD breakpoint
                  "whitespace-nowrap transition-all duration-200 border-b-2",
                  "text-slate-500 hover:text-slate-700 hover:bg-slate-100",
                  activeTab === tab.value
                    ? cn(
                        `font-semibold border-${tab.activeColor}-500 text-${tab.activeColor}-600 bg-white shadow-sm`,
                        `hover:text-${tab.activeColor}-700 hover:bg-${tab.activeColor}-50/50`
                      )
                    : "border-transparent"
                )}
              >
                <tab.icon
                  className={cn(
                    "w-2.5 h-2.5 sm:w-3 sm:h-3", // Smaller base icon
                    activeTab === tab.value
                      ? `text-${tab.activeColor}-500`
                      : "text-slate-400"
                  )}
                />
                <span>{tab.label}</span>
                {tab.count !== undefined && tab.count > 0 && (
                  <span
                    className={cn(
                      `text-[8px] sm:text-[9px] rounded-full px-1 py-px ml-0.5 hidden sm:inline-block font-mono`, // Smaller badge
                      activeTab === tab.value
                        ? `bg-${tab.activeColor}-100 text-${tab.activeColor}-700`
                        : `bg-slate-200 text-slate-600`
                    )}
                  >
                    {tab.count}
                  </span>
                )}
              </TabsTrigger>
            ))}
          </TabsList>
          <ScrollBar orientation="horizontal" /> {/* ודא שזה כאן */}
        </ScrollArea>
      </div>

      <div
        className={cn(
          "space-y-2.5 sm:space-y-3 focus:outline-none",
          !inScrollArea && "flex-grow min-h-0 overflow-y-auto overflow-x-hidden"
        )}
      >
        <TabsContent value="about_me" className="min-h-0 w-full">
          <SectionCard
            title="אודותיי"
            icon={InfoIcon}
            contentClassName="space-y-2.5 sm:space-y-3"
          >
            {profile.about ? (
              // === MODIFICATION HERE ===
              <p className="text-slate-700 whitespace-pre-wrap break-words text-xs sm:text-sm leading-relaxed p-1.5 sm:p-2 bg-slate-50 rounded-md min-w-0">
                {/* Added min-w-0 and ensured break-words */}
                {profile.about}
              </p>
            ) : (
              <EmptyState
                icon={InfoIcon}
                message="לא הוזן תיאור אישי"
                className="py-4 sm:py-6"
              />
            )}
          </SectionCard>
          <div className="grid grid-cols-1 sm:grid-cols-2 gap-2.5 sm:gap-3 mt-2.5 sm:mt-3">
            <SectionCard title="תכונות אופי (שלי)" icon={Smile}>
              {profile.profileCharacterTraits &&
              profile.profileCharacterTraits.length > 0 ? (
                <div className="flex flex-wrap gap-1 sm:gap-1.5">
                  {profile.profileCharacterTraits.map((trait, index) => (
                    <Badge
                      key={index}
                      variant="secondary"
                      className="px-1.5 py-0.5 sm:px-2 sm:py-1 bg-purple-100 text-purple-700 border border-purple-200/70 shadow-xs text-[10px] sm:text-xs"
                    >
                      {trait}
                    </Badge>
                  ))}
                </div>
              ) : (
                <EmptyState
                  icon={Smile}
                  message="לא צוינו תכונות"
                  className="py-4 sm:py-6"
                />
              )}
            </SectionCard>
            <SectionCard title="תחביבים (שלי)" icon={Palette}>
              {profile.profileHobbies && profile.profileHobbies.length > 0 ? (
                <div className="flex flex-wrap gap-1 sm:gap-1.5">
                  {profile.profileHobbies.map((hobby, index) => (
                    <Badge
                      key={index}
                      variant="secondary"
                      className="px-1.5 py-0.5 sm:px-2 sm:py-1 bg-teal-100 text-teal-700 border border-teal-200/70 shadow-xs text-[10px] sm:text-xs"
                    >
                      {hobby}
                    </Badge>
                  ))}
                </div>
              ) : (
                <EmptyState
                  icon={Palette}
                  message="לא צוינו תחביבים"
                  className="py-4 sm:py-6"
                />
              )}
            </SectionCard>
          </div>
          <SectionCard
            title="רקע משפחתי ואישי"
            icon={Users2}
            contentClassName="space-y-2.5 sm:space-y-3"
            className="mt-2.5 sm:mt-3"
          >
            <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-x-2.5 sm:gap-x-3 gap-y-2 sm:gap-y-2.5">
              <DetailItem
                icon={Users2}
                label="מצב הורים"
                value={formatCategoryLabel(profile.parentStatus)}
                iconColorClass="text-purple-600"
              />
              <DetailItem
                icon={Users}
                label="מספר אחים/אחיות"
                value={profile.siblings?.toString()}
                iconColorClass="text-purple-600"
              />
              <DetailItem
                icon={User}
                label="מיקום במשפחה"
                value={profile.position?.toString()}
                iconColorClass="text-purple-600"
              />
              {(profile.maritalStatus?.toLowerCase() === "divorced" ||
                profile.maritalStatus?.toLowerCase() === "widowed") && (
                <DetailItem
                  icon={Users2}
                  label="ילדים מקשר קודם (שלי)"
                  value={formatBooleanPreference(
                    profile.hasChildrenFromPrevious
                  )}
                  iconColorClass="text-purple-600"
                />
              )}
              {profile.aliyaCountry && (
                <DetailItem
                  icon={MapPin}
                  label="ארץ עלייה"
                  value={profile.aliyaCountry}
                  iconColorClass="text-cyan-600"
                />
              )}
              {profile.aliyaYear && (
                <DetailItem
                  icon={Calendar}
                  label="שנת עלייה"
                  value={profile.aliyaYear.toString()}
                  iconColorClass="text-cyan-600"
                />
              )}
            </div>
            {profile.additionalLanguages &&
              profile.additionalLanguages.length > 0 && (
                <div className="pt-2 sm:pt-2.5 border-t border-slate-200/60 mt-2 sm:mt-2.5">
                  <p className="text-xs font-medium text-slate-500 mb-1 sm:mb-1.5 flex items-center gap-1 sm:gap-1.5">
                    <Languages className="w-3.5 h-3.5 sm:w-4 sm:h-4 text-emerald-600" />{" "}
                    שפות נוספות
                  </p>
                  <div className="flex flex-wrap gap-1 sm:gap-1.5">
                    {profile.additionalLanguages.map((lang) => (
                      <Badge
                        key={lang}
                        variant="outline"
                        className="px-1.5 py-0.5 bg-emerald-50 text-emerald-800 border-emerald-200 text-[10px] sm:text-xs shadow-xs"
                      >
                        {formatCategoryLabel(lang)}
                      </Badge>
                    ))}
                  </div>
                </div>
              )}
          </SectionCard>
        </TabsContent>

        <TabsContent value="background_worldview" className="min-h-0 w-full">
          <SectionCard
            title="דת ואמונה"
            icon={BookMarked}
            contentClassName="space-y-2.5 sm:space-y-3"
          >
            <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-x-2.5 sm:gap-x-3 gap-y-2 sm:gap-y-2.5">
              <DetailItem
                icon={BookMarked}
                label="רמה דתית"
                value={formatCategoryLabel(profile.religiousLevel)}
                iconColorClass="text-indigo-600"
              />
              <DetailItem
                icon={Sparkles}
                label="שמירת נגיעה"
                value={formatBooleanPreference(profile.shomerNegiah)}
                iconColorClass="text-pink-600"
              />
              {profile.gender === "FEMALE" && (
                <DetailItem
                  icon={UserCheck}
                  label="כיסוי ראש"
                  value={formatCategoryLabel(profile.headCovering)}
                  iconColorClass="text-slate-600"
                />
              )}
              {profile.gender === "MALE" && (
                <DetailItem
                  icon={UserCheck}
                  label="סוג כיפה"
                  value={formatCategoryLabel(profile.kippahType)}
                  iconColorClass="text-slate-600"
                />
              )}
            </div>
          </SectionCard>
          <SectionCard
            title="השכלה ותעסוקה"
            icon={GraduationCap}
            contentClassName="space-y-2.5 sm:space-y-3 mt-2.5 sm:mt-3"
          >
            <div className="grid grid-cols-1 sm:grid-cols-2 gap-x-2.5 sm:gap-x-3 gap-y-2 sm:gap-y-2.5">
              <DetailItem
                icon={GraduationCap}
                label="רמת השכלה"
                value={formatCategoryLabel(profile.educationLevel)}
                iconColorClass="text-sky-600"
              />
              <DetailItem
                icon={School}
                label="פירוט השכלה"
                value={profile.education}
                iconColorClass="text-sky-600"
                valueClassName="whitespace-pre-wrap break-words"
              />
              <DetailItem
                icon={Briefcase}
                label="עיסוק"
                value={profile.occupation}
                iconColorClass="text-emerald-600"
              />
              <DetailItem
                icon={Award}
                label="שירות צבאי/לאומי"
                value={formatCategoryLabel(profile.serviceType)}
                iconColorClass="text-amber-600"
              />
              {profile.serviceDetails && (
                <DetailItem
                  icon={InfoIcon}
                  label="פרטי שירות"
                  value={profile.serviceDetails}
                  iconColorClass="text-amber-600"
                  valueClassName="whitespace-pre-wrap break-words"
                />
              )}
            </div>
          </SectionCard>
        </TabsContent>

        <TabsContent value="looking_for" className="min-h-0 w-full">
          <SectionCard
            title="העדפות לבן/בת הזוג"
            icon={Target}
            contentClassName="space-y-3 sm:space-y-4"
            description="מה המועמד/ת מחפש/ת בהתאמה"
          >
            {profile.matchingNotes && (
              <div>
                <p className="text-xs font-medium text-slate-500 mb-1 sm:mb-1.5 flex items-center gap-1 sm:gap-1.5">
                  <FileText className="w-3.5 h-3.5 sm:w-4 sm:h-4 text-gray-500" />{" "}
                  תיאור כללי על המבוקש/ת:
                </p>
                <p className="text-xs sm:text-sm text-slate-700 whitespace-pre-wrap break-words bg-slate-100 p-2 sm:p-2.5 rounded-md border border-slate-200">
                  {profile.matchingNotes}
                </p>
              </div>
            )}
            <div className="grid grid-cols-1 sm:grid-cols-2 gap-x-2.5 sm:gap-x-3 gap-y-2.5 sm:gap-y-3">
              {(profile.preferredAgeMin || profile.preferredAgeMax) && (
                <DetailItem
                  icon={Calendar}
                  label="טווח גילאים"
                  value={`${profile.preferredAgeMin || "?"} - ${
                    profile.preferredAgeMax || "?"
                  } שנים`}
                  iconColorClass="text-blue-600"
                />
              )}
              {(profile.preferredHeightMin || profile.preferredHeightMax) && (
                <DetailItem
                  icon={User}
                  label="טווח גבהים"
                  value={`${profile.preferredHeightMin || "?"} - ${
                    profile.preferredHeightMax || "?"
                  } ס״מ`}
                  iconColorClass="text-blue-600"
                />
              )}
              <DetailItem
                icon={ShieldQuestion}
                label="שמירת נגיעה"
                value={formatStringBooleanPreference(
                  profile.preferredShomerNegiah
                )}
                iconColorClass="text-pink-600"
                tooltip="העדפה לגבי שמירת נגיעה של בן/בת הזוג"
              />
              <DetailItem
                icon={Users2}
                label="ילדים מקשר קודם"
                value={formatBooleanPreference(
                  profile.preferredHasChildrenFromPrevious // Note: In your type this is boolean, should be string 'yes_ok', 'no_preferred', etc.
                  // Assuming it's string from context, if boolean, adjust formatStringBooleanPreference.
                )}
                iconColorClass="text-purple-600"
                tooltip="העדפה לגבי ילדים מקשר קודם של בן/בת הזוג"
              />
              {renderPreferenceBadges(
                "סטטוסים משפחתיים מועדפים",
                Heart,
                "text-rose-600",
                profile.preferredMaritalStatuses,
                "bg-rose-50 text-rose-700 border-rose-200"
              )}
              {renderPreferenceBadges(
                "מוצאים מועדפים",
                Gem,
                "text-purple-600",
                profile.preferredOrigins,
                "bg-purple-50 text-purple-700 border-purple-200"
              )}
              {renderPreferenceBadges(
                "רמות דתיות מועדפות",
                BookMarked,
                "text-indigo-600",
                profile.preferredReligiousLevels,
                "bg-indigo-50 text-indigo-700 border-indigo-200"
              )}
              {profile.preferredAliyaStatus && (
                <DetailItem
                  icon={MapPin}
                  label="סטטוס עלייה מועדף"
                  value={formatCategoryLabel(profile.preferredAliyaStatus)}
                  iconColorClass="text-cyan-600"
                />
              )}
            </div>
            {!profile.matchingNotes &&
              !profile.preferredAgeMin &&
              !profile.preferredAgeMax &&
              !profile.preferredHeightMin &&
              !profile.preferredHeightMax &&
              !profile.preferredShomerNegiah &&
              typeof profile.preferredHasChildrenFromPrevious !== "boolean" && // or check for undefined string
              (!profile.preferredMaritalStatuses ||
                profile.preferredMaritalStatuses.length === 0) &&
              (!profile.preferredOrigins ||
                profile.preferredOrigins.length === 0) &&
              (!profile.preferredReligiousLevels ||
                profile.preferredReligiousLevels.length === 0) &&
              !profile.preferredAliyaStatus && (
                <EmptyState
                  icon={Search}
                  message="לא צוינו העדפות ספציפיות לחיפוש"
                  className="py-4 sm:py-6"
                />
              )}
          </SectionCard>
        </TabsContent>

        {tabItems.find((tab) => tab.value === "questionnaire") && (
          <TabsContent
            value="questionnaire"
            className="focus:outline-none min-h-0 w-full"
          >
            {hasDisplayableQuestionnaireAnswers ? (
              <div className="space-y-2.5 sm:space-y-3">
                {Object.entries(questionnaire?.formattedAnswers || {}).map(
                  ([worldKey, answers]) => {
                    const worldConfig = WORLDS[worldKey] ||
                      WORLDS.general || {
                        label: formatCategoryLabel(worldKey, "שאלות נוספות"),
                        icon: FileText,
                        color: "slate",
                      };
                    const typedAnswers = (answers || []) as FormattedAnswer[];
                    const visibleAnswers = typedAnswers.filter(
                      (a) =>
                        a.isVisible !== false && (a.answer || a.displayText)
                    );
                    if (visibleAnswers.length === 0) return null;
                    return (
                      <SectionCard
                        key={worldKey}
                        title={worldConfig.label}
                        icon={worldConfig.icon}
                        contentClassName="space-y-2 sm:space-y-2.5"
                      >
                        {visibleAnswers.map((answer) => (
                          <QuestionnaireItem
                            key={answer.questionId}
                            answer={answer}
                            worldColor={worldConfig.color}
                          />
                        ))}
                      </SectionCard>
                    );
                  }
                )}
              </div>
            ) : (
              <SectionCard title="מהשאלון" icon={FileText}>
                <EmptyState
                  icon={FileText}
                  message="שאלון אינו זמין לצפייה כעת"
                  description={
                    questionnaire?.completed
                      ? "המועמד בחר לא להציג את תשובות השאלון, או שאין תשובות זמינות כעת."
                      : "המועמד טרם מילא את השאלון במלואו."
                  }
                  className="py-6 sm:py-8"
                />
              </SectionCard>
            )}
          </TabsContent>
        )}

        <TabsContent value="photos_tab" className="min-h-0 w-full">
          <SectionCard title="גלריית תמונות" icon={ImageIcon}>
            {orderedImages.length > 0 ? (
              <div className="grid grid-cols-2 gap-2 sm:grid-cols-3 sm:gap-2.5">
                {orderedImages.map((image) => (
                  <div
                    key={image.id}
                    className="relative aspect-[4/5] rounded-md sm:rounded-lg overflow-hidden cursor-pointer group shadow-md border border-gray-200/80 hover:shadow-xl transition-all duration-300"
                    onClick={() => handleOpenImageDialog(image)}
                  >
                    <Image
                      src={image.url!}
                      alt={`תמונה של ${profile.user?.firstName || "משתמש"}`}
                      fill
                      className="object-cover transition-transform duration-300 group-hover:scale-105"
                      sizes="(max-width: 640px) 50vw, (max-width: 768px) 33vw, 25vw"
                    />
                    <div className="absolute inset-0 bg-gradient-to-t from-black/60 via-transparent to-black/10 opacity-0 group-hover:opacity-100 transition-opacity flex items-end p-1.5 sm:p-2">
                      <Eye className="w-4 h-4 sm:w-5 sm:h-5 text-white drop-shadow-md" />
                    </div>
                    {image.isMain && (
                      <Badge className="absolute top-1 right-1 sm:top-1.5 sm:right-1.5 bg-yellow-400 text-black border-0 shadow-lg text-[9px] sm:text-xs px-1 sm:px-1.5 py-0.5 flex items-center gap-0.5 sm:gap-1">
                        <Star className="w-2.5 h-2.5 sm:w-3 sm:h-3 fill-black" />{" "}
                        ראשי
                      </Badge>
                    )}
                  </div>
                ))}
              </div>
            ) : (
              <EmptyState
                icon={ImageIcon}
                message="לא הועלו תמונות"
                description="מומלץ להעלות מספר תמונות ברורות."
                className="py-6 sm:py-8"
              />
            )}
          </SectionCard>
        </TabsContent>

        {viewMode === "matchmaker" && (
          <TabsContent value="matchmaker_info" className="min-h-0 w-full">
            <div className="bg-amber-50 border-2 border-amber-300/70 rounded-lg sm:rounded-xl shadow-lg p-2.5 sm:p-3 md:p-4 space-y-2.5 sm:space-y-3">
              <div className="flex items-center gap-1.5 sm:gap-2 text-amber-700">
                <Lock className="w-4 h-4 sm:w-5 sm:h-5" />
                <h3 className="font-semibold text-base sm:text-lg">
                  מידע רגיש לשדכנים בלבד
                </h3>
              </div>
              <DetailItem
                icon={Phone}
                label="העדפת יצירת קשר"
                value={formatCategoryLabel(profile.contactPreference, "-")}
                iconColorClass="text-amber-600"
              />
              <DetailItem
                icon={Handshake}
                label="העדפת מגדר שדכן/ית"
                value={
                  profile.preferredMatchmakerGender
                    ? profile.preferredMatchmakerGender === "MALE"
                      ? "גבר"
                      : "אישה"
                    : "אין העדפה / לא צוין"
                }
                iconColorClass="text-amber-600"
              />
              <div>
                <p className="text-xs font-medium text-amber-600 mb-1 sm:mb-1.5 flex items-center gap-1 sm:gap-1.5">
                  <Edit3 className="w-3.5 h-3.5 sm:w-4 sm:h-4" /> הערות לשדכנים:
                </p>
                {profile.matchingNotes ? ( // Reusing matchingNotes here; might need a specific field
                  <p className="text-xs sm:text-sm text-slate-700 whitespace-pre-wrap break-words bg-amber-100/70 p-2 sm:p-2.5 rounded-md border border-amber-200/80">
                    {profile.matchingNotes}
                  </p>
                ) : (
                  <p className="text-xs sm:text-sm text-slate-500 italic">
                    לא הוזנו הערות.
                  </p>
                )}
              </div>
              {profile.availabilityNote && (
                <div>
                  <p className="text-xs font-medium text-amber-600 mb-1 sm:mb-1.5 flex items-center gap-1 sm:gap-1.5">
                    <Clock className="w-3.5 h-3.5 sm:w-4 sm:h-4" /> הערת זמינות:
                  </p>
                  <p className="text-xs sm:text-sm text-slate-700 whitespace-pre-wrap break-words bg-amber-100/70 p-2 sm:p-2.5 rounded-md border border-amber-200/80">
                    {profile.availabilityNote}
                  </p>
                </div>
              )}
            </div>
          </TabsContent>
        )}
      </div>
    </Tabs>
  );

  if (!isClient) {
    return (
      <Card
        dir="rtl"
        className={cn(
          "w-full bg-slate-50 shadow-2xl rounded-xl sm:rounded-2xl overflow-hidden border-0 flex flex-col max-h-[calc(100vh-1rem)] sm:max-h-[calc(100vh-2rem)] h-full",
          className
        )}
      >
        <div className="p-4 animate-pulse bg-gray-200 h-40 sm:h-48 w-full"></div>
        <div className="p-4 animate-pulse bg-gray-100 flex-grow"></div>
      </Card>
    );
  }

  return (
    <TooltipProvider>
      <Card
        dir="rtl"
                id="profile-card-container" // <--- הוספת ID כאן

        className={cn(
          "w-full bg-slate-50 shadow-2xl rounded-xl sm:rounded-2xl overflow-hidden border-0 flex flex-col max-h-[calc(100vh-1rem)] sm:max-h-[calc(100vh-2rem)] h-full",
          className
        )}
      >
        <ProfileHeader
          profile={profile}
          age={age}
          userInitials={userInitials}
          mainImageToDisplay={mainImageToDisplay}
          availability={availability}
          viewMode={viewMode}
        />

        {isDesktop ? (
          <ResizablePanelGroup
            direction="horizontal"
            dir="rtl"
            className="flex-grow min-h-0 border-t border-slate-200/80"
            onLayout={(sizes: number[]) => {
              setMainContentPanelSize(sizes[0]);
              setSidePhotosPanelSize(sizes[1]);
            }}
          >
            <ResizablePanel
              defaultSize={mainContentPanelSize}
              minSize={25}
              maxSize={75}
              id="main-content-panel"
              order={1}
              className="min-w-0 bg-slate-100/40 flex flex-col"
            >
              <ScrollArea className="h-full focus-visible:outline-none focus-visible:ring-0 flex-grow min-h-0">
                <div className="p-3 md:p-4 h-full flex flex-col">
                  <MainContentTabs inScrollArea={true} />
                </div>
              </ScrollArea>
            </ResizablePanel>
            <ResizableHandle
              withHandle
              className="bg-slate-200 hover:bg-slate-300 transition-colors hidden md:flex"
            >
              <GripVertical className="w-2.5 h-2.5 text-slate-500" />
            </ResizableHandle>
            <ResizablePanel
              defaultSize={sidePhotosPanelSize}
              minSize={25}
              maxSize={75}
              id="side-photos-panel"
              order={2}
              className="min-w-0 bg-white hidden md:block"
            >
              <div className="h-full flex flex-col">
                <div className="p-3 md:p-4 flex-grow flex flex-col min-h-0">
                  <div className="flex justify-between items-center mb-2.5 sm:mb-3 flex-shrink-0">
                    <h3 className="text-base md:text-md font-semibold text-slate-700 flex items-center gap-1.5 sm:gap-2">
                      <ImageIcon className="w-4 h-4 md:w-5 md:h-5 text-cyan-600" />{" "}
                      תמונות ({orderedImages.length})
                    </h3>
                    <Tooltip>
                      <TooltipTrigger asChild>
                        <Button
                          variant="ghost"
                          size="icon"
                          onClick={togglePanels}
                          className="text-slate-500 hover:text-cyan-600 w-7 h-7 sm:w-8 sm:h-8"
                        >
                          {sidePhotosPanelSize > 50 ? (
                            <Minimize className="w-3.5 h-3.5 md:w-4 md:h-4" />
                          ) : (
                            <Maximize className="w-3.5 h-3.5 md:w-4 md:h-4" />
                          )}
                        </Button>
                      </TooltipTrigger>
                      <TooltipContent side="bottom">
                        <p>
                          {sidePhotosPanelSize > 50
                            ? "צמצם גלריה צדדית"
                            : "הרחב גלריה צדדית"}
                        </p>
                      </TooltipContent>
                    </Tooltip>
                  </div>
                  {orderedImages.length > 0 ? (
                    <>
                      <Button
                        variant="outline"
                        size="sm"
                        className="w-full mb-2.5 sm:mb-3 text-cyan-600 border-cyan-400/70 hover:bg-cyan-50 hover:text-cyan-700 flex-shrink-0 text-xs md:text-sm"
                        onClick={() => {
                          setActiveTab("photos_tab");
                          if (sidePhotosPanelSize > 50) togglePanels();
                        }}
                      >
                        <ExternalLink className="w-3 h-3 md:w-3.5 md:h-3.5 ml-1.5" />{" "}
                        הצג את כל {orderedImages.length} התמונות בגלריה הראשית
                      </Button>
                      <div className="flex-grow flex flex-col gap-2.5 sm:gap-3 min-h-0">
                        {mainImageToDisplay && (
                          <div
                            className="relative aspect-video rounded-lg overflow-hidden cursor-pointer group shadow-lg border border-gray-200/70 hover:shadow-xl transition-all flex-shrink-0"
                            onClick={() =>
                              handleOpenImageDialog(mainImageToDisplay)
                            }
                          >
                            <Image
                              src={mainImageToDisplay.url}
                              alt={`תמונה ראשית של ${
                                profile.user?.firstName || "מועמד"
                              }`}
                              fill
                              className="object-cover transition-transform duration-300 group-hover:scale-105"
                              sizes="(max-width: 1024px) 40vw, 30vw"
                              priority={
                                activeMainImageIndex ===
                                orderedImages.findIndex((img) => img.isMain)
                              }
                            />
                            <div className="absolute inset-0 bg-gradient-to-t from-black/50 via-transparent to-transparent opacity-0 group-hover:opacity-100 transition-opacity flex items-center justify-center p-2">
                              <Eye className="w-6 h-6 md:w-8 md:h-8 text-white drop-shadow-lg" />
                            </div>
                            {mainImageToDisplay.isMain && (
                              <Badge className="absolute top-1.5 right-1.5 md:top-2 md:right-2 bg-yellow-400 text-black border-0 shadow-md text-[10px] md:text-xs px-1 md:px-1.5 py-0.5 flex items-center gap-1">
                                <Star className="w-2.5 h-2.5 md:w-3 md:h-3 fill-black" />{" "}
                                ראשי
                              </Badge>
                            )}
                          </div>
                        )}
                        {orderedImages.length > 1 && (
                          <ScrollArea
                            dir="rtl"
                            className="w-full flex-shrink-0"
                          >
                            <div className="flex gap-1.5 sm:gap-2 pb-1.5">
                              {orderedImages.map((image, index) => (
                                <div
                                  key={image.id}
                                  className={cn(
                                    "relative flex-shrink-0 w-16 h-16 md:w-20 md:h-20 rounded-md overflow-hidden cursor-pointer border-2 transition-all duration-200 shadow-sm hover:shadow-md",
                                    activeMainImageIndex === index
                                      ? "border-cyan-500 ring-2 ring-cyan-500/30 scale-105"
                                      : "border-slate-200 hover:border-cyan-400 opacity-80 hover:opacity-100"
                                  )}
                                  onClick={() => setActiveMainImageIndex(index)}
                                  onDoubleClick={() =>
                                    handleOpenImageDialog(image)
                                  }
                                >
                                  <Image
                                    src={image.url}
                                    alt={`תמונת פרופיל ${index + 1}`}
                                    fill
                                    className="object-cover"
                                    sizes="80px"
                                  />
                                </div>
                              ))}
                            </div>
                            <ScrollBar orientation="horizontal" />
                          </ScrollArea>
                        )}
                      </div>
                    </>
                  ) : (
                    <div className="flex-grow flex items-center justify-center">
                      <EmptyState
                        icon={ImageIcon}
                        message="אין תמונות להצגה"
                        className="py-6 w-full bg-slate-50 rounded-lg border border-slate-200/70"
                      />
                    </div>
                  )}
                </div>
                <div className="p-2 md:p-2.5 border-t border-slate-200/80 bg-slate-50/70 flex-shrink-0">
                  <SectionCard
                    title="ניתוח AI"
                    icon={Bot}
                    titleClassName="p-1.5 sm:p-2 md:p-2.5 bg-slate-100/80 text-sm"
                    contentClassName="p-1.5 sm:p-2 md:p-2.5"
                    className="shadow-md"
                  >
                    <div className="flex flex-col items-center gap-1 text-center">
                      <Bot className="w-5 h-5 sm:w-6 sm:h-6 text-sky-500 opacity-70 mb-0.5" />
                      <p className="text-[10px] sm:text-xs text-slate-600 max-w-md leading-tight">
                        קבל/י סיכום ותובנות מה-AI ונהל/י שיחת התייעצות.
                      </p>
                      <Button
                        size="xs"
                        className="mt-1 w-full bg-sky-500 hover:bg-sky-600 text-white font-medium py-1 px-1.5 rounded text-[10px] sm:text-xs shadow-sm hover:shadow-md transition-all"
                      >
                        <Sparkles className="w-2.5 h-2.5 sm:w-3 sm:h-3.5 ml-1 sm:ml-1.5" />{" "}
                        התחל התייעצות
                      </Button>
                    </div>
                  </SectionCard>
                </div>
              </div>
            </ResizablePanel>
          </ResizablePanelGroup>
        ) : (
          // Mobile Layout
          <ScrollArea className="flex-grow min-h-0 w-full">
            {/* === MODIFIED HERE === */}
            <div className="p-2 sm:p-2.5">
              {" "}
              {/* Was p-2.5 sm:p-3. Reduced base padding */}
              <MainContentTabs />
            </div>
          </ScrollArea>
        )}

        {selectedImageForDialog && selectedImageForDialog.url && (
          <Dialog
            open={!!selectedImageForDialog}
            onOpenChange={(isOpen) => !isOpen && handleCloseImageDialog()}
          >
            <DialogContent
              className="max-w-5xl w-[95vw] h-[90vh] p-0 bg-black/95 backdrop-blur-md border-none shadow-2xl overflow-hidden rounded-lg flex flex-col"
              dir="rtl"
            >
              <DialogHeader className="p-2 sm:p-3 text-white flex flex-row justify-between items-center border-b border-slate-700/50 flex-shrink-0">
                <DialogTitle className="text-center text-sm sm:text-base md:text-lg font-semibold flex-grow truncate px-2">
                  תמונה {currentDialogImageIndex + 1} מתוך{" "}
                  {orderedImages.length}
                </DialogTitle>
                <Button
                  variant="ghost"
                  size="icon"
                  className="text-slate-300 hover:text-white hover:bg-white/10 rounded-full mr-auto w-7 h-7 sm:w-8 sm:h-8 flex-shrink-0"
                  onClick={handleCloseImageDialog}
                  aria-label="סגור"
                >
                  <X className="w-4 h-4 sm:w-5 sm:h-5" />
                </Button>
              </DialogHeader>
              <div className="relative flex-1 w-full min-h-0 flex items-center justify-center bg-black/80">
                <Image
                  key={selectedImageForDialog.id}
                  src={selectedImageForDialog.url}
                  alt={`תמונה מוגדלת ${currentDialogImageIndex + 1} של ${
                    profile.user?.firstName || "מועמד"
                  }`}
                  fill
                  className="object-contain"
                  sizes="90vw"
                  priority
                />
                {orderedImages.length > 1 && (
                  <>
                    <Button
                      variant="ghost"
                      size="icon"
                      className="absolute right-1 sm:right-2 top-1/2 -translate-y-1/2 bg-black/40 hover:bg-black/60 text-white rounded-full h-8 w-8 sm:h-10 sm:w-10 md:h-12 md:w-12"
                      onClick={() => handleDialogNav("prev")}
                      aria-label="הקודם"
                    >
                      <ChevronRight className="h-5 w-5 sm:h-6 sm:w-6" />
                    </Button>
                    <Button
                      variant="ghost"
                      size="icon"
                      className="absolute left-1 sm:left-2 top-1/2 -translate-y-1/2 bg-black/40 hover:bg-black/60 text-white rounded-full h-8 w-8 sm:h-10 sm:w-10 md:h-12 md:w-12"
                      onClick={() => handleDialogNav("next")}
                      aria-label="הבא"
                    >
                      <ChevronLeft className="h-5 w-5 sm:h-6 sm:w-6" />
                    </Button>
                  </>
                )}
              </div>
              {orderedImages.length > 1 && (
                <DialogFooter className="border-t border-slate-700/50 bg-black/70 p-0 flex-shrink-0">
                  <ScrollArea dir="rtl" className="w-full">
                    <div className="flex gap-1 sm:gap-1.5 p-1.5 sm:p-2 justify-center">
                      {orderedImages.map((img, idx) => (
                        <div
                          key={img.id}
                          className={cn(
                            "relative flex-shrink-0 w-10 h-10 sm:w-12 sm:h-12 md:w-14 md:h-14 rounded overflow-hidden cursor-pointer border-2 transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-cyan-400 focus:ring-offset-2 focus:ring-offset-black",
                            img.id === selectedImageForDialog.id
                              ? "border-cyan-400 scale-105 opacity-100 shadow-lg"
                              : "border-transparent hover:border-slate-400 opacity-60 hover:opacity-100"
                          )}
                          onClick={() => setSelectedImageForDialog(img)}
                          onKeyDown={(e) =>
                            e.key === "Enter" && setSelectedImageForDialog(img)
                          }
                          tabIndex={0}
                          role="button"
                          aria-label={`הצג תמונה ${idx + 1}`}
                        >
                          <Image
                            src={img.url}
                            alt={`תמונה קטנה ${idx + 1}`}
                            fill
                            className="object-cover"
                            sizes="56px"
                          />
                        </div>
                      ))}
                    </div>
                    <ScrollBar orientation="horizontal" />
                  </ScrollArea>
                </DialogFooter>
              )}
            </DialogContent>
          </Dialog>
        )}
      </Card>
    </TooltipProvider>
  );
};

export default ProfileCard;
--- End of Content for ProfileCard.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\user\Desktop\matchpoint\shidduch-system\src\app\components\profile\constants.ts
--------------------------------------------------------------------------------
Content:
// src/components/shared/profile/constants.ts
import { Heart, User, Users, Scroll, GraduationCap, MapPin } from "lucide-react";

export const WORLDS = {
  values: {
    key: "values",
    title: "ערכים ואמונות",
    icon: Heart,
    color: "text-pink-500",
    bgColor: "bg-pink-50",
    borderColor: "border-pink-200",
  },
  personality: {
    key: "personality",
    title: "אישיות",
    icon: User,
    color: "text-blue-500",
    bgColor: "bg-blue-50",
    borderColor: "border-blue-200",
  },
  relationship: {
    key: "relationship",
    title: "זוגיות ומשפחה",
    icon: Users,
    color: "text-purple-500",
    bgColor: "bg-purple-50",
    borderColor: "border-purple-200",
  },
  religion: {
    key: "religion",
    title: "דת ומסורת",
    icon: Scroll,
    color: "text-indigo-500",
    bgColor: "bg-indigo-50",
    borderColor: "border-indigo-200",
  },
  partner: {
    key: "partner",
    title: "העדפות בן/בת זוג",
    icon: Heart,
    color: "text-red-500",
    bgColor: "bg-red-50",
    borderColor: "border-red-200",
  },
} as const;

export const RELIGIOUS_LEVELS = [
  "חרדי",
  "חרדי מודרני",
  "דתי",
  "דתי-לייט",
  "מסורתי"
] as const;

export const MARITAL_STATUS = [
  "single",
  "divorced",
  "widowed"
] as const;

export const EDUCATION_LEVELS = [
  "תיכונית",
  "על תיכונית",
  "אקדמית",
  "תורנית"
] as const;

export const OCCUPATION_TYPES = [
  "עובד/ת",
  "סטודנט/ית",
  "אברך/אברכית",
  "עצמאי/ת"
] as const;

export const LOCATIONS = [
  "צפון",
  "מרכז",
  "דרום",
  "ירושלים",
  "יהודה ושומרון"
] as const;

export const PROFILE_SECTIONS = {
  BASIC_INFO: {
    title: "פרטים אישיים",
    icon: User,
  },
  EDUCATION: {
    title: "השכלה ותעסוקה",
    icon: GraduationCap,
  },
  LOCATION: {
    title: "מיקום",
    icon: MapPin,
  },
  FAMILY: {
    title: "מידע משפחתי",
    icon: Users,
  },
  PREFERENCES: {
    title: "העדפות",
    icon: Heart,
  },
} as const;

export const COMMUNICATION_STYLES = [
  "ישיר",
  "עקיף",
  "דיפלומטי"
] as const;

export const STRESS_MANAGEMENT = [
  "רגוע",
  "לחוץ",
  "משתנה"
] as const;

export const CONTACT_PREFERENCES = [
  { value: "direct", label: "ישירות" },
  { value: "matchmaker", label: "דרך השדכן/ית" },
  { value: "both", label: "שתי האפשרויות" }
] as const;

// הגדרות עבור הוולידציה
export const VALIDATION_RULES = {
  AGE: {
    MIN: 18,
    MAX: 99
  },
  HEIGHT: {
    MIN: 100,
    MAX: 250
  },
  NAME: {
    MIN_LENGTH: 2,
    MAX_LENGTH: 50
  }
} as const;
--- End of Content for constants.ts ---

--------------------------------------------------------------------------------
File: C:\Users\user\Desktop\matchpoint\shidduch-system\src\app\components\profile\index.ts
--------------------------------------------------------------------------------
Content:
// src/components/shared/profile/index.ts

// Main Components
export { default as ProfileCard } from './ProfileCard';

// Sections
export { default as PhotosSection } from './sections/PhotosSection';
export { default as PreferencesSection } from './sections/PreferencesSection';
export { default as ProfileSection } from './sections/ProfileSection';
export { default as QuestionnaireResponsesSection } from './sections/QuestionnaireResponsesSection';

// Elements
export { default as StatsCard } from './elements/StatsCard';
export { default as VisibilityControl } from './elements/VisibilityControl';
export { default as MinimalCard } from './elements/MinimalCard';

// Types
export * from './types/profile';
export * from './types/questionnaire';
--- End of Content for index.ts ---

--------------------------------------------------------------------------------
File: C:\Users\user\Desktop\matchpoint\shidduch-system\src\app\components\profile\profile_contents.txt
--------------------------------------------------------------------------------
[This is the output log file itself. Content not included.]

--------------------------------------------------------------------------------
File: C:\Users\user\Desktop\matchpoint\shidduch-system\src\app\components\profile\utils.ts
--------------------------------------------------------------------------------
Content:
// src/components/shared/profile/utils.ts
import type { UserProfile } from "@/types/next-auth";

export const calculateAge = (birthDate: Date): number => {
  const today = new Date();
  const birth = new Date(birthDate);
  let age = today.getFullYear() - birth.getFullYear();
  const monthDiff = today.getMonth() - birth.getMonth();
  
  if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birth.getDate())) {
    age--;
  }
  return age;
};

export const formatProfileData = (profile: UserProfile) => {
  return {
    ...profile,
    age: calculateAge(new Date(profile.birthDate)),
    // Add any other formatting needed
  };
};

export const validateProfileData = (data: Partial<UserProfile>) => {
  const errors: Record<string, string> = {};
  
  // Add validation rules as needed
  if (data.height && (data.height < 100 || data.height > 250)) {
    errors.height = "גובה חייב להיות בין 100 ל-250 ס\"מ";
  }
  
  return {
    isValid: Object.keys(errors).length === 0,
    errors
  };
};
--- End of Content for utils.ts ---

================================================================================
Directory: C:\Users\user\Desktop\matchpoint\shidduch-system\src\app\components\profile\elements
================================================================================

--------------------------------------------------------------------------------
File: C:\Users\user\Desktop\matchpoint\shidduch-system\src\app\components\profile\elements\MinimalCard.tsx
--------------------------------------------------------------------------------
Content:
// src/components/shared/profile/elements/MinimalCard.tsx
import React from "react";
import { Card } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { User, MapPin, Scroll, Heart } from "lucide-react";
import Image from "next/image";
import { calculateAge } from "../utils";
import type { UserProfile, UserImage } from "@/types/next-auth";

interface MinimalCardProps {
  profile: UserProfile;
  mainImage?: UserImage;
  onClick?: () => void;
  className?: string;
}

const MinimalCard: React.FC<MinimalCardProps> = ({
  profile,
  mainImage,
  onClick,
  className = "",
}) => {
  const age = calculateAge(new Date(profile.birthDate));

  // Handle cases where profile.user might be undefined
  const userName = profile.user
    ? `${profile.user.firstName} ${profile.user.lastName}`
    : "שם לא זמין"; // "Name not available" in Hebrew

  return (
    <Card
      onClick={onClick}
      className={`relative overflow-hidden cursor-pointer hover:shadow-md transition-shadow ${className}`}
    >
      <div className="flex gap-4 p-4">
        {/* תמונת פרופיל */}
        <div className="relative w-24 h-24 rounded-lg overflow-hidden bg-gray-100">
          {mainImage ? (
            <Image
              src={mainImage.url}
              alt="תמונת פרופיל"
              fill
              className="object-cover"
              sizes="96px"
            />
          ) : (
            <div className="w-full h-full flex items-center justify-center">
              <User className="w-8 h-8 text-gray-400" />
            </div>
          )}
        </div>

        {/* מידע בסיסי */}
        <div className="flex-1 space-y-2">
          <div>
            <h3 className="text-lg font-medium">{userName}</h3>
            <p className="text-sm text-gray-500">{age} שנים</p>
          </div>

          <div className="flex flex-wrap gap-2">
            {profile.city && (
              <Badge variant="secondary" className="flex items-center gap-1">
                <MapPin className="w-3 h-3" />
                {profile.city}
              </Badge>
            )}
            {profile.religiousLevel && (
              <Badge variant="secondary" className="flex items-center gap-1">
                <Scroll className="w-3 h-3" />
                {profile.religiousLevel}
              </Badge>
            )}
          </div>

          {/* סטטוס זמינות */}
          <div className="flex items-center gap-2 text-sm">
            {profile.availabilityStatus === "AVAILABLE" ? (
              <Badge variant="success" className="flex items-center gap-1">
                <Heart className="w-3 h-3" />
                פנוי/ה להצעות
              </Badge>
            ) : (
              <Badge variant="secondary" className="flex items-center gap-1">
                <Heart className="w-3 h-3" />
                בתהליך הכרות
              </Badge>
            )}
          </div>
        </div>
      </div>
    </Card>
  );
};

export default MinimalCard;
--- End of Content for MinimalCard.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\user\Desktop\matchpoint\shidduch-system\src\app\components\profile\elements\StatsCard.tsx
--------------------------------------------------------------------------------
Content:
import React from "react";
import { Card, CardContent } from "@/components/ui/card";
import { Progress } from "@/components/ui/progress";
import { cn } from "@/lib/utils";

interface StatsCardProps {
  /**
   * The icon to display in the card
   */
  icon: React.ElementType;

  /**
   * The title text to display
   */
  title: string;

  /**
   * The main value to display
   */
  value: string | number;

  /**
   * Optional progress value (0-100)
   */
  progress?: number;

  /**
   * Optional trend information
   */
  trend?: {
    value: number;
    label: string;
    isPositive?: boolean;
  };

  /**
   * Visual variant of the card
   */
  variant?: "default" | "success" | "warning" | "destructive";

  /**
   * Additional CSS classes
   */
  className?: string;
}

const StatsCard: React.FC<StatsCardProps> = ({
  icon: Icon,
  title,
  value,
  progress,
  trend,
  variant = "default",
  className,
}) => {
  // Determine variant-specific background color
  const getVariantStyles = () => {
    switch (variant) {
      case "success":
        return "bg-emerald-50 dark:bg-emerald-900/20";
      case "warning":
        return "bg-amber-50 dark:bg-amber-900/20";
      case "destructive":
        return "bg-red-50 dark:bg-red-900/20";
      default:
        return "bg-card";
    }
  };

  // Special handling for availability status
  const isAvailabilityStatus = title === "סטטוס פניות";
  const isAvailable = typeof value === 'string' && value.toLowerCase() === 'available';

  // Render the value with special handling for availability status
  const renderValue = () => {
    if (isAvailabilityStatus) {
      return (
        <div className="mt-1">
          <span className={cn(
            "inline-flex px-3 py-1 rounded-full text-sm font-semibold tracking-wide",
            isAvailable 
              ? "bg-emerald-100 text-emerald-800 dark:bg-emerald-900/30 dark:text-emerald-300"
              : "bg-gray-100 text-gray-800 dark:bg-gray-800 dark:text-gray-200"
          )}>
            {value}
          </span>
        </div>
      );
    }
    return <h3 className="text-2xl font-semibold">{value}</h3>;
  };

  return (
    <Card
      className={cn(
        "hover:shadow-md transition-shadow",
        getVariantStyles(),
        className
      )}
    >
      <CardContent className="p-6">
        {/* Header Section */}
        <div className="flex items-center space-x-4 rtl:space-x-reverse">
          <div className="p-2 bg-primary/10 rounded-full">
            <Icon className="w-6 h-6 text-primary" />
          </div>
          <div className="flex-1 space-y-1">
            <p className="text-sm text-muted-foreground">{title}</p>
            {renderValue()}
          </div>
        </div>

        {/* Progress Bar Section */}
        {progress !== undefined && (
          <div className="mt-4 space-y-2">
            <Progress 
              value={progress} 
              className="h-2"
              aria-label={`${title} progress: ${progress}%`}
            />
            <p className="text-sm text-muted-foreground text-right">
              {progress}%
            </p>
          </div>
        )}

        {/* Trend Section */}
        {trend && (
          <div className="mt-4 flex items-center">
            <span
              className={cn(
                "text-sm font-medium",
                trend.isPositive ? "text-emerald-600" : "text-red-600"
              )}
            >
              {trend.isPositive ? "+" : "-"}
              {trend.value}%
            </span>
            <span className="text-sm text-muted-foreground mr-2">
              {trend.label}
            </span>
          </div>
        )}
      </CardContent>
    </Card>
  );
};

// Default export
export default StatsCard;

// Named exports for specific use cases
export type { StatsCardProps };
--- End of Content for StatsCard.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\user\Desktop\matchpoint\shidduch-system\src\app\components\profile\elements\VisibilityControl.tsx
--------------------------------------------------------------------------------
Content:
import React from "react";
import { Eye, EyeOff } from "lucide-react";
import { Switch } from "@/components/ui/switch";
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip";
import { cn } from "@/lib/utils";

interface VisibilityControlProps {
  /**
   * Current visibility state
   */
  isVisible: boolean;

  /**
   * Callback when visibility changes
   */
  onChange: (isVisible: boolean) => void;

  /**
   * Optional class name for additional styling
   */
  className?: string;

  /**
   * Optional disabled state
   */
  disabled?: boolean;

  /**
   * Optional custom tooltip text
   */
  tooltipText?: {
    visible?: string;
    hidden?: string;
    action?: string;
  };
}

const VisibilityControl: React.FC<VisibilityControlProps> = ({
  isVisible,
  onChange,
  className,
  disabled = false,
  tooltipText = {
    visible: "תשובה זו גלויה למועמדים",
    hidden: "תשובה זו מוסתרת מהמועמדים",
    action: "לחץ כדי",
  },
}) => {
  return (
    <div
      className={cn(
        "flex items-center gap-2 bg-secondary/20 p-2 rounded-md",
        disabled && "opacity-50 cursor-not-allowed",
        className
      )}
    >
      {/* Icon */}
      {isVisible ? (
        <Eye 
          className="h-4 w-4 text-primary" 
          aria-hidden="true"
        />
      ) : (
        <EyeOff 
          className="h-4 w-4 text-muted-foreground" 
          aria-hidden="true"
        />
      )}

      {/* Switch with Tooltip */}
      <TooltipProvider>
        <Tooltip>
          <TooltipTrigger asChild>
            <div className="relative">
              <Switch
                checked={isVisible}
                onCheckedChange={onChange}
                disabled={disabled}
                className={cn(
                  "data-[state=checked]:bg-primary",
                  disabled && "cursor-not-allowed"
                )}
                aria-label={`Toggle visibility: currently ${isVisible ? 'visible' : 'hidden'}`}
              />
              {/* Visually hidden text for screen readers */}
              <span className="sr-only">
                {isVisible ? "הסתר תוכן" : "הצג תוכן"}
              </span>
            </div>
          </TooltipTrigger>
          <TooltipContent 
            side="left" 
            className="max-w-[200px]"
            dir="rtl"
          >
            <p>
              {isVisible ? tooltipText.visible : tooltipText.hidden}
            </p>
            <p className="text-xs text-muted-foreground mt-1">
              {tooltipText.action} {isVisible ? "להסתיר" : "להציג"} תשובה זו
            </p>
          </TooltipContent>
        </Tooltip>
      </TooltipProvider>
    </div>
  );
};

// Default export
export default VisibilityControl;

// Named exports for types
export type { VisibilityControlProps };
--- End of Content for VisibilityControl.tsx ---

================================================================================
Directory: C:\Users\user\Desktop\matchpoint\shidduch-system\src\app\components\profile\sections
================================================================================

--------------------------------------------------------------------------------
File: C:\Users\user\Desktop\matchpoint\shidduch-system\src\app\components\profile\sections\PhotosSection.tsx
--------------------------------------------------------------------------------
Content:

"use client";

import React, { useRef, useState, useEffect, useCallback } from "react"; // Added useCallback
import Image from "next/image";
import { cn } from "@/lib/utils";

// UI Components
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import {
  Dialog,
  DialogContent,
  DialogTitle,
  DialogDescription,
  DialogHeader,
  DialogFooter, // Added DialogFooter
} from "@/components/ui/dialog"; // Removed Card components as we use divs/structure directly now for more control

import { toast } from "sonner";

// Icons
import {
  Camera,
  Star,
  Loader2,
  ChevronLeft,
  ChevronRight,
  Upload,
  Trash2,
  X, // Icon for closing dialog
} from "lucide-react";

// Types
import type { UserImage } from "@/types/next-auth";

interface PhotosSectionProps {
  images: UserImage[];
  isUploading: boolean; // Note: Changed interpretation, this prop seems external loading state, use internal `isProcessing` for actions within component
  disabled?: boolean;
  maxImages?: number;
  onUpload: (file: File) => Promise<void>;
  onSetMain: (imageId: string) => Promise<void>;
  onDelete: (imageId: string) => Promise<void>;
  // Removed style props as per previous fix request and current design goals
}

const PhotosSection: React.FC<PhotosSectionProps> = ({
  images,
  isUploading: isExternallyUploading, // Renamed to avoid confusion with internal processing state
  disabled = false,
  maxImages = 5,
  onUpload,
  onSetMain,
  onDelete,
}) => {
  // Refs
  const fileInputRef = useRef<HTMLInputElement>(null);

  // State
  const [showImageViewer, setShowImageViewer] = useState(false);
  const [selectedViewerIndex, setSelectedViewerIndex] = useState<number | null>(null);
  const [isProcessing, setIsProcessing] = useState(false); // Internal state for actions like delete, set main
  const [deleteConfirmOpen, setDeleteConfirmOpen] = useState(false);
  const [imageToDelete, setImageToDelete] = useState<string | null>(null);
  const [lastUploadedImageId, setLastUploadedImageId] = useState<string | null>(null); // Track ID instead of index

  // Combined Loading State
  const isLoading = isExternallyUploading || isProcessing;

  // Effect to open viewer for newly uploaded image
  useEffect(() => {
    if (lastUploadedImageId) {
      const newIndex = images.findIndex(img => img.id === lastUploadedImageId);
      if (newIndex !== -1) {
          setSelectedViewerIndex(newIndex);
          setShowImageViewer(true);
      }
      setLastUploadedImageId(null); // Reset tracker
    }
  }, [images, lastUploadedImageId]); // Depend on images array as well

  // --- Event Handlers ---

  const handleFileSelect = async (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (!file) return;

    // Basic Validations (already implemented, kept as is)
    const validTypes = ["image/jpeg", "image/png", "image/jpg", "image/webp"]; // Added webp
    if (!validTypes.includes(file.type)) {
      toast.error("סוג קובץ לא חוקי. יש להעלות JPG, PNG, או WEBP.");
      return;
    }
    const maxSize = 5 * 1024 * 1024; // 5MB
    if (file.size > maxSize) {
      toast.error("הקובץ גדול מדי (מקסימום 5MB).");
      return;
    }

    // Prevent multiple uploads
    if (isLoading) return;

    // Use the external onUpload handler
    try {
      // Note: We don't set isProcessing here, assuming isExternallyUploading reflects the upload state
      await onUpload(file);
      // We need the ID of the new image to track it.
      // Assuming onUpload updates the `images` prop via the parent component,
      // we'll rely on the useEffect to find and show the new image.
      // We need a way to get the ID - this might require adjustment in the parent or API response.
      // For now, we'll assume the parent handles setting the ID correctly and updates `images`.
      // A potential workaround is to find the image added (if only one is added)
      // This is brittle. A better approach is if `onUpload` returns the new image ID.
      // Let's simulate getting the last image ID for the effect hook.
      // This requires the parent component to update `images` prop immediately after upload success.
      // const newImage = images[images.length - 1]; // Risky assumption
      // if (newImage) setLastUploadedImageId(newImage.id);

      toast.success("התמונה הועלתה בהצלחה.");

      // Automatically set as main if it's the very first image
      if (images.length === 0) {
        // Need the ID here too. This logic might need to move to the parent
        // or the API should return the ID for immediate use.
        // Assuming the `images` prop updates quickly after onUpload resolves:
        const newImageId = images.find(img => !img.isMain)?.id; // Find the first non-main, likely the new one
        if (newImageId) {
            await handleSetMainImage(newImageId, false); // Set main without toast
        }
      }

    } catch (error) {
      console.error("Error during upload process:", error);
      // Toast handled by onUpload or here as fallback
      if (!(error instanceof Error && error.message.includes("Toast"))) {
         toast.error("שגיאה בהעלאת התמונה.");
      }
    } finally {
      // Reset file input regardless of success/fail
      if (fileInputRef.current) {
        fileInputRef.current.value = "";
      }
      //setIsProcessing(false); // Only manage internal processing state
    }
  };

  const triggerFileInput = () => {
    if (!isLoading && !disabled && images.length < maxImages) {
      fileInputRef.current?.click();
    }
  };

  const handleImageClick = (index: number) => {
    setSelectedViewerIndex(index);
    setShowImageViewer(true);
  };

  const closeImageViewer = useCallback(() => { // Use useCallback for keydown listener
    setShowImageViewer(false);
    setSelectedViewerIndex(null);
  }, []);

  const handleNextImage = useCallback(() => { // Use useCallback
      setSelectedViewerIndex((prevIndex) => {
          if (prevIndex === null || prevIndex >= images.length - 1) return prevIndex;
          return prevIndex + 1;
      });
  }, [images.length]);

  const handlePreviousImage = useCallback(() => { // Use useCallback
      setSelectedViewerIndex((prevIndex) => {
          if (prevIndex === null || prevIndex <= 0) return prevIndex;
          return prevIndex - 1;
      });
  }, []); // Dependency images.length removed as index check handles boundary


  // Handler for delete confirmation
  const confirmDelete = async () => {
    if (!imageToDelete || isProcessing) return;

    setIsProcessing(true);
    try {
      const imageIndex = images.findIndex((img) => img.id === imageToDelete);
      if (imageIndex === -1) throw new Error("Image not found for deletion.");

      const imageObj = images[imageIndex];

      // If deleting the main image, and there are others, set a new main one
      if (imageObj.isMain && images.length > 1) {
        const nextMainIndex = imageIndex === 0 ? 1 : 0; // Pick first or second
        await onSetMain(images[nextMainIndex].id);
      }

      // Call the external delete handler
      await onDelete(imageToDelete);

      toast.success("התמונה נמחקה בהצלחה.");
      closeImageViewer(); // Close viewer if open
      setDeleteConfirmOpen(false); // Close confirmation dialog
      setImageToDelete(null); // Reset delete target

    } catch (error) {
      console.error("Error deleting image:", error);
      toast.error("שגיאה במחיקת התמונה.");
    } finally {
      setIsProcessing(false);
    }
  };

  // Open confirmation dialog
  const requestDelete = (imageId: string, event?: React.MouseEvent) => {
    event?.stopPropagation(); // Prevent grid click or other triggers
    if (isLoading) return;
    setImageToDelete(imageId);
    setDeleteConfirmOpen(true);
  };


  // Handler for setting main image
  const handleSetMainImage = async (imageId: string, showToast = true, event?: React.MouseEvent) => {
    event?.stopPropagation();
    if (isLoading) return;

    const currentImage = images.find(img => img.id === imageId);
    if (!currentImage || currentImage.isMain) return; // Already main or not found

    setIsProcessing(true);
    try {
      await onSetMain(imageId);
      if (showToast) {
        toast.success("התמונה הראשית עודכנה.");
      }
    } catch (error) {
      console.error("Error setting main image:", error);
      toast.error("שגיאה בעדכון התמונה הראשית.");
    } finally {
      setIsProcessing(false);
    }
  };

   // Prevent event bubbling for controls
   const handleControlClick = (e: React.MouseEvent) => {
    e.stopPropagation();
   };

   // Keyboard navigation for viewer
   useEffect(() => {
    const handleKeyDown = (e: KeyboardEvent) => {
      if (!showImageViewer) return;

      switch (e.key) {
        case "ArrowRight": // Assuming RTL means right arrow goes to PREVIOUS visually (index decreases)
          handlePreviousImage();
          break;
        case "ArrowLeft": // Assuming RTL means left arrow goes to NEXT visually (index increases)
          handleNextImage();
          break;
        case "Escape":
          closeImageViewer();
          break;
      }
    };

    window.addEventListener("keydown", handleKeyDown);
    return () => {
      window.removeEventListener("keydown", handleKeyDown);
    };
  }, [showImageViewer, handlePreviousImage, handleNextImage, closeImageViewer]); // Add dependencies


  // --- Render ---

  return (
    // Inspired Card Structure
    <div dir="rtl" className="bg-white/80 backdrop-blur-lg rounded-3xl shadow-xl p-6 md:p-8">
      {/* Header */}
      <div className="flex flex-col sm:flex-row items-start sm:items-center justify-between mb-6 pb-4 border-b border-gray-200/80">
        <div className="mb-3 sm:mb-0 text-right">
          <h2 className="text-xl font-semibold text-gray-800">תמונות פרופיל</h2>
          <p className="mt-1 text-sm text-gray-600">
            העלה עד {maxImages} תמונות. התמונה הראשית תוצג בכרטיס. (מומלץ: תמונות ברורות של הפנים)
          </p>
        </div>
        {!disabled && (
          <Button
            variant="outline"
            onClick={triggerFileInput}
            disabled={isLoading || images.length >= maxImages}
            className="rounded-full border-2 border-cyan-300 text-cyan-700 hover:bg-cyan-50/50 hover:border-cyan-400 transition-all duration-300 px-5 py-2.5 text-sm font-medium flex items-center gap-2 self-end sm:self-center" // Adjusted padding/text size
          >
            {isExternallyUploading ? ( // Show spinner only for external upload
              <Loader2 className="w-4 h-4 animate-spin" />
            ) : (
              <Upload className="w-4 h-4" />
            )}
            <span>העלאת תמונה</span>
          </Button>
        )}
      </div>

      {/* Input for file selection (hidden) */}
      <input
        type="file"
        ref={fileInputRef}
        className="hidden"
        accept="image/jpeg,image/png,image/jpg,image/webp" // Added webp
        onChange={handleFileSelect}
        disabled={isLoading || disabled || images.length >= maxImages}
      />

      {/* Images Grid */}
      <div className="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-5 gap-4 md:gap-5">
        {/* Render Images */}
        {images.map((image, index) => (
          <div
            key={image.id}
            className="relative group aspect-square rounded-xl overflow-hidden cursor-pointer bg-gray-100 shadow-md hover:shadow-lg transition-all duration-300 ease-in-out"
            onClick={() => handleImageClick(index)}
          >
            <Image
              src={image.url}
              alt={`תמונת פרופיל ${index + 1}`}
              fill
              className="object-cover transition-transform duration-300 group-hover:scale-105"
              sizes="(max-width: 640px) 50vw, (max-width: 768px) 33vw, (max-width: 1024px) 25vw, 20vw"
              priority={index < 2} // Prioritize loading first few images
            />

            {/* Controls Overlay - Always visible, subtle */}
            {!disabled && (
              <div
                className="absolute top-2 right-2 z-10 flex gap-1.5 opacity-85 group-hover:opacity-100 transition-opacity duration-200"
                onClick={handleControlClick} // Prevent triggering image click
              >
                {/* Set Main Button */}
                <Button
                  variant="secondary"
                  size="icon"
                  className={cn(
                    "w-8 h-8 rounded-full shadow-md border border-white/30 bg-black/40 text-white hover:bg-black/60 transition-colors",
                    image.isMain ? "cursor-default" : "hover:text-yellow-300" // Visual cue for main
                  )}
                  onClick={(e) => handleSetMainImage(image.id, true, e)}
                  disabled={image.isMain || isLoading}
                  title={image.isMain ? "תמונה ראשית" : "הפוך לתמונה ראשית"}
                >
                  <Star
                    className={cn(
                      "w-4 h-4 transition-colors",
                      image.isMain ? "text-yellow-400 fill-yellow-400" : "text-white"
                    )}
                  />
                </Button>

                {/* Delete Button */}
                <Button
                  variant="secondary"
                  size="icon"
                  className="w-8 h-8 rounded-full shadow-md border border-white/30 bg-black/40 text-white hover:bg-red-600 hover:border-red-700 transition-colors"
                  onClick={(e) => requestDelete(image.id, e)}
                  disabled={isLoading}
                  title="מחק תמונה"
                >
                  <Trash2 className="w-4 h-4" />
                </Button>
              </div>
            )}

            {/* Main Image Badge */}
            {image.isMain && (
              <Badge className="absolute bottom-2 left-2 rounded-full px-2.5 py-0.5 text-xs font-medium shadow-md text-white bg-gradient-to-r from-cyan-500 to-pink-500 border-none">
                ראשי
              </Badge>
            )}
          </div>
        ))}

        {/* Upload Placeholder */}
        {!disabled && images.length < maxImages && (
          <div
            onClick={triggerFileInput}
            className="flex flex-col items-center justify-center text-center p-4 aspect-square rounded-xl border-2 border-dashed border-cyan-300/70 bg-cyan-50/30 hover:bg-cyan-50/60 hover:border-cyan-400 transition-colors duration-300 cursor-pointer group"
          >
            <Upload className="w-8 h-8 text-cyan-500 mb-2 transition-transform group-hover:scale-110" />
            <span className="text-sm font-medium text-cyan-700">העלאת תמונה</span>
            <span className="text-xs text-cyan-600/90 mt-1">
              עד {maxImages - images.length} תמונות נוספות
            </span>
          </div>
        )}
      </div>

      {/* Empty State (if no images and not disabled) */}
      {images.length === 0 && !disabled && (
         <div className="text-center py-16 mt-6 bg-gradient-to-br from-cyan-50/20 to-pink-50/20 rounded-xl border border-dashed border-gray-300">
              <Camera className="w-12 h-12 mx-auto text-gray-400/80" />
              <p className="mt-4 text-gray-600 font-medium">
                אין עדיין תמונות בפרופיל
              </p>
         <p className="text-sm text-gray-500 mt-1 px-4">
  תמונה טובה היא הרושם הראשוני שלכם. כדאי להעלות אחת כדי להשלים את הפרופיל.
</p>
          </div>
      )}
      {/* Empty State (if disabled and no images) */}
       {images.length === 0 && disabled && (
         <div className="text-center py-16 mt-6 bg-gray-50/50 rounded-xl border border-gray-200">
              <Camera className="w-12 h-12 mx-auto text-gray-400" />
              <p className="mt-4 text-gray-500 font-medium">
                לא הועלו תמונות לפרופיל זה.
              </p>
          </div>
      )}

      {/* Delete Confirmation Dialog */}
      <Dialog open={deleteConfirmOpen} onOpenChange={setDeleteConfirmOpen}>
        <DialogContent className="sm:max-w-md bg-white/95 backdrop-blur-md rounded-2xl shadow-2xl border-none p-6" dir="rtl">
          <DialogHeader>
            <DialogTitle className="text-lg font-semibold text-gray-800">אישור מחיקת תמונה</DialogTitle>
            <DialogDescription className="text-sm text-gray-600 mt-2">
              האם למחוק את התמונה לצמיתות? לא ניתן לשחזר פעולה זו.
            </DialogDescription>
          </DialogHeader>
          <DialogFooter className="mt-6 flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2 sm:space-x-reverse gap-2">
            <Button
              type="button"
              variant="outline"
              onClick={() => setDeleteConfirmOpen(false)}
              disabled={isLoading}
              className="rounded-full px-5"
            >
              ביטול
            </Button>
            <Button
              type="button"
              variant="destructive"
              onClick={confirmDelete}
              disabled={isLoading}
               className="rounded-full px-5"
            >
              {isProcessing ? (
                <Loader2 className="w-4 h-4 ml-2 animate-spin" />
              ) : (
                <Trash2 className="w-4 h-4 ml-2" /> // Keep icon consistent
              )}
              <span>מחק</span>
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>

       {/* Image Viewer Dialog */}
       <Dialog open={showImageViewer} onOpenChange={setShowImageViewer}>
        <DialogContent
            className="p-0 m-0 w-screen h-screen max-w-none sm:max-w-full sm:h-full bg-black/90 backdrop-blur-sm border-none rounded-none flex items-center justify-center outline-none"
            aria-describedby={undefined} // Remove default description link if header is hidden
            >
            {/* Close Button */}
            <Button
                variant="ghost"
                size="icon"
                className="absolute top-4 left-4 z-50 bg-black/40 hover:bg-black/60 text-white rounded-full w-10 h-10 sm:w-12 sm:h-12 transition-colors"
                onClick={closeImageViewer}
                aria-label="סגור תצוגת תמונה"
            >
                <X className="w-6 h-6" />
            </Button>

            {/* Image Display Area */}
            {selectedViewerIndex !== null && images[selectedViewerIndex] && (
                <div className="relative w-full h-full flex items-center justify-center">
                    {/* Image */}
                     <div className="relative w-[95%] h-[85%] sm:w-[90%] sm:h-[90%]">
                        <Image
                            src={images[selectedViewerIndex].url}
                            alt={`תצוגה מוגדלת של תמונה ${selectedViewerIndex + 1}`}
                            fill
                            className="object-contain select-none" // Prevent image selection/drag
                            sizes="90vw" // Simplified sizes for viewer
                            priority // Load the viewed image with high priority
                        />
                    </div>


                    {/* Viewer Controls (Nav + Actions) */}
                    <div className="absolute top-0 left-0 w-full h-full pointer-events-none">
                         {/* Navigation */}
                         {images.length > 1 && (
                            <>
                            {/* Previous Button (Visually Right in RTL) */}
                            <Button
                                variant="ghost"
                                size="icon"
                                className="absolute right-2 sm:right-4 top-1/2 transform -translate-y-1/2 z-40 bg-black/40 hover:bg-black/60 text-white rounded-full w-10 h-10 sm:w-12 sm:h-12 transition-colors pointer-events-auto"
                                onClick={(e) => {e.stopPropagation(); handlePreviousImage();}}
                                disabled={selectedViewerIndex === 0}
                                aria-label="התמונה הקודמת"
                            >
                                <ChevronRight className="w-7 h-7" />
                            </Button>
                             {/* Next Button (Visually Left in RTL) */}
                            <Button
                                variant="ghost"
                                size="icon"
                                className="absolute left-2 sm:left-4 top-1/2 transform -translate-y-1/2 z-40 bg-black/40 hover:bg-black/60 text-white rounded-full w-10 h-10 sm:w-12 sm:h-12 transition-colors pointer-events-auto"
                                onClick={(e) => {e.stopPropagation(); handleNextImage();}}
                                disabled={selectedViewerIndex === images.length - 1}
                                aria-label="התמונה הבאה"
                            >
                                <ChevronLeft className="w-7 h-7" />
                            </Button>
                            </>
                         )}

                        {/* Action Buttons (Top Right) */}
                         {!disabled && (
                            <div className="absolute top-4 right-4 z-50 flex flex-col sm:flex-row gap-2 pointer-events-auto">
                                {/* Set as Main Button */}
                                {!images[selectedViewerIndex].isMain && (
                                <Button
                                    variant="secondary"
                                    className="rounded-full bg-white/70 backdrop-blur-sm shadow-md hover:bg-white/90 text-gray-800 px-3 py-1.5 text-xs sm:text-sm border border-white/20 flex items-center gap-1.5"
                                    onClick={(e) => handleSetMainImage(images[selectedViewerIndex].id, true, e)}
                                    size="sm"
                                    disabled={isLoading}
                                >
                                    <Star className="w-4 h-4" />
                                    <span>הפוך לראשי</span>
                                </Button>
                                )}

                                {/* Delete Button */}
                                <Button
                                    variant="destructive" // Using destructive variant directly
                                    className="rounded-full bg-red-600/80 hover:bg-red-700 text-white px-3 py-1.5 text-xs sm:text-sm shadow-md border-none flex items-center gap-1.5"
                                    onClick={(e) => requestDelete(images[selectedViewerIndex].id, e)}
                                    size="sm"
                                    disabled={isLoading}
                                >
                                    <Trash2 className="w-4 h-4" />
                                    <span>מחק תמונה</span>
                                </Button>
                            </div>
                        )}

                        {/* Counter */}
                        {images.length > 0 && (
                           <div className="absolute bottom-4 left-1/2 transform -translate-x-1/2 bg-black/60 text-white px-3 py-1 rounded-full text-xs sm:text-sm font-medium select-none">
                             {selectedViewerIndex + 1} / {images.length}
                           </div>
                        )}
                    </div>
                 </div>
            )}
        </DialogContent>
       </Dialog>
    </div>
  );
};

export default PhotosSection;

--- End of Content for PhotosSection.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\user\Desktop\matchpoint\shidduch-system\src\app\components\profile\sections\PreferencesSection.tsx
--------------------------------------------------------------------------------
Content:
// src/app/(authenticated)/profile/components/dashboard/PreferencesSection.tsx
"use client";
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from "@/components/ui/tooltip";
import { Info } from "lucide-react";
import React, { useState, useEffect } from "react";
import { Card, CardHeader, CardTitle, CardContent } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import {
  Pencil,
  Save,
  X,
  FileText, // Icon for General Description
  SlidersHorizontal, // Icon for Age/Height
  MapPin, // Icon for Location/Religious (expanded)
  GraduationCap, // Icon for Education/Occupation (expanded)
  Users, // Icon for Family/Personal Background (new)
  Sparkles, // Icon for Character/Hobbies (new)
  Heart, // For shomer negiah, children etc.
  Briefcase, // For service type
  Shield, // Could be for traits
  Palette, // Could be for hobbies
  Smile, // Could be for traits
} from "lucide-react";
import { UserProfile } from "@/types/next-auth";
import { cn } from "@/lib/utils";
import {
  Gender,
  ServiceType,
  HeadCoveringType,
  KippahType,
} from "@prisma/client";
interface PreferencesSectionProps {
  profile: UserProfile | null;
  isEditing: boolean;
  viewOnly?: boolean;
  setIsEditing: (value: boolean) => void;
  onChange: (data: Partial<UserProfile>) => void;
}

// --- Options for existing multi-select fields ---
const locationOptions = [
  { value: "צפון", label: "צפון" },
  { value: "מרכז", label: "מרכז" },
  { value: "דרום", label: "דרום" },
  { value: "ירושלים", label: "ירושלים" },
  { value: "יהודה ושומרון", label: "יהודה ושומרון" },
  { value: 'חו"ל', label: 'חו"ל' },
];

const religiousLevelOptions = [
  { value: "חרדי", label: "חרדי" },
  { value: "חרדי מודרני", label: "חרדי מודרני" },
  { value: "דתי", label: "דתי" },
  { value: "דתי-לייט", label: "דתי-לייט" },
  { value: "מסורתי", label: "מסורתי" },
  { value: "חילוני", label: "חילוני" },
  { value: "לא משנה", label: "ללא העדפה / גמיש" },
];

const educationPreferenceOptions = [
  { value: "תיכונית", label: "תיכונית" },
  { value: "על תיכונית", label: "על תיכונית" },
  { value: "אקדמית", label: "אקדמית" },
  { value: "תורנית", label: "תורנית" },
  { value: "ללא העדפה", label: "ללא העדפה" },
];

const occupationPreferenceOptions = [
  { value: "עובד/ת", label: "עובד/ת" },
  { value: "סטודנט/ית", label: "סטודנט/ית" },
  { value: "אברך/כולל", label: "אברך/כולל" },
  { value: "עצמאי/ת", label: "עצמאי/ת" },
  { value: "שירות צבאי/לאומי", label: "שירות צבאי/לאומי" },
  { value: "ללא העדפה", label: "ללא העדפה" },
];

// --- Options for NEW fields ---
const preferredShomerNegiahOptions = [
  { value: "yes", label: "כן, חשוב לי" },
  { value: "no", label: "לא, אין העדפה" }, // Or "לא, לא רלוונטי"
  { value: "flexible", label: "גמיש/תלוי באדם" },
];

const preferredPartnerHasChildrenOptions = [
  { value: "yes_ok", label: "כן, זה בסדר גמור" },
  { value: "no_preferred", label: "מעדיפ/ה שלא יהיו" },
  { value: "does_not_matter", label: "לא משנה לי" },
];

const preferredOriginOptions = [
  { value: "ashkenazi", label: "אשכנזי/ה" },
  { value: "sephardi", label: "ספרדי/ה" },
  { value: "mizrachi", label: "מזרחי/ה" },
  { value: "temani", label: "תימני/ה" },
  { value: "mixed", label: "מעורב/ת" },
  { value: "ethiopian", label: "אתיופי/ה" },
  { value: "american", label: "אמריקאי/ה" },
  { value: "european", label: "אירופאי/ה" },
  { value: "russian_speaking", label: "ממדינות דוברות רוסית" },
  { value: "french_speaking", label: "ממדינות דוברות צרפתית" },
  { value: "south_american", label: "דרום אמריקאי/ה" },
  { value: "other", label: "אחר" },
  { value: "no_preference", label: "ללא העדפה מיוחדת" },
];

const preferredAliyaStatusOptions = [
  { value: "oleh", label: "עולה חדש/ה" },
  { value: "tzabar", label: "צבר/ית" },
  { value: "no_preference", label: "ללא העדפה" },
];

// Options copied/adapted from ProfileSection.tsx (or similar source)
const maritalStatusOptions = [
  // For preferredMaritalStatuses
  { value: "single", label: "רווק/ה" },
  { value: "divorced", label: "גרוש/ה" },
  { value: "widowed", label: "אלמן/ה" },
  { value: "annulled", label: "נישואין שבוטלו" },
  { value: "any", label: "כל האפשרויות פתוחות" },
];

const serviceTypeOptions = [
  // For preferredServiceTypes
  { value: ServiceType.MILITARY_COMBATANT, label: "צבאי - לוחם/ת" },
  { value: ServiceType.MILITARY_SUPPORT, label: "צבאי - תומכ/ת לחימה" },
  { value: ServiceType.MILITARY_OFFICER, label: "צבאי - קצונה" },
  {
    value: ServiceType.MILITARY_INTELLIGENCE_CYBER_TECH,
    label: "צבאי - מודיעין/סייבר/טכנולוגי",
  },
  { value: ServiceType.NATIONAL_SERVICE_ONE_YEAR, label: "שירות לאומי - שנה" },
  {
    value: ServiceType.NATIONAL_SERVICE_TWO_YEARS,
    label: "שירות לאומי - שנתיים",
  },
  { value: ServiceType.HESDER_YESHIVA, label: "ישיבת הסדר" },
  {
    value: ServiceType.YESHIVA_ONLY_POST_HS,
    label: "ישיבה גבוהה / מדרשה (ללא שירות)",
  },
  {
    value: ServiceType.PRE_MILITARY_ACADEMY_AND_SERVICE,
    label: "מכינה קדם-צבאית ושירות",
  },
  { value: ServiceType.EXEMPTED, label: "פטור משירות" },
  { value: ServiceType.CIVILIAN_SERVICE, label: "שירות אזרחי" },
  { value: ServiceType.OTHER, label: "אחר / לא רלוונטי" },
  { value: "no_preference", label: "ללא העדפה / לא משנה" },
];

const headCoveringOptions = [
  // For preferredHeadCoverings (if user is Male)
  { value: HeadCoveringType.FULL_COVERAGE, label: "כיסוי ראש מלא" },
  { value: HeadCoveringType.PARTIAL_COVERAGE, label: "כיסוי ראש חלקי" },
  { value: HeadCoveringType.HAT_BERET, label: "כובע / ברט" },
  {
    value: HeadCoveringType.SCARF_ONLY_SOMETIMES,
    label: "מטפחת (רק באירועים/בית כנסת)",
  },
  { value: HeadCoveringType.NONE, label: "ללא כיסוי ראש" },
  { value: "any", label: "כל האפשרויות פתוחות" },
];

const kippahTypeOptions = [
  // For preferredKippahTypes (if user is Female)
  { value: KippahType.BLACK_VELVET, label: "קטיפה שחורה" },
  { value: KippahType.KNITTED_SMALL, label: "סרוגה קטנה" },
  { value: KippahType.KNITTED_LARGE, label: "סרוגה גדולה" },
  { value: KippahType.CLOTH, label: "בד" },
  { value: KippahType.BRESLEV, label: "ברסלב (לבנה גדולה)" },
  { value: KippahType.NONE_AT_WORK_OR_CASUAL, label: "לא בעבודה / ביומיום" },
  { value: KippahType.NONE_USUALLY, label: "לרוב לא חובש" },
  { value: KippahType.OTHER, label: "אחר" },
  { value: "any", label: "כל האפשרויות פתוחות" },
];

const characterTraitsOptions = [
  // For preferredCharacterTraits
  { value: "empathetic", label: "אמפתי/ת", icon: Heart },
  { value: "driven", label: "שאפתן/ית", icon: Briefcase },
  { value: "optimistic", label: "אופטימי/ת", icon: Smile },
  { value: "family_oriented", label: "משפחתי/ת", icon: Users },
  { value: "intellectual", label: "אינטלקטואל/ית", icon: GraduationCap },
  { value: "organized", label: "מאורגנ/ת", icon: Palette },
  { value: "calm", label: "רגוע/ה", icon: Heart },
  { value: "humorous", label: "בעל/ת חוש הומור", icon: Smile },
  { value: "sociable", label: "חברותי/ת", icon: Users },
  { value: "sensitive", label: "רגיש/ה", icon: Heart },
  { value: "independent", label: "עצמאי/ת", icon: MapPin }, // Icon might need adjustment
  { value: "creative", label: "יצירתי/ת", icon: Palette },
  { value: "honest", label: "כן/ה וישר/ה", icon: Shield },
  { value: "responsible", label: "אחראי/ת", icon: Shield },
  { value: "easy_going", label: "זורם/ת וקליל/ה", icon: Smile },
  { value: "no_strong_preference", label: "ללא העדפה חזקה", icon: Sparkles },
];

const hobbiesOptions = [
  // For preferredHobbies
  { value: "travel", label: "טיולים", icon: MapPin },
  { value: "sports", label: "ספורט", icon: Briefcase }, // Icon might need adjustment
  { value: "reading", label: "קריאה", icon: GraduationCap },
  { value: "cooking_baking", label: "בישול/אפיה", icon: Palette },
  { value: "music_playing_instrument", label: "מוזיקה/נגינה", icon: Palette }, // Icon might need adjustment
  { value: "art_crafts", label: "אומנות/יצירה", icon: Palette },
  { value: "volunteering", label: "התנדבות", icon: Heart },
  { value: "learning_courses", label: "למידה/קורסים", icon: GraduationCap },
  { value: "board_games_puzzles", label: "משחקי קופסא/פאזלים", icon: Smile },
  { value: "movies_theater", label: "סרטים/תיאטרון", icon: Smile },
  { value: "dancing", label: "ריקוד", icon: Users },
  { value: "writing", label: "כתיבה", icon: GraduationCap },
  { value: "nature_hiking", label: "טבע/טיולים רגליים", icon: MapPin },
  { value: "photography", label: "צילום", icon: Palette },
  { value: "no_strong_preference", label: "ללא העדפה חזקה", icon: Sparkles },
];

const PreferencesSection: React.FC<PreferencesSectionProps> = ({
  profile,
  isEditing,
  viewOnly = false,
  setIsEditing,
  onChange,
}) => {
  const [formData, setFormData] = useState<Partial<UserProfile>>({});
  const [initialData, setInitialData] = useState<Partial<UserProfile>>({});

  useEffect(() => {
    if (profile) {
      const nullToUndefined = <T,>(value: T | null): T | undefined =>
        value === null ? undefined : value;

      const newFormData: Partial<UserProfile> = {
        ...profile,
        // Numeric fields
        preferredAgeMin: nullToUndefined(profile.preferredAgeMin),
        preferredAgeMax: nullToUndefined(profile.preferredAgeMax),
        preferredHeightMin: nullToUndefined(profile.preferredHeightMin),
        preferredHeightMax: nullToUndefined(profile.preferredHeightMax),

        // String fields
        matchingNotes: profile.matchingNotes ?? "",
        contactPreference: nullToUndefined(profile.contactPreference),
        preferredShomerNegiah: nullToUndefined(profile.preferredShomerNegiah),
        preferredPartnerHasChildren: nullToUndefined(
          profile.preferredPartnerHasChildren
        ),
        preferredAliyaStatus: nullToUndefined(profile.preferredAliyaStatus),

        // Array fields
        preferredLocations: profile.preferredLocations ?? [],
        preferredReligiousLevels: profile.preferredReligiousLevels ?? [],
        preferredEducation: profile.preferredEducation ?? [],
        preferredOccupations: profile.preferredOccupations ?? [],
        preferredMaritalStatuses: profile.preferredMaritalStatuses ?? [],
        preferredOrigins: profile.preferredOrigins ?? [],
        preferredServiceTypes: profile.preferredServiceTypes ?? [],
        preferredHeadCoverings: profile.preferredHeadCoverings ?? [],
        preferredKippahTypes: profile.preferredKippahTypes ?? [],
        preferredCharacterTraits: profile.preferredCharacterTraits ?? [],
        preferredHobbies: profile.preferredHobbies ?? [],
      };
      setFormData(newFormData);
      setInitialData(newFormData);
    }
  }, [profile]);

  useEffect(() => {
    if (!isEditing && initialData) {
      // Check initialData to prevent reset before it's set
      setFormData(initialData);
    }
  }, [isEditing, initialData]);

  const handleInputChange = (
    e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>
  ) => {
    const { name, value, type } = e.target;
    const field = name as keyof UserProfile;

    setFormData((prev) => {
      let processedValue: string | number | undefined;
      if (type === "number") {
        const num = parseInt(value, 10);
        processedValue = isNaN(num) ? undefined : num;
      } else {
        processedValue = value === "" ? undefined : value; // Treat empty string as undefined for optional fields
      }
      return { ...prev, [field]: processedValue };
    });
  };

  const handleSelectChange = (field: keyof UserProfile, value: string) => {
    setFormData((prev) => ({
      ...prev,
      [field]:
        value === "" ||
        value === "לא_משנה" ||
        value === "any" ||
        value === "no_preference"
          ? undefined
          : (value as UserProfile[typeof field]),
    }));
  };

  const handleMultiSelectChange = (field: keyof UserProfile, value: string) => {
    setFormData((prev) => {
      const currentValues =
        (Array.isArray(prev[field]) ? (prev[field] as string[]) : []) ?? [];
      let newValues;
      if (
        value === "any" ||
        value === "no_preference" ||
        value === "לא_משנה" ||
        value === "no_strong_preference"
      ) {
        newValues = currentValues.includes(value) ? [] : [value]; // Select "any" deselects others, or selects only "any"
      } else {
        // Remove "any" or "no_preference" if another specific option is selected
        const filteredValues = currentValues.filter(
          (v) =>
            v !== "any" &&
            v !== "no_preference" &&
            v !== "לא_משנה" &&
            v !== "no_strong_preference"
        );
        newValues = filteredValues.includes(value)
          ? filteredValues.filter((v) => v !== value)
          : [...filteredValues, value];
      }
      return { ...prev, [field]: newValues };
    });
  };

  const handleSave = () => {
    // Filter out empty strings from array fields before saving, if desired
    const dataToSave = { ...formData };
    // Example: dataToSave.preferredLocations = dataToSave.preferredLocations?.filter(loc => loc !== "");
    onChange(dataToSave);
    setIsEditing(false);
    setInitialData(dataToSave);
  };

  const handleCancel = () => {
    setFormData(initialData);
    setIsEditing(false);
  };

  const renderMultiSelectBadges = (
    fieldValues: string[] | undefined | null,
    options: { value: string; label: string; icon?: React.ElementType }[],
    badgeClass: string = "bg-sky-100 text-sky-700",
    emptyPlaceholder: string = "לא נבחרו פריטים."
  ) => {
    if (!fieldValues || fieldValues.length === 0) {
      return <p className="text-sm text-gray-500 italic">{emptyPlaceholder}</p>;
    }
    return fieldValues.map((value) => {
      const option = options.find((opt) => opt.value === value);
      return option ? (
        <Badge
          key={value}
          variant="secondary"
          className={cn(
            "mr-1 mb-1 text-xs px-2 py-0.5 rounded-full flex items-center",
            badgeClass
          )}
        >
          {option.icon && <option.icon className="w-3 h-3 rtl:ml-1 mr-1" />}
          {option.label}
        </Badge>
      ) : null;
    });
  };

  const getSelectDisplayValue = (
    value: string | undefined | null,
    options: { value: string; label: string }[],
    placeholder: string = "לא צוין."
  ) => {
    if (!value)
      return <span className="text-gray-500 italic">{placeholder}</span>;
    const option = options.find((opt) => opt.value === value);
    return option ? (
      option.label
    ) : (
      <span className="text-gray-500 italic">{placeholder}</span>
    );
  };

  return (
    <div className="relative" dir="rtl">
      <div className="sticky top-0 z-10 bg-gradient-to-b from-white via-white/95 to-white/0 pt-4 pb-3 backdrop-blur-sm">
        <div className="container mx-auto max-w-screen-xl px-4">
          <div className="flex items-center justify-between">
            <div>
              <h1 className="text-xl md:text-2xl font-bold text-slate-800">
                העדפות התאמה
              </h1>
              <p className="text-sm text-slate-500">
                {isEditing && !viewOnly
                  ? "ערוך/י את העדפותיך למציאת התאמה."
                  : "העדפות שהוגדרו לחיפוש התאמה."}
              </p>
            </div>
            {!viewOnly && (
              <div className="flex gap-2">
                {!isEditing ? (
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={() => setIsEditing(true)}
                    className="rounded-full shadow-sm hover:shadow-md transition-all duration-300 border-cyan-400 text-cyan-700 hover:bg-cyan-50"
                  >
                    <Pencil className="w-3.5 h-3.5 ml-1.5" />
                    עריכה
                  </Button>
                ) : (
                  <>
                    <Button
                      variant="outline"
                      size="sm"
                      onClick={handleCancel}
                      className="rounded-full shadow-sm hover:shadow-md transition-all duration-300 border-gray-300 text-gray-700 hover:bg-gray-50"
                    >
                      <X className="w-3.5 h-3.5 ml-1.5" />
                      ביטול
                    </Button>
                    <Button
                      variant="default"
                      size="sm"
                      onClick={handleSave}
                      className="rounded-full shadow-sm hover:shadow-md transition-all duration-300 bg-cyan-600 hover:bg-cyan-700 text-white"
                    >
                      <Save className="w-3.5 h-3.5 ml-1.5" />
                      שמירה
                    </Button>
                  </>
                )}
              </div>
            )}
          </div>
        </div>
      </div>

      <div className="container mx-auto max-w-screen-xl py-6 px-4">
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
          {/* --- Column 1 --- */}
          <div className="space-y-6">
            {/* Card: General Description & Contact Preferences */}
            <Card className="bg-white/80 backdrop-blur-md rounded-2xl shadow-lg border border-gray-200/40 overflow-hidden">
              <CardHeader className="bg-gradient-to-r from-slate-50/40 to-gray-100/40 border-b border-gray-200/50 p-4 flex items-center space-x-2 rtl:space-x-reverse">
                <FileText className="w-5 h-5 text-slate-600" />
                <CardTitle className="text-base font-semibold text-gray-700">
                  תיאור כללי והעדפות קשר
                </CardTitle>
              </CardHeader>
              <CardContent className="p-4 md:p-6 space-y-5">
                <div>
              <div className="flex items-center gap-1.5">
    <Label htmlFor="matchingNotes" className="text-sm font-medium text-gray-700">
        תיאור כללי על המועמד/ת המבוקש/ת
    </Label>
    <TooltipProvider delayDuration={100}>
        <Tooltip>
            <TooltipTrigger type="button"><Info className="w-4 h-4 text-gray-400 hover:text-gray-600" /></TooltipTrigger>
            <TooltipContent side="top" className="max-w-xs text-center">
                <p>זהו אחד השדות החשובים ביותר! תאר/י במילים שלך את סוג האדם שאת/ה מחפש/ת. התיאור הזה יעזור לשדכנים להבין את הראש שלך מעבר לנתונים היבשים.</p>
            </TooltipContent>
        </Tooltip>
    </TooltipProvider>
</div>
                  {isEditing ? (
                    <Textarea
                      id="matchingNotes"
                      name="matchingNotes"
                      value={formData.matchingNotes || ""}
                      onChange={handleInputChange}
                      placeholder="פרט/י על סוג האדם שאת/ה מחפש/ת, תכונות חשובות, ציפיות וכו'..."
                      className="text-sm focus:ring-cyan-500 min-h-[100px] rounded-lg"
                      rows={4}
                    />
                  ) : (
                    <p className="mt-1 text-sm text-gray-700 whitespace-pre-wrap min-h-[60px] bg-slate-50/70 p-3 rounded-lg border border-slate-200/50">
                      {formData.matchingNotes || (
                        <span className="text-gray-500 italic">
                          לא הוזן תיאור.
                        </span>
                      )}
                    </p>
                  )}
                </div>
                <div>
                  <Label
                    htmlFor="contactPreference"
                    className="block mb-1.5 text-xs font-medium text-gray-600"
                  >
                    אופן יצירת קשר מועדף (לאחר אישור הצעה)
                  </Label>
                  {isEditing ? (
                    <Select
                      name="contactPreference"
                      value={formData.contactPreference || ""}
                      onValueChange={(value: string) =>
                        handleSelectChange("contactPreference", value)
                      }
                    >
                      <SelectTrigger
                        id="contactPreference"
                        className="h-9 text-sm focus:ring-cyan-500"
                      >
                        <SelectValue placeholder="בחר/י אפשרות..." />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="direct">ישירות</SelectItem>
                        <SelectItem value="matchmaker">דרך השדכן/ית</SelectItem>
                        <SelectItem value="both">שתי האפשרויות</SelectItem>
                      </SelectContent>
                    </Select>
                  ) : (
                    <p className="text-sm text-gray-800 font-medium mt-1">
                      {getSelectDisplayValue(
                        formData.contactPreference,
                        [
                          { value: "direct", label: "ישירות" },
                          { value: "matchmaker", label: "דרך השדכן/ית" },
                          { value: "both", label: "שתי האפשרויות" },
                        ],
                        "לא צוין"
                      )}
                    </p>
                  )}
                </div>
              </CardContent>
            </Card>

            {/* Card: Age & Height Preferences */}
            <Card className="bg-white/80 backdrop-blur-md rounded-2xl shadow-lg border border-gray-200/40 overflow-hidden">
              <CardHeader className="bg-gradient-to-r from-indigo-50/40 to-purple-50/40 border-b border-gray-200/50 p-4 flex items-center space-x-2 rtl:space-x-reverse">
                <SlidersHorizontal className="w-5 h-5 text-indigo-700" />
                <CardTitle className="text-base font-semibold text-gray-700">
                  העדפות גיל וגובה
                </CardTitle>
              </CardHeader>
              <CardContent className="p-4 md:p-6">
                <div className="grid grid-cols-1 sm:grid-cols-2 gap-x-6 gap-y-5">
                  <div>
                <div className="flex items-center gap-1.5">
    <Label className="text-xs font-medium text-gray-600">
      טווח גילאים מועדף
    </Label>
    <TooltipProvider delayDuration={100}>
        <Tooltip>
            <TooltipTrigger type="button"><Info className="w-4 h-4 text-gray-400 hover:text-gray-600" /></TooltipTrigger>
            <TooltipContent side="top">
                <p>הגדרת טווח גילאים רחב יותר תגדיל את כמות ההצעות שתקבל/י.</p>
            </TooltipContent>
        </Tooltip>
    </TooltipProvider>
</div>
                    <div className="flex items-center gap-2">
                      <Input
                        type="number"
                        name="preferredAgeMin"
                        placeholder="מגיל"
                        aria-label="גיל מינימלי מועדף"
                        value={formData.preferredAgeMin ?? ""}
                        onChange={handleInputChange}
                        disabled={!isEditing}
                        className="h-9 text-sm focus:ring-cyan-500 disabled:bg-gray-100/70"
                      />
                      <span className="text-gray-500">-</span>
                      <Input
                        type="number"
                        name="preferredAgeMax"
                        placeholder="עד גיל"
                        aria-label="גיל מקסימלי מועדף"
                        value={formData.preferredAgeMax ?? ""}
                        onChange={handleInputChange}
                        disabled={!isEditing}
                        className="h-9 text-sm focus:ring-cyan-500 disabled:bg-gray-100/70"
                      />
                    </div>
                    {!isEditing &&
                      !formData.preferredAgeMin &&
                      !formData.preferredAgeMax && (
                        <p className="text-xs text-gray-500 italic mt-1">
                          לא הוגדר טווח גילאים.
                        </p>
                      )}
                  </div>
                  <div>
                    <Label className="block mb-1.5 text-xs font-medium text-gray-600">
                      טווח גבהים מועדף (סמ)
                    </Label>
                    <div className="flex items-center gap-2">
                      <Input
                        type="number"
                        name="preferredHeightMin"
                        placeholder="מ-"
                        aria-label="גובה מינימלי מועדף בסנטימטרים"
                        value={formData.preferredHeightMin ?? ""}
                        onChange={handleInputChange}
                        disabled={!isEditing}
                        className="h-9 text-sm focus:ring-cyan-500 disabled:bg-gray-100/70"
                      />
                      <span className="text-gray-500">-</span>
                      <Input
                        type="number"
                        name="preferredHeightMax"
                        placeholder="עד-"
                        aria-label="גובה מקסימלי מועדף בסנטימטרים"
                        value={formData.preferredHeightMax ?? ""}
                        onChange={handleInputChange}
                        disabled={!isEditing}
                        className="h-9 text-sm focus:ring-cyan-500 disabled:bg-gray-100/70"
                      />
                    </div>
                    {!isEditing &&
                      !formData.preferredHeightMin &&
                      !formData.preferredHeightMax && (
                        <p className="text-xs text-gray-500 italic mt-1">
                          לא הוגדר טווח גבהים.
                        </p>
                      )}
                  </div>
                </div>
              </CardContent>
            </Card>
          </div>

          {/* --- Column 2 --- */}
          <div className="space-y-6">
            {/* Card: Location, Religious & Lifestyle Preferences */}
            <Card className="bg-white/80 backdrop-blur-md rounded-2xl shadow-lg border border-gray-200/40 overflow-hidden">
              <CardHeader className="bg-gradient-to-r from-sky-50/40 to-blue-50/40 border-b border-gray-200/50 p-4 flex items-center space-x-2 rtl:space-x-reverse">
                <MapPin className="w-5 h-5 text-sky-700" />
                <CardTitle className="text-base font-semibold text-gray-700">
                  מיקום, רמה דתית ואורח חיים
                </CardTitle>
              </CardHeader>
              <CardContent className="p-4 md:p-6 space-y-6">
                <div>
                  <Label className="block mb-2 text-xs font-medium text-gray-600">
                    אזורי מגורים מועדפים
                  </Label>
                  {isEditing ? (
                    <div className="flex flex-wrap gap-2">
                      {locationOptions.map((loc) => (
                        <Button
                          key={loc.value}
                          type="button"
                          variant={
                            (formData.preferredLocations || []).includes(
                              loc.value
                            )
                              ? "default"
                              : "outline"
                          }
                          size="sm"
                          onClick={() =>
                            handleMultiSelectChange(
                              "preferredLocations",
                              loc.value
                            )
                          }
                          className={cn(
                            "rounded-full text-xs px-3 py-1.5 transition-all",
                            (formData.preferredLocations || []).includes(
                              loc.value
                            )
                              ? "bg-sky-500 hover:bg-sky-600 text-white border-sky-500"
                              : "border-gray-300 text-gray-600 hover:bg-gray-50 hover:border-gray-400"
                          )}
                        >
                          {loc.label}
                        </Button>
                      ))}
                    </div>
                  ) : (
                    <div className="mt-1 flex flex-wrap gap-1.5">
                      {renderMultiSelectBadges(
                        formData.preferredLocations,
                        locationOptions,
                        "bg-sky-100 text-sky-700",
                        "לא נבחרו אזורי מגורים."
                      )}
                    </div>
                  )}
                </div>
                <div>
                 <div className="flex items-center gap-1.5">
    <Label className="text-xs font-medium text-gray-600">
      רמות דתיות מועדפות
    </Label>
    <TooltipProvider delayDuration={100}>
        <Tooltip>
            <TooltipTrigger type="button"><Info className="w-4 h-4 text-gray-400 hover:text-gray-600" /></TooltipTrigger>
            <TooltipContent side="top" className="max-w-xs text-center">
                <p>מומלץ לבחור 1-3 רמות שמתאימות לך. בחירה רחבה מדי עלולה להוביל להצעות פחות מדויקות.</p>
            </TooltipContent>
        </Tooltip>
    </TooltipProvider>
</div>
                  {isEditing ? (
                    <div className="flex flex-wrap gap-2">
                      {religiousLevelOptions.map((level) => (
                        <Button
                          key={level.value}
                          type="button"
                          variant={
                            (formData.preferredReligiousLevels || []).includes(
                              level.value
                            )
                              ? "default"
                              : "outline"
                          }
                          size="sm"
                          onClick={() =>
                            handleMultiSelectChange(
                              "preferredReligiousLevels",
                              level.value
                            )
                          }
                          className={cn(
                            "rounded-full text-xs px-3 py-1.5 transition-all",
                            (formData.preferredReligiousLevels || []).includes(
                              level.value
                            )
                              ? "bg-pink-500 hover:bg-pink-600 text-white border-pink-500"
                              : "border-gray-300 text-gray-600 hover:bg-gray-50 hover:border-gray-400"
                          )}
                        >
                          {level.label}
                        </Button>
                      ))}
                    </div>
                  ) : (
                    <div className="mt-1 flex flex-wrap gap-1.5">
                      {renderMultiSelectBadges(
                        formData.preferredReligiousLevels,
                        religiousLevelOptions,
                        "bg-pink-100 text-pink-700",
                        "לא נבחרו רמות דתיות."
                      )}
                    </div>
                  )}
                </div>
                <div>
                  <Label
                    htmlFor="preferredShomerNegiah"
                    className="block mb-1.5 text-xs font-medium text-gray-600"
                  >
                    שמירת נגיעה אצל הצד השני
                  </Label>
                  {isEditing ? (
                    <Select
                      name="preferredShomerNegiah"
                      value={formData.preferredShomerNegiah || ""}
                      onValueChange={(value) =>
                        handleSelectChange("preferredShomerNegiah", value)
                      }
                    >
                      <SelectTrigger
                        id="preferredShomerNegiah"
                        className="h-9 text-sm focus:ring-cyan-500"
                      >
                        <SelectValue placeholder="בחר/י העדפה..." />
                      </SelectTrigger>
                      <SelectContent>
                        {preferredShomerNegiahOptions.map((opt) => (
                          <SelectItem key={opt.value} value={opt.value}>
                            {opt.label}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  ) : (
                    <p className="text-sm text-gray-800 font-medium mt-1">
                      {getSelectDisplayValue(
                        formData.preferredShomerNegiah,
                        preferredShomerNegiahOptions
                      )}
                    </p>
                  )}
                </div>
                {/* Conditional rendering for preferredHeadCoverings / preferredKippahTypes */}
                {profile?.gender === Gender.MALE && (
                  <div>
                    <Label className="block mb-2 text-xs font-medium text-gray-600">
                      העדפת כיסוי ראש לבת הזוג
                    </Label>
                    {isEditing ? (
                      <div className="flex flex-wrap gap-2">
                        {headCoveringOptions.map((opt) => (
                          <Button
                            key={opt.value}
                            type="button"
                            variant={
                              (formData.preferredHeadCoverings || []).includes(
                                opt.value as HeadCoveringType
                              )
                                ? "default"
                                : "outline"
                            }
                            size="sm"
                            onClick={() =>
                              handleMultiSelectChange(
                                "preferredHeadCoverings",
                                opt.value as HeadCoveringType
                              )
                            }
                            className={cn(
                              "rounded-full text-xs px-3 py-1.5 transition-all",
                              (formData.preferredHeadCoverings || []).includes(
                                opt.value as HeadCoveringType
                              )
                                ? "bg-purple-500 hover:bg-purple-600 text-white border-purple-500"
                                : "border-gray-300 text-gray-600 hover:bg-gray-50 hover:border-gray-400"
                            )}
                          >
                            {opt.label}
                          </Button>
                        ))}
                      </div>
                    ) : (
                      <div className="mt-1 flex flex-wrap gap-1.5">
                        {renderMultiSelectBadges(
                          formData.preferredHeadCoverings as string[],
                          headCoveringOptions,
                          "bg-purple-100 text-purple-700",
                          "לא נבחרו העדפות כיסוי ראש."
                        )}
                      </div>
                    )}
                  </div>
                )}
                {profile?.gender === Gender.FEMALE && (
                  <div>
                    <Label className="block mb-2 text-xs font-medium text-gray-600">
                      העדפת סוג כיפה לבן הזוג
                    </Label>
                    {isEditing ? (
                      <div className="flex flex-wrap gap-2">
                        {kippahTypeOptions.map((opt) => (
                          <Button
                            key={opt.value}
                            type="button"
                            variant={
                              (formData.preferredKippahTypes || []).includes(
                                opt.value as KippahType
                              )
                                ? "default"
                                : "outline"
                            }
                            size="sm"
                            onClick={() =>
                              handleMultiSelectChange(
                                "preferredKippahTypes",
                                opt.value as KippahType
                              )
                            }
                            className={cn(
                              "rounded-full text-xs px-3 py-1.5 transition-all",
                              (formData.preferredKippahTypes || []).includes(
                                opt.value as KippahType
                              )
                                ? "bg-orange-500 hover:bg-orange-600 text-white border-orange-500"
                                : "border-gray-300 text-gray-600 hover:bg-gray-50 hover:border-gray-400"
                            )}
                          >
                            {opt.label}
                          </Button>
                        ))}
                      </div>
                    ) : (
                      <div className="mt-1 flex flex-wrap gap-1.5">
                        {renderMultiSelectBadges(
                          formData.preferredKippahTypes as string[],
                          kippahTypeOptions,
                          "bg-orange-100 text-orange-700",
                          "לא נבחרו העדפות סוג כיפה."
                        )}
                      </div>
                    )}
                  </div>
                )}
              </CardContent>
            </Card>

            {/* Card: Education, Occupation & Service Preferences */}
            <Card className="bg-white/80 backdrop-blur-md rounded-2xl shadow-lg border border-gray-200/40 overflow-hidden">
              <CardHeader className="bg-gradient-to-r from-teal-50/40 to-green-50/40 border-b border-gray-200/50 p-4 flex items-center space-x-2 rtl:space-x-reverse">
                <GraduationCap className="w-5 h-5 text-teal-700" />
                <CardTitle className="text-base font-semibold text-gray-700">
                  השכלה, תעסוקה ושירות
                </CardTitle>
              </CardHeader>
              <CardContent className="p-4 md:p-6 space-y-6">
                <div>
                  <Label className="block mb-2 text-xs font-medium text-gray-600">
                    רמות השכלה מועדפות
                  </Label>
                  {isEditing ? (
                    <div className="flex flex-wrap gap-2">
                      {educationPreferenceOptions.map((edu) => (
                        <Button
                          key={edu.value}
                          type="button"
                          variant={
                            (formData.preferredEducation || []).includes(
                              edu.value
                            )
                              ? "default"
                              : "outline"
                          }
                          size="sm"
                          onClick={() =>
                            handleMultiSelectChange(
                              "preferredEducation",
                              edu.value
                            )
                          }
                          className={cn(
                            "rounded-full text-xs px-3 py-1.5 transition-all",
                            (formData.preferredEducation || []).includes(
                              edu.value
                            )
                              ? "bg-teal-500 hover:bg-teal-600 text-white border-teal-500"
                              : "border-gray-300 text-gray-600 hover:bg-gray-50 hover:border-gray-400"
                          )}
                        >
                          {edu.label}
                        </Button>
                      ))}
                    </div>
                  ) : (
                    <div className="mt-1 flex flex-wrap gap-1.5">
                      {renderMultiSelectBadges(
                        formData.preferredEducation,
                        educationPreferenceOptions,
                        "bg-teal-100 text-teal-700",
                        "לא נבחרו רמות השכלה."
                      )}
                    </div>
                  )}
                </div>
                <div>
                  <Label className="block mb-2 text-xs font-medium text-gray-600">
                    תחומי עיסוק מועדפים
                  </Label>
                  {isEditing ? (
                    <div className="flex flex-wrap gap-2">
                      {occupationPreferenceOptions.map((occ) => (
                        <Button
                          key={occ.value}
                          type="button"
                          variant={
                            (formData.preferredOccupations || []).includes(
                              occ.value
                            )
                              ? "default"
                              : "outline"
                          }
                          size="sm"
                          onClick={() =>
                            handleMultiSelectChange(
                              "preferredOccupations",
                              occ.value
                            )
                          }
                          className={cn(
                            "rounded-full text-xs px-3 py-1.5 transition-all",
                            (formData.preferredOccupations || []).includes(
                              occ.value
                            )
                              ? "bg-green-500 hover:bg-green-600 text-white border-green-500"
                              : "border-gray-300 text-gray-600 hover:bg-gray-50 hover:border-gray-400"
                          )}
                        >
                          {occ.label}
                        </Button>
                      ))}
                    </div>
                  ) : (
                    <div className="mt-1 flex flex-wrap gap-1.5">
                      {renderMultiSelectBadges(
                        formData.preferredOccupations,
                        occupationPreferenceOptions,
                        "bg-green-100 text-green-700",
                        "לא נבחרו תחומי עיסוק."
                      )}
                    </div>
                  )}
                </div>
                <div>
                  <Label className="block mb-2 text-xs font-medium text-gray-600">
                    סוג שירות מועדף (צבאי/לאומי)
                  </Label>
                  {isEditing ? (
                    <div className="flex flex-wrap gap-2">
                      {serviceTypeOptions.map((opt) => (
                        <Button
                          key={opt.value}
                          type="button"
                          variant={
                            (formData.preferredServiceTypes || []).includes(
                              opt.value as ServiceType
                            )
                              ? "default"
                              : "outline"
                          }
                          size="sm"
                          onClick={() =>
                            handleMultiSelectChange(
                              "preferredServiceTypes",
                              opt.value as ServiceType
                            )
                          }
                          className={cn(
                            "rounded-full text-xs px-3 py-1.5 transition-all",
                            (formData.preferredServiceTypes || []).includes(
                              opt.value as ServiceType
                            )
                              ? "bg-lime-500 hover:bg-lime-600 text-white border-lime-500"
                              : "border-gray-300 text-gray-600 hover:bg-gray-50 hover:border-gray-400"
                          )}
                        >
                          {opt.label}
                        </Button>
                      ))}
                    </div>
                  ) : (
                    <div className="mt-1 flex flex-wrap gap-1.5">
                      {renderMultiSelectBadges(
                        formData.preferredServiceTypes as string[],
                        serviceTypeOptions,
                        "bg-lime-100 text-lime-700",
                        "לא נבחרו העדפות שירות."
                      )}
                    </div>
                  )}
                </div>
              </CardContent>
            </Card>
          </div>

          {/* --- Column 3 --- */}
          <div className="space-y-6">
            {/* Card: Personal & Family Background Preferences */}
            <Card className="bg-white/80 backdrop-blur-md rounded-2xl shadow-lg border border-gray-200/40 overflow-hidden">
              <CardHeader className="bg-gradient-to-r from-rose-50/40 to-fuchsia-50/40 border-b border-gray-200/50 p-4 flex items-center space-x-2 rtl:space-x-reverse">
                <Users className="w-5 h-5 text-rose-700" />
                <CardTitle className="text-base font-semibold text-gray-700">
                  רקע אישי ומשפחתי
                </CardTitle>
              </CardHeader>
              <CardContent className="p-4 md:p-6 space-y-6">
                <div>
                  <Label className="block mb-2 text-xs font-medium text-gray-600">
                    מצב משפחתי מועדף
                  </Label>
                  {isEditing ? (
                    <div className="flex flex-wrap gap-2">
                      {maritalStatusOptions.map((opt) => (
                        <Button
                          key={opt.value}
                          type="button"
                          variant={
                            (formData.preferredMaritalStatuses || []).includes(
                              opt.value
                            )
                              ? "default"
                              : "outline"
                          }
                          size="sm"
                          onClick={() =>
                            handleMultiSelectChange(
                              "preferredMaritalStatuses",
                              opt.value
                            )
                          }
                          className={cn(
                            "rounded-full text-xs px-3 py-1.5 transition-all",
                            (formData.preferredMaritalStatuses || []).includes(
                              opt.value
                            )
                              ? "bg-rose-500 hover:bg-rose-600 text-white border-rose-500"
                              : "border-gray-300 text-gray-600 hover:bg-gray-50 hover:border-gray-400"
                          )}
                        >
                          {opt.label}
                        </Button>
                      ))}
                    </div>
                  ) : (
                    <div className="mt-1 flex flex-wrap gap-1.5">
                      {renderMultiSelectBadges(
                        formData.preferredMaritalStatuses,
                        maritalStatusOptions,
                        "bg-rose-100 text-rose-700",
                        "לא נבחרו העדפות למצב משפחתי."
                      )}
                    </div>
                  )}
                </div>
                <div>
                  <Label
                    htmlFor="preferredPartnerHasChildren"
                    className="block mb-1.5 text-xs font-medium text-gray-600"
                  >
                    העדפה לגבי ילדים מקשר קודם
                  </Label>
                  {isEditing ? (
                    <Select
                      name="preferredPartnerHasChildren"
                      value={formData.preferredPartnerHasChildren || ""}
                      onValueChange={(value) =>
                        handleSelectChange("preferredPartnerHasChildren", value)
                      }
                    >
                      <SelectTrigger
                        id="preferredPartnerHasChildren"
                        className="h-9 text-sm focus:ring-cyan-500"
                      >
                        <SelectValue placeholder="בחר/י העדפה..." />
                      </SelectTrigger>
                      <SelectContent>
                        {preferredPartnerHasChildrenOptions.map((opt) => (
                          <SelectItem key={opt.value} value={opt.value}>
                            {opt.label}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  ) : (
                    <p className="text-sm text-gray-800 font-medium mt-1">
                      {getSelectDisplayValue(
                        formData.preferredPartnerHasChildren,
                        preferredPartnerHasChildrenOptions
                      )}
                    </p>
                  )}
                </div>
                <div>
                  <Label className="block mb-2 text-xs font-medium text-gray-600">
                    מוצא/עדה מועדפים
                  </Label>
                  {isEditing ? (
                    <div className="flex flex-wrap gap-2">
                      {preferredOriginOptions.map((opt) => (
                        <Button
                          key={opt.value}
                          type="button"
                          variant={
                            (formData.preferredOrigins || []).includes(
                              opt.value
                            )
                              ? "default"
                              : "outline"
                          }
                          size="sm"
                          onClick={() =>
                            handleMultiSelectChange(
                              "preferredOrigins",
                              opt.value
                            )
                          }
                          className={cn(
                            "rounded-full text-xs px-3 py-1.5 transition-all",
                            (formData.preferredOrigins || []).includes(
                              opt.value
                            )
                              ? "bg-fuchsia-500 hover:bg-fuchsia-600 text-white border-fuchsia-500"
                              : "border-gray-300 text-gray-600 hover:bg-gray-50 hover:border-gray-400"
                          )}
                        >
                          {opt.label}
                        </Button>
                      ))}
                    </div>
                  ) : (
                    <div className="mt-1 flex flex-wrap gap-1.5">
                      {renderMultiSelectBadges(
                        formData.preferredOrigins,
                        preferredOriginOptions,
                        "bg-fuchsia-100 text-fuchsia-700",
                        "לא נבחרו העדפות מוצא/עדה."
                      )}
                    </div>
                  )}
                </div>
                <div>
                  <Label
                    htmlFor="preferredAliyaStatus"
                    className="block mb-1.5 text-xs font-medium text-gray-600"
                  >
                    העדפת סטטוס עליה
                  </Label>
                  {isEditing ? (
                    <Select
                      name="preferredAliyaStatus"
                      value={formData.preferredAliyaStatus || ""}
                      onValueChange={(value) =>
                        handleSelectChange("preferredAliyaStatus", value)
                      }
                    >
                      <SelectTrigger
                        id="preferredAliyaStatus"
                        className="h-9 text-sm focus:ring-cyan-500"
                      >
                        <SelectValue placeholder="בחר/י העדפה..." />
                      </SelectTrigger>
                      <SelectContent>
                        {preferredAliyaStatusOptions.map((opt) => (
                          <SelectItem key={opt.value} value={opt.value}>
                            {opt.label}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  ) : (
                    <p className="text-sm text-gray-800 font-medium mt-1">
                      {getSelectDisplayValue(
                        formData.preferredAliyaStatus,
                        preferredAliyaStatusOptions
                      )}
                    </p>
                  )}
                </div>
              </CardContent>
            </Card>

            {/* Card: Character & Hobbies Preferences */}
            <Card className="bg-white/80 backdrop-blur-md rounded-2xl shadow-lg border border-gray-200/40 overflow-hidden">
              <CardHeader className="bg-gradient-to-r from-amber-50/40 to-yellow-50/40 border-b border-gray-200/50 p-4 flex items-center space-x-2 rtl:space-x-reverse">
                <Sparkles className="w-5 h-5 text-amber-700" />
                <CardTitle className="text-base font-semibold text-gray-700">
                  אופי ותחומי עניין
                </CardTitle>
              </CardHeader>
              <CardContent className="p-4 md:p-6 space-y-6">
                <div>
                  <Label className="block mb-2 text-xs font-medium text-gray-600">
                    תכונות אופי מועדפות (עד 3)
                  </Label>
                  {isEditing ? (
                    <div className="flex flex-wrap gap-2">
                      {characterTraitsOptions.map((opt) => (
                        <Button
                          key={opt.value}
                          type="button"
                          variant={
                            (formData.preferredCharacterTraits || []).includes(
                              opt.value
                            )
                              ? "default"
                              : "outline"
                          }
                          size="sm"
                          onClick={() =>
                            handleMultiSelectChange(
                              "preferredCharacterTraits",
                              opt.value
                            )
                          }
                          disabled={
                            !viewOnly &&
                            (formData.preferredCharacterTraits || []).length >=
                              3 &&
                            !(formData.preferredCharacterTraits || []).includes(
                              opt.value
                            ) &&
                            opt.value !== "no_strong_preference"
                          }
                          className={cn(
                            "rounded-full text-xs px-3 py-1.5 transition-all flex items-center",
                            (formData.preferredCharacterTraits || []).includes(
                              opt.value
                            )
                              ? "bg-yellow-500 hover:bg-yellow-600 text-white border-yellow-500"
                              : "border-gray-300 text-gray-600 hover:bg-gray-50 hover:border-gray-400"
                          )}
                        >
                          {opt.icon && (
                            <opt.icon className="w-3.5 h-3.5 rtl:ml-1.5 mr-1.5" />
                          )}
                          {opt.label}
                        </Button>
                      ))}
                    </div>
                  ) : (
                    <div className="mt-1 flex flex-wrap gap-1.5">
                      {renderMultiSelectBadges(
                        formData.preferredCharacterTraits,
                        characterTraitsOptions,
                        "bg-yellow-100 text-yellow-700",
                        "לא נבחרו תכונות אופי מועדפות."
                      )}
                    </div>
                  )}
                </div>
                <div>
                  <Label className="block mb-2 text-xs font-medium text-gray-600">
                    תחביבים מועדפים (עד 3)
                  </Label>
                  {isEditing ? (
                    <div className="flex flex-wrap gap-2">
                      {hobbiesOptions.map((opt) => (
                        <Button
                          key={opt.value}
                          type="button"
                          variant={
                            (formData.preferredHobbies || []).includes(
                              opt.value
                            )
                              ? "default"
                              : "outline"
                          }
                          size="sm"
                          onClick={() =>
                            handleMultiSelectChange(
                              "preferredHobbies",
                              opt.value
                            )
                          }
                          disabled={
                            !viewOnly &&
                            (formData.preferredHobbies || []).length >= 3 &&
                            !(formData.preferredHobbies || []).includes(
                              opt.value
                            ) &&
                            opt.value !== "no_strong_preference"
                          }
                          className={cn(
                            "rounded-full text-xs px-3 py-1.5 transition-all flex items-center",
                            (formData.preferredHobbies || []).includes(
                              opt.value
                            )
                              ? "bg-amber-500 hover:bg-amber-600 text-white border-amber-500"
                              : "border-gray-300 text-gray-600 hover:bg-gray-50 hover:border-gray-400"
                          )}
                        >
                          {opt.icon && (
                            <opt.icon className="w-3.5 h-3.5 rtl:ml-1.5 mr-1.5" />
                          )}
                          {opt.label}
                        </Button>
                      ))}
                    </div>
                  ) : (
                    <div className="mt-1 flex flex-wrap gap-1.5">
                      {renderMultiSelectBadges(
                        formData.preferredHobbies,
                        hobbiesOptions,
                        "bg-amber-100 text-amber-700",
                        "לא נבחרו תחביבים מועדפים."
                      )}
                    </div>
                  )}
                </div>
              </CardContent>
            </Card>
          </div>
        </div>
      </div>
    </div>
  );
};

export default PreferencesSection;
--- End of Content for PreferencesSection.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\user\Desktop\matchpoint\shidduch-system\src\app\components\profile\sections\ProfileSection.tsx
--------------------------------------------------------------------------------
Content:
// src/app/components/profile/sections/ProfileSection.tsx
"use client";
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from "@/components/ui/tooltip";
import React, { useState, useEffect } from "react";
import {
  Gender,
  AvailabilityStatus,
  ServiceType,
  HeadCoveringType,
  KippahType,
} from "@prisma/client";
import { Card, CardHeader, CardTitle, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Checkbox } from "@/components/ui/checkbox";
import {
  Pencil,
  Save,
  X,
  Users,
  BookOpen,
  Briefcase,
  Shield,
  Heart,
  MapPin,
  Languages,
  Palette,
  Smile,
  UserCircle,
  Info,
} from "lucide-react";
import { UserProfile } from "@/types/next-auth";
import { cn } from "@/lib/utils";
import { Badge } from "@/components/ui/badge";
import { languageOptions } from "@/lib/languageOptions"; 
import { toast } from "sonner";

const maritalStatusOptions = [
  { value: "single", label: "רווק/ה" },
  { value: "divorced", label: "גרוש/ה" },
  { value: "widowed", label: "אלמן/ה" },
  { value: "annulled", label: "נישואין שבוטלו" },
];

const religiousLevelOptions = [
  { value: "charedi", label: "חרדי/ת" },
  { value: "charedi_modern", label: "חרדי/ת מודרני/ת" },
  { value: "dati_leumi_torani", label: "דתי/ה לאומי/ת תורני/ת" },
  { value: "dati_leumi_liberal", label: "דתי/ה לאומי/ת ליברלי/ת" },
  { value: "dati_leumi_standard", label: "דתי/ה לאומי/ת (סטנדרטי)" },
  { value: "masorti_strong", label: "מסורתי/ת (קרוב/ה לדת)" },
  { value: "masorti_light", label: "מסורתי/ת (קשר קל למסורת)" },
  { value: "secular_traditional_connection", label: "חילוני/ת עם זיקה למסורת" },
  { value: "secular", label: "חילוני/ת" },
  { value: "spiritual_not_religious", label: "רוחני/ת (לאו דווקא דתי/ה)" },
  { value: "other", label: "אחר (נא לפרט ב'אודות')" },
];

const educationLevelOptions = [
  { value: "high_school", label: "תיכונית" },
  { value: "vocational", label: "מקצועית / תעודה" },
  { value: "academic_student", label: "סטודנט/ית לתואר" },
  { value: "academic_ba", label: "תואר ראשון (BA/BSc)" },
  { value: "academic_ma", label: "תואר שני (MA/MSc)" },
  { value: "academic_phd", label: "דוקטורט (PhD)" },
  { value: "yeshiva_seminary", label: "לימודים תורניים (ישיבה/מדרשה/כולל)" },
  { value: "other", label: "אחר" },
];

const serviceTypeOptions = [
  { value: ServiceType.MILITARY_COMBATANT, label: "צבאי - לוחם/ת" },
  { value: ServiceType.MILITARY_SUPPORT, label: "צבאי - תומכ/ת לחימה" },
  { value: ServiceType.MILITARY_OFFICER, label: "צבאי - קצונה" },
  {
    value: ServiceType.MILITARY_INTELLIGENCE_CYBER_TECH,
    label: "צבאי - מודיעין/סייבר/טכנולוגי",
  },
  { value: ServiceType.NATIONAL_SERVICE_ONE_YEAR, label: "שירות לאומי - שנה" },
  {
    value: ServiceType.NATIONAL_SERVICE_TWO_YEARS,
    label: "שירות לאומי - שנתיים",
  },
  { value: ServiceType.HESDER_YESHIVA, label: "ישיבת הסדר" },
  {
    value: ServiceType.YESHIVA_ONLY_POST_HS,
    label: "ישיבה גבוהה / מדרשה (ללא שירות צבאי/לאומי)",
  },
  {
    value: ServiceType.PRE_MILITARY_ACADEMY_AND_SERVICE,
    label: "מכינה קדם-צבאית ושירות",
  },
  { value: ServiceType.EXEMPTED, label: "פטור משירות" },
  { value: ServiceType.CIVILIAN_SERVICE, label: "שירות אזרחי" },
  { value: ServiceType.OTHER, label: "אחר / לא רלוונטי" },
];

const headCoveringOptions = [
  { value: HeadCoveringType.FULL_COVERAGE, label: "כיסוי ראש מלא" },
  { value: HeadCoveringType.PARTIAL_COVERAGE, label: "כיסוי ראש חלקי" },
  { value: HeadCoveringType.HAT_BERET, label: "כובע / ברט" },
  {
    value: HeadCoveringType.SCARF_ONLY_SOMETIMES,
    label: "מטפחת (רק באירועים/בית כנסת)",
  },
  { value: HeadCoveringType.NONE, label: "ללא כיסוי ראש" },
];

const kippahTypeOptions = [
  { value: KippahType.BLACK_VELVET, label: "קטיפה שחורה" },
  { value: KippahType.KNITTED_SMALL, label: "סרוגה קטנה" },
  { value: KippahType.KNITTED_LARGE, label: "סרוגה גדולה" },
  { value: KippahType.CLOTH, label: "בד" },
  { value: KippahType.BRESLEV, label: "ברסלב (לבנה גדולה)" },
  { value: KippahType.NONE_AT_WORK_OR_CASUAL, label: "לא בעבודה / ביומיום" },
  { value: KippahType.NONE_USUALLY, label: "לרוב לא חובש" },
  { value: KippahType.OTHER, label: "אחר" },
];

const characterTraitsOptions = [
  { value: "empathetic", label: "אמפתי/ת", icon: Heart },
  { value: "driven", label: "שאפתן/ית", icon: Briefcase },
  { value: "optimistic", label: "אופטימי/ת", icon: Smile },
  { value: "family_oriented", label: "משפחתי/ת", icon: Users },
  { value: "intellectual", label: "אינטלקטואל/ית", icon: BookOpen },
  { value: "organized", label: "מאורגנ/ת", icon: Palette },
  { value: "calm", label: "רגוע/ה", icon: Heart },
  { value: "humorous", label: "בעל/ת חוש הומור", icon: Smile },
  { value: "sociable", label: "חברותי/ת", icon: Users },
  { value: "sensitive", label: "רגיש/ה", icon: Heart },
  { value: "independent", label: "עצמאי/ת", icon: MapPin },
  { value: "creative", label: "יצירתי/ת", icon: Palette },
  { value: "honest", label: "כן/ה וישר/ה", icon: Shield },
  { value: "responsible", label: "אחראי/ת", icon: Shield },
  { value: "easy_going", label: "זורם/ת וקליל/ה", icon: Smile },
];

const hobbiesOptions = [
  { value: "travel", label: "טיולים", icon: MapPin },
  { value: "sports", label: "ספורט", icon: Briefcase }, 
  { value: "reading", label: "קריאה", icon: BookOpen },
  { value: "cooking_baking", label: "בישול/אפיה", icon: Palette },
  { value: "music_playing_instrument", label: "מוזיקה/נגינה", icon: Languages },
  { value: "art_crafts", label: "אומנות/יצירה", icon: Palette },
  { value: "volunteering", label: "התנדבות", icon: Heart },
  { value: "learning_courses", label: "למידה/קורסים", icon: BookOpen },
  { value: "board_games_puzzles", label: "משחקי קופסא/פאזלים", icon: Smile },
  { value: "movies_theater", label: "סרטים/תיאטרון", icon: Smile },
  { value: "dancing", label: "ריקוד", icon: Users },
  { value: "writing", label: "כתיבה", icon: BookOpen },
  { value: "nature_hiking", label: "טבע/טיולים רגליים", icon: MapPin },
  { value: "photography", label: "צילום", icon: Palette },
];

const preferredMatchmakerGenderOptions = [
  { value: "MALE", label: "משדך" },
  { value: "FEMALE", label: "שדכנית" },
  { value: "NONE", label: "ללא העדפה" },
];

interface ProfileSectionProps {
  profile: UserProfile | null;
  isEditing: boolean;
  setIsEditing: (value: boolean) => void;
  viewOnly?: boolean;
  onSave: (data: Partial<UserProfile>) => void;
}

const ensureDateObject = (
  value: string | number | Date | null | undefined
): Date | undefined => {
  if (!value) return undefined;
  if (value instanceof Date && !isNaN(value.getTime())) {
    return value;
  }
  if (typeof value === "string" || typeof value === "number") {
    const date = new Date(value);
    if (!isNaN(date.getTime())) {
      return date;
    }
  }
  return undefined;
};

const ProfileSection: React.FC<ProfileSectionProps> = ({
  profile: profileProp,
  isEditing,
  setIsEditing,
  viewOnly = false,
  onSave,
}) => {
  const [formData, setFormData] = useState<Partial<UserProfile>>({});
  const [loading, setLoading] = useState(true);
  const [initialData, setInitialData] = useState<Partial<UserProfile>>({});

  const initializeFormData = (profileData: UserProfile | null) => {
    const dataToSet: Partial<UserProfile> = {
      gender: profileData?.gender || undefined,
      birthDate: ensureDateObject(profileData?.birthDate),
      nativeLanguage: profileData?.nativeLanguage || undefined,
      additionalLanguages: profileData?.additionalLanguages || [],
      height: profileData?.height ?? undefined,
      maritalStatus: profileData?.maritalStatus || undefined,
      occupation: profileData?.occupation || "",
      education: profileData?.education || "",
      educationLevel: profileData?.educationLevel || undefined,
      city: profileData?.city || "",
      origin: profileData?.origin || "",
      religiousLevel: profileData?.religiousLevel || undefined,
      about: profileData?.about || "",
      parentStatus: profileData?.parentStatus || undefined,
      siblings: profileData?.siblings ?? undefined,
      position: profileData?.position ?? undefined,
      isProfileVisible: profileData?.isProfileVisible ?? true,
      preferredMatchmakerGender:
        profileData?.preferredMatchmakerGender || undefined,
      availabilityStatus:
        profileData?.availabilityStatus || AvailabilityStatus.AVAILABLE,
      availabilityNote: profileData?.availabilityNote || "",
      availabilityUpdatedAt: ensureDateObject(
        profileData?.availabilityUpdatedAt
      ),
      matchingNotes: profileData?.matchingNotes || "",
      shomerNegiah: profileData?.shomerNegiah ?? undefined,
      serviceType: profileData?.serviceType || undefined,
      serviceDetails: profileData?.serviceDetails || "",
      headCovering: profileData?.headCovering || undefined,
      kippahType: profileData?.kippahType || undefined,
      hasChildrenFromPrevious:
        profileData?.hasChildrenFromPrevious ?? undefined,
      profileCharacterTraits: profileData?.profileCharacterTraits || [],
      profileHobbies: profileData?.profileHobbies || [],
      aliyaCountry: profileData?.aliyaCountry || "",
      aliyaYear: profileData?.aliyaYear ?? undefined,
      preferredAgeMin: profileData?.preferredAgeMin ?? undefined,
      preferredAgeMax: profileData?.preferredAgeMax ?? undefined,
      preferredHeightMin: profileData?.preferredHeightMin ?? undefined,
      preferredHeightMax: profileData?.preferredHeightMax ?? undefined,
      preferredReligiousLevels: profileData?.preferredReligiousLevels || [],
      preferredLocations: profileData?.preferredLocations || [],
      preferredEducation: profileData?.preferredEducation || [],
      preferredOccupations: profileData?.preferredOccupations || [],
      contactPreference: profileData?.contactPreference || undefined,
      id: profileData?.id,
      userId: profileData?.userId,
      createdAt: ensureDateObject(profileData?.createdAt),
      updatedAt: ensureDateObject(profileData?.updatedAt),
      lastActive: ensureDateObject(profileData?.lastActive),
    };
    setFormData(dataToSet);
    setInitialData(dataToSet);
  };

  useEffect(() => {
    setLoading(true);
    if (profileProp) {
      initializeFormData(profileProp);
      setLoading(false);
    } else {
      const fetchProfileAndInitialize = async () => {
        try {
          const response = await fetch("/api/profile");
          if (!response.ok) throw new Error("Failed to fetch profile");
          const data = await response.json();
          if (data.success && data.profile) {
            initializeFormData(data.profile);
          } else {
            initializeFormData(null);
          }
        } catch (error) {
          console.error("Failed to fetch profile:", error);
          initializeFormData(null);
        } finally {
          setLoading(false);
        }
      };
      fetchProfileAndInitialize();
    }
  }, [profileProp]);

  const handleChange = (
    field: keyof UserProfile,
    value:
      | UserProfile[keyof UserProfile]
      | string
      | number
      | boolean
      | Date
      | string[]
      | null
  ) => {
    setFormData((prev) => {
      let finalValue: UserProfile[keyof UserProfile] | undefined = undefined;

      if (
        field === "height" ||
        field === "siblings" ||
        field === "position" ||
        field === "aliyaYear" ||
        field === "preferredAgeMin" ||
        field === "preferredAgeMax" ||
        field === "preferredHeightMin" ||
        field === "preferredHeightMax"
      ) {
        const rawValue = value as string | number;
        if (rawValue === "" || rawValue === null || rawValue === undefined) {
          finalValue = undefined;
        } else {
          const parsed = parseInt(String(rawValue), 10);
          finalValue = !isNaN(parsed)
            ? (parsed as UserProfile[typeof field])
            : undefined;
        }
      } else if (field === "birthDate") {
        finalValue = ensureDateObject(
          value as string | Date | null | undefined
        ) as UserProfile[typeof field];
      } else if (
        typeof prev[field] === "boolean" ||
        field === "shomerNegiah" ||
        field === "hasChildrenFromPrevious" ||
        field === "isProfileVisible"
      ) {
        finalValue = value as boolean as UserProfile[typeof field];
      } else if (Array.isArray(prev[field])) {
        finalValue = value as string[] as UserProfile[typeof field];
      } else if (value === "" || value === null) {
        const nullableStringFields: (keyof UserProfile)[] = [
          "nativeLanguage",
          "occupation",
          "education",
          "city",
          "origin",
          "religiousLevel",
          "about",
          "parentStatus",
          "serviceDetails",
          "aliyaCountry",
          "availabilityNote",
          "matchingNotes",
          "educationLevel",
          "maritalStatus",
          "serviceType",
          "headCovering",
          "kippahType",
          "preferredMatchmakerGender",
          "contactPreference",
        ];
        if (nullableStringFields.includes(field as keyof UserProfile)) {
          finalValue = undefined;
        } else {
          finalValue = value as UserProfile[typeof field];
        }
      } else {
        finalValue = value as UserProfile[typeof field];
      }

      return {
        ...prev,
        [field]: finalValue,
      };
    });
  };

  const handleMultiSelectToggle = (
    field: keyof UserProfile,
    optionValue: string
  ) => {
    setFormData((prev) => {
      const currentValues = (prev[field] as string[]) || [];
      const newValues = currentValues.includes(optionValue)
        ? currentValues.filter((v) => v !== optionValue)
        : [...currentValues, optionValue];
      return { ...prev, [field]: newValues };
    });
  };

  const handleSave = () => {
    if (formData.about && formData.about.trim().length < 100) {
      toast.error("שגיאת ולידציה", {
        description: 'השדה "קצת עליי" חייב להכיל לפחות 100 תווים.',
        duration: 5000,
      });
      return;
    }
    const dataToSave = { ...formData };
    onSave(dataToSave);
    setIsEditing(false);
    setInitialData(dataToSave);
  };

  const handleCancel = () => {
    setFormData(initialData);
    setIsEditing(false);
  };

  const renderDisplayValue = (
    value: string | number | Date | undefined | null,
    placeholder: string = "לא צוין"
  ) => {
    if (value === undefined || value === null || value === "") {
      return <span className="italic text-gray-500">{placeholder}</span>;
    }
    if (value instanceof Date && !isNaN(value.getTime())) {
      return new Intl.DateTimeFormat("he-IL").format(value);
    }
    return String(value);
  };

  const renderSelectDisplayValue = (
    value: string | undefined | null,
    options: { value: string; label: string }[],
    placeholder: string = "לא צוין"
  ) => {
    if (!value) {
      return <span className="italic text-gray-500">{placeholder}</span>;
    }
    const option = options.find((opt) => opt.value === value);
    return option ? (
      option.label
    ) : (
      <span className="italic text-gray-500">{placeholder}</span>
    );
  };

  const renderBooleanDisplayValue = (
    value: boolean | undefined | null,
    trueLabel: string = "כן",
    falseLabel: string = "לא",
    placeholder: string = "לא צוין"
  ) => {
    if (value === undefined || value === null) {
      return <span className="italic text-gray-500">{placeholder}</span>;
    }
    return value ? trueLabel : falseLabel;
  };

  if (loading) {
    return <div className="text-center p-4">טוען נתוני פרופיל...</div>;
  }

  const renderMultiSelectBadges = (
    fieldValues: string[] | undefined,
    options: { value: string; label: string; icon?: React.ElementType }[],
    emptyPlaceholder: string = "לא נבחרו פריטים."
  ) => {
    if (!fieldValues || fieldValues.length === 0) {
      return <p className="text-sm text-gray-500 italic">{emptyPlaceholder}</p>;
    }
    return fieldValues.map((value) => {
      const option = options.find((opt) => opt.value === value);
      return option ? (
        <Badge
          key={value}
          variant="secondary"
          className="mr-1 mb-1 bg-sky-100 text-sky-700 text-xs px-2 py-0.5 rounded-full"
        >
          {option.icon && <option.icon className="w-3 h-3 mr-1" />}
          {option.label}
        </Badge>
      ) : null;
    });
  };

  return (
    <div className="relative" dir="rtl">
      <div className="sticky top-0 z-10 bg-gradient-to-b from-white via-white/95 to-white/0 pt-4 pb-3 backdrop-blur-sm">
        <div className="container mx-auto max-w-screen-xl px-4">
          <div className="flex items-center justify-between">
            <div>
              <h1 className="text-xl md:text-2xl font-bold text-slate-800">
                פרופיל אישי
              </h1>
              <p className="text-sm text-slate-500">
                {isEditing && !viewOnly
                  ? "ערוך/י את פרטי הפרופיל שלך."
                  : "פרטי הפרופיל של המועמד/ת."}
              </p>
            </div>
            {!viewOnly && (
              <div className="flex gap-2">
                {!isEditing ? (
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={() => setIsEditing(true)}
                    className="rounded-full shadow-sm hover:shadow-md transition-all duration-300 border-cyan-400 text-cyan-700 hover:bg-cyan-50"
                  >
                    <Pencil className="w-3.5 h-3.5 ml-1.5" />
                    עריכה
                  </Button>
                ) : (
                  <>
                    <Button
                      variant="outline"
                      size="sm"
                      onClick={handleCancel}
                      className="rounded-full shadow-sm hover:shadow-md transition-all duration-300 border-gray-300 text-gray-700 hover:bg-gray-50"
                    >
                      <X className="w-3.5 h-3.5 ml-1.5" />
                      ביטול
                    </Button>
                    <Button
                      variant="default"
                      size="sm"
                      onClick={handleSave}
                      className="rounded-full shadow-sm hover:shadow-md transition-all duration-300 bg-cyan-600 hover:bg-cyan-700 text-white"
                    >
                      <Save className="w-3.5 h-3.5 ml-1.5" />
                      שמירה
                    </Button>
                  </>
                )}
              </div>
            )}
          </div>
        </div>
      </div>

      <div className="container mx-auto max-w-screen-xl py-6 px-4">
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
          <div className="space-y-6">
            <Card className="bg-white/80 backdrop-blur-md rounded-2xl shadow-lg border border-gray-200/40 overflow-hidden">
              <CardHeader className="bg-gradient-to-r from-cyan-50/40 to-pink-50/40 border-b border-gray-200/50 p-4 flex items-center space-x-2 rtl:space-x-reverse">
                <UserCircle className="w-5 h-5 text-cyan-700" />
                <CardTitle className="text-base font-semibold text-gray-700">
                  פרטים אישיים ודמוגרפיים
                </CardTitle>
              </CardHeader>
              <CardContent className="p-4 md:p-6">
                <div className="grid grid-cols-1 sm:grid-cols-2 gap-x-6 gap-y-5">
                  <div>
                    <Label className="block mb-1.5 text-xs font-medium text-gray-600">
                      מגדר
                    </Label>
                    {isEditing && !viewOnly ? (
                      <Select
                        value={formData.gender || ""}
                        onValueChange={(value) =>
                          handleChange("gender", value as Gender)
                        }
                      >
                        <SelectTrigger className="h-9 text-sm focus:ring-cyan-500">
                          <SelectValue placeholder="בחר/י מגדר" />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="MALE">זכר</SelectItem>
                          <SelectItem value="FEMALE">נקבה</SelectItem>
                        </SelectContent>
                      </Select>
                    ) : (
                      <p className="text-sm text-gray-800 font-medium mt-1">
                        {renderDisplayValue(
                          formData.gender === "MALE"
                            ? "זכר"
                            : formData.gender === "FEMALE"
                            ? "נקבה"
                            : undefined
                        )}
                      </p>
                    )}
                  </div>
                  <div>
                    <Label className="block mb-1.5 text-xs font-medium text-gray-600">
                      תאריך לידה
                    </Label>
                    {isEditing && !viewOnly ? (
                      <Input
                        type="date"
                        value={
                          formData.birthDate instanceof Date &&
                          !isNaN(formData.birthDate.getTime())
                            ? formData.birthDate.toISOString().split("T")[0]
                            : ""
                        }
                        onChange={(e) =>
                          handleChange("birthDate", e.target.value || undefined)
                        }
                        className="h-9 text-sm focus:ring-cyan-500"
                        max={new Date().toISOString().split("T")[0]}
                      />
                    ) : (
                      <p className="text-sm text-gray-800 font-medium mt-1">
                        {renderDisplayValue(formData.birthDate)}
                      </p>
                    )}
                  </div>
                  <div>
                    <Label className="block mb-1.5 text-xs font-medium text-gray-600">
                      גובה (סמ)
                    </Label>
                    {isEditing && !viewOnly ? (
                      <Input
                        type="number"
                        value={formData.height ?? ""}
                        onChange={(e) => handleChange("height", e.target.value)}
                        className="h-9 text-sm focus:ring-cyan-500"
                        placeholder="גובה בסמ"
                        min="100"
                        max="250"
                      />
                    ) : (
                      <p className="text-sm text-gray-800 font-medium mt-1">
                        {renderDisplayValue(
                          formData.height ? `${formData.height} ס"מ` : undefined
                        )}
                      </p>
                    )}
                  </div>
                  <div>
                    <Label className="block mb-1.5 text-xs font-medium text-gray-600">
                      עיר מגורים
                    </Label>
                    {isEditing && !viewOnly ? (
                      <Input
                        value={formData.city || ""}
                        onChange={(e) => handleChange("city", e.target.value)}
                        placeholder="לדוגמה: ירושלים"
                        className="h-9 text-sm focus:ring-cyan-500"
                      />
                    ) : (
                      <p className="text-sm text-gray-800 font-medium mt-1">
                        {renderDisplayValue(formData.city)}
                      </p>
                    )}
                  </div>
                  <div>
                    <Label className="block mb-1.5 text-xs font-medium text-gray-600">
                      מוצא / עדה
                    </Label>
                    {isEditing && !viewOnly ? (
                      <Input
                        value={formData.origin || ""}
                        onChange={(e) => handleChange("origin", e.target.value)}
                        placeholder="לדוגמה: אשכנזי, ספרדי"
                        className="h-9 text-sm focus:ring-cyan-500"
                      />
                    ) : (
                      <p className="text-sm text-gray-800 font-medium mt-1">
                        {renderDisplayValue(formData.origin)}
                      </p>
                    )}
                  </div>
                  <div>
                    <Label className="block mb-1.5 text-xs font-medium text-gray-600">
                      עלה/תה לארץ
                    </Label>
                    {isEditing && !viewOnly ? (
                      <Input
                        value={formData.aliyaCountry || ""}
                        onChange={(e) =>
                          handleChange("aliyaCountry", e.target.value)
                        }
                        placeholder="אם רלוונטי, מאיזו מדינה?"
                        className="h-9 text-sm focus:ring-cyan-500"
                      />
                    ) : (
                      <p className="text-sm text-gray-800 font-medium mt-1">
                        {renderDisplayValue(
                          formData.aliyaCountry,
                          "לא רלוונטי"
                        )}
                      </p>
                    )}
                  </div>
                  <div>
                    <Label className="block mb-1.5 text-xs font-medium text-gray-600">
                      שנת עליה
                    </Label>
                    {isEditing && !viewOnly ? (
                      <Input
                        type="number"
                        value={formData.aliyaYear ?? ""}
                        onChange={(e) =>
                          handleChange("aliyaYear", e.target.value)
                        }
                        disabled={!formData.aliyaCountry}
                        placeholder="אם רלוונטי"
                        className="h-9 text-sm focus:ring-cyan-500"
                        min="1900"
                        max={new Date().getFullYear()}
                      />
                    ) : (
                      <p className="text-sm text-gray-800 font-medium mt-1">
                        {renderDisplayValue(
                          formData.aliyaYear,
                          formData.aliyaCountry ? "לא צוינה שנה" : "לא רלוונטי"
                        )}
                      </p>
                    )}
                  </div>
                  <div>
                    <Label className="block mb-1.5 text-xs font-medium text-gray-600">
                      שפת אם
                    </Label>
                    {isEditing && !viewOnly ? (
                      <Select
                        value={formData.nativeLanguage || ""}
                        onValueChange={(value) =>
                          handleChange("nativeLanguage", value || undefined)
                        }
                      >
                        <SelectTrigger className="h-9 text-sm focus:ring-cyan-500">
                          <SelectValue placeholder="בחר/י שפת אם" />
                        </SelectTrigger>
                        <SelectContent className="max-h-[200px]">
                          {languageOptions.map((lang) => (
                            <SelectItem key={lang.value} value={lang.value}>
                              {lang.label}
                            </SelectItem>
                          ))}
                        </SelectContent>
                      </Select>
                    ) : (
                      <p className="text-sm text-gray-800 font-medium mt-1">
                        {renderSelectDisplayValue(
                          formData.nativeLanguage,
                          languageOptions
                        )}
                      </p>
                    )}
                  </div>
                  <div className="sm:col-span-2 lg:col-span-1">
                    <Label className="block mb-1.5 text-xs font-medium text-gray-600">
                      שפות נוספות
                    </Label>
                    {isEditing && !viewOnly ? (
                      <Select
                        onValueChange={(value) => {
                          const currentLanguages =
                            formData.additionalLanguages || [];
                          if (!currentLanguages.includes(value)) {
                            handleChange("additionalLanguages", [
                              ...currentLanguages,
                              value,
                            ]);
                          }
                        }}
                      >
                        <SelectTrigger className="h-9 text-sm focus:ring-cyan-500">
                          <SelectValue placeholder="הוסף/י שפה..." />
                        </SelectTrigger>
                        <SelectContent className="max-h-[200px]">
                          {languageOptions
                            .filter(
                              (lang) =>
                                !(formData.additionalLanguages || []).includes(
                                  lang.value
                                ) && lang.value !== formData.nativeLanguage
                            )
                            .map((lang) => (
                              <SelectItem key={lang.value} value={lang.value}>
                                {lang.label}
                              </SelectItem>
                            ))}
                        </SelectContent>
                      </Select>
                    ) : null}
                    <div className="mt-2 flex flex-wrap gap-1.5">
                      {(formData.additionalLanguages || []).map((langValue) => {
                        const lang = languageOptions.find(
                          (l) => l.value === langValue
                        );
                        return lang ? (
                          <Badge
                            key={lang.value}
                            variant="secondary"
                            className="bg-cyan-100/70 text-cyan-800 px-2 py-0.5 rounded-full text-[11px] font-medium flex items-center"
                          >
                            {lang.label}
                            {isEditing && !viewOnly && (
                              <button
                                type="button"
                                onClick={() =>
                                  handleChange(
                                    "additionalLanguages",
                                    (formData.additionalLanguages || []).filter(
                                      (l) => l !== langValue
                                    )
                                  )
                                }
                                className="mr-1.5 text-cyan-600 hover:text-cyan-800 text-xs"
                                aria-label={`הסר ${lang.label}`}
                              >
                                ×
                              </button>
                            )}
                          </Badge>
                        ) : null;
                      })}
                      {(!isEditing || viewOnly) &&
                        (!formData.additionalLanguages ||
                          formData.additionalLanguages.length === 0) && (
                          <p className="text-sm text-gray-500 italic">
                            לא צוינו שפות נוספות.
                          </p>
                        )}
                    </div>
                  </div>
                </div>
              </CardContent>
            </Card>

            <Card className="bg-white/80 backdrop-blur-md rounded-2xl shadow-lg border border-gray-200/40 overflow-hidden">
              <CardHeader className="bg-gradient-to-r from-purple-50/40 to-indigo-50/40 border-b border-gray-200/50 p-4 flex items-center space-x-2 rtl:space-x-reverse">
                <Users className="w-5 h-5 text-purple-700" />
                <CardTitle className="text-base font-semibold text-gray-700">
                  מצב משפחתי ורקע
                </CardTitle>
              </CardHeader>
              <CardContent className="p-4 md:p-6">
                <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-x-6 gap-y-5 items-start">
                  <div>
                    <Label className="block mb-1.5 text-xs font-medium text-gray-600">
                      מצב משפחתי
                    </Label>
                    {isEditing && !viewOnly ? (
                      <Select
                        value={formData.maritalStatus || ""}
                        onValueChange={(value) =>
                          handleChange("maritalStatus", value || undefined)
                        }
                      >
                        <SelectTrigger className="h-9 text-sm focus:ring-cyan-500">
                          <SelectValue placeholder="בחר/י מצב" />
                        </SelectTrigger>
                        <SelectContent>
                          {maritalStatusOptions.map((opt) => (
                            <SelectItem key={opt.value} value={opt.value}>
                              {opt.label}
                            </SelectItem>
                          ))}
                        </SelectContent>
                      </Select>
                    ) : (
                      <p className="text-sm text-gray-800 font-medium mt-1">
                        {renderSelectDisplayValue(
                          formData.maritalStatus,
                          maritalStatusOptions
                        )}
                      </p>
                    )}
                  </div>
                  {(formData.maritalStatus === "divorced" ||
                    formData.maritalStatus === "widowed" ||
                    formData.maritalStatus === "annulled") && (
                    <div
                      className={cn(
                        "pt-1 sm:pt-0",
                        isEditing && !viewOnly ? "sm:pt-5" : "sm:pt-0"
                      )}
                    >
                      <Label className="block mb-1.5 text-xs font-medium text-gray-600">
                        ילדים מקשר קודם?
                      </Label>
                      {isEditing && !viewOnly ? (
                        <div className="flex items-center space-x-2 rtl:space-x-reverse mt-2">
                          <Checkbox
                            id="hasChildrenFromPrevious"
                            checked={formData.hasChildrenFromPrevious || false}
                            onCheckedChange={(checked) =>
                              handleChange(
                                "hasChildrenFromPrevious",
                                checked as boolean
                              )
                            }
                          />
                          <Label
                            htmlFor="hasChildrenFromPrevious"
                            className="text-sm font-normal text-gray-700"
                          >
                            יש ילדים
                          </Label>
                        </div>
                      ) : (
                        <p className="text-sm text-gray-800 font-medium mt-1">
                          {renderBooleanDisplayValue(
                            formData.hasChildrenFromPrevious
                          )}
                        </p>
                      )}
                    </div>
                  )}
                  <div>
                    <Label className="block mb-1.5 text-xs font-medium text-gray-600">
                      מצב הורים
                    </Label>
                    {isEditing && !viewOnly ? (
                      <Input
                        value={formData.parentStatus || ""}
                        onChange={(e) =>
                          handleChange("parentStatus", e.target.value)
                        }
                        placeholder="לדוגמה: נשואים, גרושים"
                        className="h-9 text-sm focus:ring-cyan-500"
                      />
                    ) : (
                      <p className="text-sm text-gray-800 font-medium mt-1">
                        {renderDisplayValue(formData.parentStatus)}
                      </p>
                    )}
                  </div>
                  <div>
                    <Label className="block mb-1.5 text-xs font-medium text-gray-600">
                      מספר אחים/אחיות
                    </Label>
                    {isEditing && !viewOnly ? (
                      <Input
                        type="number"
                        value={formData.siblings ?? ""}
                        onChange={(e) =>
                          handleChange("siblings", e.target.value)
                        }
                        className="h-9 text-sm focus:ring-cyan-500"
                        placeholder="כולל אותך"
                        min="0"
                      />
                    ) : (
                      <p className="text-sm text-gray-800 font-medium mt-1">
                        {renderDisplayValue(formData.siblings)}
                      </p>
                    )}
                  </div>
                  <div>
                    <Label className="block mb-1.5 text-xs font-medium text-gray-600">
                      מיקום במשפחה
                    </Label>
                    {isEditing && !viewOnly ? (
                      <Input
                        type="number"
                        value={formData.position ?? ""}
                        onChange={(e) =>
                          handleChange("position", e.target.value)
                        }
                        className="h-9 text-sm focus:ring-cyan-500"
                        placeholder="לדוגמה: 1 (בכור/ה)"
                        min="0"
                      />
                    ) : (
                      <p className="text-sm text-gray-800 font-medium mt-1">
                        {renderDisplayValue(formData.position)}
                      </p>
                    )}
                  </div>
                </div>
              </CardContent>
            </Card>

            <Card className="bg-white/80 backdrop-blur-md rounded-2xl shadow-lg border border-gray-200/40 overflow-hidden">
              <CardHeader className="bg-gradient-to-r from-yellow-50/40 to-amber-50/40 border-b border-gray-200/50 p-4 flex items-center space-x-2 rtl:space-x-reverse">
                <BookOpen className="w-5 h-5 text-amber-700" />
                <CardTitle className="text-base font-semibold text-gray-700">
                  דת ואורח חיים
                </CardTitle>
              </CardHeader>
              <CardContent className="p-4 md:p-6">
                <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-x-6 gap-y-5 items-start">
                  <div>
                    <Label className="block mb-1.5 text-xs font-medium text-gray-600">
                      רמה דתית
                    </Label>
                    {isEditing && !viewOnly ? (
                      <Select
                        value={formData.religiousLevel || ""}
                        onValueChange={(value) =>
                          handleChange("religiousLevel", value || undefined)
                        }
                      >
                        <SelectTrigger className="h-9 text-sm focus:ring-cyan-500">
                          <SelectValue placeholder="בחר/י רמה" />
                        </SelectTrigger>
                        <SelectContent className="max-h-[250px]">
                          {religiousLevelOptions.map((opt) => (
                            <SelectItem key={opt.value} value={opt.value}>
                              {opt.label}
                            </SelectItem>
                          ))}
                        </SelectContent>
                      </Select>
                    ) : (
                      <p className="text-sm text-gray-800 font-medium mt-1">
                        {renderSelectDisplayValue(
                          formData.religiousLevel,
                          religiousLevelOptions
                        )}
                      </p>
                    )}
                  </div>
                  <div
                    className={cn(
                      "pt-1 sm:pt-0",
                      isEditing && !viewOnly ? "sm:pt-5" : "sm:pt-0"
                    )}
                  >
                    <Label className="block mb-1.5 text-xs font-medium text-gray-600">
                      שומר/ת נגיעה?
                    </Label>
                    {isEditing && !viewOnly ? (
                      <div className="flex items-center space-x-2 rtl:space-x-reverse mt-2">
                        <Checkbox
                          id="shomerNegiah"
                          checked={formData.shomerNegiah || false}
                          onCheckedChange={(checked) =>
                            handleChange("shomerNegiah", checked as boolean)
                          }
                        />
                        <Label
                          htmlFor="shomerNegiah"
                          className="text-sm font-normal text-gray-700"
                        >
                          כן
                        </Label>
                      </div>
                    ) : (
                      <p className="text-sm text-gray-800 font-medium mt-1">
                        {renderBooleanDisplayValue(formData.shomerNegiah)}
                      </p>
                    )}
                  </div>
                  {formData.gender === Gender.FEMALE && (
                    <div>
                      <Label className="block mb-1.5 text-xs font-medium text-gray-600">
                        כיסוי ראש
                      </Label>
                      {isEditing && !viewOnly ? (
                        <Select
                          value={formData.headCovering || ""}
                          onValueChange={(value) =>
                            handleChange(
                              "headCovering",
                              (value as HeadCoveringType) || undefined
                            )
                          }
                        >
                          <SelectTrigger className="h-9 text-sm focus:ring-cyan-500">
                            <SelectValue placeholder="בחר/י סוג כיסוי" />
                          </SelectTrigger>
                          <SelectContent>
                            {headCoveringOptions.map((opt) => (
                              <SelectItem key={opt.value} value={opt.value}>
                                {opt.label}
                              </SelectItem>
                            ))}
                          </SelectContent>
                        </Select>
                      ) : (
                        <p className="text-sm text-gray-800 font-medium mt-1">
                          {renderSelectDisplayValue(
                            formData.headCovering,
                            headCoveringOptions,
                            "ללא"
                          )}
                        </p>
                      )}
                    </div>
                  )}
                  {formData.gender === Gender.MALE && (
                    <div>
                      <Label className="block mb-1.5 text-xs font-medium text-gray-600">
                        סוג כיפה
                      </Label>
                      {isEditing && !viewOnly ? (
                        <Select
                          value={formData.kippahType || ""}
                          onValueChange={(value) =>
                            handleChange(
                              "kippahType",
                              (value as KippahType) || undefined
                            )
                          }
                        >
                          <SelectTrigger className="h-9 text-sm focus:ring-cyan-500">
                            <SelectValue placeholder="בחר/י סוג כיפה" />
                          </SelectTrigger>
                          <SelectContent className="max-h-[200px]">
                            {kippahTypeOptions.map((opt) => (
                              <SelectItem key={opt.value} value={opt.value}>
                                {opt.label}
                              </SelectItem>
                            ))}
                          </SelectContent>
                        </Select>
                      ) : (
                        <p className="text-sm text-gray-800 font-medium mt-1">
                          {renderSelectDisplayValue(
                            formData.kippahType,
                            kippahTypeOptions,
                            "ללא"
                          )}
                        </p>
                      )}
                    </div>
                  )}
                  <div>
                    <Label className="block mb-1.5 text-xs font-medium text-gray-600">
                      מגדר שדכן/ית מועדף
                    </Label>
                    {isEditing && !viewOnly ? (
                      <Select
                        value={formData.preferredMatchmakerGender || ""}
                        onValueChange={(value) =>
                          handleChange(
                            "preferredMatchmakerGender",
                            (value as Gender) || undefined
                          )
                        }
                      >
                        <SelectTrigger className="h-9 text-sm focus:ring-cyan-500">
                          <SelectValue placeholder="בחר/י העדפה (לא חובה)" />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="MALE">משדך</SelectItem>
                          <SelectItem value="FEMALE">שדכנית</SelectItem>
                          <SelectItem value="NONE">ללא העדפה</SelectItem>
                        </SelectContent>
                      </Select>
                    ) : (
                      <p className="text-sm text-gray-800 font-medium mt-1">
                        {renderSelectDisplayValue(
                          formData.preferredMatchmakerGender,
                          preferredMatchmakerGenderOptions,
                          "ללא העדפה"
                        )}
                      </p>
                    )}
                  </div>
                </div>
              </CardContent>
            </Card>
          </div>

          <div className="space-y-6">
            <Card className="bg-white/80 backdrop-blur-md rounded-2xl shadow-lg border border-gray-200/40 overflow-hidden">
              <CardHeader className="bg-gradient-to-r from-slate-50/40 to-gray-100/40 border-b border-gray-200/50 p-4 flex items-center space-x-2 rtl:space-x-reverse">
                <Info className="w-5 h-5 text-slate-600" />
                <CardTitle className="text-base font-semibold text-gray-700">
                  קצת עלי ומידע נוסף
                </CardTitle>
              </CardHeader>
              <CardContent className="p-4 md:p-6">
                <div className="space-y-6">
                  <div>
                  <div className="flex items-center gap-1.5 mb-2">
                    <Label htmlFor="about" className="text-sm font-medium text-gray-700">
                        ספר/י קצת על עצמך (תיאור חופשי)
                    </Label>
                    <TooltipProvider delayDuration={100}>
                        <Tooltip>
                            <TooltipTrigger type="button" className="text-gray-400 hover:text-gray-600">
                                <Info className="w-4 h-4" />
                            </TooltipTrigger>
                            <TooltipContent side="top" className="max-w-xs text-center">
                                <p>כאן המקום שלך לבלוט! ספר/י על התשוקות שלך, מה מצחיק אותך, ומה את/ה מחפש/ת. 
                                <br/>
                                <strong className="text-cyan-600">שים/י לב: נדרשים לפחות 100 תווים.</strong></p>
                            </TooltipContent>
                        </Tooltip>
                    </TooltipProvider>
                  </div>
                    {isEditing && !viewOnly ? (
                      <div>
                        <Textarea
                          id="about"
                          value={formData.about || ""}
                          onChange={(e) => handleChange("about", e.target.value)}
                          className={cn(
                            "text-sm focus:ring-cyan-500 min-h-[120px] rounded-lg",
                            formData.about && formData.about.trim().length < 100 ? "border-red-400 focus:ring-red-300" : ""
                          )}
                          placeholder="תאר/י את עצמך, מה מאפיין אותך, מה חשוב לך..."
                          rows={5}
                        />
                         {formData.about && (
                            <div className={cn(
                                "text-xs mt-1 text-right",
                                formData.about.trim().length < 100 ? "text-red-600" : "text-gray-500"
                            )}>
                                {formData.about.trim().length} / 100+ תווים
                            </div>
                         )}
                      </div>
                    ) : (
                      <p className="mt-1 text-sm text-gray-700 whitespace-pre-wrap min-h-[60px] bg-slate-50/70 p-3 rounded-lg border border-slate-200/50">
                        {formData.about || (
                          <span className="text-gray-500 italic">
                            לא הוזן תיאור אישי.
                          </span>
                        )}
                      </p>
                    )}
                  </div>
                  <div>
                   <div className="flex items-center gap-1.5 mb-2">
                    <Label className="text-sm font-medium text-gray-700">
                        הערות נוספות לשדכן/ית (לא יוצג לצד השני)
                    </Label>
                    <TooltipProvider delayDuration={100}>
                        <Tooltip>
                        <TooltipTrigger type="button" className="text-gray-400 hover:text-gray-600">
                            <Info className="w-4 h-4" />
                        </TooltipTrigger>
                        <TooltipContent side="top" className="max-w-xs text-center">
                            <p>מידע שחשוב לנו לדעת כדי למצוא התאמה טובה, אך לא תרצה/י שיופיע בפרופיל הגלוי. למשל: נושאים רגישים, העדפות ספציפיות מאוד, או רקע נוסף.</p>
                        </TooltipContent>
                        </Tooltip>
                    </TooltipProvider>
                    </div>
                    {isEditing && !viewOnly ? (
                      <Textarea
                        value={formData.matchingNotes || ""}
                        onChange={(e) =>
                          handleChange("matchingNotes", e.target.value)
                        }
                        className="text-sm focus:ring-cyan-500 min-h-[90px] rounded-lg"
                        placeholder="דברים נוספים שחשוב שהשדכן/ית יידעו עליך..."
                        rows={3}
                      />
                    ) : (
                      <p className="mt-1 text-sm text-gray-700 whitespace-pre-wrap min-h-[50px] bg-slate-50/70 p-3 rounded-lg border border-slate-200/50">
                        {formData.matchingNotes || (
                          <span className="text-gray-500 italic">
                            אין הערות נוספות לשדכן/ית.
                          </span>
                        )}
                      </p>
                    )}
                  </div>
                </div>
              </CardContent>
            </Card>

            <Card className="bg-white/80 backdrop-blur-md rounded-2xl shadow-lg border border-gray-200/40 overflow-hidden">
              <CardHeader className="bg-gradient-to-r from-teal-50/40 to-green-50/40 border-b border-gray-200/50 p-4 flex items-center space-x-2 rtl:space-x-reverse">
                <Briefcase className="w-5 h-5 text-teal-700" />
                <CardTitle className="text-base font-semibold text-gray-700">
                  השכלה, עיסוק ושירות
                </CardTitle>
              </CardHeader>
              <CardContent className="p-4 md:p-6">
                <div className="grid grid-cols-1 sm:grid-cols-2 gap-x-6 gap-y-5">
                  <div>
                    <Label className="block mb-1.5 text-xs font-medium text-gray-600">
                      רמת השכלה
                    </Label>
                    {isEditing && !viewOnly ? (
                      <Select
                        value={formData.educationLevel || ""}
                        onValueChange={(value) =>
                          handleChange("educationLevel", value || undefined)
                        }
                      >
                        <SelectTrigger className="h-9 text-sm focus:ring-cyan-500">
                          <SelectValue placeholder="בחר/י רמה" />
                        </SelectTrigger>
                        <SelectContent>
                          {educationLevelOptions.map((opt) => (
                            <SelectItem key={opt.value} value={opt.value}>
                              {opt.label}
                            </SelectItem>
                          ))}
                        </SelectContent>
                      </Select>
                    ) : (
                      <p className="text-sm text-gray-800 font-medium mt-1">
                        {renderSelectDisplayValue(
                          formData.educationLevel,
                          educationLevelOptions
                        )}
                      </p>
                    )}
                  </div>
                  <div className="sm:col-span-2">
                    <Label className="block mb-1.5 text-xs font-medium text-gray-600">
                      פירוט השכלה (מוסד, תחום)
                    </Label>
                    {isEditing && !viewOnly ? (
                      <Input
                        value={formData.education || ""}
                        onChange={(e) =>
                          handleChange("education", e.target.value)
                        }
                        placeholder="לדוגמה: אוני' בר אילן, משפטים"
                        className="h-9 text-sm focus:ring-cyan-500"
                      />
                    ) : (
                      <p className="text-sm text-gray-800 font-medium mt-1">
                        {renderDisplayValue(formData.education)}
                      </p>
                    )}
                  </div>
                  <div className="sm:col-span-2">
                    <Label className="block mb-1.5 text-xs font-medium text-gray-600">
                      עיסוק נוכחי
                    </Label>
                    {isEditing && !viewOnly ? (
                      <Input
                        value={formData.occupation || ""}
                        onChange={(e) =>
                          handleChange("occupation", e.target.value)
                        }
                        placeholder="לדוגמה: מורה, מהנדס תוכנה"
                        className="h-9 text-sm focus:ring-cyan-500"
                      />
                    ) : (
                      <p className="text-sm text-gray-800 font-medium mt-1">
                        {renderDisplayValue(formData.occupation)}
                      </p>
                    )}
                  </div>
                  <div>
                    <Label className="block mb-1.5 text-xs font-medium text-gray-600">
                      שירות (צבאי/לאומי/אחר)
                    </Label>
                    {isEditing && !viewOnly ? (
                      <Select
                        value={formData.serviceType || ""}
                        onValueChange={(value) =>
                          handleChange(
                            "serviceType",
                            (value as ServiceType) || undefined
                          )
                        }
                      >
                        <SelectTrigger className="h-9 text-sm focus:ring-cyan-500">
                          <SelectValue placeholder="בחר/י סוג שירות" />
                        </SelectTrigger>
                        <SelectContent className="max-h-[250px]">
                          {serviceTypeOptions.map((opt) => (
                            <SelectItem key={opt.value} value={opt.value}>
                              {opt.label}
                            </SelectItem>
                          ))}
                        </SelectContent>
                      </Select>
                    ) : (
                      <p className="text-sm text-gray-800 font-medium mt-1">
                        {renderSelectDisplayValue(
                          formData.serviceType,
                          serviceTypeOptions
                        )}
                      </p>
                    )}
                  </div>
                  <div className="sm:col-span-2">
                    <Label className="block mb-1.5 text-xs font-medium text-gray-600">
                      פירוט על השירות
                    </Label>
                    {isEditing && !viewOnly ? (
                      <Input
                        value={formData.serviceDetails || ""}
                        onChange={(e) =>
                          handleChange("serviceDetails", e.target.value)
                        }
                        placeholder="חיל, יחידה, תפקיד, שם ישיבה/מכינה"
                        className="h-9 text-sm focus:ring-cyan-500"
                      />
                    ) : (
                      <p className="text-sm text-gray-800 font-medium mt-1">
                        {renderDisplayValue(formData.serviceDetails)}
                      </p>
                    )}
                  </div>
                </div>
              </CardContent>
            </Card>

            <Card className="bg-white/80 backdrop-blur-md rounded-2xl shadow-lg border border-gray-200/40 overflow-hidden">
              <CardHeader className="bg-gradient-to-r from-amber-50/40 to-yellow-50/40 border-b border-gray-200/50 p-4 flex items-center space-x-2 rtl:space-x-reverse">
                <Smile className="w-5 h-5 text-amber-600" />
                <CardTitle className="text-base font-semibold text-gray-700">
                  תכונות אופי ותחביבים
                </CardTitle>
              </CardHeader>
              <CardContent className="p-4 md:p-6 space-y-6">
                <div>
                  <Label className="block mb-2 text-sm font-medium text-gray-700">
                    תכונות אופי בולטות (עד 3)
                  </Label>
                  {isEditing && !viewOnly ? (
                    <div className="flex flex-wrap gap-2">
                      {characterTraitsOptions.map((trait) => (
                        <Button
                          key={trait.value}
                          type="button"
                          variant={
                            (formData.profileCharacterTraits || []).includes(
                              trait.value
                            )
                              ? "default"
                              : "outline"
                          }
                          size="sm"
                          onClick={() =>
                            handleMultiSelectToggle(
                              "profileCharacterTraits",
                              trait.value
                            )
                          }
                          disabled={
                            !viewOnly &&
                            (formData.profileCharacterTraits || []).length >=
                              3 &&
                            !(formData.profileCharacterTraits || []).includes(
                              trait.value
                            )
                          }
                          className={cn(
                            "rounded-full text-xs px-3 py-1.5 transition-all", 
                            (formData.profileCharacterTraits || []).includes(
                              trait.value
                            )
                              ? "bg-amber-500 hover:bg-amber-600 text-white border-amber-500"
                              : "border-gray-300 text-gray-600 hover:bg-gray-50 hover:border-gray-400"
                          )}
                        >
                          {trait.icon && (
                            <trait.icon className="w-3.5 h-3.5 ml-1.5 rtl:mr-1.5 rtl:ml-0" />
                          )}
                          {trait.label}
                        </Button>
                      ))}
                    </div>
                  ) : (
                    <div className="mt-1 flex flex-wrap gap-1.5">
                      {renderMultiSelectBadges(
                        formData.profileCharacterTraits,
                        characterTraitsOptions,
                        "לא נבחרו תכונות אופי."
                      )}
                    </div>
                  )}
                </div>
                <div>
                  <Label className="block mb-2 text-sm font-medium text-gray-700">
                    תחביבים עיקריים (עד 3)
                  </Label>
                  {isEditing && !viewOnly ? (
                    <div className="flex flex-wrap gap-2">
                      {hobbiesOptions.map((hobby) => (
                        <Button
                          key={hobby.value}
                          type="button"
                          variant={
                            (formData.profileHobbies || []).includes(
                              hobby.value
                            )
                              ? "default"
                              : "outline"
                          }
                          size="sm"
                          onClick={() =>
                            handleMultiSelectToggle(
                              "profileHobbies",
                              hobby.value
                            )
                          }
                          disabled={
                            !viewOnly &&
                            (formData.profileHobbies || []).length >= 3 &&
                            !(formData.profileHobbies || []).includes(
                              hobby.value
                            )
                          }
                          className={cn(
                            "rounded-full text-xs px-3 py-1.5 transition-all",
                            (formData.profileHobbies || []).includes(
                              hobby.value
                            )
                              ? "bg-sky-500 hover:bg-sky-600 text-white border-sky-500"
                              : "border-gray-300 text-gray-600 hover:bg-gray-50 hover:border-gray-400"
                          )}
                        >
                          {hobby.icon && (
                            <hobby.icon className="w-3.5 h-3.5 ml-1.5 rtl:mr-1.5 rtl:ml-0" />
                          )}
                          {hobby.label}
                        </Button>
                      ))}
                    </div>
                  ) : (
                    <div className="mt-1 flex flex-wrap gap-1.5">
                      {renderMultiSelectBadges(
                        formData.profileHobbies,
                        hobbiesOptions,
                        "לא נבחרו תחביבים."
                      )}
                    </div>
                  )}
                </div>
              </CardContent>
            </Card>
          </div>
        </div>
      </div>
    </div>
  );
};

export default ProfileSection;
--- End of Content for ProfileSection.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\user\Desktop\matchpoint\shidduch-system\src\app\components\profile\sections\QuestionnaireResponsesSection.tsx
--------------------------------------------------------------------------------
Content:
// src/app/components/profile/sections/QuestionnaireResponsesSection.tsx

import React, { useState, useMemo, useEffect } from "react"; // Added useEffect
import Link from "next/link";
import {
  Card,
  CardHeader,
  CardTitle,
  CardContent,
  CardDescription,
} from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { Textarea } from "@/components/ui/textarea";
import { Switch } from "@/components/ui/switch";
import {
  Book,
  CheckCircle,
  Clock,
  Pencil,
  X,
  Save,
  Eye,
  EyeOff,
  Loader2,
  ArrowRight,
} from "lucide-react";
import { cn } from "@/lib/utils";
import { toast } from "sonner";
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip";
import type {
  QuestionnaireResponse,
  FormattedAnswer,
  UpdateValue,
} from "@/types/next-auth";

import { WORLDS } from "../constants";

// --- קבוע עבור כתובת השאלון ---
const QUESTIONNAIRE_URL = "/questionnaire"; // שימוש בנתיב יחסי אם האפליקציה רצה באותו דומיין
// אם אתה צריך את הכתובת המלאה (פחות מומלץ אם זה באותו אתר):
// const QUESTIONNAIRE_URL = "http://localhost:3000/questionnaire";

interface QuestionnaireResponsesSectionProps {
  questionnaire: QuestionnaireResponse | null;
  onUpdate?: (
    world: string,
    questionId: string,
    value: UpdateValue
  ) => Promise<void>;
  isEditable?: boolean;
  isFirstInList?: boolean;
  viewMode?: "matchmaker" | "candidate";
}

// --- QuestionCard Component ---
interface QuestionCardProps {
  question: string;
  answer: FormattedAnswer;
  isEditingGlobally: boolean;
  worldKey: string;
  onUpdate: (
    world: string,
    questionId: string,
    value: UpdateValue
  ) => Promise<void>;
  isFirstInList?: boolean;
}

const QuestionCard: React.FC<QuestionCardProps> = ({
  question,
  answer,
  isEditingGlobally,
  worldKey,
  onUpdate,
  isFirstInList,
}) => {
  const [isEditingText, setIsEditingText] = useState(false);
  const [editValue, setEditValue] = useState(answer.displayText);
  const [isSavingText, setIsSavingText] = useState(false);
  const [isSavingVisibility, setIsSavingVisibility] = useState(false);

  // --- START OF MODIFIED SECTION ---
  // Local state for optimistic UI update of visibility
  const [currentIsVisible, setCurrentIsVisible] = useState(
    answer.isVisible ?? true
  );

  // Sync local state if the prop changes (e.g., due to parent update or initial load)
  useEffect(() => {
    setCurrentIsVisible(answer.isVisible ?? true);
  }, [answer.isVisible]);
  // --- END OF MODIFIED SECTION ---

  const isSaving = isSavingText || isSavingVisibility;

  const handleStartEdit = () => {
    if (isSaving) return;
    setIsEditingText(true);
    setEditValue(answer.displayText);
  };

  const handleSaveText = async () => {
    if (!editValue?.trim()) {
      toast.error("לא ניתן לשמור תשובה ריקה.");
      return;
    }
    if (editValue.trim() === answer.displayText) {
      setIsEditingText(false);
      return;
    }

    setIsSavingText(true);
    try {
      await onUpdate(worldKey, answer.questionId, {
        type: "answer",
        value: editValue.trim(),
      });
      toast.success("התשובה עודכנה בהצלחה");
      setIsEditingText(false);
      // No need to update editValue here, as parent will re-render with new answer prop
    } catch (error) {
      console.error("Error updating answer:", error);
      toast.error("שגיאה בעדכון התשובה");
    } finally {
      setIsSavingText(false);
    }
  };

  const handleCancelEdit = () => {
    setIsEditingText(false);
    setEditValue(answer.displayText);
  };

  const handleVisibilityChange = async (newIsVisibleState: boolean) => {
    // --- START OF MODIFIED SECTION ---
    // Optimistically update the local UI state
    setCurrentIsVisible(newIsVisibleState);
    // --- END OF MODIFIED SECTION ---
    setIsSavingVisibility(true);
    try {
      await onUpdate(worldKey, answer.questionId, {
        type: "visibility",
        isVisible: newIsVisibleState,
      });
      toast.success("הגדרות הנראות עודכנו");
      // If successful, the parent should eventually re-render with the updated answer.isVisible,
      // and the useEffect will sync if needed, but currentIsVisible is already correct.
    } catch (error) {
      console.error("Error updating visibility:", error);
      toast.error("שגיאה בעדכון הנראות");
      // --- START OF MODIFIED SECTION ---
      // Revert optimistic update on error
      setCurrentIsVisible(answer.isVisible ?? true);
      // --- END OF MODIFIED SECTION ---
    } finally {
      setIsSavingVisibility(false);
    }
  };

  // --- START OF MODIFIED SECTION ---
  // Update visibilityLabel to use currentIsVisible
  const visibilityLabel = `הצג תשובה זו למועמדים: ${
    currentIsVisible ? "מופעל" : "כבוי"
  }`;
  // --- END OF MODIFIED SECTION ---

  return (
    <div className="rounded-lg border bg-card p-4 shadow-sm transition-shadow duration-300 hover:shadow-md">
      <div className="flex items-start justify-between gap-4">
        <div className="flex-1 min-w-0">
          <div className="flex flex-col sm:flex-row items-start sm:items-center justify-between mb-3 gap-2">
            <h4 className="font-medium text-sm sm:text-base flex-1 text-right">
              {question}
            </h4>
            <div
              className="flex items-center gap-2 self-end sm:self-center"
              dir="ltr"
            >
              {isSavingVisibility && (
                <Loader2 className="h-4 w-4 animate-spin text-muted-foreground" />
              )}
              <TooltipProvider delayDuration={200}>
                <Tooltip>
                  <TooltipTrigger asChild>
                    <div
                      className={cn(
                        "flex items-center gap-1.5 px-2.5 py-1 rounded-full text-xs shrink-0 flex-row-reverse",
                        "transition-colors duration-200",
                        // --- START OF MODIFIED SECTION ---
                        currentIsVisible // Use currentIsVisible for styling
                          ? // --- END OF MODIFIED SECTION ---
                            "bg-emerald-100/70 text-emerald-800"
                          : "bg-gray-100 text-gray-600"
                      )}
                    >
                      {/* --- START OF MODIFIED SECTION --- */}
                      {currentIsVisible ? ( // Use currentIsVisible for icon and text
                        <Eye className="h-3.5 w-3.5" />
                      ) : (
                        <EyeOff className="h-3.5 w-3.5" />
                      )}
                      <span className="font-medium whitespace-nowrap" dir="rtl">
                        {currentIsVisible ? "גלוי למועמדים" : "מוסתר"}
                      </span>
                      {/* --- END OF MODIFIED SECTION --- */}
                    </div>
                  </TooltipTrigger>
                  <TooltipContent side="top" dir="rtl">
                    <p>
                      {/* --- START OF MODIFIED SECTION --- */}
                      {currentIsVisible // Use currentIsVisible for tooltip content
                        ? // --- END OF MODIFIED SECTION ---
                          "תשובה זו גלויה למועמדים פוטנציאליים"
                        : "תשובה זו מוסתרת וגלויה רק לך ולשדכנים"}
                    </p>
                  </TooltipContent>
                </Tooltip>
              </TooltipProvider>

              {isEditingGlobally && (
                <div id={isFirstInList ? 'onboarding-target-visibility-control' : undefined}>
                <Switch
                  // --- START OF MODIFIED SECTION ---
                  checked={currentIsVisible} // Control Switch with local state
                  // --- END OF MODIFIED SECTION ---
                  onCheckedChange={handleVisibilityChange}
                  disabled={isSaving}
                  className="data-[state=checked]:bg-emerald-500 data-[state=unchecked]:bg-gray-300 transform scale-90"
                  aria-label={visibilityLabel}
                />
                </div>
              )}
            </div>
          </div>

          {isEditingText ? (
            <div className="space-y-2 mt-1">
              <Textarea
                value={editValue}
                onChange={(e) => setEditValue(e.target.value)}
                className="min-h-[80px] text-sm focus:ring-cyan-500 focus:border-cyan-500"
                placeholder="הקלד/י את תשובתך כאן..."
                disabled={isSavingText}
              />
              <div className="flex justify-end gap-2">
                <Button
                  size="sm"
                  variant="ghost"
                  onClick={handleCancelEdit}
                  disabled={isSavingText}
                  className="text-gray-600 hover:bg-gray-100"
                >
                  <X className="h-4 w-4 ml-1" />
                  ביטול
                </Button>
                <Button
                  size="sm"
                  onClick={handleSaveText}
                  disabled={isSavingText || !editValue?.trim()}
                  className="bg-cyan-600 hover:bg-cyan-700 text-white"
                >
                  {isSavingText ? (
                    <Loader2 className="h-4 w-4 animate-spin" />
                  ) : (
                    <CheckCircle className="h-4 w-4 ml-1" />
                  )}
                  שמירה
                </Button>
              </div>
            </div>
          ) : (
            <div className="relative group overflow-hidden mt-1">
              <div className="p-3 bg-gray-50/50 rounded-md border border-gray-200/60 min-h-[40px]">
                <p className="text-sm text-gray-800 break-words overflow-wrap-anywhere whitespace-pre-wrap">
                  {answer.displayText}
                </p>
                <TooltipProvider delayDuration={200}>
                  <Tooltip>
                    <TooltipTrigger asChild>
                      <span className="text-xs text-gray-400 block mt-2 text-left">
                        {new Date(answer.answeredAt).toLocaleDateString(
                          "he-IL",
                          { year: "numeric", month: "2-digit", day: "2-digit" }
                        )}
                      </span>
                    </TooltipTrigger>
                    <TooltipContent side="top" dir="rtl">
                      <p>תאריך עדכון אחרון</p>
                    </TooltipContent>
                  </Tooltip>
                </TooltipProvider>
              </div>
              {isEditingGlobally && !isSaving && (
                <Button
                  variant="ghost"
                  size="icon"
                  className="absolute top-0 right-0 opacity-0 group-hover:opacity-100 transition-opacity duration-200 h-7 w-7 text-cyan-600 hover:bg-cyan-50"
                  onClick={handleStartEdit}
                  title="עריכת תשובה"
                >
                  <Pencil className="h-4 w-4" />
                  <span className="sr-only">עריכת תשובה</span>
                </Button>
              )}
              {isSavingText && !isEditingText && (
                <div className="absolute top-1 right-1">
                  <Loader2 className="h-4 w-4 animate-spin text-cyan-500" />
                </div>
              )}
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

// --- WorldSection Component ---
// (ללא שינוי)
interface WorldSectionProps {
  worldKey: keyof typeof WORLDS;
  worldConfig: (typeof WORLDS)[keyof typeof WORLDS];
  answers: FormattedAnswer[];
  isEditingGlobally: boolean;
  onUpdate: (
    world: string,
    questionId: string,
    value: UpdateValue
  ) => Promise<void>;
  isCompleted: boolean;
  className?: string;
}

const WorldSection: React.FC<WorldSectionProps> = ({
  worldKey,
  worldConfig,
  answers,
  isEditingGlobally,
  onUpdate,
  isCompleted,
  className,
}) => {
  const { title, icon: Icon, color, bgColor, borderColor } = worldConfig;

  return (
    <Card
      className={cn(
        "overflow-hidden shadow-sm border",
        bgColor,
        borderColor,
        className
      )}
    >
      <CardHeader
        className="p-4 border-b"
        style={{
          borderColor: `rgba(var(--${color.split("-")[1]}-200-rgb), 0.5)`,
        }}
      >
        <div className="flex items-center justify-between">
          <div className="flex items-center gap-3">
            <div
              className={cn(
                "p-2 rounded-full",
                color.replace("text-", "bg-") + "/10"
              )}
            >
              <Icon className={cn("h-5 w-5", color)} />
            </div>
            <div>
              <CardTitle className="text-md sm:text-lg text-gray-800">
                {title}
              </CardTitle>
              <CardDescription className="text-xs text-gray-500 mt-0.5">
                {answers.length} {answers.length === 1 ? "תשובה" : "תשובות"}
              </CardDescription>
            </div>
          </div>
          <Badge
            variant={isCompleted ? "success" : "secondary"}
            className={cn(
              "gap-1 text-xs px-2 py-0.5 rounded-full",
              isCompleted
                ? "bg-emerald-100 text-emerald-800"
                : "bg-blue-100 text-blue-800"
            )}
          >
            {isCompleted ? (
              <CheckCircle className="h-3 w-3" />
            ) : (
              <Clock className="h-3 w-3" />
            )}
            {isCompleted ? "הושלם" : "בתהליך"}
          </Badge>
        </div>
      </CardHeader>
      <CardContent className="p-4 pt-4">
        <div className="space-y-4">
          {answers.map((answer, index) => (
            <QuestionCard
              key={answer.questionId}
              question={answer.question}
              answer={answer}
              isFirstInList={index === 0}
              isEditingGlobally={isEditingGlobally}
              worldKey={worldKey}
              onUpdate={onUpdate}
              
            />
          ))}
        </div>
      </CardContent>
    </Card>
  );
};

// --- QuestionnaireResponsesSection Component ---
const QuestionnaireResponsesSection: React.FC<
  QuestionnaireResponsesSectionProps
> = ({ questionnaire, onUpdate, isEditable = false }) => {
  const [isEditingGlobally, setIsEditingGlobally] = useState(false);

  const worldsWithAnswers = useMemo(() => {
    if (!questionnaire?.formattedAnswers) return [];
    return Object.entries(WORLDS)
      .map(([key, config]) => ({
        key: key as keyof typeof WORLDS,
        config,
        answers:
          questionnaire.formattedAnswers?.[
            key as keyof typeof questionnaire.formattedAnswers
          ] ?? [],
        isCompleted:
          (questionnaire[
            `${key}Completed` as keyof QuestionnaireResponse
          ] as boolean) ?? false,
      }))
      .filter((world) => world.answers.length > 0);
  }, [questionnaire]);

  if (!questionnaire) {
    return (
      <Card className="text-center py-12 text-gray-500 bg-gray-50 rounded-lg border border-dashed">
        <Book className="h-10 w-10 mx-auto mb-3 opacity-50 text-gray-400" />
        <p className="font-medium">לא מולא שאלון עבור פרופיל זה.</p>
        <p className="text-sm mt-1">אין תשובות להציג.</p>
        <div className="mt-6">
          <Button
            asChild
            variant="default"
            className="bg-cyan-600 hover:bg-cyan-700"
          >
            <Link
              href={QUESTIONNAIRE_URL}
              className="flex items-center gap-1.5"
            >
              מלא את השאלון
              <ArrowRight className="h-4 w-4" />
            </Link>
          </Button>
        </div>
      </Card>
    );
  }

  const hasAnyAnswers = worldsWithAnswers.length > 0;

  return (
    <div className="space-y-6">
      <Card className="shadow-sm border">
        <CardHeader className="p-4">
          <div className="flex flex-col sm:flex-row items-start sm:items-center justify-between gap-3">
            <div className="flex items-center gap-3">
              {questionnaire.completed ? (
                <CheckCircle className="h-5 w-5 text-emerald-500 flex-shrink-0" />
              ) : (
                <Clock className="h-5 w-5 text-blue-500 flex-shrink-0" />
              )}
              <div>
                <p className="font-semibold text-base text-gray-800">
                  {questionnaire.completed ? "שאלון הושלם" : "שאלון בתהליך"}
                </p>
                <p className="text-xs text-gray-500 mt-0.5">
                  {hasAnyAnswers
                    ? `עודכן לאחרונה: ${new Date(
                        questionnaire.lastSaved
                      ).toLocaleDateString("he-IL")}`
                    : "השאלון טרם החל"}
                </p>
              </div>
            </div>

            <div className="flex flex-col sm:flex-row items-center gap-2 self-end sm:self-center">
              <Button
                asChild
                variant="outline"
                size="sm"
                className="rounded-full px-4 py-2 text-xs sm:text-sm"
              >
                <Link
                  href={QUESTIONNAIRE_URL}
                  className="flex items-center gap-1.5"
                >
                  עבור לשאלון
                  <ArrowRight className="h-4 w-4" />
                </Link>
              </Button>
              {isEditable && hasAnyAnswers && onUpdate && (
                <Button
                  variant="outline"
                  size="sm"
                  onClick={() => setIsEditingGlobally(!isEditingGlobally)}
                  className="gap-1.5 rounded-full px-4 py-2 text-xs sm:text-sm"
                >
                  {isEditingGlobally ? (
                    <>
                      <Save className="h-4 w-4" />
                      סיום עריכה
                    </>
                  ) : (
                    <>
                      <Pencil className="h-4 w-4" />
                      עריכת תשובות
                    </>
                  )}
                </Button>
              )}
            </div>
          </div>
        </CardHeader>
      </Card>

      {hasAnyAnswers ? (
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          {worldsWithAnswers.map(({ key, config, answers, isCompleted }) => (
            <WorldSection
              key={key}
              worldKey={key}
              worldConfig={config}
              answers={answers}
              isEditingGlobally={isEditingGlobally}
              onUpdate={onUpdate!}
              isCompleted={isCompleted}
            />
          ))}
        </div>
      ) : (
        <div className="text-center py-10 text-gray-500 bg-gray-50/50 rounded-lg border border-gray-200">
          <Book className="h-8 w-8 mx-auto mb-2 opacity-50 text-gray-400" />
          <p className="font-medium text-lg">השאלון טרם מולא במלואו</p>
          <p className="text-sm mt-1 text-gray-600">
            עדיין אין תשובות להציג, אך ניתן להמשיך למלא את השאלון.
          </p>
          <div className="mt-6">
            <Button
              asChild
              variant="default"
              className="bg-cyan-600 hover:bg-cyan-700 text-white"
            >
              <Link
                href={QUESTIONNAIRE_URL}
                className="flex items-center gap-1.5 px-6 py-2"
              >
                המשך מילוי השאלון
                <ArrowRight className="h-4 w-4" />
              </Link>
            </Button>
          </div>
        </div>
      )}
    </div>
  );
};

export default QuestionnaireResponsesSection;
--- End of Content for QuestionnaireResponsesSection.tsx ---

================================================================================
Directory: C:\Users\user\Desktop\matchpoint\shidduch-system\src\app\components\profile\types
================================================================================

--------------------------------------------------------------------------------
File: C:\Users\user\Desktop\matchpoint\shidduch-system\src\app\components\profile\types\profile.ts
--------------------------------------------------------------------------------
Content:
import type { UserProfile, UserImage, QuestionnaireResponse } from "@/types/next-auth";

// Define specific types for questionnaire updates
export interface QuestionnaireUpdateValue {
  type: 'answer' | 'visibility';
  value?: string;
  isVisible?: boolean;
}

// Interfaces for the main sections
export interface PhotosSectionProps {
  images: UserImage[];
  isUploading: boolean;
  disabled?: boolean;
  onUpload: (file: File) => Promise<void>;
  onSetMain: (imageId: string) => Promise<void>;
  onDelete: (imageId: string) => Promise<void>;
}


export interface PreferencesSectionProps {
  profile: UserProfile | null;
  isEditing: boolean;
  viewOnly?: boolean;
  setIsEditing: (value: boolean) => void;
  onChange: (data: Partial<UserProfile>) => void;
}

export interface QuestionnaireResponsesSectionProps {
  questionnaire: QuestionnaireResponse | null;
  onUpdate?: (world: string, questionId: string, value: QuestionnaireUpdateValue) => Promise<void>;
  isEditable?: boolean;
  viewMode?: "matchmaker" | "candidate";
}

// Types for the extended profile data
export interface ExtendedProfileData {
  personalityTraits?: {
    temperament?: string;
    decisionMaking?: string;
    stressManagement?: string;
    communicationStyle?: string;
  };
  spiritualProfile?: {
    prayerStyle?: string;
    secularStudiesAttitude?: string;
    modestyLevel?: string;
    childrenEducationApproach?: string;
  };
  familyBackground?: {
    parentsSpiritualLevel?: string;
    parentsOccupations?: {
      father?: string;
      mother?: string;
    };
    familyDynamics?: string;
  };
  lifestylePreferences?: {
    careerAspiration?: string;
    futureStudyPlans?: string;
    livingPreferences?: {
      proximity?: string;
    };
    relationshipExpectations?: string;
  };
  healthProfile?: {
    generalHealth?: string;
    dietaryRestrictions?: string[];
    physicalActivity?: string;
  };
  personalValues?: {
    parentalRespect?: number;
    communityInvolvement?: string;
    volunteeringPreferences?: string;
    financialManagement?: string;
  };
  futureGoals?: string[];
  [key: string]: unknown;
}

// Additional utility types
export type ViewMode = "matchmaker" | "candidate";
export type CardSize = "sm" | "md" | "lg";
--- End of Content for profile.ts ---

--------------------------------------------------------------------------------
File: C:\Users\user\Desktop\matchpoint\shidduch-system\src\app\components\profile\types\questionnaire.ts
--------------------------------------------------------------------------------
Content:
// src/components/shared/profile/types/questionnaire.ts

export type QuestionnaireAnswerValue = {
  type: 'answer';
  value: string;
} | {
  type: 'visibility';
  isVisible: boolean;
} | string | number | boolean;

export interface FormattedAnswer {
  questionId: string;
  question: string;
  value: QuestionnaireAnswerValue;
  displayText: string;
  answeredAt: string;
  category?: string;
  isVisible: boolean;
}

export interface QuestionnaireResponse {
  id: string;
  userId: string;
  formattedAnswers: {
    values: FormattedAnswer[];
    personality: FormattedAnswer[];
    relationship: FormattedAnswer[];
    partner: FormattedAnswer[];
    religion: FormattedAnswer[];
  };
  valuesCompleted: boolean;
  personalityCompleted: boolean;
  relationshipCompleted: boolean;
  partnerCompleted: boolean;
  religionCompleted: boolean;
  worldsCompleted: string[];
  completed: boolean;
  startedAt: string | Date;
  completedAt?: string | Date;
  lastSaved: string | Date;
}

export interface QuestionnaireWorld {
  key: string;
  title: string;
  icon: React.ElementType;
  color: string;
  bgColor: string;
  borderColor: string;
}

export interface QuestionCardProps {
  question: string;
  answer: FormattedAnswer;
  isEditing: boolean;
  onEdit: (value: string) => void;
  onVisibilityChange: (isVisible: boolean) => void;
}

export interface WorldSectionProps {
  title: string;
  icon: React.ElementType;
  answers: FormattedAnswer[];
  isEditing: boolean;
  onEdit: (questionId: string, value: string) => void;
  onVisibilityChange: (questionId: string, isVisible: boolean) => void;
  isCompleted: boolean;
  className?: string;
}
--- End of Content for questionnaire.ts ---

