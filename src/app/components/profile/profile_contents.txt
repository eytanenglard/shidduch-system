################################################################################
# Directory Content Map For: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\app\components\profile
# Generated on: 2025-08-18 13:43:39
################################################################################

================================================================================
Directory: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\app\components\profile
================================================================================

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\app\components\profile\ProfileCard.tsx
--------------------------------------------------------------------------------
Content:
// src/components/profile/ProfileCard.tsx

'use client';

import React, {
  useState,
  useMemo,
  useCallback,
  useEffect,
  useRef,
} from 'react';
import Image from 'next/image';
import BudgetDisplay from './sections/BudgetDisplay';

import { cn, getRelativeCloudinaryPath } from '@/lib/utils';
import {
  ResizableHandle,
  ResizablePanel,
  ResizablePanelGroup,
} from '@/components/ui/resizable';

// UI Components
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import {
  Dialog,
  DialogContent,
  DialogTitle,
  DialogHeader,
  DialogFooter,
  DialogClose,
} from '@/components/ui/dialog';
import { ScrollArea, ScrollBar } from '@/components/ui/scroll-area';
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from '@/components/ui/tooltip';
import { ToggleGroup, ToggleGroupItem } from '@/components/ui/toggle-group';
import { Skeleton } from '@/components/ui/skeleton';
import { Separator } from '@/components/ui/separator';

// Icons
import {
  User,
  Heart,
  FileText,
  Image as ImageIcon,
  Info as InfoIcon,
  Eye,
  Phone,
  ChevronLeft,
  ChevronRight,
  Briefcase,
  GraduationCap,
  Users,
  BookOpen,
  School,
  Lock,
  Languages,
  Calendar,
  Star,
  MapPin,
  CheckCircle,
  Clock,
  Cake,
  Gem,
  Sparkles,
  Users2,
  Award,
  Palette,
  Smile,
  X,
  BookMarked,
  Search,
  Target,
  UserCheck,
  Link as LinkIcon,
  Handshake,
  Edit3,
  ExternalLink,
  Bot,
  Coffee,
  Camera,
  Music,
  Globe,
  Compass,
  Telescope,
  Crown,
  Zap,
  Gift,
  ArrowRight,
  Quote,
  ChevronDown,
  Moon,
  Sun,
  Baby,
  Home,
  Flame,
  MessageCircle,
  Play,
  Plus,
  Lightbulb,
  Mountain,
  Share2,
  Download,
  Printer,
  Bookmark,
  Search as SearchIcon,
  Filter,
  SortDesc,
  MessageSquare,
  Phone as PhoneIcon,
  Mail,
  Send,
  Stars,
  Sparkle,
  Sunrise,
  Sunset,
  TreePine,
  Flower,
  Rainbow,
  Waves,
  Wind,
  Shield,
  ArrowLeft,
} from 'lucide-react';

// Types and Interfaces
import type {
  UserProfile,
  UserImage as UserImageType,
  QuestionnaireResponse,
  FormattedAnswer,
  ServiceType,
  HeadCoveringType,
  KippahType,
} from '@/types/next-auth';
import { languageOptions } from '@/lib/languageOptions';
import type { Candidate } from '@/app/components/matchmaker/new/types/candidates';

import NewSuggestionForm from '@/app/components/matchmaker/suggestions/NewSuggestionForm';

// Enhanced Interfaces with Responsive Support
interface CreateSuggestionData {
  priority: 'LOW' | 'MEDIUM' | 'HIGH' | 'URGENT';
  firstPartyId: string;
  secondPartyId: string;
  status:
    | 'DRAFT'
    | 'PENDING_FIRST_PARTY'
    | 'FIRST_PARTY_APPROVED'
    | 'FIRST_PARTY_DECLINED'
    | string;
  firstPartyNotes?: string;
  secondPartyNotes?: string;
}

interface ExcitementFactor {
  icon: React.ElementType;
  text: string;
  gradient: string;
  shortText?: string;
}

// Enhanced Color Palette & Theme with Responsive Support
const COLOR_PALETTES = {
  professional: {
    name: 'כחול-אפור',
    colors: {
      primary: {
        main: 'from-gray-700 via-gray-800 to-gray-900',
        mainSm: 'from-gray-600 via-gray-700 to-gray-800', // גרסה קלה יותר למובייל
        accent: 'from-blue-600 via-blue-700 to-blue-800',
        accentSm: 'from-blue-500 via-blue-600 to-blue-700',
        light: 'from-gray-100 via-gray-200 to-gray-300',
        lightSm: 'from-gray-50 via-gray-100 to-gray-200',
        romantic: 'from-blue-600 via-blue-700 to-blue-800',
        romanticSm: 'from-blue-500 via-blue-600 to-blue-700',
        rose: 'from-blue-500 via-blue-600 to-blue-700',
        roseSm: 'from-blue-400 via-blue-500 to-blue-600',
        gold: 'from-gray-400 via-gray-500 to-gray-600',
        goldSm: 'from-gray-300 via-gray-400 to-gray-500',
        elegant: 'from-gray-700 via-gray-800 to-gray-900',
        elegantSm: 'from-gray-600 via-gray-700 to-gray-800',
      },
      secondary: {
        sage: 'from-gray-300 via-gray-400 to-gray-500',
        sageSm: 'from-gray-200 via-gray-300 to-gray-400',
        sky: 'from-blue-100 via-blue-200 to-blue-300',
        skySm: 'from-blue-50 via-blue-100 to-blue-200',
        lavender: 'from-gray-200 via-gray-300 to-gray-400',
        lavenderSm: 'from-gray-100 via-gray-200 to-gray-300',
        peach: 'from-orange-100 via-amber-100 to-yellow-200',
        peachSm: 'from-orange-50 via-amber-50 to-yellow-100',
      },
      neutral: {
        warm: 'from-gray-50 via-white to-gray-100',
        warmSm: 'from-gray-25 via-white to-gray-50',
        cool: 'from-slate-50 via-gray-50 to-zinc-50',
        coolSm: 'from-slate-25 via-gray-25 to-zinc-25',
        elegant: 'from-white via-gray-50 to-neutral-100',
        elegantSm: 'from-white via-gray-25 to-neutral-50',
      },
    },
    shadows: {
      elegant: 'shadow-lg sm:shadow-xl shadow-gray-200/25',
      elegantSm: 'shadow-md shadow-gray-200/20',
      warm: 'shadow-md sm:shadow-lg shadow-gray-200/30',
      warmSm: 'shadow-sm shadow-gray-200/25',
      soft: 'shadow-sm sm:shadow-md shadow-gray-100/40',
      softSm: 'shadow-xs shadow-gray-100/30',
    },
  },
  feminine: {
    name: 'ורוד-אדום',
    colors: {
      primary: {
        main: 'from-rose-400 via-pink-400 to-rose-500',
        mainSm: 'from-rose-300 via-pink-300 to-rose-400',
        accent: 'from-pink-500 via-rose-500 to-red-400',
        accentSm: 'from-pink-400 via-rose-400 to-red-300',
        light: 'from-pink-100 via-rose-100 to-red-100',
        lightSm: 'from-pink-50 via-rose-50 to-red-50',
        romantic: 'from-rose-400 via-pink-400 to-rose-500',
        romanticSm: 'from-rose-300 via-pink-300 to-rose-400',
        rose: 'from-rose-400 via-pink-400 to-rose-500',
        roseSm: 'from-rose-300 via-pink-300 to-rose-400',
        gold: 'from-amber-200 via-yellow-200 to-orange-300',
        goldSm: 'from-amber-100 via-yellow-100 to-orange-200',
        elegant: 'from-pink-500 via-rose-500 to-red-400',
        elegantSm: 'from-pink-400 via-rose-400 to-red-300',
      },
      secondary: {
        sage: 'from-pink-200 via-rose-200 to-red-200',
        sageSm: 'from-pink-100 via-rose-100 to-red-100',
        sky: 'from-purple-200 via-pink-200 to-rose-300',
        skySm: 'from-purple-100 via-pink-100 to-rose-200',
        lavender: 'from-purple-200 via-violet-200 to-purple-300',
        lavenderSm: 'from-purple-100 via-violet-100 to-purple-200',
        peach: 'from-pink-200 via-rose-200 to-orange-300',
        peachSm: 'from-pink-100 via-rose-100 to-orange-200',
      },
      neutral: {
        warm: 'from-rose-50 via-pink-50 to-orange-50',
        warmSm: 'from-rose-25 via-pink-25 to-orange-25',
        cool: 'from-purple-50 via-pink-50 to-rose-50',
        coolSm: 'from-purple-25 via-pink-25 to-rose-25',
        elegant: 'from-pink-50 via-rose-50 to-neutral-100',
        elegantSm: 'from-pink-25 via-rose-25 to-neutral-50',
      },
    },
    shadows: {
      elegant: 'shadow-lg sm:shadow-xl shadow-pink-200/25',
      elegantSm: 'shadow-md shadow-pink-200/20',
      warm: 'shadow-md sm:shadow-lg shadow-rose-200/30',
      warmSm: 'shadow-sm shadow-rose-200/25',
      soft: 'shadow-sm sm:shadow-md shadow-pink-100/40',
      softSm: 'shadow-xs shadow-pink-100/30',
    },
  },
  masculine: {
    name: 'כחול-ירוק',
    colors: {
      primary: {
        main: 'from-blue-600 via-indigo-600 to-blue-700',
        mainSm: 'from-blue-500 via-indigo-500 to-blue-600',
        accent: 'from-cyan-500 via-blue-500 to-indigo-600',
        accentSm: 'from-cyan-400 via-blue-400 to-indigo-500',
        light: 'from-blue-100 via-indigo-100 to-cyan-100',
        lightSm: 'from-blue-50 via-indigo-50 to-cyan-50',
        romantic: 'from-cyan-500 via-blue-500 to-indigo-600',
        romanticSm: 'from-cyan-400 via-blue-400 to-indigo-500',
        rose: 'from-cyan-500 via-blue-500 to-indigo-600',
        roseSm: 'from-cyan-400 via-blue-400 to-indigo-500',
        gold: 'from-blue-200 via-cyan-200 to-teal-300',
        goldSm: 'from-blue-100 via-cyan-100 to-teal-200',
        elegant: 'from-blue-600 via-indigo-600 to-blue-700',
        elegantSm: 'from-blue-500 via-indigo-500 to-blue-600',
      },
      secondary: {
        sage: 'from-emerald-300 via-teal-300 to-cyan-400',
        sageSm: 'from-emerald-200 via-teal-200 to-cyan-300',
        sky: 'from-blue-200 via-sky-200 to-indigo-300',
        skySm: 'from-blue-100 via-sky-100 to-indigo-200',
        lavender: 'from-indigo-200 via-blue-200 to-cyan-300',
        lavenderSm: 'from-indigo-100 via-blue-100 to-cyan-200',
        peach: 'from-blue-200 via-cyan-200 to-teal-300',
        peachSm: 'from-blue-100 via-cyan-100 to-teal-200',
      },
      neutral: {
        warm: 'from-blue-50 via-indigo-50 to-cyan-50',
        warmSm: 'from-blue-25 via-indigo-25 to-cyan-25',
        cool: 'from-slate-50 via-blue-50 to-indigo-50',
        coolSm: 'from-slate-25 via-blue-25 to-indigo-25',
        elegant: 'from-gray-50 via-blue-50 to-neutral-100',
        elegantSm: 'from-gray-25 via-blue-25 to-neutral-50',
      },
    },
    shadows: {
      elegant: 'shadow-lg sm:shadow-xl shadow-blue-200/25',
      elegantSm: 'shadow-md shadow-blue-200/20',
      warm: 'shadow-md sm:shadow-lg shadow-indigo-200/30',
      warmSm: 'shadow-sm shadow-indigo-200/25',
      soft: 'shadow-sm sm:shadow-md shadow-blue-100/40',
      softSm: 'shadow-xs shadow-blue-100/30',
    },
  },
  luxury: {
    name: 'זהב-סגול',
    colors: {
      primary: {
        main: 'from-amber-500 via-yellow-500 to-amber-600',
        mainSm: 'from-amber-400 via-yellow-400 to-amber-500',
        accent: 'from-purple-600 via-indigo-600 to-purple-700',
        accentSm: 'from-purple-500 via-indigo-500 to-purple-600',
        light: 'from-amber-100 via-yellow-100 to-gold-100',
        lightSm: 'from-amber-50 via-yellow-50 to-gold-50',
        romantic: 'from-purple-600 via-indigo-600 to-purple-700',
        romanticSm: 'from-purple-500 via-indigo-500 to-purple-600',
        rose: 'from-purple-600 via-indigo-600 to-purple-700',
        roseSm: 'from-purple-500 via-indigo-500 to-purple-600',
        gold: 'from-amber-500 via-yellow-500 to-amber-600',
        goldSm: 'from-amber-400 via-yellow-400 to-amber-500',
        elegant: 'from-amber-500 via-yellow-500 to-amber-600',
        elegantSm: 'from-amber-400 via-yellow-400 to-amber-500',
      },
      secondary: {
        sage: 'from-emerald-400 via-teal-400 to-cyan-500',
        sageSm: 'from-emerald-300 via-teal-300 to-cyan-400',
        sky: 'from-indigo-300 via-purple-300 to-violet-400',
        skySm: 'from-indigo-200 via-purple-200 to-violet-300',
        lavender: 'from-purple-300 via-violet-300 to-indigo-400',
        lavenderSm: 'from-purple-200 via-violet-200 to-indigo-300',
        peach: 'from-amber-300 via-yellow-300 to-orange-400',
        peachSm: 'from-amber-200 via-yellow-200 to-orange-300',
      },
      neutral: {
        warm: 'from-amber-50 via-yellow-50 to-orange-50',
        warmSm: 'from-amber-25 via-yellow-25 to-orange-25',
        cool: 'from-purple-50 via-indigo-50 to-violet-50',
        coolSm: 'from-purple-25 via-indigo-25 to-violet-25',
        elegant: 'from-gray-50 via-amber-50 to-neutral-100',
        elegantSm: 'from-gray-25 via-amber-25 to-neutral-50',
      },
    },
    shadows: {
      elegant: 'shadow-lg sm:shadow-xl shadow-amber-200/25',
      elegantSm: 'shadow-md shadow-amber-200/20',
      warm: 'shadow-md sm:shadow-lg shadow-yellow-200/30',
      warmSm: 'shadow-sm shadow-yellow-200/25',
      soft: 'shadow-sm sm:shadow-md shadow-amber-100/40',
      softSm: 'shadow-xs shadow-amber-100/30',
    },
  },
} as const;

type ColorPaletteName = keyof typeof COLOR_PALETTES;

type ThemeType = {
  colors: {
    primary: {
      main: string;
      mainSm: string;
      accent: string;
      accentSm: string;
      light: string;
      lightSm: string;
      romantic: string;
      romanticSm: string;
      rose: string;
      roseSm: string;
      gold: string;
      goldSm: string;
      elegant: string;
      elegantSm: string;
    };
    secondary: {
      sage: string;
      sageSm: string;
      sky: string;
      skySm: string;
      lavender: string;
      lavenderSm: string;
      peach: string;
      peachSm: string;
    };
    neutral: {
      warm: string;
      warmSm: string;
      cool: string;
      coolSm: string;
      elegant: string;
      elegantSm: string;
    };
  };
  shadows: {
    elegant: string;
    elegantSm: string;
    warm: string;
    warmSm: string;
    soft: string;
    softSm: string;
  };
};

// Enhanced Data & Translation Maps with Responsive Support
const maritalStatusMap: {
  [key: string]: {
    label: string;
    shortLabel?: string;
    icon: React.ElementType;
    color: string;
    mobileClasses?: string;
  };
} = {
  single: {
    label: 'רווק/ה',
    shortLabel: 'רווק',
    icon: Heart,
    color: 'text-rose-600',
    mobileClasses: 'text-xs sm:text-sm',
  },
  divorced: {
    label: 'גרוש/ה',
    shortLabel: 'גרוש',
    icon: Sunrise,
    color: 'text-amber-600',
    mobileClasses: 'text-xs sm:text-sm',
  },
  widowed: {
    label: 'אלמן/ה',
    shortLabel: 'אלמן',
    icon: Stars,
    color: 'text-purple-600',
    mobileClasses: 'text-xs sm:text-sm',
  },
  annulled: {
    label: 'מוכן/ה לאהבה חדשה',
    shortLabel: 'מוכן לאהבה',
    icon: Rainbow,
    color: 'text-pink-600',
    mobileClasses: 'text-xs sm:text-sm',
  },
  any: {
    label: 'פתוח/ה לכל האפשרויות',
    shortLabel: 'פתוח',
    icon: Sparkles,
    color: 'text-indigo-600',
    mobileClasses: 'text-xs sm:text-sm',
  },
};

const religiousLevelMap: {
  [key: string]: {
    label: string;
    shortLabel?: string;
    icon: React.ElementType;
    color: string;
    mobileClasses?: string;
  };
} = {
  charedi: {
    label: 'חרדי/ת',
    shortLabel: 'חרדי',
    icon: BookMarked,
    color: 'text-indigo-700',
    mobileClasses: 'text-xs sm:text-sm',
  },
  charedi_modern: {
    label: 'חרדי/ת מודרני/ת',
    shortLabel: 'חרדי מודרני',
    icon: BookOpen,
    color: 'text-indigo-600',
    mobileClasses: 'text-xs sm:text-sm',
  },
  dati_leumi_torani: {
    label: 'דתי/ה לאומי/ת תורני/ת',
    shortLabel: 'דתי תורני',
    icon: Star,
    color: 'text-blue-700',
    mobileClasses: 'text-xs sm:text-sm',
  },
  dati_leumi_liberal: {
    label: 'דתי/ה לאומי/ת ליברלי/ת',
    shortLabel: 'דתי ליברלי',
    icon: Flower,
    color: 'text-blue-600',
    mobileClasses: 'text-xs sm:text-sm',
  },
  dati_leumi_standard: {
    label: 'דתי/ה לאומי/ת',
    shortLabel: 'דתי לאומי',
    icon: Crown,
    color: 'text-blue-600',
    mobileClasses: 'text-xs sm:text-sm',
  },
  masorti_strong: {
    label: 'מסורתי/ת (חזק)',
    shortLabel: 'מסורתי חזק',
    icon: TreePine,
    color: 'text-emerald-700',
    mobileClasses: 'text-xs sm:text-sm',
  },
  masorti_light: {
    label: 'מסורתי/ת (קל)',
    shortLabel: 'מסורתי קל',
    icon: Wind,
    color: 'text-emerald-600',
    mobileClasses: 'text-xs sm:text-sm',
  },
  secular_traditional_connection: {
    label: 'חילוני/ת עם זיקה',
    shortLabel: 'חילוני עם זיקה',
    icon: Waves,
    color: 'text-cyan-600',
    mobileClasses: 'text-xs sm:text-sm',
  },
  secular: {
    label: 'חילוני/ת',
    shortLabel: 'חילוני',
    icon: Sunrise,
    color: 'text-orange-600',
    mobileClasses: 'text-xs sm:text-sm',
  },
  spiritual_not_religious: {
    label: 'רוחני/ת',
    shortLabel: 'רוחני',
    icon: Sparkle,
    color: 'text-purple-600',
    mobileClasses: 'text-xs sm:text-sm',
  },
  other: {
    label: 'ייחודי/ת',
    shortLabel: 'ייחודי',
    icon: Rainbow,
    color: 'text-pink-600',
    mobileClasses: 'text-xs sm:text-sm',
  },
  'לא משנה': {
    label: 'פתוח/ה לכל השקפה',
    shortLabel: 'פתוח',
    icon: Globe,
    color: 'text-gray-600',
    mobileClasses: 'text-xs sm:text-sm',
  },
};

const religiousJourneyMap: {
  [key: string]: {
    label: string;
    shortLabel?: string;
    icon: React.ElementType;
    color: string;
    mobileClasses?: string;
  };
} = {
  BORN_INTO_CURRENT_LIFESTYLE: {
    label: 'גדלתי באורח חיים דתי',
    shortLabel: 'גדלתי דתי',
    icon: Home,
    color: 'text-blue-600',
    mobileClasses: 'text-xs sm:text-sm',
  },
  BORN_SECULAR: {
    label: 'גדלתי באורח חיים חילוני',
    shortLabel: 'גדלתי חילוני',
    icon: Sun,
    color: 'text-orange-600',
    mobileClasses: 'text-xs sm:text-sm',
  },
  BAAL_TESHUVA: {
    label: 'חזרתי בתשובה',
    shortLabel: 'חוזר בתשובה',
    icon: Sparkles,
    color: 'text-purple-600',
    mobileClasses: 'text-xs sm:text-sm',
  },
  DATLASH: {
    label: 'יצאתי בשאלה (דתל"ש)',
    shortLabel: 'דתל"ש',
    icon: ArrowLeft,
    color: 'text-gray-600',
    mobileClasses: 'text-xs sm:text-sm',
  },
  CONVERT: {
    label: 'גר/ה / גיורת',
    shortLabel: 'גיורת',
    icon: Star,
    color: 'text-amber-600',
    mobileClasses: 'text-xs sm:text-sm',
  },
  IN_PROCESS: {
    label: 'בתהליך של שינוי/התקרבות',
    shortLabel: 'בתהליך',
    icon: Compass,
    color: 'text-teal-600',
    mobileClasses: 'text-xs sm:text-sm',
  },
  OTHER: {
    label: 'אחר',
    shortLabel: 'אחר',
    icon: InfoIcon,
    color: 'text-pink-600',
    mobileClasses: 'text-xs sm:text-sm',
  },
  no_preference: {
    label: 'ללא העדפה למסע הדתי',
    shortLabel: 'ללא העדפה',
    icon: Globe,
    color: 'text-gray-500',
    mobileClasses: 'text-xs sm:text-sm',
  },
};

const educationLevelMap: {
  [key: string]: {
    label: string;
    shortLabel?: string;
    icon: React.ElementType;
    color: string;
    mobileClasses?: string;
  };
} = {
  high_school: {
    label: 'תיכונית',
    shortLabel: 'תיכון',
    icon: School,
    color: 'text-blue-600',
    mobileClasses: 'text-xs sm:text-sm',
  },
  vocational: {
    label: 'מקצועית',
    shortLabel: 'מקצועי',
    icon: Award,
    color: 'text-green-600',
    mobileClasses: 'text-xs sm:text-sm',
  },
  academic_student: {
    label: 'במהלך לימודים',
    shortLabel: 'סטודנט',
    icon: BookOpen,
    color: 'text-orange-600',
    mobileClasses: 'text-xs sm:text-sm',
  },
  academic_ba: {
    label: 'בוגר/ת תואר ראשון',
    shortLabel: 'ב.א',
    icon: GraduationCap,
    color: 'text-purple-600',
    mobileClasses: 'text-xs sm:text-sm',
  },
  academic_ma: {
    label: 'בוגר/ת תואר שני',
    shortLabel: 'מ.א',
    icon: Star,
    color: 'text-indigo-600',
    mobileClasses: 'text-xs sm:text-sm',
  },
  academic_phd: {
    label: 'דוקטור/ת',
    shortLabel: 'דוקטור',
    icon: Crown,
    color: 'text-rose-600',
    mobileClasses: 'text-xs sm:text-sm',
  },
  yeshiva_seminary: {
    label: 'לימודים תורניים',
    shortLabel: 'תורני',
    icon: BookMarked,
    color: 'text-amber-600',
    mobileClasses: 'text-xs sm:text-sm',
  },
  other: {
    label: 'ייחודי/ת',
    shortLabel: 'ייחודי',
    icon: Sparkles,
    color: 'text-pink-600',
    mobileClasses: 'text-xs sm:text-sm',
  },
  'ללא העדפה': {
    label: 'הכל פתוח',
    shortLabel: 'פתוח',
    icon: Globe,
    color: 'text-gray-600',
    mobileClasses: 'text-xs sm:text-sm',
  },
};

const serviceTypeMap: {
  [key: string]: {
    label: string;
    shortLabel?: string;
    icon: React.ElementType;
    color: string;
    mobileClasses?: string;
  };
} = {
  MILITARY_COMBATANT: {
    label: 'לוחם/ת',
    shortLabel: 'לוחם',
    icon: Award,
    color: 'text-red-600',
    mobileClasses: 'text-xs sm:text-sm',
  },
  MILITARY_SUPPORT: {
    label: 'תומך/ת לחימה',
    shortLabel: 'תומך',
    icon: Users,
    color: 'text-orange-600',
    mobileClasses: 'text-xs sm:text-sm',
  },
  MILITARY_OFFICER: {
    label: 'קצין/ה',
    shortLabel: 'קצין',
    icon: Crown,
    color: 'text-purple-600',
    mobileClasses: 'text-xs sm:text-sm',
  },
  MILITARY_INTELLIGENCE_CYBER_TECH: {
    label: 'טכנולוגיה ומודיעין',
    shortLabel: 'טכנולוגיה',
    icon: Zap,
    color: 'text-blue-600',
    mobileClasses: 'text-xs sm:text-sm',
  },
  NATIONAL_SERVICE_ONE_YEAR: {
    label: 'שירות לאומי',
    shortLabel: 'שירות לאומי',
    icon: Heart,
    color: 'text-pink-600',
    mobileClasses: 'text-xs sm:text-sm',
  },
  NATIONAL_SERVICE_TWO_YEARS: {
    label: 'שירות לאומי מורחב',
    shortLabel: 'שירות מורחב',
    icon: Stars,
    color: 'text-rose-600',
    mobileClasses: 'text-xs sm:text-sm',
  },
  HESDER_YESHIVA: {
    label: 'ישיבת הסדר',
    shortLabel: 'הסדר',
    icon: BookMarked,
    color: 'text-indigo-600',
    mobileClasses: 'text-xs sm:text-sm',
  },
  YESHIVA_ONLY_POST_HS: {
    label: 'לימודים תורניים',
    shortLabel: 'תורני',
    icon: BookOpen,
    color: 'text-amber-600',
    mobileClasses: 'text-xs sm:text-sm',
  },
  PRE_MILITARY_ACADEMY_AND_SERVICE: {
    label: 'מכינה ושירות',
    shortLabel: 'מכינה',
    icon: GraduationCap,
    color: 'text-green-600',
    mobileClasses: 'text-xs sm:text-sm',
  },
  EXEMPTED: {
    label: 'פטור',
    shortLabel: 'פטור',
    icon: Shield,
    color: 'text-gray-600',
    mobileClasses: 'text-xs sm:text-sm',
  },
  CIVILIAN_SERVICE: {
    label: 'שירות אזרחי',
    shortLabel: 'אזרחי',
    icon: Users2,
    color: 'text-teal-600',
    mobileClasses: 'text-xs sm:text-sm',
  },
  OTHER: {
    label: 'ייחודי',
    shortLabel: 'ייחודי',
    icon: Sparkles,
    color: 'text-purple-600',
    mobileClasses: 'text-xs sm:text-sm',
  },
};

const headCoveringMap: {
  [key: string]: {
    label: string;
    shortLabel?: string;
    icon: React.ElementType;
    color: string;
    mobileClasses?: string;
  };
} = {
  FULL_COVERAGE: {
    label: 'כיסוי מלא',
    shortLabel: 'מלא',
    icon: Crown,
    color: 'text-purple-600',
    mobileClasses: 'text-xs sm:text-sm',
  },
  PARTIAL_COVERAGE: {
    label: 'כיסוי חלקי',
    shortLabel: 'חלקי',
    icon: Flower,
    color: 'text-pink-600',
    mobileClasses: 'text-xs sm:text-sm',
  },
  HAT_BERET: {
    label: 'כובע/ברט',
    shortLabel: 'כובע',
    icon: Sun,
    color: 'text-orange-600',
    mobileClasses: 'text-xs sm:text-sm',
  },
  SCARF_ONLY_SOMETIMES: {
    label: 'מטפחת לאירועים',
    shortLabel: 'לאירועים',
    icon: Sparkle,
    color: 'text-rose-600',
    mobileClasses: 'text-xs sm:text-sm',
  },
  NONE: {
    label: 'ללא כיסוי',
    shortLabel: 'ללא',
    icon: Wind,
    color: 'text-blue-600',
    mobileClasses: 'text-xs sm:text-sm',
  },
  any: {
    label: 'גמיש/ה',
    shortLabel: 'גמיש',
    icon: Rainbow,
    color: 'text-indigo-600',
    mobileClasses: 'text-xs sm:text-sm',
  },
};

const kippahTypeMap: {
  [key: string]: {
    label: string;
    shortLabel?: string;
    icon: React.ElementType;
    color: string;
    mobileClasses?: string;
  };
} = {
  BLACK_VELVET: {
    label: 'קטיפה שחורה',
    shortLabel: 'קטיפה',
    icon: Crown,
    color: 'text-indigo-700',
    mobileClasses: 'text-xs sm:text-sm',
  },
  KNITTED_SMALL: {
    label: 'סרוגה קטנה',
    shortLabel: 'סרוגה קטנה',
    icon: Star,
    color: 'text-blue-600',
    mobileClasses: 'text-xs sm:text-sm',
  },
  KNITTED_LARGE: {
    label: 'סרוגה גדולה',
    shortLabel: 'סרוגה גדולה',
    icon: Stars,
    color: 'text-blue-700',
    mobileClasses: 'text-xs sm:text-sm',
  },
  CLOTH: {
    label: 'בד',
    shortLabel: 'בד',
    icon: Flower,
    color: 'text-green-600',
    mobileClasses: 'text-xs sm:text-sm',
  },
  BRESLEV: {
    label: 'ברסלב',
    shortLabel: 'ברסלב',
    icon: Sparkle,
    color: 'text-purple-600',
    mobileClasses: 'text-xs sm:text-sm',
  },
  NONE_AT_WORK_OR_CASUAL: {
    label: 'לא בעבודה',
    shortLabel: 'לא בעבודה',
    icon: Briefcase,
    color: 'text-gray-600',
    mobileClasses: 'text-xs sm:text-sm',
  },
  NONE_USUALLY: {
    label: 'לרוב לא',
    shortLabel: 'לרוב לא',
    icon: Wind,
    color: 'text-gray-500',
    mobileClasses: 'text-xs sm:text-sm',
  },
  OTHER: {
    label: 'ייחודי',
    shortLabel: 'ייחודי',
    icon: Rainbow,
    color: 'text-pink-600',
    mobileClasses: 'text-xs sm:text-sm',
  },
  any: {
    label: 'גמיש',
    shortLabel: 'גמיש',
    icon: Globe,
    color: 'text-teal-600',
    mobileClasses: 'text-xs sm:text-sm',
  },
};

const languageMap = languageOptions.reduce(
  (acc, lang) => {
    acc[lang.value] = {
      label: lang.label,
      shortLabel:
        lang.label.length > 8 ? lang.label.substring(0, 8) + '...' : lang.label,
      icon: Globe,
      color: 'text-blue-600',
      mobileClasses: 'text-xs sm:text-sm',
    };
    return acc;
  },
  {} as {
    [key: string]: {
      label: string;
      shortLabel?: string;
      icon: React.ElementType;
      color: string;
      mobileClasses?: string;
    };
  }
);

const contactPreferenceMap: {
  [key: string]: {
    label: string;
    shortLabel?: string;
    icon: React.ElementType;
    color: string;
    mobileClasses?: string;
  };
} = {
  direct: {
    label: 'ישירות',
    shortLabel: 'ישירות',
    icon: PhoneIcon,
    color: 'text-green-600',
    mobileClasses: 'text-xs sm:text-sm',
  },
  matchmaker: {
    label: 'דרך השדכן/ית',
    shortLabel: 'דרך שדכן',
    icon: Users,
    color: 'text-purple-600',
    mobileClasses: 'text-xs sm:text-sm',
  },
  both: {
    label: 'גמיש/ה',
    shortLabel: 'גמיש',
    icon: MessageSquare,
    color: 'text-blue-600',
    mobileClasses: 'text-xs sm:text-sm',
  },
};

const characterTraitMap: {
  [key: string]: {
    label: string;
    shortLabel?: string;
    icon: React.ElementType;
    color: string;
    mobileClasses?: string;
  };
} = {
  empathetic: {
    label: 'אמפתי/ת',
    shortLabel: 'אמפתי',
    icon: Heart,
    color: 'text-rose-600',
    mobileClasses: 'text-xs sm:text-sm',
  },
  driven: {
    label: 'שאפתן/ית',
    shortLabel: 'שאפתן',
    icon: Zap,
    color: 'text-orange-600',
    mobileClasses: 'text-xs sm:text-sm',
  },
  optimistic: {
    label: 'אופטימי/ת',
    shortLabel: 'אופטימי',
    icon: Sunrise,
    color: 'text-yellow-600',
    mobileClasses: 'text-xs sm:text-sm',
  },
  family_oriented: {
    label: 'משפחתי/ת',
    shortLabel: 'משפחתי',
    icon: Users2,
    color: 'text-pink-600',
    mobileClasses: 'text-xs sm:text-sm',
  },
  intellectual: {
    label: 'אינטלקטואל/ית',
    shortLabel: 'אינטלקטואל',
    icon: BookOpen,
    color: 'text-indigo-600',
    mobileClasses: 'text-xs sm:text-sm',
  },
  organized: {
    label: 'מאורגנ/ת',
    shortLabel: 'מאורגן',
    icon: CheckCircle,
    color: 'text-green-600',
    mobileClasses: 'text-xs sm:text-sm',
  },
  calm: {
    label: 'רגוע/ה',
    shortLabel: 'רגוע',
    icon: Waves,
    color: 'text-blue-600',
    mobileClasses: 'text-xs sm:text-sm',
  },
  humorous: {
    label: 'מצחיק/ה',
    shortLabel: 'מצחיק',
    icon: Smile,
    color: 'text-purple-600',
    mobileClasses: 'text-xs sm:text-sm',
  },
  sociable: {
    label: 'חברותי/ת',
    shortLabel: 'חברותי',
    icon: Users,
    color: 'text-cyan-600',
    mobileClasses: 'text-xs sm:text-sm',
  },
  sensitive: {
    label: 'רגיש/ה',
    shortLabel: 'רגיש',
    icon: Flower,
    color: 'text-pink-600',
    mobileClasses: 'text-xs sm:text-sm',
  },
  independent: {
    label: 'עצמאי/ת',
    shortLabel: 'עצמאי',
    icon: Crown,
    color: 'text-amber-600',
    mobileClasses: 'text-xs sm:text-sm',
  },
  creative: {
    label: 'יצירתי/ת',
    shortLabel: 'יצירתי',
    icon: Palette,
    color: 'text-rose-600',
    mobileClasses: 'text-xs sm:text-sm',
  },
  honest: {
    label: 'כן/ה וישר/ה',
    shortLabel: 'כן וישר',
    icon: Star,
    color: 'text-blue-600',
    mobileClasses: 'text-xs sm:text-sm',
  },
  responsible: {
    label: 'אחראי/ת',
    shortLabel: 'אחראי',
    icon: Award,
    color: 'text-green-600',
    mobileClasses: 'text-xs sm:text-sm',
  },
  easy_going: {
    label: 'זורם/ת וקליל/ה',
    shortLabel: 'זורם',
    icon: Wind,
    color: 'text-teal-600',
    mobileClasses: 'text-xs sm:text-sm',
  },
  no_strong_preference: {
    label: 'פתוח/ה לגילוי',
    shortLabel: 'פתוח',
    icon: Compass,
    color: 'text-gray-600',
    mobileClasses: 'text-xs sm:text-sm',
  },
};

const hobbiesMap: {
  [key: string]: {
    label: string;
    shortLabel?: string;
    icon: React.ElementType;
    color: string;
    mobileClasses?: string;
  };
} = {
  travel: {
    label: 'טיולים',
    shortLabel: 'טיולים',
    icon: Compass,
    color: 'text-green-600',
    mobileClasses: 'text-xs sm:text-sm',
  },
  sports: {
    label: 'ספורט',
    shortLabel: 'ספורט',
    icon: Zap,
    color: 'text-orange-600',
    mobileClasses: 'text-xs sm:text-sm',
  },
  reading: {
    label: 'קריאה',
    shortLabel: 'קריאה',
    icon: BookOpen,
    color: 'text-indigo-600',
    mobileClasses: 'text-xs sm:text-sm',
  },
  cooking_baking: {
    label: 'בישול ואפיה',
    shortLabel: 'בישול',
    icon: Coffee,
    color: 'text-amber-600',
    mobileClasses: 'text-xs sm:text-sm',
  },
  music_playing_instrument: {
    label: 'מוזיקה',
    shortLabel: 'מוזיקה',
    icon: Music,
    color: 'text-purple-600',
    mobileClasses: 'text-xs sm:text-sm',
  },
  art_crafts: {
    label: 'אומנות ויצירה',
    shortLabel: 'אומנות',
    icon: Palette,
    color: 'text-pink-600',
    mobileClasses: 'text-xs sm:text-sm',
  },
  volunteering: {
    label: 'התנדבות',
    shortLabel: 'התנדבות',
    icon: Heart,
    color: 'text-rose-600',
    mobileClasses: 'text-xs sm:text-sm',
  },
  learning_courses: {
    label: 'למידה',
    shortLabel: 'למידה',
    icon: GraduationCap,
    color: 'text-blue-600',
    mobileClasses: 'text-xs sm:text-sm',
  },
  board_games_puzzles: {
    label: 'משחקים',
    shortLabel: 'משחקים',
    icon: Play,
    color: 'text-cyan-600',
    mobileClasses: 'text-xs sm:text-sm',
  },
  movies_theater: {
    label: 'סרטים ותיאטרון',
    shortLabel: 'סרטים',
    icon: Camera,
    color: 'text-red-600',
    mobileClasses: 'text-xs sm:text-sm',
  },
  dancing: {
    label: 'ריקוד',
    shortLabel: 'ריקוד',
    icon: Sparkle,
    color: 'text-pink-600',
    mobileClasses: 'text-xs sm:text-sm',
  },
  writing: {
    label: 'כתיבה',
    shortLabel: 'כתיבה',
    icon: Edit3,
    color: 'text-gray-600',
    mobileClasses: 'text-xs sm:text-sm',
  },
  nature_hiking: {
    label: 'טבע וטיולים',
    shortLabel: 'טבע',
    icon: TreePine,
    color: 'text-green-600',
    mobileClasses: 'text-xs sm:text-sm',
  },
  photography: {
    label: 'צילום',
    shortLabel: 'צילום',
    icon: Camera,
    color: 'text-blue-600',
    mobileClasses: 'text-xs sm:text-sm',
  },
  no_strong_preference: {
    label: 'פתוח/ה לגילוי יחד',
    shortLabel: 'פתוח',
    icon: Rainbow,
    color: 'text-gray-600',
    mobileClasses: 'text-xs sm:text-sm',
  },
};

// --- Enhanced Helper Functions with Responsive Support ---

const formatEnumValue = (
  value: string | null | undefined,
  map: {
    [key: string]: {
      label: string;
      shortLabel?: string;
      icon: React.ElementType;
      color: string;
      mobileClasses?: string;
    };
  },
  placeholder: string = 'עוד נגלה יחד...',
  useMobile: boolean = false
): {
  label: string;
  shortLabel?: string;
  icon: React.ElementType;
  color: string;
  mobileClasses?: string;
} => {
  if (!value || !map[value]) {
    return {
      label: placeholder,
      shortLabel:
        useMobile && placeholder.length > 10
          ? placeholder.substring(0, 10) + '...'
          : placeholder,
      icon: Telescope,
      color: 'text-gray-500',
      mobileClasses: 'text-xs sm:text-sm',
    };
  }

  const result = map[value];
  return {
    ...result,
    shortLabel:
      result.shortLabel ||
      (useMobile && result.label.length > 10
        ? result.label.substring(0, 10) + '...'
        : result.label),
  };
};

const getInitials = (
  firstName?: string,
  lastName?: string,
  maxLength: number = 2
): string => {
  let initials = '';
  if (firstName && firstName.length > 0) initials += firstName[0];
  if (lastName && lastName.length > 0) initials += lastName[0];

  if (initials.length === 0 && firstName && firstName.length > 0) {
    initials =
      firstName.length > 1
        ? firstName.substring(0, Math.min(maxLength, firstName.length))
        : firstName[0];
  }

  return initials.toUpperCase() || '♥';
};

const calculateAge = (birthDate: Date | string | null | undefined): number => {
  if (!birthDate) return 0;
  try {
    const today = new Date();
    const birth = new Date(birthDate);
    if (isNaN(birth.getTime())) return 0;
    let age = today.getFullYear() - birth.getFullYear();
    const monthDiff = today.getMonth() - birth.getMonth();
    if (
      monthDiff < 0 ||
      (monthDiff === 0 && today.getDate() < birth.getDate())
    ) {
      age--;
    }
    return age > 0 ? age : 0;
  } catch (e) {
    return 0;
  }
};

const formatAvailabilityStatus = (
  status: UserProfile['availabilityStatus'] | undefined,
  THEME: ThemeType
) => {
  const statusMap = {
    AVAILABLE: {
      text: 'זמין/ה להכרות מרגשות',
      shortText: 'זמין',
      gradient: THEME.colors.primary.main,
      gradientSm: THEME.colors.primary.mainSm,
      icon: Heart,
      pulse: false,
      bgColor: 'bg-gradient-to-r from-emerald-500 to-green-500',
      bgColorSm: 'bg-gradient-to-r from-emerald-400 to-green-400',
      mobileClasses: 'text-xs sm:text-sm px-2 py-1 sm:px-3 sm:py-2',
    },
    UNAVAILABLE: {
      text: 'לא זמין/ה כרגע',
      shortText: 'לא זמין',
      gradient: 'from-gray-400 to-gray-500',
      gradientSm: 'from-gray-300 to-gray-400',
      icon: Clock,
      pulse: false,
      bgColor: 'bg-gradient-to-r from-gray-400 to-gray-500',
      bgColorSm: 'bg-gradient-to-r from-gray-300 to-gray-400',
      mobileClasses: 'text-xs sm:text-sm px-2 py-1 sm:px-3 sm:py-2',
    },
    DATING: {
      text: 'בתהליך היכרות',
      shortText: 'בהיכרות',
      gradient: THEME.colors.primary.accent,
      gradientSm: THEME.colors.primary.accentSm,
      icon: Coffee,
      pulse: false,
      bgColor: 'bg-gradient-to-r from-amber-500 to-orange-500',
      bgColorSm: 'bg-gradient-to-r from-amber-400 to-orange-400',
      mobileClasses: 'text-xs sm:text-sm px-2 py-1 sm:px-3 sm:py-2',
    },
    PAUSED: {
      text: 'בהפסקה זמנית',
      shortText: 'בהפסקה',
      gradient: THEME.colors.secondary.sky,
      gradientSm: THEME.colors.secondary.skySm,
      icon: Moon,
      pulse: false,
      bgColor: 'bg-gradient-to-r from-blue-500 to-cyan-500',
      bgColorSm: 'bg-gradient-to-r from-blue-400 to-cyan-400',
      mobileClasses: 'text-xs sm:text-sm px-2 py-1 sm:px-3 sm:py-2',
    },
    ENGAGED: {
      text: 'מאורס/ת',
      shortText: 'מאורס',
      gradient: THEME.colors.primary.light,
      gradientSm: THEME.colors.primary.lightSm,
      icon: Star,
      pulse: false,
      bgColor: 'bg-gradient-to-r from-pink-500 to-rose-500',
      bgColorSm: 'bg-gradient-to-r from-pink-400 to-rose-400',
      mobileClasses: 'text-xs sm:text-sm px-2 py-1 sm:px-3 sm:py-2',
    },
    MARRIED: {
      text: 'נשוי/אה',
      shortText: 'נשוי',
      gradient: THEME.colors.primary.main,
      gradientSm: THEME.colors.primary.mainSm,
      icon: Heart,
      pulse: false,
      bgColor: 'bg-gradient-to-r from-rose-500 to-pink-500',
      bgColorSm: 'bg-gradient-to-r from-rose-400 to-pink-400',
      mobileClasses: 'text-xs sm:text-sm px-2 py-1 sm:px-3 sm:py-2',
    },
  };

  return (
    statusMap[status as keyof typeof statusMap] || {
      text: 'מסתורי/ת...',
      shortText: 'מסתורי',
      gradient: THEME.colors.secondary.lavender,
      gradientSm: THEME.colors.secondary.lavenderSm,
      icon: Sparkles,
      pulse: true,
      bgColor: 'bg-gradient-to-r from-purple-500 to-indigo-500',
      bgColorSm: 'bg-gradient-to-r from-purple-400 to-indigo-400',
      mobileClasses: 'text-xs sm:text-sm px-2 py-1 sm:px-3 sm:py-2',
    }
  );
};

const formatBooleanPreference = (
  value: boolean | null | undefined,
  yesLabel: string = 'כן',
  noLabel: string = 'לא',
  notSpecifiedLabel: string = 'נגלה יחד',
  useMobile: boolean = false
): {
  label: string;
  shortLabel?: string;
  icon: React.ElementType;
  color: string;
  mobileClasses?: string;
} => {
  const baseResponse = {
    mobileClasses: 'text-xs sm:text-sm',
  };

  if (value === true) {
    return {
      label: yesLabel,
      shortLabel:
        useMobile && yesLabel.length > 8
          ? yesLabel.substring(0, 8) + '...'
          : yesLabel,
      icon: CheckCircle,
      color: 'text-green-600',
      ...baseResponse,
    };
  }

  if (value === false) {
    return {
      label: noLabel,
      shortLabel:
        useMobile && noLabel.length > 8
          ? noLabel.substring(0, 8) + '...'
          : noLabel,
      icon: X,
      color: 'text-red-500',
      ...baseResponse,
    };
  }

  return {
    label: notSpecifiedLabel,
    shortLabel:
      useMobile && notSpecifiedLabel.length > 8
        ? notSpecifiedLabel.substring(0, 8) + '...'
        : notSpecifiedLabel,
    icon: Telescope,
    color: 'text-gray-500',
    ...baseResponse,
  };
};

const formatStringBooleanPreference = (
  value: string | null | undefined,
  options: {
    [key: string]: {
      label: string;
      shortLabel?: string;
      icon: React.ElementType;
      color: string;
    };
  } = {
    yes: {
      label: 'כן',
      shortLabel: 'כן',
      icon: CheckCircle,
      color: 'text-green-600',
    },
    no: { label: 'לא', shortLabel: 'לא', icon: X, color: 'text-red-500' },
    flexible: {
      label: 'גמיש/ה',
      shortLabel: 'גמיש',
      icon: Rainbow,
      color: 'text-indigo-600',
    },
  },
  notSpecifiedLabel: {
    label: string;
    shortLabel?: string;
    icon: React.ElementType;
    color: string;
  } = {
    label: 'נגלה יחד',
    shortLabel: 'נגלה',
    icon: Telescope,
    color: 'text-gray-500',
  },
  useMobile: boolean = false
): {
  label: string;
  shortLabel?: string;
  icon: React.ElementType;
  color: string;
  mobileClasses?: string;
} => {
  const baseResponse = {
    mobileClasses: 'text-xs sm:text-sm',
  };

  if (value && options[value.toLowerCase()]) {
    const result = options[value.toLowerCase()];
    return {
      ...result,
      shortLabel:
        result.shortLabel ||
        (useMobile && result.label.length > 8
          ? result.label.substring(0, 8) + '...'
          : result.label),
      ...baseResponse,
    };
  }

  return {
    ...notSpecifiedLabel,
    shortLabel:
      notSpecifiedLabel.shortLabel ||
      (useMobile && notSpecifiedLabel.label.length > 8
        ? notSpecifiedLabel.label.substring(0, 8) + '...'
        : notSpecifiedLabel.label),
    ...baseResponse,
  };
};

// --- Enhanced Helper Components with Full Responsive Support ---

// 1. DetailItem
const DetailItem: React.FC<{
  icon: React.ElementType;
  label: string;
  value: React.ReactNode;
  className?: string;
  iconColorClass?: string;
  valueClassName?: string;
  tooltip?: string;
  variant?: 'default' | 'highlight' | 'elegant' | 'romantic';
  size?: 'sm' | 'md' | 'lg';
  textAlign?: 'center' | 'right' | 'left';
  responsive?: boolean;
  useMobileLayout?: boolean;
}> = ({
  icon: Icon,
  label,
  value,
  className,
  iconColorClass = 'text-rose-500',
  valueClassName,
  tooltip,
  variant = 'default',
  size = 'md',
  textAlign = 'center',
  responsive = true,
  useMobileLayout = false,
}) => {
  const sizes = {
    sm: {
      container: 'p-2 gap-2 sm:p-3 sm:gap-3',
      icon: 'w-6 h-6 sm:w-8 sm:h-8',
      iconPadding: 'p-1 sm:p-1.5',
      text: 'text-xs sm:text-sm',
      label: 'text-xs sm:text-sm',
      value: 'text-xs sm:text-sm',
    },
    md: {
      container: 'p-2 gap-2 sm:p-3 sm:gap-3 md:p-4 md:gap-4',
      icon: 'w-8 h-8 sm:w-10 sm:h-10 md:w-12 md:h-12',
      iconPadding: 'p-1.5 sm:p-2 md:p-2.5',
      text: 'text-xs sm:text-sm md:text-base',
      label: 'text-xs sm:text-sm md:text-base',
      value: 'text-xs sm:text-sm md:text-base',
    },
    lg: {
      container: 'p-3 gap-3 sm:p-4 sm:gap-4 md:p-5 md:gap-5',
      icon: 'w-10 h-10 sm:w-12 sm:h-12 md:w-14 md:h-14',
      iconPadding: 'p-2 sm:p-2.5 md:p-3',
      text: 'text-sm sm:text-base md:text-lg',
      label: 'text-sm sm:text-base md:text-lg',
      value: 'text-sm sm:text-base md:text-lg',
    },
  };

  const variants = {
    default: {
      card: 'bg-white border border-gray-200 hover:border-rose-300 hover:shadow-md',
      icon: 'bg-rose-50 border border-rose-200',
      iconColor: iconColorClass || 'text-rose-500',
    },
    highlight: {
      card: `bg-gradient-to-r from-rose-50 via-pink-50 to-rose-50 border border-rose-200 shadow-sm hover:shadow-md`,
      icon: `bg-gradient-to-r from-rose-500 via-pink-500 to-rose-600 text-white shadow-sm`,
      iconColor: 'text-white',
    },
    elegant: {
      card: `bg-gradient-to-br from-white via-gray-50 to-neutral-100 border border-amber-200 shadow-md hover:shadow-lg`,
      icon: `bg-gradient-to-r from-amber-400 via-yellow-400 to-amber-500 text-white shadow-md`,
      iconColor: 'text-white',
    },
    romantic: {
      card: `bg-gradient-to-r from-rose-50 via-pink-50 to-orange-50 border border-pink-200 shadow-sm hover:shadow-lg`,
      icon: `bg-gradient-to-r from-pink-500 via-rose-500 to-red-500 text-white shadow-sm`,
      iconColor: 'text-white',
    },
  };

  const currentSize = sizes[size];
  const currentVariant = variants[variant];

  const content = (
    <div
      className={cn(
        'flex rounded-xl transition-all duration-300',
        'min-w-0 w-full max-w-full overflow-hidden',
        useMobileLayout
          ? 'flex-col items-center text-center gap-2 sm:gap-3'
          : 'items-start',
        currentSize.container,
        currentVariant.card,
        responsive && 'hover:scale-[1.02] active:scale-[0.98]',
        className
      )}
    >
      <div
        className={cn(
          'flex-1 overflow-hidden',
          useMobileLayout ? 'text-center w-full' : 'min-w-0'
        )}
      >
        <div className="flex items-center justify-center gap-2 sm:gap-3 mb-2">
          <div
            className={cn(
              'flex-shrink-0 rounded-lg transition-all duration-300',
              currentSize.iconPadding,
              currentVariant.icon,
              'min-w-fit'
            )}
          >
            <Icon
              className={cn(
                currentSize.icon,
                currentVariant.iconColor,
                'transition-all duration-300'
              )}
            />
          </div>
        </div>
        <p
          className={cn(
            'font-semibold mb-1 tracking-wide leading-tight text-center',
            currentSize.label,
            'break-words hyphens-auto word-break-break-word overflow-wrap-anywhere',
            variant === 'highlight' || variant === 'elegant'
              ? 'text-rose-700 sm:text-gray-700'
              : 'text-gray-600 sm:text-gray-700',
            useMobileLayout && 'px-1'
          )}
        >
          {label}
        </p>
        <div
          className={cn(
            'font-medium leading-relaxed text-center',
            currentSize.value,
            'break-words hyphens-auto word-break-break-word overflow-wrap-anywhere',
            'max-w-full overflow-hidden',
            variant === 'highlight' || variant === 'elegant'
              ? 'text-gray-800 sm:text-gray-900'
              : 'text-gray-700 sm:text-gray-800',
            useMobileLayout && 'px-1',
            valueClassName
          )}
        >
          {value || (
            <span className="text-gray-400 italic text-xs sm:text-sm">
              עוד נגלה יחד...
            </span>
          )}
        </div>
      </div>
    </div>
  );

  if (tooltip && responsive) {
    return (
      <Tooltip>
        <TooltipTrigger asChild className="w-full">
          {content}
        </TooltipTrigger>
        <TooltipContent
          side="top"
          className="max-w-xs text-center bg-white border border-rose-200 shadow-lg z-50"
          sideOffset={5}
        >
          <p className="text-gray-700 text-sm break-words p-2">{tooltip}</p>
        </TooltipContent>
      </Tooltip>
    );
  }

  return content;
};

// 2. EmptyState
const EmptyState: React.FC<{
  icon: React.ElementType;
  title: string;
  description?: string;
  className?: string;
  action?: React.ReactNode;
  variant?: 'mystery' | 'adventure' | 'discovery' | 'romantic';
  size?: 'sm' | 'md' | 'lg';
  compact?: boolean;
}> = ({
  icon: Icon,
  title,
  description,
  className,
  action,
  variant = 'discovery',
  size = 'md',
  compact = false,
}) => {
  const sizes = {
    sm: {
      container: compact ? 'py-4 px-3' : 'py-6 px-4',
      icon: 'w-6 h-6 sm:w-8 sm:h-8',
      iconContainer: 'p-2 sm:p-3',
      title: 'text-sm sm:text-base',
      description: 'text-xs sm:text-sm',
      spacing: 'mb-2 sm:mb-3',
    },
    md: {
      container: compact ? 'py-6 px-4' : 'py-8 px-6',
      icon: 'w-8 h-8 sm:w-10 sm:h-10 md:w-12 md:h-12',
      iconContainer: 'p-3 sm:p-4',
      title: 'text-base sm:text-lg md:text-xl',
      description: 'text-sm sm:text-base',
      spacing: 'mb-3 sm:mb-4',
    },
    lg: {
      container: compact ? 'py-8 px-6' : 'py-12 px-8',
      icon: 'w-10 h-10 sm:w-12 sm:h-12 md:w-16 md:h-16',
      iconContainer: 'p-4 sm:p-5 md:p-6',
      title: 'text-lg sm:text-xl md:text-2xl',
      description: 'text-base sm:text-lg',
      spacing: 'mb-4 sm:mb-6',
    },
  };

  const variants = {
    mystery: {
      bg: `bg-gradient-to-br from-purple-50 via-violet-50 to-purple-100`,
      bgSm: `bg-gradient-to-br from-purple-25 via-violet-25 to-purple-50`,
      border: 'border-purple-200 hover:border-purple-300',
      iconBg: `bg-gradient-to-r from-purple-500 via-violet-500 to-purple-600`,
      iconBgSm: `bg-gradient-to-r from-purple-400 via-violet-400 to-purple-500`,
      textColor: 'text-purple-700 sm:text-purple-800',
      titleColor: 'text-purple-800 sm:text-purple-900',
    },
    adventure: {
      bg: `bg-gradient-to-br from-emerald-50 via-teal-50 to-green-100`,
      bgSm: `bg-gradient-to-br from-emerald-25 via-teal-25 to-green-50`,
      border: 'border-emerald-200 hover:border-emerald-300',
      iconBg: `bg-gradient-to-r from-emerald-500 via-teal-500 to-green-600`,
      iconBgSm: `bg-gradient-to-r from-emerald-400 via-teal-400 to-green-500`,
      textColor: 'text-emerald-700 sm:text-emerald-800',
      titleColor: 'text-emerald-800 sm:text-emerald-900',
    },
    discovery: {
      bg: `bg-gradient-to-br from-amber-50 via-yellow-50 to-orange-100`,
      bgSm: `bg-gradient-to-br from-amber-25 via-yellow-25 to-orange-50`,
      border: 'border-amber-200 hover:border-amber-300',
      iconBg: `bg-gradient-to-r from-amber-500 via-yellow-500 to-orange-600`,
      iconBgSm: `bg-gradient-to-r from-amber-400 via-yellow-400 to-orange-500`,
      textColor: 'text-amber-700 sm:text-amber-800',
      titleColor: 'text-amber-800 sm:text-amber-900',
    },
    romantic: {
      bg: `bg-gradient-to-br from-rose-50 via-pink-50 to-red-100`,
      bgSm: `bg-gradient-to-br from-rose-25 via-pink-25 to-red-50`,
      border: 'border-rose-200 hover:border-rose-300',
      iconBg: `bg-gradient-to-r from-rose-500 via-pink-500 to-red-600`,
      iconBgSm: `bg-gradient-to-r from-rose-400 via-pink-400 to-red-500`,
      textColor: 'text-rose-700 sm:text-rose-800',
      titleColor: 'text-rose-800 sm:text-rose-900',
    },
  };

  const currentSize = sizes[size];
  const currentVariant = variants[variant];

  return (
    <div
      className={cn(
        'flex flex-col items-center justify-center text-center rounded-xl border border-dashed transition-all duration-300',
        currentSize.container,
        currentVariant.bg,
        'sm:' + currentVariant.bgSm,
        currentVariant.border,
        'shadow-sm hover:shadow-md',
        'max-w-full overflow-hidden',
        className
      )}
    >
      <div
        className={cn(
          'rounded-full transition-all duration-300 hover:scale-110 active:scale-95',
          currentSize.iconContainer,
          currentSize.spacing,
          currentVariant.iconBg,
          'shadow-md hover:shadow-lg sm:shadow-lg sm:hover:shadow-xl'
        )}
      >
        <Icon
          className={cn(
            currentSize.icon,
            'text-white transition-all duration-300'
          )}
        />
      </div>

      <h3
        className={cn(
          'font-bold leading-tight',
          currentSize.title,
          currentVariant.titleColor,
          currentSize.spacing,
          'break-words hyphens-auto word-break-break-word max-w-full px-2'
        )}
      >
        {title}
      </h3>

      {description && (
        <p
          className={cn(
            'leading-relaxed max-w-xs mx-auto',
            currentSize.description,
            currentVariant.textColor,
            action ? 'mb-4 sm:mb-6' : '',
            'break-words hyphens-auto word-break-break-word px-2'
          )}
        >
          {description}
        </p>
      )}

      {action && (
        <div className="flex flex-wrap justify-center gap-2 sm:gap-3 max-w-full">
          {action}
        </div>
      )}
    </div>
  );
};

// 3. SectionCard
const SectionCard: React.FC<{
  title: string;
  subtitle?: string;
  icon?: React.ElementType;
  children: React.ReactNode;
  className?: string;
  contentClassName?: string;
  headerClassName?: string;
  action?: React.ReactNode;
  variant?: 'default' | 'elegant' | 'romantic' | 'highlight';
  gradient?: string;
  size?: 'sm' | 'md' | 'lg';
  collapsible?: boolean;
  compact?: boolean;
}> = ({
  title,
  subtitle,
  icon: Icon,
  children,
  className,
  contentClassName,
  headerClassName,
  action,
  variant = 'default',
  gradient,
  size = 'md',
  collapsible = false,
  compact = false,
}) => {
  const [isCollapsed, setIsCollapsed] = useState(false);

  const sizes = {
    sm: {
      card: 'rounded-lg sm:rounded-xl',
      header: 'p-2 sm:p-3',
      content: 'p-2 sm:p-3',
      icon: 'w-4 h-4 sm:w-5 sm:h-5',
      iconPadding: 'p-1.5 sm:p-2',
      title: 'text-sm sm:text-base',
      subtitle: 'text-xs sm:text-sm',
      gap: 'gap-2 sm:gap-3',
    },
    md: {
      card: 'rounded-xl sm:rounded-2xl',
      header: compact ? 'p-3 sm:p-4' : 'p-4 sm:p-5 md:p-6',
      content: compact ? 'p-3 sm:p-4' : 'p-4 sm:p-5 md:p-6',
      icon: 'w-5 h-5 sm:w-6 sm:h-6',
      iconPadding: 'p-2 sm:p-2.5',
      title: 'text-base sm:text-lg md:text-xl',
      subtitle: 'text-sm sm:text-base',
      gap: 'gap-3 sm:gap-4',
    },
    lg: {
      card: 'rounded-2xl',
      header: compact ? 'p-4 sm:p-5' : 'p-5 sm:p-6 md:p-8',
      content: compact ? 'p-4 sm:p-5' : 'p-5 sm:p-6 md:p-8',
      icon: 'w-6 h-6 sm:w-7 sm:h-7',
      iconPadding: 'p-2.5 sm:p-3',
      title: 'text-lg sm:text-xl md:text-2xl',
      subtitle: 'text-base sm:text-lg',
      gap: 'gap-4 sm:gap-5',
    },
  };

  const variants = {
    default: {
      card: 'bg-white border-gray-200 shadow-lg hover:shadow-xl',
      header: 'bg-gradient-to-r from-gray-50 to-white border-gray-200',
      headerSm: 'bg-gradient-to-r from-gray-25 to-white border-gray-100',
      iconBg: 'bg-gray-100 border border-gray-200',
      iconColor: 'text-gray-600',
    },
    elegant: {
      card: `bg-white border-amber-200 shadow-xl hover:shadow-2xl`,
      header: `bg-gradient-to-r ${gradient || 'from-amber-50 via-yellow-50 to-orange-50'} border-amber-200`,
      headerSm: `bg-gradient-to-r from-amber-25 via-yellow-25 to-orange-25 border-amber-100`,
      iconBg: `bg-gradient-to-r from-amber-400 via-yellow-400 to-amber-500 text-white shadow-md`,
      iconColor: 'text-white',
    },
    romantic: {
      card: `bg-white border-rose-200 shadow-lg hover:shadow-xl`,
      header: `bg-gradient-to-r ${gradient || 'from-rose-50 via-pink-50 to-red-50'} border-rose-200`,
      headerSm: `bg-gradient-to-r from-rose-25 via-pink-25 to-red-25 border-rose-100`,
      iconBg: `bg-gradient-to-r from-rose-500 via-pink-500 to-red-500 text-white shadow-md`,
      iconColor: 'text-white',
    },
    highlight: {
      card: `bg-white border-pink-200 shadow-lg hover:shadow-xl ring-1 ring-pink-100 hover:ring-pink-200`,
      header: `bg-gradient-to-r ${gradient || 'from-pink-500 via-rose-500 to-red-500'} border-pink-200`,
      headerSm: `bg-gradient-to-r from-pink-400 via-rose-400 to-red-400 border-pink-100`,
      iconBg: `bg-gradient-to-r from-purple-600 via-indigo-600 to-purple-700 text-white shadow-lg`,
      iconColor: 'text-white',
    },
  };

  const currentSize = sizes[size];
  const currentVariant = variants[variant];

  return (
    <div
      className={cn(
        'border overflow-hidden flex flex-col transition-all duration-300',
        currentSize.card,
        currentVariant.card,
        'max-w-full min-w-0',
        className
      )}
    >
      <div
        className={cn(
          'flex items-center justify-between border-b transition-all duration-300',
          currentSize.header,
          'gap-2',
          currentVariant.header,
          'sm:' + currentVariant.headerSm,
          'min-w-0 overflow-hidden',
          headerClassName
        )}
      >
        <div
          className={cn('flex items-center min-w-0 flex-1', 'gap-1 sm:gap-2')}
        >
          {Icon && (
            <div
              className={cn(
                'flex-shrink-0 rounded-lg transition-all duration-300',
                currentSize.iconPadding,
                currentVariant.iconBg,
                'hover:scale-110 active:scale-95'
              )}
            >
              <Icon
                className={cn(currentSize.icon, currentVariant.iconColor)}
              />
            </div>
          )}
          <div className="min-w-0 flex-1 overflow-hidden text-center">
            <h3
              className={cn(
                'font-bold leading-tight transition-all duration-300 text-center',
                currentSize.title,
                variant === 'default'
                  ? 'text-gray-800 hover:text-gray-900'
                  : 'text-gray-800',
                'break-words hyphens-auto word-break-break-word overflow-wrap-anywhere max-w-full'
              )}
            >
              {title}
            </h3>
            {subtitle && (
              <p
                className={cn(
                  'mt-0.5 opacity-80 transition-all duration-300 text-center',
                  currentSize.subtitle,
                  'text-gray-600 text-center mx-auto',
                  'break-words hyphens-auto word-break-break-word overflow-wrap-anywhere max-w-full'
                )}
              >
                {subtitle}
              </p>
            )}
          </div>
        </div>
        <div className="flex items-center gap-2 flex-shrink-0">
          {collapsible && (
            <Button
              variant="ghost"
              size="sm"
              className="md:hidden p-1 h-8 w-8 hover:bg-white/60"
              onClick={() => setIsCollapsed(!isCollapsed)}
            >
              <ChevronDown
                className={cn(
                  'w-4 h-4 transition-transform duration-200',
                  isCollapsed && 'rotate-180'
                )}
              />
            </Button>
          )}
          {action && <div className="flex-shrink-0">{action}</div>}
        </div>
      </div>
      <div
        className={cn(
          'transition-all duration-300 overflow-hidden',
          currentSize.content,
          collapsible &&
            isCollapsed &&
            'max-h-0 p-0 md:max-h-none md:p-4 md:sm:p-5 md:md:p-6',
          'min-w-0 max-w-full',
          contentClassName
        )}
      >
        {children}
      </div>
    </div>
  );
};

// 4. ColorPaletteSelector
const ColorPaletteSelector: React.FC<{
  selectedPalette: ColorPaletteName;
  onPaletteChange: (palette: ColorPaletteName) => void;
  THEME: ThemeType;
  compact?: boolean;
}> = ({ selectedPalette, onPaletteChange, THEME, compact = false }) => {
  const [isOpen, setIsOpen] = useState(false);

  return (
    <div className="relative">
      <Button
        variant="ghost"
        size="icon"
        className={cn(
          'bg-white/90 backdrop-blur-sm rounded-full border border-gray-200/80 shadow-lg hover:shadow-xl transition-all duration-300',
          'text-gray-600 hover:text-gray-800 hover:bg-white/95',
          compact
            ? 'w-8 h-8 min-h-[44px] min-w-[44px]'
            : 'w-10 h-10 min-h-[44px] min-w-[44px]',
          'touch-manipulation'
        )}
        onClick={() => setIsOpen(!isOpen)}
        aria-label="בחר ערכת צבעים"
      >
        <Palette
          className={cn(
            compact ? 'w-4 h-4' : 'w-5 h-5',
            'transition-all duration-300'
          )}
        />
      </Button>
      {isOpen && (
        <>
          <div
            className="fixed inset-0 z-40"
            onClick={() => setIsOpen(false)}
          />
          <div
            className={cn(
              'absolute top-full mt-2 right-0 z-50',
              'bg-white/95 backdrop-blur-md rounded-2xl border border-gray-200/80 shadow-xl',
              'min-w-[160px] py-2',
              'animate-in fade-in-0 zoom-in-95 duration-200'
            )}
          >
            {Object.entries(COLOR_PALETTES).map(([key, palette]) => (
              <button
                key={key}
                onClick={() => {
                  onPaletteChange(key as ColorPaletteName);
                  setIsOpen(false);
                }}
                className={cn(
                  'w-full px-4 py-3 text-right transition-all duration-200',
                  'hover:bg-gray-100/80 active:bg-gray-200/50',
                  'flex items-center gap-3 min-h-[44px]',
                  selectedPalette === key && 'bg-gray-100/60 font-semibold'
                )}
              >
                <div
                  className={cn(
                    'w-4 h-4 rounded-full flex-shrink-0',
                    key === 'feminine' &&
                      'bg-gradient-to-r from-rose-400 to-pink-500',
                    key === 'masculine' &&
                      'bg-gradient-to-r from-blue-500 to-cyan-600',
                    key === 'luxury' &&
                      'bg-gradient-to-r from-amber-400 to-yellow-500',
                    key === 'professional' &&
                      'bg-gradient-to-r from-gray-500 to-slate-600'
                  )}
                />
                <span
                  className={cn(
                    'text-gray-700 font-medium text-sm',
                    selectedPalette === key && 'text-gray-900 font-semibold'
                  )}
                >
                  {palette.name}
                </span>
                {selectedPalette === key && (
                  <CheckCircle className="w-4 h-4 text-green-600 mr-auto" />
                )}
              </button>
            ))}
          </div>
        </>
      )}
    </div>
  );
};

// --- ProfileHeader & Image Components with Full Responsive Support ---

interface ProfileCardProps {
  profile: Omit<UserProfile, 'isProfileComplete'>;
  isProfileComplete: boolean;
  images?: UserImageType[];
  questionnaire?: QuestionnaireResponse | null;
  viewMode?: 'matchmaker' | 'candidate';
  className?: string;
  candidate?: Candidate;
  allCandidates?: Candidate[];
  onCreateSuggestion?: (data: CreateSuggestionData) => Promise<void>;
  onClose?: () => void;
}

const ProfileHeader: React.FC<{
  profile: UserProfile;
  age: number;
  mainImageToDisplay: UserImageType | null;
  availability: ReturnType<typeof formatAvailabilityStatus>;
  viewMode: 'matchmaker' | 'candidate';
  onSuggestClick: () => void;
  isMobile?: boolean;
  selectedPalette: ColorPaletteName;
  onPaletteChange?: (palette: ColorPaletteName) => void;
  THEME: ThemeType;
  compact?: boolean;
}> = ({
  profile,
  age,
  mainImageToDisplay,
  availability,
  viewMode,
  onSuggestClick,
  isMobile = false,
  selectedPalette,
  onPaletteChange,
  THEME,
  compact = false,
}) => {
  const personalityHighlights = useMemo(() => {
    const highlights: ExcitementFactor[] = [];

    if (profile.profileCharacterTraits?.length > 0) {
      const trait = profile.profileCharacterTraits[0];
      const traitData = formatEnumValue(
        trait,
        characterTraitMap,
        trait,
        isMobile
      );
      highlights.push({
        icon: traitData.icon,
        text: traitData.label,
        shortText: traitData.shortLabel || traitData.label,
        gradient: THEME.colors.primary.light,
      });
    }

    if (profile.profileHobbies?.length > 0) {
      const hobby = profile.profileHobbies[0];
      const hobbyData = formatEnumValue(hobby, hobbiesMap, hobby, isMobile);
      highlights.push({
        icon: hobbyData.icon,
        text: hobbyData.label,
        shortText: hobbyData.shortLabel || hobbyData.label,
        gradient: THEME.colors.secondary.sage,
      });
    }

    if (profile.city) {
      const cityText = `גר/ה ב${profile.city}`;
      highlights.push({
        icon: MapPin,
        text: cityText,
        shortText:
          isMobile && cityText.length > 15 ? `${profile.city}` : cityText,
        gradient: THEME.colors.secondary.sky,
      });
    }

    return highlights.slice(0, 3);
  }, [
    profile.profileCharacterTraits,
    profile.profileHobbies,
    profile.city,
    isMobile,
    THEME.colors.primary.light,
    THEME.colors.secondary.sage,
    THEME.colors.secondary.sky,
  ]);

  return (
    <div className="relative overflow-hidden">
      <div
        className={cn(
          'absolute inset-0 bg-gradient-to-br',
          THEME.colors.neutral.warm
        )}
      >
        <div
          className={cn(
            'absolute bg-gradient-to-br from-rose-200/40 to-pink-200/40 rounded-full blur-xl sm:blur-2xl animate-pulse',
            compact
              ? 'top-2 right-2 w-8 h-8 sm:w-16 sm:h-16'
              : 'top-4 right-4 sm:top-10 sm:right-10 w-16 h-16 sm:w-32 sm:h-32'
          )}
        ></div>
        <div
          className={cn(
            'absolute bg-gradient-to-br from-amber-200/40 to-orange-200/40 rounded-full blur-lg sm:blur-xl animate-pulse',
            compact
              ? 'bottom-2 left-2 w-6 h-6 sm:w-12 sm:h-12'
              : 'bottom-4 left-4 sm:bottom-10 sm:left-10 w-12 h-12 sm:w-24 sm:h-24'
          )}
          style={{ animationDelay: '1s' }}
        ></div>
        <div
          className={cn(
            'absolute bg-gradient-to-br from-purple-200/30 to-pink-200/30 rounded-full blur-md sm:blur-lg animate-pulse',
            compact
              ? 'top-1/2 left-1/2 w-4 h-4 sm:w-8 sm:h-8'
              : 'top-1/2 left-1/2 w-8 h-8 sm:w-20 sm:h-20'
          )}
          style={{ animationDelay: '2s' }}
        ></div>
      </div>

      <div
        className={cn(
          'relative z-10',
          compact ? 'p-2 sm:p-3' : 'p-3 sm:p-4 md:p-6'
        )}
      >
        <div
          className={cn(
            'flex items-start',
            isMobile
              ? 'flex-col items-center text-center gap-3 sm:gap-4'
              : 'flex-row gap-4 sm:gap-6'
          )}
        >
          <div className="relative flex-shrink-0">
            <div
              className={cn(
                'relative rounded-full overflow-hidden border-2 sm:border-4 border-white shadow-lg sm:shadow-2xl ring-2 sm:ring-4 ring-rose-200/50 transition-all duration-300 hover:scale-105',
                compact
                  ? 'h-32 w-32 sm:h-36 sm:w-36 md:h-40 md:w-40'
                  : isMobile
                    ? 'h-36 w-36 sm:h-40 sm:w-40 md:h-44 md:w-44'
                    : 'h-20 w-20 sm:h-24 sm:w-24 md:h-32 md:w-32 lg:h-36 lg:w-36',
                THEME.shadows.elegant
              )}
            >
              {mainImageToDisplay?.url ? (
                <Image
                  src={getRelativeCloudinaryPath(mainImageToDisplay.url)}
                  alt={`תמונת פרופיל של ${profile.user?.firstName || 'מועמד יקר'}`}
                  fill
                  className="object-cover transition-transform duration-700 hover:scale-110"
                  sizes={compact ? '160px' : isMobile ? '176px' : '144px'}
                  priority
                />
              ) : (
                <div
                  className={cn(
                    'w-full h-full flex items-center justify-center',
                    `bg-gradient-to-br ${THEME.colors.primary.romantic}`
                  )}
                >
                  <span
                    className={cn(
                      'font-bold text-white',
                      compact
                        ? 'text-xl sm:text-2xl'
                        : 'text-3xl sm:text-4xl lg:text-6xl'
                    )}
                  >
                    {getInitials(
                      profile.user?.firstName,
                      profile.user?.lastName,
                      compact ? 1 : 2
                    )}
                  </span>
                </div>
              )}
            </div>

            <div
              className={cn(
                'absolute transition-all duration-300',
                compact ? '-bottom-1 -right-1' : '-bottom-2 -right-2'
              )}
            >
              <Badge
                className={cn(
                  'font-bold text-white border-0 transition-all duration-300 hover:scale-110',
                  compact
                    ? 'text-xs px-2 py-1'
                    : 'text-xs sm:text-sm px-2 py-1 sm:px-3 sm:py-2',
                  isMobile
                    ? availability.bgColorSm || availability.bgColor
                    : availability.bgColor,
                  false && 'animate-pulse',
                  THEME.shadows.warm
                )}
              >
                <availability.icon
                  className={cn(
                    'flex-shrink-0',
                    compact ? 'w-2 h-2 ml-1' : 'w-3 h-3 ml-1 sm:ml-1.5'
                  )}
                />
                <span className={cn('break-words')}>
                  {isMobile && compact
                    ? availability.shortText || availability.text
                    : isMobile
                      ? availability.shortText || availability.text
                      : availability.text}
                </span>
              </Badge>
            </div>
          </div>

          <div className="flex-1 min-w-0 flex flex-col justify-start items-start w-full">
            {!isMobile && onPaletteChange && (
              <div className="flex justify-end mb-2 sm:mb-3 w-full">
                <ColorPaletteSelector
                  selectedPalette={selectedPalette}
                  onPaletteChange={onPaletteChange}
                  THEME={THEME}
                  compact={compact}
                />
              </div>
            )}
            <div
              className={cn(
                'w-full overflow-hidden',
                compact ? 'mb-2 sm:mb-3' : 'mb-3 sm:mb-4',
                isMobile && 'text-center'
              )}
            >
              <h1
                className={cn(
                  'font-extrabold leading-tight transition-all duration-300',
                  compact
                    ? 'text-sm sm:text-base md:text-lg'
                    : isMobile
                      ? 'text-lg sm:text-xl md:text-2xl'
                      : 'text-xl sm:text-2xl md:text-3xl lg:text-4xl',
                  'break-words hyphens-auto word-break-break-word overflow-wrap-anywhere',
                  'text-center max-w-full overflow-hidden',
                  'px-1 sm:px-2',
                  'bg-gradient-to-r from-gray-800 via-gray-900 to-black bg-clip-text text-transparent',
                  'hover:from-rose-600 hover:via-pink-600 hover:to-purple-600'
                )}
              >
                {profile.user?.firstName ? (
                  <>
                    הסיפור של {profile.user.firstName}
                    {profile.user.lastName && ` ${profile.user.lastName}`}
                  </>
                ) : (
                  'סיפור שמחכה להתגלות'
                )}
              </h1>

              {age > 0 && (
                <div
                  className={cn(
                    'flex items-center justify-center gap-1 sm:gap-2 flex-wrap',
                    isMobile ? 'justify-center' : 'lg:justify-start',
                    'mt-2 sm:mt-3'
                  )}
                >
                  <Cake
                    className={cn(
                      'text-blue-500 flex-shrink-0',
                      compact ? 'w-3 h-3' : 'w-4 h-4 sm:w-5 sm:h-5'
                    )}
                  />
                  <span
                    className={cn(
                      'font-semibold text-gray-700',
                      compact
                        ? 'text-xs sm:text-sm'
                        : 'text-sm sm:text-base md:text-lg'
                    )}
                  >
                    גיל: {age}
                  </span>
                </div>
              )}
            </div>
            {personalityHighlights.length > 0 && (
              <div
                className={cn(
                  'w-full overflow-hidden',
                  compact ? 'mt-2 mb-2' : 'mt-3 mb-4',
                  isMobile ? 'flex justify-center' : 'flex justify-start'
                )}
              >
                <ScrollArea className="w-full max-w-full" dir="rtl">
                  <div
                    className={cn(
                      'flex gap-2 sm:gap-3 pb-2 px-1 min-w-max',
                      isMobile && 'justify-center'
                    )}
                  >
                    {personalityHighlights.map((highlight, index) => (
                      <div
                        key={index}
                        className={cn(
                          'flex items-center bg-white/80 border border-gray-200/50 text-gray-700 font-semibold backdrop-blur-sm flex-shrink-0 transition-all duration-300 hover:scale-105 hover:bg-white/90',
                          compact
                            ? 'gap-1 px-2 py-1 rounded-full text-xs'
                            : 'gap-1.5 sm:gap-2 px-2 sm:px-3 py-1.5 sm:py-2 rounded-full text-xs sm:text-sm',
                          THEME.shadows.soft
                        )}
                      >
                        <highlight.icon
                          className={cn(
                            'flex-shrink-0',
                            compact ? 'w-3 h-3' : 'w-3 h-3 sm:w-4 sm:h-4'
                          )}
                        />
                        <span className="whitespace-nowrap font-medium">
                          {isMobile && compact
                            ? highlight.shortText || highlight.text
                            : isMobile
                              ? highlight.shortText || highlight.text
                              : highlight.text}
                        </span>
                      </div>
                    ))}
                  </div>
                  <ScrollBar orientation="horizontal" />
                </ScrollArea>
              </div>
            )}
            <div
              className={cn(
                'w-full overflow-hidden',
                compact ? 'mt-2' : 'mt-4 sm:mt-6'
              )}
            >
              {isMobile ? (
                <div className="w-full max-w-full overflow-hidden px-1">
                  <ScrollArea className="w-full" dir="rtl">
                    <div
                      className={cn(
                        'flex gap-2 sm:gap-3 pb-2 px-1',
                        'justify-center min-w-max'
                      )}
                    >
                      {profile.occupation && (
                        <KeyFactCard
                          icon={Briefcase}
                          label="עיסוק"
                          value={profile.occupation}
                          color="amber"
                          compact={compact}
                        />
                      )}
                      {profile.religiousLevel && (
                        <KeyFactCard
                          icon={BookMarked}
                          label="השקפה"
                          value={
                            formatEnumValue(
                              profile.religiousLevel,
                              religiousLevelMap,
                              undefined,
                              true
                            ).shortLabel ||
                            formatEnumValue(
                              profile.religiousLevel,
                              religiousLevelMap
                            ).label
                          }
                          color="purple"
                          compact={compact}
                        />
                      )}
                    </div>
                    <ScrollBar orientation="horizontal" />
                  </ScrollArea>
                </div>
              ) : (
                <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-3 sm:gap-4">
                  {profile.city && (
                    <KeyFactCard
                      icon={MapPin}
                      label="מיקום"
                      value={profile.city}
                      color="rose"
                      compact={compact}
                    />
                  )}
                  {profile.occupation && (
                    <KeyFactCard
                      icon={Briefcase}
                      label="עיסוק"
                      value={profile.occupation}
                      color="amber"
                      compact={compact}
                    />
                  )}
                  {profile.religiousLevel && (
                    <KeyFactCard
                      icon={BookMarked}
                      label="השקפה"
                      value={
                        formatEnumValue(
                          profile.religiousLevel,
                          religiousLevelMap
                        ).label
                      }
                      color="purple"
                      compact={compact}
                    />
                  )}
                </div>
              )}
            </div>
            {viewMode === 'matchmaker' && (
              <div
                className={cn(
                  'w-full flex',
                  compact ? 'pt-3' : 'pt-4 sm:pt-6',
                  isMobile ? 'justify-center' : 'justify-end'
                )}
              >
                <Button
                  size={compact ? 'default' : 'lg'}
                  className={cn(
                    'bg-gradient-to-r from-rose-500 via-pink-500 to-rose-600 hover:from-rose-600 hover:via-pink-600 hover:to-rose-700',
                    'text-white font-bold rounded-full shadow-xl hover:shadow-2xl transition-all duration-300 transform hover:scale-105 active:scale-95',
                    compact
                      ? 'px-4 py-2 text-sm'
                      : 'px-6 sm:px-8 py-2 sm:py-3 text-sm sm:text-base',
                    'min-h-[44px]'
                  )}
                  onClick={onSuggestClick}
                >
                  <Heart
                    className={cn(
                      'flex-shrink-0',
                      compact
                        ? 'w-4 h-4 ml-1'
                        : 'w-4 h-4 sm:w-5 sm:h-5 ml-1 sm:ml-2'
                    )}
                  />
                  <span className="break-words">
                    {compact ? 'הצע התאמה' : 'הצע התאמה מושלמת'}
                  </span>
                  <ArrowRight
                    className={cn(
                      'flex-shrink-0',
                      compact
                        ? 'w-4 h-4 mr-1'
                        : 'w-4 h-4 sm:w-5 sm:h-5 mr-1 sm:mr-2'
                    )}
                  />
                </Button>
              </div>
            )}
          </div>
        </div>
        {!compact && (
          <div
            className={cn(
              'text-center w-full overflow-hidden',
              isMobile ? 'mt-3 px-2' : 'mt-6 sm:mt-8'
            )}
          >
            <div
              className={cn(
                'inline-flex items-center justify-center rounded-full text-white shadow-lg max-w-full transition-all duration-300 hover:scale-105',
                isMobile
                  ? 'gap-1.5 px-3 py-2 text-sm flex-wrap'
                  : 'gap-2 px-4 py-3 text-base',
                `bg-gradient-to-r ${THEME.colors.primary.romantic}`
              )}
            >
              <Quote
                className={cn(
                  'flex-shrink-0',
                  isMobile ? 'w-3 h-3' : 'w-4 h-4'
                )}
              />
              <p className="font-medium italic text-center break-words flex-shrink min-w-0">
                כל סיפור אהבה מתחיל בהכרות אחת מיוחדת...
              </p>
              <Quote
                className={cn(
                  'transform rotate-180 flex-shrink-0',
                  isMobile ? 'w-3 h-3' : 'w-4 h-4'
                )}
              />
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

const KeyFactCard: React.FC<{
  icon: React.ElementType;
  label: string;
  value: string;
  color: 'rose' | 'amber' | 'purple';
  compact?: boolean;
}> = ({ icon: Icon, label, value, color, compact = false }) => {
  const colorClasses = {
    rose: 'border-rose-200/50 hover:border-rose-300',
    amber: 'border-amber-200/50 hover:border-amber-300',
    purple: 'border-purple-200/50 hover:border-purple-300',
  };

  const iconColors = {
    rose: 'text-rose-500',
    amber: 'text-amber-600',
    purple: 'text-purple-600',
  };

  return (
    <div
      className={cn(
        'flex items-center bg-white/80 backdrop-blur-sm rounded-xl border shadow-sm hover:shadow-md transition-all duration-300 flex-shrink-0',
        compact
          ? 'gap-2 p-2 min-w-[100px] max-w-[120px]'
          : 'gap-2 sm:gap-3 p-2 sm:p-3 min-w-[120px] max-w-[140px] sm:min-w-[140px] sm:max-w-[160px]',
        colorClasses[color],
        'max-w-[calc((100vw-4rem)/3)]'
      )}
    >
      <Icon
        className={cn(
          'flex-shrink-0',
          compact ? 'w-4 h-4' : 'w-4 h-4 sm:w-5 sm:h-5',
          iconColors[color]
        )}
      />
      <div className="min-w-0 flex-1 overflow-hidden">
        <p
          className={cn(
            'font-medium text-gray-500 leading-tight',
            compact ? 'text-xs' : 'text-xs sm:text-sm'
          )}
        >
          {label}
        </p>
        <p
          className={cn(
            'font-semibold text-gray-800 break-words overflow-wrap-anywhere word-break-break-word leading-tight',
            compact ? 'text-xs' : 'text-xs sm:text-sm'
          )}
        >
          {value}
        </p>
      </div>
    </div>
  );
};

const MobileImageGallery: React.FC<{
  orderedImages: UserImageType[];
  profile: UserProfile;
  onImageClick: (image: UserImageType) => void;
  THEME: ThemeType;
  compact?: boolean;
}> = ({ orderedImages, profile, onImageClick, THEME, compact = false }) => {
  if (orderedImages.length === 0) return null;

  return (
    <div
      className={cn(
        'overflow-hidden',
        compact ? 'px-2 pt-2 pb-2' : 'px-3 sm:px-4 pt-3 sm:pt-4 pb-2 sm:pb-3',
        `bg-gradient-to-r ${THEME.colors.neutral.warm}`
      )}
    >
      <div
        className={cn(
          'text-center overflow-hidden',
          compact ? 'mb-2' : 'mb-3 sm:mb-4'
        )}
      >
        <h3
          className={cn(
            'font-bold text-gray-800 flex items-center justify-center gap-1.5 sm:gap-2',
            compact ? 'text-sm mb-1' : 'text-base sm:text-lg mb-1 sm:mb-2'
          )}
        >
          <Camera
            className={cn(
              'text-rose-500 flex-shrink-0',
              compact ? 'w-4 h-4' : 'w-4 h-4 sm:w-5 sm:h-5'
            )}
          />
          <span className="break-words min-w-0">
            הגלריה של {profile.user?.firstName || 'המועמד'}
          </span>
        </h3>
        <p
          className={cn(
            'text-gray-600',
            compact ? 'text-xs' : 'text-xs sm:text-sm'
          )}
        >
          לחץ על תמונה להגדלה
        </p>
      </div>
      <ScrollArea dir="rtl" className="w-full overflow-hidden">
        <div
          className={cn(
            'flex pb-2 sm:pb-3',
            compact ? 'gap-2' : 'gap-2 sm:gap-3 md:gap-4',
            'justify-center min-w-full'
          )}
        >
          {orderedImages.map((image, idx) => (
            <div
              key={image.id}
              className={cn(
                'relative flex-shrink-0 rounded-xl sm:rounded-2xl overflow-hidden cursor-pointer group transition-all duration-300 hover:scale-105 active:scale-95',
                orderedImages.length <= 3
                  ? compact
                    ? 'w-20 h-24 border-2'
                    : 'w-24 h-32 sm:w-28 sm:h-36 border-2 sm:border-3'
                  : compact
                    ? 'w-16 h-20 border-2'
                    : 'w-20 h-26 sm:w-22 sm:h-30 border-2 sm:border-3',
                'border-white shadow-md hover:shadow-lg sm:shadow-lg sm:hover:shadow-xl',
                'max-w-[calc((100vw-3rem)/5)]'
              )}
              onClick={() => onImageClick(image)}
            >
              <Image
                src={getRelativeCloudinaryPath(image.url)}
                alt={`תמונה מדהימה ${idx + 1}`}
                fill
                className="object-cover transition-transform duration-500 group-hover:scale-110"
                sizes={
                  orderedImages.length <= 3
                    ? compact
                      ? '80px'
                      : '112px'
                    : compact
                      ? '64px'
                      : '88px'
                }
              />
              <div className="absolute inset-0 bg-gradient-to-t from-black/60 via-transparent to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
              {image.isMain && (
                <Badge
                  className={cn(
                    'absolute font-bold',
                    compact
                      ? 'top-0.5 right-0.5 text-xs px-1 py-0.5 gap-0.5'
                      : 'top-1 right-1 text-xs px-1.5 py-0.5 gap-1',
                    'bg-gradient-to-r from-yellow-400 to-amber-500 text-black shadow-sm',
                    THEME.shadows.warm
                  )}
                >
                  <Star
                    className={cn(
                      'fill-current',
                      compact ? 'w-2 h-2' : 'w-2 h-2 sm:w-2.5 sm:h-2.5'
                    )}
                  />
                  {!compact && <span>ראשי</span>}
                </Badge>
              )}
            </div>
          ))}
        </div>
        <ScrollBar orientation="horizontal" className="mt-1" />
      </ScrollArea>
    </div>
  );
};

const handleOpenImageDialog = (
  image: UserImageType,
  setSelectedImageForDialog: (img: UserImageType | null) => void
) => {
  if (image.url) {
    setSelectedImageForDialog(image);
  }
};

const handleCloseImageDialog = (
  setSelectedImageForDialog: (img: UserImageType | null) => void
) => {
  setSelectedImageForDialog(null);
};

const handleDialogNav = (
  direction: 'next' | 'prev',
  currentDialogImageIndex: number,
  orderedImages: UserImageType[],
  setSelectedImageForDialog: (img: UserImageType) => void
) => {
  if (currentDialogImageIndex === -1 || orderedImages.length <= 1) return;

  const newIndex =
    direction === 'next'
      ? (currentDialogImageIndex + 1) % orderedImages.length
      : (currentDialogImageIndex - 1 + orderedImages.length) %
        orderedImages.length;

  setSelectedImageForDialog(orderedImages[newIndex]);
};

const ImageDialogComponent: React.FC<{
  selectedImageForDialog: UserImageType | null;
  currentDialogImageIndex: number;
  orderedImages: UserImageType[];
  onClose: () => void;
  onNavigate: (direction: 'next' | 'prev') => void;
  onImageSelect: (image: UserImageType) => void;
}> = ({
  selectedImageForDialog,
  currentDialogImageIndex,
  orderedImages,
  onClose,
  onNavigate,
  onImageSelect,
}) => {
  if (!selectedImageForDialog) return null;

  return (
    <Dialog
      open={!!selectedImageForDialog}
      onOpenChange={(isOpen) => !isOpen && onClose()}
    >
      <DialogContent
        className={cn(
          'max-w-5xl w-[95vw] h-[90vh] p-0 border-none rounded-2xl flex flex-col',
          'bg-black/95 backdrop-blur-md'
        )}
        dir="rtl"
      >
        <DialogHeader
          className={cn(
            'p-3 sm:p-4 text-white flex-row justify-between items-center border-b border-gray-700/50',
            'bg-black/80 backdrop-blur-sm'
          )}
        >
          <DialogTitle
            className={cn(
              'font-bold flex items-center gap-2',
              'text-base sm:text-lg'
            )}
          >
            <Camera className="w-4 h-4 sm:w-5 sm:h-5 flex-shrink-0" />
            <span className="break-words">
              תמונה {currentDialogImageIndex + 1} מתוך {orderedImages.length}
            </span>
          </DialogTitle>
          <DialogClose asChild>
            <Button
              variant="ghost"
              size="icon"
              className={cn(
                'text-gray-300 hover:text-white hover:bg-white/10 rounded-full transition-all',
                'w-8 h-8 sm:w-10 sm:h-10 min-h-[44px] min-w-[44px]'
              )}
            >
              <X className="w-4 h-4 sm:w-5 sm:h-5" />
            </Button>
          </DialogClose>
        </DialogHeader>

        <div className="relative flex-1 w-full min-h-0 overflow-hidden">
          <Image
            key={selectedImageForDialog.id}
            src={getRelativeCloudinaryPath(selectedImageForDialog.url)}
            alt={`תמונה מוגדלת ${currentDialogImageIndex + 1}`}
            fill
            className="object-contain"
            sizes="90vw"
            priority
          />

          {orderedImages.length > 1 && (
            <>
              <Button
                variant="ghost"
                className={cn(
                  'absolute right-4 top-1/2 -translate-y-1/2 rounded-full',
                  'bg-black/50 hover:bg-black/70 text-white border border-white/20',
                  'backdrop-blur-sm transition-all hover:scale-110 active:scale-95',
                  'w-12 h-12 sm:w-14 sm:h-14 min-h-[44px] min-w-[44px]'
                )}
                onClick={() => onNavigate('prev')}
              >
                <ChevronRight className="h-5 w-5 sm:h-6 sm:w-6" />
              </Button>
              <Button
                variant="ghost"
                className={cn(
                  'absolute left-4 top-1/2 -translate-y-1/2 rounded-full',
                  'bg-black/50 hover:bg-black/70 text-white border border-white/20',
                  'backdrop-blur-sm transition-all hover:scale-110 active:scale-95',
                  'w-12 h-12 sm:w-14 sm:h-14 min-h-[44px] min-w-[44px]'
                )}
                onClick={() => onNavigate('next')}
              >
                <ChevronLeft className="h-5 w-5 sm:h-6 sm:w-6" />
              </Button>
            </>
          )}
        </div>

        {orderedImages.length > 1 && (
          <DialogFooter className="border-t border-gray-700/50 bg-black/80 backdrop-blur-sm p-0">
            <ScrollArea dir="rtl" className="w-full">
              <div className="flex gap-2 p-3 justify-center min-w-max">
                {orderedImages.map((img) => (
                  <div
                    key={img.id}
                    className={cn(
                      'relative flex-shrink-0 w-12 h-12 sm:w-16 sm:h-16 rounded-lg overflow-hidden cursor-pointer transition-all hover:scale-105',
                      'border-2',
                      img.id === selectedImageForDialog.id
                        ? 'border-rose-400 ring-2 ring-rose-400/50'
                        : 'border-white/20 opacity-60 hover:opacity-100 hover:border-white/40'
                    )}
                    onClick={() => onImageSelect(img)}
                  >
                    <Image
                      src={getRelativeCloudinaryPath(img.url)}
                      alt="תמונה קטנה"
                      fill
                      className="object-cover"
                      sizes="64px"
                    />
                  </div>
                ))}
              </div>
              <ScrollBar orientation="horizontal" />
            </ScrollArea>
          </DialogFooter>
        )}
      </DialogContent>
    </Dialog>
  );
};

const MobileTabNavigation: React.FC<{
  activeTab: string;
  tabItems: {
    value: string;
    label: string;
    shortLabel?: string;
    icon: React.ElementType;
    gradient: string;
  }[];
  onTabChange: (newTab: string) => void;
  THEME: ThemeType;
}> = ({ activeTab, tabItems, onTabChange }) => {
  const currentIndex = useMemo(
    () => tabItems.findIndex((tab) => tab.value === activeTab),
    [tabItems, activeTab]
  );

  const prevTab = useMemo(
    () => (currentIndex > 0 ? tabItems[currentIndex - 1] : null),
    [tabItems, currentIndex]
  );
  const nextTab = useMemo(
    () =>
      currentIndex < tabItems.length - 1 ? tabItems[currentIndex + 1] : null,
    [tabItems, currentIndex]
  );

  if (!prevTab && !nextTab) {
    return null;
  }

  const baseButtonClasses =
    'flex-1 flex flex-col p-4 rounded-2xl shadow-md hover:shadow-lg transition-all duration-300 transform hover:-translate-y-1 focus:outline-none focus-visible:ring-2 focus-visible:ring-offset-2';

  return (
    <div className="mt-8 pt-6 border-t border-gray-200/80 flex items-stretch justify-between gap-3 sm:gap-4 w-full">
      {prevTab ? (
        <button
          className={cn(
            baseButtonClasses,
            'items-start text-right',
            'bg-white border border-gray-200/80 hover:border-gray-300',
            'focus-visible:ring-gray-400'
          )}
          onClick={() => onTabChange(prevTab.value)}
        >
          <div className="flex items-center gap-2">
            <ChevronRight className="w-6 h-6 text-gray-400 flex-shrink-0" />
            <p className="text-xs font-medium text-gray-500">הקודם</p>
          </div>
          <div className="flex items-center gap-2 mt-1.5">
            <prevTab.icon className="w-5 h-5 text-gray-600 flex-shrink-0" />
            <span className="text-base font-bold text-gray-800 text-right break-words min-w-0">
              {prevTab.label}
            </span>
          </div>
        </button>
      ) : (
        <div className="flex-1" />
      )}
      {nextTab ? (
        <button
          className={cn(
            baseButtonClasses,
            'items-end text-left',
            'bg-rose-50 border border-rose-200/80 hover:border-rose-300',
            'focus-visible:ring-rose-500'
          )}
          onClick={() => onTabChange(nextTab.value)}
        >
          <div className="flex items-center gap-2">
            <p className="text-xs font-medium text-rose-700">הבא</p>
            <ChevronLeft className="w-6 h-6 text-rose-500 flex-shrink-0" />
          </div>
          <div className="flex items-center justify-end gap-2 mt-1.5">
            <span className="text-base font-bold text-rose-900 text-left break-words min-w-0">
              {nextTab.label}
            </span>
            <nextTab.icon className="w-5 h-5 text-rose-600 flex-shrink-0" />
          </div>
        </button>
      ) : (
        <div className="flex-1" />
      )}
    </div>
  );
};

// Main ProfileCard Component
const ProfileCard: React.FC<ProfileCardProps> = ({
  profile: profileData,
  isProfileComplete,
  candidate,
  images = [],
  questionnaire,
  viewMode = 'candidate',
  className,
  allCandidates = [],
  onCreateSuggestion,
  onClose,
}) => {
  const profile = useMemo(
    () => ({
      ...profileData,
      isProfileComplete,
    }),
    [profileData, isProfileComplete]
  );

  const [isClient, setIsClient] = useState(false);
  const [isDesktop, setIsDesktop] = useState(true);
  const [selectedImageForDialog, setSelectedImageForDialog] =
    useState<UserImageType | null>(null);
  const [activeTab, setActiveTab] = useState('essence');
  const [isSuggestDialogOpen, setIsSuggestDialogOpen] = useState(false);
  const [mobileViewLayout, setMobileViewLayout] = useState<
    'focus' | 'detailed'
  >('focus');
  const [selectedPalette, setSelectedPalette] = useState<ColorPaletteName>(
    () => {
      return profile.gender === 'MALE' ? 'masculine' : 'feminine';
    }
  );

  const activeTabRef = useRef(activeTab);

  useEffect(() => {
    activeTabRef.current = activeTab;
  }, [activeTab]);

  const handleTabChange = (newTab: string) => {
    if (activeTabRef.current === newTab) return;
    setActiveTab(newTab);
  };

  const THEME = useMemo(
    () => COLOR_PALETTES[selectedPalette],
    [selectedPalette]
  );

  const WORLDS: {
    [key: string]: {
      label: string;
      shortLabel?: string;
      icon: React.ElementType;
      gradient: string;
      description: string;
      accentColor: string;
    };
  } = useMemo(
    () => ({
      values: {
        label: 'הערכים והעקרונות שמנחים אותי',
        shortLabel: 'הערכים',
        icon: BookMarked,
        gradient: THEME.colors.primary.accent,
        description: 'מה חשוב לי בחיים ומה מוביל אותי',
        accentColor: 'blue',
      },
      personality: {
        label: 'האישיות והתכונות הייחודיות שלי',
        shortLabel: 'האישיות',
        icon: Sparkles,
        gradient: THEME.colors.primary.light,
        description: 'איך אני באמת ומה מאפיין אותי',
        accentColor: 'purple',
      },
      relationship: {
        label: 'החזון שלי לזוגיות ומשפחה',
        shortLabel: 'הזוגיות',
        icon: Heart,
        gradient: THEME.colors.primary.main,
        description: 'איך אני רואה את עתיד הזוגיות שלי',
        accentColor: 'rose',
      },
      partner: {
        label: 'מה אני מחפש/ת בבן/בת הזוג',
        shortLabel: 'החיפוש',
        icon: Users,
        gradient: THEME.colors.secondary.sky,
        description: 'התכונות והערכים שחשובים לי בפרטנר',
        accentColor: 'blue',
      },
      religion: {
        label: 'הדת והרוחניות בחיי',
        shortLabel: 'הדת',
        icon: Star,
        gradient: THEME.colors.secondary.peach,
        description: 'המקום של האמונה והמסורת בעולמי',
        accentColor: 'amber',
      },
      general: {
        label: 'עוד דברים חשובים שכדאי לדעת עליי',
        shortLabel: 'עוד דברים',
        icon: FileText,
        gradient: THEME.colors.secondary.lavender,
        description: 'פרטים נוספים שמשלימים את התמונה',
        accentColor: 'purple',
      },
    }),
    [
      THEME.colors.primary.accent,
      THEME.colors.primary.light,
      THEME.colors.primary.main,
      THEME.colors.secondary.sky,
      THEME.colors.secondary.peach,
      THEME.colors.secondary.lavender,
    ]
  );

  const hasAnyPreferences = useMemo(() => {
    return (
      (profile.preferredMaritalStatuses &&
        profile.preferredMaritalStatuses.length > 0) ||
      (profile.preferredReligiousLevels &&
        profile.preferredReligiousLevels.length > 0) ||
      (profile.preferredReligiousJourneys &&
        profile.preferredReligiousJourneys.length > 0) ||
      (profile.preferredEducation && profile.preferredEducation.length > 0) ||
      (profile.preferredOccupations &&
        profile.preferredOccupations.length > 0) ||
      (profile.preferredLocations && profile.preferredLocations.length > 0) ||
      (profile.preferredCharacterTraits &&
        profile.preferredCharacterTraits.length > 0) ||
      (profile.preferredHobbies && profile.preferredHobbies.length > 0)
    );
  }, [profile]);

  const orderedImages = useMemo(() => {
    const validImages = (images || []).filter((img) => img.url);
    const mainImg = validImages.find((img) => img.isMain);
    const otherImages = validImages.filter((img) => !img.isMain);
    return mainImg ? [mainImg, ...otherImages] : validImages;
  }, [images]);

  const mainImageToDisplay = useMemo(
    () => (orderedImages.length > 0 ? orderedImages[0] : null),
    [orderedImages]
  );
  const age = useMemo(
    () => calculateAge(profile.birthDate),
    [profile.birthDate]
  );
  const availability = useMemo(
    () => formatAvailabilityStatus(profile.availabilityStatus, THEME),
    [profile.availabilityStatus, THEME]
  );

  // Helper function to check if an answer has actual content
  const isRawValueAnswered = (value: FormattedAnswer['rawValue']): boolean => {
    if (value === null || value === undefined) return false;
    if (typeof value === 'string' && value.trim() === '') return false;
    if (Array.isArray(value) && value.length === 0) return false;
    if (
      typeof value === 'object' &&
      !Array.isArray(value) &&
      Object.keys(value).length === 0
    )
      return false;
    return true;
  };

  const getVisibleAnswers = useCallback(
    (world: keyof NonNullable<QuestionnaireResponse['formattedAnswers']>) => {
      if (!questionnaire?.formattedAnswers?.[world]) return [];
      return questionnaire.formattedAnswers[world].filter((a) => {
        const hasContent = isRawValueAnswered(a.rawValue);
        if (!hasContent) return false;
        if (viewMode === 'matchmaker') return true;
        return a.isVisible !== false;
      });
    },
    [questionnaire, viewMode]
  );

  const personalityAnswers = useMemo(
    () => getVisibleAnswers('personality'),
    [getVisibleAnswers]
  );
  const valuesAnswers = useMemo(
    () => getVisibleAnswers('values'),
    [getVisibleAnswers]
  );
  const relationshipAnswers = useMemo(
    () => getVisibleAnswers('relationship'),
    [getVisibleAnswers]
  );
  const partnerAnswers = useMemo(
    () => getVisibleAnswers('partner'),
    [getVisibleAnswers]
  );
  const religionAnswers = useMemo(
    () => getVisibleAnswers('religion'),
    [getVisibleAnswers]
  );

  const hasDisplayableQuestionnaireAnswers = useMemo(
    () =>
      [
        ...personalityAnswers,
        ...valuesAnswers,
        ...relationshipAnswers,
        ...partnerAnswers,
        ...religionAnswers,
      ].length > 0,
    [
      personalityAnswers,
      valuesAnswers,
      relationshipAnswers,
      partnerAnswers,
      religionAnswers,
    ]
  );

  const currentDialogImageIndex = useMemo(
    () =>
      selectedImageForDialog
        ? orderedImages.findIndex((img) => img.id === selectedImageForDialog.id)
        : -1,
    [selectedImageForDialog, orderedImages]
  );

  const handleOpenImageDialog = (image: UserImageType) =>
    image.url && setSelectedImageForDialog(image);
  const handleCloseImageDialog = () => setSelectedImageForDialog(null);

  const handleDialogNav = (direction: 'next' | 'prev') => {
    if (currentDialogImageIndex === -1 || orderedImages.length <= 1) return;
    const newIndex =
      (currentDialogImageIndex +
        (direction === 'next' ? 1 : -1) +
        orderedImages.length) %
      orderedImages.length;
    setSelectedImageForDialog(orderedImages[newIndex]);
  };

  const handleCreateSuggestion = async (data: CreateSuggestionData) => {
    if (onCreateSuggestion) {
      await onCreateSuggestion(data);
    }
    setIsSuggestDialogOpen(false);
  };

  const handleClose = () => {
    if (onClose) {
      onClose();
    }
  };

  const tabItems = useMemo(
    () =>
      [
        {
          value: 'essence',
          label: 'המהות שלי',
          shortLabel: 'מהות',
          icon: Sparkles,
          gradient: THEME.colors.primary.light,
          hasContent:
            !!profile.profileHeadline ||
            !!profile.about ||
            personalityAnswers.length > 0 ||
            (profile.profileCharacterTraits &&
              profile.profileCharacterTraits.length > 0) ||
            (profile.profileHobbies && profile.profileHobbies.length > 0),
        },
        {
          value: 'journey',
          label: 'הדרך שלי',
          shortLabel: 'הדרך',
          icon: Compass,
          gradient: THEME.colors.primary.accent,
          hasContent:
            valuesAnswers.length > 0 ||
            !!profile.educationLevel ||
            !!profile.occupation ||
            !!profile.serviceType ||
            !!profile.parentStatus,
        },
        {
          value: 'spirit',
          label: 'עולם הרוח',
          shortLabel: 'רוחניות',
          icon: Star,
          gradient: THEME.colors.secondary.peach,
          hasContent:
            religionAnswers.length > 0 ||
            !!profile.religiousLevel ||
            !!profile.religiousJourney ||
            !!profile.influentialRabbi,
        },
        {
          value: 'vision',
          label: 'חזון לזוגיות',
          shortLabel: 'חזון',
          icon: Heart,
          gradient: THEME.colors.primary.main,
          hasContent:
            relationshipAnswers.length > 0 ||
            !!profile.matchingNotes ||
            !!profile.inspiringCoupleStory,
        },
        {
          value: 'connection',
          label: 'החיבור שאחפש',
          shortLabel: 'חיבור',
          icon: Target,
          gradient: THEME.colors.secondary.sky,
          hasContent: hasAnyPreferences || partnerAnswers.length > 0,
        },
        viewMode === 'matchmaker' && {
          value: 'professional',
          label: 'מידע לשדכן',
          shortLabel: 'לשדכן',
          icon: Lock,
          gradient: THEME.colors.secondary.lavender,
          hasContent: true,
        },
      ].filter(Boolean) as {
        value: string;
        label: string;
        shortLabel?: string;
        icon: React.ElementType;
        gradient: string;
        hasContent: boolean;
      }[],
    [
      THEME,
      profile,
      hasAnyPreferences,
      viewMode,
      personalityAnswers,
      valuesAnswers,
      relationshipAnswers,
      partnerAnswers,
      religionAnswers,
    ]
  );

  const renderPreferenceBadges = (
    title: string,
    icon: React.ElementType,
    values: string[] | undefined,
    translationMap: {
      [key: string]: {
        label: string;
        shortLabel?: string;
        icon: React.ElementType;
        color: string;
      };
    },
    gradientClass: string = THEME.colors.secondary.sky,
    compact: boolean = false
  ) => {
    if (!values || values.length === 0) {
      return null;
    }

    const IconComponent = icon;
    return (
      <div className="space-y-3 sm:space-y-4 min-w-0 max-w-full overflow-hidden">
        <div className="flex items-center gap-2 sm:gap-3 min-w-0">
          <div
            className={cn(
              'flex-shrink-0 rounded-lg',
              compact ? 'p-1.5' : 'p-1.5 sm:p-2',
              `bg-gradient-to-r ${gradientClass}`
            )}
          >
            <IconComponent
              className={cn(
                'text-white',
                compact ? 'w-4 h-4' : 'w-4 h-4 sm:w-5 sm:h-5'
              )}
            />
          </div>
          <h4
            className={cn(
              'font-bold text-gray-800 break-words hyphens-auto word-break-break-word min-w-0 flex-1 overflow-wrap-anywhere',
              compact ? 'text-sm' : 'text-sm sm:text-base'
            )}
          >
            {title}
          </h4>
        </div>
        <div className="flex flex-wrap gap-2 sm:gap-3 min-w-0 max-w-full">
          {values.map((val) => {
            const itemData = translationMap[val] || {
              label: val,
              shortLabel: val.length > 12 ? val.substring(0, 12) + '...' : val,
              icon: Sparkles,
              color: 'text-gray-600',
            };
            return (
              <Badge
                key={val}
                variant="outline"
                className={cn(
                  'flex items-center font-semibold border-2 min-w-0 max-w-full transition-all hover:scale-105 active:scale-95',
                  compact
                    ? 'gap-1 px-2 py-1 text-xs'
                    : 'gap-1 sm:gap-2 px-2 py-1 sm:px-3 sm:py-2 text-xs sm:text-sm',
                  'bg-white hover:bg-gray-50 border-gray-200 hover:border-rose-300',
                  THEME.shadows.soft,
                  'break-words hyphens-auto word-break-break-word overflow-wrap-anywhere'
                )}
              >
                <itemData.icon
                  className={cn(
                    'flex-shrink-0',
                    compact ? 'w-3 h-3' : 'w-3 h-3 sm:w-4 sm:h-4',
                    itemData.color
                  )}
                />
                <span className="break-words overflow-hidden min-w-0">
                  {compact && itemData.shortLabel
                    ? itemData.shortLabel
                    : itemData.label}
                </span>
              </Badge>
            );
          })}
        </div>
      </div>
    );
  };

  const QuestionnaireItem: React.FC<{
    answer: FormattedAnswer;
    worldColor?: string;
    worldGradient?: string;
    compact?: boolean;
  }> = ({ answer, worldColor = 'rose', worldGradient, compact = false }) => {
    return (
      <div
        className={cn(
          'rounded-xl border transition-all duration-300 hover:shadow-lg overflow-hidden',
          compact ? 'p-3 sm:p-4' : 'p-4 sm:p-5',
          'bg-gradient-to-br from-white to-gray-50/30 max-w-full min-w-0',
          `border-${worldColor}-200 hover:border-${worldColor}-300`
        )}
      >
        <div className="flex items-start gap-3 sm:gap-4 min-w-0">
          <div
            className={cn(
              'flex-shrink-0 rounded-lg text-white shadow-md',
              compact ? 'p-2' : 'p-2 sm:p-3',
              worldGradient
                ? `bg-gradient-to-r ${worldGradient}`
                : `bg-gradient-to-r from-${worldColor}-400 to-${worldColor}-500`
            )}
          >
            <Quote
              className={cn(compact ? 'w-4 h-4' : 'w-4 h-4 sm:w-5 sm:h-5')}
            />
          </div>
          <div className="flex-1 min-w-0 overflow-hidden">
            <h4
              className={cn(
                'font-bold mb-2 sm:mb-3 text-gray-800 leading-relaxed',
                'flex items-center justify-between gap-2',
                compact ? 'text-sm' : 'text-sm sm:text-base'
              )}
            >
              <span className="flex-1 break-words hyphens-auto word-break-break-word overflow-wrap-anywhere">
                {answer.question}
              </span>
              {answer.isVisible === false && (
                <TooltipProvider>
                  <Tooltip>
                    <TooltipTrigger asChild>
                      <div className="flex-shrink-0 flex items-center gap-1 bg-amber-100 text-amber-800 px-2 py-1 rounded-full text-xs cursor-default">
                        <Lock className="w-3 h-3" />
                        <span>חסוי</span>
                      </div>
                    </TooltipTrigger>
                    <TooltipContent side="top">
                      <p>תשובה זו חסויה ומוצגת לשדכנים בלבד.</p>
                    </TooltipContent>
                  </Tooltip>
                </TooltipProvider>
              )}
            </h4>
            <div
              className={cn(
                'rounded-lg border-r-4 bg-white/60 overflow-hidden',
                compact ? 'p-3' : 'p-3 sm:p-4',
                `border-${worldColor}-400`
              )}
            >
              {answer.questionType === 'budgetAllocation' &&
              typeof answer.rawValue === 'object' &&
              answer.rawValue &&
              !Array.isArray(answer.rawValue) ? (
                <BudgetDisplay
                  data={answer.rawValue as Record<string, number>}
                />
              ) : (
                <p
                  className={cn(
                    'text-gray-700 leading-relaxed italic break-words hyphens-auto word-break-break-word overflow-wrap-anywhere',
                    compact ? 'text-sm' : 'text-sm sm:text-base'
                  )}
                >
                  <Quote className="w-3 h-3 sm:w-4 sm:h-4 inline ml-1 text-gray-400 flex-shrink-0" />
                  {answer.displayText}
                  <Quote className="w-3 h-3 sm:w-4 sm:h-4 inline mr-1 text-gray-400 transform rotate-180 flex-shrink-0" />
                </p>
              )}
            </div>
          </div>
        </div>
      </div>
    );
  };

  useEffect(() => {
    setIsClient(true);
    const checkScreenSize = () => setIsDesktop(window.innerWidth >= 1024);
    checkScreenSize();
    window.addEventListener('resize', checkScreenSize);

    return () => {
      window.removeEventListener('resize', checkScreenSize);
    };
  }, []);

  const MainContentTabs = () => {
    const activeTabConfig = tabItems.find((tab) => tab.value === activeTab);

    // --- START: Refactored Logic for Content Slicing ---
    const getTabContent = (
      answers: FormattedAnswer[]
    ): {
      hookAnswer: FormattedAnswer | undefined;
      deeperAnswers: FormattedAnswer[];
    } => {
      if (!answers || answers.length === 0) {
        return { hookAnswer: undefined, deeperAnswers: [] };
      }
      return {
        hookAnswer: answers[0],
        deeperAnswers: answers.slice(1),
      };
    };

    const personalityContent = getTabContent(personalityAnswers);
    const valuesContent = getTabContent(valuesAnswers);
    const religionContent = getTabContent(religionAnswers);
    const relationshipContent = getTabContent(relationshipAnswers);
    const partnerContent = getTabContent(partnerAnswers);
    // --- END: Refactored Logic for Content Slicing ---

    return (
      <Tabs
        value={activeTab}
        onValueChange={handleTabChange}
        className="w-full flex flex-col flex-1 min-h-0 max-w-full overflow-hidden"
      >
        <div
          className={cn(
            'bg-white/95 backdrop-blur-md rounded-2xl border border-gray-200/50 overflow-hidden sticky top-0 z-20',
            'mb-3 sm:mb-4 md:mb-6 p-1 sm:p-2',
            THEME.shadows.elegant
          )}
        >
          <ScrollArea className="w-full max-w-full overflow-hidden" dir="rtl">
            <div className="flex gap-0.5 sm:gap-1 justify-center min-w-max px-2 sm:px-4">
              {tabItems.map((tab) => (
                <button
                  key={tab.value}
                  onClick={() => handleTabChange(tab.value)}
                  className={cn(
                    'flex flex-col items-center gap-1 rounded-xl flex-shrink-0 transition-all duration-300 border border-transparent',
                    'text-gray-600 hover:text-gray-800 hover:bg-rose-50',
                    'min-w-[50px] min-h-[44px] touch-manipulation',
                    'sm:min-w-[60px] md:min-w-[80px]',
                    'px-1.5 py-1.5 sm:px-2 sm:py-2 md:px-3 md:py-2',
                    'text-xs sm:text-sm font-semibold',
                    !tab.hasContent && 'opacity-50 cursor-not-allowed',
                    activeTab === tab.value &&
                      cn(
                        'font-bold text-white shadow-lg border-white/20',
                        `bg-gradient-to-r ${tab.gradient}`
                      )
                  )}
                  disabled={!tab.hasContent}
                >
                  <tab.icon className="w-3 h-3 sm:w-4 sm:h-4 flex-shrink-0" />
                  <span className="leading-tight text-center break-words hyphens-auto word-break-break-word max-w-full">
                    {typeof window !== 'undefined' &&
                    window.innerWidth < 640 &&
                    tab.shortLabel
                      ? tab.shortLabel
                      : tab.label}
                  </span>
                </button>
              ))}
            </div>
            <ScrollBar orientation="horizontal" className="mt-1" />
          </ScrollArea>
        </div>
        <ScrollArea
          id="profile-card-tabs-content"
          className="flex-1 overflow-auto h-full max-w-full"
        >
          <div className="space-y-3 sm:space-y-4 md:space-y-6 p-1 sm:p-2 min-w-0 max-w-full">
            {!(activeTabConfig && activeTabConfig.hasContent) && (
              <EmptyState
                icon={Telescope}
                title="אין כאן מה להציג כרגע"
                description="נראה שהמועמד/ת עדיין לא מילא/ה את החלק הזה בפרופיל. זו הזדמנות נהדרת לגלות יחד!"
                variant="discovery"
              />
            )}

            {/* Essence Tab - REFACTORED */}
            <TabsContent value="essence" className="mt-0 max-w-full min-w-0">
              <div className="space-y-6 sm:space-y-8 max-w-full min-w-0">
                {personalityContent.hookAnswer && (
                  <QuestionnaireItem
                    answer={personalityContent.hookAnswer}
                    worldColor={WORLDS.personality.accentColor}
                    worldGradient={WORLDS.personality.gradient}
                  />
                )}
                {profile.profileHeadline && (
                  <SectionCard
                    title="משפט פתיחה"
                    icon={Quote}
                    variant="highlight"
                    gradient={THEME.colors.primary.main}
                  >
                    <p className="text-center text-lg italic font-semibold text-gray-700">
                      &quot;{profile.profileHeadline}&quot;
                    </p>
                  </SectionCard>
                )}
                {profile.about && (
                  <SectionCard
                    title="מי אני, בקצרה"
                    subtitle={`הסיפור האישי של ${profile.user?.firstName || 'המועמד/ת'}`}
                    icon={Heart}
                    variant="romantic"
                    gradient={THEME.colors.primary.main}
                  >
                    <div
                      className={cn(
                        'relative p-4 sm:p-6 rounded-2xl border border-rose-200/50 max-w-full min-w-0 overflow-hidden',
                        `bg-gradient-to-r ${THEME.colors.neutral.warm}`,
                        THEME.shadows.soft
                      )}
                    >
                      <Quote className="absolute top-3 right-3 w-6 h-6 sm:w-8 sm:h-8 text-rose-300" />
                      <p className="text-base sm:text-lg text-gray-800 leading-relaxed italic font-medium text-center lg:text-right break-words hyphens-auto word-break-break-word overflow-wrap-anywhere">
                        {profile.about}
                      </p>
                      <Quote className="absolute bottom-3 left-3 w-6 h-6 sm:w-8 sm:h-8 text-rose-300 transform rotate-180" />
                    </div>
                  </SectionCard>
                )}
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4 sm:gap-6 max-w-full min-w-0">
                  {profile.profileCharacterTraits &&
                    profile.profileCharacterTraits.length > 0 && (
                      <SectionCard
                        title="מה שמייחד אותי"
                        subtitle="תכונות האופי שלי"
                        icon={Sparkles}
                        variant="elegant"
                        gradient={THEME.colors.primary.light}
                      >
                        <div className="flex flex-wrap gap-2 sm:gap-3">
                          {profile.profileCharacterTraits.map((trait) => {
                            const traitData = formatEnumValue(
                              trait,
                              characterTraitMap,
                              trait
                            );
                            return (
                              <Badge
                                key={trait}
                                className={cn(
                                  'flex items-center gap-1 sm:gap-2 px-3 sm:px-4 py-1.5 sm:py-2 font-semibold text-xs sm:text-sm',
                                  'bg-gradient-to-r from-purple-100 to-pink-100 text-purple-800',
                                  'border border-purple-200 rounded-full hover:scale-105 transition-transform',
                                  THEME.shadows.soft
                                )}
                              >
                                <traitData.icon
                                  className={cn(
                                    'w-3 h-3 sm:w-4 sm:h-4 flex-shrink-0',
                                    traitData.color
                                  )}
                                />
                                <span>{traitData.label}</span>
                              </Badge>
                            );
                          })}
                        </div>
                      </SectionCard>
                    )}
                  {profile.profileHobbies &&
                    profile.profileHobbies.length > 0 && (
                      <SectionCard
                        title="איך אני ממלא/ה את הנשמה"
                        subtitle="התחביבים והתשוקות שלי"
                        icon={Heart}
                        variant="elegant"
                        gradient={THEME.colors.secondary.sage}
                      >
                        <div className="flex flex-wrap gap-2 sm:gap-3">
                          {profile.profileHobbies.map((hobby) => {
                            const hobbyData = formatEnumValue(
                              hobby,
                              hobbiesMap,
                              hobby
                            );
                            return (
                              <Badge
                                key={hobby}
                                className={cn(
                                  'flex items-center gap-1 sm:gap-2 px-3 sm:px-4 py-1.5 sm:py-2 font-semibold text-xs sm:text-sm',
                                  'bg-gradient-to-r from-emerald-100 to-cyan-100 text-emerald-800',
                                  'border border-emerald-200 rounded-full hover:scale-105 transition-transform',
                                  THEME.shadows.soft
                                )}
                              >
                                <hobbyData.icon
                                  className={cn(
                                    'w-3 h-3 sm:w-4 sm:h-4 flex-shrink-0',
                                    hobbyData.color
                                  )}
                                />
                                <span>{hobbyData.label}</span>
                              </Badge>
                            );
                          })}
                        </div>
                      </SectionCard>
                    )}
                </div>
                {personalityContent.deeperAnswers.length > 0 && (
                  <SectionCard
                    title="צלילה לתוך האישיות"
                    subtitle="תשובות נוספות שעוזרות להכיר אותי"
                    icon={Telescope}
                    variant="elegant"
                    gradient={WORLDS.personality.gradient}
                  >
                    <div className="grid grid-cols-1 gap-4 sm:gap-6">
                      {personalityContent.deeperAnswers.map((answer) => (
                        <QuestionnaireItem
                          key={answer.questionId}
                          answer={answer}
                          worldColor={WORLDS.personality.accentColor}
                          worldGradient={WORLDS.personality.gradient}
                        />
                      ))}
                    </div>
                  </SectionCard>
                )}
                {!isDesktop && mobileViewLayout === 'detailed' && (
                  <MobileTabNavigation
                    activeTab={activeTab}
                    tabItems={tabItems}
                    onTabChange={handleTabChange}
                    THEME={THEME}
                  />
                )}
              </div>
            </TabsContent>

            {/* Journey Tab - REFACTORED */}
            <TabsContent
              value="journey"
              className="mt-0 space-y-4 sm:space-y-6 max-w-full min-w-0"
            >
              <div className="space-y-6 sm:space-y-8 max-w-full min-w-0">
                {valuesContent.hookAnswer && (
                  <QuestionnaireItem
                    answer={valuesContent.hookAnswer}
                    worldColor={WORLDS.values.accentColor}
                    worldGradient={WORLDS.values.gradient}
                  />
                )}
                <div className="grid grid-cols-1 lg:grid-cols-2 gap-6 sm:gap-8">
                  <SectionCard
                    title="השכלה ועולם המקצוע"
                    subtitle="הדרך האקדמית והמקצועית שלי"
                    icon={GraduationCap}
                    variant="elegant"
                    gradient={THEME.colors.secondary.sky}
                  >
                    <div className="space-y-4 sm:space-y-5">
                      <DetailItem
                        icon={GraduationCap}
                        label="רמת ההשכלה"
                        value={
                          formatEnumValue(
                            profile.educationLevel,
                            educationLevelMap
                          ).label
                        }
                        variant="highlight"
                        textAlign="right"
                      />
                      {profile.education && (
                        <DetailItem
                          icon={BookOpen}
                          label="פירוט הלימודים"
                          value={profile.education}
                          variant="elegant"
                          valueClassName="whitespace-pre-wrap"
                        />
                      )}
                      <DetailItem
                        icon={Briefcase}
                        label="התחום המקצועי"
                        value={
                          profile.occupation || 'מקצוע מעניין מחכה לגילוי'
                        }
                        variant="elegant"
                        textAlign="right"
                      />
                      <DetailItem
                        icon={Award}
                        label="השירות הצבאי/לאומי"
                        value={
                          formatEnumValue(profile.serviceType, serviceTypeMap)
                            .label
                        }
                        variant="elegant"
                        textAlign="right"
                      />
                      {profile.serviceDetails && (
                        <DetailItem
                          icon={InfoIcon}
                          label="פרטי השירות"
                          value={profile.serviceDetails}
                          variant="elegant"
                          valueClassName="whitespace-pre-wrap"
                        />
                      )}
                    </div>
                  </SectionCard>
                  <SectionCard
                    title="הרקע המשפחתי והתרבותי"
                    subtitle="המשפחה והמקורות שעיצבו אותי"
                    icon={Users2}
                    variant="romantic"
                    gradient={THEME.colors.primary.accent}
                  >
                    <div className="grid grid-cols-1 sm:grid-cols-2 gap-4 sm:gap-5">
                      <DetailItem
                        icon={Users2}
                        label="סטטוס ההורים"
                        value={profile.parentStatus || 'נגלה יחד'}
                        variant="elegant"
                        textAlign="right"
                      />
                      {profile.fatherOccupation && (
                        <DetailItem
                          icon={Briefcase}
                          label="מקצוע האב"
                          value={profile.fatherOccupation}
                          variant="elegant"
                          textAlign="right"
                        />
                      )}
                      {profile.motherOccupation && (
                        <DetailItem
                          icon={Briefcase}
                          label="מקצוע האם"
                          value={profile.motherOccupation}
                          variant="elegant"
                          textAlign="right"
                        />
                      )}
                      <DetailItem
                        icon={Users}
                        label="אחים ואחיות"
                        value={
                          profile.siblings
                            ? `${profile.siblings} אחים/אחיות`
                            : 'נגלה יחד'
                        }
                        variant="elegant"
                        textAlign="right"
                      />
                      <DetailItem
                        icon={Crown}
                        label="המקום במשפחה"
                        value={
                          profile.position
                            ? `מקום ${profile.position}`
                            : 'נגלה יחד'
                        }
                        variant="elegant"
                        textAlign="right"
                      />
                      {profile.aliyaCountry && (
                        <DetailItem
                          icon={Globe}
                          label="ארץ המוצא"
                          value={`${profile.aliyaCountry} - השורשים שלי`}
                          variant="elegant"
                          textAlign="right"
                        />
                      )}
                      {profile.aliyaYear && (
                        <DetailItem
                          icon={Calendar}
                          label="שנת העלייה"
                          value={`${profile.aliyaYear} - הגעתי הביתה`}
                          variant="elegant"
                          textAlign="right"
                        />
                      )}
                    </div>
                  </SectionCard>
                </div>
                {valuesContent.deeperAnswers.length > 0 && (
                  <SectionCard
                    title="הערכים והעקרונות שמנחים אותי"
                    subtitle="תשובות לשאלות על מה שחשוב לי באמת"
                    icon={BookMarked}
                    variant="elegant"
                    gradient={WORLDS.values.gradient}
                  >
                    <div className="grid grid-cols-1 gap-4 sm:gap-6">
                      {valuesContent.deeperAnswers.map((answer) => (
                        <QuestionnaireItem
                          key={answer.questionId}
                          answer={answer}
                          worldColor={WORLDS.values.accentColor}
                          worldGradient={WORLDS.values.gradient}
                        />
                      ))}
                    </div>
                  </SectionCard>
                )}
                {!isDesktop && mobileViewLayout === 'detailed' && (
                  <MobileTabNavigation
                    activeTab={activeTab}
                    tabItems={tabItems}
                    onTabChange={handleTabChange}
                    THEME={THEME}
                  />
                )}
              </div>
            </TabsContent>

            {/* Spirit Tab - NEW & REFACTORED */}
            <TabsContent
              value="spirit"
              className="mt-0 space-y-4 sm:space-y-6 max-w-full min-w-0"
            >
              <div className="space-y-6 sm:space-y-8 max-w-full min-w-0">
                {religionContent.hookAnswer && (
                  <QuestionnaireItem
                    answer={religionContent.hookAnswer}
                    worldColor={WORLDS.religion.accentColor}
                    worldGradient={WORLDS.religion.gradient}
                  />
                )}
                <SectionCard
                  title="החיבור שלי ליהדות"
                  subtitle="המקום של האמונה והמסורת בחיי"
                  icon={BookMarked}
                  variant="elegant"
                  gradient={THEME.colors.primary.gold}
                >
                  <div className="space-y-4 sm:space-y-5">
                    <DetailItem
                      icon={BookMarked}
                      label="השקפת העולם שמנחה אותי"
                      value={
                        formatEnumValue(
                          profile.religiousLevel,
                          religiousLevelMap
                        ).label
                      }
                      variant="highlight"
                      textAlign="right"
                    />
                    {profile.religiousJourney && (
                      <DetailItem
                        icon={Compass}
                        label="המסע הדתי שלי"
                        value={
                          formatEnumValue(
                            profile.religiousJourney,
                            religiousJourneyMap
                          ).label
                        }
                        variant="elegant"
                        textAlign="right"
                      />
                    )}
                    <DetailItem
                      icon={Heart}
                      label="שמירת נגיעה"
                      value={
                        formatBooleanPreference(
                          profile.shomerNegiah,
                          'כן, זה חשוב לי',
                          'לא'
                        ).label
                      }
                      variant="elegant"
                      textAlign="right"
                    />
                    {profile.gender === 'FEMALE' && profile.headCovering && (
                      <DetailItem
                        icon={Crown}
                        label="כיסוי ראש"
                        value={
                          formatEnumValue(profile.headCovering, headCoveringMap)
                            .label
                        }
                        variant="elegant"
                        textAlign="right"
                      />
                    )}
                    {profile.gender === 'MALE' && profile.kippahType && (
                      <DetailItem
                        icon={Crown}
                        label="סוג כיפה"
                        value={
                          formatEnumValue(profile.kippahType, kippahTypeMap)
                            .label
                        }
                        variant="elegant"
                        textAlign="right"
                      />
                    )}
                  </div>
                </SectionCard>
                {profile.influentialRabbi && (
                  <SectionCard
                    title="דמות רוחנית משפיעה"
                    icon={Lightbulb}
                    variant="elegant"
                    gradient={THEME.colors.primary.gold}
                  >
                    <div
                      className={cn(
                        'p-4 sm:p-6 rounded-2xl border border-amber-200',
                        `bg-gradient-to-r ${THEME.colors.neutral.warm}`
                      )}
                    >
                      <p className="text-amber-800 leading-relaxed italic">
                        &quot;{profile.influentialRabbi}&quot;
                      </p>
                    </div>
                  </SectionCard>
                )}
                {religionContent.deeperAnswers.length > 0 && (
                  <SectionCard
                    title="העולם הדתי והרוחני שלי"
                    subtitle="תשובות לשאלות על אמונה, מסורת ורוחניות"
                    icon={Star}
                    variant="elegant"
                    gradient={WORLDS.religion.gradient}
                  >
                    <div className="grid grid-cols-1 gap-4 sm:gap-6">
                      {religionContent.deeperAnswers.map((answer) => (
                        <QuestionnaireItem
                          key={answer.questionId}
                          answer={answer}
                          worldColor={WORLDS.religion.accentColor}
                          worldGradient={WORLDS.religion.gradient}
                        />
                      ))}
                    </div>
                  </SectionCard>
                )}
                {!isDesktop && mobileViewLayout === 'detailed' && (
                  <MobileTabNavigation
                    activeTab={activeTab}
                    tabItems={tabItems}
                    onTabChange={handleTabChange}
                    THEME={THEME}
                  />
                )}
              </div>
            </TabsContent>

            {/* Vision Tab - REFACTORED */}
            <TabsContent
              value="vision"
              className="mt-0 space-y-4 sm:space-y-6 max-w-full min-w-0"
            >
              <div className="space-y-6 sm:space-y-8 max-w-full min-w-0">
                {relationshipContent.hookAnswer && (
                  <QuestionnaireItem
                    answer={relationshipContent.hookAnswer}
                    worldColor={WORLDS.relationship.accentColor}
                    worldGradient={WORLDS.relationship.gradient}
                  />
                )}
                {profile.matchingNotes && (
                  <SectionCard
                    title="הזוגיות שאני חולם/ת עליה"
                    icon={Heart}
                    variant="romantic"
                    gradient={THEME.colors.primary.main}
                  >
                    <div
                      className={cn(
                        'p-4 sm:p-6 rounded-2xl border border-rose-200 max-w-full min-w-0 overflow-hidden',
                        `bg-gradient-to-r ${THEME.colors.neutral.warm}`,
                        THEME.shadows.soft
                      )}
                    >
                      <p className="text-rose-700 leading-relaxed whitespace-pre-wrap italic text-base sm:text-lg break-words hyphens-auto word-break-break-word overflow-wrap-anywhere">
                        <Quote className="w-4 h-4 sm:w-5 sm:h-5 inline ml-1 text-rose-400 flex-shrink-0" />
                        {profile.matchingNotes}
                        <Quote className="w-4 h-4 sm:w-5 sm:h-5 inline mr-1 text-rose-400 transform rotate-180 flex-shrink-0" />
                      </p>
                    </div>
                  </SectionCard>
                )}
                {profile.inspiringCoupleStory && (
                  <SectionCard
                    title="המודל שלי לזוגיות"
                    subtitle="הזוג שנותן לי השראה"
                    icon={Stars}
                    variant="elegant"
                    gradient={THEME.colors.primary.gold}
                  >
                    <div
                      className={cn(
                        'p-4 sm:p-6 rounded-2xl border border-amber-200',
                        `bg-gradient-to-r ${THEME.colors.neutral.warm}`
                      )}
                    >
                      <p className="text-amber-800 leading-relaxed italic">
                        &quot;{profile.inspiringCoupleStory}&quot;
                      </p>
                    </div>
                  </SectionCard>
                )}
                {relationshipContent.deeperAnswers.length > 0 && (
                  <SectionCard
                    title="עוד על החזון שלי לזוגיות"
                    subtitle="תשובות לשאלות על אהבה, משפחה וכל מה שביניהם"
                    icon={Heart}
                    variant="romantic"
                    gradient={WORLDS.relationship.gradient}
                  >
                    <div className="grid grid-cols-1 gap-4 sm:gap-6">
                      {relationshipContent.deeperAnswers.map((answer) => (
                        <QuestionnaireItem
                          key={answer.questionId}
                          answer={answer}
                          worldColor={WORLDS.relationship.accentColor}
                          worldGradient={WORLDS.relationship.gradient}
                        />
                      ))}
                    </div>
                  </SectionCard>
                )}
                {!isDesktop && mobileViewLayout === 'detailed' && (
                  <MobileTabNavigation
                    activeTab={activeTab}
                    tabItems={tabItems}
                    onTabChange={handleTabChange}
                    THEME={THEME}
                  />
                )}
              </div>
            </TabsContent>

            {/* Connection Tab - REFACTORED */}
            <TabsContent
              value="connection"
              className="mt-0 space-y-4 sm:space-y-6 max-w-full min-w-0"
            >
              <div className="space-y-6 sm:space-y-8 max-w-full min-w-0">
                {partnerContent.hookAnswer && (
                  <QuestionnaireItem
                    answer={partnerContent.hookAnswer}
                    worldColor={WORLDS.partner.accentColor}
                    worldGradient={WORLDS.partner.gradient}
                  />
                )}
                {hasAnyPreferences ? (
                  <SectionCard
                    title="העדפות להתאמה"
                    subtitle="דברים שיכולים לעזור לנו למצוא את החיבור הנכון"
                    icon={Filter}
                    variant="default"
                  >
                    <div className="space-y-6 sm:space-y-8">
                      {renderPreferenceBadges(
                        'סטטוסים משפחתיים',
                        Heart,
                        profile.preferredMaritalStatuses,
                        maritalStatusMap,
                        THEME.colors.primary.main
                      )}
                      {renderPreferenceBadges(
                        'רמות דתיות',
                        BookMarked,
                        profile.preferredReligiousLevels,
                        religiousLevelMap,
                        THEME.colors.secondary.peach
                      )}
                      {renderPreferenceBadges(
                        'מסע דתי של בן/בת הזוג',
                        Compass,
                        profile.preferredReligiousJourneys as string[],
                        religiousJourneyMap,
                        THEME.colors.secondary.sage
                      )}
                      {renderPreferenceBadges(
                        'רמות השכלה',
                        GraduationCap,
                        profile.preferredEducation,
                        educationLevelMap,
                        THEME.colors.secondary.sky
                      )}
                    </div>
                  </SectionCard>
                ) : (
                  !partnerContent.hookAnswer &&
                  partnerContent.deeperAnswers.length === 0 && (
                    <EmptyState
                      icon={Compass}
                      title="פתוח/ה להכיר את האדם הנכון"
                      description="אין כאן רשימת דרישות, אלא הזמנה פתוחה להכיר אדם מיוחד. יש כאן מקום לגילויים מרגשים יחד."
                      variant="discovery"
                    />
                  )
                )}
                {partnerContent.deeperAnswers.length > 0 && (
                  <SectionCard
                    title="איך אני מדמיין/ת את בן/בת הזוג"
                    subtitle="תשובות נוספות על מה שאני מחפש/ת"
                    icon={Target}
                    variant="elegant"
                    gradient={WORLDS.partner.gradient}
                  >
                    <div className="grid grid-cols-1 gap-4 sm:gap-6">
                      {partnerContent.deeperAnswers.map((answer) => (
                        <QuestionnaireItem
                          key={answer.questionId}
                          answer={answer}
                          worldColor={WORLDS.partner.accentColor}
                          worldGradient={WORLDS.partner.gradient}
                        />
                      ))}
                    </div>
                  </SectionCard>
                )}
                {!isDesktop && mobileViewLayout === 'detailed' && (
                  <MobileTabNavigation
                    activeTab={activeTab}
                    tabItems={tabItems}
                    onTabChange={handleTabChange}
                    THEME={THEME}
                  />
                )}
              </div>
            </TabsContent>

            {/* Professional Tab */}
            {viewMode === 'matchmaker' && (
              <TabsContent
                value="professional"
                className="mt-0 max-w-full min-w-0"
              >
                <SectionCard
                  title="פרטים חסויים ותובנות לשדכן"
                  subtitle="פרטים מקצועיים לתהליך השידוך"
                  icon={Lock}
                  variant="elegant"
                  gradient={THEME.colors.primary.gold}
                >
                  <div className="space-y-6">
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <DetailItem
                        icon={Phone}
                        label="העדפת יצירת קשר"
                        value={
                          formatEnumValue(
                            profile.contactPreference,
                            contactPreferenceMap,
                            'נגלה יחד'
                          ).label
                        }
                        variant="elegant"
                        textAlign="right"
                      />
                      <DetailItem
                        icon={Users}
                        label="העדפת מגדר שדכן/ית"
                        value={
                          profile.preferredMatchmakerGender
                            ? profile.preferredMatchmakerGender === 'MALE'
                              ? 'שדכן גבר'
                              : 'שדכנית אישה'
                            : 'אין העדפה מיוחדת'
                        }
                        variant="elegant"
                        textAlign="right"
                      />
                    </div>
                    {profile.hasMedicalInfo && (
                      <DetailItem
                        icon={Heart}
                        label="מידע רפואי"
                        value={
                          profile.isMedicalInfoVisible
                            ? 'גלוי בפרופיל'
                            : 'קיים מידע דיסקרטי'
                        }
                        variant="elegant"
                        textAlign="right"
                        tooltip={profile.medicalInfoDetails || undefined}
                      />
                    )}
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-3 text-sm">
                      <div className="flex items-center gap-2">
                        <Calendar className="w-4 h-4 text-gray-500" />
                        <span>
                          פרופיל נוצר:{' '}
                          {profile.createdAt
                            ? new Date(profile.createdAt).toLocaleDateString(
                                'he-IL'
                              )
                            : 'לא ידוע'}
                        </span>
                      </div>
                      {profile.lastActive && (
                        <div className="flex items-center gap-2">
                          <Clock className="w-4 h-4 text-gray-500" />
                          <span>
                            פעילות אחרונה:{' '}
                            {new Date(profile.lastActive).toLocaleDateString(
                              'he-IL'
                            )}
                          </span>
                        </div>
                      )}
                    </div>
                  </div>
                </SectionCard>
                {!isDesktop && mobileViewLayout === 'detailed' && (
                  <MobileTabNavigation
                    activeTab={activeTab}
                    tabItems={tabItems}
                    onTabChange={handleTabChange}
                    THEME={THEME}
                  />
                )}
              </TabsContent>
            )}
          </div>
        </ScrollArea>
      </Tabs>
    );
  };

  const MobileHeader = () => (
    <div
      className={cn(
        'flex-shrink-0 flex justify-between items-center border-b border-rose-200/50 sticky top-0 z-30 backdrop-blur-md',
        'p-3 sm:p-4 min-h-[60px]',
        `bg-gradient-to-r ${THEME.colors.neutral.warm}`
      )}
      dir="ltr"
    >
      <Button
        variant="ghost"
        size="icon"
        className={cn(
          'text-gray-600 hover:text-gray-800 hover:bg-white/60 rounded-full transition-all duration-300 shadow-sm hover:shadow-md',
          'w-10 h-10 sm:w-12 sm:h-12 min-h-[44px] min-w-[44px] touch-manipulation'
        )}
        onClick={handleClose}
        aria-label="סגור תצוגה מקדימה"
      >
        <X className="w-4 h-4 sm:w-5 sm:h-5" />
      </Button>
      <div className="flex items-center gap-3 flex-1 justify-center">
        <ToggleGroup
          type="single"
          value={mobileViewLayout}
          onValueChange={(value: 'focus' | 'detailed') => {
            if (value) setMobileViewLayout(value);
          }}
          className={cn(
            'bg-white/95 backdrop-blur-sm rounded-2xl border border-rose-200/50 shadow-lg',
            'p-1',
            THEME.shadows.soft
          )}
        >
          <ToggleGroupItem
            value="focus"
            aria-label="תצוגת היכרות"
            className={cn(
              'rounded-xl transition-all duration-300 min-h-[44px] px-3 sm:px-4 py-2 touch-manipulation',
              'data-[state=on]:bg-gradient-to-r data-[state=on]:from-rose-500 data-[state=on]:to-pink-500 data-[state=on]:text-white data-[state=on]:shadow-md'
            )}
          >
            <Heart className="h-3 h-3 sm:h-4 sm:w-4" />
            <span className="mr-1.5 sm:mr-2 text-xs sm:text-sm font-medium">
              היכרות
            </span>
          </ToggleGroupItem>
          <ToggleGroupItem
            value="detailed"
            aria-label="תצוגה מפורטת"
            className={cn(
              'rounded-xl transition-all duration-300 min-h-[44px] px-3 sm:px-4 py-2 touch-manipulation',
              'data-[state=on]:bg-gradient-to-r data-[state=on]:from-purple-500 data-[state=on]:to-indigo-500 data-[state=on]:text-white data-[state=on]:shadow-md'
            )}
          >
            <FileText className="h-3 h-3 sm:h-4 sm:w-4" />
            <span className="mr-1.5 sm:mr-2 text-xs sm:text-sm font-medium">
              מפורט
            </span>
          </ToggleGroupItem>
        </ToggleGroup>
        <ColorPaletteSelector
          selectedPalette={selectedPalette}
          onPaletteChange={setSelectedPalette}
          THEME={THEME}
          compact={true}
        />
      </div>
    </div>
  );

  const DetailedMobileLayout = () => (
    <ScrollArea className="flex-1 min-h-0 max-w-full overflow-hidden">
      <div className="flex flex-col min-w-0 max-w-full">
        <ProfileHeader
          profile={profile}
          age={age}
          mainImageToDisplay={mainImageToDisplay}
          availability={availability}
          viewMode={viewMode}
          onSuggestClick={() => setIsSuggestDialogOpen(true)}
          isMobile={true}
          selectedPalette={selectedPalette}
          THEME={THEME}
          compact={false}
        />
        <MobileImageGallery
          orderedImages={orderedImages}
          profile={profile}
          onImageClick={handleOpenImageDialog}
          THEME={THEME}
          compact={false}
        />
        <div
          className={cn(
            'p-3 sm:p-4 min-w-0 max-w-full overflow-hidden',
            `bg-gradient-to-br ${THEME.colors.neutral.cool}`
          )}
        >
          <MainContentTabs />
        </div>
      </div>
    </ScrollArea>
  );

  const FocusMobileLayout = () => (
    <div className="flex-1 min-h-0 flex flex-col max-w-full overflow-hidden">
      <ScrollArea className="flex-1 min-h-0 max-w-full">
        <div className="pb-4 px-2 sm:px-3 min-w-0 max-w-full overflow-hidden">
          <ProfileHeader
            profile={profile}
            age={age}
            mainImageToDisplay={mainImageToDisplay}
            availability={availability}
            viewMode={viewMode}
            onSuggestClick={() => setIsSuggestDialogOpen(true)}
            isMobile={true}
            selectedPalette={selectedPalette}
            onPaletteChange={setSelectedPalette}
            THEME={THEME}
            compact={true}
          />
          <MobileImageGallery
            orderedImages={orderedImages}
            profile={profile}
            onImageClick={handleOpenImageDialog}
            THEME={THEME}
            compact={true}
          />
          <div
            className={cn(
              'px-2 sm:px-3 py-2 space-y-3 sm:space-y-4 min-w-0 max-w-full overflow-hidden',
              `bg-gradient-to-br ${THEME.colors.neutral.warm}`
            )}
          >
            {profile.about ? (
              <SectionCard
                title="קצת עליי"
                subtitle="המילים שמגדירות אותי"
                icon={Heart}
                variant="romantic"
                gradient={THEME.colors.primary.main}
                compact={true}
                className="min-w-0 max-w-full"
              >
                <div
                  className={cn(
                    'p-3 sm:p-4 rounded-xl border border-rose-200/50 min-w-0 max-w-full overflow-hidden',
                    `bg-gradient-to-r ${THEME.colors.neutral.warm}`
                  )}
                >
                  <p
                    className="text-gray-800 leading-relaxed italic font-medium break-words hyphens-auto word-break-break-word overflow-wrap-anywhere text-right"
                    dir="rtl"
                  >
                    <Quote className="w-3 h-3 sm:w-4 sm:h-4 inline ml-1 text-rose-400 flex-shrink-0" />
                    {profile.about}
                    <Quote className="w-3 h-3 sm:w-4 sm:h-4 inline mr-1 text-rose-400 transform rotate-180 flex-shrink-0" />
                  </p>
                </div>
              </SectionCard>
            ) : (
              <SectionCard
                title="הסיפור שלי"
                subtitle="המילים שמגדירות אותי"
                icon={Telescope}
                variant="romantic"
                compact={true}
              >
                <EmptyState
                  icon={Telescope}
                  title="יש כאן הרבה לגלות!"
                  description="הסיפור האישי מחכה להיכתב יחד איתך..."
                  variant="romantic"
                  compact={true}
                />
              </SectionCard>
            )}
            <SectionCard
              title="תמצית מהירה"
              subtitle="הפרטים החשובים שכדאי לדעת עליי במבט ראשון"
              icon={Zap}
              variant="elegant"
              gradient={THEME.colors.primary.gold}
              compact={true}
              className="min-w-0 max-w-full"
            >
              <div className="grid grid-cols-1 gap-2 sm:gap-3 min-w-0 max-w-full">
                <DetailItem
                  icon={BookMarked}
                  label="השקפה"
                  value={
                    formatEnumValue(profile.religiousLevel, religiousLevelMap)
                      .label
                  }
                  variant="elegant"
                  size="sm"
                  useMobileLayout={true}
                  textAlign="center"
                />
                <DetailItem
                  icon={Heart}
                  label="שמירת נגיעה"
                  value={formatBooleanPreference(profile.shomerNegiah).label}
                  variant="elegant"
                  size="sm"
                  useMobileLayout={true}
                />
                <DetailItem
                  icon={Briefcase}
                  label="עיסוק"
                  value={profile.occupation || 'נגלה יחד'}
                  variant="elegant"
                  size="sm"
                  useMobileLayout={true}
                />
                <DetailItem
                  icon={GraduationCap}
                  label="השכלה"
                  value={
                    formatEnumValue(profile.educationLevel, educationLevelMap)
                      .label
                  }
                  variant="elegant"
                  size="sm"
                  useMobileLayout={true}
                />
              </div>
            </SectionCard>
            <SectionCard
              title="מה מיוחד בי"
              subtitle="התכונות והתחביבים שעושים אותי ייחודי/ת"
              icon={Sparkles}
              variant="romantic"
              gradient={THEME.colors.primary.romantic}
              compact={true}
              className="min-w-0 max-w-full"
            >
              <div className="space-y-4 sm:space-y-5 min-w-0 max-w-full">
                {profile.profileCharacterTraits &&
                  profile.profileCharacterTraits.length > 0 && (
                    <div className="min-w-0 max-w-full">
                      <h4 className="text-sm font-bold text-purple-700 mb-2 sm:mb-3 flex items-center justify-center gap-2">
                        <span className="break-words">התכונות שלי:</span>
                        <Sparkles className="w-3 h-3 sm:w-4 sm:h-4 flex-shrink-0" />
                      </h4>
                      <div className="flex flex-wrap gap-2 min-w-0 max-w-full justify-center">
                        {profile.profileCharacterTraits
                          .slice(0, 4)
                          .map((trait) => {
                            const traitData = formatEnumValue(
                              trait,
                              characterTraitMap,
                              trait,
                              true
                            );
                            return (
                              <Badge
                                key={trait}
                                className={cn(
                                  'flex items-center gap-1 px-2 py-1 text-xs font-semibold min-w-0 max-w-full',
                                  'bg-gradient-to-r from-purple-100 to-violet-100 text-purple-800',
                                  'border border-purple-200 rounded-full',
                                  'break-words'
                                )}
                              >
                                <traitData.icon className="w-2.5 h-2.5 sm:w-3 sm:h-3 flex-shrink-0" />
                                <span className="break-words min-w-0 overflow-hidden">
                                  {traitData.shortLabel || traitData.label}
                                </span>
                              </Badge>
                            );
                          })}
                      </div>
                    </div>
                  )}
                {profile.profileHobbies &&
                  profile.profileHobbies.length > 0 && (
                    <div className="min-w-0 max-w-full">
                      <h4 className="text-sm font-bold text-emerald-700 mb-2 sm:mb-3 flex items-center justify-center gap-2">
                        <span className="break-words">מה אני אוהב/ת:</span>
                        <Heart className="w-3 h-3 sm:w-4 sm:h-4 flex-shrink-0" />
                      </h4>
                      <div className="flex flex-wrap gap-2 min-w-0 max-w-full justify-center">
                        {profile.profileHobbies.slice(0, 4).map((hobby) => {
                          const hobbyData = formatEnumValue(
                            hobby,
                            hobbiesMap,
                            hobby,
                            true
                          );
                          return (
                            <Badge
                              key={hobby}
                              className={cn(
                                'flex items-center gap-1 px-2 py-1 text-xs font-semibold min-w-0 max-w-full',
                                'bg-gradient-to-r from-emerald-100 to-green-100 text-emerald-800',
                                'border border-emerald-200 rounded-full',
                                'break-words'
                              )}
                            >
                              <hobbyData.icon className="w-2.5 h-2.5 sm:w-3 sm:h-3 flex-shrink-0" />
                              <span className="break-words min-w-0 overflow-hidden">
                                {hobbyData.shortLabel || hobbyData.label}
                              </span>
                            </Badge>
                          );
                        })}
                      </div>
                    </div>
                  )}
              </div>
            </SectionCard>
            <div
              className={cn(
                'text-center p-4 sm:p-6 rounded-2xl text-white min-w-0 max-w-full overflow-hidden',
                `bg-gradient-to-r ${THEME.colors.primary.main}`,
                THEME.shadows.elegant
              )}
            >
              <h3 className="text-base sm:text-lg font-bold mb-2 break-words">
                רוצים לדעת עוד?
              </h3>
              <p className="mb-3 sm:mb-4 opacity-90 text-sm break-words">
                עוד המון דברים מעניינים מחכים לגילוי...
              </p>
              <Button
                onClick={() => setMobileViewLayout('detailed')}
                className={cn(
                  'bg-white text-gray-600 hover:bg-gray-50 font-bold rounded-full min-h-[44px]',
                  'px-4 py-2 sm:px-6 sm:py-3 text-sm sm:text-base',
                  THEME.shadows.warm
                )}
              >
                <Eye className="w-4 h-4 sm:w-5 sm:h-5 ml-2 flex-shrink-0" />
                <span className="break-words">בואו נכיר לעומק</span>
              </Button>
            </div>
          </div>
        </div>
      </ScrollArea>
    </div>
  );

  if (!isClient) {
    return (
      <Card
        dir="rtl"
        className={cn(
          'w-full bg-white shadow-2xl rounded-2xl overflow-hidden border-0 flex flex-col h-full',
          className
        )}
      >
        <div
          className={cn(
            'p-4 sm:p-6 border-b border-gray-200/80',
            `bg-gradient-to-r ${THEME.colors.neutral.warm}`
          )}
        >
          <div className="flex flex-col sm:flex-row items-center sm:items-start gap-4 sm:gap-6">
            <Skeleton className="h-24 w-24 sm:h-36 sm:w-36 rounded-full flex-shrink-0" />
            <div className="flex-grow w-full space-y-4">
              <Skeleton className="h-8 sm:h-12 w-3/4 mx-auto sm:mx-0" />
              <Skeleton className="h-4 sm:h-6 w-1/2 mx-auto sm:mx-0" />
              <div className="grid grid-cols-2 sm:grid-cols-3 gap-3 sm:gap-4 mt-4">
                <Skeleton className="h-10 sm:h-12 w-full rounded-xl" />
                <Skeleton className="h-10 sm:h-12 w-full rounded-xl" />
                <Skeleton className="h-10 sm:h-12 w-full rounded-xl" />
              </div>
            </div>
          </div>
        </div>
        <div className="p-4 sm:p-6 flex-grow">
          <div className="space-y-4">
            <Skeleton className="h-6 sm:h-8 w-full rounded-xl" />
            <Skeleton className="h-24 sm:h-32 w-full rounded-xl" />
            <Skeleton className="h-16 sm:h-24 w-full rounded-xl" />
          </div>
        </div>
      </Card>
    );
  }

  return (
    <TooltipProvider>
      <Card
        dir="rtl"
        id="profile-card-container"
        className={cn(
          'w-full h-full overflow-hidden flex flex-col max-w-full min-w-0',
          `bg-gradient-to-br ${THEME.colors.neutral.elegant}`,
          THEME.shadows.elegant,
          '[&_*]:box-border [&_*]:max-w-full',
          className
        )}
        style={{
          direction: 'rtl',
          textAlign: 'right',
          overflow: 'hidden',
        }}
      >
        {isDesktop && onClose && (
          <div className="absolute top-4 left-4 z-40">
            <Tooltip>
              <TooltipTrigger asChild>
                <Button
                  variant="ghost"
                  size="icon"
                  className={cn(
                    'text-gray-600 hover:text-gray-800 bg-white/80 hover:bg-white/90 rounded-full shadow-lg hover:shadow-xl transition-all duration-300',
                    'w-10 h-10 sm:w-12 sm:h-12 min-h-[44px] min-w-[44px]'
                  )}
                  onClick={handleClose}
                >
                  <X className="w-4 h-4 sm:w-5 sm:h-5" />
                </Button>
              </TooltipTrigger>
              <TooltipContent>
                <p>סגור תצוגה מקדימה</p>
              </TooltipContent>
            </Tooltip>
          </div>
        )}

        {isDesktop ? (
          <ResizablePanelGroup
            direction="horizontal"
            dir="rtl"
            className="flex-grow min-h-0 max-w-full"
          >
            <ResizablePanel
              defaultSize={60}
              minSize={40}
              className="min-w-0 flex flex-col max-w-full overflow-hidden"
            >
              <ScrollArea className="flex-1 min-h-0 max-w-full">
                <ProfileHeader
                  profile={profile}
                  age={age}
                  mainImageToDisplay={mainImageToDisplay}
                  availability={availability}
                  viewMode={viewMode}
                  onSuggestClick={() => setIsSuggestDialogOpen(true)}
                  selectedPalette={selectedPalette}
                  onPaletteChange={setSelectedPalette}
                  THEME={THEME}
                />
                <div className="p-4 sm:p-6 overflow-hidden flex max-w-full">
                  <MainContentTabs />
                </div>
              </ScrollArea>
            </ResizablePanel>
            <ResizableHandle
              withHandle
              className={cn(
                'bg-gradient-to-b from-rose-200 to-pink-200 hover:from-rose-300 hover:to-pink-300',
                'transition-all duration-300'
              )}
            />
            <ResizablePanel
              defaultSize={40}
              minSize={25}
              className="min-w-0 flex flex-col max-w-full overflow-hidden"
            >
              <ScrollArea className="flex-grow min-h-0 max-w-full">
                <div className="p-4 sm:p-6 space-y-4 sm:space-y-6 min-w-0 max-w-full">
                  <SectionCard
                    title="הגלריה האישית"
                    subtitle="התמונות שמספרות את הסיפור"
                    icon={Camera}
                    variant="romantic"
                    gradient={THEME.colors.primary.rose}
                    className="min-w-0 max-w-full"
                  >
                    {orderedImages.length > 0 ? (
                      <div className="space-y-4 min-w-0 max-w-full">
                        <div
                          className={cn(
                            'relative aspect-video rounded-2xl overflow-hidden cursor-pointer group border-2 sm:border-3 border-white shadow-lg hover:shadow-xl transition-all duration-300 max-w-full'
                          )}
                          onClick={() =>
                            handleOpenImageDialog(orderedImages[0])
                          }
                        >
                          <Image
                            src={getRelativeCloudinaryPath(
                              orderedImages[0].url
                            )}
                            alt="תמונה ראשית מדהימה"
                            fill
                            className="object-cover transition-transform duration-500 group-hover:scale-105"
                            sizes="35vw"
                            priority
                          />
                          <div className="absolute inset-0 bg-gradient-to-t from-black/60 via-transparent to-transparent opacity-0 group-hover:opacity-100 transition-opacity flex items-center justify-center">
                            <div className="text-center text-white">
                              <Eye className="w-6 h-6 sm:w-8 sm:h-8 mx-auto mb-2" />
                              <p className="font-bold text-sm sm:text-base">
                                לחץ להגדלה
                              </p>
                            </div>
                          </div>
                        </div>
                        {orderedImages.length > 1 && (
                          <div className="grid grid-cols-2 sm:grid-cols-3 gap-2 sm:gap-3 min-w-0 max-w-full">
                            {orderedImages.slice(1, 7).map((img) => (
                              <div
                                key={img.id}
                                className={cn(
                                  'relative aspect-square rounded-xl overflow-hidden cursor-pointer border-2 border-transparent hover:border-rose-400 transition-all duration-300 shadow-md hover:shadow-lg max-w-full'
                                )}
                                onClick={() => handleOpenImageDialog(img)}
                              >
                                <Image
                                  src={getRelativeCloudinaryPath(img.url)}
                                  alt="תמונת פרופיל נוספת"
                                  fill
                                  className="object-cover hover:scale-110 transition-transform duration-300"
                                  sizes="15vw"
                                />
                              </div>
                            ))}
                          </div>
                        )}
                      </div>
                    ) : (
                      <EmptyState
                        icon={Camera}
                        title="התמונות בדרך אלינו..."
                        description="הגלריה האישית מחכה להיחשף"
                        variant="romantic"
                      />
                    )}
                  </SectionCard>
                </div>
              </ScrollArea>
            </ResizablePanel>
          </ResizablePanelGroup>
        ) : (
          <div className="flex flex-col h-full w-full max-w-full min-w-0 overflow-hidden">
            <MobileHeader />
            {mobileViewLayout === 'detailed' ? (
              <DetailedMobileLayout />
            ) : (
              <FocusMobileLayout />
            )}
          </div>
        )}

        <ImageDialogComponent
          selectedImageForDialog={selectedImageForDialog}
          currentDialogImageIndex={currentDialogImageIndex}
          orderedImages={orderedImages}
          onClose={handleCloseImageDialog}
          onNavigate={handleDialogNav}
          onImageSelect={setSelectedImageForDialog}
        />

        {viewMode === 'matchmaker' && candidate && (
          <NewSuggestionForm
            isOpen={isSuggestDialogOpen}
            onClose={() => setIsSuggestDialogOpen(false)}
            candidates={allCandidates}
            selectedCandidate={candidate}
            onSubmit={handleCreateSuggestion}
          />
        )}
      </Card>
    </TooltipProvider>
  );
};

export default ProfileCard;
--- End of Content for ProfileCard.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\app\components\profile\constants.ts
--------------------------------------------------------------------------------
Content:
// src/components/shared/profile/constants.ts
import { Heart, User, Users, Scroll, GraduationCap, MapPin } from "lucide-react";

export const WORLDS = {
  values: {
    key: "values",
    title: "ערכים ואמונות",
    icon: Heart,
    color: "text-pink-500",
    bgColor: "bg-pink-50",
    borderColor: "border-pink-200",
  },
  personality: {
    key: "personality",
    title: "אישיות",
    icon: User,
    color: "text-blue-500",
    bgColor: "bg-blue-50",
    borderColor: "border-blue-200",
  },
  relationship: {
    key: "relationship",
    title: "זוגיות ומשפחה",
    icon: Users,
    color: "text-purple-500",
    bgColor: "bg-purple-50",
    borderColor: "border-purple-200",
  },
  religion: {
    key: "religion",
    title: "דת ומסורת",
    icon: Scroll,
    color: "text-indigo-500",
    bgColor: "bg-indigo-50",
    borderColor: "border-indigo-200",
  },
  partner: {
    key: "partner",
    title: "העדפות בן/בת זוג",
    icon: Heart,
    color: "text-red-500",
    bgColor: "bg-red-50",
    borderColor: "border-red-200",
  },
} as const;

export const RELIGIOUS_LEVELS = [
  "חרדי",
  "חרדי מודרני",
  "דתי",
  "דתי-לייט",
  "מסורתי"
] as const;

export const MARITAL_STATUS = [
  "single",
  "divorced",
  "widowed"
] as const;

export const EDUCATION_LEVELS = [
  "תיכונית",
  "על תיכונית",
  "אקדמית",
  "תורנית"
] as const;

export const OCCUPATION_TYPES = [
  "עובד/ת",
  "סטודנט/ית",
  "אברך/אברכית",
  "עצמאי/ת"
] as const;

export const LOCATIONS = [
  "צפון",
  "מרכז",
  "דרום",
  "ירושלים",
  "יהודה ושומרון"
] as const;

export const PROFILE_SECTIONS = {
  BASIC_INFO: {
    title: "פרטים אישיים",
    icon: User,
  },
  EDUCATION: {
    title: "השכלה ותעסוקה",
    icon: GraduationCap,
  },
  LOCATION: {
    title: "מיקום",
    icon: MapPin,
  },
  FAMILY: {
    title: "מידע משפחתי",
    icon: Users,
  },
  PREFERENCES: {
    title: "העדפות",
    icon: Heart,
  },
} as const;

export const COMMUNICATION_STYLES = [
  "ישיר",
  "עקיף",
  "דיפלומטי"
] as const;

export const STRESS_MANAGEMENT = [
  "רגוע",
  "לחוץ",
  "משתנה"
] as const;

export const CONTACT_PREFERENCES = [
  { value: "direct", label: "ישירות" },
  { value: "matchmaker", label: "דרך השדכן/ית" },
  { value: "both", label: "שתי האפשרויות" }
] as const;

// הגדרות עבור הוולידציה
export const VALIDATION_RULES = {
  AGE: {
    MIN: 18,
    MAX: 99
  },
  HEIGHT: {
    MIN: 100,
    MAX: 250
  },
  NAME: {
    MIN_LENGTH: 2,
    MAX_LENGTH: 50
  }
} as const;
--- End of Content for constants.ts ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\app\components\profile\index.ts
--------------------------------------------------------------------------------
Content:
// src/components/shared/profile/index.ts

// Main Components
export { default as ProfileCard } from './ProfileCard';

// Sections
export { default as PhotosSection } from './sections/PhotosSection';
export { default as PreferencesSection } from './sections/PreferencesSection';
export { default as ProfileSection } from './sections/ProfileSection';
export { default as QuestionnaireResponsesSection } from './sections/QuestionnaireResponsesSection';

// Elements
export { default as StatsCard } from './elements/StatsCard';
export { default as VisibilityControl } from './elements/VisibilityControl';
export { default as MinimalCard } from './elements/MinimalCard';

// Types
export * from './types/profile';
export * from './types/questionnaire';
--- End of Content for index.ts ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\app\components\profile\profile_contents.txt
--------------------------------------------------------------------------------
[This is the output log file itself. Content not included.]

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\app\components\profile\utils.ts
--------------------------------------------------------------------------------
Content:
// src/components/shared/profile/utils.ts
import type { UserProfile } from "@/types/next-auth";

export const calculateAge = (birthDate: Date): number => {
  const today = new Date();
  const birth = new Date(birthDate);
  let age = today.getFullYear() - birth.getFullYear();
  const monthDiff = today.getMonth() - birth.getMonth();
  
  if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birth.getDate())) {
    age--;
  }
  return age;
};

export const formatProfileData = (profile: UserProfile) => {
  return {
    ...profile,
    age: calculateAge(new Date(profile.birthDate)),
    // Add any other formatting needed
  };
};

export const validateProfileData = (data: Partial<UserProfile>) => {
  const errors: Record<string, string> = {};
  
  // Add validation rules as needed
  if (data.height && (data.height < 100 || data.height > 250)) {
    errors.height = "גובה חייב להיות בין 100 ל-250 ס\"מ";
  }
  
  return {
    isValid: Object.keys(errors).length === 0,
    errors
  };
};
--- End of Content for utils.ts ---

================================================================================
Directory: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\app\components\profile\elements
================================================================================

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\app\components\profile\elements\MinimalCard.tsx
--------------------------------------------------------------------------------
Content:
// src/components/shared/profile/elements/MinimalCard.tsx
import React from "react";
import { Card } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { User, MapPin, Scroll, Heart } from "lucide-react";
import Image from "next/image";
import { calculateAge } from "../utils";
import type { UserProfile, UserImage } from "@/types/next-auth";

interface MinimalCardProps {
  profile: UserProfile;
  mainImage?: UserImage;
  onClick?: () => void;
  className?: string;
}

const MinimalCard: React.FC<MinimalCardProps> = ({
  profile,
  mainImage,
  onClick,
  className = "",
}) => {
  const age = calculateAge(new Date(profile.birthDate));

  // Handle cases where profile.user might be undefined
  const userName = profile.user
    ? `${profile.user.firstName} ${profile.user.lastName}`
    : "שם לא זמין"; // "Name not available" in Hebrew

  return (
    <Card
      onClick={onClick}
      className={`relative overflow-hidden cursor-pointer hover:shadow-md transition-shadow ${className}`}
    >
      <div className="flex gap-4 p-4">
        {/* תמונת פרופיל */}
        <div className="relative w-24 h-24 rounded-lg overflow-hidden bg-gray-100">
          {mainImage ? (
            <Image
              src={mainImage.url}
              alt="תמונת פרופיל"
              fill
              className="object-cover"
              sizes="96px"
            />
          ) : (
            <div className="w-full h-full flex items-center justify-center">
              <User className="w-8 h-8 text-gray-400" />
            </div>
          )}
        </div>

        {/* מידע בסיסי */}
        <div className="flex-1 space-y-2">
          <div>
            <h3 className="text-lg font-medium">{userName}</h3>
            <p className="text-sm text-gray-500">{age} שנים</p>
          </div>

          <div className="flex flex-wrap gap-2">
            {profile.city && (
              <Badge variant="secondary" className="flex items-center gap-1">
                <MapPin className="w-3 h-3" />
                {profile.city}
              </Badge>
            )}
            {profile.religiousLevel && (
              <Badge variant="secondary" className="flex items-center gap-1">
                <Scroll className="w-3 h-3" />
                {profile.religiousLevel}
              </Badge>
            )}
          </div>

          {/* סטטוס זמינות */}
          <div className="flex items-center gap-2 text-sm">
            {profile.availabilityStatus === "AVAILABLE" ? (
              <Badge variant="success" className="flex items-center gap-1">
                <Heart className="w-3 h-3" />
                פנוי/ה להצעות
              </Badge>
            ) : (
              <Badge variant="secondary" className="flex items-center gap-1">
                <Heart className="w-3 h-3" />
                בתהליך הכרות
              </Badge>
            )}
          </div>
        </div>
      </div>
    </Card>
  );
};

export default MinimalCard;
--- End of Content for MinimalCard.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\app\components\profile\elements\StatsCard.tsx
--------------------------------------------------------------------------------
Content:
import React from "react";
import { Card, CardContent } from "@/components/ui/card";
import { Progress } from "@/components/ui/progress";
import { cn } from "@/lib/utils";

interface StatsCardProps {
  /**
   * The icon to display in the card
   */
  icon: React.ElementType;

  /**
   * The title text to display
   */
  title: string;

  /**
   * The main value to display
   */
  value: string | number;

  /**
   * Optional progress value (0-100)
   */
  progress?: number;

  /**
   * Optional trend information
   */
  trend?: {
    value: number;
    label: string;
    isPositive?: boolean;
  };

  /**
   * Visual variant of the card
   */
  variant?: "default" | "success" | "warning" | "destructive";

  /**
   * Additional CSS classes
   */
  className?: string;
}

const StatsCard: React.FC<StatsCardProps> = ({
  icon: Icon,
  title,
  value,
  progress,
  trend,
  variant = "default",
  className,
}) => {
  // Determine variant-specific background color
  const getVariantStyles = () => {
    switch (variant) {
      case "success":
        return "bg-emerald-50 dark:bg-emerald-900/20";
      case "warning":
        return "bg-amber-50 dark:bg-amber-900/20";
      case "destructive":
        return "bg-red-50 dark:bg-red-900/20";
      default:
        return "bg-card";
    }
  };

  // Special handling for availability status
  const isAvailabilityStatus = title === "סטטוס פניות";
  const isAvailable = typeof value === 'string' && value.toLowerCase() === 'available';

  // Render the value with special handling for availability status
  const renderValue = () => {
    if (isAvailabilityStatus) {
      return (
        <div className="mt-1">
          <span className={cn(
            "inline-flex px-3 py-1 rounded-full text-sm font-semibold tracking-wide",
            isAvailable 
              ? "bg-emerald-100 text-emerald-800 dark:bg-emerald-900/30 dark:text-emerald-300"
              : "bg-gray-100 text-gray-800 dark:bg-gray-800 dark:text-gray-200"
          )}>
            {value}
          </span>
        </div>
      );
    }
    return <h3 className="text-2xl font-semibold">{value}</h3>;
  };

  return (
    <Card
      className={cn(
        "hover:shadow-md transition-shadow",
        getVariantStyles(),
        className
      )}
    >
      <CardContent className="p-6">
        {/* Header Section */}
        <div className="flex items-center space-x-4 rtl:space-x-reverse">
          <div className="p-2 bg-primary/10 rounded-full">
            <Icon className="w-6 h-6 text-primary" />
          </div>
          <div className="flex-1 space-y-1">
            <p className="text-sm text-muted-foreground">{title}</p>
            {renderValue()}
          </div>
        </div>

        {/* Progress Bar Section */}
        {progress !== undefined && (
          <div className="mt-4 space-y-2">
            <Progress 
              value={progress} 
              className="h-2"
              aria-label={`${title} progress: ${progress}%`}
            />
            <p className="text-sm text-muted-foreground text-right">
              {progress}%
            </p>
          </div>
        )}

        {/* Trend Section */}
        {trend && (
          <div className="mt-4 flex items-center">
            <span
              className={cn(
                "text-sm font-medium",
                trend.isPositive ? "text-emerald-600" : "text-red-600"
              )}
            >
              {trend.isPositive ? "+" : "-"}
              {trend.value}%
            </span>
            <span className="text-sm text-muted-foreground mr-2">
              {trend.label}
            </span>
          </div>
        )}
      </CardContent>
    </Card>
  );
};

// Default export
export default StatsCard;

// Named exports for specific use cases
export type { StatsCardProps };
--- End of Content for StatsCard.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\app\components\profile\elements\VisibilityControl.tsx
--------------------------------------------------------------------------------
Content:
import React from "react";
import { Eye, EyeOff } from "lucide-react";
import { Switch } from "@/components/ui/switch";
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip";
import { cn } from "@/lib/utils";

interface VisibilityControlProps {
  /**
   * Current visibility state
   */
  isVisible: boolean;

  /**
   * Callback when visibility changes
   */
  onChange: (isVisible: boolean) => void;

  /**
   * Optional class name for additional styling
   */
  className?: string;

  /**
   * Optional disabled state
   */
  disabled?: boolean;

  /**
   * Optional custom tooltip text
   */
  tooltipText?: {
    visible?: string;
    hidden?: string;
    action?: string;
  };
}

const VisibilityControl: React.FC<VisibilityControlProps> = ({
  isVisible,
  onChange,
  className,
  disabled = false,
  tooltipText = {
    visible: "תשובה זו גלויה למועמדים",
    hidden: "תשובה זו מוסתרת מהמועמדים",
    action: "לחץ כדי",
  },
}) => {
  return (
    <div
      className={cn(
        "flex items-center gap-2 bg-secondary/20 p-2 rounded-md",
        disabled && "opacity-50 cursor-not-allowed",
        className
      )}
    >
      {/* Icon */}
      {isVisible ? (
        <Eye 
          className="h-4 w-4 text-primary" 
          aria-hidden="true"
        />
      ) : (
        <EyeOff 
          className="h-4 w-4 text-muted-foreground" 
          aria-hidden="true"
        />
      )}

      {/* Switch with Tooltip */}
      <TooltipProvider>
        <Tooltip>
          <TooltipTrigger asChild>
            <div className="relative">
              <Switch
                checked={isVisible}
                onCheckedChange={onChange}
                disabled={disabled}
                className={cn(
                  "data-[state=checked]:bg-primary",
                  disabled && "cursor-not-allowed"
                )}
                aria-label={`Toggle visibility: currently ${isVisible ? 'visible' : 'hidden'}`}
              />
              {/* Visually hidden text for screen readers */}
              <span className="sr-only">
                {isVisible ? "הסתר תוכן" : "הצג תוכן"}
              </span>
            </div>
          </TooltipTrigger>
          <TooltipContent 
            side="left" 
            className="max-w-[200px]"
            dir="rtl"
          >
            <p>
              {isVisible ? tooltipText.visible : tooltipText.hidden}
            </p>
            <p className="text-xs text-muted-foreground mt-1">
              {tooltipText.action} {isVisible ? "להסתיר" : "להציג"} תשובה זו
            </p>
          </TooltipContent>
        </Tooltip>
      </TooltipProvider>
    </div>
  );
};

// Default export
export default VisibilityControl;

// Named exports for types
export type { VisibilityControlProps };
--- End of Content for VisibilityControl.tsx ---

================================================================================
Directory: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\app\components\profile\sections
================================================================================

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\app\components\profile\sections\BudgetDisplay.tsx
--------------------------------------------------------------------------------
Content:
// src/app/components/profile/sections/BudgetDisplay.tsx

import React from 'react';
import { Progress } from "@/components/ui/progress";
import { motion } from 'framer-motion';

interface BudgetDisplayProps {
  // הקומפוננטה מקבלת את הנתונים הגולמיים של התשובה
  data: Record<string, number>;
}

const BudgetDisplay: React.FC<BudgetDisplayProps> = ({ data }) => {
  // בדיקה שהנתונים תקינים
  if (!data || typeof data !== 'object' || Array.isArray(data)) {
    return <p className="text-sm text-red-500">שגיאה: נתונים לא תקינים לתצוגה.</p>;
  }

  // 1. המרת האובייקט למערך, סינון ערכים ריקים, ומיון מהגבוה לנמוך
  const sortedEntries = Object.entries(data)
    .filter(([_, value]) => typeof value === 'number' && value > 0)
    .sort(([, a], [, b]) => b - a);
  
  // אם אין נתונים להצגה אחרי הסינון
  if (sortedEntries.length === 0) {
    return <p className="text-sm text-gray-500 italic">לא הוקצו ערכים.</p>;
  }

  // 2. פלטת צבעים דינמית להמחשה ויזואלית
  const colors = [
    'bg-cyan-500',
    'bg-teal-500',
    'bg-sky-500',
    'bg-indigo-500',
    'bg-purple-500',
    'bg-gray-400',
  ];

  // 3. הגדרות אנימציה
  const containerVariants = {
    hidden: { opacity: 0 },
    visible: {
      opacity: 1,
      transition: {
        staggerChildren: 0.1, // כל פריט יופיע בעיכוב קל
      },
    },
  };

  const itemVariants = {
    hidden: { opacity: 0, x: -20 },
    visible: { opacity: 1, x: 0 },
  };

  return (
    <motion.div 
      className="space-y-3 pt-2"
      variants={containerVariants}
      initial="hidden"
      animate="visible"
    >
      {sortedEntries.map(([label, value], index) => (
        <motion.div key={label} variants={itemVariants}>
          <div className="flex justify-between items-center mb-1 text-sm">
            <span className="font-medium text-gray-700">{label}</span>
            <span className="font-semibold text-cyan-700">{value}%</span>
          </div>
          <Progress 
            value={value} 
            className="h-2.5 rounded-full bg-gray-200/70"
            indicatorClassName={colors[index % colors.length]} // בחירת צבע מהפלטה
          />
        </motion.div>
      ))}
    </motion.div>
  );
};

export default BudgetDisplay;
--- End of Content for BudgetDisplay.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\app\components\profile\sections\PhotosSection.tsx
--------------------------------------------------------------------------------
Content:
'use client';

import React, { useRef, useState, useEffect, useCallback } from 'react';
import Image from 'next/image';
import { cn, getRelativeCloudinaryPath } from '@/lib/utils';
// UI Components
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import {
  Dialog,
  DialogContent,
  DialogTitle,
  DialogDescription,
  DialogHeader,
  DialogFooter,
} from '@/components/ui/dialog';
import { toast } from 'sonner';

// Icons
import {
  Camera,
  Star,
  Loader2,
  ChevronLeft,
  ChevronRight,
  Upload,
  Trash2,
  X,
  CheckCircle2, // New Icon
  MinusSquare, // New Icon
} from 'lucide-react';

// Types
import type { UserImage } from '@/types/next-auth';

interface PhotosSectionProps {
  images: UserImage[];
  isUploading: boolean;
  disabled?: boolean;
  maxImages?: number;
  onUpload: (files: File[]) => Promise<void>;
  onSetMain: (imageId: string) => Promise<void>;
  onDelete: (imageIds: string[]) => Promise<void>; // Changed to array
}

const PhotosSection: React.FC<PhotosSectionProps> = ({
  images,
  isUploading: isExternallyUploading,
  disabled = false,
  maxImages = 5,
  onUpload,
  onSetMain,
  onDelete,
}) => {
  const fileInputRef = useRef<HTMLInputElement>(null);

  const [showImageViewer, setShowImageViewer] = useState(false);
  const [selectedViewerIndex, setSelectedViewerIndex] = useState<number | null>(null);
  const [isProcessing, setIsProcessing] = useState(false);
  const [deleteConfirmOpen, setDeleteConfirmOpen] = useState(false);
  const [imageToDelete, setImageToDelete] = useState<string | null>(null);
  const [uploadingFiles, setUploadingFiles] = useState<string[]>([]);
  
  // --- NEW --- State for selection mode
  const [selectionMode, setSelectionMode] = useState(false);
  const [selectedImageIds, setSelectedImageIds] = useState<Set<string>>(new Set());

  const isLoading = isExternallyUploading || isProcessing || uploadingFiles.length > 0;

  // --- File Handling and Upload ---

  const validateFiles = (files: FileList | File[]): { validFiles: File[]; errors: string[] } => {
    // (Implementation remains the same)
    const validTypes = ['image/jpeg', 'image/png', 'image/jpg', 'image/webp'];
    const maxSize = 5 * 1024 * 1024; // 5MB
    const validFiles: File[] = [];
    const errors: string[] = [];
    Array.from(files).forEach((file) => {
      if (!validTypes.includes(file.type)) { errors.push(`קובץ ${file.name}: סוג קובץ לא חוקי.`); return; }
      if (file.size > maxSize) { errors.push(`קובץ ${file.name}: הקובץ גדול מדי (מקסימום 5MB).`); return; }
      validFiles.push(file);
    });
    return { validFiles, errors };
  };

  const handleFileSelect = async (e: React.ChangeEvent<HTMLInputElement>) => {
    // (Implementation remains the same)
    const files = e.target.files;
    if (!files || files.length === 0) return;
    const remainingSlots = maxImages - images.length;
    if (remainingSlots <= 0) { toast.error('הגעת למספר המקסימלי של תמונות.'); return; }
    if (files.length > remainingSlots) { toast.error(`ניתן להעלות עוד ${remainingSlots} תמונות בלבד.`); return; }
    if (isLoading) return;
    const { validFiles, errors } = validateFiles(files);
    if (errors.length > 0) { errors.forEach(error => toast.error(error)); }
    if (validFiles.length === 0) return;
    setUploadingFiles(validFiles.map(f => f.name));
    try {
      await onUpload(validFiles);
      toast.success(`${validFiles.length} תמונות הועלו בהצלחה!`);
    } catch (error) {
      console.error('Error during upload process:', error);
      toast.error('שגיאה בהעלאת התמונות.');
    } finally {
      setUploadingFiles([]);
      if (fileInputRef.current) fileInputRef.current.value = '';
    }
  };

  const triggerFileInput = () => {
    if (!isLoading && !disabled && images.length < maxImages) {
      fileInputRef.current?.click();
    }
  };

  // --- NEW --- Handlers for Selection Mode ---

  const handleToggleSelectionMode = () => {
    setSelectionMode(prev => !prev);
    setSelectedImageIds(new Set()); // Clear selection when toggling mode
  };

  const handleSelectAll = () => {
    if (selectedImageIds.size === images.length) {
      setSelectedImageIds(new Set()); // Deselect all
    } else {
      setSelectedImageIds(new Set(images.map(img => img.id))); // Select all
    }
  };
  
  const toggleImageSelection = (imageId: string) => {
    setSelectedImageIds(prev => {
      const newSet = new Set(prev);
      if (newSet.has(imageId)) {
        newSet.delete(imageId);
      } else {
        newSet.add(imageId);
      }
      return newSet;
    });
  };

  // --- UPDATED --- Image Click and Deletion Handlers ---

  const handleImageClick = (index: number) => {
    if (selectionMode) {
      toggleImageSelection(images[index].id);
    } else {
      setSelectedViewerIndex(index);
      setShowImageViewer(true);
    }
  };

  // Handles bulk deletion
  const handleBulkDelete = async () => {
    if (selectedImageIds.size === 0) {
      toast.info('יש לבחור לפחות תמונה אחת למחיקה.');
      return;
    }

    if (!window.confirm(`האם למחוק ${selectedImageIds.size} תמונות נבחרות? הפעולה אינה הפיכה.`)) {
      return;
    }

    setIsProcessing(true);
    try {
      await onDelete(Array.from(selectedImageIds));
      toast.success(`${selectedImageIds.size} תמונות נמחקו בהצלחה.`);
      setSelectionMode(false);
      setSelectedImageIds(new Set());
    } catch (error) {
      console.error('Error during bulk delete:', error);
      toast.error('שגיאה במחיקת התמונות.');
    } finally {
      setIsProcessing(false);
    }
  };

  // Requests single image deletion
  const requestDelete = (imageId: string, event?: React.MouseEvent) => {
    event?.stopPropagation();
    if (isLoading) return;
    setImageToDelete(imageId);
    setDeleteConfirmOpen(true);
  };
  
  // Confirms single image deletion from dialog
  const confirmDelete = async () => {
    if (!imageToDelete || isProcessing) return;
    setIsProcessing(true);
    try {
      await onDelete([imageToDelete]); // Pass as an array
      toast.success('התמונה נמחקה בהצלחה.');
      closeImageViewer();
      setDeleteConfirmOpen(false);
      setImageToDelete(null);
    } catch (error) {
      console.error('Error deleting image:', error);
      toast.error('שגיאה במחיקת התמונה.');
    } finally {
      setIsProcessing(false);
    }
  };

  // --- Viewer and Other Handlers ---

  const closeImageViewer = useCallback(() => {
    setShowImageViewer(false);
    setSelectedViewerIndex(null);
  }, []);

  const handleNextImage = useCallback(() => setSelectedViewerIndex(prev => (prev === null || prev >= images.length - 1) ? prev : prev + 1), [images.length]);
  const handlePreviousImage = useCallback(() => setSelectedViewerIndex(prev => (prev === null || prev <= 0) ? prev : prev - 1), []);

  const handleSetMainImage = async (imageId: string, showToast = true, event?: React.MouseEvent) => {
    // (Implementation remains the same)
    event?.stopPropagation();
    if (isLoading) return;
    const currentImage = images.find(img => img.id === imageId);
    if (!currentImage || currentImage.isMain) return;
    setIsProcessing(true);
    try {
      await onSetMain(imageId);
      if (showToast) toast.success('התמונה הראשית עודכנה.');
    } catch (error) {
      console.error('Error setting main image:', error);
      toast.error('שגיאה בעדכון התמונה הראשית.');
    } finally {
      setIsProcessing(false);
    }
  };

  const handleControlClick = (e: React.MouseEvent) => e.stopPropagation();

  useEffect(() => {
    const handleKeyDown = (e: KeyboardEvent) => {
      if (!showImageViewer) return;
      if (e.key === 'ArrowRight') handlePreviousImage();
      if (e.key === 'ArrowLeft') handleNextImage();
      if (e.key === 'Escape') closeImageViewer();
    };
    window.addEventListener('keydown', handleKeyDown);
    return () => window.removeEventListener('keydown', handleKeyDown);
  }, [showImageViewer, handlePreviousImage, handleNextImage, closeImageViewer]);

  const getRemainingSlots = () => maxImages - images.length;

  return (
    <div dir="rtl" className="bg-white/80 backdrop-blur-lg rounded-3xl shadow-xl p-6 md:p-8">
      {/* Header */}
      <div className="flex flex-col sm:flex-row items-start sm:items-center justify-between mb-6 pb-4 border-b border-gray-200/80">
        {!selectionMode ? (
          <>
            <div className="mb-3 sm:mb-0 text-right">
              <h2 className="text-xl font-semibold text-gray-800">תמונות פרופיל</h2>
              <p className="mt-1 text-sm text-gray-600">העלה עד {maxImages} תמונות. התמונה הראשית תוצג בכרטיס.</p>
              {uploadingFiles.length > 0 && <p className="mt-2 text-sm text-cyan-600 font-medium">מעלה {uploadingFiles.length} תמונות...</p>}
            </div>
            <div className="flex gap-2 self-end sm:self-center">
              {images.length > 0 && !disabled && (
                <Button variant="outline" onClick={handleToggleSelectionMode} className="rounded-full px-4 text-sm">
                  בחר למחיקה
                </Button>
              )}
              {!disabled && (
                <Button variant="outline" onClick={triggerFileInput} disabled={isLoading || images.length >= maxImages} className="rounded-full border-2 border-cyan-300 text-cyan-700 hover:bg-cyan-50/50 hover:border-cyan-400 transition-all duration-300 px-5 py-2.5 text-sm font-medium flex items-center gap-2">
                  {isExternallyUploading || uploadingFiles.length > 0 ? <Loader2 className="w-4 h-4 animate-spin" /> : <Upload className="w-4 h-4" />}
                  <span>העלאת תמונות</span>
                </Button>
              )}
            </div>
          </>
        ) : (
          <div className="w-full flex justify-between items-center">
            <div className="flex items-center gap-4">
              <Button variant="ghost" size="icon" onClick={handleToggleSelectionMode} className="rounded-full text-gray-600 hover:bg-gray-100">
                <X className="w-5 h-5" />
              </Button>
              <span className="font-semibold text-gray-700">{selectedImageIds.size} תמונות נבחרו</span>
            </div>
            <div className="flex gap-2">
              <Button variant="outline" onClick={handleSelectAll} className="rounded-full px-4 text-sm">
                {selectedImageIds.size === images.length ? 'בטל הכל' : 'בחר הכל'}
              </Button>
              <Button variant="destructive" onClick={handleBulkDelete} disabled={isProcessing || selectedImageIds.size === 0} className="rounded-full px-4 text-sm flex items-center gap-2">
                {isProcessing ? <Loader2 className="w-4 h-4 animate-spin" /> : <Trash2 className="w-4 h-4" />}
                מחק נבחרים
              </Button>
            </div>
          </div>
        )}
      </div>

      <input type="file" ref={fileInputRef} className="hidden" accept="image/jpeg,image/png,image/jpg,image/webp" onChange={handleFileSelect} disabled={isLoading || disabled || images.length >= maxImages} multiple />

      {/* Images Grid */}
      <div className="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-5 gap-4 md:gap-5">
        {images.map((image, index) => (
          <div
            key={image.id}
            className={cn(
              'relative group aspect-square rounded-xl overflow-hidden bg-gray-100 shadow-md transition-all duration-300 ease-in-out',
              selectionMode ? 'cursor-pointer' : 'cursor-pointer hover:shadow-lg',
              selectedImageIds.has(image.id) && 'ring-4 ring-offset-2 ring-cyan-500'
            )}
            onClick={() => handleImageClick(index)}
          >
            <Image
              src={getRelativeCloudinaryPath(image.url)}
              alt={`תמונת פרופיל ${index + 1}`}
              fill
              className={cn('object-cover transition-transform duration-300', !selectionMode && 'group-hover:scale-105')}
              sizes="(max-width: 640px) 50vw, (max-width: 768px) 33vw, (max-width: 1024px) 25vw, 20vw"
              priority={index < 2}
            />

            {/* Selection Overlay */}
            {selectionMode && (
              <div className="absolute inset-0 bg-black/30 flex items-center justify-center transition-opacity opacity-0 group-hover:opacity-100">
                  {selectedImageIds.has(image.id) 
                      ? <CheckCircle2 className="w-10 h-10 text-white drop-shadow-lg" />
                      : <MinusSquare className="w-10 h-10 text-white/70 drop-shadow-lg" />
                  }
              </div>
            )}

            {/* Controls Overlay (not in selection mode) */}
            {!disabled && !selectionMode && (
              <div className="absolute top-2 right-2 z-10 flex gap-1.5 opacity-85 group-hover:opacity-100 transition-opacity duration-200" onClick={handleControlClick}>
                <Button variant="secondary" size="icon" className={cn('w-8 h-8 rounded-full shadow-md border border-white/30 bg-black/40 text-white hover:bg-black/60 transition-colors', image.isMain ? 'cursor-default' : 'hover:text-yellow-300')} onClick={(e) => handleSetMainImage(image.id, true, e)} disabled={image.isMain || isLoading} title={image.isMain ? 'תמונה ראשית' : 'הפוך לתמונה ראשית'}>
                  <Star className={cn('w-4 h-4 transition-colors', image.isMain ? 'text-yellow-400 fill-yellow-400' : 'text-white')} />
                </Button>
                <Button variant="secondary" size="icon" className="w-8 h-8 rounded-full shadow-md border border-white/30 bg-black/40 text-white hover:bg-red-600 hover:border-red-700 transition-colors" onClick={(e) => requestDelete(image.id, e)} disabled={isLoading} title="מחק תמונה">
                  <Trash2 className="w-4 h-4" />
                </Button>
              </div>
            )}

            {/* Main Image Badge */}
            {image.isMain && !selectionMode && (
              <Badge className="absolute bottom-2 left-2 rounded-full px-2.5 py-0.5 text-xs font-medium shadow-md text-white bg-gradient-to-r from-cyan-500 to-pink-500 border-none">
                ראשי
              </Badge>
            )}
          </div>
        ))}

        {/* Upload Placeholder */}
        {!disabled && !selectionMode && images.length < maxImages && (
          <div onClick={triggerFileInput} className="flex flex-col items-center justify-center text-center p-4 aspect-square rounded-xl border-2 border-dashed border-cyan-300/70 bg-cyan-50/30 hover:bg-cyan-50/60 hover:border-cyan-400 transition-colors duration-300 cursor-pointer group">
            <Upload className="w-8 h-8 text-cyan-500 mb-2 transition-transform group-hover:scale-110" />
            <span className="text-sm font-medium text-cyan-700">העלאת תמונות</span>
            <span className="text-xs text-cyan-600/90 mt-1">עד {getRemainingSlots()} תמונות נוספות</span>
            <span className="text-xs text-cyan-500/80 mt-1">(בחר מספר קבצים)</span>
          </div>
        )}

        {/* Uploading Files Placeholders */}
        {uploadingFiles.map((_, index) => (
          <div key={`uploading-${index}`} className="relative aspect-square rounded-xl overflow-hidden bg-gray-200 shadow-md">
            <div className="absolute inset-0 flex flex-col items-center justify-center"><Loader2 className="w-8 h-8 text-cyan-500 animate-spin mb-2" /><span className="text-xs text-gray-600 text-center px-2">מעלה...</span></div>
            <div className="absolute bottom-0 left-0 right-0 bg-cyan-500 h-1 animate-pulse"></div>
          </div>
        ))}
      </div>

      {/* Empty States */}
      {images.length === 0 && uploadingFiles.length === 0 && !disabled && !selectionMode && (
        <div className="text-center py-16 mt-6 bg-gradient-to-br from-cyan-50/20 to-pink-50/20 rounded-xl border border-dashed border-gray-300">
          <Camera className="w-12 h-12 mx-auto text-gray-400/80" />
          <p className="mt-4 text-gray-600 font-medium">אין עדיין תמונות בפרופיל</p>
          <p className="text-sm text-gray-500 mt-1 px-4">תמונות טובות הן הרושם הראשוני שלכם. כדאי להעלות תמונות.</p>
        </div>
      )}
      {images.length === 0 && disabled && (
         <div className="text-center py-16 mt-6 bg-gray-50/50 rounded-xl border border-gray-200">
           <Camera className="w-12 h-12 mx-auto text-gray-400" />
           <p className="mt-4 text-gray-500 font-medium">לא הועלו תמונות לפרופיל זה.</p>
         </div>
      )}

      {/* Delete Confirmation Dialog (for single delete) */}
      <Dialog open={deleteConfirmOpen} onOpenChange={setDeleteConfirmOpen}>
        <DialogContent className="sm:max-w-md bg-white/95 backdrop-blur-md rounded-2xl shadow-2xl border-none p-6" dir="rtl">
          <DialogHeader>
            <DialogTitle className="text-lg font-semibold text-gray-800">אישור מחיקת תמונה</DialogTitle>
            <DialogDescription className="text-sm text-gray-600 mt-2">האם למחוק את התמונה לצמיתות? לא ניתן לשחזר פעולה זו.</DialogDescription>
          </DialogHeader>
          <DialogFooter className="mt-6 flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2 sm:space-x-reverse gap-2">
            <Button type="button" variant="outline" onClick={() => setDeleteConfirmOpen(false)} disabled={isLoading} className="rounded-full px-5">ביטול</Button>
            <Button type="button" variant="destructive" onClick={confirmDelete} disabled={isLoading} className="rounded-full px-5">
              {isProcessing ? <Loader2 className="w-4 h-4 ml-2 animate-spin" /> : <Trash2 className="w-4 h-4 ml-2" />}
              <span>מחק</span>
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>

      {/* Image Viewer Dialog */}
      {/* (Viewer implementation remains the same) */}
      <Dialog open={showImageViewer} onOpenChange={setShowImageViewer}>
        <DialogContent className="p-0 m-0 w-screen h-screen max-w-none sm:max-w-full sm:h-full bg-black/90 backdrop-blur-sm border-none rounded-none flex items-center justify-center outline-none" aria-describedby={undefined}>
            <Button variant="ghost" size="icon" className="absolute top-4 left-4 z-50 bg-black/40 hover:bg-black/60 text-white rounded-full w-10 h-10 sm:w-12 sm:h-12 transition-colors" onClick={closeImageViewer} aria-label="סגור תצוגת תמונה"><X className="w-6 h-6" /></Button>
            {selectedViewerIndex !== null && images[selectedViewerIndex] && (
                <div className="relative w-full h-full flex items-center justify-center">
                    <div className="relative w-[95%] h-[85%] sm:w-[90%] sm:h-[90%]"><Image src={getRelativeCloudinaryPath(images[selectedViewerIndex].url)} alt={`תצוגה מוגדלת של תמונה ${selectedViewerIndex + 1}`} fill className="object-contain select-none" sizes="90vw" priority /></div>
                    <div className="absolute top-0 left-0 w-full h-full pointer-events-none">
                        {images.length > 1 && (<>
                            <Button variant="ghost" size="icon" className="absolute right-2 sm:right-4 top-1/2 transform -translate-y-1/2 z-40 bg-black/40 hover:bg-black/60 text-white rounded-full w-10 h-10 sm:w-12 sm:h-12 transition-colors pointer-events-auto" onClick={(e) => { e.stopPropagation(); handlePreviousImage(); }} disabled={selectedViewerIndex === 0} aria-label="התמונה הקודמת"><ChevronRight className="w-7 h-7" /></Button>
                            <Button variant="ghost" size="icon" className="absolute left-2 sm:left-4 top-1/2 transform -translate-y-1/2 z-40 bg-black/40 hover:bg-black/60 text-white rounded-full w-10 h-10 sm:w-12 sm:h-12 transition-colors pointer-events-auto" onClick={(e) => { e.stopPropagation(); handleNextImage(); }} disabled={selectedViewerIndex === images.length - 1} aria-label="התמונה הבאה"><ChevronLeft className="w-7 h-7" /></Button>
                        </>)}
                        {!disabled && (
                            <div className="absolute top-4 right-4 z-50 flex flex-col sm:flex-row gap-2 pointer-events-auto">
                                {!images[selectedViewerIndex].isMain && <Button variant="secondary" className="rounded-full bg-white/70 backdrop-blur-sm shadow-md hover:bg-white/90 text-gray-800 px-3 py-1.5 text-xs sm:text-sm border border-white/20 flex items-center gap-1.5" onClick={(e) => handleSetMainImage(images[selectedViewerIndex].id, true, e)} size="sm" disabled={isLoading}><Star className="w-4 h-4" /><span>הפוך לראשי</span></Button>}
                                <Button variant="destructive" className="rounded-full bg-red-600/80 hover:bg-red-700 text-white px-3 py-1.5 text-xs sm:text-sm shadow-md border-none flex items-center gap-1.5" onClick={(e) => requestDelete(images[selectedViewerIndex].id, e)} size="sm" disabled={isLoading}><Trash2 className="w-4 h-4" /><span>מחק תמונה</span></Button>
                            </div>
                        )}
                        {images.length > 0 && <div className="absolute bottom-4 left-1/2 transform -translate-x-1/2 bg-black/60 text-white px-3 py-1 rounded-full text-xs sm:text-sm font-medium select-none">{selectedViewerIndex + 1} / {images.length}</div>}
                    </div>
                </div>
            )}
        </DialogContent>
      </Dialog>
    </div>
  );
};

export default PhotosSection;
--- End of Content for PhotosSection.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\app\components\profile\sections\PreferencesSection.tsx
--------------------------------------------------------------------------------
Content:
// src/app/(authenticated)/profile/components/dashboard/PreferencesSection.tsx
"use client";
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from "@/components/ui/tooltip";
import { Info, XCircle } from "lucide-react";
import React, { useState, useEffect } from "react";
import { Card, CardHeader, CardTitle, CardContent } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import {
  Pencil,
  Save,
  X,
  FileText,
  SlidersHorizontal,
  MapPin,
  GraduationCap,
  Users,
  Sparkles,
  Heart,
  Briefcase,
  Shield,
  Palette,
  Smile,
} from "lucide-react";
import { UserProfile } from "@/types/next-auth";
import { cn } from "@/lib/utils";
import {
  Gender,
  ServiceType,
  HeadCoveringType,
  KippahType,
  ReligiousJourney,
} from "@prisma/client";
import Autocomplete from "react-google-autocomplete";

interface PreferencesSectionProps {
  profile: UserProfile | null;
  isEditing: boolean;
  viewOnly?: boolean;
  setIsEditing: (value: boolean) => void;
  onChange: (data: Partial<UserProfile>) => void;
}

// --- Options for multi-select fields ---
const religiousLevelOptions = [
  { value: "charedi", label: "חרדי/ת" },
  { value: "charedi_modern", label: "חרדי/ת מודרני/ת" },
  { value: "dati_leumi_torani", label: "דתי/ה לאומי/ת תורני/ת" },
  { value: "dati_leumi_liberal", label: "דתי/ה לאומי/ת ליברלי/ת" },
  { value: "dati_leumi_standard", label: "דתי/ה לאומי/ת (סטנדרטי)" },
  { value: "masorti_strong", label: "מסורתי/ת (קרוב/ה לדת)" },
  { value: "masorti_light", label: "מסורתי/ת (קשר קל למסורת)" },
  { value: "secular_traditional_connection", label: "חילוני/ת עם זיקה למסורת" },
  { value: "secular", label: "חילוני/ת" },
  { value: "spiritual_not_religious", label: "רוחני/ת (לאו דווקא דתי/ה)" },
  { value: "other", label: "אחר (נא לפרט ב'אודות')" },
  { value: "לא משנה", label: "ללא העדפה / גמיש" },
];

const preferredReligiousJourneyOptions = [
    { value: "BORN_INTO_CURRENT_LIFESTYLE", label: "גדל/ה בסביבה דומה" },
    { value: "BORN_SECULAR", label: "גדל/ה בסביבה חילונית" },
    { value: "BAAL_TESHUVA", label: "חוזר/ת בתשובה" },
    { value: "DATLASH", label: "יצא/ה בשאלה (דתל\"ש)" },
    { value: "CONVERT", label: "גר/ה / גיורת" },
    { value: "IN_PROCESS", label: "בתהליך שינוי" },
    { value: "no_preference", label: "ללא העדפה / גמיש" },
];

const educationPreferenceOptions = [
  { value: "תיכונית", label: "תיכונית" },
  { value: "על תיכונית", label: "על תיכונית" },
  { value: "אקדמית", label: "אקדמית" },
  { value: "תורנית", label: "תורנית" },
  { value: "ללא העדפה", label: "ללא העדפה" },
];

const occupationPreferenceOptions = [
  { value: "עובד/ת", label: "עובד/ת" },
  { value: "סטודנט/ית", label: "סטודנט/ית" },
  { value: "אברך/כולל", label: "אברך/כולל" },
  { value: "עצמאי/ת", label: "עצמאי/ת" },
  { value: "שירות צבאי/לאומי", label: "שירות צבאי/לאומי" },
  { value: "ללא העדפה", label: "ללא העדפה" },
];

const preferredShomerNegiahOptions = [
  { value: "yes", label: "כן, חשוב לי" },
  { value: "no", label: "לא, אין העדפה" },
  { value: "flexible", label: "גמיש/תלוי באדם" },
];

const preferredPartnerHasChildrenOptions = [
  { value: "yes_ok", label: "כן, זה בסדר גמור" },
  { value: "no_preferred", label: "מעדיפ/ה שלא יהיו" },
  { value: "does_not_matter", label: "לא משנה לי" },
];

const preferredOriginOptions = [
  { value: "ashkenazi", label: "אשכנזי/ה" },
  { value: "sephardi", label: "ספרדי/ה" },
  { value: "mizrachi", label: "מזרחי/ה" },
  { value: "temani", label: "תימני/ה" },
  { value: "mixed", label: "מעורב/ת" },
  { value: "ethiopian", label: "אתיופי/ה" },
  { value: "no_preference", label: "ללא העדפה מיוחדת" },
];

const preferredAliyaStatusOptions = [
  { value: "oleh", label: "עולה חדש/ה" },
  { value: "tzabar", label: "צבר/ית" },
  { value: "no_preference", label: "ללא העדפה" },
];

const maritalStatusOptions = [
  { value: "single", label: "רווק/ה" },
  { value: "divorced", label: "גרוש/ה" },
  { value: "widowed", label: "אלמן/ה" },
  { value: "annulled", label: "נישואין שבוטלו" },
  { value: "any", label: "כל האפשרויות פתוחות" },
];

const serviceTypeOptions = [
  { value: ServiceType.MILITARY_COMBATANT, label: "צבאי - לוחם/ת" },
  { value: ServiceType.MILITARY_SUPPORT, label: "צבאי - תומכ/ת לחימה" },
  { value: ServiceType.MILITARY_OFFICER, label: "צבאי - קצונה" },
  {
    value: ServiceType.MILITARY_INTELLIGENCE_CYBER_TECH,
    label: "צבאי - מודיעין/סייבר/טכנולוגי",
  },
  { value: ServiceType.NATIONAL_SERVICE_ONE_YEAR, label: "שירות לאומי - שנה" },
  {
    value: ServiceType.NATIONAL_SERVICE_TWO_YEARS,
    label: "שירות לאומי - שנתיים",
  },
  { value: ServiceType.HESDER_YESHIVA, label: "ישיבת הסדר" },
  {
    value: ServiceType.YESHIVA_ONLY_POST_HS,
    label: "ישיבה גבוהה / מדרשה (ללא שירות)",
  },
  {
    value: ServiceType.PRE_MILITARY_ACADEMY_AND_SERVICE,
    label: "מכינה קדם-צבאית ושירות",
  },
  { value: ServiceType.EXEMPTED, label: "פטור משירות" },
  { value: ServiceType.CIVILIAN_SERVICE, label: "שירות אזרחי" },
  { value: ServiceType.OTHER, label: "אחר / לא רלוונטי" },
  { value: "no_preference", label: "ללא העדפה / לא משנה" },
];

const headCoveringOptions = [
  { value: HeadCoveringType.FULL_COVERAGE, label: "כיסוי ראש מלא" },
  { value: HeadCoveringType.PARTIAL_COVERAGE, label: "כיסוי ראש חלקי" },
  { value: HeadCoveringType.HAT_BERET, label: "כובע / ברט" },
  {
    value: HeadCoveringType.SCARF_ONLY_SOMETIMES,
    label: "מטפחת (רק באירועים/בית כנסת)",
  },
  { value: HeadCoveringType.NONE, label: "ללא כיסוי ראש" },
  { value: "any", label: "כל האפשרויות פתוחות" },
];

const kippahTypeOptions = [
  { value: KippahType.BLACK_VELVET, label: "קטיפה שחורה" },
  { value: KippahType.KNITTED_SMALL, label: "סרוגה קטנה" },
  { value: KippahType.KNITTED_LARGE, label: "סרוגה גדולה" },
  { value: KippahType.CLOTH, label: "בד" },
  { value: KippahType.BRESLEV, label: "ברסלב (לבנה גדולה)" },
  { value: KippahType.NONE_AT_WORK_OR_CASUAL, label: "לא בעבודה / ביומיום" },
  { value: KippahType.NONE_USUALLY, label: "לרוב לא חובש" },
  { value: KippahType.OTHER, label: "אחר" },
  { value: "any", label: "כל האפשרויות פתוחות" },
];

const characterTraitsOptions = [
  { value: "empathetic", label: "אמפתי/ת", icon: Heart },
  { value: "driven", label: "שאפתן/ית", icon: Briefcase },
  { value: "optimistic", label: "אופטימי/ת", icon: Smile },
  { value: "family_oriented", label: "משפחתי/ת", icon: Users },
  { value: "intellectual", label: "אינטלקטואל/ית", icon: GraduationCap },
  { value: "organized", label: "מאורגנ/ת", icon: Palette },
  { value: "calm", label: "רגוע/ה", icon: Heart },
  { value: "humorous", label: "בעל/ת חוש הומור", icon: Smile },
  { value: "sociable", label: "חברותי/ת", icon: Users },
  { value: "sensitive", label: "רגיש/ה", icon: Heart },
  { value: "independent", label: "עצמאי/ת", icon: MapPin },
  { value: "creative", label: "יצירתי/ת", icon: Palette },
  { value: "honest", label: "כן/ה וישר/ה", icon: Shield },
  { value: "responsible", label: "אחראי/ת", icon: Shield },
  { value: "easy_going", label: "זורם/ת וקליל/ה", icon: Smile },
  { value: "no_strong_preference", label: "ללא העדפה חזקה", icon: Sparkles },
];

const hobbiesOptions = [
  { value: "travel", label: "טיולים", icon: MapPin },
  { value: "sports", label: "ספורט", icon: Briefcase },
  { value: "reading", label: "קריאה", icon: GraduationCap },
  { value: "cooking_baking", label: "בישול/אפיה", icon: Palette },
  { value: "music_playing_instrument", label: "מוזיקה/נגינה", icon: Palette },
  { value: "art_crafts", label: "אומנות/יצירה", icon: Palette },
  { value: "volunteering", label: "התנדבות", icon: Heart },
  { value: "learning_courses", label: "למידה/קורסים", icon: GraduationCap },
  { value: "board_games_puzzles", label: "משחקי קופסא/פאזלים", icon: Smile },
  { value: "movies_theater", label: "סרטים/תיאטרון", icon: Smile },
  { value: "dancing", label: "ריקוד", icon: Users },
  { value: "writing", label: "כתיבה", icon: GraduationCap },
  { value: "nature_hiking", label: "טבע/טיולים רגליים", icon: MapPin },
  { value: "photography", label: "צילום", icon: Palette },
  { value: "no_strong_preference", label: "ללא העדפה חזקה", icon: Sparkles },
];

const PreferencesSection: React.FC<PreferencesSectionProps> = ({
  profile,
  isEditing,
  viewOnly = false,
  setIsEditing,
  onChange,
}) => {
  const [formData, setFormData] = useState<Partial<UserProfile>>({});
  const [initialData, setInitialData] = useState<Partial<UserProfile>>({});
  const [locationInputValue, setLocationInputValue] = useState('');
  const [originInputValue, setOriginInputValue] = useState('');

  useEffect(() => {
    if (profile) {
      const nullToUndefined = <T,>(value: T | null): T | undefined =>
        value === null ? undefined : value;

      const newFormData: Partial<UserProfile> = {
        ...profile,
        preferredAgeMin: nullToUndefined(profile.preferredAgeMin),
        preferredAgeMax: nullToUndefined(profile.preferredAgeMax),
        preferredHeightMin: nullToUndefined(profile.preferredHeightMin),
        preferredHeightMax: nullToUndefined(profile.preferredHeightMax),
        matchingNotes: profile.matchingNotes ?? "",
        contactPreference: nullToUndefined(profile.contactPreference),
        preferredShomerNegiah: nullToUndefined(profile.preferredShomerNegiah),
        preferredPartnerHasChildren: nullToUndefined(
          profile.preferredPartnerHasChildren
        ),
        preferredAliyaStatus: nullToUndefined(profile.preferredAliyaStatus),
        preferredLocations: profile.preferredLocations ?? [],
        preferredReligiousLevels: profile.preferredReligiousLevels ?? [],
        preferredEducation: profile.preferredEducation ?? [],
        preferredOccupations: profile.preferredOccupations ?? [],
        preferredMaritalStatuses: profile.preferredMaritalStatuses ?? [],
        preferredOrigins: profile.preferredOrigins ?? [],
        preferredServiceTypes: profile.preferredServiceTypes ?? [],
        preferredHeadCoverings: profile.preferredHeadCoverings ?? [],
        preferredKippahTypes: profile.preferredKippahTypes ?? [],
        preferredCharacterTraits: profile.preferredCharacterTraits ?? [],
        preferredHobbies: profile.preferredHobbies ?? [],
        preferredReligiousJourneys: profile.preferredReligiousJourneys ?? [],
      };
      setFormData(newFormData);
      setInitialData(newFormData);
    }
  }, [profile]);

  useEffect(() => {
    if (!isEditing && initialData) {
      setFormData(initialData);
    }
  }, [isEditing, initialData]);

  const handleInputChange = (
    e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>
  ) => {
    const { name, value, type } = e.target;
    const field = name as keyof UserProfile;

    setFormData((prev) => {
      let processedValue: string | number | undefined;
      if (type === "number") {
        const num = parseInt(value, 10);
        processedValue = isNaN(num) ? undefined : num;
      } else {
        processedValue = value === "" ? undefined : value;
      }
      return { ...prev, [field]: processedValue };
    });
  };

  const handleSelectChange = (field: keyof UserProfile, value: string) => {
    setFormData((prev) => ({
      ...prev,
      [field]:
        value === "" ||
        value === "לא_משנה" ||
        value === "any" ||
        value === "no_preference"
          ? undefined
          : (value as UserProfile[typeof field]),
    }));
  };

  const handleMultiSelectChange = (field: keyof UserProfile, value: string) => {
    setFormData((prev) => {
      const currentValues =
        (Array.isArray(prev[field]) ? (prev[field] as string[]) : []) ?? [];
      let newValues;
      if (
        value === "any" ||
        value === "no_preference" ||
        value === "לא_משנה" ||
        value === "no_strong_preference"
      ) {
        newValues = currentValues.includes(value) ? [] : [value];
      } else {
        const filteredValues = currentValues.filter(
          (v) =>
            v !== "any" &&
            v !== "no_preference" &&
            v !== "לא_משנה" &&
            v !== "no_strong_preference"
        );
        newValues = filteredValues.includes(value)
          ? filteredValues.filter((v) => v !== value)
          : [...filteredValues, value];
      }
      return { ...prev, [field]: newValues };
    });
  };

  const handleAddItemToArray = (field: keyof UserProfile, value: string) => {
      if (!value) return;
      setFormData(prev => {
          const currentValues = (Array.isArray(prev[field]) ? prev[field] as string[] : []) ?? [];
          if (currentValues.includes(value)) {
              return prev; // Avoid duplicates
          }
          return { ...prev, [field]: [...currentValues, value] };
      });
  };

  const handleRemoveItemFromArray = (field: keyof UserProfile, value: string) => {
      setFormData(prev => {
          const currentValues = (Array.isArray(prev[field]) ? prev[field] as string[] : []) ?? [];
          return { ...prev, [field]: currentValues.filter(item => item !== value) };
      });
  };


  const handleSave = () => {
    const dataToSave = { ...formData };
    onChange(dataToSave);
    setIsEditing(false);
    setInitialData(dataToSave);
  };

  const handleCancel = () => {
    setFormData(initialData);
    setIsEditing(false);
  };

  const renderMultiSelectBadges = (
    fieldValues: string[] | undefined | null,
    options: { value: string; label: string; icon?: React.ElementType }[],
    badgeClass: string = "bg-sky-100 text-sky-700",
    emptyPlaceholder: string = "לא נבחרו פריטים."
  ) => {
    if (!fieldValues || fieldValues.length === 0) {
      return <p className="text-sm text-gray-500 italic">{emptyPlaceholder}</p>;
    }
    return fieldValues.map((value) => {
      const option = options.find((opt) => opt.value === value);
      return option ? (
        <Badge
          key={value}
          variant="secondary"
          className={cn(
            "mr-1 mb-1 text-xs px-2 py-0.5 rounded-full flex items-center",
            badgeClass
          )}
        >
          {option.icon && <option.icon className="w-3 h-3 rtl:ml-1 mr-1" />}
          {option.label}
        </Badge>
      ) : null;
    });
  };

  const getSelectDisplayValue = (
    value: string | undefined | null,
    options: { value: string; label: string }[],
    placeholder: string = "לא צוין."
  ) => {
    if (!value)
      return <span className="text-gray-500 italic">{placeholder}</span>;
    const option = options.find((opt) => opt.value === value);
    return option ? (
      option.label
    ) : (
      <span className="text-gray-500 italic">{placeholder}</span>
    );
  };

  return (
    <div className="relative" dir="rtl">
      <div className="sticky top-0 z-10 bg-gradient-to-b from-white via-white/95 to-white/0 pt-4 pb-3 backdrop-blur-sm">
        <div className="container mx-auto max-w-screen-xl px-4">
          <div className="flex items-center justify-between">
            <div>
              <h1 className="text-xl md:text-2xl font-bold text-slate-800">
                העדפות התאמה
              </h1>
              <p className="text-sm text-slate-500">
                {isEditing && !viewOnly
                  ? "ערוך/י את העדפותיך למציאת התאמה."
                  : "העדפות שהוגדרו לחיפוש התאמה."}
              </p>
            </div>
            {!viewOnly && (
              <div className="flex gap-2">
                {!isEditing ? (
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={() => setIsEditing(true)}
                    className="rounded-full shadow-sm hover:shadow-md transition-all duration-300 border-cyan-400 text-cyan-700 hover:bg-cyan-50"
                  >
                    <Pencil className="w-3.5 h-3.5 ml-1.5" />
                    עריכה
                  </Button>
                ) : (
                  <>
                    <Button
                      variant="outline"
                      size="sm"
                      onClick={handleCancel}
                      className="rounded-full shadow-sm hover:shadow-md transition-all duration-300 border-gray-300 text-gray-700 hover:bg-gray-50"
                    >
                      <X className="w-3.5 h-3.5 ml-1.5" />
                      ביטול
                    </Button>
                    <Button
                      variant="default"
                      size="sm"
                      onClick={handleSave}
                      className="rounded-full shadow-sm hover:shadow-md transition-all duration-300 bg-cyan-600 hover:bg-cyan-700 text-white"
                    >
                      <Save className="w-3.5 h-3.5 ml-1.5" />
                      שמירה
                    </Button>
                  </>
                )}
              </div>
            )}
          </div>
        </div>
      </div>

      <div className="container mx-auto max-w-screen-xl py-6 px-4">
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
          {/* --- Column 1 --- */}
          <div className="space-y-6">
            <Card className="bg-white/80 backdrop-blur-md rounded-2xl shadow-lg border border-gray-200/40 overflow-hidden">
              <CardHeader className="bg-gradient-to-r from-slate-50/40 to-gray-100/40 border-b border-gray-200/50 p-4 flex items-center space-x-2 rtl:space-x-reverse">
                <FileText className="w-5 h-5 text-slate-600" />
                <CardTitle className="text-base font-semibold text-gray-700">
                  תיאור כללי והעדפות קשר
                </CardTitle>
              </CardHeader>
              <CardContent className="p-4 md:p-6 space-y-5">
                <div>
              <div className="flex items-center gap-1.5">
    <Label htmlFor="matchingNotes" className="text-sm font-medium text-gray-700">
        תיאור כללי על המועמד/ת המבוקש/ת
    </Label>
    <TooltipProvider delayDuration={100}>
        <Tooltip>
            <TooltipTrigger type="button"><Info className="w-4 h-4 text-gray-400 hover:text-gray-600" /></TooltipTrigger>
            <TooltipContent side="top" className="max-w-xs text-center">
                <p>זהו אחד השדות החשובים ביותר! תאר/י במילים שלך את סוג האדם שאת/ה מחפש/ת. התיאור הזה יעזור לשדכנים להבין את הראש שלך מעבר לנתונים היבשים.</p>
            </TooltipContent>
        </Tooltip>
    </TooltipProvider>
</div>
                  {isEditing ? (
                    <Textarea
                      id="matchingNotes"
                      name="matchingNotes"
                      value={formData.matchingNotes || ""}
                      onChange={handleInputChange}
                      placeholder="פרט/י על סוג האדם שאת/ה מחפש/ת, תכונות חשובות, ציפיות וכו'..."
                      className="text-sm focus:ring-cyan-500 min-h-[100px] rounded-lg"
                      rows={4}
                    />
                  ) : (
                    <p className="mt-1 text-sm text-gray-700 whitespace-pre-wrap min-h-[60px] bg-slate-50/70 p-3 rounded-lg border border-slate-200/50">
                      {formData.matchingNotes || (
                        <span className="text-gray-500 italic">
                          לא הוזן תיאור.
                        </span>
                      )}
                    </p>
                  )}
                </div>
                <div>
                  <Label
                    htmlFor="contactPreference"
                    className="block mb-1.5 text-xs font-medium text-gray-600"
                  >
                    אופן יצירת קשר מועדף (לאחר אישור הצעה)
                  </Label>
                  {isEditing ? (
                    <Select
                      name="contactPreference"
                      value={formData.contactPreference || ""}
                      onValueChange={(value: string) =>
                        handleSelectChange("contactPreference", value)
                      }
                    >
                      <SelectTrigger
                        id="contactPreference"
                        className="h-9 text-sm focus:ring-cyan-500"
                      >
                        <SelectValue placeholder="בחר/י אפשרות..." />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="direct">ישירות</SelectItem>
                        <SelectItem value="matchmaker">דרך השדכן/ית</SelectItem>
                        <SelectItem value="both">שתי האפשרויות</SelectItem>
                      </SelectContent>
                    </Select>
                  ) : (
                    <p className="text-sm text-gray-800 font-medium mt-1">
                      {getSelectDisplayValue(
                        formData.contactPreference,
                        [
                          { value: "direct", label: "ישירות" },
                          { value: "matchmaker", label: "דרך השדכן/ית" },
                          { value: "both", label: "שתי האפשרויות" },
                        ],
                        "לא צוין"
                      )}
                    </p>
                  )}
                </div>
              </CardContent>
            </Card>

            <Card className="bg-white/80 backdrop-blur-md rounded-2xl shadow-lg border border-gray-200/40 overflow-hidden">
              <CardHeader className="bg-gradient-to-r from-indigo-50/40 to-purple-50/40 border-b border-gray-200/50 p-4 flex items-center space-x-2 rtl:space-x-reverse">
                <SlidersHorizontal className="w-5 h-5 text-indigo-700" />
                <CardTitle className="text-base font-semibold text-gray-700">
                  העדפות גיל וגובה
                </CardTitle>
              </CardHeader>
              <CardContent className="p-4 md:p-6">
                <div className="grid grid-cols-1 sm:grid-cols-2 gap-x-6 gap-y-5">
                  <div>
                <div className="flex items-center gap-1.5">
    <Label className="text-xs font-medium text-gray-600">
      טווח גילאים מועדף
    </Label>
    <TooltipProvider delayDuration={100}>
        <Tooltip>
            <TooltipTrigger type="button"><Info className="w-4 h-4 text-gray-400 hover:text-gray-600" /></TooltipTrigger>
            <TooltipContent side="top">
                <p>הגדרת טווח גילאים רחב יותר תגדיל את כמות ההצעות שתקבל/י.</p>
            </TooltipContent>
        </Tooltip>
    </TooltipProvider>
</div>
                    <div className="flex items-center gap-2">
                      <Input
                        type="number"
                        name="preferredAgeMin"
                        placeholder="מגיל"
                        aria-label="גיל מינימלי מועדף"
                        value={formData.preferredAgeMin ?? ""}
                        onChange={handleInputChange}
                        disabled={!isEditing}
                        className="h-9 text-sm focus:ring-cyan-500 disabled:bg-gray-100/70"
                      />
                      <span className="text-gray-500">-</span>
                      <Input
                        type="number"
                        name="preferredAgeMax"
                        placeholder="עד גיל"
                        aria-label="גיל מקסימלי מועדף"
                        value={formData.preferredAgeMax ?? ""}
                        onChange={handleInputChange}
                        disabled={!isEditing}
                        className="h-9 text-sm focus:ring-cyan-500 disabled:bg-gray-100/70"
                      />
                    </div>
                    {!isEditing &&
                      !formData.preferredAgeMin &&
                      !formData.preferredAgeMax && (
                        <p className="text-xs text-gray-500 italic mt-1">
                          לא הוגדר טווח גילאים.
                        </p>
                      )}
                  </div>
                  <div>
                    <Label className="block mb-1.5 text-xs font-medium text-gray-600">
                      טווח גבהים מועדף (סמ)
                    </Label>
                    <div className="flex items-center gap-2">
                      <Input
                        type="number"
                        name="preferredHeightMin"
                        placeholder="מ-"
                        aria-label="גובה מינימלי מועדף בסנטימטרים"
                        value={formData.preferredHeightMin ?? ""}
                        onChange={handleInputChange}
                        disabled={!isEditing}
                        className="h-9 text-sm focus:ring-cyan-500 disabled:bg-gray-100/70"
                      />
                      <span className="text-gray-500">-</span>
                      <Input
                        type="number"
                        name="preferredHeightMax"
                        placeholder="עד-"
                        aria-label="גובה מקסימלי מועדף בסנטימטרים"
                        value={formData.preferredHeightMax ?? ""}
                        onChange={handleInputChange}
                        disabled={!isEditing}
                        className="h-9 text-sm focus:ring-cyan-500 disabled:bg-gray-100/70"
                      />
                    </div>
                    {!isEditing &&
                      !formData.preferredHeightMin &&
                      !formData.preferredHeightMax && (
                        <p className="text-xs text-gray-500 italic mt-1">
                          לא הוגדר טווח גבהים.
                        </p>
                      )}
                  </div>
                </div>
              </CardContent>
            </Card>
          </div>

          {/* --- Column 2 --- */}
          <div className="space-y-6">
            <Card className="bg-white/80 backdrop-blur-md rounded-2xl shadow-lg border border-gray-200/40 overflow-hidden">
              <CardHeader className="bg-gradient-to-r from-sky-50/40 to-blue-50/40 border-b border-gray-200/50 p-4 flex items-center space-x-2 rtl:space-x-reverse">
                <MapPin className="w-5 h-5 text-sky-700" />
                <CardTitle className="text-base font-semibold text-gray-700">
                  מיקום, רמה דתית ואורח חיים
                </CardTitle>
              </CardHeader>
              <CardContent className="p-4 md:p-6 space-y-6">
                <div>
                  <Label className="block mb-2 text-xs font-medium text-gray-600">
                    אזורי מגורים מועדפים
                  </Label>
                  {isEditing ? (
                     <div className="space-y-2">
                      <div className="flex flex-wrap gap-1.5">
                        {(formData.preferredLocations || []).map(loc => (
                          <Badge
                            key={loc}
                            variant="secondary"
                            className="bg-sky-100 text-sky-800 rounded-full px-2 py-1 text-sm font-normal"
                          >
                            <span>{loc}</span>
                            <button
                              type="button"
                              className="mr-1.5 rtl:mr-0 rtl:ml-1.5 text-sky-600 hover:text-sky-900"
                              onClick={() => handleRemoveItemFromArray('preferredLocations', loc)}
                            >
                              <XCircle className="w-3.5 h-3.5" />
                            </button>
                          </Badge>
                        ))}
                      </div>
                       <Autocomplete
                          apiKey={process.env.NEXT_PUBLIC_GOOGLE_MAPS_API_KEY}
                          value={locationInputValue}
                          onChange={(e: React.ChangeEvent<HTMLInputElement>) => setLocationInputValue(e.target.value)}
                          onPlaceSelected={(place) => {
                            const cityComponent = place.address_components?.find(
                              (component) => component.types.includes('locality')
                            );
                            const selectedCity = cityComponent?.long_name || place.formatted_address || '';
                            handleAddItemToArray('preferredLocations', selectedCity);
                            setLocationInputValue('');
                          }}
                          options={{
                            types: ['(cities)'],
                            componentRestrictions: { country: 'il' },
                          }}
                          className="w-full h-9 text-sm p-2 border border-gray-300 rounded-md focus:ring-cyan-500 focus:border-cyan-500"
                          placeholder="הוסף/י עיר..."
                        />
                    </div>
                  ) : (
                    <div className="mt-1 flex flex-wrap gap-1.5">
                        {(!formData.preferredLocations || formData.preferredLocations.length === 0) ? (
                            <p className="text-sm text-gray-500 italic">לא נבחרו אזורי מגורים.</p>
                        ) : (
                            formData.preferredLocations.map(loc => (
                                <Badge key={loc} variant="secondary" className="mr-1 mb-1 bg-sky-100 text-sky-700 text-xs px-2 py-0.5 rounded-full">
                                    {loc}
                                </Badge>
                            ))
                        )}
                    </div>
                  )}
                </div>
                <div>
                 <div className="flex items-center gap-1.5">
    <Label className="text-xs font-medium text-gray-600">
      רמות דתיות מועדפות
    </Label>
    <TooltipProvider delayDuration={100}>
        <Tooltip>
            <TooltipTrigger type="button"><Info className="w-4 h-4 text-gray-400 hover:text-gray-600" /></TooltipTrigger>
            <TooltipContent side="top" className="max-w-xs text-center">
                <p>מומלץ לבחור 1-3 רמות שמתאימות לך. בחירה רחבה מדי עלולה להוביל להצעות פחות מדויקות.</p>
            </TooltipContent>
        </Tooltip>
    </TooltipProvider>
</div>
                  {isEditing ? (
                    <div className="flex flex-wrap gap-2">
                      {religiousLevelOptions.map((level) => (
                        <Button
                          key={level.value}
                          type="button"
                          variant={
                            (formData.preferredReligiousLevels || []).includes(
                              level.value
                            )
                              ? "default"
                              : "outline"
                          }
                          size="sm"
                          onClick={() =>
                            handleMultiSelectChange(
                              "preferredReligiousLevels",
                              level.value
                            )
                          }
                          className={cn(
                            "rounded-full text-xs px-3 py-1.5 transition-all",
                            (formData.preferredReligiousLevels || []).includes(
                              level.value
                            )
                              ? "bg-pink-500 hover:bg-pink-600 text-white border-pink-500"
                              : "border-gray-300 text-gray-600 hover:bg-gray-50 hover:border-gray-400"
                          )}
                        >
                          {level.label}
                        </Button>
                      ))}
                    </div>
                  ) : (
                    <div className="mt-1 flex flex-wrap gap-1.5">
                      {renderMultiSelectBadges(
                        formData.preferredReligiousLevels,
                        religiousLevelOptions,
                        "bg-pink-100 text-pink-700",
                        "לא נבחרו רמות דתיות."
                      )}
                    </div>
                  )}
                </div>
                {/* START OF CHANGE: New Religious Journey Preference */}
                <div>
                  <Label className="block mb-2 text-xs font-medium text-gray-600">
                    העדפה לגבי מסע/רקע דתי
                  </Label>
                  {isEditing ? (
                    <div className="flex flex-wrap gap-2">
                      {preferredReligiousJourneyOptions.map((opt) => (
                        <Button
                          key={opt.value}
                          type="button"
                          variant={
                            (formData.preferredReligiousJourneys || []).includes(
                              opt.value as ReligiousJourney
                            )
                              ? "default"
                              : "outline"
                          }
                          size="sm"
                          onClick={() =>
                            handleMultiSelectChange(
                              "preferredReligiousJourneys",
                              opt.value
                            )
                          }
                          className={cn(
                            "rounded-full text-xs px-3 py-1.5 transition-all",
                            (formData.preferredReligiousJourneys || []).includes(
                              opt.value as ReligiousJourney
                            )
                              ? "bg-cyan-500 hover:bg-cyan-600 text-white border-cyan-500"
                              : "border-gray-300 text-gray-600 hover:bg-gray-50 hover:border-gray-400"
                          )}
                        >
                          {opt.label}
                        </Button>
                      ))}
                    </div>
                  ) : (
                    <div className="mt-1 flex flex-wrap gap-1.5">
                      {renderMultiSelectBadges(
                        formData.preferredReligiousJourneys as string[],
                        preferredReligiousJourneyOptions,
                        "bg-cyan-100 text-cyan-700",
                        "לא נבחרו העדפות רקע דתי."
                      )}
                    </div>
                  )}
                </div>
                {/* END OF CHANGE */}
                <div>
                  <Label
                    htmlFor="preferredShomerNegiah"
                    className="block mb-1.5 text-xs font-medium text-gray-600"
                  >
                    שמירת נגיעה אצל הצד השני
                  </Label>
                  {isEditing ? (
                    <Select
                      name="preferredShomerNegiah"
                      value={formData.preferredShomerNegiah || ""}
                      onValueChange={(value) =>
                        handleSelectChange("preferredShomerNegiah", value)
                      }
                    >
                      <SelectTrigger
                        id="preferredShomerNegiah"
                        className="h-9 text-sm focus:ring-cyan-500"
                      >
                        <SelectValue placeholder="בחר/י העדפה..." />
                      </SelectTrigger>
                      <SelectContent>
                        {preferredShomerNegiahOptions.map((opt) => (
                          <SelectItem key={opt.value} value={opt.value}>
                            {opt.label}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  ) : (
                    <p className="text-sm text-gray-800 font-medium mt-1">
                      {getSelectDisplayValue(
                        formData.preferredShomerNegiah,
                        preferredShomerNegiahOptions
                      )}
                    </p>
                  )}
                </div>
                {profile?.gender === Gender.MALE && (
                  <div>
                    <Label className="block mb-2 text-xs font-medium text-gray-600">
                      העדפת כיסוי ראש לבת הזוג
                    </Label>
                    {isEditing ? (
                      <div className="flex flex-wrap gap-2">
                        {headCoveringOptions.map((opt) => (
                          <Button
                            key={opt.value}
                            type="button"
                            variant={
                              (formData.preferredHeadCoverings || []).includes(
                                opt.value as HeadCoveringType
                              )
                                ? "default"
                                : "outline"
                            }
                            size="sm"
                            onClick={() =>
                              handleMultiSelectChange(
                                "preferredHeadCoverings",
                                opt.value as HeadCoveringType
                              )
                            }
                            className={cn(
                              "rounded-full text-xs px-3 py-1.5 transition-all",
                              (formData.preferredHeadCoverings || []).includes(
                                opt.value as HeadCoveringType
                              )
                                ? "bg-purple-500 hover:bg-purple-600 text-white border-purple-500"
                                : "border-gray-300 text-gray-600 hover:bg-gray-50 hover:border-gray-400"
                            )}
                          >
                            {opt.label}
                          </Button>
                        ))}
                      </div>
                    ) : (
                      <div className="mt-1 flex flex-wrap gap-1.5">
                        {renderMultiSelectBadges(
                          formData.preferredHeadCoverings as string[],
                          headCoveringOptions,
                          "bg-purple-100 text-purple-700",
                          "לא נבחרו העדפות כיסוי ראש."
                        )}
                      </div>
                    )}
                  </div>
                )}
                {profile?.gender === Gender.FEMALE && (
                  <div>
                    <Label className="block mb-2 text-xs font-medium text-gray-600">
                      העדפת סוג כיפה לבן הזוג
                    </Label>
                    {isEditing ? (
                      <div className="flex flex-wrap gap-2">
                        {kippahTypeOptions.map((opt) => (
                          <Button
                            key={opt.value}
                            type="button"
                            variant={
                              (formData.preferredKippahTypes || []).includes(
                                opt.value as KippahType
                              )
                                ? "default"
                                : "outline"
                            }
                            size="sm"
                            onClick={() =>
                              handleMultiSelectChange(
                                "preferredKippahTypes",
                                opt.value as KippahType
                              )
                            }
                            className={cn(
                              "rounded-full text-xs px-3 py-1.5 transition-all",
                              (formData.preferredKippahTypes || []).includes(
                                opt.value as KippahType
                              )
                                ? "bg-orange-500 hover:bg-orange-600 text-white border-orange-500"
                                : "border-gray-300 text-gray-600 hover:bg-gray-50 hover:border-gray-400"
                            )}
                          >
                            {opt.label}
                          </Button>
                        ))}
                      </div>
                    ) : (
                      <div className="mt-1 flex flex-wrap gap-1.5">
                        {renderMultiSelectBadges(
                          formData.preferredKippahTypes as string[],
                          kippahTypeOptions,
                          "bg-orange-100 text-orange-700",
                          "לא נבחרו העדפות סוג כיפה."
                        )}
                      </div>
                    )}
                  </div>
                )}
              </CardContent>
            </Card>
            <Card className="bg-white/80 backdrop-blur-md rounded-2xl shadow-lg border border-gray-200/40 overflow-hidden">
              <CardHeader className="bg-gradient-to-r from-teal-50/40 to-green-50/40 border-b border-gray-200/50 p-4 flex items-center space-x-2 rtl:space-x-reverse">
                <GraduationCap className="w-5 h-5 text-teal-700" />
                <CardTitle className="text-base font-semibold text-gray-700">
                  השכלה, תעסוקה ושירות
                </CardTitle>
              </CardHeader>
              <CardContent className="p-4 md:p-6 space-y-6">
                <div>
                  <Label className="block mb-2 text-xs font-medium text-gray-600">
                    רמות השכלה מועדפות
                  </Label>
                  {isEditing ? (
                    <div className="flex flex-wrap gap-2">
                      {educationPreferenceOptions.map((edu) => (
                        <Button
                          key={edu.value}
                          type="button"
                          variant={
                            (formData.preferredEducation || []).includes(
                              edu.value
                            )
                              ? "default"
                              : "outline"
                          }
                          size="sm"
                          onClick={() =>
                            handleMultiSelectChange(
                              "preferredEducation",
                              edu.value
                            )
                          }
                          className={cn(
                            "rounded-full text-xs px-3 py-1.5 transition-all",
                            (formData.preferredEducation || []).includes(
                              edu.value
                            )
                              ? "bg-teal-500 hover:bg-teal-600 text-white border-teal-500"
                              : "border-gray-300 text-gray-600 hover:bg-gray-50 hover:border-gray-400"
                          )}
                        >
                          {edu.label}
                        </Button>
                      ))}
                    </div>
                  ) : (
                    <div className="mt-1 flex flex-wrap gap-1.5">
                      {renderMultiSelectBadges(
                        formData.preferredEducation,
                        educationPreferenceOptions,
                        "bg-teal-100 text-teal-700",
                        "לא נבחרו רמות השכלה."
                      )}
                    </div>
                  )}
                </div>
                <div>
                  <Label className="block mb-2 text-xs font-medium text-gray-600">
                    תחומי עיסוק מועדפים
                  </Label>
                  {isEditing ? (
                    <div className="flex flex-wrap gap-2">
                      {occupationPreferenceOptions.map((occ) => (
                        <Button
                          key={occ.value}
                          type="button"
                          variant={
                            (formData.preferredOccupations || []).includes(
                              occ.value
                            )
                              ? "default"
                              : "outline"
                          }
                          size="sm"
                          onClick={() =>
                            handleMultiSelectChange(
                              "preferredOccupations",
                              occ.value
                            )
                          }
                          className={cn(
                            "rounded-full text-xs px-3 py-1.5 transition-all",
                            (formData.preferredOccupations || []).includes(
                              occ.value
                            )
                              ? "bg-green-500 hover:bg-green-600 text-white border-green-500"
                              : "border-gray-300 text-gray-600 hover:bg-gray-50 hover:border-gray-400"
                          )}
                        >
                          {occ.label}
                        </Button>
                      ))}
                    </div>
                  ) : (
                    <div className="mt-1 flex flex-wrap gap-1.5">
                      {renderMultiSelectBadges(
                        formData.preferredOccupations,
                        occupationPreferenceOptions,
                        "bg-green-100 text-green-700",
                        "לא נבחרו תחומי עיסוק."
                      )}
                    </div>
                  )}
                </div>
                <div>
                  <Label className="block mb-2 text-xs font-medium text-gray-600">
                    סוג שירות מועדף (צבאי/לאומי)
                  </Label>
                  {isEditing ? (
                    <div className="flex flex-wrap gap-2">
                      {serviceTypeOptions.map((opt) => (
                        <Button
                          key={opt.value}
                          type="button"
                          variant={
                            (formData.preferredServiceTypes || []).includes(
                              opt.value as ServiceType
                            )
                              ? "default"
                              : "outline"
                          }
                          size="sm"
                          onClick={() =>
                            handleMultiSelectChange(
                              "preferredServiceTypes",
                              opt.value as ServiceType
                            )
                          }
                          className={cn(
                            "rounded-full text-xs px-3 py-1.5 transition-all",
                            (formData.preferredServiceTypes || []).includes(
                              opt.value as ServiceType
                            )
                              ? "bg-lime-500 hover:bg-lime-600 text-white border-lime-500"
                              : "border-gray-300 text-gray-600 hover:bg-gray-50 hover:border-gray-400"
                          )}
                        >
                          {opt.label}
                        </Button>
                      ))}
                    </div>
                  ) : (
                    <div className="mt-1 flex flex-wrap gap-1.5">
                      {renderMultiSelectBadges(
                        formData.preferredServiceTypes as string[],
                        serviceTypeOptions,
                        "bg-lime-100 text-lime-700",
                        "לא נבחרו העדפות שירות."
                      )}
                    </div>
                  )}
                </div>
              </CardContent>
            </Card>
          </div>

          {/* --- Column 3 --- */}
          <div className="space-y-6">
            <Card className="bg-white/80 backdrop-blur-md rounded-2xl shadow-lg border border-gray-200/40 overflow-hidden">
              <CardHeader className="bg-gradient-to-r from-rose-50/40 to-fuchsia-50/40 border-b border-gray-200/50 p-4 flex items-center space-x-2 rtl:space-x-reverse">
                <Users className="w-5 h-5 text-rose-700" />
                <CardTitle className="text-base font-semibold text-gray-700">
                  רקע אישי ומשפחתי
                </CardTitle>
              </CardHeader>
              <CardContent className="p-4 md:p-6 space-y-6">
                <div>
                  <Label className="block mb-2 text-xs font-medium text-gray-600">
                    מצב משפחתי מועדף
                  </Label>
                  {isEditing ? (
                    <div className="flex flex-wrap gap-2">
                      {maritalStatusOptions.map((opt) => (
                        <Button
                          key={opt.value}
                          type="button"
                          variant={
                            (formData.preferredMaritalStatuses || []).includes(
                              opt.value
                            )
                              ? "default"
                              : "outline"
                          }
                          size="sm"
                          onClick={() =>
                            handleMultiSelectChange(
                              "preferredMaritalStatuses",
                              opt.value
                            )
                          }
                          className={cn(
                            "rounded-full text-xs px-3 py-1.5 transition-all",
                            (formData.preferredMaritalStatuses || []).includes(
                              opt.value
                            )
                              ? "bg-rose-500 hover:bg-rose-600 text-white border-rose-500"
                              : "border-gray-300 text-gray-600 hover:bg-gray-50 hover:border-gray-400"
                          )}
                        >
                          {opt.label}
                        </Button>
                      ))}
                    </div>
                  ) : (
                    <div className="mt-1 flex flex-wrap gap-1.5">
                      {renderMultiSelectBadges(
                        formData.preferredMaritalStatuses,
                        maritalStatusOptions,
                        "bg-rose-100 text-rose-700",
                        "לא נבחרו העדפות למצב משפחתי."
                      )}
                    </div>
                  )}
                </div>
                <div>
                  <Label
                    htmlFor="preferredPartnerHasChildren"
                    className="block mb-1.5 text-xs font-medium text-gray-600"
                  >
                    העדפה לגבי ילדים מקשר קודם
                  </Label>
                  {isEditing ? (
                    <Select
                      name="preferredPartnerHasChildren"
                      value={formData.preferredPartnerHasChildren || ""}
                      onValueChange={(value) =>
                        handleSelectChange("preferredPartnerHasChildren", value)
                      }
                    >
                      <SelectTrigger
                        id="preferredPartnerHasChildren"
                        className="h-9 text-sm focus:ring-cyan-500"
                      >
                        <SelectValue placeholder="בחר/י העדפה..." />
                      </SelectTrigger>
                      <SelectContent>
                        {preferredPartnerHasChildrenOptions.map((opt) => (
                          <SelectItem key={opt.value} value={opt.value}>
                            {opt.label}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  ) : (
                    <p className="text-sm text-gray-800 font-medium mt-1">
                      {getSelectDisplayValue(
                        formData.preferredPartnerHasChildren,
                        preferredPartnerHasChildrenOptions
                      )}
                    </p>
                  )}
                </div>
                <div>
                  <Label className="block mb-2 text-xs font-medium text-gray-600">
                    מוצא/עדה מועדפים
                  </Label>
                  {isEditing ? (
                    <div className="space-y-3">
                        <div className="flex flex-wrap gap-2">
                          {preferredOriginOptions.map((opt) => (
                            <Button
                              key={opt.value}
                              type="button"
                              variant={(formData.preferredOrigins || []).includes(opt.value) ? "default" : "outline"}
                              size="sm"
                              onClick={() => handleMultiSelectChange("preferredOrigins", opt.value)}
                              className={cn(
                                "rounded-full text-xs px-3 py-1.5 transition-all",
                                (formData.preferredOrigins || []).includes(opt.value)
                                  ? "bg-fuchsia-500 hover:bg-fuchsia-600 text-white border-fuchsia-500"
                                  : "border-gray-300 text-gray-600 hover:bg-gray-50 hover:border-gray-400"
                              )}
                            >
                              {opt.label}
                            </Button>
                          ))}
                        </div>
                         <div className="space-y-2">
                            <div className="flex flex-wrap gap-1.5">
                                {(formData.preferredOrigins || [])
                                .filter(origin => !preferredOriginOptions.some(opt => opt.value === origin))
                                .map(origin => (
                                    <Badge key={origin} variant="secondary" className="bg-fuchsia-100 text-fuchsia-800 rounded-full px-2 py-1 text-sm font-normal">
                                        <span>{origin}</span>
                                        <button type="button" className="mr-1.5 rtl:mr-0 rtl:ml-1.5 text-fuchsia-600 hover:text-fuchsia-900" onClick={() => handleRemoveItemFromArray('preferredOrigins', origin)}>
                                            <XCircle className="w-3.5 h-3.5" />
                                        </button>
                                    </Badge>
                                ))}
                            </div>
                            <Autocomplete
                                apiKey={process.env.NEXT_PUBLIC_GOOGLE_MAPS_API_KEY}
                                value={originInputValue}
                                onChange={(e: React.ChangeEvent<HTMLInputElement>) => setOriginInputValue(e.target.value)}
                                onPlaceSelected={(place) => {
                                  const countryComponent = place.address_components?.find((component) => component.types.includes('country'));
                                  const selectedCountry = countryComponent?.long_name || place.formatted_address || '';
                                  handleAddItemToArray('preferredOrigins', selectedCountry);
                                  setOriginInputValue('');
                                }}
                                options={{ types: ['country'] }}
                                className="w-full h-9 text-sm p-2 border border-gray-300 rounded-md focus:ring-cyan-500 focus:border-cyan-500"
                                placeholder="הוסף/י מדינת מוצא..."
                            />
                        </div>
                    </div>
                  ) : (
                     <div className="mt-1 flex flex-wrap gap-1.5">
                        {(!formData.preferredOrigins || formData.preferredOrigins.length === 0) ? (
                            <p className="text-sm text-gray-500 italic">לא נבחרו העדפות מוצא/עדה.</p>
                        ) : (
                            formData.preferredOrigins.map(originValue => {
                                const option = preferredOriginOptions.find(opt => opt.value === originValue);
                                const label = option ? option.label : originValue;
                                return (
                                    <Badge key={originValue} variant="secondary" className="mr-1 mb-1 bg-fuchsia-100 text-fuchsia-700 text-xs px-2 py-0.5 rounded-full">
                                        {label}
                                    </Badge>
                                );
                            })
                        )}
                    </div>
                  )}
                </div>
                <div>
                  <Label
                    htmlFor="preferredAliyaStatus"
                    className="block mb-1.5 text-xs font-medium text-gray-600"
                  >
                    העדפת סטטוס עליה
                  </Label>
                  {isEditing ? (
                    <Select
                      name="preferredAliyaStatus"
                      value={formData.preferredAliyaStatus || ""}
                      onValueChange={(value) =>
                        handleSelectChange("preferredAliyaStatus", value)
                      }
                    >
                      <SelectTrigger
                        id="preferredAliyaStatus"
                        className="h-9 text-sm focus:ring-cyan-500"
                      >
                        <SelectValue placeholder="בחר/י העדפה..." />
                      </SelectTrigger>
                      <SelectContent>
                        {preferredAliyaStatusOptions.map((opt) => (
                          <SelectItem key={opt.value} value={opt.value}>
                            {opt.label}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  ) : (
                    <p className="text-sm text-gray-800 font-medium mt-1">
                      {getSelectDisplayValue(
                        formData.preferredAliyaStatus,
                        preferredAliyaStatusOptions
                      )}
                    </p>
                  )}
                </div>
              </CardContent>
            </Card>
            <Card className="bg-white/80 backdrop-blur-md rounded-2xl shadow-lg border border-gray-200/40 overflow-hidden">
              <CardHeader className="bg-gradient-to-r from-amber-50/40 to-yellow-50/40 border-b border-gray-200/50 p-4 flex items-center space-x-2 rtl:space-x-reverse">
                <Sparkles className="w-5 h-5 text-amber-700" />
                <CardTitle className="text-base font-semibold text-gray-700">
                  אופי ותחומי עניין
                </CardTitle>
              </CardHeader>
              <CardContent className="p-4 md:p-6 space-y-6">
                <div>
                  <Label className="block mb-2 text-xs font-medium text-gray-600">
                    תכונות אופי מועדפות (עד 3)
                  </Label>
                  {isEditing ? (
                    <div className="flex flex-wrap gap-2">
                      {characterTraitsOptions.map((opt) => (
                        <Button
                          key={opt.value}
                          type="button"
                          variant={
                            (formData.preferredCharacterTraits || []).includes(
                              opt.value
                            )
                              ? "default"
                              : "outline"
                          }
                          size="sm"
                          onClick={() =>
                            handleMultiSelectChange(
                              "preferredCharacterTraits",
                              opt.value
                            )
                          }
                          disabled={
                            !viewOnly &&
                            (formData.preferredCharacterTraits || []).length >=
                              3 &&
                            !(formData.preferredCharacterTraits || []).includes(
                              opt.value
                            ) &&
                            opt.value !== "no_strong_preference"
                          }
                          className={cn(
                            "rounded-full text-xs px-3 py-1.5 transition-all flex items-center",
                            (formData.preferredCharacterTraits || []).includes(
                              opt.value
                            )
                              ? "bg-yellow-500 hover:bg-yellow-600 text-white border-yellow-500"
                              : "border-gray-300 text-gray-600 hover:bg-gray-50 hover:border-gray-400"
                          )}
                        >
                          {opt.icon && (
                            <opt.icon className="w-3.5 h-3.5 rtl:ml-1.5 mr-1.5" />
                          )}
                          {opt.label}
                        </Button>
                      ))}
                    </div>
                  ) : (
                    <div className="mt-1 flex flex-wrap gap-1.5">
                      {renderMultiSelectBadges(
                        formData.preferredCharacterTraits,
                        characterTraitsOptions,
                        "bg-yellow-100 text-yellow-700",
                        "לא נבחרו תכונות אופי מועדפות."
                      )}
                    </div>
                  )}
                </div>
                <div>
                  <Label className="block mb-2 text-xs font-medium text-gray-600">
                    תחביבים מועדפים (עד 3)
                  </Label>
                  {isEditing ? (
                    <div className="flex flex-wrap gap-2">
                      {hobbiesOptions.map((opt) => (
                        <Button
                          key={opt.value}
                          type="button"
                          variant={
                            (formData.preferredHobbies || []).includes(
                              opt.value
                            )
                              ? "default"
                              : "outline"
                          }
                          size="sm"
                          onClick={() =>
                            handleMultiSelectChange(
                              "preferredHobbies",
                              opt.value
                            )
                          }
                          disabled={
                            !viewOnly &&
                            (formData.preferredHobbies || []).length >= 3 &&
                            !(formData.preferredHobbies || []).includes(
                              opt.value
                            ) &&
                            opt.value !== "no_strong_preference"
                          }
                          className={cn(
                            "rounded-full text-xs px-3 py-1.5 transition-all flex items-center",
                            (formData.preferredHobbies || []).includes(
                              opt.value
                            )
                              ? "bg-amber-500 hover:bg-amber-600 text-white border-amber-500"
                              : "border-gray-300 text-gray-600 hover:bg-gray-50 hover:border-gray-400"
                          )}
                        >
                          {opt.icon && (
                            <opt.icon className="w-3.5 h-3.5 rtl:ml-1.5 mr-1.5" />
                          )}
                          {opt.label}
                        </Button>
                      ))}
                    </div>
                  ) : (
                    <div className="mt-1 flex flex-wrap gap-1.5">
                      {renderMultiSelectBadges(
                        formData.preferredHobbies,
                        hobbiesOptions,
                        "bg-amber-100 text-amber-700",
                        "לא נבחרו תחביבים מועדפים."
                      )}
                    </div>
                  )}
                </div>
              </CardContent>
            </Card>
          </div>
        </div>
      </div>
    </div>
  );
};

export default PreferencesSection;
--- End of Content for PreferencesSection.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\app\components\profile\sections\ProfileSection.tsx
--------------------------------------------------------------------------------
Content:
// src/app/components/profile/sections/ProfileSection.tsx
'use client';

import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from '@/components/ui/tooltip';
import React, { useState, useEffect } from 'react';
import {
  Gender,
  AvailabilityStatus,
  ServiceType,
  HeadCoveringType,
  KippahType,
  ReligiousJourney,
} from '@prisma/client';
import { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select';
import { Checkbox } from '@/components/ui/checkbox';
import {
  Pencil,
  Save,
  X,
  Users,
  BookOpen,
  Briefcase,
  Shield,
  Heart,
  MapPin,
  Languages,
  Palette,
  Smile,
  UserCircle,
  Info,
  HeartPulse,
  Lock,
  Eye,
  EyeOff,
} from 'lucide-react';
import { UserProfile } from '@/types/next-auth';
import { cn } from '@/lib/utils';
import { Badge } from '@/components/ui/badge';
import { languageOptions } from '@/lib/languageOptions';
import { toast } from 'sonner';
import Autocomplete from 'react-google-autocomplete';
import { Switch } from '@/components/ui/switch';

const maritalStatusOptions = [
  { value: 'single', label: 'רווק/ה' },
  { value: 'divorced', label: 'גרוש/ה' },
  { value: 'widowed', label: 'אלמן/ה' },
  { value: 'annulled', label: 'נישואין שבוטלו' },
];

const religiousLevelOptions = [
  { value: 'charedi', label: 'חרדי/ת' },
  { value: 'charedi_modern', label: 'חרדי/ת מודרני/ת' },
  { value: 'dati_leumi_torani', label: 'דתי/ה לאומי/ת תורני/ת' },
  { value: 'dati_leumi_liberal', label: 'דתי/ה לאומי/ת ליברלי/ת' },
  { value: 'dati_leumi_standard', label: 'דתי/ה לאומי/ת (סטנדרטי)' },
  { value: 'masorti_strong', label: 'מסורתי/ת (קרוב/ה לדת)' },
  { value: 'masorti_light', label: 'מסורתי/ת (קשר קל למסורת)' },
  { value: 'secular_traditional_connection', label: 'חילוני/ת עם זיקה למסורת' },
  { value: 'secular', label: 'חילוני/ת' },
  { value: 'spiritual_not_religious', label: 'רוחני/ת (לאו דווקא דתי/ה)' },
  { value: 'other', label: "אחר (נא לפרט ב'אודות')" },
];
const religiousJourneyOptions = [
  {
    value: 'BORN_INTO_CURRENT_LIFESTYLE',
    label: 'גדלתי בסביבה דומה להגדרתי כיום',
  },
  { value: 'BORN_SECULAR', label: 'גדלתי בסביבה חילונית' },
  { value: 'BAAL_TESHUVA', label: 'חזרתי בתשובה' },
  { value: 'DATLASH', label: 'יצאתי בשאלה (דתל"ש)' },
  { value: 'CONVERT', label: 'גר/ה / גיורת' },
  { value: 'IN_PROCESS', label: 'בתהליך של שינוי / התלבטות' },
  { value: 'OTHER', label: 'אחר (נא לפרט בהערות)' },
];

const educationLevelOptions = [
  { value: 'high_school', label: 'תיכונית' },
  { value: 'vocational', label: 'מקצועית / תעודה' },
  { value: 'academic_student', label: 'סטודנט/ית לתואר' },
  { value: 'academic_ba', label: 'תואר ראשון (BA/BSc)' },
  { value: 'academic_ma', label: 'תואר שני (MA/MSc)' },
  { value: 'academic_phd', label: 'דוקטורט (PhD)' },
  { value: 'yeshiva_seminary', label: 'לימודים תורניים (ישיבה/מדרשה/כולל)' },
  { value: 'other', label: 'אחר' },
];

const serviceTypeOptions = [
  { value: ServiceType.MILITARY_COMBATANT, label: 'צבאי - לוחם/ת' },
  { value: ServiceType.MILITARY_SUPPORT, label: 'צבאי - תומכ/ת לחימה' },
  { value: ServiceType.MILITARY_OFFICER, label: 'צבאי - קצונה' },
  {
    value: ServiceType.MILITARY_INTELLIGENCE_CYBER_TECH,
    label: 'צבאי - מודיעין/סייבר/טכנולוגי',
  },
  { value: ServiceType.NATIONAL_SERVICE_ONE_YEAR, label: 'שירות לאומי - שנה' },
  {
    value: ServiceType.NATIONAL_SERVICE_TWO_YEARS,
    label: 'שירות לאומי - שנתיים',
  },
  { value: ServiceType.HESDER_YESHIVA, label: 'ישיבת הסדר' },
  {
    value: ServiceType.YESHIVA_ONLY_POST_HS,
    label: 'ישיבה גבוהה / מדרשה (ללא שירות צבאי/לאומי)',
  },
  {
    value: ServiceType.PRE_MILITARY_ACADEMY_AND_SERVICE,
    label: 'מכינה קדם-צבאית ושירות',
  },
  { value: ServiceType.EXEMPTED, label: 'פטור משירות' },
  { value: ServiceType.CIVILIAN_SERVICE, label: 'שירות אזרחי' },
  { value: ServiceType.OTHER, label: 'אחר / לא רלוונטי' },
];

const headCoveringOptions = [
  { value: HeadCoveringType.FULL_COVERAGE, label: 'כיסוי ראש מלא' },
  { value: HeadCoveringType.PARTIAL_COVERAGE, label: 'כיסוי ראש חלקי' },
  { value: HeadCoveringType.HAT_BERET, label: 'כובע / ברט' },
  {
    value: HeadCoveringType.SCARF_ONLY_SOMETIMES,
    label: 'מטפחת (רק באירועים/בית כנסת)',
  },
  { value: HeadCoveringType.NONE, label: 'ללא כיסוי ראש' },
];

const kippahTypeOptions = [
  { value: KippahType.BLACK_VELVET, label: 'קטיפה שחורה' },
  { value: KippahType.KNITTED_SMALL, label: 'סרוגה קטנה' },
  { value: KippahType.KNITTED_LARGE, label: 'סרוגה גדולה' },
  { value: KippahType.CLOTH, label: 'בד' },
  { value: KippahType.BRESLEV, label: 'ברסלב (לבנה גדולה)' },
  { value: KippahType.NONE_AT_WORK_OR_CASUAL, label: 'לא בעבודה / ביומיום' },
  { value: KippahType.NONE_USUALLY, label: 'לרוב לא חובש' },
  { value: KippahType.OTHER, label: 'אחר' },
];

const characterTraitsOptions = [
  { value: 'empathetic', label: 'אמפתי/ת', icon: Heart },
  { value: 'driven', label: 'שאפתן/ית', icon: Briefcase },
  { value: 'optimistic', label: 'אופטימי/ת', icon: Smile },
  { value: 'family_oriented', label: 'משפחתי/ת', icon: Users },
  { value: 'intellectual', label: 'אינטלקטואל/ית', icon: BookOpen },
  { value: 'organized', label: 'מאורגנ/ת', icon: Palette },
  { value: 'calm', label: 'רגוע/ה', icon: Heart },
  { value: 'humorous', label: 'בעל/ת חוש הומור', icon: Smile },
  { value: 'sociable', label: 'חברותי/ת', icon: Users },
  { value: 'sensitive', label: 'רגיש/ה', icon: Heart },
  { value: 'independent', label: 'עצמאי/ת', icon: MapPin },
  { value: 'creative', label: 'יצירתי/ת', icon: Palette },
  { value: 'honest', label: 'כן/ה וישר/ה', icon: Shield },
  { value: 'responsible', label: 'אחראי/ת', icon: Shield },
  { value: 'easy_going', label: 'זורם/ת וקליל/ה', icon: Smile },
];

const hobbiesOptions = [
  { value: 'travel', label: 'טיולים', icon: MapPin },
  { value: 'sports', label: 'ספורט', icon: Briefcase },
  { value: 'reading', label: 'קריאה', icon: BookOpen },
  { value: 'cooking_baking', label: 'בישול/אפיה', icon: Palette },
  { value: 'music_playing_instrument', label: 'מוזיקה/נגינה', icon: Languages },
  { value: 'art_crafts', label: 'אומנות/יצירה', icon: Palette },
  { value: 'volunteering', label: 'התנדבות', icon: Heart },
  { value: 'learning_courses', label: 'למידה/קורסים', icon: BookOpen },
  { value: 'board_games_puzzles', label: 'משחקי קופסא/פאזלים', icon: Smile },
  { value: 'movies_theater', label: 'סרטים/תיאטרון', icon: Smile },
  { value: 'dancing', label: 'ריקוד', icon: Users },
  { value: 'writing', label: 'כתיבה', icon: BookOpen },
  { value: 'nature_hiking', label: 'טבע/טיולים רגליים', icon: MapPin },
  { value: 'photography', label: 'צילום', icon: Palette },
];

const preferredMatchmakerGenderOptions = [
  { value: 'MALE', label: 'משדך' },
  { value: 'FEMALE', label: 'שדכנית' },
  { value: 'NONE', label: 'ללא העדפה' },
];

interface ProfileSectionProps {
  profile: UserProfile | null;
  isEditing: boolean;
  setIsEditing: (value: boolean) => void;
  viewOnly?: boolean;
  onSave: (data: Partial<UserProfile>) => void;
}

const ensureDateObject = (
  value: string | number | Date | null | undefined
): Date | undefined => {
  if (!value) return undefined;
  if (value instanceof Date && !isNaN(value.getTime())) {
    return value;
  }
  if (typeof value === 'string' || typeof value === 'number') {
    const date = new Date(value);
    if (!isNaN(date.getTime())) {
      return date;
    }
  }
  return undefined;
};

const ProfileSection: React.FC<ProfileSectionProps> = ({
  profile: profileProp,
  isEditing,
  setIsEditing,
  viewOnly = false,
  onSave,
}) => {
  const [formData, setFormData] = useState<Partial<UserProfile>>({});
  const [loading, setLoading] = useState(true);
  const [initialData, setInitialData] = useState<Partial<UserProfile>>({});

  const [cityInputValue, setCityInputValue] = useState('');
  const [aliyaCountryInputValue, setAliyaCountryInputValue] = useState('');

  const initializeFormData = (profileData: UserProfile | null) => {
    // *** FIX for [object Object] bug ***
    // Sanitize the profile headline to ensure it's a string.
    let headline = profileData?.profileHeadline || '';
    if (typeof headline === 'object' && headline !== null) {
      console.warn(
        'Profile headline from API is an object, resetting to empty string:',
        headline
      );
      headline = '';
    }

    const dataToSet: Partial<UserProfile> = {
      gender: profileData?.gender || undefined,
      birthDate: ensureDateObject(profileData?.birthDate),
      nativeLanguage: profileData?.nativeLanguage || undefined,
      additionalLanguages: profileData?.additionalLanguages || [],
      height: profileData?.height ?? undefined,
      maritalStatus: profileData?.maritalStatus || undefined,
      occupation: profileData?.occupation || '',
      education: profileData?.education || '',
      educationLevel: profileData?.educationLevel || undefined,
      city: profileData?.city || '',
      origin: profileData?.origin || '',
      religiousJourney: profileData?.religiousJourney || undefined,
      religiousLevel: profileData?.religiousLevel || undefined,
      about: profileData?.about || '',
      parentStatus: profileData?.parentStatus || undefined,
      fatherOccupation: profileData?.fatherOccupation || '',
      motherOccupation: profileData?.motherOccupation || '',
      siblings: profileData?.siblings ?? undefined,
      position: profileData?.position ?? undefined,
      isProfileVisible: profileData?.isProfileVisible ?? true,
      preferredMatchmakerGender:
        profileData?.preferredMatchmakerGender || undefined,
      availabilityStatus:
        profileData?.availabilityStatus || AvailabilityStatus.AVAILABLE,
      availabilityNote: profileData?.availabilityNote || '',
      availabilityUpdatedAt: ensureDateObject(
        profileData?.availabilityUpdatedAt
      ),
      matchingNotes: profileData?.matchingNotes || '',
      shomerNegiah: profileData?.shomerNegiah ?? undefined,
      serviceType: profileData?.serviceType || undefined,
      serviceDetails: profileData?.serviceDetails || '',
      headCovering: profileData?.headCovering || undefined,
      kippahType: profileData?.kippahType || undefined,
      hasChildrenFromPrevious:
        profileData?.hasChildrenFromPrevious ?? undefined,
      profileCharacterTraits: profileData?.profileCharacterTraits || [],
      profileHobbies: profileData?.profileHobbies || [],
      aliyaCountry: profileData?.aliyaCountry || '',
      aliyaYear: profileData?.aliyaYear ?? undefined,
      preferredAgeMin: profileData?.preferredAgeMin ?? undefined,
      preferredAgeMax: profileData?.preferredAgeMax ?? undefined,
      preferredHeightMin: profileData?.preferredHeightMin ?? undefined,
      preferredHeightMax: profileData?.preferredHeightMax ?? undefined,
      preferredReligiousLevels: profileData?.preferredReligiousLevels || [],
      preferredLocations: profileData?.preferredLocations || [],
      preferredEducation: profileData?.preferredEducation || [],
      preferredOccupations: profileData?.preferredOccupations || [],
      contactPreference: profileData?.contactPreference || undefined,
      id: profileData?.id,
      userId: profileData?.userId,
      createdAt: ensureDateObject(profileData?.createdAt),
      updatedAt: ensureDateObject(profileData?.updatedAt),
      lastActive: ensureDateObject(profileData?.lastActive),
      hasMedicalInfo: profileData?.hasMedicalInfo ?? false,
      medicalInfoDetails: profileData?.medicalInfoDetails || '',
      medicalInfoDisclosureTiming:
        profileData?.medicalInfoDisclosureTiming || undefined,
      isMedicalInfoVisible: profileData?.isMedicalInfoVisible ?? false,
      
      // --- START OF UPDATED FIELDS INITIALIZATION ---
      profileHeadline: headline, // Use the sanitized variable
      inspiringCoupleStory: profileData?.inspiringCoupleStory || '',
      influentialRabbi: profileData?.influentialRabbi || '',
      // Note: `humorStory` was intentionally removed and replaced by `influentialRabbi`
      // --- END OF UPDATED FIELDS INITIALIZATION ---
    };
    setFormData(dataToSet);
    setInitialData(dataToSet);

    setCityInputValue(dataToSet.city || '');
    setAliyaCountryInputValue(dataToSet.aliyaCountry || '');
  };

  useEffect(() => {
    setLoading(true);
    if (profileProp) {
      initializeFormData(profileProp);
      setLoading(false);
    } else {
      const fetchProfileAndInitialize = async () => {
        try {
          const response = await fetch('/api/profile');
          if (!response.ok) throw new Error('Failed to fetch profile');
          const data = await response.json();
          if (data.success && data.profile) {
            initializeFormData(data.profile);
          } else {
            initializeFormData(null);
          }
        } catch (error) {
          console.error('Failed to fetch profile:', error);
          initializeFormData(null);
        } finally {
          setLoading(false);
        }
      };
      fetchProfileAndInitialize();
    }
  }, [profileProp]);

  const handleChange = (
    field: keyof UserProfile,
    value:
      | UserProfile[keyof UserProfile]
      | string
      | number
      | boolean
      | Date
      | string[]
      | null
  ) => {
    setFormData((prev) => {
      let finalValue: UserProfile[keyof UserProfile] | undefined = undefined;

      if (
        field === 'height' ||
        field === 'siblings' ||
        field === 'position' ||
        field === 'aliyaYear' ||
        field === 'preferredAgeMin' ||
        field === 'preferredAgeMax' ||
        field === 'preferredHeightMin' ||
        field === 'preferredHeightMax'
      ) {
        const rawValue = value as string | number;
        if (rawValue === '' || rawValue === null || rawValue === undefined) {
          finalValue = undefined;
        } else {
          const parsed = parseInt(String(rawValue), 10);
          finalValue = !isNaN(parsed)
            ? (parsed as UserProfile[typeof field])
            : undefined;
        }
      } else if (field === 'birthDate') {
        finalValue = ensureDateObject(
          value as string | Date | null | undefined
        ) as UserProfile[typeof field];
      } else if (
        typeof prev[field] === 'boolean' ||
        field === 'shomerNegiah' ||
        field === 'hasChildrenFromPrevious' ||
        field === 'isProfileVisible' ||
        field === 'hasMedicalInfo' ||
        field === 'isMedicalInfoVisible'
      ) {
        finalValue = value as boolean as UserProfile[typeof field];
      } else if (Array.isArray(prev[field])) {
        finalValue = value as string[] as UserProfile[typeof field];
      } else if (value === '' || value === null) {
        const nullableStringFields: (keyof UserProfile)[] = [
          'nativeLanguage',
          'occupation',
          'education',
          'city',
          'origin',
          'religiousLevel',
          'religiousJourney',
          'about',
          'parentStatus',
          'fatherOccupation',
          'motherOccupation',
          'serviceDetails',
          'aliyaCountry',
          'availabilityNote',
          'matchingNotes',
          'educationLevel',
          'maritalStatus',
          'serviceType',
          'headCovering',
          'kippahType',
          'preferredMatchmakerGender',
          'contactPreference',
          'medicalInfoDetails',
          'medicalInfoDisclosureTiming',
          'profileHeadline',
          'inspiringCoupleStory',
          'influentialRabbi',
        ];
        if (nullableStringFields.includes(field as keyof UserProfile)) {
          finalValue = undefined;
        } else {
          finalValue = value as UserProfile[typeof field];
        }
      } else {
        finalValue = value as UserProfile[typeof field];
      }

      return {
        ...prev,
        [field]: finalValue,
      };
    });
  };

  const handleMultiSelectToggle = (
    field: keyof UserProfile,
    optionValue: string
  ) => {
    setFormData((prev) => {
      const currentValues = (prev[field] as string[]) || [];
      const newValues = currentValues.includes(optionValue)
        ? currentValues.filter((v) => v !== optionValue)
        : [...currentValues, optionValue];
      return { ...prev, [field]: newValues };
    });
  };

  const handleSave = () => {
    if (formData.about && formData.about.trim().length < 100) {
      toast.error('שגיאת ולידציה', {
        description: 'השדה "קצת עליי" חייב להכיל לפחות 100 תווים.',
        duration: 5000,
      });
      return;
    }

    const dataToSave = { ...formData };
    onSave(dataToSave);
    setIsEditing(false);
    setInitialData(dataToSave);
  };

  const handleCancel = () => {
    setFormData(initialData);
    setCityInputValue(initialData.city || '');
    setAliyaCountryInputValue(initialData.aliyaCountry || '');
    setIsEditing(false);
  };

  const renderDisplayValue = (
    value: string | number | Date | undefined | null,
    placeholder: string = 'לא צוין'
  ) => {
    if (value === undefined || value === null || value === '') {
      return <span className="italic text-gray-500">{placeholder}</span>;
    }
    if (value instanceof Date && !isNaN(value.getTime())) {
      return new Intl.DateTimeFormat('he-IL').format(value);
    }
    return String(value);
  };

  const renderSelectDisplayValue = (
    value: string | undefined | null,
    options: { value: string; label: string }[],
    placeholder: string = 'לא צוין'
  ) => {
    if (!value) {
      return <span className="italic text-gray-500">{placeholder}</span>;
    }
    const option = options.find((opt) => opt.value === value);
    return option ? (
      option.label
    ) : (
      <span className="italic text-gray-500">{placeholder}</span>
    );
  };

  const renderBooleanDisplayValue = (
    value: boolean | undefined | null,
    trueLabel: string = 'כן',
    falseLabel: string = 'לא',
    placeholder: string = 'לא צוין'
  ) => {
    if (value === undefined || value === null) {
      return <span className="italic text-gray-500">{placeholder}</span>;
    }
    return value ? trueLabel : falseLabel;
  };

  if (loading) {
    return <div className="text-center p-4">טוען נתוני פרופיל...</div>;
  }

  const renderMultiSelectBadges = (
    fieldValues: string[] | undefined,
    options: { value: string; label: string; icon?: React.ElementType }[],
    emptyPlaceholder: string = 'לא נבחרו פריטים.'
  ) => {
    if (!fieldValues || fieldValues.length === 0) {
      return <p className="text-sm text-gray-500 italic">{emptyPlaceholder}</p>;
    }
    return fieldValues.map((value) => {
      const option = options.find((opt) => opt.value === value);
      return option ? (
        <Badge
          key={value}
          variant="secondary"
          className="mr-1 mb-1 bg-sky-100 text-sky-700 text-xs px-2 py-0.5 rounded-full"
        >
          {option.icon && <option.icon className="w-3 h-3 mr-1" />}
          {option.label}
        </Badge>
      ) : null;
    });
  };

  return (
    <div className="relative" dir="rtl">
      {/* Sticky Header with Buttons */}
      <div className="sticky top-0 z-10 bg-gradient-to-b from-white via-white/95 to-white/0 pt-4 pb-3 backdrop-blur-sm">
        <div className="container mx-auto max-w-screen-xl px-4">
          <div className="flex items-center justify-between">
            <div>
              <h1 className="text-xl md:text-2xl font-bold text-slate-800">
                פרופיל אישי
              </h1>
              <p className="text-sm text-slate-500">
                {isEditing && !viewOnly
                  ? 'ערוך/י את פרטי הפרופיל שלך.'
                  : 'פרטי הפרופיל של המועמד/ת.'}
              </p>
            </div>
            {!viewOnly && (
              <div className="flex gap-2">
                {!isEditing ? (
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={() => setIsEditing(true)}
                    className="rounded-full shadow-sm hover:shadow-md transition-all duration-300 border-cyan-400 text-cyan-700 hover:bg-cyan-50"
                  >
                    <Pencil className="w-3.5 h-3.5 ml-1.5" />
                    עריכה
                  </Button>
                ) : (
                  <>
                    <div className="hidden sm:flex gap-2">
                      <Button
                        variant="outline"
                        size="sm"
                        onClick={handleCancel}
                        className="rounded-full shadow-sm hover:shadow-md transition-all duration-300 border-gray-300 text-gray-700 hover:bg-gray-50"
                      >
                        <X className="w-3.5 h-3.5 ml-1.5" />
                        ביטול
                      </Button>
                      <Button
                        variant="default"
                        size="sm"
                        onClick={handleSave}
                        className="rounded-full shadow-sm hover:shadow-md transition-all duration-300 bg-cyan-600 hover:bg-cyan-700 text-white"
                      >
                        <Save className="w-3.5 h-3.5 ml-1.5" />
                        שמירה
                      </Button>
                    </div>
                  </>
                )}
              </div>
            )}
          </div>
        </div>
      </div>

      {/* Main Content */}
      <div className="container mx-auto max-w-screen-xl py-6 px-4">
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
          <div className="space-y-6">
            <Card className="bg-white/80 backdrop-blur-md rounded-2xl shadow-lg border border-gray-200/40 overflow-hidden">
              <CardHeader className="bg-gradient-to-r from-cyan-50/40 to-pink-50/40 border-b border-gray-200/50 p-4 flex items-center space-x-2 rtl:space-x-reverse">
                <UserCircle className="w-5 h-5 text-cyan-700" />
                <CardTitle className="text-base font-semibold text-gray-700">
                  פרטים אישיים ודמוגרפיים
                </CardTitle>
              </CardHeader>
              <CardContent className="p-4 md:p-6">
                <div className="grid grid-cols-1 sm:grid-cols-2 gap-x-6 gap-y-5">
                  <div>
                    <Label className="block mb-1.5 text-xs font-medium text-gray-600">
                      מגדר
                    </Label>
                    {isEditing && !viewOnly ? (
                      <Select
                        value={formData.gender || ''}
                        onValueChange={(value) =>
                          handleChange('gender', value as Gender)
                        }
                      >
                        <SelectTrigger className="h-9 text-sm focus:ring-cyan-500">
                          <SelectValue placeholder="בחר/י מגדר" />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="MALE">זכר</SelectItem>
                          <SelectItem value="FEMALE">נקבה</SelectItem>
                        </SelectContent>
                      </Select>
                    ) : (
                      <p className="text-sm text-gray-800 font-medium mt-1">
                        {renderDisplayValue(
                          formData.gender === 'MALE'
                            ? 'זכר'
                            : formData.gender === 'FEMALE'
                              ? 'נקבה'
                              : undefined
                        )}
                      </p>
                    )}
                  </div>
                  <div>
                    <Label className="block mb-1.5 text-xs font-medium text-gray-600">
                      תאריך לידה
                    </Label>
                    {isEditing && !viewOnly ? (
                      <Input
                        type="date"
                        value={
                          formData.birthDate instanceof Date &&
                          !isNaN(formData.birthDate.getTime())
                            ? formData.birthDate.toISOString().split('T')[0]
                            : ''
                        }
                        onChange={(e) =>
                          handleChange('birthDate', e.target.value || undefined)
                        }
                        className="h-9 text-sm focus:ring-cyan-500"
                        max={new Date().toISOString().split('T')[0]}
                      />
                    ) : (
                      <p className="text-sm text-gray-800 font-medium mt-1">
                        {renderDisplayValue(formData.birthDate)}
                      </p>
                    )}
                  </div>
                  <div>
                    <Label className="block mb-1.5 text-xs font-medium text-gray-600">
                      גובה (סמ)
                    </Label>
                    {isEditing && !viewOnly ? (
                      <Input
                        type="number"
                        value={formData.height ?? ''}
                        onChange={(e) => handleChange('height', e.target.value)}
                        className="h-9 text-sm focus:ring-cyan-500"
                        placeholder="גובה בסמ"
                        min="100"
                        max="250"
                      />
                    ) : (
                      <p className="text-sm text-gray-800 font-medium mt-1">
                        {renderDisplayValue(
                          formData.height ? `${formData.height} ס"מ` : undefined
                        )}
                      </p>
                    )}
                  </div>
                  <div>
                    <Label className="block mb-1.5 text-xs font-medium text-gray-600">
                      עיר מגורים
                    </Label>
                    {isEditing && !viewOnly ? (
                      <Autocomplete
                        apiKey={process.env.NEXT_PUBLIC_GOOGLE_MAPS_API_KEY}
                        value={cityInputValue}
                        onChange={(e: React.ChangeEvent<HTMLInputElement>) => {
                          setCityInputValue(e.target.value);
                        }}
                        onPlaceSelected={(place) => {
                          const cityComponent = place.address_components?.find(
                            (component) => component.types.includes('locality')
                          );
                          const selectedCity =
                            cityComponent?.long_name ||
                            place.formatted_address ||
                            '';
                          handleChange('city', selectedCity);
                          setCityInputValue(selectedCity);
                        }}
                        onBlur={() => {
                          if (cityInputValue !== formData.city) {
                            setCityInputValue(formData.city || '');
                          }
                        }}
                        options={{
                          types: ['(cities)'],
                          componentRestrictions: { country: 'il' },
                        }}
                        className="w-full h-9 text-sm p-2 border border-gray-300 rounded-md focus:ring-cyan-500 focus:border-cyan-500"
                        placeholder="התחל/י להקליד שם עיר..."
                      />
                    ) : (
                      <p className="text-sm text-gray-800 font-medium mt-1">
                        {renderDisplayValue(formData.city)}
                      </p>
                    )}
                  </div>
                  <div>
                    <Label className="block mb-1.5 text-xs font-medium text-gray-600">
                      מוצא / עדה
                    </Label>
                    {isEditing && !viewOnly ? (
                      <Input
                        value={formData.origin || ''}
                        onChange={(e) => handleChange('origin', e.target.value)}
                        placeholder="לדוגמה: אשכנזי, ספרדי"
                        className="h-9 text-sm focus:ring-cyan-500"
                      />
                    ) : (
                      <p className="text-sm text-gray-800 font-medium mt-1">
                        {renderDisplayValue(formData.origin)}
                      </p>
                    )}
                  </div>
                  <div>
                    <Label className="block mb-1.5 text-xs font-medium text-gray-600">
                      מדינת עלייה
                    </Label>
                    {isEditing && !viewOnly ? (
                      <Autocomplete
                        apiKey={process.env.NEXT_PUBLIC_GOOGLE_MAPS_API_KEY}
                        value={aliyaCountryInputValue}
                        onChange={(e: React.ChangeEvent<HTMLInputElement>) => {
                          setAliyaCountryInputValue(e.target.value);
                        }}
                        onPlaceSelected={(place) => {
                          const countryComponent =
                            place.address_components?.find((component) =>
                              component.types.includes('country')
                            );
                          const selectedCountry =
                            countryComponent?.long_name ||
                            place.formatted_address ||
                            '';
                          handleChange('aliyaCountry', selectedCountry);
                          setAliyaCountryInputValue(selectedCountry);
                        }}
                        onBlur={() => {
                          if (
                            aliyaCountryInputValue !== formData.aliyaCountry
                          ) {
                            setAliyaCountryInputValue(
                              formData.aliyaCountry || ''
                            );
                          }
                        }}
                        options={{
                          types: ['country'],
                        }}
                        className="w-full h-9 text-sm p-2 border border-gray-300 rounded-md focus:ring-cyan-500 focus:border-cyan-500"
                        placeholder="אם רלוונטי, הקלד/י שם מדינה"
                      />
                    ) : (
                      <p className="text-sm text-gray-800 font-medium mt-1">
                        {renderDisplayValue(
                          formData.aliyaCountry,
                          'לא רלוונטי'
                        )}
                      </p>
                    )}
                  </div>
                  <div>
                    <Label className="block mb-1.5 text-xs font-medium text-gray-600">
                      שנת עליה
                    </Label>
                    {isEditing && !viewOnly ? (
                      <Input
                        type="number"
                        value={formData.aliyaYear ?? ''}
                        onChange={(e) =>
                          handleChange('aliyaYear', e.target.value)
                        }
                        disabled={!formData.aliyaCountry}
                        placeholder="אם רלוונטי"
                        className="h-9 text-sm focus:ring-cyan-500"
                        min="1900"
                        max={new Date().getFullYear()}
                      />
                    ) : (
                      <p className="text-sm text-gray-800 font-medium mt-1">
                        {renderDisplayValue(
                          formData.aliyaYear,
                          formData.aliyaCountry ? 'לא צוינה שנה' : 'לא רלוונטי'
                        )}
                      </p>
                    )}
                  </div>
                  <div>
                    <Label className="block mb-1.5 text-xs font-medium text-gray-600">
                      שפת אם
                    </Label>
                    {isEditing && !viewOnly ? (
                      <Select
                        value={formData.nativeLanguage || ''}
                        onValueChange={(value) =>
                          handleChange('nativeLanguage', value || undefined)
                        }
                      >
                        <SelectTrigger className="h-9 text-sm focus:ring-cyan-500">
                          <SelectValue placeholder="בחר/י שפת אם" />
                        </SelectTrigger>
                        <SelectContent className="max-h-[200px]">
                          {languageOptions.map((lang) => (
                            <SelectItem key={lang.value} value={lang.value}>
                              {lang.label}
                            </SelectItem>
                          ))}
                        </SelectContent>
                      </Select>
                    ) : (
                      <p className="text-sm text-gray-800 font-medium mt-1">
                        {renderSelectDisplayValue(
                          formData.nativeLanguage,
                          languageOptions
                        )}
                      </p>
                    )}
                  </div>
                  <div className="sm:col-span-2 lg:col-span-1">
                    <Label className="block mb-1.5 text-xs font-medium text-gray-600">
                      שפות נוספות
                    </Label>
                    {isEditing && !viewOnly ? (
                      <Select
                        onValueChange={(value) => {
                          const currentLanguages =
                            formData.additionalLanguages || [];
                          if (!currentLanguages.includes(value)) {
                            handleChange('additionalLanguages', [
                              ...currentLanguages,
                              value,
                            ]);
                          }
                        }}
                      >
                        <SelectTrigger className="h-9 text-sm focus:ring-cyan-500">
                          <SelectValue placeholder="הוסף/י שפה..." />
                        </SelectTrigger>
                        <SelectContent className="max-h-[200px]">
                          {languageOptions
                            .filter(
                              (lang) =>
                                !(formData.additionalLanguages || []).includes(
                                  lang.value
                                ) && lang.value !== formData.nativeLanguage
                            )
                            .map((lang) => (
                              <SelectItem key={lang.value} value={lang.value}>
                                {lang.label}
                              </SelectItem>
                            ))}
                        </SelectContent>
                      </Select>
                    ) : null}
                    <div className="mt-2 flex flex-wrap gap-1.5">
                      {(formData.additionalLanguages || []).map((langValue) => {
                        const lang = languageOptions.find(
                          (l) => l.value === langValue
                        );
                        return lang ? (
                          <Badge
                            key={lang.value}
                            variant="secondary"
                            className="bg-cyan-100/70 text-cyan-800 px-2 py-0.5 rounded-full text-[11px] font-medium flex items-center"
                          >
                            {lang.label}
                            {isEditing && !viewOnly && (
                              <button
                                type="button"
                                onClick={() =>
                                  handleChange(
                                    'additionalLanguages',
                                    (formData.additionalLanguages || []).filter(
                                      (l) => l !== langValue
                                    )
                                  )
                                }
                                className="mr-1.5 text-cyan-600 hover:text-cyan-800 text-xs"
                                aria-label={`הסר ${lang.label}`}
                              >
                                ×
                              </button>
                            )}
                          </Badge>
                        ) : null;
                      })}
                      {(!isEditing || viewOnly) &&
                        (!formData.additionalLanguages ||
                          formData.additionalLanguages.length === 0) && (
                          <p className="text-sm text-gray-500 italic">
                            לא צוינו שפות נוספות.
                          </p>
                        )}
                    </div>
                  </div>
                </div>
              </CardContent>
            </Card>

            <Card className="bg-white/80 backdrop-blur-md rounded-2xl shadow-lg border border-gray-200/40 overflow-hidden">
              <CardHeader className="bg-gradient-to-r from-purple-50/40 to-indigo-50/40 border-b border-gray-200/50 p-4 flex items-center space-x-2 rtl:space-x-reverse">
                <Users className="w-5 h-5 text-purple-700" />
                <CardTitle className="text-base font-semibold text-gray-700">
                  מצב משפחתי ורקע
                </CardTitle>
              </CardHeader>
              <CardContent className="p-4 md:p-6">
                <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-x-6 gap-y-5 items-start">
                  <div>
                    <Label className="block mb-1.5 text-xs font-medium text-gray-600">
                      מצב משפחתי
                    </Label>
                    {isEditing && !viewOnly ? (
                      <Select
                        value={formData.maritalStatus || ''}
                        onValueChange={(value) =>
                          handleChange('maritalStatus', value || undefined)
                        }
                      >
                        <SelectTrigger className="h-9 text-sm focus:ring-cyan-500">
                          <SelectValue placeholder="בחר/י מצב" />
                        </SelectTrigger>
                        <SelectContent>
                          {maritalStatusOptions.map((opt) => (
                            <SelectItem key={opt.value} value={opt.value}>
                              {opt.label}
                            </SelectItem>
                          ))}
                        </SelectContent>
                      </Select>
                    ) : (
                      <p className="text-sm text-gray-800 font-medium mt-1">
                        {renderSelectDisplayValue(
                          formData.maritalStatus,
                          maritalStatusOptions
                        )}
                      </p>
                    )}
                  </div>
                  {(formData.maritalStatus === 'divorced' ||
                    formData.maritalStatus === 'widowed' ||
                    formData.maritalStatus === 'annulled') && (
                    <div
                      className={cn(
                        'pt-1 sm:pt-0',
                        isEditing && !viewOnly ? 'sm:pt-5' : 'sm:pt-0'
                      )}
                    >
                      <Label className="block mb-1.5 text-xs font-medium text-gray-600">
                        ילדים מקשר קודם?
                      </Label>
                      {isEditing && !viewOnly ? (
                        <div className="flex items-center space-x-2 rtl:space-x-reverse mt-2">
                          <Checkbox
                            id="hasChildrenFromPrevious"
                            checked={formData.hasChildrenFromPrevious || false}
                            onCheckedChange={(checked) =>
                              handleChange(
                                'hasChildrenFromPrevious',
                                checked as boolean
                              )
                            }
                          />
                          <Label
                            htmlFor="hasChildrenFromPrevious"
                            className="text-sm font-normal text-gray-700"
                          >
                            יש ילדים
                          </Label>
                        </div>
                      ) : (
                        <p className="text-sm text-gray-800 font-medium mt-1">
                          {renderBooleanDisplayValue(
                            formData.hasChildrenFromPrevious
                          )}
                        </p>
                      )}
                    </div>
                  )}
                  <div>
                    <Label className="block mb-1.5 text-xs font-medium text-gray-600">
                      מצב הורים
                    </Label>
                    {isEditing && !viewOnly ? (
                      <Input
                        value={formData.parentStatus || ''}
                        onChange={(e) =>
                          handleChange('parentStatus', e.target.value)
                        }
                        placeholder="לדוגמה: נשואים, גרושים"
                        className="h-9 text-sm focus:ring-cyan-500"
                      />
                    ) : (
                      <p className="text-sm text-gray-800 font-medium mt-1">
                        {renderDisplayValue(formData.parentStatus)}
                      </p>
                    )}
                  </div>

                  <div>
                    <Label className="block mb-1.5 text-xs font-medium text-gray-600">
                      מקצוע האב
                    </Label>
                    {isEditing && !viewOnly ? (
                      <Input
                        value={formData.fatherOccupation || ''}
                        onChange={(e) =>
                          handleChange('fatherOccupation', e.target.value)
                        }
                        placeholder="לדוגמה: מהנדס, עורך דין"
                        className="h-9 text-sm focus:ring-cyan-500"
                      />
                    ) : (
                      <p className="text-sm text-gray-800 font-medium mt-1">
                        {renderDisplayValue(formData.fatherOccupation)}
                      </p>
                    )}
                  </div>

                  <div>
                    <Label className="block mb-1.5 text-xs font-medium text-gray-600">
                      מקצוע האם
                    </Label>
                    {isEditing && !viewOnly ? (
                      <Input
                        value={formData.motherOccupation || ''}
                        onChange={(e) =>
                          handleChange('motherOccupation', e.target.value)
                        }
                        placeholder="לדוגמה: מורה, רופאה"
                        className="h-9 text-sm focus:ring-cyan-500"
                      />
                    ) : (
                      <p className="text-sm text-gray-800 font-medium mt-1">
                        {renderDisplayValue(formData.motherOccupation)}
                      </p>
                    )}
                  </div>

                  <div>
                    <Label className="block mb-1.5 text-xs font-medium text-gray-600">
                      מספר אחים/אחיות
                    </Label>
                    {isEditing && !viewOnly ? (
                      <Input
                        type="number"
                        value={formData.siblings ?? ''}
                        onChange={(e) =>
                          handleChange('siblings', e.target.value)
                        }
                        className="h-9 text-sm focus:ring-cyan-500"
                        placeholder="כולל אותך"
                        min="0"
                      />
                    ) : (
                      <p className="text-sm text-gray-800 font-medium mt-1">
                        {renderDisplayValue(formData.siblings)}
                      </p>
                    )}
                  </div>
                  <div>
                    <Label className="block mb-1.5 text-xs font-medium text-gray-600">
                      מיקום במשפחה
                    </Label>
                    {isEditing && !viewOnly ? (
                      <Input
                        type="number"
                        value={formData.position ?? ''}
                        onChange={(e) =>
                          handleChange('position', e.target.value)
                        }
                        className="h-9 text-sm focus:ring-cyan-500"
                        placeholder="לדוגמה: 1 (בכור/ה)"
                        min="0"
                      />
                    ) : (
                      <p className="text-sm text-gray-800 font-medium mt-1">
                        {renderDisplayValue(formData.position)}
                      </p>
                    )}
                  </div>
                </div>
              </CardContent>
            </Card>

            <Card className="bg-white/80 backdrop-blur-md rounded-2xl shadow-lg border border-gray-200/40 overflow-hidden">
              <CardHeader className="bg-gradient-to-r from-yellow-50/40 to-amber-50/40 border-b border-gray-200/50 p-4 flex items-center space-x-2 rtl:space-x-reverse">
                <BookOpen className="w-5 h-5 text-amber-700" />
                <CardTitle className="text-base font-semibold text-gray-700">
                  דת ואורח חיים
                </CardTitle>
              </CardHeader>
              <CardContent className="p-4 md:p-6">
                <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-x-6 gap-y-5 items-start">
                  <div>
                    <Label className="block mb-1.5 text-xs font-medium text-gray-600">
                      רמה דתית
                    </Label>
                    {isEditing && !viewOnly ? (
                      <Select
                        value={formData.religiousLevel || ''}
                        onValueChange={(value) =>
                          handleChange('religiousLevel', value || undefined)
                        }
                      >
                        <SelectTrigger className="h-9 text-sm focus:ring-cyan-500">
                          <SelectValue placeholder="בחר/י רמה" />
                        </SelectTrigger>
                        <SelectContent className="max-h-[250px]">
                          {religiousLevelOptions.map((opt) => (
                            <SelectItem key={opt.value} value={opt.value}>
                              {opt.label}
                            </SelectItem>
                          ))}
                        </SelectContent>
                      </Select>
                    ) : (
                      <p className="text-sm text-gray-800 font-medium mt-1">
                        {renderSelectDisplayValue(
                          formData.religiousLevel,
                          religiousLevelOptions
                        )}
                      </p>
                    )}
                  </div>
                  <div>
                    <Label className="block mb-1.5 text-xs font-medium text-gray-600">
                      מסע דתי
                    </Label>
                    {isEditing && !viewOnly ? (
                      <Select
                        value={formData.religiousJourney || ''}
                        onValueChange={(value) =>
                          handleChange(
                            'religiousJourney',
                            (value as ReligiousJourney) || undefined
                          )
                        }
                      >
                        <SelectTrigger className="h-9 text-sm focus:ring-cyan-500">
                          <SelectValue placeholder="בחר/י רקע דתי" />
                        </SelectTrigger>
                        <SelectContent className="max-h-[250px]">
                          {religiousJourneyOptions.map((opt) => (
                            <SelectItem key={opt.value} value={opt.value}>
                              {opt.label}
                            </SelectItem>
                          ))}
                        </SelectContent>
                      </Select>
                    ) : (
                      <p className="text-sm text-gray-800 font-medium mt-1">
                        {renderSelectDisplayValue(
                          formData.religiousJourney,
                          religiousJourneyOptions,
                          'לא צוין'
                        )}
                      </p>
                    )}
                  </div>
                  <div
                    className={cn(
                      'pt-1 sm:pt-0',
                      isEditing && !viewOnly ? 'sm:pt-5' : 'sm:pt-0'
                    )}
                  >
                    <Label className="block mb-1.5 text-xs font-medium text-gray-600">
                      שומר/ת נגיעה?
                    </Label>
                    {isEditing && !viewOnly ? (
                      <div className="flex items-center space-x-2 rtl:space-x-reverse mt-2">
                        <Checkbox
                          id="shomerNegiah"
                          checked={formData.shomerNegiah || false}
                          onCheckedChange={(checked) =>
                            handleChange('shomerNegiah', checked as boolean)
                          }
                        />
                        <Label
                          htmlFor="shomerNegiah"
                          className="text-sm font-normal text-gray-700"
                        >
                          כן
                        </Label>
                      </div>
                    ) : (
                      <p className="text-sm text-gray-800 font-medium mt-1">
                        {renderBooleanDisplayValue(formData.shomerNegiah)}
                      </p>
                    )}
                  </div>
                  {formData.gender === Gender.FEMALE && (
                    <div>
                      <Label className="block mb-1.5 text-xs font-medium text-gray-600">
                        כיסוי ראש
                      </Label>
                      {isEditing && !viewOnly ? (
                        <Select
                          value={formData.headCovering || ''}
                          onValueChange={(value) =>
                            handleChange(
                              'headCovering',
                              (value as HeadCoveringType) || undefined
                            )
                          }
                        >
                          <SelectTrigger className="h-9 text-sm focus:ring-cyan-500">
                            <SelectValue placeholder="בחר/י סוג כיסוי" />
                          </SelectTrigger>
                          <SelectContent>
                            {headCoveringOptions.map((opt) => (
                              <SelectItem key={opt.value} value={opt.value}>
                                {opt.label}
                              </SelectItem>
                            ))}
                          </SelectContent>
                        </Select>
                      ) : (
                        <p className="text-sm text-gray-800 font-medium mt-1">
                          {renderSelectDisplayValue(
                            formData.headCovering,
                            headCoveringOptions,
                            'ללא'
                          )}
                        </p>
                      )}
                    </div>
                  )}
                  {formData.gender === Gender.MALE && (
                    <div>
                      <Label className="block mb-1.5 text-xs font-medium text-gray-600">
                        סוג כיפה
                      </Label>
                      {isEditing && !viewOnly ? (
                        <Select
                          value={formData.kippahType || ''}
                          onValueChange={(value) =>
                            handleChange(
                              'kippahType',
                              (value as KippahType) || undefined
                            )
                          }
                        >
                          <SelectTrigger className="h-9 text-sm focus:ring-cyan-500">
                            <SelectValue placeholder="בחר/י סוג כיפה" />
                          </SelectTrigger>
                          <SelectContent className="max-h-[200px]">
                            {kippahTypeOptions.map((opt) => (
                              <SelectItem key={opt.value} value={opt.value}>
                                {opt.label}
                              </SelectItem>
                            ))}
                          </SelectContent>
                        </Select>
                      ) : (
                        <p className="text-sm text-gray-800 font-medium mt-1">
                          {renderSelectDisplayValue(
                            formData.kippahType,
                            kippahTypeOptions,
                            'ללא'
                          )}
                        </p>
                      )}
                    </div>
                  )}
                  <div>
                    <Label className="block mb-1.5 text-xs font-medium text-gray-600">
                      מגדר שדכן/ית מועדף
                    </Label>
                    {isEditing && !viewOnly ? (
                      <Select
                        value={formData.preferredMatchmakerGender || ''}
                        onValueChange={(value) =>
                          handleChange(
                            'preferredMatchmakerGender',
                            (value as Gender) || undefined
                          )
                        }
                      >
                        <SelectTrigger className="h-9 text-sm focus:ring-cyan-500">
                          <SelectValue placeholder="בחר/י העדפה (לא חובה)" />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="MALE">משדך</SelectItem>
                          <SelectItem value="FEMALE">שדכנית</SelectItem>
                          <SelectItem value="NONE">ללא העדפה</SelectItem>
                        </SelectContent>
                      </Select>
                    ) : (
                      <p className="text-sm text-gray-800 font-medium mt-1">
                        {renderSelectDisplayValue(
                          formData.preferredMatchmakerGender,
                          preferredMatchmakerGenderOptions,
                          'ללא העדפה'
                        )}
                      </p>
                    )}
                  </div>
                </div>
                
                <div className="mt-6 pt-6 border-t border-gray-200/70">
                  <div className="flex items-center gap-1.5 mb-2">
                    <Label
                      htmlFor="influentialRabbi"
                      className="text-sm font-medium text-gray-700"
                    >
                      דמות רבנית/רוחנית משפיעה
                    </Label>
                    <TooltipProvider>
                      <Tooltip>
                        <TooltipTrigger type="button">
                          <Info className="w-4 h-4 text-gray-400" />
                        </TooltipTrigger>
                        <TooltipContent
                          side="top"
                          className="max-w-xs text-center"
                        >
                          <p>
                            ספר/י על דמות (רב, רבנית, הוגה דעות) שהשפיעה על
                            תפיסת עולמך. זה עוזר לנו להבין את הגוון הרוחני שלך.
                          </p>
                        </TooltipContent>
                      </Tooltip>
                    </TooltipProvider>
                  </div>
                  {isEditing && !viewOnly ? (
                    <Textarea
                      id="influentialRabbi"
                      value={formData.influentialRabbi || ''}
                      onChange={(e) =>
                        handleChange('influentialRabbi', e.target.value)
                      }
                      className="text-sm focus:ring-cyan-500 min-h-[90px] rounded-lg"
                      placeholder="שם הדמות, וכיצד היא השפיעה עליך..."
                      rows={3}
                    />
                  ) : (
                    <p className="mt-1 text-sm text-gray-700 whitespace-pre-wrap min-h-[50px] bg-slate-50/70 p-3 rounded-lg border border-slate-200/50">
                      {renderDisplayValue(
                        formData.influentialRabbi,
                        'לא צוינה דמות משפיעה.'
                      )}
                    </p>
                  )}
                </div>
                
              </CardContent>
            </Card>
          </div>

          <div className="space-y-6">
            <Card className="bg-white/80 backdrop-blur-md rounded-2xl shadow-lg border border-gray-200/40 overflow-hidden">
              <CardHeader className="bg-gradient-to-r from-slate-50/40 to-gray-100/40 border-b border-gray-200/50 p-4 flex items-center space-x-2 rtl:space-x-reverse">
                <Info className="w-5 h-5 text-slate-600" />
                <CardTitle className="text-base font-semibold text-gray-700">
                  קצת עלי ומידע נוסף
                </CardTitle>
              </CardHeader>
              <CardContent className="p-4 md:p-6">
                <div className="space-y-6">
                  
                  <div>
                    <div className="flex items-center gap-1.5 mb-2">
                      <Label
                        htmlFor="profileHeadline"
                        className="text-sm font-medium text-gray-700"
                      >
                        כותרת פרופיל
                      </Label>
                      <TooltipProvider>
                        <Tooltip>
                          <TooltipTrigger type="button">
                            <Info className="w-4 h-4 text-gray-400" />
                          </TooltipTrigger>
                          <TooltipContent
                            side="top"
                            className="max-w-xs text-center"
                          >
                            <p>
                              כתוב/י משפט אחד קליט שמסכם אותך או את מה שאת/ה
                              מחפש/ת. למשל: &quot;מהנדס ביום, חולם בלילה&quot;.
                            </p>
                          </TooltipContent>
                        </Tooltip>
                      </TooltipProvider>
                    </div>
                    {isEditing && !viewOnly ? (
                      <Input
                        id="profileHeadline"
                        value={formData.profileHeadline || ''}
                        onChange={(e) =>
                          handleChange('profileHeadline', e.target.value)
                        }
                        className="text-sm focus:ring-cyan-500 rounded-lg"
                        placeholder="משפט אחד שמסכם אותך..."
                        maxLength={80}
                      />
                    ) : (
                      <p className="mt-1 text-lg font-semibold text-cyan-700 italic">
                        {`"${renderDisplayValue(
                          formData.profileHeadline,
                          'לא הוזנה כותרת.'
                        )}"`}
                      </p>
                    )}
                  </div>
                  
                  <div>
                    <div className="flex items-center gap-1.5 mb-2">
                      <Label
                        htmlFor="about"
                        className="text-sm font-medium text-gray-700"
                      >
                        ספר/י קצת על עצמך (תיאור חופשי)
                      </Label>
                      <TooltipProvider delayDuration={100}>
                        <Tooltip>
                          <TooltipTrigger
                            type="button"
                            className="text-gray-400 hover:text-gray-600"
                          >
                            <Info className="w-4 h-4" />
                          </TooltipTrigger>
                          <TooltipContent
                            side="top"
                            className="max-w-xs text-center"
                          >
                            <p>
                              כאן המקום שלך לבלוט! ספר/י על עצמך באופן חופשי
                              וזורם: מה את/ה עושה היום בחיים, תחנות משמעותיות
                              שעברת, וכמובן - על האופי שלך.
                              <br />
                              <strong className="text-cyan-600">
                                שים/י לב: נדרשים לפחות 100 תווים.
                              </strong>
                            </p>
                          </TooltipContent>
                        </Tooltip>
                      </TooltipProvider>
                    </div>
                    {isEditing && !viewOnly ? (
                      <div>
                        <Textarea
                          id="about"
                          value={formData.about || ''}
                          onChange={(e) =>
                            handleChange('about', e.target.value)
                          }
                          className={cn(
                            'text-sm focus:ring-cyan-500 min-h-[120px] rounded-lg',
                            formData.about && formData.about.trim().length < 100
                              ? 'border-red-400 focus:ring-red-300'
                              : ''
                          )}
                          placeholder="תאר/י את עצמך, מה מאפיין אותך, מה חשוב לך..."
                          rows={5}
                        />
                        {formData.about && (
                          <div
                            className={cn(
                              'text-xs mt-1 text-right',
                              formData.about.trim().length < 100
                                ? 'text-red-600'
                                : 'text-gray-500'
                            )}
                          >
                            {formData.about.trim().length} / 100+ תווים
                          </div>
                        )}
                      </div>
                    ) : (
                      <p className="mt-1 text-sm text-gray-700 whitespace-pre-wrap min-h-[60px] bg-slate-50/70 p-3 rounded-lg border border-slate-200/50">
                        {formData.about || (
                          <span className="text-gray-500 italic">
                            לא הוזן תיאור אישי.
                          </span>
                        )}
                      </p>
                    )}
                  </div>

                  <div>
                    <div className="flex items-center gap-1.5 mb-2">
                      <Label
                        htmlFor="inspiringCoupleStory"
                        className="text-sm font-medium text-gray-700"
                      >
                        הזוג שנותן לי השראה
                      </Label>
                      <TooltipProvider>
                        <Tooltip>
                          <TooltipTrigger type="button">
                            <Info className="w-4 h-4 text-gray-400" />
                          </TooltipTrigger>
                          <TooltipContent
                            side="top"
                            className="max-w-xs text-center"
                          >
                            <p>
                              חשוב/י על זוג (מהמשפחה, חברים, דמויות היסטוריות)
                              שהזוגיות שלהם מעוררת בך השראה. מה את/ה לומד/ת מהם?
                            </p>
                          </TooltipContent>
                        </Tooltip>
                      </TooltipProvider>
                    </div>
                    {isEditing && !viewOnly ? (
                      <Textarea
                        id="inspiringCoupleStory"
                        value={formData.inspiringCoupleStory || ''}
                        onChange={(e) =>
                          handleChange('inspiringCoupleStory', e.target.value)
                        }
                        className="text-sm focus:ring-cyan-500 min-h-[90px] rounded-lg"
                        placeholder="מי הזוג ומה מיוחד בזוגיות שלהם בעיניך..."
                        rows={3}
                      />
                    ) : (
                      <p className="mt-1 text-sm text-gray-700 whitespace-pre-wrap min-h-[50px] bg-slate-50/70 p-3 rounded-lg border border-slate-200/50">
                        {renderDisplayValue(
                          formData.inspiringCoupleStory,
                          'לא צוין זוג מעורר השראה.'
                        )}
                      </p>
                    )}
                  </div>
                  
                  <div>
                    <div className="flex items-center gap-1.5 mb-2">
                      <Label className="text-sm font-medium text-gray-700">
                        הערות נוספות לשדכן/ית (לא יוצג לצד השני)
                      </Label>
                      <TooltipProvider delayDuration={100}>
                        <Tooltip>
                          <TooltipTrigger
                            type="button"
                            className="text-gray-400 hover:text-gray-600"
                          >
                            <Info className="w-4 h-4" />
                          </TooltipTrigger>
                          <TooltipContent
                            side="top"
                            className="max-w-xs text-center"
                          >
                            <p>
                              מידע שחשוב לנו לדעת כדי למצוא התאמה טובה, אך לא
                              תרצה/י שיופיע בפרופיל הגלוי. למשל: נושאים רגישים,
                              העדפות ספציפיות מאוד, או רקע נוסף.
                            </p>
                          </TooltipContent>
                        </Tooltip>
                      </TooltipProvider>
                    </div>
                    {isEditing && !viewOnly ? (
                      <Textarea
                        value={formData.matchingNotes || ''}
                        onChange={(e) =>
                          handleChange('matchingNotes', e.target.value)
                        }
                        className="text-sm focus:ring-cyan-500 min-h-[90px] rounded-lg"
                        placeholder="דברים נוספים שחשוב שהשדכן/ית יידעו עליך..."
                        rows={3}
                      />
                    ) : (
                      <p className="mt-1 text-sm text-gray-700 whitespace-pre-wrap min-h-[50px] bg-slate-50/70 p-3 rounded-lg border border-slate-200/50">
                        {formData.matchingNotes || (
                          <span className="text-gray-500 italic">
                            אין הערות נוספות לשדכן/ית.
                          </span>
                        )}
                      </p>
                    )}
                  </div>
                </div>
              </CardContent>
            </Card>

            <Card className="bg-white/80 backdrop-blur-md rounded-2xl shadow-lg border border-gray-200/40 overflow-hidden">
              <CardHeader className="bg-gradient-to-r from-red-50/40 to-pink-50/40 border-b border-gray-200/50 p-4 flex items-center space-x-2 rtl:space-x-reverse">
                <HeartPulse className="w-5 h-5 text-red-700" />
                <CardTitle className="text-base font-semibold text-gray-700">
                  מידע רפואי ורגיש
                </CardTitle>
                <TooltipProvider delayDuration={100}>
                  <Tooltip>
                    <TooltipTrigger type="button">
                      <Lock className="w-4 h-4 text-gray-400" />
                    </TooltipTrigger>
                    <TooltipContent>
                      <p>
                        מידע בחלק זה מיועד לשדכנים בלבד ולא יוצג בפרופיל כברירת
                        מחדל.
                      </p>
                    </TooltipContent>
                  </Tooltip>
                </TooltipProvider>
              </CardHeader>
              <CardContent className="p-4 md:p-6 space-y-4">
                <div className="text-sm text-gray-600 bg-gray-50 p-3 rounded-lg border border-gray-200/80">
                  אנו מאמינים שקשר בריא נבנה על יושרה ואחריות. חלק זה מאפשר לך
                  לשתף באופן דיסקרטי מידע רפואי (פיזי או נפשי) רלוונטי, כדי
                  שנוכל לסייע במציאת התאמה מדויקת ולמנוע עוגמת נפש.
                </div>

                {isEditing && !viewOnly ? (
                  <div className="space-y-4">
                    <div className="flex items-center space-x-2 rtl:space-x-reverse">
                      <Checkbox
                        id="hasMedicalInfo"
                        checked={formData.hasMedicalInfo || false}
                        onCheckedChange={(checked) =>
                          handleChange('hasMedicalInfo', checked as boolean)
                        }
                      />
                      <Label
                        htmlFor="hasMedicalInfo"
                        className="text-sm font-medium text-gray-700 cursor-pointer"
                      >
                        ישנו מידע רפואי שחשוב שהצוות יידע?
                      </Label>
                    </div>

                    {formData.hasMedicalInfo && (
                      <div className="space-y-4 border-t pt-4 animate-in fade-in-50">
                        <div>
                          <Label
                            htmlFor="medicalInfoDetails"
                            className="block mb-1.5 text-xs font-medium text-gray-600"
                          >
                            פירוט המידע (יישמר בסודיות מוחלטת)
                          </Label>
                          <Textarea
                            id="medicalInfoDetails"
                            value={formData.medicalInfoDetails || ''}
                            onChange={(e) =>
                              handleChange('medicalInfoDetails', e.target.value)
                            }
                            className="text-sm focus:ring-cyan-500 min-h-[100px] rounded-lg"
                            placeholder="כאן המקום לפרט. למשל: מחלה כרונית, התמודדות נפשית, ענייני פוריות, או כל דבר שמרגיש לך נכון וחשוב לציין."
                          />
                        </div>
                        <div>
                          <Label
                            htmlFor="medicalInfoDisclosureTiming"
                            className="block mb-1.5 text-xs font-medium text-gray-600"
                          >
                            מתי תרצה/י שהמידע ייחשף לצד השני (בתיווך השדכן/ית)?
                          </Label>
                          <Select
                            value={formData.medicalInfoDisclosureTiming || ''}
                            onValueChange={(value) =>
                              handleChange(
                                'medicalInfoDisclosureTiming',
                                value || undefined
                              )
                            }
                          >
                            <SelectTrigger className="h-9 text-sm focus:ring-cyan-500">
                              <SelectValue placeholder="בחר/י תזמון חשיפה" />
                            </SelectTrigger>
                            <SelectContent>
                              <SelectItem value="FROM_THE_START">
                                מההתחלה (מומלץ לנושאים מהותיים)
                              </SelectItem>
                              <SelectItem value="AFTER_FIRST_DATES">
                                לאחר דייט ראשון או שני
                              </SelectItem>
                              <SelectItem value="WHEN_SERIOUS">
                                כשהקשר הופך לרציני
                              </SelectItem>
                              <SelectItem value="IN_COORDINATION_ONLY">
                                אך ורק בתיאום טלפוני אישי איתי
                              </SelectItem>
                            </SelectContent>
                          </Select>
                        </div>

                        <div className="border-t pt-4">
                          <Label className="block mb-2 text-xs font-medium text-gray-600">
                            הצגה בפרופיל
                          </Label>
                          <div className="flex items-center gap-3 bg-gray-50 p-3 rounded-lg">
                            <Switch
                              id="isMedicalInfoVisible"
                              checked={!!formData.isMedicalInfoVisible}
                              onCheckedChange={(checked) =>
                                handleChange('isMedicalInfoVisible', checked)
                              }
                              className="data-[state=checked]:bg-green-500"
                            />
                            <div className="flex flex-col">
                              <Label
                                htmlFor="isMedicalInfoVisible"
                                className="text-sm font-medium text-gray-800 cursor-pointer"
                              >
                                {formData.isMedicalInfoVisible
                                  ? 'יוצג בפרופיל'
                                  : 'דיסקרטי (לצוות בלבד)'}
                              </Label>
                              <p className="text-xs text-gray-500">
                                {formData.isMedicalInfoVisible
                                  ? 'ציון על קיום מידע רפואי יוצג בכרטיס שלך.'
                                  : 'המידע יישאר חסוי וישמש את השדכנים בלבד.'}
                              </p>
                            </div>
                          </div>
                        </div>
                      </div>
                    )}
                  </div>
                ) : (
                  <div className="space-y-4">
                    <div>
                      <Label className="block text-xs font-medium text-gray-500">
                        מידע רפואי ששותף
                      </Label>
                      <p className="text-sm text-gray-800 font-medium mt-1">
                        {renderBooleanDisplayValue(
                          formData.hasMedicalInfo,
                          'כן',
                          'לא'
                        )}
                      </p>
                    </div>
                    {formData.hasMedicalInfo && (
                      <>
                        <div>
                          <Label className="block text-xs font-medium text-gray-500">
                            פרטי המידע
                          </Label>
                          <p className="mt-1 text-sm text-gray-700 whitespace-pre-wrap min-h-[40px] bg-slate-50/70 p-3 rounded-lg border border-slate-200/50">
                            {formData.medicalInfoDetails || (
                              <span className="text-gray-500 italic">
                                לא הוזן פירוט.
                              </span>
                            )}
                          </p>
                        </div>
                        <div>
                          <Label className="block text-xs font-medium text-gray-500">
                            תזמון חשיפה מועדף
                          </Label>
                          <p className="text-sm text-gray-800 font-medium mt-1">
                            {renderSelectDisplayValue(
                              formData.medicalInfoDisclosureTiming,
                              [
                                {
                                  value: 'FROM_THE_START',
                                  label: 'מההתחלה',
                                },
                                {
                                  value: 'AFTER_FIRST_DATES',
                                  label: 'לאחר דייטים ראשונים',
                                },
                                {
                                  value: 'WHEN_SERIOUS',
                                  label: 'כשהקשר רציני',
                                },
                                {
                                  value: 'IN_COORDINATION_ONLY',
                                  label: 'בתיאום אישי בלבד',
                                },
                              ]
                            )}
                          </p>
                        </div>
                        <div>
                          <Label className="block text-xs font-medium text-gray-500">
                            נראות בפרופיל
                          </Label>
                          <div className="flex items-center gap-2 mt-1">
                            {formData.isMedicalInfoVisible ? (
                              <Badge
                                variant="secondary"
                                className="bg-green-100 text-green-800"
                              >
                                <Eye className="w-3.5 h-3.5 ml-1.5" />
                                גלוי בפרופיל
                              </Badge>
                            ) : (
                              <Badge
                                variant="secondary"
                                className="bg-gray-100 text-gray-700"
                              >
                                <Lock className="w-3.5 h-3.5 ml-1.5" />
                                דיסקרטי (לצוות בלבד)
                              </Badge>
                            )}
                          </div>
                        </div>
                      </>
                    )}
                  </div>
                )}
              </CardContent>
            </Card>

            <Card className="bg-white/80 backdrop-blur-md rounded-2xl shadow-lg border border-gray-200/40 overflow-hidden">
              <CardHeader className="bg-gradient-to-r from-teal-50/40 to-green-50/40 border-b border-gray-200/50 p-4 flex items-center space-x-2 rtl:space-x-reverse">
                <Briefcase className="w-5 h-5 text-teal-700" />
                <CardTitle className="text-base font-semibold text-gray-700">
                  השכלה, עיסוק ושירות
                </CardTitle>
              </CardHeader>
              <CardContent className="p-4 md:p-6">
                <div className="grid grid-cols-1 sm:grid-cols-2 gap-x-6 gap-y-5">
                  <div>
                    <Label className="block mb-1.5 text-xs font-medium text-gray-600">
                      רמת השכלה
                    </Label>
                    {isEditing && !viewOnly ? (
                      <Select
                        value={formData.educationLevel || ''}
                        onValueChange={(value) =>
                          handleChange('educationLevel', value || undefined)
                        }
                      >
                        <SelectTrigger className="h-9 text-sm focus:ring-cyan-500">
                          <SelectValue placeholder="בחר/י רמה" />
                        </SelectTrigger>
                        <SelectContent>
                          {educationLevelOptions.map((opt) => (
                            <SelectItem key={opt.value} value={opt.value}>
                              {opt.label}
                            </SelectItem>
                          ))}
                        </SelectContent>
                      </Select>
                    ) : (
                      <p className="text-sm text-gray-800 font-medium mt-1">
                        {renderSelectDisplayValue(
                          formData.educationLevel,
                          educationLevelOptions
                        )}
                      </p>
                    )}
                  </div>
                  <div className="sm:col-span-2">
                    <Label className="block mb-1.5 text-xs font-medium text-gray-600">
                      פירוט השכלה (מוסד, תחום)
                    </Label>
                    {isEditing && !viewOnly ? (
                      <Input
                        value={formData.education || ''}
                        onChange={(e) =>
                          handleChange('education', e.target.value)
                        }
                        placeholder="לדוגמה: אוני' בר אילן, משפטים"
                        className="h-9 text-sm focus:ring-cyan-500"
                      />
                    ) : (
                      <p className="text-sm text-gray-800 font-medium mt-1">
                        {renderDisplayValue(formData.education)}
                      </p>
                    )}
                  </div>
                  <div className="sm:col-span-2">
                    <Label className="block mb-1.5 text-xs font-medium text-gray-600">
                      עיסוק נוכחי
                    </Label>
                    {isEditing && !viewOnly ? (
                      <Input
                        value={formData.occupation || ''}
                        onChange={(e) =>
                          handleChange('occupation', e.target.value)
                        }
                        placeholder="לדוגמה: מורה, מהנדס תוכנה"
                        className="h-9 text-sm focus:ring-cyan-500"
                        maxLength={20}
                      />
                    ) : (
                      <p className="text-sm text-gray-800 font-medium mt-1">
                        {renderDisplayValue(formData.occupation)}
                      </p>
                    )}
                  </div>
                  <div>
                    <Label className="block mb-1.5 text-xs font-medium text-gray-600">
                      שירות (צבאי/לאומי/אחר)
                    </Label>
                    {isEditing && !viewOnly ? (
                      <Select
                        value={formData.serviceType || ''}
                        onValueChange={(value) =>
                          handleChange(
                            'serviceType',
                            (value as ServiceType) || undefined
                          )
                        }
                      >
                        <SelectTrigger className="h-9 text-sm focus:ring-cyan-500">
                          <SelectValue placeholder="בחר/י סוג שירות" />
                        </SelectTrigger>
                        <SelectContent className="max-h-[250px]">
                          {serviceTypeOptions.map((opt) => (
                            <SelectItem key={opt.value} value={opt.value}>
                              {opt.label}
                            </SelectItem>
                          ))}
                        </SelectContent>
                      </Select>
                    ) : (
                      <p className="text-sm text-gray-800 font-medium mt-1">
                        {renderSelectDisplayValue(
                          formData.serviceType,
                          serviceTypeOptions
                        )}
                      </p>
                    )}
                  </div>
                  <div className="sm:col-span-2">
                    <Label className="block mb-1.5 text-xs font-medium text-gray-600">
                      פירוט על השירות
                    </Label>
                    {isEditing && !viewOnly ? (
                      <Input
                        value={formData.serviceDetails || ''}
                        onChange={(e) =>
                          handleChange('serviceDetails', e.target.value)
                        }
                        placeholder="חיל, יחידה, תפקיד, שם ישיבה/מכינה"
                        className="h-9 text-sm focus:ring-cyan-500"
                      />
                    ) : (
                      <p className="text-sm text-gray-800 font-medium mt-1">
                        {renderDisplayValue(formData.serviceDetails)}
                      </p>
                    )}
                  </div>
                </div>
              </CardContent>
            </Card>

            <Card className="bg-white/80 backdrop-blur-md rounded-2xl shadow-lg border border-gray-200/40 overflow-hidden">
              <CardHeader className="bg-gradient-to-r from-amber-50/40 to-yellow-50/40 border-b border-gray-200/50 p-4 flex items-center space-x-2 rtl:space-x-reverse">
                <Smile className="w-5 h-5 text-amber-600" />
                <CardTitle className="text-base font-semibold text-gray-700">
                  תכונות אופי ותחביבים
                </CardTitle>
              </CardHeader>
              <CardContent className="p-4 md:p-6 space-y-6">
                <div>
                  <Label className="block mb-2 text-sm font-medium text-gray-700">
                    תכונות אופי בולטות (עד 3)
                  </Label>
                  {isEditing && !viewOnly ? (
                    <div className="flex flex-wrap gap-2">
                      {characterTraitsOptions.map((trait) => (
                        <Button
                          key={trait.value}
                          type="button"
                          variant={
                            (formData.profileCharacterTraits || []).includes(
                              trait.value
                            )
                              ? 'default'
                              : 'outline'
                          }
                          size="sm"
                          onClick={() =>
                            handleMultiSelectToggle(
                              'profileCharacterTraits',
                              trait.value
                            )
                          }
                          disabled={
                            !viewOnly &&
                            (formData.profileCharacterTraits || []).length >=
                              3 &&
                            !(formData.profileCharacterTraits || []).includes(
                              trait.value
                            )
                          }
                          className={cn(
                            'rounded-full text-xs px-3 py-1.5 transition-all',
                            (formData.profileCharacterTraits || []).includes(
                              trait.value
                            )
                              ? 'bg-amber-500 hover:bg-amber-600 text-white border-amber-500'
                              : 'border-gray-300 text-gray-600 hover:bg-gray-50 hover:border-gray-400'
                          )}
                        >
                          {trait.icon && (
                            <trait.icon className="w-3.5 h-3.5 ml-1.5 rtl:mr-1.5 rtl:ml-0" />
                          )}
                          {trait.label}
                        </Button>
                      ))}
                    </div>
                  ) : (
                    <div className="mt-1 flex flex-wrap gap-1.5">
                      {renderMultiSelectBadges(
                        formData.profileCharacterTraits,
                        characterTraitsOptions,
                        'לא נבחרו תכונות אופי.'
                      )}
                    </div>
                  )}
                </div>
                <div>
                  <Label className="block mb-2 text-sm font-medium text-gray-700">
                    תחביבים עיקריים (עד 3)
                  </Label>
                  {isEditing && !viewOnly ? (
                    <div className="flex flex-wrap gap-2">
                      {hobbiesOptions.map((hobby) => (
                        <Button
                          key={hobby.value}
                          type="button"
                          variant={
                            (formData.profileHobbies || []).includes(
                              hobby.value
                            )
                              ? 'default'
                              : 'outline'
                          }
                          size="sm"
                          onClick={() =>
                            handleMultiSelectToggle(
                              'profileHobbies',
                              hobby.value
                            )
                          }
                          disabled={
                            !viewOnly &&
                            (formData.profileHobbies || []).length >= 3 &&
                            !(formData.profileHobbies || []).includes(
                              hobby.value
                            )
                          }
                          className={cn(
                            'rounded-full text-xs px-3 py-1.5 transition-all',
                            (formData.profileHobbies || []).includes(
                              hobby.value
                            )
                              ? 'bg-sky-500 hover:bg-sky-600 text-white border-sky-500'
                              : 'border-gray-300 text-gray-600 hover:bg-gray-50 hover:border-gray-400'
                          )}
                        >
                          {hobby.icon && (
                            <hobby.icon className="w-3.5 h-3.5 ml-1.5 rtl:mr-1.5 rtl:ml-0" />
                          )}
                          {hobby.label}
                        </Button>
                      ))}
                    </div>
                  ) : (
                    <div className="mt-1 flex flex-wrap gap-1.5">
                      {renderMultiSelectBadges(
                        formData.profileHobbies,
                        hobbiesOptions,
                        'לא נבחרו תחביבים.'
                      )}
                    </div>
                  )}
                </div>
              </CardContent>
            </Card>
          </div>
        </div>
      </div>

      {/* Mobile Sticky Buttons */}
      {isEditing && !viewOnly && (
        <div className="sticky bottom-0 z-20 mt-4 border-t border-gray-200 bg-white/90 p-4 backdrop-blur-md shadow-[0_-4px_15px_-5px_rgba(0,0,0,0.15)] sm:hidden">
          <div className="flex items-center justify-center gap-3">
            <Button
              variant="outline"
              size="sm"
              onClick={handleCancel}
              className="rounded-full shadow-sm hover:shadow-md transition-all duration-300 border-gray-300 text-gray-700 hover:bg-gray-50 px-6 py-2"
            >
              <X className="w-4 h-4 ml-1.5" />
              ביטול
            </Button>
            <Button
              variant="default"
              size="sm"
              onClick={handleSave}
              className="rounded-full shadow-sm hover:shadow-md transition-all duration-300 bg-cyan-600 hover:bg-cyan-700 text-white px-6 py-2"
            >
              <Save className="w-4 h-4 ml-1.5" />
              שמירת שינויים
            </Button>
          </div>
        </div>
      )}
    </div>
  );
};

export default ProfileSection;
--- End of Content for ProfileSection.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\app\components\profile\sections\QuestionnaireResponsesSection.tsx
--------------------------------------------------------------------------------
Content:
// src/app/components/profile/sections/QuestionnaireResponsesSection.tsx

import React, { useState, useMemo, useEffect } from 'react';
import Link from 'next/link';
import {
  Card,
  CardHeader,
  CardTitle,
  CardContent,
  CardDescription,
} from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { Textarea } from '@/components/ui/textarea';
import {
  Book,
  CheckCircle,
  Clock,
  Pencil,
  X,
  Save,
  Eye,
  EyeOff,
  Loader2,
  ArrowRight,
} from 'lucide-react';
import { cn } from '@/lib/utils';
import { toast } from 'sonner';
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from '@/components/ui/tooltip';

// --- START: הוספת ייבוא לקומפוננטה החדשה ---
import BudgetDisplay from './BudgetDisplay';
// --- END: הוספת ייבוא לקומפוננטה החדשה ---

import type {
  QuestionnaireResponse,
  FormattedAnswer, // הטיפוס הזה עודכן בקובץ הטיפוסים
  UpdateValue,
} from '@/types/next-auth';

import { WORLDS } from '../constants';

const QUESTIONNAIRE_URL = '/questionnaire';

interface QuestionnaireResponsesSectionProps {
  questionnaire: QuestionnaireResponse | null;
  onUpdate?: (
    world: string,
    questionId: string,
    value: UpdateValue
  ) => Promise<void>;
  isEditable?: boolean;
  isFirstInList?: boolean;
  viewMode?: 'matchmaker' | 'candidate';
}

interface QuestionCardProps {
  question: string;
  answer: FormattedAnswer; // משתמש במבנה החדש שכולל rawValue ו-questionType
  isEditingGlobally: boolean;
  worldKey: string;
  onUpdate: (
    world: string,
    questionId: string,
    value: UpdateValue
  ) => Promise<void>;
  isFirstInList?: boolean;
}

// החלף את כל הקוד של QuestionCard בקוד הבא
// בתוך הקובץ: src/app/components/profile/sections/QuestionnaireResponsesSection.tsx

const QuestionCard: React.FC<QuestionCardProps> = ({
  question,
  answer,
  isEditingGlobally,
  worldKey,
  onUpdate,
  isFirstInList,
}) => {
  const [isEditingText, setIsEditingText] = useState(false);
  const [editValue, setEditValue] = useState(answer.displayText);
  const [isSavingText, setIsSavingText] = useState(false);
  const [isSavingVisibility, setIsSavingVisibility] = useState(false);
  const [currentIsVisible, setCurrentIsVisible] = useState(
    answer.isVisible ?? true
  );

  useEffect(() => {
    setCurrentIsVisible(answer.isVisible ?? true);
  }, [answer.isVisible]);

  const isSaving = isSavingText || isSavingVisibility;

  const handleStartEdit = () => {
    if (isSaving) return;
    setIsEditingText(true);
    setEditValue(answer.displayText);
  };

  const handleSaveText = async () => {
    if (!editValue?.trim()) {
      toast.error('לא ניתן לשמור תשובה ריקה.');
      return;
    }
    if (editValue.trim() === answer.displayText) {
      setIsEditingText(false);
      return;
    }

    setIsSavingText(true);
    try {
      await onUpdate(worldKey, answer.questionId, {
        type: 'answer',
        value: editValue.trim(),
      });
      toast.success('התשובה עודכנה בהצלחה');
      setIsEditingText(false);
    } catch (error) {
      console.error('Error updating answer:', error);
      toast.error('שגיאה בעדכון התשובה');
    } finally {
      setIsSavingText(false);
    }
  };

  const handleCancelEdit = () => {
    setIsEditingText(false);
    setEditValue(answer.displayText);
  };

  const handleVisibilityChange = async (newIsVisibleState: boolean) => {
    setCurrentIsVisible(newIsVisibleState);
    setIsSavingVisibility(true);
    try {
      await onUpdate(worldKey, answer.questionId, {
        type: 'visibility',
        isVisible: newIsVisibleState,
      });
      toast.success('הגדרות הנראות עודכנו');
    } catch (error) {
      console.error('Error updating visibility:', error);
      toast.error('שגיאה בעדכון הנראות');
      setCurrentIsVisible(answer.isVisible ?? true);
    } finally {
      setIsSavingVisibility(false);
    }
  };

  const renderAnswerContent = () => {
    if (
      answer.questionType === 'budgetAllocation' &&
      typeof answer.rawValue === 'object' &&
      answer.rawValue !== null &&
      !Array.isArray(answer.rawValue)
    ) {
      const budgetData = answer.rawValue as Record<string, number>;
      return <BudgetDisplay data={budgetData} />;
    }
    return (
      <p className="text-sm text-gray-800 break-words overflow-wrap-anywhere whitespace-pre-wrap">
        {answer.displayText}
      </p>
    );
  };

  const visibilityLabel = `הצג תשובה זו למועמדים: ${currentIsVisible ? 'מופעל' : 'כבוי'}`;

  return (
    <div className="rounded-lg border bg-card p-4 shadow-sm transition-shadow duration-300 hover:shadow-md">
      <div className="flex items-start justify-between gap-4">
        <div className="flex-1 min-w-0">
          <div className="flex flex-col sm:flex-row items-start sm:items-center justify-between mb-3 gap-2">
            <h4 className="font-medium text-sm sm:text-base flex-1 text-right">
              {question}
            </h4>
            <div className="flex items-center gap-2 self-end sm:self-center">
              {isSavingVisibility && (
                <Loader2 className="h-4 w-4 animate-spin text-muted-foreground" />
              )}
              <TooltipProvider delayDuration={200}>
                <Tooltip>
                  <TooltipTrigger asChild>
                    <button
                      type="button"
                      role="switch"
                      aria-checked={currentIsVisible}
                      disabled={!isEditingGlobally || isSaving}
                      onClick={() => handleVisibilityChange(!currentIsVisible)}
                      className={cn(
                        'inline-flex items-center justify-center h-8 px-3 rounded-full gap-2 transition-all duration-200 ease-in-out',
                        // Styles for disabled state (when not editing globally)
                        'disabled:opacity-100 disabled:cursor-default',
                        // Conditional styles based on visibility state
                        currentIsVisible
                          ? 'bg-emerald-100 text-emerald-800'
                          : 'bg-gray-200 text-gray-600',
                        // Hover and active effects, only when editable
                        isEditingGlobally &&
                          !isSaving &&
                          'hover:shadow-md active:scale-95',
                        isEditingGlobally &&
                          !isSaving &&
                          currentIsVisible &&
                          'hover:bg-emerald-200',
                        isEditingGlobally &&
                          !isSaving &&
                          !currentIsVisible &&
                          'hover:bg-gray-300'
                      )}
                    >
                      {currentIsVisible ? (
                        <Eye className="h-3.5 w-3.5" />
                      ) : (
                        <EyeOff className="h-3.5 w-3.5" />
                      )}
                      <span
                        className="text-xs font-medium whitespace-nowrap"
                        dir="rtl"
                      >
                        {currentIsVisible ? 'גלוי למועמדים' : 'מוסתר'}
                      </span>
                    </button>
                  </TooltipTrigger>
                  <TooltipContent side="top" dir="rtl">
                    <p>
                      {isEditingGlobally
                        ? currentIsVisible
                          ? 'הפוך למוסתר (יוצג רק לך ולשדכנים)'
                          : 'הפוך לגלוי (יוצג למועמדים)'
                        : currentIsVisible
                          ? 'תשובה זו גלויה למועמדים'
                          : 'תשובה זו מוסתרת מהמועמדים'}
                    </p>
                  </TooltipContent>
                </Tooltip>
              </TooltipProvider>
            </div>
          </div>

          {isEditingText ? (
            <div className="space-y-2 mt-1">
              <Textarea
                value={editValue}
                onChange={(e) => setEditValue(e.target.value)}
                className="min-h-[80px] text-sm focus:ring-cyan-500 focus:border-cyan-500"
                placeholder="הקלד/י את תשובתך כאן..."
                disabled={isSavingText}
              />
              <div className="flex justify-end gap-2">
                <Button
                  size="sm"
                  variant="ghost"
                  onClick={handleCancelEdit}
                  disabled={isSavingText}
                  className="text-gray-600 hover:bg-gray-100"
                >
                  <X className="h-4 w-4 ml-1" />
                  ביטול
                </Button>
                <Button
                  size="sm"
                  onClick={handleSaveText}
                  disabled={isSavingText || !editValue?.trim()}
                  className="bg-cyan-600 hover:bg-cyan-700 text-white"
                >
                  {isSavingText ? (
                    <Loader2 className="h-4 w-4 animate-spin" />
                  ) : (
                    <CheckCircle className="h-4 w-4 ml-1" />
                  )}
                  שמירה
                </Button>
              </div>
            </div>
          ) : (
            <div className="relative group overflow-hidden mt-1">
              <div className="p-3 bg-gray-50/50 rounded-md border border-gray-200/60 min-h-[40px]">
                {renderAnswerContent()}
                <TooltipProvider delayDuration={200}>
                  <Tooltip>
                    <TooltipTrigger asChild>
                      <span className="text-xs text-gray-400 block mt-2 text-left">
                        {new Date(answer.answeredAt).toLocaleDateString(
                          'he-IL',
                          { year: 'numeric', month: '2-digit', day: '2-digit' }
                        )}
                      </span>
                    </TooltipTrigger>
                    <TooltipContent side="top" dir="rtl">
                      <p>תאריך עדכון אחרון</p>
                    </TooltipContent>
                  </Tooltip>
                </TooltipProvider>
              </div>

              {/* --- START: כאן נמצא השינוי המרכזי --- */}
              {isEditingGlobally && !isSaving && (
                <TooltipProvider delayDuration={200}>
                  <Tooltip>
                    <TooltipTrigger asChild>
                      {/* אם זו שאלת תקציב, הכפתור הוא קישור. אחרת, הוא כפתור רגיל */}
                      {answer.questionType === 'budgetAllocation' ? (
                        <Button
                          asChild // מאפשר לכפתור לעטוף את הקישור
                          variant="ghost"
                          size="icon"
                          className="absolute top-0 right-0 opacity-0 group-hover:opacity-100 transition-opacity duration-200 h-7 w-7 text-cyan-600 hover:bg-cyan-50"
                        >
                          <Link
                            href={`/questionnaire?world=${worldKey}&question=${answer.questionId}`}
                          >
                            <Pencil className="h-4 w-4" />
                            <span className="sr-only">עריכה בשאלון המלא</span>
                          </Link>
                        </Button>
                      ) : (
                        <Button
                          variant="ghost"
                          size="icon"
                          className="absolute top-0 right-0 opacity-0 group-hover:opacity-100 transition-opacity duration-200 h-7 w-7 text-cyan-600 hover:bg-cyan-50"
                          onClick={handleStartEdit}
                        >
                          <Pencil className="h-4 w-4" />
                          <span className="sr-only">עריכת תשובה</span>
                        </Button>
                      )}
                    </TooltipTrigger>
                    <TooltipContent side="top" dir="rtl">
                      <p>
                        {answer.questionType === 'budgetAllocation'
                          ? 'עריכה בשאלון המלא'
                          : 'עריכת תשובה'}
                      </p>
                    </TooltipContent>
                  </Tooltip>
                </TooltipProvider>
              )}
              {/* --- END: סוף השינוי המרכזי --- */}

              {isSavingText && !isEditingText && (
                <div className="absolute top-1 right-1">
                  <Loader2 className="h-4 w-4 animate-spin text-cyan-500" />
                </div>
              )}
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

// ... (שאר הקובץ נשאר ללא שינוי)
// --- WorldSection Component ---
interface WorldSectionProps {
  worldKey: keyof typeof WORLDS;
  worldConfig: (typeof WORLDS)[keyof typeof WORLDS];
  answers: FormattedAnswer[];
  isEditingGlobally: boolean;
  onUpdate: (
    world: string,
    questionId: string,
    value: UpdateValue
  ) => Promise<void>;
  isCompleted: boolean;
  className?: string;
}

const WorldSection: React.FC<WorldSectionProps> = ({
  worldKey,
  worldConfig,
  answers,
  isEditingGlobally,
  onUpdate,
  isCompleted,
  className,
}) => {
  const { title, icon: Icon, color, bgColor, borderColor } = worldConfig;

  return (
    <Card
      className={cn(
        'overflow-hidden shadow-sm border',
        bgColor,
        borderColor,
        className
      )}
    >
      <CardHeader
        className="p-4 border-b"
        style={{
          borderColor: `rgba(var(--${color.split('-')[1]}-200-rgb), 0.5)`,
        }}
      >
        <div className="flex items-center justify-between">
          <div className="flex items-center gap-3">
            <div
              className={cn(
                'p-2 rounded-full',
                color.replace('text-', 'bg-') + '/10'
              )}
            >
              <Icon className={cn('h-5 w-5', color)} />
            </div>
            <div>
              <CardTitle className="text-md sm:text-lg text-gray-800">
                {title}
              </CardTitle>
              <CardDescription className="text-xs text-gray-500 mt-0.5">
                {answers.length} {answers.length === 1 ? 'תשובה' : 'תשובות'}
              </CardDescription>
            </div>
          </div>
          <Badge
            variant={isCompleted ? 'success' : 'secondary'}
            className={cn(
              'gap-1 text-xs px-2 py-0.5 rounded-full',
              isCompleted
                ? 'bg-emerald-100 text-emerald-800'
                : 'bg-blue-100 text-blue-800'
            )}
          >
            {isCompleted ? (
              <CheckCircle className="h-3 w-3" />
            ) : (
              <Clock className="h-3 w-3" />
            )}
            {isCompleted ? 'הושלם' : 'בתהליך'}
          </Badge>
        </div>
      </CardHeader>
      <CardContent className="p-4 pt-4">
        <div className="space-y-4">
          {answers.map((answer, index) => (
            <QuestionCard
              key={answer.questionId}
              question={answer.question}
              answer={answer}
              isFirstInList={index === 0}
              isEditingGlobally={isEditingGlobally}
              worldKey={worldKey}
              onUpdate={onUpdate}
            />
          ))}
        </div>
      </CardContent>
    </Card>
  );
};

// --- QuestionnaireResponsesSection Component ---
const QuestionnaireResponsesSection: React.FC<
  QuestionnaireResponsesSectionProps
> = ({ questionnaire, onUpdate, isEditable = false }) => {
  const [isEditingGlobally, setIsEditingGlobally] = useState(false);

  const worldsWithAnswers = useMemo(() => {
    if (!questionnaire?.formattedAnswers) return [];
    return Object.entries(WORLDS)
      .map(([key, config]) => ({
        key: key as keyof typeof WORLDS,
        config,
        answers:
          questionnaire.formattedAnswers?.[
            key as keyof typeof questionnaire.formattedAnswers
          ] ?? [],
        isCompleted:
          (questionnaire[
            `${key}Completed` as keyof QuestionnaireResponse
          ] as boolean) ?? false,
      }))
      .filter((world) => world.answers.length > 0);
  }, [questionnaire]);

  if (!questionnaire) {
    return (
      <Card className="text-center py-12 text-gray-500 bg-gray-50 rounded-lg border border-dashed">
        <Book className="h-10 w-10 mx-auto mb-3 opacity-50 text-gray-400" />
        <p className="font-medium">לא מולא שאלון עבור פרופיל זה.</p>
        <p className="text-sm mt-1">אין תשובות להציג.</p>
        <div className="mt-6">
          <Button
            asChild
            variant="default"
            className="bg-cyan-600 hover:bg-cyan-700"
          >
            <Link
              href={QUESTIONNAIRE_URL}
              className="flex items-center gap-1.5"
            >
              מלא את השאלון
              <ArrowRight className="h-4 w-4" />
            </Link>
          </Button>
        </div>
      </Card>
    );
  }

  const hasAnyAnswers = worldsWithAnswers.length > 0;

  return (
    <div className="space-y-6">
      <Card className="shadow-sm border">
        <CardHeader className="p-4">
          <div className="flex flex-col sm:flex-row items-start sm:items-center justify-between gap-3">
            <div className="flex items-center gap-3">
              {questionnaire.completed ? (
                <CheckCircle className="h-5 w-5 text-emerald-500 flex-shrink-0" />
              ) : (
                <Clock className="h-5 w-5 text-blue-500 flex-shrink-0" />
              )}
              <div>
                <p className="font-semibold text-base text-gray-800">
                  {questionnaire.completed ? 'שאלון הושלם' : 'שאלון בתהליך'}
                </p>
                <p className="text-xs text-gray-500 mt-0.5">
                  {hasAnyAnswers
                    ? `עודכן לאחרונה: ${new Date(
                        questionnaire.lastSaved
                      ).toLocaleDateString('he-IL')}`
                    : 'השאלון טרם החל'}
                </p>
              </div>
            </div>

            <div className="flex flex-col sm:flex-row items-center gap-2 self-end sm:self-center">
              <Button
                asChild
                variant="outline"
                size="sm"
                className="rounded-full px-4 py-2 text-xs sm:text-sm"
              >
                <Link
                  href={QUESTIONNAIRE_URL}
                  className="flex items-center gap-1.5"
                >
                  עבור לשאלון
                  <ArrowRight className="h-4 w-4" />
                </Link>
              </Button>
              {isEditable && hasAnyAnswers && onUpdate && (
                <Button
                  variant="outline"
                  size="sm"
                  onClick={() => setIsEditingGlobally(!isEditingGlobally)}
                  className="gap-1.5 rounded-full px-4 py-2 text-xs sm:text-sm"
                >
                  {isEditingGlobally ? (
                    <>
                      <Save className="h-4 w-4" />
                      סיום עריכה
                    </>
                  ) : (
                    <>
                      <Pencil className="h-4 w-4" />
                      עריכת תשובות
                    </>
                  )}
                </Button>
              )}
            </div>
          </div>
        </CardHeader>
      </Card>

      {hasAnyAnswers ? (
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          {worldsWithAnswers.map(({ key, config, answers, isCompleted }) => (
            <WorldSection
              key={key}
              worldKey={key}
              worldConfig={config}
              answers={answers}
              isEditingGlobally={isEditingGlobally}
              onUpdate={onUpdate!}
              isCompleted={isCompleted}
            />
          ))}
        </div>
      ) : (
        <div className="text-center py-10 text-gray-500 bg-gray-50/50 rounded-lg border border-gray-200">
          <Book className="h-8 w-8 mx-auto mb-2 opacity-50 text-gray-400" />
          <p className="font-medium text-lg">השאלון טרם מולא במלואו</p>
          <p className="text-sm mt-1 text-gray-600">
            עדיין אין תשובות להציג, אך ניתן להמשיך למלא את השאלון.
          </p>
          <div className="mt-6">
            <Button
              asChild
              variant="default"
              className="bg-cyan-600 hover:bg-cyan-700 text-white"
            >
              <Link
                href={QUESTIONNAIRE_URL}
                className="flex items-center gap-1.5 px-6 py-2"
              >
                המשך מילוי השאלון
                <ArrowRight className="h-4 w-4" />
              </Link>
            </Button>
          </div>
        </div>
      )}
    </div>
  );
};

export default QuestionnaireResponsesSection;
--- End of Content for QuestionnaireResponsesSection.tsx ---

================================================================================
Directory: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\app\components\profile\types
================================================================================

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\app\components\profile\types\profile.ts
--------------------------------------------------------------------------------
Content:
import type { UserProfile, UserImage, QuestionnaireResponse } from "@/types/next-auth";

// Define specific types for questionnaire updates
export interface QuestionnaireUpdateValue {
  type: 'answer' | 'visibility';
  value?: string;
  isVisible?: boolean;
}

// Interfaces for the main sections
export interface PhotosSectionProps {
  images: UserImage[];
  isUploading: boolean;
  disabled?: boolean;
  onUpload: (file: File) => Promise<void>;
  onSetMain: (imageId: string) => Promise<void>;
  onDelete: (imageId: string) => Promise<void>;
}


export interface PreferencesSectionProps {
  profile: UserProfile | null;
  isEditing: boolean;
  viewOnly?: boolean;
  setIsEditing: (value: boolean) => void;
  onChange: (data: Partial<UserProfile>) => void;
}

export interface QuestionnaireResponsesSectionProps {
  questionnaire: QuestionnaireResponse | null;
  onUpdate?: (world: string, questionId: string, value: QuestionnaireUpdateValue) => Promise<void>;
  isEditable?: boolean;
  viewMode?: "matchmaker" | "candidate";
}

// Types for the extended profile data
export interface ExtendedProfileData {
  personalityTraits?: {
    temperament?: string;
    decisionMaking?: string;
    stressManagement?: string;
    communicationStyle?: string;
  };
  spiritualProfile?: {
    prayerStyle?: string;
    secularStudiesAttitude?: string;
    modestyLevel?: string;
    childrenEducationApproach?: string;
  };
  familyBackground?: {
    parentsSpiritualLevel?: string;
    parentsOccupations?: {
      father?: string;
      mother?: string;
    };
    familyDynamics?: string;
  };
  lifestylePreferences?: {
    careerAspiration?: string;
    futureStudyPlans?: string;
    livingPreferences?: {
      proximity?: string;
    };
    relationshipExpectations?: string;
  };
  healthProfile?: {
    generalHealth?: string;
    dietaryRestrictions?: string[];
    physicalActivity?: string;
  };
  personalValues?: {
    parentalRespect?: number;
    communityInvolvement?: string;
    volunteeringPreferences?: string;
    financialManagement?: string;
  };
  futureGoals?: string[];
  [key: string]: unknown;
}

// Additional utility types
export type ViewMode = "matchmaker" | "candidate";
export type CardSize = "sm" | "md" | "lg";
--- End of Content for profile.ts ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\app\components\profile\types\questionnaire.ts
--------------------------------------------------------------------------------
Content:
// src/components/shared/profile/types/questionnaire.ts

export type QuestionnaireAnswerValue = {
  type: 'answer';
  value: string;
} | {
  type: 'visibility';
  isVisible: boolean;
} | string | number | boolean;

export interface FormattedAnswer {
  questionId: string;
  question: string;
  value: QuestionnaireAnswerValue;
  displayText: string;
  answeredAt: string;
  category?: string;
  isVisible: boolean;
}

export interface QuestionnaireResponse {
  id: string;
  userId: string;
  formattedAnswers: {
    values: FormattedAnswer[];
    personality: FormattedAnswer[];
    relationship: FormattedAnswer[];
    partner: FormattedAnswer[];
    religion: FormattedAnswer[];
  };
  valuesCompleted: boolean;
  personalityCompleted: boolean;
  relationshipCompleted: boolean;
  partnerCompleted: boolean;
  religionCompleted: boolean;
  worldsCompleted: string[];
  completed: boolean;
  startedAt: string | Date;
  completedAt?: string | Date;
  lastSaved: string | Date;
}

export interface QuestionnaireWorld {
  key: string;
  title: string;
  icon: React.ElementType;
  color: string;
  bgColor: string;
  borderColor: string;
}

export interface QuestionCardProps {
  question: string;
  answer: FormattedAnswer;
  isEditing: boolean;
  onEdit: (value: string) => void;
  onVisibilityChange: (isVisible: boolean) => void;
}

export interface WorldSectionProps {
  title: string;
  icon: React.ElementType;
  answers: FormattedAnswer[];
  isEditing: boolean;
  onEdit: (questionId: string, value: string) => void;
  onVisibilityChange: (questionId: string, isVisible: boolean) => void;
  isCompleted: boolean;
  className?: string;
}
--- End of Content for questionnaire.ts ---

