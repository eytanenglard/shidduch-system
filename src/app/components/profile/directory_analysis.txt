מבנה התיקייה:
profile
  ProfileCard.tsx
  constants.ts
  elements
    MinimalCard.tsx
    StatsCard.tsx
    VisibilityControl.tsx
  index.ts
  sections
    ExtendedProfileSection.tsx
    PhotosSection.tsx
    PreferencesSection.tsx
    ProfileSection.tsx
    QuestionnaireResponsesSection.tsx
  types
    profile.ts
    questionnaire.ts
  utils.ts

תוכן הקבצים:

==================================================
Contents of C:\Users\eytan\Desktop\שידוכים\shidduch-system\src\app\components\profile\constants.ts:
==================================================
// src/components/shared/profile/constants.ts
import { Heart, User, Users, Scroll, GraduationCap, MapPin } from "lucide-react";

export const WORLDS = {
  values: {
    key: "values",
    title: "ערכים ואמונות",
    icon: Heart,
    color: "text-pink-500",
    bgColor: "bg-pink-50",
    borderColor: "border-pink-200",
  },
  personality: {
    key: "personality",
    title: "אישיות",
    icon: User,
    color: "text-blue-500",
    bgColor: "bg-blue-50",
    borderColor: "border-blue-200",
  },
  relationship: {
    key: "relationship",
    title: "זוגיות ומשפחה",
    icon: Users,
    color: "text-purple-500",
    bgColor: "bg-purple-50",
    borderColor: "border-purple-200",
  },
  religion: {
    key: "religion",
    title: "דת ומסורת",
    icon: Scroll,
    color: "text-indigo-500",
    bgColor: "bg-indigo-50",
    borderColor: "border-indigo-200",
  },
  partner: {
    key: "partner",
    title: "העדפות בן/בת זוג",
    icon: Heart,
    color: "text-red-500",
    bgColor: "bg-red-50",
    borderColor: "border-red-200",
  },
} as const;

export const RELIGIOUS_LEVELS = [
  "חרדי",
  "חרדי מודרני",
  "דתי",
  "דתי-לייט",
  "מסורתי"
] as const;

export const MARITAL_STATUS = [
  "single",
  "divorced",
  "widowed"
] as const;

export const EDUCATION_LEVELS = [
  "תיכונית",
  "על תיכונית",
  "אקדמית",
  "תורנית"
] as const;

export const OCCUPATION_TYPES = [
  "עובד/ת",
  "סטודנט/ית",
  "אברך/אברכית",
  "עצמאי/ת"
] as const;

export const LOCATIONS = [
  "צפון",
  "מרכז",
  "דרום",
  "ירושלים",
  "יהודה ושומרון"
] as const;

export const PROFILE_SECTIONS = {
  BASIC_INFO: {
    title: "פרטים אישיים",
    icon: User,
  },
  EDUCATION: {
    title: "השכלה ותעסוקה",
    icon: GraduationCap,
  },
  LOCATION: {
    title: "מיקום",
    icon: MapPin,
  },
  FAMILY: {
    title: "מידע משפחתי",
    icon: Users,
  },
  PREFERENCES: {
    title: "העדפות",
    icon: Heart,
  },
} as const;

export const COMMUNICATION_STYLES = [
  "ישיר",
  "עקיף",
  "דיפלומטי"
] as const;

export const STRESS_MANAGEMENT = [
  "רגוע",
  "לחוץ",
  "משתנה"
] as const;

export const CONTACT_PREFERENCES = [
  { value: "direct", label: "ישירות" },
  { value: "matchmaker", label: "דרך השדכן/ית" },
  { value: "both", label: "שתי האפשרויות" }
] as const;

// הגדרות עבור הוולידציה
export const VALIDATION_RULES = {
  AGE: {
    MIN: 18,
    MAX: 99
  },
  HEIGHT: {
    MIN: 100,
    MAX: 250
  },
  NAME: {
    MIN_LENGTH: 2,
    MAX_LENGTH: 50
  }
} as const;

==================================================
Contents of C:\Users\eytan\Desktop\שידוכים\shidduch-system\src\app\components\profile\index.ts:
==================================================
// src/components/shared/profile/index.ts

// Main Components
export { default as ProfileCard } from './ProfileCard';

// Sections
export { default as ExtendedProfileSection } from './sections/ExtendedProfileSection';
export { default as PhotosSection } from './sections/PhotosSection';
export { default as PreferencesSection } from './sections/PreferencesSection';
export { default as ProfileSection } from './sections/ProfileSection';
export { default as QuestionnaireResponsesSection } from './sections/QuestionnaireResponsesSection';

// Elements
export { default as StatsCard } from './elements/StatsCard';
export { default as VisibilityControl } from './elements/VisibilityControl';
export { default as MinimalCard } from './elements/MinimalCard';

// Types
export * from './types/profile';
export * from './types/questionnaire';

==================================================
Contents of C:\Users\eytan\Desktop\שידוכים\shidduch-system\src\app\components\profile\ProfileCard.tsx:
==================================================
import React, { useState } from "react";
import Image from "next/image";
import { cn } from "@/lib/utils";

// UI Components
import { Card } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Dialog, DialogContent, DialogTitle } from "@/components/ui/dialog";
import { ScrollArea } from "@/components/ui/scroll-area";

// Icons
import {
  User,
  Heart,
  FileText,
  Image as ImageIcon,
  Info,
  Eye,
  EyeOff,
  Phone,
  ChevronLeft,
  ChevronRight,
  Briefcase,
  GraduationCap,
  Users,
  Book,
  School,
  Lock,
  Languages,
  Calendar,
  Star,
  MapPin,
  Shield,
  CheckCircle,
  Clock,
} from "lucide-react";

// Types (Assuming these are correctly defined in your project)
import type {
  UserProfile,
  UserImage,
  QuestionnaireResponse,
  ContactPreference,
  AvailabilityStatus,
} from "@/types/next-auth"; // Make sure the path is correct

// Types
type ProfileActionType =
  | "contact"
  | "suggest"
  | "hide"
  | "report"
  | "save"
  | "verify"
  | "update_status"
  | "update_notes"
  | "update_visibility";

type ProfileActionData = {
  profileId?: string;
  userId?: string;
  status?: AvailabilityStatus;
  statusNote?: string;
  matchingNotes?: string;
  visibility?: boolean;
  reportReason?: string;
  reportDetails?: string;
  contactPreference?: ContactPreference;
  verificationDetails?: {
    verifiedBy: string;
    verificationDate: Date;
    notes?: string;
  };
};

// Interfaces
interface WorldConfig {
  key: string;
  title: string;
  icon: React.ElementType;
  color: string; // e.g., 'cyan' or 'pink'
  gradientFrom: string; // e.g., 'from-cyan-50'
  gradientTo: string; // e.g., 'to-cyan-50/20'
  border: string; // e.g., 'border-cyan-100/50'
  text: string; // e.g., 'text-cyan-600'
  iconBg: string; // e.g., 'bg-cyan-100'
}

interface ProfileCardProps {
  profile: UserProfile;
  images?: UserImage[];
  questionnaire?: QuestionnaireResponse | null;
  viewMode?: "matchmaker" | "candidate";
  className?: string;
  onAction?: (type: ProfileActionType, data?: ProfileActionData) => void;
}

// Constants
const WORLDS: Record<string, WorldConfig> = {
  values: {
    key: "values",
    title: "ערכים ואמונות",
    icon: Heart,
    color: "pink",
    gradientFrom: "from-pink-50",
    gradientTo: "to-pink-50/20",
    border: "border-pink-100/50",
    text: "text-pink-600",
    iconBg: "bg-pink-100",
  },
  personality: {
    key: "personality",
    title: "אישיות",
    icon: User,
    color: "blue",
    gradientFrom: "from-blue-50",
    gradientTo: "to-blue-50/20",
    border: "border-blue-100/50",
    text: "text-blue-600",
    iconBg: "bg-blue-100",
  },
  relationship: {
    key: "relationship",
    title: "זוגיות ומשפחה",
    icon: Users,
    color: "purple",
    gradientFrom: "from-purple-50",
    gradientTo: "to-purple-50/20",
    border: "border-purple-100/50",
    text: "text-purple-600",
    iconBg: "bg-purple-100",
  },
  religion: {
    key: "religion",
    title: "דת ומסורת",
    icon: Book,
    color: "indigo",
    gradientFrom: "from-indigo-50",
    gradientTo: "to-indigo-50/20",
    border: "border-indigo-100/50",
    text: "text-indigo-600",
    iconBg: "bg-indigo-100",
  },
  partner: {
    key: "partner",
    title: "העדפות בן/בת זוג",
    icon: Heart, // Consider a different icon if needed
    color: "red",
    gradientFrom: "from-red-50",
    gradientTo: "to-red-50/20",
    border: "border-red-100/50",
    text: "text-red-600",
    iconBg: "bg-red-100",
  },
};

// --- Helper Components ---

// Sensitive Info Wrapper (Matchmaker Only)
const SensitiveInfo: React.FC<{ children: React.ReactNode }> = ({
  children,
}) => (
  <div className="relative border border-amber-300 rounded-xl p-4 sm:p-6 bg-gradient-to-br from-amber-50 to-white shadow-md">
    <div className="flex items-center gap-2 mb-4 text-amber-700">
      <Lock className="w-4 h-4 sm:w-5 sm:h-5" />
      <span className="font-medium text-sm sm:text-base">
        מידע לשדכנים בלבד
      </span>
    </div>
    {children}
  </div>
);

// Empty State Placeholder
const EmptyState: React.FC<{ icon: React.ElementType; message: string }> = ({
  icon: Icon,
  message,
}) => (
  <div className="flex flex-col items-center justify-center py-8 sm:py-12 text-gray-400 bg-gray-50/30 rounded-xl border border-gray-100">
    <Icon className="w-10 h-10 sm:w-14 sm:h-14 mb-3 sm:mb-4 opacity-50 text-gray-300" />
    <p className="text-sm sm:text-base font-medium text-gray-500">{message}</p>
  </div>
);

// Section Header Component
const SectionHeader: React.FC<{
  icon: React.ElementType;
  title: string;
  worldKey?: keyof typeof WORLDS;
}> = ({ icon: Icon, title, worldKey }) => {
  const config = worldKey ? WORLDS[worldKey] : null;
  const iconColor = config ? config.text : "text-primary";
  const iconBg = config ? config.iconBg : "bg-primary/10";

  return (
    <div className="flex items-center gap-2 mb-3 sm:mb-4">
      <div className={cn("p-1.5 sm:p-2 rounded-full", iconBg)}>
        <Icon className={cn("w-4 h-4 sm:w-5 sm:h-5", iconColor)} />
      </div>
      <h3 className="text-lg sm:text-xl font-semibold text-gray-800">
        {title}
      </h3>
    </div>
  );
};

// --- Main Profile Card Component ---

const ProfileCard: React.FC<ProfileCardProps> = ({
  profile,
  images = [],
  questionnaire,
  viewMode = "candidate",
  className,
  // onAction // Assuming onAction implementation is needed later
}) => {
  // State
  const [selectedImageIndex, setSelectedImageIndex] = useState<number | null>(
    null
  );
  const [activeTab, setActiveTab] = useState("about");

  // Calculate age from birthDate
  const calculateAge = (birthDate: Date | string): number => {
    try {
      const today = new Date();
      const birth = new Date(birthDate);
      if (isNaN(birth.getTime())) {
        console.error("Invalid birthDate:", birthDate);
        return 0; // Or handle appropriately
      }
      let age = today.getFullYear() - birth.getFullYear();
      const monthDiff = today.getMonth() - birth.getMonth();

      if (
        monthDiff < 0 ||
        (monthDiff === 0 && today.getDate() < birth.getDate())
      ) {
        age--;
      }
      return age;
    } catch (e) {
      console.error("Error calculating age:", e);
      return 0;
    }
  };

  // Derived values
  const age = profile.birthDate ? calculateAge(profile.birthDate) : 0;
  const mainImage = images?.find((img) => img.isMain);

  // Image handlers
  const handleImageClick = (index: number) => setSelectedImageIndex(index);
  const handleCloseDialog = () => setSelectedImageIndex(null);

  const handleNextImage = () => {
    if (selectedImageIndex !== null && selectedImageIndex < images.length - 1) {
      setSelectedImageIndex(selectedImageIndex + 1);
    }
  };

  const handlePreviousImage = () => {
    if (selectedImageIndex !== null && selectedImageIndex > 0) {
      setSelectedImageIndex(selectedImageIndex - 1);
    }
  };

  return (
    <Card
      dir="rtl" // Ensure RTL direction for the entire card
      className={cn(
        "w-full bg-gradient-to-br from-white via-white to-blue-50/30 shadow-xl rounded-2xl overflow-hidden border-0", // Softer background, more pronounced shadow
        className
      )}
    >
      {/* Header Section with Softer Gradient */}
      <div className="relative p-4 sm:p-6 md:p-8 text-center overflow-hidden bg-gradient-to-br from-cyan-50 via-white to-pink-50">
        {/* Background pattern like Hero */}
        <div className="absolute inset-0 opacity-10 bg-[radial-gradient(#06b6d4_1px,transparent_1px)] [background-size:20px_20px]"></div>

        {/* Profile Summary */}
        <div className="relative z-10 flex flex-col sm:flex-row items-center justify-center gap-4 sm:gap-6 max-w-3xl mx-auto">
          {/* Profile Image with enhanced border/shadow */}
          <div className="relative h-28 w-28 sm:h-36 sm:w-36 md:h-44 md:w-44 rounded-full overflow-hidden border-4 border-white shadow-lg transition-transform hover:scale-105 duration-300 ring-2 ring-cyan-200/50 hover:ring-cyan-300">
            {mainImage ? (
              <Image
                src={mainImage.url}
                alt="תמונת פרופיל"
                fill
                className="object-cover"
                sizes="(max-width: 640px) 112px, (max-width: 768px) 144px, 176px"
                priority
              />
            ) : (
              <div className="w-full h-full flex items-center justify-center bg-gradient-to-br from-gray-100 to-gray-200">
                <User className="w-10 h-10 sm:w-16 sm:h-16 text-gray-400" />
              </div>
            )}
          </div>

          {/* Profile Info - RTL aligned, updated styles */}
          <div className="space-y-2 sm:space-y-3 text-center sm:text-right mt-2 sm:mt-0">
            <div>
              <h2 className="text-xl sm:text-2xl md:text-3xl font-bold text-gray-800">
                {" "}
                {/* Removed font-serif */}
                {profile?.user?.firstName} {profile?.user?.lastName}
              </h2>
              {/* Info Tags styled like Hero */}
              <div className="flex flex-wrap justify-center sm:justify-start gap-1.5 sm:gap-3 mt-2">
                <div className="flex items-center gap-1 text-xs sm:text-sm text-gray-700 bg-white/80 px-2 py-0.5 sm:px-3 sm:py-1 rounded-full shadow-sm border border-gray-100">
                  <Calendar className="w-3 h-3 sm:w-4 sm:h-4 text-cyan-500" />
                  <span>{age > 0 ? `${age} שנים` : "גיל לא זמין"}</span>
                </div>

                {profile.city && (
                  <div className="flex items-center gap-1 text-xs sm:text-sm text-gray-700 bg-white/80 px-2 py-0.5 sm:px-3 sm:py-1 rounded-full shadow-sm border border-gray-100">
                    <MapPin className="w-3 h-3 sm:w-4 sm:h-4 text-pink-500" />
                    <span>{profile.city}</span>
                  </div>
                )}

                {profile.religiousLevel && (
                  <div className="flex items-center gap-1 text-xs sm:text-sm text-gray-700 bg-white/80 px-2 py-0.5 sm:px-3 sm:py-1 rounded-full shadow-sm border border-gray-100">
                    <Shield className="w-3 h-3 sm:w-4 sm:h-4 text-cyan-600" />
                    <span>{profile.religiousLevel}</span>
                  </div>
                )}
              </div>
            </div>

            {/* Status Badges with softer styling */}
            <div className="flex flex-wrap gap-1.5 sm:gap-2 justify-center sm:justify-start mt-1 sm:mt-2">
              {profile.isProfileVisible && (
                <Badge className="bg-emerald-100 text-emerald-800 border-0 px-2 py-1 sm:px-3 sm:py-1.5 text-xs sm:text-sm shadow-sm">
                  <div className="flex items-center gap-1 sm:gap-1.5">
                    <span className="w-1.5 h-1.5 sm:w-2 sm:h-2 rounded-full bg-emerald-500 animate-pulse"></span>
                    פנוי/ה להצעות
                  </div>
                </Badge>
              )}

              {profile.maritalStatus && (
                <Badge
                  variant="outline"
                  className="bg-purple-100 border-purple-200/50 text-purple-700 px-2 py-1 sm:px-3 sm:py-1.5 text-xs sm:text-sm shadow-sm"
                >
                  <Heart className="w-3 h-3 sm:w-3.5 sm:h-3.5 ml-1" />{" "}
                  {/* Adjusted margin for RTL */}
                  {profile.maritalStatus}
                </Badge>
              )}
            </div>
          </div>
        </div>
      </div>

      {/* Quick Stats Grid - Styled like Hero Trust Indicators */}
      <div className="grid grid-cols-2 sm:grid-cols-4 gap-3 sm:gap-4 p-3 sm:p-6 bg-white/40 backdrop-blur-sm border-y border-gray-100">
        {/* Age */}
        <div className="flex items-center gap-2 sm:gap-3 p-3 sm:p-4 rounded-xl bg-white/60 shadow-md border border-cyan-100 hover:shadow-lg transition-all duration-300">
          <div className="p-2 sm:p-2.5 rounded-full bg-cyan-100 text-cyan-600">
            <Calendar className="w-4 h-4 sm:w-5 sm:h-5" />
          </div>
          <div>
            <p className="text-xs font-medium text-cyan-600 mb-0.5">גיל</p>
            <p className="text-base sm:text-lg font-semibold text-gray-800">
              {age > 0 ? age : "-"}
            </p>
          </div>
        </div>

        {/* Marital Status */}
        <div className="flex items-center gap-2 sm:gap-3 p-3 sm:p-4 rounded-xl bg-white/60 shadow-md border border-pink-100 hover:shadow-lg transition-all duration-300">
          <div className="p-2 sm:p-2.5 rounded-full bg-pink-100 text-pink-600">
            <Heart className="w-4 h-4 sm:w-5 sm:h-5" />
          </div>
          <div>
            <p className="text-xs font-medium text-pink-600 mb-0.5">
              מצב משפחתי
            </p>
            <p className="text-base sm:text-lg font-semibold text-gray-800">
              {profile.maritalStatus || "-"}
            </p>
          </div>
        </div>

        {/* Education */}
        <div className="flex items-center gap-2 sm:gap-3 p-3 sm:p-4 rounded-xl bg-white/60 shadow-md border border-indigo-100 hover:shadow-lg transition-all duration-300">
          <div className="p-2 sm:p-2.5 rounded-full bg-indigo-100 text-indigo-600">
            <School className="w-4 h-4 sm:w-5 sm:h-5" />
          </div>
          <div>
            <p className="text-xs font-medium text-indigo-600 mb-0.5">השכלה</p>
            <p className="text-base sm:text-lg font-semibold text-gray-800">
              {profile.education || "-"}
            </p>
          </div>
        </div>

        {/* Native Language */}
        <div className="flex items-center gap-2 sm:gap-3 p-3 sm:p-4 rounded-xl bg-white/60 shadow-md border border-emerald-100 hover:shadow-lg transition-all duration-300">
          <div className="p-2 sm:p-2.5 rounded-full bg-emerald-100 text-emerald-600">
            <Languages className="w-4 h-4 sm:w-5 sm:h-5" />
          </div>
          <div>
            <p className="text-xs font-medium text-emerald-600 mb-0.5">
              שפת אם
            </p>
            <p className="text-base sm:text-lg font-semibold text-gray-800">
              {profile.nativeLanguage || "-"}
            </p>
          </div>
        </div>
      </div>

      {/* Photo Gallery Preview */}
      <div className="px-4 sm:px-6 py-4 sm:py-5 border-b border-gray-100">
        <div className="flex items-center justify-between mb-3 sm:mb-4">
          <h3 className="text-base sm:text-lg font-semibold flex items-center gap-1.5 sm:gap-2 text-gray-700">
            <ImageIcon className="w-4 h-4 sm:w-5 sm:h-5 text-gray-500" />
            תמונות
            <span className="text-xs sm:text-sm bg-gray-100 text-gray-700 rounded-full w-5 h-5 sm:w-6 sm:h-6 inline-flex items-center justify-center font-mono">
              {images.length}
            </span>
          </h3>
          {images.length > 0 && (
            <Button
              variant="link" // Changed to link for subtler appearance
              size="sm"
              onClick={() => setActiveTab("photos")}
              className="text-xs text-cyan-600 hover:text-cyan-700 p-1 sm:p-2"
            >
              הצג הכל
            </Button>
          )}
        </div>

        {images.length > 0 ? (
          <ScrollArea dir="rtl" className="w-full pb-2">
            <div className="flex gap-1.5 sm:gap-3 pb-2">
              {images.slice(0, 5).map((image, index) => (
                <div
                  key={image.id}
                  className="relative flex-shrink-0 w-[90px] h-[90px] sm:w-28 sm:h-28 rounded-xl overflow-hidden bg-gray-100 shadow-sm cursor-pointer hover:opacity-90 transition-all duration-300 border border-gray-100"
                  onClick={() => handleImageClick(index)}
                >
                  <Image
                    src={image.url}
                    alt={`תמונת פרופיל ${index + 1}`}
                    fill
                    className="object-cover"
                    sizes="(max-width: 640px) 90px, 112px"
                  />
                  {image.isMain && (
                    <div className="absolute top-1.5 right-1.5 bg-gradient-to-br from-yellow-400 to-amber-500 rounded-full p-1 shadow-md">
                      <Star className="w-2.5 h-2.5 sm:w-3 sm:h-3 text-white" />
                    </div>
                  )}
                </div>
              ))}

              {images.length > 5 && (
                <div
                  className="relative flex-shrink-0 w-[90px] h-[90px] sm:w-28 sm:h-28 rounded-xl overflow-hidden bg-gradient-to-br from-gray-50 to-gray-100 flex items-center justify-center cursor-pointer hover:shadow-md transition-all duration-300 border border-gray-200"
                  onClick={() => setActiveTab("photos")}
                >
                  <div className="text-center">
                    <span className="block text-base sm:text-lg font-bold text-gray-600">
                      +{images.length - 5}
                    </span>
                    <span className="text-xs text-gray-500">עוד</span>
                  </div>
                </div>
              )}
            </div>
          </ScrollArea>
        ) : (
          <EmptyState icon={ImageIcon} message="אין תמונות בפרופיל" />
        )}
      </div>

      {/* Main Tabs Navigation */}
      <div className="p-4 sm:p-6">
        <Tabs value={activeTab} onValueChange={setActiveTab} className="w-full">
          {/* Styled TabsList background */}
          <div className="bg-gradient-to-r from-cyan-50/50 via-white to-pink-50/50 p-1 rounded-xl mb-4 sm:mb-6 sticky top-0 z-10 shadow-sm">
            <ScrollArea className="w-full overflow-x-visible" dir="rtl">
              <div className="flex pb-1 px-1">
                {/* Removed explicit width, using flex-nowrap */}
                <TabsList className="h-auto inline-flex bg-transparent flex-nowrap justify-start p-0">
                  <TabsTrigger
                    value="about"
                    className="flex items-center gap-1.5 sm:gap-2 px-3 py-2 sm:px-4 sm:py-2.5 rounded-lg text-xs sm:text-sm whitespace-nowrap data-[state=active]:bg-white data-[state=active]:shadow-md data-[state=active]:text-cyan-600 text-gray-600 hover:bg-white/60 hover:text-gray-800 transition-all"
                  >
                    <Info className="w-3.5 h-3.5 sm:w-4 sm:h-4" />
                    <span>אודות</span>
                  </TabsTrigger>

                  <TabsTrigger
                    value="education"
                    className="flex items-center gap-1.5 sm:gap-2 px-3 py-2 sm:px-4 sm:py-2.5 rounded-lg text-xs sm:text-sm whitespace-nowrap data-[state=active]:bg-white data-[state=active]:shadow-md data-[state=active]:text-indigo-600 text-gray-600 hover:bg-white/60 hover:text-gray-800 transition-all"
                  >
                    <GraduationCap className="w-3.5 h-3.5 sm:w-4 sm:h-4" />
                    <span className="hidden xs:inline">השכלה ותעסוקה</span>
                    <span className="xs:hidden">השכלה</span>
                  </TabsTrigger>

                  <TabsTrigger
                    value="family"
                    className="flex items-center gap-1.5 sm:gap-2 px-3 py-2 sm:px-4 sm:py-2.5 rounded-lg text-xs sm:text-sm whitespace-nowrap data-[state=active]:bg-white data-[state=active]:shadow-md data-[state=active]:text-purple-600 text-gray-600 hover:bg-white/60 hover:text-gray-800 transition-all"
                  >
                    <Users className="w-3.5 h-3.5 sm:w-4 sm:h-4" />
                    <span>משפחה</span>
                  </TabsTrigger>

                  <TabsTrigger
                    value="photos"
                    className="flex items-center gap-1.5 sm:gap-2 px-3 py-2 sm:px-4 sm:py-2.5 rounded-lg text-xs sm:text-sm whitespace-nowrap data-[state=active]:bg-white data-[state=active]:shadow-md data-[state=active]:text-gray-700 text-gray-600 hover:bg-white/60 hover:text-gray-800 transition-all"
                  >
                    <ImageIcon className="w-3.5 h-3.5 sm:w-4 sm:h-4" />
                    <span>תמונות</span>
                    {images.length > 0 && (
                      <span className="text-xs bg-gray-200 text-gray-600 rounded-full px-1.5 py-0.5 mr-1 hidden sm:inline-block font-mono">
                        {" "}
                        {/* Adjusted margin for RTL */}
                        {images.length}
                      </span>
                    )}
                  </TabsTrigger>

                  {questionnaire && ( // Only show if questionnaire exists
                    <TabsTrigger
                      value="questionnaire"
                      className="flex items-center gap-1.5 sm:gap-2 px-3 py-2 sm:px-4 sm:py-2.5 rounded-lg text-xs sm:text-sm whitespace-nowrap data-[state=active]:bg-white data-[state=active]:shadow-md data-[state=active]:text-pink-600 text-gray-600 hover:bg-white/60 hover:text-gray-800 transition-all"
                    >
                      <FileText className="w-3.5 h-3.5 sm:w-4 sm:h-4" />
                      <span>שאלון</span>
                    </TabsTrigger>
                  )}

                  {viewMode === "matchmaker" && (
                    <TabsTrigger
                      value="sensitive"
                      className="flex items-center gap-1.5 sm:gap-2 px-3 py-2 sm:px-4 sm:py-2.5 rounded-lg text-xs sm:text-sm whitespace-nowrap data-[state=active]:bg-white data-[state=active]:shadow-md data-[state=active]:text-amber-600 bg-amber-50/80 text-amber-700 hover:bg-amber-100/80 transition-all"
                    >
                      <Lock className="w-3.5 h-3.5 sm:w-4 sm:h-4" />
                      <span className="hidden xs:inline">מידע רגיש</span>
                      <span className="xs:hidden">רגיש</span>
                    </TabsTrigger>
                  )}
                </TabsList>
              </div>
            </ScrollArea>
          </div>

          {/* --- Tab Content Panes --- */}

          {/* About Tab */}
          <TabsContent
            value="about"
            className="mt-2 space-y-6 sm:space-y-8 focus:outline-none"
          >
            {/* Basic Description */}
            <div className="rounded-xl sm:rounded-2xl p-4 sm:p-6 bg-gradient-to-br from-blue-50 to-white border border-blue-100/50 shadow-md">
              <SectionHeader icon={User} title="אודות" worldKey="personality" />
              {profile.about ? (
                <p className="text-gray-700 whitespace-pre-wrap text-sm sm:text-base leading-relaxed">
                  {profile.about}
                </p>
              ) : (
                <EmptyState icon={User} message="לא הוזן תיאור" />
              )}
            </div>

            {/* Hobbies */}
            <div className="rounded-xl sm:rounded-2xl p-4 sm:p-6 bg-gradient-to-br from-pink-50 to-white border border-pink-100/50 shadow-md">
              <SectionHeader icon={Heart} title="תחביבים" worldKey="values" />
              {profile.hobbies ? (
                <div className="flex flex-wrap gap-1.5 sm:gap-2 mt-2 sm:mt-3">
                  {profile.hobbies.split(",").map((hobby, index) => (
                    <Badge
                      key={index}
                      className="px-2.5 py-1 sm:px-3 sm:py-1.5 bg-white text-pink-700 border border-pink-200 shadow-sm hover:bg-pink-50 transition-colors text-xs sm:text-sm font-medium"
                    >
                      {hobby.trim()}
                    </Badge>
                  ))}
                </div>
              ) : (
                <EmptyState icon={Heart} message="לא הוזנו תחביבים" />
              )}
            </div>

            {/* Languages */}
            <div className="rounded-xl sm:rounded-2xl p-4 sm:p-6 bg-gradient-to-br from-emerald-50 to-white border border-emerald-100/50 shadow-md">
              <SectionHeader icon={Languages} title="שפות" />{" "}
              {/* Generic styling */}
              <div className="space-y-3 sm:space-y-4 mt-2 sm:mt-3">
                {/* Native Language */}
                <div className="bg-white rounded-lg sm:rounded-xl shadow-sm p-3 sm:p-4 border border-emerald-100/80">
                  <p className="text-xs sm:text-sm font-medium text-emerald-700 mb-1 sm:mb-2">
                    שפת אם
                  </p>
                  <p className="text-base sm:text-lg font-medium text-gray-800">
                    {profile.nativeLanguage || "-"}
                  </p>
                </div>

                {/* Additional Languages */}
                {profile.additionalLanguages &&
                profile.additionalLanguages.length > 0 ? (
                  <div className="bg-white rounded-lg sm:rounded-xl shadow-sm p-3 sm:p-4 border border-emerald-100/80">
                    <p className="text-xs sm:text-sm font-medium text-emerald-700 mb-1 sm:mb-2">
                      שפות נוספות
                    </p>
                    <div className="flex flex-wrap gap-1.5 sm:gap-2 mt-1">
                      {profile.additionalLanguages.map((lang) => (
                        <Badge
                          key={lang}
                          className="px-2.5 py-1 sm:px-3 sm:py-1.5 bg-emerald-50 text-emerald-800 border border-emerald-200 text-xs sm:text-sm shadow-sm"
                        >
                          {lang}
                        </Badge>
                      ))}
                    </div>
                  </div>
                ) : (
                  <div className="bg-white/80 rounded-lg sm:rounded-xl p-3 sm:p-4 text-center text-xs sm:text-sm text-gray-500 border border-gray-100">
                    לא הוזנו שפות נוספות
                  </div>
                )}
              </div>
            </div>
          </TabsContent>

          {/* Education & Employment Tab */}
          <TabsContent
            value="education"
            className="mt-2 space-y-6 sm:space-y-8 focus:outline-none"
          >
            <div className="rounded-xl sm:rounded-2xl bg-white border border-indigo-100/50 shadow-md overflow-hidden">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-0">
                {/* Education */}
                <div className="p-4 sm:p-6 border-b md:border-b-0 md:border-l border-indigo-100/50 bg-gradient-to-br from-indigo-50 to-white">
                  <SectionHeader
                    icon={GraduationCap}
                    title="השכלה"
                    worldKey="religion"
                  />{" "}
                  {/* Assuming 'religion' theme fits best */}
                  <div className="mt-3 sm:mt-4 space-y-4 sm:space-y-6">
                    <div className="bg-white rounded-lg sm:rounded-xl shadow-sm p-4 sm:p-5 border border-indigo-100">
                      <div className="flex items-start gap-3 sm:gap-4">
                        <div className="p-2 sm:p-3 rounded-full bg-indigo-100 text-indigo-600 flex-shrink-0">
                          <GraduationCap className="w-4 h-4 sm:w-6 sm:h-6" />
                        </div>
                        <div>
                          <p className="text-xs sm:text-sm font-medium text-indigo-600 mb-0.5 sm:mb-1">
                            רמת השכלה
                          </p>
                          <p className="text-base sm:text-lg font-medium text-gray-800">
                            {profile.education || "לא צוין"}
                          </p>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>

                {/* Employment */}
                <div className="p-4 sm:p-6 bg-gradient-to-br from-purple-50 to-white">
                  <SectionHeader
                    icon={Briefcase}
                    title="תעסוקה"
                    worldKey="relationship"
                  />{" "}
                  {/* Assuming 'relationship' theme fits best */}
                  <div className="mt-3 sm:mt-4 space-y-4 sm:space-y-6">
                    <div className="bg-white rounded-lg sm:rounded-xl shadow-sm p-4 sm:p-5 border border-purple-100">
                      <div className="flex items-start gap-3 sm:gap-4">
                        <div className="p-2 sm:p-3 rounded-full bg-purple-100 text-purple-600 flex-shrink-0">
                          <Briefcase className="w-4 h-4 sm:w-6 sm:h-6" />
                        </div>
                        <div>
                          <p className="text-xs sm:text-sm font-medium text-purple-600 mb-0.5 sm:mb-1">
                            עיסוק נוכחי
                          </p>
                          <p className="text-base sm:text-lg font-medium text-gray-800">
                            {profile.occupation || "לא צוין"}
                          </p>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </TabsContent>

          {/* Family Tab */}
          <TabsContent value="family" className="mt-2 focus:outline-none">
            <div className="rounded-xl sm:rounded-2xl p-4 sm:p-6 bg-gradient-to-br from-purple-50 to-white border border-purple-100/50 shadow-md">
              <SectionHeader
                icon={Users}
                title="מידע משפחתי"
                worldKey="relationship"
              />
              <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-4 sm:gap-5 mt-3 sm:mt-4">
                {/* Parent Status */}
                <div className="bg-white rounded-lg sm:rounded-xl shadow-sm p-4 sm:p-5 border border-purple-100 transition-all hover:shadow-lg hover:border-purple-200 duration-300">
                  <div className="flex items-start gap-3 sm:gap-4">
                    <div className="p-2 sm:p-3 rounded-full bg-purple-100 text-purple-600 flex-shrink-0">
                      <Users className="w-4 h-4 sm:w-5 sm:h-5" />
                    </div>
                    <div>
                      <p className="text-xs sm:text-sm font-medium text-purple-600 mb-0.5 sm:mb-1">
                        מצב הורים
                      </p>
                      <p className="text-base sm:text-lg font-medium text-gray-800">
                        {profile.parentStatus || "לא צוין"}
                      </p>
                    </div>
                  </div>
                </div>

                {/* Siblings Count */}
                <div className="bg-white rounded-lg sm:rounded-xl shadow-sm p-4 sm:p-5 border border-purple-100 transition-all hover:shadow-lg hover:border-purple-200 duration-300">
                  <div className="flex items-start gap-3 sm:gap-4">
                    <div className="p-2 sm:p-3 rounded-full bg-purple-100 text-purple-600 flex-shrink-0">
                      <Users className="w-4 h-4 sm:w-5 sm:h-5" />
                    </div>
                    <div>
                      <p className="text-xs sm:text-sm font-medium text-purple-600 mb-0.5 sm:mb-1">
                        מספר אחים/אחיות
                      </p>
                      <p className="text-base sm:text-lg font-medium text-gray-800">
                        {profile.siblings ?? "לא צוין"}
                      </p>
                    </div>
                  </div>
                </div>

                {/* Family Position */}
                <div className="bg-white rounded-lg sm:rounded-xl shadow-sm p-4 sm:p-5 border border-purple-100 transition-all hover:shadow-lg hover:border-purple-200 duration-300">
                  <div className="flex items-start gap-3 sm:gap-4">
                    <div className="p-2 sm:p-3 rounded-full bg-purple-100 text-purple-600 flex-shrink-0">
                      <Users className="w-4 h-4 sm:w-5 sm:h-5" />
                    </div>
                    <div>
                      <p className="text-xs sm:text-sm font-medium text-purple-600 mb-0.5 sm:mb-1">
                        מיקום במשפחה
                      </p>
                      <p className="text-base sm:text-lg font-medium text-gray-800">
                        {profile.position ?? "לא צוין"}
                      </p>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </TabsContent>

          {/* Photos Tab */}
          <TabsContent value="photos" className="mt-2 focus:outline-none">
            <div className="rounded-xl sm:rounded-2xl p-4 sm:p-6 bg-gradient-to-br from-gray-50 to-white border border-gray-200/50 shadow-md">
              <SectionHeader icon={ImageIcon} title="גלריית תמונות" />
              {images.length > 0 ? (
                <div className="grid grid-cols-2 sm:grid-cols-3 lg:grid-cols-4 gap-3 sm:gap-4 mt-3 sm:mt-4">
                  {images.map((image, index) => (
                    <div
                      key={image.id}
                      className="relative aspect-square rounded-xl overflow-hidden cursor-pointer group shadow-md border border-gray-100"
                      onClick={() => handleImageClick(index)}
                    >
                      <Image
                        src={image.url}
                        alt={`תמונת פרופיל ${index + 1}`}
                        fill
                        className="object-cover transition-transform duration-500 group-hover:scale-110"
                        sizes="(max-width: 640px) 50vw, (max-width: 1024px) 33vw, 25vw"
                      />
                      <div className="absolute inset-0 bg-gradient-to-t from-black/50 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300 flex items-end justify-center p-2">
                        <Eye className="w-6 h-6 text-white opacity-0 group-hover:opacity-80 transition-opacity duration-300" />
                      </div>
                      {image.isMain && (
                        <div className="absolute top-2 right-2">
                          <Badge className="bg-gradient-to-br from-yellow-400 to-amber-500 text-white border-0 shadow-md text-xs px-2 py-1">
                            <Star className="w-2.5 h-2.5 sm:w-3 sm:h-3 mr-1 fill-white" />{" "}
                            {/* Adjusted margin for RTL */}
                            ראשי
                          </Badge>
                        </div>
                      )}
                    </div>
                  ))}
                </div>
              ) : (
                <EmptyState icon={ImageIcon} message="לא הועלו תמונות" />
              )}
            </div>
          </TabsContent>

          {/* Questionnaire Tab */}
          {questionnaire && (
            <TabsContent
              value="questionnaire"
              className="mt-2 focus:outline-none"
            >
              <div className="space-y-4 sm:space-y-6">
                {/* Questionnaire Status */}
                <div className="rounded-lg sm:rounded-xl p-3 sm:p-4 bg-white border border-gray-200 shadow-md flex items-center justify-between">
                  <div className="flex items-center gap-2 sm:gap-3">
                    {questionnaire.completed ? (
                      <div className="p-1.5 sm:p-2 rounded-full bg-emerald-100 text-emerald-600">
                        <CheckCircle className="w-4 h-4 sm:w-5 sm:h-5" />
                      </div>
                    ) : (
                      <div className="p-1.5 sm:p-2 rounded-full bg-blue-100 text-blue-600">
                        <Clock className="w-4 h-4 sm:w-5 sm:h-5" />
                      </div>
                    )}
                    <div>
                      <h4 className="text-sm sm:text-base font-medium text-gray-900">
                        {questionnaire.completed
                          ? "שאלון הושלם"
                          : "שאלון בתהליך"}
                      </h4>
                      <p className="text-xs sm:text-sm text-gray-500">
                        עודכן לאחרונה:{" "}
                        {new Date(questionnaire.lastSaved).toLocaleDateString(
                          "he-IL"
                        )}
                      </p>
                    </div>
                  </div>
                  <div className="text-xs sm:text-sm text-gray-500 font-mono">
                    {`${questionnaire.worldsCompleted?.length || 0}/${
                      Object.keys(WORLDS).length
                    } הושלמו`}
                  </div>
                </div>

                {/* Questionnaire Content by World */}
                {Object.entries(questionnaire.formattedAnswers || {}).map(
                  ([worldKey, answers]) => {
                    if (!Array.isArray(answers) || answers.length === 0)
                      return null;
                    const worldConfig = WORLDS[worldKey as keyof typeof WORLDS];
                    if (!worldConfig) return null; // Skip if world config not found

                    const worldCompleted = questionnaire[
                      `${worldKey}Completed` as keyof QuestionnaireResponse
                    ] as boolean | undefined;

                    return (
                      <div
                        key={worldKey}
                        className={cn(
                          "rounded-xl sm:rounded-2xl p-4 sm:p-6 border shadow-md transition-shadow hover:shadow-lg",
                          `bg-gradient-to-br ${worldConfig.gradientFrom} ${worldConfig.gradientTo}`,
                          worldConfig.border
                        )}
                      >
                        <div className="flex items-center justify-between mb-4 sm:mb-6">
                          <h3 className="text-base sm:text-xl font-semibold flex items-center gap-1.5 sm:gap-2">
                            <div
                              className={cn(
                                "p-1.5 sm:p-2 rounded-full",
                                worldConfig.iconBg
                              )}
                            >
                              <worldConfig.icon
                                className={cn(
                                  "h-4 w-4 sm:h-5 sm:h-5",
                                  worldConfig.text
                                )}
                              />
                            </div>
                            <span className="text-gray-800">
                              {worldConfig.title}
                            </span>
                          </h3>
                          <Badge
                            className={cn(
                              "flex items-center gap-1 text-xs px-2 py-1 shadow-sm",
                              worldCompleted
                                ? "bg-emerald-100 text-emerald-800 border-emerald-200/50"
                                : "bg-blue-100 text-blue-800 border-blue-200/50"
                            )}
                          >
                            {worldCompleted ? (
                              <>
                                <CheckCircle className="w-2.5 h-2.5 sm:w-3 sm:h-3 ml-0.5" />{" "}
                                {/* Adjusted margin for RTL */}
                                הושלם
                              </>
                            ) : (
                              <>
                                <Clock className="w-2.5 h-2.5 sm:w-3 sm:h-3 ml-0.5" />{" "}
                                {/* Adjusted margin for RTL */}
                                בתהליך
                              </>
                            )}
                          </Badge>
                        </div>

                        <div className="grid gap-3 sm:gap-4">
                          {answers
                            .filter(
                              (answer) =>
                                viewMode === "matchmaker" ||
                                answer.isVisible !== false
                            ) // Type guard for isVisible
                            .map((answer) => (
                              <div
                                key={answer.questionId}
                                className={cn(
                                  "bg-white rounded-lg sm:rounded-xl p-3 sm:p-4 shadow-sm border transition-shadow hover:shadow-md",
                                  worldConfig.border.replace("/50", "") // Slightly stronger border for answers
                                )}
                              >
                                <div className="flex justify-between items-start mb-2 sm:mb-3 gap-2">
                                  <p className="text-xs sm:text-sm font-medium text-gray-700 flex-1 leading-snug">
                                    {answer.question}
                                  </p>
                                  {/* Visibility Badge */}
                                  {answer.isVisible === false ? ( // Explicitly check for false
                                    <Badge
                                      variant="outline"
                                      className="bg-gray-100 text-gray-500 border-gray-200 text-xs py-0.5 px-1.5 whitespace-nowrap"
                                    >
                                      <EyeOff className="w-2.5 h-2.5 sm:w-3 sm:h-3 ml-1" />{" "}
                                      {/* Adjusted margin for RTL */}
                                      מוסתר
                                    </Badge>
                                  ) : (
                                    <Badge
                                      variant="outline"
                                      className={cn(
                                        "text-xs py-0.5 px-1.5 whitespace-nowrap",
                                        `${worldConfig.text}/80 bg-${worldConfig.color}-50 border-${worldConfig.color}-200/50`
                                      )}
                                    >
                                      <Eye className="w-2.5 h-2.5 sm:w-3 sm:h-3 ml-1" />{" "}
                                      {/* Adjusted margin for RTL */}
                                      מוצג
                                    </Badge>
                                  )}
                                </div>
                                {/* Answer Display */}
                                <div
                                  className={`bg-${worldConfig.color}-50/30 rounded-md sm:rounded-lg p-2.5 sm:p-4 mb-1.5 sm:mb-2`}
                                >
                                  <p className="text-sm sm:text-base font-medium text-gray-800">
                                    {answer.displayText}
                                  </p>
                                </div>
                                {/* Answer Date */}
                                <div className="flex justify-end">
                                  <p className="text-xs text-gray-400 flex items-center">
                                    <Calendar className="w-2.5 h-2.5 sm:w-3 sm:h-3 ml-1" />{" "}
                                    {/* Adjusted margin for RTL */}
                                    {new Date(
                                      answer.answeredAt
                                    ).toLocaleDateString("he-IL")}
                                  </p>
                                </div>
                              </div>
                            ))}
                        </div>
                      </div>
                    );
                  }
                )}
              </div>
            </TabsContent>
          )}

          {/* Fallback if questionnaire is missing */}
          {!questionnaire && activeTab === "questionnaire" && (
            <TabsContent
              value="questionnaire"
              className="mt-2 focus:outline-none"
            >
              <div className="rounded-xl sm:rounded-2xl p-4 sm:p-6 bg-gradient-to-br from-gray-50 to-white border border-gray-200/50 shadow-md text-center">
                <EmptyState icon={FileText} message="שאלון אינו זמין לצפייה" />
              </div>
            </TabsContent>
          )}

          {/* Sensitive Information Tab (Matchmakers Only) */}
          {viewMode === "matchmaker" && (
            <TabsContent value="sensitive" className="mt-2 focus:outline-none">
              <SensitiveInfo>
                {/* References */}
                {profile.referenceName1 || profile.referenceName2 ? (
                  <div className="space-y-4 sm:space-y-5 mb-6 sm:mb-8">
                    <h3 className="text-base sm:text-lg font-semibold text-amber-800 flex items-center gap-1.5 sm:gap-2">
                      <Phone className="w-4 h-4 sm:w-5 sm:h-5" />
                      ממליצים
                    </h3>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-3 sm:gap-4">
                      {profile.referenceName1 && profile.referencePhone1 && (
                        <div className="p-3 sm:p-4 bg-white rounded-lg sm:rounded-xl shadow-sm border border-amber-200">
                          <h4 className="font-medium mb-2 sm:mb-3 text-xs sm:text-sm text-amber-700">
                            ממליצ/ה 1
                          </h4>
                          <div className="space-y-2 sm:space-y-3">
                            <p className="flex items-center gap-2 sm:gap-2.5 text-sm sm:text-base">
                              <User className="w-3.5 h-3.5 sm:w-4 sm:h-4 text-amber-600 flex-shrink-0" />
                              <span className="font-medium text-gray-800">
                                {profile.referenceName1}
                              </span>
                            </p>
                            <p className="flex items-center gap-2 sm:gap-2.5 text-sm sm:text-base">
                              <Phone className="w-3.5 h-3.5 sm:w-4 sm:h-4 text-amber-600 flex-shrink-0" />
                              <span
                                dir="ltr"
                                className="font-medium text-gray-800"
                              >
                                {profile.referencePhone1}
                              </span>
                            </p>
                          </div>
                        </div>
                      )}
                      {profile.referenceName2 && profile.referencePhone2 && (
                        <div className="p-3 sm:p-4 bg-white rounded-lg sm:rounded-xl shadow-sm border border-amber-200">
                          <h4 className="font-medium mb-2 sm:mb-3 text-xs sm:text-sm text-amber-700">
                            ממליצ/ה 2
                          </h4>
                          <div className="space-y-2 sm:space-y-3">
                            <p className="flex items-center gap-2 sm:gap-2.5 text-sm sm:text-base">
                              <User className="w-3.5 h-3.5 sm:w-4 sm:h-4 text-amber-600 flex-shrink-0" />
                              <span className="font-medium text-gray-800">
                                {profile.referenceName2}
                              </span>
                            </p>
                            <p className="flex items-center gap-2 sm:gap-2.5 text-sm sm:text-base">
                              <Phone className="w-3.5 h-3.5 sm:w-4 sm:h-4 text-amber-600 flex-shrink-0" />
                              <span
                                dir="ltr"
                                className="font-medium text-gray-800"
                              >
                                {profile.referencePhone2}
                              </span>
                            </p>
                          </div>
                        </div>
                      )}
                    </div>
                  </div>
                ) : (
                  <div className="mb-6 sm:mb-8">
                    <h3 className="text-base sm:text-lg font-semibold text-amber-800 flex items-center gap-1.5 sm:gap-2 mb-3 sm:mb-4">
                      <Phone className="w-4 h-4 sm:w-5 sm:h-5" />
                      ממליצים
                    </h3>
                    <EmptyState icon={Phone} message="לא הוזנו ממליצים" />
                  </div>
                )}

                {/* Contact Preferences */}
                <div className="space-y-4 sm:space-y-5 mb-6 sm:mb-8">
                  <h3 className="text-base sm:text-lg font-semibold text-amber-800 flex items-center gap-1.5 sm:gap-2">
                    <User className="w-4 h-4 sm:w-5 sm:h-5" />
                    העדפות יצירת קשר
                  </h3>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-3 sm:gap-4">
                    {/* Contact Method */}
                    <div className="p-3 sm:p-4 bg-white rounded-lg sm:rounded-xl shadow-sm border border-amber-200">
                      <div className="flex items-start gap-2 sm:gap-3">
                        <div className="p-1.5 sm:p-2 rounded-full bg-amber-100 text-amber-700 flex-shrink-0">
                          <Phone className="w-3.5 h-3.5 sm:w-4 sm:h-4" />
                        </div>
                        <div>
                          <p className="text-xs sm:text-sm font-medium text-amber-700 mb-1">
                            אופן יצירת קשר מועדף
                          </p>
                          <p className="text-sm sm:text-base font-medium text-gray-800">
                            {profile.contactPreference === "direct"
                              ? "ישירות"
                              : profile.contactPreference === "matchmaker"
                              ? "דרך השדכן/ית"
                              : profile.contactPreference === "both"
                              ? "שתי האפשרויות"
                              : "לא צוין"}
                          </p>
                        </div>
                      </div>
                    </div>
                    {/* Preferred Matchmaker Gender */}
                    <div className="p-3 sm:p-4 bg-white rounded-lg sm:rounded-xl shadow-sm border border-amber-200">
                      <div className="flex items-start gap-2 sm:gap-3">
                        <div className="p-1.5 sm:p-2 rounded-full bg-amber-100 text-amber-700 flex-shrink-0">
                          <User className="w-3.5 h-3.5 sm:w-4 sm:h-4" />
                        </div>
                        <div>
                          <p className="text-xs sm:text-sm font-medium text-amber-700 mb-1">
                            העדפת מגדר שדכן/ית
                          </p>
                          <p className="text-sm sm:text-base font-medium text-gray-800">
                            {profile.preferredMatchmakerGender === "MALE"
                              ? "גבר"
                              : profile.preferredMatchmakerGender === "FEMALE"
                              ? "אישה"
                              : "אין העדפה / לא צוין"}
                          </p>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>

                {/* Matching Notes */}
                {profile.matchingNotes ? (
                  <div className="space-y-3 sm:space-y-4">
                    <h3 className="text-base sm:text-lg font-semibold text-amber-800 flex items-center gap-1.5 sm:gap-2">
                      <FileText className="w-4 h-4 sm:w-5 sm:h-5" />
                      הערות לשדכנים
                    </h3>
                    <div className="p-3 sm:p-5 bg-white rounded-lg sm:rounded-xl shadow-sm border border-amber-200">
                      <p className="whitespace-pre-wrap text-sm sm:text-base font-medium text-gray-800">
                        {profile.matchingNotes}
                      </p>
                    </div>
                  </div>
                ) : (
                  <div>
                    <h3 className="text-base sm:text-lg font-semibold text-amber-800 flex items-center gap-1.5 sm:gap-2 mb-3 sm:mb-4">
                      <FileText className="w-4 h-4 sm:w-5 sm:h-5" />
                      הערות לשדכנים
                    </h3>
                    <EmptyState icon={FileText} message="לא הוזנו הערות" />
                  </div>
                )}
              </SensitiveInfo>
            </TabsContent>
          )}
        </Tabs>
      </div>

      {/* Image Viewer Dialog */}
      {selectedImageIndex !== null && images[selectedImageIndex] && (
        <Dialog
          open={selectedImageIndex !== null}
          onOpenChange={handleCloseDialog}
        >
          <DialogContent className="max-w-4xl p-0 bg-black/90 backdrop-blur-md border-none shadow-2xl overflow-hidden rounded-lg">
            <div className="p-3 sm:p-4 text-white flex justify-between items-center border-b border-gray-700/50">
              <DialogTitle className="text-center text-base sm:text-xl font-semibold flex-grow">
                גלריית תמונות ({selectedImageIndex + 1}/{images.length})
              </DialogTitle>
              <Button
                variant="ghost"
                size="icon"
                className="text-gray-300 hover:text-white hover:bg-white/10 h-8 w-8 rounded-full"
                onClick={handleCloseDialog}
              >
                <span className="sr-only">סגור</span>
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  fill="none"
                  viewBox="0 0 24 24"
                  strokeWidth={1.5}
                  stroke="currentColor"
                  className="w-5 h-5"
                >
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    d="M6 18 18 6M6 6l12 12"
                  />
                </svg>
              </Button>
            </div>

            <div className="relative h-[60vh] sm:h-[70vh] max-h-[700px] w-full overflow-hidden flex items-center justify-center bg-black">
              <Image
                key={images[selectedImageIndex].id} // Add key for potential re-renders
                src={images[selectedImageIndex].url}
                alt={`תמונת פרופיל ${selectedImageIndex + 1}`}
                fill
                className="object-contain"
                sizes="(max-width: 768px) 100vw, (max-width: 1200px) 80vw, 70vw"
                priority
              />

              {/* Navigation Buttons */}
              {selectedImageIndex > 0 && (
                <Button
                  variant="ghost"
                  size="icon"
                  className="absolute left-2 sm:left-4 top-1/2 -translate-y-1/2 bg-black/30 hover:bg-black/50 text-white rounded-full h-9 w-9 sm:h-12 sm:w-12 shadow-lg"
                  onClick={(e) => {
                    e.stopPropagation();
                    handlePreviousImage();
                  }}
                  aria-label="תמונה קודמת"
                >
                  <ChevronRight className="h-5 w-5 sm:h-6 sm:w-6" />{" "}
                  {/* ChevronRight for previous in RTL */}
                </Button>
              )}
              {selectedImageIndex < images.length - 1 && (
                <Button
                  variant="ghost"
                  size="icon"
                  className="absolute right-2 sm:right-4 top-1/2 -translate-y-1/2 bg-black/30 hover:bg-black/50 text-white rounded-full h-9 w-9 sm:h-12 sm:w-12 shadow-lg"
                  onClick={(e) => {
                    e.stopPropagation();
                    handleNextImage();
                  }}
                  aria-label="תמונה הבאה"
                >
                  <ChevronLeft className="h-5 w-5 sm:h-6 sm:w-6" />{" "}
                  {/* ChevronLeft for next in RTL */}
                </Button>
              )}
            </div>

            {/* Thumbnails */}
            {images.length > 1 && (
              <ScrollArea dir="rtl" className="w-full">
                <div className="flex gap-1.5 sm:gap-2 p-2 sm:p-4 justify-center bg-black/80">
                  {images.map((image, index) => (
                    <div
                      key={image.id}
                      className={cn(
                        "relative flex-shrink-0 w-12 h-12 sm:w-16 sm:h-16 rounded-md sm:rounded-lg overflow-hidden cursor-pointer border-2 transition-all duration-200 ease-in-out",
                        selectedImageIndex === index
                          ? "border-cyan-400 ring-2 ring-cyan-400/50 scale-105"
                          : "border-transparent hover:border-gray-400 opacity-60 hover:opacity-100"
                      )}
                      onClick={() => setSelectedImageIndex(index)}
                    >
                      <Image
                        src={image.url}
                        alt={`תמונה ${index + 1}`}
                        fill
                        className="object-cover"
                        sizes="64px" // Appropriate size for thumbnails
                      />
                    </div>
                  ))}
                </div>
              </ScrollArea>
            )}
          </DialogContent>
        </Dialog>
      )}
    </Card>
  );
};

export default ProfileCard;


==================================================
Contents of C:\Users\eytan\Desktop\שידוכים\shidduch-system\src\app\components\profile\utils.ts:
==================================================
// src/components/shared/profile/utils.ts
import type { UserProfile } from "@/types/next-auth";

export const calculateAge = (birthDate: Date): number => {
  const today = new Date();
  const birth = new Date(birthDate);
  let age = today.getFullYear() - birth.getFullYear();
  const monthDiff = today.getMonth() - birth.getMonth();
  
  if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birth.getDate())) {
    age--;
  }
  return age;
};

export const formatProfileData = (profile: UserProfile) => {
  return {
    ...profile,
    age: calculateAge(new Date(profile.birthDate)),
    // Add any other formatting needed
  };
};

export const validateProfileData = (data: Partial<UserProfile>) => {
  const errors: Record<string, string> = {};
  
  // Add validation rules as needed
  if (data.height && (data.height < 100 || data.height > 250)) {
    errors.height = "גובה חייב להיות בין 100 ל-250 ס\"מ";
  }
  
  return {
    isValid: Object.keys(errors).length === 0,
    errors
  };
};

==================================================
Contents of C:\Users\eytan\Desktop\שידוכים\shidduch-system\src\app\components\profile\elements\MinimalCard.tsx:
==================================================
// src/components/shared/profile/elements/MinimalCard.tsx
import React from "react";
import { Card } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { User, MapPin, Scroll, Heart } from "lucide-react";
import Image from "next/image";
import { calculateAge } from "../utils";
import type { UserProfile, UserImage } from "@/types/next-auth";

interface MinimalCardProps {
  profile: UserProfile;
  mainImage?: UserImage;
  onClick?: () => void;
  className?: string;
}

const MinimalCard: React.FC<MinimalCardProps> = ({
  profile,
  mainImage,
  onClick,
  className = "",
}) => {
  const age = calculateAge(new Date(profile.birthDate));

  // Handle cases where profile.user might be undefined
  const userName = profile.user
    ? `${profile.user.firstName} ${profile.user.lastName}`
    : "שם לא זמין"; // "Name not available" in Hebrew

  return (
    <Card
      onClick={onClick}
      className={`relative overflow-hidden cursor-pointer hover:shadow-md transition-shadow ${className}`}
    >
      <div className="flex gap-4 p-4">
        {/* תמונת פרופיל */}
        <div className="relative w-24 h-24 rounded-lg overflow-hidden bg-gray-100">
          {mainImage ? (
            <Image
              src={mainImage.url}
              alt="תמונת פרופיל"
              fill
              className="object-cover"
              sizes="96px"
            />
          ) : (
            <div className="w-full h-full flex items-center justify-center">
              <User className="w-8 h-8 text-gray-400" />
            </div>
          )}
        </div>

        {/* מידע בסיסי */}
        <div className="flex-1 space-y-2">
          <div>
            <h3 className="text-lg font-medium">{userName}</h3>
            <p className="text-sm text-gray-500">{age} שנים</p>
          </div>

          <div className="flex flex-wrap gap-2">
            {profile.city && (
              <Badge variant="secondary" className="flex items-center gap-1">
                <MapPin className="w-3 h-3" />
                {profile.city}
              </Badge>
            )}
            {profile.religiousLevel && (
              <Badge variant="secondary" className="flex items-center gap-1">
                <Scroll className="w-3 h-3" />
                {profile.religiousLevel}
              </Badge>
            )}
          </div>

          {/* סטטוס זמינות */}
          <div className="flex items-center gap-2 text-sm">
            {profile.availabilityStatus === "AVAILABLE" ? (
              <Badge variant="success" className="flex items-center gap-1">
                <Heart className="w-3 h-3" />
                פנוי/ה להצעות
              </Badge>
            ) : (
              <Badge variant="secondary" className="flex items-center gap-1">
                <Heart className="w-3 h-3" />
                בתהליך הכרות
              </Badge>
            )}
          </div>
        </div>
      </div>
    </Card>
  );
};

export default MinimalCard;


==================================================
Contents of C:\Users\eytan\Desktop\שידוכים\shidduch-system\src\app\components\profile\elements\StatsCard.tsx:
==================================================
import React from "react";
import { Card, CardContent } from "@/components/ui/card";
import { Progress } from "@/components/ui/progress";
import { cn } from "@/lib/utils";

interface StatsCardProps {
  /**
   * The icon to display in the card
   */
  icon: React.ElementType;

  /**
   * The title text to display
   */
  title: string;

  /**
   * The main value to display
   */
  value: string | number;

  /**
   * Optional progress value (0-100)
   */
  progress?: number;

  /**
   * Optional trend information
   */
  trend?: {
    value: number;
    label: string;
    isPositive?: boolean;
  };

  /**
   * Visual variant of the card
   */
  variant?: "default" | "success" | "warning" | "destructive";

  /**
   * Additional CSS classes
   */
  className?: string;
}

const StatsCard: React.FC<StatsCardProps> = ({
  icon: Icon,
  title,
  value,
  progress,
  trend,
  variant = "default",
  className,
}) => {
  // Determine variant-specific background color
  const getVariantStyles = () => {
    switch (variant) {
      case "success":
        return "bg-emerald-50 dark:bg-emerald-900/20";
      case "warning":
        return "bg-amber-50 dark:bg-amber-900/20";
      case "destructive":
        return "bg-red-50 dark:bg-red-900/20";
      default:
        return "bg-card";
    }
  };

  // Special handling for availability status
  const isAvailabilityStatus = title === "סטטוס פניות";
  const isAvailable = typeof value === 'string' && value.toLowerCase() === 'available';

  // Render the value with special handling for availability status
  const renderValue = () => {
    if (isAvailabilityStatus) {
      return (
        <div className="mt-1">
          <span className={cn(
            "inline-flex px-3 py-1 rounded-full text-sm font-semibold tracking-wide",
            isAvailable 
              ? "bg-emerald-100 text-emerald-800 dark:bg-emerald-900/30 dark:text-emerald-300"
              : "bg-gray-100 text-gray-800 dark:bg-gray-800 dark:text-gray-200"
          )}>
            {value}
          </span>
        </div>
      );
    }
    return <h3 className="text-2xl font-semibold">{value}</h3>;
  };

  return (
    <Card
      className={cn(
        "hover:shadow-md transition-shadow",
        getVariantStyles(),
        className
      )}
    >
      <CardContent className="p-6">
        {/* Header Section */}
        <div className="flex items-center space-x-4 rtl:space-x-reverse">
          <div className="p-2 bg-primary/10 rounded-full">
            <Icon className="w-6 h-6 text-primary" />
          </div>
          <div className="flex-1 space-y-1">
            <p className="text-sm text-muted-foreground">{title}</p>
            {renderValue()}
          </div>
        </div>

        {/* Progress Bar Section */}
        {progress !== undefined && (
          <div className="mt-4 space-y-2">
            <Progress 
              value={progress} 
              className="h-2"
              aria-label={`${title} progress: ${progress}%`}
            />
            <p className="text-sm text-muted-foreground text-right">
              {progress}%
            </p>
          </div>
        )}

        {/* Trend Section */}
        {trend && (
          <div className="mt-4 flex items-center">
            <span
              className={cn(
                "text-sm font-medium",
                trend.isPositive ? "text-emerald-600" : "text-red-600"
              )}
            >
              {trend.isPositive ? "+" : "-"}
              {trend.value}%
            </span>
            <span className="text-sm text-muted-foreground mr-2">
              {trend.label}
            </span>
          </div>
        )}
      </CardContent>
    </Card>
  );
};

// Default export
export default StatsCard;

// Named exports for specific use cases
export type { StatsCardProps };

==================================================
Contents of C:\Users\eytan\Desktop\שידוכים\shidduch-system\src\app\components\profile\elements\VisibilityControl.tsx:
==================================================
import React from "react";
import { Eye, EyeOff } from "lucide-react";
import { Switch } from "@/components/ui/switch";
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip";
import { cn } from "@/lib/utils";

interface VisibilityControlProps {
  /**
   * Current visibility state
   */
  isVisible: boolean;

  /**
   * Callback when visibility changes
   */
  onChange: (isVisible: boolean) => void;

  /**
   * Optional class name for additional styling
   */
  className?: string;

  /**
   * Optional disabled state
   */
  disabled?: boolean;

  /**
   * Optional custom tooltip text
   */
  tooltipText?: {
    visible?: string;
    hidden?: string;
    action?: string;
  };
}

const VisibilityControl: React.FC<VisibilityControlProps> = ({
  isVisible,
  onChange,
  className,
  disabled = false,
  tooltipText = {
    visible: "תשובה זו גלויה למועמדים",
    hidden: "תשובה זו מוסתרת מהמועמדים",
    action: "לחץ כדי",
  },
}) => {
  return (
    <div
      className={cn(
        "flex items-center gap-2 bg-secondary/20 p-2 rounded-md",
        disabled && "opacity-50 cursor-not-allowed",
        className
      )}
    >
      {/* Icon */}
      {isVisible ? (
        <Eye 
          className="h-4 w-4 text-primary" 
          aria-hidden="true"
        />
      ) : (
        <EyeOff 
          className="h-4 w-4 text-muted-foreground" 
          aria-hidden="true"
        />
      )}

      {/* Switch with Tooltip */}
      <TooltipProvider>
        <Tooltip>
          <TooltipTrigger asChild>
            <div className="relative">
              <Switch
                checked={isVisible}
                onCheckedChange={onChange}
                disabled={disabled}
                className={cn(
                  "data-[state=checked]:bg-primary",
                  disabled && "cursor-not-allowed"
                )}
                aria-label={`Toggle visibility: currently ${isVisible ? 'visible' : 'hidden'}`}
              />
              {/* Visually hidden text for screen readers */}
              <span className="sr-only">
                {isVisible ? "הסתר תוכן" : "הצג תוכן"}
              </span>
            </div>
          </TooltipTrigger>
          <TooltipContent 
            side="left" 
            className="max-w-[200px]"
            dir="rtl"
          >
            <p>
              {isVisible ? tooltipText.visible : tooltipText.hidden}
            </p>
            <p className="text-xs text-muted-foreground mt-1">
              {tooltipText.action} {isVisible ? "להסתיר" : "להציג"} תשובה זו
            </p>
          </TooltipContent>
        </Tooltip>
      </TooltipProvider>
    </div>
  );
};

// Default export
export default VisibilityControl;

// Named exports for types
export type { VisibilityControlProps };

==================================================
Contents of C:\Users\eytan\Desktop\שידוכים\shidduch-system\src\app\components\profile\sections\ExtendedProfileSection.tsx:
==================================================
"use client";
import React, { useState, useEffect } from "react";
import {
  Card,
  CardHeader,
  CardTitle,
  CardContent,
  CardDescription,
} from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { ExtendedProfileData } from "@/types/profile-extended";
import { UserProfile } from "@/types/next-auth";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Button } from "@/components/ui/button";
import { Slider } from "@/components/ui/slider";
import { Pencil, Save, X } from "lucide-react";

interface ExtendedProfileSectionProps {
  profile: (UserProfile & { extendedData?: ExtendedProfileData }) | null;
  isEditing: boolean;
  viewOnly?: boolean;
  setIsEditing: (value: boolean) => void;
  onSave: (
    data: Partial<UserProfile & { extendedData: ExtendedProfileData }>
  ) => void;
}

type NestedChangeValue =
  | string
  | number
  | boolean
  | string[]
  | { [key: string]: string }
  | { location: string; proximity: "קרוב למשפחה" | "קרוב לקהילה" | "גמיש" };

const ExtendedProfileSection: React.FC<ExtendedProfileSectionProps> = ({
  profile,
  isEditing,
  viewOnly = false,
  setIsEditing,
  onSave,
}) => {
  const [formData, setFormData] = useState<ExtendedProfileData>({});
  const [initialData, setInitialData] = useState<ExtendedProfileData>({});

  useEffect(() => {
    if (profile?.extendedData) {
      setFormData(profile.extendedData);
      setInitialData(profile.extendedData);
    }
  }, [profile]);

  const handleChange = (
    field: keyof ExtendedProfileData,
    value: string | string[] | number
  ) => {
    setFormData((prev) => ({
      ...prev,
      [field]: value,
    }));
  };

  const handleNestedChange = (
    category: keyof ExtendedProfileData,
    field: string,
    value: NestedChangeValue
  ) => {
    setFormData((prev) => ({
      ...prev,
      [category]: {
        ...prev[category],
        [field]: value,
      },
    }));
  };

  const handleSave = () => {
    if (profile) {
      onSave({
        ...profile,
        extendedData: formData,
      });
    }
    setIsEditing(false);
    setInitialData(formData);
  };

  const handleCancel = () => {
    setFormData(initialData);
    setIsEditing(false);
  };

  return (
    <div className="relative min-h-screen bg-background">
      {/* Sticky Header */}
      <div className="sticky top-0 z-50 bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60 border-b">
        <div className="container mx-auto py-4">
          <div className="flex items-center justify-between">
            <div>
              <h1 className="text-2xl font-bold">פרופיל מורחב</h1>
              <p className="text-sm text-muted-foreground">
                פרטים נוספים להתאמה מיטבית
              </p>
            </div>
            {!viewOnly && (
              <div className="flex gap-2">
                {!isEditing ? (
                  <Button
                    variant="outline"
                    onClick={() => setIsEditing(true)}
                    className="shadow-sm hover:shadow-md transition-shadow"
                  >
                    <Pencil className="w-4 h-4 ml-2" />
                    עריכה
                  </Button>
                ) : (
                  <>
                    <Button
                      variant="outline"
                      onClick={handleCancel}
                      className="shadow-sm hover:shadow-md transition-shadow"
                    >
                      <X className="w-4 h-4 ml-2" />
                      ביטול
                    </Button>
                    <Button
                      variant="default"
                      onClick={handleSave}
                      className="shadow-sm hover:shadow-md transition-shadow"
                    >
                      <Save className="w-4 h-4 ml-2" />
                      שמירה
                    </Button>
                  </>
                )}
              </div>
            )}
          </div>
        </div>
      </div>

      <div className="container mx-auto py-6 space-y-6">
        {/* תכונות אישיות */}
        <Card>
          <CardHeader>
            <CardTitle className="text-xl font-bold">תכונות אישיות</CardTitle>
            <CardDescription>אפיון אישיותי ודפוסי התנהגות</CardDescription>
          </CardHeader>
          <CardContent>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div>
                <Label>מזג</Label>
                <Select
                  value={formData.personalityTraits?.temperament}
                  onValueChange={(value) =>
                    handleNestedChange(
                      "personalityTraits",
                      "temperament",
                      value
                    )
                  }
                  disabled={!isEditing}
                >
                  <SelectTrigger className="mt-1">
                    <SelectValue placeholder="בחר מזג" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="מופנם">מופנם</SelectItem>
                    <SelectItem value="מעורב">מעורב</SelectItem>
                    <SelectItem value="חברותי">חברותי</SelectItem>
                  </SelectContent>
                </Select>
              </div>

              <div>
                <Label>סגנון קבלת החלטות</Label>
                <Select
                  value={formData.personalityTraits?.decisionMaking}
                  onValueChange={(value) =>
                    handleNestedChange(
                      "personalityTraits",
                      "decisionMaking",
                      value
                    )
                  }
                  disabled={!isEditing}
                >
                  <SelectTrigger className="mt-1">
                    <SelectValue placeholder="בחר סגנון" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="ספונטני">ספונטני</SelectItem>
                    <SelectItem value="מתוכנן">מתוכנן</SelectItem>
                    <SelectItem value="משולב">משולב</SelectItem>
                  </SelectContent>
                </Select>
              </div>

              <div>
                <Label>התמודדות עם לחץ</Label>
                <Select
                  value={formData.personalityTraits?.stressManagement}
                  onValueChange={(value) =>
                    handleNestedChange(
                      "personalityTraits",
                      "stressManagement",
                      value
                    )
                  }
                  disabled={!isEditing}
                >
                  <SelectTrigger className="mt-1">
                    <SelectValue placeholder="בחר סגנון התמודדות" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="רגוע">רגוע</SelectItem>
                    <SelectItem value="לחוץ">לחוץ</SelectItem>
                    <SelectItem value="משתנה">משתנה</SelectItem>
                  </SelectContent>
                </Select>
              </div>

              <div>
                <Label>סגנון תקשורת</Label>
                <Select
                  value={formData.personalityTraits?.communicationStyle}
                  onValueChange={(value) =>
                    handleNestedChange(
                      "personalityTraits",
                      "communicationStyle",
                      value
                    )
                  }
                  disabled={!isEditing}
                >
                  <SelectTrigger className="mt-1">
                    <SelectValue placeholder="בחר סגנון תקשורת" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="ישיר">ישיר</SelectItem>
                    <SelectItem value="עקיף">עקיף</SelectItem>
                    <SelectItem value="דיפלומטי">דיפלומטי</SelectItem>
                  </SelectContent>
                </Select>
              </div>
            </div>
          </CardContent>
        </Card>

        {/* פרופיל רוחני */}
        <Card>
          <CardHeader>
            <CardTitle className="text-xl font-bold">פרופיל רוחני</CardTitle>
            <CardDescription>השקפת עולם והשתייכות קהילתית</CardDescription>
          </CardHeader>
          <CardContent>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div>
                <Label>נוסח תפילה</Label>
                <Select
                  value={formData.spiritualProfile?.prayerStyle}
                  onValueChange={(value) =>
                    handleNestedChange("spiritualProfile", "prayerStyle", value)
                  }
                  disabled={!isEditing}
                >
                  <SelectTrigger className="mt-1">
                    <SelectValue placeholder="בחר נוסח" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="ספרד">ספרד</SelectItem>
                    <SelectItem value="אשכנז">אשכנז</SelectItem>
                    <SelectItem value="תימני">תימני</SelectItem>
                    <SelectItem value="אחר">אחר</SelectItem>
                  </SelectContent>
                </Select>
              </div>

              <div>
                <Label>גישה ללימודי חול</Label>
                <Select
                  value={formData.spiritualProfile?.secularStudiesAttitude}
                  onValueChange={(value) =>
                    handleNestedChange(
                      "spiritualProfile",
                      "secularStudiesAttitude",
                      value
                    )
                  }
                  disabled={!isEditing}
                >
                  <SelectTrigger className="mt-1">
                    <SelectValue placeholder="בחר גישה" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="חיובי">חיובי</SelectItem>
                    <SelectItem value="שלילי">שלילי</SelectItem>
                    <SelectItem value="מסויג">מסויג</SelectItem>
                  </SelectContent>
                </Select>
              </div>

              <div>
                <Label>רמת הקפדה בצניעות</Label>
                <Select
                  value={formData.spiritualProfile?.modestyLevel}
                  onValueChange={(value) =>
                    handleNestedChange(
                      "spiritualProfile",
                      "modestyLevel",
                      value
                    )
                  }
                  disabled={!isEditing}
                >
                  <SelectTrigger className="mt-1">
                    <SelectValue placeholder="בחר רמת הקפדה" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="מחמיר">מחמיר</SelectItem>
                    <SelectItem value="מקובל">מקובל</SelectItem>
                    <SelectItem value="מודרני">מודרני</SelectItem>
                  </SelectContent>
                </Select>
              </div>

              <div>
                <Label>גישה לחינוך ילדים</Label>
                <Textarea
                  value={
                    formData.spiritualProfile?.childrenEducationApproach || ""
                  }
                  onChange={(e) =>
                    handleNestedChange(
                      "spiritualProfile",
                      "childrenEducationApproach",
                      e.target.value
                    )
                  }
                  disabled={!isEditing}
                  className="mt-1"
                  placeholder="תאר/י את גישתך לחינוך ילדים..."
                />
              </div>
            </div>
          </CardContent>
        </Card>

        {/* רקע משפחתי */}
        <Card>
          <CardHeader>
            <CardTitle className="text-xl font-bold">רקע משפחתי</CardTitle>
            <CardDescription>פרטים על המשפחה והתמיכה המשפחתית</CardDescription>
          </CardHeader>
          <CardContent>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div>
                <Label>רמה רוחנית של ההורים</Label>
                <Input
                  value={formData.familyBackground?.parentsSpiritualLevel || ""}
                  onChange={(e) =>
                    handleNestedChange(
                      "familyBackground",
                      "parentsSpiritualLevel",
                      e.target.value
                    )
                  }
                  disabled={!isEditing}
                  className="mt-1"
                />
              </div>

              <div>
                <Label>עיסוק האב</Label>
                <Input
                  value={
                    formData.familyBackground?.parentsOccupations?.father || ""
                  }
                  onChange={(e) =>
                    handleNestedChange(
                      "familyBackground",
                      "parentsOccupations",
                      {
                        ...formData.familyBackground?.parentsOccupations,
                        father: e.target.value,
                      }
                    )
                  }
                  disabled={!isEditing}
                  className="mt-1"
                />
              </div>

              <div>
                <Label>עיסוק האם</Label>
                <Input
                  value={
                    formData.familyBackground?.parentsOccupations?.mother || ""
                  }
                  onChange={(e) =>
                    handleNestedChange(
                      "familyBackground",
                      "parentsOccupations",
                      {
                        ...formData.familyBackground?.parentsOccupations,
                        mother: e.target.value,
                      }
                    )
                  }
                  disabled={!isEditing}
                  className="mt-1"
                />
              </div>

              <div>
                <Label>דינמיקה משפחתית</Label>
                <Textarea
                  value={formData.familyBackground?.familyDynamics || ""}
                  onChange={(e) =>
                    handleNestedChange(
                      "familyBackground",
                      "familyDynamics",
                      e.target.value
                    )
                  }
                  disabled={!isEditing}
                  className="mt-1"
                  placeholder="תאר/י את היחסים במשפחה..."
                />
              </div>
            </div>
          </CardContent>
        </Card>

        {/* סגנון חיים */}
        <Card>
          <CardHeader>
            <CardTitle className="text-xl font-bold">סגנון חיים</CardTitle>
            <CardDescription>העדפות ושאיפות לעתיד</CardDescription>
          </CardHeader>
          <CardContent>
            <div className="space-y-6">
              <div>
                <Label>שאיפות קריירה</Label>
                <Textarea
                  value={formData.lifestylePreferences?.careerAspiration || ""}
                  onChange={(e) =>
                    handleNestedChange(
                      "lifestylePreferences",
                      "careerAspiration",
                      e.target.value
                    )
                  }
                  disabled={!isEditing}
                  className="mt-1"
                  placeholder="תאר/י את שאיפותיך המקצועיות..."
                />
              </div>

              <div>
                <Label>תכניות לימודים עתידיות</Label>
                <Textarea
                  value={formData.lifestylePreferences?.futureStudyPlans || ""}
                  onChange={(e) =>
                    handleNestedChange(
                      "lifestylePreferences",
                      "futureStudyPlans",
                      e.target.value
                    )
                  }
                  disabled={!isEditing}
                  className="mt-1"
                  placeholder="תאר/י את תכניות הלימוד העתידיות שלך..."
                />
              </div>

              <div>
                <Label>העדפות מגורים</Label>
                <Select
                  value={
                    formData.lifestylePreferences?.livingPreferences?.proximity
                  }
                  onValueChange={(value) =>
                    handleNestedChange(
                      "lifestylePreferences",
                      "livingPreferences",
                      {
                        ...formData.lifestylePreferences?.livingPreferences,
                        proximity: value,
                      }
                    )
                  }
                  disabled={!isEditing}
                >
                  <SelectTrigger className="mt-1">
                    <SelectValue placeholder="בחר העדפת מגורים" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="קרוב למשפחה">קרוב למשפחה</SelectItem>
                    <SelectItem value="קרוב לקהילה">קרוב לקהילה</SelectItem>
                    <SelectItem value="גמיש">גמיש</SelectItem>
                  </SelectContent>
                </Select>
              </div>
            </div>
          </CardContent>
        </Card>

        {/* בריאות ואורח חיים */}
        <Card>
          <CardHeader>
            <CardTitle className="text-xl font-bold">
              בריאות ואורח חיים
            </CardTitle>
            <CardDescription>מידע רפואי והרגלי חיים</CardDescription>
          </CardHeader>
          <CardContent>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div>
                <Label>מצב בריאותי</Label>
                <Textarea
                  value={formData.healthProfile?.generalHealth || ""}
                  onChange={(e) =>
                    handleNestedChange(
                      "healthProfile",
                      "generalHealth",
                      e.target.value
                    )
                  }
                  disabled={!isEditing}
                  className="mt-1"
                  placeholder="תאר/י את מצבך הבריאותי..."
                />
              </div>

              <div>
                <Label>הגבלות תזונתיות</Label>
                <Input
                  value={
                    formData.healthProfile?.dietaryRestrictions?.join(", ") ||
                    ""
                  }
                  onChange={(e) =>
                    handleNestedChange(
                      "healthProfile",
                      "dietaryRestrictions",
                      e.target.value.split(",").map((item) => item.trim())
                    )
                  }
                  disabled={!isEditing}
                  className="mt-1"
                  placeholder="הפרד/י בפסיקים..."
                />
              </div>

              <div>
                <Label>פעילות גופנית</Label>
                <Select
                  value={formData.healthProfile?.physicalActivity}
                  onValueChange={(value) =>
                    handleNestedChange(
                      "healthProfile",
                      "physicalActivity",
                      value
                    )
                  }
                  disabled={!isEditing}
                >
                  <SelectTrigger className="mt-1">
                    <SelectValue placeholder="בחר רמת פעילות" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="נמוכה">נמוכה</SelectItem>
                    <SelectItem value="בינונית">בינונית</SelectItem>
                    <SelectItem value="גבוהה">גבוהה</SelectItem>
                  </SelectContent>
                </Select>
              </div>
            </div>
          </CardContent>
        </Card>

        {/* ערכים אישיים ומעורבות קהילתית */}
        <Card>
          <CardHeader>
            <CardTitle className="text-xl font-bold">
              ערכים ומעורבות קהילתית
            </CardTitle>
            <CardDescription>ערכים אישיים ותרומה לקהילה</CardDescription>
          </CardHeader>
          <CardContent>
            <div className="space-y-6">
              <div>
                <Label>חשיבות כיבוד הורים (1-5)</Label>
                <Slider
                  value={[formData.personalValues?.parentalRespect || 3]}
                  min={1}
                  max={5}
                  step={1}
                  onValueChange={(value) =>
                    handleNestedChange(
                      "personalValues",
                      "parentalRespect",
                      value[0]
                    )
                  }
                  disabled={!isEditing}
                  className="mt-2"
                />
              </div>

              <div>
                <Label>התנדבות ומעורבות קהילתית</Label>
                <Textarea
                  value={formData.personalValues?.communityInvolvement || ""}
                  onChange={(e) =>
                    handleNestedChange(
                      "personalValues",
                      "communityInvolvement",
                      e.target.value
                    )
                  }
                  disabled={!isEditing}
                  className="mt-1"
                  placeholder="תאר/י את מעורבותך בקהילה..."
                />
              </div>
              <div>
                <Label>תחומי התנדבות מועדפים</Label>
                <Select
                  value={formData.personalValues?.volunteeringPreferences}
                  onValueChange={(value) =>
                    handleNestedChange(
                      "personalValues",
                      "volunteeringPreferences",
                      value
                    )
                  }
                  disabled={!isEditing}
                >
                  <SelectTrigger className="mt-1">
                    <SelectValue placeholder="בחר תחום" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="חינוך">חינוך</SelectItem>
                    <SelectItem value="בריאות">בריאות</SelectItem>
                    <SelectItem value="רווחה">רווחה</SelectItem>
                    <SelectItem value="קשישים">קשישים</SelectItem>
                    <SelectItem value="נוער">נוער</SelectItem>
                  </SelectContent>
                </Select>
              </div>

              <div>
                <Label>גישה לניהול כספים</Label>
                <Select
                  value={formData.personalValues?.financialManagement}
                  onValueChange={(value) =>
                    handleNestedChange(
                      "personalValues",
                      "financialManagement",
                      value
                    )
                  }
                  disabled={!isEditing}
                >
                  <SelectTrigger className="mt-1">
                    <SelectValue placeholder="בחר גישה" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="שמרני">שמרני</SelectItem>
                    <SelectItem value="מאוזן">מאוזן</SelectItem>
                    <SelectItem value="נועז">נועז</SelectItem>
                  </SelectContent>
                </Select>
              </div>
            </div>
          </CardContent>
        </Card>

        {/* שאיפות וציפיות */}
        <Card>
          <CardHeader>
            <CardTitle className="text-xl font-bold">שאיפות וציפיות</CardTitle>
            <CardDescription>מטרות אישיות וציפיות לעתיד</CardDescription>
          </CardHeader>
          <CardContent>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div>
                <Label>מטרות לחמש השנים הקרובות</Label>
                <Textarea
                  value={formData.futureGoals?.join("\n") || ""}
                  onChange={(e) =>
                    handleChange("futureGoals", e.target.value.split("\n"))
                  }
                  disabled={!isEditing}
                  className="mt-1"
                  placeholder="רשום/י כל מטרה בשורה נפרדת..."
                />
              </div>

              <div>
                <Label>ציפיות מהזוגיות</Label>
                <Textarea
                  value={
                    formData.lifestylePreferences?.relationshipExpectations ||
                    ""
                  }
                  onChange={(e) =>
                    handleNestedChange(
                      "lifestylePreferences",
                      "relationshipExpectations",
                      e.target.value
                    )
                  }
                  disabled={!isEditing}
                  className="mt-1"
                  placeholder="תאר/י את ציפיותיך מהזוגיות..."
                />
              </div>
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  );
};

export default ExtendedProfileSection;


==================================================
Contents of C:\Users\eytan\Desktop\שידוכים\shidduch-system\src\app\components\profile\sections\PhotosSection.tsx:
==================================================

"use client";

import React, { useRef, useState, useEffect, useCallback } from "react"; // Added useCallback
import Image from "next/image";
import { cn } from "@/lib/utils";

// UI Components
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import {
  Dialog,
  DialogContent,
  DialogTitle,
  DialogDescription,
  DialogHeader,
  DialogFooter, // Added DialogFooter
} from "@/components/ui/dialog"; // Removed Card components as we use divs/structure directly now for more control

import { toast } from "sonner";

// Icons
import {
  Camera,
  Star,
  Loader2,
  ChevronLeft,
  ChevronRight,
  Upload,
  Trash2,
  X, // Icon for closing dialog
} from "lucide-react";

// Types
import type { UserImage } from "@/types/next-auth";

interface PhotosSectionProps {
  images: UserImage[];
  isUploading: boolean; // Note: Changed interpretation, this prop seems external loading state, use internal `isProcessing` for actions within component
  disabled?: boolean;
  maxImages?: number;
  onUpload: (file: File) => Promise<void>;
  onSetMain: (imageId: string) => Promise<void>;
  onDelete: (imageId: string) => Promise<void>;
  // Removed style props as per previous fix request and current design goals
}

const PhotosSection: React.FC<PhotosSectionProps> = ({
  images,
  isUploading: isExternallyUploading, // Renamed to avoid confusion with internal processing state
  disabled = false,
  maxImages = 5,
  onUpload,
  onSetMain,
  onDelete,
}) => {
  // Refs
  const fileInputRef = useRef<HTMLInputElement>(null);

  // State
  const [showImageViewer, setShowImageViewer] = useState(false);
  const [selectedViewerIndex, setSelectedViewerIndex] = useState<number | null>(null);
  const [isProcessing, setIsProcessing] = useState(false); // Internal state for actions like delete, set main
  const [deleteConfirmOpen, setDeleteConfirmOpen] = useState(false);
  const [imageToDelete, setImageToDelete] = useState<string | null>(null);
  const [lastUploadedImageId, setLastUploadedImageId] = useState<string | null>(null); // Track ID instead of index

  // Combined Loading State
  const isLoading = isExternallyUploading || isProcessing;

  // Effect to open viewer for newly uploaded image
  useEffect(() => {
    if (lastUploadedImageId) {
      const newIndex = images.findIndex(img => img.id === lastUploadedImageId);
      if (newIndex !== -1) {
          setSelectedViewerIndex(newIndex);
          setShowImageViewer(true);
      }
      setLastUploadedImageId(null); // Reset tracker
    }
  }, [images, lastUploadedImageId]); // Depend on images array as well

  // --- Event Handlers ---

  const handleFileSelect = async (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (!file) return;

    // Basic Validations (already implemented, kept as is)
    const validTypes = ["image/jpeg", "image/png", "image/jpg", "image/webp"]; // Added webp
    if (!validTypes.includes(file.type)) {
      toast.error("סוג קובץ לא חוקי. יש להעלות JPG, PNG, או WEBP.");
      return;
    }
    const maxSize = 5 * 1024 * 1024; // 5MB
    if (file.size > maxSize) {
      toast.error("הקובץ גדול מדי (מקסימום 5MB).");
      return;
    }

    // Prevent multiple uploads
    if (isLoading) return;

    // Use the external onUpload handler
    try {
      // Note: We don't set isProcessing here, assuming isExternallyUploading reflects the upload state
      await onUpload(file);
      // We need the ID of the new image to track it.
      // Assuming onUpload updates the `images` prop via the parent component,
      // we'll rely on the useEffect to find and show the new image.
      // We need a way to get the ID - this might require adjustment in the parent or API response.
      // For now, we'll assume the parent handles setting the ID correctly and updates `images`.
      // A potential workaround is to find the image added (if only one is added)
      // This is brittle. A better approach is if `onUpload` returns the new image ID.
      // Let's simulate getting the last image ID for the effect hook.
      // This requires the parent component to update `images` prop immediately after upload success.
      // const newImage = images[images.length - 1]; // Risky assumption
      // if (newImage) setLastUploadedImageId(newImage.id);

      toast.success("התמונה הועלתה בהצלחה.");

      // Automatically set as main if it's the very first image
      if (images.length === 0) {
        // Need the ID here too. This logic might need to move to the parent
        // or the API should return the ID for immediate use.
        // Assuming the `images` prop updates quickly after onUpload resolves:
        const newImageId = images.find(img => !img.isMain)?.id; // Find the first non-main, likely the new one
        if (newImageId) {
            await handleSetMainImage(newImageId, false); // Set main without toast
        }
      }

    } catch (error) {
      console.error("Error during upload process:", error);
      // Toast handled by onUpload or here as fallback
      if (!(error instanceof Error && error.message.includes("Toast"))) {
         toast.error("שגיאה בהעלאת התמונה.");
      }
    } finally {
      // Reset file input regardless of success/fail
      if (fileInputRef.current) {
        fileInputRef.current.value = "";
      }
      //setIsProcessing(false); // Only manage internal processing state
    }
  };

  const triggerFileInput = () => {
    if (!isLoading && !disabled && images.length < maxImages) {
      fileInputRef.current?.click();
    }
  };

  const handleImageClick = (index: number) => {
    setSelectedViewerIndex(index);
    setShowImageViewer(true);
  };

  const closeImageViewer = useCallback(() => { // Use useCallback for keydown listener
    setShowImageViewer(false);
    setSelectedViewerIndex(null);
  }, []);

  const handleNextImage = useCallback(() => { // Use useCallback
      setSelectedViewerIndex((prevIndex) => {
          if (prevIndex === null || prevIndex >= images.length - 1) return prevIndex;
          return prevIndex + 1;
      });
  }, [images.length]);

  const handlePreviousImage = useCallback(() => { // Use useCallback
      setSelectedViewerIndex((prevIndex) => {
          if (prevIndex === null || prevIndex <= 0) return prevIndex;
          return prevIndex - 1;
      });
  }, []); // Dependency images.length removed as index check handles boundary


  // Handler for delete confirmation
  const confirmDelete = async () => {
    if (!imageToDelete || isProcessing) return;

    setIsProcessing(true);
    try {
      const imageIndex = images.findIndex((img) => img.id === imageToDelete);
      if (imageIndex === -1) throw new Error("Image not found for deletion.");

      const imageObj = images[imageIndex];

      // If deleting the main image, and there are others, set a new main one
      if (imageObj.isMain && images.length > 1) {
        const nextMainIndex = imageIndex === 0 ? 1 : 0; // Pick first or second
        await onSetMain(images[nextMainIndex].id);
      }

      // Call the external delete handler
      await onDelete(imageToDelete);

      toast.success("התמונה נמחקה בהצלחה.");
      closeImageViewer(); // Close viewer if open
      setDeleteConfirmOpen(false); // Close confirmation dialog
      setImageToDelete(null); // Reset delete target

    } catch (error) {
      console.error("Error deleting image:", error);
      toast.error("שגיאה במחיקת התמונה.");
    } finally {
      setIsProcessing(false);
    }
  };

  // Open confirmation dialog
  const requestDelete = (imageId: string, event?: React.MouseEvent) => {
    event?.stopPropagation(); // Prevent grid click or other triggers
    if (isLoading) return;
    setImageToDelete(imageId);
    setDeleteConfirmOpen(true);
  };


  // Handler for setting main image
  const handleSetMainImage = async (imageId: string, showToast = true, event?: React.MouseEvent) => {
    event?.stopPropagation();
    if (isLoading) return;

    const currentImage = images.find(img => img.id === imageId);
    if (!currentImage || currentImage.isMain) return; // Already main or not found

    setIsProcessing(true);
    try {
      await onSetMain(imageId);
      if (showToast) {
        toast.success("התמונה הראשית עודכנה.");
      }
    } catch (error) {
      console.error("Error setting main image:", error);
      toast.error("שגיאה בעדכון התמונה הראשית.");
    } finally {
      setIsProcessing(false);
    }
  };

   // Prevent event bubbling for controls
   const handleControlClick = (e: React.MouseEvent) => {
    e.stopPropagation();
   };

   // Keyboard navigation for viewer
   useEffect(() => {
    const handleKeyDown = (e: KeyboardEvent) => {
      if (!showImageViewer) return;

      switch (e.key) {
        case "ArrowRight": // Assuming RTL means right arrow goes to PREVIOUS visually (index decreases)
          handlePreviousImage();
          break;
        case "ArrowLeft": // Assuming RTL means left arrow goes to NEXT visually (index increases)
          handleNextImage();
          break;
        case "Escape":
          closeImageViewer();
          break;
      }
    };

    window.addEventListener("keydown", handleKeyDown);
    return () => {
      window.removeEventListener("keydown", handleKeyDown);
    };
  }, [showImageViewer, handlePreviousImage, handleNextImage, closeImageViewer]); // Add dependencies


  // --- Render ---

  return (
    // Inspired Card Structure
    <div dir="rtl" className="bg-white/80 backdrop-blur-lg rounded-3xl shadow-xl p-6 md:p-8">
      {/* Header */}
      <div className="flex flex-col sm:flex-row items-start sm:items-center justify-between mb-6 pb-4 border-b border-gray-200/80">
        <div className="mb-3 sm:mb-0 text-right">
          <h2 className="text-xl font-semibold text-gray-800">תמונות פרופיל</h2>
          <p className="mt-1 text-sm text-gray-600">
            העלה עד {maxImages} תמונות. התמונה הראשית תוצג בכרטיס. (מומלץ: תמונות ברורות של הפנים)
          </p>
        </div>
        {!disabled && (
          <Button
            variant="outline"
            onClick={triggerFileInput}
            disabled={isLoading || images.length >= maxImages}
            className="rounded-full border-2 border-cyan-300 text-cyan-700 hover:bg-cyan-50/50 hover:border-cyan-400 transition-all duration-300 px-5 py-2.5 text-sm font-medium flex items-center gap-2 self-end sm:self-center" // Adjusted padding/text size
          >
            {isExternallyUploading ? ( // Show spinner only for external upload
              <Loader2 className="w-4 h-4 animate-spin" />
            ) : (
              <Upload className="w-4 h-4" />
            )}
            <span>העלאת תמונה</span>
          </Button>
        )}
      </div>

      {/* Input for file selection (hidden) */}
      <input
        type="file"
        ref={fileInputRef}
        className="hidden"
        accept="image/jpeg,image/png,image/jpg,image/webp" // Added webp
        onChange={handleFileSelect}
        disabled={isLoading || disabled || images.length >= maxImages}
      />

      {/* Images Grid */}
      <div className="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-5 gap-4 md:gap-5">
        {/* Render Images */}
        {images.map((image, index) => (
          <div
            key={image.id}
            className="relative group aspect-square rounded-xl overflow-hidden cursor-pointer bg-gray-100 shadow-md hover:shadow-lg transition-all duration-300 ease-in-out"
            onClick={() => handleImageClick(index)}
          >
            <Image
              src={image.url}
              alt={`תמונת פרופיל ${index + 1}`}
              fill
              className="object-cover transition-transform duration-300 group-hover:scale-105"
              sizes="(max-width: 640px) 50vw, (max-width: 768px) 33vw, (max-width: 1024px) 25vw, 20vw"
              priority={index < 2} // Prioritize loading first few images
            />

            {/* Controls Overlay - Always visible, subtle */}
            {!disabled && (
              <div
                className="absolute top-2 right-2 z-10 flex gap-1.5 opacity-85 group-hover:opacity-100 transition-opacity duration-200"
                onClick={handleControlClick} // Prevent triggering image click
              >
                {/* Set Main Button */}
                <Button
                  variant="secondary"
                  size="icon"
                  className={cn(
                    "w-8 h-8 rounded-full shadow-md border border-white/30 bg-black/40 text-white hover:bg-black/60 transition-colors",
                    image.isMain ? "cursor-default" : "hover:text-yellow-300" // Visual cue for main
                  )}
                  onClick={(e) => handleSetMainImage(image.id, true, e)}
                  disabled={image.isMain || isLoading}
                  title={image.isMain ? "תמונה ראשית" : "הפוך לתמונה ראשית"}
                >
                  <Star
                    className={cn(
                      "w-4 h-4 transition-colors",
                      image.isMain ? "text-yellow-400 fill-yellow-400" : "text-white"
                    )}
                  />
                </Button>

                {/* Delete Button */}
                <Button
                  variant="secondary"
                  size="icon"
                  className="w-8 h-8 rounded-full shadow-md border border-white/30 bg-black/40 text-white hover:bg-red-600 hover:border-red-700 transition-colors"
                  onClick={(e) => requestDelete(image.id, e)}
                  disabled={isLoading}
                  title="מחק תמונה"
                >
                  <Trash2 className="w-4 h-4" />
                </Button>
              </div>
            )}

            {/* Main Image Badge */}
            {image.isMain && (
              <Badge className="absolute bottom-2 left-2 rounded-full px-2.5 py-0.5 text-xs font-medium shadow-md text-white bg-gradient-to-r from-cyan-500 to-pink-500 border-none">
                ראשי
              </Badge>
            )}
          </div>
        ))}

        {/* Upload Placeholder */}
        {!disabled && images.length < maxImages && (
          <div
            onClick={triggerFileInput}
            className="flex flex-col items-center justify-center text-center p-4 aspect-square rounded-xl border-2 border-dashed border-cyan-300/70 bg-cyan-50/30 hover:bg-cyan-50/60 hover:border-cyan-400 transition-colors duration-300 cursor-pointer group"
          >
            <Upload className="w-8 h-8 text-cyan-500 mb-2 transition-transform group-hover:scale-110" />
            <span className="text-sm font-medium text-cyan-700">העלאת תמונה</span>
            <span className="text-xs text-cyan-600/90 mt-1">
              עד {maxImages - images.length} נוספות
            </span>
          </div>
        )}
      </div>

      {/* Empty State (if no images and not disabled) */}
      {images.length === 0 && !disabled && (
         <div className="text-center py-16 mt-6 bg-gradient-to-br from-cyan-50/20 to-pink-50/20 rounded-xl border border-dashed border-gray-300">
              <Camera className="w-12 h-12 mx-auto text-gray-400/80" />
              <p className="mt-4 text-gray-600 font-medium">
                אין עדיין תמונות בפרופיל
              </p>
              <p className="text-sm text-gray-500 mt-1 px-4">
                מומלץ להעלות לפחות תמונה אחת ברורה כדי להגדיל את הסיכויים.
              </p>
          </div>
      )}
      {/* Empty State (if disabled and no images) */}
       {images.length === 0 && disabled && (
         <div className="text-center py-16 mt-6 bg-gray-50/50 rounded-xl border border-gray-200">
              <Camera className="w-12 h-12 mx-auto text-gray-400" />
              <p className="mt-4 text-gray-500 font-medium">
                לא הועלו תמונות לפרופיל זה.
              </p>
          </div>
      )}

      {/* Delete Confirmation Dialog */}
      <Dialog open={deleteConfirmOpen} onOpenChange={setDeleteConfirmOpen}>
        <DialogContent className="sm:max-w-md bg-white/95 backdrop-blur-md rounded-2xl shadow-2xl border-none p-6" dir="rtl">
          <DialogHeader>
            <DialogTitle className="text-lg font-semibold text-gray-800">אישור מחיקת תמונה</DialogTitle>
            <DialogDescription className="text-sm text-gray-600 mt-2">
              האם למחוק את התמונה לצמיתות? לא ניתן לשחזר פעולה זו.
            </DialogDescription>
          </DialogHeader>
          <DialogFooter className="mt-6 flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2 sm:space-x-reverse gap-2">
            <Button
              type="button"
              variant="outline"
              onClick={() => setDeleteConfirmOpen(false)}
              disabled={isLoading}
              className="rounded-full px-5"
            >
              ביטול
            </Button>
            <Button
              type="button"
              variant="destructive"
              onClick={confirmDelete}
              disabled={isLoading}
               className="rounded-full px-5"
            >
              {isProcessing ? (
                <Loader2 className="w-4 h-4 ml-2 animate-spin" />
              ) : (
                <Trash2 className="w-4 h-4 ml-2" /> // Keep icon consistent
              )}
              <span>מחק</span>
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>

       {/* Image Viewer Dialog */}
       <Dialog open={showImageViewer} onOpenChange={setShowImageViewer}>
        <DialogContent
            className="p-0 m-0 w-screen h-screen max-w-none sm:max-w-full sm:h-full bg-black/90 backdrop-blur-sm border-none rounded-none flex items-center justify-center outline-none"
            aria-describedby={undefined} // Remove default description link if header is hidden
            >
            {/* Close Button */}
            <Button
                variant="ghost"
                size="icon"
                className="absolute top-4 left-4 z-50 bg-black/40 hover:bg-black/60 text-white rounded-full w-10 h-10 sm:w-12 sm:h-12 transition-colors"
                onClick={closeImageViewer}
                aria-label="סגור תצוגת תמונה"
            >
                <X className="w-6 h-6" />
            </Button>

            {/* Image Display Area */}
            {selectedViewerIndex !== null && images[selectedViewerIndex] && (
                <div className="relative w-full h-full flex items-center justify-center">
                    {/* Image */}
                     <div className="relative w-[95%] h-[85%] sm:w-[90%] sm:h-[90%]">
                        <Image
                            src={images[selectedViewerIndex].url}
                            alt={`תצוגה מוגדלת של תמונה ${selectedViewerIndex + 1}`}
                            fill
                            className="object-contain select-none" // Prevent image selection/drag
                            sizes="90vw" // Simplified sizes for viewer
                            priority // Load the viewed image with high priority
                        />
                    </div>


                    {/* Viewer Controls (Nav + Actions) */}
                    <div className="absolute top-0 left-0 w-full h-full pointer-events-none">
                         {/* Navigation */}
                         {images.length > 1 && (
                            <>
                            {/* Previous Button (Visually Right in RTL) */}
                            <Button
                                variant="ghost"
                                size="icon"
                                className="absolute right-2 sm:right-4 top-1/2 transform -translate-y-1/2 z-40 bg-black/40 hover:bg-black/60 text-white rounded-full w-10 h-10 sm:w-12 sm:h-12 transition-colors pointer-events-auto"
                                onClick={(e) => {e.stopPropagation(); handlePreviousImage();}}
                                disabled={selectedViewerIndex === 0}
                                aria-label="התמונה הקודמת"
                            >
                                <ChevronRight className="w-7 h-7" />
                            </Button>
                             {/* Next Button (Visually Left in RTL) */}
                            <Button
                                variant="ghost"
                                size="icon"
                                className="absolute left-2 sm:left-4 top-1/2 transform -translate-y-1/2 z-40 bg-black/40 hover:bg-black/60 text-white rounded-full w-10 h-10 sm:w-12 sm:h-12 transition-colors pointer-events-auto"
                                onClick={(e) => {e.stopPropagation(); handleNextImage();}}
                                disabled={selectedViewerIndex === images.length - 1}
                                aria-label="התמונה הבאה"
                            >
                                <ChevronLeft className="w-7 h-7" />
                            </Button>
                            </>
                         )}

                        {/* Action Buttons (Top Right) */}
                         {!disabled && (
                            <div className="absolute top-4 right-4 z-50 flex flex-col sm:flex-row gap-2 pointer-events-auto">
                                {/* Set as Main Button */}
                                {!images[selectedViewerIndex].isMain && (
                                <Button
                                    variant="secondary"
                                    className="rounded-full bg-white/70 backdrop-blur-sm shadow-md hover:bg-white/90 text-gray-800 px-3 py-1.5 text-xs sm:text-sm border border-white/20 flex items-center gap-1.5"
                                    onClick={(e) => handleSetMainImage(images[selectedViewerIndex].id, true, e)}
                                    size="sm"
                                    disabled={isLoading}
                                >
                                    <Star className="w-4 h-4" />
                                    <span>הפוך לראשי</span>
                                </Button>
                                )}

                                {/* Delete Button */}
                                <Button
                                    variant="destructive" // Using destructive variant directly
                                    className="rounded-full bg-red-600/80 hover:bg-red-700 text-white px-3 py-1.5 text-xs sm:text-sm shadow-md border-none flex items-center gap-1.5"
                                    onClick={(e) => requestDelete(images[selectedViewerIndex].id, e)}
                                    size="sm"
                                    disabled={isLoading}
                                >
                                    <Trash2 className="w-4 h-4" />
                                    <span>מחק תמונה</span>
                                </Button>
                            </div>
                        )}

                        {/* Counter */}
                        {images.length > 0 && (
                           <div className="absolute bottom-4 left-1/2 transform -translate-x-1/2 bg-black/60 text-white px-3 py-1 rounded-full text-xs sm:text-sm font-medium select-none">
                             {selectedViewerIndex + 1} / {images.length}
                           </div>
                        )}
                    </div>
                 </div>
            )}
        </DialogContent>
       </Dialog>
    </div>
  );
};

export default PhotosSection;



==================================================
Contents of C:\Users\eytan\Desktop\שידוכים\shidduch-system\src\app\components\profile\sections\PreferencesSection.tsx:
==================================================
// src/app/(authenticated)/profile/components/dashboard/PreferencesSection.tsx
"use client";

import React, { useState, useEffect } from "react";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Pencil, Save, X } from "lucide-react";
import { UserProfile } from "@/types/next-auth"; // Assuming Gender is also exported or handled within UserProfile
import { cn } from "@/lib/utils";

interface PreferencesSectionProps {
  profile: UserProfile | null;
  isEditing: boolean;
  viewOnly?: boolean;
  setIsEditing: (value: boolean) => void;
  onChange: (data: Partial<UserProfile>) => void;
}

// Reusable Card component with the new style - Fixed ESLint error
interface StyledCardProps {
  children: React.ReactNode;
}
const StyledCard: React.FC<StyledCardProps> = ({ children }) => (
  <div
    className={cn(
      "bg-white/70 backdrop-blur-md rounded-2xl shadow-lg border border-gray-200/50 p-6 md:p-8 text-right"
    )}
  >
    {children}
  </div>
);

// Reusable Header for Cards
const StyledCardHeader: React.FC<{ title: string; description: string }> = ({
  title,
  description,
}) => (
  // Fixed ESLint error: react/no-unescaped-entities by using template literals
  <div className="mb-6 text-right">
    <h3 className="text-lg md:text-xl font-semibold text-gray-800">{title}</h3>
    <p className="text-sm text-gray-500 mt-1">{description}</p>
  </div>
);

const PreferencesSection: React.FC<PreferencesSectionProps> = ({
  profile,
  isEditing,
  viewOnly = false,
  setIsEditing,
  onChange,
}) => {
  const [formData, setFormData] = useState<Partial<UserProfile>>({});
  const [initialData, setInitialData] = useState<Partial<UserProfile>>({});

  // Effect for handling initial data and profile updates
  useEffect(() => {
    if (profile) {
      const nullToUndefined = <T,>(value: T | null): T | undefined =>
        value === null ? undefined : value;

      // Initialize form data, ensuring nulls become undefined where appropriate,
      // and empty strings remain empty strings for text fields.
      const newFormData: Partial<UserProfile> = {
        ...profile,
        // Numeric fields: convert null to undefined
        preferredAgeMin: nullToUndefined(profile.preferredAgeMin),
        preferredAgeMax: nullToUndefined(profile.preferredAgeMax),
        preferredHeightMin: nullToUndefined(profile.preferredHeightMin),
        preferredHeightMax: nullToUndefined(profile.preferredHeightMax),
        // Assuming height is also numeric or null
        height: profile.height === null ? undefined : profile.height,

        // String fields: convert null to empty string for controlled inputs
        referenceName1: profile.referenceName1 ?? "",
        referencePhone1: profile.referencePhone1 ?? "",
        referenceName2: profile.referenceName2 ?? "",
        referencePhone2: profile.referencePhone2 ?? "",
        matchingNotes: profile.matchingNotes ?? "",
        education: profile.education ?? "",
        occupation: profile.occupation ?? "",

        // Array fields: ensure they are arrays
        preferredLocations: profile.preferredLocations ?? [],
        preferredReligiousLevels: profile.preferredReligiousLevels ?? [],
        preferredEducation: profile.preferredEducation ?? [],
        preferredOccupations: profile.preferredOccupations ?? [],
        // Assuming additionalLanguages is also string[] | null
        additionalLanguages: profile.additionalLanguages ?? [],

        // Enum/Specific types: convert null to undefined
        contactPreference: nullToUndefined(profile.contactPreference),
        // Add other nullable fields here if necessary
      };

      setFormData(newFormData);
      setInitialData(newFormData); // Keep a copy of the initial state
    }
  }, [profile]);

  // Effect for handling edit mode changes
  useEffect(() => {
    if (!isEditing && profile) {
      // Reset only when exiting edit mode AND profile exists
      // Re-apply the initial data logic to reset correctly
      const nullToUndefined = <T,>(value: T | null): T | undefined =>
        value === null ? undefined : value;
      const resetFormData: Partial<UserProfile> = {
        ...profile,
        preferredAgeMin: nullToUndefined(profile.preferredAgeMin),
        preferredAgeMax: nullToUndefined(profile.preferredAgeMax),
        preferredHeightMin: nullToUndefined(profile.preferredHeightMin),
        preferredHeightMax: nullToUndefined(profile.preferredHeightMax),
        height: profile.height === null ? undefined : profile.height,
        referenceName1: profile.referenceName1 ?? "",
        referencePhone1: profile.referencePhone1 ?? "",
        referenceName2: profile.referenceName2 ?? "",
        referencePhone2: profile.referencePhone2 ?? "",
        matchingNotes: profile.matchingNotes ?? "",
        education: profile.education ?? "",
        occupation: profile.occupation ?? "",
        preferredLocations: profile.preferredLocations ?? [],
        preferredReligiousLevels: profile.preferredReligiousLevels ?? [],
        preferredEducation: profile.preferredEducation ?? [],
        preferredOccupations: profile.preferredOccupations ?? [],
        additionalLanguages: profile.additionalLanguages ?? [],
        contactPreference: nullToUndefined(profile.contactPreference),
      };
      setFormData(resetFormData);
    }
  }, [isEditing, profile]); // Depend on profile to ensure it's loaded

  // --- Input Handlers ---

  // Handles changes for standard Input and Textarea elements
  const handleInputChange = (
    e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>
  ) => {
    const { name, value, type } = e.target;
    const field = name as keyof UserProfile;

    setFormData((prev) => {
      let processedValue: string | number | undefined;

      if (type === "number") {
        // For number inputs, parse or set undefined if empty/invalid
        const num = parseInt(value, 10);
        processedValue = isNaN(num) ? undefined : num;
      } else {
        // For text/textarea, use the value directly (can be empty string)
        processedValue = value;
      }

      return {
        ...prev,
        [field]: processedValue,
      };
    });
  };

  // Handles changes for Select components
  const handleSelectChange = (field: keyof UserProfile, value: string) => {
    setFormData((prev) => ({
      ...prev,
      // Set to undefined if the placeholder value "" is selected, otherwise use the value
      [field]: value === "" ? undefined : (value as UserProfile[typeof field]), // Type assertion might be needed based on field
    }));
  };

  // Fixed: This function is now used by multi-select buttons
  // Handles changes for multi-select button groups (toggles value in array)
  const handleMultiSelectChange = (field: keyof UserProfile, value: string) => {
    setFormData((prev) => {
      // Ensure the field exists and is an array, default to empty array if not
      const currentValues =
        (Array.isArray(prev[field]) ? (prev[field] as string[]) : []) ?? [];
      let newValues: string[];

      if (currentValues.includes(value)) {
        // Remove value if it exists
        newValues = currentValues.filter((v) => v !== value);
      } else {
        // Add value if it doesn't exist
        newValues = [...currentValues, value];
      }

      return {
        ...prev,
        [field]: newValues,
      };
    });
  };

  const handleSave = () => {
    // Create a copy to potentially clean up before sending
    const dataToSave: Partial<UserProfile> = { ...formData };

    // Optional: Convert empty strings back to null or undefined based on field type if needed by backend
    // Example:
    // if (dataToSave.matchingNotes === "") {
    //     dataToSave.matchingNotes = null; // Or undefined
    // }

    onChange(dataToSave);
    setIsEditing(false);
    setInitialData(dataToSave); // Update initial data to reflect saved state
  };

  const handleCancel = () => {
    setFormData(initialData); // Reset to last saved/initial state
    setIsEditing(false);
  };

  return (
    <div className="space-y-6 md:space-y-8">
      {/* Edit/Save/Cancel Buttons */}
      {!viewOnly && (
        <div className="flex justify-end gap-3 mb-6">
          {!isEditing ? (
            <Button
              variant="outline"
              onClick={() => setIsEditing(true)}
              className="rounded-full px-5 py-2.5 text-sm border-cyan-300 text-cyan-600 hover:bg-cyan-50 hover:border-cyan-400 transition-all duration-300 shadow-sm hover:shadow-md flex items-center gap-2"
            >
              <Pencil className="w-4 h-4 ml-1" />
              {`עריכה`}
            </Button>
          ) : (
            <>
              <Button
                variant="outline"
                onClick={handleCancel}
                className="rounded-full px-5 py-2.5 text-sm border-gray-300 text-gray-600 hover:bg-gray-50 hover:border-gray-400 transition-all duration-300 shadow-sm hover:shadow-md flex items-center gap-2"
              >
                <X className="w-4 h-4 ml-1" />
                {`ביטול`}
              </Button>
              <Button
                variant="default"
                onClick={handleSave}
                className="rounded-full px-6 py-2.5 text-sm shadow-md hover:shadow-lg transition-all duration-300 flex items-center gap-2 bg-cyan-600 hover:bg-cyan-700 text-white"
              >
                <Save className="w-4 h-4 ml-1" />
                {`שמירה`}
              </Button>
            </>
          )}
        </div>
      )}

      {/* General Description Card */}
      <StyledCard>
        <StyledCardHeader
          title={`תיאור כללי והעדפות קשר`}
          description={`כמה מילים על העדפותיך הכלליות ואופן יצירת הקשר המועדף.`}
        />
        <div className="space-y-6">
          <div>
            <Label
              htmlFor="matchingNotes"
              className="text-gray-700 font-medium block text-right"
            >{`תיאור כללי על המועמד/ת המבוקש/ת`}</Label>
            {isEditing ? (
              <Textarea
                id="matchingNotes"
                name="matchingNotes" // Ensure name matches the key in UserProfile
                value={formData.matchingNotes || ""} // Use controlled component value
                onChange={handleInputChange} // Use unified input handler
                placeholder={`פרט/י על סוג האדם שאת/ה מחפש/ת, תכונות חשובות, ציפיות וכו'...`}
                className="mt-2 min-h-[100px] rounded-lg border-gray-300 focus:border-cyan-500 focus:ring-cyan-500 text-right"
                rows={4}
              />
            ) : (
              <p className="mt-2 whitespace-pre-wrap text-gray-800 bg-gray-50/50 p-3 rounded-lg text-right">
                {formData.matchingNotes || (
                  <span className="text-gray-400 italic">{`לא הוזן תיאור.`}</span>
                )}
              </p>
            )}
          </div>

          <div>
            <Label
              htmlFor="contactPreference"
              className="text-gray-700 font-medium block text-right"
            >{`אופן יצירת קשר מועדף`}</Label>
            {isEditing ? (
              <Select
                dir="rtl"
                name="contactPreference" // Add name for potential form submission (though handled via state here)
                value={formData.contactPreference || ""} // Use empty string for uncontrolled state or placeholder display
                onValueChange={(value: string) =>
                  handleSelectChange("contactPreference", value)
                } // Use unified select handler
              >
                <SelectTrigger
                  id="contactPreference"
                  className="mt-2 rounded-lg border-gray-300 focus:border-cyan-500 focus:ring-cyan-500 text-right"
                >
                  {/* Use placeholder directly in SelectValue */}
                  <SelectValue placeholder={`בחרו אפשרות...`} />
                </SelectTrigger>
                <SelectContent className="rounded-xl">
                  <SelectItem
                    value="direct"
                    className="cursor-pointer text-right"
                  >{`ישירות`}</SelectItem>
                  <SelectItem
                    value="matchmaker"
                    className="cursor-pointer text-right"
                  >{`דרך השדכן/ית`}</SelectItem>
                  <SelectItem
                    value="both"
                    className="cursor-pointer text-right"
                  >{`שתי האפשרויות`}</SelectItem>
                </SelectContent>
              </Select>
            ) : (
              <p className="mt-2 text-gray-800 text-right">
                {(() => {
                  switch (formData.contactPreference) {
                    case "direct":
                      return `ישירות`;
                    case "matchmaker":
                      return `דרך השדכן/ית`;
                    case "both":
                      return `שתי האפשרויות`;
                    default:
                      return (
                        <span className="text-gray-400 italic">{`לא צוין.`}</span>
                      );
                  }
                })()}
              </p>
            )}
          </div>
        </div>
      </StyledCard>

      {/* Age & Height Preferences Card */}
      <StyledCard>
        <StyledCardHeader
          title={`העדפות גיל וגובה`}
          description={`הגדר/י טווחי גיל וגובה רצויים עבור בן/בת הזוג.`}
        />
        <div className="grid grid-cols-1 md:grid-cols-2 gap-x-8 gap-y-6">
          {/* Age Range */}
          <div className="space-y-3">
            <Label className="text-gray-700 font-medium block text-right">{`טווח גילאים מועדף`}</Label>
            <div className="flex items-center gap-3">
              <Input
                type="number"
                name="preferredAgeMin" // Name attribute
                placeholder={`מגיל`}
                aria-label="גיל מינימלי מועדף"
                value={formData.preferredAgeMin ?? ""} // Handle undefined/null correctly
                onChange={handleInputChange} // Use unified handler
                disabled={!isEditing}
                className="rounded-lg border-gray-300 focus:border-cyan-500 focus:ring-cyan-500 disabled:bg-gray-100 text-right"
              />
              <span className="text-gray-500">-</span>
              <Input
                type="number"
                name="preferredAgeMax" // Name attribute
                placeholder={`עד גיל`}
                aria-label="גיל מקסימלי מועדף"
                value={formData.preferredAgeMax ?? ""} // Handle undefined/null correctly
                onChange={handleInputChange} // Use unified handler
                disabled={!isEditing}
                className="rounded-lg border-gray-300 focus:border-cyan-500 focus:ring-cyan-500 disabled:bg-gray-100 text-right"
              />
            </div>
            {!isEditing &&
              !formData.preferredAgeMin &&
              !formData.preferredAgeMax && (
                <p className="text-sm text-gray-400 italic mt-1 text-right">{`לא הוגדר טווח גילאים.`}</p>
              )}
          </div>

          {/* Height Range */}
          <div className="space-y-3">
            <Label className="text-gray-700 font-medium block text-right">{`טווח גבהים מועדף (בס"מ)`}</Label>
            <div className="flex items-center gap-3">
              <Input
                type="number"
                name="preferredHeightMin" // Name attribute
                placeholder={`מ-`}
                aria-label="גובה מינימלי מועדף בסנטימטרים"
                value={formData.preferredHeightMin ?? ""} // Handle undefined/null correctly
                onChange={handleInputChange} // Use unified handler
                disabled={!isEditing}
                className="rounded-lg border-gray-300 focus:border-cyan-500 focus:ring-cyan-500 disabled:bg-gray-100 text-right"
              />
              <span className="text-gray-500">-</span>
              <Input
                type="number"
                name="preferredHeightMax" // Name attribute
                placeholder={`עד-`}
                aria-label="גובה מקסימלי מועדף בסנטימטרים"
                value={formData.preferredHeightMax ?? ""} // Handle undefined/null correctly
                onChange={handleInputChange} // Use unified handler
                disabled={!isEditing}
                className="rounded-lg border-gray-300 focus:border-cyan-500 focus:ring-cyan-500 disabled:bg-gray-100 text-right"
              />
            </div>
            {!isEditing &&
              !formData.preferredHeightMin &&
              !formData.preferredHeightMax && (
                <p className="text-sm text-gray-400 italic mt-1 text-right">{`לא הוגדר טווח גבהים.`}</p>
              )}
          </div>
        </div>
      </StyledCard>

      {/* Location & Religious Preferences Card */}
      <StyledCard>
        <StyledCardHeader
          title={`העדפות מיקום ורמה דתית`}
          description={`בחר/י אזורי מגורים ורמות דתיות שמתאימים לך.`}
        />
        <div className="grid grid-cols-1 md:grid-cols-2 gap-x-8 gap-y-6">
          {/* Preferred Locations */}
          <div className="space-y-3">
            <Label className="text-gray-700 font-medium block text-right">{`אזורי מגורים מועדפים`}</Label>
            <div className="flex flex-wrap justify-end gap-2 mt-2">
              {["צפון", "מרכז", "דרום", "ירושלים", "יהודה ושומרון", 'חו"ל'].map(
                (location) =>
                  isEditing ? (
                    <Button
                      key={location}
                      type="button" // Prevent form submission if inside a form
                      variant={
                        formData.preferredLocations?.includes(location)
                          ? "default"
                          : "outline"
                      }
                      size="sm"
                      // Fixed: Call handleMultiSelectChange
                      onClick={() =>
                        handleMultiSelectChange("preferredLocations", location)
                      }
                      className={cn(
                        "rounded-full transition-all duration-200",
                        formData.preferredLocations?.includes(location)
                          ? "bg-cyan-600 hover:bg-cyan-700 text-white border-cyan-600"
                          : "border-gray-300 text-gray-700 hover:bg-gray-50 hover:border-gray-400"
                      )}
                    >
                      {location}
                    </Button>
                  ) : (
                    // Render badge only if selected in view mode
                    formData.preferredLocations?.includes(location) && (
                      <Badge
                        key={location}
                        variant="secondary"
                        className="rounded-full px-3 py-1 text-sm bg-cyan-100 text-cyan-800"
                      >
                        {location}
                      </Badge>
                    )
                  )
              )}
            </div>
            {!isEditing &&
              (!formData.preferredLocations ||
                formData.preferredLocations.length === 0) && (
                <p className="text-sm text-gray-400 italic mt-1 text-right">{`לא נבחרו אזורי מגורים מועדפים.`}</p>
              )}
          </div>

          {/* Preferred Religious Levels */}
          <div className="space-y-3">
            <Label className="text-gray-700 font-medium block text-right">{`רמות דתיות מועדפות`}</Label>
            <div className="flex flex-wrap justify-end gap-2 mt-2">
              {[
                "חרדי",
                "חרדי מודרני",
                "דתי",
                "דתי-לייט",
                "מסורתי",
                "חילוני",
              ].map((level) =>
                isEditing ? (
                  <Button
                    key={level}
                    type="button"
                    variant={
                      formData.preferredReligiousLevels?.includes(level)
                        ? "default"
                        : "outline"
                    }
                    size="sm"
                    // Fixed: Call handleMultiSelectChange
                    onClick={() =>
                      handleMultiSelectChange("preferredReligiousLevels", level)
                    }
                    className={cn(
                      "rounded-full transition-all duration-200",
                      formData.preferredReligiousLevels?.includes(level)
                        ? "bg-pink-500 hover:bg-pink-600 text-white border-pink-500"
                        : "border-gray-300 text-gray-700 hover:bg-gray-50 hover:border-gray-400"
                    )}
                  >
                    {level}
                  </Button>
                ) : (
                  formData.preferredReligiousLevels?.includes(level) && (
                    <Badge
                      key={level}
                      variant="secondary"
                      className="rounded-full px-3 py-1 text-sm bg-pink-100 text-pink-800"
                    >
                      {level}
                    </Badge>
                  )
                )
              )}
            </div>
            {!isEditing &&
              (!formData.preferredReligiousLevels ||
                formData.preferredReligiousLevels.length === 0) && (
                <p className="text-sm text-gray-400 italic mt-1 text-right">{`לא נבחרו רמות דתיות מועדפות.`}</p>
              )}
          </div>
        </div>
      </StyledCard>

      {/* Education & Occupation Preferences Card */}
      <StyledCard>
        <StyledCardHeader
          title={`העדפות השכלה ותעסוקה`}
          description={`בחר/י את רמות ההשכלה ותחומי העיסוק המועדפים עליך.`}
        />
        <div className="grid grid-cols-1 md:grid-cols-2 gap-x-8 gap-y-6">
          {/* Preferred Education */}
          <div className="space-y-3">
            <Label className="text-gray-700 font-medium block text-right">{`רמות השכלה מועדפות`}</Label>
            <div className="flex flex-wrap justify-end gap-2 mt-2">
              {["תיכונית", "על תיכונית", "אקדמית", "תורנית", "ללא העדפה"].map(
                (education) =>
                  isEditing ? (
                    <Button
                      key={education}
                      type="button"
                      variant={
                        formData.preferredEducation?.includes(education)
                          ? "default"
                          : "outline"
                      }
                      size="sm"
                      // Fixed: Call handleMultiSelectChange
                      onClick={() =>
                        handleMultiSelectChange("preferredEducation", education)
                      }
                      className={cn(
                        "rounded-full transition-all duration-200",
                        formData.preferredEducation?.includes(education)
                          ? "bg-cyan-600 hover:bg-cyan-700 text-white border-cyan-600"
                          : "border-gray-300 text-gray-700 hover:bg-gray-50 hover:border-gray-400"
                      )}
                    >
                      {education}
                    </Button>
                  ) : (
                    formData.preferredEducation?.includes(education) && (
                      <Badge
                        key={education}
                        variant="secondary"
                        className="rounded-full px-3 py-1 text-sm bg-cyan-100 text-cyan-800"
                      >
                        {education}
                      </Badge>
                    )
                  )
              )}
            </div>
            {!isEditing &&
              (!formData.preferredEducation ||
                formData.preferredEducation.length === 0) && (
                <p className="text-sm text-gray-400 italic mt-1 text-right">{`לא נבחרו רמות השכלה מועדפות.`}</p>
              )}
          </div>

          {/* Preferred Occupations */}
          <div className="space-y-3">
            <Label className="text-gray-700 font-medium block text-right">{`תחומי עיסוק מועדפים`}</Label>
            <div className="flex flex-wrap justify-end gap-2 mt-2">
              {[
                "עובד/ת",
                "סטודנט/ית",
                "אברך/כולל",
                "עצמאי/ת",
                "שירות צבאי/לאומי",
                "ללא העדפה",
              ].map((occupation) =>
                isEditing ? (
                  <Button
                    key={occupation}
                    type="button"
                    variant={
                      formData.preferredOccupations?.includes(occupation)
                        ? "default"
                        : "outline"
                    }
                    size="sm"
                    // Fixed: Call handleMultiSelectChange
                    onClick={() =>
                      handleMultiSelectChange(
                        "preferredOccupations",
                        occupation
                      )
                    }
                    className={cn(
                      "rounded-full transition-all duration-200",
                      formData.preferredOccupations?.includes(occupation)
                        ? "bg-pink-500 hover:bg-pink-600 text-white border-pink-500"
                        : "border-gray-300 text-gray-700 hover:bg-gray-50 hover:border-gray-400"
                    )}
                  >
                    {occupation}
                  </Button>
                ) : (
                  formData.preferredOccupations?.includes(occupation) && (
                    <Badge
                      key={occupation}
                      variant="secondary"
                      className="rounded-full px-3 py-1 text-sm bg-pink-100 text-pink-800"
                    >
                      {occupation}
                    </Badge>
                  )
                )
              )}
            </div>
            {!isEditing &&
              (!formData.preferredOccupations ||
                formData.preferredOccupations.length === 0) && (
                <p className="text-sm text-gray-400 italic mt-1 text-right">{`לא נבחרו תחומי עיסוק מועדפים.`}</p>
              )}
          </div>
        </div>
      </StyledCard>
    </div>
  );
};

export default PreferencesSection;


==================================================
Contents of C:\Users\eytan\Desktop\שידוכים\shidduch-system\src\app\components\profile\sections\ProfileSection.tsx:
==================================================
"use client";

import React, { useState, useEffect } from "react";
import { Gender, AvailabilityStatus } from "@prisma/client";
import { Card, CardHeader, CardTitle, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Switch } from "@/components/ui/switch";
import { Pencil, Save, X } from "lucide-react";
import { UserProfile } from "@/types/next-auth";
import { cn } from "@/lib/utils"; // הוספת cn לשילוב classNames

const languageOptions = [
  // שפות נפוצות
  { value: "hebrew", label: "עברית" },
  { value: "english", label: "אנגלית" },
  { value: "yiddish", label: "יידיש" },
  { value: "russian", label: "רוסית" },
  { value: "arabic", label: "ערבית" },
  { value: "french", label: "צרפתית" },
  // שאר השפות לפי א-ב
  { value: "amharic", label: "אמהרית" },
  { value: "italian", label: "איטלקית" },
  { value: "ukrainian", label: "אוקראינית" },
  { value: "spanish", label: "ספרדית" },
  { value: "portuguese", label: "פורטוגזית" },
  { value: "persian", label: "פרסית" },
  { value: "polish", label: "פולנית" },
  { value: "chinese", label: "סינית" },
  { value: "german", label: "גרמנית" },
  { value: "georgian", label: "גאורגית" },
  { value: "dutch", label: "הולנדית" },
  { value: "hungarian", label: "הונגרית" },
  { value: "turkish", label: "טורקית" },
  { value: "ladino", label: "לדינו" },
  { value: "romanian", label: "רומנית" },
];

interface ProfileSectionProps {
  profile: UserProfile | null;
  isEditing: boolean;
  setIsEditing: (value: boolean) => void;
  viewOnly?: boolean;
  onSave: (data: Partial<UserProfile>) => void;
}

const ProfileSection: React.FC<ProfileSectionProps> = ({
  profile,
  isEditing,
  setIsEditing,
  viewOnly = false,
  onSave,
}) => {
  const [formData, setFormData] = useState<Partial<UserProfile>>({});
  const [loading, setLoading] = useState(true);
  const [initialData, setInitialData] = useState<Partial<UserProfile>>({});

  // ---- לוגיקת טעינה ועדכון נתונים (עם תיקון number | undefined) ----
  const fetchProfile = async () => {
    try {
      const response = await fetch("/api/profile");
      const data = await response.json();
      if (data.success && data.profile) {
        const profileData = {
          gender: data.profile.gender || undefined,
          birthDate: data.profile.birthDate || undefined,
          nativeLanguage: data.profile.nativeLanguage || undefined,
          additionalLanguages: data.profile.additionalLanguages || [],
          height: data.profile.height ?? undefined, // תוקן ל-undefined
          maritalStatus: data.profile.maritalStatus || undefined,
          occupation: data.profile.occupation || undefined,
          education: data.profile.education || undefined,
          religiousLevel: data.profile.religiousLevel || undefined,
          address: data.profile.address || undefined,
          city: data.profile.city || undefined,
          origin: data.profile.origin || undefined,
          parentStatus: data.profile.parentStatus || undefined,
          siblings: data.profile.siblings ?? undefined, // תוקן ל-undefined
          position: data.profile.position ?? undefined, // תוקן ל-undefined
          referenceName1: data.profile.referenceName1 || undefined,
          referencePhone1: data.profile.referencePhone1 || undefined,
          referenceName2: data.profile.referenceName2 || undefined,
          referencePhone2: data.profile.referencePhone2 || undefined,
          isProfileVisible: data.profile.isProfileVisible ?? true,
          preferredMatchmakerGender:
            data.profile.preferredMatchmakerGender || undefined,
          availabilityStatus: data.profile.availabilityStatus || "AVAILABLE",
          availabilityNote: data.profile.availabilityNote || undefined,
          about: data.profile.about || undefined,
          hobbies: data.profile.hobbies || undefined,
        };
        setFormData(profileData);
        setInitialData(profileData);
      }
    } catch (error) {
      console.error("Failed to fetch profile:", error);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchProfile();
  }, []);

  useEffect(() => {
    if (profile) {
      setFormData((prevFormData: Partial<UserProfile>) => {
        const mergedData: Partial<UserProfile> = {
          ...prevFormData, // Start with existing form data
          ...profile, // Override with incoming profile prop values
          gender: profile.gender || prevFormData.gender || undefined,
          birthDate: profile.birthDate || prevFormData.birthDate || undefined,
          nativeLanguage:
            profile.nativeLanguage || prevFormData.nativeLanguage || undefined,
          additionalLanguages:
            profile.additionalLanguages ||
            prevFormData.additionalLanguages ||
            [],
          // Ensure numeric fields use ?? and end with undefined
          height: profile.height ?? prevFormData.height ?? undefined,
          maritalStatus:
            profile.maritalStatus || prevFormData.maritalStatus || undefined,
          occupation:
            profile.occupation || prevFormData.occupation || undefined,
          education: profile.education || prevFormData.education || undefined,
          religiousLevel:
            profile.religiousLevel || prevFormData.religiousLevel || undefined,
          address: profile.address || prevFormData.address || undefined,
          city: profile.city || prevFormData.city || undefined,
          origin: profile.origin || prevFormData.origin || undefined,
          parentStatus:
            profile.parentStatus || prevFormData.parentStatus || undefined,
          // Ensure numeric fields use ?? and end with undefined
          siblings: profile.siblings ?? prevFormData.siblings ?? undefined,
          position: profile.position ?? prevFormData.position ?? undefined,
          referenceName1:
            profile.referenceName1 || prevFormData.referenceName1 || undefined,
          referencePhone1:
            profile.referencePhone1 ||
            prevFormData.referencePhone1 ||
            undefined,
          referenceName2:
            profile.referenceName2 || prevFormData.referenceName2 || undefined,
          referencePhone2:
            profile.referencePhone2 ||
            prevFormData.referencePhone2 ||
            undefined,
          isProfileVisible:
            profile.isProfileVisible ?? prevFormData.isProfileVisible ?? true,
          preferredMatchmakerGender:
            profile.preferredMatchmakerGender ||
            prevFormData.preferredMatchmakerGender ||
            undefined,
          availabilityStatus:
            profile.availabilityStatus ||
            prevFormData.availabilityStatus ||
            "AVAILABLE",
          availabilityNote:
            profile.availabilityNote ||
            prevFormData.availabilityNote ||
            undefined,
          about: profile.about || prevFormData.about || undefined,
          hobbies: profile.hobbies || prevFormData.hobbies || undefined,
        };
        // Update initialData only if mergedData is different
        setInitialData((prevInitial) => {
          if (JSON.stringify(prevInitial) !== JSON.stringify(mergedData)) {
            return mergedData;
          }
          return prevInitial;
        });
        return mergedData;
      });
    }
  }, [profile]);

  // --- לוגיקת שינוי ערכים (עם תיקון number | undefined), שמירה וביטול ---
  const handleChange = (
    field: keyof UserProfile,
    value: UserProfile[keyof UserProfile]
  ) => {
    if (field === "height" || field === "siblings" || field === "position") {
      const rawValue = value as string; // Input value is always string
      let finalValue: number | undefined = undefined; // Default to undefined

      // Try parsing only if the string is not empty
      if (rawValue && rawValue.trim() !== "") {
        const parsed = parseInt(rawValue, 10);
        // Assign the number only if parsing was successful (not NaN)
        if (!isNaN(parsed)) {
          finalValue = parsed;
        }
        // If parsing failed (NaN), finalValue remains undefined
      }
      // If the string was empty, finalValue remains undefined

      setFormData((prev) => ({
        ...prev,
        [field]: finalValue, // Assign the number or undefined
      }));
    } else {
      setFormData((prev) => ({
        ...prev,
        [field]: value,
      }));
    }
  };

  const handleSave = () => {
    onSave(formData);
    setIsEditing(false);
    setInitialData(formData); // Update initialData after successful save
  };

  const handleCancel = () => {
    setFormData(initialData); // Revert to the initial data before editing started
    setIsEditing(false);
  };

  if (loading) {
    return <div className="text-center p-4">טוען...</div>;
  }

  // --- רנדור הקומפוננטה עם העיצוב המעודכן ---
  return (
    <div className="relative" dir="rtl">
      {/* כותרת דביקה מעוצבת */}
      <div className="sticky top-0 z-40 bg-white/80 backdrop-blur-lg border-b border-gray-200/50">
        {/* הוספתי z-40 כדי שיהיה מתחת ל-z-50 פוטנציאלי */}
        <div className="container mx-auto py-3 px-4">
          <div className="flex items-center justify-between">
            <div>
              <h1 className="text-lg md:text-xl font-semibold text-gray-800">
                פרופיל משתמש
              </h1>
              <p className="text-xs md:text-sm text-gray-500">
                נהל את פרטי הפרופיל שלך
              </p>
            </div>
            {!viewOnly && (
              <div className="flex gap-2">
                {!isEditing ? (
                  <Button
                    variant="outline"
                    size="sm" // הקטנת כפתורים להתאמה
                    onClick={() => setIsEditing(true)}
                    className="rounded-full shadow-sm hover:shadow-md transition-all duration-300 border-cyan-300 text-cyan-600 hover:bg-cyan-50"
                  >
                    <Pencil className="w-3.5 h-3.5 ml-1.5" />
                    עריכה
                  </Button>
                ) : (
                  <>
                    <Button
                      variant="outline"
                      size="sm"
                      onClick={handleCancel}
                      className="rounded-full shadow-sm hover:shadow-md transition-all duration-300 border-gray-300 text-gray-700 hover:bg-gray-50"
                    >
                      <X className="w-3.5 h-3.5 ml-1.5" />
                      ביטול
                    </Button>
                    <Button
                      variant="default"
                      size="sm"
                      onClick={handleSave}
                      className="rounded-full shadow-sm hover:shadow-md transition-all duration-300 bg-cyan-600 hover:bg-cyan-700 text-white"
                    >
                      <Save className="w-3.5 h-3.5 ml-1.5" />
                      שמירה
                    </Button>
                  </>
                )}
              </div>
            )}
          </div>
        </div>
      </div>

      {/* קונטיינר ראשי עם ריווח */}
      <div className="container mx-auto py-6 px-4 space-y-6">
        {/* --- פרטים אישיים --- */}
        <Card className="bg-white/70 backdrop-blur-md rounded-2xl shadow-lg border border-gray-200/30 overflow-hidden">
          <CardHeader className="bg-gradient-to-r from-cyan-50/30 to-pink-50/30 border-b border-gray-200/50 p-4">
            <CardTitle className="text-base font-semibold text-gray-700">
              פרטים אישיים
            </CardTitle>
            {/* <CardDescription className="text-xs text-gray-500">מידע בסיסי</CardDescription> */}
          </CardHeader>
          <CardContent className="p-4 md:p-6">
            <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-x-4 gap-y-5">
              {/* מגדר */}
              <div>
                <Label className="block mb-1.5 text-xs font-medium text-gray-600">
                  מגדר
                </Label>
                <Select
                  value={formData.gender || ""}
                  onValueChange={(value) =>
                    handleChange("gender", value as Gender)
                  }
                  disabled={!isEditing}
                >
                  <SelectTrigger className="h-9 text-xs focus:ring-cyan-500">
                    <SelectValue placeholder="בחר מגדר" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="MALE">זכר</SelectItem>
                    <SelectItem value="FEMALE">נקבה</SelectItem>
                  </SelectContent>
                </Select>
              </div>

              {/* תאריך לידה */}
              <div>
                <Label className="block mb-1.5 text-xs font-medium text-gray-600">
                  תאריך לידה
                </Label>
                <Input
                  type="date"
                  value={
                    formData.birthDate instanceof Date &&
                    !isNaN(formData.birthDate.getTime())
                      ? formData.birthDate.toISOString().split("T")[0]
                      : ""
                  }
                  onChange={(e) => {
                    const date = new Date(e.target.value);
                    handleChange(
                      "birthDate",
                      !isNaN(date.getTime()) ? date : undefined
                    );
                  }}
                  disabled={!isEditing}
                  className="h-9 text-xs focus:ring-cyan-500"
                  max={new Date().toISOString().split("T")[0]} // Prevent future dates
                />
              </div>

              {/* שפת אם */}
              <div>
                <Label className="block mb-1.5 text-xs font-medium text-gray-600">
                  שפת אם
                </Label>
                <Select
                  value={formData.nativeLanguage || ""}
                  onValueChange={(value) =>
                    handleChange("nativeLanguage", value)
                  }
                  disabled={!isEditing}
                >
                  <SelectTrigger className="h-9 text-xs focus:ring-cyan-500">
                    <SelectValue placeholder="בחר שפת אם" />
                  </SelectTrigger>
                  <SelectContent className="max-h-[250px]">
                    {languageOptions.map((lang) => (
                      <SelectItem key={lang.value} value={lang.value}>
                        {lang.label}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>

              {/* שפות נוספות */}
              <div className="sm:col-span-2 lg:col-span-1">
                <Label className="block mb-1.5 text-xs font-medium text-gray-600">
                  שפות נוספות
                </Label>
                <Select
                  onValueChange={(value) => {
                    const currentLanguages = formData.additionalLanguages || [];
                    const newLanguages = currentLanguages.includes(value)
                      ? currentLanguages.filter((lang) => lang !== value)
                      : [...currentLanguages, value];
                    handleChange("additionalLanguages", newLanguages);
                  }}
                  disabled={!isEditing}
                >
                  <SelectTrigger className="h-9 text-xs focus:ring-cyan-500">
                    <SelectValue placeholder="בחר / הסר שפות" />
                  </SelectTrigger>
                  <SelectContent className="max-h-[250px] overflow-y-auto">
                    {languageOptions.map((lang) => (
                      <SelectItem
                        key={lang.value}
                        value={lang.value}
                        className={cn(
                          "cursor-pointer text-xs",
                          formData.additionalLanguages?.includes(lang.value)
                            ? "bg-cyan-50 font-medium"
                            : ""
                        )}
                      >
                        {lang.label}
                        {formData.additionalLanguages?.includes(lang.value) && (
                          <span className="mr-2">✓</span>
                        )}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
                <div className="mt-2 flex flex-wrap gap-1.5">
                  {(formData.additionalLanguages || []).map((langValue) => {
                    const lang = languageOptions.find(
                      (l) => l.value === langValue
                    );
                    return lang ? (
                      <span
                        key={lang.value}
                        className="bg-cyan-100/60 text-cyan-800 px-2 py-0.5 rounded-full text-[10px] font-medium flex items-center"
                      >
                        {lang.label}
                        {isEditing && (
                          <button
                            type="button" // Prevent form submission if inside a form
                            onClick={() => {
                              const newLanguages =
                                formData.additionalLanguages?.filter(
                                  (l) => l !== langValue
                                ) || [];
                              handleChange("additionalLanguages", newLanguages);
                            }}
                            className="mr-1 text-cyan-600 hover:text-cyan-800 text-xs"
                            aria-label={`הסר ${lang.label}`}
                          >
                            ×
                          </button>
                        )}
                      </span>
                    ) : null;
                  })}
                </div>
              </div>

              {/* גובה */}
              <div>
                <Label className="block mb-1.5 text-xs font-medium text-gray-600">
                  גובה (סמ)
                </Label>
                <Input
                  type="number"
                  value={formData.height ?? ""} // Use ?? for undefined as well
                  onChange={(e) => handleChange("height", e.target.value)}
                  disabled={!isEditing}
                  className="h-9 text-xs focus:ring-cyan-500"
                  placeholder="גובה בסמ"
                  min="100"
                  max="250"
                />
              </div>

              {/* מצב משפחתי */}
              <div>
                <Label className="block mb-1.5 text-xs font-medium text-gray-600">
                  מצב משפחתי
                </Label>
                <Select
                  value={formData.maritalStatus || ""}
                  onValueChange={(value) =>
                    handleChange("maritalStatus", value)
                  }
                  disabled={!isEditing}
                >
                  <SelectTrigger className="h-9 text-xs focus:ring-cyan-500">
                    <SelectValue placeholder="בחר מצב" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="single">רווק/ה</SelectItem>
                    <SelectItem value="divorced">גרוש/ה</SelectItem>
                    <SelectItem value="widowed">אלמן/ה</SelectItem>
                  </SelectContent>
                </Select>
              </div>

              {/* תעסוקה */}
              <div>
                <Label className="block mb-1.5 text-xs font-medium text-gray-600">
                  תעסוקה
                </Label>
                <Input
                  value={formData.occupation || ""}
                  onChange={(e) => handleChange("occupation", e.target.value)}
                  disabled={!isEditing}
                  placeholder="תעסוקה נוכחית"
                  className="h-9 text-xs focus:ring-cyan-500"
                />
              </div>

              {/* השכלה */}
              <div>
                <Label className="block mb-1.5 text-xs font-medium text-gray-600">
                  השכלה
                </Label>
                <Input
                  value={formData.education || ""}
                  onChange={(e) => handleChange("education", e.target.value)}
                  disabled={!isEditing}
                  placeholder="השכלה"
                  className="h-9 text-xs focus:ring-cyan-500"
                />
              </div>

              {/* רמת דתיות */}
              <div>
                <Label className="block mb-1.5 text-xs font-medium text-gray-600">
                  רמה דתית
                </Label>
                <Select
                  value={formData.religiousLevel || ""}
                  onValueChange={(value) =>
                    handleChange("religiousLevel", value)
                  }
                  disabled={!isEditing}
                >
                  <SelectTrigger className="h-9 text-xs focus:ring-cyan-500">
                    <SelectValue placeholder="בחר רמה" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="חרדי">חרדי</SelectItem>
                    <SelectItem value="חרדי מודרני">חרדי מודרני</SelectItem>
                    <SelectItem value="דתי">דתי</SelectItem>
                    <SelectItem value="דתי-לייט">דתי-לייט</SelectItem>
                    <SelectItem value="מסורתי">מסורתי</SelectItem>
                  </SelectContent>
                </Select>
              </div>

              {/* כתובת */}
              <div>
                <Label className="block mb-1.5 text-xs font-medium text-gray-600">
                  כתובת
                </Label>
                <Input
                  value={formData.address || ""}
                  onChange={(e) => handleChange("address", e.target.value)}
                  disabled={!isEditing}
                  placeholder="כתובת מגורים"
                  className="h-9 text-xs focus:ring-cyan-500"
                />
              </div>

              {/* עיר */}
              <div>
                <Label className="block mb-1.5 text-xs font-medium text-gray-600">
                  עיר
                </Label>
                <Input
                  value={formData.city || ""}
                  onChange={(e) => handleChange("city", e.target.value)}
                  disabled={!isEditing}
                  placeholder="עיר מגורים"
                  className="h-9 text-xs focus:ring-cyan-500"
                />
              </div>

              {/* מוצא */}
              <div>
                <Label className="block mb-1.5 text-xs font-medium text-gray-600">
                  מוצא / עדה
                </Label>
                <Input
                  value={formData.origin || ""}
                  onChange={(e) => handleChange("origin", e.target.value)}
                  disabled={!isEditing}
                  placeholder="ארץ מוצא / עדה"
                  className="h-9 text-xs focus:ring-cyan-500"
                />
              </div>
            </div>
          </CardContent>
        </Card>

        {/* --- מידע משפחתי --- */}
        <Card className="bg-white/70 backdrop-blur-md rounded-2xl shadow-lg border border-gray-200/30 overflow-hidden">
          <CardHeader className="bg-gradient-to-r from-cyan-50/30 to-pink-50/30 border-b border-gray-200/50 p-4">
            <CardTitle className="text-base font-semibold text-gray-700">
              מידע משפחתי
            </CardTitle>
          </CardHeader>
          <CardContent className="p-4 md:p-6">
            <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-x-4 gap-y-5">
              <div>
                <Label className="block mb-1.5 text-xs font-medium text-gray-600">
                  מצב הורים
                </Label>
                <Select
                  value={formData.parentStatus || ""}
                  onValueChange={(value) => handleChange("parentStatus", value)}
                  disabled={!isEditing}
                >
                  <SelectTrigger className="h-9 text-xs focus:ring-cyan-500">
                    <SelectValue placeholder="בחר מצב" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="נשואים">נשואים</SelectItem>
                    <SelectItem value="גרושים">גרושים</SelectItem>
                    <SelectItem value="אלמן">אלמן</SelectItem>
                    <SelectItem value="אלמנה">אלמנה</SelectItem>
                    {/* אפשר להוסיף עוד אופציות לפי הצורך */}
                  </SelectContent>
                </Select>
              </div>

              <div>
                <Label className="block mb-1.5 text-xs font-medium text-gray-600">
                  מספר אחים/יות
                </Label>
                <Input
                  type="number"
                  value={formData.siblings ?? ""}
                  onChange={(e) => handleChange("siblings", e.target.value)}
                  disabled={!isEditing}
                  className="h-9 text-xs focus:ring-cyan-500"
                  placeholder="מספר כולל"
                  min="0"
                />
              </div>

              <div>
                <Label className="block mb-1.5 text-xs font-medium text-gray-600">
                  מיקום במשפחה
                </Label>
                <Input
                  type="number"
                  value={formData.position ?? ""}
                  onChange={(e) => handleChange("position", e.target.value)}
                  disabled={!isEditing}
                  className="h-9 text-xs focus:ring-cyan-500"
                  placeholder="מיקום (1 = בכור)"
                  min="1"
                />
              </div>
            </div>
          </CardContent>
        </Card>

        {/* --- ממליצים --- */}
        <Card className="bg-white/70 backdrop-blur-md rounded-2xl shadow-lg border border-gray-200/30 overflow-hidden">
          <CardHeader className="bg-gradient-to-r from-cyan-50/30 to-pink-50/30 border-b border-gray-200/50 p-4">
            <CardTitle className="text-base font-semibold text-gray-700">
              ממליצים
            </CardTitle>
          </CardHeader>
          <CardContent className="p-4 md:p-6">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-x-6 gap-y-5">
              {/* ממליץ 1 */}
              <div className="space-y-4">
                <div>
                  <Label className="block mb-1.5 text-xs font-medium text-gray-600">
                    שם ממליץ/ה 1
                  </Label>
                  <Input
                    value={formData.referenceName1 || ""}
                    onChange={(e) =>
                      handleChange("referenceName1", e.target.value)
                    }
                    disabled={!isEditing}
                    placeholder="שם מלא"
                    className="h-9 text-xs focus:ring-cyan-500"
                  />
                </div>
                <div>
                  <Label className="block mb-1.5 text-xs font-medium text-gray-600">
                    טלפון ממליץ/ה 1
                  </Label>
                  <Input
                    type="tel" // Use type="tel" for phone numbers
                    value={formData.referencePhone1 || ""}
                    onChange={(e) =>
                      handleChange("referencePhone1", e.target.value)
                    }
                    disabled={!isEditing}
                    placeholder="מספר טלפון"
                    className="h-9 text-xs focus:ring-cyan-500"
                  />
                </div>
              </div>

              {/* ממליץ 2 */}
              <div className="space-y-4">
                <div>
                  <Label className="block mb-1.5 text-xs font-medium text-gray-600">
                    שם ממליץ/ה 2
                  </Label>
                  <Input
                    value={formData.referenceName2 || ""}
                    onChange={(e) =>
                      handleChange("referenceName2", e.target.value)
                    }
                    disabled={!isEditing}
                    placeholder="שם מלא"
                    className="h-9 text-xs focus:ring-cyan-500"
                  />
                </div>
                <div>
                  <Label className="block mb-1.5 text-xs font-medium text-gray-600">
                    טלפון ממליץ/ה 2
                  </Label>
                  <Input
                    type="tel"
                    value={formData.referencePhone2 || ""}
                    onChange={(e) =>
                      handleChange("referencePhone2", e.target.value)
                    }
                    disabled={!isEditing}
                    placeholder="מספר טלפון"
                    className="h-9 text-xs focus:ring-cyan-500"
                  />
                </div>
              </div>
            </div>
          </CardContent>
        </Card>

        {/* --- הגדרות פרופיל --- */}
        <Card className="bg-white/70 backdrop-blur-md rounded-2xl shadow-lg border border-gray-200/30 overflow-hidden">
          <CardHeader className="bg-gradient-to-r from-cyan-50/30 to-pink-50/30 border-b border-gray-200/50 p-4">
            <CardTitle className="text-base font-semibold text-gray-700">
              הגדרות פרופיל
            </CardTitle>
          </CardHeader>
          <CardContent className="p-4 md:p-6">
            <div className="space-y-6">
              {/* נראות פרופיל */}
              <div className="flex items-center justify-between gap-4 border-b border-gray-200/50 pb-4">
                <div>
                  <Label className="font-medium text-sm text-gray-700">
                    הצג פרופיל למשדכים
                  </Label>
                  <p className="text-xs text-gray-500 mt-0.5">
                    האם לאפשר למשדכים לצפות בפרופיל שלך
                  </p>
                </div>
                <Switch
                  checked={formData.isProfileVisible ?? true}
                  onCheckedChange={(checked) =>
                    handleChange("isProfileVisible", checked)
                  }
                  disabled={!isEditing}
                />
              </div>

              {/* מגדר שדכן מועדף */}
              <div>
                <Label className="block mb-1.5 text-xs font-medium text-gray-600">
                  מגדר שדכן/ית מועדף
                </Label>
                <Select
                  value={formData.preferredMatchmakerGender || ""}
                  onValueChange={(value) =>
                    handleChange("preferredMatchmakerGender", value as Gender)
                  }
                  disabled={!isEditing}
                >
                  <SelectTrigger className="h-9 text-xs focus:ring-cyan-500">
                    <SelectValue placeholder="בחר העדפה (לא חובה)" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="MALE">משדך</SelectItem>
                    <SelectItem value="FEMALE">שדכנית</SelectItem>
                    <SelectItem value="NONE">ללא העדפה</SelectItem>{" "}
                  </SelectContent>
                </Select>
              </div>

              {/* סטטוס זמינות */}
              <div>
                <Label className="block mb-1.5 text-xs font-medium text-gray-600">
                  סטטוס פניות
                </Label>
                <Select
                  value={formData.availabilityStatus || "AVAILABLE"}
                  onValueChange={(value) =>
                    handleChange(
                      "availabilityStatus",
                      value as AvailabilityStatus
                    )
                  }
                  disabled={!isEditing}
                >
                  <SelectTrigger className="h-9 text-xs focus:ring-cyan-500">
                    <SelectValue placeholder="בחר סטטוס" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="AVAILABLE">פנוי/ה</SelectItem>
                    <SelectItem value="UNAVAILABLE">לא פנוי/ה</SelectItem>
                    <SelectItem value="DATING">בתהליך היכרות</SelectItem>
                    <SelectItem value="ENGAGED">מאורס/ת</SelectItem>
                    <SelectItem value="MARRIED">נשוי/אה</SelectItem>
                  </SelectContent>
                </Select>
              </div>

              {/* הערת זמינות */}
              <div>
                <Label className="block mb-1.5 text-xs font-medium text-gray-600">
                  הערת פניות (אופציונלי)
                </Label>
                <Textarea
                  value={formData.availabilityNote || ""}
                  onChange={(e) =>
                    handleChange("availabilityNote", e.target.value)
                  }
                  disabled={!isEditing}
                  placeholder="הערה קצרה לגבי הסטטוס..."
                  className="text-xs focus:ring-cyan-500 min-h-[60px]"
                  rows={2}
                />
              </div>

              {/* תיאור אישי */}
              <div className="border-t border-gray-200/50 pt-4 space-y-1.5">
                <Label className="block text-sm font-medium text-gray-700">
                  קצת עלי
                </Label>
                {isEditing ? (
                  <Textarea
                    value={formData.about || ""}
                    onChange={(e) => handleChange("about", e.target.value)}
                    className="text-xs focus:ring-cyan-500 min-h-[100px]"
                    placeholder="ספר/י קצת על עצמך, השקפה, תכונות..."
                    rows={4}
                  />
                ) : (
                  <p className="mt-1 text-xs text-gray-600 whitespace-pre-wrap min-h-[40px]">
                    {formData.about || (
                      <span className="text-gray-400 italic">
                        אין תיאור אישי
                      </span>
                    )}
                  </p>
                )}
              </div>

              {/* תחביבים */}
              <div className="border-t border-gray-200/50 pt-4 space-y-1.5">
                <Label className="block text-sm font-medium text-gray-700">
                  תחביבים ופנאי
                </Label>
                {isEditing ? (
                  <Textarea
                    value={formData.hobbies || ""}
                    onChange={(e) => handleChange("hobbies", e.target.value)}
                    className="text-xs focus:ring-cyan-500 min-h-[80px]"
                    placeholder="מה את/ה אוהב/ת לעשות בזמן הפנוי?"
                    rows={3}
                  />
                ) : (
                  <p className="mt-1 text-xs text-gray-600 whitespace-pre-wrap min-h-[40px]">
                    {formData.hobbies || (
                      <span className="text-gray-400 italic">
                        לא צוינו תחביבים
                      </span>
                    )}
                  </p>
                )}
              </div>
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  );
};

export default ProfileSection;


==================================================
Contents of C:\Users\eytan\Desktop\שידוכים\shidduch-system\src\app\components\profile\sections\QuestionnaireResponsesSection.tsx:
==================================================
// src/app/components/profile/sections/QuestionnaireResponsesSection.tsx

import React, { useState, useMemo } from "react"; // Added useMemo
import {
  Card,
  CardHeader,
  CardTitle,
  CardContent,
  CardDescription,
} from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { Textarea } from "@/components/ui/textarea";
import { Switch } from "@/components/ui/switch";
import {
  Book, // Kept Book for empty state
  CheckCircle,
  Clock,
  Pencil,
  X,
  Eye,
  EyeOff,
  Loader2, // Added Loader2 for spinner
} from "lucide-react";
import { cn } from "@/lib/utils";
import { toast } from "sonner";
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip";
import type {
  QuestionnaireResponse,
  FormattedAnswer,
  UpdateValue, // Ensure this type is correctly defined and imported
} from "@/types/next-auth"; // Adjusted import path based on provided structure

// Import WORLDS from constants instead of defining locally
import { WORLDS } from "../constants"; // Adjusted import path

// Interface remains the same
interface QuestionnaireResponsesSectionProps {
  questionnaire: QuestionnaireResponse | null;
  onUpdate?: (
    world: string,
    questionId: string,
    value: UpdateValue
  ) => Promise<void>;
  isEditable?: boolean;
  viewMode?: "matchmaker" | "candidate"; // Keep viewMode if needed later for conditional logic
}

// --- QuestionCard Component ---
// Enhanced with loading state and improved accessibility

interface QuestionCardProps {
  question: string;
  answer: FormattedAnswer;
  isEditingGlobally: boolean; // Renamed from isEditing for clarity
  worldKey: string; // Added worldKey for update context
  onUpdate: (
    world: string,
    questionId: string,
    value: UpdateValue
  ) => Promise<void>;
}

const QuestionCard: React.FC<QuestionCardProps> = ({
  question,
  answer,
  isEditingGlobally,
  worldKey,
  onUpdate,
}) => {
  const [isEditingText, setIsEditingText] = useState(false);
  const [editValue, setEditValue] = useState(answer.displayText);
  const [isSavingText, setIsSavingText] = useState(false);
  const [isSavingVisibility, setIsSavingVisibility] = useState(false);

  const isSaving = isSavingText || isSavingVisibility; // Combined saving state

  const handleStartEdit = () => {
    if (isSaving) return; // Prevent editing while saving
    setIsEditingText(true);
    setEditValue(answer.displayText); // Reset edit value on start
  };

  const handleSaveText = async () => {
    if (!editValue?.trim()) {
      toast.error("לא ניתן לשמור תשובה ריקה.");
      return;
    }
    if (editValue.trim() === answer.displayText) {
      // No changes made
      setIsEditingText(false);
      return;
    }

    setIsSavingText(true);
    try {
      // console.log("Updating answer:", { worldKey, questionId: answer.questionId, value: editValue.trim() });
      await onUpdate(worldKey, answer.questionId, {
        type: "answer",
        value: editValue.trim(),
      });
      toast.success("התשובה עודכנה בהצלחה");
      setIsEditingText(false);
      // No need to update local state 'answer', parent should provide updated 'questionnaire' prop
    } catch (error) {
      console.error("Error updating answer:", error);
      toast.error("שגיאה בעדכון התשובה");
    } finally {
      setIsSavingText(false);
    }
  };

  const handleCancelEdit = () => {
    setIsEditingText(false);
    setEditValue(answer.displayText); // Revert changes
  };

  const handleVisibilityChange = async (isVisible: boolean) => {
    setIsSavingVisibility(true);
    try {
      // console.log("Updating visibility:", { worldKey, questionId: answer.questionId, isVisible });
      await onUpdate(worldKey, answer.questionId, {
        type: "visibility",
        isVisible,
      });
      toast.success("הגדרות הנראות עודכנו");
    } catch (error) {
      console.error("Error updating visibility:", error);
      toast.error("שגיאה בעדכון הנראות");
    } finally {
      setIsSavingVisibility(false);
    }
  };

  const visibilityLabel = `הצג תשובה זו למועמדים: ${
    answer.isVisible ? "מופעל" : "כבוי"
  }`;

  return (
    <div className="rounded-lg border bg-card p-4 shadow-sm transition-shadow duration-300 hover:shadow-md">
      <div className="flex items-start justify-between gap-4">
        <div className="flex-1 min-w-0">
          {/* Question and Visibility Control */}
          <div className="flex flex-col sm:flex-row items-start sm:items-center justify-between mb-3 gap-2">
            <h4 className="font-medium text-sm sm:text-base flex-1 text-right">
              {question}
            </h4>
            {/* Visibility Section */}
            <div
              className="flex items-center gap-2 self-end sm:self-center"
              dir="ltr"
            >
              {isSavingVisibility && (
                <Loader2 className="h-4 w-4 animate-spin text-muted-foreground" />
              )}
              {/* Tooltip for Visibility */}
              <TooltipProvider delayDuration={200}>
                <Tooltip>
                  <TooltipTrigger asChild>
                    <div
                      className={cn(
                        "flex items-center gap-1.5 px-2.5 py-1 rounded-full text-xs shrink-0 flex-row-reverse",
                        "transition-colors duration-200",
                        answer.isVisible
                          ? "bg-emerald-100/70 text-emerald-800"
                          : "bg-gray-100 text-gray-600"
                      )}
                    >
                      {answer.isVisible ? (
                        <Eye className="h-3.5 w-3.5" />
                      ) : (
                        <EyeOff className="h-3.5 w-3.5" />
                      )}
                      <span className="font-medium whitespace-nowrap" dir="rtl">
                        {answer.isVisible ? "גלוי למועמדים" : "מוסתר"}
                      </span>
                    </div>
                  </TooltipTrigger>
                  <TooltipContent side="top" dir="rtl">
                    <p>
                      {answer.isVisible
                        ? "תשובה זו גלויה למועמדים פוטנציאליים"
                        : "תשובה זו מוסתרת וגלויה רק לך ולשדכנים"}
                    </p>
                  </TooltipContent>
                </Tooltip>
              </TooltipProvider>

              {/* Visibility Switch (only if globally editing) */}
              {isEditingGlobally && (
                <Switch
                  checked={answer.isVisible ?? true} // Default to visible if undefined
                  onCheckedChange={handleVisibilityChange}
                  disabled={isSaving} // Disable while saving anything
                  className="data-[state=checked]:bg-emerald-500 data-[state=unchecked]:bg-gray-300 transform scale-90"
                  aria-label={visibilityLabel}
                />
              )}
            </div>
          </div>

          {/* Answer Display/Edit Area */}
          {isEditingText ? (
            <div className="space-y-2 mt-1">
              <Textarea
                value={editValue}
                onChange={(e) => setEditValue(e.target.value)}
                className="min-h-[80px] text-sm focus:ring-cyan-500 focus:border-cyan-500"
                placeholder="הקלד/י את תשובתך כאן..."
                disabled={isSavingText}
              />
              <div className="flex justify-end gap-2">
                <Button
                  size="sm"
                  variant="ghost"
                  onClick={handleCancelEdit}
                  disabled={isSavingText}
                  className="text-gray-600 hover:bg-gray-100"
                >
                  <X className="h-4 w-4 ml-1" />
                  ביטול
                </Button>
                <Button
                  size="sm"
                  onClick={handleSaveText}
                  disabled={isSavingText || !editValue?.trim()} // Also disable if empty
                  className="bg-cyan-600 hover:bg-cyan-700 text-white"
                >
                  {isSavingText ? (
                    <Loader2 className="h-4 w-4 animate-spin" />
                  ) : (
                    <CheckCircle className="h-4 w-4 ml-1" />
                  )}
                  שמירה
                </Button>
              </div>
            </div>
          ) : (
            <div className="relative group overflow-hidden mt-1">
              {/* Answer Text */}
              <div className="p-3 bg-gray-50/50 rounded-md border border-gray-200/60 min-h-[40px]">
                <p className="text-sm text-gray-800 break-words overflow-wrap-anywhere whitespace-pre-wrap">
                  {answer.displayText}
                </p>
                {/* Last Updated Timestamp */}
                <TooltipProvider delayDuration={200}>
                  <Tooltip>
                    <TooltipTrigger asChild>
                      <span className="text-xs text-gray-400 block mt-2 text-left">
                        {new Date(answer.answeredAt).toLocaleDateString(
                          "he-IL",
                          { year: "numeric", month: "2-digit", day: "2-digit" }
                        )}
                      </span>
                    </TooltipTrigger>
                    <TooltipContent side="top" dir="rtl">
                      <p>תאריך עדכון אחרון</p>
                    </TooltipContent>
                  </Tooltip>
                </TooltipProvider>
              </div>
              {/* Edit Button (appears on hover if globally editing) */}
              {isEditingGlobally && !isSaving && (
                <Button
                  variant="ghost"
                  size="icon"
                  className="absolute top-0 right-0 opacity-0 group-hover:opacity-100 transition-opacity duration-200 h-7 w-7 text-cyan-600 hover:bg-cyan-50"
                  onClick={handleStartEdit}
                  title="עריכת תשובה"
                >
                  <Pencil className="h-4 w-4" />
                  <span className="sr-only">עריכת תשובה</span>
                </Button>
              )}
              {/* Show loader if saving text and not in edit mode */}
              {isSavingText && !isEditingText && (
                <div className="absolute top-1 right-1">
                  <Loader2 className="h-4 w-4 animate-spin text-cyan-500" />
                </div>
              )}
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

// --- WorldSection Component ---
// Mostly unchanged, passes props down correctly.

interface WorldSectionProps {
  worldKey: keyof typeof WORLDS; // Use key for context
  worldConfig: (typeof WORLDS)[keyof typeof WORLDS]; // Pass config object
  answers: FormattedAnswer[];
  isEditingGlobally: boolean; // Renamed for clarity
  onUpdate: (
    world: string,
    questionId: string,
    value: UpdateValue
  ) => Promise<void>;
  isCompleted: boolean;
  className?: string;
}

const WorldSection: React.FC<WorldSectionProps> = ({
  worldKey,
  worldConfig,
  answers,
  isEditingGlobally,
  onUpdate,
  isCompleted,
  className,
}) => {
  const { title, icon: Icon, color, bgColor, borderColor } = worldConfig;

  // No need to check answers.length here, as this component will only be rendered if answers exist.

  return (
    <Card
      className={cn(
        "overflow-hidden shadow-sm border",
        bgColor,
        borderColor,
        className
      )}
    >
      <CardHeader
        className="p-4 border-b"
        style={{
          borderColor: `rgba(var(--${color.split("-")[1]}-200-rgb), 0.5)`,
        }}
      >
        {" "}
        {/* Dynamic border color */}
        <div className="flex items-center justify-between">
          <div className="flex items-center gap-3">
            <div
              className={cn(
                "p-2 rounded-full",
                color.replace("text-", "bg-") + "/10" // Dynamic background based on color class
              )}
            >
              <Icon className={cn("h-5 w-5", color)} />
            </div>
            <div>
              <CardTitle className="text-md sm:text-lg text-gray-800">
                {title}
              </CardTitle>
              <CardDescription className="text-xs text-gray-500 mt-0.5">
                {answers.length} {answers.length === 1 ? "תשובה" : "תשובות"}
              </CardDescription>
            </div>
          </div>
          {/* Completion Badge */}
          <Badge
            variant={isCompleted ? "success" : "secondary"}
            className={cn(
              "gap-1 text-xs px-2 py-0.5 rounded-full",
              isCompleted
                ? "bg-emerald-100 text-emerald-800"
                : "bg-blue-100 text-blue-800"
            )}
          >
            {isCompleted ? (
              <CheckCircle className="h-3 w-3" />
            ) : (
              <Clock className="h-3 w-3" />
            )}
            {isCompleted ? "הושלם" : "בתהליך"}
          </Badge>
        </div>
      </CardHeader>
      <CardContent className="p-4 pt-4">
        {/* Answers List */}
        <div className="space-y-4">
          {answers.map((answer) => (
            <QuestionCard
              key={answer.questionId}
              question={answer.question}
              answer={answer}
              isEditingGlobally={isEditingGlobally}
              worldKey={worldKey} // Pass worldKey
              onUpdate={onUpdate} // Pass update function
            />
          ))}
        </div>
      </CardContent>
    </Card>
  );
};

// --- QuestionnaireResponsesSection Component ---
// Main component, handles overall structure and state.

const QuestionnaireResponsesSection: React.FC<
  QuestionnaireResponsesSectionProps
> = ({
  questionnaire,
  onUpdate,
  isEditable = false /*, viewMode = "candidate"*/,
}) => {
  const [isEditingGlobally, setIsEditingGlobally] = useState(false); // Renamed for clarity

  // Memoize filtered worlds to avoid recalculating on every render
  const worldsWithAnswers = useMemo(() => {
    if (!questionnaire?.formattedAnswers) return [];

    // Map WORLDS definitions, keeping only those with answers
    return Object.entries(WORLDS)
      .map(([key, config]) => ({
        key: key as keyof typeof WORLDS,
        config,
        answers:
          questionnaire.formattedAnswers?.[
            key as keyof typeof questionnaire.formattedAnswers
          ] ?? [],
        isCompleted:
          (questionnaire[
            `${key}Completed` as keyof QuestionnaireResponse
          ] as boolean) ?? false,
      }))
      .filter((world) => world.answers.length > 0); // Filter out worlds with no answers
  }, [questionnaire]); // Recalculate only when questionnaire changes

  if (!questionnaire) {
    return (
      <Card className="text-center py-12 text-gray-500 bg-gray-50 rounded-lg border border-dashed">
        <Book className="h-10 w-10 mx-auto mb-3 opacity-50 text-gray-400" />
        <p className="font-medium">לא מולא שאלון עבור פרופיל זה.</p>
        <p className="text-sm mt-1">אין תשובות להציג.</p>
      </Card>
    );
  }

  // Check if there are any answers at all across all worlds
  const hasAnyAnswers = worldsWithAnswers.length > 0;

  return (
    <div className="space-y-6">
      {/* Status Header */}
      <Card className="shadow-sm border">
        <CardHeader className="p-4">
          <div className="flex flex-col sm:flex-row items-start sm:items-center justify-between gap-3">
            <div className="flex items-center gap-3">
              {questionnaire.completed ? (
                <CheckCircle className="h-5 w-5 text-emerald-500 flex-shrink-0" />
              ) : (
                <Clock className="h-5 w-5 text-blue-500 flex-shrink-0" />
              )}
              <div>
                <p className="font-semibold text-base text-gray-800">
                  {questionnaire.completed ? "שאלון הושלם" : "שאלון בתהליך"}
                </p>
                <p className="text-xs text-gray-500 mt-0.5">
                  {hasAnyAnswers
                    ? `עודכן לאחרונה: ${new Date(
                        questionnaire.lastSaved
                      ).toLocaleDateString("he-IL")}`
                    : "השאלון טרם החל"}
                </p>
              </div>
            </div>

            {/* Edit Toggle Button */}
            {isEditable &&
              hasAnyAnswers &&
              onUpdate && ( // Show edit only if editable, has answers, and update fn exists
                <Button
                  variant="outline"
                  size="sm"
                  onClick={() => setIsEditingGlobally(!isEditingGlobally)}
                  className="gap-1.5 rounded-full px-4 py-2 text-xs sm:text-sm self-end sm:self-center"
                >
                  {isEditingGlobally ? (
                    <>
                      <X className="h-4 w-4" />
                      סיום עריכה
                    </>
                  ) : (
                    <>
                      <Pencil className="h-4 w-4" />
                      עריכת תשובות
                    </>
                  )}
                </Button>
              )}
          </div>
        </CardHeader>
      </Card>

      {/* Worlds Grid */}
      {hasAnyAnswers ? (
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          {worldsWithAnswers.map(({ key, config, answers, isCompleted }) => (
            <WorldSection
              key={key}
              worldKey={key}
              worldConfig={config}
              answers={answers}
              isEditingGlobally={isEditingGlobally}
              onUpdate={onUpdate!} // Assert non-null as we check onUpdate existence before rendering edit button
              isCompleted={isCompleted}
              // className prop is implicitly handled by cn in WorldSection now
            />
          ))}
        </div>
      ) : (
        // Display a message if questionnaire exists but has no answers yet
        <div className="text-center py-10 text-gray-500 bg-gray-50/50 rounded-lg border border-gray-200">
          <Book className="h-8 w-8 mx-auto mb-2 opacity-50 text-gray-400" />
          <p>השאלון טרם מולא.</p>
          <p className="text-sm mt-1">אין תשובות להציג כרגע.</p>
        </div>
      )}
    </div>
  );
};

export default QuestionnaireResponsesSection;


==================================================
Contents of C:\Users\eytan\Desktop\שידוכים\shidduch-system\src\app\components\profile\types\profile.ts:
==================================================
import type { UserProfile, UserImage, QuestionnaireResponse } from "@/types/next-auth";

// Define specific types for questionnaire updates
export interface QuestionnaireUpdateValue {
  type: 'answer' | 'visibility';
  value?: string;
  isVisible?: boolean;
}

// Interfaces for the main sections
export interface PhotosSectionProps {
  images: UserImage[];
  isUploading: boolean;
  disabled?: boolean;
  onUpload: (file: File) => Promise<void>;
  onSetMain: (imageId: string) => Promise<void>;
  onDelete: (imageId: string) => Promise<void>;
}

export interface ExtendedProfileSectionProps {
  profile: UserProfile | null;
  isEditing: boolean;
  viewOnly?: boolean;
  setIsEditing: (value: boolean) => void;
  onSave: (data: Partial<UserProfile>) => void;
}

export interface PreferencesSectionProps {
  profile: UserProfile | null;
  isEditing: boolean;
  viewOnly?: boolean;
  setIsEditing: (value: boolean) => void;
  onChange: (data: Partial<UserProfile>) => void;
}

export interface QuestionnaireResponsesSectionProps {
  questionnaire: QuestionnaireResponse | null;
  onUpdate?: (world: string, questionId: string, value: QuestionnaireUpdateValue) => Promise<void>;
  isEditable?: boolean;
  viewMode?: "matchmaker" | "candidate";
}

// Types for the extended profile data
export interface ExtendedProfileData {
  personalityTraits?: {
    temperament?: string;
    decisionMaking?: string;
    stressManagement?: string;
    communicationStyle?: string;
  };
  spiritualProfile?: {
    prayerStyle?: string;
    secularStudiesAttitude?: string;
    modestyLevel?: string;
    childrenEducationApproach?: string;
  };
  familyBackground?: {
    parentsSpiritualLevel?: string;
    parentsOccupations?: {
      father?: string;
      mother?: string;
    };
    familyDynamics?: string;
  };
  lifestylePreferences?: {
    careerAspiration?: string;
    futureStudyPlans?: string;
    livingPreferences?: {
      proximity?: string;
    };
    relationshipExpectations?: string;
  };
  healthProfile?: {
    generalHealth?: string;
    dietaryRestrictions?: string[];
    physicalActivity?: string;
  };
  personalValues?: {
    parentalRespect?: number;
    communityInvolvement?: string;
    volunteeringPreferences?: string;
    financialManagement?: string;
  };
  futureGoals?: string[];
  [key: string]: unknown;
}

// Additional utility types
export type ViewMode = "matchmaker" | "candidate";
export type CardSize = "sm" | "md" | "lg";

==================================================
Contents of C:\Users\eytan\Desktop\שידוכים\shidduch-system\src\app\components\profile\types\questionnaire.ts:
==================================================
// src/components/shared/profile/types/questionnaire.ts

export type QuestionnaireAnswerValue = {
  type: 'answer';
  value: string;
} | {
  type: 'visibility';
  isVisible: boolean;
} | string | number | boolean;

export interface FormattedAnswer {
  questionId: string;
  question: string;
  value: QuestionnaireAnswerValue;
  displayText: string;
  answeredAt: string;
  category?: string;
  isVisible: boolean;
}

export interface QuestionnaireResponse {
  id: string;
  userId: string;
  formattedAnswers: {
    values: FormattedAnswer[];
    personality: FormattedAnswer[];
    relationship: FormattedAnswer[];
    partner: FormattedAnswer[];
    religion: FormattedAnswer[];
  };
  valuesCompleted: boolean;
  personalityCompleted: boolean;
  relationshipCompleted: boolean;
  partnerCompleted: boolean;
  religionCompleted: boolean;
  worldsCompleted: string[];
  completed: boolean;
  startedAt: string | Date;
  completedAt?: string | Date;
  lastSaved: string | Date;
}

export interface QuestionnaireWorld {
  key: string;
  title: string;
  icon: React.ElementType;
  color: string;
  bgColor: string;
  borderColor: string;
}

export interface QuestionCardProps {
  question: string;
  answer: FormattedAnswer;
  isEditing: boolean;
  onEdit: (value: string) => void;
  onVisibilityChange: (isVisible: boolean) => void;
}

export interface WorldSectionProps {
  title: string;
  icon: React.ElementType;
  answers: FormattedAnswer[];
  isEditing: boolean;
  onEdit: (questionId: string, value: string) => void;
  onVisibilityChange: (questionId: string, isVisible: boolean) => void;
  isCompleted: boolean;
  className?: string;
}
