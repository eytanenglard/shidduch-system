################################################################################
# Directory Content Map For: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\app\components\matchmaker\suggestions
# Generated on: 2025-08-18 12:19:15
################################################################################

================================================================================
Directory: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\app\components\matchmaker\suggestions
================================================================================

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\app\components\matchmaker\suggestions\EditSuggestionForm.tsx
--------------------------------------------------------------------------------
Content:
// EditSuggestionForm.tsx - גרסה מתוקנת ומעודכנת

import React, { useState, useEffect } from 'react';
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription,
  DialogFooter,
} from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';
import { Textarea } from '@/components/ui/textarea';
import { Label } from '@/components/ui/label';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select';
import { toast } from 'sonner';
import { Priority, MatchSuggestionStatus } from '@prisma/client';
import { DatePicker } from '@/components/ui/date-picker';
import type { Suggestion } from '@/types/suggestions';
import {
  RefreshCw,
  AlertTriangle,
  Calendar,
  Clock,
  User,
  MessageCircle,
  CheckCircle,
  Sparkles,
  Heart,
  Save,
  X,
  Star,
  Flame,
  Target,
  Shield,
  Crown,
  Zap,
} from 'lucide-react';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { Badge } from '@/components/ui/badge';
import { Progress } from '@/components/ui/progress';
import { cn } from '@/lib/utils';

interface EditSuggestionFormProps {
  isOpen: boolean;
  onClose: () => void;
  suggestion: Suggestion | null;
  onSave: (data: {
    suggestionId: string;
    updates: {
      priority?: Priority;
      status?: MatchSuggestionStatus;
      statusNotes?: string;
      matchingReason?: string;
      firstPartyNotes?: string;
      secondPartyNotes?: string;
      internalNotes?: string;
      decisionDeadline?: Date;
    };
  }) => Promise<void>;
}

const EditSuggestionForm: React.FC<EditSuggestionFormProps> = ({
  isOpen,
  onClose,
  suggestion,
  onSave,
}) => {
  // State variables
  const [priority, setPriority] = useState<Priority>(Priority.MEDIUM);
  const [selectedStatus, setSelectedStatus] =
    useState<MatchSuggestionStatus | null>(null);
  const [statusNotes, setStatusNotes] = useState('');
  const [matchingReason, setMatchingReason] = useState('');
  const [firstPartyNotes, setFirstPartyNotes] = useState('');
  const [secondPartyNotes, setSecondPartyNotes] = useState('');
  const [internalNotes, setInternalNotes] = useState('');
  const [decisionDeadline, setDecisionDeadline] = useState<Date | undefined>(
    undefined
  );
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [showStatusChange, setShowStatusChange] = useState(false);

  // עדכון הטופס כאשר נתוני ההצעה משתנים
  useEffect(() => {
    if (suggestion) {
      console.log('Loading suggestion data:', suggestion);

      setPriority(suggestion.priority as Priority);
      setMatchingReason(suggestion.matchingReason || '');
      setFirstPartyNotes(suggestion.firstPartyNotes || '');
      setSecondPartyNotes(suggestion.secondPartyNotes || '');
      setInternalNotes(suggestion.internalNotes || '');

      setSelectedStatus(null);
      setStatusNotes('');
      setShowStatusChange(false);

      if (suggestion.decisionDeadline) {
        const deadlineDate = new Date(suggestion.decisionDeadline);
        if (!isNaN(deadlineDate.getTime())) {
          setDecisionDeadline(deadlineDate);
        }
      } else {
        setDecisionDeadline(undefined);
      }
    }
  }, [suggestion]);

  // פונקציה להחזרת התווית המתאימה לסטטוס
  const getStatusLabel = (statusValue: MatchSuggestionStatus): string => {
    const statusLabels: Record<MatchSuggestionStatus, string> = {
      DRAFT: 'טיוטה',
      PENDING_FIRST_PARTY: "ממתין לתשובת צד א'",
      FIRST_PARTY_APPROVED: "צד א' אישר",
      FIRST_PARTY_DECLINED: "צד א' דחה",
      PENDING_SECOND_PARTY: "ממתין לתשובת צד ב'",
      SECOND_PARTY_APPROVED: "צד ב' אישר",
      SECOND_PARTY_DECLINED: "צד ב' דחה",
      AWAITING_MATCHMAKER_APPROVAL: 'ממתין לאישור שדכן',
      CONTACT_DETAILS_SHARED: 'פרטי קשר שותפו',
      AWAITING_FIRST_DATE_FEEDBACK: 'ממתין למשוב פגישה ראשונה',
      THINKING_AFTER_DATE: 'בשלב מחשבה אחרי פגישה',
      PROCEEDING_TO_SECOND_DATE: 'ממשיכים לפגישה שנייה',
      ENDED_AFTER_FIRST_DATE: 'הסתיים אחרי פגישה ראשונה',
      MEETING_PENDING: 'ממתין לקביעת פגישה',
      MEETING_SCHEDULED: 'פגישה נקבעה',
      MATCH_APPROVED: 'ההצעה אושרה',
      MATCH_DECLINED: 'ההצעה נדחתה',
      DATING: 'בתהליך היכרות',
      ENGAGED: 'מאורסים',
      MARRIED: 'נישאו',
      EXPIRED: 'פג תוקף',
      CLOSED: 'ההצעה נסגרה',
      CANCELLED: 'ההצעה בוטלה',
    };

    return statusLabels[statusValue] || statusValue;
  };

  // הסטטוסים הזמינים לשינוי
  const getAvailableStatuses = (): MatchSuggestionStatus[] => {
    if (!suggestion) return [];

    const allStatuses: MatchSuggestionStatus[] = [
      'DRAFT',
      'PENDING_FIRST_PARTY',
      'FIRST_PARTY_APPROVED',
      'FIRST_PARTY_DECLINED',
      'PENDING_SECOND_PARTY',
      'SECOND_PARTY_APPROVED',
      'SECOND_PARTY_DECLINED',
      'AWAITING_MATCHMAKER_APPROVAL',
      'CONTACT_DETAILS_SHARED',
      'AWAITING_FIRST_DATE_FEEDBACK',
      'THINKING_AFTER_DATE',
      'PROCEEDING_TO_SECOND_DATE',
      'ENDED_AFTER_FIRST_DATE',
      'MEETING_PENDING',
      'MEETING_SCHEDULED',
      'MATCH_APPROVED',
      'MATCH_DECLINED',
      'DATING',
      'ENGAGED',
      'MARRIED',
      'EXPIRED',
      'CLOSED',
      'CANCELLED',
    ];

    return allStatuses;
  };

  // הגשת הטופס
  const handleSubmit = async () => {
    if (!suggestion) {
      toast.error('לא נמצאו נתוני הצעה');
      return;
    }

    setIsSubmitting(true);

    try {
      const updateData: {
        priority: Priority;
        status?: MatchSuggestionStatus;
        statusNotes?: string;
        matchingReason: string;
        firstPartyNotes: string;
        secondPartyNotes: string;
        internalNotes: string;
        decisionDeadline?: Date;
      } = {
        priority,
        matchingReason,
        firstPartyNotes,
        secondPartyNotes,
        internalNotes,
        decisionDeadline,
      };

      if (selectedStatus && selectedStatus !== suggestion.status) {
        updateData.status = selectedStatus;
        updateData.statusNotes =
          statusNotes ||
          `סטטוס שונה מ-${getStatusLabel(suggestion.status)} ל-${getStatusLabel(selectedStatus)}`;
      }

      console.log('Submitting update data:', updateData);

      await onSave({
        suggestionId: suggestion.id,
        updates: updateData,
      });

      toast.success('פרטי ההצעה עודכנו בהצלחה');
      onClose();
    } catch (error) {
      console.error('Error updating suggestion:', error);
      toast.error('שגיאה בעדכון פרטי ההצעה');
    } finally {
      setIsSubmitting(false);
    }
  };

  // פונקציות עזר לעיצוב
  const getPriorityInfo = (p: Priority) => {
    switch (p) {
      case Priority.URGENT:
        return {
          label: 'דחוף',
          color: 'from-red-500 to-pink-500',
          icon: Flame,
          textColor: 'text-red-600',
        };
      case Priority.HIGH:
        return {
          label: 'גבוהה',
          color: 'from-orange-500 to-amber-500',
          icon: Star,
          textColor: 'text-orange-600',
        };
      case Priority.MEDIUM:
        return {
          label: 'רגילה',
          color: 'from-blue-500 to-cyan-500',
          icon: Target,
          textColor: 'text-blue-600',
        };
      case Priority.LOW:
        return {
          label: 'נמוכה',
          color: 'from-gray-500 to-slate-500',
          icon: Shield,
          textColor: 'text-gray-600',
        };
      default:
        return {
          label: 'רגילה',
          color: 'from-blue-500 to-cyan-500',
          icon: Target,
          textColor: 'text-blue-600',
        };
    }
  };

  const getStatusInfo = (status: MatchSuggestionStatus) => {
    switch (status) {
      case 'PENDING_FIRST_PARTY':
      case 'PENDING_SECOND_PARTY':
        return {
          icon: Clock,
          color: 'text-yellow-600',
          bg: 'from-yellow-50 to-amber-50',
        };
      case 'FIRST_PARTY_APPROVED':
      case 'SECOND_PARTY_APPROVED':
        return {
          icon: CheckCircle,
          color: 'text-green-600',
          bg: 'from-green-50 to-emerald-50',
        };
      case 'DATING':
        return {
          icon: Heart,
          color: 'text-pink-600',
          bg: 'from-pink-50 to-rose-50',
        };
      case 'ENGAGED':
        return {
          icon: Crown,
          color: 'text-yellow-600',
          bg: 'from-yellow-50 to-orange-50',
        };
      case 'MARRIED':
        return {
          icon: Sparkles,
          color: 'text-purple-600',
          bg: 'from-purple-50 to-pink-50',
        };
      default:
        return {
          icon: RefreshCw,
          color: 'text-gray-600',
          bg: 'from-gray-50 to-slate-50',
        };
    }
  };

  if (!suggestion) return null;

  const currentPriorityInfo = getPriorityInfo(priority);
  const currentStatusInfo = getStatusInfo(suggestion.status);
  const CurrentStatusIcon = currentStatusInfo.icon;
  const CurrentPriorityIcon = currentPriorityInfo.icon;

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent
        className="max-w-6xl max-h-[95vh] overflow-y-auto border-0 shadow-2xl rounded-3xl p-0"
        dir="rtl"
      >
        {/* Hero Header */}
        <div
          className={cn(
            'relative overflow-hidden bg-gradient-to-br',
            currentStatusInfo.bg,
            'border-b border-gray-100'
          )}
        >
          <div className="absolute inset-0">
            <div className="absolute top-0 right-0 w-64 h-64 bg-gradient-to-br from-white/30 to-transparent rounded-full blur-3xl"></div>
            <div className="absolute bottom-0 left-0 w-48 h-48 bg-gradient-to-br from-white/20 to-transparent rounded-full blur-2xl"></div>
          </div>

          <div className="relative z-10 p-8">
            <DialogHeader>
              <div className="flex items-center justify-between mb-4">
                <div className="flex items-center gap-4">
                  <div className="p-3 rounded-full bg-white/20 backdrop-blur-sm shadow-lg">
                    <CurrentStatusIcon
                      className={cn('w-8 h-8', currentStatusInfo.color)}
                    />
                  </div>
                  <div>
                    <DialogTitle className="text-3xl font-bold text-gray-800">
                      עריכת הצעת שידוך #{suggestion.id.slice(-8)}
                    </DialogTitle>
                    <DialogDescription className="text-lg text-gray-600 mt-1">
                      עריכת הפרטים עבור ההצעה בין{' '}
                      {suggestion.firstParty.firstName}{' '}
                      {suggestion.firstParty.lastName} ל
                      {suggestion.secondParty.firstName}{' '}
                      {suggestion.secondParty.lastName}
                    </DialogDescription>
                  </div>
                </div>

                <Button
                  variant="ghost"
                  size="icon"
                  onClick={onClose}
                  className="rounded-full h-12 w-12 text-gray-500 hover:text-gray-700 hover:bg-white/50 backdrop-blur-sm"
                >
                  <X className="w-6 h-6" />
                </Button>
              </div>

              <div className="flex items-center gap-4">
                <Badge
                  className={cn(
                    'px-4 py-2 font-bold shadow-lg bg-gradient-to-r text-white',
                    currentPriorityInfo.color
                  )}
                >
                  <CurrentPriorityIcon className="w-4 h-4 ml-2" />
                  עדיפות: {currentPriorityInfo.label}
                </Badge>

                <Badge className="px-4 py-2 bg-white/20 backdrop-blur-sm text-gray-700 border border-white/30">
                  סטטוס נוכחי: {getStatusLabel(suggestion.status)}
                </Badge>
              </div>
            </DialogHeader>
          </div>
        </div>

        <div className="p-8 space-y-8">
          {/* מידע נוכחי על ההצעה */}
          <Alert className="border-0 bg-gradient-to-r from-blue-50 to-cyan-50 shadow-lg rounded-2xl">
            <AlertTriangle className="h-5 w-5 text-blue-500" />
            <AlertDescription className="text-blue-800 font-medium">
              <strong>מידע נוכחי:</strong> ההצעה נוצרה עבור{' '}
              {suggestion.firstParty.firstName} {suggestion.firstParty.lastName}{' '}
              ו{suggestion.secondParty.firstName}{' '}
              {suggestion.secondParty.lastName}.
              <br />
              <strong>סטטוס:</strong> {getStatusLabel(suggestion.status)} •{' '}
              <strong>עדיפות:</strong> {currentPriorityInfo.label}
            </AlertDescription>
          </Alert>

          {/* Status and Priority Section */}
          <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
            {/* Priority */}
            <div className="space-y-4">
              <div className="p-6 bg-white rounded-2xl shadow-xl border-0 hover:shadow-2xl transition-all duration-300">
                <div className="flex items-center gap-3 mb-4">
                  <div
                    className={cn(
                      'p-2 rounded-full bg-gradient-to-r text-white shadow-lg',
                      currentPriorityInfo.color
                    )}
                  >
                    <Star className="w-5 h-5" />
                  </div>
                  <Label className="text-lg font-bold text-gray-800">
                    עדיפות ההצעה
                  </Label>
                </div>

                <Select
                  value={priority}
                  onValueChange={(value) => setPriority(value as Priority)}
                >
                  <SelectTrigger className="h-12 border-2 border-gray-200 hover:border-purple-300 focus:border-purple-500 rounded-xl transition-all">
                    <SelectValue placeholder="בחר/י עדיפות" />
                  </SelectTrigger>
                  <SelectContent>
                    {Object.values(Priority).map((p) => {
                      const info = getPriorityInfo(p);
                      const Icon = info.icon;
                      return (
                        <SelectItem key={p} value={p}>
                          <div className="flex items-center gap-2">
                            <Icon className={cn('w-4 h-4', info.textColor)} />
                            {info.label}
                          </div>
                        </SelectItem>
                      );
                    })}
                  </SelectContent>
                </Select>
              </div>
            </div>

            {/* Status Change */}
            <div className="space-y-4">
              <div className="p-6 bg-white rounded-2xl shadow-xl border-0 hover:shadow-2xl transition-all duration-300">
                <div className="flex items-center justify-between mb-4">
                  <div className="flex items-center gap-3">
                    <div className="p-2 rounded-full bg-gradient-to-r from-purple-500 to-pink-500 text-white shadow-lg">
                      <RefreshCw className="w-5 h-5" />
                    </div>
                    <Label className="text-lg font-bold text-gray-800">
                      שינוי סטטוס
                    </Label>
                  </div>
                  <Button
                    type="button"
                    variant={showStatusChange ? 'default' : 'outline'}
                    size="sm"
                    onClick={() => setShowStatusChange(!showStatusChange)}
                    className={cn(
                      'rounded-xl transition-all duration-300',
                      showStatusChange
                        ? 'bg-gradient-to-r from-purple-600 to-pink-600 text-white shadow-lg'
                        : 'border-2 border-purple-200 text-purple-600 hover:bg-purple-50'
                    )}
                  >
                    <RefreshCw className="w-4 h-4 ml-2" />
                    {showStatusChange ? 'ביטול שינוי' : 'שנה סטטוס'}
                  </Button>
                </div>

                {showStatusChange && (
                  <div className="space-y-4 p-4 border-2 border-purple-100 rounded-xl bg-gradient-to-r from-purple-50 to-pink-50">
                    <Select
                      value={selectedStatus || ''}
                      onValueChange={(value) => {
                        if (value && value !== 'NO_CHANGE') {
                          setSelectedStatus(value as MatchSuggestionStatus);
                        } else {
                          setSelectedStatus(null);
                          setStatusNotes('');
                        }
                      }}
                    >
                      <SelectTrigger className="h-12 border-2 border-purple-200 bg-white">
                        <SelectValue placeholder="בחר/י סטטוס חדש" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="NO_CHANGE">ללא שינוי</SelectItem>
                        {getAvailableStatuses().map((status) => (
                          <SelectItem key={status} value={status}>
                            {getStatusLabel(status)}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>

                    {selectedStatus && (
                      <div>
                        <Label className="text-sm font-medium text-purple-800">
                          הערות לשינוי הסטטוס
                        </Label>
                        <Textarea
                          value={statusNotes}
                          onChange={(e) => setStatusNotes(e.target.value)}
                          placeholder="הערות אופציונליות לשינוי הסטטוס..."
                          className="mt-2 h-20 border-2 border-purple-200 focus:border-purple-400 rounded-xl"
                        />
                      </div>
                    )}
                  </div>
                )}
              </div>
            </div>
          </div>

          {/* Decision Deadline */}
          <div className="p-6 bg-white rounded-2xl shadow-xl border-0 hover:shadow-2xl transition-all duration-300">
            <div className="flex items-center gap-3 mb-4">
              <div className="p-2 rounded-full bg-gradient-to-r from-orange-500 to-amber-500 text-white shadow-lg">
                <Calendar className="w-5 h-5" />
              </div>
              <Label className="text-lg font-bold text-gray-800">
                מועד החלטה אחרון
              </Label>
            </div>
            <DatePicker
              value={{ from: decisionDeadline, to: undefined }}
              onChange={({ from }) => setDecisionDeadline(from)}
            />
          </div>

          {/* Matching Reason */}
          <div className="p-6 bg-white rounded-2xl shadow-xl border-0 hover:shadow-2xl transition-all duration-300">
            <div className="flex items-center gap-3 mb-4">
              <div className="p-2 rounded-full bg-gradient-to-r from-emerald-500 to-green-500 text-white shadow-lg">
                <Heart className="w-5 h-5" />
              </div>
              <Label className="text-lg font-bold text-gray-800">
                סיבת ההתאמה
              </Label>
            </div>
            <Textarea
              value={matchingReason}
              onChange={(e) => setMatchingReason(e.target.value)}
              placeholder="פרט/י מדוע יש התאמה בין המועמדים..."
              className="h-32 border-2 border-gray-200 focus:border-emerald-400 rounded-xl transition-all resize-none"
            />
          </div>

          {/* Party-specific Notes */}
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
            <div className="p-6 bg-white rounded-2xl shadow-xl border-0 hover:shadow-2xl transition-all duration-300">
              <div className="flex items-center gap-3 mb-4">
                <div className="p-2 rounded-full bg-gradient-to-r from-blue-500 to-cyan-500 text-white shadow-lg">
                  <User className="w-5 h-5" />
                </div>
                <Label className="text-lg font-bold text-gray-800">
                  הערות לצד א' ({suggestion.firstParty.firstName})
                </Label>
              </div>
              <Textarea
                value={firstPartyNotes}
                onChange={(e) => setFirstPartyNotes(e.target.value)}
                placeholder="הערות שיוצגו רק לצד א'..."
                className="h-32 border-2 border-gray-200 focus:border-blue-400 rounded-xl transition-all resize-none"
              />
            </div>

            <div className="p-6 bg-white rounded-2xl shadow-xl border-0 hover:shadow-2xl transition-all duration-300">
              <div className="flex items-center gap-3 mb-4">
                <div className="p-2 rounded-full bg-gradient-to-r from-purple-500 to-pink-500 text-white shadow-lg">
                  <User className="w-5 h-5" />
                </div>
                <Label className="text-lg font-bold text-gray-800">
                  הערות לצד ב' ({suggestion.secondParty.firstName})
                </Label>
              </div>
              <Textarea
                value={secondPartyNotes}
                onChange={(e) => setSecondPartyNotes(e.target.value)}
                placeholder="הערות שיוצגו רק לצד ב'..."
                className="h-32 border-2 border-gray-200 focus:border-purple-400 rounded-xl transition-all resize-none"
              />
            </div>
          </div>

          {/* Internal Notes */}
          <div className="p-6 bg-white rounded-2xl shadow-xl border-0 hover:shadow-2xl transition-all duration-300">
            <div className="flex items-center gap-3 mb-4">
              <div className="p-2 rounded-full bg-gradient-to-r from-amber-500 to-orange-500 text-white shadow-lg">
                <MessageCircle className="w-5 h-5" />
              </div>
              <Label className="text-lg font-bold text-gray-800">
                הערות פנימיות
              </Label>
            </div>
            <Textarea
              value={internalNotes}
              onChange={(e) => setInternalNotes(e.target.value)}
              placeholder="הערות פנימיות לשימוש השדכנים בלבד..."
              className="h-32 border-2 border-gray-200 focus:border-amber-400 rounded-xl transition-all resize-none"
            />
          </div>
        </div>

        <DialogFooter className="p-8 border-t border-gray-100 bg-gradient-to-r from-gray-50 to-slate-50">
          <div className="flex justify-between w-full items-center">
            <span className="text-sm text-gray-500 font-medium">
              כל השינויים יישמרו לאחר לחיצה על "שמור שינויים"
            </span>
            <div className="flex gap-4">
              <Button
                variant="outline"
                onClick={onClose}
                disabled={isSubmitting}
                className="px-8 py-3 border-2 border-gray-300 hover:bg-gray-50 rounded-xl transition-all"
              >
                ביטול
              </Button>
              <Button
                onClick={handleSubmit}
                disabled={isSubmitting}
                className="px-8 py-3 bg-gradient-to-r from-purple-600 via-pink-600 to-blue-600 hover:from-purple-700 hover:via-pink-700 hover:to-blue-700 text-white shadow-xl hover:shadow-2xl transition-all duration-300 rounded-xl transform hover:scale-105"
              >
                {isSubmitting ? (
                  <>
                    <RefreshCw className="w-5 h-5 ml-2 animate-spin" />
                    שומר...
                  </>
                ) : (
                  <>
                    <Save className="w-5 h-5 ml-2" />
                    שמור שינויים
                  </>
                )}
              </Button>
            </div>
          </div>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
};

export default EditSuggestionForm;
--- End of Content for EditSuggestionForm.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\app\components\matchmaker\suggestions\MessageForm.tsx
--------------------------------------------------------------------------------
Content:
import React, { useState } from 'react';
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription,
  DialogFooter,
} from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';
import { Textarea } from '@/components/ui/textarea';
import { Label } from '@/components/ui/label';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select';
import { toast } from 'sonner';
import {
  MessageCircle,
  Send,
  AlertCircle,
  Users,
  User,
  Clock,
  Sparkles,
  X,
  Mail,
  Bell,
  Info,
  Heart,
  Zap,
} from 'lucide-react';
import type { Suggestion } from '@/types/suggestions';
import { Badge } from '@/components/ui/badge';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { cn } from '@/lib/utils';

interface MessageFormProps {
  isOpen: boolean;
  onClose: () => void;
  suggestion: Suggestion | null;
  onSend: (data: {
    suggestionId: string;
    partyType: 'first' | 'second' | 'both';
    messageType: 'message' | 'reminder' | 'update';
    messageContent: string;
  }) => Promise<void>;
}

const MessageForm: React.FC<MessageFormProps> = ({
  isOpen,
  onClose,
  suggestion,
  onSend,
}) => {
  const [partyType, setPartyType] = useState<'first' | 'second' | 'both'>(
    'both'
  );
  const [messageType, setMessageType] = useState<
    'message' | 'reminder' | 'update'
  >('message');
  const [messageContent, setMessageContent] = useState('');
  const [isSubmitting, setIsSubmitting] = useState(false);

  const handleSubmit = async () => {
    if (!suggestion || !messageContent.trim()) return;

    try {
      setIsSubmitting(true);

      await onSend({
        suggestionId: suggestion.id,
        partyType,
        messageType,
        messageContent,
      });

      toast.success(
        `ההודעה נשלחה ${
          partyType === 'first'
            ? `ל${suggestion.firstParty.firstName}`
            : partyType === 'second'
              ? `ל${suggestion.secondParty.firstName}`
              : 'לשני הצדדים'
        }`
      );

      // Reset form
      setMessageContent('');
      setPartyType('both');
      setMessageType('message');
      onClose();
    } catch (error) {
      toast.error('שגיאה בשליחת ההודעה');
      console.error('Error sending message:', error);
    } finally {
      setIsSubmitting(false);
    }
  };

  const getMessagePlaceholder = () => {
    switch (messageType) {
      case 'reminder':
        return 'הודעת תזכורת למועמד/ת לגבי ההצעה...';
      case 'update':
        return 'עדכון לגבי סטטוס ההצעה או מידע חדש...';
      default:
        return 'הודעה אישית למועמד/ת...';
    }
  };

  const getMessageTypeInfo = (type: string) => {
    switch (type) {
      case 'reminder':
        return {
          label: 'תזכורת',
          icon: Clock,
          color: 'from-yellow-500 to-amber-500',
          bgColor: 'from-yellow-50 to-amber-50',
          description: 'הודעה להזכרה על ההצעה או פעולה נדרשת',
        };
      case 'update':
        return {
          label: 'עדכון סטטוס',
          icon: Info,
          color: 'from-blue-500 to-cyan-500',
          bgColor: 'from-blue-50 to-cyan-50',
          description: 'עדכון על שינוי במצב ההצעה או מידע חדש',
        };
      default:
        return {
          label: 'הודעה רגילה',
          icon: MessageCircle,
          color: 'from-purple-500 to-pink-500',
          bgColor: 'from-purple-50 to-pink-50',
          description: 'הודעה אישית כללית',
        };
    }
  };

  const getPartyTypeInfo = (type: string) => {
    switch (type) {
      case 'first':
        return {
          label: `${suggestion?.firstParty.firstName} ${suggestion?.firstParty.lastName} (צד א')`,
          icon: User,
          color: 'from-green-500 to-emerald-500',
        };
      case 'second':
        return {
          label: `${suggestion?.secondParty.firstName} ${suggestion?.secondParty.lastName} (צד ב')`,
          icon: User,
          color: 'from-blue-500 to-cyan-500',
        };
      default:
        return {
          label: 'שני הצדדים',
          icon: Users,
          color: 'from-purple-500 to-pink-500',
        };
    }
  };

  if (!suggestion) return null;

  const messageTypeInfo = getMessageTypeInfo(messageType);
  const partyTypeInfo = getPartyTypeInfo(partyType);
  const MessageTypeIcon = messageTypeInfo.icon;
  const PartyTypeIcon = partyTypeInfo.icon;

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent
        className="max-w-4xl border-0 shadow-2xl rounded-3xl p-0 overflow-hidden"
        dir="rtl"
      >
        {/* Hero Header */}
        <div
          className={cn(
            'relative overflow-hidden bg-gradient-to-br',
            messageTypeInfo.bgColor,
            'border-b border-gray-100'
          )}
        >
          <div className="absolute inset-0">
            <div className="absolute top-0 right-0 w-64 h-64 bg-gradient-to-br from-white/30 to-transparent rounded-full blur-3xl"></div>
            <div className="absolute bottom-0 left-0 w-48 h-48 bg-gradient-to-br from-white/20 to-transparent rounded-full blur-2xl"></div>
          </div>

          <div className="relative z-10 p-8">
            <DialogHeader>
              <div className="flex items-center justify-between mb-4">
                <div className="flex items-center gap-4">
                  <div className="p-3 rounded-full bg-white/20 backdrop-blur-sm shadow-lg">
                    <Send className="w-8 h-8 text-purple-600" />
                  </div>
                  <div>
                    <DialogTitle className="text-3xl font-bold text-gray-800">
                      שליחת הודעה
                    </DialogTitle>
                    <DialogDescription className="text-lg text-gray-600 mt-1">
                      שליחת הודעה הקשורה להצעת השידוך בין{' '}
                      {suggestion.firstParty.firstName}{' '}
                      {suggestion.firstParty.lastName} ל
                      {suggestion.secondParty.firstName}{' '}
                      {suggestion.secondParty.lastName}
                    </DialogDescription>
                  </div>
                </div>

                <Button
                  variant="ghost"
                  size="icon"
                  onClick={onClose}
                  className="rounded-full h-12 w-12 text-gray-500 hover:text-gray-700 hover:bg-white/50 backdrop-blur-sm"
                >
                  <X className="w-6 h-6" />
                </Button>
              </div>

              <div className="flex items-center gap-4">
                <Badge
                  className={cn(
                    'px-4 py-2 font-bold shadow-lg bg-gradient-to-r text-white',
                    messageTypeInfo.color
                  )}
                >
                  <MessageTypeIcon className="w-4 h-4 ml-2" />
                  {messageTypeInfo.label}
                </Badge>

                <Badge
                  className={cn(
                    'px-4 py-2 font-bold shadow-lg bg-gradient-to-r text-white',
                    partyTypeInfo.color
                  )}
                >
                  <PartyTypeIcon className="w-4 h-4 ml-2" />
                  {partyTypeInfo.label}
                </Badge>
              </div>
            </DialogHeader>
          </div>
        </div>

        <div className="p-8 space-y-8">
          {/* Suggestion Info Alert */}
          <Alert className="border-0 bg-gradient-to-r from-indigo-50 to-purple-50 shadow-lg rounded-2xl">
            <Heart className="h-5 w-5 text-indigo-500" />
            <AlertDescription className="text-indigo-800 font-medium">
              <strong>הצעה #{suggestion.id.slice(-8)}:</strong> הודעה זו תישלח
              במסגרת הצעת השידוך הפעילה.
              <br />
              <strong>סטטוס נוכחי:</strong> {suggestion.status} •{' '}
              <strong>עדיפות:</strong> {suggestion.priority}
            </AlertDescription>
          </Alert>

          <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
            {/* Recipient Selection */}
            <div className="p-6 bg-white rounded-2xl shadow-xl border-0 hover:shadow-2xl transition-all duration-300">
              <div className="flex items-center gap-3 mb-4">
                <div className="p-2 rounded-full bg-gradient-to-r from-green-500 to-emerald-500 text-white shadow-lg">
                  <Users className="w-5 h-5" />
                </div>
                <Label className="text-lg font-bold text-gray-800">
                  שלח אל
                </Label>
              </div>

              <Select
                value={partyType}
                onValueChange={(value) =>
                  setPartyType(value as 'first' | 'second' | 'both')
                }
              >
                <SelectTrigger className="h-12 border-2 border-gray-200 hover:border-green-300 focus:border-green-500 rounded-xl transition-all">
                  <SelectValue placeholder="בחר נמען" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="first">
                    <div className="flex items-center gap-3">
                      <User className="w-4 h-4 text-green-500" />
                      <div className="text-right">
                        <div className="font-medium">
                          {suggestion.firstParty.firstName}{' '}
                          {suggestion.firstParty.lastName}
                        </div>
                        <div className="text-xs text-gray-500">(צד א')</div>
                      </div>
                    </div>
                  </SelectItem>
                  <SelectItem value="second">
                    <div className="flex items-center gap-3">
                      <User className="w-4 h-4 text-blue-500" />
                      <div className="text-right">
                        <div className="font-medium">
                          {suggestion.secondParty.firstName}{' '}
                          {suggestion.secondParty.lastName}
                        </div>
                        <div className="text-xs text-gray-500">(צד ב')</div>
                      </div>
                    </div>
                  </SelectItem>
                  <SelectItem value="both">
                    <div className="flex items-center gap-3">
                      <Users className="w-4 h-4 text-purple-500" />
                      <div className="font-medium">שני הצדדים</div>
                    </div>
                  </SelectItem>
                </SelectContent>
              </Select>

              <div className="mt-3 p-3 bg-green-50 rounded-xl">
                <p className="text-sm text-green-700">
                  <PartyTypeIcon className="w-4 h-4 inline ml-1" />
                  ההודעה תישלח ל{partyTypeInfo.label}
                </p>
              </div>
            </div>

            {/* Message Type */}
            <div className="p-6 bg-white rounded-2xl shadow-xl border-0 hover:shadow-2xl transition-all duration-300">
              <div className="flex items-center gap-3 mb-4">
                <div
                  className={cn(
                    'p-2 rounded-full bg-gradient-to-r text-white shadow-lg',
                    messageTypeInfo.color
                  )}
                >
                  <MessageTypeIcon className="w-5 h-5" />
                </div>
                <Label className="text-lg font-bold text-gray-800">
                  סוג ההודעה
                </Label>
              </div>

              <Select
                value={messageType}
                onValueChange={(value) =>
                  setMessageType(value as 'message' | 'reminder' | 'update')
                }
              >
                <SelectTrigger className="h-12 border-2 border-gray-200 hover:border-purple-300 focus:border-purple-500 rounded-xl transition-all">
                  <SelectValue placeholder="בחר סוג הודעה" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="message">
                    <div className="flex items-center gap-3">
                      <MessageCircle className="w-4 h-4 text-purple-500" />
                      <div className="text-right">
                        <div className="font-medium">הודעה רגילה</div>
                        <div className="text-xs text-gray-500">
                          הודעה אישית כללית
                        </div>
                      </div>
                    </div>
                  </SelectItem>
                  <SelectItem value="reminder">
                    <div className="flex items-center gap-3">
                      <Clock className="w-4 h-4 text-yellow-500" />
                      <div className="text-right">
                        <div className="font-medium">תזכורת</div>
                        <div className="text-xs text-gray-500">
                          הזכרה על פעולה נדרשת
                        </div>
                      </div>
                    </div>
                  </SelectItem>
                  <SelectItem value="update">
                    <div className="flex items-center gap-3">
                      <Info className="w-4 h-4 text-blue-500" />
                      <div className="text-right">
                        <div className="font-medium">עדכון סטטוס</div>
                        <div className="text-xs text-gray-500">
                          עדכון על שינוי במצב
                        </div>
                      </div>
                    </div>
                  </SelectItem>
                </SelectContent>
              </Select>

              <div
                className={cn(
                  'mt-3 p-3 rounded-xl bg-gradient-to-r',
                  messageTypeInfo.bgColor
                )}
              >
                <p
                  className="text-sm font-medium"
                  style={{ color: messageTypeInfo.color.split(' ')[1] }}
                >
                  <MessageTypeIcon className="w-4 h-4 inline ml-1" />
                  {messageTypeInfo.description}
                </p>
              </div>
            </div>
          </div>

          {/* Message Content */}
          <div className="p-6 bg-white rounded-2xl shadow-xl border-0 hover:shadow-2xl transition-all duration-300">
            <div className="flex items-center gap-3 mb-4">
              <div className="p-2 rounded-full bg-gradient-to-r from-indigo-500 to-purple-500 text-white shadow-lg">
                <Mail className="w-5 h-5" />
              </div>
              <Label className="text-lg font-bold text-gray-800">
                תוכן ההודעה
              </Label>
            </div>

            <Textarea
              value={messageContent}
              onChange={(e) => setMessageContent(e.target.value)}
              placeholder={getMessagePlaceholder()}
              className="h-48 border-2 border-gray-200 focus:border-indigo-400 rounded-xl transition-all resize-none text-lg"
              dir="rtl"
            />

            <div className="mt-3 flex items-center justify-between">
              <div className="flex items-center gap-2 text-sm text-gray-500">
                <Sparkles className="w-4 h-4" />
                <span>המערכת תוסיף אוטומטית חתימה מקצועית</span>
              </div>
              <div className="text-sm text-gray-500">
                {messageContent.length}/1000 תווים
              </div>
            </div>
          </div>

          {/* Preview Section */}
          {messageContent.trim() && (
            <div className="p-6 bg-gradient-to-r from-gray-50 to-slate-50 rounded-2xl border-2 border-gray-200">
              <div className="flex items-center gap-3 mb-4">
                <div className="p-2 rounded-full bg-gradient-to-r from-gray-500 to-slate-500 text-white shadow-lg">
                  <Zap className="w-5 h-5" />
                </div>
                <h3 className="text-lg font-bold text-gray-800">
                  תצוגה מקדימה
                </h3>
              </div>

              <div className="bg-white p-4 rounded-xl border-2 border-gray-100 shadow-inner">
                <div className="text-sm text-gray-600 mb-2">
                  אל: {partyTypeInfo.label} • סוג: {messageTypeInfo.label}
                </div>
                <div className="text-gray-800 leading-relaxed whitespace-pre-wrap">
                  {messageContent}
                </div>
                <div className="mt-4 pt-3 border-t border-gray-100 text-xs text-gray-500">
                  בברכה,
                  <br />
                  צוות מערכת השידוכים
                </div>
              </div>
            </div>
          )}
        </div>

        <DialogFooter className="p-8 border-t border-gray-100 bg-gradient-to-r from-gray-50 to-slate-50">
          <div className="flex justify-between w-full items-center">
            <div className="flex items-center gap-2 text-sm text-gray-500">
              <Bell className="w-4 h-4" />
              <span>הנמענים יקבלו התראה באימייל ובוואטסאפ</span>
            </div>
            <div className="flex gap-4">
              <Button
                variant="outline"
                onClick={onClose}
                disabled={isSubmitting}
                className="px-8 py-3 border-2 border-gray-300 hover:bg-gray-50 rounded-xl transition-all"
              >
                ביטול
              </Button>
              <Button
                onClick={handleSubmit}
                disabled={isSubmitting || !messageContent.trim()}
                className="px-8 py-3 bg-gradient-to-r from-purple-600 via-pink-600 to-blue-600 hover:from-purple-700 hover:via-pink-700 hover:to-blue-700 text-white shadow-xl hover:shadow-2xl transition-all duration-300 rounded-xl transform hover:scale-105"
              >
                {isSubmitting ? (
                  <>
                    <Send className="w-5 h-5 ml-2 animate-pulse" />
                    שולח...
                  </>
                ) : (
                  <>
                    <Send className="w-5 h-5 ml-2" />
                    שלח הודעה
                  </>
                )}
              </Button>
            </div>
          </div>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
};

export default MessageForm;
--- End of Content for MessageForm.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\app\components\matchmaker\suggestions\suggestions_contents.txt
--------------------------------------------------------------------------------
[This is the output log file itself. Content not included.]

================================================================================
Directory: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\app\components\matchmaker\suggestions\NewSuggestionForm
================================================================================

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\app\components\matchmaker\suggestions\NewSuggestionForm\CandidateSelector.tsx
--------------------------------------------------------------------------------
Content:
// src/app/components/matchmaker/suggestions/NewSuggestionForm/CandidateSelector.tsx

import React, { useState, useCallback, KeyboardEvent } from "react";
import { Search, AlertTriangle, Clock } from "lucide-react";
import { Input } from "@/components/ui/input";
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/components/ui/popover";
import {
  Command,
  CommandEmpty,
  CommandGroup,
  CommandInput,
  CommandList,
} from "@/components/ui/command";
import { Button } from "@/components/ui/button";
import { Card } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { calculateAge } from "@/lib/utils";
import type { Candidate } from "../../new/types/candidates";
import { toast } from "sonner"; // Make sure to import toast

interface CandidateSelectorProps {
  value: Candidate | null;
  onChange: (candidate: Candidate | null) => void;
  otherParty?: Candidate | null;
  label: string;
  candidates: Candidate[];
  className?: string;
  fieldName: string;
  error?: string;
}

const CandidateSelector: React.FC<CandidateSelectorProps> = ({
  value,
  onChange,
  otherParty,
  label,
  candidates,
  className,
  error,
}) => {
  const [open, setOpen] = useState(false);
  const [inputValue, setInputValue] = useState("");
  const [activeIndex, setActiveIndex] = useState(-1);

  const filteredCandidates = candidates.filter((candidate) => {
    if (otherParty && candidate.id === otherParty.id) return false;

    if (inputValue) {
      const searchTerm = inputValue.toLowerCase();
      return (
        candidate.firstName.toLowerCase().includes(searchTerm) ||
        candidate.lastName.toLowerCase().includes(searchTerm) ||
        candidate.profile.city?.toLowerCase().includes(searchTerm) ||
        candidate.profile.occupation?.toLowerCase().includes(searchTerm)
      );
    }
    return true;
  });

  const formatCandidateDisplay = useCallback((candidate: Candidate) => {
    const age = calculateAge(new Date(candidate.profile.birthDate));
    return `${candidate.firstName} ${candidate.lastName}, ${age}${
      candidate.profile.city ? `, ${candidate.profile.city}` : ""
    }`;
  }, []);

  const handleSelect = useCallback(
    (candidate: Candidate) => {
      // Check if the candidate is blocked by an active suggestion
      if (candidate.suggestionStatus?.status === 'BLOCKED') {
        toast.error("לא ניתן לבחור מועמד זה", {
          description: `${candidate.firstName} ${candidate.lastName} כבר נמצא/ת בהצעה פעילה עם ${candidate.suggestionStatus.withCandidateName}.`,
        });
        return; // Prevent selection
      }
      
      onChange(candidate);
      setOpen(false);
      setInputValue("");
      setActiveIndex(-1);
    },
    [onChange]
  );

  const handleKeyDown = (e: KeyboardEvent) => {
    if (!open) return;

    switch (e.key) {
      case "ArrowDown":
        e.preventDefault();
        setActiveIndex((prev) =>
          prev < filteredCandidates.length - 1 ? prev + 1 : prev
        );
        break;
      case "ArrowUp":
        e.preventDefault();
        setActiveIndex((prev) => (prev > 0 ? prev - 1 : prev));
        break;
      case "Enter":
        e.preventDefault();
        if (activeIndex >= 0 && activeIndex < filteredCandidates.length) {
          handleSelect(filteredCandidates[activeIndex]);
        }
        break;
      case "Escape":
        e.preventDefault();
        setOpen(false);
        setActiveIndex(-1);
        break;
    }
  };

  return (
    <div className={className}>
      <div className="space-y-2">
        <label className="text-sm font-medium">{label}</label>
        <Popover open={open} onOpenChange={setOpen}>
          <PopoverTrigger asChild>
            <div className="relative w-full">
              <Search className="absolute right-3 top-2.5 h-4 w-4 text-gray-500" />
              <Input
                value={value ? formatCandidateDisplay(value) : inputValue}
                onChange={(e) => {
                  setInputValue(e.target.value);
                  if (!open) setOpen(true);
                  setActiveIndex(-1);
                }}
                onKeyDown={handleKeyDown}
                onClick={() => !open && setOpen(true)}
                placeholder="בחר/י מועמד/ת..."
                className="pl-10 text-right cursor-pointer"
                role="combobox"
                aria-expanded={open}
                aria-controls="candidate-listbox"
                aria-activedescendant={
                  activeIndex >= 0
                    ? `candidate-${filteredCandidates[activeIndex]?.id}`
                    : undefined
                }
              />
              {error && <p className="text-sm text-red-500 mt-1">{error}</p>}
            </div>
          </PopoverTrigger>
          <PopoverContent
            className="p-0 w-[400px]"
            align="start"
            side="bottom"
            sideOffset={4}
          >
            <Command shouldFilter={false}>
              <CommandInput
                placeholder="חיפוש מועמדים..."
                value={inputValue}
                onValueChange={setInputValue}
              />
              <CommandList
                className="max-h-[300px] overflow-auto"
                id="candidate-listbox"
                role="listbox"
              >
                <CommandEmpty>לא נמצאו תוצאות</CommandEmpty>
                <CommandGroup>
                  {filteredCandidates.map((candidate, index) => {
                    const isBlocked = candidate.suggestionStatus?.status === 'BLOCKED';
                    return (
                      <div
                        key={candidate.id}
                        onClick={() => handleSelect(candidate)}
                        className={`flex items-start gap-3 p-2 text-right ${
                          isBlocked 
                            ? 'cursor-not-allowed opacity-60' 
                            : 'cursor-pointer hover:bg-accent/50'
                        } ${index === activeIndex ? "bg-accent" : ""}`}
                        role="option"
                        id={`candidate-${candidate.id}`}
                        aria-selected={index === activeIndex}
                        onMouseEnter={() => setActiveIndex(index)}
                      >
                        <div className="flex-1">
                          <div className="font-medium">
                            {formatCandidateDisplay(candidate)}
                          </div>
                          <div className="text-sm text-gray-500">
                            {candidate.profile.religiousLevel} | {candidate.profile.occupation}
                          </div>
                          {candidate.suggestionStatus?.status === 'BLOCKED' && (
                            <Badge variant="destructive" className="mt-2 font-normal">
                              <AlertTriangle className="w-3.5 h-3.5 ml-1.5" />
                              בהצעה פעילה עם: {candidate.suggestionStatus.withCandidateName}
                            </Badge>
                          )}
                          {candidate.suggestionStatus?.status === 'PENDING' && (
                            <Badge variant="outline" className="mt-2 font-normal text-amber-800 bg-amber-50 border-amber-200">
                              <Clock className="w-3.5 h-3.5 ml-1.5" />
                              הצעה ממתינה עם: {candidate.suggestionStatus.withCandidateName}
                            </Badge>
                          )}
                        </div>
                      </div>
                    );
                  })}
                </CommandGroup>
              </CommandList>
            </Command>
          </PopoverContent>
        </Popover>
      </div>

      {value && (
        <Card className="mt-2 p-4">
          <div className="flex justify-between items-start">
            <Button
              variant="ghost"
              size="sm"
              onClick={() => { /* Implement view profile handler */ }}
              className="text-primary"
            >
              צפה בפרופיל מלא
            </Button>
            <Button
              variant="ghost"
              size="sm"
              onClick={() => onChange(null)}
              className="text-destructive"
            >
              הסר בחירה
            </Button>
          </div>
        </Card>
      )}
    </div>
  );
};

export default CandidateSelector;
--- End of Content for CandidateSelector.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\app\components\matchmaker\suggestions\NewSuggestionForm\MatchPreview.tsx
--------------------------------------------------------------------------------
Content:
import React from "react";
import { Card } from "@/components/ui/card";
import { Progress } from "@/components/ui/progress";
import { Badge } from "@/components/ui/badge";
import { CheckCircle, AlertCircle, XCircle } from "lucide-react";
import { calculateMatchScore } from "../utils/matchingAlgorithm";
import type { Candidate } from "../../new/types/candidates";
import type { MatchScore } from "../utils/matchingAlgorithm";

interface MatchPreviewProps {
  firstParty: Candidate;
  secondParty: Candidate;
  className?: string;
}

const MatchPreview: React.FC<MatchPreviewProps> = ({
  firstParty,
  secondParty,
  className,
}) => {
  // Calculate match score using the existing algorithm
  const matchScore: MatchScore | null = calculateMatchScore(
    firstParty.profile,
    secondParty.profile
  );

  if (!matchScore) {
    return (
      <Card className={`p-4 ${className}`}>
        <div className="flex items-center gap-2 text-yellow-600">
          <AlertCircle className="w-5 h-5" />
          <span>לא ניתן לחשב התאמה - חסרים נתונים חיוניים</span>
        </div>
      </Card>
    );
  }

  // Determine match quality indicators
  const getMatchQuality = (score: number) => {
    if (score >= 85)
      return {
        icon: CheckCircle,
        color: "text-green-600",
        text: "התאמה גבוהה",
      };
    if (score >= 70)
      return { icon: CheckCircle, color: "text-blue-600", text: "התאמה טובה" };
    if (score >= 50)
      return {
        icon: AlertCircle,
        color: "text-yellow-600",
        text: "התאמה בינונית",
      };
    return { icon: XCircle, color: "text-red-600", text: "התאמה נמוכה" };
  };

  const quality = getMatchQuality(matchScore.score);
  const Icon = quality.icon;

  return (
    <Card className={`p-6 ${className}`}>
      <div className="space-y-6">
        {/* Match Score */}
        <div className="flex items-center justify-between">
          <div className="flex items-center gap-2">
            <Icon className={`w-5 h-5 ${quality.color}`} />
            <span className="font-medium">{quality.text}</span>
          </div>
          <Badge variant="outline" className="text-lg">
            {Math.round(matchScore.score)}%
          </Badge>
        </div>

        {/* Score Bar */}
        <Progress value={matchScore.score} className="h-2" />

        {/* Match Criteria */}
        <div className="space-y-4">
          <h4 className="font-medium">קריטריונים מרכזיים:</h4>
          <div className="grid gap-3">
            {matchScore.criteria.map((criterion) => (
              <div
                key={criterion.name}
                className="flex items-center justify-between"
              >
                <span className="text-gray-600">
                  {criterion.name === "age" && "גיל"}
                  {criterion.name === "location" && "מיקום"}
                  {criterion.name === "religious" && "רמה דתית"}
                </span>
                <div className="flex items-center gap-2">
                  <Progress
                    value={criterion.score * 100}
                    className="w-24 h-1.5"
                  />
                  <span className="text-sm font-medium w-8 text-center">
                    {Math.round(criterion.score * 100)}%
                  </span>
                </div>
              </div>
            ))}
          </div>
        </div>

        {/* Match Reasons */}
        {matchScore.reasons.length > 0 && (
          <div className="space-y-2">
            <h4 className="font-medium">סיבות להתאמה:</h4>
            <ul className="space-y-1 text-gray-600">
              {matchScore.reasons.map((reason, index) => (
                <li key={index} className="flex items-center gap-2">
                  <span>•</span>
                  <span>{reason}</span>
                </li>
              ))}
            </ul>
          </div>
        )}
      </div>
    </Card>
  );
};

export default MatchPreview;
--- End of Content for MatchPreview.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\app\components\matchmaker\suggestions\NewSuggestionForm\SuggestionDetails.tsx
--------------------------------------------------------------------------------
Content:
// src/app/components/matchmaker/suggestions/NewSuggestionForm/SuggestionDetails.tsx

"use client";
import React, { useState } from "react";
import { useFormContext } from "react-hook-form";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Card, CardContent } from "@/components/ui/card";
import { Priority } from "@prisma/client";
import { Label } from "@/components/ui/label";
import { Button } from "@/components/ui/button";
import { Textarea } from "@/components/ui/textarea";
import { toast } from "sonner";
import { Loader2, Sparkles, AlertTriangle } from "lucide-react";
import { Alert, AlertDescription } from "@/components/ui/alert";
import type { NewSuggestionFormData } from "./schema";
import type { Candidate } from "../../new/types/candidates";

interface SuggestionDetailsProps {
  firstParty: Candidate;
  secondParty: Candidate;
}

const SuggestionDetails: React.FC<SuggestionDetailsProps> = ({ firstParty, secondParty }) => {
  const { register, formState: { errors }, setValue, watch } = useFormContext<NewSuggestionFormData>();
  const [isGeneratingRationale, setIsGeneratingRationale] = useState(false);

  const priority = watch("priority", Priority.MEDIUM);

  const handleGenerateRationale = async () => {
    setIsGeneratingRationale(true);
    toast.info("ה-AI מנסח את חבילת הנימוקים...");
    try {
      const response = await fetch('/api/ai/generate-suggestion-rationale', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ userId1: firstParty.id, userId2: secondParty.id }),
      });

      const data = await response.json();

      if (!response.ok || !data.success || !data.rationales) {
        throw new Error(data.error || "שגיאה בייצור הנימוקים");
      }

      // --- START OF CHANGE: Populate all three fields ---
      const { generalRationale, rationaleForParty1, rationaleForParty2 } = data.rationales;

      setValue('matchingReason', generalRationale, { shouldValidate: true, shouldDirty: true });
      setValue('firstPartyNotes', rationaleForParty1, { shouldValidate: true, shouldDirty: true });
      setValue('secondPartyNotes', rationaleForParty2, { shouldValidate: true, shouldDirty: true });
      // --- END OF CHANGE ---

      toast.success("הנימוקים נוצרו בהצלחה והוזנו בשדות המתאימים.");

    } catch (error) {
      console.error("Failed to generate rationales:", error);
      toast.error(error instanceof Error ? error.message : "שגיאה לא צפויה");
    } finally {
      setIsGeneratingRationale(false);
    }
  };

  return (
    <div className="space-y-6">
      <Card>
        <CardContent className="pt-6 space-y-6">
          <div className="space-y-2">
            <Label htmlFor="priority">עדיפות ההצעה</Label>
            <Select
              onValueChange={(value: Priority) => setValue("priority", value, { shouldValidate: true })}
              defaultValue={priority}
              name="priority"
            >
              <SelectTrigger id="priority"><SelectValue placeholder="בחר/י עדיפות" /></SelectTrigger>
              <SelectContent>
                <SelectItem value={Priority.URGENT}>דחופה</SelectItem>
                <SelectItem value={Priority.HIGH}>גבוהה</SelectItem>
                <SelectItem value={Priority.MEDIUM}>רגילה</SelectItem>
                <SelectItem value={Priority.LOW}>נמוכה</SelectItem>
              </SelectContent>
            </Select>
            {errors.priority && <p className="text-sm text-red-500 mt-1">{errors.priority.message}</p>}
          </div>

          <div className="space-y-2">
            <div className="flex justify-between items-center">
              <Label htmlFor="matchingReason">סיבת התאמה (כללי, יוצג לצדדים)</Label>
              <Button type="button" variant="ghost" size="sm" onClick={handleGenerateRationale} disabled={isGeneratingRationale}>
                {isGeneratingRationale ? (
                  <Loader2 className="w-4 h-4 ml-2 animate-spin" />
                ) : (
                  <Sparkles className="w-4 h-4 ml-2 text-purple-500" />
                )}
                {isGeneratingRationale ? 'מנסח...' : 'צור נימוקים (AI)'}
              </Button>
            </div>
            <Textarea
              id="matchingReason"
              {...register("matchingReason")}
              placeholder="נימוק כללי המסביר מדוע יש התאמה בין הצדדים..."
              className="min-h-[120px]"
            />
            {errors.matchingReason && <p className="text-sm text-red-500 mt-1">{errors.matchingReason.message}</p>}
             <Alert variant="default" className="mt-2 text-xs p-3 bg-blue-50 border-blue-200">
                <AlertTriangle className="h-4 w-4 text-blue-500" />
                <AlertDescription>
                  לחיצה על כפתור ה-AI תמלא אוטומטית את שדה זה וגם את שדות ההערות האישיות לכל צד.
                </AlertDescription>
            </Alert>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div className="space-y-2">
              <Label htmlFor="firstPartyNotes">הערות אישיות לצד א׳ ({firstParty.firstName})</Label>
              <Textarea
                id="firstPartyNotes"
                {...register("firstPartyNotes")}
                placeholder="טקסט אישי המדגיש את היתרונות של צד ב' עבור צד א'..."
                className="min-h-[140px]"
              />
              {errors.firstPartyNotes && <p className="text-sm text-red-500 mt-1">{errors.firstPartyNotes.message}</p>}
            </div>
            <div className="space-y-2">
              <Label htmlFor="secondPartyNotes">הערות אישיות לצד ב׳ ({secondParty.firstName})</Label>
              <Textarea
                id="secondPartyNotes"
                {...register("secondPartyNotes")}
                placeholder="טקסט אישי המדגיש את היתרונות של צד א' עבור צד ב'..."
                className="min-h-[140px]"
              />
              {errors.secondPartyNotes && <p className="text-sm text-red-500 mt-1">{errors.secondPartyNotes.message}</p>}
            </div>
          </div>

          <div className="space-y-2">
            <Label htmlFor="internalNotes">הערות פנימיות (לצוות השדכנים)</Label>
            <Textarea
              id="internalNotes"
              {...register("internalNotes")}
              placeholder="הערות והנחיות לשימוש פנימי בלבד..."
              className="min-h-[100px]"
            />
            {errors.internalNotes && <p className="text-sm text-red-500 mt-1">{errors.internalNotes.message}</p>}
          </div>
          
          <div className="space-y-2">
            <Label>תאריך יעד להחלטה</Label>
            <Select
              onValueChange={(value) => {
                const days = parseInt(value, 10);
                const deadline = new Date();
                deadline.setDate(deadline.getDate() + days);
                setValue("decisionDeadline", deadline, { shouldValidate: true });
              }}
              defaultValue="14"
            >
              <SelectTrigger><SelectValue /></SelectTrigger>
              <SelectContent>
                <SelectItem value="3">3 ימים</SelectItem>
                <SelectItem value="7">7 ימים</SelectItem>
                <SelectItem value="14">14 ימים</SelectItem>
                <SelectItem value="30">30 ימים</SelectItem>
              </SelectContent>
            </Select>
            {errors.decisionDeadline && <p className="text-sm text-red-500 mt-1">{errors.decisionDeadline.message}</p>}
          </div>
        </CardContent>
      </Card>
    </div>
  );
};

export default SuggestionDetails;
--- End of Content for SuggestionDetails.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\app\components\matchmaker\suggestions\NewSuggestionForm\index.tsx
--------------------------------------------------------------------------------
Content:
// src/app/components/matchmaker/suggestions/NewSuggestionForm/index.tsx

"use client";
import React, { useState, useEffect } from "react";
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription, DialogFooter, DialogClose } from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { toast } from "sonner";
import { useForm, FormProvider } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { Priority, MatchSuggestionStatus } from "@prisma/client";
import { Separator } from "@/components/ui/separator";
import { UserPlus, Sparkles, Loader2, BarChart2, CheckCircle, Users } from "lucide-react";

// Types
import type { Candidate } from "../../new/types/candidates";
import { newSuggestionSchema, type NewSuggestionFormData } from "./schema";

// Components
import SuggestionDetails from "./SuggestionDetails";
import MatchPreview from "./MatchPreview";
import CandidateSelector from "./CandidateSelector";
import { AiMatchAnalysisDialog } from "../../new/dialogs/AiMatchAnalysisDialog";

interface NewSuggestionFormProps {
  isOpen: boolean;
  onClose: () => void;
  candidates: Candidate[];
  selectedCandidate?: Candidate | null;
  onSubmit: (data: NewSuggestionFormData) => Promise<void>;
}

const NewSuggestionForm: React.FC<NewSuggestionFormProps> = ({ isOpen, onClose, candidates, selectedCandidate, onSubmit }) => {
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [firstParty, setFirstParty] = useState<Candidate | null>(null);
  const [secondParty, setSecondParty] = useState<Candidate | null>(null);
  const [showAnalysisDialog, setShowAnalysisDialog] = useState(false);

  const form = useForm<NewSuggestionFormData>({
    resolver: zodResolver(newSuggestionSchema),
    defaultValues: {
      priority: Priority.MEDIUM,
      status: MatchSuggestionStatus.DRAFT,
      decisionDeadline: new Date(new Date().setDate(new Date().getDate() + 14)), // Default to 2 weeks
    },
  });

  // Reset form and state when dialog opens or selectedCandidate changes
  useEffect(() => {
    if (isOpen) {
      form.reset({
        priority: Priority.MEDIUM,
        status: MatchSuggestionStatus.DRAFT,
        decisionDeadline: new Date(new Date().setDate(new Date().getDate() + 14)),
        firstPartyId: selectedCandidate?.id || "",
        secondPartyId: "",
      });
      setFirstParty(selectedCandidate || null);
      setSecondParty(null);
    }
  }, [isOpen, selectedCandidate, form]);

  const handleCandidateSelect = (type: "first" | "second") => (candidate: Candidate | null) => {
    const setter = type === 'first' ? setFirstParty : setSecondParty;
    const fieldName = type === 'first' ? 'firstPartyId' : 'secondPartyId';
    setter(candidate);
    form.setValue(fieldName, candidate?.id || "", { shouldValidate: true, shouldDirty: true });
  };

  const handleSubmit = form.handleSubmit(async (data) => {
    if (!firstParty || !secondParty) {
      toast.error("יש לבחור את שני הצדדים להצעה.");
      return;
    }

    setIsSubmitting(true);
    try {
      await onSubmit(data);
      toast.success("ההצעה נוצרה בהצלחה!");
      onClose();
    } catch (error) {
      toast.error("שגיאה ביצירת ההצעה: " + (error instanceof Error ? error.message : "שגיאה לא ידועה"));
    } finally {
      setIsSubmitting(false);
    }
  });

  const maleCandidates = candidates.filter(c => c.profile.gender === 'MALE');
  const femaleCandidates = candidates.filter(c => c.profile.gender === 'FEMALE');

  return (
    <>
      <Dialog open={isOpen} onOpenChange={onClose}>
        <DialogContent className="max-w-7xl w-full h-[95vh] flex flex-col p-0" dir="rtl">
          <DialogHeader className="px-6 py-4 border-b flex-shrink-0">
            <DialogTitle className="text-2xl flex items-center gap-3">
              <UserPlus className="text-primary"/>
              יצירת הצעת שידוך חדשה
            </DialogTitle>
            <DialogDescription>
              בחר שני מועמדים, נתח את ההתאמה ביניהם והגדר את פרטי ההצעה.
            </DialogDescription>
          </DialogHeader>

          <FormProvider {...form}>
            <form onSubmit={handleSubmit} className="flex-1 grid grid-cols-1 md:grid-cols-12 gap-6 p-6 overflow-hidden">
              
              {/* Left Panel: Male Selector */}
              <div className="md:col-span-3 flex flex-col gap-4">
                <CandidateSelector
                  label="צד א' (גבר)"
                  value={firstParty}
                  onChange={handleCandidateSelect("first")}
                  candidates={maleCandidates}
                  otherParty={secondParty}
                  fieldName="firstPartyId"
                  error={form.formState.errors.firstPartyId?.message}
                />
              </div>
              
              {/* Center Panel: Details and Actions */}
              <div className="md:col-span-6 flex flex-col gap-4 overflow-y-auto pr-2 pb-4">
                {firstParty && secondParty ? (
                  <>
                    <MatchPreview firstParty={firstParty} secondParty={secondParty} />
                     <div className="flex gap-2 justify-center">
                      <Button type="button" variant="outline" onClick={() => setShowAnalysisDialog(true)}>
                        <BarChart2 className="w-4 h-4 ml-2"/>
                        נתח התאמה מלא (AI)
                      </Button>
                     </div>
                    <SuggestionDetails firstParty={firstParty} secondParty={secondParty} />
                  </>
                ) : (
                  <div className="flex items-center justify-center h-full bg-gray-50 rounded-lg border-2 border-dashed">
                    <div className="text-center text-gray-500">
                        <Users className="mx-auto h-12 w-12 text-gray-300" />
                        <h3 className="mt-2 text-sm font-medium">בחר מועמדים</h3>
                        <p className="mt-1 text-sm text-gray-500">
                            יש לבחור מועמד ומועמדת מהעמודות בצדדים.
                        </p>
                    </div>
                  </div>
                )}
              </div>

              {/* Right Panel: Female Selector */}
              <div className="md:col-span-3 flex flex-col gap-4">
                <CandidateSelector
                  label="צד ב' (אישה)"
                  value={secondParty}
                  onChange={handleCandidateSelect("second")}
                  candidates={femaleCandidates}
                  otherParty={firstParty}
                  fieldName="secondPartyId"
                  error={form.formState.errors.secondPartyId?.message}
                />
              </div>

            </form>
          </FormProvider>

          <DialogFooter className="p-4 border-t flex-shrink-0">
            <div className="flex justify-between w-full items-center">
                <span className="text-xs text-gray-500">לאחר יצירת ההצעה, היא תופיע בסטטוס טיוטה.</span>
                <div className="flex gap-2">
                    <DialogClose asChild><Button variant="outline">ביטול</Button></DialogClose>
                    <Button
                        type="submit"
                        onClick={handleSubmit}
                        disabled={isSubmitting || !firstParty || !secondParty}
                    >
                        {isSubmitting ? <Loader2 className="w-4 h-4 animate-spin ml-2"/> : <CheckCircle className="w-4 h-4 ml-2"/>}
                        {isSubmitting ? "יוצר הצעה..." : "צור הצעה"}
                    </Button>
                </div>
            </div>
          </DialogFooter>
        </DialogContent>
      </Dialog>
      
      {firstParty && secondParty && (
        <AiMatchAnalysisDialog
          isOpen={showAnalysisDialog}
          onClose={() => setShowAnalysisDialog(false)}
          targetCandidate={firstParty}
          comparisonCandidates={[secondParty]}
        />
      )}
    </>
  );
};

export default NewSuggestionForm;
--- End of Content for index.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\app\components\matchmaker\suggestions\NewSuggestionForm\schema.ts
--------------------------------------------------------------------------------
Content:
import { z } from "zod";
import { addDays, isBefore } from 'date-fns';

// Validation rules

const MIN_DECISION_DAYS = 1;
const MAX_DECISION_DAYS = 30;

// Helper function to validate dates
const isValidDeadlineDate = (date: Date | null | undefined, minDays: number, maxDays: number) => {
  if (!date) return false;
  
  const today = new Date();
  const minDate = addDays(today, minDays);
  const maxDate = addDays(today, maxDays);
  
  return !isBefore(date, minDate) && !isBefore(maxDate, date);
};

// Schema for new suggestion
export const newSuggestionSchema = z.object({
  firstPartyId: z.string({
    required_error: "יש לבחור מועמד/ת ראשון/ה",
  }),
  
  secondPartyId: z.string({
    required_error: "יש לבחור מועמד/ת שני/ה",
  }),
  
  priority: z.enum(['LOW', 'MEDIUM', 'HIGH', 'URGENT'] as const, {
    required_error: "יש לבחור רמת עדיפות",
  }),

  status: z.enum([
    'DRAFT',
    'PENDING_FIRST_PARTY',
    'FIRST_PARTY_APPROVED',
    'FIRST_PARTY_DECLINED',
    'PENDING_SECOND_PARTY',
    'SECOND_PARTY_APPROVED',
    'SECOND_PARTY_DECLINED',
    'AWAITING_MATCHMAKER_APPROVAL',
    'CONTACT_DETAILS_SHARED',
    'AWAITING_FIRST_DATE_FEEDBACK',
    'THINKING_AFTER_DATE',
    'PROCEEDING_TO_SECOND_DATE',
    'ENDED_AFTER_FIRST_DATE',
    'MEETING_PENDING',
    'MEETING_SCHEDULED',
    'MATCH_APPROVED',
    'MATCH_DECLINED',
    'DATING',
    'ENGAGED',
    'MARRIED',
    'EXPIRED',
    'CLOSED',
    'CANCELLED'
  ] as const, {
    required_error: "יש לבחור סטטוס",
  }).default('DRAFT'),

  matchingReason: z.string()
    .max(500, "סיבת ההתאמה לא יכולה להכיל יותר מ-500 תווים")
    .optional(),

  internalNotes: z.string()
    .max(1000, "ההערות הפנימיות לא יכולות להכיל יותר מ-1000 תווים")
    .optional(),

  firstPartyNotes: z.string()
    .max(500, "ההערות לצד א' לא יכולות להכיל יותר מ-500 תווים")
    .optional(),

  secondPartyNotes: z.string()
    .max(500, "ההערות לצד ב' לא יכולות להכיל יותר מ-500 תווים")
    .optional(),


  decisionDeadline: z.date({
    required_error: "יש לבחור תאריך יעד להחלטה ",
  })
}).refine(
  (data) => data.firstPartyId !== data.secondPartyId,
  {
    message: "לא ניתן ליצור הצעה עבור אותו מועמד",
    path: ["secondPartyId"]
  }

).refine(
  (data) => isValidDeadlineDate(data.decisionDeadline, MIN_DECISION_DAYS, MAX_DECISION_DAYS),
  {
    message: `תאריך היעד להחלטה סופית חייב להיות בין ${MIN_DECISION_DAYS} ל-${MAX_DECISION_DAYS} ימים מהיום`,
    path: ["decisionDeadline"]
  }
);

export type NewSuggestionFormData = z.infer<typeof newSuggestionSchema>;

// Status mapping for display
export const suggestionStatusMap = {
  DRAFT: "טיוטה",
  PENDING_FIRST_PARTY: "ממתין לתשובת צד א'",
  FIRST_PARTY_APPROVED: "צד א' אישר",
  FIRST_PARTY_DECLINED: "צד א' דחה",
  PENDING_SECOND_PARTY: "ממתין לתשובת צד ב'",
  SECOND_PARTY_APPROVED: "צד ב' אישר",
  SECOND_PARTY_DECLINED: "צד ב' דחה",
  AWAITING_MATCHMAKER_APPROVAL: "ממתין לאישור שדכן",
  CONTACT_DETAILS_SHARED: "פרטי קשר הועברו",
  AWAITING_FIRST_DATE_FEEDBACK: "ממתין למשוב פגישה ראשונה",
  THINKING_AFTER_DATE: "בשלב מחשבה אחרי פגישה",
  PROCEEDING_TO_SECOND_DATE: "ממשיכים לפגישה שנייה",
  ENDED_AFTER_FIRST_DATE: "הסתיים אחרי פגישה ראשונה",
  MEETING_PENDING: "ממתין לקביעת פגישה",
  MEETING_SCHEDULED: "פגישה נקבעה",
  MATCH_APPROVED: "ההצעה אושרה",
  MATCH_DECLINED: "ההצעה נדחתה",
  DATING: "בתהליך היכרות",
  ENGAGED: "מאורסים",
  MARRIED: "נישאו",
  EXPIRED: "פג תוקף",
  CLOSED: "ההצעה נסגרה",
  CANCELLED: "ההצעה בוטלה"
} as const;

// Priority mapping for display
export const priorityMap = {
  LOW: { label: "נמוכה", color: "text-gray-500" },
  MEDIUM: { label: "רגילה", color: "text-blue-500" },
  HIGH: { label: "גבוהה", color: "text-yellow-500" },
  URGENT: { label: "דחופה", color: "text-red-500" }
} as const;
--- End of Content for schema.ts ---

================================================================================
Directory: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\app\components\matchmaker\suggestions\cards
================================================================================

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\app\components\matchmaker\suggestions\cards\SuggestionCard.tsx
--------------------------------------------------------------------------------
Content:
// src/app/components/matchmaker/suggestions/cards/SuggestionCard.tsx

import React, { useState, useEffect } from 'react';
import { Card, CardContent } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from '@/components/ui/dropdown-menu';
import Image from 'next/image';
import {
  Clock,
  User,
  MessageCircle,
  Eye,
  AlertCircle,
  MoreHorizontal,
  Send,
  RefreshCw,
  Trash2,
  Edit,
  CheckCircle,
  XCircle,
  CalendarClock,
  Heart,
  MapPin,
  Calendar,
  Star,
  Sparkles,
  ChevronDown,
  ChevronUp,
  Crown,
  Zap,
  Award,
  Target,
  Users,
  Quote,
  Briefcase,
  GraduationCap,
  BookOpen,
  ArrowRight,
  Phone,
  Mail,
  Gift,
  Flame,
  TrendingUp,
  Shield,
  Gem,
} from 'lucide-react';
import { formatDistanceToNow } from 'date-fns';
import { he } from 'date-fns/locale';
import type { MatchSuggestionStatus, Priority } from '@prisma/client';
import type { Suggestion, ActionAdditionalData } from '@/types/suggestions';
import { Progress } from '@/components/ui/progress';
import { cn, getRelativeCloudinaryPath } from '@/lib/utils';
import { Avatar, AvatarFallback } from '@/components/ui/avatar';
import { getInitials } from '@/lib/utils';
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from '@/components/ui/tooltip';

// Media query hook
const useMediaQuery = (query: string) => {
  const [matches, setMatches] = useState(false);
  useEffect(() => {
    const media = window.matchMedia(query);
    if (media.matches !== matches) {
      setMatches(media.matches);
    }
    const listener = () => setMatches(media.matches);
    window.addEventListener('resize', listener);
    return () => window.removeEventListener('resize', listener);
  }, [matches, query]);
  return matches;
};

interface SuggestionCardProps {
  suggestion: Suggestion;
  onAction: (
    type:
      | 'view'
      | 'contact'
      | 'message'
      | 'edit'
      | 'delete'
      | 'resend'
      | 'changeStatus'
      | 'reminder',
    suggestion: Suggestion,
    additionalData?: ActionAdditionalData
  ) => void;
  className?: string;
  variant?: 'full' | 'compact';
}

const calculateAge = (birthDate: Date): number => {
  const today = new Date();
  const birth = new Date(birthDate);
  let age = today.getFullYear() - birth.getFullYear();
  const monthDiff = today.getMonth() - birth.getMonth();
  if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birth.getDate())) {
    age--;
  }
  return age;
};

const getEnhancedStatusInfo = (status: MatchSuggestionStatus) => {
  switch (status) {
    case 'PENDING_FIRST_PARTY':
      return {
        label: 'ממתין לצד א׳',
        shortLabel: 'ממתין א׳',
        className:
          'bg-gradient-to-r from-yellow-100 to-amber-100 text-yellow-800 border-yellow-200 shadow-lg',
        color: 'text-yellow-600',
        bgColor: 'from-yellow-50 to-amber-50',
        icon: Clock,
        progress: 25,
        description: 'ההצעה נשלחה לצד הראשון וממתינה לתשובה',
        pulse: true,
      };
    case 'PENDING_SECOND_PARTY':
      return {
        label: 'ממתין לצד ב׳',
        shortLabel: 'ממתין ב׳',
        className:
          'bg-gradient-to-r from-blue-100 to-cyan-100 text-blue-800 border-blue-200 shadow-lg',
        color: 'text-blue-600',
        bgColor: 'from-blue-50 to-cyan-50',
        icon: Clock,
        progress: 50,
        description: 'הצד הראשון אישר וההצעה נשלחה לצד השני',
        pulse: true,
      };
    case 'FIRST_PARTY_APPROVED':
      return {
        label: 'צד א׳ אישר',
        shortLabel: 'א׳ אישר',
        className:
          'bg-gradient-to-r from-green-100 to-emerald-100 text-green-800 border-green-200 shadow-lg',
        color: 'text-green-600',
        bgColor: 'from-green-50 to-emerald-50',
        icon: CheckCircle,
        progress: 40,
        description: 'הצד הראשון אישר את ההצעה',
      };
    case 'SECOND_PARTY_APPROVED':
      return {
        label: 'צד ב׳ אישר',
        shortLabel: 'ב׳ אישר',
        className:
          'bg-gradient-to-r from-green-100 to-emerald-100 text-green-800 border-green-200 shadow-lg',
        color: 'text-green-600',
        bgColor: 'from-green-50 to-emerald-50',
        icon: CheckCircle,
        progress: 60,
        description: 'שני הצדדים אישרו את ההצעה',
      };
    case 'FIRST_PARTY_DECLINED':
      return {
        label: 'צד א׳ דחה',
        shortLabel: 'א׳ דחה',
        className:
          'bg-gradient-to-r from-red-100 to-pink-100 text-red-800 border-red-200 shadow-lg',
        color: 'text-red-600',
        bgColor: 'from-red-50 to-pink-50',
        icon: XCircle,
        progress: 100,
        description: 'הצד הראשון דחה את ההצעה',
      };
    case 'SECOND_PARTY_DECLINED':
      return {
        label: 'צד ב׳ דחה',
        shortLabel: 'ב׳ דחה',
        className:
          'bg-gradient-to-r from-red-100 to-pink-100 text-red-800 border-red-200 shadow-lg',
        color: 'text-red-600',
        bgColor: 'from-red-50 to-pink-50',
        icon: XCircle,
        progress: 100,
        description: 'הצד השני דחה את ההצעה',
      };
    case 'CONTACT_DETAILS_SHARED':
      return {
        label: 'פרטי קשר שותפו',
        shortLabel: 'פרטים שותפו',
        className:
          'bg-gradient-to-r from-purple-100 to-pink-100 text-purple-800 border-purple-200 shadow-lg',
        color: 'text-purple-600',
        bgColor: 'from-purple-50 to-pink-50',
        icon: Send,
        progress: 70,
        description: 'פרטי הקשר של שני הצדדים שותפו',
      };
    case 'DATING':
      return {
        label: 'בתהליך היכרות',
        shortLabel: 'מכירים',
        className:
          'bg-gradient-to-r from-pink-100 to-rose-100 text-pink-800 border-pink-200 shadow-lg',
        color: 'text-pink-600',
        bgColor: 'from-pink-50 to-rose-50',
        icon: Heart,
        progress: 80,
        description: 'הזוג בתהליך היכרות פעיל',
      };
    case 'ENGAGED':
      return {
        label: 'מאורסים',
        shortLabel: 'מאורסים',
        className:
          'bg-gradient-to-r from-yellow-100 to-orange-100 text-yellow-800 border-yellow-200 shadow-lg',
        color: 'text-yellow-600',
        bgColor: 'from-yellow-50 to-orange-50',
        icon: Gem,
        progress: 95,
        description: 'הזוג התארס - הצלחה גדולה!',
      };
    case 'MARRIED':
      return {
        label: 'נישאו',
        shortLabel: 'נישאו',
        className:
          'bg-gradient-to-r from-emerald-100 to-green-100 text-emerald-800 border-emerald-200 shadow-lg',
        color: 'text-emerald-600',
        bgColor: 'from-emerald-50 to-green-50',
        icon: Crown,
        progress: 100,
        description: 'הזוג התחתן - התאמה מושלמת!',
      };
    case 'AWAITING_FIRST_DATE_FEEDBACK':
      return {
        label: 'ממתין למשוב פגישה',
        shortLabel: 'משוב פגישה',
        className:
          'bg-gradient-to-r from-orange-100 to-amber-100 text-orange-800 border-orange-200 shadow-lg',
        color: 'text-orange-600',
        bgColor: 'from-orange-50 to-amber-50',
        icon: AlertCircle,
        progress: 75,
        description: 'הפגישה התקיימה וממתינים למשוב',
        pulse: true,
      };
    case 'EXPIRED':
      return {
        label: 'פג תוקף',
        shortLabel: 'פג תוקף',
        className:
          'bg-gradient-to-r from-gray-100 to-slate-100 text-gray-800 border-gray-200 shadow-lg',
        color: 'text-gray-600',
        bgColor: 'from-gray-50 to-slate-50',
        icon: Clock,
        progress: 100,
        description: 'זמן התגובה עבר ולא הוענתה תשובה',
      };
    default:
      return {
        label: 'בטיפול',
        shortLabel: 'בטיפול',
        className:
          'bg-gradient-to-r from-gray-100 to-slate-100 text-gray-800 border-gray-200 shadow-lg',
        color: 'text-gray-600',
        bgColor: 'from-gray-50 to-slate-50',
        icon: RefreshCw,
        progress: 30,
        description: 'ההצעה בטיפול השדכן',
      };
  }
};

const getEnhancedPriorityInfo = (priority: Priority) => {
  switch (priority) {
    case 'URGENT':
      return {
        label: 'דחוף',
        className:
          'bg-gradient-to-r from-red-500 to-pink-500 text-white border-0 shadow-xl animate-pulse',
        icon: Flame,
        color: 'text-red-600',
        borderColor: 'border-red-500',
        bgGradient: 'from-red-50 to-pink-50',
      };
    case 'HIGH':
      return {
        label: 'גבוה',
        className:
          'bg-gradient-to-r from-orange-500 to-amber-500 text-white border-0 shadow-lg',
        icon: Star,
        color: 'text-orange-600',
        borderColor: 'border-orange-500',
        bgGradient: 'from-orange-50 to-amber-50',
      };
    case 'MEDIUM':
      return {
        label: 'רגיל',
        className:
          'bg-gradient-to-r from-blue-500 to-cyan-500 text-white border-0 shadow-lg',
        icon: Target,
        color: 'text-blue-600',
        borderColor: 'border-blue-500',
        bgGradient: 'from-blue-50 to-cyan-50',
      };
    case 'LOW':
      return {
        label: 'נמוך',
        className:
          'bg-gradient-to-r from-gray-500 to-slate-500 text-white border-0 shadow-lg',
        icon: Shield,
        color: 'text-gray-600',
        borderColor: 'border-gray-400',
        bgGradient: 'from-gray-50 to-slate-50',
      };
    default:
      return {
        label: 'רגיל',
        className:
          'bg-gradient-to-r from-blue-500 to-cyan-500 text-white border-0 shadow-lg',
        icon: Target,
        color: 'text-blue-600',
        borderColor: 'border-blue-500',
        bgGradient: 'from-blue-50 to-cyan-50',
      };
  }
};

const getDaysLeft = (decisionDeadline?: Date | string | null) => {
  if (!decisionDeadline) return null;
  const deadline = new Date(decisionDeadline);
  const today = new Date();
  const diffTime = deadline.getTime() - today.getTime();
  const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
  return diffDays > 0 ? diffDays : 0;
};

// Enhanced highlight component
const HighlightPill: React.FC<{
  icon: React.ElementType;
  text: string;
  color?: string;
}> = ({ icon: Icon, text, color = 'from-blue-500 to-cyan-500' }) => (
  <div
    className={cn(
      'flex items-center gap-2 rounded-full bg-white/80 backdrop-blur-sm border-2 px-3 py-1.5 text-xs font-medium shadow-lg hover:shadow-xl transition-all duration-300 hover:scale-105',
      'border-transparent bg-gradient-to-r text-white',
      color
    )}
  >
    <Icon className="w-3 h-3" />
    <span>{text}</span>
  </div>
);

// Enhanced matchmaker info component
const MatchmakerInfo: React.FC<{
  matchmaker: { firstName: string; lastName: string } | undefined;
  className?: string;
}> = ({ matchmaker, className }) => {
  if (!matchmaker) {
    return (
      <div
        className={cn(
          'flex items-center gap-3 p-3 bg-gradient-to-r from-gray-50 to-slate-50 rounded-xl border border-gray-100 shadow-sm',
          className
        )}
      >
        <div className="text-center text-gray-500">
          <p className="text-sm">אין מידע על השדכן</p>
        </div>
      </div>
    );
  }

  return (
    <div
      className={cn(
        'flex items-center gap-3 p-3 bg-gradient-to-r from-purple-50 to-pink-50 rounded-xl border border-purple-100 shadow-sm',
        className
      )}
    >
      <Avatar className="w-10 h-10 border-2 border-white shadow-lg">
        <AvatarFallback className="bg-gradient-to-br from-purple-500 to-pink-500 text-white font-bold text-sm">
          {getInitials(`${matchmaker.firstName} ${matchmaker.lastName}`)}
        </AvatarFallback>
      </Avatar>
      <div>
        <p className="text-xs font-medium text-purple-600">השדכן/ית</p>
        <p className="text-sm font-bold text-gray-800">
          {matchmaker.firstName} {matchmaker.lastName}
        </p>
      </div>
    </div>
  );
};

// Enhanced party display component
const PartyDisplay: React.FC<{
  party: any;
  isCompact?: boolean;
}> = ({ party, isCompact = false }) => {
  const imageUrl =
    party.images.find((img: any) => img.isMain)?.url ||
    '/placeholders/user.png';

  return (
    <div className="flex flex-col items-center gap-3">
      <div
        className={cn(
          'relative rounded-full overflow-hidden shadow-xl border-3 border-white',
          isCompact ? 'h-12 w-12' : 'h-16 w-16'
        )}
      >
        <Image
          src={getRelativeCloudinaryPath(imageUrl)}
          alt={party.firstName}
          fill
          className="object-cover"
          sizes={isCompact ? '3rem' : '4rem'}
        />
      </div>

      <div className="text-center">
        <h4
          className={cn(
            'font-bold text-gray-800',
            isCompact ? 'text-sm' : 'text-base'
          )}
        >
          {party.firstName} {party.lastName}
        </h4>
        {party.profile?.city && (
          <div
            className={cn(
              'flex items-center justify-center gap-1 text-gray-600',
              isCompact ? 'text-xs' : 'text-sm'
            )}
          >
            <MapPin className="w-3 h-3 text-green-500" />
            <span>{party.profile.city}</span>
          </div>
        )}
      </div>
    </div>
  );
};

const SuggestionCard: React.FC<SuggestionCardProps> = ({
  suggestion,
  onAction,
  className,
  variant = 'full',
}) => {
  const isMobile = useMediaQuery('(max-width: 768px)');
  const [isExpanded, setIsExpanded] = useState(false);

  // Common data
  const { firstParty, secondParty, matchmaker } = suggestion;
  const statusInfo = getEnhancedStatusInfo(suggestion.status);
  const priorityInfo = getEnhancedPriorityInfo(suggestion.priority);
  const daysLeft = getDaysLeft(suggestion.decisionDeadline);

  const firstPartyAge = calculateAge(firstParty.profile.birthDate);
  const secondPartyAge = calculateAge(secondParty.profile.birthDate);

  // Generate highlights based on suggestion data
  const highlights = [
    {
      icon: Heart,
      text: 'ערכים משפחתיים דומים',
      color: 'from-pink-500 to-rose-500',
    },
    {
      icon: Sparkles,
      text: 'השקפה דתית תואמת',
      color: 'from-purple-500 to-indigo-500',
    },
    {
      icon: MapPin,
      text: 'קרבה גיאוגרפית',
      color: 'from-green-500 to-emerald-500',
    },
  ].slice(0, 3);

  // ######################################################################
  // #                        MOBILE - KANBAN VIEW                        #
  // ######################################################################
  if (isMobile && variant === 'compact') {
    const StatusIcon = statusInfo.icon;
    return (
      <Card
        className={cn(
          'w-full cursor-pointer hover:shadow-xl transition-all duration-300 group overflow-hidden',
          'border-l-4 bg-gradient-to-br from-white to-gray-50/50',
          priorityInfo.borderColor,
          className
        )}
        onClick={() => onAction('view', suggestion)}
      >
        <CardContent className="p-4">
          <div className="flex justify-between items-start mb-3">
            <div className="flex-1">
              <h4 className="font-bold text-gray-800 mb-2 text-sm leading-tight">
                {firstParty.firstName} ו{secondParty.firstName}
              </h4>
              <div className="flex items-center gap-2 mb-2">
                <div className="flex -space-x-2">
                  <Image
                    src={getRelativeCloudinaryPath(
                      firstParty.images.find((img) => img.isMain)?.url ||
                        '/placeholders/user.png'
                    )}
                    alt={firstParty.firstName}
                    width={24}
                    height={24}
                    className="rounded-full border-2 border-white shadow-md"
                  />
                  <Image
                    src={getRelativeCloudinaryPath(
                      secondParty.images.find((img) => img.isMain)?.url ||
                        '/placeholders/user.png'
                    )}
                    alt={secondParty.firstName}
                    width={24}
                    height={24}
                    className="rounded-full border-2 border-white shadow-md"
                  />
                </div>
                <span className="text-xs text-gray-500 font-medium">
                  {firstPartyAge}, {secondPartyAge}
                </span>
              </div>
            </div>

            <div
              className={cn(
                'p-2 rounded-full shadow-lg group-hover:scale-110 transition-transform bg-gradient-to-r',
                statusInfo.bgColor
              )}
            >
              <StatusIcon className={cn('w-4 h-4', statusInfo.color)} />
            </div>
          </div>

          <Badge className={cn('text-xs font-bold', statusInfo.className)}>
            {statusInfo.shortLabel}
          </Badge>
        </CardContent>
      </Card>
    );
  }

  // ######################################################################
  // #               MOBILE - "STORY CARD" LIST VIEW                      #
  // ######################################################################
  if (isMobile && variant === 'full') {
    return (
      <Card
        className={cn(
          'overflow-hidden shadow-xl border-0 bg-gradient-to-br from-white via-purple-50/20 to-pink-50/20 hover:shadow-2xl transition-all duration-500 group',
          className
        )}
      >
        <CardContent className="p-6 space-y-6">
          {/* Header with floating elements */}
          <div className="relative">
            <div className="absolute top-0 right-0 w-20 h-20 bg-gradient-to-br from-purple-200/30 to-pink-200/30 rounded-full blur-xl"></div>
            <div className="absolute bottom-0 left-0 w-16 h-16 bg-gradient-to-br from-cyan-200/30 to-blue-200/30 rounded-full blur-lg"></div>

            <div className="relative z-10 flex justify-between items-center">
              <h3 className="text-2xl font-bold bg-gradient-to-r from-purple-600 via-pink-600 to-blue-600 bg-clip-text text-transparent">
                הצעה חדשה עבורך
              </h3>
              <Badge
                className={cn(
                  'text-sm font-bold shadow-xl',
                  statusInfo.className
                )}
              >
                <statusInfo.icon className="w-4 h-4 ml-2" />
                {statusInfo.label}
              </Badge>
            </div>
          </div>

          {/* Priority indicator for urgent items */}
          {suggestion.priority === 'URGENT' && (
            <div className="flex items-center gap-2 p-3 bg-gradient-to-r from-red-100 to-pink-100 border border-red-200 rounded-xl shadow-lg">
              <Flame className="w-5 h-5 text-red-500 animate-pulse" />
              <span className="text-red-700 font-bold text-sm">
                דחוף - דורש טיפול מיידי!
              </span>
            </div>
          )}

          {/* Matchmaker's Touch */}
          <MatchmakerInfo matchmaker={matchmaker} />

          {/* Connection Highlights */}
          <div>
            <h4 className="font-bold text-lg mb-3 text-center text-gray-700 flex items-center justify-center gap-2">
              <Sparkles className="w-5 h-5 text-purple-500" />
              נקודות חיבור מרכזיות
            </h4>
            <div className="flex flex-wrap justify-center gap-2">
              {highlights.map((highlight, index) => (
                <HighlightPill
                  key={index}
                  icon={highlight.icon}
                  text={highlight.text}
                  color={highlight.color}
                />
              ))}
            </div>
          </div>

          {/* The People - Enhanced */}
          <div className="space-y-6">
            <PartyDisplay party={firstParty} />

            <div className="flex justify-center">
              <div className="p-3 rounded-full bg-gradient-to-r from-purple-500 to-pink-500 text-white shadow-xl">
                <Heart className="w-6 h-6" />
              </div>
            </div>

            <PartyDisplay party={secondParty} />
          </div>

          {/* Matching Reason */}
          {suggestion.matchingReason && (
            <div className="p-4 bg-gradient-to-r from-cyan-50 to-blue-50 border border-cyan-200 rounded-xl shadow-inner">
              <div className="flex items-start gap-3">
                <Quote className="w-5 h-5 text-cyan-500 mt-1 flex-shrink-0" />
                <div>
                  <h4 className="font-bold text-cyan-800 mb-2">
                    למה זה מתאים דווקא לכם:
                  </h4>
                  <p className="text-cyan-900 leading-relaxed italic font-medium text-sm">
                    "{suggestion.matchingReason}"
                  </p>
                </div>
              </div>
            </div>
          )}

          {/* Progress indicator */}
          <div className="space-y-2">
            <div className="flex justify-between text-sm text-gray-600">
              <span>{statusInfo.description}</span>
              <span>{statusInfo.progress}%</span>
            </div>
            <Progress
              value={statusInfo.progress}
              className="h-2 bg-gray-100 shadow-inner"
            />
          </div>

          {/* Actions */}
          <div className="pt-4 border-t border-purple-100 space-y-4">
            <Button
              size="lg"
              className="w-full bg-gradient-to-r from-purple-600 via-pink-600 to-blue-600 hover:from-purple-700 hover:via-pink-700 hover:to-blue-700 shadow-xl hover:shadow-2xl transition-all duration-300 rounded-2xl h-14 font-bold text-lg transform hover:scale-105"
              onClick={() => onAction('view', suggestion)}
            >
              <Eye className="w-6 h-6 ml-3" />
              לפרטים המלאים ולסיפור המלא
              <ArrowRight className="w-5 h-5 mr-2" />
            </Button>

            <div className="flex justify-between items-center">
              <span className="text-xs text-gray-500 font-medium">
                נשלח{' '}
                {formatDistanceToNow(new Date(suggestion.createdAt), {
                  addSuffix: true,
                  locale: he,
                })}
              </span>
              <DropdownMenu>
                <DropdownMenuTrigger asChild>
                  <Button
                    size="sm"
                    variant="ghost"
                    className="text-gray-500 hover:bg-purple-50 rounded-full"
                  >
                    <MoreHorizontal className="w-5 h-5" />
                  </Button>
                </DropdownMenuTrigger>
                <DropdownMenuContent align="end" className="w-48">
                  <DropdownMenuItem
                    onClick={() => onAction('edit', suggestion)}
                  >
                    <Edit className="w-4 h-4 ml-2" />
                    <span>ערוך הצעה</span>
                  </DropdownMenuItem>
                  <DropdownMenuItem
                    onClick={() => onAction('message', suggestion)}
                  >
                    <MessageCircle className="w-4 h-4 ml-2" />
                    <span>שלח הודעה</span>
                  </DropdownMenuItem>
                  <DropdownMenuItem
                    onClick={() => onAction('delete', suggestion)}
                    className="text-red-600 focus:text-red-600"
                  >
                    <Trash2 className="w-4 h-4 ml-2" />
                    <span>מחק הצעה</span>
                  </DropdownMenuItem>
                </DropdownMenuContent>
              </DropdownMenu>
            </div>
          </div>
        </CardContent>
      </Card>
    );
  }

  // ######################################################################
  // #                              DESKTOP VIEW                          #
  // ######################################################################
  const StatusIcon = statusInfo.icon;
  const PriorityIcon = priorityInfo.icon;
  const canBeResent = [
    'EXPIRED',
    'FIRST_PARTY_DECLINED',
    'SECOND_PARTY_DECLINED',
  ].includes(suggestion.status);

  return (
    <TooltipProvider>
      <Card
        className={cn(
          'overflow-hidden hover:shadow-2xl transition-all duration-500 group border-0 bg-gradient-to-br from-white via-gray-50/30 to-purple-50/20',
          className
        )}
      >
        {/* Enhanced Header with gradient and animations */}
        <div
          className={cn(
            'p-6 border-b relative overflow-hidden bg-gradient-to-r shadow-lg',
            statusInfo.bgColor
          )}
        >
          {/* Background decorative elements */}
          <div className="absolute top-0 right-0 w-32 h-32 bg-gradient-to-br from-white/20 to-transparent rounded-full blur-2xl"></div>
          <div className="absolute bottom-0 left-0 w-24 h-24 bg-gradient-to-br from-white/10 to-transparent rounded-full blur-xl"></div>

          <div className="relative z-10">
            <div className="flex justify-between items-center mb-4">
              <div className="flex items-center gap-3">
                <div
                  className={cn(
                    'p-3 rounded-full shadow-lg group-hover:scale-110 transition-transform bg-white/20 backdrop-blur-sm'
                  )}
                >
                  <StatusIcon className={cn('w-6 h-6', statusInfo.color)} />
                </div>
                <div>
                  <span className="font-bold text-gray-900 text-lg">
                    {statusInfo.label}
                  </span>
                  <p className="text-sm text-gray-600 mt-1">
                    {statusInfo.description}
                  </p>
                </div>
              </div>

              <div className="flex items-center gap-3">
                <Badge className={priorityInfo.className}>
                  <PriorityIcon className="w-4 h-4 ml-2" />
                  {priorityInfo.label}
                </Badge>

                {daysLeft !== null &&
                  daysLeft <= 3 &&
                  suggestion.status !== 'EXPIRED' && (
                    <Badge className="bg-gradient-to-r from-red-500 to-pink-500 text-white border-0 shadow-xl animate-pulse">
                      <Clock className="w-3 h-3 ml-1" />
                      {daysLeft === 0
                        ? 'היום אחרון!'
                        : `${daysLeft} ימים נותרו`}
                    </Badge>
                  )}
              </div>
            </div>

            <Progress
              value={statusInfo.progress}
              className="h-3 bg-white/30 shadow-inner"
            />
          </div>
        </div>

        {/* Enhanced Main content */}
        <div className="p-6 space-y-6">
          {/* Matchmaker info */}
          <MatchmakerInfo matchmaker={matchmaker} />

          {/* Parties info - Side by side with modern design */}
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div className="space-y-4 p-5 bg-gradient-to-br from-blue-50 to-cyan-50 rounded-2xl border border-blue-100 shadow-lg hover:shadow-xl transition-all duration-300">
              <PartyDisplay party={firstParty} />

              {/* Additional party details */}
              <div className="grid grid-cols-2 gap-3 text-sm">
                {firstParty.profile?.occupation && (
                  <Tooltip>
                    <TooltipTrigger asChild>
                      <div className="flex items-center gap-2 p-2 bg-white/70 rounded-lg shadow-sm cursor-pointer">
                        <Briefcase className="w-4 h-4 text-blue-500" />
                        <span className="font-medium text-gray-700 truncate">
                          {firstParty.profile.occupation}
                        </span>
                      </div>
                    </TooltipTrigger>
                    <TooltipContent>
                      <p>{firstParty.profile.occupation}</p>
                    </TooltipContent>
                  </Tooltip>
                )}
                {firstParty.profile?.education && (
                  <Tooltip>
                    <TooltipTrigger asChild>
                      <div className="flex items-center gap-2 p-2 bg-white/70 rounded-lg shadow-sm cursor-pointer">
                        <GraduationCap className="w-4 h-4 text-purple-500" />
                        <span className="font-medium text-gray-700 truncate">
                          {firstParty.profile.education}
                        </span>
                      </div>
                    </TooltipTrigger>
                    <TooltipContent>
                      <p>{firstParty.profile.education}</p>
                    </TooltipContent>
                  </Tooltip>
                )}
              </div>

              {/* Status for this party */}
              {(suggestion.status === 'FIRST_PARTY_APPROVED' ||
                suggestion.status === 'FIRST_PARTY_DECLINED') && (
                <Badge
                  className={
                    suggestion.status === 'FIRST_PARTY_APPROVED'
                      ? 'bg-gradient-to-r from-green-500 to-emerald-500 text-white border-0 shadow-lg'
                      : 'bg-gradient-to-r from-red-500 to-pink-500 text-white border-0 shadow-lg'
                  }
                >
                  {suggestion.status === 'FIRST_PARTY_APPROVED' ? (
                    <>
                      <CheckCircle className="w-4 h-4 ml-2" />
                      אישר את ההצעה
                    </>
                  ) : (
                    <>
                      <XCircle className="w-4 h-4 ml-2" />
                      דחה את ההצעה
                    </>
                  )}
                </Badge>
              )}
            </div>

            <div className="space-y-4 p-5 bg-gradient-to-br from-purple-50 to-pink-50 rounded-2xl border border-purple-100 shadow-lg hover:shadow-xl transition-all duration-300">
              <PartyDisplay party={secondParty} />

              {/* Additional party details */}
              <div className="grid grid-cols-2 gap-3 text-sm">
                {secondParty.profile?.occupation && (
                  <Tooltip>
                    <TooltipTrigger asChild>
                      <div className="flex items-center gap-2 p-2 bg-white/70 rounded-lg shadow-sm cursor-pointer">
                        <Briefcase className="w-4 h-4 text-purple-500" />
                        <span className="font-medium text-gray-700 truncate">
                          {secondParty.profile.occupation}
                        </span>
                      </div>
                    </TooltipTrigger>
                    <TooltipContent>
                      <p>{secondParty.profile.occupation}</p>
                    </TooltipContent>
                  </Tooltip>
                )}
                {secondParty.profile?.education && (
                  <Tooltip>
                    <TooltipTrigger asChild>
                      <div className="flex items-center gap-2 p-2 bg-white/70 rounded-lg shadow-sm cursor-pointer">
                        <GraduationCap className="w-4 h-4 text-pink-500" />
                        <span className="font-medium text-gray-700 truncate">
                          {secondParty.profile.education}
                        </span>
                      </div>
                    </TooltipTrigger>
                    <TooltipContent>
                      <p>{secondParty.profile.education}</p>
                    </TooltipContent>
                  </Tooltip>
                )}
              </div>

              {/* Status for this party */}
              {(suggestion.status === 'SECOND_PARTY_APPROVED' ||
                suggestion.status === 'SECOND_PARTY_DECLINED') && (
                <Badge
                  className={
                    suggestion.status === 'SECOND_PARTY_APPROVED'
                      ? 'bg-gradient-to-r from-green-500 to-emerald-500 text-white border-0 shadow-lg'
                      : 'bg-gradient-to-r from-red-500 to-pink-500 text-white border-0 shadow-lg'
                  }
                >
                  {suggestion.status === 'SECOND_PARTY_APPROVED' ? (
                    <>
                      <CheckCircle className="w-4 h-4 ml-2" />
                      אישר את ההצעה
                    </>
                  ) : (
                    <>
                      <XCircle className="w-4 h-4 ml-2" />
                      דחה את ההצעה
                    </>
                  )}
                </Badge>
              )}
            </div>
          </div>

          {/* Connection highlights */}
          <div className="p-5 bg-gradient-to-r from-cyan-50 to-blue-50 rounded-2xl border border-cyan-100 shadow-lg">
            <h4 className="font-bold text-lg mb-3 text-cyan-800 flex items-center gap-2">
              <Sparkles className="w-5 h-5 text-cyan-500" />
              נקודות חיבור מרכזיות
            </h4>
            <div className="flex flex-wrap gap-2">
              {highlights.map((highlight, index) => (
                <HighlightPill
                  key={index}
                  icon={highlight.icon}
                  text={highlight.text}
                  color={highlight.color}
                />
              ))}
            </div>
          </div>

          {/* Matching reason */}
          {suggestion.matchingReason && (
            <div className="p-5 bg-gradient-to-r from-emerald-50 to-green-50 rounded-2xl border border-emerald-100 shadow-lg">
              <h5 className="text-sm font-bold text-emerald-700 mb-2 flex items-center gap-2">
                <Quote className="w-4 h-4" />
                סיבת ההתאמה:
              </h5>
              <p className="text-emerald-800 leading-relaxed font-medium">
                {suggestion.matchingReason}
              </p>
            </div>
          )}

          {/* Timeline info */}
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4 text-sm">
            <div className="flex items-center gap-2 p-3 bg-gray-50 rounded-xl shadow-sm">
              <Clock className="w-4 h-4 text-gray-500" />
              <div>
                <p className="font-medium text-gray-600">נוצר</p>
                <p className="text-gray-800">
                  {formatDistanceToNow(new Date(suggestion.createdAt), {
                    addSuffix: true,
                    locale: he,
                  })}
                </p>
              </div>
            </div>

            {suggestion.decisionDeadline && (
              <div className="flex items-center gap-2 p-3 bg-orange-50 rounded-xl shadow-sm">
                <CalendarClock className="w-4 h-4 text-orange-500" />
                <div>
                  <p className="font-medium text-orange-600">מועד יעד</p>
                  <p className="text-orange-800">
                    {daysLeft !== null
                      ? daysLeft === 0
                        ? 'היום!'
                        : `${daysLeft} ימים להחלטה`
                      : 'אין מועד אחרון'}
                  </p>
                </div>
              </div>
            )}

            <div className="flex items-center gap-2 p-3 bg-blue-50 rounded-xl shadow-sm">
              <TrendingUp className="w-4 h-4 text-blue-500" />
              <div>
                <p className="font-medium text-blue-600">התקדמות</p>
                <p className="text-blue-800">{statusInfo.progress}% הושלמו</p>
              </div>
            </div>
          </div>

          {/* Enhanced Actions */}
          <div className="flex items-center justify-between pt-4 border-t border-gray-100">
            <div className="flex items-center gap-2">
              <Button
                variant="ghost"
                size="sm"
                onClick={() => onAction('message', suggestion)}
                className="text-blue-600 hover:text-blue-700 hover:bg-blue-50 rounded-xl font-medium"
              >
                <MessageCircle className="w-4 h-4 ml-2" />
                הודעה
              </Button>

              {canBeResent && (
                <Button
                  variant="ghost"
                  size="sm"
                  onClick={() => onAction('resend', suggestion)}
                  className="text-green-600 hover:text-green-700 hover:bg-green-50 rounded-xl font-medium"
                >
                  <RefreshCw className="w-4 h-4 ml-2" />
                  שלח מחדש
                </Button>
              )}
            </div>

            <div className="flex items-center gap-2">
              <Button
                variant="default"
                size="sm"
                onClick={() => onAction('view', suggestion)}
                className="bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-700 hover:to-pink-700 shadow-lg hover:shadow-xl transition-all duration-300 rounded-xl font-medium"
              >
                <Eye className="w-4 h-4 ml-2" />
                פרטים
              </Button>

              <DropdownMenu>
                <DropdownMenuTrigger asChild>
                  <Button
                    size="sm"
                    variant="ghost"
                    className="px-2 hover:bg-gray-100 rounded-xl"
                  >
                    <MoreHorizontal className="w-4 h-4" />
                  </Button>
                </DropdownMenuTrigger>
                <DropdownMenuContent align="end" className="w-48">
                  <DropdownMenuItem
                    onClick={() => onAction('edit', suggestion)}
                  >
                    <Edit className="w-4 h-4 ml-2" />
                    <span>ערוך הצעה</span>
                  </DropdownMenuItem>

                  {canBeResent && (
                    <DropdownMenuItem
                      onClick={() => onAction('resend', suggestion)}
                    >
                      <RefreshCw className="w-4 h-4 ml-2" />
                      <span>שלח מחדש</span>
                    </DropdownMenuItem>
                  )}

                  <DropdownMenuItem
                    onClick={() => onAction('delete', suggestion)}
                    className="text-red-600 focus:text-red-600 focus:bg-red-50"
                  >
                    <Trash2 className="w-4 h-4 ml-2" />
                    <span>מחק הצעה</span>
                  </DropdownMenuItem>
                </DropdownMenuContent>
              </DropdownMenu>
            </div>
          </div>
        </div>
      </Card>
    </TooltipProvider>
  );
};

export default SuggestionCard;
--- End of Content for SuggestionCard.tsx ---

================================================================================
Directory: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\app\components\matchmaker\suggestions\container
================================================================================

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\app\components\matchmaker\suggestions\container\MatchmakerDashboard.tsx
--------------------------------------------------------------------------------
Content:
'use client';

import React, { useState, useCallback, useEffect, useMemo } from 'react';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Card, CardContent } from '@/components/ui/card';
import { useSession } from "next-auth/react";
import {
  Plus,
  RefreshCw,
  BarChart,
  Loader2,
  List,
  Archive,
  LayoutGrid,
  Filter,
  Search,
  TrendingUp,
  Users,
  Clock,
  CheckCircle,
  XCircle,
  Heart,
  Sparkles,
  Calendar,
  Target,
  Crown,
  Zap,
  Eye,
  MessageCircle,
  Settings,
  Award,
  Activity,
  Star,
  ArrowUp,
  ArrowDown,
} from 'lucide-react';
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
} from '@/components/ui/alert-dialog';
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription,
} from '@/components/ui/dialog';
import {
  Sheet,
  SheetContent,
  SheetHeader,
  SheetTitle,
  SheetTrigger,
} from '@/components/ui/sheet';
import { ToggleGroup, ToggleGroupItem } from '@/components/ui/toggle-group';
import { toast } from 'sonner';
import { MatchSuggestionStatus, Priority } from '@prisma/client';
import { cn } from '@/lib/utils';

// Type imports
import type {
  Suggestion,
  SuggestionFilters,
  ActionAdditionalData,
} from '@/types/suggestions';
import type { NewSuggestionFormData } from '../../suggestions/NewSuggestionForm/schema';
import type { Candidate } from '../../new/types/candidates';

// Hooks
import { useCandidates } from '../../new/hooks/useCandidates';

// Components
import NewSuggestionForm from '../../suggestions/NewSuggestionForm';
import SuggestionsStats from './SuggestionsStats';
import SuggestionActionBar from './SuggestionActionBar';
import SuggestionDetailsDialog from '../details/SuggestionDetailsDialog';
import SuggestionCard from '../cards/SuggestionCard';
import EditSuggestionForm from '../EditSuggestionForm';
import MessageForm from '../MessageForm';
import MonthlyTrendModal from './MonthlyTrendModal';
import { ScrollArea } from '@/components/ui/scroll-area';
import { Input } from '@/components/ui/input';

// Media query hook
const useMediaQuery = (query: string) => {
  const [matches, setMatches] = useState(false);
  useEffect(() => {
    if (typeof window === 'undefined') return;
    const media = window.matchMedia(query);
    if (media.matches !== matches) {
      setMatches(media.matches);
    }
    const listener = () => setMatches(media.matches);
    window.addEventListener('resize', listener);
    return () => window.removeEventListener('resize', listener);
  }, [matches, query]);
  return matches;
};

// Enhanced Hero Section Component
const MatchmakerHeroSection: React.FC<{
  onNewSuggestion: () => void;
  onRefresh: () => void;
  isRefreshing: boolean;
  stats: {
    total: number;
    pending: number;
    active: number;
    success: number;
    thisMonth: number;
    successRate: number;
  };
}> = ({ onNewSuggestion, onRefresh, isRefreshing, stats }) => {
  return (
    <div className="relative min-h-[400px] bg-gradient-to-br from-purple-50 via-cyan-50/30 to-emerald-50/20 overflow-hidden rounded-3xl shadow-2xl mb-8">
      {/* Background decorative elements */}
      <div className="absolute inset-0">
        <div className="absolute top-10 right-10 w-64 h-64 bg-gradient-to-br from-purple-200/30 to-pink-200/30 rounded-full blur-3xl animate-float"></div>
        <div className="absolute bottom-10 left-10 w-48 h-48 bg-gradient-to-br from-cyan-200/30 to-blue-200/30 rounded-full blur-2xl animate-float" style={{ animationDelay: '2s' }}></div>
        <div className="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-80 h-80 bg-gradient-to-br from-emerald-200/20 to-green-200/20 rounded-full blur-3xl animate-float" style={{ animationDelay: '4s' }}></div>
      </div>

      <div className="relative z-10 p-8 lg:p-12">
        {/* Header */}
        <div className="text-center mb-8">
          <div className="inline-flex items-center gap-3 mb-6">
            <div className="p-4 rounded-full bg-gradient-to-r from-purple-500 to-pink-500 text-white shadow-lg">
              <Crown className="w-10 h-10" />
            </div>
          </div>
          <h1 className="text-4xl md:text-5xl font-bold bg-gradient-to-r from-purple-600 via-pink-600 to-blue-600 bg-clip-text text-transparent mb-4">
            ברוכים הבאים למערכת השדכן
          </h1>
          <p className="text-xl text-gray-700 max-w-2xl mx-auto leading-relaxed">
            נהל את כל הצעות השידוך, עקוב אחר התקדמות הזוגות ויצור התאמות מושלמות
          </p>
        </div>

        {/* Quick Stats */}
        <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mb-8">
          <Card className="border-0 shadow-lg bg-white/80 backdrop-blur-sm hover:shadow-xl transition-all duration-300 group">
            <CardContent className="p-4 text-center">
              <div className="flex items-center justify-center gap-2 mb-2">
                <div className="p-2 rounded-full bg-gradient-to-r from-blue-500 to-cyan-500 text-white shadow-lg group-hover:scale-110 transition-transform">
                  <Users className="w-5 h-5" />
                </div>
                <span className="text-2xl font-bold text-blue-600">{stats.total}</span>
              </div>
              <p className="text-sm text-gray-600 font-medium">סך הכל הצעות</p>
            </CardContent>
          </Card>

          <Card className="border-0 shadow-lg bg-white/80 backdrop-blur-sm hover:shadow-xl transition-all duration-300 group">
            <CardContent className="p-4 text-center">
              <div className="flex items-center justify-center gap-2 mb-2">
                <div className="p-2 rounded-full bg-gradient-to-r from-orange-500 to-amber-500 text-white shadow-lg group-hover:scale-110 transition-transform">
                  <Clock className="w-5 h-5" />
                </div>
                <span className="text-2xl font-bold text-orange-600">{stats.pending}</span>
              </div>
              <p className="text-sm text-gray-600 font-medium">ממתינות לתשובה</p>
            </CardContent>
          </Card>

          <Card className="border-0 shadow-lg bg-white/80 backdrop-blur-sm hover:shadow-xl transition-all duration-300 group">
            <CardContent className="p-4 text-center">
              <div className="flex items-center justify-center gap-2 mb-2">
                <div className="p-2 rounded-full bg-gradient-to-r from-green-500 to-emerald-500 text-white shadow-lg group-hover:scale-110 transition-transform">
                  <Heart className="w-5 h-5" />
                </div>
                <span className="text-2xl font-bold text-green-600">{stats.success}</span>
              </div>
              <p className="text-sm text-gray-600 font-medium">התאמות מוצלחות</p>
            </CardContent>
          </Card>

          <Card className="border-0 shadow-lg bg-white/80 backdrop-blur-sm hover:shadow-xl transition-all duration-300 group">
            <CardContent className="p-4 text-center">
              <div className="flex items-center justify-center gap-2 mb-2">
                <div className="p-2 rounded-full bg-gradient-to-r from-purple-500 to-pink-500 text-white shadow-lg group-hover:scale-110 transition-transform">
                  <TrendingUp className="w-5 h-5" />
                </div>
                <span className="text-2xl font-bold text-purple-600">{stats.successRate}%</span>
              </div>
              <p className="text-sm text-gray-600 font-medium">אחוז הצלחה</p>
            </CardContent>
          </Card>
        </div>

        {/* Action Buttons */}
        <div className="flex flex-col md:flex-row items-center justify-center gap-4">
          <Button
            onClick={onNewSuggestion}
            size="lg"
            className="bg-gradient-to-r from-purple-600 via-pink-600 to-blue-600 hover:from-purple-700 hover:via-pink-700 hover:to-blue-700 text-white shadow-xl hover:shadow-2xl transition-all duration-300 rounded-2xl px-8 py-4 font-bold text-lg transform hover:scale-105"
          >
            <Plus className="w-6 h-6 ml-3" />
            צור הצעת שידוך חדשה
            <Sparkles className="w-5 h-5 mr-2" />
          </Button>

          <Button
            variant="outline"
            size="lg"
            onClick={onRefresh}
            disabled={isRefreshing}
            className="border-2 border-purple-300 text-purple-600 hover:bg-purple-50 shadow-lg hover:shadow-xl transition-all duration-300 rounded-2xl px-6 py-4 font-bold text-lg transform hover:scale-105"
          >
            <RefreshCw className={cn('w-5 h-5 ml-2', isRefreshing && 'animate-spin')} />
            {isRefreshing ? 'מעדכן...' : 'רענן נתונים'}
          </Button>
        </div>
      </div>
    </div>
  );
};

// Enhanced Stats Component
const EnhancedStats: React.FC<{
  suggestions: Suggestion[];
  onFilterChange: (filter: any) => void;
}> = ({ suggestions, onFilterChange }) => {
  const stats = useMemo(() => {
    const total = suggestions.length;
    const pending = suggestions.filter(s => 
      s.status === 'PENDING_FIRST_PARTY' || s.status === 'PENDING_SECOND_PARTY'
    ).length;
    const active = suggestions.filter(s => 
      !['CLOSED', 'CANCELLED', 'EXPIRED'].includes(s.status)
    ).length;
    const success = suggestions.filter(s => 
      ['MARRIED', 'ENGAGED', 'DATING'].includes(s.status)
    ).length;
    const thisMonth = suggestions.filter(s => {
      const created = new Date(s.createdAt);
      const now = new Date();
      return created.getMonth() === now.getMonth() && created.getFullYear() === now.getFullYear();
    }).length;
    const successRate = total > 0 ? Math.round((success / total) * 100) : 0;

    return { total, pending, active, success, thisMonth, successRate };
  }, [suggestions]);

  return (
    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
      {/* Total Suggestions */}
      <Card className="border-0 shadow-xl bg-gradient-to-br from-blue-50 to-cyan-50 hover:shadow-2xl transition-all duration-300 group cursor-pointer"
            onClick={() => onFilterChange({})}>
        <CardContent className="p-6">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm font-medium text-blue-600 mb-1">סך הכל הצעות</p>
              <p className="text-3xl font-bold text-blue-700">{stats.total}</p>
              <div className="flex items-center mt-2">
                <ArrowUp className="w-4 h-4 text-green-500 mr-1" />
                <span className="text-sm text-green-600">+{stats.thisMonth} החודש</span>
              </div>
            </div>
            <div className="p-3 rounded-full bg-gradient-to-r from-blue-500 to-cyan-500 text-white shadow-lg group-hover:scale-110 transition-transform">
              <Users className="w-8 h-8" />
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Pending Suggestions */}
      <Card className="border-0 shadow-xl bg-gradient-to-br from-orange-50 to-amber-50 hover:shadow-2xl transition-all duration-300 group cursor-pointer"
            onClick={() => onFilterChange({ status: ['PENDING_FIRST_PARTY', 'PENDING_SECOND_PARTY'] })}>
        <CardContent className="p-6">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm font-medium text-orange-600 mb-1">ממתינות לתשובה</p>
              <p className="text-3xl font-bold text-orange-700">{stats.pending}</p>
              <div className="flex items-center mt-2">
                <Clock className="w-4 h-4 text-orange-500 mr-1" />
                <span className="text-sm text-orange-600">דורש טיפול</span>
              </div>
            </div>
            <div className="p-3 rounded-full bg-gradient-to-r from-orange-500 to-amber-500 text-white shadow-lg group-hover:scale-110 transition-transform">
              <Clock className="w-8 h-8" />
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Active Suggestions */}
      <Card className="border-0 shadow-xl bg-gradient-to-br from-green-50 to-emerald-50 hover:shadow-2xl transition-all duration-300 group cursor-pointer"
            onClick={() => onFilterChange({ status: ['DATING', 'CONTACT_DETAILS_SHARED'] })}>
        <CardContent className="p-6">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm font-medium text-green-600 mb-1">פעילות כעת</p>
              <p className="text-3xl font-bold text-green-700">{stats.active}</p>
              <div className="flex items-center mt-2">
                <Activity className="w-4 h-4 text-green-500 mr-1" />
                <span className="text-sm text-green-600">בתהליך</span>
              </div>
            </div>
            <div className="p-3 rounded-full bg-gradient-to-r from-green-500 to-emerald-500 text-white shadow-lg group-hover:scale-110 transition-transform">
              <Target className="w-8 h-8" />
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Success Rate */}
      <Card className="border-0 shadow-xl bg-gradient-to-br from-purple-50 to-pink-50 hover:shadow-2xl transition-all duration-300 group cursor-pointer"
            onClick={() => onFilterChange({ status: ['MARRIED', 'ENGAGED'] })}>
        <CardContent className="p-6">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm font-medium text-purple-600 mb-1">אחוז הצלחה</p>
              <p className="text-3xl font-bold text-purple-700">{stats.successRate}%</p>
              <div className="flex items-center mt-2">
                <Award className="w-4 h-4 text-purple-500 mr-1" />
                <span className="text-sm text-purple-600">{stats.success} זוגות</span>
              </div>
            </div>
            <div className="p-3 rounded-full bg-gradient-to-r from-purple-500 to-pink-500 text-white shadow-lg group-hover:scale-110 transition-transform">
              <Heart className="w-8 h-8" />
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  );
};

// Payload types
interface SuggestionUpdatePayload {
  priority?: Priority;
  status?: MatchSuggestionStatus;
  statusNotes?: string;
  matchingReason?: string;
  firstPartyNotes?: string;
  secondPartyNotes?: string;
  internalNotes?: string;
  decisionDeadline?: Date;
}

interface SendMessagePayload {
  suggestionId: string;
  partyType: 'first' | 'second' | 'both';
  messageType: 'message' | 'reminder' | 'update';
  messageContent: string;
}

type DialogActionData = {
  suggestionId?: string;
  newStatus?: MatchSuggestionStatus;
  notes?: string;
  suggestion?: Suggestion;
  partyType?: 'first' | 'second' | 'both';
  type?: string;
};

type ConfirmActionData = {
  suggestionId: string;
  partyType?: 'first' | 'second' | 'both';
  type?: string;
};

type SuggestionCardActionType =
  | 'view'
  | 'contact'
  | 'message'
  | 'edit'
  | 'delete'
  | 'resend'
  | 'changeStatus'
  | 'reminder';

type SuggestionDetailsActionType =
  | SuggestionCardActionType
  | 'sendReminder'
  | 'shareContacts'
  | 'scheduleMeeting'
  | 'viewMeetings'
  | 'exportHistory'
  | 'export'
  | 'resendToAll';

export default function MatchmakerDashboard() {
  const isMobile = useMediaQuery('(max-width: 768px)');
  const [mobileView, setMobileView] = useState<'list' | 'kanban'>('list');
  const [showMobileFilters, setShowMobileFilters] = useState(false);
  const { data: session } = useSession();

  // State management
  const [activeTab, setActiveTab] = useState('pending');
  const [showNewSuggestion, setShowNewSuggestion] = useState(false);
  const [searchQuery, setSearchQuery] = useState('');
  const [filters, setFilters] = useState<SuggestionFilters>({});
  const [suggestions, setSuggestions] = useState<Suggestion[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [isRefreshing, setIsRefreshing] = useState(false);
  const [isSubmitting, setIsSubmitting] = useState(false);

  // Dialogs and selected items state
  const [selectedSuggestion, setSelectedSuggestion] = useState<Suggestion | null>(null);
  const [showConfirmDialog, setShowConfirmDialog] = useState(false);
  const [confirmAction, setConfirmAction] = useState<{
    type: string;
    data: ConfirmActionData;
  } | null>(null);
  const [showEditForm, setShowEditForm] = useState(false);
  const [showMessageForm, setShowMessageForm] = useState(false);
  const [showMonthlyTrendDialog, setShowMonthlyTrendDialog] = useState(false);

  // Fetch candidates list
  const { candidates: allCandidates } = useCandidates();

  const fetchSuggestions = useCallback(async () => {
    setIsLoading(true);
    try {
      const response = await fetch('/api/matchmaker/suggestions');
      if (!response.ok) throw new Error('Failed to fetch suggestions');
      const data = await response.json();
      setSuggestions(data);
    } catch (error: unknown) {
      console.error('Error fetching suggestions:', error);
      toast.error('שגיאה בטעינת ההצעות');
    } finally {
      setIsLoading(false);
    }
  }, []);

  useEffect(() => {
    fetchSuggestions();
  }, [fetchSuggestions]);

  const filteredSuggestions = useMemo(() => {
    return suggestions.filter((s) => {
      if (searchQuery) {
        const query = searchQuery.toLowerCase();
        const match =
          (s.firstParty.firstName + ' ' + s.firstParty.lastName)
            .toLowerCase()
            .includes(query) ||
          (s.secondParty.firstName + ' ' + s.secondParty.lastName)
            .toLowerCase()
            .includes(query) ||
          (s.firstParty.profile?.city &&
            s.firstParty.profile.city.toLowerCase().includes(query)) ||
          (s.secondParty.profile?.city &&
            s.secondParty.profile.city.toLowerCase().includes(query));
        if (!match) return false;
      }
      if (filters.priority?.length && !filters.priority.includes(s.priority))
        return false;
      if (filters.status?.length && !filters.status.includes(s.status))
        return false;
      if (filters.dateRange) {
        const createdAt = new Date(s.createdAt);
        if (
          createdAt < filters.dateRange.start ||
          (filters.dateRange.end && createdAt > filters.dateRange.end)
        )
          return false;
      }
      return true;
    });
  }, [suggestions, searchQuery, filters]);

  const pendingSuggestions = useMemo(
    () => filteredSuggestions.filter((s) => s.category === 'PENDING'),
    [filteredSuggestions]
  );
  const activeSuggestions = useMemo(
    () => filteredSuggestions.filter((s) => s.category === 'ACTIVE'),
    [filteredSuggestions]
  );
  const historySuggestions = useMemo(
    () => filteredSuggestions.filter((s) => s.category === 'HISTORY'),
    [filteredSuggestions]
  );

  const pendingCount = pendingSuggestions.length;
  const activeCount = activeSuggestions.length;
  const historyCount = historySuggestions.length;

  const handleRefresh = async () => {
    setIsRefreshing(true);
    await fetchSuggestions();
    setIsRefreshing(false);
    toast.success('נתוני ההצעות עודכנו');
  };

  const handleNewSuggestion = async (data: NewSuggestionFormData) => {
    try {
      const response = await fetch('/api/matchmaker/suggestions', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(data),
      });
      if (!response.ok)
        throw new Error(
          (await response.json()).error || 'Failed to create suggestion'
        );
      setShowNewSuggestion(false);
      toast.success('ההצעה נוצרה בהצלחה');
      await fetchSuggestions();
    } catch (error: unknown) {
      console.error('Error creating suggestion:', error);
      toast.error(
        'שגיאה ביצירת ההצעה: ' + (error instanceof Error ? error.message : '')
      );
    }
  };

  const handleSuggestionDeleted = useCallback(
    (deletedId: string) => {
      setSuggestions((prev) => prev.filter((s) => s.id !== deletedId));
      if (selectedSuggestion?.id === deletedId) setSelectedSuggestion(null);
    },
    [selectedSuggestion]
  );

  const handleConfirmAction = async () => {
    if (!confirmAction) return;
    try {
      if (confirmAction.type === 'delete') {
        const response = await fetch(
          `/api/matchmaker/suggestions/${confirmAction.data.suggestionId}/delete`,
          { method: 'DELETE' }
        );
        if (!response.ok) throw new Error('Failed to delete suggestion');
        handleSuggestionDeleted(confirmAction.data.suggestionId);
        toast.success('ההצעה נמחקה בהצלחה');
      }
    } catch (error: unknown) {
      toast.error('אירעה שגיאה בביצוע הפעולה');
    } finally {
      setShowConfirmDialog(false);
      setConfirmAction(null);
    }
  };

  const handleStatusChange = async (
    suggestionId: string,
    newStatus: MatchSuggestionStatus,
    notes?: string
  ) => {
    try {
      const response = await fetch(
        `/api/matchmaker/suggestions/${suggestionId}/status`,
        {
          method: 'PATCH',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            status: newStatus,
            notes: notes || `סטטוס שונה ממממשק ניהול`,
          }),
        }
      );
      if (!response.ok)
        throw new Error(
          (await response.json()).error || 'Failed to update status'
        );
      toast.success('סטטוס ההצעה עודכן בהצלחה');
      fetchSuggestions();
    } catch (error: unknown) {
      console.error('Error updating suggestion status:', error);
      toast.error(
        'שגיאה בעדכון סטטוס ההצעה: ' +
          (error instanceof Error ? error.message : '')
      );
    }
  };

  const handleUpdateSuggestion = async (data: {
    suggestionId: string;
    updates: SuggestionUpdatePayload;
  }) => {
    try {
      setIsSubmitting(true);
      
      if (
        data.updates.status &&
        data.updates.status !== selectedSuggestion?.status
      ) {
        const statusResponse = await fetch(
          `/api/matchmaker/suggestions/${data.suggestionId}/status`,
          {
            method: 'PATCH',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
              status: data.updates.status,
              notes:
                data.updates.statusNotes ||
                `סטטוס שונה ל-${data.updates.status}`,
            }),
          }
        );

        if (!statusResponse.ok) {
          const errorData = await statusResponse.json();
          throw new Error(errorData.error || 'Failed to update status');
        }
      }

      // עדכון שאר הפרטים
      const updatePayload = {
        priority: data.updates.priority,
        matchingReason: data.updates.matchingReason,
        firstPartyNotes: data.updates.firstPartyNotes,
        secondPartyNotes: data.updates.secondPartyNotes,
        internalNotes: data.updates.internalNotes,
        decisionDeadline: data.updates.decisionDeadline?.toISOString(),
      };

      const response = await fetch(
        `/api/matchmaker/suggestions/${data.suggestionId}`,
        {
          method: 'PATCH',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(updatePayload),
        }
      );

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || 'Failed to update suggestion');
      }

      toast.success('פרטי ההצעה עודכנו בהצלחה');
      setShowEditForm(false);
      await fetchSuggestions();
    } catch (error) {
      console.error('Error updating suggestion:', error);
      toast.error(
        'שגיאה בעדכון פרטי ההצעה: ' +
          (error instanceof Error ? error.message : 'שגיאה לא ידועה')
      );
    } finally {
      setIsSubmitting(false);
    }
  };

  const handleSendMessage = async (data: SendMessagePayload) => {
    try {
      const response = await fetch(
        `/api/matchmaker/suggestions/${data.suggestionId}/message`,
        {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            partyType: data.partyType,
            messageType: data.messageType,
            content: data.messageContent,
          }),
        }
      );
      if (!response.ok)
        throw new Error(
          (await response.json()).error || 'Failed to send message'
        );
      toast.success('ההודעה נשלחה בהצלחה');
      setShowMessageForm(false);
    } catch (error: unknown) {
      toast.error(
        'שגיאה בשליחת ההודעה: ' + (error instanceof Error ? error.message : '')
      );
    }
  };

  const handleDialogAction = (
    action: SuggestionDetailsActionType,
    data?: DialogActionData
  ) => {
    setSelectedSuggestion(data?.suggestion || null);
    if (action === 'view' && data?.suggestion) {
      setSelectedSuggestion(data.suggestion);
    } else if (action === 'delete' && data?.suggestionId) {
      setConfirmAction({
        type: 'delete',
        data: { suggestionId: data.suggestionId },
      });
      setShowConfirmDialog(true);
    } else if (action === 'edit' && data?.suggestion) {
      setShowEditForm(true);
    } else if (action === 'message' && data?.suggestion) {
      setShowMessageForm(true);
    } else if (
      action === 'changeStatus' &&
      data?.suggestionId &&
      data.newStatus
    ) {
      handleStatusChange(data.suggestionId, data.newStatus, data.notes);
    }
  };

  const handleSuggestionAction = (
    type: SuggestionCardActionType,
    suggestion: Suggestion,
    additionalData?: ActionAdditionalData
  ) => {
    handleDialogAction(type, {
      ...additionalData,
      suggestionId: suggestion.id,
      suggestion,
    });
  };

  const kanbanColumns = useMemo(() => {
    const columns: { title: string; suggestions: Suggestion[]; color: string; icon: React.ElementType }[] = [
      { 
        title: 'דורש טיפול', 
        suggestions: [], 
        color: 'from-red-500 to-orange-500',
        icon: Clock
      },
      { 
        title: 'ממתין לתגובה', 
        suggestions: [], 
        color: 'from-yellow-500 to-amber-500',
        icon: MessageCircle
      },
      { 
        title: 'פעילות', 
        suggestions: [], 
        color: 'from-green-500 to-emerald-500',
        icon: Target
      },
      { 
        title: 'היסטוריה', 
        suggestions: [], 
        color: 'from-gray-500 to-slate-500',
        icon: Archive
      },
    ];

    filteredSuggestions.forEach((s) => {
      if (
        [
          'AWAITING_MATCHMAKER_APPROVAL',
          'AWAITING_FIRST_DATE_FEEDBACK',
        ].includes(s.status)
      ) {
        columns[0].suggestions.push(s);
      } else if (
        ['PENDING_FIRST_PARTY', 'PENDING_SECOND_PARTY'].includes(s.status)
      ) {
        columns[1].suggestions.push(s);
      } else if (
        ['CLOSED', 'CANCELLED', 'EXPIRED', 'MARRIED', 'ENGAGED'].includes(
          s.status
        )
      ) {
        columns[3].suggestions.push(s);
      } else {
        columns[2].suggestions.push(s);
      }
    });

    return columns;
  }, [filteredSuggestions]);

  // Calculate stats for hero section
  const heroStats = useMemo(() => {
    const total = suggestions.length;
    const pending = suggestions.filter(s => 
      s.status === 'PENDING_FIRST_PARTY' || s.status === 'PENDING_SECOND_PARTY'
    ).length;
    const active = suggestions.filter(s => 
      !['CLOSED', 'CANCELLED', 'EXPIRED'].includes(s.status)
    ).length;
    const success = suggestions.filter(s => 
      ['MARRIED', 'ENGAGED', 'DATING'].includes(s.status)
    ).length;
    const thisMonth = suggestions.filter(s => {
      const created = new Date(s.createdAt);
      const now = new Date();
      return created.getMonth() === now.getMonth() && created.getFullYear() === now.getFullYear();
    }).length;
    const successRate = total > 0 ? Math.round((success / total) * 100) : 0;

    return { total, pending, active, success, thisMonth, successRate };
  }, [suggestions]);

  const renderMobileFilters = () => (
    <Sheet open={showMobileFilters} onOpenChange={setShowMobileFilters}>
      <SheetTrigger asChild>
        <Button variant="outline" size="sm" className="bg-white/80 backdrop-blur-sm shadow-lg">
          <Filter className="w-4 h-4 mr-2" />
          סינון
        </Button>
      </SheetTrigger>
      <SheetContent className="w-full">
        <SheetHeader>
          <SheetTitle>סינון הצעות</SheetTitle>
        </SheetHeader>
        <div className="py-4">
          <SuggestionActionBar
            searchQuery={searchQuery}
            onSearchChange={setSearchQuery}
            filters={filters}
            onFiltersChange={setFilters}
            totalCount={suggestions.length}
            activeCount={activeCount}
            pendingCount={pendingCount}
            historyCount={historyCount}
          />
        </div>
      </SheetContent>
    </Sheet>
  );

  const renderMobileView = () => (
    <div className="min-h-screen bg-gradient-to-br from-slate-50 via-cyan-50/20 to-emerald-50/20">
      {/* Mobile Hero Section */}
      <div className="p-4">
        <MatchmakerHeroSection
          onNewSuggestion={() => setShowNewSuggestion(true)}
          onRefresh={handleRefresh}
          isRefreshing={isRefreshing}
          stats={heroStats}
        />
      </div>

      {/* Mobile Controls */}
      <div className="flex items-center justify-between p-4 bg-white/80 backdrop-blur-sm border-b sticky top-0 z-10 shadow-lg">
        <div className="relative flex-1">
          <Search className="absolute right-3 top-2.5 h-4 w-4 text-gray-400" />
          <Input
            placeholder="חיפוש..."
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
            className="pl-10 text-right pr-10 bg-white/90 shadow-sm border-purple-200 focus:border-purple-400"
          />
        </div>
        <div className="mr-2">{renderMobileFilters()}</div>
        <ToggleGroup
          type="single"
          value={mobileView}
          onValueChange={(value: 'list' | 'kanban') =>
            value && setMobileView(value)
          }
          className="mr-2"
        >
          <ToggleGroupItem value="list" aria-label="List view" className="data-[state=on]:bg-purple-100 data-[state=on]:text-purple-700">
            <List className="h-4 w-4" />
          </ToggleGroupItem>
          <ToggleGroupItem value="kanban" aria-label="Kanban view" className="data-[state=on]:bg-purple-100 data-[state=on]:text-purple-700">
            <LayoutGrid className="h-4 w-4" />
          </ToggleGroupItem>
        </ToggleGroup>
      </div>

      {/* Mobile Content */}
      {isLoading ? (
        <div className="flex-1 flex items-center justify-center p-8">
          <div className="text-center">
            <Loader2 className="w-12 h-12 animate-spin text-purple-600 mx-auto mb-4" />
            <p className="text-lg font-semibold text-gray-700">טוען הצעות...</p>
          </div>
        </div>
      ) : mobileView === 'kanban' ? (
        <ScrollArea className="w-full whitespace-nowrap flex-1">
          <div className="flex gap-4 p-4 h-full">
            {kanbanColumns.map((col, idx) => {
              const IconComponent = col.icon;
              return (
                <div
                  key={idx}
                  className="w-72 flex-shrink-0 bg-white/90 backdrop-blur-sm rounded-2xl shadow-xl flex flex-col border border-gray-200"
                >
                  <div className={cn(
                    "p-4 font-semibold text-sm border-b sticky top-0 bg-gradient-to-r text-white rounded-t-2xl z-10 shadow-lg",
                    col.color
                  )}>
                    <div className="flex items-center justify-between">
                      <div className="flex items-center gap-2">
                        <IconComponent className="w-5 h-5" />
                        <span>{col.title}</span>
                      </div>
                      <Badge variant="secondary" className="bg-white/20 text-white border-white/30">
                        {col.suggestions.length}
                      </Badge>
                    </div>
                  </div>
                  <ScrollArea className="flex-1 p-3">
                    <div className="space-y-3">
                      {col.suggestions.length > 0 ? (
                        col.suggestions.map((s) => (
                          <SuggestionCard
                            key={s.id}
                            suggestion={s}
                            onAction={handleSuggestionAction}
                            variant="compact"
                            className="shadow-lg hover:shadow-xl transition-all duration-300"
                          />
                        ))
                      ) : (
                        <div className="p-6 text-center text-sm text-gray-500 bg-gray-50 rounded-xl">
                          <IconComponent className="w-8 h-8 mx-auto mb-2 text-gray-400" />
                          <p>אין הצעות</p>
                        </div>
                      )}
                    </div>
                  </ScrollArea>
                </div>
              );
            })}
          </div>
        </ScrollArea>
      ) : (
        <ScrollArea className="flex-1">
          <div className="p-4 space-y-4">
            {filteredSuggestions.map((s) => (
              <SuggestionCard
                key={s.id}
                suggestion={s}
                onAction={handleSuggestionAction}
                variant="full"
                className="shadow-lg hover:shadow-xl transition-all duration-300"
              />
            ))}
            {filteredSuggestions.length === 0 && (
              <div className="text-center p-12">
                <div className="w-24 h-24 rounded-full bg-gradient-to-br from-purple-100 to-pink-100 flex items-center justify-center mx-auto mb-6">
                  <Users className="w-12 h-12 text-purple-400" />
                </div>
                <h3 className="text-xl font-bold text-gray-800 mb-2">אין הצעות תואמות</h3>
                <p className="text-gray-600">נסה לשנות את קריטריוני החיפוש או הוסף הצעה חדשה</p>
              </div>
            )}
          </div>
        </ScrollArea>
      )}

      {/* Mobile Action Button */}
      <div className="p-4 bg-white/80 backdrop-blur-sm border-t sticky bottom-0">
        <Button 
          onClick={() => setShowNewSuggestion(true)} 
          className="w-full bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-700 hover:to-pink-700 shadow-xl text-lg py-6 rounded-2xl"
        >
          <Plus className="w-6 h-6 mr-3" />
          הצעה חדשה
          <Sparkles className="w-5 h-5 ml-2" />
        </Button>
      </div>
    </div>
  );

  const renderDesktopView = () => (
    <div className="min-h-screen bg-gradient-to-br from-slate-50 via-cyan-50/20 to-emerald-50/20">
      <div className="container mx-auto p-6 space-y-8">
        {/* Hero Section */}
        <MatchmakerHeroSection
          onNewSuggestion={() => setShowNewSuggestion(true)}
          onRefresh={handleRefresh}
          isRefreshing={isRefreshing}
          stats={heroStats}
        />

        {/* Enhanced Stats */}
        <EnhancedStats
          suggestions={suggestions}
          onFilterChange={(filter) => setFilters((prev) => ({ ...prev, ...filter }))}
        />

        {/* Main Content */}
        <Card className="shadow-2xl border-0 bg-white/95 backdrop-blur-sm overflow-hidden rounded-3xl">
          <div className="bg-gradient-to-r from-white via-purple-50/30 to-pink-50/30 border-b border-purple-100 p-6">
            <Tabs value={activeTab} onValueChange={setActiveTab}>
              <div className="flex items-center justify-between mb-6">
                <TabsList className="bg-purple-50/50 rounded-2xl p-1 h-14">
                  <TabsTrigger 
                    value="pending"
                    className="flex items-center gap-3 px-6 py-3 rounded-xl transition-all data-[state=active]:bg-white data-[state=active]:shadow-lg font-semibold text-base"
                  >
                    <Clock className="w-5 h-5 text-orange-500" />
                    <span>ממתין לאישור</span>
                    {pendingCount > 0 && (
                      <Badge className="bg-orange-500 text-white border-0 px-2 py-1 text-xs font-bold rounded-full min-w-[24px] h-6">
                        {pendingCount}
                      </Badge>
                    )}
                  </TabsTrigger>
                  <TabsTrigger 
                    value="active"
                    className="flex items-center gap-3 px-6 py-3 rounded-xl transition-all data-[state=active]:bg-white data-[state=active]:shadow-lg font-semibold text-base"
                  >
                    <Target className="w-5 h-5 text-green-500" />
                    <span>פעילות</span>
                    {activeCount > 0 && (
                      <Badge className="bg-green-500 text-white border-0 px-2 py-1 text-xs font-bold rounded-full min-w-[24px] h-6">
                        {activeCount}
                      </Badge>
                    )}
                  </TabsTrigger>
                  <TabsTrigger 
                    value="history"
                    className="flex items-center gap-3 px-6 py-3 rounded-xl transition-all data-[state=active]:bg-white data-[state=active]:shadow-lg font-semibold text-base"
                  >
                    <Archive className="w-5 h-5 text-gray-500" />
                    <span>היסטוריה</span>
                    {historyCount > 0 && (
                      <Badge className="bg-gray-500 text-white border-0 px-2 py-1 text-xs font-bold rounded-full min-w-[24px] h-6">
                        {historyCount}
                      </Badge>
                    )}
                  </TabsTrigger>
                </TabsList>

                <div className="flex items-center gap-3">
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={() => setShowMonthlyTrendDialog(true)}
                    className="border-purple-200 hover:bg-purple-50 text-purple-600"
                  >
                    <BarChart className="w-4 h-4 mr-2" />
                    מגמה חודשית
                  </Button>
                </div>
              </div>

              <SuggestionActionBar
                searchQuery={searchQuery}
                onSearchChange={setSearchQuery}
                filters={filters}
                onFiltersChange={setFilters}
                totalCount={suggestions.length}
                activeCount={activeCount}
                pendingCount={pendingCount}
                historyCount={historyCount}
              />

              {isLoading ? (
                <div className="flex items-center justify-center h-64">
                  <div className="text-center">
                    <Loader2 className="w-12 h-12 animate-spin text-purple-600 mx-auto mb-4" />
                    <p className="text-lg font-semibold text-gray-700">טוען הצעות...</p>
                  </div>
                </div>
              ) : (
                <>
                  <TabsContent value="pending" className="mt-6">
                    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                      {pendingSuggestions.map((suggestion) => (
                        <div key={suggestion.id} className="animate-fade-in-up">
                          <SuggestionCard
                            suggestion={suggestion}
                            onAction={handleSuggestionAction}
                            className="shadow-lg hover:shadow-xl transition-all duration-300"
                          />
                        </div>
                      ))}
                    </div>
                    {pendingSuggestions.length === 0 && (
                      <div className="text-center p-12">
                        <div className="w-24 h-24 rounded-full bg-gradient-to-br from-orange-100 to-amber-100 flex items-center justify-center mx-auto mb-6">
                          <Clock className="w-12 h-12 text-orange-400" />
                        </div>
                        <h3 className="text-xl font-bold text-gray-800 mb-2">אין הצעות ממתינות לאישור</h3>
                        <p className="text-gray-600">כל ההצעות אושרו או נדחו</p>
                      </div>
                    )}
                  </TabsContent>

                  <TabsContent value="active" className="mt-6">
                    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                      {activeSuggestions.map((suggestion) => (
                        <div key={suggestion.id} className="animate-fade-in-up">
                          <SuggestionCard
                            suggestion={suggestion}
                            onAction={handleSuggestionAction}
                            className="shadow-lg hover:shadow-xl transition-all duration-300"
                          />
                        </div>
                      ))}
                    </div>
                    {activeSuggestions.length === 0 && (
                      <div className="text-center p-12">
                        <div className="w-24 h-24 rounded-full bg-gradient-to-br from-green-100 to-emerald-100 flex items-center justify-center mx-auto mb-6">
                          <Target className="w-12 h-12 text-green-400" />
                        </div>
                        <h3 className="text-xl font-bold text-gray-800 mb-2">אין הצעות פעילות</h3>
                        <p className="text-gray-600">צור הצעה חדשה כדי להתחיל</p>
                      </div>
                    )}
                  </TabsContent>

                  <TabsContent value="history" className="mt-6">
                    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                      {historySuggestions.map((suggestion) => (
                        <div key={suggestion.id} className="animate-fade-in-up">
                          <SuggestionCard
                            suggestion={suggestion}
                            onAction={handleSuggestionAction}
                            className="shadow-lg hover:shadow-xl transition-all duration-300"
                          />
                        </div>
                      ))}
                    </div>
                    {historySuggestions.length === 0 && (
                      <div className="text-center p-12">
                        <div className="w-24 h-24 rounded-full bg-gradient-to-br from-gray-100 to-slate-100 flex items-center justify-center mx-auto mb-6">
                          <Archive className="w-12 h-12 text-gray-400" />
                        </div>
                        <h3 className="text-xl font-bold text-gray-800 mb-2">אין הצעות בהיסטוריה</h3>
                        <p className="text-gray-600">ההיסטוריה תמולא כשהצעות יושלמו</p>
                      </div>
                    )}
                  </TabsContent>
                </>
              )}
            </Tabs>
          </div>
        </Card>
      </div>
    </div>
  );

  return (
    <div className={cn('min-h-screen', !isMobile && 'p-0', isMobile && 'p-0')}>
      {isMobile ? renderMobileView() : renderDesktopView()}

      {/* Dialogs and Forms */}
      <NewSuggestionForm
        isOpen={showNewSuggestion}
        onClose={() => setShowNewSuggestion(false)}
        candidates={allCandidates}
        onSubmit={handleNewSuggestion}
      />

      <SuggestionDetailsDialog
        suggestion={selectedSuggestion}
        isOpen={!!selectedSuggestion}
        onClose={() => setSelectedSuggestion(null)}
        onAction={handleDialogAction}
        userId={session?.user?.id || ''}
      />

      <Dialog
        open={showMonthlyTrendDialog}
        onOpenChange={setShowMonthlyTrendDialog}
      >
        <DialogContent className="max-w-4xl">
          <DialogHeader>
            <DialogTitle>מגמה חודשית</DialogTitle>
          </DialogHeader>
          <MonthlyTrendModal suggestions={suggestions} />
        </DialogContent>
      </Dialog>

      <EditSuggestionForm
        isOpen={showEditForm}
        onClose={() => setShowEditForm(false)}
        suggestion={selectedSuggestion}
        onSave={handleUpdateSuggestion}
      />

      <MessageForm
        isOpen={showMessageForm}
        onClose={() => setShowMessageForm(false)}
        suggestion={selectedSuggestion}
        onSend={handleSendMessage}
      />

      {confirmAction && (
        <AlertDialog
          open={showConfirmDialog}
          onOpenChange={setShowConfirmDialog}
        >
          <AlertDialogContent className="border-0 shadow-2xl rounded-2xl">
            <AlertDialogHeader>
              <AlertDialogTitle className="text-xl font-bold text-center">
                האם את/ה בטוח/ה?
              </AlertDialogTitle>
              <AlertDialogDescription className="text-center text-gray-600 leading-relaxed">
                {confirmAction.type === 'delete' &&
                  'פעולה זו תמחק את ההצעה לצמיתות ולא ניתן יהיה לשחזר אותה.'}
              </AlertDialogDescription>
            </AlertDialogHeader>
            <AlertDialogFooter className="gap-3">
              <AlertDialogCancel className="rounded-xl">ביטול</AlertDialogCancel>
              <AlertDialogAction 
                onClick={handleConfirmAction}
                className="bg-gradient-to-r from-red-500 to-red-600 hover:from-red-600 hover:to-red-700 rounded-xl"
              >
                אישור
              </AlertDialogAction>
            </AlertDialogFooter>
          </AlertDialogContent>
        </AlertDialog>
      )}
    </div>
  );
}
--- End of Content for MatchmakerDashboard.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\app\components\matchmaker\suggestions\container\MonthlyTrendModal.tsx
--------------------------------------------------------------------------------
Content:
import React, { useMemo } from 'react';
import { Card, CardContent } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import {
  BarChart,
  Bar,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip,
  ResponsiveContainer,
  Legend,
  LineChart,
  Line,
  Area,
  AreaChart,
  PieChart,
  Pie,
  Cell,
  RadialBarChart,
  RadialBar,
} from 'recharts';
import {
  TrendingUp,
  TrendingDown,
  Calendar,
  BarChart3,
  LineChart as LineChartIcon,
  PieChart as PieChartIcon,
  Activity,
  Users,
  CheckCircle,
  Clock,
  Heart,
  Award,
  Target,
  ArrowUp,
  ArrowDown,
  Sparkles,
  Star,
  Crown,
  Zap,
  Download,
  RefreshCw,
  Eye,
  XCircle,
} from 'lucide-react';
import type { Suggestion } from '@/types/suggestions';
import { cn } from '@/lib/utils';

interface MonthlyTrendModalProps {
  suggestions: Suggestion[];
}

interface MonthlyData {
  month: string;
  year: number;
  count: number;
  active: number;
  pending: number;
  success: number;
  declined: number;
}

interface TrendCardProps {
  title: string;
  value: number;
  trend: number;
  icon: React.ElementType;
  gradient: string;
  description: string;
}

const TrendCard: React.FC<TrendCardProps> = ({
  title,
  value,
  trend,
  icon: Icon,
  gradient,
  description,
}) => (
  <Card className="border-0 shadow-xl hover:shadow-2xl transition-all duration-300 group overflow-hidden rounded-2xl">
    <div
      className={cn('absolute inset-0 opacity-5 bg-gradient-to-br', gradient)}
    />
    <div className="absolute top-0 right-0 w-20 h-20 bg-gradient-to-br from-white/20 to-transparent rounded-full blur-xl" />

    <CardContent className="relative z-10 p-6">
      <div className="flex items-center justify-between mb-4">
        <div
          className={cn(
            'p-3 rounded-full shadow-lg group-hover:scale-110 transition-transform bg-gradient-to-r text-white',
            gradient
          )}
        >
          <Icon className="w-6 h-6" />
        </div>
        <div
          className={cn(
            'flex items-center gap-1 px-3 py-1 rounded-full text-sm font-bold',
            trend >= 0
              ? 'bg-green-100 text-green-700'
              : 'bg-red-100 text-red-700'
          )}
        >
          {trend >= 0 ? (
            <ArrowUp className="w-3 h-3" />
          ) : (
            <ArrowDown className="w-3 h-3" />
          )}
          {Math.abs(trend)}%
        </div>
      </div>

      <div className="space-y-2">
        <h3 className="text-3xl font-bold text-gray-800">{value}</h3>
        <p className="text-sm font-medium text-gray-600">{title}</p>
        <p className="text-xs text-gray-500 leading-relaxed">{description}</p>
      </div>
    </CardContent>
  </Card>
);

const MonthlyTrendModal: React.FC<MonthlyTrendModalProps> = ({
  suggestions,
}) => {
  // Group suggestions by month to prepare data for chart
  const monthlyData = useMemo(() => {
    const data = suggestions.reduce(
      (acc, s) => {
        const createdDate = new Date(s.createdAt);
        const month = createdDate.getMonth();
        const year = createdDate.getFullYear();
        const key = `${year}-${month + 1}`;

        if (!acc[key]) {
          acc[key] = {
            month: new Date(year, month).toLocaleString('he', {
              month: 'short',
            }),
            year: year,
            count: 0,
            active: 0,
            pending: 0,
            success: 0,
            declined: 0,
          };
        }

        acc[key].count += 1;

        if (s.category === 'ACTIVE') acc[key].active += 1;
        if (s.category === 'PENDING') acc[key].pending += 1;
        if (['MARRIED', 'ENGAGED'].includes(s.status)) acc[key].success += 1;
        if (
          s.status === 'FIRST_PARTY_DECLINED' ||
          s.status === 'SECOND_PARTY_DECLINED'
        ) {
          acc[key].declined += 1;
        }

        return acc;
      },
      {} as Record<string, MonthlyData>
    );

    // Convert to array and sort by date
    return Object.values(data).sort((a, b) => {
      if (a.year !== b.year) return a.year - b.year;
      const monthA = new Date(
        a.year,
        a.month === 'ינו' ? 0 : new Date(`1 ${a.month} 2000`).getMonth()
      ).getMonth();
      const monthB = new Date(
        b.year,
        b.month === 'ינו' ? 0 : new Date(`1 ${b.month} 2000`).getMonth()
      ).getMonth();
      return monthA - monthB;
    });
  }, [suggestions]);

  // Calculate trends
  const trends = useMemo(() => {
    if (monthlyData.length < 2)
      return { active: 0, pending: 0, success: 0, total: 0 };

    const current = monthlyData[monthlyData.length - 1];
    const previous = monthlyData[monthlyData.length - 2];

    const calculateTrend = (current: number, previous: number) => {
      if (previous === 0) return current > 0 ? 100 : 0;
      return Math.round(((current - previous) / previous) * 100);
    };

    return {
      active: calculateTrend(current.active, previous.active),
      pending: calculateTrend(current.pending, previous.pending),
      success: calculateTrend(current.success, previous.success),
      total: calculateTrend(current.count, previous.count),
    };
  }, [monthlyData]);

  // Chart data
  const chartData = monthlyData.map((month) => ({
    name: `${month.month} ${month.year}`,
    פעילות: month.active,
    ממתינות: month.pending,
    הצלחות: month.success,
    נדחו: month.declined,
    'סה״כ': month.count,
  }));

  const pieData =
    monthlyData.length > 0
      ? [
          {
            name: 'פעילות',
            value: monthlyData[monthlyData.length - 1].active,
            color: '#3B82F6',
          },
          {
            name: 'ממתינות',
            value: monthlyData[monthlyData.length - 1].pending,
            color: '#F59E0B',
          },
          {
            name: 'הצלחות',
            value: monthlyData[monthlyData.length - 1].success,
            color: '#10B981',
          },
          {
            name: 'נדחו',
            value: monthlyData[monthlyData.length - 1].declined,
            color: '#EF4444',
          },
        ]
      : [];

  const COLORS = ['#3B82F6', '#F59E0B', '#10B981', '#EF4444'];

  if (monthlyData.length === 0) {
    return (
      <div className="p-12 text-center">
        <div className="w-24 h-24 rounded-full bg-gradient-to-br from-purple-100 to-pink-100 flex items-center justify-center mx-auto mb-6">
          <BarChart3 className="w-12 h-12 text-purple-400" />
        </div>
        <h3 className="text-xl font-bold text-gray-800 mb-2">
          אין מספיק נתונים
        </h3>
        <p className="text-gray-600">אין מספיק נתונים להצגת מגמה חודשית</p>
      </div>
    );
  }

  const currentMonth = monthlyData[monthlyData.length - 1];

  return (
    <div className="space-y-8 max-h-[80vh] overflow-y-auto">
      {/* Header */}
      <div className="relative">
        <div className="absolute inset-0 bg-gradient-to-r from-purple-50 via-cyan-50/30 to-emerald-50/20 rounded-3xl"></div>
        <div className="relative z-10 p-8 text-center">
          <div className="flex items-center justify-center gap-3 mb-4">
            <div className="p-3 rounded-full bg-gradient-to-r from-purple-500 to-pink-500 text-white shadow-xl">
              <TrendingUp className="w-8 h-8" />
            </div>
          </div>
          <h2 className="text-3xl font-bold bg-gradient-to-r from-purple-600 via-pink-600 to-blue-600 bg-clip-text text-transparent mb-2">
            מגמה חודשית מפורטת
          </h2>
          <p className="text-gray-600 text-lg">
            ניתוח מעמיק של ביצועי ההצעות לאורך זמן
          </p>
        </div>
      </div>

      {/* Trend Summary Cards */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
        <TrendCard
          title="סה״כ הצעות"
          value={currentMonth.count}
          trend={trends.total}
          icon={Users}
          gradient="from-blue-500 to-cyan-500"
          description={`${trends.total >= 0 ? 'גידול' : 'ירידה'} מהחודש הקודם`}
        />

        <TrendCard
          title="הצעות פעילות"
          value={currentMonth.active}
          trend={trends.active}
          icon={Target}
          gradient="from-green-500 to-emerald-500"
          description="הצעות בטיפול פעיל"
        />

        <TrendCard
          title="ממתינות לאישור"
          value={currentMonth.pending}
          trend={trends.pending}
          icon={Clock}
          gradient="from-yellow-500 to-amber-500"
          description="זמן תגובה ממוצע"
        />

        <TrendCard
          title="הצעות מוצלחות"
          value={currentMonth.success}
          trend={trends.success}
          icon={Crown}
          gradient="from-purple-500 to-pink-500"
          description="הגיעו להצלחה מלאה"
        />
      </div>

      {/* Charts Grid */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
        {/* Main Trend Chart */}
        <Card className="border-0 shadow-xl hover:shadow-2xl transition-all duration-300 bg-white overflow-hidden rounded-2xl">
          <CardContent className="p-6">
            <div className="flex items-center justify-between mb-6">
              <div className="flex items-center gap-3">
                <div className="p-3 rounded-full bg-gradient-to-r from-blue-500 to-cyan-500 text-white shadow-lg">
                  <BarChart3 className="w-6 h-6" />
                </div>
                <h3 className="text-xl font-bold text-gray-800">
                  מגמת הצעות לאורך זמן
                </h3>
              </div>
              <Badge className="bg-gradient-to-r from-blue-500 to-cyan-500 text-white px-3 py-1 rounded-full">
                {monthlyData.length} חודשים
              </Badge>
            </div>
            <div className="h-80">
              <ResponsiveContainer width="100%" height="100%">
                <AreaChart data={chartData}>
                  <defs>
                    <linearGradient
                      id="colorActive"
                      x1="0"
                      y1="0"
                      x2="0"
                      y2="1"
                    >
                      <stop offset="5%" stopColor="#3B82F6" stopOpacity={0.3} />
                      <stop offset="95%" stopColor="#3B82F6" stopOpacity={0} />
                    </linearGradient>
                    <linearGradient
                      id="colorPending"
                      x1="0"
                      y1="0"
                      x2="0"
                      y2="1"
                    >
                      <stop offset="5%" stopColor="#F59E0B" stopOpacity={0.3} />
                      <stop offset="95%" stopColor="#F59E0B" stopOpacity={0} />
                    </linearGradient>
                    <linearGradient
                      id="colorSuccess"
                      x1="0"
                      y1="0"
                      x2="0"
                      y2="1"
                    >
                      <stop offset="5%" stopColor="#10B981" stopOpacity={0.3} />
                      <stop offset="95%" stopColor="#10B981" stopOpacity={0} />
                    </linearGradient>
                  </defs>
                  <CartesianGrid strokeDasharray="3 3" stroke="#e5e7eb" />
                  <XAxis dataKey="name" stroke="#6b7280" fontSize={12} />
                  <YAxis stroke="#6b7280" fontSize={12} />
                  <Tooltip
                    contentStyle={{
                      backgroundColor: 'white',
                      border: 'none',
                      borderRadius: '12px',
                      boxShadow: '0 20px 25px -5px rgba(0, 0, 0, 0.1)',
                    }}
                    formatter={(value, name) => [value, name]}
                    labelFormatter={(label) => `חודש: ${label}`}
                  />
                  <Area
                    type="monotone"
                    dataKey="פעילות"
                    stroke="#3B82F6"
                    fillOpacity={1}
                    fill="url(#colorActive)"
                    strokeWidth={3}
                  />
                  <Area
                    type="monotone"
                    dataKey="ממתינות"
                    stroke="#F59E0B"
                    fillOpacity={1}
                    fill="url(#colorPending)"
                    strokeWidth={3}
                  />
                  <Area
                    type="monotone"
                    dataKey="הצלחות"
                    stroke="#10B981"
                    fillOpacity={1}
                    fill="url(#colorSuccess)"
                    strokeWidth={3}
                  />
                </AreaChart>
              </ResponsiveContainer>
            </div>
          </CardContent>
        </Card>

        {/* Distribution Pie Chart */}
        <Card className="border-0 shadow-xl hover:shadow-2xl transition-all duration-300 bg-white overflow-hidden rounded-2xl">
          <CardContent className="p-6">
            <div className="flex items-center justify-between mb-6">
              <div className="flex items-center gap-3">
                <div className="p-3 rounded-full bg-gradient-to-r from-purple-500 to-pink-500 text-white shadow-lg">
                  <PieChartIcon className="w-6 h-6" />
                </div>
                <h3 className="text-xl font-bold text-gray-800">
                  התפלגות החודש הנוכחי
                </h3>
              </div>
              <Badge className="bg-gradient-to-r from-purple-500 to-pink-500 text-white px-3 py-1 rounded-full">
                {currentMonth.month} {currentMonth.year}
              </Badge>
            </div>
            <div className="h-80">
              <ResponsiveContainer width="100%" height="100%">
                <PieChart>
                  <Pie
                    data={pieData}
                    cx="50%"
                    cy="50%"
                    labelLine={false}
                    label={({ name, percent }) =>
                      `${name} ${(percent * 100).toFixed(0)}%`
                    }
                    outerRadius={100}
                    fill="#8884d8"
                    dataKey="value"
                  >
                    {pieData.map((entry, index) => (
                      <Cell
                        key={`cell-${index}`}
                        fill={COLORS[index % COLORS.length]}
                      />
                    ))}
                  </Pie>
                  <Tooltip
                    contentStyle={{
                      backgroundColor: 'white',
                      border: 'none',
                      borderRadius: '12px',
                      boxShadow: '0 20px 25px -5px rgba(0, 0, 0, 0.1)',
                    }}
                  />
                </PieChart>
              </ResponsiveContainer>
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Detailed Monthly Breakdown Table */}
      <Card className="border-0 shadow-xl bg-white overflow-hidden rounded-2xl">
        <CardContent className="p-6">
          <div className="flex items-center justify-between mb-6">
            <div className="flex items-center gap-3">
              <div className="p-3 rounded-full bg-gradient-to-r from-emerald-500 to-green-500 text-white shadow-lg">
                <Activity className="w-6 h-6" />
              </div>
              <h3 className="text-xl font-bold text-gray-800">
                פירוט חודשי מלא
              </h3>
            </div>
            <div className="flex gap-2">
              <Button
                variant="outline"
                size="sm"
                className="rounded-xl border-emerald-200 text-emerald-600 hover:bg-emerald-50"
              >
                <Download className="w-4 h-4 ml-2" />
                ייצוא
              </Button>
              <Button
                variant="outline"
                size="sm"
                className="rounded-xl border-blue-200 text-blue-600 hover:bg-blue-50"
              >
                <Eye className="w-4 h-4 ml-2" />
                הצג הכל
              </Button>
            </div>
          </div>

          <div className="overflow-x-auto">
            <table className="w-full">
              <thead>
                <tr className="bg-gradient-to-r from-gray-50 to-slate-50">
                  <th className="p-4 text-right font-bold text-gray-800 border-b border-gray-200 rounded-tr-xl">
                    חודש
                  </th>
                  <th className="p-4 text-center font-bold text-gray-800 border-b border-gray-200">
                    סה״כ
                  </th>
                  <th className="p-4 text-center font-bold text-gray-800 border-b border-gray-200">
                    פעילות
                  </th>
                  <th className="p-4 text-center font-bold text-gray-800 border-b border-gray-200">
                    ממתינות
                  </th>
                  <th className="p-4 text-center font-bold text-gray-800 border-b border-gray-200">
                    הצלחות
                  </th>
                  <th className="p-4 text-center font-bold text-gray-800 border-b border-gray-200 rounded-tl-xl">
                    נדחו
                  </th>
                </tr>
              </thead>
              <tbody>
                {monthlyData
                  .slice()
                  .reverse()
                  .map((month, idx) => (
                    <tr
                      key={idx}
                      className={cn(
                        'hover:bg-gradient-to-r hover:from-blue-50 hover:to-cyan-50 transition-all duration-200',
                        idx % 2 === 0 ? 'bg-white' : 'bg-gray-50/50',
                        idx === 0 &&
                          'bg-gradient-to-r from-blue-50 to-cyan-50 font-semibold'
                      )}
                    >
                      <td className="p-4 border-b border-gray-100">
                        <div className="flex items-center gap-2">
                          <Calendar className="w-4 h-4 text-blue-500" />
                          <span className="font-bold text-gray-800">
                            {month.month} {month.year}
                          </span>
                          {idx === 0 && (
                            <Badge className="bg-gradient-to-r from-blue-500 to-cyan-500 text-white text-xs px-2 py-1">
                              נוכחי
                            </Badge>
                          )}
                        </div>
                      </td>
                      <td className="p-4 text-center border-b border-gray-100">
                        <div className="flex items-center justify-center gap-2">
                          <Users className="w-4 h-4 text-blue-500" />
                          <span className="font-bold text-blue-600">
                            {month.count}
                          </span>
                        </div>
                      </td>
                      <td className="p-4 text-center border-b border-gray-100">
                        <div className="flex items-center justify-center gap-2">
                          <Target className="w-4 h-4 text-green-500" />
                          <span className="font-bold text-green-600">
                            {month.active}
                          </span>
                        </div>
                      </td>
                      <td className="p-4 text-center border-b border-gray-100">
                        <div className="flex items-center justify-center gap-2">
                          <Clock className="w-4 h-4 text-yellow-500" />
                          <span className="font-bold text-yellow-600">
                            {month.pending}
                          </span>
                        </div>
                      </td>
                      <td className="p-4 text-center border-b border-gray-100">
                        <div className="flex items-center justify-center gap-2">
                          <Crown className="w-4 h-4 text-purple-500" />
                          <span className="font-bold text-purple-600">
                            {month.success}
                          </span>
                        </div>
                      </td>
                      <td className="p-4 text-center border-b border-gray-100">
                        <div className="flex items-center justify-center gap-2">
                          <XCircle className="w-4 h-4 text-red-500" />
                          <span className="font-bold text-red-600">
                            {month.declined}
                          </span>
                        </div>
                      </td>
                    </tr>
                  ))}
              </tbody>
            </table>
          </div>
        </CardContent>
      </Card>

      {/* Key Insights */}
      <Card className="border-0 shadow-xl bg-gradient-to-r from-indigo-50 to-purple-50 overflow-hidden rounded-2xl">
        <CardContent className="p-8">
          <div className="flex items-center gap-4 mb-6">
            <div className="p-4 rounded-full bg-gradient-to-r from-indigo-500 to-purple-500 text-white shadow-xl">
              <Sparkles className="w-8 h-8" />
            </div>
            <div>
              <h3 className="text-2xl font-bold text-indigo-800">
                תובנות מרכזיות
              </h3>
              <p className="text-indigo-600">ניתוח המגמות והביצועים</p>
            </div>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            <div className="p-6 bg-white/70 rounded-xl shadow-lg">
              <div className="flex items-center gap-3 mb-3">
                <TrendingUp className="w-6 h-6 text-green-500" />
                <h4 className="font-bold text-gray-800">מגמת צמיחה</h4>
              </div>
              <p className="text-sm text-gray-700 leading-relaxed">
                {trends.total >= 0
                  ? `גידול של ${trends.total}% בכמות ההצעות השוטפות מהחודש הקודם`
                  : `ירידה של ${Math.abs(trends.total)}% בכמות ההצעות השוטפות מהחודש הקודם`}
              </p>
            </div>

            <div className="p-6 bg-white/70 rounded-xl shadow-lg">
              <div className="flex items-center gap-3 mb-3">
                <Award className="w-6 h-6 text-purple-500" />
                <h4 className="font-bold text-gray-800">אחוז הצלחה</h4>
              </div>
              <p className="text-sm text-gray-700 leading-relaxed">
                {currentMonth.count > 0
                  ? `${Math.round((currentMonth.success / currentMonth.count) * 100)}% מההצעות הגיעו להצלחה בחודש הנוכחי`
                  : 'אין מספיק נתונים לחישוב אחוז הצלחה'}
              </p>
            </div>

            <div className="p-6 bg-white/70 rounded-xl shadow-lg">
              <div className="flex items-center gap-3 mb-3">
                <Activity className="w-6 h-6 text-blue-500" />
                <h4 className="font-bold text-gray-800">פעילות שוטפת</h4>
              </div>
              <p className="text-sm text-gray-700 leading-relaxed">
                {currentMonth.active + currentMonth.pending} הצעות זקוקות לטיפול
                פעיל או המתנה לתגובה
              </p>
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  );
};

export default MonthlyTrendModal;
--- End of Content for MonthlyTrendModal.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\app\components\matchmaker\suggestions\container\SuggestionActionBar.tsx
--------------------------------------------------------------------------------
Content:
import React, { useState } from 'react';
import { Input } from '@/components/ui/input';
import { Button } from '@/components/ui/button';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select';
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from '@/components/ui/popover';
import { Badge } from '@/components/ui/badge';
import { DatePicker } from '@/components/ui/date-picker';
import {
  Search,
  Filter,
  X,
  Calendar,
  User,
  Clock,
  ChevronDown,
  AlertCircle,
  CheckCircle,
  XCircle,
  RefreshCw,
  SlidersHorizontal,
  Sparkles,
  Target,
  Zap,
  Settings,
  TrendingUp,
  Activity,
  BarChart3,
  Star,
  Flame,
} from 'lucide-react';
import { Checkbox } from '@/components/ui/checkbox';
import { Priority, MatchSuggestionStatus } from '@prisma/client';
import type { SuggestionFilters, SortByOption } from '@/types/suggestions';
import { Card, CardContent } from '@/components/ui/card';
import { cn } from '@/lib/utils';

interface SuggestionActionBarProps {
  searchQuery: string;
  onSearchChange: (value: string) => void;
  filters: SuggestionFilters;
  onFiltersChange: (filters: SuggestionFilters) => void;
  totalCount: number;
  activeCount: number;
  pendingCount: number;
  historyCount: number;
}

const SuggestionActionBar: React.FC<SuggestionActionBarProps> = ({
  searchQuery,
  onSearchChange,
  filters,
  onFiltersChange,
  totalCount,
  activeCount,
  pendingCount,
  historyCount,
}) => {
  const [showAdvancedFilters, setShowAdvancedFilters] = useState(false);
  const activeFilters = Object.keys(filters).length;
  const [dateRange, setDateRange] = useState<{
    from: Date | undefined;
    to: Date | undefined;
  }>({
    from: filters.dateRange?.start,
    to: filters.dateRange?.end,
  });

  const handleRemoveFilter = (key: keyof SuggestionFilters) => {
    const newFilters = { ...filters };
    delete newFilters[key];
    onFiltersChange(newFilters);
  };

  const handleDateRangeChange = (range: {
    from: Date | undefined;
    to: Date | undefined;
  }) => {
    setDateRange(range);
    if (range.from) {
      onFiltersChange({
        ...filters,
        dateRange: {
          start: range.from,
          end: range.to || new Date(),
        },
      });
    } else {
      const newFilters = { ...filters };
      delete newFilters.dateRange;
      onFiltersChange(newFilters);
    }
  };

  const getStatusIcon = (status: string) => {
    switch (status) {
      case 'PENDING_FIRST_PARTY':
      case 'PENDING_SECOND_PARTY':
        return <Clock className="h-4 w-4 ml-1" />;
      case 'FIRST_PARTY_APPROVED':
      case 'SECOND_PARTY_APPROVED':
        return <CheckCircle className="h-4 w-4 ml-1" />;
      case 'FIRST_PARTY_DECLINED':
      case 'SECOND_PARTY_DECLINED':
        return <XCircle className="h-4 w-4 ml-1" />;
      default:
        return <AlertCircle className="h-4 w-4 ml-1" />;
    }
  };

  const getPriorityInfo = (priority: string) => {
    switch (priority) {
      case 'URGENT':
        return {
          icon: Flame,
          color: 'text-red-600',
          bg: 'bg-red-50',
          border: 'border-red-200',
        };
      case 'HIGH':
        return {
          icon: Star,
          color: 'text-orange-600',
          bg: 'bg-orange-50',
          border: 'border-orange-200',
        };
      case 'MEDIUM':
        return {
          icon: Target,
          color: 'text-blue-600',
          bg: 'bg-blue-50',
          border: 'border-blue-200',
        };
      case 'LOW':
        return {
          icon: Settings,
          color: 'text-gray-600',
          bg: 'bg-gray-50',
          border: 'border-gray-200',
        };
      default:
        return {
          icon: Target,
          color: 'text-blue-600',
          bg: 'bg-blue-50',
          border: 'border-blue-200',
        };
    }
  };

  return (
    <div className="space-y-6">
      {/* Modern Search and Quick Filters */}
      <Card className="border-0 shadow-xl bg-gradient-to-r from-white via-purple-50/30 to-pink-50/30 overflow-hidden rounded-2xl">
        <CardContent className="p-6">
          <div className="flex flex-col lg:flex-row gap-4 items-center">
            {/* Enhanced Search */}
            <div className="relative flex-1 w-full lg:w-auto">
              <div className="absolute inset-0 bg-gradient-to-r from-purple-500/5 to-pink-500/5 rounded-xl"></div>
              <Search className="absolute right-4 top-1/2 transform -translate-y-1/2 h-5 w-5 text-purple-400" />
              <Input
                value={searchQuery}
                onChange={(e) => onSearchChange(e.target.value)}
                placeholder="חיפוש הצעות לפי שם, עיר או כל מידע אחר..."
                className="relative z-10 h-14 pr-14 text-right border-2 border-purple-200 hover:border-purple-300 focus:border-purple-500 rounded-xl bg-white/80 backdrop-blur-sm shadow-lg transition-all duration-300 text-lg"
              />
              <div className="absolute left-3 top-1/2 transform -translate-y-1/2">
                <Sparkles className="h-4 w-4 text-purple-400" />
              </div>
            </div>

            {/* Priority Filter */}
            <div className="w-full lg:w-auto">
              <Select
                value={filters.priority?.[0] || 'all'}
                onValueChange={(value) =>
                  onFiltersChange({
                    ...filters,
                    priority: value === 'all' ? undefined : [value as Priority],
                  })
                }
              >
                <SelectTrigger className="h-14 w-full lg:w-48 border-2 border-purple-200 hover:border-purple-300 focus:border-purple-500 rounded-xl bg-white/80 backdrop-blur-sm shadow-lg transition-all">
                  <div className="flex items-center gap-2">
                    <Star className="w-5 h-5 text-purple-500" />
                    <SelectValue placeholder="עדיפות" />
                  </div>
                </SelectTrigger>
                <SelectContent className="border-0 shadow-2xl rounded-xl">
                  <SelectItem value="all">
                    <div className="flex items-center gap-3">
                      <div className="w-3 h-3 rounded-full bg-gradient-to-r from-purple-500 to-pink-500"></div>
                      כל העדיפויות
                    </div>
                  </SelectItem>
                  {Object.values(Priority).map((p) => {
                    const info = getPriorityInfo(p);
                    const Icon = info.icon;
                    return (
                      <SelectItem key={p} value={p}>
                        <div className="flex items-center gap-3">
                          <Icon className={cn('w-4 h-4', info.color)} />
                          {p === 'URGENT'
                            ? 'דחוף'
                            : p === 'HIGH'
                              ? 'גבוהה'
                              : p === 'MEDIUM'
                                ? 'רגילה'
                                : 'נמוכה'}
                        </div>
                      </SelectItem>
                    );
                  })}
                </SelectContent>
              </Select>
            </div>

            {/* Date Range Picker */}
            <Popover>
              <PopoverTrigger asChild>
                <Button
                  variant="outline"
                  className="h-14 px-6 border-2 border-purple-200 hover:border-purple-300 hover:bg-purple-50 rounded-xl bg-white/80 backdrop-blur-sm shadow-lg transition-all duration-300"
                >
                  <Calendar className="h-5 w-5 ml-2 text-purple-500" />
                  <span className="font-medium">טווח זמן</span>
                  <ChevronDown className="h-4 w-4 mr-2 text-purple-400" />
                </Button>
              </PopoverTrigger>
              <PopoverContent
                className="w-auto p-4 border-0 shadow-2xl rounded-2xl bg-white/95 backdrop-blur-sm"
                align="end"
              >
                <div className="space-y-4">
                  <div className="flex items-center gap-2">
                    <Calendar className="w-5 h-5 text-purple-500" />
                    <h4 className="font-bold text-gray-800">
                      בחר טווח תאריכים
                    </h4>
                  </div>
                  <DatePicker
                    onChange={handleDateRangeChange}
                    value={dateRange}
                    isRange={true}
                  />
                  <div className="flex justify-end">
                    <Button
                      size="sm"
                      variant="outline"
                      onClick={() =>
                        handleDateRangeChange({
                          from: undefined,
                          to: undefined,
                        })
                      }
                      className="rounded-xl border-purple-200 text-purple-600 hover:bg-purple-50"
                    >
                      נקה
                    </Button>
                  </div>
                </div>
              </PopoverContent>
            </Popover>

            {/* Advanced Filters Toggle */}
            <Button
              variant={showAdvancedFilters ? 'default' : 'outline'}
              onClick={() => setShowAdvancedFilters(!showAdvancedFilters)}
              className={cn(
                'h-14 px-6 rounded-xl transition-all duration-300 font-bold',
                showAdvancedFilters
                  ? 'bg-gradient-to-r from-purple-600 to-pink-600 text-white shadow-xl hover:shadow-2xl'
                  : 'border-2 border-purple-200 hover:border-purple-300 hover:bg-purple-50 bg-white/80 backdrop-blur-sm shadow-lg text-purple-600'
              )}
            >
              <SlidersHorizontal className="w-5 h-5 ml-2" />
              מסננים מתקדמים
              {activeFilters > 0 && (
                <Badge className="mr-2 bg-white/20 text-current border-white/30 px-2 py-1">
                  {activeFilters}
                </Badge>
              )}
            </Button>
          </div>
        </CardContent>
      </Card>

      {/* Stats Row */}
      <Card className="border-0 shadow-lg bg-gradient-to-r from-slate-50 to-blue-50/30 rounded-2xl overflow-hidden">
        <CardContent className="p-4">
          <div className="flex flex-wrap justify-between items-center gap-4">
            <div className="flex flex-wrap items-center gap-6">
              <div className="flex items-center gap-3 group">
                <div className="p-2 rounded-full bg-gradient-to-r from-blue-500 to-cyan-500 text-white shadow-lg group-hover:scale-110 transition-transform">
                  <BarChart3 className="w-4 h-4" />
                </div>
                <div>
                  <div className="text-2xl font-bold text-blue-600">
                    {totalCount}
                  </div>
                  <div className="text-xs font-medium text-blue-700">
                    סה״כ הצעות
                  </div>
                </div>
              </div>

              <div className="flex items-center gap-3 group">
                <div className="p-2 rounded-full bg-gradient-to-r from-green-500 to-emerald-500 text-white shadow-lg group-hover:scale-110 transition-transform">
                  <Activity className="w-4 h-4" />
                </div>
                <div>
                  <div className="text-2xl font-bold text-green-600">
                    {activeCount}
                  </div>
                  <div className="text-xs font-medium text-green-700">
                    פעילות
                  </div>
                </div>
              </div>

              <div className="flex items-center gap-3 group">
                <div className="p-2 rounded-full bg-gradient-to-r from-yellow-500 to-amber-500 text-white shadow-lg group-hover:scale-110 transition-transform">
                  <Clock className="w-4 h-4" />
                </div>
                <div>
                  <div className="text-2xl font-bold text-yellow-600">
                    {pendingCount}
                  </div>
                  <div className="text-xs font-medium text-yellow-700">
                    ממתינות
                  </div>
                </div>
              </div>

              <div className="flex items-center gap-3 group">
                <div className="p-2 rounded-full bg-gradient-to-r from-gray-500 to-slate-500 text-white shadow-lg group-hover:scale-110 transition-transform">
                  <TrendingUp className="w-4 h-4" />
                </div>
                <div>
                  <div className="text-2xl font-bold text-gray-600">
                    {historyCount}
                  </div>
                  <div className="text-xs font-medium text-gray-700">
                    היסטוריה
                  </div>
                </div>
              </div>
            </div>

            {activeFilters > 0 && (
              <Button
                variant="ghost"
                size="sm"
                onClick={() => onFiltersChange({})}
                className="text-gray-500 hover:text-gray-700 hover:bg-red-50 rounded-xl transition-all"
              >
                <RefreshCw className="w-4 h-4 ml-2" />
                נקה את כל המסננים ({activeFilters})
              </Button>
            )}
          </div>
        </CardContent>
      </Card>

      {/* Advanced Filters */}
      {showAdvancedFilters && (
        <Card className="border-0 shadow-xl bg-gradient-to-r from-purple-50 to-pink-50 rounded-2xl overflow-hidden">
          <CardContent className="p-6">
            <div className="flex items-center justify-between mb-6">
              <div className="flex items-center gap-3">
                <div className="p-3 rounded-full bg-gradient-to-r from-purple-500 to-pink-500 text-white shadow-lg">
                  <SlidersHorizontal className="w-6 h-6" />
                </div>
                <h3 className="text-xl font-bold text-gray-800">
                  מסננים מתקדמים
                </h3>
              </div>
              <Button
                variant="ghost"
                size="sm"
                className="h-10 px-3 rounded-xl hover:bg-white/50"
                onClick={() => setShowAdvancedFilters(false)}
              >
                <X className="h-5 w-5" />
              </Button>
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
              {/* Status Filter */}
              <div className="space-y-4">
                <div className="flex items-center gap-3">
                  <div className="p-2 rounded-full bg-gradient-to-r from-blue-500 to-cyan-500 text-white shadow-lg">
                    <Zap className="w-4 h-4" />
                  </div>
                  <h4 className="font-bold text-gray-800">סטטוס</h4>
                </div>
                <div className="space-y-3 max-h-60 overflow-y-auto">
                  {[
                    {
                      value: 'PENDING_FIRST_PARTY',
                      label: "ממתין לתשובת צד א'",
                      icon: Clock,
                      color: 'text-yellow-600',
                    },
                    {
                      value: 'PENDING_SECOND_PARTY',
                      label: "ממתין לתשובת צד ב'",
                      icon: Clock,
                      color: 'text-blue-600',
                    },
                    {
                      value: 'FIRST_PARTY_APPROVED',
                      label: "צד א' אישר",
                      icon: CheckCircle,
                      color: 'text-green-600',
                    },
                    {
                      value: 'SECOND_PARTY_APPROVED',
                      label: "צד ב' אישר",
                      icon: CheckCircle,
                      color: 'text-green-600',
                    },
                    {
                      value: 'DATING',
                      label: 'בתהליך היכרות',
                      icon: AlertCircle,
                      color: 'text-pink-600',
                    },
                  ].map((status) => {
                    const Icon = status.icon;
                    return (
                      <div
                        key={status.value}
                        className="flex items-center space-x-2 p-3 bg-white/70 rounded-xl hover:bg-white/90 transition-all"
                      >
                        <Checkbox
                          id={`status-${status.value}`}
                          checked={filters.status?.includes(
                            status.value as MatchSuggestionStatus
                          )}
                          onCheckedChange={(checked) => {
                            if (checked) {
                              const newStatus = [
                                ...(filters.status || []),
                                status.value,
                              ];
                              onFiltersChange({
                                ...filters,
                                status: newStatus as MatchSuggestionStatus[],
                              });
                            } else {
                              onFiltersChange({
                                ...filters,
                                status: filters.status?.filter(
                                  (s) => s !== status.value
                                ) as MatchSuggestionStatus[],
                              });
                            }
                          }}
                        />
                        <label
                          htmlFor={`status-${status.value}`}
                          className="text-sm mr-2 flex items-center gap-2 cursor-pointer flex-1"
                        >
                          <Icon className={cn('h-4 w-4', status.color)} />
                          {status.label}
                        </label>
                      </div>
                    );
                  })}
                </div>
              </div>

              {/* User Filter */}
              <div className="space-y-4">
                <div className="flex items-center gap-3">
                  <div className="p-2 rounded-full bg-gradient-to-r from-green-500 to-emerald-500 text-white shadow-lg">
                    <User className="w-4 h-4" />
                  </div>
                  <h4 className="font-bold text-gray-800">משתתפים</h4>
                </div>
                <div className="p-4 bg-white/70 rounded-xl">
                  <Select
                    value={filters.userId || 'all'}
                    onValueChange={(value) =>
                      onFiltersChange({
                        ...filters,
                        userId: value === 'all' ? undefined : value,
                      })
                    }
                  >
                    <SelectTrigger className="border-2 border-green-200 focus:border-green-400 rounded-xl">
                      <div className="flex items-center gap-2">
                        <User className="h-4 w-4 text-green-500" />
                        <SelectValue placeholder="בחר משתתף" />
                      </div>
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="all">כל המשתתפים</SelectItem>
                      <SelectItem value="user1">ישראל ישראלי</SelectItem>
                      <SelectItem value="user2">שרה כהן</SelectItem>
                      <SelectItem value="user3">דוד לוי</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
              </div>

              {/* Sort By */}
              <div className="space-y-4">
                <div className="flex items-center gap-3">
                  <div className="p-2 rounded-full bg-gradient-to-r from-purple-500 to-pink-500 text-white shadow-lg">
                    <TrendingUp className="w-4 h-4" />
                  </div>
                  <h4 className="font-bold text-gray-800">מיון לפי</h4>
                </div>
                <div className="p-4 bg-white/70 rounded-xl">
                  <Select
                    value={filters.sortBy || 'lastActivity'}
                    onValueChange={(value) =>
                      onFiltersChange({
                        ...filters,
                        sortBy: value as SortByOption,
                      })
                    }
                  >
                    <SelectTrigger className="border-2 border-purple-200 focus:border-purple-400 rounded-xl">
                      <div className="flex items-center gap-2">
                        <TrendingUp className="h-4 w-4 text-purple-500" />
                        <SelectValue placeholder="מיון לפי" />
                      </div>
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="lastActivity">
                        פעילות אחרונה
                      </SelectItem>
                      <SelectItem value="createdAt">תאריך יצירה</SelectItem>
                      <SelectItem value="priority">עדיפות</SelectItem>
                      <SelectItem value="decisionDeadline">
                        תאריך יעד
                      </SelectItem>
                    </SelectContent>
                  </Select>
                </div>
              </div>
            </div>
          </CardContent>
        </Card>
      )}

      {/* Active Filters Display */}
      {activeFilters > 0 && (
        <Card className="border-0 shadow-lg bg-gradient-to-r from-indigo-50 to-purple-50 rounded-2xl">
          <CardContent className="p-4">
            <div className="flex items-center justify-between">
              <div className="flex items-center gap-3">
                <div className="p-2 rounded-full bg-gradient-to-r from-indigo-500 to-purple-500 text-white shadow-lg">
                  <Filter className="w-4 h-4" />
                </div>
                <span className="font-bold text-indigo-800">סינון פעיל:</span>
              </div>

              <div className="flex items-center gap-2 flex-wrap">
                {filters.priority && (
                  <Badge className="bg-gradient-to-r from-orange-500 to-amber-500 text-white border-0 shadow-lg px-3 py-1 rounded-xl">
                    <Star className="w-3 h-3 ml-1" />
                    עדיפות:{' '}
                    {filters.priority[0] === 'URGENT'
                      ? 'דחוף'
                      : filters.priority[0] === 'HIGH'
                        ? 'גבוהה'
                        : filters.priority[0] === 'MEDIUM'
                          ? 'רגילה'
                          : 'נמוכה'}
                    <button
                      onClick={() => handleRemoveFilter('priority')}
                      className="ml-2 hover:bg-white/20 rounded-full p-0.5 transition-all"
                    >
                      <X className="w-3 h-3" />
                    </button>
                  </Badge>
                )}

                {filters.dateRange && (
                  <Badge className="bg-gradient-to-r from-blue-500 to-cyan-500 text-white border-0 shadow-lg px-3 py-1 rounded-xl">
                    <Calendar className="w-3 h-3 ml-1" />
                    תאריך:{' '}
                    {new Date(filters.dateRange.start).toLocaleDateString(
                      'he-IL'
                    )}
                    {filters.dateRange.end &&
                      ` - ${new Date(filters.dateRange.end).toLocaleDateString('he-IL')}`}
                    <button
                      onClick={() => handleRemoveFilter('dateRange')}
                      className="ml-2 hover:bg-white/20 rounded-full p-0.5 transition-all"
                    >
                      <X className="w-3 h-3" />
                    </button>
                  </Badge>
                )}

                {filters.status && filters.status.length > 0 && (
                  <Badge className="bg-gradient-to-r from-green-500 to-emerald-500 text-white border-0 shadow-lg px-3 py-1 rounded-xl">
                    <AlertCircle className="w-3 h-3 ml-1" />
                    סטטוס:{' '}
                    {filters.status.length === 1
                      ? '1 סטטוס'
                      : `${filters.status.length} סטטוסים`}
                    <button
                      onClick={() => handleRemoveFilter('status')}
                      className="ml-2 hover:bg-white/20 rounded-full p-0.5 transition-all"
                    >
                      <X className="w-3 h-3" />
                    </button>
                  </Badge>
                )}

                {filters.userId && (
                  <Badge className="bg-gradient-to-r from-purple-500 to-pink-500 text-white border-0 shadow-lg px-3 py-1 rounded-xl">
                    <User className="w-3 h-3 ml-1" />
                    משתתף מסוים
                    <button
                      onClick={() => handleRemoveFilter('userId')}
                      className="ml-2 hover:bg-white/20 rounded-full p-0.5 transition-all"
                    >
                      <X className="w-3 h-3" />
                    </button>
                  </Badge>
                )}

                <Button
                  variant="ghost"
                  size="sm"
                  onClick={() => onFiltersChange({})}
                  className="text-indigo-600 hover:text-indigo-700 hover:bg-indigo-100 rounded-xl transition-all font-medium"
                >
                  <RefreshCw className="w-3 h-3 ml-1" />
                  נקה הכל
                </Button>
              </div>
            </div>
          </CardContent>
        </Card>
      )}
    </div>
  );
};

export default SuggestionActionBar;
--- End of Content for SuggestionActionBar.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\app\components\matchmaker\suggestions\container\SuggestionsStats.tsx
--------------------------------------------------------------------------------
Content:
import React, { useMemo } from 'react';
import { Card, CardContent } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import {
  Users,
  CheckCircle,
  Clock,
  Calendar,
  AlertCircle,
  Ban,
  X,
  TrendingUp,
  TrendingDown,
  ArrowUp,
  ArrowDown,
  Heart,
  Star,
  Target,
  Crown,
  Zap,
  Award,
  Activity,
  BarChart3,
  PieChart,
  LineChart,
  Sparkles,
  Gift,
} from 'lucide-react';
import {
  BarChart,
  Bar,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip,
  ResponsiveContainer,
  Legend,
  PieChart as RechartsPieChart,
  Pie,
  Cell,
  LineChart as RechartsLineChart,
  Line,
  Area,
  AreaChart,
} from 'recharts';
import type { Suggestion, SuggestionFilters } from '@/types/suggestions';
import { cn } from '@/lib/utils';

interface StatsCardProps {
  icon: React.ElementType;
  title: string;
  value: string | number;
  trend?: {
    value: number;
    isPositive: boolean;
    label?: string;
  };
  className?: string;
  onClick?: () => void;
  isClickable?: boolean;
  description?: string;
  gradient: string;
}

interface SuggestionsStatsProps {
  suggestions: Suggestion[];
  className?: string;
  onFilterChange?: (filter: Partial<SuggestionFilters>) => void;
}

const ModernStatsCard: React.FC<StatsCardProps> = ({
  icon: Icon,
  title,
  value,
  trend,
  className,
  onClick,
  isClickable = false,
  description,
  gradient,
}) => (
  <Card
    className={cn(
      'relative overflow-hidden border-0 shadow-xl hover:shadow-2xl transition-all duration-500 group',
      'bg-gradient-to-br from-white via-gray-50/30 to-white',
      isClickable && 'cursor-pointer transform hover:scale-105',
      className
    )}
    onClick={onClick}
  >
    {/* Background gradient overlay */}
    <div
      className={cn('absolute inset-0 opacity-5 bg-gradient-to-br', gradient)}
    />

    {/* Decorative elements */}
    <div className="absolute top-0 right-0 w-20 h-20 bg-gradient-to-br from-white/20 to-transparent rounded-full blur-xl" />
    <div className="absolute bottom-0 left-0 w-16 h-16 bg-gradient-to-br from-white/10 to-transparent rounded-full blur-lg" />

    <CardContent className="relative z-10 p-6">
      <div className="flex items-center justify-between mb-4">
        <div
          className={cn(
            'p-3 rounded-full shadow-lg group-hover:scale-110 transition-transform bg-gradient-to-r text-white',
            gradient
          )}
        >
          <Icon className="w-6 h-6" />
        </div>
        {trend && (
          <div
            className={cn(
              'flex items-center gap-1 px-3 py-1 rounded-full text-sm font-bold',
              trend.isPositive
                ? 'bg-green-100 text-green-700'
                : 'bg-red-100 text-red-700'
            )}
          >
            {trend.isPositive ? (
              <ArrowUp className="w-3 h-3" />
            ) : (
              <ArrowDown className="w-3 h-3" />
            )}
            {Math.abs(trend.value)}%
          </div>
        )}
      </div>

      <div className="space-y-2">
        <h3
          className="text-3xl font-bold text-gray-800 group-hover:text-transparent group-hover:bg-gradient-to-r group-hover:bg-clip-text transition-all duration-300"
          style={{
            backgroundImage: `linear-gradient(to right, ${gradient.replace('from-', '').replace('to-', ', ')})`,
          }}
        >
          {value}
        </h3>
        <p className="text-sm font-medium text-gray-600">{title}</p>
        {description && (
          <p className="text-xs text-gray-500 leading-relaxed">{description}</p>
        )}
        {trend?.label && <p className="text-xs text-gray-500">{trend.label}</p>}
      </div>
    </CardContent>
  </Card>
);

const SuggestionsStats: React.FC<SuggestionsStatsProps> = ({
  suggestions,
  className,
  onFilterChange,
}) => {
  const stats = useMemo(() => {
    const total = suggestions.length;
    const active = suggestions.filter((s) => s.category === 'ACTIVE').length;
    const pending = suggestions.filter((s) => s.category === 'PENDING').length;
    const history = suggestions.filter((s) => s.category === 'HISTORY').length;

    const approvedByFirst = suggestions.filter(
      (s) => s.status === 'FIRST_PARTY_APPROVED'
    ).length;
    const approvedBySecond = suggestions.filter(
      (s) => s.status === 'SECOND_PARTY_APPROVED'
    ).length;
    const declined = suggestions.filter(
      (s) =>
        s.status === 'FIRST_PARTY_DECLINED' ||
        s.status === 'SECOND_PARTY_DECLINED'
    ).length;
    const expired = suggestions.filter((s) => s.status === 'EXPIRED').length;
    const dating = suggestions.filter((s) => s.status === 'DATING').length;
    const success = suggestions.filter((s) =>
      ['MARRIED', 'ENGAGED'].includes(s.status)
    ).length;

    const byStatus = suggestions.reduce(
      (acc, s) => {
        acc[s.status] = (acc[s.status] || 0) + 1;
        return acc;
      },
      {} as Record<string, number>
    );

    // Group suggestions by month for trends
    const monthlyData = suggestions.reduce(
      (acc, s) => {
        const month = new Date(s.createdAt).getMonth();
        const year = new Date(s.createdAt).getFullYear();
        const key = `${year}-${month + 1}`;

        if (!acc[key]) {
          acc[key] = {
            month: new Date(year, month).toLocaleString('he', {
              month: 'short',
            }),
            year: year,
            count: 0,
            active: 0,
            pending: 0,
            success: 0,
            declined: 0,
          };
        }

        acc[key].count += 1;
        if (s.category === 'ACTIVE') acc[key].active += 1;
        if (s.category === 'PENDING') acc[key].pending += 1;
        if (['MARRIED', 'ENGAGED'].includes(s.status)) acc[key].success += 1;
        if (
          s.status === 'FIRST_PARTY_DECLINED' ||
          s.status === 'SECOND_PARTY_DECLINED'
        ) {
          acc[key].declined += 1;
        }

        return acc;
      },
      {} as Record<
        string,
        {
          month: string;
          year: number;
          count: number;
          active: number;
          pending: number;
          success: number;
          declined: number;
        }
      >
    );

    const monthlyArray = Object.values(monthlyData).sort((a, b) => {
      if (a.year !== b.year) return a.year - b.year;
      return a.month.localeCompare(b.month);
    });

    // Calculate trends
    const calculateTrend = (currentValue: number, previousValue: number) => {
      if (previousValue === 0) return currentValue > 0 ? 100 : 0;
      return Math.round(((currentValue - previousValue) / previousValue) * 100);
    };

    const successRate = total > 0 ? Math.round((success / total) * 100) : 0;

    let activeTrend = 0;
    let pendingTrend = 0;
    let successTrend = 0;

    if (monthlyArray.length >= 2) {
      const currentMonth = monthlyArray[monthlyArray.length - 1];
      const previousMonth = monthlyArray[monthlyArray.length - 2];

      activeTrend = calculateTrend(currentMonth.active, previousMonth.active);
      pendingTrend = calculateTrend(
        currentMonth.pending,
        previousMonth.pending
      );
      successTrend = calculateTrend(
        currentMonth.success,
        previousMonth.success
      );
    }

    return {
      total,
      active,
      pending,
      history,
      approvedByFirst,
      approvedBySecond,
      declined,
      expired,
      dating,
      success,
      successRate,
      byStatus,
      monthlyData: monthlyArray,
      trends: {
        active: activeTrend,
        pending: pendingTrend,
        success: successTrend,
      },
    };
  }, [suggestions]);

  // Chart data preparation
  const chartData = stats.monthlyData.map((month) => ({
    name: month.month,
    פעילות: month.active,
    ממתינות: month.pending,
    הצלחות: month.success,
    נדחו: month.declined,
  }));

  const pieData = [
    { name: 'פעילות', value: stats.active, color: '#3B82F6' },
    { name: 'ממתינות', value: stats.pending, color: '#F59E0B' },
    { name: 'הצלחות', value: stats.success, color: '#10B981' },
    { name: 'היסטוריה', value: stats.history, color: '#6B7280' },
  ];

  const COLORS = ['#3B82F6', '#F59E0B', '#10B981', '#6B7280'];

  return (
    <div className={cn('space-y-8', className)}>
      {/* Hero Stats Section */}
      <div className="relative">
        <div className="absolute inset-0 bg-gradient-to-r from-purple-50 via-cyan-50/30 to-emerald-50/20 rounded-3xl"></div>
        <div className="relative z-10 p-8">
          <div className="text-center mb-8">
            <h2 className="text-3xl font-bold bg-gradient-to-r from-purple-600 via-pink-600 to-blue-600 bg-clip-text text-transparent mb-2">
              סקירת הצעות השידוך
            </h2>
            <p className="text-gray-600 text-lg">
              סטטיסטיקות מפורטות על פעילות המערכת
            </p>
          </div>

          {/* Main Stats Grid */}
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
            <ModernStatsCard
              icon={Users}
              title="סה״כ הצעות"
              value={stats.total}
              trend={{
                value: stats.trends.active,
                isPositive: stats.trends.active >= 0,
                label: 'מהחודש שעבר',
              }}
              gradient="from-blue-500 to-cyan-500"
              isClickable={true}
              onClick={() => onFilterChange && onFilterChange({})}
              description="כלל ההצעות במערכת"
            />

            <ModernStatsCard
              icon={Target}
              title="הצעות פעילות"
              value={stats.active}
              trend={{
                value: stats.trends.active,
                isPositive: stats.trends.active >= 0,
                label: 'גידול חודשי',
              }}
              gradient="from-green-500 to-emerald-500"
              isClickable={true}
              onClick={() =>
                onFilterChange &&
                onFilterChange({
                  status: [
                    'DATING',
                    'FIRST_PARTY_APPROVED',
                    'SECOND_PARTY_APPROVED',
                    'CONTACT_DETAILS_SHARED',
                  ],
                })
              }
              description="הצעות בטיפול פעיל"
            />

            <ModernStatsCard
              icon={Clock}
              title="ממתינות לתגובה"
              value={stats.pending}
              trend={{
                value: stats.trends.pending,
                isPositive: stats.trends.pending <= 0,
                label: 'זמן תגובה ממוצע',
              }}
              gradient="from-yellow-500 to-amber-500"
              isClickable={true}
              onClick={() =>
                onFilterChange &&
                onFilterChange({
                  status: ['PENDING_FIRST_PARTY', 'PENDING_SECOND_PARTY'],
                })
              }
              description="מחכות להחלטת המועמדים"
            />

            <ModernStatsCard
              icon={Crown}
              title="אחוז הצלחה"
              value={`${stats.successRate}%`}
              trend={{
                value: stats.trends.success,
                isPositive: stats.trends.success >= 0,
                label: 'שיפור ביצועים',
              }}
              gradient="from-purple-500 to-pink-500"
              isClickable={true}
              onClick={() =>
                onFilterChange &&
                onFilterChange({
                  status: ['DATING', 'ENGAGED', 'MARRIED'],
                })
              }
              description="זוגות שהגיעו להצלחה"
            />
          </div>
        </div>
      </div>

      {/* Detailed Stats Cards */}
      <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-6 gap-4">
        <Card
          className="group relative overflow-hidden border-0 shadow-lg hover:shadow-xl transition-all duration-300 cursor-pointer bg-gradient-to-br from-yellow-50 to-amber-50"
          onClick={() =>
            onFilterChange &&
            onFilterChange({
              status: ['PENDING_FIRST_PARTY'],
            })
          }
        >
          <div className="absolute inset-0 bg-gradient-to-br from-yellow-500/5 to-amber-500/5" />
          <CardContent className="relative z-10 p-4 text-center">
            <div className="flex items-center justify-center gap-2 mb-2">
              <div className="p-2 rounded-full bg-gradient-to-r from-yellow-500 to-amber-500 text-white shadow-lg group-hover:scale-110 transition-transform">
                <AlertCircle className="w-4 h-4" />
              </div>
              <span className="text-2xl font-bold text-yellow-700">
                {stats.byStatus['PENDING_FIRST_PARTY'] || 0}
              </span>
            </div>
            <p className="text-xs font-medium text-yellow-600">ממתין לצד א'</p>
          </CardContent>
        </Card>

        <Card
          className="group relative overflow-hidden border-0 shadow-lg hover:shadow-xl transition-all duration-300 cursor-pointer bg-gradient-to-br from-blue-50 to-cyan-50"
          onClick={() =>
            onFilterChange &&
            onFilterChange({
              status: ['PENDING_SECOND_PARTY'],
            })
          }
        >
          <div className="absolute inset-0 bg-gradient-to-br from-blue-500/5 to-cyan-500/5" />
          <CardContent className="relative z-10 p-4 text-center">
            <div className="flex items-center justify-center gap-2 mb-2">
              <div className="p-2 rounded-full bg-gradient-to-r from-blue-500 to-cyan-500 text-white shadow-lg group-hover:scale-110 transition-transform">
                <AlertCircle className="w-4 h-4" />
              </div>
              <span className="text-2xl font-bold text-blue-700">
                {stats.byStatus['PENDING_SECOND_PARTY'] || 0}
              </span>
            </div>
            <p className="text-xs font-medium text-blue-600">ממתין לצד ב'</p>
          </CardContent>
        </Card>

        <Card
          className="group relative overflow-hidden border-0 shadow-lg hover:shadow-xl transition-all duration-300 cursor-pointer bg-gradient-to-br from-red-50 to-pink-50"
          onClick={() =>
            onFilterChange &&
            onFilterChange({
              status: ['FIRST_PARTY_DECLINED', 'SECOND_PARTY_DECLINED'],
            })
          }
        >
          <div className="absolute inset-0 bg-gradient-to-br from-red-500/5 to-pink-500/5" />
          <CardContent className="relative z-10 p-4 text-center">
            <div className="flex items-center justify-center gap-2 mb-2">
              <div className="p-2 rounded-full bg-gradient-to-r from-red-500 to-pink-500 text-white shadow-lg group-hover:scale-110 transition-transform">
                <X className="w-4 h-4" />
              </div>
              <span className="text-2xl font-bold text-red-700">
                {stats.declined}
              </span>
            </div>
            <p className="text-xs font-medium text-red-600">הצעות שנדחו</p>
          </CardContent>
        </Card>

        <Card
          className="group relative overflow-hidden border-0 shadow-lg hover:shadow-xl transition-all duration-300 cursor-pointer bg-gradient-to-br from-pink-50 to-rose-50"
          onClick={() =>
            onFilterChange &&
            onFilterChange({
              status: ['DATING'],
            })
          }
        >
          <div className="absolute inset-0 bg-gradient-to-br from-pink-500/5 to-rose-500/5" />
          <CardContent className="relative z-10 p-4 text-center">
            <div className="flex items-center justify-center gap-2 mb-2">
              <div className="p-2 rounded-full bg-gradient-to-r from-pink-500 to-rose-500 text-white shadow-lg group-hover:scale-110 transition-transform">
                <Heart className="w-4 h-4" />
              </div>
              <span className="text-2xl font-bold text-pink-700">
                {stats.byStatus['DATING'] || 0}
              </span>
            </div>
            <p className="text-xs font-medium text-pink-600">בתהליך היכרות</p>
          </CardContent>
        </Card>

        <Card
          className="group relative overflow-hidden border-0 shadow-lg hover:shadow-xl transition-all duration-300 cursor-pointer bg-gradient-to-br from-purple-50 to-indigo-50"
          onClick={() =>
            onFilterChange &&
            onFilterChange({
              status: ['ENGAGED'],
            })
          }
        >
          <div className="absolute inset-0 bg-gradient-to-br from-purple-500/5 to-indigo-500/5" />
          <CardContent className="relative z-10 p-4 text-center">
            <div className="flex items-center justify-center gap-2 mb-2">
              <div className="p-2 rounded-full bg-gradient-to-r from-purple-500 to-indigo-500 text-white shadow-lg group-hover:scale-110 transition-transform">
                <Crown className="w-4 h-4" />
              </div>
              <span className="text-2xl font-bold text-purple-700">
                {stats.byStatus['ENGAGED'] || 0}
              </span>
            </div>
            <p className="text-xs font-medium text-purple-600">מאורסים</p>
          </CardContent>
        </Card>

        <Card
          className="group relative overflow-hidden border-0 shadow-lg hover:shadow-xl transition-all duration-300 cursor-pointer bg-gradient-to-br from-gray-50 to-slate-50"
          onClick={() =>
            onFilterChange &&
            onFilterChange({
              status: ['EXPIRED'],
            })
          }
        >
          <div className="absolute inset-0 bg-gradient-to-br from-gray-500/5 to-slate-500/5" />
          <CardContent className="relative z-10 p-4 text-center">
            <div className="flex items-center justify-center gap-2 mb-2">
              <div className="p-2 rounded-full bg-gradient-to-r from-gray-500 to-slate-500 text-white shadow-lg group-hover:scale-110 transition-transform">
                <Ban className="w-4 h-4" />
              </div>
              <span className="text-2xl font-bold text-gray-700">
                {stats.byStatus['EXPIRED'] || 0}
              </span>
            </div>
            <p className="text-xs font-medium text-gray-600">פג תוקף</p>
          </CardContent>
        </Card>
      </div>

      {/* Charts Section */}
      {stats.monthlyData.length > 0 && (
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
          {/* Monthly Trend Chart */}
          <Card className="border-0 shadow-xl hover:shadow-2xl transition-all duration-300 bg-white overflow-hidden rounded-2xl">
            <CardContent className="p-6">
              <div className="flex items-center gap-3 mb-6">
                <div className="p-3 rounded-full bg-gradient-to-r from-blue-500 to-cyan-500 text-white shadow-lg">
                  <BarChart3 className="w-6 h-6" />
                </div>
                <h3 className="text-xl font-bold text-gray-800">מגמה חודשית</h3>
              </div>
              <div className="h-80">
                <ResponsiveContainer width="100%" height="100%">
                  <AreaChart data={chartData}>
                    <defs>
                      <linearGradient
                        id="colorActive"
                        x1="0"
                        y1="0"
                        x2="0"
                        y2="1"
                      >
                        <stop
                          offset="5%"
                          stopColor="#3B82F6"
                          stopOpacity={0.3}
                        />
                        <stop
                          offset="95%"
                          stopColor="#3B82F6"
                          stopOpacity={0}
                        />
                      </linearGradient>
                      <linearGradient
                        id="colorPending"
                        x1="0"
                        y1="0"
                        x2="0"
                        y2="1"
                      >
                        <stop
                          offset="5%"
                          stopColor="#F59E0B"
                          stopOpacity={0.3}
                        />
                        <stop
                          offset="95%"
                          stopColor="#F59E0B"
                          stopOpacity={0}
                        />
                      </linearGradient>
                      <linearGradient
                        id="colorSuccess"
                        x1="0"
                        y1="0"
                        x2="0"
                        y2="1"
                      >
                        <stop
                          offset="5%"
                          stopColor="#10B981"
                          stopOpacity={0.3}
                        />
                        <stop
                          offset="95%"
                          stopColor="#10B981"
                          stopOpacity={0}
                        />
                      </linearGradient>
                    </defs>
                    <CartesianGrid strokeDasharray="3 3" stroke="#e5e7eb" />
                    <XAxis dataKey="name" stroke="#6b7280" />
                    <YAxis stroke="#6b7280" />
                    <Tooltip
                      contentStyle={{
                        backgroundColor: 'white',
                        border: 'none',
                        borderRadius: '12px',
                        boxShadow: '0 20px 25px -5px rgba(0, 0, 0, 0.1)',
                      }}
                    />
                    <Area
                      type="monotone"
                      dataKey="פעילות"
                      stroke="#3B82F6"
                      fillOpacity={1}
                      fill="url(#colorActive)"
                      strokeWidth={3}
                    />
                    <Area
                      type="monotone"
                      dataKey="ממתינות"
                      stroke="#F59E0B"
                      fillOpacity={1}
                      fill="url(#colorPending)"
                      strokeWidth={3}
                    />
                    <Area
                      type="monotone"
                      dataKey="הצלחות"
                      stroke="#10B981"
                      fillOpacity={1}
                      fill="url(#colorSuccess)"
                      strokeWidth={3}
                    />
                  </AreaChart>
                </ResponsiveContainer>
              </div>
            </CardContent>
          </Card>

          {/* Status Distribution Pie Chart */}
          <Card className="border-0 shadow-xl hover:shadow-2xl transition-all duration-300 bg-white overflow-hidden rounded-2xl">
            <CardContent className="p-6">
              <div className="flex items-center gap-3 mb-6">
                <div className="p-3 rounded-full bg-gradient-to-r from-purple-500 to-pink-500 text-white shadow-lg">
                  <PieChart className="w-6 h-6" />
                </div>
                <h3 className="text-xl font-bold text-gray-800">
                  התפלגות סטטוס
                </h3>
              </div>
              <div className="h-80">
                <ResponsiveContainer width="100%" height="100%">
                  <RechartsPieChart>
                    <Pie
                      data={pieData}
                      cx="50%"
                      cy="50%"
                      labelLine={false}
                      label={({ name, percent }) =>
                        `${name} ${(percent * 100).toFixed(0)}%`
                      }
                      outerRadius={100}
                      fill="#8884d8"
                      dataKey="value"
                    >
                      {pieData.map((entry, index) => (
                        <Cell
                          key={`cell-${index}`}
                          fill={COLORS[index % COLORS.length]}
                        />
                      ))}
                    </Pie>
                    <Tooltip
                      contentStyle={{
                        backgroundColor: 'white',
                        border: 'none',
                        borderRadius: '12px',
                        boxShadow: '0 20px 25px -5px rgba(0, 0, 0, 0.1)',
                      }}
                    />
                  </RechartsPieChart>
                </ResponsiveContainer>
              </div>
            </CardContent>
          </Card>
        </div>
      )}

      {/* Success Metrics */}
      <Card className="border-0 shadow-xl bg-gradient-to-r from-emerald-50 via-green-50 to-emerald-50 overflow-hidden rounded-2xl">
        <CardContent className="p-8">
          <div className="flex items-center justify-between mb-6">
            <div className="flex items-center gap-4">
              <div className="p-4 rounded-full bg-gradient-to-r from-emerald-500 to-green-500 text-white shadow-xl">
                <Award className="w-8 h-8" />
              </div>
              <div>
                <h3 className="text-2xl font-bold text-emerald-800">
                  מדדי הצלחה
                </h3>
                <p className="text-emerald-600">תוצאות וביצועים</p>
              </div>
            </div>

            <div className="text-right">
              <div className="text-4xl font-bold text-emerald-700">
                {stats.successRate}%
              </div>
              <div className="text-sm text-emerald-600">אחוז הצלחה כללי</div>
            </div>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
            <div className="text-center p-4 bg-white/70 rounded-xl shadow-lg">
              <div className="text-3xl font-bold text-pink-600 mb-2">
                {stats.dating}
              </div>
              <div className="text-sm font-medium text-pink-700">
                זוגות בהיכרות
              </div>
            </div>

            <div className="text-center p-4 bg-white/70 rounded-xl shadow-lg">
              <div className="text-3xl font-bold text-purple-600 mb-2">
                {stats.byStatus['ENGAGED'] || 0}
              </div>
              <div className="text-sm font-medium text-purple-700">
                זוגות מאורסים
              </div>
            </div>

            <div className="text-center p-4 bg-white/70 rounded-xl shadow-lg">
              <div className="text-3xl font-bold text-emerald-600 mb-2">
                {stats.byStatus['MARRIED'] || 0}
              </div>
              <div className="text-sm font-medium text-emerald-700">
                זוגות נשואים
              </div>
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  );
};

export default SuggestionsStats;
--- End of Content for SuggestionsStats.tsx ---

================================================================================
Directory: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\app\components\matchmaker\suggestions\details
================================================================================

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\app\components\matchmaker\suggestions\details\SuggestionDetailsDialog.tsx
--------------------------------------------------------------------------------
Content:
// src/app/components/matchmaker/suggestions/details/SuggestionDetailsDialog.tsx

'use client';

import React, { useState, useEffect } from 'react';
import InquiryThreadView from '@/app/components/suggestions/inquiries/InquiryThreadView';

import { Dialog, DialogContent } from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select';
import { ProfileCard } from '@/app/components/profile';
import { Timeline } from '@/components/ui/timeline';
import {
  AlertCircle,
  CheckCircle,
  XCircle,
  MessageCircle,
  Send,
  RefreshCw,
  Edit,
  Calendar,
  Clock,
  Download,
  AlarmClock,
  Trash2,
  MapPin,
  Mail,
  Phone,
  User,
  ExternalLink,
  Crown,
  Heart,
  Gem,
  Eye,
  Settings,
  Briefcase,
  GraduationCap,
  Quote,
  Archive,
  Maximize,
  Minimize,
  X as CloseIcon,
  LucideIcon,
} from 'lucide-react';
import { Textarea } from '@/components/ui/textarea';
import { toast } from 'sonner';

import { MatchSuggestionStatus } from '@prisma/client';
import type { Suggestion, ActionAdditionalData } from '@/types/suggestions';
import type { QuestionnaireResponse } from '@/types/next-auth';
import Image from 'next/image';
import { getRelativeCloudinaryPath, cn, getInitials } from '@/lib/utils';
import { Avatar, AvatarFallback } from '@/components/ui/avatar';
import { Progress } from '@/components/ui/progress';
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from '@/components/ui/tooltip';

// Define action types
type SuggestionDetailsActionType =
  | 'view'
  | 'contact'
  | 'message'
  | 'edit'
  | 'delete'
  | 'resend'
  | 'changeStatus'
  | 'reminder'
  | 'sendReminder'
  | 'shareContacts'
  | 'scheduleMeeting'
  | 'viewMeetings'
  | 'exportHistory'
  | 'export'
  | 'resendToAll';

interface DialogActionData extends ActionAdditionalData {
  suggestionId?: string;
  newStatus?: MatchSuggestionStatus;
  notes?: string;
  suggestion?: Suggestion;
  partyId?: string;
  type?: string;
  partyType?: 'first' | 'second' | 'both';
}

interface SuggestionDetailsDialogProps {
  suggestion: Suggestion | null;
  isOpen: boolean;
  onClose: () => void;
  onAction: (
    action: SuggestionDetailsActionType,
    data?: DialogActionData
  ) => void;
  userId: string;
}

// Define the return type for the status info object
interface StatusInfo {
  label: string;
  icon: LucideIcon; // Use the specific LucideIcon type
  color: string;
  bgColor: string;
  badgeColor: string;
  progress: number;
  description: string;
}

// Enhanced status info function
const getEnhancedStatusInfo = (status: MatchSuggestionStatus): StatusInfo => {
    const statusInfoMap: Record<string, StatusInfo> = {
      DRAFT: {
        label: 'טיוטה',
        icon: Edit,
        color: 'text-gray-600',
        bgColor: 'from-gray-50 to-slate-50',
        badgeColor: 'bg-gradient-to-r from-gray-500 to-slate-500 text-white',
        progress: 10,
        description: 'ההצעה עדיין בעריכה ולא נשלחה.',
      },
      PENDING_FIRST_PARTY: {
        label: 'ממתין לתשובת צד א׳',
        icon: Clock,
        color: 'text-yellow-600',
        bgColor: 'from-yellow-50 to-amber-50',
        badgeColor: 'bg-gradient-to-r from-yellow-500 to-amber-500 text-white',
        progress: 25,
        description: 'ההצעה נשלחה לצד הראשון וממתינה לתשובה.',
      },
      FIRST_PARTY_APPROVED: {
        label: 'צד א׳ אישר',
        icon: CheckCircle,
        color: 'text-green-600',
        bgColor: 'from-green-50 to-emerald-50',
        badgeColor: 'bg-gradient-to-r from-green-500 to-emerald-500 text-white',
        progress: 40,
        description: 'הצד הראשון אישר את ההצעה.',
      },
      FIRST_PARTY_DECLINED: {
        label: 'צד א׳ דחה',
        icon: XCircle,
        color: 'text-red-600',
        bgColor: 'from-red-50 to-pink-50',
        badgeColor: 'bg-gradient-to-r from-red-500 to-pink-500 text-white',
        progress: 0,
        description: 'הצד הראשון דחה את ההצעה.',
      },
      PENDING_SECOND_PARTY: {
        label: 'ממתין לתשובת צד ב׳',
        icon: Clock,
        color: 'text-blue-600',
        bgColor: 'from-blue-50 to-cyan-50',
        badgeColor: 'bg-gradient-to-r from-blue-500 to-cyan-500 text-white',
        progress: 50,
        description: 'הצד הראשון אישר וההצעה נשלחה לצד השני.',
      },
      SECOND_PARTY_APPROVED: {
        label: 'צד ב׳ אישר',
        icon: CheckCircle,
        color: 'text-green-600',
        bgColor: 'from-green-50 to-emerald-50',
        badgeColor: 'bg-gradient-to-r from-green-500 to-emerald-500 text-white',
        progress: 60,
        description: 'שני הצדדים אישרו את ההצעה.',
      },
      SECOND_PARTY_DECLINED: {
        label: 'צד ב׳ דחה',
        icon: XCircle,
        color: 'text-red-600',
        bgColor: 'from-red-50 to-pink-50',
        badgeColor: 'bg-gradient-to-r from-red-500 to-pink-500 text-white',
        progress: 0,
        description: 'הצד השני דחה את ההצעה.',
      },
      CONTACT_DETAILS_SHARED: {
        label: 'פרטי קשר שותפו',
        icon: Send,
        color: 'text-purple-600',
        bgColor: 'from-purple-50 to-pink-50',
        badgeColor: 'bg-gradient-to-r from-purple-500 to-pink-500 text-white',
        progress: 70,
        description: 'פרטי הקשר של שני הצדדים שותפו.',
      },
      AWAITING_FIRST_DATE_FEEDBACK: {
        label: 'ממתין למשוב פגישה',
        icon: MessageCircle,
        color: 'text-orange-600',
        bgColor: 'from-orange-50 to-amber-50',
        badgeColor: 'bg-gradient-to-r from-orange-500 to-amber-500 text-white',
        progress: 75,
        description: 'ממתינים לעדכון מהצדדים לאחר הפגישה הראשונה.',
      },
      DATING: {
        label: 'בתהליך היכרות',
        icon: Heart,
        color: 'text-pink-600',
        bgColor: 'from-pink-50 to-rose-50',
        badgeColor: 'bg-gradient-to-r from-pink-500 to-rose-500 text-white',
        progress: 80,
        description: 'הזוג בתהליך היכרות פעיל.',
      },
      ENGAGED: {
        label: 'מאורסים',
        icon: Gem,
        color: 'text-yellow-600',
        bgColor: 'from-yellow-50 to-orange-50',
        badgeColor: 'bg-gradient-to-r from-yellow-500 to-orange-500 text-white',
        progress: 95,
        description: 'הזוג התארס - הצלחה גדולה!',
      },
      MARRIED: {
        label: 'נישאו',
        icon: Crown,
        color: 'text-emerald-600',
        bgColor: 'from-emerald-50 to-green-50',
        badgeColor: 'bg-gradient-to-r from-emerald-500 to-green-500 text-white',
        progress: 100,
        description: 'הזוג התחתן - התאמה מושלמת!',
      },
      EXPIRED: {
        label: 'פג תוקף',
        icon: AlarmClock,
        color: 'text-gray-600',
        bgColor: 'from-gray-50 to-slate-50',
        badgeColor: 'bg-gradient-to-r from-gray-500 to-slate-500 text-white',
        progress: 0,
        description: 'ההצעה פגה תוקף מכיוון שלא התקבלה תגובה בזמן.',
      },
      CLOSED: {
        label: 'סגור',
        icon: Archive,
        color: 'text-gray-600',
        bgColor: 'from-gray-50 to-slate-50',
        badgeColor: 'bg-gradient-to-r from-gray-500 to-slate-500 text-white',
        progress: 0,
        description: 'ההצעה נסגרה על ידי השדכן.',
      },
      CANCELLED: {
        label: 'בוטל',
        icon: XCircle,
        color: 'text-red-600',
        bgColor: 'from-red-50 to-pink-50',
        badgeColor: 'bg-gradient-to-r from-red-500 to-pink-500 text-white',
        progress: 0,
        description: 'ההצעה בוטלה.',
      },
      // Adding all other statuses to avoid crashes, with a default representation
      AWAITING_MATCHMAKER_APPROVAL: { label: 'ממתין לאישור שדכן', icon: User, color: 'text-blue-600', bgColor: 'from-blue-50 to-cyan-50', badgeColor: 'bg-blue-500', progress: 65, description: 'ממתין לאישור סופי מהשדכן.' },
      THINKING_AFTER_DATE: { label: 'בשלב מחשבה', icon: Clock, color: 'text-indigo-600', bgColor: 'from-indigo-50 to-violet-50', badgeColor: 'bg-indigo-500', progress: 77, description: 'אחד הצדדים או שניהם חושבים על המשך התהליך.' },
      PROCEEDING_TO_SECOND_DATE: { label: 'ממשיכים לפגישה שניה', icon: CheckCircle, color: 'text-teal-600', bgColor: 'from-teal-50 to-cyan-50', badgeColor: 'bg-teal-500', progress: 78, description: 'הצדדים החליטו להמשיך לפגישה נוספת.' },
      ENDED_AFTER_FIRST_DATE: { label: 'הסתיים אחרי פגישה', icon: XCircle, color: 'text-red-600', bgColor: 'from-red-50 to-pink-50', badgeColor: 'bg-red-500', progress: 0, description: 'ההיכרות הסתיימה לאחר הפגישה הראשונה.' },
      MEETING_PENDING: { label: 'ממתין לקביעת פגישה', icon: Calendar, color: 'text-purple-600', bgColor: 'from-purple-50 to-pink-50', badgeColor: 'bg-purple-500', progress: 72, description: 'פרטי הקשר שותפו, ממתינים לקביעת פגישה.' },
      MEETING_SCHEDULED: { label: 'פגישה נקבעה', icon: Calendar, color: 'text-green-600', bgColor: 'from-green-50 to-emerald-50', badgeColor: 'bg-green-500', progress: 74, description: 'הצדדים קבעו פגישה.' },
      MATCH_APPROVED: { label: 'ההצעה אושרה', icon: CheckCircle, color: 'text-green-600', bgColor: 'from-green-50 to-emerald-50', badgeColor: 'bg-green-500', progress: 60, description: 'ההצעה אושרה על ידי כל הגורמים.' },
      MATCH_DECLINED: { label: 'ההצעה נדחתה', icon: XCircle, color: 'text-red-600', bgColor: 'from-red-50 to-pink-50', badgeColor: 'bg-red-500', progress: 0, description: 'ההצעה נדחתה.' },
  };

  return (
    statusInfoMap[status] || {
      label: 'בטיפול',
      icon: RefreshCw,
      color: 'text-gray-600',
      bgColor: 'from-gray-50 to-slate-50',
      badgeColor: 'bg-gradient-to-r from-gray-500 to-slate-500 text-white',
      progress: 30,
      description: 'ההצעה בטיפול השדכן',
    }
  );
};

const getAllStatusLabels = (): Record<MatchSuggestionStatus, string> => {
  return {
    DRAFT: 'טיוטה',
    PENDING_FIRST_PARTY: 'ממתין לתשובת צד א׳',
    FIRST_PARTY_APPROVED: 'צד א׳ אישר',
    FIRST_PARTY_DECLINED: 'צד א׳ דחה',
    PENDING_SECOND_PARTY: 'ממתין לתשובת צד ב׳',
    SECOND_PARTY_APPROVED: 'צד ב׳ אישר',
    SECOND_PARTY_DECLINED: 'צד ב׳ דחה',
    AWAITING_MATCHMAKER_APPROVAL: 'ממתין לאישור שדכן',
    CONTACT_DETAILS_SHARED: 'פרטי קשר שותפו',
    AWAITING_FIRST_DATE_FEEDBACK: 'ממתין למשוב פגישה ראשונה',
    THINKING_AFTER_DATE: 'בשלב מחשבה אחרי פגישה',
    PROCEEDING_TO_SECOND_DATE: 'ממשיכים לפגישה שניה',
    ENDED_AFTER_FIRST_DATE: 'הסתיים אחרי פגישה ראשונה',
    MEETING_PENDING: 'ממתין לקביעת פגישה',
    MEETING_SCHEDULED: 'פגישה נקבעה',
    MATCH_APPROVED: 'ההצעה אושרה',
    MATCH_DECLINED: 'ההצעה נדחתה',
    DATING: 'בתהליך היכרות',
    ENGAGED: 'מאורסים',
    MARRIED: 'נישאו',
    EXPIRED: 'פג תוקף',
    CLOSED: 'סגור',
    CANCELLED: 'בוטל',
  };
};

const DialogHeaderAndTabs: React.FC<{
  suggestion: Suggestion;
  statusInfo: StatusInfo;
  onClose: () => void;
  isFullscreen: boolean;
  onToggleFullscreen: () => void;
  activeTab: string;
  onTabChange: (tab: string) => void;
}> = ({
  suggestion,
  statusInfo,
  onClose,
  isFullscreen,
  onToggleFullscreen,
  activeTab,
  onTabChange,
}) => {
  const StatusIcon = statusInfo.icon;
  const tabs = [
    { id: 'overview', label: 'סקירה כללית', icon: Eye },
    { id: 'firstParty', label: 'צד ראשון', icon: User },
    { id: 'secondParty', label: 'צד שני', icon: User },
    { id: 'timeline', label: 'ציר זמן', icon: Calendar },
    { id: 'communication', label: 'תקשורת', icon: MessageCircle },
    { id: 'actions', label: 'פעולות', icon: Settings },
  ];

  return (
    <div className={cn('relative bg-gradient-to-br', statusInfo.bgColor, 'border-b border-gray-100/80 flex-shrink-0')}>
        {/* Background decorative elements */}
        <div className="absolute inset-0">
            <div className="absolute top-0 right-0 w-64 h-64 bg-gradient-to-br from-white/20 to-transparent rounded-full blur-3xl opacity-50"></div>
            <div className="absolute bottom-0 left-0 w-48 h-48 bg-gradient-to-br from-white/10 to-transparent rounded-full blur-2xl opacity-40"></div>
        </div>

        <div className="relative z-10 p-6 space-y-4">
            {/* Top Header Row */}
            <div className="flex items-start justify-between">
                <div className="flex items-center gap-4">
                    <div className="p-3 rounded-full bg-white/20 backdrop-blur-sm shadow-lg">
                        <StatusIcon className={cn('w-7 h-7', statusInfo.color)} />
                    </div>
                    <div>
                        <h1 className="text-xl lg:text-2xl font-bold text-gray-800">
                            הצעה #{suggestion.id.toString().split('-')[0]}
                        </h1>
                        <p className="text-md text-gray-600 mt-1">
                            {suggestion.firstParty.firstName} ו{suggestion.secondParty.firstName}
                        </p>
                    </div>
                </div>
                <div className="flex items-center gap-2">
                    <Badge className={cn("text-sm font-bold shadow-md", statusInfo.badgeColor)}>
                        <StatusIcon className="w-4 h-4 ml-2" />
                        {statusInfo.label}
                    </Badge>
                    <TooltipProvider>
                        <Tooltip>
                            <TooltipTrigger asChild>
                                <Button variant="ghost" size="icon" onClick={onToggleFullscreen} className="rounded-full h-10 w-10 text-gray-500 hover:text-gray-700 hover:bg-white/50 backdrop-blur-sm">
                                    {isFullscreen ? <Minimize className="w-5 h-5" /> : <Maximize className="w-5 h-5" />}
                                </Button>
                            </TooltipTrigger>
                            <TooltipContent><p>{isFullscreen ? 'צמצם חלון' : 'הגדל למסך מלא'}</p></TooltipContent>
                        </Tooltip>
                    </TooltipProvider>
                    <Button variant="ghost" size="icon" onClick={onClose} className="rounded-full h-10 w-10 text-gray-500 hover:text-gray-700 hover:bg-white/50 backdrop-blur-sm">
                        <CloseIcon className="w-5 h-5" />
                    </Button>
                </div>
            </div>

            {/* Tabs Navigation */}
            <TabsList className="grid w-full grid-cols-3 sm:grid-cols-6 bg-white/60 backdrop-blur-sm rounded-2xl p-1.5 h-auto shadow-lg border border-white/50">
                {tabs.map((tab) => {
                    const IconComponent = tab.icon;
                    return (
                        <TabsTrigger
                            key={tab.id}
                            value={tab.id}
                            onClick={() => onTabChange(tab.id)}
                            className={cn(
                                'flex flex-col items-center justify-center gap-1 rounded-xl text-xs font-bold transition-all duration-300 py-2 hover:scale-105 relative overflow-hidden group',
                                activeTab === tab.id
                                    ? `bg-white text-primary shadow-md`
                                    : 'text-gray-600 hover:bg-white/50'
                            )}
                        >
                            <IconComponent className="w-5 h-5 relative z-10" />
                            <span className="relative z-10 hidden sm:inline">{tab.label}</span>
                        </TabsTrigger>
                    );
                })}
            </TabsList>
        </div>
    </div>
  );
};


const formatDateSafely = (
  dateInput: Date | string | null | undefined
): string => {
  if (!dateInput) return 'לא נקבע';
  const date = typeof dateInput === 'string' ? new Date(dateInput) : dateInput;
  if (!(date instanceof Date) || isNaN(date.getTime())) {
    return 'תאריך לא תקין';
  }
  return new Intl.DateTimeFormat('he-IL', {
    year: 'numeric',
    month: '2-digit',
    day: '2-digit',
    hour: '2-digit',
    minute: '2-digit',
  }).format(date);
};

const getDaysRemaining = (
  deadline: Date | string | null | undefined
): number | null => {
  if (!deadline) return null;
  const deadlineDate =
    typeof deadline === 'string' ? new Date(deadline) : deadline;
  if (!(deadlineDate instanceof Date) || isNaN(deadlineDate.getTime())) {
    return null;
  }
  const today = new Date();
  const diffTime = deadlineDate.getTime() - today.getTime();
  const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
  return diffDays;
};

const EnhancedPartyCard: React.FC<{
  party: any;
  label: string;
  color: string;
  status?: MatchSuggestionStatus;
  notes?: string;
  onContact: () => void;
  onReminder?: () => void;
  showReminder?: boolean;
}> = ({
  party,
  label,
  color,
  status,
  notes,
  onContact,
  onReminder,
  showReminder,
}) => {
  const age = party.profile?.birthDate
    ? new Date().getFullYear() - new Date(party.profile.birthDate).getFullYear()
    : null;

  const mainImage = party.images?.find((img: any) => img.isMain)?.url;

  const getPartyStatusLabel = () => {
    if (!status) return null;
    if (label.includes('א׳')) {
      if (status === 'FIRST_PARTY_APPROVED')
        return {
          label: 'אישר',
          icon: CheckCircle,
          className: 'bg-gradient-to-r from-green-500 to-emerald-500',
        };
      if (status === 'FIRST_PARTY_DECLINED')
        return {
          label: 'דחה',
          icon: XCircle,
          className: 'bg-gradient-to-r from-red-500 to-pink-500',
        };
      if (status === 'PENDING_FIRST_PARTY')
        return {
          label: 'ממתין לתשובה',
          icon: Clock,
          className:
            'bg-gradient-to-r from-yellow-500 to-amber-500 animate-pulse',
        };
    } else {
      if (status === 'SECOND_PARTY_APPROVED')
        return {
          label: 'אישר',
          icon: CheckCircle,
          className: 'bg-gradient-to-r from-green-500 to-emerald-500',
        };
      if (status === 'SECOND_PARTY_DECLINED')
        return {
          label: 'דחה',
          icon: XCircle,
          className: 'bg-gradient-to-r from-red-500 to-pink-500',
        };
      if (status === 'PENDING_SECOND_PARTY')
        return {
          label: 'ממתין לתשובה',
          icon: Clock,
          className:
            'bg-gradient-to-r from-yellow-500 to-amber-500 animate-pulse',
        };
    }
    return null;
  };

  const partyStatus = getPartyStatusLabel();

  return (
    <div
      className={cn(
        'bg-white rounded-2xl shadow-xl border-0 p-6 space-y-4 hover:shadow-2xl transition-all duration-300',
        'bg-gradient-to-br from-white to-gray-50/30'
      )}
    >
      <div className="flex items-center justify-between">
        <Badge className={cn('px-4 py-2 font-bold shadow-lg', color)}>
          {label}
        </Badge>
        {partyStatus && (
          <Badge className={cn('text-white shadow-lg', partyStatus.className)}>
            <partyStatus.icon className="w-4 h-4 ml-2" />
            {partyStatus.label}
          </Badge>
        )}
      </div>

      <div className="flex items-center gap-4">
        <div className="relative h-20 w-20 rounded-full overflow-hidden shadow-xl border-4 border-white">
          {mainImage ? (
            <Image
              src={getRelativeCloudinaryPath(mainImage)}
              alt={`${party.firstName} ${party.lastName}`}
              fill
              className="object-cover"
            />
          ) : (
            <div className="w-full h-full bg-gradient-to-br from-purple-100 to-pink-100 flex items-center justify-center">
              <User className="w-10 h-10 text-purple-400" />
            </div>
          )}
        </div>

        <div className="flex-1">
          <h3 className="text-xl font-bold text-gray-800 mb-2">
            {party.firstName} {party.lastName}
          </h3>
          <div className="grid grid-cols-2 gap-3 text-sm">
            {age && (
              <div className="flex items-center gap-2">
                <Calendar className="w-4 h-4 text-blue-500" />
                <span className="text-gray-700">{age} שנים</span>
              </div>
            )}
            {party.profile?.city && (
              <div className="flex items-center gap-2">
                <MapPin className="w-4 h-4 text-green-500" />
                <span className="text-gray-700">{party.profile.city}</span>
              </div>
            )}
            {party.email && (
              <div className="flex items-center gap-2">
                <Mail className="w-4 h-4 text-purple-500" />
                <span className="text-gray-700 truncate">{party.email}</span>
              </div>
            )}
            {party.phone && (
              <div className="flex items-center gap-2">
                <Phone className="w-4 h-4 text-orange-500" />
                <span className="text-gray-700">{party.phone}</span>
              </div>
            )}
          </div>
        </div>
      </div>

      <div className="grid grid-cols-2 gap-3">
        {party.profile?.occupation && (
          <div className="flex items-center gap-2 p-3 bg-blue-50 rounded-xl">
            <Briefcase className="w-4 h-4 text-blue-500" />
            <span className="text-sm font-medium text-gray-700 truncate">
              {party.profile.occupation}
            </span>
          </div>
        )}
        {party.profile?.education && (
          <div className="flex items-center gap-2 p-3 bg-purple-50 rounded-xl">
            <GraduationCap className="w-4 h-4 text-purple-500" />
            <span className="text-sm font-medium text-gray-700 truncate">
              {party.profile.education}
            </span>
          </div>
        )}
      </div>

      {notes && (
        <div className="p-4 bg-gradient-to-r from-cyan-50 to-blue-50 rounded-xl border border-cyan-200">
          <h4 className="text-sm font-bold text-cyan-800 mb-2 flex items-center gap-2">
            <Quote className="w-4 h-4" />
            הערות:
          </h4>
          <p className="text-cyan-900 text-sm leading-relaxed">{notes}</p>
        </div>
      )}

      <div className="flex gap-3 pt-4 border-t border-gray-100">
        <Button
          onClick={onContact}
          className="flex-1 bg-gradient-to-r from-blue-600 to-cyan-600 hover:from-blue-700 hover:to-cyan-700 text-white shadow-lg hover:shadow-xl transition-all duration-300 rounded-xl"
        >
          <MessageCircle className="w-4 h-4 ml-2" />
          צור קשר
        </Button>
        {showReminder && onReminder && (
          <Button
            onClick={onReminder}
            className="flex-1 bg-gradient-to-r from-orange-600 to-amber-600 hover:from-orange-700 hover:to-amber-700 text-white shadow-lg hover:shadow-xl transition-all duration-300 rounded-xl"
          >
            <Send className="w-4 h-4 ml-2" />
            שלח תזכורת
          </Button>
        )}
      </div>
    </div>
  );
};

const OverviewTabContent: React.FC<{
  suggestion: Suggestion;
  statusInfo: StatusInfo;
  onAction: (
    action: SuggestionDetailsActionType,
    data?: DialogActionData
  ) => void;
}> = ({ suggestion, statusInfo, onAction }) => {
  const lastActivityDate = suggestion.lastActivity;
  const decisionDeadlineDate = suggestion.decisionDeadline;
  const daysRemaining = getDaysRemaining(decisionDeadlineDate);

  return (
    <div className="p-6 space-y-8">
      {/* NEW: Status Summary moved here from the Hero section */}
      <div className="bg-white rounded-2xl shadow-xl border-0 p-6 hover:shadow-2xl transition-all duration-300">
          <div className="space-y-4">
              <div className="flex items-center justify-between">
                  <h3 className="text-lg font-bold text-gray-800">סיכום סטטוס</h3>
                  <div className="text-right text-sm text-gray-600">
                      <p>{statusInfo.progress}% הושלמו</p>
                  </div>
              </div>
              <div className="space-y-2">
                  <Progress value={statusInfo.progress} className="h-2.5 bg-gray-100 shadow-inner" />
                  <p className="text-sm text-gray-700 leading-relaxed">
                      {statusInfo.description}
                  </p>
              </div>
              <div className="mt-4 flex items-center gap-3 p-4 bg-purple-50/50 backdrop-blur-sm rounded-xl shadow-inner border border-purple-100">
                  <Avatar className="w-12 h-12 border-2 border-white shadow-lg">
                      <AvatarFallback className="bg-gradient-to-br from-purple-500 to-pink-500 text-white font-bold">
                          {getInitials(`${suggestion.matchmaker?.firstName} ${suggestion.matchmaker?.lastName}`)}
                      </AvatarFallback>
                  </Avatar>
                  <div className="flex items-baseline gap-2">
                      <p className="text-sm font-medium text-gray-600">השדכן/ית:</p>
                      <p className="text-lg font-bold text-gray-800">
                          {suggestion.matchmaker?.firstName} {suggestion.matchmaker?.lastName}
                      </p>
                  </div>
              </div>
          </div>
      </div>


      <div className="bg-white rounded-2xl shadow-xl border-0 p-6 hover:shadow-2xl transition-all duration-300">
        <div className="flex items-center justify-between mb-6">
          <h3 className="text-xl font-bold flex items-center gap-3 text-gray-800">
            <div className="p-3 rounded-full bg-gradient-to-r from-blue-500 to-cyan-500 text-white shadow-lg">
              <Calendar className="w-6 h-6" />
            </div>
            פרטי ההצעה
          </h3>
        </div>

        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 text-sm">
          <div className="space-y-2">
            <span className="text-gray-500 font-medium">תאריך יצירה:</span>
            <p className="font-bold text-gray-800">
              {formatDateSafely(suggestion.createdAt)}
            </p>
          </div>
          <div className="space-y-2">
            <span className="text-gray-500 font-medium">עדכון אחרון:</span>
            <p className="font-bold text-gray-800">
              {formatDateSafely(lastActivityDate)}
            </p>
          </div>
          <div className="space-y-2">
            <span className="text-gray-500 font-medium">דחיפות:</span>
            <Badge
              className={
                suggestion.priority === 'URGENT'
                  ? 'bg-gradient-to-r from-red-500 to-pink-500 text-white shadow-lg animate-pulse'
                  : suggestion.priority === 'HIGH'
                    ? 'bg-gradient-to-r from-orange-500 to-amber-500 text-white shadow-lg'
                    : suggestion.priority === 'MEDIUM'
                      ? 'bg-gradient-to-r from-blue-500 to-cyan-500 text-white shadow-lg'
                      : 'bg-gradient-to-r from-gray-500 to-slate-500 text-white shadow-lg'
              }
            >
              {suggestion.priority === 'URGENT'
                ? 'דחוף'
                : suggestion.priority === 'HIGH'
                  ? 'גבוה'
                  : suggestion.priority === 'MEDIUM'
                    ? 'רגיל'
                    : 'נמוך'}
            </Badge>
          </div>
          <div className="space-y-2">
            <span className="text-gray-500 font-medium">מועד תגובה:</span>
            <p className="font-bold text-gray-800">
              {suggestion.responseDeadline
                ? formatDateSafely(suggestion.responseDeadline)
                : 'לא נקבע'}
            </p>
          </div>
          <div className="space-y-2">
            <span className="text-gray-500 font-medium">מועד להחלטה:</span>
            <div className="flex items-center gap-2">
              <p
                className={cn(
                  'font-bold',
                  daysRemaining !== null &&
                    daysRemaining < 3 &&
                    suggestion.status !== 'EXPIRED'
                    ? 'text-red-600'
                    : 'text-gray-800'
                )}
              >
                {decisionDeadlineDate
                  ? formatDateSafely(decisionDeadlineDate)
                  : 'לא נקבע'}
              </p>
              {daysRemaining !== null &&
                daysRemaining < 3 &&
                suggestion.status !== 'EXPIRED' && (
                  <Badge className="bg-gradient-to-r from-red-500 to-pink-500 text-white animate-pulse">
                    {daysRemaining === 0 ? 'היום!' : `${daysRemaining} ימים`}
                  </Badge>
                )}
            </div>
          </div>
        </div>

        <div className="flex justify-end mt-6">
          <Button
            variant="outline"
            onClick={() =>
              onAction('edit', { suggestion, suggestionId: suggestion.id })
            }
            className="bg-gradient-to-r from-purple-50 to-pink-50 border-purple-200 text-purple-700 hover:bg-gradient-to-r hover:from-purple-100 hover:to-pink-100 rounded-xl"
          >
            <Edit className="w-4 h-4 ml-2" />
            ערוך פרטי הצעה
          </Button>
        </div>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
        <EnhancedPartyCard
          party={suggestion.firstParty}
          label="צד א׳"
          color="bg-gradient-to-r from-blue-500 to-cyan-500 text-white"
          status={suggestion.status}
          notes={suggestion.firstPartyNotes ?? undefined}
          onContact={() =>
            onAction('contact', {
              suggestionId: suggestion.id,
              partyId: suggestion.firstParty.id,
              partyType: 'first',
            })
          }
          onReminder={() =>
            onAction('reminder', {
              suggestionId: suggestion.id,
              partyId: suggestion.firstParty.id,
              partyType: 'first',
            })
          }
          showReminder={suggestion.status === 'PENDING_FIRST_PARTY'}
        />

        <EnhancedPartyCard
          party={suggestion.secondParty}
          label="צד ב׳"
          color="bg-gradient-to-r from-purple-500 to-pink-500 text-white"
          status={suggestion.status}
          notes={suggestion.secondPartyNotes ?? undefined}
          onContact={() =>
            onAction('contact', {
              suggestionId: suggestion.id,
              partyId: suggestion.secondParty.id,
              partyType: 'second',
            })
          }
          onReminder={() =>
            onAction('reminder', {
              suggestionId: suggestion.id,
              partyId: suggestion.secondParty.id,
              partyType: 'second',
            })
          }
          showReminder={suggestion.status === 'PENDING_SECOND_PARTY'}
        />
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {suggestion.matchingReason && (
          <div className="bg-white rounded-2xl shadow-xl border-0 p-6 hover:shadow-2xl transition-all duration-300">
            <h3 className="text-lg font-bold flex items-center gap-3 text-emerald-800 mb-4">
              <div className="p-2 rounded-full bg-gradient-to-r from-emerald-500 to-green-500 text-white shadow-lg">
                <Heart className="w-5 h-5" />
              </div>
              סיבת ההתאמה
            </h3>
            <div className="p-4 bg-gradient-to-r from-emerald-50 to-green-50 rounded-xl border border-emerald-200">
              <p className="text-emerald-900 leading-relaxed">
                {suggestion.matchingReason}
              </p>
            </div>
          </div>
        )}

        {suggestion.internalNotes && (
          <div className="bg-white rounded-2xl shadow-xl border-0 p-6 hover:shadow-2xl transition-all duration-300">
            <h3 className="text-lg font-bold flex items-center gap-3 text-amber-800 mb-4">
              <div className="p-2 rounded-full bg-gradient-to-r from-amber-500 to-orange-500 text-white shadow-lg">
                <AlertCircle className="w-5 h-5" />
              </div>
              הערות פנימיות
            </h3>
            <div className="p-4 bg-gradient-to-r from-amber-50 to-orange-50 rounded-xl border border-amber-200">
              <p className="text-amber-900 leading-relaxed">
                {suggestion.internalNotes}
              </p>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

const SuggestionDetailsDialog: React.FC<SuggestionDetailsDialogProps> = ({
  suggestion,
  isOpen,
  onClose,
  onAction,
  userId,
}) => {
  const [activeTab, setActiveTab] = useState('overview');
  const [firstPartyQuestionnaire, setFirstPartyQuestionnaire] =
    useState<QuestionnaireResponse | null>(null);
  const [secondPartyQuestionnaire, setSecondPartyQuestionnaire] =
    useState<QuestionnaireResponse | null>(null);
  const [isLoading, setIsLoading] = useState(false);
  const [isFullscreen, setIsFullscreen] = useState(false);
  const [statusChangeNote, setStatusChangeNote] = useState('');
  const [newStatus, setNewStatus] = useState<MatchSuggestionStatus | null>(
    null
  );
  const [showStatusChange, setShowStatusChange] = useState(false);

  useEffect(() => {
    if (!isOpen) {
      setIsFullscreen(false);
      setShowStatusChange(false);
      setNewStatus(null);
      setStatusChangeNote('');
    }

    const loadQuestionnaire = async (userId: string) => {
      try {
        const response = await fetch(
          `/api/profile/questionnaire?userId=${userId}`
        );
        const data = await response.json();

        if (data.success && data.questionnaireResponse) {
          return data.questionnaireResponse;
        }
        return null;
      } catch (error) {
        console.error('Failed to load questionnaire:', error);
        toast.error('שגיאה בטעינת השאלון');
        return null;
      }
    };

    const loadQuestionnaires = async () => {
      if (!suggestion) {
        setFirstPartyQuestionnaire(null);
        setSecondPartyQuestionnaire(null);
        return;
      }

      setIsLoading(true);
      try {
        const [firstParty, secondParty] = await Promise.all([
          loadQuestionnaire(suggestion.firstParty.id),
          loadQuestionnaire(suggestion.secondParty.id),
        ]);

        setFirstPartyQuestionnaire(firstParty);
        setSecondPartyQuestionnaire(secondParty);
      } catch (error) {
        console.error('Error loading questionnaires:', error);
        toast.error('שגיאה בטעינת השאלונים');
      } finally {
        setIsLoading(false);
      }
    };

    if (isOpen && suggestion) {
      setActiveTab('overview');
      loadQuestionnaires();
    }
  }, [isOpen, suggestion]);

  const handleStatusChange = async () => {
    if (!newStatus || !suggestion) return;

    setIsLoading(true);
    try {
      onAction('changeStatus', {
        suggestionId: suggestion.id,
        newStatus,
        notes: statusChangeNote,
      });

      setShowStatusChange(false);
      setStatusChangeNote('');
      setNewStatus(null);
    } catch (error) {
      console.error('Error changing status:', error);
      toast.error(
        `שגיאה בעדכון הסטטוס: ${error instanceof Error ? error.message : 'שגיאה לא מזוהה'}`
      );
    } finally {
      setIsLoading(false);
    }
  };

  if (!suggestion) return null;

  const statusInfo = getEnhancedStatusInfo(suggestion.status);

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent
        className={cn(
          'p-0 shadow-2xl border-0 bg-white overflow-hidden z-[50] flex flex-col transition-all duration-300 ease-in-out',
          isFullscreen
            ? '!w-screen !h-screen !max-w-none !max-h-none !rounded-none !fixed !inset-0 !m-0'
            : 'md:max-w-7xl md:w-[95vw] md:h-[95vh] md:rounded-3xl'
        )}
        dir="rtl"
        onOpenAutoFocus={(e) => e.preventDefault()}
      >
        <Tabs value={activeTab} onValueChange={setActiveTab} className="flex-1 flex flex-col overflow-hidden">
            <DialogHeaderAndTabs
                suggestion={suggestion}
                statusInfo={statusInfo}
                onClose={onClose}
                isFullscreen={isFullscreen}
                onToggleFullscreen={() => setIsFullscreen(!isFullscreen)}
                activeTab={activeTab}
                onTabChange={setActiveTab}
            />

            <div className="flex-1 overflow-y-auto bg-slate-50">
                <TabsContent value="overview" className="m-0 h-full">
                    <OverviewTabContent suggestion={suggestion} statusInfo={statusInfo} onAction={onAction} />
                </TabsContent>

                <TabsContent value="firstParty" className="m-0 h-full">
                    <div className="p-6">
                        <ProfileCard
                        profile={suggestion.firstParty.profile}
                        images={suggestion.firstParty.images}
                        questionnaire={firstPartyQuestionnaire}
                        viewMode="matchmaker"
                        isProfileComplete={suggestion.firstParty.isProfileComplete}
                        />
                    </div>
                </TabsContent>

                <TabsContent value="secondParty" className="m-0 h-full">
                    <div className="p-6">
                        <ProfileCard
                        profile={suggestion.secondParty.profile}
                        images={suggestion.secondParty.images}
                        questionnaire={secondPartyQuestionnaire}
                        viewMode="matchmaker"
                        isProfileComplete={suggestion.secondParty.isProfileComplete}
                        />
                    </div>
                </TabsContent>

                <TabsContent value="timeline" className="m-0 h-full">
                    <div className="p-6">
                        <div className="bg-white rounded-2xl shadow-xl border-0 p-6">
                        <h3 className="text-2xl font-bold mb-6 flex items-center gap-3">
                            <div className="p-3 rounded-full bg-gradient-to-r from-orange-500 to-amber-500 text-white shadow-lg">
                            <Calendar className="w-6 h-6" />
                            </div>
                            התקדמות ההצעה
                        </h3>

                        <Timeline
                            items={(suggestion?.statusHistory || []).map((history) => {
                            const historyStatusInfo = getEnhancedStatusInfo(
                                history.status as MatchSuggestionStatus
                            );
                            return {
                                title: historyStatusInfo.label,
                                description: history.notes || 'אין הערות',
                                date:
                                typeof history.createdAt === 'string'
                                    ? new Date(history.createdAt)
                                    : history.createdAt,
                                icon: historyStatusInfo.icon,
                            };
                            })}
                        />
                        </div>
                    </div>
                </TabsContent>

                <TabsContent value="communication" className="m-0 h-full">
                    <div className="p-6">
                        <div className="bg-white rounded-2xl shadow-xl border-0 p-6">
                        <h3 className="text-2xl font-bold mb-6 flex items-center gap-3">
                            <div className="p-3 rounded-full bg-gradient-to-r from-pink-500 to-rose-500 text-white shadow-lg">
                            <MessageCircle className="w-6 h-6" />
                            </div>
                            תקשורת
                        </h3>
                        <InquiryThreadView
                            suggestionId={suggestion.id}
                            userId={userId}
                            showComposer={true}
                        />
                        </div>
                    </div>
                </TabsContent>

                <TabsContent value="actions" className="m-0 h-full">
                    <div className="p-6">
                        <h3 className="text-2xl font-bold mb-6 flex items-center gap-3">
                        <div className="p-3 rounded-full bg-gradient-to-r from-gray-500 to-slate-500 text-white shadow-lg">
                            <Settings className="w-6 h-6" />
                        </div>
                        פעולות נוספות
                        </h3>

                        <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                        <div className="bg-white rounded-2xl shadow-xl border-0 p-6 hover:shadow-2xl transition-all duration-300">
                            <div className="p-3 rounded-full bg-gradient-to-r from-blue-500 to-cyan-500 text-white shadow-lg w-fit mb-4">
                            <RefreshCw className="w-6 h-6" />
                            </div>
                            <h4 className="text-lg font-bold mb-3">שינוי סטטוס</h4>
                            <p className="text-sm text-gray-600 mb-4">
                            עדכון סטטוס ההצעה בהתאם להתקדמות התהליך.
                            </p>
                            <Button
                            className="w-full bg-gradient-to-r from-blue-600 to-cyan-600 hover:from-blue-700 hover:to-cyan-700 shadow-lg"
                            onClick={() => setShowStatusChange(true)}
                            >
                            <RefreshCw className="w-4 h-4 ml-2" />
                            שנה סטטוס
                            </Button>
                        </div>

                        <div className="bg-white rounded-2xl shadow-xl border-0 p-6 hover:shadow-2xl transition-all duration-300">
                            <div className="p-3 rounded-full bg-gradient-to-r from-amber-500 to-orange-500 text-white shadow-lg w-fit mb-4">
                            <Edit className="w-6 h-6" />
                            </div>
                            <h4 className="text-lg font-bold mb-3">עריכת הצעה</h4>
                            <p className="text-sm text-gray-600 mb-4">
                            עריכת פרטי ההצעה, סיבת ההתאמה והערות.
                            </p>
                            <Button
                            variant="outline"
                            className="w-full border-2 border-amber-200 text-amber-700 hover:bg-amber-50"
                            onClick={() =>
                                onAction('edit', {
                                suggestionId: suggestion.id,
                                suggestion,
                                })
                            }
                            >
                            <Edit className="w-4 h-4 ml-2" />
                            ערוך פרטי הצעה
                            </Button>
                        </div>

                        <div className="bg-white rounded-2xl shadow-xl border-0 p-6 hover:shadow-2xl transition-all duration-300">
                            <div className="p-3 rounded-full bg-gradient-to-r from-red-500 to-pink-500 text-white shadow-lg w-fit mb-4">
                            <Trash2 className="w-6 h-6" />
                            </div>
                            <h4 className="text-lg font-bold mb-3">מחיקת הצעה</h4>
                            <p className="text-sm text-gray-600 mb-4">
                            מחיקת ההצעה לצמיתות מהמערכת.
                            </p>
                            <Button
                            variant="outline"
                            className="w-full border-2 border-red-200 text-red-700 hover:bg-red-50"
                            onClick={() =>
                                onAction('delete', { suggestionId: suggestion.id })
                            }
                            >
                            <Trash2 className="w-4 h-4 ml-2" />
                            מחק הצעה
                            </Button>
                        </div>
                        </div>
                    </div>
                </TabsContent>
            </div>
        </Tabs>

        {showStatusChange && (
          <div
            className="fixed inset-0 bg-black/60 flex items-center justify-center z-[100]"
            dir="rtl"
          >
            <div className="bg-white p-6 rounded-2xl max-w-md w-full shadow-2xl m-4">
              <h3 className="text-xl font-bold mb-4 flex items-center">
                <RefreshCw className="w-5 h-5 ml-2 text-blue-600" />
                שינוי סטטוס הצעה
              </h3>
              <div className="space-y-4">
                <div>
                  <label className="block text-sm font-medium mb-1 text-gray-600">
                    סטטוס נוכחי
                  </label>
                  <div className="flex items-center p-3 bg-gray-100 rounded-lg border">
                    <statusInfo.icon
                      className={`w-5 h-5 ml-3 ${statusInfo.color}`}
                    />
                    <span className="font-bold">{statusInfo.label}</span>
                  </div>
                </div>
                <div>
                  <label className="block text-sm font-medium mb-1 text-gray-600">
                    סטטוס חדש
                  </label>
                  <Select
                    value={newStatus || undefined}
                    onValueChange={(value) =>
                      setNewStatus(value as MatchSuggestionStatus)
                    }
                  >
                    <SelectTrigger className="w-full">
                      <SelectValue placeholder="בחר/י סטטוס חדש" />
                    </SelectTrigger>
                    <SelectContent className="max-h-60 overflow-y-auto">
                      {Object.entries(getAllStatusLabels()).map(
                        ([status, label]) => (
                          <SelectItem key={status} value={status}>
                            {label}
                          </SelectItem>
                        )
                      )}
                    </SelectContent>
                  </Select>
                </div>
                <div>
                  <label className="block text-sm font-medium mb-1 text-gray-600">
                    הערות לשינוי סטטוס (אופציונלי)
                  </label>
                  <Textarea
                    value={statusChangeNote}
                    onChange={(e) => setStatusChangeNote(e.target.value)}
                    placeholder="הוסף הערה..."
                    className="min-h-[100px] resize-none"
                  />
                </div>
                <div className="flex justify-end gap-3 pt-4 border-t">
                  <Button
                    variant="outline"
                    onClick={() => setShowStatusChange(false)}
                  >
                    ביטול
                  </Button>
                  <Button
                    onClick={handleStatusChange}
                    disabled={!newStatus || isLoading}
                    className="bg-blue-600 hover:bg-blue-700"
                  >
                    {isLoading ? (
                      <>
                        <RefreshCw className="w-4 h-4 ml-2 animate-spin" />{' '}
                        מעדכן...
                      </>
                    ) : (
                      'שמור שינוי'
                    )}
                  </Button>
                </div>
              </div>
            </div>
          </div>
        )}
      </DialogContent>
    </Dialog>
  );
};

export default SuggestionDetailsDialog;
--- End of Content for SuggestionDetailsDialog.tsx ---

================================================================================
Directory: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\app\components\matchmaker\suggestions\hooks
================================================================================

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\app\components\matchmaker\suggestions\hooks\useMatchmaking.ts
--------------------------------------------------------------------------------
Content:
// /hooks/useMatchmaking.ts
import { useState, useEffect, useMemo, useCallback } from 'react';
import { AvailabilityStatus } from '@prisma/client';
import { calculateMatchScore, MatchScore } from '../utils/matchingAlgorithm';
import { MATCH_THRESHOLDS } from '../../new/constants/matchingCriteria';
import type { User } from '@/types/next-auth';
// Define types and interfaces
interface UseMatchmakingProps {
  candidates?: User[];
  onMatchFound?: (match: PotentialMatch) => void;
  onMatchScoreUpdate?: (scores: MatchScoreMap) => void;
}

export interface PotentialMatch {
  candidateA: User;
  candidateB: User;
  score: MatchScore;
  matchDate?: Date;
  status: 'new' | 'suggested' | 'rejected';
  lastUpdated: Date;
}

type MatchScoreMap = Map<string, Map<string, MatchScore>>;

interface MatchSuggestion {
  candidate: User;
  score: MatchScore;
  matchDate: Date;
}

export const useMatchmaking = ({
  candidates = [],
  onMatchScoreUpdate
}: UseMatchmakingProps = {}) => {
  // State declarations
  const [matchScores, setMatchScores] = useState<MatchScoreMap>(new Map());
  const [suggestedMatches, setSuggestedMatches] = useState<PotentialMatch[]>([]);
  const [isCalculating, setIsCalculating] = useState(false);
  const [lastCalculation, setLastCalculation] = useState<Date | null>(null);

  // Calculate all possible matches
  const calculateAllMatches = useCallback(() => {
    setIsCalculating(true);
    const newScores = new Map<string, Map<string, MatchScore>>();
    const newMatches: PotentialMatch[] = [];

    candidates.forEach((candidateA, indexA) => {
      const candidateAScores = new Map<string, MatchScore>();
      newScores.set(candidateA.id, candidateAScores);

      candidates.slice(indexA + 1).forEach(candidateB => {
        // Check basic compatibility conditions
        if (
          candidateA.profile?.gender === candidateB.profile?.gender ||
          candidateA.profile?.availabilityStatus !== AvailabilityStatus.AVAILABLE ||
          candidateB.profile?.availabilityStatus !== AvailabilityStatus.AVAILABLE
        ) {
          return;
        }

        // Calculate match score
        const matchScore = calculateMatchScore(candidateA.profile, candidateB.profile);
        
        if (matchScore) {
          candidateAScores.set(candidateB.id, matchScore);

          // Add to potential matches if score is good enough
          if (matchScore.score >= MATCH_THRESHOLDS.GOOD) {
            newMatches.push({
              candidateA,
              candidateB,
              score: matchScore,
              matchDate: new Date(),
              status: 'new',
              lastUpdated: new Date()
            });
          }
        }
      });
    });

    setMatchScores(newScores);
    setSuggestedMatches(prev => {
      const existing = new Set(prev.map(m => 
        `${m.candidateA.id}-${m.candidateB.id}`
      ));
      
      return [
        ...prev,
        ...newMatches.filter(m => 
          !existing.has(`${m.candidateA.id}-${m.candidateB.id}`)
        )
      ].sort((a, b) => b.score.score - a.score.score);
    });

    onMatchScoreUpdate?.(newScores);
    setIsCalculating(false);
    setLastCalculation(new Date());
  }, [candidates, onMatchScoreUpdate]);

  // Recalculate matches when candidates list changes
  useEffect(() => {
    if (candidates.length > 0 && !isCalculating) {
      calculateAllMatches();
    }
  }, [candidates, calculateAllMatches, isCalculating]);

  // Get best matches for a specific candidate
  const getBestMatchesForCandidate = useCallback((
    candidateId: string,
    limit: number = 5
  ): MatchSuggestion[] => {
    const candidate = candidates.find(c => c.id === candidateId);
    if (!candidate) return [];

    const matches: MatchSuggestion[] = [];
    const candidateScores = matchScores.get(candidateId);

    if (candidateScores) {
      candidateScores.forEach((score, otherId) => {
        const otherCandidate = candidates.find(c => c.id === otherId);
        if (otherCandidate && score.score >= MATCH_THRESHOLDS.FAIR) {
          matches.push({
            candidate: otherCandidate,
            score,
            matchDate: new Date()
          });
        }
      });
    }

    return matches
      .sort((a, b) => b.score.score - a.score.score)
      .slice(0, limit);
  }, [candidates, matchScores]);

  // Analyze matches by categories
  const matchAnalytics = useMemo(() => {
    const analytics = {
      total: suggestedMatches.length,
      byCategory: {
        excellent: 0,
        good: 0,
        fair: 0,
        poor: 0
      },
      averageScore: 0,
      recentMatches: [] as PotentialMatch[]
    };

    suggestedMatches.forEach(match => {
      if (match.score.score >= MATCH_THRESHOLDS.EXCELLENT) {
        analytics.byCategory.excellent++;
      } else if (match.score.score >= MATCH_THRESHOLDS.GOOD) {
        analytics.byCategory.good++;
      } else if (match.score.score >= MATCH_THRESHOLDS.FAIR) {
        analytics.byCategory.fair++;
      } else {
        analytics.byCategory.poor++;
      }
    });

    analytics.averageScore = suggestedMatches.reduce(
      (sum, match) => sum + match.score.score,
      0
    ) / (suggestedMatches.length || 1);

    // Get recent matches (last week)
    const oneWeekAgo = new Date();
    oneWeekAgo.setDate(oneWeekAgo.getDate() - 7);
    
    analytics.recentMatches = suggestedMatches
      .filter(match => match.matchDate && match.matchDate >= oneWeekAgo)
      .sort((a, b) => 
        (b.matchDate?.getTime() || 0) - (a.matchDate?.getTime() || 0)
      );

    return analytics;
  }, [suggestedMatches]);

  // Update match status
  const updateMatchStatus = useCallback((
    candidateAId: string,
    candidateBId: string,
    status: 'suggested' | 'rejected'
  ) => {
    setSuggestedMatches(prev => prev.map(match => {
      if (
        (match.candidateA.id === candidateAId && match.candidateB.id === candidateBId) ||
        (match.candidateA.id === candidateBId && match.candidateB.id === candidateAId)
      ) {
        return {
          ...match,
          status,
          lastUpdated: new Date()
        };
      }
      return match;
    }));
  }, []);

  // Return hook interface
  return {
    matchScores,
    suggestedMatches,
    isCalculating,
    lastCalculation,
    matchAnalytics,
    getBestMatchesForCandidate,
    calculateAllMatches,
    updateMatchStatus
  };
};

export default useMatchmaking;
--- End of Content for useMatchmaking.ts ---

================================================================================
Directory: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\app\components\matchmaker\suggestions\list
================================================================================

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\app\components\matchmaker\suggestions\list\ManagerSuggestionsList.tsx
--------------------------------------------------------------------------------
Content:
// FILENAME: src/app/components/matchmaker/suggestions/list/ManagerSuggestionsList.tsx

import React, { useMemo, useState } from 'react';
import { useSession } from 'next-auth/react';
import { Card } from '@/components/ui/card';
import { ScrollArea } from '@/components/ui/scroll-area';
import { Users } from 'lucide-react';
import type {
  Suggestion,
  SuggestionFilters,
  ActionAdditionalData,
} from '@/types/suggestions';
import SuggestionDetailsDialog from '../details/SuggestionDetailsDialog';
import { toast } from 'sonner';
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
} from '@/components/ui/alert-dialog';
import SuggestionCard from '../cards/SuggestionCard'; // Make sure this is imported

// Define a more specific action type to avoid 'any'
type SuggestionActionType =
  | 'view'
  | 'contact'
  | 'message'
  | 'edit'
  | 'delete'
  | 'resend'
  | 'changeStatus'
  | 'reminder';

interface ManagerSuggestionsListProps {
  suggestions: Suggestion[];
  filters: SuggestionFilters;
  searchQuery: string;
  type: 'active' | 'pending' | 'history';
  onSuggestionDeleted?: (id: string) => void;
}

const ManagerSuggestionsList: React.FC<ManagerSuggestionsListProps> = ({
  suggestions,
  filters,
  searchQuery,
  type,
  onSuggestionDeleted,
}) => {
  const { data: session } = useSession();
  const [selectedSuggestion, setSelectedSuggestion] =
    useState<Suggestion | null>(null);
  const [showDeleteDialog, setShowDeleteDialog] = useState(false);
  const [suggestionToDelete, setSuggestionToDelete] = useState<string | null>(
    null
  );

  const filteredSuggestions = useMemo(() => {
    return suggestions.filter((suggestion) => {
      // Base status filter
      if (
        type === 'active' &&
        [
          'CLOSED',
          'CANCELLED',
          'EXPIRED',
          'FIRST_PARTY_DECLINED',
          'SECOND_PARTY_DECLINED',
        ].includes(suggestion.status)
      ) {
        return false;
      }
      if (type === 'pending' && !suggestion.status.includes('PENDING')) {
        return false;
      }
      if (
        type === 'history' &&
        ![
          'CLOSED',
          'CANCELLED',
          'EXPIRED',
          'FIRST_PARTY_DECLINED',
          'SECOND_PARTY_DECLINED',
          'MARRIED',
          'ENGAGED',
        ].includes(suggestion.status)
      ) {
        return false;
      }

      // Search query
      if (searchQuery && suggestion.firstParty && suggestion.secondParty) {
        const searchTerm = searchQuery.toLowerCase();
        const searchableText =
          `${suggestion.firstParty.firstName} ${suggestion.firstParty.lastName} ${suggestion.secondParty.firstName} ${suggestion.secondParty.lastName} ${suggestion.matchingReason || ''}`.toLowerCase();
        if (!searchableText.includes(searchTerm)) return false;
      }

      // Priority filter
      if (
        filters.priority?.length &&
        !filters.priority.includes(suggestion.priority)
      ) {
        return false;
      }

      // Date range filter
      if (filters.dateRange) {
        const createdAt = new Date(suggestion.createdAt);
        if (
          createdAt < filters.dateRange.start ||
          (filters.dateRange.end && createdAt > filters.dateRange.end)
        ) {
          return false;
        }
      }

      return true;
    });
  }, [suggestions, filters, searchQuery, type]);

  const confirmDelete = async () => {
    if (!suggestionToDelete) return;
    try {
      const response = await fetch(
        `/api/matchmaker/suggestions/${suggestionToDelete}/delete`,
        { method: 'DELETE' }
      );
      if (!response.ok) throw new Error('Failed to delete suggestion');
      toast.success('ההצעה נמחקה בהצלחה');
      if (onSuggestionDeleted) onSuggestionDeleted(suggestionToDelete);
    } catch (error) {
      console.error('Error deleting suggestion:', error);
      toast.error('שגיאה במחיקת ההצעה');
    } finally {
      setShowDeleteDialog(false);
      setSuggestionToDelete(null);
    }
  };

  const handleAction = (actionType: SuggestionActionType, data?: any) => {
    console.log(
      `Action '${actionType}' triggered for suggestion`,
      data?.suggestion?.id
    );
    if (actionType === 'view' && data?.suggestion) {
      setSelectedSuggestion(data.suggestion);
    }
    // Implement other actions like edit, message etc. here by setting state for their respective dialogs
  };

  if (filteredSuggestions.length === 0) {
    return (
      <div className="flex flex-col items-center justify-center h-64 text-gray-400">
        <Users className="w-12 h-12 mb-4" />
        <p>לא נמצאו הצעות התואמות את הסינון</p>
      </div>
    );
  }

  return (
    <>
      <ScrollArea className="h-[600px] rounded-md border p-4">
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
          {filteredSuggestions.map((suggestion) => {
            if (!suggestion.firstParty || !suggestion.secondParty) {
              return null; // Safety check for corrupted data
            }
            return (
              <SuggestionCard
                key={suggestion.id}
                suggestion={suggestion}
                onAction={(type, suggestionData, additionalData) => {
                  if (type === 'view') {
                    setSelectedSuggestion(suggestionData);
                  } else if (type === 'delete') {
                    setSuggestionToDelete(suggestionData.id);
                    setShowDeleteDialog(true);
                  } else {
                    handleAction(type, {
                      suggestion: suggestionData,
                      ...additionalData,
                    });
                  }
                }}
              />
            );
          })}
        </div>
      </ScrollArea>

      <SuggestionDetailsDialog
        suggestion={selectedSuggestion}
        isOpen={!!selectedSuggestion}
        onClose={() => setSelectedSuggestion(null)}
        onAction={handleAction as any} // Using 'as any' to bypass strict type check for simplicity here
        userId={session?.user?.id || ''}
      />

      <AlertDialog open={showDeleteDialog} onOpenChange={setShowDeleteDialog}>
        <AlertDialogContent>
          <AlertDialogHeader>
            <AlertDialogTitle>האם את/ה בטוח/ה?</AlertDialogTitle>
            <AlertDialogDescription>
              פעולה זו תמחק את ההצעה לצמיתות ולא ניתן יהיה לשחזר אותה.
            </AlertDialogDescription>
          </AlertDialogHeader>
          <AlertDialogFooter>
            <AlertDialogCancel>ביטול</AlertDialogCancel>
            <AlertDialogAction
              onClick={confirmDelete}
              className="bg-red-600 hover:bg-red-700"
            >
              מחיקה
            </AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>
    </>
  );
};

export default ManagerSuggestionsList;
--- End of Content for ManagerSuggestionsList.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\app\components\matchmaker\suggestions\list\SuggestionsList.tsx
--------------------------------------------------------------------------------
Content:
import React, { useState, useMemo } from "react";
import { Input } from "@/components/ui/input";
import { Card, CardContent } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Button } from "@/components/ui/button";
import { 
  Search, 
  Filter, 
  SortDesc, 
  LayoutGrid, 
  List, 
  Users, 
  Clock, 
  CheckCircle, 
  XCircle,
  Heart,
  Star,
  TrendingUp,
  Activity,
  BarChart3,
  Eye,
  Sparkles,
  Target,
  Flame,
  Shield,
  Award,
  Crown,
  Zap,
  RefreshCw,
  Calendar,
  MapPin,
} from "lucide-react";
import type { MatchSuggestion } from "@prisma/client";
import type { UserProfile, UserImage } from "@/types/next-auth";
import SuggestionCard from "../cards/SuggestionCard";
import { LoadingContainer } from "../../new/shared/LoadingStates";
import type {
  Suggestion,
  ActionAdditionalData,
  SuggestionStatusHistory,
} from "@/types/suggestions";
import { cn } from "@/lib/utils";
import { ToggleGroup, ToggleGroupItem } from "@/components/ui/toggle-group";

interface PartyInfo {
  id: string;
  firstName: string;
  lastName: string;
  profile: UserProfile;
  images: UserImage[];
}

interface ExtendedMatchSuggestion extends MatchSuggestion {
  firstParty: PartyInfo;
  secondParty: PartyInfo;
  statusHistory: SuggestionStatusHistory[];
}

interface SuggestionsListProps {
  suggestions: ExtendedMatchSuggestion[];
  isLoading?: boolean;
  onAction: (
    type:
      | "view"
      | "contact"
      | "message"
      | "edit"
      | "delete"
      | "resend"
      | "changeStatus"
      | "reminder",
    suggestion: Suggestion,
    additionalData?: ActionAdditionalData
  ) => void;
  className?: string;
}

const SORT_OPTIONS = [
  { value: "latest", label: "החדשים ביותר", icon: TrendingUp },
  { value: "oldest", label: "הישנים ביותר", icon: Calendar },
  { value: "deadline", label: "לפי תאריך יעד", icon: Clock },
  { value: "priority", label: "לפי דחיפות", icon: Flame },
];

const STATUS_OPTIONS = [
  { 
    value: "PENDING_FIRST_PARTY", 
    label: "ממתין לצד א׳", 
    color: "from-yellow-500 to-amber-500",
    icon: Clock
  },
  { 
    value: "PENDING_SECOND_PARTY", 
    label: "ממתין לצד ב׳", 
    color: "from-blue-500 to-cyan-500",
    icon: Clock
  },
  { 
    value: "FIRST_PARTY_APPROVED", 
    label: "צד א׳ אישר", 
    color: "from-green-500 to-emerald-500",
    icon: CheckCircle
  },
  { 
    value: "SECOND_PARTY_APPROVED", 
    label: "צד ב׳ אישר", 
    color: "from-green-500 to-emerald-500",
    icon: CheckCircle
  },
  { 
    value: "CONTACT_DETAILS_SHARED", 
    label: "פרטי קשר שותפו", 
    color: "from-purple-500 to-pink-500",
    icon: Heart
  },
  { 
    value: "DATING", 
    label: "בתהליך היכרות", 
    color: "from-pink-500 to-rose-500",
    icon: Heart
  },
];

// Enhanced Stats Component
const EnhancedListStats: React.FC<{
  total: number;
  pending: number;
  approved: number;
  declined: number;
  urgent: number;
}> = ({ total, pending, approved, declined, urgent }) => (
  <Card className="border-0 shadow-xl bg-gradient-to-r from-white via-purple-50/30 to-pink-50/30 mb-6">
    <CardContent className="p-4">
      <div className="grid grid-cols-2 md:grid-cols-5 gap-4">
        {/* Total */}
        <div className="text-center group">
          <div className="flex items-center justify-center gap-2 mb-1">
            <div className="p-2 rounded-full bg-gradient-to-r from-blue-500 to-cyan-500 text-white shadow-lg group-hover:scale-110 transition-transform">
              <Users className="w-4 h-4" />
            </div>
            <span className="text-2xl font-bold text-blue-600">{total}</span>
          </div>
          <p className="text-xs text-gray-600 font-medium">סך הכל</p>
        </div>

        {/* Pending */}
        <div className="text-center group">
          <div className="flex items-center justify-center gap-2 mb-1">
            <div className="p-2 rounded-full bg-gradient-to-r from-yellow-500 to-amber-500 text-white shadow-lg group-hover:scale-110 transition-transform">
              <Clock className="w-4 h-4" />
            </div>
            <span className="text-2xl font-bold text-yellow-600">{pending}</span>
          </div>
          <p className="text-xs text-gray-600 font-medium">ממתינות</p>
        </div>

        {/* Approved */}
        <div className="text-center group">
          <div className="flex items-center justify-center gap-2 mb-1">
            <div className="p-2 rounded-full bg-gradient-to-r from-green-500 to-emerald-500 text-white shadow-lg group-hover:scale-110 transition-transform">
              <CheckCircle className="w-4 h-4" />
            </div>
            <span className="text-2xl font-bold text-green-600">{approved}</span>
          </div>
          <p className="text-xs text-gray-600 font-medium">מאושרות</p>
        </div>

        {/* Declined */}
        <div className="text-center group">
          <div className="flex items-center justify-center gap-2 mb-1">
            <div className="p-2 rounded-full bg-gradient-to-r from-red-500 to-pink-500 text-white shadow-lg group-hover:scale-110 transition-transform">
              <XCircle className="w-4 h-4" />
            </div>
            <span className="text-2xl font-bold text-red-600">{declined}</span>
          </div>
          <p className="text-xs text-gray-600 font-medium">נדחו</p>
        </div>

        {/* Urgent */}
        <div className="text-center group">
          <div className="flex items-center justify-center gap-2 mb-1">
            <div className="p-2 rounded-full bg-gradient-to-r from-orange-500 to-red-500 text-white shadow-lg group-hover:scale-110 transition-transform animate-pulse">
              <Flame className="w-4 h-4" />
            </div>
            <span className="text-2xl font-bold text-orange-600">{urgent}</span>
          </div>
          <p className="text-xs text-gray-600 font-medium">דחופות</p>
        </div>
      </div>
    </CardContent>
  </Card>
);

// Enhanced Filter Bar
const EnhancedFilterSection: React.FC<{
  searchQuery: string;
  onSearchChange: (query: string) => void;
  sortBy: string;
  onSortChange: (sort: string) => void;
  statusFilter: string[];
  onStatusFilterChange: (status: string[]) => void;
  showFilters: boolean;
  onToggleFilters: () => void;
  viewMode: 'grid' | 'list';
  onViewModeChange: (mode: 'grid' | 'list') => void;
}> = ({
  searchQuery,
  onSearchChange,
  sortBy,
  onSortChange,
  statusFilter,
  onStatusFilterChange,
  showFilters,
  onToggleFilters,
  viewMode,
  onViewModeChange,
}) => (
  <Card className="border-0 shadow-xl bg-gradient-to-r from-white via-cyan-50/30 to-blue-50/30 mb-6">
    <CardContent className="p-6 space-y-4">
      {/* Main Filter Row */}
      <div className="flex flex-col md:flex-row gap-4">
        {/* Search Input */}
        <div className="relative flex-1">
          <Search className="absolute right-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400" />
          <Input
            placeholder="חיפוש לפי שם או עיר..."
            value={searchQuery}
            onChange={(e) => onSearchChange(e.target.value)}
            className="pr-12 text-right bg-white/80 backdrop-blur-sm border-cyan-200 focus:border-cyan-400 focus:ring-cyan-200 rounded-xl h-12 shadow-sm"
          />
        </div>

        {/* Sort Select */}
        <Select value={sortBy} onValueChange={onSortChange}>
          <SelectTrigger className="w-48 h-12 bg-white/80 backdrop-blur-sm border-cyan-200 focus:border-cyan-400 rounded-xl shadow-sm">
            <SortDesc className="w-4 h-4 ml-2" />
            <SelectValue placeholder="מיון לפי..." />
          </SelectTrigger>
          <SelectContent>
            {SORT_OPTIONS.map((option) => {
              const IconComponent = option.icon;
              return (
                <SelectItem key={option.value} value={option.value}>
                  <div className="flex items-center gap-2">
                    <IconComponent className="w-4 h-4" />
                    {option.label}
                  </div>
                </SelectItem>
              );
            })}
          </SelectContent>
        </Select>

        {/* Filter Toggle */}
        <Button
          variant="outline"
          onClick={onToggleFilters}
          className={cn(
            "h-12 border-cyan-200 hover:bg-cyan-50 text-cyan-600 rounded-xl bg-white/80 backdrop-blur-sm shadow-sm",
            showFilters && "bg-cyan-100 border-cyan-300"
          )}
        >
          <Filter className="w-4 h-4 ml-2" />
          סינון
        </Button>

        {/* View Mode Toggle */}
        <ToggleGroup
          type="single"
          value={viewMode}
          onValueChange={(value: 'grid' | 'list') => value && onViewModeChange(value)}
          className="bg-white/80 backdrop-blur-sm shadow-sm rounded-xl border border-cyan-200"
        >
          <ToggleGroupItem 
            value="grid" 
            aria-label="Grid view"
            className="data-[state=on]:bg-cyan-500 data-[state=on]:text-white"
          >
            <LayoutGrid className="h-4 w-4" />
          </ToggleGroupItem>
          <ToggleGroupItem 
            value="list" 
            aria-label="List view"
            className="data-[state=on]:bg-cyan-500 data-[state=on]:text-white"
          >
            <List className="h-4 w-4" />
          </ToggleGroupItem>
        </ToggleGroup>
      </div>

      {/* Advanced Filters */}
      {showFilters && (
        <div className="pt-4 border-t border-cyan-100 space-y-4">
          <div>
            <h4 className="text-sm font-bold text-gray-700 mb-3 flex items-center gap-2">
              <Activity className="w-4 h-4 text-cyan-500" />
              סינון לפי סטטוס
            </h4>
            <div className="flex flex-wrap gap-2">
              {STATUS_OPTIONS.map((status) => {
                const IconComponent = status.icon;
                return (
                  <Button
                    key={status.value}
                    variant={statusFilter.includes(status.value) ? "default" : "outline"}
                    size="sm"
                    onClick={() => {
                      const newFilter = statusFilter.includes(status.value)
                        ? statusFilter.filter((s) => s !== status.value)
                        : [...statusFilter, status.value];
                      onStatusFilterChange(newFilter);
                    }}
                    className={cn(
                      "text-xs rounded-xl transition-all duration-300",
                      statusFilter.includes(status.value)
                        ? `bg-gradient-to-r ${status.color} text-white shadow-lg border-0`
                        : "border-gray-200 hover:bg-gray-50"
                    )}
                  >
                    <IconComponent className="w-3 h-3 ml-1" />
                    {status.label}
                  </Button>
                );
              })}
            </div>
          </div>

          {/* Clear Filters */}
          <div className="flex justify-end">
            <Button
              variant="ghost"
              size="sm"
              onClick={() => onStatusFilterChange([])}
              className="text-gray-500 hover:text-gray-700"
            >
              <RefreshCw className="w-3 h-3 ml-1" />
              נקה סינונים
            </Button>
          </div>
        </div>
      )}
    </CardContent>
  </Card>
);

// Enhanced Empty State
const EnhancedEmptyState: React.FC<{
  isFiltered: boolean;
  onClearFilters: () => void;
}> = ({ isFiltered, onClearFilters }) => (
  <div className="flex flex-col items-center justify-center min-h-[500px] text-center p-12">
    <div className="w-32 h-32 rounded-full bg-gradient-to-br from-purple-100 via-pink-100 to-blue-100 flex items-center justify-center shadow-xl mb-8">
      {isFiltered ? (
        <Search className="w-16 h-16 text-purple-400" />
      ) : (
        <Users className="w-16 h-16 text-purple-400" />
      )}
    </div>
    
    <h3 className="text-2xl font-bold text-gray-800 mb-4">
      {isFiltered ? 'לא נמצאו תוצאות' : 'אין הצעות כרגע'}
    </h3>
    
    <p className="text-gray-600 max-w-md mx-auto mb-6 leading-relaxed">
      {isFiltered 
        ? 'נסה לשנות את קריטריוני החיפוש או הסינון כדי למצוא את מה שאתה מחפש'
        : 'כשיהיו הצעות זמינות, הן יופיעו כאן'
      }
    </p>

    {isFiltered && (
      <Button
        onClick={onClearFilters}
        className="bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-700 hover:to-pink-700 text-white shadow-xl hover:shadow-2xl transition-all duration-300 rounded-xl"
      >
        <RefreshCw className="w-4 h-4 ml-2" />
        נקה סינון
      </Button>
    )}
  </div>
);

const SuggestionsList: React.FC<SuggestionsListProps> = ({
  suggestions,
  isLoading = false,
  onAction,
  className,
}) => {
  // Filter states
  const [searchQuery, setSearchQuery] = useState("");
  const [sortBy, setSortBy] = useState("latest");
  const [statusFilter, setStatusFilter] = useState<string[]>([]);
  const [showFilters, setShowFilters] = useState(false);
  const [viewMode, setViewMode] = useState<'grid' | 'list'>('grid');

  // Calculate stats
  const stats = useMemo(() => {
    const total = suggestions.length;
    const pending = suggestions.filter(s => 
      s.status === 'PENDING_FIRST_PARTY' || s.status === 'PENDING_SECOND_PARTY'
    ).length;
    const approved = suggestions.filter(s => 
      s.status === 'FIRST_PARTY_APPROVED' || s.status === 'SECOND_PARTY_APPROVED'
    ).length;
    const declined = suggestions.filter(s => 
      s.status === 'FIRST_PARTY_DECLINED' || s.status === 'SECOND_PARTY_DECLINED'
    ).length;
    const urgent = suggestions.filter(s => s.priority === 'URGENT').length;

    return { total, pending, approved, declined, urgent };
  }, [suggestions]);

  // Filter and sort suggestions
  const filteredSuggestions = useMemo(() => {
    let result = [...suggestions];

    // Apply status filter
    if (statusFilter.length > 0) {
      result = result.filter((s) => statusFilter.includes(s.status));
    }

    // Apply search filter
    if (searchQuery) {
      const query = searchQuery.toLowerCase();
      result = result.filter((s) => {
        const searchText = `${s.firstParty.firstName} ${s.firstParty.lastName} ${s.secondParty.firstName} ${s.secondParty.lastName} ${s.firstParty.profile?.city || ''} ${s.secondParty.profile?.city || ''}`.toLowerCase();
        return searchText.includes(query);
      });
    }

    // Apply sorting
    switch (sortBy) {
      case "latest":
        result.sort(
          (a, b) =>
            new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime()
        );
        break;
      case "oldest":
        result.sort(
          (a, b) =>
            new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime()
        );
        break;
      case "deadline":
        result.sort((a, b) => {
          if (!a.decisionDeadline) return 1;
          if (!b.decisionDeadline) return -1;
          return (
            new Date(a.decisionDeadline).getTime() -
            new Date(b.decisionDeadline).getTime()
          );
        });
        break;
      case "priority":
        const priorityOrder = { URGENT: 0, HIGH: 1, MEDIUM: 2, LOW: 3 };
        result.sort(
          (a, b) => 
            (priorityOrder[a.priority as keyof typeof priorityOrder] || 4) - 
            (priorityOrder[b.priority as keyof typeof priorityOrder] || 4)
        );
        break;
    }

    return result;
  }, [suggestions, searchQuery, sortBy, statusFilter]);

  const isFiltered = searchQuery !== '' || statusFilter.length > 0;

  const clearAllFilters = () => {
    setSearchQuery('');
    setStatusFilter([]);
  };

  return (
    <div className={cn("space-y-6", className)}>
      {/* Enhanced Stats */}
      <EnhancedListStats {...stats} />

      {/* Enhanced Filter Section */}
      <EnhancedFilterSection
        searchQuery={searchQuery}
        onSearchChange={setSearchQuery}
        sortBy={sortBy}
        onSortChange={setSortBy}
        statusFilter={statusFilter}
        onStatusFilterChange={setStatusFilter}
        showFilters={showFilters}
        onToggleFilters={() => setShowFilters(!showFilters)}
        viewMode={viewMode}
        onViewModeChange={setViewMode}
      />

      {/* Results Summary */}
      <div className="flex justify-between items-center text-sm text-gray-600 px-2">
        <span className="font-medium">
          מציג {filteredSuggestions.length} {filteredSuggestions.length === 1 ? 'הצעה' : 'הצעות'} מתוך {suggestions.length}
        </span>
        {filteredSuggestions.length > 0 && (
          <div className="flex items-center gap-2">
            <Sparkles className="w-4 h-4 text-purple-500" />
            <span className="font-medium text-purple-600">התאמות איכותיות</span>
          </div>
        )}
      </div>

      {/* Suggestions Grid/List */}
      {isLoading ? (
        <LoadingContainer>
          <div className="space-y-6">
            {/* Loading Stats */}
            <Card className="border-0 shadow-xl">
              <CardContent className="p-4">
                <div className="grid grid-cols-2 md:grid-cols-5 gap-4">
                  {Array.from({ length: 5 }).map((_, i) => (
                    <div key={i} className="text-center space-y-2">
                      <div className="w-12 h-12 bg-gray-200 rounded-full mx-auto animate-pulse"></div>
                      <div className="h-4 bg-gray-200 rounded animate-pulse"></div>
                    </div>
                  ))}
                </div>
              </CardContent>
            </Card>

            {/* Loading Cards */}
            <div className={cn(
              viewMode === 'grid'
                ? "grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6"
                : "space-y-4"
            )}>
              {Array.from({ length: 6 }).map((_, i) => (
                <div
                  key={i}
                  className="h-80 bg-gradient-to-br from-gray-100 to-gray-200 rounded-2xl animate-pulse shadow-lg"
                />
              ))}
            </div>
          </div>
        </LoadingContainer>
      ) : filteredSuggestions.length === 0 ? (
        <EnhancedEmptyState
          isFiltered={isFiltered}
          onClearFilters={clearAllFilters}
        />
      ) : (
        <div className={cn(
          "animate-fade-in-up",
          viewMode === 'grid'
            ? "grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6"
            : "space-y-6"
        )}>
          {filteredSuggestions.map((suggestion, index) => (
            <div
              key={suggestion.id}
              className="animate-scale-in"
              style={{
                animationDelay: `${index * 100}ms`,
                animationFillMode: 'both',
              }}
            >
              <SuggestionCard
                suggestion={suggestion as unknown as Suggestion}
                onAction={onAction}
                variant={viewMode === 'list' ? 'full' : 'full'}
                className={cn(
                  "card-hover-elegant shadow-lg hover:shadow-xl transition-all duration-300",
                  viewMode === 'list' && "flex"
                )}
              />
            </div>
          ))}
        </div>
      )}

      {/* Filter Summary */}
      {(searchQuery || statusFilter.length > 0) && (
        <Card className="border-0 shadow-lg bg-gradient-to-r from-purple-50 to-pink-50">
          <CardContent className="p-4">
            <div className="flex items-center justify-between">
              <div className="flex items-center gap-2 text-sm">
                <Filter className="w-4 h-4 text-purple-500" />
                <span className="font-medium text-purple-700">סינון פעיל:</span>
                
                {searchQuery && (
                  <Badge className="bg-gradient-to-r from-blue-500 to-cyan-500 text-white border-0 shadow-sm">
                    חיפוש: {searchQuery}
                  </Badge>
                )}
                
                {statusFilter.map((status) => {
                  const statusOption = STATUS_OPTIONS.find(opt => opt.value === status);
                  if (!statusOption) return null;
                  const IconComponent = statusOption.icon;
                  
                  return (
                    <Badge 
                      key={status}
                      className={cn(
                        `bg-gradient-to-r ${statusOption.color} text-white border-0 shadow-sm`
                      )}
                    >
                      <IconComponent className="w-3 h-3 ml-1" />
                      {statusOption.label}
                    </Badge>
                  );
                })}
              </div>
              
              <Button
                variant="ghost"
                size="sm"
                onClick={clearAllFilters}
                className="text-purple-600 hover:text-purple-700 hover:bg-purple-100 rounded-xl"
              >
                <RefreshCw className="w-3 h-3 ml-1" />
                נקה הכל
              </Button>
            </div>
          </CardContent>
        </Card>
      )}

      {/* Performance Insights */}
      {filteredSuggestions.length > 0 && (
        <Card className="border-0 shadow-lg bg-gradient-to-r from-emerald-50 to-green-50">
          <CardContent className="p-4">
            <div className="flex items-center justify-between">
              <div className="flex items-center gap-3">
                <div className="p-2 rounded-full bg-gradient-to-r from-emerald-500 to-green-500 text-white shadow-lg">
                  <BarChart3 className="w-4 h-4" />
                </div>
                <div>
                  <h4 className="font-bold text-emerald-800">תובנות ביצועים</h4>
                  <p className="text-sm text-emerald-600">
                    {Math.round((stats.approved / stats.total) * 100)}% אחוז אישור •{' '}
                    {stats.urgent > 0 && `${stats.urgent} דחופות •`}{' '}
                    {stats.pending} ממתינות לטיפול
                  </p>
                </div>
              </div>
              
              <div className="flex items-center gap-2">
                <div className="text-right text-xs text-emerald-600">
                  <div className="font-bold">{Math.round((stats.approved / Math.max(stats.total, 1)) * 100)}%</div>
                  <div>הצלחה</div>
                </div>
                <div className="w-16 h-2 bg-emerald-200 rounded-full overflow-hidden">
                  <div 
                    className="h-full bg-gradient-to-r from-emerald-500 to-green-500 transition-all duration-500"
                    style={{ width: `${Math.round((stats.approved / Math.max(stats.total, 1)) * 100)}%` }}
                  />
                </div>
              </div>
            </div>
          </CardContent>
        </Card>
      )}
    </div>
  );
};

export default SuggestionsList;
--- End of Content for SuggestionsList.tsx ---

================================================================================
Directory: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\app\components\matchmaker\suggestions\services
================================================================================

(This directory contains subdirectories but no files directly. See subdirectories below.)

================================================================================
Directory: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\app\components\matchmaker\suggestions\services\notification
================================================================================

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\app\components\matchmaker\suggestions\services\notification\NotificationService.ts
--------------------------------------------------------------------------------
Content:
// src/app/components/matchmaker/suggestions/services/notification/NotificationService.ts

import { MatchSuggestionStatus } from '@prisma/client';
import { SuggestionWithParties } from '../suggestions/StatusTransitionService';

export type RecipientInfo = {
  email: string;
  phone?: string; // Phone number with international prefix, e.g.: +972501234567
  name: string;
};

export type NotificationContent = {
  subject: string;
  body: string;
  htmlBody?: string; // HTML version for email
};

export type NotificationChannel = 'email' | 'whatsapp' | 'sms';

export type NotificationOptions = {
  channels: NotificationChannel[];
  notifyParties?: ('first' | 'second' | 'matchmaker')[];
  priority?: 'high' | 'normal' | 'low';
  attachments?: Array<{
    filename: string;
    content: Buffer | string;
    contentType: string;
  }>;
  customMessage?: string;
  metadata?: Record<string, unknown>;
};

export interface NotificationAdapter {
  canSendTo(recipient: RecipientInfo): boolean;
  send(recipient: RecipientInfo, content: NotificationContent): Promise<boolean>;
  getChannelType(): NotificationChannel;
}

export class NotificationService {
  private static instance: NotificationService;
  private adapters: Map<NotificationChannel, NotificationAdapter> = new Map();

  private constructor() {}

  public static getInstance(): NotificationService {
    if (!NotificationService.instance) {
      NotificationService.instance = new NotificationService();
    }
    return NotificationService.instance;
  }

  public registerAdapter(adapter: NotificationAdapter): void {
    this.adapters.set(adapter.getChannelType(), adapter);
    console.log(`Registered ${adapter.getChannelType()} adapter`);
  }

  public async sendNotification(
    recipient: RecipientInfo,
    content: NotificationContent,
    options: NotificationOptions
  ): Promise<Record<NotificationChannel, boolean>> {
    const results: Record<NotificationChannel, boolean> = {} as Record<NotificationChannel, boolean>;
    console.log(`Attempting to send notification to ${recipient.name} via channels:`, options.channels);

    for (const channel of options.channels) {
      const adapter = this.adapters.get(channel);
      if (!adapter) {
        console.warn(`No adapter registered for channel: ${channel}`);
        results[channel] = false;
        continue;
      }

      if (!adapter.canSendTo(recipient)) {
        console.warn(`Cannot send to recipient via ${channel}: missing required info`);
        results[channel] = false;
        continue;
      }

      try {
        console.log(`Sending ${channel} notification to ${recipient.name}`);
        results[channel] = await adapter.send(recipient, content);
        console.log(`${channel} notification sent successfully: ${results[channel]}`);
      } catch (error) {
        console.error(`Error sending notification via ${channel}:`, error);
        results[channel] = false;
      }
    }

    return results;
  }

  // Dedicated method for handling suggestion-related notifications
  public async handleSuggestionStatusChange(
    suggestion: SuggestionWithParties,
    options: Partial<NotificationOptions> = {}
  ): Promise<void> {
    console.log(`Processing notifications for suggestion ${suggestion.id} with status ${suggestion.status}`);
    
    const templateContent = this.getSuggestionTemplate(suggestion, options.customMessage);
    if (!templateContent) {
      console.log(`No template found for status ${suggestion.status} - skipping notification`);
      return;
    }
  
    const recipientsWithChannels = this.getRecipientsForSuggestion(suggestion);
    console.log(`Found ${recipientsWithChannels.length} potential recipients`);
  
    for (const { recipient, preferredChannels } of recipientsWithChannels) {
      // Filter recipients based on notifyParties if provided
      if (options.notifyParties) {
        const recipientType = this.getRecipientType(recipient, suggestion);
        if (!recipientType || !options.notifyParties.includes(recipientType)) {
          console.log(`Skipping recipient ${recipient.name} (${recipientType}) - not in notifyParties`, options.notifyParties);
          continue;
        }
      }
      
      const channelsToUse = options.channels || preferredChannels || ['email'];
      console.log(`Sending notification to ${recipient.name} via channels:`, channelsToUse);
      
      await this.sendNotification(
        recipient,
        templateContent,
        { ...options, channels: channelsToUse }
      );
    }
    
    console.log(`Finished processing notifications for suggestion ${suggestion.id}`);
  }

  // Helper method to determine recipient type
  private getRecipientType(
    recipient: RecipientInfo, 
    suggestion: SuggestionWithParties
  ): 'first' | 'second' | 'matchmaker' | null {
    if (recipient.email === suggestion.firstParty.email) {
      return 'first';
    } else if (recipient.email === suggestion.secondParty.email) {
      return 'second';
    } else if (recipient.email === suggestion.matchmaker.email) {
      return 'matchmaker';
    }
    return null;
  }

  private getSuggestionTemplate(
    suggestion: SuggestionWithParties,
    customMessage?: string
  ): NotificationContent | null {
    const baseUrl = process.env.NEXT_PUBLIC_BASE_URL || 'http://localhost:3000';
    
    // If there's a custom message, use it instead of the template
    if (customMessage) {
      const reviewUrl = `${baseUrl}/suggestions/${suggestion.id}/review`;
      return {
        subject: "עדכון בהצעת שידוך",
        body: `שלום,\n\n${customMessage}\n\nלצפייה בפרטי ההצעה: ${reviewUrl}\n\nבברכה,\nמערכת השידוכים`,
        htmlBody: `
          <div dir="rtl">
            <h2>שלום,</h2>
            <p>${customMessage}</p>
            <p>לצפייה בפרטי ההצעה: <a href="${reviewUrl}">לחץ כאן</a></p>
            <p>בברכה,<br>מערכת השידוכים</p>
          </div>
        `
      };
    }
    
    // Otherwise use the template based on status
    switch (suggestion.status) {
      case MatchSuggestionStatus.PENDING_FIRST_PARTY:
        return {
          subject: 'הצעת שידוך חדשה עבורך',
          body: `שלום ${suggestion.firstParty.firstName},\n\n${suggestion.matchmaker.firstName} ${suggestion.matchmaker.lastName} הציע/ה עבורך הצעת שידוך.\n\nלצפייה בפרטי ההצעה ומענה: ${baseUrl}/suggestions/${suggestion.id}/review\n\nבברכה,\nצוות המערכת`,
          htmlBody: `<div dir="rtl"><h2>שלום ${suggestion.firstParty.firstName},</h2><p>${suggestion.matchmaker.firstName} ${suggestion.matchmaker.lastName} הציע/ה עבורך הצעת שידוך.</p><p>לצפייה בפרטי ההצעה ומענה, אנא היכנס/י לקישור הבא:</p><p><a href="${baseUrl}/suggestions/${suggestion.id}/review">לצפייה בהצעה</a></p><p>בברכה,<br>צוות המערכת</p></div>`
        };
      
      case MatchSuggestionStatus.FIRST_PARTY_APPROVED:
        return {
          subject: 'עדכון סטטוס - הצעת שידוך אושרה על ידי הצד הראשון',
          body: `שלום ${suggestion.matchmaker.firstName},\n\n${suggestion.firstParty.firstName} ${suggestion.firstParty.lastName} אישר/ה את הצעת השידוך.\n\nההצעה תועבר כעת באופן אוטומטי לצד השני.\n\nלצפייה בפרטים נוספים: ${baseUrl}/dashboard/suggestions/${suggestion.id}\n\nבברכה,\nצוות המערכת`,
          htmlBody: `<div dir="rtl"><h2>שלום ${suggestion.matchmaker.firstName},</h2><p>${suggestion.firstParty.firstName} ${suggestion.firstParty.lastName} אישר/ה את הצעת השידוך.</p><p>ההצעה תועבר כעת באופן אוטומטי לצד השני.</p><p><a href="${baseUrl}/dashboard/suggestions/${suggestion.id}">לצפייה בפרטים נוספים</a></p><p>בברכה,<br>צוות המערכת</p></div>`
        };

      case MatchSuggestionStatus.FIRST_PARTY_DECLINED:
        return {
          subject: 'עדכון סטטוס - הצעת שידוך נדחתה',
          body: `שלום ${suggestion.matchmaker.firstName},\n\n${suggestion.firstParty.firstName} ${suggestion.firstParty.lastName} דחה/תה את הצעת השידוך.\n\nלצפייה בפרטים נוספים: ${baseUrl}/dashboard/suggestions/${suggestion.id}\n\nבברכה,\nצוות המערכת`,
          htmlBody: `<div dir="rtl"><h2>שלום ${suggestion.matchmaker.firstName},</h2><p>${suggestion.firstParty.firstName} ${suggestion.firstParty.lastName} דחה/תה את הצעת השידוך.</p><p><a href="${baseUrl}/dashboard/suggestions/${suggestion.id}">לצפייה בפרטים נוספים</a></p><p>בברכה,<br>צוות המערכת</p></div>`
        };

      case MatchSuggestionStatus.PENDING_SECOND_PARTY:
        return {
          subject: 'הצעת שידוך חדשה עבורך',
          body: `שלום ${suggestion.secondParty.firstName},\n\n${suggestion.matchmaker.firstName} ${suggestion.matchmaker.lastName} הציע/ה עבורך הצעת שידוך.\n\nהצד הראשון כבר אישר את ההצעה.\n\nלצפייה בפרטי ההצעה ומענה: ${baseUrl}/suggestions/${suggestion.id}/review\n\nבברכה,\nצוות המערכת`,
          htmlBody: `<div dir="rtl"><h2>שלום ${suggestion.secondParty.firstName},</h2><p>${suggestion.matchmaker.firstName} ${suggestion.matchmaker.lastName} הציע/ה עבורך הצעת שידוך.</p><p>הצד הראשון כבר אישר את ההצעה.</p><p><a href="${baseUrl}/suggestions/${suggestion.id}/review">לצפייה בפרטי ההצעה ומענה</a></p><p>בברכה,<br>צוות המערכת</p></div>`
        };

      case MatchSuggestionStatus.SECOND_PARTY_APPROVED:
        return {
          subject: 'עדכון סטטוס - הצעת שידוך אושרה על ידי הצד השני',
          body: `שלום ${suggestion.matchmaker.firstName},\n\n${suggestion.secondParty.firstName} ${suggestion.secondParty.lastName} אישר/ה את הצעת השידוך.\n\nשני הצדדים אישרו את ההצעה. ניתן כעת לשתף פרטי קשר.\n\nלצפייה בפרטים נוספים: ${baseUrl}/dashboard/suggestions/${suggestion.id}\n\nבברכה,\nצוות המערכת`,
          htmlBody: `<div dir="rtl"><h2>שלום ${suggestion.matchmaker.firstName},</h2><p>${suggestion.secondParty.firstName} ${suggestion.secondParty.lastName} אישר/ה את הצעת השידוך.</p><p>שני הצדדים אישרו את ההצעה. ניתן כעת לשתף פרטי קשר.</p><p><a href="${baseUrl}/dashboard/suggestions/${suggestion.id}">לצפייה בפרטים נוספים</a></p><p>בברכה,<br>צוות המערכת</p></div>`
        };

      case MatchSuggestionStatus.SECOND_PARTY_DECLINED:
        return {
          subject: 'עדכון סטטוס - הצעת שידוך נדחתה',
          body: `שלום ${suggestion.matchmaker.firstName},\n\n${suggestion.secondParty.firstName} ${suggestion.secondParty.lastName} דחה/תה את הצעת השידוך.\n\nלצפייה בפרטים נוספים: ${baseUrl}/dashboard/suggestions/${suggestion.id}\n\nבברכה,\nצוות המערכת`,
          htmlBody: `<div dir="rtl"><h2>שלום ${suggestion.matchmaker.firstName},</h2><p>${suggestion.secondParty.firstName} ${suggestion.secondParty.lastName} דחה/תה את הצעת השידוך.</p><p><a href="${baseUrl}/dashboard/suggestions/${suggestion.id}">לצפייה בפרטים נוספים</a></p><p>בברכה,<br>צוות המערכת</p></div>`
        };
    
      case MatchSuggestionStatus.CONTACT_DETAILS_SHARED:
        // Prepare contact details with multi-line support
        const firstPartyDetails = this.formatUserDetails(suggestion.firstParty);
        const secondPartyDetails = this.formatUserDetails(suggestion.secondParty);
        
        return {
          subject: 'פרטי קשר להצעת השידוך',
          body: `ברכות! שני הצדדים אישרו את הצעת השידוך.\n\nפרטי הקשר של הצד הראשון:\n${firstPartyDetails}\n\nפרטי הקשר של הצד השני:\n${secondPartyDetails}\n\nאנא צרו קשר בהקדם לתיאום פגישה ראשונה.\n\nבהצלחה!`,
          htmlBody: `<div dir="rtl"><h2>ברכות! שני הצדדים אישרו את הצעת השידוך.</h2><p>פרטי הקשר של הצד הראשון:</p><pre>${firstPartyDetails}</pre><p>פרטי הקשר של הצד השני:</p><pre>${secondPartyDetails}</pre><p>אנא צרו קשר בהקדם לתיאום פגישה ראשונה.</p><p>בהצלחה!</p></div>`
        };
      
      case MatchSuggestionStatus.AWAITING_FIRST_DATE_FEEDBACK:
        return {
          subject: 'בקשה למשוב על הפגישה הראשונה',
          body: `שלום,\n\nנשמח לקבל את המשוב שלך על הפגישה הראשונה.\n\nלשליחת המשוב: ${baseUrl}/suggestions/${suggestion.id}/feedback\n\nבברכה,\nצוות המערכת`,
          htmlBody: `<div dir="rtl"><h2>שלום,</h2><p>נשמח לקבל את המשוב שלך על הפגישה הראשונה.</p><p><a href="${baseUrl}/suggestions/${suggestion.id}/feedback">לשליחת המשוב</a></p><p>בברכה,<br>צוות המערכת</p></div>`
        };

      case MatchSuggestionStatus.THINKING_AFTER_DATE:
        return {
          subject: 'בקשת זמן למחשבה לאחר הפגישה',
          body: `שלום ${suggestion.matchmaker.firstName},\n\nאחד הצדדים ביקש זמן למחשבה לאחר הפגישה.\n\nלצפייה בפרטים נוספים: ${baseUrl}/dashboard/suggestions/${suggestion.id}\n\nבברכה,\nצוות המערכת`,
          htmlBody: `<div dir="rtl"><h2>שלום ${suggestion.matchmaker.firstName},</h2><p>אחד הצדדים ביקש זמן למחשבה לאחר הפגישה.</p><p><a href="${baseUrl}/dashboard/suggestions/${suggestion.id}">לצפייה בפרטים נוספים</a></p><p>בברכה,<br>צוות המערכת</p></div>`
        };

      case MatchSuggestionStatus.DATING:
        return {
          subject: 'עדכון סטטוס - בתהליך היכרות',
          body: `שלום ${suggestion.matchmaker.firstName},\n\nהזוג נמצא בתהליך היכרות.\n\nלצפייה בפרטים: ${baseUrl}/dashboard/suggestions/${suggestion.id}\n\nבברכה,\nצוות המערכת`,
          htmlBody: `<div dir="rtl"><h2>שלום ${suggestion.matchmaker.firstName},</h2><p>הזוג נמצא בתהליך היכרות.</p><p><a href="${baseUrl}/dashboard/suggestions/${suggestion.id}">לצפייה בפרטים</a></p><p>בברכה,<br>צוות המערכת</p></div>`
        };

      case MatchSuggestionStatus.ENGAGED:
        return {
          subject: 'מזל טוב! - אירוסין',
          body: `מזל טוב ${suggestion.firstParty.firstName} ו${suggestion.secondParty.firstName}!\n\nאנו שמחים לשמוע על האירוסין ומאחלים לכם המון הצלחה בהמשך הדרך.\n\nבברכה,\nצוות המערכת`,
          htmlBody: `<div dir="rtl"><h2>מזל טוב ${suggestion.firstParty.firstName} ו${suggestion.secondParty.firstName}!</h2><p>אנו שמחים לשמוע על האירוסין ומאחלים לכם המון הצלחה בהמשך הדרך.</p><p>בברכה,<br>צוות המערכת</p></div>`
        };

      case MatchSuggestionStatus.MARRIED:
        return {
          subject: 'מזל טוב! - חתונה',
          body: `מזל טוב ${suggestion.firstParty.firstName} ו${suggestion.secondParty.firstName}!\n\nאנו שמחים לשמוע על החתונה ומאחלים לכם חיים מאושרים יחד.\n\nבברכה,\nצוות המערכת`,
          htmlBody: `<div dir="rtl"><h2>מזל טוב ${suggestion.firstParty.firstName} ו${suggestion.secondParty.firstName}!</h2><p>אנו שמחים לשמוע על החתונה ומאחלים לכם חיים מאושרים יחד.</p><p>בברכה,<br>צוות המערכת</p></div>`
        };

      case MatchSuggestionStatus.EXPIRED:
        return {
          subject: 'הצעת השידוך פגה',
          body: `שלום ${suggestion.matchmaker.firstName},\n\nהצעת השידוך פגה עקב חוסר מענה במועד.\n\nלצפייה בפרטים: ${baseUrl}/dashboard/suggestions/${suggestion.id}\n\nבברכה,\nצוות המערכת`,
          htmlBody: `<div dir="rtl"><h2>שלום ${suggestion.matchmaker.firstName},</h2><p>הצעת השידוך פגה עקב חוסר מענה במועד.</p><p><a href="${baseUrl}/dashboard/suggestions/${suggestion.id}">לצפייה בפרטים</a></p><p>בברכה,<br>צוות המערכת</p></div>`
        };

      default:
        // For other statuses, return null to skip notification
        console.log(`No template defined for status: ${suggestion.status}`);
        return null;
    }
  }

  private getRecipientsForSuggestion(suggestion: SuggestionWithParties): Array<{
    recipient: RecipientInfo;
    preferredChannels: NotificationChannel[];
  }> {
    const recipients: Array<{
      recipient: RecipientInfo;
      preferredChannels: NotificationChannel[];
    }> = [];
    
    // Logic to determine recipients based on suggestion status
    switch (suggestion.status) {
      case MatchSuggestionStatus.DRAFT:
        recipients.push({
          recipient: {
            email: suggestion.matchmaker.email,
            phone: suggestion.matchmaker.phone || undefined,
            name: `${suggestion.matchmaker.firstName} ${suggestion.matchmaker.lastName}`
          },
          preferredChannels: ['email'] // Email only for drafts
        });
        break;
      
      case MatchSuggestionStatus.PENDING_FIRST_PARTY:
        recipients.push({
          recipient: {
            email: suggestion.firstParty.email,
            phone: suggestion.firstParty.phone || undefined,
            name: `${suggestion.firstParty.firstName} ${suggestion.firstParty.lastName}`
          },
          preferredChannels: ['email', 'whatsapp'] // Email and WhatsApp for candidates
        });
        break;
      
      case MatchSuggestionStatus.FIRST_PARTY_APPROVED:
      case MatchSuggestionStatus.FIRST_PARTY_DECLINED:
        recipients.push({
          recipient: {
            email: suggestion.matchmaker.email,
            phone: suggestion.matchmaker.phone || undefined,
            name: `${suggestion.matchmaker.firstName} ${suggestion.matchmaker.lastName}`
          },
          preferredChannels: ['email', 'whatsapp'] // Email and WhatsApp for matchmaker
        });
        break;
      
      case MatchSuggestionStatus.PENDING_SECOND_PARTY:
        recipients.push({
          recipient: {
            email: suggestion.secondParty.email,
            phone: suggestion.secondParty.phone || undefined,
            name: `${suggestion.secondParty.firstName} ${suggestion.secondParty.lastName}`
          },
          preferredChannels: ['email', 'whatsapp'] // Email and WhatsApp for candidates
        });
        break;
      
      case MatchSuggestionStatus.SECOND_PARTY_APPROVED:
      case MatchSuggestionStatus.SECOND_PARTY_DECLINED:
        recipients.push({
          recipient: {
            email: suggestion.matchmaker.email,
            phone: suggestion.matchmaker.phone || undefined,
            name: `${suggestion.matchmaker.firstName} ${suggestion.matchmaker.lastName}`
          },
          preferredChannels: ['email', 'whatsapp'] // Email and WhatsApp for matchmaker
        });
        break;
      
      case MatchSuggestionStatus.AWAITING_MATCHMAKER_APPROVAL:
        recipients.push({
          recipient: {
            email: suggestion.matchmaker.email,
            phone: suggestion.matchmaker.phone || undefined,
            name: `${suggestion.matchmaker.firstName} ${suggestion.matchmaker.lastName}`
          },
          preferredChannels: ['email', 'whatsapp'] // Email and WhatsApp for matchmaker
        });
        break;
      
      case MatchSuggestionStatus.CONTACT_DETAILS_SHARED:
        // Send to both parties and matchmaker
        recipients.push(
          {
            recipient: {
              email: suggestion.firstParty.email,
              phone: suggestion.firstParty.phone || undefined,
              name: `${suggestion.firstParty.firstName} ${suggestion.firstParty.lastName}`
            },
            preferredChannels: ['email', 'whatsapp']
          },
          {
            recipient: {
              email: suggestion.secondParty.email,
              phone: suggestion.secondParty.phone || undefined,
              name: `${suggestion.secondParty.firstName} ${suggestion.secondParty.lastName}`
            },
            preferredChannels: ['email', 'whatsapp']
          },
          {
            recipient: {
              email: suggestion.matchmaker.email,
              phone: suggestion.matchmaker.phone || undefined,
              name: `${suggestion.matchmaker.firstName} ${suggestion.matchmaker.lastName}`
            },
            preferredChannels: ['email']
          }
        );
        break;
      
      case MatchSuggestionStatus.AWAITING_FIRST_DATE_FEEDBACK:
        // Send to both parties
        recipients.push(
          {
            recipient: {
              email: suggestion.firstParty.email,
              phone: suggestion.firstParty.phone || undefined,
              name: `${suggestion.firstParty.firstName} ${suggestion.firstParty.lastName}`
            },
            preferredChannels: ['email', 'whatsapp']
          },
          {
            recipient: {
              email: suggestion.secondParty.email,
              phone: suggestion.secondParty.phone || undefined,
              name: `${suggestion.secondParty.firstName} ${suggestion.secondParty.lastName}`
            },
            preferredChannels: ['email', 'whatsapp']
          }
        );
        break;
      
      case MatchSuggestionStatus.ENGAGED:
      case MatchSuggestionStatus.MARRIED:
        // Send to both parties and matchmaker
        recipients.push(
          {
            recipient: {
              email: suggestion.firstParty.email,
              phone: suggestion.firstParty.phone || undefined,
              name: `${suggestion.firstParty.firstName} ${suggestion.firstParty.lastName}`
            },
            preferredChannels: ['email', 'whatsapp']
          },
          {
            recipient: {
              email: suggestion.secondParty.email,
              phone: suggestion.secondParty.phone || undefined,
              name: `${suggestion.secondParty.firstName} ${suggestion.secondParty.lastName}`
            },
            preferredChannels: ['email', 'whatsapp']
          },
          {
            recipient: {
              email: suggestion.matchmaker.email,
              phone: suggestion.matchmaker.phone || undefined,
              name: `${suggestion.matchmaker.firstName} ${suggestion.matchmaker.lastName}`
            },
            preferredChannels: ['email', 'whatsapp']
          }
        );
        break;

      default:
        // Default: send to matchmaker only
        recipients.push({
          recipient: {
            email: suggestion.matchmaker.email,
            phone: suggestion.matchmaker.phone || undefined,
            name: `${suggestion.matchmaker.firstName} ${suggestion.matchmaker.lastName}`
          },
          preferredChannels: ['email']
        });
        break;
    }

    return recipients;
  }

  // Helper function to format contact details
  private formatUserDetails(user: { 
    firstName: string; 
    lastName: string; 
    email: string; 
    phone?: string | null 
  }): string {
    const details = [
      `שם: ${user.firstName} ${user.lastName}`,
      `אימייל: ${user.email}`,
    ];

    if (user.phone) {
      details.push(`טלפון: ${user.phone}`);
    }

    return details.join('\n');
  }
}

export const notificationService = NotificationService.getInstance();
--- End of Content for NotificationService.ts ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\app\components\matchmaker\suggestions\services\notification\initNotifications.ts
--------------------------------------------------------------------------------
Content:
// src/app/components/matchmaker/suggestions/services/notification/initNotifications.ts

import { notificationService } from './NotificationService';
import { emailAdapter } from './adapters/EmailAdapter';
import { whatsAppAdapter } from './adapters/WhatsAppAdapter';

// Define notification channel type
export type NotificationChannel = 'email' | 'whatsapp' | 'sms';

export type NotificationOptions = {
    channels: NotificationChannel[];
    notifyParties?: ('first' | 'second' | 'matchmaker')[];
    customMessage?: string;
  };

/**
 * Initializes the notification service by registering all available adapters
 * @returns The initialized notification service
 */
export function initNotificationService() {
  // Register adapters
  notificationService.registerAdapter(emailAdapter);
  notificationService.registerAdapter(whatsAppAdapter);
  
  console.log('Notification service initialized with email and WhatsApp adapters');
  
  return notificationService;
}
--- End of Content for initNotifications.ts ---

================================================================================
Directory: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\app\components\matchmaker\suggestions\services\notification\adapters
================================================================================

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\app\components\matchmaker\suggestions\services\notification\adapters\EmailAdapter.ts
--------------------------------------------------------------------------------
Content:
// src/app/components/matchmaker/suggestions/services/notification/adapters/EmailAdapter.ts

import { NotificationAdapter, NotificationChannel, RecipientInfo, NotificationContent } from '../NotificationService';
import nodemailer from 'nodemailer';

export class EmailAdapter implements NotificationAdapter {
  private static instance: EmailAdapter;
  private transporter: nodemailer.Transporter;

  private constructor() {
    // Configure the transporter exactly like in EmailService
    this.transporter = nodemailer.createTransport({
      service: 'gmail',
      auth: {
        user: process.env.GMAIL_USER || '',
        pass: process.env.GMAIL_APP_PASSWORD || '',
      },
      tls: {
        rejectUnauthorized: false
      }
    });

    // Verify email configuration on initialization
    this.verifyEmailConfig();
  }

  private async verifyEmailConfig(): Promise<void> {
    try {
      await this.transporter.verify();
      console.log('Email configuration verified successfully');
    } catch (error) {
      console.error('Email configuration verification failed:', error);
      // Don't throw, to allow the system to continue even if verification fails
    }
  }

  public static getInstance(): EmailAdapter {
    if (!EmailAdapter.instance) {
      EmailAdapter.instance = new EmailAdapter();
    }
    return EmailAdapter.instance;
  }

  public getChannelType(): NotificationChannel {
    return 'email';
  }

  public canSendTo(recipient: RecipientInfo): boolean {
    return !!recipient.email;
  }

  public async send(recipient: RecipientInfo, content: NotificationContent): Promise<boolean> {
    try {
      const result = await this.transporter.sendMail({
        from: `${process.env.EMAIL_FROM_NAME || 'מערכת השידוכים'} <${process.env.GMAIL_USER || ''}>`,
        to: recipient.email,
        subject: content.subject,
        text: content.body,
        html: content.htmlBody || content.body.replace(/\n/g, '<br>'),
      });

      console.log('Email sent successfully:', {
        messageId: result.messageId,
        response: result.response,
        to: recipient.email,
        subject: content.subject
      });

      return true;
    } catch (error) {
      console.error('Detailed error sending email:', {
        error: error instanceof Error ? {
          name: error.name,
          message: error.message,
          stack: error.stack
        } : error,
        recipient: recipient.email,
        subject: content.subject
      });
      return false;
    }
  }
}

export const emailAdapter = EmailAdapter.getInstance();
--- End of Content for EmailAdapter.ts ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\app\components\matchmaker\suggestions\services\notification\adapters\WhatsAppAdapter.ts
--------------------------------------------------------------------------------
Content:
// lib/WhatsAppAdapter.ts
import {
  NotificationAdapter,
  NotificationChannel,
  RecipientInfo,
  NotificationContent as BaseNotificationContent
} from '../NotificationService'; // Assuming NotificationService.ts exists in the same directory
import twilio from 'twilio';
// Import the specific type for message creation options if available
import { MessageListInstanceCreateOptions } from 'twilio/lib/rest/api/v2010/account/message';

// --- Define an extended NotificationContent interface ---
// This adds the optional adapter-specific data structure
interface NotificationContent extends BaseNotificationContent {
  _adapterSpecificData?: {
      contentSid?: string;
      contentVariables?: string; // Should be a JSON string
      // Add other potential adapter-specific fields here
  };
}
// --- End Interface Extension ---

// --- Type Guard for Twilio-like Errors ---
interface PotentialTwilioError {
  code?: number | string;
  message?: string;
  // Add other potential properties like 'status', 'moreInfo', etc. if needed
}

/**
* Type guard to check if an unknown error object might be a Twilio API error
* by checking for the presence of 'code' or 'message' properties.
* @param error The unknown value caught in a catch block.
* @returns True if the error object has properties common to Twilio errors, false otherwise.
*/
function isPotentialTwilioError(error: unknown): error is PotentialTwilioError {
  // Check if it's a non-null object and has either 'code' or 'message' property
  return typeof error === 'object' && error !== null && ('code' in error || 'message' in error);
}
// --- End Type Guard ---

// --- Helper: Logger (optional but recommended) ---
// Using Record<string, unknown> or object instead of any
const logger = {
info: (message: string, meta?: Record<string, unknown> | object) => {
  console.log(JSON.stringify({ timestamp: new Date().toISOString(), level: 'info', service: 'WhatsAppAdapter', message, ...(meta || {}) }));
},
warn: (message: string, meta?: Record<string, unknown> | object) => {
  console.warn(JSON.stringify({ timestamp: new Date().toISOString(), level: 'warn', service: 'WhatsAppAdapter', message, ...(meta || {}) }));
},
error: (message: string, meta?: Record<string, unknown> | object) => {
  let logMeta = meta || {};
  // If the meta object itself is an Error, extract relevant info
  if (meta instanceof Error) {
      logMeta = { name: meta.name, message: meta.message, stack: meta.stack };
  } else if (isPotentialTwilioError(meta)) {
      // If it's potentially a Twilio error passed directly
      logMeta = { code: meta.code, message: meta.message, ...meta };
  }
  console.error(JSON.stringify({ timestamp: new Date().toISOString(), level: 'error', service: 'WhatsAppAdapter', message, ...logMeta }));
},
};
// --- End Logger ---


export class WhatsAppAdapter implements NotificationAdapter {
// Singleton instance
private static instance: WhatsAppAdapter;
// Twilio client instance (typed)
private client: twilio.Twilio | null = null;
// Configured Twilio WhatsApp sender number
private fromNumber: string = '';

/**
 * Private constructor to enforce singleton pattern.
 * Initializes the Twilio client using environment variables.
 */
private constructor() {
  const accountSid = process.env.TWILIO_ACCOUNT_SID;
  const authToken = process.env.TWILIO_AUTH_TOKEN;
  this.fromNumber = process.env.TWILIO_WHATSAPP_NUMBER || ''; // Get number from env

  // Validate configuration
  if (!accountSid || !authToken || !this.fromNumber) {
    logger.error('Missing Twilio configuration details', {
        hasSid: !!accountSid,
        hasToken: !!authToken,
        hasWhatsAppNumber: !!this.fromNumber,
        detail: "WhatsApp notifications will be unavailable."
    });
    // Do not throw, allow graceful degradation if possible
  } else {
    try {
      // Initialize Twilio client
      this.client = twilio(accountSid, authToken);
      logger.info('Twilio client initialized successfully', { fromWhatsAppNumber: this.fromNumber });
    } catch (error: unknown) { // Catch as unknown
      logger.error('Failed to initialize Twilio client during constructor', { error });
      this.client = null; // Ensure client is null on initialization failure
    }
  }
}

/**
 * Gets the singleton instance of the WhatsAppAdapter.
 * @returns The WhatsAppAdapter instance.
 */
public static getInstance(): WhatsAppAdapter {
  if (!WhatsAppAdapter.instance) {
    WhatsAppAdapter.instance = new WhatsAppAdapter();
  }
  return WhatsAppAdapter.instance;
}

/**
 * Returns the channel type handled by this adapter.
 * @returns The notification channel type ('whatsapp').
 */
public getChannelType(): NotificationChannel {
  return 'whatsapp';
}

/**
 * Checks if this adapter is capable of sending a notification to the given recipient.
 * Requires a valid phone number, an initialized Twilio client, and a configured 'from' number.
 * @param recipient Information about the recipient.
 * @returns True if the adapter can send, false otherwise.
 */
public canSendTo(recipient: RecipientInfo): boolean {
  const hasValidPhone = !!recipient.phone && recipient.phone.length > 8; // Basic validation
  const isClientReady = this.client !== null;
  const hasFromNumber = this.fromNumber !== '';
  const canSend = hasValidPhone && isClientReady && hasFromNumber;

  if (!canSend) {
      let reason = 'Unknown';
      if (!hasValidPhone) reason = 'Invalid or missing phone number';
      else if (!isClientReady) reason = 'Twilio client not initialized';
      else if (!hasFromNumber) reason = 'Twilio "from" number not configured';
      logger.warn('Cannot send WhatsApp message due to configuration or recipient data', {
          reason: reason,
          recipientPhone: recipient.phone // Log phone for debugging
      });
  }
  return canSend;
}

/**
 * Formats a phone number into E.164 standard without the leading '+'.
 * Required for Twilio's `to` parameter when prefixed with `whatsapp:`.
 * Handles Israeli numbers starting with '0'.
 * Example: 0501234567 -> 972501234567
 * @param phone The phone number string to format.
 * @returns The formatted phone number string.
 */
private formatPhoneNumber(phone: string): string {
  // Remove all non-digit characters
  let cleaned = phone.replace(/\D/g, '');
  // Prepend country code for Israeli numbers if '0' prefix exists
  if (cleaned.startsWith('0')) {
    cleaned = '972' + cleaned.substring(1);
  }
  // Remove leading '+' if present (it's added later in the `whatsapp:` prefix)
  if (cleaned.startsWith('+')) {
    cleaned = cleaned.substring(1);
  }
  return cleaned;
}

/**
 * Sends a notification via WhatsApp using the Twilio API.
 * Prefers using template messages if configured via `_adapterSpecificData`.
 * Falls back to raw text messages otherwise (less reliable for business-initiated messages).
 * @param recipient Information about the recipient.
 * @param content The notification content, potentially including adapter-specific data.
 * @returns A promise that resolves to true if the message was successfully queued by Twilio, false otherwise.
 */
public async send(recipient: RecipientInfo, content: NotificationContent): Promise<boolean> {
  logger.info('Attempting to send WhatsApp message', {
    recipientPhone: recipient.phone,
    fromNumber: this.fromNumber,
    hasClient: !!this.client,
    contentSid: content._adapterSpecificData?.contentSid,
    hasContentVariables: !!content._adapterSpecificData?.contentVariables,
  });

  // --- Pre-send Checks ---
  if (!this.client) {
    logger.error('Twilio client not initialized. Cannot send WhatsApp message.');
    return false;
  }
  if (!recipient.phone) {
    logger.error('Recipient phone number is missing. Cannot send WhatsApp message.');
    return false;
  }
  if (!this.fromNumber) {
      logger.error('Twilio "from" WhatsApp number is not configured. Cannot send message.');
      return false;
  }
  // --- End Pre-send Checks ---


  try {
    // --- Format Numbers ---
    const toNumberE164 = this.formatPhoneNumber(recipient.phone);
    // Ensure 'from' number has '+' prefix for the whatsapp: schema
    const fromWhatsAppFormatted = `whatsapp:${this.fromNumber.startsWith('+') ? this.fromNumber : '+' + this.fromNumber}`;
    // Ensure 'to' number has '+' prefix for the whatsapp: schema
    const toWhatsAppFormatted = `whatsapp:+${toNumberE164}`;

    logger.info(`Formatted numbers for sending via Twilio`, { from: fromWhatsAppFormatted, to: toWhatsAppFormatted });
    // --- End Format Numbers ---


    // --- Prepare Message Payload ---
    let messagePayload: MessageListInstanceCreateOptions;
    const adapterData = content._adapterSpecificData;

    if (adapterData?.contentSid && adapterData?.contentVariables) {
       // **Use Template Messaging**
       logger.info(`Preparing WhatsApp template message`, { contentSid: adapterData.contentSid });
       messagePayload = {
          from: fromWhatsAppFormatted,
          to: toWhatsAppFormatted,
          contentSid: adapterData.contentSid, // The approved template SID
          contentVariables: adapterData.contentVariables, // JSON string of variables {"1": "value1", "2": "value2"}
          // Optional: Specify Messaging Service SID if using one
          // messagingServiceSid: process.env.TWILIO_MESSAGING_SERVICE_SID
       };
    } else {
       // **Use Raw Text Messaging (Fallback)**
       // Note: This might fail if outside the 24-hour customer service window
       // or if WhatsApp/Twilio policies require templates for this type of message.
       const bodyText = content.body || content.subject || 'הודעה ממערכת השידוכים'; // Determine fallback content
       logger.warn(`Preparing raw text WhatsApp message (using fallback, might fail)`, { bodyLength: bodyText.length });
       messagePayload = {
          from: fromWhatsAppFormatted,
          to: toWhatsAppFormatted,
          body: bodyText, // The actual text message content
          // Optional: Specify Messaging Service SID if using one
          // messagingServiceSid: process.env.TWILIO_MESSAGING_SERVICE_SID
       };
    }
    // --- End Prepare Message Payload ---


    // --- Send Message via Twilio API ---
    logger.info("Sending message payload to Twilio API", { payload: messagePayload }); // Be cautious logging full payload in production if sensitive
    const message = await this.client.messages.create(messagePayload);
    // --- End Send Message ---


    // --- Log Success ---
    // The message status here is typically 'queued' or 'sending'. Delivery confirmation is asynchronous.
    logger.info('WhatsApp message request processed successfully by Twilio', {
      messageSid: message.sid,
      status: message.status,
      to: toWhatsAppFormatted,
      from: fromWhatsAppFormatted,
      price: message.price, // Log cost if available
      priceUnit: message.priceUnit,
      errorCode: message.errorCode, // Log if Twilio detected an error immediately
      errorMessage: message.errorMessage,
    });
    // We return true because Twilio accepted the request. Delivery is not guaranteed at this point.
    return true;
    // --- End Log Success ---

  } catch (error: unknown) { // Catch error as unknown
    // --- Handle Errors ---
    let errorMessage = 'Unknown error occurred while sending WhatsApp message.';
    let errorCode: number | string | undefined;

    // Use the type guard to safely access potential error properties
    if (isPotentialTwilioError(error)) {
        errorCode = error.code;
        errorMessage = error.message || errorMessage;
    } else if (error instanceof Error) {
        // Standard JavaScript Error
        errorMessage = error.message;
    } else if (typeof error === 'string') {
        // Simple string error
        errorMessage = error;
    }

    // Log detailed error information
    logger.error('Failed to send WhatsApp message via Twilio', {
      errorCode,
      errorMessage,
      recipient: `whatsapp:+${this.formatPhoneNumber(recipient.phone)}`, // Log formatted number for debugging
      from: `whatsapp:${this.fromNumber.startsWith('+') ? this.fromNumber : '+' + this.fromNumber}`,
      // Pass the original error object for full details in structured logs
      errorDetails: error
    });

    // Specific handling/logging for common, informative errors
    if (errorCode === 63018 || errorCode === 21614) { // Common codes for non-WhatsApp/incapable numbers
         logger.error(`Recipient number appears invalid or not registered on WhatsApp.`, { phone: recipient.phone, errorCode });
         // Consider adding logic here: maybe mark the user's number as invalid? Notify admin?
    } else if (errorCode === 63016) { // Common code for failing outside the 24-hour window without a template
          logger.warn(`Failed to send non-template message outside 24-hour window.`, { phone: recipient.phone, errorCode });
    }

    return false; // Indicate that sending failed
    // --- End Handle Errors ---
  }
}
}

// Export the singleton instance for use in other parts of the application
export const whatsAppAdapter = WhatsAppAdapter.getInstance();
--- End of Content for WhatsAppAdapter.ts ---

================================================================================
Directory: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\app\components\matchmaker\suggestions\services\suggestions
================================================================================

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\app\components\matchmaker\suggestions\services\suggestions\StatusTransitionService.ts
--------------------------------------------------------------------------------
Content:
// src/app/components/matchmaker/suggestions/services/suggestions/StatusTransitionService.ts

import { MatchSuggestionStatus, User, MatchSuggestion, Profile } from "@prisma/client";
import prisma from "@/lib/prisma";
import { notificationService } from "../notification/NotificationService";


type UserWithProfile = User & {
  profile: Profile | null;
};

export type SuggestionWithParties = MatchSuggestion & {
  firstParty: UserWithProfile;
  secondParty: UserWithProfile;
  matchmaker: User;
};

type TransitionOptions = {
  sendNotifications?: boolean;
  customMessage?: string;
  notifyParties?: ('first' | 'second' | 'matchmaker')[];
};

export class StatusTransitionService {
  private static instance: StatusTransitionService;
  private constructor() {}

  public static getInstance(): StatusTransitionService {
    if (!StatusTransitionService.instance) {
      StatusTransitionService.instance = new StatusTransitionService();
    }
    return StatusTransitionService.instance;
  }

  async transitionStatus(
    suggestion: SuggestionWithParties,
    newStatus: MatchSuggestionStatus,
    notes?: string,
    options: TransitionOptions = {}
  ): Promise<SuggestionWithParties> {
    const previousStatus = suggestion.status;
    const mergedOptions = {
      sendNotifications: true,
      notifyParties: ['first', 'second', 'matchmaker'],
      ...options
    };

    // Validate the transition
    this.validateStatusTransition(previousStatus, newStatus);

    // Perform the status transition in a transaction
    const updatedSuggestion = await prisma.$transaction(async (tx) => {
      // Update the suggestion status
      const updated = await tx.matchSuggestion.update({
        where: { id: suggestion.id },
        data: {
          status: newStatus,
          previousStatus,
          lastStatusChange: new Date(),
          lastActivity: new Date(),
          
          // Update timing fields based on status
          ...(newStatus === MatchSuggestionStatus.FIRST_PARTY_APPROVED && {
            firstPartyResponded: new Date(),
          }),
          ...(newStatus === MatchSuggestionStatus.PENDING_SECOND_PARTY && {
            secondPartySent: new Date(),
          }),
          ...(newStatus === MatchSuggestionStatus.SECOND_PARTY_APPROVED && {
            secondPartyResponded: new Date(),
          }),
          ...(newStatus === MatchSuggestionStatus.CONTACT_DETAILS_SHARED && {
            closedAt: new Date(),
          }),
          ...(newStatus === MatchSuggestionStatus.MEETING_SCHEDULED && {
            firstMeetingScheduled: new Date(),
          }),
        },
        include: {
          firstParty: {
            include: { profile: true }
          },
          secondParty: {
            include: { profile: true }
          },
          matchmaker: true,
        },
      });

      // Create status history record
      await tx.suggestionStatusHistory.create({
        data: {
          suggestionId: suggestion.id,
          status: newStatus,
          notes: notes || `Status changed from ${previousStatus} to ${newStatus}`,
        },
      });

      return updated;
    });

    // Only send notifications if option is enabled
    if (mergedOptions.sendNotifications) {
      try {
        // Utilize the notification service for all channels (email, WhatsApp, etc.)
        await notificationService.handleSuggestionStatusChange(
          
          updatedSuggestion, 
          {
            channels: ['email', 'whatsapp'],
            notifyParties: mergedOptions.notifyParties as ('first' | 'second' | 'matchmaker')[],
            customMessage: mergedOptions.customMessage
          }
        );
        
        console.log(`Notifications sent for suggestion ${updatedSuggestion.id} status change to ${newStatus}`);
      } catch (error) {
        // Log error but don't fail the transition
        console.error('Error sending status transition notifications:', error);
      }
    }

    return updatedSuggestion;
  }

  private validateStatusTransition(
    currentStatus: MatchSuggestionStatus, 
    newStatus: MatchSuggestionStatus
  ): void {
    const validTransitions: Record<MatchSuggestionStatus, MatchSuggestionStatus[]> = {
      DRAFT: [MatchSuggestionStatus.PENDING_FIRST_PARTY],
      PENDING_FIRST_PARTY: [
        MatchSuggestionStatus.FIRST_PARTY_APPROVED,
        MatchSuggestionStatus.FIRST_PARTY_DECLINED,
        MatchSuggestionStatus.CANCELLED
      ],
      FIRST_PARTY_APPROVED: [
        MatchSuggestionStatus.PENDING_SECOND_PARTY,
        MatchSuggestionStatus.CANCELLED
      ],
      FIRST_PARTY_DECLINED: [
        MatchSuggestionStatus.CLOSED
      ],
      PENDING_SECOND_PARTY: [
        MatchSuggestionStatus.SECOND_PARTY_APPROVED,
        MatchSuggestionStatus.SECOND_PARTY_DECLINED,
        MatchSuggestionStatus.CANCELLED
      ],
      SECOND_PARTY_APPROVED: [
        MatchSuggestionStatus.CONTACT_DETAILS_SHARED,
        MatchSuggestionStatus.CANCELLED
      ],
      SECOND_PARTY_DECLINED: [
        MatchSuggestionStatus.CLOSED
      ],
      AWAITING_MATCHMAKER_APPROVAL: [
        MatchSuggestionStatus.CONTACT_DETAILS_SHARED,
        MatchSuggestionStatus.CANCELLED
      ],
      CONTACT_DETAILS_SHARED: [
        MatchSuggestionStatus.AWAITING_FIRST_DATE_FEEDBACK,
        MatchSuggestionStatus.CANCELLED
      ],
      AWAITING_FIRST_DATE_FEEDBACK: [
        MatchSuggestionStatus.THINKING_AFTER_DATE,
        MatchSuggestionStatus.ENDED_AFTER_FIRST_DATE,
        MatchSuggestionStatus.CANCELLED
      ],
      THINKING_AFTER_DATE: [
        MatchSuggestionStatus.PROCEEDING_TO_SECOND_DATE,
        MatchSuggestionStatus.ENDED_AFTER_FIRST_DATE,
        MatchSuggestionStatus.CANCELLED
      ],
      PROCEEDING_TO_SECOND_DATE: [
        MatchSuggestionStatus.DATING,
        MatchSuggestionStatus.CANCELLED
      ],
      ENDED_AFTER_FIRST_DATE: [
        MatchSuggestionStatus.CLOSED
      ],
      MEETING_PENDING: [
        MatchSuggestionStatus.MEETING_SCHEDULED,
        MatchSuggestionStatus.CANCELLED
      ],
      MEETING_SCHEDULED: [
        MatchSuggestionStatus.DATING,
        MatchSuggestionStatus.CANCELLED
      ],
      MATCH_APPROVED: [
        MatchSuggestionStatus.DATING,
        MatchSuggestionStatus.CANCELLED
      ],
      MATCH_DECLINED: [
        MatchSuggestionStatus.CLOSED
      ],
      DATING: [
        MatchSuggestionStatus.ENGAGED,
        MatchSuggestionStatus.CLOSED,
        MatchSuggestionStatus.CANCELLED
      ],
      ENGAGED: [
        MatchSuggestionStatus.MARRIED,
        MatchSuggestionStatus.CANCELLED
      ],
      MARRIED: [],
      EXPIRED: [],
      CLOSED: [],
      CANCELLED: []
    };

    if (!validTransitions[currentStatus]?.includes(newStatus)) {
      throw new Error(
        `Invalid status transition from ${currentStatus} to ${newStatus}. ` +
        `Valid transitions are: ${validTransitions[currentStatus]?.join(', ') || 'none'}`
      );
    }
  }
  
  getStatusLabel(status: MatchSuggestionStatus): string {
    const statusLabels: Record<MatchSuggestionStatus, string> = {
      DRAFT: "טיוטה",
      PENDING_FIRST_PARTY: "ממתין לתשובת הצד הראשון",
      FIRST_PARTY_APPROVED: "הצד הראשון אישר",
      FIRST_PARTY_DECLINED: "הצד הראשון דחה",
      PENDING_SECOND_PARTY: "ממתין לתשובת הצד השני",
      SECOND_PARTY_APPROVED: "הצד השני אישר",
      SECOND_PARTY_DECLINED: "הצד השני דחה",
      AWAITING_MATCHMAKER_APPROVAL: "ממתין לאישור השדכן",
      CONTACT_DETAILS_SHARED: "פרטי קשר שותפו",
      AWAITING_FIRST_DATE_FEEDBACK: "ממתין למשוב פגישה ראשונה",
      THINKING_AFTER_DATE: "בחשיבה לאחר הפגישה",
      PROCEEDING_TO_SECOND_DATE: "התקדמות לפגישה שנייה",
      ENDED_AFTER_FIRST_DATE: "הסתיים לאחר פגישה ראשונה",
      MEETING_PENDING: "פגישה בהמתנה",
      MEETING_SCHEDULED: "פגישה קבועה",
      MATCH_APPROVED: "השידוך אושר",
      MATCH_DECLINED: "השידוך נדחה",
      DATING: "בתהליך היכרות",
      ENGAGED: "אירוסין",
      MARRIED: "נישואין",
      CANCELLED: "בוטל",
      CLOSED: "נסגר",
      EXPIRED: "פג תוקף"
    };
    
    return statusLabels[status] || status;
  }
  
  // Get available actions for current status based on user role
  getAvailableActions(
    suggestion: SuggestionWithParties, 
    userId: string
  ): { id: string; label: string; nextStatus: MatchSuggestionStatus }[] {
    const isFirstParty = suggestion.firstPartyId === userId;
    const isSecondParty = suggestion.secondPartyId === userId;
    const isMatchmaker = suggestion.matchmakerId === userId;
    
    const actions: Record<MatchSuggestionStatus, { 
      firstParty?: { id: string; label: string; nextStatus: MatchSuggestionStatus }[];
      secondParty?: { id: string; label: string; nextStatus: MatchSuggestionStatus }[];
      matchmaker?: { id: string; label: string; nextStatus: MatchSuggestionStatus }[];
    }> = {
      DRAFT: {
        matchmaker: [
          { id: "send-to-first", label: "שליחה לצד הראשון", nextStatus: MatchSuggestionStatus.PENDING_FIRST_PARTY }
        ]
      },
      PENDING_FIRST_PARTY: {
        firstParty: [
          { id: "approve", label: "אישור ההצעה", nextStatus: MatchSuggestionStatus.FIRST_PARTY_APPROVED },
          { id: "decline", label: "דחיית ההצעה", nextStatus: MatchSuggestionStatus.FIRST_PARTY_DECLINED }
        ],
        matchmaker: [
          { id: "cancel", label: "ביטול ההצעה", nextStatus: MatchSuggestionStatus.CANCELLED }
        ]
      },
      FIRST_PARTY_APPROVED: {
        matchmaker: [
          { id: "send-to-second", label: "שליחה לצד השני", nextStatus: MatchSuggestionStatus.PENDING_SECOND_PARTY },
          { id: "cancel", label: "ביטול ההצעה", nextStatus: MatchSuggestionStatus.CANCELLED }
        ]
      },
      FIRST_PARTY_DECLINED: {
        matchmaker: [
          { id: "close", label: "סגירת הצעה", nextStatus: MatchSuggestionStatus.CLOSED }
        ]
      },
      PENDING_SECOND_PARTY: {
        secondParty: [
          { id: "approve", label: "אישור ההצעה", nextStatus: MatchSuggestionStatus.SECOND_PARTY_APPROVED },
          { id: "decline", label: "דחיית ההצעה", nextStatus: MatchSuggestionStatus.SECOND_PARTY_DECLINED }
        ],
        matchmaker: [
          { id: "cancel", label: "ביטול ההצעה", nextStatus: MatchSuggestionStatus.CANCELLED }
        ]
      },
      SECOND_PARTY_APPROVED: {
        matchmaker: [
          { id: "share-contacts", label: "שיתוף פרטי קשר", nextStatus: MatchSuggestionStatus.CONTACT_DETAILS_SHARED },
          { id: "cancel", label: "ביטול ההצעה", nextStatus: MatchSuggestionStatus.CANCELLED }
        ]
      },
      SECOND_PARTY_DECLINED: {
        matchmaker: [
          { id: "close", label: "סגירת הצעה", nextStatus: MatchSuggestionStatus.CLOSED }
        ]
      },
      AWAITING_MATCHMAKER_APPROVAL: {
        matchmaker: [
          { id: "approve-share", label: "אישור שיתוף פרטים", nextStatus: MatchSuggestionStatus.CONTACT_DETAILS_SHARED },
          { id: "cancel", label: "ביטול ההצעה", nextStatus: MatchSuggestionStatus.CANCELLED }
        ]
      },
      CONTACT_DETAILS_SHARED: {
        firstParty: [
          { id: "provide-feedback", label: "דיווח משוב לאחר פגישה", nextStatus: MatchSuggestionStatus.AWAITING_FIRST_DATE_FEEDBACK }
        ],
        secondParty: [
          { id: "provide-feedback", label: "דיווח משוב לאחר פגישה", nextStatus: MatchSuggestionStatus.AWAITING_FIRST_DATE_FEEDBACK }
        ],
        matchmaker: [
          { id: "request-feedback", label: "בקש משוב", nextStatus: MatchSuggestionStatus.AWAITING_FIRST_DATE_FEEDBACK },
          { id: "cancel", label: "ביטול ההצעה", nextStatus: MatchSuggestionStatus.CANCELLED }
        ]
      },
      AWAITING_FIRST_DATE_FEEDBACK: {
         matchmaker: [
            { id: "mark-thinking", label: "סמן כ'בחשיבה'", nextStatus: MatchSuggestionStatus.THINKING_AFTER_DATE },
            { id: "mark-ended-first", label: "סמן כ'הסתיים לאחר פגישה'", nextStatus: MatchSuggestionStatus.ENDED_AFTER_FIRST_DATE },
            { id: "cancel", label: "ביטול ההצעה", nextStatus: MatchSuggestionStatus.CANCELLED }
         ]
      },
      THINKING_AFTER_DATE: {
         matchmaker: [
            { id: "proceed-second", label: "המשך לפגישה שניה", nextStatus: MatchSuggestionStatus.PROCEEDING_TO_SECOND_DATE },
            { id: "mark-ended-first", label: "סמן כ'הסתיים לאחר פגישה'", nextStatus: MatchSuggestionStatus.ENDED_AFTER_FIRST_DATE },
            { id: "cancel", label: "ביטול ההצעה", nextStatus: MatchSuggestionStatus.CANCELLED }
         ]
      },
      PROCEEDING_TO_SECOND_DATE: {
         matchmaker: [
            { id: "mark-dating", label: "סמן כ'בתהליך היכרות'", nextStatus: MatchSuggestionStatus.DATING },
            { id: "cancel", label: "ביטול ההצעה", nextStatus: MatchSuggestionStatus.CANCELLED }
         ]
      },
      ENDED_AFTER_FIRST_DATE: {
        matchmaker: [
          { id: "close", label: "סגירת הצעה", nextStatus: MatchSuggestionStatus.CLOSED }
        ]
      },
      MEETING_PENDING: {
         matchmaker: [
            { id: "schedule-meeting", label: "קביעת פגישה", nextStatus: MatchSuggestionStatus.MEETING_SCHEDULED },
            { id: "cancel", label: "ביטול ההצעה", nextStatus: MatchSuggestionStatus.CANCELLED }
         ]
      },
      MEETING_SCHEDULED: {
         matchmaker: [
            { id: "mark-dating", label: "סמן כ'בתהליך היכרות'", nextStatus: MatchSuggestionStatus.DATING },
            { id: "cancel", label: "ביטול ההצעה", nextStatus: MatchSuggestionStatus.CANCELLED }
         ]
      },
      MATCH_APPROVED: {
         matchmaker: [
            { id: "mark-dating", label: "סמן כ'בתהליך היכרות'", nextStatus: MatchSuggestionStatus.DATING },
            { id: "cancel", label: "ביטול ההצעה", nextStatus: MatchSuggestionStatus.CANCELLED }
         ]
      },
      MATCH_DECLINED: {
        matchmaker: [
          { id: "close", label: "סגירת הצעה", nextStatus: MatchSuggestionStatus.CLOSED }
        ]
      },
      DATING: {
        matchmaker: [
          { id: "mark-engaged", label: "עדכון אירוסין", nextStatus: MatchSuggestionStatus.ENGAGED },
          { id: "close", label: "סגירת תהליך", nextStatus: MatchSuggestionStatus.CLOSED },
          { id: "cancel", label: "ביטול השידוך", nextStatus: MatchSuggestionStatus.CANCELLED }
        ]
      },
      ENGAGED: {
        matchmaker: [
          { id: "mark-married", label: "עדכון נישואין", nextStatus: MatchSuggestionStatus.MARRIED },
          { id: "cancel", label: "ביטול אירוסין", nextStatus: MatchSuggestionStatus.CANCELLED }
        ]
      },
      MARRIED: {},
      EXPIRED: {},
      CLOSED: {},
      CANCELLED: {}
    };
    
    if (isFirstParty && actions[suggestion.status]?.firstParty) {
      return actions[suggestion.status].firstParty || [];
    }
    
    if (isSecondParty && actions[suggestion.status]?.secondParty) {
      return actions[suggestion.status].secondParty || [];
    }
    
    if (isMatchmaker && actions[suggestion.status]?.matchmaker) {
      return actions[suggestion.status].matchmaker || [];
    }
    
    return [];
  }
}

// Export singleton instance
export const statusTransitionService = StatusTransitionService.getInstance();
--- End of Content for StatusTransitionService.ts ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\app\components\matchmaker\suggestions\services\suggestions\SuggestionService.ts
--------------------------------------------------------------------------------
Content:
// src/app/components/matchmaker/suggestions/services/suggestions/SuggestionService.ts

import { MatchSuggestionStatus, Priority, UserRole } from "@prisma/client";
import prisma from "@/lib/prisma";
import { statusTransitionService, type SuggestionWithParties } from "./StatusTransitionService";
import { initNotificationService } from "../notification/initNotifications";
import type { 
  CreateSuggestionData,
  UpdateSuggestionData,
} from "@/types/suggestions";

// Initialize notification service
const notificationService = initNotificationService();
const BLOCKING_SUGGESTION_STATUSES: MatchSuggestionStatus[] = [
  'FIRST_PARTY_APPROVED',
  'SECOND_PARTY_APPROVED',
  'AWAITING_MATCHMAKER_APPROVAL',
  'CONTACT_DETAILS_SHARED',
  'AWAITING_FIRST_DATE_FEEDBACK',
  'THINKING_AFTER_DATE',
  'PROCEEDING_TO_SECOND_DATE',
  'MEETING_PENDING',
  'MEETING_SCHEDULED',
  'MATCH_APPROVED',
  'DATING',
];
export class SuggestionService {
  private static instance: SuggestionService;

  private constructor() {}

  public static getInstance(): SuggestionService {
    if (!SuggestionService.instance) {
      SuggestionService.instance = new SuggestionService();
    }
    return SuggestionService.instance;
  }

  /**
   * יצירת הצעת שידוך חדשה
   */
  public async createSuggestion(data: CreateSuggestionData): Promise<SuggestionWithParties> {
    // 1. וידוא הרשאות השדכן
    const matchmaker = await prisma.user.findUnique({
      where: { id: data.matchmakerId },
    });

    // קוד חדש ומתוקן
const allowedRoles: UserRole[] = [UserRole.MATCHMAKER, UserRole.ADMIN];
if (!matchmaker || !allowedRoles.includes(matchmaker.role)) {
  throw new Error("Unauthorized - User must be a Matchmaker or Admin");
}
  // --- START: NEW VALIDATION LOGIC ---
    // Fetch both parties to get their names for error messages
    const [firstParty, secondParty] = await Promise.all([
        prisma.user.findUnique({ where: { id: data.firstPartyId } }),
        prisma.user.findUnique({ where: { id: data.secondPartyId } })
    ]);

    if (!firstParty || !secondParty) {
        throw new Error("One or both candidates not found.");
    }
    
    // Check for BLOCKING suggestions for either party
    const blockingSuggestion = await prisma.matchSuggestion.findFirst({
        where: {
            OR: [
                { firstPartyId: data.firstPartyId },
                { secondPartyId: data.firstPartyId },
                { firstPartyId: data.secondPartyId },
                { secondPartyId: data.secondPartyId },
            ],
            status: {
                in: BLOCKING_SUGGESTION_STATUSES,
            },
        },
    });

    if (blockingSuggestion) {
        const hasBlockingSuggestion = (id: string) => 
            blockingSuggestion.firstPartyId === id || blockingSuggestion.secondPartyId === id;
            
        if (hasBlockingSuggestion(data.firstPartyId)) {
            throw new Error(`לא ניתן ליצור הצעה חדשה. ל${firstParty.firstName} ${firstParty.lastName} יש כבר הצעה פעילה.`);
        }
        if (hasBlockingSuggestion(data.secondPartyId)) {
            throw new Error(`לא ניתן ליצור הצעה חדשה. ל${secondParty.firstName} ${secondParty.lastName} יש כבר הצעה פעילה.`);
        }
    }

    // 4. יצירת ההצעה בטרנזקציה
    const suggestion = await prisma.$transaction(async (tx) => {
      // יצירת ההצעה עם הנתונים המנוקים
      console.log('Decision deadline value:', data.decisionDeadline);
      console.log('Decision deadline type:', typeof data.decisionDeadline);
      
      const cleanedData = {
        matchmakerId: data.matchmakerId,
        firstPartyId: data.firstPartyId,
        secondPartyId: data.secondPartyId,
        status: MatchSuggestionStatus.PENDING_FIRST_PARTY,
        priority: data.priority || Priority.MEDIUM,
        matchingReason: data.notes?.matchingReason || null,
        firstPartyNotes: data.notes?.forFirstParty || null,
        secondPartyNotes: data.notes?.forSecondParty || null,
        internalNotes: data.notes?.internal || null,
        followUpNotes: data.notes?.followUpNotes || null,
        decisionDeadline: new Date(data.decisionDeadline),
        firstPartySent: new Date(),
        lastActivity: new Date(),
        lastStatusChange: new Date()
      };

      const newSuggestion = await tx.matchSuggestion.create({
        data: cleanedData,
        include: {
          firstParty: {
            include: { profile: true }
          },
          secondParty: {
            include: { profile: true }
          },
          matchmaker: true,
        },
      });

      // יצירת רשומת היסטוריה ראשונית
      await tx.suggestionStatusHistory.create({
        data: {
          suggestionId: newSuggestion.id,
          status: newSuggestion.status,
          notes: "Initial suggestion created and sent to first party",
        },
      });

      return newSuggestion;
    });

    // 5. שליחת התראות באמצעות מערכת ההתראות המאוחדת
    try {
      console.log('Sending notifications for new suggestion...');
      await notificationService.handleSuggestionStatusChange(
        suggestion,
        {
          channels: ['email', 'whatsapp'],
          notifyParties: ['first'] // רק לצד הראשון בשלב זה
        }
      );
    } catch (error) {
      console.error('Error sending initial suggestion notifications:', error);
      // לא לעצור את התהליך - רק לדווח על השגיאה
    }

    return suggestion;
  }

  /**
   * עדכון פרטי הצעת שידוך
   */
  public async updateSuggestion(
    id: string,
    matchmakerId: string,
    data: UpdateSuggestionData
  ): Promise<SuggestionWithParties> {
    // 1. בדיקת קיום ההצעה והרשאות
    const suggestion = await prisma.matchSuggestion.findUnique({
      where: { id },
      include: {
        firstParty: {
          include: { profile: true }
        },
        secondParty: {
          include: { profile: true }
        },
        matchmaker: true,
      },
    });

    if (!suggestion) {
      throw new Error("Suggestion not found");
    }

    if (suggestion.matchmakerId !== matchmakerId) {
      throw new Error("Unauthorized - Only the original matchmaker can update the suggestion");
    }

    // 2. ניקוי והכנת נתוני העדכון
    const cleanedUpdateData = {
      ...(data.notes?.matchingReason !== undefined && { 
        matchingReason: data.notes.matchingReason 
      }),
      ...(data.notes?.forFirstParty !== undefined && { 
        firstPartyNotes: data.notes.forFirstParty 
      }),
      ...(data.notes?.forSecondParty !== undefined && { 
        secondPartyNotes: data.notes.forSecondParty 
      }),
      ...(data.notes?.internal !== undefined && { 
        internalNotes: data.notes.internal 
      }),
      ...(data.notes?.followUpNotes !== undefined && { 
        followUpNotes: data.notes.followUpNotes 
      }),
      ...(data.priority && { priority: data.priority }),
      ...(data.responseDeadline && { 
        responseDeadline: new Date(data.responseDeadline) 
      }),
      ...(data.decisionDeadline && { 
        decisionDeadline: new Date(data.decisionDeadline) 
      }),
      lastActivity: new Date()
    };

    // 3. עדכון הנתונים
    return await prisma.matchSuggestion.update({
      where: { id },
      data: cleanedUpdateData,
      include: {
        firstParty: {
          include: { profile: true }
        },
        secondParty: {
          include: { profile: true }
        },
        matchmaker: true,
      },
    });
  }

  /**
   * עדכון סטטוס של הצעת שידוך
   */
  public async updateSuggestionStatus(
    id: string,
    newStatus: MatchSuggestionStatus,
    userId: string,
    notes?: string
  ): Promise<SuggestionWithParties> {
    const suggestion = await prisma.matchSuggestion.findUnique({
      where: { id },
      include: {
        firstParty: {
          include: { profile: true }
        },
        secondParty: {
          include: { profile: true }
        },
        matchmaker: true,
      },
    });

    if (!suggestion) {
      throw new Error("Suggestion not found");
    }

    this.validateStatusChangePermission(suggestion, userId, newStatus);
    return await statusTransitionService.transitionStatus(suggestion, newStatus, notes);
  }

  /**
   * קבלת פרטי הצעת שידוך
   */
  public async getSuggestionDetails(id: string, userId: string): Promise<SuggestionWithParties> {
    const suggestion = await prisma.matchSuggestion.findUnique({
      where: { id },
      include: {
        firstParty: {
          include: { profile: true }
        },
        secondParty: {
          include: { profile: true }
        },
        matchmaker: true,
        statusHistory: {
          orderBy: { createdAt: "desc" },
        },
        meetings: {
          include: {
            feedback: true
          }
        },
      },
    });

    if (!suggestion) {
      throw new Error("Suggestion not found");
    }

    if (
      userId !== suggestion.matchmakerId &&
      userId !== suggestion.firstPartyId &&
      userId !== suggestion.secondPartyId
    ) {
      throw new Error("Unauthorized to view this suggestion");
    }

    return suggestion;
  }

  /**
   * קבלת רשימת הצעות שידוך של משתמש
   */
  public async getUserSuggestions(userId: string): Promise<SuggestionWithParties[]> {
    return await prisma.matchSuggestion.findMany({
      where: {
        OR: [
          { matchmakerId: userId },
          { firstPartyId: userId },
          { secondPartyId: userId },
        ],
      },
      include: {
        firstParty: {
          include: { profile: true }
        },
        secondParty: {
          include: { profile: true }
        },
        matchmaker: true,
        statusHistory: {
          orderBy: { createdAt: "desc" },
        },
        meetings: {
          include: {
            feedback: true
          }
        },
      },
      orderBy: {
        lastActivity: "desc",
      },
    });
  }

  /**
   * אימות הרשאות לשינוי סטטוס
   */
  private validateStatusChangePermission(
    suggestion: SuggestionWithParties,
    userId: string,
    newStatus: MatchSuggestionStatus
  ): void {
    const isMatchmaker = userId === suggestion.matchmakerId;
    const isFirstParty = userId === suggestion.firstPartyId;

    switch (newStatus) {
      case MatchSuggestionStatus.FIRST_PARTY_APPROVED:
      case MatchSuggestionStatus.FIRST_PARTY_DECLINED:
        if (!isFirstParty) throw new Error("Only first party can approve/decline at this stage");
        break;

      default:
        if (!isMatchmaker) throw new Error("Only matchmaker can change status at this stage");
    }
  }

  /**
   * בדיקת קיום הצעה פעילה בין שני מועמדים
   */
  private async checkExistingSuggestion(
    firstPartyId: string,
    secondPartyId: string
  ): Promise<SuggestionWithParties | null> {
    return await prisma.matchSuggestion.findFirst({
      where: {
        AND: [
          {
            OR: [
              { firstPartyId, secondPartyId },
              { firstPartyId: secondPartyId, secondPartyId: firstPartyId },
            ],
          },
          {
            status: {
              notIn: [
                MatchSuggestionStatus.CLOSED,
                MatchSuggestionStatus.CANCELLED,
                MatchSuggestionStatus.EXPIRED,
                MatchSuggestionStatus.MATCH_DECLINED,
              ],
            },
          },
        ],
      },
      include: {
        firstParty: {
          include: { profile: true }
        },
        secondParty: {
          include: { profile: true }
        },
        matchmaker: true,
      },
    });
  }
}
export const suggestionService = SuggestionService.getInstance();
--- End of Content for SuggestionService.ts ---

================================================================================
Directory: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\app\components\matchmaker\suggestions\utils
================================================================================

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\app\components\matchmaker\suggestions\utils\matchingAlgorithm.ts
--------------------------------------------------------------------------------
Content:
import { AvailabilityStatus } from '@prisma/client';
import type { UserProfile } from '@/types/next-auth';

export interface MatchScore {
  score: number;
  criteria: MatchCriteria[];
  compatibility: number;
  reasons: string[];
}

export interface MatchCriteria {
  name: string;
  weight: number;
  score: number;
  reason?: string;
}

interface AgePreference {
  min: number;
  max: number;
}

const calculateAge = (birthDate: Date): number => {
  const today = new Date();
  const birth = new Date(birthDate);
  let age = today.getFullYear() - birth.getFullYear();
  const monthDiff = today.getMonth() - birth.getMonth();
  if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birth.getDate())) {
    age--;
  }
  return age;
};

const calculateAgeCompatibility = (
  profileA: UserProfile,
  profileB: UserProfile,
  preferences: { ageA?: AgePreference; ageB?: AgePreference }
): MatchCriteria => {
  const ageA = calculateAge(profileA.birthDate);
  const ageB = calculateAge(profileB.birthDate);
  const ageDiff = Math.abs(ageA - ageB);
  
  let score = 0;
  let reason = '';

  // בדיקת העדפות גיל הדדית
  const aPrefsMatch = preferences.ageA ? 
    (ageB >= preferences.ageA.min && ageB <= preferences.ageA.max) : true;
  const bPrefsMatch = preferences.ageB ?
    (ageA >= preferences.ageB.min && ageA <= preferences.ageB.max) : true;

  if (aPrefsMatch && bPrefsMatch) {
    if (ageDiff <= 2) {
      score = 1;
      reason = 'הפרש גילאים אידיאלי';
    } else if (ageDiff <= 5) {
      score = 0.8;
      reason = 'הפרש גילאים טוב';
    } else if (ageDiff <= 8) {
      score = 0.6;
      reason = 'הפרש גילאים סביר';
    } else {
      score = 0.4;
      reason = 'הפרש גילאים גדול';
    }
  } else {
    score = 0.2;
    reason = 'לא תואם להעדפות הגיל';
  }

  return {
    name: 'age',
    weight: 15,
    score,
    reason
  };
};

const calculateLocationCompatibility = (
  profileA: UserProfile,
  profileB: UserProfile
): MatchCriteria => {
  let score = 0;
  let reason = '';

  if (!profileA.city || !profileB.city) {
    return {
      name: 'location',
      weight: 10,
      score: 0.5,
      reason: 'חסר מידע על מיקום'
    };
  }

  const sameCity = profileA.city === profileB.city;
  const preferredLocationsA = profileA.preferredLocations || [];
  const preferredLocationsB = profileB.preferredLocations || [];

  if (sameCity) {
    score = 1;
    reason = 'גרים באותה עיר';
  } else if (
    preferredLocationsA.includes(profileB.city) &&
    preferredLocationsB.includes(profileA.city)
  ) {
    score = 0.8;
    reason = 'מיקום מועדף הדדי';
  } else if (
    preferredLocationsA.includes(profileB.city) ||
    preferredLocationsB.includes(profileA.city)
  ) {
    score = 0.6;
    reason = 'מיקום מועדף חד צדדי';
  } else {
    score = 0.4;
    reason = 'ערים שונות';
  }

  return {
    name: 'location',
    weight: 10,
    score,
    reason
  };
};

const calculateReligiousCompatibility = (
  profileA: UserProfile,
  profileB: UserProfile
): MatchCriteria => {
  let score = 0;
  let reason = '';

  if (!profileA.religiousLevel || !profileB.religiousLevel) {
    return {
      name: 'religious',
      weight: 20,
      score: 0.5,
      reason: 'חסר מידע על רמת דתיות'
    };
  }

  const sameLevel = profileA.religiousLevel === profileB.religiousLevel;
  const preferredLevelsA = profileA.preferredReligiousLevels || [];
  const preferredLevelsB = profileB.preferredReligiousLevels || [];

  if (sameLevel) {
    score = 1;
    reason = 'רמת דתיות זהה';
  } else if (
    preferredLevelsA.includes(profileB.religiousLevel) &&
    preferredLevelsB.includes(profileA.religiousLevel)
  ) {
    score = 0.8;
    reason = 'רמת דתיות מועדפת הדדית';
  } else if (
    preferredLevelsA.includes(profileB.religiousLevel) ||
    preferredLevelsB.includes(profileA.religiousLevel)
  ) {
    score = 0.6;
    reason = 'רמת דתיות מועדפת חד צדדית';
  } else {
    score = 0.3;
    reason = 'רמות דתיות שונות';
  }

  return {
    name: 'religious',
    weight: 20,
    score,
    reason
  };
};

export const calculateMatchScore = (
  profileA: UserProfile,
  profileB: UserProfile
): MatchScore | null => {
  // בדיקת תנאי סף
  if (
    profileA.gender === profileB.gender ||
    profileA.availabilityStatus !== AvailabilityStatus.AVAILABLE ||
    profileB.availabilityStatus !== AvailabilityStatus.AVAILABLE
  ) {
    return null;
  }

  // חישוב קריטריונים
  const ageCriteria = calculateAgeCompatibility(
    profileA,
    profileB,
    {
      ageA: profileA.preferredAgeMin && profileA.preferredAgeMax
        ? { min: profileA.preferredAgeMin, max: profileA.preferredAgeMax }
        : undefined,
      ageB: profileB.preferredAgeMin && profileB.preferredAgeMax
        ? { min: profileB.preferredAgeMin, max: profileB.preferredAgeMax }
        : undefined
    }
  );

  const locationCriteria = calculateLocationCompatibility(profileA, profileB);
  const religiousCriteria = calculateReligiousCompatibility(profileA, profileB);

  const criteria = [
    ageCriteria,
    locationCriteria,
    religiousCriteria
  ];

  // חישוב ציון סופי
  const totalWeight = criteria.reduce((sum, c) => sum + c.weight, 0);
  const weightedScore = criteria.reduce((sum, c) => sum + (c.score * c.weight), 0);
  const finalScore = (weightedScore / totalWeight) * 100;

  // סיבות להתאמה
  const reasons = criteria
    .filter(c => c.score >= 0.6)
    .map(c => c.reason)
    .filter((reason): reason is string => reason !== undefined);

  return {
    score: Math.round(finalScore),
    criteria,
    compatibility: finalScore / 100,
    reasons
  };
};

export const findBestMatches = (
  profile: UserProfile,
  profiles: UserProfile[],
  limit: number = 10
): { profile: UserProfile; score: MatchScore }[] => {
  const matches = profiles
    .filter(p => p.id !== profile.id)
    .map(p => {
      const score = calculateMatchScore(profile, p);
      return score ? { profile: p, score } : null;
    })
    .filter((match): match is { profile: UserProfile; score: MatchScore } => match !== null)
    .sort((a, b) => b.score.score - a.score.score);

  return matches.slice(0, limit);
};

const matchingAlgorithm = {
  calculateMatchScore,
  findBestMatches
};

export default matchingAlgorithm;
--- End of Content for matchingAlgorithm.ts ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\app\components\matchmaker\suggestions\utils\statisticsCalculator.ts
--------------------------------------------------------------------------------
Content:
// /utils/statisticsCalculator.ts
import type { Candidate } from '../../new/types/candidates';
import { Gender, AvailabilityStatus } from '@prisma/client';


export interface AgeDistribution {
  ageGroups: Record<string, number>;
  averageAge: number;
  medianAge: number;
}

export interface LocationDistribution {
  cities: Record<string, number>;
  topCities: Array<{ city: string; count: number }>;
}

export interface ReligiousDistribution {
  levels: Record<string, number>;
  percentages: Record<string, number>;
}

export interface ActivityStats {
  activeLastWeek: number;
  activeLastMonth: number;
  averageLoginFrequency: number;
  completedProfiles: number;
}

export interface MatchingStats {
  totalMatches: number;
  successfulMatches: number;
  averageMatchScore: number;
  matchesByStatus: Record<string, number>;
}

const calculateAge = (birthDate: Date): number => {
  const today = new Date();
  const birth = new Date(birthDate);
  let age = today.getFullYear() - birth.getFullYear();
  const monthDiff = today.getMonth() - birth.getMonth();
  if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birth.getDate())) {
    age--;
  }
  return age;
};

export const calculateAgeDistribution = (candidates: Candidate[]): AgeDistribution => {
  const ages = candidates.map(c => calculateAge(c.profile.birthDate));
  
  // חישוב קבוצות גיל
  const ageGroups = ages.reduce((acc, age) => {
    const group = `${Math.floor(age / 5) * 5}-${Math.floor(age / 5) * 5 + 4}`;
    acc[group] = (acc[group] || 0) + 1;
    return acc;
  }, {} as Record<string, number>);

  // חישוב ממוצע
  const averageAge = ages.reduce((sum, age) => sum + age, 0) / ages.length;

  // חישוב חציון
  const sortedAges = [...ages].sort((a, b) => a - b);
  const medianAge = sortedAges.length % 2 === 0
    ? (sortedAges[sortedAges.length / 2 - 1] + sortedAges[sortedAges.length / 2]) / 2
    : sortedAges[Math.floor(sortedAges.length / 2)];

  return {
    ageGroups,
    averageAge: Math.round(averageAge * 10) / 10,
    medianAge
  };
};

export const calculateLocationDistribution = (
  candidates: Candidate[],
  topCount: number = 10
): LocationDistribution => {
  // ספירת מועמדים לפי ערים
  const cities = candidates.reduce((acc, candidate) => {
    const city = candidate.profile.city || 'לא צוין';
    acc[city] = (acc[city] || 0) + 1;
    return acc;
  }, {} as Record<string, number>);

  // מיון הערים לפי כמות מועמדים
  const topCities = Object.entries(cities)
    .map(([city, count]) => ({ city, count }))
    .sort((a, b) => b.count - a.count)
    .slice(0, topCount);

  return {
    cities,
    topCities
  };
};

export const calculateReligiousDistribution = (candidates: Candidate[]): ReligiousDistribution => {
  const total = candidates.length;
  
  // ספירת מועמדים לפי רמת דתיות
  const levels = candidates.reduce((acc, candidate) => {
    const level = candidate.profile.religiousLevel || 'לא צוין';
    acc[level] = (acc[level] || 0) + 1;
    return acc;
  }, {} as Record<string, number>);

  // חישוב אחוזים
  const percentages = Object.entries(levels).reduce((acc, [level, count]) => {
    acc[level] = Math.round((count / total) * 100);
    return acc;
  }, {} as Record<string, number>);

  return {
    levels,
    percentages
  };
};

export const calculateActivityStats = (candidates: Candidate[]): ActivityStats => {
  const now = new Date();
  const weekAgo = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);
  const monthAgo = new Date(now.getTime() - 30 * 24 * 60 * 60 * 1000);

  const activeLastWeek = candidates.filter(c => 
    c.profile.lastActive && new Date(c.profile.lastActive) >= weekAgo
  ).length;

  const activeLastMonth = candidates.filter(c =>
    c.profile.lastActive && new Date(c.profile.lastActive) >= monthAgo
  ).length;

  // חישוב תדירות התחברות ממוצעת (בימים)
  const loginGaps = candidates
    .filter(c => c.profile.lastActive)
    .map(c => {
      const lastActive = new Date(c.profile.lastActive!);
      return Math.floor((now.getTime() - lastActive.getTime()) / (24 * 60 * 60 * 1000));
    });

  const averageLoginFrequency = loginGaps.length > 0
    ? loginGaps.reduce((sum, gap) => sum + gap, 0) / loginGaps.length
    : 0;

  // ספירת פרופילים מלאים
  const completedProfiles = candidates.filter(c => 
    c.profile.about &&
    c.profile.religiousLevel &&
    c.profile.city &&
    c.images.length > 0
  ).length;

  return {
    activeLastWeek,
    activeLastMonth,
    averageLoginFrequency: Math.round(averageLoginFrequency * 10) / 10,
    completedProfiles
  };
};

export const calculateGenderStats = (candidates: Candidate[]) => {
  const maleCount = candidates.filter(c => c.profile.gender === Gender.MALE).length;
  const femaleCount = candidates.filter(c => c.profile.gender === Gender.FEMALE).length;
  
  return {
    maleCount,
    femaleCount,
    ratio: maleCount / femaleCount,
    total: candidates.length,
    percentages: {
      male: Math.round((maleCount / candidates.length) * 100),
      female: Math.round((femaleCount / candidates.length) * 100)
    }
  };
};

export const calculateAvailabilityStats = (candidates: Candidate[]) => {
  const total = candidates.length;
  const statusCounts = candidates.reduce((acc, candidate) => {
    const status = candidate.profile.availabilityStatus;
    acc[status] = (acc[status] || 0) + 1;
    return acc;
  }, {} as Record<AvailabilityStatus, number>);

  return {
    counts: statusCounts,
    percentages: Object.entries(statusCounts).reduce((acc, [status, count]) => {
      acc[status] = Math.round((count / total) * 100);
      return acc;
    }, {} as Record<string, number>)
  };
};

export const calculateCompletionStats = (candidates: Candidate[]) => {
  const total = candidates.length;
  const  stats = {
    hasPhotos: 0,
    hasAbout: 0,
    hasReferences: 0,
    hasPreferences: 0,
    isVerified: 0,
    fullyCompleted: 0
  };

  candidates.forEach(candidate => {
    if (candidate.images.length > 0) stats.hasPhotos++;
    if (candidate.profile.about) stats.hasAbout++;
    if (candidate.profile.preferredAgeMin && candidate.profile.preferredAgeMax) stats.hasPreferences++;
    if (candidate.isVerified) stats.isVerified++;
    
    // בדיקת פרופיל מלא
    if (
      candidate.images.length > 0 &&
      candidate.profile.about &&
      candidate.profile.religiousLevel &&
      candidate.profile.city &&
      candidate.profile.preferredAgeMin &&
      candidate.profile.preferredAgeMax
    ) {
      stats.fullyCompleted++;
    }
  });

  return {
    counts: stats,
    percentages: {
      hasPhotos: Math.round((stats.hasPhotos / total) * 100),
      hasAbout: Math.round((stats.hasAbout / total) * 100),
      hasReferences: Math.round((stats.hasReferences / total) * 100),
      hasPreferences: Math.round((stats.hasPreferences / total) * 100),
      isVerified: Math.round((stats.isVerified / total) * 100),
      fullyCompleted: Math.round((stats.fullyCompleted / total) * 100)
    }
  };
};

const statisticsCalculator = {
  calculateAgeDistribution,
  calculateLocationDistribution,
  calculateReligiousDistribution,
  calculateActivityStats,
  calculateGenderStats,
  calculateAvailabilityStats,
  calculateCompletionStats
};

export default statisticsCalculator;
--- End of Content for statisticsCalculator.ts ---

