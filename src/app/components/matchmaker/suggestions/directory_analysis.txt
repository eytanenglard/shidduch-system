מבנה התיקייה:
suggestions
  container
    MatchmakerDashboard.tsx
    SuggestionActionBar.tsx
    SuggestionsStats.tsx
  details
    SuggestionDetailsDialog.tsx
    SuggestionDetailsView.tsx
  list
    ManagerSuggestionsList.tsx
    SuggestionCard.tsx

תוכן הקבצים:

==================================================
Contents of C:\Users\eytan\Desktop\שידוכים\shidduch-system\src\app\components\matchmaker\suggestions\container\MatchmakerDashboard.tsx:
==================================================
import React, { useState, useCallback, useEffect } from "react";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Filter, Plus, Download } from "lucide-react";
import type { Suggestion } from "@/types/suggestions";
import { MatchSuggestionStatus } from "@prisma/client";
import NewSuggestionForm from "../../new/NewSuggestionForm";
import SuggestionsStats from "./SuggestionsStats";
import SuggestionActionBar from "./SuggestionActionBar";
import ManagerSuggestionsList from "../list/ManagerSuggestionsList";

export default function MatchmakerDashboard() {
  const [activeTab, setActiveTab] = useState("active");
  const [showNewSuggestion, setShowNewSuggestion] = useState(false);
  const [searchQuery, setSearchQuery] = useState("");
  const [filters, setFilters] = useState({});
  const [suggestions, setSuggestions] = useState<Suggestion[]>([]);

  useEffect(() => {
    const fetchSuggestions = async () => {
      try {
        const response = await fetch("/api/matchmaker/suggestions");
        if (!response.ok) throw new Error("Failed to fetch suggestions");

        const data = await response.json();
        setSuggestions(data);

        // Log suggestions data
        console.log("Fetched suggestions:", data);
        console.log("Total suggestions count:", data.length);

        // Log suggestions by status
        const activeCount = data.filter((s: Suggestion) => s.category === 'ACTIVE').length;
        const pendingCount = data.filter((s: Suggestion) => s.category === 'PENDING').length;
        const historyCount = data.filter((s: Suggestion) => s.category === 'HISTORY').length;
        console.log("Suggestions by status:", {
          active: activeCount,
          pending: pendingCount,
          history: historyCount,
        });
      } catch (error) {
        console.error("Error fetching suggestions:", error);
      }
    };

    fetchSuggestions();
  }, []);

  const handleNewSuggestion = async (data: any) => {
    try {
      const response = await fetch("/api/suggestions", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(data),
      });

      if (!response.ok) throw new Error("Failed to create suggestion");

      setShowNewSuggestion(false);
      // Refresh suggestions list after creating new one
      const refreshResponse = await fetch("/api/suggestions");
      if (refreshResponse.ok) {
        const refreshedData = await refreshResponse.json();
        setSuggestions(refreshedData);
        console.log("Suggestions refreshed after new addition:", refreshedData);
      }
    } catch (error) {
      console.error("Error creating suggestion:", error);
    }
  };

  return (
    <div className="min-h-screen bg-gray-50 p-6">
      <div className="container mx-auto space-y-6">
        {/* Header */}
        <div className="flex items-center justify-between">
          <div className="flex items-center gap-4">
            <h1 className="text-2xl font-bold">ניהול הצעות שידוכים</h1>
            <Badge variant="outline" className="text-sm">
              {suggestions.length} הצעות
            </Badge>
          </div>

          <div className="flex items-center gap-2">
            <Button variant="outline" size="sm">
              <Download className="w-4 h-4 ml-2" />
              ייצוא
            </Button>

            <Button onClick={() => setShowNewSuggestion(true)}>
              <Plus className="w-4 h-4 ml-2" />
              הצעה חדשה
            </Button>
          </div>
        </div>

        {/* Stats Overview */}
        <SuggestionsStats suggestions={suggestions} className="mb-6" />

        {/* Main Content */}
        <Tabs value={activeTab} onValueChange={setActiveTab}>
          <div className="flex items-center justify-between mb-6">
            <TabsList>
              <TabsTrigger value="active">הצעות פעילות</TabsTrigger>
              <TabsTrigger value="pending">ממתין לאישור</TabsTrigger>
              <TabsTrigger value="history">היסטוריה</TabsTrigger>
            </TabsList>
          </div>

          {/* Action Bar */}
          <SuggestionActionBar
            searchQuery={searchQuery}
            onSearchChange={setSearchQuery}
            filters={filters}
            onFiltersChange={setFilters}
          />

          {/* Suggestions List */}
          <TabsContent value="active">
            <ManagerSuggestionsList
              suggestions={suggestions}
              filters={filters}
              searchQuery={searchQuery}
              type="active"
            />
          </TabsContent>

          <TabsContent value="pending">
            <ManagerSuggestionsList
              suggestions={suggestions}
              filters={filters}
              searchQuery={searchQuery}
              type="pending"
            />
          </TabsContent>

          <TabsContent value="history">
            <ManagerSuggestionsList
              suggestions={suggestions}
              filters={filters}
              searchQuery={searchQuery}
              type="history"
            />
          </TabsContent>
        </Tabs>
      </div>

      {/* New Suggestion Form */}
      <NewSuggestionForm
        isOpen={showNewSuggestion}
        onClose={() => setShowNewSuggestion(false)}
        candidates={[]}
        onSubmit={handleNewSuggestion}
      />
    </div>
  );
}


==================================================
Contents of C:\Users\eytan\Desktop\שידוכים\shidduch-system\src\app\components\matchmaker\suggestions\container\SuggestionActionBar.tsx:
==================================================
import React from "react";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Badge } from "@/components/ui/badge";
import { Search, Filter, X } from "lucide-react";
import { Priority } from "@prisma/client";

interface SuggestionActionBarProps {
  searchQuery: string;
  onSearchChange: (value: string) => void;
  filters: Record<string, any>;
  onFiltersChange: (filters: Record<string, any>) => void;
}

const SuggestionActionBar: React.FC<SuggestionActionBarProps> = ({
  searchQuery,
  onSearchChange,
  filters,
  onFiltersChange,
}) => {
  const activeFilters = Object.keys(filters).length;

  const handleRemoveFilter = (key: string) => {
    const newFilters = { ...filters };
    delete newFilters[key];
    onFiltersChange(newFilters);
  };

  return (
    <div className="space-y-4 mb-6">
      <div className="flex items-center gap-4">
        {/* Search */}
        <div className="flex-1 relative">
          <Search className="absolute right-3 top-2.5 h-4 w-4 text-gray-500" />
          <Input
            value={searchQuery}
            onChange={(e) => onSearchChange(e.target.value)}
            placeholder="חיפוש הצעות..."
            className="pl-10 text-right pr-10"
          />
        </div>

        {/* Priority Filter */}
        <Select
          value={filters.priority || "all"}
          onValueChange={(value) =>
            onFiltersChange({ ...filters, priority: value === "all" ? undefined : value })
          }
        >
          <SelectTrigger className="w-[160px]">
            <SelectValue placeholder="עדיפות" />
          </SelectTrigger>
          <SelectContent>
            <SelectItem value="all">הכל</SelectItem>
            <SelectItem value={Priority.URGENT}>דחוף</SelectItem>
            <SelectItem value={Priority.HIGH}>גבוהה</SelectItem>
            <SelectItem value={Priority.MEDIUM}>רגילה</SelectItem>
            <SelectItem value={Priority.LOW}>נמוכה</SelectItem>
          </SelectContent>
        </Select>

        {/* Timeframe Filter */}
        <Select
          value={filters.timeframe || "all"}
          onValueChange={(value) =>
            onFiltersChange({ ...filters, timeframe: value === "all" ? undefined : value })
          }
        >
          <SelectTrigger className="w-[160px]">
            <SelectValue placeholder="טווח זמן" />
          </SelectTrigger>
          <SelectContent>
            <SelectItem value="all">הכל</SelectItem>
            <SelectItem value="today">היום</SelectItem>
            <SelectItem value="week">שבוע אחרון</SelectItem>
            <SelectItem value="month">חודש אחרון</SelectItem>
          </SelectContent>
        </Select>

        {/* Advanced Filters Button */}
        <Button variant="outline">
          <Filter className="w-4 h-4 ml-2" />
          מסננים מתקדמים
        </Button>
      </div>

      {/* Active Filters */}
      {activeFilters > 0 && (
        <div className="flex items-center gap-2">
          {Object.entries(filters).map(([key, value]) => (
            <Badge key={key} variant="secondary" className="px-3 py-1 bg-white">
              <span>{`${key}: ${value}`}</span>
              <button
                onClick={() => handleRemoveFilter(key)}
                className="ml-2 hover:text-red-500"
              >
                <X className="w-3 h-3" />
              </button>
            </Badge>
          ))}
          <Button
            variant="ghost"
            size="sm"
            onClick={() => onFiltersChange({})}
            className="text-gray-500 hover:text-gray-700"
          >
            נקה הכל
          </Button>
        </div>
      )}
    </div>
  );
};

export default SuggestionActionBar;

==================================================
Contents of C:\Users\eytan\Desktop\שידוכים\shidduch-system\src\app\components\matchmaker\suggestions\container\SuggestionsStats.tsx:
==================================================
import React, { useMemo } from "react";
import { Card } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Users, CheckCircle, Clock, Calendar } from "lucide-react";
import {
  BarChart,
  Bar,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip,
  ResponsiveContainer,
  PieChart,
  Pie,
  Cell,
} from "recharts";
import type { Suggestion } from "@/types/suggestions";

interface StatsCardProps {
  icon: React.ElementType;
  title: string;
  value: string | number;
  trend?: {
    value: number;
    isPositive: boolean;
  };
  className?: string;
}

interface SuggestionsStatsProps {
  suggestions: Suggestion[];
  className?: string;
}

const COLORS = ["#3B82F6", "#EF4444", "#10B981", "#F59E0B", "#6366F1"];

const StatsCard: React.FC<StatsCardProps> = ({
  icon: Icon,
  title,
  value,
  trend,
  className,
}) => (
  <Card className={`p-4 ${className}`}>
    <div className="flex items-center justify-between">
      <div className="p-2 bg-primary/10 rounded-lg">
        <Icon className="w-5 h-5 text-primary" />
      </div>
      <div className="text-right">
        <p className="text-sm text-gray-500">{title}</p>
        <h3 className="text-2xl font-semibold mt-1">{value}</h3>
        {trend && (
          <div className="flex items-center gap-1 mt-1">
            <span
              className={trend.isPositive ? "text-green-600" : "text-red-600"}
            >
              {trend.value}%
            </span>
            <span className="text-xs text-gray-500">מהחודש שעבר</span>
          </div>
        )}
      </div>
    </div>
  </Card>
);

const SuggestionsStats: React.FC<SuggestionsStatsProps> = ({
  suggestions,
  className,
}) => {
  const stats = useMemo(() => {
    const total = suggestions.length;
    const active = suggestions.filter(
      (s) => !["CLOSED", "CANCELLED", "EXPIRED"].includes(s.status)
    ).length;
    const success = suggestions.filter((s) =>
      ["MARRIED", "ENGAGED"].includes(s.status)
    ).length;
    const pending = suggestions.filter((s) =>
      s.status.includes("PENDING")
    ).length;

    const byStatus = suggestions.reduce((acc, s) => {
      acc[s.status] = (acc[s.status] || 0) + 1;
      return acc;
    }, {} as Record<string, number>);

    const monthlyData = suggestions.reduce((acc, s) => {
      const month = new Date(s.createdAt).getMonth();
      acc[month] = (acc[month] || 0) + 1;
      return acc;
    }, {} as Record<number, number>);

    return {
      total,
      active,
      success,
      pending,
      byStatus,
      monthlyData,
    };
  }, [suggestions]);

  return (
    <div className={`space-y-6 ${className}`}>
      {/* Main Stats */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
        <StatsCard
          icon={Users}
          title="סה״כ הצעות"
          value={stats.total}
          trend={{ value: 5, isPositive: true }}
        />
        <StatsCard
          icon={CheckCircle}
          title="הצעות פעילות"
          value={stats.active}
        />
        <StatsCard icon={Clock} title="ממתינות לתגובה" value={stats.pending} />
        <StatsCard
          icon={Calendar}
          title="שידוכים מוצלחים"
          value={`${Math.round((stats.success / stats.total) * 100)}%`}
        />
      </div>

      {/* Charts */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {/* Status Distribution */}
        <Card className="p-4">
          <h3 className="text-lg font-medium mb-4">התפלגות סטטוסים</h3>
          <div className="h-64">
            <ResponsiveContainer width="100%" height="100%">
              <PieChart>
                <Pie
                  data={Object.entries(stats.byStatus).map(
                    ([status, count]) => ({
                      name: status,
                      value: count,
                    })
                  )}
                  cx="50%"
                  cy="50%"
                  labelLine={false}
                  label={({ name, percent }) =>
                    `${name} (${(percent * 100).toFixed(0)}%)`
                  }
                  outerRadius={80}
                  dataKey="value"
                >
                  {Object.entries(stats.byStatus).map((_, index) => (
                    <Cell
                      key={`cell-${index}`}
                      fill={COLORS[index % COLORS.length]}
                    />
                  ))}
                </Pie>
                <Tooltip />
              </PieChart>
            </ResponsiveContainer>
          </div>
        </Card>

        {/* Monthly Trend */}
        <Card className="p-4">
          <h3 className="text-lg font-medium mb-4">מגמה חודשית</h3>
          <div className="h-64">
            <ResponsiveContainer width="100%" height="100%">
              <BarChart
                data={Object.entries(stats.monthlyData).map(
                  ([month, count]) => ({
                    month: new Date(2024, parseInt(month)).toLocaleString(
                      "he",
                      { month: "short" }
                    ),
                    count,
                  })
                )}
              >
                <CartesianGrid strokeDasharray="3 3" />
                <XAxis dataKey="month" />
                <YAxis />
                <Tooltip />
                <Bar dataKey="count" fill="#3B82F6" />
              </BarChart>
            </ResponsiveContainer>
          </div>
        </Card>
      </div>
    </div>
  );
};

export default SuggestionsStats;


==================================================
Contents of C:\Users\eytan\Desktop\שידוכים\shidduch-system\src\app\components\matchmaker\suggestions\details\SuggestionDetailsDialog.tsx:
==================================================
// SuggestionDetailsDialog.tsx
import React, { useState, useEffect } from "react";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription,
} from "@/components/ui/dialog";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Button } from "@/components/ui/button";
import { ScrollArea } from "@/components/ui/scroll-area";
import { Card } from "@/components/ui/card";
import { ProfileCard } from "@/app/components/shared/shared/profile";
import { Timeline } from "@/components/ui/timeline";
import {
  MessageCircle,
  AlertCircle,
  CheckCircle,
  XCircle,
  Clock,
  Calendar,
} from "lucide-react";
import { toast } from "sonner";
import type { Suggestion } from "@/types/suggestions";
import type { QuestionnaireResponse } from "@/types/next-auth";

interface SuggestionDetailsDialogProps {
  suggestion: Suggestion | null;
  isOpen: boolean;
  onClose: () => void;
  onAction: (action: string) => void;
}

const SuggestionDetailsDialog: React.FC<SuggestionDetailsDialogProps> = ({
  suggestion,
  isOpen,
  onClose,
  onAction,
}) => {
  const [activeTab, setActiveTab] = useState("overview");
  const [firstPartyQuestionnaire, setFirstPartyQuestionnaire] =
    useState<QuestionnaireResponse | null>(null);
  const [secondPartyQuestionnaire, setSecondPartyQuestionnaire] =
    useState<QuestionnaireResponse | null>(null);
  const [isLoading, setIsLoading] = useState(false);

  useEffect(() => {
    const loadQuestionnaire = async (userId: string) => {
      try {
        const response = await fetch(
          `/api/profile/questionnaire?userId=${userId}`
        );
        const data = await response.json();

        if (data.success && data.questionnaireResponse) {
          return {
            ...data.questionnaireResponse,
            formattedAnswers: {
              values: data.questionnaireResponse.formattedAnswers.values || [],
              personality:
                data.questionnaireResponse.formattedAnswers.personality || [],
              relationship:
                data.questionnaireResponse.formattedAnswers.relationship || [],
              partner:
                data.questionnaireResponse.formattedAnswers.partner || [],
              religion:
                data.questionnaireResponse.formattedAnswers.religion || [],
            },
          };
        }
        return null;
      } catch (error) {
        console.error("Failed to load questionnaire:", error);
        toast.error("שגיאה בטעינת השאלון");
        return null;
      }
    };

    const loadQuestionnaires = async () => {
      if (!suggestion) {
        setFirstPartyQuestionnaire(null);
        setSecondPartyQuestionnaire(null);
        return;
      }

      setIsLoading(true);
      try {
        const [firstParty, secondParty] = await Promise.all([
          loadQuestionnaire(suggestion.firstParty.id),
          loadQuestionnaire(suggestion.secondParty.id),
        ]);

        setFirstPartyQuestionnaire(firstParty);
        setSecondPartyQuestionnaire(secondParty);
      } catch (error) {
        console.error("Error loading questionnaires:", error);
        toast.error("שגיאה בטעינת השאלונים");
      } finally {
        setIsLoading(false);
      }
    };

    loadQuestionnaires();
  }, [suggestion]);

  if (!suggestion) return null;

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="max-w-6xl max-h-[90vh] p-0">
        <DialogHeader className="p-6 pb-0">
          <DialogTitle>פרטי הצעת שידוך</DialogTitle>
          <DialogDescription>
            הצעה בין {suggestion.firstParty.firstName}{" "}
            {suggestion.firstParty.lastName} ל{suggestion.secondParty.firstName}{" "}
            {suggestion.secondParty.lastName}
          </DialogDescription>
        </DialogHeader>

        <Tabs
          value={activeTab}
          onValueChange={setActiveTab}
          className="flex h-full"
        >
          <div className="w-48 border-l">
            <TabsList className="flex flex-col h-full p-2">
              <TabsTrigger value="overview" className="justify-end">
                סקירה כללית
              </TabsTrigger>
              <TabsTrigger value="firstParty" className="justify-end">
                צד ראשון
              </TabsTrigger>
              <TabsTrigger value="secondParty" className="justify-end">
                צד שני
              </TabsTrigger>
              <TabsTrigger value="timeline" className="justify-end">
                ציר זמן
              </TabsTrigger>
              <TabsTrigger value="communication" className="justify-end">
                תקשורת
              </TabsTrigger>
            </TabsList>
          </div>

          <div className="flex-1 p-6">
            <TabsContent value="firstParty">
              <ProfileCard
                profile={suggestion.firstParty.profile}
                images={suggestion.firstParty.images}
                questionnaire={firstPartyQuestionnaire}
                viewMode="matchmaker"
              />
            </TabsContent>

            <TabsContent value="secondParty">
              <ProfileCard
                profile={suggestion.secondParty.profile}
                images={suggestion.secondParty.images}
                questionnaire={secondPartyQuestionnaire}
                viewMode="matchmaker"
              />
            </TabsContent>

            <TabsContent value="timeline">
              <ScrollArea className="h-[500px] pr-4">
                {isLoading ? (
                  <div className="flex items-center justify-center h-full">
                    טוען...
                  </div>
                ) : (
                  <Timeline
                    items={(suggestion?.statusHistory || []).map((history) => ({
                      title: history.status,
                      description: history.notes,
                      date: new Date(history.createdAt),
                      icon: history.status.includes("APPROVED")
                        ? CheckCircle
                        : history.status.includes("DECLINED")
                        ? XCircle
                        : AlertCircle,
                    }))}
                  />
                )}
              </ScrollArea>
            </TabsContent>

            <TabsContent value="communication">
              {/* Communication content here */}
            </TabsContent>
          </div>
        </Tabs>
      </DialogContent>
    </Dialog>
  );
};

export default SuggestionDetailsDialog;


==================================================
Contents of C:\Users\eytan\Desktop\שידוכים\shidduch-system\src\app\components\matchmaker\suggestions\details\SuggestionDetailsView.tsx:
==================================================


==================================================
Contents of C:\Users\eytan\Desktop\שידוכים\shidduch-system\src\app\components\matchmaker\suggestions\list\ManagerSuggestionsList.tsx:
==================================================
import React, { useMemo, useState } from "react";
import { Card } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { ScrollArea } from "@/components/ui/scroll-area";
import { Button } from "@/components/ui/button";
import { Eye, MessageCircle, Clock, Users } from "lucide-react";
import { formatDistanceToNow } from "date-fns";
import { he } from "date-fns/locale";
import type { Suggestion } from "@/types/suggestions";
import StatusBadge from "../../new/shared/StatusBadge";
import SuggestionDetailsDialog from "../details/SuggestionDetailsDialog";
import { toast } from "sonner";

interface ManagerSuggestionsListProps {
  suggestions: Suggestion[];
  filters: Record<string, any>;
  searchQuery: string;
  type: "active" | "pending" | "history";
}

const ManagerSuggestionsList: React.FC<ManagerSuggestionsListProps> = ({
  suggestions,
  filters,
  searchQuery,
  type,
}) => {
  const [selectedSuggestion, setSelectedSuggestion] =
    useState<Suggestion | null>(null);

  const filteredSuggestions = useMemo(() => {
    return suggestions.filter((suggestion) => {
      // Base status filter
      if (
        type === "active" &&
        ["CLOSED", "CANCELLED", "EXPIRED"].includes(suggestion.status)
      ) {
        return false;
      }
      if (type === "pending" && !suggestion.status.includes("PENDING")) {
        return false;
      }
      if (
        type === "history" &&
        !["CLOSED", "CANCELLED", "EXPIRED"].includes(suggestion.status)
      ) {
        return false;
      }

      // Search query
      if (searchQuery && suggestion.firstParty && suggestion.secondParty) {
        const searchTerm = searchQuery.toLowerCase();
        const searchableText = `
          ${suggestion.firstParty.firstName} 
          ${suggestion.firstParty.lastName}
          ${suggestion.secondParty.firstName}
          ${suggestion.secondParty.lastName}
          ${suggestion.matchingReason || ""}
        `.toLowerCase();

        if (!searchableText.includes(searchTerm)) {
          return false;
        }
      }

      // Other filters
      if (filters.priority && suggestion.priority !== filters.priority) {
        return false;
      }

      if (filters.timeframe) {
        const createdAt = new Date(suggestion.createdAt);
        const now = new Date();
        const diff = now.getTime() - createdAt.getTime();
        const days = diff / (1000 * 60 * 60 * 24);

        switch (filters.timeframe) {
          case "today":
            if (days > 1) return false;
            break;
          case "week":
            if (days > 7) return false;
            break;
          case "month":
            if (days > 30) return false;
            break;
        }
      }

      return true;
    });
  }, [suggestions, filters, searchQuery, type]);

  const handleViewClick = (suggestion: Suggestion) => {
    if (!suggestion.firstParty?.profile || !suggestion.secondParty?.profile) {
      toast.error("חסרים פרטי פרופיל למועמדים");
      return;
    }
    setSelectedSuggestion(suggestion);
  };

  const handleAction = (action: string) => {
    console.log(`Action ${action} for suggestion ${selectedSuggestion?.id}`);
    // Implement action handling logic here
  };

  if (filteredSuggestions.length === 0) {
    return (
      <div className="flex flex-col items-center justify-center h-64 text-gray-400">
        <Users className="w-12 h-12 mb-4" />
        <p>לא נמצאו הצעות</p>
      </div>
    );
  }

  return (
    <>
      <ScrollArea className="h-[600px] rounded-md border">
        <div className="p-4 space-y-4">
          {filteredSuggestions.map((suggestion) => {
            if (!suggestion.firstParty || !suggestion.secondParty) {
              return null;
            }

            return (
              <Card
                key={suggestion.id}
                className="p-4 hover:shadow-md transition-shadow"
              >
                <div className="flex justify-between items-start">
                  {/* Parties Info */}
                  <div className="flex-1 text-right">
                    <div className="flex items-center justify-between mb-2">
                      <StatusBadge
                        type="suggestion"
                        status={suggestion.status}
                      />
                      <Badge variant="outline" className="bg-white">
                        <Clock className="w-3 h-3 ml-1" />
                        {formatDistanceToNow(new Date(suggestion.createdAt), {
                          addSuffix: true,
                          locale: he,
                        })}
                      </Badge>
                    </div>

                    <div className="flex justify-between items-start gap-8">
                      <div className="flex-1">
                        <h4 className="font-medium">צד ראשון</h4>
                        <p>
                          {suggestion.firstParty.firstName}{" "}
                          {suggestion.firstParty.lastName}
                        </p>
                        <p className="text-sm text-gray-500">
                          {suggestion.firstParty.profile?.city},{" "}
                          {suggestion.firstParty.profile?.birthDate &&
                            Math.floor(
                              (new Date().getTime() -
                                new Date(
                                  suggestion.firstParty.profile.birthDate
                                ).getTime()) /
                                (365.25 * 24 * 60 * 60 * 1000)
                            )}
                        </p>
                      </div>

                      <div className="flex-1">
                        <h4 className="font-medium">צד שני</h4>
                        <p>
                          {suggestion.secondParty.firstName}{" "}
                          {suggestion.secondParty.lastName}
                        </p>
                        <p className="text-sm text-gray-500">
                          {suggestion.secondParty.profile?.city},{" "}
                          {suggestion.secondParty.profile?.birthDate &&
                            Math.floor(
                              (new Date().getTime() -
                                new Date(
                                  suggestion.secondParty.profile.birthDate
                                ).getTime()) /
                                (365.25 * 24 * 60 * 60 * 1000)
                            )}
                        </p>
                      </div>
                    </div>

                    {suggestion.matchingReason && (
                      <p className="mt-2 text-sm text-gray-600 line-clamp-2">
                        {suggestion.matchingReason}
                      </p>
                    )}
                  </div>

                  {/* Actions */}
                  <div className="flex gap-2 mr-4">
                    <Button
                      size="sm"
                      variant="outline"
                      onClick={() => handleViewClick(suggestion)}
                    >
                      <Eye className="w-4 h-4 ml-2" />
                      צפייה
                    </Button>
                    <Button size="sm" variant="outline">
                      <MessageCircle className="w-4 h-4 ml-2" />
                      תקשורת
                    </Button>
                  </div>
                </div>

                {/* Timeline */}
                {suggestion.statusHistory &&
                  suggestion.statusHistory.length > 0 && (
                    <div className="mt-4 pt-4 border-t">
                      <div className="flex gap-4 text-sm text-gray-500">
                        {suggestion.statusHistory
                          .slice(-3)
                          .map((history, index) => (
                            <div
                              key={index}
                              className="flex items-center gap-2"
                            >
                              <StatusBadge
                                type="suggestion"
                                status={history.status}
                                size="sm"
                              />
                              <span>
                                {formatDistanceToNow(
                                  new Date(history.createdAt),
                                  {
                                    addSuffix: true,
                                    locale: he,
                                  }
                                )}
                              </span>
                            </div>
                          ))}
                      </div>
                    </div>
                  )}
              </Card>
            );
          })}
        </div>
      </ScrollArea>

      <SuggestionDetailsDialog
        suggestion={selectedSuggestion}
        isOpen={!!selectedSuggestion}
        onClose={() => setSelectedSuggestion(null)}
        onAction={handleAction}
      />
    </>
  );
};

export default ManagerSuggestionsList;


==================================================
Contents of C:\Users\eytan\Desktop\שידוכים\shidduch-system\src\app\components\matchmaker\suggestions\list\SuggestionCard.tsx:
==================================================

