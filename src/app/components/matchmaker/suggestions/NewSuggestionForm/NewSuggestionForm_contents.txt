################################################################################
# Directory Content Map For: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\app\components\matchmaker\suggestions\NewSuggestionForm
# Generated on: 2025-08-18 14:36:43
################################################################################

================================================================================
Directory: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\app\components\matchmaker\suggestions\NewSuggestionForm
================================================================================

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\app\components\matchmaker\suggestions\NewSuggestionForm\CandidateSelector.tsx
--------------------------------------------------------------------------------
Content:
// src/app/components/matchmaker/suggestions/NewSuggestionForm/CandidateSelector.tsx

import React, { useState, useCallback, KeyboardEvent } from 'react';
import {
  Search,
  AlertTriangle,
  Clock,
  User,
  Crown,
  Star,
  Heart,
  Sparkles,
  MapPin,
  Award,
  Zap,
  Shield,
} from 'lucide-react';
import { Input } from '@/components/ui/input';
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from '@/components/ui/popover';
import {
  Command,
  CommandEmpty,
  CommandGroup,
  CommandInput,
  CommandList,
} from '@/components/ui/command';
import { Button } from '@/components/ui/button';
import { Card, CardContent } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';
import {
  calculateAge,
  cn,
  getRelativeCloudinaryPath,
  getInitials,
} from '@/lib/utils';
import type { Candidate } from '../../new/types/candidates';
import { toast } from 'sonner';

interface CandidateSelectorProps {
  value: Candidate | null;
  onChange: (candidate: Candidate | null) => void;
  otherParty?: Candidate | null;
  label: string;
  candidates: Candidate[];
  className?: string;
  fieldName: string;
  error?: string;
}

const EnhancedCandidateCard: React.FC<{
  candidate: Candidate;
  onClick: () => void;
  isActive: boolean;
  isBlocked: boolean;
}> = ({ candidate, onClick, isActive, isBlocked }) => {
  const age = calculateAge(new Date(candidate.profile.birthDate));
  const mainImage = candidate.images.find((img) => img.isMain)?.url;

  const getStatusInfo = () => {
    if (isBlocked) {
      return {
        icon: Shield,
        label: 'חסום',
        className:
          'bg-gradient-to-r from-red-500 to-pink-500 text-white animate-pulse',
        description: `בהצעה פעילה עם ${candidate.suggestionStatus?.withCandidateName}`,
      };
    }

    if (candidate.suggestionStatus?.status === 'PENDING') {
      return {
        icon: Clock,
        label: 'ממתין',
        className: 'bg-gradient-to-r from-yellow-500 to-amber-500 text-white',
        description: `הצעה ממתינה עם ${candidate.suggestionStatus.withCandidateName}`,
      };
    }

    return {
      icon: Star,
      label: 'זמין',
      className: 'bg-gradient-to-r from-green-500 to-emerald-500 text-white',
      description: 'זמין להצעה חדשה',
    };
  };

  const statusInfo = getStatusInfo();
  const StatusIcon = statusInfo.icon;

  return (
    <div
      className={cn(
        'group relative overflow-hidden rounded-2xl transition-all duration-300 cursor-pointer',
        'bg-gradient-to-br from-white via-gray-50/30 to-white border-2 shadow-lg hover:shadow-2xl',
        isActive && 'ring-4 ring-purple-500 ring-opacity-50 border-purple-300',
        isBlocked && 'opacity-60 cursor-not-allowed',
        !isBlocked && 'hover:scale-105 hover:border-purple-300'
      )}
      onClick={!isBlocked ? onClick : undefined}
    >
      {/* Background decorative elements */}
      <div className="absolute inset-0">
        <div className="absolute top-0 right-0 w-20 h-20 bg-gradient-to-br from-purple-200/20 to-pink-200/20 rounded-full blur-xl opacity-0 group-hover:opacity-100 transition-opacity duration-500"></div>
        <div className="absolute bottom-0 left-0 w-16 h-16 bg-gradient-to-br from-cyan-200/20 to-blue-200/20 rounded-full blur-lg opacity-0 group-hover:opacity-100 transition-opacity duration-700"></div>
      </div>

      <div className="relative z-10 p-4 space-y-4">
        {/* Header with status */}
        <div className="flex items-center justify-between">
          <Badge className={cn('shadow-lg font-bold', statusInfo.className)}>
            <StatusIcon className="w-3 h-3 ml-1" />
            {statusInfo.label}
          </Badge>

          {candidate.profile.religiousLevel && (
            <Badge className="bg-gradient-to-r from-indigo-500 to-purple-500 text-white shadow-lg">
              <Crown className="w-3 h-3 ml-1" />
              {candidate.profile.religiousLevel}
            </Badge>
          )}
        </div>

        {/* Profile section */}
        <div className="flex items-center gap-4">
          <div className="relative">
            <Avatar className="w-16 h-16 border-4 border-white shadow-xl ring-2 ring-purple-200 group-hover:ring-purple-400 transition-all duration-300">
              {mainImage ? (
                <AvatarImage
                  src={getRelativeCloudinaryPath(mainImage)}
                  alt={`${candidate.firstName} ${candidate.lastName}`}
                  className="object-cover"
                />
              ) : (
                <AvatarFallback className="bg-gradient-to-br from-purple-500 to-pink-500 text-white font-bold text-lg">
                  {getInitials(`${candidate.firstName} ${candidate.lastName}`)}
                </AvatarFallback>
              )}
            </Avatar>

            {/* Online indicator */}
            <div className="absolute -bottom-1 -right-1 w-5 h-5 bg-gradient-to-r from-green-400 to-emerald-400 border-2 border-white rounded-full shadow-lg animate-pulse"></div>
          </div>

          <div className="flex-1 min-w-0">
            <h3 className="text-lg font-bold text-gray-800 truncate group-hover:text-purple-700 transition-colors">
              {candidate.firstName} {candidate.lastName}
            </h3>

            <div className="flex items-center gap-2 mt-1">
              <div className="flex items-center gap-1 text-sm text-gray-600">
                <User className="w-4 h-4 text-blue-500" />
                <span className="font-medium">{age} שנים</span>
              </div>

              {candidate.profile.city && (
                <div className="flex items-center gap-1 text-sm text-gray-600">
                  <MapPin className="w-4 h-4 text-green-500" />
                  <span className="truncate">{candidate.profile.city}</span>
                </div>
              )}
            </div>
          </div>
        </div>

        {/* Details grid */}
        <div className="grid grid-cols-2 gap-3">
          {candidate.profile.occupation && (
            <div className="flex items-center gap-2 p-2 bg-gradient-to-r from-blue-50 to-cyan-50 rounded-lg border border-blue-100 shadow-sm">
              <Award className="w-4 h-4 text-blue-500 flex-shrink-0" />
              <span className="text-sm font-medium text-blue-700 truncate">
                {candidate.profile.occupation}
              </span>
            </div>
          )}

          {candidate.profile.education && (
            <div className="flex items-center gap-2 p-2 bg-gradient-to-r from-purple-50 to-pink-50 rounded-lg border border-purple-100 shadow-sm">
              <Sparkles className="w-4 h-4 text-purple-500 flex-shrink-0" />
              <span className="text-sm font-medium text-purple-700 truncate">
                {candidate.profile.education}
              </span>
            </div>
          )}
        </div>

        {/* Status description */}
        {isBlocked && (
          <div className="p-3 bg-gradient-to-r from-red-50 to-pink-50 rounded-lg border border-red-200">
            <div className="flex items-start gap-2">
              <AlertTriangle className="w-4 h-4 text-red-500 mt-0.5 flex-shrink-0" />
              <div className="text-sm text-red-700">
                <p className="font-medium">לא ניתן לבחור</p>
                <p className="text-xs">{statusInfo.description}</p>
              </div>
            </div>
          </div>
        )}
      </div>

      {/* Hover overlay */}
      <div className="absolute inset-0 bg-gradient-to-r from-purple-500/5 to-pink-500/5 opacity-0 group-hover:opacity-100 transition-opacity duration-300 pointer-events-none"></div>
    </div>
  );
};

const CandidateSelector: React.FC<CandidateSelectorProps> = ({
  value,
  onChange,
  otherParty,
  label,
  candidates,
  className,
  error,
}) => {
  const [open, setOpen] = useState(false);
  const [inputValue, setInputValue] = useState('');
  const [activeIndex, setActiveIndex] = useState(-1);

  const filteredCandidates = candidates.filter((candidate) => {
    if (otherParty && candidate.id === otherParty.id) return false;

    if (inputValue) {
      const searchTerm = inputValue.toLowerCase();
      return (
        candidate.firstName.toLowerCase().includes(searchTerm) ||
        candidate.lastName.toLowerCase().includes(searchTerm) ||
        candidate.profile.city?.toLowerCase().includes(searchTerm) ||
        candidate.profile.occupation?.toLowerCase().includes(searchTerm)
      );
    }
    return true;
  });

  const formatCandidateDisplay = useCallback((candidate: Candidate) => {
    const age = calculateAge(new Date(candidate.profile.birthDate));
    return `${candidate.firstName} ${candidate.lastName}, ${age}${
      candidate.profile.city ? `, ${candidate.profile.city}` : ''
    }`;
  }, []);

  const handleSelect = useCallback(
    (candidate: Candidate) => {
      if (candidate.suggestionStatus?.status === 'BLOCKED') {
        toast.error('לא ניתן לבחור מועמד זה', {
          description: `${candidate.firstName} ${candidate.lastName} כבר נמצא/ת בהצעה פעילה עם ${candidate.suggestionStatus.withCandidateName}.`,
        });
        return;
      }

      onChange(candidate);
      setOpen(false);
      setInputValue('');
      setActiveIndex(-1);
    },
    [onChange]
  );

  const handleKeyDown = (e: KeyboardEvent) => {
    if (!open) return;

    switch (e.key) {
      case 'ArrowDown':
        e.preventDefault();
        setActiveIndex((prev) =>
          prev < filteredCandidates.length - 1 ? prev + 1 : prev
        );
        break;
      case 'ArrowUp':
        e.preventDefault();
        setActiveIndex((prev) => (prev > 0 ? prev - 1 : prev));
        break;
      case 'Enter':
        e.preventDefault();
        if (activeIndex >= 0 && activeIndex < filteredCandidates.length) {
          handleSelect(filteredCandidates[activeIndex]);
        }
        break;
      case 'Escape':
        e.preventDefault();
        setOpen(false);
        setActiveIndex(-1);
        break;
    }
  };

  return (
    <div className={className}>
      <div className="space-y-3">
        {/* Enhanced Label */}
        <div className="flex items-center gap-3">
          <div className="p-2 rounded-full bg-gradient-to-r from-purple-500 to-pink-500 text-white shadow-lg">
            <User className="w-5 h-5" />
          </div>
          <label className="text-lg font-bold text-gray-800">{label}</label>
        </div>

        {/* Enhanced Search Input */}
        <Popover open={open} onOpenChange={setOpen}>
          <PopoverTrigger asChild>
            <div className="relative group">
              <div className="absolute inset-0 bg-gradient-to-r from-purple-500/20 to-pink-500/20 rounded-2xl blur opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
              <div className="relative">
                <Search className="absolute right-4 top-1/2 transform -translate-y-1/2 h-5 w-5 text-purple-400 group-hover:text-purple-600 transition-colors" />
                <Input
                  value={value ? formatCandidateDisplay(value) : inputValue}
                  onChange={(e) => {
                    setInputValue(e.target.value);
                    if (!open) setOpen(true);
                    setActiveIndex(-1);
                  }}
                  onKeyDown={handleKeyDown}
                  onClick={() => !open && setOpen(true)}
                  placeholder="חפש/י מועמד/ת..."
                  className={cn(
                    'h-14 pr-14 text-right text-lg border-2 transition-all duration-300 rounded-2xl shadow-lg',
                    'bg-white/80 backdrop-blur-sm',
                    'border-purple-200 hover:border-purple-300 focus:border-purple-500 focus:ring-purple-200',
                    'placeholder:text-gray-400',
                    error &&
                      'border-red-300 focus:border-red-500 focus:ring-red-200'
                  )}
                  role="combobox"
                  aria-expanded={open}
                  aria-controls="candidate-listbox"
                  aria-activedescendant={
                    activeIndex >= 0
                      ? `candidate-${filteredCandidates[activeIndex]?.id}`
                      : undefined
                  }
                />
                <div className="absolute left-4 top-1/2 transform -translate-y-1/2">
                  <Sparkles className="h-4 w-4 text-purple-400" />
                </div>
              </div>
            </div>
          </PopoverTrigger>

          <PopoverContent
            className="p-0 w-[500px] border-0 shadow-2xl rounded-2xl bg-white/95 backdrop-blur-sm"
            align="start"
            side="bottom"
            sideOffset={8}
          >
            <Command shouldFilter={false}>
              <div className="relative">
                <CommandInput
                  placeholder="חיפוש מועמדים..."
                  value={inputValue}
                  onValueChange={setInputValue}
                  className="h-12 border-0 text-right text-lg bg-gradient-to-r from-purple-50 to-pink-50"
                />
                <div className="absolute right-4 top-1/2 transform -translate-y-1/2">
                  <Search className="h-4 w-4 text-purple-400" />
                </div>
              </div>

              <CommandList
                className="max-h-[400px] overflow-auto p-2"
                id="candidate-listbox"
                role="listbox"
              >
                <CommandEmpty>
                  <div className="text-center p-8">
                    <div className="w-16 h-16 rounded-full bg-gradient-to-br from-gray-100 to-gray-200 flex items-center justify-center mx-auto mb-4">
                      <Search className="w-8 h-8 text-gray-400" />
                    </div>
                    <h3 className="text-lg font-bold text-gray-800 mb-2">
                      לא נמצאו תוצאות
                    </h3>
                    <p className="text-gray-600">נסה לשנות את מונחי החיפוש</p>
                  </div>
                </CommandEmpty>

                <CommandGroup>
                  <div className="grid gap-3">
                    {filteredCandidates.map((candidate, index) => {
                      const isBlocked =
                        candidate.suggestionStatus?.status === 'BLOCKED';
                      return (
                        <EnhancedCandidateCard
                          key={candidate.id}
                          candidate={candidate}
                          onClick={() => handleSelect(candidate)}
                          isActive={index === activeIndex}
                          isBlocked={isBlocked}
                        />
                      );
                    })}
                  </div>
                </CommandGroup>
              </CommandList>
            </Command>
          </PopoverContent>
        </Popover>

        {error && (
          <div className="flex items-center gap-2 p-3 bg-gradient-to-r from-red-50 to-pink-50 rounded-xl border border-red-200">
            <AlertTriangle className="w-4 h-4 text-red-500" />
            <p className="text-sm text-red-600 font-medium">{error}</p>
          </div>
        )}
      </div>

      {/* Selected Candidate Display */}
      {value && (
        <Card className="mt-4 border-0 shadow-xl bg-gradient-to-br from-white via-purple-50/30 to-pink-50/30 rounded-2xl overflow-hidden">
          <CardContent className="p-6">
            <div className="flex items-center justify-between mb-4">
              <div className="flex items-center gap-3">
                <div className="p-2 rounded-full bg-gradient-to-r from-green-500 to-emerald-500 text-white shadow-lg">
                  <Heart className="w-5 h-5" />
                </div>
                <h4 className="text-lg font-bold text-gray-800">
                  מועמד/ת נבחר/ת
                </h4>
              </div>

              <Button
                variant="ghost"
                size="sm"
                onClick={() => onChange(null)}
                className="text-red-600 hover:text-red-700 hover:bg-red-50 rounded-xl transition-all duration-300"
              >
                <Zap className="w-4 h-4 ml-1" />
                הסר בחירה
              </Button>
            </div>

            <EnhancedCandidateCard
              candidate={value}
              onClick={() => {}}
              isActive={true}
              isBlocked={false}
            />

            <div className="flex gap-3 mt-4">
              <Button
                variant="outline"
                size="sm"
                onClick={() => {
                  /* Implement view profile handler */
                }}
                className="flex-1 border-2 border-purple-200 text-purple-600 hover:bg-purple-50 rounded-xl transition-all duration-300"
              >
                <User className="w-4 h-4 ml-2" />
                צפה בפרופיל מלא
              </Button>
            </div>
          </CardContent>
        </Card>
      )}
    </div>
  );
};

export default CandidateSelector;
--- End of Content for CandidateSelector.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\app\components\matchmaker\suggestions\NewSuggestionForm\MatchPreview.tsx
--------------------------------------------------------------------------------
Content:
// src/app/components/matchmaker/suggestions/NewSuggestionForm/MatchPreview.tsx

import React from 'react';
import { Card, CardContent } from '@/components/ui/card';
import { Progress } from '@/components/ui/progress';
import { Badge } from '@/components/ui/badge';
import {
  CheckCircle,
  AlertCircle,
  XCircle,
  Heart,
  Star,
  Sparkles,
  TrendingUp,
  Award,
  Crown,
  Gem,
  Zap,
  Target,
  Trophy,
  Flame,
  Gift,
} from 'lucide-react';
import { calculateMatchScore } from '../utils/matchingAlgorithm';
import type { Candidate } from '../../new/types/candidates';
import type { MatchScore } from '../utils/matchingAlgorithm';
import { cn } from '@/lib/utils';

interface MatchPreviewProps {
  firstParty: Candidate;
  secondParty: Candidate;
  className?: string;
}

const MatchCriteriaCard: React.FC<{
  criterion: {
    name: string;
    score: number;
    reason?: string;
  };
  index: number;
}> = ({ criterion, index }) => {
  const getCriterionInfo = (name: string) => {
    switch (name) {
      case 'age':
        return {
          icon: Target,
          label: 'גיל',
          color: 'from-blue-500 to-cyan-500',
          bgColor: 'from-blue-50 to-cyan-50',
        };
      case 'location':
        return {
          icon: Crown,
          label: 'מיקום',
          color: 'from-green-500 to-emerald-500',
          bgColor: 'from-green-50 to-emerald-50',
        };
      case 'religious':
        return {
          icon: Sparkles,
          label: 'רמה דתית',
          color: 'from-purple-500 to-pink-500',
          bgColor: 'from-purple-50 to-pink-50',
        };
      default:
        return {
          icon: Star,
          label: name,
          color: 'from-gray-500 to-slate-500',
          bgColor: 'from-gray-50 to-slate-50',
        };
    }
  };

  const info = getCriterionInfo(criterion.name);
  const IconComponent = info.icon;
  const scorePercentage = Math.round(criterion.score * 100);

  const getScoreCategory = (score: number) => {
    if (score >= 0.9)
      return {
        label: 'מושלם',
        color: 'text-emerald-600',
        bgColor: 'bg-emerald-100',
      };
    if (score >= 0.8)
      return {
        label: 'מצוין',
        color: 'text-green-600',
        bgColor: 'bg-green-100',
      };
    if (score >= 0.7)
      return { label: 'טוב', color: 'text-blue-600', bgColor: 'bg-blue-100' };
    if (score >= 0.5)
      return {
        label: 'בינוני',
        color: 'text-yellow-600',
        bgColor: 'bg-yellow-100',
      };
    return { label: 'נמוך', color: 'text-red-600', bgColor: 'bg-red-100' };
  };

  const scoreCategory = getScoreCategory(criterion.score);

  return (
    <div
      className={cn(
        'relative overflow-hidden rounded-2xl transition-all duration-500 group hover:scale-105',
        'bg-gradient-to-br',
        info.bgColor,
        'border border-white/50 shadow-lg hover:shadow-2xl'
      )}
      style={{
        animationDelay: `${index * 150}ms`,
        animationFillMode: 'both',
      }}
    >
      {/* Background decoration */}
      <div className="absolute inset-0">
        <div className="absolute top-0 right-0 w-16 h-16 bg-gradient-to-br from-white/30 to-transparent rounded-full blur-xl opacity-0 group-hover:opacity-100 transition-opacity duration-500"></div>
        <div className="absolute bottom-0 left-0 w-12 h-12 bg-gradient-to-br from-white/20 to-transparent rounded-full blur-lg opacity-0 group-hover:opacity-100 transition-opacity duration-700"></div>
      </div>

      <div className="relative z-10 p-6 space-y-4">
        {/* Header */}
        <div className="flex items-center justify-between">
          <div className="flex items-center gap-3">
            <div
              className={cn(
                'p-3 rounded-full shadow-lg group-hover:scale-110 transition-transform bg-gradient-to-r text-white',
                info.color
              )}
            >
              <IconComponent className="w-5 h-5" />
            </div>
            <h4 className="text-lg font-bold text-gray-800">{info.label}</h4>
          </div>

          <Badge
            className={cn(
              'px-3 py-1 font-bold shadow-lg',
              scoreCategory.bgColor,
              scoreCategory.color
            )}
          >
            {scoreCategory.label}
          </Badge>
        </div>

        {/* Score visualization */}
        <div className="space-y-3">
          <div className="flex items-center justify-between">
            <span className="text-sm font-medium text-gray-600">התאמה</span>
            <span className="text-2xl font-bold text-gray-800">
              {scorePercentage}%
            </span>
          </div>

          <div className="relative">
            <Progress
              value={scorePercentage}
              className="h-3 bg-white/50 shadow-inner"
            />
            <div className="absolute inset-0 rounded-full bg-gradient-to-r from-transparent via-white/20 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-500"></div>
          </div>
        </div>

        {/* Reason */}
        {criterion.reason && (
          <div className="p-3 bg-white/60 backdrop-blur-sm rounded-xl border border-white/50 shadow-inner">
            <p className="text-sm text-gray-700 leading-relaxed font-medium">
              {criterion.reason}
            </p>
          </div>
        )}
      </div>
    </div>
  );
};

const MatchPreview: React.FC<MatchPreviewProps> = ({
  firstParty,
  secondParty,
  className,
}) => {
  // Calculate match score using the existing algorithm
  const matchScore: MatchScore | null = calculateMatchScore(
    firstParty.profile,
    secondParty.profile
  );

  if (!matchScore) {
    return (
      <Card
        className={cn(
          'border-0 shadow-xl rounded-3xl overflow-hidden',
          className
        )}
      >
        <CardContent className="p-8">
          <div className="text-center space-y-6">
            <div className="w-24 h-24 rounded-full bg-gradient-to-br from-yellow-100 to-amber-100 flex items-center justify-center mx-auto shadow-xl">
              <AlertCircle className="w-12 h-12 text-yellow-500" />
            </div>
            <div>
              <h3 className="text-xl font-bold text-gray-800 mb-2">
                לא ניתן לחשב התאמה
              </h3>
              <p className="text-gray-600">
                חסרים נתונים חיוניים לחישוב ההתאמה
              </p>
            </div>
            <div className="p-4 bg-gradient-to-r from-yellow-50 to-amber-50 rounded-2xl border border-yellow-200">
              <p className="text-sm text-yellow-800 font-medium">
                אנא ודא שלשני המועמדים יש פרופיל מלא עם תאריך לידה, עיר מגורים
                ורמה דתית
              </p>
            </div>
          </div>
        </CardContent>
      </Card>
    );
  }

  // Determine match quality with enhanced categories
  const getMatchQuality = (score: number) => {
    if (score >= 95)
      return {
        icon: Crown,
        color: 'text-purple-600',
        bgGradient: 'from-purple-500 to-pink-500',
        bgColor: 'from-purple-50 to-pink-50',
        text: 'התאמה מושלמת',
        description: 'זוג אידיאלי עם התאמה יוצאת דופן!',
        animation: 'animate-pulse',
      };
    if (score >= 85)
      return {
        icon: Gem,
        color: 'text-emerald-600',
        bgGradient: 'from-emerald-500 to-green-500',
        bgColor: 'from-emerald-50 to-green-50',
        text: 'התאמה מעולה',
        description: 'זוג עם פוטנציאל גבוה להצלחה',
        animation: '',
      };
    if (score >= 75)
      return {
        icon: Trophy,
        color: 'text-blue-600',
        bgGradient: 'from-blue-500 to-cyan-500',
        bgColor: 'from-blue-50 to-cyan-50',
        text: 'התאמה טובה',
        description: 'התאמה איכותית עם סיכויים טובים',
        animation: '',
      };
    if (score >= 60)
      return {
        icon: Star,
        color: 'text-yellow-600',
        bgGradient: 'from-yellow-500 to-amber-500',
        bgColor: 'from-yellow-50 to-amber-50',
        text: 'התאמה בינונית',
        description: 'יש פוטנציאל, שווה לבדוק',
        animation: '',
      };
    return {
      icon: AlertCircle,
      color: 'text-red-600',
      bgGradient: 'from-red-500 to-pink-500',
      bgColor: 'from-red-50 to-pink-50',
      text: 'התאמה נמוכה',
      description: 'התאמה מוגבלת, יש לשקול בזהירות',
      animation: '',
    };
  };

  const quality = getMatchQuality(matchScore.score);
  const Icon = quality.icon;

  return (
    <Card
      className={cn(
        'border-0 shadow-2xl rounded-3xl overflow-hidden transition-all duration-500 hover:shadow-3xl',
        'bg-gradient-to-br',
        quality.bgColor,
        className
      )}
    >
      {/* Animated background */}
      <div className="absolute inset-0">
        <div className="absolute top-0 right-0 w-64 h-64 bg-gradient-to-br from-white/20 to-transparent rounded-full blur-3xl animate-float"></div>
        <div
          className="absolute bottom-0 left-0 w-48 h-48 bg-gradient-to-br from-white/10 to-transparent rounded-full blur-2xl animate-float"
          style={{ animationDelay: '2s' }}
        ></div>
        <div
          className="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-80 h-80 bg-gradient-to-br from-white/5 to-transparent rounded-full blur-3xl animate-float"
          style={{ animationDelay: '4s' }}
        ></div>
      </div>

      <CardContent className="relative z-10 p-8 space-y-8">
        {/* Header Section */}
        <div className="text-center space-y-6">
          <div className="flex items-center justify-center">
            <div
              className={cn(
                'p-6 rounded-full shadow-2xl bg-gradient-to-r text-white transform hover:scale-110 transition-transform duration-300',
                quality.bgGradient,
                quality.animation
              )}
            >
              <Icon className="w-12 h-12" />
            </div>
          </div>

          <div className="space-y-2">
            <h2 className="text-3xl font-bold text-gray-800">{quality.text}</h2>
            <p className="text-lg text-gray-600 leading-relaxed">
              {quality.description}
            </p>
          </div>

          {/* Score display */}
          <div className="relative">
            <div className="flex items-center justify-center gap-4 mb-4">
              <div className="text-center">
                <div className="text-5xl font-bold bg-gradient-to-r from-purple-600 via-pink-600 to-blue-600 bg-clip-text text-transparent">
                  {Math.round(matchScore.score)}%
                </div>
                <p className="text-sm font-medium text-gray-600 mt-1">
                  ציון התאמה כללי
                </p>
              </div>
            </div>

            {/* Progress Ring */}
            <div className="relative w-32 h-32 mx-auto">
              <svg
                className="w-32 h-32 transform -rotate-90"
                viewBox="0 0 100 100"
              >
                <circle
                  cx="50"
                  cy="50"
                  r="40"
                  stroke="currentColor"
                  strokeWidth="8"
                  fill="transparent"
                  className="text-gray-200"
                />
                <circle
                  cx="50"
                  cy="50"
                  r="40"
                  stroke="url(#gradient)"
                  strokeWidth="8"
                  fill="transparent"
                  strokeDasharray={`${2 * Math.PI * 40}`}
                  strokeDashoffset={`${2 * Math.PI * 40 * (1 - matchScore.score / 100)}`}
                  className="transition-all duration-1000 ease-out"
                  strokeLinecap="round"
                />
                <defs>
                  <linearGradient
                    id="gradient"
                    x1="0%"
                    y1="0%"
                    x2="100%"
                    y2="0%"
                  >
                    <stop offset="0%" stopColor="#8B5CF6" />
                    <stop offset="50%" stopColor="#EC4899" />
                    <stop offset="100%" stopColor="#3B82F6" />
                  </linearGradient>
                </defs>
              </svg>
              <div className="absolute inset-0 flex items-center justify-center">
                <Sparkles className="w-8 h-8 text-purple-500 animate-pulse" />
              </div>
            </div>
          </div>
        </div>

        {/* Match Criteria Section */}
        <div className="space-y-6">
          <div className="text-center">
            <h3 className="text-2xl font-bold text-gray-800 mb-2 flex items-center justify-center gap-3">
              <TrendingUp className="w-6 h-6 text-purple-500" />
              פירוט קריטריונים
            </h3>
            <p className="text-gray-600">ניתוח מפורט של רמות ההתאמה השונות</p>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
            {matchScore.criteria.map((criterion, index) => (
              <div key={criterion.name} className="animate-fade-in-up">
                <MatchCriteriaCard criterion={criterion} index={index} />
              </div>
            ))}
          </div>
        </div>

        {/* Match Reasons Section */}
        {matchScore.reasons.length > 0 && (
          <div className="space-y-4">
            <div className="text-center">
              <h4 className="text-xl font-bold text-gray-800 mb-2 flex items-center justify-center gap-3">
                <Heart className="w-5 h-5 text-red-500" />
                סיבות להתאמה
              </h4>
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              {matchScore.reasons.map((reason, index) => (
                <div
                  key={index}
                  className="flex items-start gap-3 p-4 bg-white/60 backdrop-blur-sm rounded-2xl border border-white/50 shadow-lg hover:shadow-xl transition-all duration-300 group"
                  style={{
                    animationDelay: `${(index + 3) * 150}ms`,
                    animationFillMode: 'both',
                  }}
                >
                  <div className="p-2 rounded-full bg-gradient-to-r from-green-500 to-emerald-500 text-white shadow-lg group-hover:scale-110 transition-transform">
                    <Gift className="w-4 h-4" />
                  </div>
                  <p className="text-gray-700 leading-relaxed font-medium flex-1">
                    {reason}
                  </p>
                </div>
              ))}
            </div>
          </div>
        )}

        {/* Summary Card */}
        <div className="p-6 bg-white/70 backdrop-blur-sm rounded-2xl border border-white/50 shadow-xl">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-4">
              <div className="p-3 rounded-full bg-gradient-to-r from-indigo-500 to-purple-500 text-white shadow-lg">
                <Award className="w-6 h-6" />
              </div>
              <div>
                <h4 className="text-lg font-bold text-gray-800">סיכום התאמה</h4>
                <p className="text-gray-600">המלצה מבוססת ניתוח</p>
              </div>
            </div>

            <div className="text-right">
              <div className="flex items-center gap-2">
                {matchScore.score >= 80 ? (
                  <>
                    <Zap className="w-5 h-5 text-green-500" />
                    <span className="font-bold text-green-600">
                      מומלץ בחום!
                    </span>
                  </>
                ) : matchScore.score >= 60 ? (
                  <>
                    <Star className="w-5 h-5 text-blue-500" />
                    <span className="font-bold text-blue-600">שווה לנסות</span>
                  </>
                ) : (
                  <>
                    <AlertCircle className="w-5 h-5 text-yellow-500" />
                    <span className="font-bold text-yellow-600">
                      צריך שיקול
                    </span>
                  </>
                )}
              </div>
              <p className="text-sm text-gray-500 mt-1">
                מבוסס על {matchScore.criteria.length} קריטריונים
              </p>
            </div>
          </div>
        </div>
      </CardContent>
    </Card>
  );
};

export default MatchPreview;
--- End of Content for MatchPreview.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\app\components\matchmaker\suggestions\NewSuggestionForm\NewSuggestionForm_contents.txt
--------------------------------------------------------------------------------
[This is the output log file itself. Content not included.]

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\app\components\matchmaker\suggestions\NewSuggestionForm\SuggestionDetails.tsx
--------------------------------------------------------------------------------
Content:
// src/app/components/matchmaker/suggestions/NewSuggestionForm/SuggestionDetails.tsx

'use client';
import React, { useState } from 'react';
import { useFormContext } from 'react-hook-form';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select';
import { Card, CardContent } from '@/components/ui/card';
import { Priority } from '@prisma/client';
import { Label } from '@/components/ui/label';
import { Button } from '@/components/ui/button';
import { Textarea } from '@/components/ui/textarea';
import { toast } from 'sonner';
import {
  Loader2,
  Sparkles,
  AlertTriangle,
  Star,
  Flame,
  Target,
  Shield,
  Heart,
  MessageCircle,
  User,
  Calendar,
  Zap,
  Crown,
  Award,
  Gift,
  Clock,
  Wand2,
  Brain,
  Eye,
  Users,
} from 'lucide-react';
import { Alert, AlertDescription } from '@/components/ui/alert';
import type { NewSuggestionFormData } from './schema';
import type { Candidate } from '../../new/types/candidates';
import { cn } from '@/lib/utils';

interface SuggestionDetailsProps {
  firstParty: Candidate;
  secondParty: Candidate;
}

const EnhancedSection: React.FC<{
  icon: React.ElementType;
  title: string;
  description?: string;
  gradient: string;
  children: React.ReactNode;
  className?: string;
}> = ({ icon: Icon, title, description, gradient, children, className }) => (
  <Card
    className={cn(
      'border-0 shadow-xl hover:shadow-2xl transition-all duration-500 group overflow-hidden rounded-3xl',
      'bg-gradient-to-br from-white via-gray-50/30 to-white',
      className
    )}
  >
    {/* Background decoration */}
    <div className="absolute inset-0">
      <div className="absolute top-0 right-0 w-32 h-32 bg-gradient-to-br from-purple-200/20 to-pink-200/20 rounded-full blur-2xl opacity-0 group-hover:opacity-100 transition-opacity duration-700"></div>
      <div className="absolute bottom-0 left-0 w-24 h-24 bg-gradient-to-br from-cyan-200/20 to-blue-200/20 rounded-full blur-xl opacity-0 group-hover:opacity-100 transition-opacity duration-900"></div>
    </div>

    <CardContent className="relative z-10 p-8 space-y-6">
      {/* Header */}
      <div className="flex items-center gap-4 mb-6">
        <div
          className={cn(
            'p-4 rounded-2xl shadow-xl group-hover:scale-110 transition-transform duration-300 bg-gradient-to-r text-white',
            gradient
          )}
        >
          <Icon className="w-8 h-8" />
        </div>
        <div className="flex-1">
          <h3
            className="text-2xl font-bold text-gray-800 group-hover:text-transparent group-hover:bg-gradient-to-r group-hover:bg-clip-text transition-all duration-300"
            style={{
              backgroundImage: `linear-gradient(to right, ${gradient.replace('from-', '').replace('to-', ', ')})`,
            }}
          >
            {title}
          </h3>
          {description && (
            <p className="text-gray-600 mt-1 leading-relaxed">{description}</p>
          )}
        </div>
      </div>

      {children}
    </CardContent>
  </Card>
);

const PriorityBadge: React.FC<{ priority: Priority }> = ({ priority }) => {
  const getPriorityInfo = (p: Priority) => {
    switch (p) {
      case Priority.URGENT:
        return {
          label: 'דחוף',
          icon: Flame,
          className:
            'bg-gradient-to-r from-red-500 to-pink-500 text-white animate-pulse shadow-xl',
          description: 'דורש טיפול מיידי!',
        };
      case Priority.HIGH:
        return {
          label: 'גבוהה',
          icon: Star,
          className:
            'bg-gradient-to-r from-orange-500 to-amber-500 text-white shadow-xl',
          description: 'עדיפות גבוהה',
        };
      case Priority.MEDIUM:
        return {
          label: 'רגילה',
          icon: Target,
          className:
            'bg-gradient-to-r from-blue-500 to-cyan-500 text-white shadow-xl',
          description: 'עדיפות רגילה',
        };
      case Priority.LOW:
        return {
          label: 'נמוכה',
          icon: Shield,
          className:
            'bg-gradient-to-r from-gray-500 to-slate-500 text-white shadow-xl',
          description: 'עדיפות נמוכה',
        };
      default:
        return {
          label: 'רגילה',
          icon: Target,
          className:
            'bg-gradient-to-r from-blue-500 to-cyan-500 text-white shadow-xl',
          description: 'עדיפות רגילה',
        };
    }
  };

  const info = getPriorityInfo(priority);
  const IconComponent = info.icon;

  return (
    <div
      className={cn(
        'flex items-center gap-2 px-4 py-2 rounded-xl font-bold',
        info.className
      )}
    >
      <IconComponent className="w-4 h-4" />
      <span>{info.label}</span>
    </div>
  );
};

const SuggestionDetails: React.FC<SuggestionDetailsProps> = ({
  firstParty,
  secondParty,
}) => {
  const {
    register,
    formState: { errors },
    setValue,
    watch,
  } = useFormContext<NewSuggestionFormData>();
  const [isGeneratingRationale, setIsGeneratingRationale] = useState(false);

  const priority = watch('priority', Priority.MEDIUM);

  const handleGenerateRationale = async () => {
    setIsGeneratingRationale(true);
    toast.info('ה-AI מנסח את חבילת הנימוקים...', {
      description: 'זה יכול לקחת כמה שניות',
      duration: 3000,
    });

    try {
      const response = await fetch('/api/ai/generate-suggestion-rationale', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          userId1: firstParty.id,
          userId2: secondParty.id,
        }),
      });

      const data = await response.json();

      if (!response.ok || !data.success || !data.rationales) {
        throw new Error(data.error || 'שגיאה ביצור הנימוקים');
      }

      const { generalRationale, rationaleForParty1, rationaleForParty2 } =
        data.rationales;

      setValue('matchingReason', generalRationale, {
        shouldValidate: true,
        shouldDirty: true,
      });
      setValue('firstPartyNotes', rationaleForParty1, {
        shouldValidate: true,
        shouldDirty: true,
      });
      setValue('secondPartyNotes', rationaleForParty2, {
        shouldValidate: true,
        shouldDirty: true,
      });

      toast.success('הנימוקים נוצרו בהצלחה!', {
        description: 'כל השדות מולאו באופן אוטומטי עם תוכן מותאם אישית',
        duration: 5000,
      });
    } catch (error) {
      console.error('Failed to generate rationales:', error);
      toast.error(error instanceof Error ? error.message : 'שגיאה לא צפויה', {
        description: 'נסה שוב או מלא את השדות ידנית',
      });
    } finally {
      setIsGeneratingRationale(false);
    }
  };

  return (
    <div className="space-y-8">
      {/* Priority Section */}
      <EnhancedSection
        icon={Crown}
        title="עדיפות ההצעה"
        description="קבע את רמת החשיבות והדחיפות של ההצעה"
        gradient="from-purple-500 to-pink-500"
      >
        <div className="space-y-4">
          <div className="flex items-center justify-between">
            <Label className="text-lg font-semibold text-gray-700">
              בחר רמת עדיפות
            </Label>
            <PriorityBadge priority={priority} />
          </div>

          <Select
            onValueChange={(value: Priority) =>
              setValue('priority', value, { shouldValidate: true })
            }
            defaultValue={priority}
            name="priority"
          >
            <SelectTrigger className="h-14 border-2 border-purple-200 hover:border-purple-300 focus:border-purple-500 rounded-2xl bg-white/80 backdrop-blur-sm shadow-lg transition-all text-lg">
              <SelectValue placeholder="בחר/י עדיפות" />
            </SelectTrigger>
            <SelectContent className="border-0 shadow-2xl rounded-2xl bg-white/95 backdrop-blur-sm">
              <SelectItem value={Priority.URGENT}>
                <div className="flex items-center gap-3 py-2">
                  <Flame className="w-5 h-5 text-red-500" />
                  <div>
                    <div className="font-bold text-red-600">דחופה</div>
                    <div className="text-xs text-red-500">דורש טיפול מיידי</div>
                  </div>
                </div>
              </SelectItem>
              <SelectItem value={Priority.HIGH}>
                <div className="flex items-center gap-3 py-2">
                  <Star className="w-5 h-5 text-orange-500" />
                  <div>
                    <div className="font-bold text-orange-600">גבוהה</div>
                    <div className="text-xs text-orange-500">עדיפות מוגברת</div>
                  </div>
                </div>
              </SelectItem>
              <SelectItem value={Priority.MEDIUM}>
                <div className="flex items-center gap-3 py-2">
                  <Target className="w-5 h-5 text-blue-500" />
                  <div>
                    <div className="font-bold text-blue-600">רגילה</div>
                    <div className="text-xs text-blue-500">עדיפות סטנדרטית</div>
                  </div>
                </div>
              </SelectItem>
              <SelectItem value={Priority.LOW}>
                <div className="flex items-center gap-3 py-2">
                  <Shield className="w-5 h-5 text-gray-500" />
                  <div>
                    <div className="font-bold text-gray-600">נמוכה</div>
                    <div className="text-xs text-gray-500">ללא דחיפות</div>
                  </div>
                </div>
              </SelectItem>
            </SelectContent>
          </Select>

          {errors.priority && (
            <div className="flex items-center gap-2 p-3 bg-gradient-to-r from-red-50 to-pink-50 rounded-xl border border-red-200">
              <AlertTriangle className="w-4 h-4 text-red-500" />
              <p className="text-sm text-red-600 font-medium">
                {errors.priority.message}
              </p>
            </div>
          )}
        </div>
      </EnhancedSection>

      {/* AI-Generated Matching Reason */}
      <EnhancedSection
        icon={Brain}
        title="סיבת ההתאמה הכללית"
        description="נימוק מפורט המסביר מדוע יש התאמה בין הצדדים"
        gradient="from-emerald-500 to-green-500"
      >
        <div className="space-y-6">
          <div className="flex items-center justify-between">
            <Label className="text-lg font-semibold text-gray-700">
              תוכן יוצג לצדדים
            </Label>
            <Button
              type="button"
              onClick={handleGenerateRationale}
              disabled={isGeneratingRationale}
              className="bg-gradient-to-r from-purple-600 via-pink-600 to-blue-600 hover:from-purple-700 hover:via-pink-700 hover:to-blue-700 text-white shadow-xl hover:shadow-2xl transition-all duration-300 rounded-2xl px-6 py-3 font-bold"
            >
              {isGeneratingRationale ? (
                <>
                  <Loader2 className="w-5 h-5 ml-2 animate-spin" />
                  <span>מנסח...</span>
                </>
              ) : (
                <>
                  <Wand2 className="w-5 h-5 ml-2 text-yellow-300" />
                  <span>צור נימוקים (AI)</span>
                </>
              )}
            </Button>
          </div>

          <Textarea
            id="matchingReason"
            {...register('matchingReason')}
            placeholder="נימוק כללי המסביר מדוע יש התאמה בין הצדדים..."
            className="min-h-[140px] border-2 border-emerald-200 hover:border-emerald-300 focus:border-emerald-500 rounded-2xl bg-white/80 backdrop-blur-sm shadow-lg transition-all text-lg resize-none"
          />

          {errors.matchingReason && (
            <div className="flex items-center gap-2 p-3 bg-gradient-to-r from-red-50 to-pink-50 rounded-xl border border-red-200">
              <AlertTriangle className="w-4 h-4 text-red-500" />
              <p className="text-sm text-red-600 font-medium">
                {errors.matchingReason.message}
              </p>
            </div>
          )}

          <Alert className="border-0 bg-gradient-to-r from-blue-50 to-cyan-50 shadow-lg rounded-2xl">
            <Sparkles className="h-5 w-5 text-blue-500" />
            <AlertDescription className="text-blue-800 font-medium leading-relaxed">
              💡 <strong>טיפ חכם:</strong> לחיצה על כפתור ה-AI תמלא אוטומטית את
              שדה זה וגם את שדות ההערות האישיות לכל צד עם תוכן מותאם ומקצועי.
            </AlertDescription>
          </Alert>
        </div>
      </EnhancedSection>

      {/* Personal Notes for Each Party */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
        {/* First Party Notes */}
        <EnhancedSection
          icon={User}
          title={`הערות אישיות ל${firstParty.firstName}`}
          description="טקסט אישי המדגיש את היתרונות של הצד השני עבורו"
          gradient="from-blue-500 to-cyan-500"
          className="lg:col-span-1"
        >
          <div className="space-y-4">
            <div className="flex items-center gap-3 p-4 bg-gradient-to-r from-blue-50 to-cyan-50 rounded-2xl border border-blue-100">
              <div className="w-12 h-12 rounded-full bg-gradient-to-r from-blue-500 to-cyan-500 flex items-center justify-center text-white font-bold shadow-lg">
                {firstParty.firstName[0]}
              </div>
              <div>
                <div className="font-bold text-blue-800">
                  {firstParty.firstName} {firstParty.lastName}
                </div>
                <div className="text-sm text-blue-600">צד א' בהצעה</div>
              </div>
            </div>

            <Textarea
              id="firstPartyNotes"
              {...register('firstPartyNotes')}
              placeholder={`טקסט אישי המדגיש את היתרונות של ${secondParty.firstName} עבור ${firstParty.firstName}...`}
              className="min-h-[160px] border-2 border-blue-200 hover:border-blue-300 focus:border-blue-500 rounded-2xl bg-white/80 backdrop-blur-sm shadow-lg transition-all text-lg resize-none"
            />

            {errors.firstPartyNotes && (
              <div className="flex items-center gap-2 p-3 bg-gradient-to-r from-red-50 to-pink-50 rounded-xl border border-red-200">
                <AlertTriangle className="w-4 h-4 text-red-500" />
                <p className="text-sm text-red-600 font-medium">
                  {errors.firstPartyNotes.message}
                </p>
              </div>
            )}
          </div>
        </EnhancedSection>

        {/* Second Party Notes */}
        <EnhancedSection
          icon={User}
          title={`הערות אישיות ל${secondParty.firstName}`}
          description="טקסט אישי המדגיש את היתרונות של הצד השני עבורה"
          gradient="from-purple-500 to-pink-500"
          className="lg:col-span-1"
        >
          <div className="space-y-4">
            <div className="flex items-center gap-3 p-4 bg-gradient-to-r from-purple-50 to-pink-50 rounded-2xl border border-purple-100">
              <div className="w-12 h-12 rounded-full bg-gradient-to-r from-purple-500 to-pink-500 flex items-center justify-center text-white font-bold shadow-lg">
                {secondParty.firstName[0]}
              </div>
              <div>
                <div className="font-bold text-purple-800">
                  {secondParty.firstName} {secondParty.lastName}
                </div>
                <div className="text-sm text-purple-600">צד ב' בהצעה</div>
              </div>
            </div>

            <Textarea
              id="secondPartyNotes"
              {...register('secondPartyNotes')}
              placeholder={`טקסט אישי המדגיש את היתרונות של ${firstParty.firstName} עבור ${secondParty.firstName}...`}
              className="min-h-[160px] border-2 border-purple-200 hover:border-purple-300 focus:border-purple-500 rounded-2xl bg-white/80 backdrop-blur-sm shadow-lg transition-all text-lg resize-none"
            />

            {errors.secondPartyNotes && (
              <div className="flex items-center gap-2 p-3 bg-gradient-to-r from-red-50 to-pink-50 rounded-xl border border-red-200">
                <AlertTriangle className="w-4 h-4 text-red-500" />
                <p className="text-sm text-red-600 font-medium">
                  {errors.secondPartyNotes.message}
                </p>
              </div>
            )}
          </div>
        </EnhancedSection>
      </div>

      {/* Internal Notes */}
      <EnhancedSection
        icon={MessageCircle}
        title="הערות פנימיות"
        description="הערות והנחיות לשימוש צוות השדכנים בלבד"
        gradient="from-amber-500 to-orange-500"
      >
        <div className="space-y-4">
          <div className="flex items-center gap-3 p-4 bg-gradient-to-r from-amber-50 to-orange-50 rounded-2xl border border-amber-100">
            <div className="p-3 rounded-full bg-gradient-to-r from-amber-500 to-orange-500 text-white shadow-lg">
              <Eye className="w-5 h-5" />
            </div>
            <div>
              <div className="font-bold text-amber-800">מידע סודי</div>
              <div className="text-sm text-amber-600">
                נראה רק לצוות השדכנים
              </div>
            </div>
          </div>

          <Textarea
            id="internalNotes"
            {...register('internalNotes')}
            placeholder="הערות והנחיות לשימוש פנימי בלבד..."
            className="min-h-[120px] border-2 border-amber-200 hover:border-amber-300 focus:border-amber-500 rounded-2xl bg-white/80 backdrop-blur-sm shadow-lg transition-all text-lg resize-none"
          />

          {errors.internalNotes && (
            <div className="flex items-center gap-2 p-3 bg-gradient-to-r from-red-50 to-pink-50 rounded-xl border border-red-200">
              <AlertTriangle className="w-4 h-4 text-red-500" />
              <p className="text-sm text-red-600 font-medium">
                {errors.internalNotes.message}
              </p>
            </div>
          )}
        </div>
      </EnhancedSection>

      {/* Decision Deadline */}
      <EnhancedSection
        icon={Clock}
        title="תאריך יעד להחלטה"
        description="קבע את המועד האחרון למתן תגובה מהצדדים"
        gradient="from-indigo-500 to-purple-500"
      >
        <div className="space-y-4">
          <Label className="text-lg font-semibold text-gray-700">
            בחר תקופת זמן למענה
          </Label>

          <Select
            onValueChange={(value) => {
              const days = parseInt(value, 10);
              const deadline = new Date();
              deadline.setDate(deadline.getDate() + days);
              setValue('decisionDeadline', deadline, { shouldValidate: true });
            }}
            defaultValue="14"
          >
            <SelectTrigger className="h-14 border-2 border-indigo-200 hover:border-indigo-300 focus:border-indigo-500 rounded-2xl bg-white/80 backdrop-blur-sm shadow-lg transition-all text-lg">
              <SelectValue />
            </SelectTrigger>
            <SelectContent className="border-0 shadow-2xl rounded-2xl bg-white/95 backdrop-blur-sm">
              <SelectItem value="3">
                <div className="flex items-center gap-3 py-2">
                  <Zap className="w-5 h-5 text-red-500" />
                  <div>
                    <div className="font-bold text-red-600">3 ימים</div>
                    <div className="text-xs text-red-500">מהיר וזריז</div>
                  </div>
                </div>
              </SelectItem>
              <SelectItem value="7">
                <div className="flex items-center gap-3 py-2">
                  <Award className="w-5 h-5 text-orange-500" />
                  <div>
                    <div className="font-bold text-orange-600">7 ימים</div>
                    <div className="text-xs text-orange-500">תקופה קצרה</div>
                  </div>
                </div>
              </SelectItem>
              <SelectItem value="14">
                <div className="flex items-center gap-3 py-2">
                  <Target className="w-5 h-5 text-blue-500" />
                  <div>
                    <div className="font-bold text-blue-600">14 ימים</div>
                    <div className="text-xs text-blue-500">
                      תקופה סטנדרטית (מומלץ)
                    </div>
                  </div>
                </div>
              </SelectItem>
              <SelectItem value="30">
                <div className="flex items-center gap-3 py-2">
                  <Shield className="w-5 h-5 text-green-500" />
                  <div>
                    <div className="font-bold text-green-600">30 ימים</div>
                    <div className="text-xs text-green-500">תקופה מורחבת</div>
                  </div>
                </div>
              </SelectItem>
            </SelectContent>
          </Select>

          {errors.decisionDeadline && (
            <div className="flex items-center gap-2 p-3 bg-gradient-to-r from-red-50 to-pink-50 rounded-xl border border-red-200">
              <AlertTriangle className="w-4 h-4 text-red-500" />
              <p className="text-sm text-red-600 font-medium">
                {errors.decisionDeadline.message}
              </p>
            </div>
          )}

          <div className="p-4 bg-gradient-to-r from-indigo-50 to-purple-50 rounded-2xl border border-indigo-100">
            <div className="flex items-start gap-3">
              <Calendar className="w-5 h-5 text-indigo-500 mt-1" />
              <div>
                <div className="font-bold text-indigo-800 mb-1">מידע חשוב</div>
                <p className="text-sm text-indigo-700 leading-relaxed">
                  לאחר תקופת הזמן שנבחרה, אם לא התקבלה תגובה מאחד הצדדים, ההצעה
                  תועבר אוטומטית לסטטוס "פג תוקף".
                </p>
              </div>
            </div>
          </div>
        </div>
      </EnhancedSection>

      {/* Summary Card */}
      <Card className="border-0 shadow-2xl bg-gradient-to-br from-gray-50 via-white to-gray-50 rounded-3xl overflow-hidden">
        <CardContent className="p-8">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-4">
              <div className="p-4 rounded-2xl bg-gradient-to-r from-gray-500 to-slate-500 text-white shadow-xl">
                <Users className="w-8 h-8" />
              </div>
              <div>
                <h3 className="text-2xl font-bold text-gray-800">
                  סיכום ההצעה
                </h3>
                <p className="text-gray-600 leading-relaxed">
                  כל הפרטים מוכנים ליצירת ההצעה
                </p>
              </div>
            </div>

            <div className="text-center">
              <div className="flex items-center gap-2 mb-2">
                <Gift className="w-5 h-5 text-purple-500" />
                <span className="font-bold text-purple-600">מוכן ליצירה!</span>
              </div>
              <p className="text-sm text-gray-500">
                לאחר יצירת ההצעה, היא תישלח אוטומטי לצד הראשון
              </p>
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  );
};

export default SuggestionDetails;
--- End of Content for SuggestionDetails.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\app\components\matchmaker\suggestions\NewSuggestionForm\index.tsx
--------------------------------------------------------------------------------
Content:
// src/app/components/matchmaker/suggestions/NewSuggestionForm/index.tsx

'use client';
import React, { useState, useEffect } from 'react';
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription,
  DialogFooter,
  DialogClose,
} from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';
import { toast } from 'sonner';
import { useForm, FormProvider } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { Priority, MatchSuggestionStatus } from '@prisma/client';
import { Separator } from '@/components/ui/separator';
import {
  UserPlus,
  Sparkles,
  Loader2,
  BarChart2,
  CheckCircle,
  Users,
  Heart,
  Crown,
  Zap,
  Star,
  Award,
  Gem,
  Target,
  ArrowRight,
  ArrowLeft,
  Eye,
  X,
  Wand2,
  Gift,
} from 'lucide-react';

// Types
import type { Candidate } from '../../new/types/candidates';
import { newSuggestionSchema, type NewSuggestionFormData } from './schema';

// Components
import SuggestionDetails from './SuggestionDetails';
import MatchPreview from './MatchPreview';
import CandidateSelector from './CandidateSelector';
import { AiMatchAnalysisDialog } from '../../new/dialogs/AiMatchAnalysisDialog';
import { cn } from '@/lib/utils';

interface NewSuggestionFormProps {
  isOpen: boolean;
  onClose: () => void;
  candidates: Candidate[];
  selectedCandidate?: Candidate | null;
  onSubmit: (data: NewSuggestionFormData) => Promise<void>;
}

const StepIndicator: React.FC<{
  currentStep: number;
  totalSteps: number;
  steps: Array<{ label: string; icon: React.ElementType; description: string }>;
}> = ({ currentStep, totalSteps, steps }) => (
  <div className="flex items-center justify-center mb-8">
    <div className="flex items-center gap-4">
      {steps.map((step, index) => {
        const isActive = index === currentStep;
        const isCompleted = index < currentStep;
        const StepIcon = step.icon;

        return (
          <React.Fragment key={index}>
            <div className="flex flex-col items-center">
              <div
                className={cn(
                  'flex items-center justify-center w-16 h-16 rounded-full transition-all duration-500 shadow-lg',
                  isActive &&
                    'bg-gradient-to-r from-purple-600 to-pink-600 text-white scale-110 shadow-2xl',
                  isCompleted &&
                    'bg-gradient-to-r from-green-500 to-emerald-500 text-white shadow-xl',
                  !isActive &&
                    !isCompleted &&
                    'bg-gray-100 text-gray-400 shadow-md'
                )}
              >
                <StepIcon className="w-8 h-8" />
              </div>
              <div className="mt-3 text-center">
                <div
                  className={cn(
                    'text-sm font-bold transition-colors',
                    isActive && 'text-purple-600',
                    isCompleted && 'text-green-600',
                    !isActive && !isCompleted && 'text-gray-400'
                  )}
                >
                  {step.label}
                </div>
                <div className="text-xs text-gray-500 mt-1 max-w-[120px]">
                  {step.description}
                </div>
              </div>
            </div>

            {index < totalSteps - 1 && (
              <div
                className={cn(
                  'w-16 h-1 rounded-full transition-all duration-500 mt-2',
                  index < currentStep
                    ? 'bg-gradient-to-r from-green-500 to-emerald-500'
                    : 'bg-gray-200'
                )}
              />
            )}
          </React.Fragment>
        );
      })}
    </div>
  </div>
);

const NewSuggestionForm: React.FC<NewSuggestionFormProps> = ({
  isOpen,
  onClose,
  candidates,
  selectedCandidate,
  onSubmit,
}) => {
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [firstParty, setFirstParty] = useState<Candidate | null>(null);
  const [secondParty, setSecondParty] = useState<Candidate | null>(null);
  const [showAnalysisDialog, setShowAnalysisDialog] = useState(false);
  const [currentStep, setCurrentStep] = useState(0);

  const steps = [
    {
      label: 'בחירת מועמדים',
      icon: Users,
      description: 'בחר את שני הצדדים להצעה',
    },
    {
      label: 'ניתוח התאמה',
      icon: BarChart2,
      description: 'בדוק את רמת ההתאמה',
    },
    {
      label: 'פרטי ההצעה',
      icon: Heart,
      description: 'הוסף נימוקים ופרטים',
    },
  ];

  const form = useForm<NewSuggestionFormData>({
    resolver: zodResolver(newSuggestionSchema),
    defaultValues: {
      priority: Priority.MEDIUM,
      status: MatchSuggestionStatus.DRAFT,
      decisionDeadline: new Date(new Date().setDate(new Date().getDate() + 14)),
    },
  });

  // Reset form and state when dialog opens or selectedCandidate changes
  useEffect(() => {
    if (isOpen) {
      form.reset({
        priority: Priority.MEDIUM,
        status: MatchSuggestionStatus.DRAFT,
        decisionDeadline: new Date(
          new Date().setDate(new Date().getDate() + 14)
        ),
        firstPartyId: selectedCandidate?.id || '',
        secondPartyId: '',
      });
      setFirstParty(selectedCandidate || null);
      setSecondParty(null);
      setCurrentStep(0);
    }
  }, [isOpen, selectedCandidate, form]);

  const handleCandidateSelect =
    (type: 'first' | 'second') => (candidate: Candidate | null) => {
      const setter = type === 'first' ? setFirstParty : setSecondParty;
      const fieldName = type === 'first' ? 'firstPartyId' : 'secondPartyId';
      setter(candidate);
      form.setValue(fieldName, candidate?.id || '', {
        shouldValidate: true,
        shouldDirty: true,
      });
    };

  const handleNext = () => {
    if (currentStep === 0 && (!firstParty || !secondParty)) {
      toast.error('יש לבחור את שני הצדדים להצעה.');
      return;
    }
    setCurrentStep((prev) => Math.min(prev + 1, steps.length - 1));
  };

  const handlePrevious = () => {
    setCurrentStep((prev) => Math.max(prev - 1, 0));
  };

  const handleSubmit = form.handleSubmit(async (data) => {
    if (!firstParty || !secondParty) {
      toast.error('יש לבחור את שני הצדדים להצעה.');
      return;
    }

    setIsSubmitting(true);
    try {
      await onSubmit(data);
      toast.success('ההצעה נוצרה בהצלחה!', {
        description: 'ההצעה נשלחה אוטומטית לצד הראשון',
        duration: 5000,
      });
      onClose();
    } catch (error) {
      toast.error(
        'שגיאה ביצירת ההצעה: ' +
          (error instanceof Error ? error.message : 'שגיאה לא ידועה')
      );
    } finally {
      setIsSubmitting(false);
    }
  });

  const maleCandidates = candidates.filter((c) => c.profile.gender === 'MALE');
  const femaleCandidates = candidates.filter(
    (c) => c.profile.gender === 'FEMALE'
  );

  const canProceedToNextStep = () => {
    switch (currentStep) {
      case 0:
        return firstParty && secondParty;
      case 1:
        return firstParty && secondParty;
      case 2:
        return true;
      default:
        return false;
    }
  };

  const renderStepContent = () => {
    switch (currentStep) {
      case 0:
        return (
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
            <CandidateSelector
              label="צד א' (גבר)"
              value={firstParty}
              onChange={handleCandidateSelect('first')}
              candidates={maleCandidates}
              otherParty={secondParty}
              fieldName="firstPartyId"
              error={form.formState.errors.firstPartyId?.message}
            />

            <CandidateSelector
              label="צד ב' (אישה)"
              value={secondParty}
              onChange={handleCandidateSelect('second')}
              candidates={femaleCandidates}
              otherParty={firstParty}
              fieldName="secondPartyId"
              error={form.formState.errors.secondPartyId?.message}
            />
          </div>
        );

      case 1:
        if (!firstParty || !secondParty) {
          return (
            <div className="flex items-center justify-center h-64">
              <div className="text-center text-gray-500">
                <Users className="mx-auto h-16 w-16 text-gray-300 mb-4" />
                <p className="text-lg font-medium">
                  יש לבחור תחילה את שני המועמדים
                </p>
              </div>
            </div>
          );
        }

        return (
          <div className="space-y-8">
            <MatchPreview firstParty={firstParty} secondParty={secondParty} />

            <div className="flex justify-center">
              <Button
                type="button"
                variant="outline"
                onClick={() => setShowAnalysisDialog(true)}
                className="bg-gradient-to-r from-indigo-50 to-purple-50 border-2 border-indigo-200 text-indigo-700 hover:bg-gradient-to-r hover:from-indigo-100 hover:to-purple-100 hover:border-indigo-300 rounded-2xl px-8 py-4 font-bold text-lg shadow-lg hover:shadow-xl transition-all duration-300"
              >
                <BarChart2 className="w-6 h-6 ml-3" />
                ניתוח התאמה מלא (AI)
                <Sparkles className="w-5 h-5 mr-2 text-purple-500" />
              </Button>
            </div>
          </div>
        );

      case 2:
        if (!firstParty || !secondParty) {
          return (
            <div className="flex items-center justify-center h-64">
              <div className="text-center text-gray-500">
                <Users className="mx-auto h-16 w-16 text-gray-300 mb-4" />
                <p className="text-lg font-medium">
                  יש לבחור תחילה את שני המועמדים
                </p>
              </div>
            </div>
          );
        }

        return (
          <SuggestionDetails
            firstParty={firstParty}
            secondParty={secondParty}
          />
        );

      default:
        return null;
    }
  };

  return (
    <>
      <Dialog open={isOpen} onOpenChange={onClose}>
        <DialogContent
          className="max-w-7xl w-full min-h-[90vh] flex flex-col p-0 border-0 shadow-2xl rounded-3xl overflow-hidden bg-gradient-to-br from-white via-purple-50/20 to-pink-50/20"
          dir="rtl"
        >
          {/* Enhanced Header */}
          <div className="relative bg-gradient-to-r from-purple-50 via-cyan-50/30 to-emerald-50/20 border-b border-purple-100/50 p-8 flex-shrink-0">
            {/* Background decoration */}
            <div className="absolute inset-0">
              <div className="absolute top-0 right-0 w-64 h-64 bg-gradient-to-br from-purple-200/30 to-pink-200/30 rounded-full blur-3xl"></div>
              <div className="absolute bottom-0 left-0 w-48 h-48 bg-gradient-to-br from-cyan-200/30 to-blue-200/30 rounded-full blur-2xl"></div>
            </div>

            <div className="relative z-10">
              <DialogHeader className="text-center mb-8">
                <div className="flex items-center justify-between mb-6">
                  <div className="flex items-center gap-4">
                    <div className="p-4 rounded-2xl bg-gradient-to-r from-purple-500 to-pink-500 text-white shadow-xl">
                      <UserPlus className="w-10 h-10" />
                    </div>
                    <div className="text-right">
                      <DialogTitle className="text-3xl font-bold bg-gradient-to-r from-purple-600 via-pink-600 to-blue-600 bg-clip-text text-transparent">
                        יצירת הצעת שידוך חדשה
                      </DialogTitle>
                      <DialogDescription className="text-lg text-gray-600 mt-2">
                        בחר שני מועמדים, נתח את ההתאמה והגדר את פרטי ההצעה
                      </DialogDescription>
                    </div>
                  </div>

                  <Button
                    variant="ghost"
                    size="icon"
                    onClick={onClose}
                    className="rounded-full h-12 w-12 text-gray-500 hover:text-gray-700 hover:bg-white/50 backdrop-blur-sm"
                  >
                    <X className="w-6 h-6" />
                  </Button>
                </div>

                <StepIndicator
                  currentStep={currentStep}
                  totalSteps={steps.length}
                  steps={steps}
                />
              </DialogHeader>
            </div>
          </div>

          {/* Content Area */}
          <div className="flex-1 overflow-y-auto p-8">
            <FormProvider {...form}>
              <form onSubmit={handleSubmit} className="h-full">
                <div className="animate-fade-in-up">{renderStepContent()}</div>
              </form>
            </FormProvider>
          </div>

          {/* Enhanced Footer */}
          <div className="border-t border-purple-100 bg-gradient-to-r from-gray-50 to-slate-50 p-6 flex-shrink-0">
            <div className="flex items-center justify-between">
              <div className="flex items-center gap-4">
                {currentStep > 0 && (
                  <Button
                    type="button"
                    variant="outline"
                    onClick={handlePrevious}
                    className="px-6 py-3 border-2 border-gray-300 hover:bg-gray-50 rounded-xl transition-all duration-300 font-bold"
                  >
                    <ArrowRight className="w-5 h-5 ml-2" />
                    חזור
                  </Button>
                )}

                {currentStep < steps.length - 1 ? (
                  <Button
                    type="button"
                    onClick={handleNext}
                    disabled={!canProceedToNextStep()}
                    className="px-8 py-3 bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-700 hover:to-pink-700 text-white shadow-xl hover:shadow-2xl transition-all duration-300 rounded-xl font-bold disabled:opacity-50 disabled:cursor-not-allowed"
                  >
                    המשך
                    <ArrowLeft className="w-5 h-5 mr-2" />
                  </Button>
                ) : (
                  <Button
                    type="submit"
                    onClick={handleSubmit}
                    disabled={isSubmitting || !firstParty || !secondParty}
                    className="px-8 py-3 bg-gradient-to-r from-emerald-600 via-green-600 to-emerald-600 hover:from-emerald-700 hover:via-green-700 hover:to-emerald-700 text-white shadow-xl hover:shadow-2xl transition-all duration-300 rounded-xl font-bold disabled:opacity-50 disabled:cursor-not-allowed"
                  >
                    {isSubmitting ? (
                      <>
                        <Loader2 className="w-5 h-5 ml-2 animate-spin" />
                        יוצר הצעה...
                      </>
                    ) : (
                      <>
                        <Gift className="w-5 h-5 ml-2" />
                        צור הצעה
                        <Sparkles className="w-4 h-4 mr-2" />
                      </>
                    )}
                  </Button>
                )}
              </div>

              <div className="text-sm text-gray-500 space-y-1">
                <div className="flex items-center gap-2">
                  <Crown className="w-4 h-4 text-purple-500" />
                  <span>
                    שלב {currentStep + 1} מתוך {steps.length}
                  </span>
                </div>
                <p className="text-xs">
                  לאחר יצירת ההצעה, היא תופיע בסטטוס טיוטה.
                </p>
              </div>
            </div>
          </div>
        </DialogContent>
      </Dialog>

      {firstParty && secondParty && (
        <AiMatchAnalysisDialog
          isOpen={showAnalysisDialog}
          onClose={() => setShowAnalysisDialog(false)}
          targetCandidate={firstParty}
          comparisonCandidates={[secondParty]}
        />
      )}
    </>
  );
};

export default NewSuggestionForm;
--- End of Content for index.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\app\components\matchmaker\suggestions\NewSuggestionForm\schema.ts
--------------------------------------------------------------------------------
Content:
import { z } from "zod";
import { addDays, isBefore } from 'date-fns';

// Validation rules

const MIN_DECISION_DAYS = 1;
const MAX_DECISION_DAYS = 30;

// Helper function to validate dates
const isValidDeadlineDate = (date: Date | null | undefined, minDays: number, maxDays: number) => {
  if (!date) return false;
  
  const today = new Date();
  const minDate = addDays(today, minDays);
  const maxDate = addDays(today, maxDays);
  
  return !isBefore(date, minDate) && !isBefore(maxDate, date);
};

// Schema for new suggestion
export const newSuggestionSchema = z.object({
  firstPartyId: z.string({
    required_error: "יש לבחור מועמד/ת ראשון/ה",
  }),
  
  secondPartyId: z.string({
    required_error: "יש לבחור מועמד/ת שני/ה",
  }),
  
  priority: z.enum(['LOW', 'MEDIUM', 'HIGH', 'URGENT'] as const, {
    required_error: "יש לבחור רמת עדיפות",
  }),

  status: z.enum([
    'DRAFT',
    'PENDING_FIRST_PARTY',
    'FIRST_PARTY_APPROVED',
    'FIRST_PARTY_DECLINED',
    'PENDING_SECOND_PARTY',
    'SECOND_PARTY_APPROVED',
    'SECOND_PARTY_DECLINED',
    'AWAITING_MATCHMAKER_APPROVAL',
    'CONTACT_DETAILS_SHARED',
    'AWAITING_FIRST_DATE_FEEDBACK',
    'THINKING_AFTER_DATE',
    'PROCEEDING_TO_SECOND_DATE',
    'ENDED_AFTER_FIRST_DATE',
    'MEETING_PENDING',
    'MEETING_SCHEDULED',
    'MATCH_APPROVED',
    'MATCH_DECLINED',
    'DATING',
    'ENGAGED',
    'MARRIED',
    'EXPIRED',
    'CLOSED',
    'CANCELLED'
  ] as const, {
    required_error: "יש לבחור סטטוס",
  }).default('DRAFT'),

  matchingReason: z.string()
    .max(500, "סיבת ההתאמה לא יכולה להכיל יותר מ-500 תווים")
    .optional(),

  internalNotes: z.string()
    .max(1000, "ההערות הפנימיות לא יכולות להכיל יותר מ-1000 תווים")
    .optional(),

  firstPartyNotes: z.string()
    .max(500, "ההערות לצד א' לא יכולות להכיל יותר מ-500 תווים")
    .optional(),

  secondPartyNotes: z.string()
    .max(500, "ההערות לצד ב' לא יכולות להכיל יותר מ-500 תווים")
    .optional(),


  decisionDeadline: z.date({
    required_error: "יש לבחור תאריך יעד להחלטה ",
  })
}).refine(
  (data) => data.firstPartyId !== data.secondPartyId,
  {
    message: "לא ניתן ליצור הצעה עבור אותו מועמד",
    path: ["secondPartyId"]
  }

).refine(
  (data) => isValidDeadlineDate(data.decisionDeadline, MIN_DECISION_DAYS, MAX_DECISION_DAYS),
  {
    message: `תאריך היעד להחלטה סופית חייב להיות בין ${MIN_DECISION_DAYS} ל-${MAX_DECISION_DAYS} ימים מהיום`,
    path: ["decisionDeadline"]
  }
);

export type NewSuggestionFormData = z.infer<typeof newSuggestionSchema>;

// Status mapping for display
export const suggestionStatusMap = {
  DRAFT: "טיוטה",
  PENDING_FIRST_PARTY: "ממתין לתשובת צד א'",
  FIRST_PARTY_APPROVED: "צד א' אישר",
  FIRST_PARTY_DECLINED: "צד א' דחה",
  PENDING_SECOND_PARTY: "ממתין לתשובת צד ב'",
  SECOND_PARTY_APPROVED: "צד ב' אישר",
  SECOND_PARTY_DECLINED: "צד ב' דחה",
  AWAITING_MATCHMAKER_APPROVAL: "ממתין לאישור שדכן",
  CONTACT_DETAILS_SHARED: "פרטי קשר הועברו",
  AWAITING_FIRST_DATE_FEEDBACK: "ממתין למשוב פגישה ראשונה",
  THINKING_AFTER_DATE: "בשלב מחשבה אחרי פגישה",
  PROCEEDING_TO_SECOND_DATE: "ממשיכים לפגישה שנייה",
  ENDED_AFTER_FIRST_DATE: "הסתיים אחרי פגישה ראשונה",
  MEETING_PENDING: "ממתין לקביעת פגישה",
  MEETING_SCHEDULED: "פגישה נקבעה",
  MATCH_APPROVED: "ההצעה אושרה",
  MATCH_DECLINED: "ההצעה נדחתה",
  DATING: "בתהליך היכרות",
  ENGAGED: "מאורסים",
  MARRIED: "נישאו",
  EXPIRED: "פג תוקף",
  CLOSED: "ההצעה נסגרה",
  CANCELLED: "ההצעה בוטלה"
} as const;

// Priority mapping for display
export const priorityMap = {
  LOW: { label: "נמוכה", color: "text-gray-500" },
  MEDIUM: { label: "רגילה", color: "text-blue-500" },
  HIGH: { label: "גבוהה", color: "text-yellow-500" },
  URGENT: { label: "דחופה", color: "text-red-500" }
} as const;
--- End of Content for schema.ts ---

