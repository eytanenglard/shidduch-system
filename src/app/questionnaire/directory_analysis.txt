מבנה התיקייה:
questionnaire
  complete
    page.tsx
  page.tsx
  restore
    page.tsx

תוכן הקבצים:

==================================================
Contents of C:\Users\eytan\Desktop\שידוכים\shidduch-system\src\app\questionnaire\page.tsx:
==================================================
// page.tsx
"use client";

import { useSession } from "next-auth/react";
import { useState } from "react";
import { useRouter } from "next/navigation";
import { Card, CardHeader, CardTitle, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import Link from "next/link";
import { ArrowLeft, AlertCircle } from "lucide-react";
import { Alert, AlertDescription } from "@/components/ui/alert";
import MatchmakingQuestionnaire from "@/components/questionnaire/MatchmakingQuestionnaire";

export default function QuestionnairePage() {
  const { data: session, status } = useSession();
  const router = useRouter();
  const [showQuestionnaire, setShowQuestionnaire] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [isLoading, setIsLoading] = useState(false);

  const handleComplete = async () => {
    try {
      await router.push("/questionnaire/complete");
    } catch (err) {
      console.error("Error completing questionnaire:", err);
      setError("אירעה שגיאה בסיום השאלון. אנא נסה שוב.");
    }
  };

  if (status === "loading") {
    return (
      <div className="container mx-auto py-8 px-4">
        <Card className="max-w-4xl mx-auto">
          <CardContent className="p-8">
            <div className="text-center">טוען...</div>
          </CardContent>
        </Card>
      </div>
    );
  }

  return (
    <div className="container mx-auto py-8 px-4">
      <Card className="max-w-4xl mx-auto">
        <CardHeader className="text-center">
          <CardTitle className="text-3xl font-bold">שאלון התאמה</CardTitle>
          <p className="text-gray-600 mt-2">
            המידע שתספק/י יעזור לנו למצוא את ההתאמה המיטבית עבורך
          </p>
        </CardHeader>

        <CardContent>
          {error && (
            <Alert variant="destructive" className="mb-4">
              <AlertCircle className="h-4 w-4" />
              <AlertDescription>{error}</AlertDescription>
            </Alert>
          )}

          {!showQuestionnaire ? (
            <div className="text-center space-y-6">
              <div className="space-y-2 text-gray-600">
                <p>ברוכים הבאים לשאלון ההתאמה שלנו!</p>
                <p>
                  השאלון מסייע לנו להכיר אותך טוב יותר ולמצוא את ההתאמות הטובות
                  ביותר עבורך.
                </p>
                <p>זמן מילוי משוער: 20-30 דקות</p>
                <p>ניתן לשמור את ההתקדמות ולחזור בכל עת</p>
              </div>

              <div className="space-y-4">
                {!session ? (
                  <div className="p-4 bg-blue-50 rounded-lg">
                    <p className="text-blue-800 mb-4">
                      מומלץ להתחבר למערכת לפני מילוי השאלון כדי לשמור את התשובות
                      שלך
                    </p>
                    <div className="flex gap-4 justify-center">
                      <Link href="/auth/register">
                        <Button>הרשמה</Button>
                      </Link>
                      <Link href="/auth/signin">
                        <Button variant="outline">התחברות</Button>
                      </Link>
                    </div>
                  </div>
                ) : null}

                <Button
                  size="lg"
                  onClick={() => setShowQuestionnaire(true)}
                  className="mt-4"
                  disabled={isLoading}
                >
                  {isLoading ? "טוען..." : "התחל בשאלון"}
                  <ArrowLeft className="mr-2 h-5 w-5" />
                </Button>
              </div>
            </div>
          ) : (
            <MatchmakingQuestionnaire
              userId={session?.user?.id}
              onComplete={handleComplete}
            />
          )}
        </CardContent>
      </Card>
    </div>
  );
}

==================================================
Contents of C:\Users\eytan\Desktop\שידוכים\shidduch-system\src\app\questionnaire\complete\page.tsx:
==================================================
// app/questionnaire/complete/page.tsx
"use client";

import { useEffect } from "react";
import { useRouter } from "next/navigation";
import { useSession } from "next-auth/react";
import { Card, CardHeader, CardTitle, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Alert, AlertDescription } from "@/components/ui/alert";
import { CheckCircle2, ArrowRight } from "lucide-react";

export default function QuestionnairePage() {
  const { data: session, status } = useSession();
  const router = useRouter();

  useEffect(() => {
    if (status === "unauthenticated") {
      router.push("/auth/signin");
    }
  }, [status, router]);

  if (status === "loading") {
    return (
      <div className="container mx-auto py-8 px-4">
        <Card className="max-w-xl mx-auto">
          <CardContent className="p-8">
            <div className="text-center">טוען...</div>
          </CardContent>
        </Card>
      </div>
    );
  }

  return (
    <div className="container mx-auto py-8 px-4">
      <Card className="max-w-xl mx-auto bg-green-50 border-green-200">
        <CardHeader className="text-center pb-2">
          <div className="flex justify-center mb-4">
            <CheckCircle2 className="w-12 h-12 text-green-500" />
          </div>
          <CardTitle className="text-2xl">תודה על מילוי השאלון!</CardTitle>
        </CardHeader>

        <CardContent className="space-y-6 pt-4">
          <div className="text-center text-gray-600 space-y-2">
            <p>התשובות שלך נשמרו בהצלחה במערכת</p>
            <p>הצוות שלנו יעבור על התשובות ויחזור אליך בהקדם</p>
          </div>

          <Alert className="bg-blue-50 border-blue-200">
            <AlertDescription>
              בזמן שהצוות עובד על ההתאמות עבורך, תוכל/י להשלים את הפרופיל האישי
              שלך
            </AlertDescription>
          </Alert>

          <div className="flex justify-center pt-4">
            <Button
              onClick={() => router.push("/profile")}
              className="flex items-center"
            >
              המשך לפרופיל
              <ArrowRight className="mr-2 h-5 w-5" />
            </Button>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}


==================================================
Contents of C:\Users\eytan\Desktop\שידוכים\shidduch-system\src\app\questionnaire\restore\page.tsx:
==================================================
import { useEffect, useState } from 'react';
import { useRouter } from 'next/navigation';
import { useSession } from 'next-auth/react';
import { Alert, AlertDescription } from "@/components/ui/alert";
import { Card, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Loader2 } from "lucide-react";

export default function QuestionnaireRestore() {
  const router = useRouter();
  const { data: session } = useSession();
  const [isProcessing, setIsProcessing] = useState(false);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    const restoreQuestionnaire = async () => {
      try {
        setIsProcessing(true);
        const savedData = localStorage.getItem('tempQuestionnaire');
        
        if (!savedData || !session?.user?.id) {
          router.push('/dashboard');
          return;
        }

        const questionnaireData = JSON.parse(savedData);
        // עדכון ה-userId לפי המשתמש שהתחבר
        questionnaireData.userId = session.user.id;

        const response = await fetch('/api/questionnaire', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(questionnaireData),
        });

        if (!response.ok) {
          throw new Error('Failed to save questionnaire');
        }

        // מחיקת הנתונים הזמניים מ-localStorage
        localStorage.removeItem('tempQuestionnaire');
        
        // ניווט לדף המתאים בהתאם למצב השאלון
        if (questionnaireData.completed) {
          router.push('/dashboard');
        } else {
          router.push('/questionnaire');
        }

      } catch (err) {
        console.error('Error restoring questionnaire:', err);
        setError('אירעה שגיאה בשחזור הנתונים. אנא נסה שוב.');
      } finally {
        setIsProcessing(false);
      }
    };

    if (session?.user) {
      restoreQuestionnaire();
    }
  }, [session, router]);

  if (error) {
    return (
      <div className="container mx-auto p-4 max-w-md">
        <Alert variant="destructive">
          <AlertDescription>{error}</AlertDescription>
        </Alert>
        <div className="mt-4 flex justify-center">
          <Button onClick={() => router.push('/questionnaire')}>
            חזור לשאלון
          </Button>
        </div>
      </div>
    );
  }

  return (
    <div className="container mx-auto p-4 max-w-md">
      <Card>
        <CardContent className="p-6 text-center">
          <Loader2 className="w-8 h-8 animate-spin mx-auto mb-4" />
          <p className="text-lg">משחזר את נתוני השאלון...</p>
          <p className="text-sm text-gray-500 mt-2">אנא המתן</p>
        </CardContent>
      </Card>
    </div>
  );
}
