################################################################################
# Directory Content Map For: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\app\auth
# Generated on: 2025-08-07 18:49:12
################################################################################

================================================================================
Directory: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\app\auth
================================================================================

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\app\auth\auth_contents.txt
--------------------------------------------------------------------------------
[This is the output log file itself. Content not included.]

================================================================================
Directory: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\app\auth\error
================================================================================

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\app\auth\error\page.tsx
--------------------------------------------------------------------------------
Content:
"use client";

import { useSearchParams } from "next/navigation";
import { Card, CardHeader, CardTitle, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { useRouter } from "next/navigation";

export default function ErrorPage() {
  const searchParams = useSearchParams();
  const error = searchParams.get("error");
  const router = useRouter();

  const getErrorMessage = (error: string) => {
    switch (error) {
      case "Signin":
        return "נסה להתחבר שוב";
      case "OAuthSignin":
        return "נסה להתחבר שוב";
      case "OAuthCallback":
        return "שגיאה בתהליך ההתחברות";
      case "OAuthCreateAccount":
        return "שגיאה ביצירת החשבון";
      case "EmailCreateAccount":
        return "שגיאה ביצירת החשבון";
      case "Callback":
        return "שגיאה בתהליך ההתחברות";
      case "OAuthAccountNotLinked":
        return "החשבון כבר מקושר למשתמש אחר";
      case "EmailSignin":
        return "בדוק את תיבת הדואר שלך";
      case "CredentialsSignin":
        return "פרטי ההתחברות שגויים";
      default:
        return "שגיאה בתהליך ההתחברות";
    }
  };

  return (
    <div className="min-h-screen flex items-center justify-center">
      <Card className="w-full max-w-md">
        <CardHeader>
          <CardTitle className="text-2xl font-bold text-red-600">
            שגיאה
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <p className="text-gray-600">
            {error ? getErrorMessage(error) : "שגיאה לא ידועה"}
          </p>
          <Button
            onClick={() => router.push("/auth/signin")}
            className="w-full"
          >
            חזרה לדף ההתחברות
          </Button>
        </CardContent>
      </Card>
    </div>
  );
}
--- End of Content for page.tsx ---

================================================================================
Directory: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\app\auth\forgot-password
================================================================================

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\app\auth\forgot-password\page.tsx
--------------------------------------------------------------------------------
Content:
// src/app/auth/forgot-password/page.tsx
import ForgotPasswordForm from "@/app/components/auth/ForgotPasswordForm";
import { ArrowLeft } from "lucide-react"; // Assuming you use lucide-react
import Link from "next/link";

export default function ForgotPasswordPage() {
  return (
    <div className="min-h-screen flex flex-col items-center justify-center bg-gradient-to-br from-cyan-50 via-white to-pink-50 p-4 sm:p-8">
        <Link
            href="/"
            className="absolute top-4 left-4 rtl:right-4 rtl:left-auto text-gray-600 hover:text-gray-800 transition-colors flex items-center gap-1 text-sm z-20"
        >
            <ArrowLeft className="h-4 w-4 transform rtl:rotate-180" /> {/* Corrected for RTL if needed */}
            חזרה לדף הבית
        </Link>
      <ForgotPasswordForm />
    </div>
  );
}
--- End of Content for page.tsx ---

================================================================================
Directory: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\app\auth\register
================================================================================

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\app\auth\register\page.tsx
--------------------------------------------------------------------------------
Content:
import RegisterSteps from "@/app/components/auth/RegisterSteps";

export default function RegisterPage() {
  return <RegisterSteps />;
}
--- End of Content for page.tsx ---

================================================================================
Directory: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\app\auth\reset-password
================================================================================

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\app\auth\reset-password\page.tsx
--------------------------------------------------------------------------------
Content:
// src/app/auth/reset-password/page.tsx
import ResetPasswordForm from "@/app/components/auth/ResetPasswordForm";
import { ArrowLeft } from "lucide-react";
import Link from "next/link";
import { Suspense } from "react"; // Import Suspense

// A wrapper component to allow useSearchParams in a Client Component
function ResetPasswordPageContent() {
    return <ResetPasswordForm />;
}

export default function ResetPasswordPage() {
  return (
    <div className="min-h-screen flex flex-col items-center justify-center bg-gradient-to-br from-cyan-50 via-white to-pink-50 p-4 sm:p-8">
      <Link
        href="/"
        className="absolute top-4 left-4 rtl:right-4 rtl:left-auto text-gray-600 hover:text-gray-800 transition-colors flex items-center gap-1 text-sm z-20"
      >
        <ArrowLeft className="h-4 w-4 transform rtl:rotate-180" />
        חזרה לדף הבית
      </Link>
      {/* Wrap the client component that uses useSearchParams with Suspense */}
      <Suspense fallback={<div>טוען...</div>}>
        <ResetPasswordPageContent />
      </Suspense>
    </div>
  );
}
--- End of Content for page.tsx ---

================================================================================
Directory: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\app\auth\setup-account
================================================================================

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\app\auth\setup-account\page.tsx
--------------------------------------------------------------------------------
Content:
// src/app/auth/setup-account/page.tsx
"use client";

import React, { useState, useEffect, Suspense } from 'react';
import { useSearchParams, useRouter } from 'next/navigation';
import { Card, CardContent, CardHeader, CardTitle, CardDescription, CardFooter } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { toast } from 'sonner';
import { Loader2, KeyRound, CheckCircle } from "lucide-react";

function SetupAccountForm() {
  const searchParams = useSearchParams();
  const router = useRouter(); 
  
  const [token, setToken] = useState<string | null>(null);
  const [password, setPassword] = useState('');
  const [confirmPassword, setConfirmPassword] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState('');
  const [success, setSuccess] = useState(false);

  useEffect(() => {
    const tokenFromUrl = searchParams.get('token');
    if (tokenFromUrl) {
      setToken(tokenFromUrl);
    } else {
      setError("קישור הגדרת החשבון אינו תקין או חסר. אנא השתמש בקישור שנשלח אליך במייל.");
    }
  }, [searchParams]);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setError('');

    if (password.length < 8) {
      setError("הסיסמה חייבת להכיל לפחות 8 תווים.");
      return;
    }
    if (password !== confirmPassword) {
      setError("הסיסמאות אינן תואמות.");
      return;
    }
    
    setIsLoading(true);

    try {
      const response = await fetch('/api/auth/complete-setup', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ token, password }),
      });

      const result = await response.json();

      if (!response.ok || !result.success) {
        throw new Error(result.error || 'שגיאה בהגדרת החשבון.');
      }

      setSuccess(true);
      toast.success("החשבון הוגדר בהצלחה! הנך מועבר/ת להשלמת הפרופיל.");

      // --- START: התיקון המרכזי ---
      // נשתמש ב-window.location.assign כדי לכפות רענון מלא והפניה.
      // זה מבטיח שה-Middleware יקבל את הסשן המעודכן ביותר.
      // נוסיף השהיה קטנה כדי שהמשתמש יראה את הודעת ההצלחה.
      setTimeout(() => {
        window.location.assign('/profile'); 
      }, 1500); // 1.5 שניות
      // --- END: התיקון המרכזי ---

    } catch (err) {
      setError(err instanceof Error ? err.message : 'אירעה שגיאה בלתי צפויה.');
      setIsLoading(false); 
    }
  };
  
  if (success) {
    return (
        <Card className="w-full max-w-md mx-auto text-center">
            <CardHeader>
                <div className="mx-auto bg-green-100 rounded-full p-3 w-fit">
                    <CheckCircle className="h-10 w-10 text-green-600" />
                </div>
                <CardTitle className="mt-4">החשבון הוגדר בהצלחה!</CardTitle>
            </CardHeader>
            <CardContent>
                <p className="text-muted-foreground">הסיסמה נקבעה. הנך מועבר/ת אוטומטית לשלב הבא של השלמת הפרופיל.</p>
                <Loader2 className="mt-4 h-6 w-6 animate-spin mx-auto" />
            </CardContent>
        </Card>
    );
  }

  return (
    <Card className="w-full max-w-md mx-auto">
      <CardHeader>
        <CardTitle>הגדרת חשבון וקביעת סיסמה</CardTitle>
        <CardDescription>
          שלב אחרון לפני שתוכל/י להתחיל. אנא בחר/י סיסמה לחשבונך.
        </CardDescription>
      </CardHeader>
      <CardContent>
        {!token ? (
            <div className="text-red-500 text-center p-4 bg-red-50 rounded-md">{error}</div>
        ) : (
            <form onSubmit={handleSubmit} className="space-y-4">
            <div>
                <Label htmlFor="password">סיסמה חדשה</Label>
                <Input
                id="password"
                type="password"
                value={password}
                onChange={(e) => setPassword(e.target.value)}
                required
                />
                <p className="text-xs text-muted-foreground mt-1">לפחות 8 תווים, כולל אותיות ומספרים.</p>
            </div>
            <div>
                <Label htmlFor="confirmPassword">אישור סיסמה</Label>
                <Input
                id="confirmPassword"
                type="password"
                value={confirmPassword}
                onChange={(e) => setConfirmPassword(e.target.value)}
                required
                />
            </div>
            {error && <p className="text-sm font-medium text-destructive">{error}</p>}
             <CardFooter className="p-0 pt-4">
                 <Button type="submit" className="w-full" disabled={isLoading}>
                    {isLoading ? <Loader2 className="mr-2 h-4 w-4 animate-spin" /> : <KeyRound className="mr-2 h-4 w-4" />}
                    {isLoading ? 'מגדיר סיסמה...' : 'הגדר סיסמה והמשך'}
                </Button>
            </CardFooter>
            </form>
        )}
      </CardContent>
    </Card>
  );
}

// Suspense Boundary for useSearchParams
export default function SetupAccountPage() {
    return (
        <div className="flex items-center justify-center min-h-screen bg-gray-100 p-4">
            <Suspense fallback={<Loader2 className="h-8 w-8 animate-spin" />}>
                <SetupAccountForm />
            </Suspense>
        </div>
    );
}
--- End of Content for page.tsx ---

================================================================================
Directory: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\app\auth\signin
================================================================================

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\app\auth\signin\page.tsx
--------------------------------------------------------------------------------
Content:
"use client";

import { useState, useEffect } from "react";
import { useRouter, useSearchParams } from "next/navigation";
import { signIn } from "next-auth/react";
import { useSession } from "next-auth/react";
import { SessionProvider } from "next-auth/react";
import { Button } from "@/components/ui/button";
import { Mail, Lock, AlertCircle, ArrowLeft } from "lucide-react";
import Link from "next/link";

// Signin form component
const SignInForm = () => {
  const router = useRouter();
  const searchParams = useSearchParams();
  const { data: session, status } = useSession();
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [error, setError] = useState("");
  const [isLoading, setIsLoading] = useState(false);
  const [isGoogleLoading, setIsGoogleLoading] = useState(false);

  // Get error message from URL if exists
  useEffect(() => {
    const errorMessage = searchParams.get("error");
    if (errorMessage) {
      switch (errorMessage) {
        case "CredentialsSignin":
          setError("אימייל או סיסמה אינם נכונים");
          break;
        default:
          setError("אירעה שגיאה, נסה שנית");
      }
    }
  }, [searchParams]);

  // If user is already logged in, redirect to profile
  useEffect(() => {
    if (session?.user) {
      router.push("/profile");
    }
  }, [session, router]);

  // Handle email/password sign in
  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();

    if (!email || !password) {
      setError("אנא הזן אימייל וסיסמה");
      return;
    }

    try {
      setError("");
      setIsLoading(true);

      const result = await signIn("credentials", {
        email,
        password,
        redirect: false,
      });

      if (result?.error) {
        setError("אימייל או סיסמה אינם נכונים");
        console.error("Sign-in error:", result.error);
      } else {
        router.push("/profile");
      }
    } catch (err) {
      console.error("Unexpected sign-in error:", err);
      setError("אירעה שגיאה בהתחברות, נסה שנית");
    } finally {
      setIsLoading(false);
    }
  };

  // Handle Google sign in
 const handleGoogleSignIn = async () => {
    try {
      setIsGoogleLoading(true);
      setError("");

      // Store this information for potential fallback
      localStorage.setItem("signin_started", "true");

      // NextAuth will handle the redirect. The 'redirect' callback in authOptions will determine the final destination.
      // --- START: התיקון ---
      await signIn("google"); // הסרנו את callbackUrl
      // --- END: התיקון ---
    } catch (error) {
      console.error("Google sign-in error:", error);
      setError("אירעה שגיאה בהתחברות עם גוגל");
      setIsGoogleLoading(false);
    }
  };

  if (status === "loading") {
    return (
      <div className="min-h-screen flex flex-col items-center justify-center bg-gradient-to-br from-cyan-50 via-white to-pink-50 p-4">
        <div className="mb-4 w-16 h-16 border-4 border-t-4 border-cyan-500 border-t-pink-500 rounded-full animate-spin"></div>
        <h2 className="text-xl font-medium text-gray-700">טוען...</h2>
      </div>
    );
  }

  return (
    <div className="min-h-screen flex flex-col items-center justify-center bg-gradient-to-br from-cyan-50 via-white to-pink-50 p-4">
      {/* Back to home button */}
      <button
        onClick={() => router.push("/")}
        className="absolute top-4 left-4 text-gray-600 hover:text-gray-800 transition-colors flex items-center gap-1 text-sm"
      >
        <ArrowLeft className="h-4 w-4" />
        חזרה לדף הבית
      </button>

      <div className="w-full max-w-md bg-white rounded-xl shadow-xl overflow-hidden relative">
        {/* Decorative elements */}
        <div className="absolute top-0 left-0 right-0 h-2 bg-gradient-to-r from-cyan-500 to-pink-500"></div>

        <div className="p-6 sm:p-8">
          <div className="text-center mb-6">
            <h1 className="text-2xl font-bold text-gray-800 mb-2">
              התחברות למערכת
            </h1>
            <p className="text-gray-600">
              ברוכים השבים! המשיכו למצוא את השידוך המושלם
            </p>
          </div>

          {error && (
            <div className="mb-4 p-3 bg-red-50 border border-red-200 rounded-lg flex items-center gap-2">
              <AlertCircle className="h-5 w-5 text-red-500 flex-shrink-0" />
              <p className="text-red-600 text-sm">{error}</p>
            </div>
          )}

          <form onSubmit={handleSubmit} className="space-y-4 mb-6">
            <div className="space-y-1">
              <label
                htmlFor="email"
                className="block text-sm font-medium text-gray-700"
              >
                אימייל
              </label>
              <div className="relative">
                <Mail className="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-5 w-5" />
                <input
                  type="email"
                  id="email"
                  value={email}
                  onChange={(e) => setEmail(e.target.value)}
                  className="w-full pr-10 pl-3 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-cyan-200 focus:border-cyan-500 focus:outline-none"
                  placeholder="you@example.com"
                />
              </div>
            </div>

            <div className="space-y-1">
              <label
                htmlFor="password"
                className="block text-sm font-medium text-gray-700"
              >
                סיסמה
              </label>
              <div className="relative">
                <Lock className="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-5 w-5" />
                <input
                  type="password"
                  id="password"
                  value={password}
                  onChange={(e) => setPassword(e.target.value)}
                  className="w-full pr-10 pl-3 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-cyan-200 focus:border-cyan-500 focus:outline-none"
                  placeholder="הסיסמה שלך"
                />
              </div>
              <div className="flex justify-end">
                <Link
                  href="/auth/forgot-password"
                  className="text-sm text-cyan-600 hover:text-cyan-700 hover:underline mt-1"
                >
                  שכחת סיסמה?
                </Link>
              </div>
            </div>

            <Button
              type="submit"
              disabled={isLoading}
              className="w-full py-3 bg-gradient-to-r from-cyan-500 to-pink-500 hover:from-cyan-600 hover:to-pink-600 shadow-lg flex items-center justify-center gap-2 relative overflow-hidden"
            >
              {isLoading ? (
                <>
                  <div className="h-4 w-4 border-2 border-white border-t-transparent rounded-full animate-spin"></div>
                  מתחבר...
                </>
              ) : (
                <>
                  {/* Button shimmer effect */}
                  <span className="absolute inset-0 w-full h-full bg-gradient-to-r from-white/0 via-white/30 to-white/0 transform -translate-x-full group-hover:animate-shimmer"></span>
                  <span>התחברות</span>
                </>
              )}
            </Button>
          </form>

          <div className="relative mb-6">
            <div className="absolute inset-0 flex items-center">
              <div className="w-full border-t border-gray-300" />
            </div>
            <div className="relative flex justify-center text-sm">
              <span className="px-2 bg-white text-gray-500">או</span>
            </div>
          </div>

          <Button
            onClick={handleGoogleSignIn}
            disabled={isGoogleLoading}
            variant="outline"
            size="lg"
            className="w-full relative border-2 border-gray-300 hover:border-gray-400 py-3 rounded-xl flex items-center justify-center gap-3 group"
          >
            {isGoogleLoading ? (
              <div className="animate-spin h-5 w-5 border-2 border-gray-500 rounded-full border-t-transparent" />
            ) : (
              <>
                <svg className="h-5 w-5" viewBox="0 0 24 24" aria-hidden="true">
                  <path
                    d="M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z"
                    fill="#4285F4"
                  />
                  <path
                    d="M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z"
                    fill="#34A853"
                  />
                  <path
                    d="M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z"
                    fill="#FBBC05"
                  />
                  <path
                    d="M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z"
                    fill="#EA4335"
                  />
                </svg>
                <span className="text-gray-700 font-medium">
                  התחברות עם Google
                </span>
              </>
            )}
          </Button>

          <div className="mt-6 text-center">
            <p className="text-gray-600 text-sm">
              אין לך חשבון עדיין?{" "}
              <Link
                href="/auth/register"
                className="text-cyan-600 font-medium hover:text-cyan-700 hover:underline"
              >
                הרשמה עכשיו
              </Link>
            </p>
          </div>
        </div>
      </div>
    </div>
  );
};

// Export the page with provider
export default function SignInPage() {
  return (
    <SessionProvider>
      <SignInForm />
    </SessionProvider>
  );
}
--- End of Content for page.tsx ---

================================================================================
Directory: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\app\auth\update-phone
================================================================================

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\app\auth\update-phone\page.tsx
--------------------------------------------------------------------------------
Content:
// app/auth/update-phone/page.tsx
'use client';

import { useState, useCallback } from 'react'; // Added useCallback
import { useRouter } from 'next/navigation';
import { useSession } from 'next-auth/react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert';
import { AlertCircle, Loader2, Phone } from 'lucide-react';
import Link from 'next/link';

const UpdatePhonePage = () => {
    const router = useRouter();
    const { status: sessionStatus } = useSession();
    const [newPhone, setNewPhone] = useState('');
    const [error, setError] = useState<string | null>(null);
    const [isLoading, setIsLoading] = useState(false);

    const handleSubmit = useCallback(async (e: React.FormEvent) => {
        e.preventDefault(); // Prevent default form submission
        setError(null); // Clear previous errors

        // Basic phone number format validation
        if (!/^0\d{9}$/.test(newPhone)) {
            setError("פורמט מספר הטלפון אינו תקין (לדוגמה: 0501234567).");
            return;
        }

        setIsLoading(true);
        try {
            const response = await fetch('/api/auth/update-and-resend-code', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ newPhone }),
            });

            const result = await response.json();

            if (!response.ok) {
                // Use error message from API if available
                throw new Error(result.error || 'עדכון מספר הטלפון נכשל.');
            }

            // Success! Redirect back to the verification page to enter the new code
            router.push('/auth/verify-phone');

        } catch (err: unknown) { // Catch error as unknown
             // Type check the error before accessing properties
             if (err instanceof Error) {
                 setError(err.message);
             } else {
                 setError('אירעה שגיאה בלתי צפויה בעת עדכון מספר הטלפון.');
             }
        } finally {
            setIsLoading(false); // Stop loading indicator
        }
    }, [newPhone, router]); // Dependencies for useCallback

    // --- Session Handling & Loading State ---
    if (sessionStatus === 'loading') {
        return (
             <div className="min-h-screen flex items-center justify-center">
                 <Loader2 className="h-8 w-8 animate-spin text-cyan-600" />
                 <span className="ml-2">טוען נתונים...</span>
             </div>
         );
    }
     if (sessionStatus === 'unauthenticated') {
         // If user somehow gets here unauthenticated, redirect to signin
         router.push('/auth/signin?callbackUrl=/auth/update-phone');
         return null; // Return null while redirecting
    }
    // --- End Session Handling ---


    // --- Render Component ---
    return (
        <div className="min-h-screen flex flex-col items-center justify-center bg-gradient-to-br from-cyan-50 via-white to-pink-50 p-4">
            <div className="w-full max-w-sm bg-white rounded-xl shadow-xl p-6 sm:p-8 space-y-6"> {/* Adjusted padding */}
                <div className="text-center">
                    <h1 className="text-2xl font-bold text-gray-800">עדכון מספר טלפון</h1>
                    <p className="text-gray-600 mt-2 text-sm sm:text-base"> {/* Adjusted text size */}
                        הזן/י את מספר הטלפון הנכון שלך.
                        <br />קוד אימות חדש יישלח אליו באמצעות WhatsApp.
                    </p>
                </div>

                {/* Error Alert */}
                {error && (
                    <Alert variant="destructive">
                        <AlertCircle className="h-4 w-4" />
                        <AlertTitle>שגיאה</AlertTitle>
                        <AlertDescription>{error}</AlertDescription>
                    </Alert>
                )}

                {/* Update Phone Form */}
                <form onSubmit={handleSubmit} className="space-y-4">
                    <div>
                        <label htmlFor="phone" className="block text-sm font-medium text-gray-700 mb-1 text-right">
                            מספר טלפון חדש
                        </label>
                         <div className="relative">
                            {/* Icon on the right for RTL */}
                            <Phone className="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-5 w-5 pointer-events-none" />
                            <Input
                                type="tel" // Use tel type for better mobile experience
                                id="phone"
                                name="phone"
                                value={newPhone}
                                onChange={(e) => setNewPhone(e.target.value)}
                                placeholder="0501234567"
                                className="w-full pr-10 pl-3 py-2 border border-gray-300 rounded-md focus:ring-cyan-500 focus:border-cyan-500 shadow-sm text-right" // Added text-right
                                required
                                disabled={isLoading}
                                dir="ltr" // Keep input direction LTR for phone numbers
                                autoComplete="tel" // Add autocomplete hint
                            />
                         </div>
                    </div>

                    <Button type="submit" disabled={isLoading} className="w-full py-3"> {/* Added py-3 */}
                        {isLoading ? <Loader2 className="animate-spin h-5 w-5" /> : 'עדכן ושלח קוד חדש'}
                    </Button>
                </form>

                 {/* Link back to Verification Page */}
                 <div className="text-center mt-4">
                     <Link href="/auth/verify-phone" className="text-sm text-cyan-600 hover:text-cyan-700 hover:underline">
                         חזרה לאימות קוד
                     </Link>
                 </div>
            </div>
        </div>
    );
};

export default UpdatePhonePage;
--- End of Content for page.tsx ---

================================================================================
Directory: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\app\auth\verify-email
================================================================================

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\app\auth\verify-email\page.tsx
--------------------------------------------------------------------------------
Content:
// /auth/verify-email/page.tsx
"use client";

import { useState, useEffect, useRef } from "react";
import { useRouter, useSearchParams } from "next/navigation";
import { useSession } from "next-auth/react";
import { Card, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Alert, AlertDescription } from "@/components/ui/alert";
import { Loader2 } from "lucide-react";

interface VerificationState {
  status: "pending" | "verifying" | "success" | "error";
  message: string;
}

export default function VerifyEmailPage() {
  const router = useRouter();
  const searchParams = useSearchParams();
  const { data: session } = useSession();

  const navigationTimeoutIdRef = useRef<NodeJS.Timeout | null>(null);

  // Ref to ensure the API call logic runs only once after the component has "settled" from StrictMode effects.
  const verificationApiCallMadeRef = useRef(false);

  const [verification, setVerification] = useState<VerificationState>({
    status: "pending",
    message: "",
  });

  const [isResending, setIsResending] = useState(false);

  const handleResendVerification = async () => {
    // ... (same as before)
    const emailFromQuery = searchParams.get("email");
    if (!emailFromQuery) {
      setVerification({
        status: "error",
        message: "לא ניתן לשלוח מחדש ללא כתובת אימייל.",
      });
      return;
    }
    setIsResending(true);
    setVerification({ status: "pending", message: "" });
    try {
      const response = await fetch("/api/auth/resend-verification", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ email: emailFromQuery, type: "EMAIL" }),
      });
      const data = await response.json();
      if (!response.ok)
        throw new Error(data.error || "שגיאה בשליחת מייל האימות מחדש");
      setVerification({
        status: "pending",
        message: "מייל אימות חדש נשלח בהצלחה. אנא בדוק את תיבת הדואר.",
      });
    } catch (error) {
      setVerification({
        status: "error",
        message:
          error instanceof Error
            ? error.message
            : "שגיאה בשליחת מייל האימות מחדש",
      });
    } finally {
      setIsResending(false);
    }
  };

  useEffect(() => {
    let isEffectMounted = true; // Tracks if the current effect instance is still mounted
    const controller = new AbortController();

    const processVerification = async () => {
      if (verificationApiCallMadeRef.current) {
      
        return;
      }
      verificationApiCallMadeRef.current = true; // Mark that we are making the call

      const rawTokenParam = searchParams.get("token");
      const emailFromQuery = searchParams.get("email");
      let actualToken: string | null = null;

      if (rawTokenParam) {
        // ... (token extraction logic)
        if (
          rawTokenParam.includes("://") &&
          rawTokenParam.includes("?token=")
        ) {
          try {
            const nestedUrl = new URL(rawTokenParam);
            actualToken = nestedUrl.searchParams.get("token");
           
          } catch (error) {
            console.warn(
              "VerifyEmailPage: Could not parse rawTokenParam as a URL:",
              rawTokenParam,
              error
            );
            actualToken = rawTokenParam;
          }
        } else {
          actualToken = rawTokenParam;
        
        }
      }

      if (!actualToken) {
        if (emailFromQuery) {
         
          if (isEffectMounted)
            setVerification({
              status: "pending",
              message: "שלחנו מייל אימות לכתובת:",
            });
        } else {
         
          if (isEffectMounted)
            setVerification({
              status: "error",
              message: "קישור האימות אינו תקין (חסר מידע נדרש).",
            });
        }
        return; // Stop further processing
      }

      if (isEffectMounted)
        setVerification({ status: "verifying", message: "" });
    

      // Session check
      if (
        session?.user?.email &&
        emailFromQuery &&
        session.user.email !== emailFromQuery
      ) {
        console.warn(
          "VerifyEmailPage: User logged in with different email. Aborting."
        );
        if (isEffectMounted)
          setVerification({
            status: "error",
            message:
              "אתה מחובר עם חשבון מייל אחר. אנא התנתק ונסה שוב את הלינק.",
          });
        return;
      }

      try {
        const response = await fetch("/api/auth/verify", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ token: actualToken, type: "EMAIL" }),
          signal: controller.signal,
        });

        let data;
        try {
          data = await response.json();
        } catch (jsonError) {
          console.error(
            "VerifyEmailPage (API): Failed to parse JSON response.",
            jsonError
          );
          if (response.ok && response.status !== 204)
            throw new Error("תגובה לא תקינה מהשרת (JSON parsing failed).");
          else if (!response.ok)
            throw new Error("תגובה לא תקינה מהשרת במהלך האימות.");
        }

        if (controller.signal.aborted) {
          return;
        }

        if (!response.ok) {
          const errorMessage =
            data?.error || `שגיאה באימות החשבון (סטטוס ${response.status})`;
          throw new Error(errorMessage);
        }

        if (isEffectMounted) {
          setVerification({
            status: "success",
            message: "החשבון אומת בהצלחה!",
          });
          navigationTimeoutIdRef.current = setTimeout(() => {
            if (isEffectMounted) {
              // Check mount status again before navigating
              router.push("/auth/signin");
            } else {
            
            }
          }, 1500);
        }
      } catch (error: unknown) {
        if (controller.signal.aborted) {
          // Check if the error is due to our own abort
        
        } else if (isEffectMounted) {
          console.error(
            "VerifyEmailPage (API) [catch]: Error during API verification:",
            error
          );
          let errorMessage = "שגיאה באימות החשבון";
          if (error instanceof Error) {
            if (error.message.includes("הטוקן כבר נוצל"))
              errorMessage =
                "הטוקן הזה כבר נוצל לאימות. אם נרשמת בהצלחה, נסה להתחבר.";
            else if (error.message.includes("תוקף הטוקן פג"))
              errorMessage =
                "תוקף קישור האימות פג. אנא נסה לשלוח מייל אימות מחדש.";
            else if (error.message.includes("תגובה לא תקינה מהשרת"))
              errorMessage = error.message;
            else errorMessage = error.message;
          } else {
            errorMessage = "אירעה שגיאה לא צפויה במהלך האימות.";
          }
          setVerification({ status: "error", message: errorMessage });
        }
      }
    };

    processVerification();

    return () => {
     
      isEffectMounted = false; // Mark that this effect instance is being cleaned up
      controller.abort();
      if (navigationTimeoutIdRef.current) {
        clearTimeout(navigationTimeoutIdRef.current);
   
      }
      // Do NOT reset verificationApiCallMadeRef.current here.
      // It should ensure the logic runs only once per component true lifecycle.
    };
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [searchParams, router, session]); // Dependencies

  // ... (JSX remains the same)
  return (
    <div className="min-h-screen flex items-center justify-center p-4">
      <Card className="w-full max-w-md">
        <CardContent className="p-6 space-y-4">
          {verification.status === "pending" && (
            <div className="text-center space-y-4">
              <h2 className="text-xl font-semibold">אימות חשבון</h2>
              {verification.message && (
                <Alert
                  variant="default"
                  className="text-sm text-center bg-blue-50 border-blue-200 text-blue-800"
                >
                  <AlertDescription>
                    {verification.message ||
                      (searchParams.get("email")
                        ? "שלחנו מייל אימות לכתובת:"
                        : "טוען מידע...")}
                  </AlertDescription>
                </Alert>
              )}
              {!verification.message && searchParams.get("email") && (
                <p>שלחנו מייל אימות לכתובת:</p>
              )}
              <p className="font-medium">
                {searchParams.get("email") || "לא צוינה כתובת"}
              </p>
              <p>אנא בדקו את תיבת הדואר שלכם ולחצו על הקישור לאימות החשבון.</p>
              {searchParams.get("email") && (
                <Button
                  onClick={handleResendVerification}
                  disabled={isResending}
                  className="mt-4"
                >
                  {isResending ? (
                    <>
                      <Loader2 className="mr-2 h-4 w-4 animate-spin" /> שולח
                      מייל חדש...
                    </>
                  ) : (
                    "שלח מייל אימות מחדש"
                  )}
                </Button>
              )}
            </div>
          )}
          {verification.status === "verifying" && (
            <div className="flex flex-col items-center space-y-4">
              <Loader2 className="h-8 w-8 animate-spin text-blue-500" />
              <p className="text-gray-600">מאמת את החשבון...</p>
            </div>
          )}
          {verification.status === "success" && (
            <div className="text-center space-y-4">
              <h2 className="text-xl font-semibold text-green-600">
                {verification.message}
              </h2>
              <p className="text-gray-600">
                החשבון אומת בהצלחה. מעביר אותך להתחברות...
              </p>
              <Loader2 className="h-6 w-6 animate-spin mx-auto mt-4 text-gray-400" />
            </div>
          )}
          {verification.status === "error" && (
            <div className="space-y-4">
              <Alert variant="destructive">
                <AlertDescription>{verification.message}</AlertDescription>
              </Alert>
              {searchParams.get("email") &&
                !verification.message.includes("הטוקן הזה כבר נוצל") &&
                !verification.message.includes("מחובר עם חשבון מייל אחר") &&
                (verification.message.includes("תוקף קישור האימות פג") ||
                  verification.message.includes(
                    "שגיאה בשליחת מייל האימות מחדש"
                  ) ||
                  (verification.message.includes("שגיאה באימות החשבון") &&
                    !verification.message.includes(
                      "פורמט קישור האימות אינו תקין"
                    ) &&
                    !verification.message.includes("תגובה לא תקינה מהשרת")) ||
                  verification.message.includes("תגובה לא תקינה מהשרת")) && (
                  <div className="flex justify-center">
                    <Button
                      onClick={handleResendVerification}
                      disabled={isResending}
                      variant="outline"
                      className="mt-2"
                    >
                      {isResending ? (
                        <>
                          <Loader2 className="mr-2 h-4 w-4 animate-spin" /> שולח
                          מייל חדש...
                        </>
                      ) : (
                        "נסה לשלוח מייל אימות מחדש"
                      )}
                    </Button>
                  </div>
                )}
              <div className="flex justify-center mt-4">
                <Button onClick={() => router.push("/auth/signin")}>
                  חזור לדף ההתחברות
                </Button>
              </div>
            </div>
          )}
        </CardContent>
      </Card>
    </div>
  );
}
--- End of Content for page.tsx ---

================================================================================
Directory: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\app\auth\verify-phone
================================================================================

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\app\auth\verify-phone\page.tsx
--------------------------------------------------------------------------------
Content:
// app/auth/verify-phone/page.tsx
"use client";

import { useState, useEffect, useRef, useCallback, FormEvent } from "react";
import { useRouter } from "next/navigation";
import { useSession } from "next-auth/react";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { AlertCircle, Loader2, CheckCircle } from "lucide-react"; // Mail or Info icon could be added if needed
import Link from "next/link";

const OTP_LENGTH = 6;

const VerifyPhonePage = () => {
  const router = useRouter();
  const {
    data: session,
    status: sessionStatus,
    update: updateSession,
  } = useSession();
  const [code, setCode] = useState<string[]>(new Array(OTP_LENGTH).fill(""));
  const [error, setError] = useState<string | null>(null);
  const [verifySuccessMessage, setVerifySuccessMessage] = useState<string | null>(null); // Renamed from successMessage
  const [resendInfoMessage, setResendInfoMessage] = useState<string | null>(null); // New state for resend info
  const [isLoading, setIsLoading] = useState(false); // For verify code submission
  const [isResending, setIsResending] = useState(false); // For resend code submission
  const [resendDisabled, setResendDisabled] = useState(false);
  const [resendTimer, setResendTimer] = useState(0);
  const inputRefs = useRef<(HTMLInputElement | null)[]>([]);

  // --- Resend Timer Logic ---
  useEffect(() => {
    let interval: NodeJS.Timeout | null = null;
    if (resendDisabled && resendTimer > 0) {
      interval = setInterval(() => {
        setResendTimer((prev) => Math.max(0, prev - 1));
      }, 1000);
    } else if (resendTimer === 0 && resendDisabled) {
      setResendDisabled(false);
    }
    return () => {
      if (interval) clearInterval(interval);
    };
  }, [resendDisabled, resendTimer]);

  const startResendTimer = useCallback(() => {
    setResendDisabled(true);
    setResendTimer(60);
  }, []);
  // --- End Resend Timer Logic ---

  // --- Input Handling (Focus and Backspace) ---
  const handleInputChange = useCallback(
    (index: number, value: string) => {
      if (!/^\d*$/.test(value)) return;

      const newCode = [...code];
      newCode[index] = value.slice(-1);
      setCode(newCode);

      if (value && index < OTP_LENGTH - 1 && inputRefs.current[index + 1]) {
        inputRefs.current[index + 1]?.focus();
      }
    },
    [code]
  );

  const handleKeyDown = useCallback(
    (index: number, e: React.KeyboardEvent<HTMLInputElement>) => {
      if (
        e.key === "Backspace" &&
        !code[index] &&
        index > 0 &&
        inputRefs.current[index - 1]
      ) {
        inputRefs.current[index - 1]?.focus();
      }
    },
    [code]
  );

  useEffect(() => {
    if (inputRefs.current[0]) {
      inputRefs.current[0]?.focus();
    }
  }, []);
  // --- End Input Handling ---

  // --- API Calls ---
  const handleVerifyCode = useCallback(
    async (e: FormEvent) => {
      e.preventDefault();
      setError(null);
      setVerifySuccessMessage(null);
      setResendInfoMessage(null); // Clear resend info message as well

      const otp = code.join("");
      if (otp.length !== OTP_LENGTH) {
        setError(`אנא הזן את הקוד בן ${OTP_LENGTH} הספרות במלואו.`);
        return;
      }

      setIsLoading(true);
      try {
        const response = await fetch("/api/auth/verify-phone-code", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ code: otp }),
        });

        const result = await response.json();

        if (!response.ok) {
          throw new Error(result.error || "אימות הקוד נכשל. אנא נסה שנית.");
        }

       
        setVerifySuccessMessage("מספר הטלפון אומת בהצלחה! מעדכן את הפרופיל שלך...");

        console.log(
          "[VerifyPhonePage] Current session before update:",
          session
        );
        await updateSession({
          isPhoneVerified: true,
          isProfileComplete: true,
          status: "ACTIVE",
        });
       

        window.location.href = "/profile";
      } catch (err: unknown) {
        const errorMessage =
          err instanceof Error
            ? err.message
            : "אירעה שגיאה בלתי צפויה במהלך האימות.";
        console.error(
          "[VerifyPhonePage] Error during verification:",
          errorMessage,
          err
        );
        setError(errorMessage);
        setCode(new Array(OTP_LENGTH).fill(""));
        if (inputRefs.current[0]) inputRefs.current[0]?.focus();
        setIsLoading(false);
      }
    },
    [code, updateSession, session]
  );

  const handleResendCode = useCallback(async () => {
    if (resendDisabled || isResending) return;
    setError(null);
    setVerifySuccessMessage(null); // Clear main success message
    setResendInfoMessage(null); // Clear previous resend info
    setIsResending(true);

    try {
      const response = await fetch("/api/auth/resend-phone-code", {
        method: "POST",
      });
      const result = await response.json();

      if (!response.ok) {
        throw new Error(result.error || "שליחת קוד חדש נכשלה.");
      }

      setResendInfoMessage("קוד חדש נשלח אליך באמצעות WhatsApp."); // Use new state for info
      startResendTimer();
    } catch (err: unknown) {
      const errorMessage =
        err instanceof Error
          ? err.message
          : "אירעה שגיאה בלתי צפויה בעת שליחת קוד חדש.";
      setError(errorMessage);
    } finally {
      setIsResending(false);
    }
  }, [isResending, resendDisabled, startResendTimer]);
  // --- End API Calls ---

  // --- Session Handling ---
  useEffect(() => {
    console.log(
      "[VerifyPhonePage] Session useEffect triggered. Status:",
      sessionStatus,
      "Session:",
      session
    );

    if (sessionStatus === "authenticated") {
      if (session?.user?.isPhoneVerified && session?.user?.isProfileComplete) {
        if (window.location.pathname === "/auth/verify-phone") {
          console.log(
            "[VerifyPhonePage] User already verified and on verify-phone page. Redirecting to /profile via router.push."
          );
          router.push("/profile");
        }
      } else if (session?.user && !session.user.isPhoneVerified) {
        console.log(
          "[VerifyPhonePage] Authenticated, but phone not yet verified. User should stay on this page."
        );
      }
    } else if (sessionStatus === "unauthenticated") {
      console.log("[VerifyPhonePage] Unauthenticated. Redirecting to signin.");
      router.push("/auth/signin?callbackUrl=/auth/verify-phone");
    }
  }, [sessionStatus, session, router]);

  // --- Loading State ---
  if (sessionStatus === "loading") {
    return (
      <div className="min-h-screen flex flex-col items-center justify-center bg-gradient-to-br from-cyan-50 via-white to-pink-50 p-4">
        <div className="flex items-center">
          <Loader2 className="h-8 w-8 animate-spin text-cyan-600" />
          <span className="ml-2 text-gray-700">טוען נתונים...</span>
        </div>
      </div>
    );
  }
  // --- End Loading State ---

  // --- Helper Function for Displaying Phone ---
  const getHiddenPhone = () => {
    const phone = session?.user?.phone;
    if (!phone) return "הטלפון שלך";
    if (phone.length >= 10) {
      return `${phone.substring(0, 3)}••••${phone.substring(phone.length - 3)}`;
    }
    return "הטלפון שלך";
  };
  // --- End Helper Function ---

  // --- Render Component ---
  const disableFormInputsAndVerifyButton = isLoading || !!verifySuccessMessage;
  const disableResendButton = isResending || resendDisabled || !!verifySuccessMessage;


  return (
    <div className="min-h-screen flex flex-col items-center justify-center bg-gradient-to-br from-cyan-50 via-white to-pink-50 p-4">
      <div className="w-full max-w-md bg-white rounded-xl shadow-xl p-6 sm:p-8 space-y-6 text-center">
        <div>
          <h1 className="text-2xl font-bold text-gray-800">אימות מספר טלפון</h1>
          <p className="text-gray-600 mt-2 text-sm sm:text-base">
            כמעט סיימנו! שלחנו קוד בן {OTP_LENGTH} ספרות באמצעות WhatsApp למספר{" "}
            <span className="font-medium text-gray-700">
              {getHiddenPhone()}
            </span>
            .
            <br />
            הזן/י אותו להשלמת ההרשמה.
          </p>
        </div>
        
        {error && (
          <Alert variant="destructive">
            <AlertCircle className="h-4 w-4" />
            <AlertTitle>שגיאה</AlertTitle>
            <AlertDescription>{error}</AlertDescription>
          </Alert>
        )}
        {!error && verifySuccessMessage && (
          <Alert
            variant="default"
            className="bg-green-50 border-green-200 text-green-700"
          >
            <CheckCircle className="h-4 w-4 text-green-600" />
            <AlertTitle>הצלחה</AlertTitle>
            <AlertDescription>{verifySuccessMessage}</AlertDescription>
          </Alert>
        )}
        {!error && !verifySuccessMessage && resendInfoMessage && (
          <Alert
            variant="default"
            className="bg-green-50 border-green-200 text-green-700" // Reusing success style for info
          >
            <CheckCircle className="h-4 w-4 text-green-600" /> {/* Or a different icon like Info if preferred */}
            <AlertTitle>הודעה</AlertTitle>
            <AlertDescription>{resendInfoMessage}</AlertDescription>
          </Alert>
        )}

        <form onSubmit={handleVerifyCode} className="space-y-6">
          <div className="flex justify-center gap-2 sm:gap-3" dir="ltr">
            {code.map((digit, index) => (
              <Input
                key={index}
                ref={(el: HTMLInputElement | null) => {
                  inputRefs.current[index] = el;
                }}
                type="text"
                inputMode="numeric"
                pattern="\d{1}"
                maxLength={1}
                value={digit}
                onChange={(e) => handleInputChange(index, e.target.value)}
                onKeyDown={(e) => handleKeyDown(index, e)}
                className="w-10 h-12 sm:w-12 sm:h-14 text-center text-xl sm:text-2xl font-semibold border-2 border-gray-300 focus:border-cyan-500 focus:ring-1 focus:ring-cyan-500 rounded-md shadow-sm transition-colors disabled:opacity-50 disabled:bg-gray-100"
                disabled={disableFormInputsAndVerifyButton}
                required
                aria-label={`ספרה ${index + 1}`}
              />
            ))}
          </div>

          <Button
            type="submit"
            disabled={
              disableFormInputsAndVerifyButton ||
              code.join("").length !== OTP_LENGTH
            }
            className="w-full py-3 bg-gradient-to-r from-cyan-500 to-pink-500 hover:from-cyan-600 hover:to-pink-600 text-white"
          >
            {isLoading ? (
              <Loader2 className="animate-spin h-5 w-5 mx-auto" />
            ) : (
              "אימות קוד"
            )}
          </Button>
        </form>
        <div className="text-sm text-gray-600 space-y-2">
          <div>
            לא קיבלת את הקוד?{" "}
            <Button
              type="button"
              variant="link"
              onClick={handleResendCode}
              disabled={disableResendButton}
              className="p-0 h-auto text-cyan-600 hover:text-cyan-700 disabled:text-gray-400 disabled:no-underline"
            >
              {isResending
                ? "שולח שוב..."
                : resendDisabled
                ? `שלח קוד חדש (${resendTimer} שניות)`
                : "שלח קוד חדש"}
            </Button>
          </div>
          <div>
            <Link
              href="/auth/update-phone"
              className={`text-cyan-600 hover:text-cyan-700 hover:underline ${
                disableFormInputsAndVerifyButton // Use the more specific disabling logic
                  ? "pointer-events-none text-gray-400"
                  : ""
              }`}
              aria-disabled={disableFormInputsAndVerifyButton}
              tabIndex={disableFormInputsAndVerifyButton ? -1 : undefined}
            >
              האם מספר הטלפון שגוי?
            </Link>
          </div>
        </div>
        <div className="mt-4 border-t border-gray-200 pt-4">
          <Link
            href="/auth/signin"
            className={`text-xs text-gray-500 hover:text-gray-600 ${
              disableFormInputsAndVerifyButton // Use the more specific disabling logic
                ? "pointer-events-none opacity-50"
                : ""
            }`}
            aria-disabled={disableFormInputsAndVerifyButton}
            tabIndex={disableFormInputsAndVerifyButton ? -1 : undefined}
          >
            חזרה להתחברות
          </Link>
        </div>
      </div>
    </div>
  );
};

export default VerifyPhonePage;
--- End of Content for page.tsx ---

