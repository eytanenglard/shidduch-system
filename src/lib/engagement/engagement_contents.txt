################################################################################
# Directory Content Map For: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\lib\engagement
# Generated on: 2025-10-05 17:40:33
################################################################################

================================================================================
Directory: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\lib\engagement
================================================================================

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\lib\engagement\engagement_contents.txt
--------------------------------------------------------------------------------
[This is the output log file itself. Content not included.]

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\lib\engagement\notificationService.ts
--------------------------------------------------------------------------------
Content:
// src/lib/engagement/notificationService.ts
import { User } from '@prisma/client';
import { EmailAdapter, RecipientInfo, NotificationContent } from './adapters/email.adapter';
import { WhatsAppAdapter } from './adapters/whatsapp.adapter';
import Handlebars from 'handlebars';
import fs from 'fs';
import path from 'path';

class NotificationServiceImpl {
  private emailAdapter: EmailAdapter;
  private whatsappAdapter: WhatsAppAdapter;

  constructor() {
    this.emailAdapter = new EmailAdapter();
    this.whatsappAdapter = new WhatsAppAdapter();
  }

  private loadEmailTemplate(templateName: string, context: any): NotificationContent {
    const filePath = path.join(process.cwd(), 'src', 'lib', 'engagement', 'templates', 'email', `${templateName}.hbs`);
    const source = fs.readFileSync(filePath, 'utf-8');
    const template = Handlebars.compile(source);
    const htmlBody = template({
      ...context,
      baseUrl: process.env.NEXT_PUBLIC_BASE_URL || 'http://localhost:3000',
    });

    // We can generate a plain text version here if needed, or just use a subject.
    return { subject: '', body: '', htmlBody };
  }

  async sendWelcome(user: User): Promise<void> {
    const recipient: RecipientInfo = { name: user.firstName, email: user.email, phone: user.phone };
    const context = { firstName: user.firstName };

    // Send Email
    const emailContent = this.loadEmailTemplate('welcome', context);
    emailContent.subject = `ברוך הבא ל-NeshamaTech, ${user.firstName}! המסע שלך מתחיל`;
    await this.emailAdapter.send(recipient, emailContent);

    // Send WhatsApp
    const templateSid = process.env.TWILIO_TEMPLATE_WELCOME_SID;
    if (templateSid) {
      await this.whatsappAdapter.send(recipient, templateSid, { '1': user.firstName });
    }
  }

  async sendProfileNudge(user: User, missingItems: string[]): Promise<void> {
    const recipient: RecipientInfo = { name: user.firstName, email: user.email, phone: user.phone };
    const context = { firstName: user.firstName, missingItems };
    
    const emailContent = this.loadEmailTemplate('profileNudge', context);
    emailContent.subject = `${user.firstName}, טיפ קטן מהשדכנים שיעשה הבדל גדול`;
    await this.emailAdapter.send(recipient, emailContent);
    
    const templateSid = process.env.TWILIO_TEMPLATE_NUDGE_SID;
    if (templateSid) {
      await this.whatsappAdapter.send(recipient, templateSid, { '1': user.firstName, '2': missingItems.slice(0, 2).join(', ') });
    }
  }

  async sendAiInsight(user: User, personalitySummary: string): Promise<void> {
    const recipient: RecipientInfo = { name: user.firstName, email: user.email, phone: user.phone };
    const context = { firstName: user.firstName, personalitySummary };

    const emailContent = this.loadEmailTemplate('aiInsight', context);
    emailContent.subject = `גילינו משהו מעניין על האישיות שלך, ${user.firstName}`;
    await this.emailAdapter.send(recipient, emailContent);

    const templateSid = process.env.TWILIO_TEMPLATE_AI_INSIGHT_SID;
    if (templateSid) {
      await this.whatsappAdapter.send(recipient, templateSid, { '1': user.firstName, '2': personalitySummary.substring(0, 200) + '...' });
    }
  }
}

export const notificationService = new NotificationServiceImpl();

--- End of Content for notificationService.ts ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\lib\engagement\onboardingEngagementService.ts
--------------------------------------------------------------------------------
Content:
// src/lib/engagement/onboardingEngagementService.ts
import prisma from '@/lib/prisma';
import { CampaignStatus } from '@prisma/client';
import aiService from '@/lib/services/aiService';
import profileAiService from '@/lib/services/profileAiService';
import { notificationService } from './notificationService';

interface OnboardingProgress {
  userId: string;
  daysInSystem: number;
  
  // מה השלים?
  completed: {
    hasPhoto: boolean;
    hasAbout: boolean;
    hasQuestionnaire: boolean; // 80%+
    hasPreferences: boolean;
  };
  
  // ציון כולל
  completionScore: number; // 0-100
  
  // מה הצעד הבא הכי חשוב?
  nextCriticalStep: string;
  
  // תובנת AI
  aiMotivation?: string;
}

export class OnboardingEngagementService {
  
  /**
   * בדיקה: האם המשתמש בתקופת ה-onboarding? (ימים 1-14)
   */
  static isInOnboarding(daysInSystem: number): boolean {
    return daysInSystem <= 14;
  }
  
  /**
   * ניתוח התקדמות onboarding
   */
  static async analyzeOnboardingProgress(userId: string): Promise<OnboardingProgress> {
    const user = await prisma.user.findUnique({
      where: { id: userId },
      include: {
        profile: true,
        images: true,
        questionnaireResponses: { 
          orderBy: { lastSaved: 'desc' }, 
          take: 1 
        },
      },
    });

    if (!user) throw new Error('User not found');

    const daysInSystem = Math.floor(
      (Date.now() - user.createdAt.getTime()) / (1000 * 60 * 60 * 24)
    );

    // בדיקות מה הושלם
    const hasPhoto = user.images.length >= 1;
    const hasAbout = !!(user.profile?.about && user.profile.about.length >= 50);
    const hasPreferences = !!(user.profile?.preferredAgeMin && user.profile?.preferredAgeMax);
    
    // חישוב שאלון
    let questionnaireScore = 0;
    const qr = user.questionnaireResponses[0];
    if (qr) {
      const worlds = ['valuesAnswers', 'personalityAnswers', 'relationshipAnswers', 
                      'partnerAnswers', 'religionAnswers'];
      let totalAnswered = 0;
      worlds.forEach(w => {
        const answers = qr[w];
        if (Array.isArray(answers)) totalAnswered += answers.length;
      });
      questionnaireScore = Math.min((totalAnswered / 50) * 100, 100);
    }
    const hasQuestionnaire = questionnaireScore >= 80;

    // חישוב ציון כולל
    let score = 0;
    if (hasPhoto) score += 30;
    if (hasAbout) score += 25;
    if (hasQuestionnaire) score += 30;
    if (hasPreferences) score += 15;

    // מה הצעד הבא?
    let nextStep = '';
    if (!hasPhoto) nextStep = 'העלאת תמונת פרופיל';
    else if (!hasAbout) nextStep = 'כתיבת תיאור אישי';
    else if (!hasQuestionnaire) nextStep = 'השלמת השאלון';
    else if (!hasPreferences) nextStep = 'הגדרת העדפות שידוך';
    else nextStep = 'הפרופיל מוכן!';

    // קבלת תובנת AI (אם יש מספיק מידע)
    let aiMotivation;
    if (score >= 30) {
      aiMotivation = await this.getAIMotivation(userId, score, nextStep);
    }

    return {
      userId,
      daysInSystem,
      completed: {
        hasPhoto,
        hasAbout,
        hasQuestionnaire,
        hasPreferences,
      },
      completionScore: Math.round(score),
      nextCriticalStep: nextStep,
      aiMotivation,
    };
  }

  /**
   * קבלת מסר מוטיבציה מותאם אישית מ-AI
   */
  static async getAIMotivation(
    userId: string, 
    currentScore: number, 
    nextStep: string
  ): Promise<string | undefined> {
    try {
      const narrative = await profileAiService.generateNarrativeProfile(userId);
      if (!narrative) return undefined;

      const analysis = await aiService.getProfileAnalysis(narrative);
      if (!analysis) return undefined;

      // בנה prompt מותאם
      const motivationPrompt = `
        המשתמש נמצא בתהליך בניית הפרופיל שלו.
        ציון נוכחי: ${currentScore}/100
        הצעד הבא: ${nextStep}
        
        נקודות חוזק שזיהינו:
        ${analysis.completenessReport
          .filter(r => r.status === 'COMPLETE')
          .map(r => `- ${r.feedback}`)
          .join('\n')}
        
        כתוב משפט מוטיבציה אחד (מקסימום 2 שורות) בעברית שמעודד אותו להמשיך.
        השתמש במידע הספציפי שלו, אל תהיה גנרי.
        תן לו הרגשה שהוא מתקדם יפה ושהצעד הבא הוא הגיוני.
      `;

      // כאן תקרא ל-AI - לצורך הדוגמה:
      return analysis.actionableTips[0]?.tip || 
             `הפרופיל שלך כבר ב-${currentScore}%! ${nextStep} יעלה אותך למעל 70% ואז תהיה מוכן לקבל הצעות.`;
      
    } catch (error) {
      console.error('Failed to get AI motivation:', error);
      return undefined;
    }
  }

  /**
   * יצירת מייל onboarding עם AI
   */
  static async createOnboardingEmail(progress: OnboardingProgress) {
    const { daysInSystem, completionScore, nextCriticalStep, aiMotivation } = progress;

    // תבנית מייל לפי יום
    if (daysInSystem === 1) {
      return {
        subject: 'ברוכים הבאים ל-NeshamaTech! הצעד הראשון שלך',
        mainMessage: 'מרגש שהצטרפת! בואו נתחיל בצעד הראשון והכי חשוב.',
        specificAction: nextCriticalStep,
        progressBar: `התקדמות: ${completionScore}%`,
        aiContent: aiMotivation,
        cta: 'בואו נתחיל',
      };
    }
    
    if (daysInSystem === 3) {
      return {
        subject: 'איך מתקדמים? עדכון מהיר',
        mainMessage: `הפרופיל שלך כבר ב-${completionScore}%. כל הכבוד!`,
        specificAction: `הצעד הבא: ${nextCriticalStep}`,
        progressBar: this.generateProgressBar(completionScore),
        aiContent: aiMotivation,
        cta: 'להמשך בניית הפרופיל',
      };
    }
    
    if (daysInSystem === 7) {
      return {
        subject: 'שבוע עבר - בואו נראה איפה אנחנו',
        mainMessage: `עבר שבוע מאז הצטרפת. את/ה ב-${completionScore}%.`,
        specificAction: `כדי להגיע ל-100%: ${nextCriticalStep}`,
        progressBar: this.generateProgressBar(completionScore),
        aiContent: aiMotivation || 'פרופילים מושלמים מקבלים פי 3 יותר הצעות איכותיות.',
        cta: 'לסיום הפרופיל',
      };
    }

    return null;
  }

  /**
   * יצירת progress bar ויזואלי
   */
  static generateProgressBar(score: number): string {
    const filled = Math.floor(score / 10);
    const empty = 10 - filled;
    return '█'.repeat(filled) + '░'.repeat(empty) + ` ${score}%`;
  }

  /**
   * שליחת מייל onboarding בפועל
   */
  static async sendOnboardingEmail(user: any, emailData: any) {
    const recipient = {
      name: user.firstName,
      email: user.email,
      phone: user.phone,
    };

    const htmlContent = `
      <!DOCTYPE html>
      <html dir="rtl" lang="he">
      <head>
        <meta charset="UTF-8">
        <style>
          body { font-family: 'Segoe UI', sans-serif; background: #f7fafc; margin: 0; padding: 20px; }
          .container { max-width: 600px; margin: 0 auto; background: white; border-radius: 12px; overflow: hidden; }
          .header { background: linear-gradient(135deg, #06b6d4, #8b5cf6); padding: 40px 20px; text-align: center; color: white; }
          .content { padding: 40px 30px; line-height: 1.8; }
          .progress { background: #e2e8f0; border-radius: 20px; height: 30px; margin: 20px 0; overflow: hidden; }
          .progress-fill { background: linear-gradient(90deg, #06b6d4, #8b5cf6); height: 100%; transition: width 0.5s; }
          .ai-box { background: #f0f9ff; border-right: 4px solid #06b6d4; padding: 20px; margin: 20px 0; border-radius: 8px; }
          .cta { display: inline-block; background: #06b6d4; color: white; padding: 14px 32px; 
                 border-radius: 8px; text-decoration: none; margin: 20px 0; font-weight: bold; }
        </style>
      </head>
      <body>
        <div class="container">
          <div class="header">
            <h1>${emailData.subject}</h1>
          </div>
          <div class="content">
            <p>${emailData.mainMessage}</p>
            
            <div class="progress">
              <div class="progress-fill" style="width: ${emailData.progressBar}"></div>
            </div>
            <p style="text-align: center; color: #64748b;">${emailData.progressBar}</p>
            
            <h3>הצעד הבא שלך:</h3>
            <p><strong>${emailData.specificAction}</strong></p>
            
            ${emailData.aiContent ? `
              <div class="ai-box">
                <strong>💡 התובנה האישית שלך:</strong><br>
                ${emailData.aiContent}
              </div>
            ` : ''}
            
            <a href="${process.env.NEXT_PUBLIC_BASE_URL}/profile" class="cta">
              ${emailData.cta}
            </a>
            
            <p style="margin-top: 40px; color: #64748b; font-size: 14px;">
              בברכה,<br>צוות NeshamaTech
            </p>
          </div>
        </div>
      </body>
      </html>
    `;

    const { EmailAdapter } = await import('./adapters/email.adapter');
    const emailAdapter = new EmailAdapter();
    
    await emailAdapter.send(recipient, {
      subject: emailData.subject,
      body: emailData.mainMessage,
      htmlBody: htmlContent,
    });
  }
}
--- End of Content for onboardingEngagementService.ts ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\lib\engagement\userEngagementService.ts
--------------------------------------------------------------------------------
Content:
// src/lib/engagement/userEngagementService.ts
import prisma from '@/lib/prisma';
import { notificationService } from './notificationService';
import { profileFeedbackService } from '@/lib/services/profileFeedbackService';
import aiService from '@/lib/services/aiService';
import { generateNarrativeProfile } from '@/lib/services/profileAiService';
import { getQuestionnaireQuestionsDictionary } from '@/lib/dictionaries';
import { CampaignStatus, User, Profile, UserImage, QuestionnaireResponse } from '@prisma/client';

type FullUser = User & {
  profile: Profile | null;
  images: UserImage[];
  questionnaireResponses: QuestionnaireResponse[];
};

export class UserEngagementService {

  static async processScheduledCommunications() {
    console.log('[Cron Job] Starting to process scheduled communications...');
    const now = new Date();
    const campaignsToProcess = await prisma.userDripCampaign.findMany({
      where: {
        status: CampaignStatus.ACTIVE,
        nextSendDate: { lte: now },
      },
      include: {
        user: {
          include: {
            profile: true,
            images: true,
            questionnaireResponses: { orderBy: { lastSaved: 'desc' }, take: 1 },
          },
        },
      },
    });

    console.log(`[Cron Job] Found ${campaignsToProcess.length} campaigns to process.`);
    let communicationsSent = 0;
    
    for (const campaign of campaignsToProcess) {
      if (!campaign.user || !campaign.user.marketingConsent) {
        await this.updateCampaignStatus(campaign.id, CampaignStatus.PAUSED);
        continue;
      }

      const sentType = await this.sendNextCommunicationInSequence(campaign.user as FullUser, campaign.lastSentType);

      if (sentType) {
        communicationsSent++;
        const nextStep = campaign.currentStep + 1;
        const nextDelayDays = this.getDelayForNextStep(nextStep);

        if (nextDelayDays === null) {
          await this.updateCampaignStatus(campaign.id, CampaignStatus.COMPLETED);
        } else {
          await prisma.userDripCampaign.update({
            where: { id: campaign.id },
            data: {
              currentStep: nextStep,
              lastSentType: sentType,
              nextSendDate: new Date(now.getTime() + nextDelayDays * 24 * 60 * 60 * 1000),
            },
          });
        }
      } else {
        await prisma.userDripCampaign.update({
          where: { id: campaign.id },
          data: {
            nextSendDate: new Date(now.getTime() + 2 * 24 * 60 * 60 * 1000),
          },
        });
      }
    }
    console.log(`[Cron Job] Finished processing. Sent ${communicationsSent} communications.`);
    return { processed: campaignsToProcess.length, sent: communicationsSent };
  }

  private static async sendNextCommunicationInSequence(user: FullUser, lastSentType: string | null): Promise<string | null> {
    const profileCompletion = user.isProfileComplete;
    const qr = user.questionnaireResponses[0];
    const hasAnsweredQuestionnaire = qr && (qr.worldsCompleted?.length || 0) > 0;

    // Condition for Profile Nudge (Day ~4)
    if ((!profileCompletion || user.images.length < 3) && lastSentType !== 'profile_nudge') {
      const questionsDict = await getQuestionnaireQuestionsDictionary('he');
      const report = await profileFeedbackService.compileFeedbackReport(user.id, 'he', questionsDict);
      await notificationService.sendProfileNudge(user, report.missingProfileItems.slice(0, 3));
      return 'profile_nudge';
    }

    // Condition for AI Insight (Day ~8)
    if (hasAnsweredQuestionnaire && !profileCompletion && lastSentType !== 'ai_insight') {
      const narrativeProfile = await generateNarrativeProfile(user.id);
      if (narrativeProfile) {
        const analysis = await aiService.getProfileAnalysis(narrativeProfile);
        if (analysis) {
          await notificationService.sendAiInsight(user, analysis.personalitySummary);
          return 'ai_insight';
        }
      }
    }
    
    // Add future conditions here...

    return null;
  }
  
  private static getDelayForNextStep(step: number): number | null {
    const delays: { [key: number]: number } = {
      2: 4, // 4 days after welcome
      3: 4, // 4 days after nudge
      4: 6, // 6 days after AI insight
    };
    return delays[step] || null;
  }

  static async startCampaignForNewUser(userId: string) {
    // This function will be called AFTER the existing welcome email is sent.
    // It only schedules the *first drip email*.
    const firstDripDelay = this.getDelayForNextStep(2);
    if (firstDripDelay) {
      await prisma.userDripCampaign.create({
        data: {
          userId: userId,
          currentStep: 2,
          nextSendDate: new Date(Date.now() + firstDripDelay * 24 * 60 * 60 * 1000),
          status: CampaignStatus.ACTIVE,
          lastSentType: 'welcome',
        },
      });
    }
  }

  private static async updateCampaignStatus(campaignId: string, status: CampaignStatus) {
    await prisma.userDripCampaign.update({
      where: { id: campaignId },
      data: { status },
    });
  }
}
--- End of Content for userEngagementService.ts ---

================================================================================
Directory: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\lib\engagement\adapters
================================================================================

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\lib\engagement\adapters\email.adapter.ts
--------------------------------------------------------------------------------
Content:
// src/lib/engagement/adapters/email.adapter.ts
import nodemailer from 'nodemailer';

export interface RecipientInfo {
  email: string;
  phone?: string | null;
  name: string;
}

export interface NotificationContent {
  subject: string;
  body: string; // For text-based channels like SMS or simple emails
  htmlBody?: string; // For rich HTML emails
}

export class EmailAdapter {
  private transporter: nodemailer.Transporter;

  constructor() {
    this.transporter = nodemailer.createTransport({
      service: process.env.EMAIL_SERVICE || 'gmail',
      auth: {
        user: process.env.GMAIL_USER,
        pass: process.env.GMAIL_APP_PASSWORD,
      },
    });
  }

  public canSend(recipient: RecipientInfo): boolean {
    return !!recipient.email;
  }

  public async send(recipient: RecipientInfo, content: NotificationContent): Promise<boolean> {
    if (!this.canSend(recipient)) return false;

    try {
      await this.transporter.sendMail({
        from: `NeshamaTech <${process.env.GMAIL_USER}>`,
        to: recipient.email,
        subject: content.subject,
        html: content.htmlBody || `<p>${content.body.replace(/\n/g, '<br>')}</p>`,
      });
      console.log(`[EmailAdapter] Email sent to ${recipient.email}`);
      return true;
    } catch (error) {
      console.error(`[EmailAdapter] Failed to send email to ${recipient.email}:`, error);
      return false;
    }
  }
}
--- End of Content for email.adapter.ts ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\lib\engagement\adapters\whatsapp.adapter.ts
--------------------------------------------------------------------------------
Content:
// src/lib/engagement/adapters/whatsapp.adapter.ts
import twilio from 'twilio';
import { RecipientInfo } from './email.adapter';

export class WhatsAppAdapter {
  private client: twilio.Twilio | null;
  private fromNumber: string;

  constructor() {
    this.fromNumber = process.env.TWILIO_WHATSAPP_NUMBER || '';
    if (process.env.TWILIO_ACCOUNT_SID && process.env.TWILIO_AUTH_TOKEN) {
      this.client = twilio(process.env.TWILIO_ACCOUNT_SID, process.env.TWILIO_AUTH_TOKEN);
    } else {
      this.client = null;
      console.warn('[WhatsAppAdapter] Twilio is not configured.');
    }
  }

  public canSend(recipient: RecipientInfo): boolean {
    return !!(this.client && recipient.phone && recipient.phone.startsWith('+'));
  }

  public async send(recipient: RecipientInfo, templateSid: string, contentVariables: Record<string, string>): Promise<boolean> {
    if (!this.canSend(recipient) || !recipient.phone) return false;

    try {
      await this.client!.messages.create({
        contentSid: templateSid,
        contentVariables: JSON.stringify(contentVariables),
        from: `whatsapp:${this.fromNumber}`,
        to: `whatsapp:${recipient.phone}`,
      });
      console.log(`[WhatsAppAdapter] Message sent to ${recipient.phone}`);
      return true;
    } catch (error: any) {
      console.error(`[WhatsAppAdapter] Failed to send message to ${recipient.phone}:`, error.message);
      return false;
    }
  }
}
--- End of Content for whatsapp.adapter.ts ---

================================================================================
Directory: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\lib\engagement\templates
================================================================================

(This directory contains subdirectories but no files directly. See subdirectories below.)

================================================================================
Directory: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\lib\engagement\templates\email
================================================================================

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\lib\engagement\templates\email\aiInsight.hbs
--------------------------------------------------------------------------------
Content:
<!DOCTYPE html>
<html dir="rtl" lang="he">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>גילינו משהו מעניין עליך</title>
</head>
<body style="margin: 0; padding: 0; font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; background: linear-gradient(135deg, #a8edea 0%, #fed6e3 100%); direction: rtl;">
    <table role="presentation" style="width: 100%; border-collapse: collapse;">
        <tr>
            <td align="center" style="padding: 40px 20px;">
                <table role="presentation" style="max-width: 600px; width: 100%; background: white; border-radius: 24px; box-shadow: 0 20px 60px rgba(0,0,0,0.12); overflow: hidden;">
                    
                    <tr>
                        <td style="background: linear-gradient(135deg, #06b6d4 0%, #8b5cf6 100%); padding: 50px 30px; text-align: center; position: relative;">
                            <div style="font-size: 64px; margin-bottom: 20px;">🧠✨</div>
                            <h1 style="color: white; margin: 0; font-size: 30px; font-weight: 800; line-height: 1.4; text-shadow: 0 2px 15px rgba(0,0,0,0.15);">
                                {{firstName}}, יש לנו תובנות מרתקות עליך!
                            </h1>
                            <p style="color: rgba(255,255,255,0.95); margin: 12px 0 0 0; font-size: 16px; font-weight: 500;">
                                מערכת ה-AI שלנו ניתחה את השאלון שלך
                            </p>
                        </td>
                    </tr>
                    
                    <tr>
                        <td style="padding: 40px 30px;">
                            <p style="font-size: 17px; color: #2d3748; margin: 0 0 20px 0; line-height: 1.6;">
                                היי {{firstName}},
                            </p>
                            
                            <p style="font-size: 16px; color: #4a5568; margin: 0 0 25px 0; line-height: 1.7;">
                                תודה שהשקעת זמן למלא את השאלון שלנו! התשובות שלך עזרו למערכת ה-AI המתקדמת שלנו להבין אותך טוב יותר. הנה מה שגילינו:
                            </p>

                            <div style="background: linear-gradient(135deg, #ede9fe 0%, #fce7f3 100%); border-radius: 20px; padding: 32px; margin: 28px 0; border: 2px solid rgba(139, 92, 246, 0.2); box-shadow: 0 8px 25px rgba(99, 102, 241, 0.1);">
                                <div style="display: flex; align-items: center; margin-bottom: 18px;">
                                    <span style="font-size: 36px; margin-left: 15px;">🎯</span>
                                    <h2 style="color: transparent; background: linear-gradient(135deg, #8b5cf6, #ec4899); -webkit-background-clip: text; background-clip: text; margin: 0; font-size: 22px; font-weight: 800;">
                                        התובנות שלנו עליך:
                                    </h2>
                                </div>
                                <div style="background: white; border-radius: 16px; padding: 24px; box-shadow: 0 4px 15px rgba(0,0,0,0.06);">
                                    <p style="color: #1e293b; margin: 0; font-size: 17px; line-height: 1.8; white-space: pre-wrap; font-weight: 500;">{{personalitySummary}}</p>
                                </div>
                            </div>

                            <div style="background: #f7fafc; border-radius: 12px; padding: 25px; margin: 25px 0;">
                                <h3 style="color: #2d3748; margin: 0 0 15px 0; font-size: 18px; font-weight: 600;">
                                    🌟 למה זה חשוב?
                                </h3>
                                <p style="color: #4a5568; margin: 0 0 12px 0; font-size: 15px; line-height: 1.7;">
                                    <strong>✓ התאמה מדויקת יותר:</strong> השדכנים שלנו משתמשים בתובנות האלה כדי למצוא לך התאמות שמתאימות באמת למי שאתה.
                                </p>
                                <p style="color: #4a5568; margin: 0 0 12px 0; font-size: 15px; line-height: 1.7;">
                                    <strong>✓ הבנה מעמיקה:</strong> אנחנו לא רק מסתכלים על "גובה" ו"עיסוק" - אנחנו מבינים את הערכים, האישיות והחלומות שלך.
                                </p>
                                <p style="color: #4a5568; margin: 0; font-size: 15px; line-height: 1.7;">
                                    <strong>✓ שיחות טובות יותר:</strong> ההתאמות שלך יכירו אותך טוב יותר כבר מההתחלה.
                                </p>
                            </div>

                            <table role="presentation" style="margin: 35px 0;">
                                <tr>
                                    <td style="text-align: center;">
                                        <a href="{{baseUrl}}/profile" style="display: inline-block; background: linear-gradient(135deg, #06b6d4 0%, #8b5cf6 100%); color: white; text-decoration: none; padding: 18px 48px; border-radius: 50px; font-weight: 700; font-size: 17px; box-shadow: 0 10px 30px rgba(6, 182, 212, 0.3);">
                                            לצפייה בפרופיל המלא שלי 🎯
                                        </a>
                                    </td>
                                </tr>
                            </table>

                            <p style="font-size: 14px; color: #718096; margin: 25px 0 0 0; line-height: 1.6; border-top: 1px solid #e2e8f0; padding-top: 20px;">
                                <strong>שאלות או רוצה לדבר עם שדכן?</strong><br>
                                פשוט תשיב למייל הזה ונחזור אליך בהקדם!
                            </p>
                        </td>
                    </tr>

                    <tr>
                        <td style="background: #f7fafc; padding: 25px 30px; text-align: center; border-top: 1px solid #e2e8f0;">
                            <p style="margin: 0 0 10px 0; color: #4a5568; font-size: 14px;">
                                מחכים לראות לאן זה מוביל!
                            </p>
                            <p style="margin: 0; color: #a0aec0; font-size: 13px;">
                                בברכה,<br>צוות NeshamaTech
                            </p>
                        </td>
                    </tr>
                </table>
            </td>
        </tr>
    </table>
</body>
</html>
--- End of Content for aiInsight.hbs ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\lib\engagement\templates\email\profileNudge.hbs
--------------------------------------------------------------------------------
Content:
<!DOCTYPE html>
<html dir="rtl" lang="he">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>טיפ קטן שיעשה הבדל גדול</title>
</head>
<body style="margin: 0; padding: 0; font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; background: linear-gradient(135deg, #ecfeff 0%, #fce7f3 100%); direction: rtl;">
    <table role="presentation" style="width: 100%; border-collapse: collapse;">
        <tr>
            <td align="center" style="padding: 40px 20px;">
                <table role="presentation" style="max-width: 600px; width: 100%; background: white; border-radius: 24px; box-shadow: 0 20px 60px rgba(0,0,0,0.12); overflow: hidden; border: 1px solid rgba(255,255,255,0.7);">
                    
                    <tr>
                        <td style="background: linear-gradient(135deg, #ec4899 0%, #f97316 100%); padding: 45px 30px; text-align: center; position: relative;">
                            <div style="font-size: 56px; margin-bottom: 15px;">💡</div>
                            <h1 style="color: white; margin: 0; font-size: 28px; font-weight: 800; text-shadow: 0 2px 10px rgba(0,0,0,0.2);">
                                {{firstName}}, יש כאן כמה דברים שחסרים...
                            </h1>
                        </td>
                    </tr>
                    
                    <tr>
                        <td style="padding: 40px 30px;">
                            <p style="font-size: 17px; color: #2d3748; margin: 0 0 20px 0; line-height: 1.6;">
                                שלום {{firstName}},
                            </p>
                            
                            <p style="font-size: 16px; color: #4a5568; margin: 0 0 25px 0; line-height: 1.7;">
                                שמנו לב שהפרופיל שלך עדיין לא מושלם לגמרי. אנחנו יודעים שזה לוקח זמן, אבל יש לנו נתון מעניין לשתף אתך:
                            </p>

                            <div style="background: linear-gradient(135deg, #fef2f2 0%, #fff7ed 100%); border-right: 4px solid #ec4899; border-radius: 16px; padding: 24px; margin: 28px 0; box-shadow: 0 4px 15px rgba(236, 72, 153, 0.1);">
                                <p style="color: #be123c; margin: 0; font-size: 16px; line-height: 1.8; font-weight: 600;">
                                    <strong style="font-size: 20px; display: block; margin-bottom: 8px;">📊 נתון שווה לדעת:</strong>
                                    פרופילים מלאים עם תמונות איכותיות מקבלים <strong style="font-size: 20px; background: linear-gradient(135deg, #ec4899, #f97316); -webkit-background-clip: text; -webkit-text-fill-color: transparent;">פי 3 יותר</strong> הצעות התאמה מפרופילים חלקיים!
                                </p>
                            </div>

                            <h2 style="color: #2d3748; margin: 30px 0 20px 0; font-size: 20px; font-weight: 600;">
                                הנה מה שחסר בפרופיל שלך:
                            </h2>

                            <div style="background: #f7fafc; border-radius: 12px; padding: 25px; margin: 20px 0;">
                                {{#each missingItems}}
                                <div style="display: flex; align-items: flex-start; margin-bottom: 15px;">
                                    <span style="color: #f56565; font-size: 20px; margin-left: 10px; flex-shrink: 0;">✗</span>
                                    <p style="color: #4a5568; margin: 0; line-height: 1.6; font-size: 15px;">{{this}}</p>
                                </div>
                                {{/each}}
                            </div>

                            <p style="font-size: 16px; color: #4a5568; margin: 25px 0; line-height: 1.7;">
                                אנחנו מבטיחים שזה לא ייקח יותר מ-<strong>10 דקות</strong>! וזה יכול לעשות את כל ההבדל בהצלחה שלך למצוא את ההתאמה המושלמת.
                            </p>

                            <table role="presentation" style="margin: 35px 0;">
                                <tr>
                                    <td style="text-align: center;">
                                        <a href="{{baseUrl}}/profile" style="display: inline-block; background: linear-gradient(135deg, #ec4899 0%, #f97316 100%); color: white; text-decoration: none; padding: 18px 48px; border-radius: 50px; font-weight: 700; font-size: 17px; box-shadow: 0 10px 30px rgba(236, 72, 153, 0.35);">
                                            בוא נשלים את זה תוך 10 דקות 🚀
                                        </a>
                                    </td>
                                </tr>
                            </table>

                            <p style="font-size: 14px; color: #718096; margin: 25px 0 0 0; line-height: 1.6; border-top: 1px solid #e2e8f0; padding-top: 20px;">
                                צריך עזרה או יש שאלות? פשוט תשיב למייל הזה - אנחנו כאן בשבילך!
                            </p>
                        </td>
                    </tr>

                    <tr>
                        <td style="background: #f7fafc; padding: 25px 30px; text-align: center; border-top: 1px solid #e2e8f0;">
                            <p style="margin: 0 0 5px 0; color: #718096; font-size: 14px;">
                                מאמינים בך! ❤️
                            </p>
                            <p style="margin: 0; color: #a0aec0; font-size: 13px;">
                                צוות NeshamaTech
                            </p>
                        </td>
                    </tr>
                </table>
            </td>
        </tr>
    </table>
</body>
</html>
--- End of Content for profileNudge.hbs ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\lib\engagement\templates\email\welcome.hbs
--------------------------------------------------------------------------------
Content:
<!DOCTYPE html>
<html dir="rtl" lang="he">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ברוכים הבאים ל-NeshamaTech</title>
</head>
<body style="margin: 0; padding: 0; font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); direction: rtl;">
    <table role="presentation" style="width: 100%; border-collapse: collapse;">
        <tr>
            <td align="center" style="padding: 40px 20px;">
                <table role="presentation" style="max-width: 600px; width: 100%; background: white; border-radius: 24px; box-shadow: 0 20px 60px rgba(0,0,0,0.12), 0 0 0 1px rgba(255,255,255,0.5); overflow: hidden;">
                    <!-- Header with gradient matching site -->
                    <tr>
                        <td style="background: linear-gradient(135deg, #06b6d4 0%, #ec4899 100%); padding: 50px 30px; text-align: center; position: relative;">
                            <div style="position: absolute; top: 20px; right: 20px; width: 80px; height: 80px; background: radial-gradient(circle, rgba(255,255,255,0.2) 0%, transparent 70%); border-radius: 50%; filter: blur(20px);"></div>
                            <h1 style="color: white; margin: 0; font-size: 32px; font-weight: 800; text-shadow: 0 2px 10px rgba(0,0,0,0.1);">
                                🎉 ברוך הבא ל-NeshamaTech!
                            </h1>
                            <p style="color: rgba(255,255,255,0.95); margin: 12px 0 0 0; font-size: 17px; font-weight: 500;">
                                המסע שלך להתאמה מושלמת מתחיל כאן
                            </p>
                        </td>
                    </tr>
                    
                    <!-- Main Content -->
                    <tr>
                        <td style="padding: 40px 30px;">
                            <p style="font-size: 18px; color: #2d3748; margin: 0 0 20px 0; line-height: 1.6;">
                                שלום {{firstName}},
                            </p>
                            
                            <p style="font-size: 16px; color: #4a5568; margin: 0 0 20px 0; line-height: 1.7;">
                                כמה מרגש! הצטרפת למשפחת NeshamaTech - מערכת השידוכים החכמה שמשלבת טכנולוגיה מתקדמת עם הבינה והחום האנושיים של שדכנים מקצועיים.
                            </p>

                            <div style="background: linear-gradient(135deg, #e0e7ff 0%, #fce7f3 100%); border-radius: 12px; padding: 25px; margin: 25px 0;">
                                <h2 style="color: #5a67d8; margin: 0 0 15px 0; font-size: 20px; font-weight: 600;">
                                    💡 מה הלאה?
                                </h2>
                                <ul style="color: #4a5568; margin: 0; padding-right: 20px; line-height: 1.8;">
                                    <li style="margin-bottom: 10px;">
                                        <strong>השלם את הפרופיל שלך</strong> - ככל שנדע אותך יותר, כך נוכל למצוא לך התאמה טובה יותר
                                    </li>
                                    <li style="margin-bottom: 10px;">
                                        <strong>הוסף תמונות</strong> - תמונה שווה אלף מילים, ו-3 תמונות? זה הרבה יותר!
                                    </li>
                                    <li style="margin-bottom: 10px;">
                                        <strong>מלא את השאלון</strong> - זה עוזר לנו להבין מי אתה באמת ומה חשוב לך
                                    </li>
                                </ul>
                            </div>

                            <p style="font-size: 16px; color: #4a5568; margin: 20px 0; line-height: 1.7;">
                                <strong>טיפ חשוב:</strong> פרופילים מלאים עם תמונות איכותיות מקבלים פי 3 יותר התאמות! אז כדאי להשקיע כמה דקות עכשיו.
                            </p>

                            <!-- CTA Button -->
                            <table role="presentation" style="margin: 30px 0;">
                                <tr>
                                    <td style="text-align: center;">
                                        <a href="{{baseUrl}}/profile" style="display: inline-block; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; text-decoration: none; padding: 16px 40px; border-radius: 50px; font-weight: 600; font-size: 16px; box-shadow: 0 4px 15px rgba(102, 126, 234, 0.4); transition: transform 0.2s;">
                                            להשלמת הפרופיל שלי
                                        </a>
                                    </td>
                                </tr>
                            </table>

                            <p style="font-size: 15px; color: #718096; margin: 25px 0 0 0; line-height: 1.6; border-top: 1px solid #e2e8f0; padding-top: 20px;">
                                יש שאלות? אנחנו כאן בשבילך! פשוט תשיב למייל הזה ונחזור אליך בהקדם.
                            </p>
                        </td>
                    </tr>

                    <!-- Footer -->
                    <tr>
                        <td style="background: #f7fafc; padding: 25px 30px; text-align: center; border-top: 1px solid #e2e8f0;">
                            <p style="margin: 0 0 10px 0; color: #718096; font-size: 14px;">
                                בהצלחה במסע שלך! 💙
                            </p>
                            <p style="margin: 0; color: #a0aec0; font-size: 13px;">
                                צוות NeshamaTech
                            </p>
                        </td>
                    </tr>
                </table>
            </td>
        </tr>
    </table>
</body>
</html>
--- End of Content for welcome.hbs ---

================================================================================
Directory: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\lib\engagement\templates\whatsapp
================================================================================

(This directory is empty.)

