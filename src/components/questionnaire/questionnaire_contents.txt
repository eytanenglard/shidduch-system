################################################################################
# Directory Content Map For: C:\Users\user\Desktop\matchpoint\shidduch-system\src\components\questionnaire
# Generated on: 2025-07-28 14:59:13
################################################################################

================================================================================
Directory: C:\Users\user\Desktop\matchpoint\shidduch-system\src\components\questionnaire
================================================================================

--------------------------------------------------------------------------------
File: C:\Users\user\Desktop\matchpoint\shidduch-system\src\components\questionnaire\MatchmakingQuestionnaire.tsx
--------------------------------------------------------------------------------
Content:
// src/components/questionnaire/MatchmakingQuestionnaire.tsx
'use client';

import React, {
  useState,
  useMemo,
  useEffect,
  useCallback,
  useRef,
} from 'react';
import { useRouter } from 'next/navigation';
import QuestionnaireLayout from './layout/QuestionnaireLayout';
import Welcome from './onboarding/Welcome';
import TrackSelection from './onboarding/TrackSelection';
import WorldComponent from './worlds/WorldComponent'; // <-- שינוי: ייבוא הקומפוננטה המאוחדת
import QuestionnaireCompletion from './common/QuestionnaireCompletion';
import { useLanguage } from '@/app/contexts/LanguageContext';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { cn } from '@/lib/utils';
import WorldsMap from './layout/WorldsMap';
import { useIdleTimeout } from './hooks/useIdleTimeout';
import { signOut } from 'next-auth/react';
import { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import {
  Loader2,
  CheckCircle,
  AlertTriangle,
  XCircle,
  Info,
  Clock,
  LogOut,
} from 'lucide-react';
import type {
  WorldId,
  UserTrack,
  QuestionnaireSubmission,
  QuestionnaireAnswer,
  AnswerValue,
  WorldComponentProps,
} from './types/types';

const worldLabels = {
  PERSONALITY: 'אישיות',
  VALUES: 'ערכים ואמונות',
  RELATIONSHIP: 'זוגיות',
  PARTNER: 'פרטנר',
  RELIGION: 'דת ומסורת',
} as const;

enum OnboardingStep {
  WELCOME = 'WELCOME',
  TRACK_SELECTION = 'TRACK_SELECTION',
  WORLDS = 'WORLDS',
  COMPLETED = 'COMPLETED',
  MAP = 'MAP',
}

const WORLD_ORDER: WorldId[] = [
  'PERSONALITY',
  'VALUES',
  'RELATIONSHIP',
  'PARTNER',
  'RELIGION',
];

export interface MatchmakingQuestionnaireProps {
  userId?: string;
  onComplete?: () => void;
  initialWorld?: WorldId;
}

export default function MatchmakingQuestionnaire({
  userId,
  onComplete,
  initialWorld,
}: MatchmakingQuestionnaireProps) {
  const router = useRouter();
  const { language } = useLanguage();
  const sessionId = useMemo(() => `session_${Date.now()}`, []);

  const [currentStep, setCurrentStep] = useState<OnboardingStep>(
    OnboardingStep.WELCOME
  );
  const [currentWorld, setCurrentWorld] = useState<WorldId>(
    initialWorld || 'VALUES'
  );
  const [userTrack, setUserTrack] = useState<UserTrack>('חילוני');
  const [answers, setAnswers] = useState<QuestionnaireAnswer[]>([]);
  const [completedWorlds, setCompletedWorlds] = useState<WorldId[]>([]);
  const [startTime] = useState(() => new Date().toISOString());
  const [lastSavedTime, setLastSavedTime] = useState<Date | null>(null);

  const [currentQuestionIndices, setCurrentQuestionIndices] = useState<
    Record<WorldId, number>
  >({
    PERSONALITY: 0,
    VALUES: 0,
    RELATIONSHIP: 0,
    PARTNER: 0,
    RELIGION: 0,
  });

  const [isSaving, setIsSaving] = useState(false);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [isDirty, setIsDirty] = useState(false);

  const [toastState, setToastState] = useState<{
    message: string;
    type: 'success' | 'error' | 'info';
    isVisible: boolean;
    action?: { label: string; onClick: () => void };
  }>({
    message: '',
    type: 'info',
    isVisible: false,
  });

  const [showIdleModal, setShowIdleModal] = useState(false);
  const logoutTimer = useRef<NodeJS.Timeout>();

  const handleIdle = useCallback(() => {
    if (userId) {
      setShowIdleModal(true);
      logoutTimer.current = setTimeout(() => {
        signOut({ callbackUrl: '/' });
      }, 60000);
    }
  }, [userId]);

  const { resetTimer: resetIdleTimer } = useIdleTimeout({
    onIdle: handleIdle,
    idleTimeSeconds: 7200,
  });

  const handleStayActive = useCallback(() => {
    if (logoutTimer.current) {
      clearTimeout(logoutTimer.current);
    }
    setShowIdleModal(false);
    resetIdleTimer();
  }, [resetIdleTimer]);

  useEffect(() => {
    if (initialWorld) {
      setCurrentWorld(initialWorld);
    }
  }, [initialWorld]);

  const showToast = useCallback(
    (
      message: string,
      type: 'success' | 'error' | 'info' = 'info',
      duration: number = 3000,
      action?: { label: string; onClick: () => void }
    ) => {
      setToastState({ message, type, isVisible: true, action });
      if (!action) {
        setTimeout(() => {
          setToastState((prev) => ({ ...prev, isVisible: false }));
        }, duration);
      }
    },
    []
  );

  const getNextWorld = (currentWorldId: WorldId): WorldId | null => {
    const currentIndex = WORLD_ORDER.indexOf(currentWorldId);
    if (currentIndex < WORLD_ORDER.length - 1) {
      return WORLD_ORDER[currentIndex + 1];
    }
    return null;
  };

  const prepareSubmissionData = useCallback((): QuestionnaireSubmission => {
    const isCompleted = completedWorlds.length === WORLD_ORDER.length;
    return {
      userId: userId || sessionId,
      answers: answers,
      worldsCompleted: completedWorlds,
      completed: isCompleted,
      startedAt: startTime,
      completedAt: isCompleted ? new Date().toISOString() : undefined,
      userTrack,
    };
  }, [answers, completedWorlds, sessionId, startTime, userId, userTrack]);

  const handleQuestionnaireSave = useCallback(
    async (isAutoSave = false) => {
      if (isSaving && !isAutoSave) return;

      setIsSaving(true);
      setError(null);

      try {
        const submissionData = prepareSubmissionData();
        const validateSubmission = (data: QuestionnaireSubmission): boolean => {
          if (!data.userId) return false;
          if (!Array.isArray(data.worldsCompleted)) return false;
          if (typeof data.completed !== 'boolean') return false;
          if (!data.startedAt) return false;
          if (data.completed && !data.completedAt) return false;
          return true;
        };

        if (!validateSubmission(submissionData)) {
          throw new Error('Invalid submission data');
        }

        if (!userId) {
          localStorage.setItem(
            'tempQuestionnaire',
            JSON.stringify(submissionData)
          );
          if (currentStep === OnboardingStep.COMPLETED) {
            router.push('/auth/signin?callbackUrl=/questionnaire/restore');
          }
        } else {
          const response = await fetch('/api/questionnaire', {
            method: 'PUT',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(submissionData),
          });

          if (!response.ok) {
            const errorData = await response.json();
            throw new Error(errorData.error || 'Failed to save questionnaire');
          }
        }

        setLastSavedTime(new Date());
        setIsDirty(false);
        setToastState((prev) => ({ ...prev, isVisible: false }));

        if (!isAutoSave) {
          showToast('השאלון נשמר בהצלחה', 'success');
        }

        if (
          submissionData.completed &&
          currentStep === OnboardingStep.COMPLETED
        ) {
          if (onComplete) onComplete();
        }
      } catch (err) {
        console.error('Failed to save questionnaire:', err);
        const errorMessage =
          err instanceof Error ? err.message : 'אירעה שגיאה בשמירת השאלון.';
        setError(errorMessage);
        if (!isAutoSave) {
          showToast(errorMessage, 'error');
        } else {
          showToast('שגיאה בשמירה אוטומטית', 'error');
        }
      } finally {
        setIsSaving(false);
      }
    },
    [
      isSaving,
      prepareSubmissionData,
      userId,
      router,
      onComplete,
      showToast,
      currentStep,
    ]
  );

  useEffect(() => {
    let autoSaveInterval: NodeJS.Timeout;
    if (currentStep === OnboardingStep.WORLDS && userId) {
      autoSaveInterval = setInterval(() => {
        if (isDirty) {
          showToast('יש לך שינויים שלא נשמרו.', 'info', 10000, {
            label: 'שמור עכשיו',
            onClick: () => handleQuestionnaireSave(false),
          });
        }
      }, 180000);
    }
    return () => {
      if (autoSaveInterval) clearInterval(autoSaveInterval);
    };
  }, [currentStep, userId, isDirty, handleQuestionnaireSave, showToast]);

  useEffect(() => {
    const handleBeforeUnload = (event: BeforeUnloadEvent) => {
      if (isDirty) {
        event.preventDefault();
        event.returnValue = '';
      }
    };
    window.addEventListener('beforeunload', handleBeforeUnload);
    return () => {
      window.removeEventListener('beforeunload', handleBeforeUnload);
    };
  }, [isDirty]);

  useEffect(() => {
    const loadExistingAnswers = async () => {
      if (!userId) {
        setIsLoading(false);
        const tempData = localStorage.getItem('tempQuestionnaire');
        if (tempData) {
          console.warn(
            'Found temp data but user ID is missing. This should be handled by /questionnaire/restore.'
          );
        }
        return;
      }

      setIsLoading(true);
      try {
        const response = await fetch('/api/questionnaire');
        if (!response.ok) {
          if (response.status === 404) {
            console.log('No existing questionnaire data found for user.');
            setCurrentStep(OnboardingStep.WELCOME);
          } else {
            const errorData = await response.json();
            throw new Error(
              errorData.error || 'Failed to load existing answers'
            );
          }
        } else {
          const data = await response.json();
          if (data.success && data.data) {
            const allAnswers = [
              ...(data.data.answers || []),
              ...(data.data.valuesAnswers || []),
              ...(data.data.personalityAnswers || []),
              ...(data.data.relationshipAnswers || []),
              ...(data.data.partnerAnswers || []),
              ...(data.data.religionAnswers || []),
            ].filter(
              (answer, index, self) =>
                index ===
                self.findIndex((a) => a.questionId === answer.questionId)
            );

            setAnswers(allAnswers);
            const loadedCompletedWorlds = data.data.worldsCompleted || [];
            setCompletedWorlds(loadedCompletedWorlds);
            setUserTrack(data.data.userTrack || 'חילוני');

            const isQuestionnaireComplete =
              data.data.completed ||
              loadedCompletedWorlds.length === WORLD_ORDER.length;

            if (isQuestionnaireComplete) {
              if (initialWorld && WORLD_ORDER.includes(initialWorld)) {
                setCurrentWorld(initialWorld);
                setCurrentStep(OnboardingStep.WORLDS);
              } else {
                setCurrentWorld(WORLD_ORDER[0]);
                setCurrentStep(OnboardingStep.MAP);
              }
            } else if (
              loadedCompletedWorlds.length > 0 ||
              allAnswers.length > 0 ||
              initialWorld
            ) {
              const nextWorld = WORLD_ORDER.find(
                (world) => !loadedCompletedWorlds.includes(world)
              );
              const worldToSet =
                initialWorld && WORLD_ORDER.includes(initialWorld)
                  ? initialWorld
                  : nextWorld || WORLD_ORDER[0];
              setCurrentWorld(worldToSet);
              if (initialWorld && WORLD_ORDER.includes(initialWorld)) {
                setCurrentStep(OnboardingStep.WORLDS);
              } else {
                setCurrentStep(OnboardingStep.MAP);
              }
            } else {
              setCurrentStep(OnboardingStep.WELCOME);
            }

            if (data.data.currentQuestionIndices) {
              setCurrentQuestionIndices(data.data.currentQuestionIndices);
            }
          } else {
            console.log('Questionnaire data structure invalid or missing.');
            setCurrentStep(OnboardingStep.WELCOME);
          }
        }
      } catch (err) {
        console.error('Failed to load existing answers:', err);
        setError('אירעה שגיאה בטעינת התשובות הקיימות');
        setCurrentStep(OnboardingStep.WELCOME);
      } finally {
        setIsLoading(false);
      }
    };
    loadExistingAnswers();
  }, [userId, initialWorld]);

  const handleAnswer = useCallback(
    (questionId: string, value: AnswerValue) => {
      setError(null);
      setIsDirty(true);
      const newAnswer: QuestionnaireAnswer = {
        questionId,
        worldId: currentWorld,
        value,
        answeredAt: new Date().toISOString(),
      };
      setAnswers((prev) => {
        const filtered = prev.filter((a) => a.questionId !== questionId);
        return [...filtered, newAnswer];
      });
    },
    [currentWorld]
  );

  const handleWorldChange = useCallback((newWorld: WorldId) => {
    setCurrentWorld(newWorld);
    setCurrentStep(OnboardingStep.WORLDS);
    setError(null);
  }, []);

  const handleWorldComplete = useCallback(
    async (worldId: WorldId) => {
      let updatedCompletedWorlds = completedWorlds;
      if (!completedWorlds.includes(worldId)) {
        updatedCompletedWorlds = [...completedWorlds, worldId];
        setCompletedWorlds(updatedCompletedWorlds);
      }

      showToast(
        `כל הכבוד! סיימת את עולם ה${worldLabels[worldId] ?? worldId.toLowerCase()}`,
        'success'
      );

      const isQuestionnaireNowFullyCompleted =
        updatedCompletedWorlds.length === WORLD_ORDER.length;
      const submissionDataForWorldComplete = {
        ...prepareSubmissionData(),
        worldsCompleted: updatedCompletedWorlds,
        completed: isQuestionnaireNowFullyCompleted,
        completedAt: isQuestionnaireNowFullyCompleted
          ? new Date().toISOString()
          : undefined,
      };

      if (userId) {
        try {
          setIsSaving(true);
          const response = await fetch('/api/questionnaire', {
            method: 'PUT',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(submissionDataForWorldComplete),
          });
          if (!response.ok)
            throw new Error('Failed to save after world completion');
          setLastSavedTime(new Date());
          setIsDirty(false);
          showToast('התקדמות העולם נשמרה', 'success');
        } catch (e) {
          console.error('Error saving after world complete:', e);
          showToast('שגיאה בשמירת התקדמות העולם', 'error');
          setError('שגיאה בשמירת התקדמות העולם.');
          setIsSaving(false);
          return;
        } finally {
          setIsSaving(false);
        }
      } else {
        localStorage.setItem(
          'tempQuestionnaire',
          JSON.stringify(submissionDataForWorldComplete)
        );
        setLastSavedTime(new Date());
        showToast('התקדמות העולם נשמרה בדפדפן', 'info');
      }

      if (isQuestionnaireNowFullyCompleted) {
        if (!userId) {
          router.push('/auth/signin?callbackUrl=/questionnaire/restore');
        } else {
          setCurrentStep(OnboardingStep.COMPLETED);
          if (onComplete) onComplete();
        }
      } else {
        const nextWorld = getNextWorld(worldId);
        if (nextWorld) {
          setCurrentWorld(nextWorld);
          setCurrentStep(OnboardingStep.MAP);
        } else {
          setCurrentStep(OnboardingStep.MAP);
        }
      }
    },
    [
      completedWorlds,
      showToast,
      userId,
      prepareSubmissionData,
      router,
      onComplete,
    ]
  );

  const handleExit = useCallback(() => {
    setCurrentStep(OnboardingStep.MAP);
  }, []);

  // --- שינוי מרכזי כאן ---
  function renderCurrentWorld() {
    const worldProps: WorldComponentProps = {
      onAnswer: handleAnswer,
      onComplete: () => handleWorldComplete(currentWorld),
      onBack: handleExit,
      answers: answers.filter((a) => a.worldId === currentWorld),
      isCompleted: completedWorlds.includes(currentWorld),
      language,
      currentQuestionIndex: currentQuestionIndices[currentWorld],
      setCurrentQuestionIndex: (index: number) => {
        setCurrentQuestionIndices((prev) => ({
          ...prev,
          [currentWorld]: index,
        }));
      },
    };

    return <WorldComponent {...worldProps} worldId={currentWorld} />;
  }
  // --- סוף השינוי ---

  function renderCurrentStep() {
    if (isLoading) {
      return (
        <div className="flex flex-col items-center justify-center min-h-screen p-4">
          <Loader2 className="w-12 h-12 animate-spin text-blue-500 mb-4" />
          <h2 className="text-xl font-medium">טוען את השאלון...</h2>
          <p className="text-gray-500 mt-2">אנא המתן, מאחזר את ההתקדמות שלך</p>
        </div>
      );
    }

    switch (currentStep) {
      case OnboardingStep.MAP:
        return (
          <WorldsMap
            currentWorld={currentWorld}
            completedWorlds={completedWorlds}
            onWorldChange={handleWorldChange}
          />
        );
      case OnboardingStep.WELCOME:
        return (
          <Welcome
            onStart={() => setCurrentStep(OnboardingStep.TRACK_SELECTION)}
            onLearnMore={() => router.push('/profile')}
            isLoggedIn={!!userId}
            hasSavedProgress={answers.length > 0 || completedWorlds.length > 0}
          />
        );
      case OnboardingStep.TRACK_SELECTION:
        return (
          <TrackSelection
            onSelect={(track: UserTrack) => {
              setUserTrack(track);
              setCurrentWorld(WORLD_ORDER[0]);
              setCurrentStep(OnboardingStep.MAP);
            }}
            onBack={() => setCurrentStep(OnboardingStep.WELCOME)}
            selectedTrack={userTrack}
          />
        );
      case OnboardingStep.WORLDS:
        return (
          <QuestionnaireLayout
            currentWorld={currentWorld}
            userTrack={userTrack}
            completedWorlds={completedWorlds}
            onWorldChange={handleWorldChange}
            onExit={handleExit}
            onSaveProgress={() => handleQuestionnaireSave(false)}
            language={language}
            isLoggedIn={!!userId}
          >
            {' '}
            {renderCurrentWorld()}{' '}
          </QuestionnaireLayout>
        );
      case OnboardingStep.COMPLETED:
        return (
          <QuestionnaireCompletion
            onSendToMatching={async () => {
              if (onComplete) onComplete();
              else router.push('/dashboard');
            }}
            isLoading={isSaving}
            isLoggedIn={!!userId}
          />
        );
      default:
        return <div>שגיאה בטעינת השלב</div>;
    }
  }

  const Toast = ({ message, type, isVisible, action }) => {
    if (!isVisible) return null;
    return (
      <div
        className={cn(
          'fixed bottom-4 right-4 z-[100] p-4 rounded-lg shadow-lg max-w-md transition-all duration-300',
          type === 'success' && 'bg-green-500',
          type === 'error' && 'bg-red-500',
          type === 'info' && 'bg-blue-500',
          'text-white'
        )}
      >
        <div className="flex items-center justify-between w-full">
          <div className="flex items-center">
            {type === 'success' ? (
              <CheckCircle className="h-5 w-5 mr-2" />
            ) : type === 'error' ? (
              <XCircle className="h-5 w-5 mr-2" />
            ) : (
              <Info className="h-5 w-5 mr-2" />
            )}
            <p>{message}</p>
          </div>
          {action && (
            <Button
              variant="ghost"
              size="sm"
              onClick={() => {
                action.onClick();
                setToastState((prev) => ({ ...prev, isVisible: false }));
              }}
              className="mr-4 text-white hover:bg-white/20 font-bold"
            >
              {action.label}
            </Button>
          )}
        </div>
      </div>
    );
  };

  const IdleModal = () => {
    if (!showIdleModal) return null;
    return (
      <div className="fixed inset-0 bg-black/60 z-[200] flex items-center justify-center p-4">
        <Card className="max-w-md w-full">
          <CardHeader>
            <CardTitle className="flex items-center">
              <Clock className="w-6 h-6 mr-3 text-blue-500" />
              האם אתה עדיין כאן?
            </CardTitle>
          </CardHeader>
          <CardContent>
            <p className="text-gray-600 mb-4">
              לא זיהינו פעילות בחשבונך. למען אבטחת המידע, תתבצע יציאה אוטומטית
              מהמערכת בעוד כדקה.
            </p>
            <div className="flex justify-end gap-2">
              <Button
                variant="outline"
                onClick={() => signOut({ callbackUrl: '/' })}
              >
                <LogOut className="w-4 h-4 mr-2" />
                צא מהמערכת
              </Button>
              <Button onClick={handleStayActive}>אני עדיין כאן</Button>
            </div>
          </CardContent>
        </Card>
      </div>
    );
  };

  return (
    <div
      className={cn(
        'min-h-screen bg-gray-50',
        language === 'he' ? 'dir-rtl' : 'dir-ltr'
      )}
    >
      <IdleModal />
      {lastSavedTime && currentStep === OnboardingStep.WORLDS && userId && (
        <div className="fixed bottom-4 left-4 z-40 bg-white p-2 rounded-lg shadow-md text-xs text-gray-600 border">
          <div className="flex items-center">
            <CheckCircle className="h-3.5 w-3.5 text-green-500 mr-1" />
            <span>נשמר לאחרונה: {lastSavedTime.toLocaleTimeString()}</span>
          </div>
        </div>
      )}
      {error && currentStep !== OnboardingStep.WORLDS && (
        <Alert variant="destructive" className="m-4 max-w-lg mx-auto">
          <AlertTriangle className="h-4 w-4 mr-2" />
          <AlertDescription>{error}</AlertDescription>
        </Alert>
      )}
      {renderCurrentStep()}
      <Toast
        message={toastState.message}
        type={toastState.type}
        isVisible={toastState.isVisible}
        action={toastState.action}
      />
    </div>
  );
}
--- End of Content for MatchmakingQuestionnaire.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\user\Desktop\matchpoint\shidduch-system\src\components\questionnaire\QuestionnaireComplete.tsx
--------------------------------------------------------------------------------
Content:
"use client";

import { useEffect } from "react";
import { useRouter } from "next/navigation";
import { useSession } from "next-auth/react";
import { Card, CardHeader, CardTitle, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Alert, AlertDescription } from "@/components/ui/alert";
import { CheckCircle2, ArrowRight } from "lucide-react";

export default function QuestionnairePage() {
  const { status } = useSession();
  const router = useRouter();

  useEffect(() => {
    if (status === "unauthenticated") {
      router.push("/auth/signin");
    }
  }, [status, router]);

  if (status === "loading") {
    return (
      <div className="container mx-auto py-8 px-4">
        <Card className="max-w-xl mx-auto">
          <CardContent className="p-8">
            <div className="text-center">טוען...</div>
          </CardContent>
        </Card>
      </div>
    );
  }

  return (
    <div className="container mx-auto py-8 px-4">
      <Card className="max-w-xl mx-auto bg-green-50 border-green-200">
        <CardHeader className="text-center pb-2">
          <div className="flex justify-center mb-4">
            <CheckCircle2 className="w-12 h-12 text-green-500" />
          </div>
          <CardTitle className="text-2xl">תודה על מילוי השאלון!</CardTitle>
        </CardHeader>

        <CardContent className="space-y-6 pt-4">
          <div className="text-center text-gray-600 space-y-2">
            <p>התשובות שלך נשמרו בהצלחה במערכת</p>
            <p>הצוות שלנו יעבור על התשובות ויחזור אליך בהקדם</p>
          </div>

          <Alert className="bg-blue-50 border-blue-200">
            <AlertDescription>
              בזמן שהצוות עובד על ההתאמות עבורך, תוכל/י להשלים את הפרופיל האישי
              שלך
            </AlertDescription>
          </Alert>

          <div className="flex justify-center pt-4">
            <Button
              onClick={() => router.push("/profile")}
              className="flex items-center"
            >
              המשך לפרופיל
              <ArrowRight className="mr-2 h-5 w-5" />
            </Button>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}
--- End of Content for QuestionnaireComplete.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\user\Desktop\matchpoint\shidduch-system\src\components\questionnaire\QuestionnairePage.tsx
--------------------------------------------------------------------------------
Content:
// src/components/questionnaire/QuestionnairePage.tsx
"use client";

import { useSession } from "next-auth/react";
import { useState, useEffect } from "react";
import { useRouter } from "next/navigation";
import { useSearchParams } from "next/navigation";
import { Card } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { ArrowLeft, AlertCircle, Loader2 } from "lucide-react";
import { Alert, AlertDescription } from "@/components/ui/alert";
import QuestionnaireLandingPage from "./pages/QuestionnaireLandingPage";
import MatchmakingQuestionnaire from "./MatchmakingQuestionnaire";
import type { WorldId } from "./types/types";

// Enum to track questionnaire flow stages
enum QuestionnaireStage {
  LANDING = "LANDING",
  QUESTIONNAIRE = "QUESTIONNAIRE",
  COMPLETE = "COMPLETE",
}

export default function QuestionnairePage() {
  const { data: session, status } = useSession();
  const router = useRouter();
  const searchParams = useSearchParams();

  // State for tracking current stage in the flow
  const [currentStage, setCurrentStage] = useState<QuestionnaireStage>(
    QuestionnaireStage.LANDING
  );
  const [error, setError] = useState<string | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [hasSavedProgress, setHasSavedProgress] = useState(false);
  const [initialWorld, setInitialWorld] = useState<WorldId | undefined>(
    undefined
  );

  // Check for existing progress when component mounts
  useEffect(() => {
    const checkExistingProgress = async () => {
      if (status === "loading") return;

      setIsLoading(true);

      try {
        // If user is logged in, check for saved progress
        if (session?.user?.id) {
          const response = await fetch("/api/questionnaire");
          const data = await response.json();

          if (data.success && data.data) {
            setHasSavedProgress(true);
          }
        }
      } catch (err) {
        console.error("Error checking questionnaire progress:", err);
      } finally {
        setIsLoading(false);
      }
    };

    checkExistingProgress();
  }, [session, status]);

  // Check for world parameter in URL
  useEffect(() => {
    if (status === "loading") return;

    const worldParam = searchParams?.get("world");
    if (
      worldParam &&
      ["PERSONALITY", "VALUES", "RELATIONSHIP", "PARTNER", "RELIGION"].includes(
        worldParam as string
      )
    ) {
      // If we have a world parameter and the current stage is appropriate, we'll set it
      if (
        currentStage === QuestionnaireStage.QUESTIONNAIRE ||
        currentStage === QuestionnaireStage.LANDING
      ) {
        setCurrentStage(QuestionnaireStage.QUESTIONNAIRE);

        // Pass the selected world to MatchmakingQuestionnaire
        const selectedWorld = worldParam as WorldId;
        setInitialWorld(selectedWorld);
      }
    }
  }, [searchParams, status, currentStage]);

  // Handler when the landing page "start" button is clicked
  const handleStartQuestionnaire = () => {
    setCurrentStage(QuestionnaireStage.QUESTIONNAIRE);
  };

  // Handler when questionnaire is completed
  const handleQuestionnaireComplete = async () => {
    try {
      await router.push("/questionnaire/complete");
      setCurrentStage(QuestionnaireStage.COMPLETE);
    } catch (err) {
      console.error("Error completing questionnaire:", err);
      setError("אירעה שגיאה בסיום השאלון. אנא נסה שוב.");
    }
  };

  // Loading state
  if (isLoading) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <Card className="w-full max-w-md p-8 text-center">
          <Loader2 className="h-12 w-12 animate-spin mx-auto mb-4 text-blue-600" />
          <p className="text-lg font-medium">טוען...</p>
          <p className="text-sm text-gray-500 mt-2">מאחזר את נתוני השאלון</p>
        </Card>
      </div>
    );
  }

  // Render different components based on current stage
  const renderCurrentStage = () => {
    switch (currentStage) {
      case QuestionnaireStage.LANDING:
        return (
          <QuestionnaireLandingPage
            onStartQuestionnaire={handleStartQuestionnaire}
            hasSavedProgress={hasSavedProgress}
          />
        );

      case QuestionnaireStage.QUESTIONNAIRE:
        return (
          <MatchmakingQuestionnaire
            userId={session?.user?.id}
            onComplete={handleQuestionnaireComplete}
            initialWorld={initialWorld}
          />
        );

      case QuestionnaireStage.COMPLETE:
        // This should redirect to /questionnaire/complete
        return null;

      default:
        return <div>שגיאה בטעינת השלב</div>;
    }
  };

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Back navigation for non-landing stages */}
      {currentStage !== QuestionnaireStage.LANDING && (
        <div className="container mx-auto p-4">
          <Button
            variant="ghost"
            size="sm"
            className="mb-4"
            onClick={() => setCurrentStage(QuestionnaireStage.LANDING)}
          >
            <ArrowLeft className="mr-2 h-4 w-4" />
            חזרה לעמוד הראשי
          </Button>
        </div>
      )}

      {/* Error messages */}
      {error && (
        <div className="container mx-auto p-4">
          <Alert variant="destructive" className="mb-4">
            <AlertCircle className="h-4 w-4" />
            <AlertDescription>{error}</AlertDescription>
          </Alert>
        </div>
      )}

      {/* Current stage content */}
      {renderCurrentStage()}
    </div>
  );
}
--- End of Content for QuestionnairePage.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\user\Desktop\matchpoint\shidduch-system\src\components\questionnaire\QuestionnaireRestore.tsx
--------------------------------------------------------------------------------
Content:
"use client";

import { useEffect, useState } from "react";
import { useRouter } from "next/navigation";
import { useSession } from "next-auth/react";
import { Alert, AlertDescription } from "@/components/ui/alert";
import { Card, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Loader2 } from "lucide-react";

export default function QuestionnaireRestore() {
  const router = useRouter();
  const { data: session, status } = useSession();
  const [isProcessing, setIsProcessing] = useState(false);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    const restoreQuestionnaire = async () => {
      if (isProcessing) return;

      try {
        setIsProcessing(true);
        setError(null);

        const savedData = localStorage.getItem("tempQuestionnaire");

        if (!savedData || !session?.user?.id) {
          router.push("/dashboard");
          return;
        }

        const questionnaireData = JSON.parse(savedData);
        questionnaireData.userId = session.user.id;

        const response = await fetch("/api/questionnaire", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify(questionnaireData),
        });

        if (!response.ok) {
          const errorData = await response.json();
          throw new Error(errorData.message || "Failed to save questionnaire");
        }

        localStorage.removeItem("tempQuestionnaire");
        router.push(
          questionnaireData.completed ? "/dashboard" : "/questionnaire"
        );
      } catch (err) {
        console.error("Error restoring questionnaire:", err);
        setError("אירעה שגיאה בשחזור הנתונים. אנא נסה שוב.");
      } finally {
        setIsProcessing(false);
      }
    };

    if (session?.user && !isProcessing && status === "authenticated") {
      restoreQuestionnaire();
    }
  }, [session, router, isProcessing, status]);

  const renderContent = () => {
    if (status === "loading") {
      return (
        <Card>
          <CardContent className="p-6 text-center">
            <Loader2 className="w-8 h-8 animate-spin mx-auto mb-4" />
            <p className="text-lg">טוען...</p>
          </CardContent>
        </Card>
      );
    }

    if (status === "unauthenticated") {
      router.push("/login");
      return null;
    }

    if (error) {
      return (
        <>
          <Alert variant="destructive">
            <AlertDescription>{error}</AlertDescription>
          </Alert>
          <div className="mt-4 flex justify-center">
            <Button onClick={() => router.push("/questionnaire")}>
              חזור לשאלון
            </Button>
          </div>
        </>
      );
    }

    return (
      <Card>
        <CardContent className="p-6 text-center">
          <Loader2 className="w-8 h-8 animate-spin mx-auto mb-4" />
          <p className="text-lg">משחזר את נתוני השאלון...</p>
          <p className="text-sm text-gray-500 mt-2">אנא המתן</p>
        </CardContent>
      </Card>
    );
  };

  return (
    <div className="container mx-auto p-4 max-w-md">{renderContent()}</div>
  );
}
--- End of Content for QuestionnaireRestore.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\user\Desktop\matchpoint\shidduch-system\src\components\questionnaire\questionnaire_contents.txt
--------------------------------------------------------------------------------
[This is the output log file itself. Content not included.]

================================================================================
Directory: C:\Users\user\Desktop\matchpoint\shidduch-system\src\components\questionnaire\common
================================================================================

--------------------------------------------------------------------------------
File: C:\Users\user\Desktop\matchpoint\shidduch-system\src\components\questionnaire\common\AnswerInput.tsx
--------------------------------------------------------------------------------
Content:
// src/components/questionnaire/common/AnswerInput.tsx

import React, { useState, useEffect, useCallback } from "react";
import { Slider } from "@/components/ui/slider";
import { Textarea } from "@/components/ui/textarea";
import { Button } from "@/components/ui/button";
import { Label } from "@/components/ui/label";
import { Input } from "@/components/ui/input";
import { Card } from "@/components/ui/card";
import { Progress } from "@/components/ui/progress";
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip";
import {
  X,
  Plus,
  CheckCircle,
  Eraser,
  Info,
  ChevronDown,
  ChevronUp,
  CornerDownRight,
  AlertCircle,
  Sparkles,
  Clock,
  Copy,
  CheckCheck,
  Edit,
  Trash2,
} from "lucide-react";
import InteractiveScale from "./InteractiveScale";
// ודא שגם Option מיובא מפורשות אם הוא לא
import type { AnswerValue, AnswerInputProps, Option } from "../types/types";
import { cn } from "@/lib/utils";
import {
  Collapsible,
  CollapsibleContent,
  CollapsibleTrigger,
} from "@/components/ui/collapsible";
import { motion, AnimatePresence } from "framer-motion";
import { Badge } from "@/components/ui/badge";

// הגדרות CSS יכולות להיות בקובץ CSS גלובלי או בסגנון מוטבע אם נדרש
/*
.progress-green .progress-indicator { background-color: #22c55e; }
.progress-blue .progress-indicator { background-color: #3b82f6; }
.progress-amber .progress-indicator { background-color: #f59e0b; }
*/

export default function AnswerInput({
  question,
  value,
  onChange,
  onClear,
  className = "",
}: AnswerInputProps) {
  const [internalValue, setInternalValue] = useState<AnswerValue>(value);
  const [error, setError] = useState<string | null>(null);
  const [customValue, setCustomValue] = useState<string>("");
  const [, setCharactersCount] = useState<number>(0);
  const [isFocused, setIsFocused] = useState<boolean>(false);
  const [, setSelectedOption] = useState<string | null>(null);
  const [textAreaHeight, setTextAreaHeight] = useState<number>(150);
  const [isCollapsibleOpen, setIsCollapsibleOpen] = useState<boolean>(false);
  const [textCopied, setTextCopied] = useState(false);

  useEffect(() => {
    setInternalValue(value);
    if (typeof value === "string") {
      setCharactersCount(value.length);
      if (value.length > 200) setTextAreaHeight(220);
      else if (value.length > 100) setTextAreaHeight(180);
      else setTextAreaHeight(150);
    } else if (value === undefined || value === null) {
         setCharactersCount(0);
         setTextAreaHeight(150);
    }
  }, [value]);

   const handleClear = useCallback(() => {
     let emptyValue: AnswerValue;
     switch (question.type) {
       case "multiChoice":
       case "multiSelect":
       case "multiSelectWithOther":
         emptyValue = [];
         break;
       case "budgetAllocation":
         emptyValue = {};
         break;
       case "openText":
         emptyValue = "";
         break;
       case "scale":
          emptyValue = undefined;
          break;
       case "singleChoice":
       case "scenario":
       case "iconChoice":
       default:
         emptyValue = undefined;
     }

     setInternalValue(emptyValue);
     setCustomValue("");
     setCharactersCount(0);
     setSelectedOption(null);
     setError(null);
     onClear?.();
   }, [question.type, onClear]);


  const handleValueChange = useCallback((newValue: AnswerValue) => {
    if (question.type === 'singleChoice' && newValue === internalValue && !question.isRequired) {
      handleClear();
      return;
    }
     if (question.type === 'iconChoice' && newValue === internalValue && !question.isRequired) {
       handleClear();
       return;
     }
     if (question.type === 'scenario' && newValue === internalValue && !question.isRequired) {
       handleClear();
       return;
     }

    setInternalValue(newValue);
    setError(null);
    onChange?.(newValue);

    if (typeof newValue === "string") {
      setCharactersCount(newValue.length);
    } else {
        setCharactersCount(0);
    }
  }, [internalValue, onChange, question.isRequired, question.type, handleClear]);

  const handleCopyText = useCallback(() => {
    if (typeof internalValue === "string" && internalValue) {
      navigator.clipboard.writeText(internalValue);
      setTextCopied(true);
      setTimeout(() => setTextCopied(false), 2000);
    }
  }, [internalValue]);

  const optionVariants = {
    initial: { opacity: 0, y: 10 },
    animate: { opacity: 1, y: 0, transition: { duration: 0.2 } },
    exit: { opacity: 0, scale: 0.96, transition: { duration: 0.15 } },
    hover: { scale: 1.02, transition: { duration: 0.2 } },
    tap: { scale: 0.98, transition: { duration: 0.1 } },
  };

  const renderSingleChoiceOption = (choiceOption: Option, isSelected: boolean) => (
    <motion.div
      key={choiceOption.value}
      variants={optionVariants}
      initial="initial"
      animate="animate"
      exit="exit"
      whileHover={!isSelected ? "hover" : undefined}
      whileTap="tap"
      className={cn(
        "p-3 border rounded-lg cursor-pointer transition-all",
        "hover:bg-gray-50 flex items-center justify-between gap-2",
        "relative overflow-hidden",
        isSelected && "bg-blue-50 border-blue-500 shadow-sm"
      )}
       onClick={() => handleValueChange(choiceOption.value)}
    >
      <AnimatePresence>
       {isSelected && (
        <motion.div
          initial={{ opacity: 0, scale: 0.5 }}
          animate={{ opacity: 1, scale: 1 }}
          exit={{ opacity: 0, scale: 0.5 }}
          className="absolute inset-0 bg-gradient-to-r from-blue-50 via-blue-100 to-blue-50 opacity-60"
        />
       )}
      </AnimatePresence>

      <div className="flex items-center gap-2 flex-1 z-10">
        {choiceOption.icon && (
          <motion.div
            className={cn("text-blue-600 transition-transform", isSelected && "text-blue-700")}
             animate={{ scale: isSelected ? 1.1 : 1 }}
          >
            {choiceOption.icon}
          </motion.div>
        )}
        <span className={cn("font-medium", isSelected && "text-blue-700")}>
          {choiceOption.text}
        </span>
      </div>

      <div className="relative w-6 h-6 z-10">
          <AnimatePresence>
            {isSelected && (
                 <motion.div
                   key="check"
                   initial={{ scale: 0, opacity: 0 }}
                   animate={{ scale: 1, opacity: 1 }}
                   exit={{ scale: 0, opacity: 0 }}
                   className="absolute inset-0 flex items-center justify-center"
                 >
                    <CheckCircle className="h-5 w-5 text-blue-500" />
                 </motion.div>
            )}
           {isSelected && !question.isRequired && (
                 <motion.div
                     key="clear"
                     initial={{ scale: 0, opacity: 0 }}
                     animate={{ scale: 1, opacity: 1 }}
                     exit={{ scale: 0, opacity: 0 }}
                     className="absolute inset-0 flex items-center justify-center opacity-0 hover:opacity-100 transition-opacity"
                 >
                     <Button
                        size="icon"
                        variant="ghost"
                        className="h-6 w-6 rounded-full text-gray-400 hover:text-red-500 hover:bg-red-50 p-0"
                        onClick={(e) => {
                           e.stopPropagation();
                           handleClear();
                        }}
                        aria-label="נקה בחירה"
                     >
                         <X className="w-4 h-4" />
                     </Button>
                 </motion.div>
           )}
         </AnimatePresence>
       </div>
    </motion.div>
  );

  const renderInput = () => {
    switch (question.type) {
      case "singleChoice":
        return (
          <div className="space-y-2">
            <AnimatePresence initial={false}>
              {question.options?.map((optionItem) => {
                const isSelected = internalValue === optionItem.value;
                return renderSingleChoiceOption(optionItem, isSelected);
              })}
            </AnimatePresence>
          </div>
        );

       case "scale":
         return (
           <InteractiveScale
             min={question.min ?? 1}
             max={question.max ?? 10}
             step={question.step ?? 1}
             value={typeof internalValue === 'number' ? internalValue : undefined}
             onChange={(newValue) => handleValueChange(newValue)}
             showLabels={true}
             showValue={true}
             name={question.id}
             required={question.isRequired}
             // ניתן להוסיף props נוספים ל-InteractiveScale כאן אם הוגדרו ב-Question
             // labels={question.labels}
             // descriptions={question.descriptions}
           />
         );

      case "multiChoice":
      case "multiSelect":
        const selectedValues = Array.isArray(internalValue) ? internalValue as string[] : [];
        return (
          <div className="space-y-2">
            <AnimatePresence initial={false}>
              {question.options?.map((option) => {
                const isSelected = selectedValues.includes(option.value);
                return (
                  <motion.div
                    key={option.value}
                    variants={optionVariants} initial="initial" animate="animate" exit="exit" whileHover="hover" whileTap="tap"
                    className={cn(
                      "p-3 border rounded-lg cursor-pointer transition-all",
                      "hover:bg-gray-50 flex items-center justify-between",
                      "relative overflow-hidden",
                      isSelected && "bg-blue-50 border-blue-500"
                    )}
                    onClick={() => {
                      let newValues: string[];
                      if (isSelected) {
                        newValues = selectedValues.filter((v) => v !== option.value);
                      } else {
                          if (question.maxSelections && selectedValues.length >= question.maxSelections) {
                               setError(`ניתן לבחור עד ${question.maxSelections} אפשרויות`);
                               setTimeout(() => setError(null), 2000);
                               return;
                          }
                          newValues = [...selectedValues, option.value];
                      }
                      handleValueChange(newValues);
                    }}
                  >
                   <AnimatePresence>
                       {isSelected && (
                           <motion.div
                               initial={{ opacity: 0, scale: 0.5 }} animate={{ opacity: 1, scale: 1 }} exit={{ opacity: 0, scale: 0.5 }}
                               className="absolute inset-0 bg-gradient-to-r from-blue-50 via-blue-100 to-blue-50 opacity-60"
                           />
                       )}
                   </AnimatePresence>
                    <div className="flex items-center gap-2 z-10">
                      {option.icon && (
                        <motion.div
                          className={cn("text-blue-600 transition-transform", isSelected && "text-blue-700")}
                          animate={{ scale: isSelected ? 1.1 : 1 }}
                        >
                          {option.icon}
                        </motion.div>
                      )}
                      <span className={cn("font-medium", isSelected && "text-blue-700")}>
                        {option.text}
                      </span>
                    </div>
                     <div className={cn(
                         "w-5 h-5 border rounded flex items-center justify-center transition-colors",
                         isSelected ? "bg-blue-500 border-blue-500" : "border-gray-300 bg-white"
                     )}>
                         <AnimatePresence>
                           {isSelected && (
                             <motion.div initial={{scale: 0}} animate={{scale: 1}} exit={{scale: 0}}>
                               <CheckCheck className="w-4 h-4 text-white" />
                             </motion.div>
                           )}
                         </AnimatePresence>
                     </div>
                  </motion.div>
                );
              })}
            </AnimatePresence>
             {error && (
                 <motion.p
                     initial={{ opacity: 0, y: -5 }} animate={{ opacity: 1, y: 0 }}
                     className="text-xs text-red-500 flex items-center gap-1"
                 >
                     <AlertCircle className="w-3 h-3"/> {error}
                 </motion.p>
             )}
            {(question.minSelections || question.maxSelections) && (
              <motion.div
                initial={{ opacity: 0 }} animate={{ opacity: 1 }}
                className="text-xs text-gray-500 mt-2 flex justify-between items-center p-2 bg-gray-50 rounded-lg"
              >
                <span className="flex items-center">
                  <Info className="h-3 w-3 mr-1 text-blue-500" />
                  נבחרו {selectedValues.length} אפשרויות
                </span>
                <span>
                  {question.minSelections && `מינימום: ${question.minSelections}`}
                  {question.minSelections && question.maxSelections && " • "}
                  {question.maxSelections && `מקסימום: ${question.maxSelections}`}
                </span>
              </motion.div>
            )}
          </div>
        );

       case "multiSelectWithOther":
         const selectedWithOtherValues = Array.isArray(internalValue) ? internalValue as string[] : [];
         const customAnswers = selectedWithOtherValues.filter(v => v.startsWith("custom:"));
         const predefinedAnswers = selectedWithOtherValues.filter(v => !v.startsWith("custom:"));
         const isCustomValueEmpty = !customValue.trim();
         const isMaxLengthReached = question.maxSelections !== undefined && selectedWithOtherValues.length >= question.maxSelections;

         return (
             <div className="space-y-4">
                 {/* Predefined Options */}
                 {question.options?.map((option) => {
                     if (option.value === 'other') return null;
                     const isSelected = predefinedAnswers.includes(option.value);
                     return (
                         <motion.div
                             key={option.value}
                             variants={optionVariants} initial="initial" animate="animate" exit="exit" whileHover="hover" whileTap="tap"
                             className={cn(
                                 "p-3 border rounded-lg cursor-pointer transition-all",
                                 "hover:bg-gray-50 flex items-center justify-between",
                                 "relative overflow-hidden",
                                 isSelected && "bg-blue-50 border-blue-500"
                             )}
                             onClick={() => {
                                 let newValues: string[];
                                 if (isSelected) {
                                     newValues = predefinedAnswers.filter(v => v !== option.value);
                                 } else {
                                     if (isMaxLengthReached) {
                                         setError(`ניתן לבחור עד ${question.maxSelections} אפשרויות`);
                                         setTimeout(() => setError(null), 2000);
                                         return;
                                     }
                                     newValues = [...predefinedAnswers, option.value];
                                 }
                                 handleValueChange([...newValues, ...customAnswers]);
                             }}
                         >
                            <AnimatePresence>
                                {isSelected && (
                                    <motion.div
                                        initial={{ opacity: 0, scale: 0.5 }}
                                        animate={{ opacity: 1, scale: 1 }}
                                        exit={{ opacity: 0, scale: 0.5 }}
                                        className="absolute inset-0 bg-gradient-to-r from-blue-50 via-blue-100 to-blue-50 opacity-60"
                                    />
                                )}
                            </AnimatePresence>
                             <div className="flex items-center gap-2 z-10">
                                 {option.icon && <motion.div animate={{ scale: isSelected ? 1.1 : 1 }} className={cn("text-blue-600", isSelected && "text-blue-700")}>{option.icon}</motion.div>}
                                 <span className={cn("font-medium", isSelected && "text-blue-700")}>{option.text}</span>
                             </div>
                             <div className={cn(
                                 "w-5 h-5 border rounded flex items-center justify-center transition-colors",
                                 isSelected ? "bg-blue-500 border-blue-500" : "border-gray-300 bg-white"
                             )}>
                                 <AnimatePresence>
                                   {isSelected && (
                                     <motion.div initial={{scale: 0}} animate={{scale: 1}} exit={{scale: 0}}>
                                       <CheckCheck className="w-4 h-4 text-white" />
                                     </motion.div>
                                   )}
                                 </AnimatePresence>
                             </div>
                         </motion.div>
                     );
                 })}

                 {/* Custom Input Section */}
                 <div className="space-y-2 border-t pt-4 mt-4">
                     <Label className="flex items-center gap-2 text-sm font-medium">
                         <Plus className="h-4 w-4 text-blue-500" />
                         הוספת אפשרות אחרת (אופציונלי)
                     </Label>
                     <div className="flex gap-2">
                         <Input
                             value={customValue}
                             onChange={(e) => setCustomValue(e.target.value)}
                             placeholder="הקלד/י אפשרות נוספת..."
                             className="flex-1 text-sm"
                             disabled={isMaxLengthReached && isCustomValueEmpty}
                         />
                         <Button
                             type="button"
                             variant="outline"
                             size="sm"
                             onClick={() => {
                                 if (!isCustomValueEmpty) {
                                     if (isMaxLengthReached) {
                                         setError(`ניתן לבחור עד ${question.maxSelections} אפשרויות`);
                                         setTimeout(() => setError(null), 2000);
                                         return;
                                     }
                                     const newCustomAnswer = `custom:${customValue.trim()}`;
                                     if (!customAnswers.includes(newCustomAnswer)) {
                                        handleValueChange([...predefinedAnswers, ...customAnswers, newCustomAnswer]);
                                        setCustomValue("");
                                     } else {
                                        setError("אפשרות זו כבר קיימת");
                                        setTimeout(() => setError(null), 2000);
                                     }
                                 }
                             }}
                             disabled={isCustomValueEmpty || isMaxLengthReached}
                         >
                             <Plus className="w-4 h-4 mr-1" />
                             הוסף
                         </Button>
                     </div>
                 </div>

                 {/* Display Custom Answers */}
                 {customAnswers.length > 0 && (
                     <motion.div
                         initial={{ opacity: 0, y: 10 }} animate={{ opacity: 1, y: 0 }}
                         className="space-y-2 bg-blue-50 p-3 rounded-lg border border-blue-200"
                     >
                         <Label className="text-xs text-gray-600 flex items-center font-normal">
                             <Edit className="h-3.5 w-3.5 mr-1 text-blue-600" />
                             תשובות שהוספת:
                         </Label>
                         <div className="space-y-1 mt-1">
                             {customAnswers.map((customVal, index) => (
                                 <motion.div
                                     key={index}
                                     initial={{ opacity: 0, x: -10 }} animate={{ opacity: 1, x: 0 }} exit={{ opacity: 0, x: 10 }}
                                     className="flex items-center justify-between p-1.5 bg-white rounded-md border border-blue-100 text-sm"
                                 >
                                     <div className="flex items-center">
                                         <CornerDownRight className="w-3.5 h-3.5 text-blue-400 mr-2" />
                                         <span className="text-gray-700">{customVal.replace("custom:", "")}</span>
                                     </div>
                                     <Button
                                         variant="ghost" size="icon"
                                         className="h-6 w-6 text-gray-400 hover:text-red-500 hover:bg-red-50 rounded-full p-0"
                                         onClick={() => {
                                             const newValues = selectedWithOtherValues.filter(v => v !== customVal);
                                             handleValueChange(newValues);
                                         }}
                                         aria-label="הסר תשובה מותאמת"
                                     >
                                         <Trash2 className="w-3.5 h-3.5" />
                                     </Button>
                                 </motion.div>
                             ))}
                         </div>
                     </motion.div>
                 )}
                 {error && (
                     <motion.p
                         initial={{ opacity: 0, y: -5 }} animate={{ opacity: 1, y: 0 }}
                         className="text-xs text-red-500 flex items-center gap-1"
                     >
                         <AlertCircle className="w-3 h-3"/> {error}
                     </motion.p>
                 )}
                 {(question.minSelections || question.maxSelections) && (
                     <motion.div
                         initial={{ opacity: 0 }} animate={{ opacity: 1 }}
                         className="text-xs text-gray-500 mt-2 flex justify-between items-center p-2 bg-gray-50 rounded-lg"
                     >
                         <span className="flex items-center">
                             <Info className="h-3 w-3 mr-1 text-blue-500" />
                             נבחרו {selectedWithOtherValues.length} אפשרויות
                         </span>
                         <span>
                             {question.minSelections && `מינימום: ${question.minSelections}`}
                             {question.minSelections && question.maxSelections && " • "}
                             {question.maxSelections && `מקסימום: ${question.maxSelections}`}
                         </span>
                     </motion.div>
                 )}
             </div>
         );

       case "scenario":
          return (
           <div className="space-y-2">
             {question.options?.map((option, index) => {
                const optionValue = option.value || option.text;
                const isSelected = internalValue === optionValue;

                return (
                 <motion.div
                   key={index}
                   variants={optionVariants} initial="initial" animate="animate" whileHover="hover" whileTap="tap"
                   className={cn(
                      "p-4 border rounded-lg cursor-pointer transition-all",
                      "hover:bg-gray-50 flex items-center justify-between",
                      "relative overflow-hidden",
                      isSelected && "bg-blue-50 border-blue-500 shadow-sm"
                    )}
                   onClick={() => handleValueChange(optionValue)}
                 >
                    <AnimatePresence>
                       {isSelected && (
                           <motion.div
                               initial={{ opacity: 0, scale: 0.5 }} animate={{ opacity: 1, scale: 1 }} exit={{ opacity: 0, scale: 0.5 }}
                               className="absolute inset-0 bg-gradient-to-r from-blue-50 via-blue-100 to-blue-50 opacity-60"
                           />
                       )}
                   </AnimatePresence>
                   <div className="flex-1 z-10">
                     <div className={cn("font-medium", isSelected && "text-blue-700")}>
                       {option.text}
                     </div>
                     {option.description && (
                       <div className={cn("text-sm text-gray-600 mt-1", isSelected && "text-blue-600")}>
                         {option.description}
                       </div>
                     )}
                   </div>
                     <div className="relative w-6 h-6 ml-2 z-10">
                         <AnimatePresence>
                             {isSelected ? (
                                 <motion.div
                                     key="check"
                                     initial={{ scale: 0, opacity: 0 }} animate={{ scale: 1, opacity: 1 }} exit={{ scale: 0, opacity: 0 }}
                                     className="absolute inset-0 flex items-center justify-center"
                                 >
                                     <CheckCircle className="h-5 w-5 text-blue-500" />
                                 </motion.div>
                             ) : null}
                             {isSelected && !question.isRequired && (
                                 <motion.div
                                     key="clear"
                                     initial={{ scale: 0, opacity: 0 }} animate={{ scale: 1, opacity: 1 }} exit={{ scale: 0, opacity: 0 }}
                                     className="absolute inset-0 flex items-center justify-center opacity-0 hover:opacity-100 transition-opacity"
                                 >
                                     <Button
                                         size="icon" variant="ghost"
                                         className="h-6 w-6 rounded-full text-gray-400 hover:text-red-500 hover:bg-red-50 p-0"
                                         onClick={(e) => { e.stopPropagation(); handleClear(); }}
                                         aria-label="נקה בחירה"
                                     >
                                         <X className="w-4 h-4" />
                                     </Button>
                                 </motion.div>
                             )}
                         </AnimatePresence>
                     </div>
                 </motion.div>
               );
              })}
            </div>
         );

       case "iconChoice":
         return (
           <div className="grid grid-cols-2 sm:grid-cols-3 gap-3">
             {question.options?.map((option) => {
               const isSelected = internalValue === option.value;

               return (
                 <TooltipProvider key={option.value} delayDuration={300}>
                   <Tooltip>
                     <TooltipTrigger asChild>
                       <motion.div
                         variants={optionVariants} initial="initial" animate="animate" whileHover="hover" whileTap="tap"
                         onClick={() => handleValueChange(option.value)}
                       >
                         <Card className={cn(
                           "p-4 cursor-pointer transition-all hover:shadow-md relative min-h-[100px]",
                           "flex flex-col items-center justify-center gap-2 text-center",
                           isSelected ? "ring-2 ring-blue-500 bg-blue-50" : "bg-white hover:bg-gray-50 border"
                         )}>
                           <AnimatePresence>
                               {isSelected && (
                                   <motion.div
                                       initial={{ scale: 0 }} animate={{ scale: 1 }} exit={{ scale: 0 }}
                                       className="absolute -top-1.5 -right-1.5 bg-blue-500 text-white rounded-full p-0.5 shadow"
                                   >
                                       <CheckCircle className="h-3.5 w-3.5" />
                                   </motion.div>
                               )}
                           </AnimatePresence>
                             {isSelected && !question.isRequired && (
                                 <motion.div
                                     key="clear-icon"
                                     initial={{ scale: 0, opacity: 0 }} animate={{ scale: 1, opacity: 1 }} exit={{ scale: 0, opacity: 0 }}
                                     className="absolute top-1 right-1 opacity-0 hover:opacity-100 transition-opacity"
                                 >
                                     <Button
                                         size="icon" variant="ghost"
                                         className="h-6 w-6 rounded-full text-gray-400 hover:text-red-500 hover:bg-red-50 p-0"
                                         onClick={(e) => { e.stopPropagation(); handleClear(); }}
                                         aria-label="נקה בחירה"
                                     >
                                         <X className="w-3.5 h-3.5" />
                                     </Button>
                                 </motion.div>
                             )}
                           <motion.div
                             animate={{ scale: isSelected ? 1.1 : 1, y: isSelected ? -2 : 0 }}
                             className={cn("text-3xl mb-1 transition-colors duration-200",
                                isSelected ? "text-blue-600" : "text-gray-500 group-hover:text-gray-700")}
                           >
                             {option.icon}
                           </motion.div>
                           <motion.span
                             animate={{ fontWeight: isSelected ? 600 : 500 }}
                             className={cn("text-sm", isSelected ? "text-blue-700" : "text-gray-700")}
                           >
                             {option.text}
                           </motion.span>
                         </Card>
                       </motion.div>
                     </TooltipTrigger>
                     {option.description && (
                       <TooltipContent side="top" className="max-w-xs">
                         <p>{option.description}</p>
                       </TooltipContent>
                     )}
                   </Tooltip>
                 </TooltipProvider>
               );
             })}
           </div>
         );

       case "openText":
         const textValue = (internalValue as string) || "";
         const hasMinLength = question.minLength !== undefined && question.minLength > 0;
         const hasMaxLength = question.maxLength !== undefined && question.maxLength > 0;
         const hasLength = hasMinLength || hasMaxLength;
         const isMinLengthMet = !hasMinLength || textValue.length >= (question.minLength ?? 0);
         const isCloseToMax = hasMaxLength && textValue.length > (question.maxLength ?? 0) * 0.85;
         const lengthExceeded = hasMaxLength && textValue.length > (question.maxLength ?? 0);
         const completionPercentage = hasMinLength
           ? Math.min(100, Math.round((textValue.length / (question.minLength ?? 1)) * 100))
           : 0;

         return (
           <div className="space-y-2">
             <div className={cn(
                "relative border rounded-md transition-all",
                isFocused && "ring-2 ring-blue-500",
                !isMinLengthMet && question.isRequired ? "border-red-300" : "border-gray-300",
                lengthExceeded ? "border-red-400 bg-red-50/50" : isCloseToMax ? "border-amber-300 bg-amber-50/50" : ""
             )}>
               <Textarea
                 value={textValue}
                 onChange={(e) => handleValueChange(e.target.value)}
                 onFocus={() => setIsFocused(true)}
                 onBlur={() => setIsFocused(false)}
                 placeholder={question.placeholder || "הקלד/י את תשובתך כאן..."}
                 className={cn(
                   "resize-y border-0 focus-visible:ring-0 w-full", "min-h-[150px]", "text-base leading-relaxed",
                   textValue.length > 0 ? "pr-12" : "pr-3", "py-3 pl-3"
                 )}
                 style={{ height: `${textAreaHeight}px` }}
                 aria-label={question.question}
                 aria-invalid={(!isMinLengthMet && question.isRequired) || lengthExceeded}
                 aria-describedby={question.id + "-length-info"}
               />
               {textValue.length > 0 && (
                 <div className="absolute top-2 left-2 flex flex-col gap-1">
                   <TooltipProvider>
                     <Tooltip>
                       <TooltipTrigger asChild>
                         <Button variant="ghost" size="icon" className="h-6 w-6 rounded-full" onClick={handleCopyText}>
                           {textCopied ? <CheckCheck className="h-3.5 w-3.5 text-green-500" /> : <Copy className="h-3.5 w-3.5 text-gray-400" />}
                         </Button>
                       </TooltipTrigger>
                       <TooltipContent side="right"><p>{textCopied ? "הועתק!" : "העתק טקסט"}</p></TooltipContent>
                     </Tooltip>
                   </TooltipProvider>
                    {!question.isRequired && (
                       <TooltipProvider>
                         <Tooltip>
                           <TooltipTrigger asChild>
                             <Button variant="ghost" size="icon" className="h-6 w-6 rounded-full" onClick={handleClear}>
                               <Eraser className="h-3.5 w-3.5 text-gray-400" />
                             </Button>
                           </TooltipTrigger>
                           <TooltipContent side="right"><p>נקה טקסט</p></TooltipContent>
                         </Tooltip>
                       </TooltipProvider>
                     )}
                 </div>
               )}
               {hasLength && (
                 <div id={question.id + "-length-info"} className="absolute bottom-2 left-2">
                   <Badge
                     variant="outline"
                     className={cn(
                       "text-xs font-normal transition-colors",
                       lengthExceeded ? "bg-red-100 text-red-800 border-red-200"
                       : isCloseToMax ? "bg-amber-100 text-amber-800 border-amber-200"
                       : "bg-gray-100 text-gray-600"
                     )}
                   >
                     {textValue.length}
                     {hasMaxLength && ` / ${question.maxLength}`}
                   </Badge>
                 </div>
               )}
             </div>
             {hasMinLength && question.isRequired && (
               <div className="space-y-1">
                 <div className="flex justify-between text-xs">
                   <span className={cn("flex items-center", !isMinLengthMet ? "text-amber-600" : "text-green-600")}>
                     {!isMinLengthMet ? (
                         <><AlertCircle className="h-3 w-3 mr-1" /> נדרשים עוד {(question.minLength ?? 0) - textValue.length} תווים</>
                     ) : (
                         <><CheckCircle className="h-3 w-3 mr-1" /> הגעת למינימום הנדרש</>
                     )}
                   </span>
                   <span className="font-medium">{completionPercentage}%</span>
                 </div>
                 <Progress value={completionPercentage} className="h-1.5" />
               </div>
             )}
              <div className="flex flex-wrap justify-between items-center mt-1 gap-2">
                  <div className="flex flex-wrap gap-1">
                      {hasMinLength && (
                           <div className={cn("inline-flex items-center text-xs px-2 py-0.5 rounded-full", !isMinLengthMet && question.isRequired ? "bg-red-100 text-red-700" : "bg-blue-100 text-blue-700")}>
                              <Info className="h-3 w-3 mr-1" /> {question.isRequired ? "נדרש לפחות" : "מומלץ לפחות"} {question.minLength ?? 0} תווים
                           </div>
                      )}
                      {lengthExceeded && (
                         <div className="inline-flex items-center text-xs px-2 py-0.5 rounded-full bg-red-100 text-red-700">
                             <AlertCircle className="h-3 w-3 mr-1" /> חריגה מהאורך המקסימלי
                         </div>
                      )}
                  </div>
                 {hasMinLength && (
                   <div className="text-xs text-gray-500 flex items-center">
                     <Clock className="h-3 w-3 mr-1" /> זמן כתיבה משוער: {Math.max(1, Math.ceil((question.minLength ?? 0) / 70))} דקות
                   </div>
                 )}
             </div>
             {question.description && (
               <Collapsible className="mt-4" open={isCollapsibleOpen} onOpenChange={setIsCollapsibleOpen}>
                 <CollapsibleTrigger asChild>
                   <Button variant="ghost" size="sm" className="w-full flex items-center justify-between px-3 py-1.5 h-auto hover:bg-blue-50 text-sm text-blue-700">
                     <div className="flex items-center"><Sparkles className="h-4 w-4 mr-2 text-blue-500" /> <span>טיפים למענה על שאלה זו</span></div>
                     {isCollapsibleOpen ? <ChevronUp className="h-4 w-4 text-blue-500" /> : <ChevronDown className="h-4 w-4 text-blue-500" />}
                   </Button>
                 </CollapsibleTrigger>
                 <CollapsibleContent className="p-4 bg-blue-50 rounded-md mt-2 text-sm text-blue-900 prose prose-sm max-w-none">
                    {question.description}
                 </CollapsibleContent>
               </Collapsible>
             )}
           </div>
         );

       case "budgetAllocation":
         const budgetValues = (internalValue as Record<string, number>) || {};
         const totalAllocatedPoints = Object.values(budgetValues).reduce((sum, val) => sum + (val || 0), 0);
         const totalPointsRequired = question.totalPoints ?? 100;
         const pointsDifference = totalPointsRequired - totalAllocatedPoints;
         const isAllocationComplete = pointsDifference === 0;
         const isOverAllocated = pointsDifference < 0;

         return (
             <div className="space-y-4">
                 {question.categories?.map((category) => {
                     const categoryValue = budgetValues[category.label] || 0;
                     const isActive = categoryValue > 0;

                     return (
                         <motion.div
                             key={category.label} className="space-y-2"
                             whileHover={{ scale: 1.01 }} transition={{ duration: 0.2 }}
                         >
                             <div className="flex justify-between items-center">
                                 <Label className="flex items-center gap-2 text-sm font-medium">
                                     {category.icon && (<motion.div animate={{ scale: isActive ? 1.1 : 1 }} className={cn("text-blue-600")}>{category.icon}</motion.div>)}
                                     {category.label}
                                 </Label>
                                 <Badge variant="outline" className={cn("transition-all text-sm px-2 py-0.5", isActive ? "bg-blue-100 text-blue-800 border-blue-200" : "bg-gray-100 text-gray-600 border-gray-200")}>
                                     {categoryValue.toFixed(0)}{question.totalPoints ? '' : '%'}
                                 </Badge>
                             </div>
                             <Slider
                                 value={[categoryValue]}
                                 min={category.min ?? 0} max={category.max ?? totalPointsRequired} step={1}
                                 onValueChange={(newValues: number[]) => {
                                     const currentOthersTotal = totalAllocatedPoints - categoryValue;
                                     const newValue = Math.min(newValues[0], totalPointsRequired - currentOthersTotal);
                                     handleValueChange({...budgetValues, [category.label]: newValue});
                                 }}
                                 className={cn("py-1", isActive ? "[&>span:first-child]:bg-blue-600" : "[&>span:first-child]:bg-gray-300")}
                                 aria-label={`הקצאת נקודות עבור ${category.label}`}
                             />
                             {category.description && <p className="text-xs text-gray-500 mt-1">{category.description}</p>}
                         </motion.div>
                     );
                 })}
                 <div className={cn("flex justify-between items-center p-3 rounded-lg border mt-4", isAllocationComplete ? "bg-green-50 border-green-200" : isOverAllocated ? "bg-red-50 border-red-200" : "bg-blue-50 border-blue-200")}>
                     <div className="text-sm">
                         סה״כ הוקצה:{" "}
                         <span className={cn("font-bold", isAllocationComplete ? "text-green-700" : isOverAllocated ? "text-red-700" : "text-blue-700")}>
                             {totalAllocatedPoints} / {totalPointsRequired}
                         </span>
                         {!isAllocationComplete && (
                             <span className={cn("text-xs ml-2", isOverAllocated ? "text-red-600" : "text-amber-600")}>
                                 ({pointsDifference > 0 ? `חסר ${pointsDifference}` : `עודף ${Math.abs(pointsDifference)}`})
                             </span>
                         )}
                     </div>
                     {totalAllocatedPoints > 0 && (!question.isRequired || isAllocationComplete) && (
                         <Button variant="ghost" size="sm" onClick={handleClear} className="text-xs text-red-500 hover:text-red-700 hover:bg-red-50" aria-label="אפס הקצאה">
                             <Eraser className="w-3.5 h-3.5 mr-1" /> אפס הכל
                         </Button>
                     )}
                 </div>
             </div>
         );

      default:
        console.warn("Unsupported question type:", question.type);
        return (
             <div className="p-4 bg-yellow-50 border border-yellow-200 rounded-md text-yellow-800">
                 <p><strong>אופס!</strong> סוג השאלה {question.type} אינו נתמך כרגע.</p>
             </div>
         );
    }
  };

  return (
    <div className={cn("space-y-4", className)}>
      {renderInput()}
    </div>
  );
}
--- End of Content for AnswerInput.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\user\Desktop\matchpoint\shidduch-system\src\components\questionnaire\common\InteractiveScale.tsx
--------------------------------------------------------------------------------
Content:
"use client";

import React, { useState, useCallback, useEffect, useRef } from "react";
import { motion, AnimatePresence } from "framer-motion";
import { cn } from "@/lib/utils";
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip";
import { Star, Heart, ThumbsUp } from "lucide-react";

interface ScaleOption {
  value: number;
  label: string;
  description?: string;
  icon?: React.ReactNode;
}

interface InteractiveScaleProps {
  min?: number;
  max?: number;
  step?: number;
  defaultValue?: number;
  value?: number;
  onChange?: (value: number) => void;
  onComplete?: (value: number) => void;
  labels?: {
    min: string;
    max: string;
    middle?: string;
  };
  descriptions?: {
    min?: string;
    max?: string;
    middle?: string;
  };
  options?: ScaleOption[];
  mode?: "numeric" | "icons" | "hearts" | "stars" | "thumbs";
  size?: "sm" | "md" | "lg";
  showLabels?: boolean;
  showValue?: boolean;
  showTooltips?: boolean;
  isDisabled?: boolean;
  className?: string;
  required?: boolean;
  name?: string;
  error?: string;
}

const defaultIcons = {
  stars: Star,
  hearts: Heart,
  thumbs: ThumbsUp,
};

export default function InteractiveScale({
  min = 1,
  max = 10,
  step = 1,
  defaultValue,
  value: controlledValue,
  onChange,
  onComplete,
  labels,
  options,
  mode = "numeric",
  size = "md",
  showLabels = true,
  showValue = true,
  showTooltips = true,
  isDisabled = false,
  className = "",
  required = false,
  name,
  error,
}: InteractiveScaleProps) {
  const [internalValue, setInternalValue] = useState<number | null>(
    defaultValue || null
  );
  const [hoveredValue, setHoveredValue] = useState<number | null>(null);
  const [isDragging, setIsDragging] = useState(false);
  const containerRef = useRef<HTMLDivElement>(null);

  const value = controlledValue !== undefined ? controlledValue : internalValue;

  const handleValueChange = useCallback(
    (newValue: number) => {
      if (!isDisabled) {
        setInternalValue(newValue);
        onChange?.(newValue);
      }
    },
    [isDisabled, onChange]
  );

  const handleClick = useCallback(
    (clickedValue: number) => {
      handleValueChange(clickedValue);
      onComplete?.(clickedValue);
    },
    [handleValueChange, onComplete]
  );

  const handleKeyPress = useCallback(
    (event: React.KeyboardEvent, itemValue: number) => {
      if (event.key === "Enter" || event.key === " ") {
        event.preventDefault();
        handleClick(itemValue);
      }
    },
    [handleClick]
  );

  const handleMouseMove = useCallback(
    (event: MouseEvent) => {
      if (isDragging && containerRef.current) {
        const rect = containerRef.current.getBoundingClientRect();
        const x = event.clientX - rect.left;
        const width = rect.width;
        const percentage = Math.max(0, Math.min(1, x / width));
        const range = max - min;
        const newValue = Math.round((percentage * range) / step) * step + min;
        handleValueChange(newValue);
        setHoveredValue(newValue);
      }
    },
    [isDragging, min, max, step, handleValueChange]
  );

  useEffect(() => {
    if (isDragging) {
      window.addEventListener("mousemove", handleMouseMove);
      window.addEventListener("mouseup", () => setIsDragging(false));
    }

    return () => {
      window.removeEventListener("mousemove", handleMouseMove);
      window.removeEventListener("mouseup", () => setIsDragging(false));
    };
  }, [isDragging, handleMouseMove]);

  const getScaleItems = () => {
    if (options) return options;

    const items: ScaleOption[] = [];
    for (let i = min; i <= max; i += step) {
      const item: ScaleOption = {
        value: i,
        label: i.toString(),
      };

      if (mode !== "numeric") {
        const Icon = defaultIcons[mode as keyof typeof defaultIcons];
        item.icon = <Icon className="w-5 h-5" />;
      }

      items.push(item);
    }
    return items;
  };

  const scaleItems = getScaleItems();
  const activeValue = hoveredValue !== null ? hoveredValue : value;

  const sizeClasses = {
    sm: "h-8 text-sm",
    md: "h-10 text-base",
    lg: "h-12 text-lg",
  };

  return (
    <div
      className={cn(
        "relative space-y-2",
        isDisabled && "opacity-50 cursor-not-allowed",
        className
      )}
    >
      <div
        ref={containerRef}
        className={cn(
          "relative flex items-center justify-between gap-1",
          sizeClasses[size]
        )}
        onMouseDown={() => !isDisabled && setIsDragging(true)}
      >
        {showLabels && labels && (
          <div className="absolute -top-6 left-0 right-0 flex justify-between text-sm text-gray-500">
            <span>{labels.min}</span>
            {labels.middle && <span>{labels.middle}</span>}
            <span>{labels.max}</span>
          </div>
        )}

        <div className="relative flex-1 flex items-center justify-between">
          <AnimatePresence>
            {scaleItems.map((item) => (
              <TooltipProvider key={item.value}>
                <Tooltip>
                  <TooltipTrigger asChild>
                    <motion.button
                      type="button"
                      className={cn(
                        "relative flex items-center justify-center",
                        "w-8 h-8 rounded-full transition-colors",
                        "focus:outline-none focus:ring-2 focus:ring-offset-2",
                        activeValue !== null &&
                          item.value <= activeValue &&
                          "bg-blue-500 text-white",
                        activeValue !== null &&
                          item.value > activeValue &&
                          "bg-gray-200",
                        isDisabled && "cursor-not-allowed"
                      )}
                      onClick={() => handleClick(item.value)}
                      onKeyDown={(e) => handleKeyPress(e, item.value)}
                      onMouseEnter={() =>
                        !isDisabled && setHoveredValue(item.value)
                      }
                      onMouseLeave={() => setHoveredValue(null)}
                      disabled={isDisabled}
                      aria-label={`Scale value ${item.value}`}
                      initial={{ scale: 0.8, opacity: 0 }}
                      animate={{ scale: 1, opacity: 1 }}
                      exit={{ scale: 0.8, opacity: 0 }}
                    >
                      {item.icon || item.label}
                    </motion.button>
                  </TooltipTrigger>
                  {showTooltips && item.description && (
                    <TooltipContent>
                      <p>{item.description}</p>
                    </TooltipContent>
                  )}
                </Tooltip>
              </TooltipProvider>
            ))}
          </AnimatePresence>
        </div>
      </div>

      {showValue && value !== null && (
        <div className="text-center text-sm text-gray-500">
          {`ערך נבחר: ${value}`}
        </div>
      )}

      {error && <div className="text-sm text-red-500 mt-1">{error}</div>}

      {required && (
        <input
          type="hidden"
          name={name}
          value={value || ""}
          required
          aria-hidden="true"
        />
      )}
    </div>
  );
}
--- End of Content for InteractiveScale.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\user\Desktop\matchpoint\shidduch-system\src\components\questionnaire\common\QuestionCard.tsx
--------------------------------------------------------------------------------
Content:
// src/components/questionnaire/common/QuestionCard.tsx
import React, { useState } from "react";
import {
  Card,
  CardHeader,
  CardContent,
  CardFooter,
} from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Alert, AlertDescription } from "@/components/ui/alert";
import { Badge } from "@/components/ui/badge";
import {
  Bookmark,
  AlertCircle,
  HelpCircle,
  SkipForward,
  Info,
  Star,
  X,
  MessageCircle,
  Lightbulb,
} from "lucide-react";
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip";
import { motion, AnimatePresence } from "framer-motion";
import type {
  Question,
  AnswerValue,
  QuestionDepth,
} from "../types/types";
import { cn } from "@/lib/utils";
import { useMediaQuery } from "../hooks/useMediaQuery";

interface QuestionCardProps {
  question: Question;
  depth: QuestionDepth;
  isRequired?: boolean;
  onSkip?: () => void;
  onBookmark?: () => void;
  onHelp?: () => void;
  className?: string;
  validationError?: string;
  isDisabled?: boolean;
  children?: React.ReactNode;
  language?: string;
  isFirstInList?: boolean;
  themeColor?: 'sky' | 'rose' | 'purple' | 'teal' | 'amber'; // NEW: Added theme color prop
}

const depthLabels: Record<QuestionDepth, string> = {
  BASIC: "בסיסי",
  ADVANCED: "מתקדם",
  EXPERT: "מעמיק",
};

const depthDescriptions: Record<QuestionDepth, string> = {
  BASIC: "שאלות חובה המהוות את הבסיס להיכרות",
  ADVANCED: "שאלות מומלצות להיכרות מעמיקה יותר",
  EXPERT: "שאלות העשרה לחיבור מעמיק במיוחד",
};

export default function QuestionCard({
  question,
  depth,
  isRequired = false,
  onSkip,
  onBookmark,
  onHelp,
  className = "",
  validationError,
  isDisabled = false,
  children,
  isFirstInList = false,
  themeColor = 'sky', // Default theme color
}: QuestionCardProps) {
  const [isBookmarked, setIsBookmarked] = useState(false);
  const [showHelp, setShowHelp] = useState(false);
  const [showHint, setShowHint] = useState(false);
  const isMobile = useMediaQuery("(max-width: 640px)");

  // REFINED: Motion variants for smoother animations
  const cardVariants = {
    initial: { opacity: 0, y: 30, scale: 0.98 },
    animate: { opacity: 1, y: 0, scale: 1, transition: { duration: 0.4, ease: "easeOut" } },
    exit: { opacity: 0, y: -20, transition: { duration: 0.2 } },
  };

  const contentVariants = {
    initial: { opacity: 0 },
    animate: { opacity: 1, transition: { delay: 0.1, duration: 0.3 } },
  };

  const themeClasses = {
    border: `border-${themeColor}-500`,
    text: `text-${themeColor}-700`,
    bg: `bg-${themeColor}-100`,
    bgSoft: `bg-${themeColor}-50`,
    ring: `ring-${themeColor}-300`,
    icon: `text-${themeColor}-500`,
  };

  return (
    <motion.div
      key={question.id}
      initial="initial"
      animate="animate"
      exit="exit"
      variants={cardVariants}
    >
      <Card
        className={cn(
          "transition-all duration-300 shadow-lg rounded-xl overflow-hidden border",
          "bg-white",
          isDisabled ? "opacity-75 cursor-not-allowed" : "hover:shadow-xl",
          `border-t-4 ${themeClasses.border}`, // NEW: Thematic top border for atmosphere
          className
        )}
      >
        <CardHeader className="relative flex flex-col space-y-2 pb-3">
          <div className="flex items-center justify-between">
            {/* Left side: Metadata badges */}
            <div className="flex flex-wrap items-center gap-2">
              <TooltipProvider delayDuration={200}>
                <Tooltip>
                  <TooltipTrigger>
                    <Badge variant="outline" className={cn("text-xs font-medium border-2", themeClasses.border, themeClasses.bgSoft, themeClasses.text)}>
                      <Star className="h-3.5 w-3.5 mr-1.5" />
                      {depthLabels[depth]}
                    </Badge>
                  </TooltipTrigger>
                  <TooltipContent side="bottom" className="max-w-xs">
                    <p className="text-sm">{depthDescriptions[depth]}</p>
                  </TooltipContent>
                </Tooltip>
              </TooltipProvider>

              {isRequired && (
                <Badge variant="destructive" className="text-xs animate-pulse">
                  שאלת חובה *
                </Badge>
              )}
            </div>

            {/* Right side: Action buttons */}
            <div className="flex items-center gap-1">
              {onBookmark && (
                <TooltipProvider>
                  <Tooltip>
                    <TooltipTrigger asChild>
                      <Button variant="ghost" size="icon" onClick={() => setIsBookmarked(!isBookmarked)} className={cn("h-8 w-8 rounded-full", isBookmarked ? "text-amber-500 bg-amber-100" : "text-slate-400 hover:bg-slate-100")} aria-label={isBookmarked ? "הסר סימניה" : "הוסף סימניה"}>
                        <Bookmark className="w-4 h-4" />
                      </Button>
                    </TooltipTrigger>
                    <TooltipContent><p>{isBookmarked ? "הסר סימניה" : "שמור לעיון חוזר"}</p></TooltipContent>
                  </Tooltip>
                </TooltipProvider>
              )}
               {question.metadata?.helpText && (
                  <TooltipProvider>
                    <Tooltip>
                      <TooltipTrigger asChild>
                        <Button variant="ghost" size="icon" onClick={() => setShowHelp(!showHelp)} className={cn("h-8 w-8 rounded-full", showHelp ? `${themeClasses.bg} ${themeClasses.text}` : "text-slate-400 hover:bg-slate-100")} aria-label={showHelp ? "הסתר עזרה" : "הצג עזרה"}>
                          <HelpCircle className="w-4 h-4" />
                        </Button>
                      </TooltipTrigger>
                      <TooltipContent><p>{showHelp ? "הסתר עזרה" : "למה אנחנו שואלים את זה?"}</p></TooltipContent>
                    </Tooltip>
                  </TooltipProvider>
               )}
            </div>
          </div>

          {/* REFINED: Improved typography for the question itself */}
          <motion.div variants={contentVariants}>
            <h2 className="text-xl sm:text-2xl font-semibold mt-3 text-slate-800 leading-snug">
              {question.question}
            </h2>
          </motion.div>
        </CardHeader>

        <CardContent className="relative pt-2 space-y-4">
          <AnimatePresence>
            {showHelp && question.metadata?.helpText && (
              <motion.div
                initial={{ opacity: 0, y: -10 }}
                animate={{ opacity: 1, y: 0 }}
                exit={{ opacity: 0, y: -10 }}
                transition={{ duration: 0.2 }}
              >
                {/* REFINED: Nicer alert for help text */}
                <Alert className={cn(themeClasses.bgSoft, `border-${themeColor}-200`)}>
                  <Lightbulb className={cn("h-4 w-4", themeClasses.icon)} />
                  <AlertDescription className={cn(themeClasses.text, 'font-medium')}>
                    {question.metadata.helpText}
                  </AlertDescription>
                </Alert>
              </motion.div>
            )}
          </AnimatePresence>
          
          <AnimatePresence>
            {validationError && (
              <motion.div initial={{ opacity: 0, y: -10 }} animate={{ opacity: 1, y: 0 }} exit={{ opacity: 0, y: -10 }}>
                <Alert variant="destructive" className="py-2">
                  <AlertCircle className="h-4 w-4 mr-2" />
                  <AlertDescription className="text-sm">{validationError}</AlertDescription>
                </Alert>
              </motion.div>
            )}
          </AnimatePresence>

          <div className="mt-4">
            <motion.div variants={contentVariants} className="relative">
              {children}
            </motion.div>
          </div>
        </CardContent>

        {onSkip && (
          <CardFooter className="relative flex justify-end items-center pt-4 border-t border-slate-100 bg-slate-50/50">
            <Button variant="ghost" size="sm" onClick={onSkip} disabled={isRequired || isDisabled} className={cn("text-slate-500 hover:text-slate-800", (isRequired || isDisabled) && "opacity-50 cursor-not-allowed")}>
              {isRequired ? "שאלת חובה" : "דלג על שאלה זו"}
              {!isRequired && <SkipForward className="w-4 h-4 mr-2" />}
            </Button>
          </CardFooter>
        )}
      </Card>
    </motion.div>
  );
}
--- End of Content for QuestionCard.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\user\Desktop\matchpoint\shidduch-system\src\components\questionnaire\common\QuestionnaireCompletion.tsx
--------------------------------------------------------------------------------
Content:
import React from "react";
import { Button } from "@/components/ui/button";
import {
  Card,
  CardContent,
  CardHeader,
  CardTitle,
  CardDescription,
} from "@/components/ui/card";
import { Send, CheckCircle2 } from "lucide-react";

interface QuestionnaireCompletionProps {
  onSendToMatching: () => void;
  isLoading?: boolean;
  isLoggedIn?: boolean;
}

const QuestionnaireCompletion: React.FC<QuestionnaireCompletionProps> = ({
  onSendToMatching,
  isLoading = false,
  isLoggedIn = false,
}) => {
  return (
    <div className="max-w-xl mx-auto p-4">
      <Card className="bg-green-50 border-green-200">
        <CardHeader>
          <div className="flex justify-center mb-4">
            <CheckCircle2 className="w-12 h-12 text-green-500" />
          </div>
          <CardTitle className="text-2xl text-center">
            כל הכבוד! סיימת את השאלון
          </CardTitle>
          <CardDescription className="text-center">
            {isLoggedIn
              ? "התשובות שלך יעזרו לנו למצוא עבורך את ההתאמה הטובה ביותר"
              : "כדי לשמור את התשובות ולהתחיל בתהליך ההתאמה, יש להתחבר למערכת"}
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-6">
          {isLoggedIn ? (
            <>
              <div className="text-center text-gray-600">
                <p>כעת ניתן לשלוח את השאלון לצוות האיפיון שלנו</p>
                <p className="text-sm mt-2">
                  הצוות יעבור על התשובות ויתחיל בתהליך ההתאמה
                </p>
              </div>
              <Button
                className="w-full"
                size="lg"
                onClick={onSendToMatching}
                disabled={isLoading}
              >
                <Send className="w-5 h-5 ml-2" />
                {isLoading ? "שולח..." : "שלח לאיפיון"}
              </Button>
            </>
          ) : (
            <Button className="w-full" size="lg" onClick={onSendToMatching}>
              התחבר למערכת
            </Button>
          )}
        </CardContent>
      </Card>
    </div>
  );
};

export default QuestionnaireCompletion;
--- End of Content for QuestionnaireCompletion.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\user\Desktop\matchpoint\shidduch-system\src\components\questionnaire\common\QuestionsList.tsx
--------------------------------------------------------------------------------
Content:
// src/components/questionnaire/common/QuestionsList.tsx
import React from 'react';
import { ScrollArea } from '@/components/ui/scroll-area';
import { CheckCircle, AlertCircle, Circle, Sparkles } from 'lucide-react';
import { cn } from '@/lib/utils';
import type { Question, QuestionnaireAnswer, AnswerValue } from '../types/types';
import { Badge } from '@/components/ui/badge';

interface QuestionsListProps {
  allQuestions: Question[];
  currentQuestionIndex: number;
  setCurrentQuestionIndex: (index: number) => void;
  answers: QuestionnaireAnswer[];
  language?: string;
  className?: string;
  onClose?: () => void;
  themeColor?: 'sky' | 'rose' | 'purple' | 'teal' | 'amber'; // NEW: Added theme color prop
}

const QuestionsList: React.FC<QuestionsListProps> = ({
  allQuestions,
  currentQuestionIndex,
  setCurrentQuestionIndex,
  answers,
  language = 'he',
  className = '',
  onClose,
  themeColor = 'sky', // Default theme color
}) => {
  const isRTL = language === 'he';

  const findAnswer = (questionId: string): AnswerValue | undefined => {
    return answers.find((a) => a.questionId === questionId)?.value;
  };

  const isAnswerNotEmpty = (answer: AnswerValue | undefined): boolean => {
    if (answer === undefined || answer === null) return false;
    if (typeof answer === 'string' && answer.trim() === '') return false;
    if (Array.isArray(answer) && answer.length === 0) return false;
    if (typeof answer === 'object' && !Array.isArray(answer) && Object.keys(answer).length === 0) return false;
    return true;
  };

  const handleItemClick = (index: number) => {
    setCurrentQuestionIndex(index);
    onClose?.();
  };
  
  const themeClasses = {
    text: `text-${themeColor}-700`,
    bgSoft: `bg-${themeColor}-50`,
    border: `border-${themeColor}-300`,
    ring: `ring-${themeColor}-400`,
    icon: `text-${themeColor}-600`,
  };

  const depthLabels = { BASIC: 'בסיסי', ADVANCED: 'מתקדם', EXPERT: 'מעמיק' };

  return (
    <ScrollArea className={cn('h-full', className)}>
      {/* NEW: Relative container for the timeline pseudo-element */}
      <div className="relative space-y-2 p-2" dir={isRTL ? 'rtl' : 'ltr'}>
        {/* NEW: Timeline connecting line */}
        <div className="absolute top-0 bottom-0 w-0.5 bg-slate-200" style={isRTL ? { right: '1.625rem' } : { left: '1.625rem' }}></div>
        
        {allQuestions.map((q, index) => {
          const answer = findAnswer(q.id);
          const isAnswered = isAnswerNotEmpty(answer);
          const isCurrent = index === currentQuestionIndex;

          let StatusIcon;
          let itemClasses = 'bg-white hover:bg-slate-50 border-slate-200';
          let textClasses = 'text-slate-700';
          
          if (isAnswered) {
            StatusIcon = <CheckCircle className={cn("h-5 w-5", themeClasses.icon)} />;
          } else if (q.isRequired) {
            StatusIcon = <AlertCircle className="h-5 w-5 text-red-500" />;
          } else {
            StatusIcon = <Circle className="h-5 w-5 text-slate-300" />;
          }

          if (isCurrent) {
            StatusIcon = <Sparkles className={cn("h-5 w-5", themeClasses.icon)} />;
            itemClasses = `${themeClasses.bgSoft} ${themeClasses.border} ring-2 ${themeClasses.ring}`;
            textClasses = `${themeClasses.text} font-semibold`;
          }

          return (
            <button
              key={q.id}
              type="button"
              className={cn(
                'relative w-full flex items-start text-start p-3 rounded-lg transition-all duration-200 border shadow-sm group',
                itemClasses
              )}
              onClick={() => handleItemClick(index)}
              aria-current={isCurrent ? 'step' : undefined}
            >
              {/* Status Icon with timeline dot */}
              <div className="flex-shrink-0 z-10 bg-white rounded-full p-1">
                 {StatusIcon}
              </div>

              {/* Content */}
              <div className={cn('flex-1 min-w-0 ml-3', textClasses)}>
                <p className="text-sm leading-relaxed" style={{ whiteSpace: 'normal' }}>
                  <span className="font-medium">{index + 1}. </span>
                  {q.question}
                </p>
                {/* REFINED: Badge styling */}
                <div className="mt-2">
                  <Badge variant="outline" className="text-xs font-normal bg-white">
                    {depthLabels[q.depth]}
                  </Badge>
                </div>
              </div>
            </button>
          );
        })}
      </div>
    </ScrollArea>
  );
};

export default QuestionsList;
--- End of Content for QuestionsList.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\user\Desktop\matchpoint\shidduch-system\src\components\questionnaire\common\WorldIntro.tsx
--------------------------------------------------------------------------------
Content:
// src/components/questionnaire/common/WorldIntro.tsx
import React from 'react';
import { motion } from 'framer-motion';
import { Card, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import {
  Scroll,
  Heart,
  Users,
  UserCheck,
  ArrowRight,
  Star,
  Brain,
  Sparkles,
  Clock,
  HelpCircle,
  CheckCircle2,
  User,
} from 'lucide-react';
import type { WorldId, Question } from '../types/types';
import { cn } from '@/lib/utils';
import { useMediaQuery } from '../hooks/useMediaQuery';

// --- ממשק Props חדש ופשוט יותר ---
interface WorldIntroProps {
  worldId: WorldId;
  allQuestions: Question[];
  onStart: () => void;
  className?: string;
}

// --- אובייקט קונפיגורציה מרכזי לכל התוכן והעיצוב ---
const worldDisplayConfig = {
  PERSONALITY: {
    Icon: User,
    themeColor: 'sky',
    title: 'עולם האישיות',
    subtitle: 'מי אני באמת?',
    whyIsItImportant:
      'הבנה עמוקה של מי שאת/ה היא הבסיס לכל קשר בריא. כאן תקבלי/י הזדמנות להציג את עצמך בצורה אותנטית, כדי שנמצא מישהו שיתאהב באדם האמיתי שאת/ה.',
    whatYouWillDiscover: [
      'מהם הכוחות המניעים אותך בחיים',
      'סגנון התקשורת והאינטראקציה החברתית שלך',
      'איך את/ה מתמודד/ת עם אתגרים ומקבל/ת החלטות',
    ],
    guidingThought:
      'היופי שבזוגיות הוא לא למצוא מישהו מושלם, אלא למצוא מישהו שהחלקים שלכם משלימים זה את זה.',
  },
  VALUES: {
    Icon: Heart,
    themeColor: 'rose',
    title: 'עולם הערכים',
    subtitle: 'מה באמת מניע אותך?',
    whyIsItImportant:
      'ערכים משותפים הם עמוד השדרה של קשר יציב ומאושר. בעולם זה, נעזור לך לזקק את עקרונות הליבה שלך, כדי לבנות יסודות איתנים לבית המשותף העתידי.',
    whatYouWillDiscover: [
      'מהם סדרי העדיפויות שלך בין משפחה, קריירה ורוחניות',
      'גישתך לכסף, נתינה וצמיחה אישית',
      'איזו קהילה וסביבה חברתית מתאימות לך',
    ],
    guidingThought:
      'כאשר הערכים שלכם נפגשים, הדרך המשותפת הופכת להיות ברורה וקלה יותר.',
  },
  RELATIONSHIP: {
    Icon: Users,
    themeColor: 'purple',
    title: 'עולם הזוגיות',
    subtitle: 'איך נראית השותפות האידיאלית שלך?',
    whyIsItImportant:
      "זוגיות טובה היא שותפות. כאן נבין את הציפיות שלך מקשר, את 'שפות האהבה' שלך, ואיך את/ה רואה את חיי היומיום המשותפים. זה המפתח ליצירת קשר שמבוסס על הבנה, כבוד וחברות אמת.",
    whatYouWillDiscover: [
      'מהי תמצית הזוגיות הבריאה בעיניך',
      'סגנון פתרון הקונפליקטים המועדף עליך',
      "האיזון הנכון עבורך בין 'ביחד' ל'לחוד'",
    ],
    guidingThought:
      "השאלה אינה 'האם תהיו מאושרים?', אלא 'איך תתמודדו יחד כשתהיו פחות מאושרים?'.",
  },
  PARTNER: {
    Icon: UserCheck,
    themeColor: 'teal',
    title: 'עולם הפרטנר',
    subtitle: 'במי תרצה/י לבחור?',
    whyIsItImportant:
      'הגדרת בן/בת הזוג האידיאלי/ת היא יותר מרשימת תכונות; זו הבנה של מה באמת נחוץ לך כדי לפרוח. כאן נמקד את החיפוש ונבין מהם הדברים שאינם ניתנים לפשרה עבורך.',
    whatYouWillDiscover: [
      'אילו תכונות אופי הן החיוניות ביותר עבורך',
      'מהן העדפותיך לגבי סגנון חיים ורקע',
      "מהם ה'קווים האדומים' שלך בזוגיות",
    ],
    guidingThought:
      'אל תחפש/י את האדם שתוכל/י לחיות איתו, חפש/י את האדם שאינך יכול/ה לחיות בלעדיו.',
  },
  RELIGION: {
    Icon: Scroll,
    themeColor: 'amber',
    title: 'דת ומסורת',
    subtitle: 'אמונה והלכה בחייך',
    whyIsItImportant:
      'העולם הרוחני והדתי הוא נדבך יסודי בבניית בית נאמן בישראל. בעולם זה נבין את החיבור האישי שלך, את ההשקפה שלך, ואת החזון שלך לבית יהודי. זהו בסיס הכרחי להרמוניה זוגית וחינוך ילדים.',
    whatYouWillDiscover: [
      'ההגדרה האישית שלך על הרצף הדתי',
      'כיצד ההלכה והמסורת באות לידי ביטוי בחייך',
      'החזון שלך לחינוך דתי ורוחני במשפחה',
    ],
    guidingThought:
      'בית יהודי נבנה לא רק מלבנים, אלא גם מתפילות, מערכים וממסורת שעוברת מדור לדור.',
  },
};

const WORLD_ORDER: WorldId[] = [
  'PERSONALITY',
  'VALUES',
  'RELATIONSHIP',
  'PARTNER',
  'RELIGION',
];

// --- Main Component ---
export default function WorldIntro({
  worldId,
  allQuestions,
  onStart,
  className = '',
}: WorldIntroProps) {
  const config = worldDisplayConfig[worldId];
  const {
    Icon,
    title,
    subtitle,
    whyIsItImportant,
    whatYouWillDiscover,
    guidingThought,
    themeColor,
  } = config;
  const isMobile = useMediaQuery('(max-width: 1023px)');

  // חישובים דינמיים
  const totalQuestions = allQuestions.length;
  const requiredQuestions = allQuestions.filter((q) => q.isRequired).length;
  const estimatedTime = Math.max(5, Math.round(totalQuestions * 0.4)); // כ-24 שניות לשאלה, מינימום 5 דקות
  const worldIndex = WORLD_ORDER.indexOf(worldId) + 1;

  // Framer Motion Variants
  const containerVariants = {
    hidden: { opacity: 0, scale: 0.98 },
    visible: {
      opacity: 1,
      scale: 1,
      transition: { duration: 0.5, ease: 'circOut', staggerChildren: 0.1 },
    },
  };

  const itemVariants = {
    hidden: { opacity: 0, y: 20 },
    visible: {
      opacity: 1,
      y: 0,
      transition: { duration: 0.4, ease: 'easeOut' },
    },
  };

  const stats = [
    { label: 'זמן משוער', value: `~${estimatedTime} דקות`, IconComp: Clock },
    { label: 'סך כל שאלות', value: totalQuestions, IconComp: HelpCircle },
    { label: 'שאלות חובה', value: requiredQuestions, IconComp: CheckCircle2 },
  ];

  const ActionButton = () => (
    <Button
      onClick={onStart}
      size="lg"
      className={cn(
        'w-full text-lg font-medium py-3 rounded-lg shadow-md transition-all duration-300 ease-in-out transform hover:scale-105',
        `bg-${themeColor}-600 hover:bg-${themeColor}-700 text-white`
      )}
    >
      בוא/י נתחיל את המסע
      <ArrowRight className="w-5 h-5 mr-2 animate-pulse-fast" />
    </Button>
  );

  return (
    <div className={cn('bg-slate-50 px-4 sm:px-6', className)}>
      {' '}
      <motion.div
        className="w-full max-w-4xl"
        variants={containerVariants}
        initial="hidden"
        animate="visible"
      >
        <Card className="overflow-hidden shadow-xl rounded-xl border-slate-200 bg-white">
          <CardContent className="p-0">
            {isMobile && (
              <div className="p-6 border-b">
                <ActionButton />
              </div>
            )}
            <div className="grid lg:grid-cols-2">
              {/* Left Column: Visuals & Stats */}
              <motion.div
                variants={itemVariants}
                className={`bg-${themeColor}-50/50 p-6 sm:p-8 flex flex-col justify-between`}
              >
                <div>
                  <Badge
                    variant="outline"
                    className={`border-${themeColor}-300 bg-white text-${themeColor}-700 mb-4`}
                  >
                    עולם {worldIndex} מתוך {WORLD_ORDER.length}
                  </Badge>
                  <div
                    className={`mb-4 inline-block p-4 rounded-xl bg-gradient-to-br from-${themeColor}-500 to-${themeColor}-600 shadow-lg`}
                  >
                    <Icon className="w-12 h-12 text-white" />
                  </div>
                  <h1 className="text-3xl sm:text-4xl font-bold tracking-tight text-slate-800">
                    {title}
                  </h1>
                  <p
                    className={`mt-2 text-lg text-${themeColor}-800 font-medium`}
                  >
                    {subtitle}
                  </p>
                </div>
                <div className="mt-8 space-y-4">
                  {stats.map((stat, index) => (
                    <div key={index} className="flex items-center gap-3">
                      <div className={`p-2 rounded-md bg-${themeColor}-100`}>
                        <stat.IconComp
                          className={`w-5 h-5 text-${themeColor}-600`}
                        />
                      </div>
                      <div>
                        <div className="text-sm text-slate-500">
                          {stat.label}
                        </div>
                        <div className="font-semibold text-slate-700">
                          {stat.value}
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              </motion.div>

              {/* Right Column: Content & CTA */}
              <motion.div
                variants={itemVariants}
                className="p-6 sm:p-8 flex flex-col justify-between"
              >
                <div className="space-y-6">
                  <div>
                    <h3 className="text-lg font-semibold text-slate-700 flex items-center">
                      <Sparkles
                        className={`w-5 h-5 mr-2 text-${themeColor}-500`}
                      />
                      למה העולם הזה קריטי להצלחה שלך?
                    </h3>
                    <p className="mt-2 text-slate-600 leading-relaxed">
                      {whyIsItImportant}
                    </p>
                  </div>
                  <div>
                    <h3 className="text-lg font-semibold text-slate-700 flex items-center">
                      <Brain
                        className={`w-5 h-5 mr-2 text-${themeColor}-500`}
                      />
                      מה תגלה/י על עצמך?
                    </h3>
                    <ul className="mt-2 space-y-1 list-disc list-inside text-slate-600">
                      {whatYouWillDiscover.map((item, index) => (
                        <li key={index}>{item}</li>
                      ))}
                    </ul>
                  </div>
                  <div
                    className={`border-r-4 border-${themeColor}-300 pr-4 py-2 bg-${themeColor}-50/60 rounded-r-md`}
                  >
                    <p className="text-slate-700 italic">{guidingThought}</p>
                  </div>
                </div>

                {!isMobile && (
                  <div className="mt-8 pt-6 border-t border-slate-200">
                    <ActionButton />
                  </div>
                )}
              </motion.div>
            </div>
          </CardContent>
        </Card>
      </motion.div>
      <style jsx global>{`
        @keyframes pulse-fast {
          0%,
          100% {
            opacity: 1;
            transform: translateX(0);
          }
          50% {
            opacity: 0.8;
            transform: translateX(2px);
          }
        }
        .animate-pulse-fast {
          animation: pulse-fast 1.5s ease-in-out infinite;
        }

        /* Tailwind CSS JIT Purge-safe classes */
        .bg-sky-50\/50,
        .bg-sky-100,
        .bg-sky-600,
        .hover\:bg-sky-700,
        .text-sky-600,
        .text-sky-700,
        .text-sky-800,
        .border-sky-300 {
        }
        .bg-rose-50\/50,
        .bg-rose-100,
        .bg-rose-600,
        .hover\:bg-rose-700,
        .text-rose-600,
        .text-rose-700,
        .text-rose-800,
        .border-rose-300 {
        }
        .bg-purple-50\/50,
        .bg-purple-100,
        .bg-purple-600,
        .hover\:bg-purple-700,
        .text-purple-600,
        .text-purple-700,
        .text-purple-800,
        .border-purple-300 {
        }
        .bg-teal-50\/50,
        .bg-teal-100,
        .bg-teal-600,
        .hover\:bg-teal-700,
        .text-teal-600,
        .text-teal-700,
        .text-teal-800,
        .border-teal-300 {
        }
        .bg-amber-50\/50,
        .bg-amber-100,
        .bg-amber-600,
        .hover\:bg-amber-700,
        .text-amber-600,
        .text-amber-700,
        .text-amber-800,
        .border-amber-300 {
        }
      `}</style>
    </div>
  );
}
--- End of Content for WorldIntro.tsx ---

================================================================================
Directory: C:\Users\user\Desktop\matchpoint\shidduch-system\src\components\questionnaire\components
================================================================================

--------------------------------------------------------------------------------
File: C:\Users\user\Desktop\matchpoint\shidduch-system\src\components\questionnaire\components\AccessibilityFeatures.tsx
--------------------------------------------------------------------------------
Content:
'use client';

import React, { useState, useEffect, useRef } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import {
  Accessibility,
  Plus,
  Minus,
  MoonStar,
  SunMedium,
  Type,
  MousePointer,
  Hand,
  Contrast,
  Speech,
  X,
  Settings,
  Volume2,
  VolumeX,
  Palette,
  Eye,
  RefreshCw,
  Check,
  Sparkles,
} from 'lucide-react';
import { cn } from '@/lib/utils';
import { Slider } from '@/components/ui/slider';
import { Label } from '@/components/ui/label';
import { Switch } from '@/components/ui/switch';

// FIX: Teach TypeScript about the non-standard webkitAudioContext
declare global {
  interface Window {
    webkitAudioContext: typeof AudioContext;
  }
}

interface AccessibilityFeaturesProps {
  className?: string;
  isPanelOpen?: boolean;
  onPanelOpenChange?: (isOpen: boolean) => void;
}

interface AccessibilitySettings {
  fontScale: number;
  contrastMode: 'normal' | 'high' | 'dark';
  reducedMotion: boolean;
  readableMode: boolean;
  bigCursor: boolean;
  textReader: boolean;
  soundEnabled: boolean;
}

const defaultSettings: AccessibilitySettings = {
  fontScale: 1,
  contrastMode: 'normal',
  reducedMotion: false,
  readableMode: false,
  bigCursor: false,
  textReader: false,
  soundEnabled: true,
};

export default function AccessibilityFeatures({
  className,
  isPanelOpen,
  onPanelOpenChange,
}: AccessibilityFeaturesProps) {
  const [settings, setSettings] =
    useState<AccessibilitySettings>(defaultSettings);
  const [internalShowPanel, setInternalShowPanel] = useState(false);
  const [hasChanges, setHasChanges] = useState(false);
  const [showToast, setShowToast] = useState<{
    message: string;
    type: 'success' | 'info';
    visible: boolean;
  }>({ message: '', type: 'info', visible: false });

  const panelRef = useRef<HTMLDivElement>(null);
  const toastTimeoutRef = useRef<NodeJS.Timeout>();

  const showAccessibilityPanel =
    isPanelOpen !== undefined ? isPanelOpen : internalShowPanel;
  const setShowAccessibilityPanel = onPanelOpenChange || setInternalShowPanel;

  useEffect(() => {
    const savedSettings = localStorage.getItem('accessibilitySettings');
    if (savedSettings) {
      try {
        const parsed = JSON.parse(savedSettings);
        setSettings({ ...defaultSettings, ...parsed });
      } catch (error) {
        console.error('Error loading accessibility settings:', error);
      }
    }
  }, []);

  useEffect(() => {
    const htmlElement = document.documentElement;
    htmlElement.style.fontSize = `${settings.fontScale * 100}%`;
    htmlElement.classList.toggle(
      'high-contrast',
      settings.contrastMode === 'high'
    );
    htmlElement.classList.toggle('dark-mode', settings.contrastMode === 'dark');
    htmlElement.classList.toggle('reduce-motion', settings.reducedMotion);
    htmlElement.classList.toggle('readable-font', settings.readableMode);
    htmlElement.classList.toggle('big-cursor', settings.bigCursor);
    updateAccessibilityStyles();
    localStorage.setItem('accessibilitySettings', JSON.stringify(settings));
  }, [settings]);

  const updateAccessibilityStyles = () => {
    const styleElement =
      document.getElementById('accessibility-styles') ||
      document.createElement('style');
    styleElement.id = 'accessibility-styles';
    styleElement.textContent = `
      .high-contrast { filter: contrast(1.5) brightness(1.1); }
      .dark-mode { filter: invert(1) hue-rotate(180deg); background: #1a1a1a !important; }
      .reduce-motion * { animation-duration: 0.001s !important; transition-duration: 0.001s !important; }
      .readable-font * { font-family: 'Arial', 'Helvetica', sans-serif !important; letter-spacing: 0.05em !important; word-spacing: 0.1em !important; line-height: 1.6 !important; }
      .big-cursor, .big-cursor * { cursor: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 16 16"><circle fill="%23000" stroke="%23fff" stroke-width="2" cx="8" cy="8" r="6"/></svg>') 16 16, auto !important; }
      .accessibility-panel-enter { opacity: 0; transform: scale(0.95) translateY(10px); transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1); }
      .accessibility-panel-enter-active { opacity: 1; transform: scale(1) translateY(0); }
      .accessibility-panel-exit { opacity: 1; transform: scale(1) translateY(0); transition: all 0.2s ease-in; }
      .accessibility-panel-exit-active { opacity: 0; transform: scale(0.95) translateY(10px); }
      .accessibility-button { transition: all 0.3s ease; }
      .accessibility-button:hover { transform: scale(1.05); box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15); }
      .accessibility-button:active { transform: scale(0.95); }
      .toast-enter { opacity: 0; transform: translateY(20px) scale(0.9); transition: all 0.3s ease; }
      .toast-enter-active { opacity: 1; transform: translateY(0) scale(1); }
      .toast-exit { opacity: 1; transform: translateY(0) scale(1); transition: all 0.2s ease; }
      .toast-exit-active { opacity: 0; transform: translateY(20px) scale(0.9); }
      .pulse-animation { animation: pulse 2s infinite; }
      @keyframes pulse { 0%, 100% { opacity: 1; transform: scale(1); } 50% { opacity: 0.8; transform: scale(1.1); } }
      .setting-card { transition: all 0.2s ease; border-radius: 8px; }
      .setting-card:hover { background-color: rgba(59, 130, 246, 0.05); transform: translateX(-2px); }
    `;
    if (!document.getElementById('accessibility-styles')) {
      document.head.appendChild(styleElement);
    }
  };

  const updateSetting = <K extends keyof AccessibilitySettings>(
    key: K,
    value: AccessibilitySettings[K]
  ) => {
    setSettings((prev) => ({ ...prev, [key]: value }));
    setHasChanges(true);
    if (settings.soundEnabled) playClickSound();
    showSuccessToast(`הגדרת ${getSettingName(key)} עודכנה`);
  };

  const getSettingName = (key: keyof AccessibilitySettings): string => {
    const names = {
      fontScale: 'גודל הטקסט',
      contrastMode: 'מצב התצוגה',
      reducedMotion: 'הפחתת אנימציות',
      readableMode: 'פונט קריא',
      bigCursor: 'סמן גדול',
      textReader: 'הקראת תוכן',
      soundEnabled: 'צלילים',
    };
    return names[key] || key;
  };

  const showSuccessToast = (message: string) => {
    setShowToast({ message, type: 'success', visible: true });
    if (toastTimeoutRef.current) clearTimeout(toastTimeoutRef.current);
    toastTimeoutRef.current = setTimeout(() => {
      setShowToast((prev) => ({ ...prev, visible: false }));
    }, 2500);
  };

  const playClickSound = () => {
    try {
      // Get the correct AudioContext class, depending on the browser
      const AudioContext = window.AudioContext || window.webkitAudioContext;
      if (!AudioContext) {
        console.warn('Browser does not support AudioContext.');
        return;
      }
      const audioContext = new AudioContext();

      const oscillator = audioContext.createOscillator();
      const gainNode = audioContext.createGain();
      oscillator.connect(gainNode);
      gainNode.connect(audioContext.destination);
      oscillator.frequency.setValueAtTime(800, audioContext.currentTime);
      gainNode.gain.setValueAtTime(0.1, audioContext.currentTime);
      gainNode.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + 0.1);
      oscillator.start(audioContext.currentTime);
      oscillator.stop(audioContext.currentTime + 0.1);
    } catch (error) {
      console.log('Could not play sound:', error);
    }
  };

  const resetSettings = () => {
    setSettings(defaultSettings);
    setHasChanges(false);
    showSuccessToast('כל ההגדרות אופסו');
    if (settings.soundEnabled) playClickSound();
  };

  const toggleTextReader = () => {
    const willBeActive = !settings.textReader;
    updateSetting('textReader', willBeActive);
    if (willBeActive) {
      document.addEventListener('click', readSelectedText);
      showSuccessToast('הקראת תוכן הופעלה - לחץ על טקסט כדי להקריא');
    } else {
      document.removeEventListener('click', readSelectedText);
      if (window.speechSynthesis) window.speechSynthesis.cancel();
    }
  };

  const readSelectedText = (e: MouseEvent) => {
    const element = e.target as HTMLElement;
    if (element && element.textContent && 'speechSynthesis' in window) {
      window.speechSynthesis.cancel();
      const text = element.textContent.trim();
      if (text && text.length > 0) {
        const utterance = new SpeechSynthesisUtterance(text);
        utterance.lang = 'he-IL';
        utterance.rate = 0.9;
        window.speechSynthesis.speak(utterance);
      }
    }
  };

  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (panelRef.current && !panelRef.current.contains(event.target as Node)) {
        const target = event.target as HTMLElement;
        if (!target.closest('[data-accessibility-trigger]')) {
          setShowAccessibilityPanel(false);
        }
      }
    };
    if (showAccessibilityPanel) {
      document.addEventListener('mousedown', handleClickOutside);
    }
    return () => document.removeEventListener('mousedown', handleClickOutside);
  }, [showAccessibilityPanel, setShowAccessibilityPanel]);

  useEffect(() => {
    return () => {
      if (toastTimeoutRef.current) clearTimeout(toastTimeoutRef.current);
    };
  }, []);
  
  const contrastOptions: {
    value: AccessibilitySettings['contrastMode'];
    label: string;
    icon: React.ElementType;
    desc: string;
  }[] = [
    { value: 'normal', label: 'רגיל', icon: SunMedium, desc: 'מצב רגיל' },
    { value: 'high', label: 'ניגודיות', icon: Contrast, desc: 'ניגודיות גבוהה' },
    { value: 'dark', label: 'חשוך', icon: MoonStar, desc: 'מצב לילה' },
  ];

  const advancedOptions = [
    { key: 'soundEnabled' as const, label: 'צלילי משוב', icon: settings.soundEnabled ? Volume2 : VolumeX, description: 'השמע צלילים קצרים על פעולות ושינויים' },
    { key: 'textReader' as const, label: 'הקראת תוכן', icon: Speech, description: 'לחץ על כל טקסט באתר כדי להקריא אותו בקול' },
    { key: 'bigCursor' as const, label: 'סמן עכבר גדול', icon: MousePointer, description: 'סמן עכבר מוגדל ובולט יותר' },
    { key: 'readableMode' as const, label: 'פונט קריא', icon: Eye, description: 'פונט ברור עם ריווח מוגדל בין האותיות' },
    { key: 'reducedMotion' as const, label: 'הפחתת אנימציות', icon: Hand, description: 'מפחית תנועות ואנימציות ברחבי האתר' },
  ];

  return (
    <>
      <div className="fixed z-50 bottom-4 right-4">
        <Button
          data-accessibility-trigger
          variant={showAccessibilityPanel ? 'default' : 'outline'}
          size="icon"
          className={cn(
            'accessibility-button rounded-full shadow-lg transition-all duration-300',
            'hover:shadow-xl bg-white border-2',
            showAccessibilityPanel
              ? 'bg-blue-600 border-blue-600 text-white shadow-blue-200'
              : 'border-blue-200 hover:border-blue-400 hover:bg-blue-50',
            hasChanges && 'ring-2 ring-blue-400 ring-opacity-50 ring-offset-2',
            className
          )}
          onClick={() => setShowAccessibilityPanel(!showAccessibilityPanel)}
          title={showAccessibilityPanel ? 'סגור הגדרות נגישות' : 'פתח הגדרות נגישות'}
        >
          <div className="relative">
            {showAccessibilityPanel ? <X className="h-5 w-5" /> : <Accessibility className="h-5 w-5" />}
            {hasChanges && !showAccessibilityPanel && (
              <div className="absolute -top-1 -right-1 w-3 h-3 bg-blue-600 rounded-full pulse-animation" />
            )}
          </div>
        </Button>
      </div>

      {showAccessibilityPanel && (
        <div
          ref={panelRef}
          className={cn('fixed z-40 bottom-20 right-4 max-w-sm w-[340px]', 'accessibility-panel-enter accessibility-panel-enter-active')}
        >
          <Card className="shadow-2xl border-2 border-blue-100 bg-white">
            <CardHeader className="pb-3 bg-gradient-to-r from-blue-50 to-indigo-50 rounded-t-lg">
              <div className="flex items-center justify-between">
                <CardTitle className="text-lg flex items-center gap-2 text-slate-800">
                  <div className="p-1.5 bg-blue-100 rounded-lg"><Settings className="h-4 w-4 text-blue-600" /></div>
                  הגדרות נגישות
                  {hasChanges && (
                    <Badge variant="secondary" className="text-xs bg-blue-100 text-blue-700 border-blue-200">
                      <Sparkles className="h-3 w-3 mr-1" />שונה
                    </Badge>
                  )}
                </CardTitle>
              </div>
              <p className="text-xs text-slate-600 mt-1">התאם את האתר לצרכיך האישיים</p>
            </CardHeader>

            <CardContent className="space-y-6 pt-5 max-h-[65vh] overflow-y-auto">
              <div className="space-y-3">
                <div className="flex justify-between items-center">
                  <Label className="text-sm font-medium flex items-center gap-2"><Type className="h-4 w-4 text-blue-500" />גודל טקסט</Label>
                  <div className="flex items-center gap-2">
                    <Button variant="outline" size="sm" className="h-8 w-8 p-0 hover:bg-blue-50 border-blue-200" onClick={() => updateSetting('fontScale', Math.max(0.8, settings.fontScale - 0.1))} disabled={settings.fontScale <= 0.8}><Minus className="h-3 w-3" /></Button>
                    <Badge variant="outline" className="min-w-[55px] text-center font-mono bg-blue-50 border-blue-200">{Math.round(settings.fontScale * 100)}%</Badge>
                    <Button variant="outline" size="sm" className="h-8 w-8 p-0 hover:bg-blue-50 border-blue-200" onClick={() => updateSetting('fontScale', Math.min(1.6, settings.fontScale + 0.1))} disabled={settings.fontScale >= 1.6}><Plus className="h-3 w-3" /></Button>
                  </div>
                </div>
                <Slider value={[settings.fontScale * 100]} min={80} max={160} step={5} onValueChange={(value) => updateSetting('fontScale', value[0] / 100)} className="py-2" />
                <p className="text-xs text-slate-500">הגדל או הקטן את גודל הטקסט בכל האתר</p>
              </div>

              <div className="space-y-4">
                <Label className="text-sm font-medium flex items-center gap-2"><Palette className="h-4 w-4 text-blue-500" />מצב תצוגה ונגישות</Label>
                <div className="grid grid-cols-3 gap-2">
                  {contrastOptions.map(({ value, label, icon: Icon, desc }) => (
                    <Button
                      key={value}
                      variant={settings.contrastMode === value ? 'default' : 'outline'}
                      size="sm"
                      className={cn('h-14 flex flex-col gap-1 text-xs transition-all relative', settings.contrastMode === value ? 'bg-blue-600 text-white border-blue-600 shadow-md' : 'hover:bg-blue-50 border-blue-200')}
                      onClick={() => updateSetting('contrastMode', value)}
                      title={desc}
                    >
                      <Icon className="h-4 w-4" />
                      <span className="font-medium">{label}</span>
                      {settings.contrastMode === value && (<div className="absolute top-1 right-1"><Check className="h-3 w-3" /></div>)}
                    </Button>
                  ))}
                </div>
              </div>

              <div className="space-y-4 pt-2 border-t border-slate-200">
                <Label className="text-sm font-medium text-slate-700">הגדרות נוספות</Label>
                {advancedOptions.map(({ key, label, icon: Icon, description }) => (
                  <div key={key} className="setting-card flex items-center justify-between group p-3 rounded-lg">
                    <div className="flex items-center gap-3">
                      <div className={cn('p-2 rounded-lg transition-colors', settings[key] ? 'bg-blue-100 text-blue-600' : 'bg-slate-100 text-slate-500 group-hover:bg-blue-50 group-hover:text-blue-500')}>
                        <Icon className="h-4 w-4" />
                      </div>
                      <div className="flex-1">
                        <Label className="text-sm font-medium cursor-pointer">{label}</Label>
                        <p className="text-xs text-slate-500 mt-0.5 leading-relaxed">{description}</p>
                      </div>
                    </div>
                    <Switch
                      checked={settings[key]}
                      onCheckedChange={(checked) => {
                        if (key === 'textReader') toggleTextReader();
                        else updateSetting(key, checked);
                      }}
                    />
                  </div>
                ))}
              </div>

              <div className="pt-4 border-t border-slate-200">
                <Button variant="outline" size="sm" className={cn('w-full flex items-center gap-2 transition-all', hasChanges ? 'hover:bg-red-50 hover:border-red-200 hover:text-red-700' : 'opacity-50 cursor-not-allowed')} onClick={resetSettings} disabled={!hasChanges}>
                  <RefreshCw className="h-4 w-4" />איפוס כל ההגדרות
                </Button>
              </div>
            </CardContent>
          </Card>
        </div>
      )}

      {showToast.visible && (
        <div className="fixed bottom-4 left-4 z-50 toast-enter toast-enter-active">
          <div className="bg-green-600 text-white px-4 py-3 rounded-lg shadow-lg flex items-center gap-2 border border-green-500">
            <div className="p-1 bg-green-500 rounded-full"><Check className="h-3 w-3" /></div>
            <span className="text-sm font-medium">{showToast.message}</span>
          </div>
        </div>
      )}
    </>
  );
}
--- End of Content for AccessibilityFeatures.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\user\Desktop\matchpoint\shidduch-system\src\components\questionnaire\components\FAQ.tsx
--------------------------------------------------------------------------------
Content:
import React, { useState } from "react";
import {
  Accordion,
  AccordionContent,
  AccordionItem,
  AccordionTrigger,
} from "@/components/ui/accordion";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { cn } from "@/lib/utils";
import {
  Search,
  HelpCircle,
  ArrowRight,
  Info,
  Clock,
  Star,
  AlertCircle,
} from "lucide-react";
import { Badge } from "@/components/ui/badge";

interface FAQItem {
  id: string;
  question: string;
  answer: React.ReactNode;
  category: "process" | "technical" | "privacy" | "results" | "general";
  isPopular?: boolean;
}

interface FAQProps {
  className?: string;
  title?: string;
  subtitle?: string;
  showSearch?: boolean;
  showCategories?: boolean;
  initialOpenId?: string;
  items?: FAQItem[];
}

// שאלות נפוצות לדוגמה
const defaultFAQItems: FAQItem[] = [
  {
    id: "save-progress",
    question: "האם אפשר לשמור את ההתקדמות ולהמשיך בפעם אחרת?",
    answer: (
      <div className="space-y-2">
        <p>
          כן, המערכת שומרת באופן אוטומטי את התקדמותך בשאלון. תוכל/י לחזור בכל עת
          ולהמשיך מהמקום שבו הפסקת.
        </p>
        <div className="flex items-start gap-2 mt-2 p-3 bg-blue-50 rounded-md">
          <Clock className="h-5 w-5 text-blue-500 mt-0.5" />
          <div className="text-sm text-blue-700">
            <p className="font-medium mb-1">עצה:</p>
            <p>
              בכל פעם שאתה עובר לעולם אחר או מסיים עולם, המערכת שומרת אוטומטית
              את התקדמותך.
            </p>
          </div>
        </div>
      </div>
    ),
    category: "technical",
    isPopular: true,
  },
  {
    id: "time-to-complete",
    question: "כמה זמן לוקח להשלים את השאלון?",
    answer: (
      <p>
        השאלון כולו אורך כ-30-40 דקות, אך אין צורך למלא הכל ברצף. אפשר למלא חלק
        בכל פעם. העולמות השונים אורכים כ-5-10 דקות כל אחד.
      </p>
    ),
    category: "process",
    isPopular: true,
  },
  {
    id: "required-questions",
    question: "האם חובה לענות על כל השאלות?",
    answer: (
      <div className="space-y-2">
        <p>
          לא, רק השאלות המסומנות ב-
          <Badge variant="destructive" className="text-xs">
            חובה *
          </Badge>{" "}
          הן שאלות שחייבים לענות עליהן. שאלות אלו חיוניות ליצירת פרופיל התאמה
          בסיסי.
        </p>
        <p>
          עם זאת, ככל שתענה/י על יותר שאלות, כך נוכל לעשות התאמה טובה יותר
          עבורך.
        </p>
      </div>
    ),
    category: "process",
  },
  {
    id: "how-matching-works",
    question: "איך עובד תהליך ההתאמה?",
    answer: (
      <div className="space-y-3">
        <p>תהליך ההתאמה מבוסס על מספר שלבים:</p>
        <ol className="list-decimal mr-5 space-y-1">
          <li>מילוי השאלון ויצירת פרופיל אישיותי וערכי</li>
          <li>ניתוח התשובות על ידי צוות מקצועי וגם אלגוריתם ממוחשב</li>
          <li>איתור התאמות פוטנציאליות על סמך קריטריונים רבים</li>
          <li>הצגת התאמות מובילות לשני הצדדים</li>
          <li>במקרה של הסכמה הדדית, תיווך לקשר ראשוני</li>
        </ol>
      </div>
    ),
    category: "process",
    isPopular: true,
  },
  {
    id: "privacy-info",
    question: "מי יכול לראות את התשובות שלי?",
    answer: (
      <div className="space-y-2">
        <p>
          המידע שלך נשמר בסודיות מוחלטת. רק צוות המאצמייקינג המקצועי שלנו יכול
          לראות את התשובות המלאות שלך, וזאת אך ורק לצורך יצירת התאמות.
        </p>
        <div className="flex items-start gap-2 mt-2 p-3 bg-blue-50 rounded-md">
          <Info className="h-5 w-5 text-blue-500 mt-0.5" />
          <div className="text-sm text-blue-700">
            <p>
              בעת הצגת התאמה פוטנציאלית, הצד השני רואה רק פרטים כלליים ותחומי
              עניין משותפים, לא את כל התשובות שלך.
            </p>
          </div>
        </div>
      </div>
    ),
    category: "privacy",
  },
  {
    id: "edit-answers",
    question: "האם ניתן לערוך תשובות אחרי שסיימתי?",
    answer: (
      <p>
        כן, תמיד אפשר לחזור ולערוך את התשובות. פשוט היכנס/י לשאלון דרך הפרופיל
        האישי ובחר/י את העולם שתרצה/י לערוך. שינוי התשובות עשוי להשפיע על
        ההתאמות העתידיות שלך.
      </p>
    ),
    category: "technical",
  },
  {
    id: "match-percentage",
    question: "איך מחושב אחוז ההתאמה?",
    answer: (
      <div className="space-y-2">
        <p>אחוז ההתאמה מחושב על סמך מגוון פרמטרים:</p>
        <ul className="list-disc mr-5 space-y-1">
          <li>מידת ההתאמה בערכי ליבה ואמונות</li>
          <li>סגנון חיים ושאיפות לעתיד</li>
          <li>ציפיות מחיי משפחה וזוגיות</li>
          <li>תחומי עניין משותפים</li>
          <li>התאמה רגשית וקוגניטיבית</li>
        </ul>
        <div className="flex items-start gap-2 mt-2 p-3 bg-amber-50 rounded-md border border-amber-100">
          <Star className="h-5 w-5 text-amber-500 mt-0.5" />
          <div className="text-sm text-amber-700">
            <p>
              אחוז התאמה גבוה מעיד על פוטנציאל טוב לקשר משמעותי, אך זכרו שכימיה
              אישית ומפגש פנים אל פנים הם תמיד המבחן האמיתי!
            </p>
          </div>
        </div>
      </div>
    ),
    category: "results",
  },
  {
    id: "incomplete-questionnaire",
    question: "מה קורה אם לא אשלים את כל השאלון?",
    answer: (
      <div className="space-y-2">
        <p>
          אתה יכול להתחיל לקבל התאמות גם אם לא השלמת את כל העולמות בשאלון, בתנאי
          שענית על שאלות החובה ועל מספיק שאלות כדי ליצור פרופיל בסיסי.
        </p>
        <div className="flex items-start gap-2 mt-2 p-3 bg-red-50 rounded-md border border-red-100">
          <AlertCircle className="h-5 w-5 text-red-500 mt-0.5" />
          <div className="text-sm text-red-700">
            <p>
              עם זאת, ככל שתשלים יותר שאלות, כך תגדל הדיוק של ההתאמות שתקבל.
              מומלץ להשלים את כל השאלות בהדרגה.
            </p>
          </div>
        </div>
      </div>
    ),
    category: "process",
  },
  {
    id: "inactive-account",
    question: "מה קורה אם אני לא פעיל/ה לתקופה ממושכת?",
    answer: (
      <p>
        אם חשבונך לא יהיה פעיל למשך 3 חודשים, נשלח לך התראה בדואל. לאחר 6
        חודשים של חוסר פעילות, הפרופיל שלך יוגדר כלא פעיל ולא יוצג בהתאמות
        חדשות. תוכל/י תמיד להפעיל אותו מחדש בכניסה לחשבון.
      </p>
    ),
    category: "general",
  },
];

export default function FAQ({
  className,
  title = "שאלות נפוצות",
  subtitle = "כל מה שחשוב לדעת על השאלון ותהליך ההתאמה",
  showSearch = true,
  showCategories = true,
  initialOpenId,
  items = defaultFAQItems,
}: FAQProps) {
  const [searchQuery, setSearchQuery] = useState("");
  const [activeCategory, setActiveCategory] = useState<string | null>(null);
  const [expandedItems, setExpandedItems] = useState<string[]>(
    initialOpenId ? [initialOpenId] : []
  );

  // קטגוריות שאלות נפוצות
  const categories = [
    {
      id: "process",
      label: "תהליך ההתאמה",
      icon: <ArrowRight className="h-4 w-4" />,
    },
    {
      id: "technical",
      label: "טכני",
      icon: <HelpCircle className="h-4 w-4" />,
    },
    {
      id: "privacy",
      label: "פרטיות ואבטחה",
      icon: <Info className="h-4 w-4" />,
    },
    { id: "results", label: "תוצאות", icon: <Star className="h-4 w-4" /> },
    { id: "general", label: "כללי", icon: <Info className="h-4 w-4" /> },
  ];

  // סינון שאלות לפי חיפוש וקטגוריה
  const filteredItems = items.filter((item) => {
    const matchesSearch =
      !searchQuery ||
      item.question.toLowerCase().includes(searchQuery.toLowerCase()) ||
      (typeof item.answer === "string" &&
        item.answer.toLowerCase().includes(searchQuery.toLowerCase()));

    const matchesCategory = !activeCategory || item.category === activeCategory;

    return matchesSearch && matchesCategory;
  });

  return (
    <Card className={cn("shadow-sm", className)}>
      <CardHeader className="pb-3">
        <CardTitle className="text-lg md:text-xl">{title}</CardTitle>
        {subtitle && <p className="text-gray-500 text-sm">{subtitle}</p>}

        {/* חיפוש */}
        {showSearch && (
          <div className="relative mt-2">
            <Search className="absolute left-3 top-2.5 h-4 w-4 text-gray-400" />
            <Input
              placeholder="חיפוש שאלה..."
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
              className="pl-10 bg-gray-50"
            />
          </div>
        )}

        {/* קטגוריות */}
        {showCategories && (
          <div className="flex flex-wrap gap-2 mt-3">
            <Badge
              variant={activeCategory === null ? "default" : "outline"}
              className="cursor-pointer"
              onClick={() => setActiveCategory(null)}
            >
              הכל
            </Badge>

            {categories.map((category) => (
              <Badge
                key={category.id}
                variant={activeCategory === category.id ? "default" : "outline"}
                className="cursor-pointer flex items-center gap-1"
                onClick={() =>
                  setActiveCategory(
                    activeCategory === category.id ? null : category.id
                  )
                }
              >
                {category.icon}
                {category.label}
              </Badge>
            ))}
          </div>
        )}
      </CardHeader>

      <CardContent>
        {filteredItems.length === 0 ? (
          <div className="text-center py-8">
            <HelpCircle className="h-12 w-12 mx-auto text-gray-300 mb-2" />
            <p className="text-gray-500">לא נמצאו שאלות שתואמות את החיפוש</p>
          </div>
        ) : (
          <Accordion
            type="multiple"
            value={expandedItems}
            onValueChange={setExpandedItems}
            className="space-y-2"
          >
            {filteredItems.map((item) => (
              <AccordionItem
                key={item.id}
                value={item.id}
                className={cn(
                  "border rounded-lg px-4 py-1",
                  expandedItems.includes(item.id)
                    ? "bg-blue-50 border-blue-200"
                    : "bg-white border-gray-200 hover:border-blue-200"
                )}
              >
                <AccordionTrigger className="hover:no-underline py-3">
                  <div className="flex items-center gap-2 text-right">
                    <span className="font-medium">{item.question}</span>
                    {item.isPopular && (
                      <Badge
                        variant="outline"
                        className="bg-amber-50 text-amber-700 border-amber-200 text-xs"
                      >
                        נפוץ
                      </Badge>
                    )}
                  </div>
                </AccordionTrigger>
                <AccordionContent className="text-gray-700 pt-1 pb-4">
                  {item.answer}
                </AccordionContent>
              </AccordionItem>
            ))}
          </Accordion>
        )}
      </CardContent>
    </Card>
  );
}
--- End of Content for FAQ.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\user\Desktop\matchpoint\shidduch-system\src\components\questionnaire\components\InteractiveScale.tsx
--------------------------------------------------------------------------------
Content:
import React, { useState, useCallback, useEffect, useRef } from "react";
import { motion, AnimatePresence } from "framer-motion";
import { cn } from "@/lib/utils";
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip";
import {
  Star,
  Heart,
  ThumbsUp,
  Sparkles,
  Info,
  AlertCircle,
} from "lucide-react";
import { useMediaQuery } from "../hooks/useMediaQuery";
import { Progress } from "@/components/ui/progress";

interface ScaleOption {
  value: number;
  label: string;
  description?: string;
  icon?: React.ReactNode;
}

interface InteractiveScaleProps {
  min?: number;
  max?: number;
  step?: number;
  defaultValue?: number;
  value?: number;
  onChange?: (value: number) => void;
  onComplete?: (value: number) => void;
  labels?: {
    min: string;
    max: string;
    middle?: string;
  };
  descriptions?: {
    min?: string;
    max?: string;
    middle?: string;
  };
  options?: ScaleOption[];
  mode?: "numeric" | "icons" | "hearts" | "stars" | "thumbs";
  size?: "sm" | "md" | "lg";
  showLabels?: boolean;
  showValue?: boolean;
  showTooltips?: boolean;
  isDisabled?: boolean;
  className?: string;
  required?: boolean;
  name?: string;
  error?: string;
}

const defaultIcons = {
  stars: Star,
  hearts: Heart,
  thumbs: ThumbsUp,
};

export default function InteractiveScale({
  min = 1,
  max = 10,
  step = 1,
  defaultValue,
  value: controlledValue,
  onChange,
  onComplete,
  labels,
  options,
  mode = "numeric",
  size = "md",
  showLabels = true,
  showValue = true,
  showTooltips = true,
  isDisabled = false,
  className = "",
  required = false,
  name,
  error,
  descriptions,
}: InteractiveScaleProps) {
  const [internalValue, setInternalValue] = useState<number | null>(
    defaultValue || null
  );
  const [hoveredValue, setHoveredValue] = useState<number | null>(null);
  const [isDragging, setIsDragging] = useState(false);
  const [isTouching, setIsTouching] = useState(false);
  const [hintVisible, setHintVisible] = useState(false);
  const containerRef = useRef<HTMLDivElement>(null);
  const trackRef = useRef<HTMLDivElement>(null);

  const isMobileDevice = useMediaQuery("(max-width: 640px)");
  const isTablet = useMediaQuery("(max-width: 1024px)");

  const value = controlledValue !== undefined ? controlledValue : internalValue;

  // טיימר להצגת הרמז
  useEffect(() => {
    // אם יש ערך - הסתר את הרמז
    if (value !== null) {
      setHintVisible(false);
      return;
    }

    // הצג רמז למשתמש אחרי 2 שניות אם אין ערך
    const timer = setTimeout(() => {
      if (value === null) {
        setHintVisible(true);
      }
    }, 2000);

    return () => clearTimeout(timer);
  }, [value]);

  const handleValueChange = useCallback(
    (newValue: number) => {
      if (!isDisabled) {
        setInternalValue(newValue);
        onChange?.(newValue);
        setHintVisible(false);
      }
    },
    [isDisabled, onChange]
  );

  const handleClick = useCallback(
    (clickedValue: number) => {
      handleValueChange(clickedValue);
      onComplete?.(clickedValue);
    },
    [handleValueChange, onComplete]
  );

  const handleTouchStart = useCallback(() => {
    if (!isDisabled) {
      setIsTouching(true);
    }
  }, [isDisabled]);

  const handleTouchMove = useCallback(
    (event: TouchEvent) => {
      if (isTouching && containerRef.current) {
        const touch = event.touches[0];
        const rect = containerRef.current.getBoundingClientRect();
        const x = touch.clientX - rect.left;
        const width = rect.width;
        const percentage = Math.max(0, Math.min(1, x / width));
        const range = max - min;
        const newValue = Math.round((percentage * range) / step) * step + min;

        handleValueChange(newValue);
        setHoveredValue(newValue);
      }
    },
    [isTouching, min, max, step, handleValueChange]
  );

  const handleTouchEnd = useCallback(() => {
    setIsTouching(false);
    if (hoveredValue !== null) {
      onComplete?.(hoveredValue);
    }
  }, [hoveredValue, onComplete]);

  const handleKeyPress = useCallback(
    (event: React.KeyboardEvent, itemValue: number) => {
      if (event.key === "Enter" || event.key === " ") {
        event.preventDefault();
        handleClick(itemValue);
      } else if (event.key === "ArrowRight" || event.key === "ArrowUp") {
        event.preventDefault();
        const nextValue = Math.min(max, itemValue + step);
        handleClick(nextValue);
      } else if (event.key === "ArrowLeft" || event.key === "ArrowDown") {
        event.preventDefault();
        const prevValue = Math.max(min, itemValue - step);
        handleClick(prevValue);
      }
    },
    [handleClick, max, min, step]
  );

  const handleMouseMove = useCallback(
    (event: MouseEvent) => {
      if (isDragging && containerRef.current) {
        const rect = containerRef.current.getBoundingClientRect();
        const x = event.clientX - rect.left;
        const width = rect.width;
        const percentage = Math.max(0, Math.min(1, x / width));
        const range = max - min;
        const newValue = Math.round((percentage * range) / step) * step + min;
        handleValueChange(newValue);
        setHoveredValue(newValue);
      }
    },
    [isDragging, min, max, step, handleValueChange]
  );

  const handleTrackClick = useCallback(
    (event: React.MouseEvent) => {
      if (isDisabled) return;

      if (trackRef.current) {
        const rect = trackRef.current.getBoundingClientRect();
        const x = event.clientX - rect.left;
        const width = rect.width;
        const percentage = Math.max(0, Math.min(1, x / width));
        const range = max - min;
        const newValue = Math.round((percentage * range) / step) * step + min;
        handleClick(newValue);
      }
    },
    [isDisabled, min, max, step, handleClick]
  );

  useEffect(() => {
    if (isDragging) {
      window.addEventListener("mousemove", handleMouseMove);
      window.addEventListener("mouseup", () => {
        setIsDragging(false);
        if (hoveredValue !== null) {
          onComplete?.(hoveredValue);
        }
      });
    }

    return () => {
      window.removeEventListener("mousemove", handleMouseMove);
      window.removeEventListener("mouseup", () => setIsDragging(false));
    };
  }, [isDragging, handleMouseMove, hoveredValue, onComplete]);

  useEffect(() => {
    if (isTouching) {
      window.addEventListener("touchmove", handleTouchMove);
      window.addEventListener("touchend", handleTouchEnd);
    }

    return () => {
      window.removeEventListener("touchmove", handleTouchMove);
      window.removeEventListener("touchend", handleTouchEnd);
    };
  }, [isTouching, handleTouchMove, handleTouchEnd]);

  const getScaleItems = () => {
    if (options) return options;

    const items: ScaleOption[] = [];
    for (let i = min; i <= max; i += step) {
      const item: ScaleOption = {
        value: i,
        label: i.toString(),
      };

      if (mode !== "numeric") {
        const Icon = defaultIcons[mode as keyof typeof defaultIcons];
        item.icon = <Icon className="w-5 h-5" />;
      }

      items.push(item);
    }
    return items;
  };

  const scaleItems = getScaleItems();
  const activeValue = hoveredValue !== null ? hoveredValue : value;

  const sizeClasses = {
    sm: "h-8 text-sm gap-1",
    md: "h-10 text-base gap-1.5",
    lg: "h-12 text-lg gap-2",
  };

  // לקבוע אם להראות את התיאור - התיאור יוצג רק אם יש ערך פעיל ויש תיאור
  const showDescription =
    activeValue !== null &&
    descriptions &&
    ((activeValue === min && descriptions.min) ||
      (activeValue === max && descriptions.max) ||
      (activeValue === Math.floor((min + max) / 2) && descriptions.middle));

  const getDescription = () => {
    if (activeValue === null || !descriptions) return "";

    if (activeValue === min) return descriptions.min || "";
    if (activeValue === max) return descriptions.max || "";
    if (activeValue === Math.floor((min + max) / 2))
      return descriptions.middle || "";

    if (options) {
      const option = options.find((o) => o.value === activeValue);
      return option?.description || "";
    }

    return "";
  };

  // חישוב אחוז ערך הסולם הנוכחי
  const getValuePercentage = () => {
    if (activeValue === null) return 0;
    return ((activeValue - min) / (max - min)) * 100;
  };

  // אנימציות
  const variants = {
    hidden: { opacity: 0, scale: 0.8 },
    visible: { opacity: 1, scale: 1, transition: { duration: 0.2 } },
    hover: { scale: 1.1, transition: { duration: 0.2 } },
    tap: { scale: 0.95, transition: { duration: 0.1 } },
  };

  // רכיב שמציג תיאור לערך הנוכחי
  const ValueDescription = () => {
    const description = getDescription();
    if (!description) return null;

    return (
      <motion.div
        initial={{ opacity: 0, y: 10 }}
        animate={{ opacity: 1, y: 0 }}
        exit={{ opacity: 0, y: 10 }}
        className="mt-4 p-3 bg-blue-50 rounded-md border border-blue-100 text-sm text-blue-800"
      >
        {description}
      </motion.div>
    );
  };

  // רכיב רמז למשתמש כאשר אין ערך
  const UserHint = () => {
    if (!hintVisible) return null;

    return (
      <motion.div
        initial={{ opacity: 0, y: 5 }}
        animate={{ opacity: 1, y: 0 }}
        exit={{ opacity: 0 }}
        className="flex items-center justify-center mt-2 text-xs text-blue-600 bg-blue-50 rounded-full py-1 px-3"
      >
        <Sparkles className="h-3 w-3 mr-1" />
        {isMobileDevice ? "לחץ/החלק לבחירת ערך" : "בחר ערך בסולם למעלה"}
      </motion.div>
    );
  };

  return (
    <div
      className={cn(
        "relative space-y-2",
        isDisabled && "opacity-50 cursor-not-allowed",
        className
      )}
    >
      {/* Track Bar - שורה אחידה ברקע */}
      <div
        ref={trackRef}
        className={cn(
          "absolute left-0 right-0 h-2 bg-gray-200 rounded-full top-1/2 -translate-y-1/2 z-0 cursor-pointer",
          isDisabled ? "bg-gray-100" : ""
        )}
        onClick={handleTrackClick}
      ></div>

      {/* Progress Fill Track */}
      {activeValue !== null && (
        <div
          className="absolute left-0 h-2 bg-blue-500 rounded-full top-1/2 -translate-y-1/2 z-0 transition-all duration-150"
          style={{ width: `${getValuePercentage()}%` }}
        ></div>
      )}

      <div
        ref={containerRef}
        className={cn(
          "relative flex items-center justify-between z-10",
          sizeClasses[size]
        )}
        onMouseDown={() => !isDisabled && setIsDragging(true)}
        onTouchStart={handleTouchStart}
      >
        {showLabels && labels && (
          <div className="absolute -top-8 left-0 right-0 flex justify-between text-sm text-gray-600">
            <span>{labels.min}</span>
            {labels.middle && <span>{labels.middle}</span>}
            <span>{labels.max}</span>
          </div>
        )}

        <div className="relative flex-1 flex items-center justify-between">
          <AnimatePresence initial={false}>
            {scaleItems.map((item) => {
              // האם האייטם הנוכחי פעיל (כלומר הערך הנוכחי או קטן ממנו)
              const isActive =
                activeValue !== null && item.value <= activeValue;
              const isHighlighted = item.value === activeValue;

              return (
                <TooltipProvider key={item.value} delayDuration={300}>
                  <Tooltip>
                    <TooltipTrigger asChild>
                      <motion.button
                        type="button"
                        variants={variants}
                        initial="hidden"
                        animate="visible"
                        whileHover="hover"
                        whileTap="tap"
                        className={cn(
                          "relative flex items-center justify-center",
                          "w-8 h-8 rounded-full transition-all duration-150",
                          "focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-0",
                          isActive
                            ? "bg-blue-500 text-white shadow-sm"
                            : "bg-white border border-gray-300",
                          isHighlighted && "ring-2 ring-blue-500 scale-110",
                          isDisabled && "cursor-not-allowed"
                        )}
                        onClick={() => handleClick(item.value)}
                        onKeyDown={(e) => handleKeyPress(e, item.value)}
                        onMouseEnter={() =>
                          !isDisabled && setHoveredValue(item.value)
                        }
                        onMouseLeave={() => setHoveredValue(null)}
                        disabled={isDisabled}
                        aria-label={`Scale value ${item.value}, ${item.label}`}
                        style={{
                          zIndex: isHighlighted ? 5 : isActive ? 4 : 3,
                        }}
                      >
                        {item.icon || item.label}

                        {/* Animation pulse for highlighted item */}
                        {isHighlighted && (
                          <motion.div
                            className="absolute inset-0 rounded-full bg-blue-500 opacity-20"
                            initial={{ scale: 1 }}
                            animate={{
                              scale: [1, 1.2, 1],
                              opacity: [0.2, 0.3, 0.2],
                            }}
                            transition={{
                              duration: 2,
                              repeat: Infinity,
                              repeatType: "loop",
                            }}
                          />
                        )}
                      </motion.button>
                    </TooltipTrigger>
                    {showTooltips && (item.description || item.label) && (
                      <TooltipContent>
                        <p>{item.description || `ערך: ${item.label}`}</p>
                      </TooltipContent>
                    )}
                  </Tooltip>
                </TooltipProvider>
              );
            })}
          </AnimatePresence>
        </div>
      </div>

      {/* Touch hint for mobile */}
      <AnimatePresence>{hintVisible && <UserHint />}</AnimatePresence>

      {/* Show Current Value */}
      {showValue && (
        <div className="flex justify-center">
          <motion.div
            initial={{ opacity: 0, y: 5 }}
            animate={{ opacity: 1, y: 0 }}
            className={cn(
              "mt-3 px-4 py-1 rounded-full text-sm font-medium transition-all",
              value !== null
                ? "bg-blue-100 text-blue-800"
                : "bg-gray-100 text-gray-600"
            )}
          >
            {value !== null ? (
              <span className="flex items-center">
                <Star className="h-3.5 w-3.5 text-blue-500 mr-1" />
                ערך נבחר: {value}
              </span>
            ) : (
              <span className="flex items-center">
                <Info className="h-3.5 w-3.5 text-gray-500 mr-1" />
                לא נבחר ערך
              </span>
            )}
          </motion.div>
        </div>
      )}

      {/* Error Message */}
      {error && (
        <motion.div
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          className="text-sm text-red-500 mt-1 flex items-center"
        >
          <AlertCircle className="h-3.5 w-3.5 mr-1" />
          {error}
        </motion.div>
      )}

      {/* Progress bar showing value relationship to min/max */}
      {value !== null && !isTablet && (
        <div className="pt-2">
          <Progress value={getValuePercentage()} className="h-1" />
        </div>
      )}

      {/* Description for the selected value */}
      <AnimatePresence>
        {showDescription && <ValueDescription />}
      </AnimatePresence>

      {/* Hidden input for form submission */}
      {required && (
        <input
          type="hidden"
          name={name}
          value={value || ""}
          required
          aria-hidden="true"
        />
      )}
    </div>
  );
}
--- End of Content for InteractiveScale.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\user\Desktop\matchpoint\shidduch-system\src\components\questionnaire\components\MatchResultCard.tsx
--------------------------------------------------------------------------------
Content:
import React, { useState } from "react";
import { motion, AnimatePresence } from "framer-motion";
import { Card, CardContent, CardFooter } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import {
  Heart,
  X,
  MessageCircle,
  User,
  MapPin,
  Calendar,
  GraduationCap,
  Briefcase,
  Sparkles,
  Star,
  BookOpen,
  ChevronsDown,
  ChevronsUp,
  Music,
  Coffee,
  Bookmark,
  ExternalLink,
} from "lucide-react";
import { Progress } from "@/components/ui/progress";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { cn } from "@/lib/utils";
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip";

interface MatchTrait {
  name: string;
  score: number; // 0-100
  description?: string;
}

interface CommonInterest {
  name: string;
  category:
    | "hobby"
    | "value"
    | "lifestyle"
    | "religion"
    | "education"
    | "other";
  icon?: React.ReactNode;
}

interface MatchResultCardProps {
  id: string;
  name: string;
  age: number;
  location: string;
  distance?: number; // בקילומטרים
  profileImage?: string;
  matchPercentage: number;
  occupation?: string;
  education?: string;
  about?: string;
  matchTraits?: MatchTrait[];
  commonInterests?: CommonInterest[];
  lastActive?: Date;
  conversationStarted?: boolean;
  bookmarked?: boolean;
  className?: string;
  onAccept?: (id: string) => void;
  onReject?: (id: string) => void;
  onMessage?: (id: string) => void;
  onViewProfile?: (id: string) => void;
  onBookmark?: (id: string, bookmarked: boolean) => void;
  isPremium?: boolean;
}

export default function MatchResultCard({
  id,
  name,
  age,
  location,
  distance,
  profileImage,
  matchPercentage,
  occupation,
  education,
  about,
  matchTraits = [],
  commonInterests = [],
  lastActive,
  conversationStarted = false,
  bookmarked = false,
  className,
  onAccept,
  onReject,
  onMessage,
  onViewProfile,
  onBookmark,
  isPremium = false,
}: MatchResultCardProps) {
  const [isExpanded, setIsExpanded] = useState(false);
  const [isBookmarked, setIsBookmarked] = useState(bookmarked);
  const [showConfirmReject, setShowConfirmReject] = useState(false);

  // מיפוי אייקון לקטגוריות תחומי עניין משותפים
  const getCategoryIcon = (category: string) => {
    switch (category) {
      case "hobby":
        return <Music className="h-3.5 w-3.5" />;
      case "value":
        return <Heart className="h-3.5 w-3.5" />;
      case "lifestyle":
        return <Coffee className="h-3.5 w-3.5" />;
      case "religion":
        return <BookOpen className="h-3.5 w-3.5" />;
      case "education":
        return <GraduationCap className="h-3.5 w-3.5" />;
      default:
        return <Star className="h-3.5 w-3.5" />;
    }
  };

  // פורמט לזמן פעילות אחרונה
  const formatLastActive = (date?: Date) => {
    if (!date) return "לא ידוע";

    const now = new Date();
    const diffInDays = Math.floor(
      (now.getTime() - date.getTime()) / (1000 * 60 * 60 * 24)
    );

    if (diffInDays === 0) return "היום";
    if (diffInDays === 1) return "אתמול";
    if (diffInDays < 7) return `לפני ${diffInDays} ימים`;
    if (diffInDays < 30) return `לפני ${Math.floor(diffInDays / 7)} שבועות`;
    return `לפני ${Math.floor(diffInDays / 30)} חודשים`;
  };

  // טיפול בשמירה במועדפים
  const handleBookmark = () => {
    setIsBookmarked(!isBookmarked);
    if (onBookmark) {
      onBookmark(id, !isBookmarked);
    }
  };

  // קביעת צבע לפי אחוז התאמה
  const getMatchColor = () => {
    if (matchPercentage >= 90) return "from-green-400 to-emerald-500";
    if (matchPercentage >= 80) return "from-emerald-400 to-green-500";
    if (matchPercentage >= 70) return "from-blue-400 to-blue-500";
    if (matchPercentage >= 60) return "from-blue-400 to-cyan-500";
    return "from-cyan-400 to-blue-500";
  };

  // אנימציות
  const expandVariants = {
    hidden: { height: 0, opacity: 0 },
    visible: {
      height: "auto",
      opacity: 1,
      transition: {
        height: { duration: 0.3 },
        opacity: { duration: 0.3, delay: 0.1 },
      },
    },
  };

  return (
    <Card
      className={cn(
        "overflow-hidden transition-all border",
        isExpanded ? "shadow-md" : "shadow-sm hover:shadow-md",
        isPremium ? "border-amber-200" : "border-blue-100",
        className
      )}
    >
      {/* Premium Badge */}
      {isPremium && (
        <div className="absolute top-0 left-0 bg-gradient-to-r from-amber-400 to-amber-600 text-white px-2 py-0.5 text-xs rounded-br-md z-10">
          <Sparkles className="h-3 w-3 inline-block mr-1" />
          התאמה מומלצת
        </div>
      )}

      {/* Top Section */}
      <div className="p-4 flex md:flex-row flex-col gap-4">
        {/* Image */}
        <div className="relative">
          <Avatar className="w-24 h-24 rounded-lg border-2 border-white shadow-sm">
            <AvatarImage src={profileImage} alt={name} />
            <AvatarFallback className="bg-gradient-to-br from-blue-100 to-blue-200 text-blue-600 text-3xl">
              {name.charAt(0)}
            </AvatarFallback>
          </Avatar>

          {/* Match Percentage */}
          <div className="absolute -bottom-3 left-1/2 transform -translate-x-1/2">
            <Badge
              className={cn(
                "rounded-full bg-gradient-to-r px-2 text-white border-0 shadow-sm",
                getMatchColor()
              )}
            >
              <Sparkles className="h-3 w-3 mr-1" />
              {matchPercentage}% התאמה
            </Badge>
          </div>
        </div>

        {/* Basic Info */}
        <div className="flex-1 space-y-2">
          <div className="flex justify-between items-start">
            <div>
              <h3 className="text-lg font-medium">
                {name}, {age}
              </h3>
              <div className="flex items-center text-sm text-gray-600">
                <MapPin className="h-3.5 w-3.5 mr-1" />
                {location}
                {distance && <span className="mr-1">({distance} קמ)</span>}
              </div>
            </div>

            <TooltipProvider>
              <Tooltip>
                <TooltipTrigger asChild>
                  <Button
                    variant="ghost"
                    size="icon"
                    className={cn(
                      "h-8 w-8 rounded-full",
                      isBookmarked ? "text-amber-500" : "text-gray-400"
                    )}
                    onClick={handleBookmark}
                  >
                    <Bookmark className="h-5 w-5" />
                  </Button>
                </TooltipTrigger>
                <TooltipContent>
                  <p>{isBookmarked ? "הסר ממועדפים" : "הוסף למועדפים"}</p>
                </TooltipContent>
              </Tooltip>
            </TooltipProvider>
          </div>

          {/* Occupation + Education */}
          <div className="space-y-1">
            {occupation && (
              <div className="flex items-center text-sm text-gray-600">
                <Briefcase className="h-3.5 w-3.5 mr-1 text-gray-500" />
                {occupation}
              </div>
            )}

            {education && (
              <div className="flex items-center text-sm text-gray-600">
                <GraduationCap className="h-3.5 w-3.5 mr-1 text-gray-500" />
                {education}
              </div>
            )}
          </div>

          {/* Common Interests Preview */}
          {commonInterests.length > 0 && (
            <div className="flex flex-wrap gap-1 pt-1">
              {commonInterests.slice(0, 3).map((interest, index) => (
                <Badge
                  key={index}
                  variant="outline"
                  className="bg-blue-50 text-blue-700 border-blue-200 text-xs py-0 h-5"
                >
                  {interest.icon || getCategoryIcon(interest.category)}
                  <span className="mr-1 truncate max-w-[100px]">
                    {interest.name}
                  </span>
                </Badge>
              ))}

              {commonInterests.length > 3 && (
                <Badge
                  variant="outline"
                  className="bg-gray-50 text-gray-600 border-gray-200 text-xs"
                >
                  +{commonInterests.length - 3}
                </Badge>
              )}
            </div>
          )}
        </div>
      </div>

      {/* Action Buttons */}
      <div className="px-4 pb-3 flex gap-2 justify-center">
        {onReject &&
          (showConfirmReject ? (
            <>
              <Button
                variant="destructive"
                size="sm"
                className="flex-1"
                onClick={() => onReject(id)}
              >
                לאשר דחייה
              </Button>
              <Button
                variant="outline"
                size="sm"
                className="flex-1"
                onClick={() => setShowConfirmReject(false)}
              >
                בטל
              </Button>
            </>
          ) : (
            <Button
              variant="outline"
              size="sm"
              className="flex-1 border-red-200 text-red-600 hover:bg-red-50 hover:text-red-700"
              onClick={() => setShowConfirmReject(true)}
            >
              <X className="h-4 w-4 mr-1" />
              לא מתאים
            </Button>
          ))}

        {onAccept && (
          <Button
            variant="default"
            size="sm"
            className="flex-1 bg-gradient-to-r from-blue-500 to-blue-600 hover:from-blue-600 hover:to-blue-700"
            onClick={() => onAccept(id)}
          >
            <Heart className="h-4 w-4 mr-1" />
            מעוניין/ת
          </Button>
        )}

        {conversationStarted && onMessage && (
          <Button
            variant="default"
            size="sm"
            className="flex-1"
            onClick={() => onMessage(id)}
          >
            <MessageCircle className="h-4 w-4 mr-1" />
            המשך שיחה
          </Button>
        )}
      </div>

      {/* Expand/Collapse Button */}
      <div className="px-4 pb-2 text-center">
        <Button
          variant="ghost"
          size="sm"
          className="text-xs text-gray-500 hover:text-gray-700"
          onClick={() => setIsExpanded(!isExpanded)}
        >
          {isExpanded ? (
            <>
              <ChevronsUp className="h-3.5 w-3.5 mr-1" />
              הסתר פרטים נוספים
            </>
          ) : (
            <>
              <ChevronsDown className="h-3.5 w-3.5 mr-1" />
              הצג פרטים נוספים
            </>
          )}
        </Button>
      </div>

      {/* Expanded Content */}
      <AnimatePresence>
        {isExpanded && (
          <motion.div
            variants={expandVariants}
            initial="hidden"
            animate="visible"
            exit="hidden"
            className="border-t border-gray-100"
          >
            <CardContent className="p-4 space-y-5">
              {/* About Section */}
              {about && (
                <div className="space-y-2">
                  <h4 className="text-sm font-medium flex items-center">
                    <User className="h-4 w-4 mr-1 text-blue-500" />
                    קצת על {name}
                  </h4>
                  <p className="text-sm text-gray-600 bg-gray-50 p-3 rounded-md border">
                    {about}
                  </p>
                </div>
              )}

              {/* Match Traits */}
              {matchTraits.length > 0 && (
                <div className="space-y-3">
                  <h4 className="text-sm font-medium flex items-center">
                    <Sparkles className="h-4 w-4 mr-1 text-blue-500" />
                    תחומי התאמה בולטים
                  </h4>

                  <div className="space-y-2">
                    {matchTraits.map((trait, index) => (
                      <TooltipProvider key={index}>
                        <Tooltip>
                          <TooltipTrigger asChild>
                            <div className="space-y-1">
                              <div className="flex justify-between text-sm">
                                <span>{trait.name}</span>
                                <span className="text-sm text-gray-600">
                                  {trait.score}%
                                </span>
                              </div>
                              <Progress
                                value={trait.score}
                                className={cn(
                                  "h-2",
                                  trait.score >= 80
                                    ? "[--progress-foreground:theme(colors.green.500)]"
                                    : trait.score >= 60
                                    ? "[--progress-foreground:theme(colors.blue.500)]"
                                    : "[--progress-foreground:theme(colors.blue.400)]"
                                )}
                              />
                            </div>
                          </TooltipTrigger>
                          {trait.description && (
                            <TooltipContent side="top" className="max-w-xs">
                              <p>{trait.description}</p>
                            </TooltipContent>
                          )}
                        </Tooltip>
                      </TooltipProvider>
                    ))}
                  </div>
                </div>
              )}

              {/* All Common Interests */}
              {commonInterests.length > 0 && (
                <div className="space-y-3">
                  <h4 className="text-sm font-medium flex items-center">
                    <Heart className="h-4 w-4 mr-1 text-blue-500" />
                    תחומי עניין משותפים
                  </h4>

                  <div className="flex flex-wrap gap-2">
                    {commonInterests.map((interest, index) => (
                      <Badge
                        key={index}
                        variant="outline"
                        className={cn(
                          "bg-blue-50 text-blue-700 border-blue-200",
                          interest.category === "value" &&
                            "bg-pink-50 text-pink-700 border-pink-200",
                          interest.category === "religion" &&
                            "bg-purple-50 text-purple-700 border-purple-200",
                          interest.category === "education" &&
                            "bg-emerald-50 text-emerald-700 border-emerald-200"
                        )}
                      >
                        {interest.icon || getCategoryIcon(interest.category)}
                        <span className="mr-1">{interest.name}</span>
                      </Badge>
                    ))}
                  </div>
                </div>
              )}

              {/* Last Active */}
              {lastActive && (
                <div className="text-sm text-gray-500 flex items-center">
                  <Calendar className="h-4 w-4 mr-1 text-gray-400" />
                  פעילות אחרונה: {formatLastActive(lastActive)}
                </div>
              )}
            </CardContent>

            {/* Footer */}
            <CardFooter className="px-4 py-3 bg-gray-50 flex justify-between">
              {onViewProfile && (
                <Button
                  variant="outline"
                  size="sm"
                  className="w-full"
                  onClick={() => onViewProfile(id)}
                >
                  <ExternalLink className="h-4 w-4 mr-1" />
                  צפייה בפרופיל מלא
                </Button>
              )}
            </CardFooter>
          </motion.div>
        )}
      </AnimatePresence>
    </Card>
  );
}
--- End of Content for MatchResultCard.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\user\Desktop\matchpoint\shidduch-system\src\components\questionnaire\components\QuestionnaireProgress.tsx
--------------------------------------------------------------------------------
Content:
import React, { useState } from "react";
import { Progress } from "@/components/ui/progress";
import { Badge } from "@/components/ui/badge";
import { cn } from "@/lib/utils";
import {
  CheckCircle,
  Clock,
  Info,
  Globe,
  CheckCircle2,
  ChevronRight,
  Award,
  Star,
  TrendingUp,
  Timer,
  PlayCircle,
  BarChart3,
  ArrowUpRight,
  HelpCircle,
} from "lucide-react";
import type { WorldId } from "../types/types";
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip";
import { Button } from "@/components/ui/button";
import { motion, AnimatePresence } from "framer-motion";
import { useMediaQuery } from "../hooks/useMediaQuery";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";

interface QuestionnaireProgressProps {
  completedWorlds: WorldId[];
  allWorlds?: WorldId[];
  currentWorld: WorldId;
  totalQuestions: number;
  answeredQuestions: number;
  requiredQuestions: number;
  answeredRequiredQuestions: number;
  estimatedTimeLeft?: number; // בדקות
  lastSaved?: Date | null;
  onWorldChange?: (worldId: WorldId) => void;
  className?: string;
}

const worldLabels = {
  PERSONALITY: "אישיות",
  VALUES: "ערכים ואמונות",
  RELATIONSHIP: "זוגיות",
  PARTNER: "פרטנר",
  RELIGION: "דת ומסורת",
};

export default function QuestionnaireProgress({
  completedWorlds,
  allWorlds = ["PERSONALITY", "VALUES", "RELATIONSHIP", "PARTNER", "RELIGION"],
  currentWorld,
  totalQuestions,
  answeredQuestions,
  requiredQuestions,
  answeredRequiredQuestions,
  estimatedTimeLeft = 0,
  lastSaved = null,
  onWorldChange,
  className = "",
}: QuestionnaireProgressProps) {
  // מצב מקומי
  const [expandedSection, setExpandedSection] = useState<string | null>(null);
  const isTablet = useMediaQuery("(max-width: 1024px)");

  // חישוב אחוזי התקדמות
  const totalCompletion = Math.round(
    (answeredQuestions / totalQuestions) * 100
  );
  const requiredCompletion = Math.round(
    (answeredRequiredQuestions / requiredQuestions) * 100
  );
  const worldsCompletion = Math.round(
    (completedWorlds.length / allWorlds.length) * 100
  );

  // מצב התקדמות כולל להצגה למשתמש
  let progressStatus: "low" | "medium" | "high" | "complete" = "low";
  if (totalCompletion >= 100) progressStatus = "complete";
  else if (totalCompletion >= 75) progressStatus = "high";
  else if (totalCompletion >= 40) progressStatus = "medium";

  // צבעים המותאמים למצב התקדמות
  const statusColors = {
    low: "text-amber-600",
    medium: "text-blue-600",
    high: "text-blue-700",
    complete: "text-green-600",
  };

  const statusBgColors = {
    low: "bg-amber-100",
    medium: "bg-blue-100",
    high: "bg-blue-100",
    complete: "bg-green-100",
  };

  // הופך זמן שנותר בדקות למחרוזת מותאמת
  const formatTimeLeft = (minutes: number): string => {
    if (minutes < 1) return "פחות מדקה";
    if (minutes < 60) return `${minutes} דק'`;

    const hours = Math.floor(minutes / 60);
    const mins = minutes % 60;
    return `${hours} שעות ${mins > 0 ? `ו-${mins} דק'` : ""}`;
  };

  // חישוב זמן שמירה אחרון יחסית
  const getRelativeTime = (date: Date): string => {
    const now = new Date();
    const diffInMinutes = Math.floor(
      (now.getTime() - date.getTime()) / (1000 * 60)
    );

    if (diffInMinutes < 1) return "עכשיו";
    if (diffInMinutes < 60) return `לפני ${diffInMinutes} דקות`;

    const diffInHours = Math.floor(diffInMinutes / 60);
    if (diffInHours < 24) return `לפני ${diffInHours} שעות`;

    return `ב-${date.toLocaleTimeString()}`;
  };

  // קבל המלצה לעולם הבא שטרם הושלם
  const getNextRecommendedWorld = (): WorldId | null => {
    for (const world of allWorlds) {
      if (!completedWorlds.includes(world) && world !== currentWorld) {
        return world;
      }
    }
    return null;
  };

  // אקורדיון מונפש
  const AccordionSection = ({
    title,
    icon,
    children,
    id,
  }: {
    title: string;
    icon: React.ReactNode;
    children: React.ReactNode;
    id: string;
  }) => {
    const isExpanded = expandedSection === id;

    return (
      <div className="border rounded-lg overflow-hidden mb-2">
        <button
          className={cn(
            "w-full flex items-center justify-between p-3 text-left transition-colors",
            isExpanded
              ? "bg-blue-50 border-blue-200"
              : "bg-white hover:bg-gray-50"
          )}
          onClick={() => setExpandedSection(isExpanded ? null : id)}
        >
          <div className="flex items-center">
            <div
              className={cn(
                "mr-2",
                isExpanded ? "text-blue-600" : "text-gray-500"
              )}
            >
              {icon}
            </div>
            <span
              className={cn("font-medium", isExpanded ? "text-blue-700" : "")}
            >
              {title}
            </span>
          </div>
          <ChevronRight
            className={cn(
              "w-5 h-5 transition-transform",
              isExpanded ? "transform rotate-90 text-blue-600" : "text-gray-400"
            )}
          />
        </button>

        <AnimatePresence initial={false}>
          {isExpanded && (
            <motion.div
              initial={{ height: 0, opacity: 0 }}
              animate={{ height: "auto", opacity: 1 }}
              exit={{ height: 0, opacity: 0 }}
              transition={{ duration: 0.2 }}
            >
              <div className="p-3 bg-blue-50/50 border-t">{children}</div>
            </motion.div>
          )}
        </AnimatePresence>
      </div>
    );
  };

  // קומפוננטה עבור מידע על תגמולים
  const RewardsInfo = () => {
    const achievements = [
      {
        name: "עמידה ביעד",
        condition: requiredCompletion >= 100,
        icon: <Award className="h-4 w-4 text-amber-500" />,
        description: "השלמת את כל שאלות החובה",
      },
      {
        name: "לומד מצטיין",
        condition: totalCompletion >= 50,
        icon: <Star className="h-4 w-4 text-amber-500" />,
        description: "ענית על לפחות מחצית מהשאלות",
      },
      {
        name: "חוקר עמוק",
        condition: totalCompletion >= 80,
        icon: <TrendingUp className="h-4 w-4 text-amber-500" />,
        description: "ענית על מעל 80% מהשאלות",
      },
      {
        name: "שלם ומושלם",
        condition: totalCompletion >= 100,
        icon: <CheckCircle2 className="h-4 w-4 text-amber-500" />,
        description: "ענית על כל השאלות בשאלון",
      },
    ];

    // מסנן רק הישגים שהושגו
    const earnedAchievements = achievements.filter(
      (achievement) => achievement.condition
    );

    return (
      <div className="space-y-2">
        {earnedAchievements.length > 0 ? (
          <>
            <p className="text-sm text-gray-600 mb-2">
              כל הכבוד! השגת את ההישגים הבאים:
            </p>
            <div className="space-y-2">
              {earnedAchievements.map((achievement, index) => (
                <div
                  key={index}
                  className="flex items-center bg-white p-2 rounded-lg border"
                >
                  <div className="mr-2">{achievement.icon}</div>
                  <div>
                    <div className="font-medium text-sm">
                      {achievement.name}
                    </div>
                    <div className="text-xs text-gray-500">
                      {achievement.description}
                    </div>
                  </div>
                </div>
              ))}
            </div>

            {earnedAchievements.length < achievements.length && (
              <p className="text-xs text-gray-500 mt-3">
                השלם עוד {achievements.length - earnedAchievements.length}{" "}
                הישגים נוספים!
              </p>
            )}
          </>
        ) : (
          <p className="text-sm text-gray-600">
            ענה על יותר שאלות כדי לקבל הישגים!
          </p>
        )}
      </div>
    );
  };

  // המלצות עולמות
  const WorldRecommendations = () => {
    const nextWorld = getNextRecommendedWorld();

    return (
      <div className="space-y-3">
        <p className="text-sm text-gray-600">
          שים לב לסדר המומלץ של מילוי העולמות:
        </p>

        <div className="flex flex-col space-y-1">
          {allWorlds.map((world, index) => {
            const isCompleted = completedWorlds.includes(world);
            const isCurrent = currentWorld === world;
            const isNextRecommended = world === nextWorld;

            return (
              <div
                key={world}
                className={cn(
                  "flex items-center justify-between p-2 rounded-lg border",
                  isCompleted
                    ? "bg-green-50 border-green-200"
                    : isCurrent
                    ? "bg-blue-50 border-blue-200"
                    : isNextRecommended
                    ? "bg-amber-50 border-amber-200"
                    : "bg-white border-gray-200"
                )}
              >
                <div className="flex items-center">
                  <div className="w-6 h-6 flex items-center justify-center rounded-full mr-2 text-gray-600 bg-white border">
                    {index + 1}
                  </div>
                  <span
                    className={cn(
                      "font-medium",
                      isCompleted
                        ? "text-green-700"
                        : isCurrent
                        ? "text-blue-700"
                        : isNextRecommended
                        ? "text-amber-700"
                        : ""
                    )}
                  >
                    {worldLabels[world]}
                  </span>
                </div>

                <div className="flex items-center">
                  {isCompleted ? (
                    <Badge className="bg-green-100 text-green-800 border-0">
                      <CheckCircle2 className="w-3 h-3 mr-1" />
                      הושלם
                    </Badge>
                  ) : isCurrent ? (
                    <Badge className="bg-blue-100 text-blue-800 border-0">
                      <PlayCircle className="w-3 h-3 mr-1" />
                      פעיל
                    </Badge>
                  ) : isNextRecommended ? (
                    <Button
                      size="sm"
                      variant="outline"
                      className="h-7 text-xs border-amber-300 text-amber-700 bg-amber-50 hover:bg-amber-100"
                      onClick={() => onWorldChange?.(world)}
                    >
                      <ArrowUpRight className="w-3 h-3 mr-1" />
                      עבור לכאן
                    </Button>
                  ) : (
                    <Badge variant="outline" className="text-gray-500 text-xs">
                      ממתין
                    </Badge>
                  )}
                </div>
              </div>
            );
          })}
        </div>
      </div>
    );
  };

  // קומפוננטת חלוקת זמן
  const TimeBreakdown = () => {
    return (
      <div className="space-y-3">
        <div className="text-sm text-gray-600 flex items-center">
          <Timer className="h-4 w-4 mr-1 text-blue-500" />
          <span>
            זמן משוער להשלמת השאלון: {formatTimeLeft(estimatedTimeLeft)}
          </span>
        </div>

        <div className="flex flex-col space-y-2">
          {/* חלוקת זמן לפי עולמות */}
          <div className="text-xs text-gray-500">חלוקת זמן לפי עולמות:</div>
          {allWorlds.map((world) => {
            const isCompleted = completedWorlds.includes(world);
            const timePerWorld = Math.round(
              estimatedTimeLeft / (allWorlds.length - completedWorlds.length)
            );

            return (
              <div key={world} className="flex items-center justify-between">
                <span className="text-sm flex items-center">
                  {isCompleted ? (
                    <CheckCircle className="h-3.5 w-3.5 mr-1 text-green-500" />
                  ) : (
                    <Clock className="h-3.5 w-3.5 mr-1 text-blue-400" />
                  )}
                  {worldLabels[world]}
                </span>
                <span
                  className={cn(
                    "text-sm",
                    isCompleted ? "text-green-600" : "text-gray-600"
                  )}
                >
                  {isCompleted ? "הושלם" : `~${timePerWorld} דקות`}
                </span>
              </div>
            );
          })}
        </div>
      </div>
    );
  };

  // רנדור מותנה במגבלות מסך
  const renderMobile = () => {
    return (
      <div className="space-y-4">
        {/* כותרת עם סטטוס התקדמות כולל */}
        <div className="flex justify-between items-center">
          <h3 className="text-lg font-medium flex items-center">
            <BarChart3 className="h-5 w-5 mr-2 text-blue-500" />
            התקדמות
          </h3>
          <Badge
            className={cn(
              statusBgColors[progressStatus],
              "text-xs border-0",
              statusColors[progressStatus]
            )}
          >
            {progressStatus === "complete"
              ? "הושלם"
              : totalCompletion <= 5
              ? "התחלנו"
              : `${totalCompletion}%`}
          </Badge>
        </div>

        {/* פרוגרס ברים */}
        <div className="space-y-2 pt-1">
          {/* סך התקדמות */}
          <div className="space-y-1">
            <div className="flex justify-between text-xs">
              <span className="text-gray-600">סך הכל שאלות</span>
              <span className="font-medium">
                {answeredQuestions} / {totalQuestions}
              </span>
            </div>
            <Progress value={totalCompletion} className="h-2" />
          </div>

          {/* שאלות חובה */}
          <div className="space-y-1">
            <div className="flex justify-between text-xs">
              <span className="text-gray-600">שאלות חובה</span>
              <span
                className={cn(
                  "font-medium",
                  requiredCompletion < 100
                    ? answeredRequiredQuestions === 0
                      ? "text-red-600"
                      : "text-amber-600"
                    : "text-green-600"
                )}
              >
                {answeredRequiredQuestions} / {requiredQuestions}
              </span>
            </div>
            <Progress
              value={requiredCompletion}
              className={cn(
                "h-2",
                requiredCompletion < 100 ? "bg-gray-100" : ""
              )}
            />
          </div>
        </div>

        {/* מידע על זמן שנותר ושמירה אחרונה */}
        <div className="flex flex-col gap-1 text-xs pt-1">
          {estimatedTimeLeft > 0 && (
            <div className="flex items-center">
              <Clock className="h-3.5 w-3.5 mr-1 text-gray-500" />
              <span className="text-gray-600">
                זמן משוער שנותר: {formatTimeLeft(estimatedTimeLeft)}
              </span>
            </div>
          )}

          {lastSaved && (
            <div className="flex items-center">
              <CheckCircle className="h-3.5 w-3.5 mr-1 text-green-600" />
              <span className="text-gray-600">
                נשמר {getRelativeTime(lastSaved)}
              </span>
            </div>
          )}
        </div>
      </div>
    );
  };

  // רנדור מורחב למסך גדול
  const renderDesktop = () => {
    return (
      <div className="space-y-6">
        {/* כותרת עם סטטוס התקדמות כולל */}
        <div className="flex justify-between items-center">
          <div>
            <h3 className="text-xl font-medium">התקדמות השאלון</h3>
            <p className="text-sm text-gray-500 mt-1">
              סקירת ההתקדמות שלך בשאלון ההיכרות
            </p>
          </div>
          <div className="flex items-center gap-2">
            <TooltipProvider>
              <Tooltip>
                <TooltipTrigger asChild>
                  <Badge
                    className={cn(
                      statusBgColors[progressStatus],
                      "text-xs border-0 py-1 px-2",
                      statusColors[progressStatus]
                    )}
                  >
                    <TrendingUp className="h-3.5 w-3.5 mr-1" />
                    {progressStatus === "complete"
                      ? "הושלם"
                      : totalCompletion <= 5
                      ? "התחלת"
                      : `${totalCompletion}% הושלם`}
                  </Badge>
                </TooltipTrigger>
                <TooltipContent>
                  <p>
                    השלמת {answeredQuestions} מתוך {totalQuestions} שאלות
                  </p>
                </TooltipContent>
              </Tooltip>
            </TooltipProvider>

            <TooltipProvider>
              <Tooltip>
                <TooltipTrigger asChild>
                  <Button
                    variant="ghost"
                    size="sm"
                    className="h-8 w-8 p-0 rounded-full"
                  >
                    <HelpCircle className="h-4 w-4 text-gray-500" />
                  </Button>
                </TooltipTrigger>
                <TooltipContent>
                  <div className="space-y-1 max-w-xs">
                    <p className="font-medium">מידע על התקדמות</p>
                    <p className="text-xs">
                      דף זה מציג את התקדמותך בשאלון, כולל שאלות שעליהן ענית,
                      עולמות שהשלמת והזמן המשוער שנותר.
                    </p>
                  </div>
                </TooltipContent>
              </Tooltip>
            </TooltipProvider>
          </div>
        </div>

        <div className="grid grid-cols-12 gap-4">
          {/* תיבת פרוגרס ברים ראשית */}
          <Card className="col-span-12 md:col-span-8">
            <CardHeader className="pb-2">
              <CardTitle className="text-lg flex items-center">
                <BarChart3 className="h-5 w-5 mr-2 text-blue-500" />
                סיכום התקדמות
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              {/* פרוגרס ברים */}
              <div className="space-y-4 pt-1">
                {/* סך התקדמות */}
                <div className="space-y-1">
                  <div className="flex justify-between text-sm">
                    <span className="text-gray-600 flex items-center">
                      <Info className="h-3.5 w-3.5 mr-1 text-blue-500" />
                      סך הכל שאלות
                    </span>
                    <span className="font-medium">
                      {answeredQuestions} / {totalQuestions}
                    </span>
                  </div>
                  <Progress value={totalCompletion} className="h-2" />
                </div>

                {/* שאלות חובה */}
                <div className="space-y-1">
                  <div className="flex justify-between text-sm">
                    <span className="text-gray-600 flex items-center">
                      <Star className="h-3.5 w-3.5 mr-1 text-amber-500" />
                      שאלות חובה
                    </span>
                    <span
                      className={cn(
                        "font-medium",
                        requiredCompletion < 100
                          ? answeredRequiredQuestions === 0
                            ? "text-red-600"
                            : "text-amber-600"
                          : "text-green-600"
                      )}
                    >
                      {answeredRequiredQuestions} / {requiredQuestions}
                    </span>
                  </div>
                  <Progress
                    value={requiredCompletion}
                    className={cn(
                      "h-2",
                      requiredCompletion < 100 ? "bg-gray-100" : ""
                    )}
                  />
                </div>

                {/* עולמות */}
                <div className="space-y-1">
                  <div className="flex justify-between text-sm">
                    <span className="text-gray-600 flex items-center">
                      <Globe className="h-3.5 w-3.5 mr-1 text-blue-500" />
                      עולמות
                    </span>
                    <span className="font-medium">
                      {completedWorlds.length} / {allWorlds.length}
                    </span>
                  </div>
                  <Progress value={worldsCompletion} className="h-2" />
                </div>
              </div>

              {/* מידע על זמן שנותר ושמירה אחרונה */}
              <div className="flex justify-between items-center pt-4 mt-2 border-t text-sm">
                {estimatedTimeLeft > 0 && (
                  <div className="flex items-center">
                    <Clock className="h-4 w-4 mr-1 text-blue-500" />
                    <span className="text-gray-600">
                      זמן משוער שנותר: {formatTimeLeft(estimatedTimeLeft)}
                    </span>
                  </div>
                )}

                {lastSaved && (
                  <div className="flex items-center">
                    <CheckCircle className="h-4 w-4 mr-1 text-green-600" />
                    <span className="text-gray-600">
                      נשמר לאחרונה: {lastSaved.toLocaleTimeString()}
                    </span>
                  </div>
                )}
              </div>
            </CardContent>
          </Card>

          {/* סיכום מצב התקדמות */}
          <Card className="col-span-12 md:col-span-4">
            <CardHeader className="pb-2">
              <CardTitle className="text-lg flex items-center">
                <Award className="h-5 w-5 mr-2 text-amber-500" />
                הישגים
              </CardTitle>
            </CardHeader>
            <CardContent>
              <RewardsInfo />
            </CardContent>
          </Card>

          {/* מידע מורחב על העולמות */}
          <Card className="col-span-12">
            <CardHeader className="pb-2">
              <CardTitle className="text-lg flex items-center">
                <Globe className="h-5 w-5 mr-2 text-blue-500" />
              </CardTitle>
              <CardDescription>
                מעקב אחר התקדמותך בעולמות השונים של השאלון
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="space-y-2">
                <AccordionSection
                  title="המלצות עולמות"
                  icon={<Star className="h-4 w-4" />}
                  id="worlds-recommendations"
                >
                  <WorldRecommendations />
                </AccordionSection>

                <AccordionSection
                  title="חלוקת זמן משוערת"
                  icon={<Clock className="h-4 w-4" />}
                  id="time-breakdown"
                >
                  <TimeBreakdown />
                </AccordionSection>
              </div>
            </CardContent>
          </Card>
        </div>
      </div>
    );
  };

  return (
    <div className={cn("bg-white rounded-lg shadow-sm border p-4", className)}>
      {isTablet ? renderMobile() : renderDesktop()}
    </div>
  );
}
--- End of Content for QuestionnaireProgress.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\user\Desktop\matchpoint\shidduch-system\src\components\questionnaire\components\UserStats.tsx
--------------------------------------------------------------------------------
Content:
import React from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Progress } from "@/components/ui/progress";
import { Badge } from "@/components/ui/badge";
import {
  UserCheck,
  Users,
  Calendar,
  Sparkles,
  Heart,
  CheckCheck,
  BarChart4,
  Zap,
  Award,
  Star,
} from "lucide-react";
import { cn } from "@/lib/utils";
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip";

interface UserStatsProps {
  totalQuestionsAnswered: number;
  totalQuestionsCount: number;
  activeMatches?: number; // מספר התאמות פעילות
  pendingMatches?: number; // מספר התאמות ממתינות
  matchScore?: number; // ציון התאמה כללי (0-100)
  profileCompletion?: number; // אחוז השלמת הפרופיל
  activeWorldsCompleted?: string[]; // עולמות שהושלמו
  personalityTraits?: Array<{
    trait: string;
    score: number;
  }>;
  activityLevel?: "low" | "medium" | "high"; // רמת פעילות המשתמש
  registrationDate?: Date; // תאריך הרשמה
  lastActive?: Date; // פעילות אחרונה
  className?: string;
}

export default function UserStats({
  totalQuestionsAnswered,
  totalQuestionsCount,
  activeMatches = 0,
  pendingMatches = 0,
  matchScore = 0,
  profileCompletion = 0,
  activeWorldsCompleted = [],
  personalityTraits = [],
  activityLevel = "medium",
  registrationDate,
  className,
}: UserStatsProps) {
  // חישוב תאריכים יפים להצגה
  const formatDate = (date?: Date) => {
    if (!date) return "לא זמין";
    return date.toLocaleDateString("he-IL");
  };

  // זמן בשירות
  const getDaysActive = () => {
    if (!registrationDate) return 0;
    const today = new Date();
    const diffTime = Math.abs(today.getTime() - registrationDate.getTime());
    return Math.ceil(diffTime / (1000 * 60 * 60 * 24));
  };

  // רמת פעילות בצבע מתאים
  const getActivityLevelColor = () => {
    switch (activityLevel) {
      case "high":
        return "text-green-600 bg-green-100";
      case "medium":
        return "text-blue-600 bg-blue-100";
      case "low":
        return "text-amber-600 bg-amber-100";
      default:
        return "text-gray-600 bg-gray-100";
    }
  };

  return (
    <div className={cn("space-y-4", className)}>
      {/* כרטיס התאמות */}
      <Card className="shadow-sm hover:shadow-md transition-shadow border-blue-100">
        <CardHeader className="pb-2">
          <CardTitle className="text-lg flex items-center">
            <UserCheck className="h-5 w-5 mr-2 text-blue-500" />
            סטטיסטיקת התאמות
          </CardTitle>
        </CardHeader>

        <CardContent>
          <div className="grid grid-cols-2 gap-4">
            {/* התאמות פעילות */}
            <div className="bg-blue-50 p-3 rounded-lg border border-blue-100">
              <div className="text-xs text-gray-600 mb-1">התאמות פעילות</div>
              <div className="flex items-center">
                <Users className="h-5 w-5 text-blue-600 mr-2" />
                <span className="text-2xl font-semibold">{activeMatches}</span>
              </div>
            </div>

            {/* ממתינות לאישור */}
            <div className="bg-amber-50 p-3 rounded-lg border border-amber-100">
              <div className="text-xs text-gray-600 mb-1">ממתינות לבדיקה</div>
              <div className="flex items-center">
                <Calendar className="h-5 w-5 text-amber-600 mr-2" />
                <span className="text-2xl font-semibold">{pendingMatches}</span>
              </div>
            </div>

            {/* ציון התאמה */}
            <div className="col-span-2 bg-gray-50 p-3 rounded-lg border">
              <div className="flex justify-between mb-1">
                <div className="text-xs text-gray-600">ציון התאמה</div>
                <Badge variant="outline" className="text-xs">
                  {matchScore}%
                </Badge>
              </div>
              <Progress
                value={matchScore}
                className={cn(
                  "h-2",
                  matchScore > 70
                    ? "[--progress-foreground:theme(colors.green.500)]"
                    : "[--progress-foreground:theme(colors.blue.500)]"
                )}
              />
            </div>

            {/* פעיל מתאריך */}
            <div className="col-span-2 flex justify-between text-sm p-2">
              <div className="flex items-center text-gray-600">
                <Sparkles className="h-4 w-4 mr-1 text-blue-400" />
                פעיל {getDaysActive()} ימים
              </div>
              <div className="text-gray-600">
                הצטרפת בתאריך {formatDate(registrationDate)}
              </div>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* כרטיס פרופיל והתקדמות */}
      <Card className="shadow-sm hover:shadow-md transition-shadow border-blue-100">
        <CardHeader className="pb-2">
          <CardTitle className="text-lg flex items-center">
            <BarChart4 className="h-5 w-5 mr-2 text-blue-500" />
            התקדמות והשלמת פרופיל
          </CardTitle>
        </CardHeader>

        <CardContent>
          <div className="space-y-4">
            {/* אחוז השלמת פרופיל */}
            <div className="space-y-1">
              <div className="flex justify-between text-sm">
                <div className="flex items-center">
                  <CheckCheck className="h-4 w-4 mr-1 text-blue-500" />
                  השלמת פרופיל
                </div>
                <Badge
                  variant="outline"
                  className={cn(
                    "text-xs",
                    profileCompletion >= 80
                      ? "border-green-500 text-green-600"
                      : "border-amber-500 text-amber-600"
                  )}
                >
                  {profileCompletion}%
                </Badge>
              </div>
              <Progress
                value={profileCompletion}
                className={cn(
                  "h-2",
                  profileCompletion < 30
                    ? "[--progress-foreground:theme(colors.red.500)]"
                    : profileCompletion < 70
                    ? "[--progress-foreground:theme(colors.amber.500)]"
                    : "[--progress-foreground:theme(colors.green.500)]"
                )}
              />
            </div>

            {/* שאלות שנענו */}
            <div className="space-y-1">
              <div className="flex justify-between text-sm">
                <div className="flex items-center">
                  <Zap className="h-4 w-4 mr-1 text-amber-500" />
                  שאלות שנענו
                </div>
                <span className="text-xs text-gray-600">
                  {totalQuestionsAnswered} מתוך {totalQuestionsCount}
                </span>
              </div>
              <Progress
                value={(totalQuestionsAnswered / totalQuestionsCount) * 100}
                className="h-2"
              />
            </div>

            {/* עולמות פעילים */}
            <div className="pt-2">
              <div className="text-sm mb-2 flex items-center">
                <Heart className="h-4 w-4 mr-1 text-pink-500" />
                <span>עולמות שהושלמו:</span>
              </div>

              <div className="flex flex-wrap gap-2">
                {[
                  { id: "PERSONALITY", name: "אישיות", color: "blue" },
                  { id: "VALUES", name: "ערכים", color: "emerald" },
                  { id: "RELATIONSHIP", name: "זוגיות", color: "purple" },
                  { id: "PARTNER", name: "פרטנר", color: "pink" },
                  { id: "RELIGION", name: "דת", color: "indigo" },
                ].map((world) => {
                  const isCompleted = activeWorldsCompleted.includes(world.id);
                  return (
                    <Badge
                      key={world.id}
                      variant={isCompleted ? "default" : "outline"}
                      className={
                        isCompleted
                          ? `bg-${world.color}-100 hover:bg-${world.color}-200 text-${world.color}-800 border-${world.color}-200`
                          : `text-gray-500 border-gray-200 bg-gray-50`
                      }
                    >
                      {isCompleted && <CheckCheck className="h-3 w-3 mr-1" />}
                      {world.name}
                    </Badge>
                  );
                })}
              </div>
            </div>

            {/* רמת פעילות */}
            {activityLevel && (
              <div className="flex justify-between items-center pt-2 text-sm text-gray-600">
                <div>רמת פעילות:</div>
                <Badge
                  variant="outline"
                  className={cn(
                    "font-normal border-0",
                    getActivityLevelColor()
                  )}
                >
                  {activityLevel === "high" && "גבוהה"}
                  {activityLevel === "medium" && "בינונית"}
                  {activityLevel === "low" && "נמוכה"}
                </Badge>
              </div>
            )}
          </div>
        </CardContent>
      </Card>

      {/* מאפייני אישיות */}
      {personalityTraits && personalityTraits.length > 0 && (
        <Card className="shadow-sm hover:shadow-md transition-shadow border-blue-100">
          <CardHeader className="pb-2">
            <CardTitle className="text-lg flex items-center">
              <Award className="h-5 w-5 mr-2 text-blue-500" />
              מאפייני אישיות בולטים
            </CardTitle>
          </CardHeader>

          <CardContent>
            <div className="space-y-3">
              {personalityTraits.map((trait, index) => (
                <TooltipProvider key={index}>
                  <Tooltip>
                    <TooltipTrigger asChild>
                      <div className="space-y-1">
                        <div className="flex justify-between text-sm">
                          <div className="flex items-center">
                            <Star className="h-3.5 w-3.5 mr-1 text-amber-500" />
                            {trait.trait}
                          </div>
                          <span className="text-xs">{trait.score}%</span>
                        </div>
                        <Progress
                          value={trait.score}
                          className={cn(
                            "h-1.5",
                            "relative overflow-hidden",
                            "before:absolute before:inset-0 before:bg-gradient-to-r before:from-blue-400",
                            trait.score < 40
                              ? "before:to-blue-500"
                              : trait.score < 70
                              ? "before:to-purple-500"
                              : "before:to-pink-500"
                          )}
                        />
                      </div>
                    </TooltipTrigger>
                    <TooltipContent>
                      <p>ציון: {trait.score}/100</p>
                    </TooltipContent>
                  </Tooltip>
                </TooltipProvider>
              ))}
            </div>
          </CardContent>
        </Card>
      )}
    </div>
  );
}
--- End of Content for UserStats.tsx ---

================================================================================
Directory: C:\Users\user\Desktop\matchpoint\shidduch-system\src\components\questionnaire\hooks
================================================================================

--------------------------------------------------------------------------------
File: C:\Users\user\Desktop\matchpoint\shidduch-system\src\components\questionnaire\hooks\useIdleTimeout.ts
--------------------------------------------------------------------------------
Content:
// src/components/questionnaire/hooks/useIdleTimeout.ts
import { useState, useEffect, useCallback, useRef } from 'react';

interface UseIdleTimeoutProps {
  onIdle: () => void;
  idleTimeSeconds?: number;
}

export function useIdleTimeout({ onIdle, idleTimeSeconds = 7200 }: UseIdleTimeoutProps) { // ברירת מחדל: שעתיים
  const [isIdle, setIsIdle] = useState(false);
  const timeoutId = useRef<NodeJS.Timeout>();

  const startTimer = useCallback(() => {
    timeoutId.current = setTimeout(() => {
      setIsIdle(true);
      onIdle();
    }, idleTimeSeconds * 1000);
  }, [idleTimeSeconds, onIdle]);

  const resetTimer = useCallback(() => {
    if (timeoutId.current) {
      clearTimeout(timeoutId.current);
    }
    setIsIdle(false);
    startTimer();
  }, [startTimer]);

  const handleEvent = useCallback(() => {
    resetTimer();
  }, [resetTimer]);

  useEffect(() => {
    // אירועים שיאפסו את הטיימר
    const events = ['mousemove', 'keydown', 'mousedown', 'touchstart', 'scroll'];
    
    // התחלת הטיימר הראשוני
    startTimer();

    // הוספת מאזינים
    events.forEach(event => window.addEventListener(event, handleEvent));

    // ניקוי
    return () => {
      if (timeoutId.current) {
        clearTimeout(timeoutId.current);
      }
      events.forEach(event => window.removeEventListener(event, handleEvent));
    };
  }, [handleEvent, startTimer]);

  return { isIdle, resetTimer };
}
--- End of Content for useIdleTimeout.ts ---

--------------------------------------------------------------------------------
File: C:\Users\user\Desktop\matchpoint\shidduch-system\src\components\questionnaire\hooks\useMediaQuery.ts
--------------------------------------------------------------------------------
Content:
import { useState, useEffect } from "react";

/**
 * הוק המאפשר לנטר שינויים במדיה קוורי
 * 
 * @param query מחרוזת מדיה קוורי כגון "(max-width: 768px)"
 * @returns בוליאני המציין האם המדיה קוורי פעיל
 * 
 * דוגמאות לשימוש:
 * const isMobile = useMediaQuery("(max-width: 768px)");
 * const isTablet = useMediaQuery("(min-width: 769px) and (max-width: 1024px)");
 * const isDesktop = useMediaQuery("(min-width: 1025px)");
 */
export function useMediaQuery(query: string): boolean {
  // מצב התאמת המדיה הנוכחית
  const [matches, setMatches] = useState<boolean>(false);

  // זיהוי האם אנו נמצאים בסביבת דפדפן
  const isBrowser = typeof window !== "undefined";

  useEffect(() => {
    // אם איננו בדפדפן, אין טעם להמשיך
    if (!isBrowser) {
      return undefined;
    }

    // בדיקה ראשונית של התאמת המדיה
    const media = window.matchMedia(query);
    setMatches(media.matches);

    // כשמתרחש שינוי בהתאמת המדיה, עדכן את המצב
    const listener = (event: MediaQueryListEvent) => {
      setMatches(event.matches);
    };

    // רישום האזנה לשינויים
    if (media.addEventListener) {
      media.addEventListener("change", listener);
    } else {
      // תמיכה בדפדפנים ישנים יותר
      media.addListener(listener);
    }

    // ניקוי האזנה בעת עזיבת הקומפוננטה
    return () => {
      if (media.removeEventListener) {
        media.removeEventListener("change", listener);
      } else {
        // תמיכה בדפדפנים ישנים יותר
        media.removeListener(listener);
      }
    };
  }, [query, isBrowser]);

  return matches;
}

// מקצרים נפוצים לשימוש
export function useIsMobile() {
  return useMediaQuery("(max-width: 767px)");
}

export function useIsTablet() {
  return useMediaQuery("(min-width: 768px) and (max-width: 1023px)");
}

export function useIsDesktop() {
  return useMediaQuery("(min-width: 1024px)");
}

export function useIsDarkMode() {
  return useMediaQuery("(prefers-color-scheme: dark)");
}

export function useReducedMotion() {
  return useMediaQuery("(prefers-reduced-motion: reduce)");
}

export default useMediaQuery;
--- End of Content for useMediaQuery.ts ---

================================================================================
Directory: C:\Users\user\Desktop\matchpoint\shidduch-system\src\components\questionnaire\layout
================================================================================

--------------------------------------------------------------------------------
File: C:\Users\user\Desktop\matchpoint\shidduch-system\src\components\questionnaire\layout\QuestionnaireLayout.tsx
--------------------------------------------------------------------------------
Content:
// src/components/questionnaire/layout/QuestionnaireLayout.tsx

import React, { useState, useEffect, useCallback } from 'react';
import Link from 'next/link';
import { Card, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Alert, AlertDescription } from '@/components/ui/alert';
import {
  Heart,
  User,
  Users,
  Save,
  LogOut,
  Settings,
  HelpCircle,
  CheckCircle,
  Loader2,
  Menu,
  X,
  Home,
  ArrowRightLeft,
  LogIn,
  UserPlus,
  Scroll,
  ChevronLeft, // אייקון חדש
  Edit, // אייקון חדש
} from 'lucide-react';
import type { WorldId, QuestionnaireLayoutProps } from '../types/types';
import { cn } from '@/lib/utils';
import { useMediaQuery } from '../hooks/useMediaQuery';
import { motion, AnimatePresence } from 'framer-motion';
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from '@/components/ui/tooltip';
import {
  Sheet,
  SheetContent,
  SheetHeader,
  SheetTitle,
  SheetTrigger,
} from '@/components/ui/sheet';
import FAQ from '../components/FAQ';
import AccessibilityFeatures from '../components/AccessibilityFeatures';

// ============================================================================
// CONFIGURATION OBJECT FOR WORLDS
// ============================================================================
const worldConfig = {
  PERSONALITY: { icon: User, label: 'אישיות', themeColor: 'sky' },
  VALUES: { icon: Heart, label: 'ערכים ואמונות', themeColor: 'rose' },
  RELATIONSHIP: { icon: Users, label: 'זוגיות', themeColor: 'purple' },
  PARTNER: { icon: User, label: 'הפרטנר האידיאלי', themeColor: 'teal' },
  RELIGION: { icon: Scroll, label: 'דת ומסורת', themeColor: 'amber' },
} as const;

// Enhanced Toast component
const Toast = ({ message, type, isVisible, onClose }) => {
  if (!isVisible) return null;

  return (
    <motion.div
      initial={{ opacity: 0, y: 50 }}
      animate={{ opacity: 1, y: 0 }}
      exit={{ opacity: 0, y: 20 }}
      className={cn(
        'fixed bottom-4 left-1/2 transform -translate-x-1/2 z-50 px-4 py-3 rounded-lg shadow-lg',
        'max-w-md w-full flex items-center justify-between',
        type === 'success' && 'bg-green-500 text-white',
        type === 'error' && 'bg-red-500 text-white',
        type === 'info' && 'bg-blue-500 text-white'
      )}
    >
      <span className="font-medium">{message}</span>
      {onClose && (
        <button
          onClick={onClose}
          className="ml-2 text-white hover:bg-white/20 p-1 rounded-full transition-colors"
          aria-label="סגור הודעה"
        >
          <X className="h-4 w-4" />
        </button>
      )}
    </motion.div>
  );
};

export default function QuestionnaireLayout({
  children,
  currentWorld,
  completedWorlds,
  onWorldChange,
  onExit,
  onSaveProgress,
  language = 'he',
  isLoggedIn = false,
}: QuestionnaireLayoutProps) {
  const [isSaving, setIsSaving] = useState(false);
  const [showExitPrompt, setShowExitPrompt] = useState(false);
  const [showMobileNav, setShowMobileNav] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [toast, setToast] = useState<{
    message: string;
    type: 'success' | 'error' | 'info';
    isVisible: boolean;
  }>({
    message: '',
    type: 'info',
    isVisible: false,
  });
  const [lastSaved, setLastSaved] = useState<Date | null>(null);
  const [isAccessibilityPanelOpen, setAccessibilityPanelOpen] = useState(false);

  const isSmallScreen = useMediaQuery('(max-width: 640px)');
  const currentThemeColor = worldConfig[currentWorld]?.themeColor || 'sky';

  const showToast = useCallback(
    (message: string, type: 'success' | 'error' | 'info' = 'info') => {
      setToast({ message, type, isVisible: true });
      setTimeout(() => {
        setToast((prev) => ({ ...prev, isVisible: false }));
      }, 3000);
    },
    []
  );

  const handleSave = useCallback(
    async (isAutoSave = false) => {
      if (!onSaveProgress) {
        if (!isAutoSave) showToast('לא ניתן לשמור את השאלון כרגע', 'error');
        return;
      }
      setIsSaving(true);
      setError(null);
      try {
        await onSaveProgress();
        setLastSaved(new Date());
        if (!isAutoSave) showToast('השאלון נשמר בהצלחה', 'success');
      } catch {
        setError('אירעה שגיאה בשמירת השאלון');
        if (!isAutoSave) showToast('אירעה שגיאה בשמירת השאלון', 'error');
      } finally {
        setIsSaving(false);
      }
    },
    [onSaveProgress, showToast]
  );

  useEffect(() => {
    let saveTimer: NodeJS.Timeout;
    if (onSaveProgress) {
      saveTimer = setInterval(() => handleSave(true), 120000); // Auto-save every 2 minutes
    }
    return () => {
      if (saveTimer) clearInterval(saveTimer);
    };
  }, [onSaveProgress, handleSave]);

  const isRTL = language === 'he';
  const directionClass = isRTL ? 'rtl' : 'ltr';

  // ============================================================================
  // START OF IMPROVED NavButton COMPONENT
  // ============================================================================
  const NavButton = ({ worldId, isMobile }) => {
    const {
      icon: Icon,
      label,
      themeColor,
    } = worldConfig[worldId as keyof typeof worldConfig];

    const isActive = currentWorld === worldId;
    const isCompleted = completedWorlds.includes(worldId as WorldId);
    let status: 'active' | 'completed' | 'pending' = 'pending';
    if (isActive) status = 'active';
    else if (isCompleted) status = 'completed';

    const statusConfig = {
      active: {
        classes: `bg-${themeColor}-600 text-white shadow-lg hover:bg-${themeColor}-700 ring-2 ring-offset-2 ring-${themeColor}-400`,
        tooltip: 'את/ה בעולם זה כעת',
        actionIcon: <ChevronLeft className="h-5 w-5 animate-pulse" />,
      },
      completed: {
        classes:
          'border-green-300 bg-green-50 text-green-800 hover:bg-green-100 opacity-90 hover:opacity-100',
        tooltip: 'השלמת את העולם הזה. לחץ/י כדי לערוך.',
        actionIcon: <Edit className="h-4 w-4 text-green-600" />,
      },
      pending: {
        classes: 'bg-white hover:bg-slate-50 border-slate-200 text-slate-700',
        tooltip: `עבור לעולם ה${label}`,
        actionIcon: null,
      },
    };

    const currentStatusConfig = statusConfig[status];

    return (
      <TooltipProvider delayDuration={300}>
        <Tooltip>
          <TooltipTrigger asChild>
            <Button
              variant={'outline'}
              size={isMobile ? 'sm' : 'default'}
              className={cn(
                'flex items-center justify-between w-full mb-2 transition-all duration-200 rounded-lg',
                currentStatusConfig.classes,
                isMobile ? 'py-2 text-sm' : 'p-3'
              )}
              onClick={() => {
                onWorldChange(worldId as WorldId);
                if (isMobile) setShowMobileNav(false);
              }}
            >
              {/* Right side: Icon and Text */}
              <div className="flex items-center gap-3">
                <Icon
                  className={cn(
                    'h-5 w-5',
                    isActive ? 'text-white' : `text-${themeColor}-500`
                  )}
                />
                <span className="truncate text-right font-medium">{label}</span>
              </div>

              {/* Left side: Action Icon */}
              <div className="flex-shrink-0">
                {currentStatusConfig.actionIcon}
              </div>
            </Button>
          </TooltipTrigger>
          <TooltipContent side={isRTL ? 'left' : 'right'}>
            <p>{currentStatusConfig.tooltip}</p>
          </TooltipContent>
        </Tooltip>
      </TooltipProvider>
    );
  };
  // ============================================================================
  // END OF IMPROVED NavButton COMPONENT
  // ============================================================================

  const renderFAQButton = (isMobile: boolean) => (
    <Sheet>
      <SheetTrigger asChild>
        <Button
          variant="ghost"
          size={isMobile ? 'sm' : 'icon'}
          className={cn(
            'text-slate-500 hover:text-slate-800',
            isMobile
              ? 'w-full justify-start gap-3 p-3'
              : 'w-8 h-8 p-0 rounded-full'
          )}
          aria-label="שאלות נפוצות"
        >
          <HelpCircle className="h-5 w-5" />
          {isMobile && <span>שאלות נפוצות</span>}
        </Button>
      </SheetTrigger>
      <SheetContent
        side={isRTL ? 'left' : 'right'}
        className="w-[90vw] max-w-lg overflow-y-auto"
      >
        <SheetHeader>
          <SheetTitle>שאלות נפוצות</SheetTitle>
        </SheetHeader>
        <div className="mt-4">
          <FAQ />
        </div>
      </SheetContent>
    </Sheet>
  );

  const UnauthenticatedPrompt = () => (
    <div className="p-3 my-3 bg-cyan-50/70 border border-cyan-200 rounded-lg text-center space-y-2">
      <p className="text-sm text-cyan-800 font-medium">
        התקדמותך נשמרת זמנית בדפדפן.
      </p>
      <p className="text-xs text-cyan-700">
        התחבר/י או הרשמ/י כדי לשמור את התשובות לחשבונך.
      </p>
      <div className="flex gap-2 justify-center pt-1">
        <Link href="/auth/signin">
          <Button variant="outline" size="sm" className="bg-white/80">
            <LogIn className="w-3 h-3 ml-1" />
            התחברות
          </Button>
        </Link>
        <Link href="/auth/register">
          <Button variant="default" size="sm">
            <UserPlus className="w-3 h-3 ml-1" />
            הרשמה
          </Button>
        </Link>
      </div>
    </div>
  );

  const MobileNav = () => (
    <AnimatePresence>
      {showMobileNav && (
        <>
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            transition={{ duration: 0.2 }}
            className="fixed inset-0 bg-black/50 backdrop-blur-sm z-50"
            onClick={() => setShowMobileNav(false)}
          />
          <motion.div
            initial={{ x: isRTL ? '100%' : '-100%' }}
            animate={{ x: 0 }}
            exit={{ x: isRTL ? '100%' : '-100%' }}
            transition={{ type: 'spring', damping: 25, stiffness: 300 }}
            className={`fixed top-0 ${
              isRTL ? 'right-0' : 'left-0'
            } h-full w-3/4 max-w-xs bg-white shadow-lg p-4 z-50 ${directionClass} flex flex-col overflow-y-auto`}
          >
            <div className="flex items-center justify-between mb-6">
              <h2 className="text-lg font-medium flex items-center">
                <ArrowRightLeft className="w-5 h-5 mr-2 text-blue-500" />
                ניווט בשאלון
              </h2>
              <Button
                variant="ghost"
                size="sm"
                onClick={() => setShowMobileNav(false)}
                className="w-8 h-8 p-0 rounded-full"
              >
                <X className="h-4 w-4" />
              </Button>
            </div>
            <div className="flex-grow">
              {Object.keys(worldConfig).map((worldId) => (
                <NavButton key={worldId} worldId={worldId} isMobile={true} />
              ))}
            </div>
            {!isLoggedIn && <UnauthenticatedPrompt />}
            <div className="pt-4 mt-4 border-t space-y-2">
              <Button
                variant="outline"
                size="sm"
                className="w-full justify-start gap-2"
                onClick={onExit}
              >
                <Home className="h-4 w-4" />
                חזרה למפת העולמות
              </Button>
              <Button
                variant="outline"
                size="sm"
                className="w-full justify-start text-red-500 hover:text-red-700"
                onClick={() => setShowExitPrompt(true)}
              >
                <LogOut className="h-4 w-4" />
                יציאה
              </Button>
            </div>
          </motion.div>
        </>
      )}
    </AnimatePresence>
  );

  return (
    <div
      className={`flex flex-col min-h-screen lg:flex-row bg-slate-50 ${directionClass}`}
    >
      <header
        className={cn(
          'lg:hidden sticky top-0 z-40 bg-white shadow-sm p-3 flex items-center justify-between',
          `border-b-2 border-${currentThemeColor}-200`
        )}
      >
        <Button
          variant="ghost"
          size="sm"
          onClick={() => setShowMobileNav(true)}
          className="inline-flex items-center"
        >
          <Menu className="h-5 w-5" />
          {!isSmallScreen && <span className="ml-2">תפריט</span>}
        </Button>
        <div className="flex flex-col items-center">
          <h1
            className={cn(
              'text-sm font-semibold',
              `text-${currentThemeColor}-800`
            )}
          >
            {worldConfig[currentWorld]?.label}
          </h1>
          <div className="text-xs text-slate-500">
            {completedWorlds.length} / {Object.keys(worldConfig).length} הושלמו
          </div>
        </div>
        <div className="flex items-center gap-1">
          <Button
            variant="ghost"
            size="icon"
            className={cn(
              'h-8 w-8 rounded-full',
              isSaving
                ? `bg-${currentThemeColor}-100`
                : 'bg-green-50 text-green-600'
            )}
            onClick={() => handleSave()}
            disabled={isSaving}
          >
            {isSaving ? (
              <Loader2 className="h-4 w-4 animate-spin" />
            ) : (
              <Save className="h-4 w-4" />
            )}
          </Button>
        </div>
      </header>

      <MobileNav />

      <aside
        className={cn(
          'w-64 bg-white border-r hidden lg:flex lg:flex-col overflow-y-auto',
          isRTL ? 'border-l' : 'border-r'
        )}
      >
        <div className="p-4 border-b">
          <h3 className="font-semibold text-lg text-slate-800">
            עולמות השאלון
          </h3>
          <p className="text-xs text-slate-500">נווט בין חלקי השאלון השונים</p>
        </div>
        <div className="p-4 flex-grow">
          {Object.keys(worldConfig).map((worldId) => (
            <NavButton key={worldId} worldId={worldId} isMobile={false} />
          ))}
        </div>
        {!isLoggedIn && (
          <div className="px-4">
            <UnauthenticatedPrompt />
          </div>
        )}
        <div className="p-4 border-t mt-auto space-y-2">
          {lastSaved && (
            <div className="flex items-center text-xs text-slate-500 mb-2">
              <CheckCircle className="h-3.5 w-3.5 mr-1.5 text-green-500" />
              <span>נשמר: {lastSaved.toLocaleTimeString()}</span>
            </div>
          )}
          <Button
            variant="outline"
            className="w-full"
            onClick={() => handleSave()}
            disabled={isSaving}
          >
            {isSaving ? (
              <>
                <Loader2 className="w-4 h-4 mr-2 animate-spin" />
                שומר...
              </>
            ) : (
              <>
                <Save className="w-4 h-4 mr-2" />
                שמור התקדמות
              </>
            )}
          </Button>
          <Button variant="outline" className="w-full" onClick={onExit}>
            <Home className="w-4 h-4 mr-2" />
            מפת העולמות
          </Button>
          <div className="flex gap-2 pt-2">
            {renderFAQButton(false)}
            <TooltipProvider>
              <Tooltip>
                <TooltipTrigger asChild>
                  <Button
                    variant="ghost"
                    size="icon"
                    className="w-8 h-8 p-0 rounded-full text-slate-500"
                    onClick={() => setAccessibilityPanelOpen(true)}
                  >
                    <Settings className="w-4 h-4" />
                  </Button>
                </TooltipTrigger>
                <TooltipContent>
                  <p>נגישות ותצוגה</p>
                </TooltipContent>
              </Tooltip>
            </TooltipProvider>
          </div>
        </div>
      </aside>

      <main className="flex-1 p-3 md:p-6 lg:pb-16 overflow-y-auto relative scroll-smooth">
        {children}
        <AccessibilityFeatures
          isPanelOpen={isAccessibilityPanelOpen}
          onPanelOpenChange={setAccessibilityPanelOpen}
          className="fixed bottom-4 right-4 lg:bottom-6 lg:left-6 lg:right-auto z-50"
        />
      </main>

      <AnimatePresence>
        {showExitPrompt && (
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            className="fixed inset-0 bg-black/50 backdrop-blur-sm flex items-center justify-center z-50 p-4"
          >
            <motion.div
              initial={{ scale: 0.9, opacity: 0 }}
              animate={{ scale: 1, opacity: 1 }}
              exit={{ scale: 0.9, opacity: 0 }}
              className="w-full max-w-md"
            >
              <Card className="bg-white">
                <CardContent className="pt-6">
                  <h3 className="text-lg font-medium mb-4">
                    האם אתה בטוח שברצונך לצאת?
                  </h3>
                  <p className="text-slate-600 mb-6">
                    כל התשובות שלא נשמרו יאבדו. האם ברצונך לשמור לפני היציאה?
                  </p>
                  <div className="flex flex-col sm:flex-row justify-end gap-2">
                    <Button
                      variant="outline"
                      size="sm"
                      onClick={() => setShowExitPrompt(false)}
                    >
                      ביטול
                    </Button>
                    <Button
                      variant="outline"
                      size="sm"
                      onClick={async () => {
                        await handleSave();
                        if (onExit) onExit();
                        setShowExitPrompt(false);
                      }}
                      disabled={isSaving}
                    >
                      {isSaving ? (
                        <Loader2 className="h-4 w-4 animate-spin mr-1" />
                      ) : null}
                      שמור וצא
                    </Button>
                    <Button
                      variant="destructive"
                      size="sm"
                      onClick={() => {
                        setShowExitPrompt(false);
                        if (onExit) onExit();
                      }}
                    >
                      צא ללא שמירה
                    </Button>
                  </div>
                </CardContent>
              </Card>
            </motion.div>
          </motion.div>
        )}
      </AnimatePresence>

      <AnimatePresence>
        {toast.isVisible && (
          <Toast
            message={toast.message}
            type={toast.type}
            isVisible={toast.isVisible}
            onClose={() => setToast((prev) => ({ ...prev, isVisible: false }))}
          />
        )}
      </AnimatePresence>
    </div>
  );
}
--- End of Content for QuestionnaireLayout.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\user\Desktop\matchpoint\shidduch-system\src\components\questionnaire\layout\WorldsMap.tsx
--------------------------------------------------------------------------------
Content:
// src/components/questionnaire/layout/WorldsMap.tsx

import React from "react";
import { motion } from 'framer-motion';
import { Card, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Progress } from '@/components/ui/progress';
import { Badge } from '@/components/ui/badge';
import {
  Scroll, Heart, Users, User, CheckCircle2, Lock, ArrowRight, Star, UserCheck, Sparkles, Edit3, Award, Brain,
} from 'lucide-react';
import { cn } from '@/lib/utils';
import { useSession } from 'next-auth/react';

// ============================================================================
// 1. CONFIGURATION OBJECT (ENHANCED WITH MARKETING & MOTIVATIONAL CONTENT)
// ============================================================================

const worldsConfig = {
  PERSONALITY: {
    icon: User,
    label: "אישיות",
    description: "מי אני באמת? גלה את הכוחות הייחודיים שלך, את סגנון התקשורת שלך ומה מניע אותך בחיים.",
    order: 1,
    themeColor: "sky",
    why: "הבנה עמוקה של מי שאת/ה היא הבסיס לכל קשר בריא. כאן תציג/י את עצמך בצורה אותנטית, כדי שנמצא מישהו שיתאהב בך באמת.",
    discover: [
      "הכוחות המניעים אותך בחיים",
      "סגנון התקשורת שלך",
      "איך את/ה מתמודד/ת עם אתגרים",
    ],
  },
  VALUES: {
    icon: Heart,
    label: "ערכים ואמונות",
    description: "מה באמת מניע אותך? זקק את עקרונות הליבה שלך ובנה יסודות איתנים לבית המשותף.",
    order: 2,
    themeColor: "rose",
    why: "ערכים משותפים הם עמוד השדרה של קשר יציב ומאושר. כאן נבין מהם סדרי העדיפויות שלך ואיזו סביבה מתאימה לך.",
    discover: [
      "סדרי העדיפויות שלך בחיים",
      "גישתך לכסף, נתינה וצמיחה",
      "איזו סביבה חברתית מתאימה לך",
    ],
  },
  RELATIONSHIP: {
    icon: Users,
    label: "זוגיות",
    description: "איך נראית השותפות האידיאלית שלך? עצב את החזון שלך לקשר המבוסס על הבנה, כבוד וחברות.",
    order: 3,
    themeColor: "purple",
    why: "זוגיות טובה היא שותפות. כאן נבין את הציפיות שלך, את 'שפות האהבה' שלך ואיך את/ה רואה את חיי היומיום המשותפים.",
    discover: [
      "תמצית הזוגיות הבריאה בעיניך",
      "סגנון פתרון הקונפליקטים שלך",
      "האיזון הנכון בין 'ביחד' ל'לחוד'",
    ],
  },
  PARTNER: {
    icon: UserCheck,
    label: "הפרטנר האידיאלי",
    description: "במי תרצה/י לבחור? הגדר את התכונות והערכים החשובים לך ביותר בבן/בת הזוג.",
    order: 4,
    themeColor: "teal",
    why: "הגדרת בן/בת הזוג היא יותר מרשימת תכונות; זו הבנה של מה באמת נחוץ לך כדי לפרוח. כאן נמקד את החיפוש.",
    discover: [
      "אילו תכונות אופי חיוניות לך",
      "העדפותיך לגבי סגנון חיים ורקע",
      "מהם ה'קווים האדומים' שלך",
    ],
  },
  RELIGION: {
    icon: Scroll,
    label: "דת ומסורת",
    description: "מה מקום האמונה וההלכה בחייך? נבין את החיבור האישי שלך ואת החזון לבית יהודי.",
    order: 5,
    themeColor: "amber",
    why: "העולם הרוחני הוא נדבך יסודי בבניית בית נאמן בישראל. זהו בסיס הכרחי להרמוניה זוגית וחינוך ילדים.",
    discover: [
      "ההגדרה האישית שלך על הרצף הדתי",
      "כיצד ההלכה באה לידי ביטוי בחייך",
      "החזון שלך לחינוך דתי במשפחה",
    ],
  },
} as const;

type WorldId = keyof typeof worldsConfig;

const WORLD_ORDER: WorldId[] = [
  "PERSONALITY",
  "VALUES",
  "RELATIONSHIP",
  "PARTNER",
  "RELIGION",
];

type WorldStatus = 'completed' | 'recommended' | 'active' | 'available' | 'locked';

// ============================================================================
// 2. TYPE DEFINITIONS & PROPS
// ============================================================================
interface WorldsMapProps {
  currentWorld: WorldId;
  completedWorlds: WorldId[];
  onWorldChange: (worldId: WorldId) => void;
  className?: string;
}

interface WorldCardProps {
  worldId: WorldId;
  status: WorldStatus;
  onSelect: () => void;
}

interface ProgressHeaderProps {
  userName?: string | null;
  completionPercent: number;
  completedCount: number;
  totalCount: number;
  nextRecommendedWorld?: WorldId;
  onGoToRecommended: () => void;
}

// ============================================================================
// 3. SUB-COMPONENTS
// ============================================================================

const ProgressHeader: React.FC<ProgressHeaderProps> = ({ userName, completionPercent, completedCount, totalCount, nextRecommendedWorld, onGoToRecommended }) => (
  <motion.div 
    className="bg-white dark:bg-slate-800/50 p-6 rounded-2xl shadow-lg border border-slate-200 dark:border-slate-700 space-y-4"
    initial={{ opacity: 0, y: -20 }}
    animate={{ opacity: 1, y: 0 }}
    transition={{ duration: 0.5, ease: "easeOut" }}
  >
    <div>
      <h1 className="text-2xl sm:text-3xl font-bold text-slate-800 dark:text-slate-100">
        {userName ? `שלום, ${userName}! ברוך הבא למסע שלך` : 'הנתיב שלך לזוגיות משמעותית'}
      </h1>
      <p className="text-md text-slate-500 dark:text-slate-400 mt-1">
        השלמת <span className="font-semibold text-indigo-600 dark:text-indigo-400">{completedCount}</span> מתוך <span className="font-semibold">{totalCount}</span> עולמות.
      </p>
    </div>
    <div className="flex items-center gap-4">
      <Progress value={completionPercent} className="h-2.5 rounded-full" indicatorClassName="bg-gradient-to-r from-sky-400 to-indigo-500" />
      <span className="font-bold text-indigo-600 dark:text-indigo-400 text-lg">{completionPercent}%</span>
    </div>
    {nextRecommendedWorld && (
      <Button
        size="lg"
        onClick={onGoToRecommended}
        className="w-full sm:w-auto bg-indigo-600 hover:bg-indigo-700 dark:bg-indigo-500 dark:hover:bg-indigo-600 text-white font-medium shadow-md hover:shadow-lg transition-all duration-200 ease-in-out transform hover:-translate-y-0.5 animate-pulse-slow"
      >
        <Sparkles className="h-5 w-5 mr-2 fill-current" />
        המשך לעולם המומלץ: {worldsConfig[nextRecommendedWorld].label}
      </Button>
    )}
  </motion.div>
);

const WorldCard: React.FC<WorldCardProps> = ({ worldId, status, onSelect }) => {
  const config = worldsConfig[worldId];
  
  const statusInfo = {
    completed: { Icon: CheckCircle2, text: "הושלם", badge: "bg-green-100 text-green-800 border-green-300", action: "ערוך תשובות", ActionIcon: Edit3 },
    recommended: { Icon: Star, text: "הצעד הבא", badge: "bg-indigo-100 text-indigo-800 border-indigo-300", action: "התחל עולם זה", ActionIcon: Sparkles },
    active: { Icon: Sparkles, text: "פעיל כעת", badge: `bg-${config.themeColor}-100 text-${config.themeColor}-800 border-${config.themeColor}-300`, action: "המשך כאן", ActionIcon: ArrowRight },
    available: { Icon: ArrowRight, text: "זמין", badge: "bg-slate-100 text-slate-800 border-slate-300", action: "התחל עולם זה", ActionIcon: ArrowRight },
    locked: { Icon: Lock, text: "נעול", badge: "bg-slate-200 text-slate-600 border-slate-300", action: "נעול", ActionIcon: Lock },
  }[status];

  const themeClasses = {
    ring: `ring-${config.themeColor}-500`,
    iconBg: `bg-${config.themeColor}-100 dark:bg-${config.themeColor}-800/50`,
    iconColor: `text-${config.themeColor}-600 dark:text-${config.themeColor}-400`,
    actionButton: `bg-${config.themeColor}-600 hover:bg-${config.themeColor}-700 text-white`,
  };

  const isLocked = status === 'locked';

  return (
    <Card 
      className={cn(
        "flex flex-col h-full transition-all duration-300 ease-in-out overflow-hidden shadow-lg hover:shadow-xl dark:bg-slate-800 border-2",
        status === 'recommended' && `border-${config.themeColor}-300 dark:border-${config.themeColor}-600 scale-105 shadow-2xl`,
        isLocked ? "opacity-60 bg-slate-50 dark:bg-slate-800/60 cursor-not-allowed border-slate-200 dark:border-slate-700" : "border-transparent hover:-translate-y-1"
      )}
    >
      <div className="p-6 flex-grow space-y-4">
        <div className="flex items-start justify-between gap-4">
          <div className={cn("p-3 rounded-xl flex-shrink-0", themeClasses.iconBg)}>
            <config.icon className={cn("w-8 h-8", themeClasses.iconColor)} />
          </div>
          <Badge variant="outline" className={cn("text-xs font-medium", statusInfo.badge)}>
            <statusInfo.Icon className="w-3.5 h-3.5 ml-1.5" />
            {statusInfo.text}
          </Badge>
        </div>
        <div>
          <h3 className="text-xl font-bold text-slate-800 dark:text-slate-100">{config.label}</h3>
          <p className="text-sm text-slate-600 dark:text-slate-300 leading-relaxed mt-1">{config.description}</p>
        </div>
        
        {status === 'recommended' && (
           <div className="pt-2">
              <h4 className="text-sm font-semibold text-slate-700 dark:text-slate-200 mb-2 flex items-center">
                 <Brain className="w-4 h-4 mr-2 text-indigo-500"/>
                 מה תגלה/י על עצמך?
              </h4>
              <ul className="space-y-1.5">
                {config.discover.map((item, index) => (
                  <li key={index} className="flex items-start text-xs text-slate-600 dark:text-slate-400">
                    <CheckCircle2 className="w-3 h-3 mr-2 mt-0.5 text-green-500 flex-shrink-0" />
                    <span>{item}</span>
                  </li>
                ))}
              </ul>
           </div>
        )}
      </div>
      <div className="p-4 bg-slate-50 dark:bg-slate-800/50 mt-auto">
        <Button
          className={cn("w-full font-medium", themeClasses.actionButton)}
          onClick={onSelect}
          disabled={isLocked}
        >
          <statusInfo.ActionIcon className="w-4 h-4 ml-2" />
          {statusInfo.action}
        </Button>
      </div>
    </Card>
  );
};

// ============================================================================
// 4. MAIN COMPONENT
// ============================================================================
export default function WorldsMap({
  currentWorld,
  completedWorlds,
  onWorldChange,
  className = "",
}: WorldsMapProps) {
  const { data: session } = useSession();

  const completionPercent = Math.round((completedWorlds.length / WORLD_ORDER.length) * 100);
  const nextRecommendedWorld = WORLD_ORDER.find((world) => !completedWorlds.includes(world));

  const containerVariants = {
    hidden: { opacity: 0 },
    visible: { opacity: 1, transition: { staggerChildren: 0.1, delayChildren: 0.2 } },
  };

  const itemVariants = {
    hidden: { opacity: 0, y: 20 },
    visible: { opacity: 1, y: 0, transition: { duration: 0.5 } },
  };

  const getWorldStatus = (worldId: WorldId): WorldStatus => {
    if (completedWorlds.includes(worldId)) return 'completed';
    if (worldId === nextRecommendedWorld) return 'recommended';
    if (worldId === currentWorld) return 'active';
    // Add locking logic if needed, for now all are available
    return 'available';
  };
  
  const recommendedCard = nextRecommendedWorld ? (
    <motion.div variants={itemVariants} className="md:col-span-2 lg:col-span-1 lg:row-span-2">
      <WorldCard 
        worldId={nextRecommendedWorld} 
        status="recommended" 
        onSelect={() => onWorldChange(nextRecommendedWorld)}
      />
    </motion.div>
  ) : null;

  const otherCards = WORLD_ORDER
    .filter(worldId => worldId !== nextRecommendedWorld)
    .map(worldId => (
      <motion.div variants={itemVariants} key={worldId}>
        <WorldCard 
          worldId={worldId}
          status={getWorldStatus(worldId)} 
          onSelect={() => onWorldChange(worldId)}
        />
      </motion.div>
  ));

  return (
    <div className={cn("p-4 sm:p-6 bg-slate-50 dark:bg-slate-900 min-h-screen", className)}>
      <div className="max-w-7xl mx-auto space-y-8">
        <ProgressHeader
          userName={session?.user?.firstName}
          completionPercent={completionPercent}
          completedCount={completedWorlds.length}
          totalCount={WORLD_ORDER.length}
          nextRecommendedWorld={nextRecommendedWorld}
          onGoToRecommended={() => nextRecommendedWorld && onWorldChange(nextRecommendedWorld)}
        />
        
        <motion.div 
          className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6"
          variants={containerVariants}
          initial="hidden"
          animate="visible"
        >
          {recommendedCard}
          {otherCards}
        </motion.div>

        {completionPercent === 100 && (
          <motion.div variants={itemVariants} initial="hidden" animate="visible">
            <Card className="bg-gradient-to-r from-green-500 to-emerald-600 text-white text-center p-8 rounded-2xl shadow-2xl">
              <Award className="w-16 h-16 mx-auto mb-4"/>
              <h2 className="text-3xl font-bold">כל הכבוד, {session?.user?.firstName}!</h2>
              <p className="mt-2 text-lg opacity-90">סיימת את כל עולמות השאלון. עשית צעד ענק במסע שלך!</p>
              <p className="mt-1 text-sm opacity-80">הפרופיל המלא שלך מוכן כעת עבור השדכנים שלנו.</p>
            </Card>
          </motion.div>
        )}
      </div>

      <style jsx global>{`
        @keyframes pulse-slow {
          50% { opacity: 0.9; transform: scale(1.02); }
        }
        .animate-pulse-slow {
          animation: pulse-slow 2.5s cubic-bezier(0.4, 0, 0.6, 1) infinite;
        }
      `}</style>
    </div>
  );
}
--- End of Content for WorldsMap.tsx ---

================================================================================
Directory: C:\Users\user\Desktop\matchpoint\shidduch-system\src\components\questionnaire\onboarding
================================================================================

--------------------------------------------------------------------------------
File: C:\Users\user\Desktop\matchpoint\shidduch-system\src\components\questionnaire\onboarding\TrackSelection.tsx
--------------------------------------------------------------------------------
Content:
import React, { useState } from "react";
import { motion } from "framer-motion";
import { Card, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Progress } from "@/components/ui/progress";
import { Alert, AlertDescription } from "@/components/ui/alert";
import {
  Scroll,
  Book,
  Heart,
  Sun,
  ArrowLeft,
  ArrowRight,
  Info,
  Star,
} from "lucide-react";
import type { UserTrack } from "../types/types";

interface TrackSelectionProps {
  onSelect: (track: UserTrack) => void;
  onBack: () => void;
  selectedTrack?: UserTrack;
}

interface TrackOption {
  id: UserTrack;
  title: string;
  description: string;
  icon: React.ReactNode;
  color: string;
  characteristics: string[];
  details: {
    traditions: string;
    lifestyle: string;
    community: string;
  };
}

const trackOptions: TrackOption[] = [
  {
    id: "חילוני",
    title: "חילוני",
    description: "אורח חיים חופשי עם זיקה למסורת",
    icon: <Sun className="w-6 h-6" />,
    color: "bg-blue-500",
    characteristics: [
      "גמישות בשמירת מסורת",
      "פתיחות לאורח חיים מודרני",
      "חיבור לערכים יהודיים תרבותיים",
    ],
    details: {
      traditions: "שמירה על מסורות משפחתיות וחגים",
      lifestyle: "אורח חיים מודרני ופתוח",
      community: "חיבור לקהילה היהודית הרחבה",
    },
  },
  {
    id: "מסורתי",
    title: "מסורתי",
    description: "שילוב בין מסורת למודרנה",
    icon: <Heart className="w-6 h-6" />,
    color: "bg-purple-500",
    characteristics: [
      "שמירת מסורת מתוך בחירה",
      "איזון בין דת לחיים מודרניים",
      "כבוד למנהגים ולמורשת",
    ],
    details: {
      traditions: "שמירת שבת וחגים באופן גמיש",
      lifestyle: "שילוב בין מסורת למודרניות",
      community: "קשר עם קהילות מגוונות",
    },
  },
  {
    id: "דתי",
    title: "דתי",
    description: "אורח חיים על פי ההלכה",
    icon: <Book className="w-6 h-6" />,
    color: "bg-green-500",
    characteristics: [
      "מחויבות להלכה ולמצוות",
      "השקפת עולם תורנית",
      "שילוב תורה עם דרך ארץ",
    ],
    details: {
      traditions: "הקפדה על הלכה ומצוות",
      lifestyle: "חיים דתיים עם השתלבות בחברה",
      community: "חיבור לקהילה דתית",
    },
  },
  {
    id: "חרדי",
    title: "חרדי",
    description: "הקפדה מלאה על קלה כבחמורה",
    icon: <Scroll className="w-6 h-6" />,
    color: "bg-red-500",
    characteristics: [
      "מחויבות מלאה לאורח חיים תורני",
      "הקפדה על קוצו של יו״ד",
      "לימוד תורה כדרך חיים",
    ],
    details: {
      traditions: "הקפדה מלאה על כל פרטי ההלכה",
      lifestyle: "אורח חיים תורני מובהק",
      community: "השתייכות לקהילה חרדית",
    },
  },
];

export default function TrackSelection({
  onSelect,
  onBack,
  selectedTrack,
}: TrackSelectionProps) {
  const [, setHoveredTrack] = useState<UserTrack | null>(null);
  const [currentStep, setCurrentStep] = useState<1 | 2>(1);

  const containerVariants = {
    hidden: { opacity: 0, y: 20 },
    visible: {
      opacity: 1,
      y: 0,
      transition: {
        duration: 0.5,
        staggerChildren: 0.1,
      },
    },
  };

  const cardVariants = {
    hidden: { opacity: 0, x: -20 },
    visible: {
      opacity: 1,
      x: 0,
      transition: { duration: 0.3 },
    },
  };

  const confirmSelection = () => {
    if (selectedTrack) {
      onSelect(selectedTrack);
    }
  };

  return (
    <motion.div
      className="min-h-screen p-6 bg-gradient-to-b from-gray-50 to-white"
      initial="hidden"
      animate="visible"
      variants={containerVariants}
    >
      <div className="max-w-4xl mx-auto space-y-8">
        {/* Header */}
        <div className="text-center space-y-4">
          <motion.div variants={cardVariants}>
            <h1 className="text-3xl font-bold">בחירת מסלול מותאם אישית</h1>
            <p className="text-gray-600">
              בחר/י את המסלול שמשקף בצורה הטובה ביותר את אורח חייך ואמונתך
            </p>
          </motion.div>

          <Alert className="bg-blue-50 border-blue-200">
            <Info className="w-4 h-4 text-blue-500" />
            <AlertDescription className="text-blue-700">
              בחירת המסלול תעזור לנו להתאים את השאלות והשידוכים המוצעים באופן
              מיטבי עבורך
            </AlertDescription>
          </Alert>
        </div>

        {/* Progress Steps */}
        <div className="flex justify-between items-center px-4">
          <div className="flex-1">
            <Progress value={currentStep === 1 ? 50 : 100} className="h-2" />
          </div>
          <div className="px-4 text-sm text-gray-500">
            שלב {currentStep} מתוך 2
          </div>
        </div>

        {currentStep === 1 ? (
          /* Track Selection Grid */
          <motion.div
            variants={cardVariants}
            className="grid grid-cols-1 md:grid-cols-2 gap-6"
          >
            {trackOptions.map((track) => (
              <Card
                key={track.id}
                className={`cursor-pointer transition-all duration-200 hover:shadow-lg ${
                  selectedTrack === track.id
                    ? "ring-2 ring-blue-500"
                    : "hover:border-blue-200"
                }`}
                onClick={() => {
                  setCurrentStep(2);
                  onSelect(track.id);
                }}
                onMouseEnter={() => setHoveredTrack(track.id)}
                onMouseLeave={() => setHoveredTrack(null)}
              >
                <CardContent className="p-6">
                  <div className="flex items-start space-x-4 rtl:space-x-reverse">
                    <div
                      className={`p-3 rounded-lg ${track.color} bg-opacity-10`}
                    >
                      {track.icon}
                    </div>
                    <div className="flex-1">
                      <h3 className="text-lg font-medium mb-2">
                        {track.title}
                      </h3>
                      <p className="text-gray-600 mb-4">{track.description}</p>
                      <ul className="space-y-2">
                        {track.characteristics.map((char, index) => (
                          <li
                            key={index}
                            className="flex items-center text-sm text-gray-600"
                          >
                            <Star className="w-4 h-4 ml-2 text-gray-400" />
                            {char}
                          </li>
                        ))}
                      </ul>
                    </div>
                  </div>
                </CardContent>
              </Card>
            ))}
          </motion.div>
        ) : (
          /* Confirmation Step */
          <motion.div variants={cardVariants} className="space-y-6">
            {selectedTrack && (
              <Card className="p-6">
                <h3 className="text-xl font-medium mb-4">
                  אישור בחירת מסלול{" "}
                  {trackOptions.find((t) => t.id === selectedTrack)?.title}
                </h3>
                <div className="space-y-4">
                  {Object.entries(
                    trackOptions.find((t) => t.id === selectedTrack)?.details ||
                      {}
                  ).map(([key, value]) => (
                    <div key={key} className="space-y-2">
                      <h4 className="font-medium">
                        {key === "traditions"
                          ? "מסורת"
                          : key === "lifestyle"
                          ? "אורח חיים"
                          : "קהילה"}
                      </h4>
                      <p className="text-gray-600">{value}</p>
                    </div>
                  ))}
                </div>
              </Card>
            )}
          </motion.div>
        )}

        {/* Navigation Buttons */}
        <motion.div
          variants={cardVariants}
          className="flex justify-between pt-6"
        >
          <Button
            variant="outline"
            onClick={() => {
              if (currentStep === 2) {
                setCurrentStep(1);
              } else {
                onBack();
              }
            }}
          >
            <ArrowRight className="w-4 h-4 ml-2" />
            {currentStep === 1 ? "חזרה" : "בחירה מחדש"}
          </Button>

          {currentStep === 2 && (
            <Button onClick={confirmSelection} disabled={!selectedTrack}>
              אישור והמשך
              <ArrowLeft className="w-4 h-4 mr-2" />
            </Button>
          )}
        </motion.div>
      </div>
    </motion.div>
  );
}
--- End of Content for TrackSelection.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\user\Desktop\matchpoint\shidduch-system\src\components\questionnaire\onboarding\Welcome.tsx
--------------------------------------------------------------------------------
Content:
// src/components/questionnaire/onboarding/Welcome.tsx
import React from 'react';
import { motion } from 'framer-motion';
import { Button } from '@/components/ui/button';
import { Card, CardContent } from '@/components/ui/card';
import {
  Heart,
  ShieldCheck,
  Sparkles,
  ArrowLeft, // Changed for RTL context
  LogIn,
  Edit,
} from 'lucide-react';
import { useSession } from 'next-auth/react';

// --- Props Interface ---
interface WelcomeProps {
  onStart: () => void;
  onLearnMore: () => void; // Keeping this for potential future use
  isLoggedIn: boolean;
  hasSavedProgress: boolean; // New prop to handle dynamic CTA
}

// --- Centralized Content Configuration (Programmer's Improvement) ---
// Makes it easy to update marketing copy without touching JSX.
const welcomeContent = {
  mainTitle: 'השער שלך לזוגיות עם משמעות',
  subtitle:
    'השקעה של דקות ספורות בשאלון ההיכרות שלנו היא הצעד הראשון והחשוב ביותר שלך במסע למציאת קשר אמיתי, עמוק ומדויק.',
  loggedInCTA: 'בוא/י נצא למסע',
  resumeCTA: 'להמשיך מהיכן שעצרנו',
  guestCTA: 'התחל/י את המסע (כאורח/ת)',
  loginPrompt: {
    title: 'חשוב לדעת:',
    text: 'כדי שההשקעה שלך לא תרד לטמיון, אנו ממליצים להתחבר. כך נוכל לשמור את התקדמותך, ותוכל/י לחזור ולהשלים את השאלון בכל עת.',
    loginButtonText: 'התחברות וחיסכון בהתקדמות',
  },
  features: [
    {
      icon: <Sparkles className="h-7 w-7 text-purple-500" />,
      title: 'מסע מותאם אישית',
      description:
        'השאלון מחולק לעולמות תוכן, ומאפשר לך להתקדם בקצב שלך, מתוך הבנה וכבוד לזמן שלך.',
      color: 'bg-purple-50',
    },
    {
      icon: <ShieldCheck className="h-7 w-7 text-green-500" />,
      title: 'הפרטיות שלך - ערך עליון',
      description:
        'התשובות שלך דיסקרטיות לחלוטין ומשמשות את צוות השדכנים המנוסה שלנו בלבד, במטרה למצוא לך התאמה.',
      color: 'bg-green-50',
    },
    {
      icon: <Heart className="h-7 w-7 text-rose-500" />,
      title: 'מעבר לאלגוריתם',
      description:
        'מאחורי כל התאמה עומד שדכן אמיתי שמכיר את הסיפור שלך. אנו משלבים טכנולוגיה עם חוכמה אנושית.',
      color: 'bg-rose-50',
    },
  ],
  testimonials: [
    {
      // FIX: Removed quotes from the data string
      quote:
        'בפעם הראשונה הרגשתי שבאמת מנסים להבין מי אני, ולא רק לסמן V ברשימה.',
      author: 'יונתן, 34',
    },
    {
      // FIX: Removed quotes from the data string
      quote:
        'התהליך היה רציני, מכבד ונתן לי תובנות חדשות על עצמי ועל מה שאני מחפשת.',
      author: 'מיכל, 29',
    },
  ],
};

// --- Sub-components for cleaner structure (Programmer's Improvement) ---
const FeatureHighlight: React.FC<(typeof welcomeContent.features)[0]> = ({
  icon,
  title,
  description,
  color,
}) => (
  <div className="text-center p-6 bg-white rounded-xl shadow-sm hover:shadow-lg transition-shadow duration-300 border border-slate-100">
    <div
      className={`mx-auto w-14 h-14 flex items-center justify-center rounded-full mb-4 ${color}`}
    >
      {icon}
    </div>
    <h3 className="text-lg font-semibold text-slate-800 mb-2">{title}</h3>
    <p className="text-sm text-slate-600 leading-relaxed">{description}</p>
  </div>
);

const TestimonialCard: React.FC<(typeof welcomeContent.testimonials)[0]> = ({
  quote,
  author,
}) => (
  <Card className="bg-white/70 backdrop-blur-sm border-slate-200 shadow-sm">
    <CardContent className="pt-6">
      {/* FIX: Used HTML entities for quotes instead of literal characters */}
      <p className="text-slate-700 italic">“{quote}”</p>
      <p className="text-right font-semibold text-slate-500 mt-3">- {author}</p>
    </CardContent>
  </Card>
);

// --- Main Welcome Component ---
export default function Welcome({
  onStart,
  isLoggedIn,
  hasSavedProgress,
}: WelcomeProps) {
  const { data: session } = useSession();
  const userName = session?.user?.firstName;

  // --- Animation Variants (Designer's Improvement) ---
  const containerVariants = {
    hidden: { opacity: 0 },
    visible: {
      opacity: 1,
      transition: {
        staggerChildren: 0.15,
        delayChildren: 0.2,
      },
    },
  };

  const itemVariants = {
    hidden: { opacity: 0, y: 20 },
    visible: {
      opacity: 1,
      y: 0,
      transition: { type: 'spring', stiffness: 100 },
    },
  };

  const renderCTAButton = () => {
    let text = welcomeContent.loggedInCTA;
    let Icon = Heart;

    if (!isLoggedIn) {
      text = welcomeContent.guestCTA;
    } else if (hasSavedProgress) {
      text = welcomeContent.resumeCTA;
      Icon = Edit;
    }

    return (
      <Button
        onClick={onStart}
        size="lg"
        className="w-full sm:w-auto text-lg font-semibold px-8 py-7 bg-indigo-600 hover:bg-indigo-700 text-white rounded-full shadow-lg hover:shadow-xl transition-all duration-300 group transform hover:-translate-y-1"
      >
        <div className="flex items-center justify-center">
          <Icon className="w-6 h-6 ms-3 fill-white" />
          <span>{userName && isLoggedIn ? `${text}, ${userName}` : text}</span>
        </div>
      </Button>
    );
  };

  return (
    <motion.div
      className="min-h-screen w-full bg-slate-50 p-4 sm:p-6"
      variants={containerVariants}
      initial="hidden"
      animate="visible"
    >
      <div className="max-w-6xl mx-auto space-y-16 py-12">
        {/* === Hero Section (Shadchan, Marketer & Designer's work combined) === */}
        <motion.section variants={itemVariants} className="text-center">
          <h1 className="text-4xl sm:text-5xl font-extrabold text-slate-900 tracking-tight">
            {welcomeContent.mainTitle}
          </h1>
          <p className="max-w-3xl mx-auto mt-4 text-lg text-slate-600 leading-relaxed">
            {welcomeContent.subtitle}
          </p>
          <div className="mt-10">{renderCTAButton()}</div>
        </motion.section>

        {/* === Login Prompt for Guests (Shadchan's warm framing) === */}
        {!isLoggedIn && (
          <motion.div variants={itemVariants} className="max-w-2xl mx-auto">
            <Card className="bg-sky-50 border-sky-200 shadow-md">
              <CardContent className="pt-6 text-center space-y-3">
                <h3 className="font-semibold text-sky-800">
                  {welcomeContent.loginPrompt.title}
                </h3>
                <p className="text-sky-700 text-sm">
                  {welcomeContent.loginPrompt.text}
                </p>
                <Button
                  variant="outline"
                  className="bg-white border-sky-300 text-sky-700 hover:bg-white/80"
                  onClick={() => (window.location.href = '/auth/signin')}
                >
                  <LogIn className="w-4 h-4 ms-2" />
                  {welcomeContent.loginPrompt.loginButtonText}
                </Button>
              </CardContent>
            </Card>
          </motion.div>
        )}

        {/* === Features Section (Benefit-oriented marketing) === */}
        <motion.section variants={itemVariants}>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
            {welcomeContent.features.map((feature, index) => (
              <FeatureHighlight key={index} {...feature} />
            ))}
          </div>
        </motion.section>

        {/* === Testimonials Section (Social Proof) === */}
        <motion.section variants={itemVariants}>
          <div className="text-center mb-8">
            <h2 className="text-3xl font-bold text-slate-800">
              מה חושבים עלינו?
            </h2>
          </div>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6 max-w-4xl mx-auto">
            {welcomeContent.testimonials.map((testimonial, index) => (
              <TestimonialCard key={index} {...testimonial} />
            ))}
          </div>
        </motion.section>

        {/* === Final CTA & Footer === */}
        <motion.div
          variants={itemVariants}
          className="text-center pt-8 border-t border-slate-200"
        >
          <p className="text-slate-600 mb-6">
            מוכנ/ה להתחיל את הצעד הראשון שלך?
          </p>
          {renderCTAButton()}
        </motion.div>
      </div>
    </motion.div>
  );
}
--- End of Content for Welcome.tsx ---

================================================================================
Directory: C:\Users\user\Desktop\matchpoint\shidduch-system\src\components\questionnaire\pages
================================================================================

--------------------------------------------------------------------------------
File: C:\Users\user\Desktop\matchpoint\shidduch-system\src\components\questionnaire\pages\QuestionnaireLandingPage.tsx
--------------------------------------------------------------------------------
Content:
// src/components/questionnaire/pages/QuestionnaireLandingPage.tsx
import React from 'react';
import { Card, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import Link from 'next/link';
import {
  Heart,
  User,
  Users,
  Scroll,
  Clock,
  Star,
  Shield,
  CheckCircle,
  Lock,
  ArrowLeft, // Changed from ArrowRight for RTL context
  Loader2,
  Sparkles,
  UserCheck, // More specific icon for Partner world
} from 'lucide-react';
import { cn } from '@/lib/utils';
import { useSession } from 'next-auth/react';

// --- Props Interface ---
interface QuestionnaireLandingPageProps {
  onStartQuestionnaire: () => void;
  hasSavedProgress: boolean;
  isLoading?: boolean;
}

// --- Data Configuration (Easy to update content) ---
interface WorldInfo {
  id: string;
  title: string;
  icon: React.ReactElement;
  colorGradient: string;
  questions: number;
  description: string;
}

const worlds: WorldInfo[] = [
  {
    id: 'PERSONALITY',
    title: 'עולם האישיות',
    icon: <User className="h-7 w-7" />,
    colorGradient: 'from-sky-400 to-blue-500',
    questions: 20,
    description:
      'מי אני באמת? גלה את הכוחות הייחודיים שלך, את סגנון התקשורת ומה מניע אותך.',
  },
  {
    id: 'VALUES',
    title: 'עולם הערכים',
    icon: <Heart className="h-7 w-7" />,
    colorGradient: 'from-rose-400 to-red-500',
    questions: 25,
    description:
      'מה באמת מניע אותך? זקק את עקרונות הליבה שלך ובנה יסודות איתנים לבית המשותף.',
  },
  {
    id: 'RELATIONSHIP',
    title: 'עולם הזוגיות',
    icon: <Users className="h-7 w-7" />,
    colorGradient: 'from-purple-400 to-indigo-500',
    questions: 18,
    description:
      'איך נראית השותפות האידיאלית שלך? עצב את החזון שלך לקשר המבוסס על הבנה וכבוד.',
  },
  {
    id: 'PARTNER',
    title: 'עולם הפרטנר',
    icon: <UserCheck className="h-7 w-7" />,
    colorGradient: 'from-teal-400 to-emerald-500',
    questions: 22,
    description:
      'במי תרצה/י לבחור? הגדר את התכונות והערכים החשובים לך ביותר בבן/בת הזוג.',
  },
  {
    id: 'RELIGION',
    title: 'דת ומסורת',
    icon: <Scroll className="h-7 w-7" />,
    colorGradient: 'from-amber-400 to-orange-500',
    questions: 15,
    description:
      'מה מקום האמונה וההלכה בחייך? נבין את החיבור האישי שלך ואת החזון לבית יהודי.',
  },
];

const features = [
  {
    icon: <Clock className="h-8 w-8 text-sky-600" />,
    title: 'תהליך מותאם אישית',
    description:
      'השאלון מחולק לעולמות נפרדים, כך שניתן למלא אותו בקצב שלך, לעצור ולחזור בכל שלב.',
    bgColor: 'bg-sky-100/60',
  },
  {
    icon: <Shield className="h-8 w-8 text-rose-600" />,
    title: 'פרטיות מוחלטת',
    description:
      'התשובות שלך דיסקרטיות לחלוטין ומשמשות את צוות השדכנים המקצועי שלנו בלבד.',
    bgColor: 'bg-rose-100/60',
  },
  {
    icon: <Star className="h-8 w-8 text-amber-600" />,
    title: 'התאמה מדעית',
    description:
      'מבוסס על מחקרים פסיכולוגיים וניסיון של שדכנים ותיקים ליצירת התאמות עומק.',
    bgColor: 'bg-amber-100/60',
  },
];

export default function QuestionnaireLandingPage({
  onStartQuestionnaire,
  hasSavedProgress,
  isLoading = false,
}: QuestionnaireLandingPageProps) {
  const { status, data: session } = useSession();

  // --- Main Render ---
  return (
    <div className="relative min-h-screen overflow-hidden text-right dir-rtl bg-slate-50">
      {/* --- Section 1: Hero - The Invitation to the Journey --- */}
      <section className="relative py-20 px-4 sm:py-24 text-center overflow-hidden">
        {/* Decorative background elements */}
        <div className="absolute inset-0 bg-gradient-to-b from-sky-50 via-white to-rose-50 -z-10" />
        <div className="absolute top-0 -left-20 w-60 h-60 bg-sky-200/20 rounded-full filter blur-3xl animate-pulse-slow"></div>
        <div className="absolute bottom-0 -right-20 w-72 h-72 bg-rose-200/20 rounded-full filter blur-3xl animate-pulse-slow animation-delay-2000"></div>

        <div className="max-w-4xl mx-auto">
          <h1 className="text-4xl sm:text-5xl lg:text-6xl font-extrabold mb-4 tracking-tight bg-gradient-to-r from-sky-600 to-rose-600 text-transparent bg-clip-text">
            הנתיב שלך לזוגיות משמעותית
          </h1>
          <p className="text-lg md:text-xl text-slate-700 max-w-3xl mx-auto mt-4 leading-relaxed">
            השקעה של כמה דקות בשאלון ההיכרות שלנו היא הצעד הראשון והחשוב ביותר
            שלך בדרך למציאת קשר אמיתי, עמוק ומדויק. בוא/י נצא למסע גילוי משותף.
          </p>

          <div className="mt-12 space-y-4 flex flex-col items-center">
            {/* CTA Button: Adapts to user status */}
            <Button
              size="lg"
              className="w-full max-w-sm text-lg font-semibold px-8 py-7 bg-gradient-to-r from-sky-500 to-rose-500 hover:from-sky-600 hover:to-rose-600 text-white rounded-full shadow-lg hover:shadow-xl transition-all duration-300 group relative overflow-hidden transform hover:-translate-y-1"
              onClick={onStartQuestionnaire}
              disabled={isLoading}
            >
              <span className="absolute inset-0 w-full h-full bg-gradient-to-r from-white/0 via-white/20 to-white/0 transform -translate-x-full group-hover:animate-shimmer"></span>
              <div className="relative z-10 flex items-center justify-center">
                {isLoading ? (
                  <Loader2 className="h-6 w-6 animate-spin" />
                ) : hasSavedProgress ? (
                  <>
                    <CheckCircle className="h-6 w-6 ms-2" />
                    <span>המשך/י מהנקודה האחרונה</span>
                  </>
                ) : (
                  <>
                    <Heart className="h-6 w-6 ms-2 fill-white" />
                    <span>
                      {session
                        ? `התחל/י את המסע, ${session.user.firstName}`
                        : 'בוא/י נתחיל'}
                    </span>
                  </>
                )}
              </div>
            </Button>

            {status !== 'authenticated' && (
              <Link href="/auth/signin" className="w-full max-w-sm">
                <Button
                  variant="outline"
                  size="lg"
                  className="w-full text-md font-medium px-8 py-6 border-2 border-slate-300 text-slate-700 hover:bg-slate-100/50 hover:border-slate-400 rounded-full transition-all duration-300 bg-white/70 backdrop-blur-sm"
                >
                  <Lock className="h-5 w-5 ms-2" />
                  כניסה למשתמשים רשומים
                </Button>
              </Link>
            )}
          </div>
        </div>
      </section>

      {/* --- Section 2: Worlds - The "What to Expect" --- */}
      <section className="py-16 px-4 bg-white">
        <div className="max-w-6xl mx-auto">
          <div className="text-center mb-12">
            <h2 className="text-3xl font-bold mb-3 text-slate-800">
              חמישה עולמות, התאמה אחת מושלמת
            </h2>
            <p className="text-lg text-slate-600 max-w-3xl mx-auto">
              השאלון מחולק לחמישה עולמות תוכן. כל עולם מתמקד בהיבט אחר של
              אישיותך וציפיותיך, ויחד הם יוצרים תמונה מלאה ועשירה.
            </p>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-6">
            {worlds.map((world, index) => (
              <Card
                key={world.id}
                className="overflow-hidden rounded-xl shadow-md hover:shadow-xl transition-all duration-300 hover:-translate-y-1.5 bg-white/80 backdrop-blur-sm border border-slate-100 flex flex-col"
                style={{ animationDelay: `${index * 100}ms` }}
              >
                <CardContent className="p-6 text-center flex flex-col items-center flex-grow">
                  <div
                    className={cn(
                      'p-4 rounded-full bg-gradient-to-br text-white shadow-lg mb-4',
                      world.colorGradient
                    )}
                  >
                    {world.icon}
                  </div>
                  <h3 className="text-xl font-bold text-slate-800">
                    {world.title}
                  </h3>
                  <p className="text-sm text-slate-500 mt-1 mb-3">
                    {world.questions} שאלות
                  </p>
                  <p className="text-base text-slate-600 leading-relaxed flex-grow">
                    {world.description}
                  </p>
                </CardContent>
              </Card>
            ))}
          </div>
        </div>
      </section>

      {/* --- Section 3: Features - The "Why Trust Us" --- */}
      <section className="py-16 px-4 bg-slate-50">
        <div className="max-w-5xl mx-auto">
          <div className="text-center mb-12">
            <h2 className="text-3xl font-bold mb-3 text-slate-800">
              הבסיס להצלחה שלך
            </h2>
            <p className="text-lg text-slate-600 max-w-2xl mx-auto">
              השקענו מחשבה וניסיון רב כדי להפוך את התהליך ליעיל, מכבד ומדויק ככל
              האפשר.
            </p>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-3 gap-8 text-center">
            {features.map((feature, index) => (
              <div key={index} className="flex flex-col items-center p-6">
                <div className={cn('p-4 rounded-full mb-5', feature.bgColor)}>
                  {feature.icon}
                </div>
                <h3 className="font-bold text-xl mb-2 text-slate-800">
                  {feature.title}
                </h3>
                <p className="text-base text-slate-600 leading-relaxed">
                  {feature.description}
                </p>
              </div>
            ))}
          </div>
        </div>
      </section>

      {/* --- Section 4: Final CTA --- */}
      <section className="py-20 px-4 text-center bg-white">
        <div className="max-w-3xl mx-auto">
          <Sparkles className="h-12 w-12 text-rose-500 mx-auto mb-4" />
          <h2 className="text-3xl font-bold mb-4 text-slate-800">
            מוכנ/ה להתחיל את המסע?
          </h2>
          <p className="text-lg text-slate-600 mb-8 max-w-xl mx-auto leading-relaxed">
            הזיווג שלך מחכה. הצעד הראשון בדרך אליו הוא להכיר את עצמך לעומק.
            אנחנו כאן כדי ללוות אותך.
          </p>

          <Button
            size="lg"
            onClick={onStartQuestionnaire}
            disabled={isLoading}
            className="w-full max-w-xs text-lg font-semibold px-8 py-7 bg-gradient-to-r from-sky-500 to-rose-500 hover:from-sky-600 hover:to-rose-600 text-white rounded-full shadow-lg hover:shadow-xl transition-all duration-300 group relative overflow-hidden transform hover:-translate-y-1"
          >
            <span className="absolute inset-0 w-full h-full bg-gradient-to-r from-white/0 via-white/20 to-white/0 transform -translate-x-full group-hover:animate-shimmer"></span>
            <div className="relative z-10 flex items-center justify-center">
              {isLoading ? (
                <Loader2 className="h-6 w-6 animate-spin" />
              ) : (
                <>
                  <ArrowLeft className="h-6 w-6 ms-2" />
                  <span>התחל/י עכשיו</span>
                </>
              )}
            </div>
          </Button>
        </div>
      </section>

      <footer className="text-center py-6 text-slate-500 text-sm bg-slate-50">
        © {new Date().getFullYear()} MatchPoint. כל הזכויות שמורות.
      </footer>

      {/* Add animations to your global CSS (e.g., globals.css) */}
      <style jsx global>{`
        @keyframes pulse-slow {
          50% {
            opacity: 0.7;
          }
        }
        .animate-pulse-slow {
          animation: pulse-slow 5s cubic-bezier(0.4, 0, 0.6, 1) infinite;
        }
        .animation-delay-2000 {
          animation-delay: 2s;
        }
        @keyframes shimmer {
          100% {
            transform: translateX(100%);
          }
        }
        .animate-shimmer {
          animation: shimmer 2s infinite;
        }
      `}</style>
    </div>
  );
}
--- End of Content for QuestionnaireLandingPage.tsx ---

================================================================================
Directory: C:\Users\user\Desktop\matchpoint\shidduch-system\src\components\questionnaire\pages\questionnaire
================================================================================

--------------------------------------------------------------------------------
File: C:\Users\user\Desktop\matchpoint\shidduch-system\src\components\questionnaire\pages\questionnaire\map.tsx
--------------------------------------------------------------------------------
Content:
// pages/questionnaire/map.tsx
import { useState, useEffect } from "react";
import { useRouter } from "next/navigation";
import { useSession } from "next-auth/react";
import WorldsMap from "@/components/questionnaire/layout/WorldsMap";
import { Card } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Loader2, ArrowLeft, AlertCircle } from "lucide-react";
import { Alert, AlertDescription } from "@/components/ui/alert";
import type { WorldId } from "@/components/questionnaire/types/types";

export default function QuestionnairesMapPage() {
  const router = useRouter();
  const { data: session, status } = useSession();
  const [currentWorld, setCurrentWorld] = useState<WorldId>("VALUES");
  const [completedWorlds, setCompletedWorlds] = useState<WorldId[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  // Load user's questionnaire progress
  useEffect(() => {
    const loadQuestionnaire = async () => {
      if (status === "loading") return;

      try {
        setIsLoading(true);
        setError(null);

        if (status === "authenticated" && session?.user?.id) {
          // Fetch the user's progress
          const response = await fetch("/api/questionnaire");
          const data = await response.json();

          if (data.success && data.data) {
            // Update states with saved progress
            setCompletedWorlds(data.data.worldsCompleted || []);

            // If a current world is saved, use it
            if (data.data.currentWorld) {
              setCurrentWorld(data.data.currentWorld);
            }
            // Otherwise select the first incomplete world
            else if (data.data.worldsCompleted?.length > 0) {
              const allWorlds: WorldId[] = [
                "PERSONALITY",
                "VALUES",
                "RELATIONSHIP",
                "PARTNER",
                "RELIGION",
              ];
              const nextWorld = allWorlds.find(
                (world) => !data.data.worldsCompleted.includes(world)
              );
              if (nextWorld) {
                setCurrentWorld(nextWorld);
              }
            }
          }
        }
      } catch (error) {
        console.error("Error loading questionnaire data:", error);
        setError("אירעה שגיאה בטעינת נתוני השאלון. אנא נסה שוב מאוחר יותר.");
      } finally {
        setIsLoading(false);
      }
    };

    loadQuestionnaire();
  }, [status, session]);

  // Handle world selection
  const handleWorldChange = (worldId: WorldId) => {
    // Navigate to the questionnaire with the selected world
    router.push(`/questionnaire?world=${worldId}`);
  };

  if (isLoading) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <Card className="w-full max-w-md p-8 text-center">
          <Loader2 className="h-12 w-12 animate-spin mx-auto mb-4 text-blue-600" />
          <p className="text-lg font-medium">טוען...</p>
          <p className="text-sm text-gray-500 mt-2">מאחזר את נתוני השאלון</p>
        </Card>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50 p-4">
      <div className="container mx-auto max-w-5xl">
        <div className="mb-6 flex items-center justify-between">
          <div className="flex items-center">
            <Button
              variant="ghost"
              size="sm"
              onClick={() => router.push("/questionnaire")}
              className="mr-4"
            >
              <ArrowLeft className="mr-2 h-4 w-4" />
              חזרה לשאלון
            </Button>

            <h1 className="text-2xl font-bold">מפת העולמות</h1>
          </div>

          {session?.user && (
            <div className="text-sm text-gray-500">
              מחובר כ: {session.user.name || session.user.email}
            </div>
          )}
        </div>

        {error && (
          <Alert variant="destructive" className="mb-4">
            <AlertCircle className="h-4 w-4 mr-2" />
            <AlertDescription>{error}</AlertDescription>
          </Alert>
        )}

        <div className="bg-white p-6 rounded-lg shadow-sm mb-6">
          <h2 className="text-xl font-medium mb-4">בחר עולם לעבור אליו</h2>
          <p className="text-gray-600 mb-6">
            במפת העולמות תוכל/י לנווט בחופשיות בין העולמות השונים בשאלון. כל
            עולם מתמקד בהיבט שונה ומאפשר לך להשלים אותו בהדרגה.
          </p>

          <WorldsMap
            currentWorld={currentWorld}
            completedWorlds={completedWorlds}
            onWorldChange={handleWorldChange}
          />
        </div>

        <div className="text-center text-sm text-gray-500 mt-8">
          <p>
            השתמש במפת העולמות כדי לעבור בין חלקי השאלון ולשנות תשובות בכל עת.
          </p>
          <p>התקדמותך נשמרת אוטומטית.</p>
        </div>
      </div>
    </div>
  );
}
--- End of Content for map.tsx ---

================================================================================
Directory: C:\Users\user\Desktop\matchpoint\shidduch-system\src\components\questionnaire\questions
================================================================================

(This directory contains subdirectories but no files directly. See subdirectories below.)

================================================================================
Directory: C:\Users\user\Desktop\matchpoint\shidduch-system\src\components\questionnaire\questions\partner
================================================================================

--------------------------------------------------------------------------------
File: C:\Users\user\Desktop\matchpoint\shidduch-system\src\components\questionnaire\questions\partner\partnerQuestions.tsx
--------------------------------------------------------------------------------
Content:
// src/components/questionnaire/questions/partner/partnerQuestions.tsx
import { Question } from '../../types/types';
import {
  Heart, // אהבה, רגש, חום, משיכה
  Brain, // אינטליגנציה, חשיבה, השכלה
  Smile, // חוש הומור, אופטימיות, נעימות
  ShieldCheck, // יושרה, אמינות, ביטחון
  Star, // שאפתנות, איכות, הצלחה
  Users, // חברתיות, משפחתיות
  Home, // ביתיות, סגנון חיים, משפחה
  Target, // מיקוד, אחריות, בגרות
  Scale, // איזון, פשרה, גישה כלכלית
  BookOpen, // השכלה, לימוד, רוחניות (בהקשר של פרטנר)
  Scroll, // רמה דתית, מסורת (בהקשר של פרטנר)
  Activity, // אנרגטיות, סגנון חיים פעיל
  Coffee, // בילויים, פנאי
  Eye, // מראה חיצוני
  Car,
  Flag,
  Globe,
  HandHeart, // אמפתיה, תמיכה, נתינה (מהפרטנר)
  Lightbulb, // פתיחות מחשבתית, יצירתיות (בפרטנר)
  Briefcase, // קריירה, עיסוק (של הפרטנר)
  PiggyBank, // גישה לכסף (של הפרטנר)
  Info,
  Sparkles,
  Palette,
  MessageCircle,
  TrendingUp,
  Building2, // עיר גדולה
  Mountain, // יישוב קהילתי
  TreePine, // מושב/קיבוץ
  MapPin, // מיקום גיאוגרפי
  DollarSign, // היבט כלכלי
} from 'lucide-react';

export const partnerQuestions: Question[] = [
  // --- חלק 1: רושם ראשוני, מראה ותכונות בסיסיות ---
  {
    worldId: 'PARTNER',
    id: 'partner_initial_impression_priorities',
    category: 'partner',
    subcategory: 'first_impression_basics',
    question:
      'מהם הדברים החשובים לך ביותר ברושם ראשוני ובמפגש ראשון עם בן/בת זוג פוטנציאלי/ת? (בחר/י עד 3)',
    type: 'multiSelect',
    depth: 'BASIC',
    isRequired: true,
    options: [
      {
        icon: <Eye />,
        text: 'מראה חיצוני כללי וטיפוח',
        value: 'מראה חיצוני כללי וטיפוח',
      },
      {
        icon: <Smile />,
        text: 'חיוך, נעימות וחמימות אישית',
        value: 'חיוך, נעימות וחמימות אישית',
      },
      {
        icon: <MessageCircle />,
        text: 'יכולת שיחה, זרימה וכימיה ראשונית',
        value: 'יכולת שיחה, זרימה וכימיה ראשונית',
      },
      {
        icon: <Brain />,
        text: 'ניצוץ של חוכמה, שנינות או סקרנות',
        value: 'ניצוץ של חוכמה, שנינות או סקרנות',
      },
      {
        icon: <Activity />,
        text: 'אנרגיה כללית, חיוניות ונוכחות',
        value: 'אנרגיה כללית, חיוניות ונוכחות',
      },
      {
        icon: <ShieldCheck />,
        text: 'תחושת ביטחון ואמינות שהוא/היא משדר/ת',
        value: 'תחושת ביטחון ואמינות שהוא/היא משדר/ת',
      },
    ],
    minSelections: 1,
    maxSelections: 3,
    metadata: { estimatedTime: 1 },
  },
  {
    worldId: 'PARTNER',
    id: 'partner_appearance_importance_scale',
    category: 'partner',
    subcategory: 'first_impression_basics',
    question:
      'עד כמה מראה חיצוני הוא פקטור משמעותי עבורך בבחירת בן/בת זוג? (1=לא משמעותי, 10=משמעותי מאוד)',
    type: 'scale',
    depth: 'BASIC',
    isRequired: true,
    min: 1,
    max: 10,
    labels: { min: 'לא משמעותי', max: 'משמעותי מאוד' },
    metadata: {
      estimatedTime: 1,
      helpText: 'כנות כאן תסייע לנו למקד את החיפוש.',
    },
  },
  {
    worldId: 'PARTNER',
    id: 'partner_core_character_traits_essential',
    category: 'partner',
    subcategory: 'first_impression_basics',
    question:
      "חלק/י 100 'נקודות התאמה' בין תכונות האופי החיוניות לך ביותר אצל בן/בת זוג.",
    type: 'budgetAllocation',
    depth: 'BASIC',
    isRequired: true,
    totalPoints: 100,
    categories: [
      { label: 'יושרה, אמינות וכנות', icon: <ShieldCheck /> },
      { label: 'חום, אמפתיה וטוב לב', icon: <Heart /> },
      { label: 'אופטימיות ושמחת חיים', icon: <Smile /> },
      { label: 'אינטליגנציה וסקרנות', icon: <Brain /> },
      { label: 'אחריות, בגרות ויציבות', icon: <Target /> },
      { label: 'שאפתנות ומוטיבציה', icon: <Star /> },
      { label: 'יכולת פשרה וגמישות', icon: <Scale /> },
      { label: 'תקשורת טובה והקשבה', icon: <HandHeart /> },
    ],
    metadata: {
      estimatedTime: 3,
      helpText:
        'מהן התכונות שהכי היית רוצה לראות בפרטנר שלך? תן/י משקל גבוה יותר לתכונות הקריטיות ביותר עבורך.',
    },
  },

  // --- חלק 2: העדפות סגנון חיים, תחומי עניין וגישה חברתית ---
  {
    worldId: 'PARTNER',
    id: 'partner_lifestyle_pace_preference',
    category: 'partner',
    subcategory: 'lifestyle_social',
    question: 'איזה קצב וסגנון חיים כללי היית מעדיפ/ה שיהיה לבן/בת הזוג?',
    type: 'iconChoice',
    depth: 'BASIC',
    isRequired: true,
    options: [
      {
        icon: <Activity />,
        text: 'דינמי, פעיל ומלא עניין',
        value: 'דינמי, פעיל ומלא עניין',
      },
      {
        icon: <Home />,
        text: 'רגוע, ביתי ושליו, עם שגרה יציבה',
        value: 'רגוע, ביתי ושליו, עם שגרה יציבה',
      },
      {
        icon: <Scale />,
        text: 'מאוזן - יודע/ת לשלב בין פעילות למנוחה, בין שגרה לספונטניות',
        value: 'מאוזן - יודע/ת לשלב בין פעילות למנוחה, בין שגרה לספונטניות',
      },
      {
        icon: <Sparkles />,
        text: 'הרפתקני, אוהב/ת שינויים, טיולים וחוויות חדשות',
        value: 'הרפתקני, אוהב/ת שינויים, טיולים וחוויות חדשות',
      },
    ],
    metadata: { estimatedTime: 1 },
  },
  {
    worldId: 'PARTNER',
    id: 'partner_shared_leisure_importance',
    category: 'partner',
    subcategory: 'lifestyle_social',
    question:
      'עד כמה חשוב לך שלבן/בת הזוג יהיו תחומי עניין או תחביבים דומים לשלך, או שיהיה רצון לפתח תחומי עניין משותפים?',
    type: 'scale',
    depth: 'ADVANCED',
    isRequired: false,
    min: 1,
    max: 10,
    labels: { min: 'פחות קריטי', max: 'חשוב מאוד' },
    metadata: { estimatedTime: 1 },
  },
  {
    worldId: 'PARTNER',
    id: 'partner_social_style_preference',
    category: 'partner',
    subcategory: 'lifestyle_social',
    question: 'בנוגע לחיי חברה, איזו גישה היית מעדיפ/ה אצל בן/בת זוג?',
    type: 'iconChoice',
    depth: 'BASIC',
    isRequired: false,
    options: [
      {
        icon: <Users />,
        text: 'מאוד חברותי/ת, עם מעגל חברים רחב ואוהב/ת לארח/להתארח',
        value: 'מאוד חברותי/ת, עם מעגל חברים רחב ואוהב/ת לארח/להתארח',
      },
      {
        icon: <Coffee />,
        text: 'חברותי/ת אך מעדיפ/ה מפגשים קטנים ואינטימיים',
        value: 'חברותי/ת אך מעדיפ/ה מפגשים קטנים ואינטימיים',
      },
      {
        icon: <Home />,
        text: 'מעדיפ/ה חיי חברה מצומצמים, עם דגש על זמן איכות זוגי/משפחתי',
        value: 'מעדיפ/ה חיי חברה מצומצמים, עם דגש על זמן איכות זוגי/משפחתי',
      },
      {
        icon: <Scale />,
        text: 'מאוזנ/ת - נהנה/ית גם מחברה וגם מזמן שקט יותר',
        value: 'מאוזנ/ת - נהנה/ית גם מחברה וגם מזמן שקט יותר',
      },
    ],
    metadata: { estimatedTime: 1 },
  },

  // --- חלק 3: ערכים, אמונות ורוחניות (בהקשר של פרטנר) ---
  {
    worldId: 'PARTNER',
    id: 'partner_values_alignment_importance',
    category: 'partner',
    subcategory: 'values_beliefs_spirituality',
    question:
      'עד כמה חשובה לך התאמה בערכי ליבה, השקפת עולם כללית ואמונות יסוד עם בן/בת הזוג? (1=לא קריטי, 10=קריטי ביותר)',
    type: 'scale',
    depth: 'BASIC',
    isRequired: true,
    min: 1,
    max: 10,
    labels: { min: 'לא קריטי', max: 'קריטי ביותר' },
    metadata: { estimatedTime: 1 },
  },
  {
    worldId: 'PARTNER',
    id: 'partner_religious_observance_preference_range',
    category: 'partner',
    subcategory: 'values_beliefs_spirituality',
    question:
      'באיזו רמה של שמירת מצוות והשקפה דתית היית רוצה שבן/בת הזוג יהיו? (ניתן לבחור טווח אם יש גמישות)',
    type: 'multiSelect',
    depth: 'BASIC',
    isRequired: true,
    options: [
      {
        icon: <Scroll />,
        text: 'חרדי/ת (כל הזרמים)',
        value: 'חרדי/ת (כל הזרמים)',
      },
      {
        icon: <BookOpen />,
        text: 'דתי/ה לאומי/ת - תורני/ת מאוד (חרד"ל)',
        value: 'דתי/ה לאומי/ת - תורני/ת מאוד (חרד"ל)',
      },
      {
        icon: <BookOpen />,
        text: 'דתי/ה לאומי/ת - תורני/ת / ישיבתי/ת',
        value: 'דתי/ה לאומי/ת - תורני/ת / ישיבתי/ת',
      },
      {
        icon: <Sparkles />,
        text: 'דתי/ה לאומי/ת - מרכז / ליברלי',
        value: 'דתי/ה לאומי/ת - מרכז / ליברלי',
      },
      {
        icon: <Heart />,
        text: 'מסורתי/ת מאוד (שומר/ת שבת וכשרות בקפידה)',
        value: 'מסורתי/ת מאוד (שומר/ת שבת וכשרות בקפידה)',
      },
      {
        icon: <Heart />,
        text: 'מסורתי/ת (שומר/ת חלק מהמצוות, חיבור למסורת)',
        value: 'מסורתי/ת (שומר/ת חלק מהמצוות, חיבור למסורת)',
      },
      {
        icon: <Users />,
        text: 'חילוני/ת עם זיקה חזקה למסורת וערכים יהודיים',
        value: 'חילוני/ת עם זיקה חזקה למסורת וערכים יהודיים',
      },
      {
        icon: <Lightbulb />,
        text: 'פתוח/ה גם למי שאינו/ה מוגדר/ת דתית אך עם ערכים דומים',
        value: 'פתוח/ה גם למי שאינו/ה מוגדר/ת דתית אך עם ערכים דומים',
      },
    ],
    minSelections: 1,
    maxSelections: 3,
    metadata: {
      estimatedTime: 1,
      helpText: 'חשוב להיות כן/ה. זהו אחד הפרמטרים החשובים ביותר להתאמה.',
    },
  },
  {
    worldId: 'PARTNER',
    id: 'partner_spiritual_growth_openness',
    category: 'partner',
    subcategory: 'values_beliefs_spirituality',
    question:
      'האם חשוב לך שבן/בת הזוג יהיו פתוחים לצמיחה והתפתחות רוחנית או דתית, גם אם אתם מתחילים ממקומות שונים?',
    type: 'iconChoice',
    depth: 'ADVANCED',
    isRequired: false,
    options: [
      {
        icon: <TrendingUp />,
        text: 'כן, מאוד חשוב לי שיהיה רצון משותף להתפתח יחד',
        value: 'כן, מאוד חשוב לי שיהיה רצון משותף להתפתח יחד',
      },
      {
        icon: <Lightbulb />,
        text: 'כן, חשובה לי פתיחות לכך, גם אם הקצב שונה',
        value: 'כן, חשובה לי פתיחות לכך, גם אם הקצב שונה',
      },
      {
        icon: <Scale />,
        text: 'פחות קריטי, כל עוד יש הבנה וכבוד הדדי למקום של כל אחד',
        value: 'פחות קריטי, כל עוד יש הבנה וכבוד הדדי למקום של כל אחד',
      },
      {
        icon: <Target />,
        text: 'מעדיפ/ה מישהו/י שכבר נמצא/ת במקום דומה לשלי מבחינה רוחנית/דתית',
        value: 'מעדיפ/ה מישהו/י שכבר נמצא/ת במקום דומה לשלי מבחינה רוחנית/דתית',
      },
    ],
    metadata: { estimatedTime: 1 },
  },

  // --- חלק 4: קריירה, השכלה וגישה כלכלית (של הפרטנר) ---
  {
    worldId: 'PARTNER',
    id: 'partner_education_level_importance',
    category: 'partner',
    subcategory: 'career_finance_education',
    question:
      'עד כמה חשובה לך רמת ההשכלה הפורמלית של בן/בת הזוג? (1=לא חשוב, 10=חשוב מאוד)',
    type: 'scale',
    depth: 'BASIC',
    isRequired: false,
    min: 1,
    max: 10,
    labels: { min: 'לא חשוב', max: 'חשוב מאוד' },
    metadata: { estimatedTime: 1 },
  },
  {
    worldId: 'PARTNER',
    id: 'partner_career_ambition_preference',
    category: 'partner',
    subcategory: 'career_finance_education',
    question: 'איזו גישה לקריירה ושאיפות מקצועיות היית מעדיפ/ה אצל בן/בת זוג?',
    type: 'iconChoice',
    depth: 'ADVANCED',
    isRequired: false,
    options: [
      {
        icon: <Star />,
        text: 'שאפתנ/ית מאוד, עם מטרות קריירה ברורות ורצון להתקדם',
        value: 'שאפתנ/ית מאוד, עם מטרות קריירה ברורות ורצון להתקדם',
      },
      {
        icon: <Briefcase />,
        text: 'בעל/ת קריירה יציבה ומספקת, אך לא בהכרח בראש סדר העדיפויות',
        value: 'בעל/ת קריירה יציבה ומספקת, אך לא בהכרח בראש סדר העדיפויות',
      },
      {
        icon: <Scale />,
        text: 'מחפש/ת איזון בין עבודה לחיים אישיים/משפחתיים',
        value: 'מחפש/ת איזון בין עבודה לחיים אישיים/משפחתיים',
      },
      {
        icon: <Heart />,
        text: 'העיסוק פחות קריטי, כל עוד הוא/היא מאושר/ת ומסופק/ת',
        value: 'העיסוק פחות קריטי, כל עוד הוא/היא מאושר/ת ומסופק/ת',
      },
    ],
    metadata: { estimatedTime: 1 },
  },
  {
    worldId: 'PARTNER',
    id: 'partner_financial_outlook_preference',
    category: 'partner',
    subcategory: 'career_finance_education',
    question: 'איזו גישה כלכלית היית רוצה שתהיה לבן/בת הזוג?',
    type: 'iconChoice',
    depth: 'ADVANCED',
    isRequired: false,
    options: [
      {
        icon: <PiggyBank />,
        text: 'חסכנ/ית, מחושב/ת ומתכננ/ת לטווח ארוך',
        value: 'חסכנ/ית, מחושב/ת ומתכננ/ת לטווח ארוך',
      },
      {
        icon: <Scale />,
        text: 'מאוזנ/ת - יודע/ת להנות מהכסף אך גם לנהל אותו באחריות',
        value: 'מאוזנ/ת - יודע/ת להנות מהכסף אך גם לנהל אותו באחריות',
      },
      {
        icon: <Sparkles />,
        text: 'נדיב/ה, אוהב/ת לחיות טוב ולהוציא על חוויות והנאות',
        value: 'נדיב/ה, אוהב/ת לחיות טוב ולהוציא על חוויות והנאות',
      },
      {
        icon: <Info />,
        text: 'פחות משנה לי הגישה, כל עוד יש הסכמה על ניהול משותף',
        value: 'פחות משנה לי הגישה, כל עוד יש הסכמה על ניהול משותף',
      },
    ],
    metadata: { estimatedTime: 1 },
  },

  // --- חלק 5: משפחה, ילדים ורקע אישי (של הפרטנר) ---
  {
    worldId: 'PARTNER',
    id: 'partner_family_orientation_preference',
    category: 'partner',
    subcategory: 'family_background',
    question:
      "איזו מידת 'משפחתיות' (קשר למשפחת המוצא, רצון להקים משפחה) היית רוצה לראות אצל בן/בת הזוג?",
    type: 'scale',
    depth: 'BASIC',
    isRequired: true,
    min: 1,
    max: 10,
    labels: { min: 'עצמאי/ת יותר', max: 'מאוד משפחתי/ת' },
    metadata: { estimatedTime: 1 },
  },
  {
    worldId: 'PARTNER',
    id: 'partner_children_from_previous_relationship_stance',
    category: 'partner',
    subcategory: 'family_background',
    question:
      'מהי גישתך לקשר עם בן/בת זוג שכבר יש לו/לה ילדים ממערכת יחסים קודמת?',
    type: 'iconChoice',
    depth: 'ADVANCED',
    isRequired: true,
    options: [
      {
        icon: <Heart />,
        text: 'פתוח/ה לחלוטין ומקבל/ת באהבה',
        value: 'פתוח/ה לחלוטין ומקבל/ת באהבה',
      },
      {
        icon: <Scale />,
        text: "פתוח/ה לשקול, תלוי בנסיבות (גיל הילדים, טיב הקשר וכו')",
        value: "פתוח/ה לשקול, תלוי בנסיבות (גיל הילדים, טיב הקשר וכו')",
      },
      {
        icon: <Home />,
        text: "מעדיפ/ה להתחיל 'דף חדש' ללא ילדים קיימים, אך לא שולל/ת לחלוטין",
        value: "מעדיפ/ה להתחיל 'דף חדש' ללא ילדים קיימים, אך לא שולל/ת לחלוטין",
      },
      {
        icon: <Info />,
        text: 'לא מעוניינ/ת בקשר עם בן/בת זוג שיש לו/לה ילדים',
        value: 'לא מעוניינ/ת בקשר עם בן/בת זוג שיש לו/לה ילדים',
      },
    ],
    metadata: { estimatedTime: 1 },
  },
  {
    worldId: 'PARTNER',
    id: 'partner_origin_ethnicity_importance',
    category: 'partner',
    subcategory: 'family_background',
    question:
      'עד כמה חשוב לך שבן/בת הזוג יהיו מרקע עדתי/מוצא דומה לשלך, או מרקע ספציפי אחר?',
    type: 'scale',
    depth: 'ADVANCED',
    isRequired: false,
    min: 1,
    max: 10,
    labels: { min: 'לא חשוב כלל', max: 'חשוב מאוד' },
    metadata: {
      estimatedTime: 1,
      helpText:
        'אם יש העדפה ספציפית, תוכל/י לציין זאת בהמשך או בשיחה עם השדכן.',
    },
  },

  // --- START: NEW LOCATION & COMMUNITY QUESTIONS ---
  {
    worldId: 'VALUES', // עבר לעולם הערכים כי הוא משקף ערכים עמוקים יותר מסגנון חיים בלבד
    id: 'values_living_style_and_community_vision', // ID חדש וברור יותר
    category: 'values',
    subcategory: 'community_social',
    question:
      'איזה סגנון חיים, מגורים וקהילה מתאימים לחזון שלך עבור הבית העתידי? (בחר/י עד 4 אפשרויות שמשקפות אותך)',
    type: 'multiSelect',
    depth: 'ADVANCED', // שודרג ל-ADVANCED כי הוא דורש חשיבה מעמיקה
    isRequired: true,
    minSelections: 1,
    maxSelections: 4, // הורחב ל-4 כדי לאפשר יותר גמישות
    options: [
      {
        icon: <Building2 />,
        text: 'חיים עירוניים קלאסיים',
        value: 'חיים עירוניים קלאסיים',
        description:
          'עיר גדולה או שכונה פרברית. הדגש הוא על נגישות, שירותים ואנונימיות יחסית.',
      },
      {
        icon: <Users />,
        text: 'קהילה דתית מגובשת בעיר',
        value: 'קהילה דתית מגובשת בעיר',
        description:
          'ליהנות מיתרונות העיר, אך עם חיי קהילה חמים, בית כנסת פעיל ומעורבות חברתית.',
      },
      {
        icon: <Sparkles />,
        text: 'גרעין תורני / חיים של שליחות',
        value: 'גרעין תורני / חיים של שליחות',
        description:
          'חיים עם אידיאל, במטרה לחזק את הזהות היהודית בסביבה הטרוגנית.',
      },
      {
        icon: <Mountain />,
        text: 'יישוב קהילתי (דתי/מעורב)',
        value: 'יישוב קהילתי (דתי/מעורב)',
        description:
          'קהילה חזקה, מרחבים פתוחים, חינוך משותף ותחושת שייכות עמוקה.',
      },
      {
        icon: <Car />, // אייקון חדש
        text: 'יישוב קרוב למרכז/לעיר גדולה',
        value: 'יישוב קרוב למרכז/לעיר גדולה',
        description:
          'השילוב המושלם: איכות חיים של יישוב, במרחק נסיעה קצר ממרכזי תעסוקה ובילוי.',
      },
      {
        icon: <BookOpen />,
        text: 'עיר או שכונה חרדית',
        value: 'עיר או שכונה חרדית',
        description:
          'סביבה הומוגנית עם מוסדות תורה וחינוך, ושמירה קהילתית על צביון החיים.',
      },
      {
        icon: <TreePine />,
        text: 'מושב, קיבוץ או חיים כפריים',
        value: 'מושב, קיבוץ או חיים כפריים',
        description:
          'חיבור חזק לטבע ולאדמה, מרחב אישי גדול, אווירה פסטורלית ושקטה.',
      },
      {
        icon: <Palette />, // אייקון חדש
        text: 'יישוב אומנותי / רוחני',
        value: 'יישוב אומנותי / רוחני',
        description:
          'קהילה עם דגש על יצירתיות, ביטוי אישי, פשטות וחיבור פנימי (כמו צפת, פרדס חנה).',
      },
      {
        icon: <Flag />,
        text: 'התיישבות אידיאולוגית (יו"ש, גולן, נגב, גליל)',
        value: 'התיישבות אידיאולוגית',
        description:
          'חיים מתוך אידיאל ציוני, חיבור לשורשים, אהבת הארץ והתמודדות עם אתגרים.',
      },
      {
        icon: <Heart />,
        text: 'השיקול המרכזי: קרבה למשפחה',
        value: 'השיקול המרכזי: קרבה למשפחה',
        description:
          'הגמישות שלי לגבי מיקום תלויה בעיקר בקרבה למשפחות המוצא שלנו.',
      },
      {
        icon: <Briefcase />,
        text: 'השיקול המרכזי: קרבה לתעסוקה',
        value: 'השיקול המרכזי: קרבה לתעסוקה',
        description:
          'חשוב לי לגור במקום עם אפשרויות תעסוקה רחבות בתחומי העיסוק שלנו.',
      },
      {
        icon: <PiggyBank />, // אייקון חדש
        text: 'השיקול המרכזי: עלויות מחיה נמוכות',
        value: 'השיקול המרכזי: עלויות מחיה נמוכות',
        description:
          'העדיפות היא למצוא מקום המאפשר איכות חיים כלכלית גבוהה, גם במחיר של ריחוק מהמרכז.',
      },
      {
        icon: <Globe />, // אייקון חדש
        text: 'פתוח/ה למגורים בקהילה יהודית בחו"ל',
        value: 'פתוח/ה למגורים בקהילה יהודית בחו"ל',
        description:
          'עבור האדם הנכון, ובנסיבות המתאימות, אני רואה אפשרות בחיים מחוץ לישראל.',
      },
      {
        icon: <Scale />,
        text: 'מאוד גמיש/ה - ההחלטה תהיה משותפת',
        value: 'מאוד גמיש/ה - ההחלטה תהיה משותפת',
        description:
          'אין לי העדפה חזקה. מאמינ/ה שנמצא את המקום הנכון עבורנו ביחד.',
      },
    ],
    metadata: {
      estimatedTime: 3,
      helpText:
        'הבחירות כאן מספרות סיפור שלם על סדרי העדיפויות שלך. בחר/י את האפשרויות שהכי מדברות אל ליבך.',
    },
  },
  {
    worldId: 'PARTNER',
    id: 'partner_community_character_preference',
    category: 'partner',
    subcategory: 'location_community',
    question:
      'מהם המאפיינים החשובים לך ביותר באופי הקהילה והסביבה הדתית שבה תגורו? (בחר/י עד 3)',
    type: 'multiSelect',
    depth: 'ADVANCED',
    isRequired: true,
    options: [
      {
        icon: <BookOpen />,
        text: 'קהילה תורנית חזקה עם דמות רבנית משמעותית',
        value: 'קהילה תורנית חזקה',
      },
      {
        icon: <Scale />,
        text: 'קהילה מעורבת עם מגוון רמות דתיות',
        value: 'קהילה מעורבת',
      },
      {
        icon: <Users />,
        text: 'קהילה צעירה ודינמית עם הרבה משפחות צעירות',
        value: 'קהילה צעירה ודינמית',
      },
      {
        icon: <Sparkles />,
        text: 'קהילה פתוחה וליברלית מבחינה דתית וחברתית',
        value: 'קהילה פתוחה וליברלית',
      },
      {
        icon: <Heart />,
        text: 'קהילה חמה, תומכת ומגובשת חברתית',
        value: 'קהילה חמה ותומכת',
      },
      {
        icon: <ShieldCheck />,
        text: 'קהילה שקטה ומבוססת עם דגש על פרטיות',
        value: 'קהילה שקטה ומבוססת',
      },
    ],
    minSelections: 1,
    maxSelections: 3,
    metadata: {
      estimatedTime: 1,
      helpText:
        'האופי של הקהילה משפיע ישירות על חיי החברה, חינוך הילדים והאווירה בבית.',
    },
  },
  {
    worldId: 'PARTNER',
    id: 'partner_geographical_economic_preference',
    category: 'partner',
    subcategory: 'location_community',
    question:
      'בהיבט הגיאוגרפי והכלכלי, אילו שיקולים הכי חשובים לך? (בחר/י עד 2)',
    type: 'multiSelect',
    depth: 'BASIC',
    isRequired: true,
    options: [
      {
        icon: <MapPin />,
        text: 'מרכז הארץ - קרבה לתעסוקה, תרבות ומשפחה',
        value: 'מרכז הארץ',
      },
      {
        icon: <TrendingUp />,
        text: 'פריפריה - איכות חיים, קהילתיות ועלויות מחיה נוחות יותר',
        value: 'פריפריה',
      },
      {
        icon: <DollarSign />,
        text: 'מגורים ביישוב בעל עלות מחיה סבירה הם עדיפות עליונה',
        value: 'עלות מחיה סבירה',
      },
      {
        icon: <Briefcase />,
        text: 'קרבה למרכזי תעסוקה רלוונטיים עבורי ועבור בן/בת הזוג',
        value: 'קרבה למרכזי תעסוקה',
      },
      {
        icon: <Home />,
        text: 'קרבה למשפחת המוצא שלי או של בן/בת הזוג',
        value: 'קרבה למשפחה',
      },
    ],
    minSelections: 1,
    maxSelections: 2,
    metadata: { estimatedTime: 1 },
  },
  {
    worldId: 'PARTNER',
    id: 'partner_relocation_flexibility',
    category: 'partner',
    subcategory: 'location_community',
    question:
      'עד כמה את/ה פתוח/ה וגמיש/ה לגבי מעבר למקום מגורים חדש, גם אם הוא שונה מההעדפות הראשוניות שלך, עבור האדם הנכון?',
    type: 'scale',
    depth: 'ADVANCED',
    isRequired: true,
    min: 1,
    max: 10,
    labels: {
      min: 'מאוד מקובע/ת',
      max: 'גמיש/ה לחלוטין',
      middle: 'פתוח/ה לדיון',
    },
    metadata: {
      estimatedTime: 1,
      helpText: 'גמישות היא מפתח במציאת שידוך. כנות כאן תעזור לנו מאוד!',
    },
  },
  // --- END: NEW LOCATION & COMMUNITY QUESTIONS ---

  // --- חלק 6: תכונות "אדומות" (Deal Breakers) והכרחיות (Must-Haves) ---
  {
    worldId: 'PARTNER',
    id: 'partner_deal_breakers_open_text',
    category: 'partner',
    subcategory: 'non_negotiables',
    question:
      "האם ישנן תכונות אופי, התנהגויות או הרגלים מסוימים שמהווים 'קו אדום' (Deal Breaker) מוחלט עבורך אצל בן/בת זוג? אם כן, פרט/י 1-2 דוגמאות עיקריות.",
    type: 'openText',
    depth: 'EXPERT',
    isRequired: false,
    minLength: 0,
    maxLength: 300,
    placeholder:
      'לדוגמה: חוסר כנות, קמצנות קיצונית, חוסר כבוד, התמכרות כלשהי...',
    metadata: {
      estimatedTime: 1,
      helpText: 'אלו הדברים שלעולם לא תוכל/י לקבל או לחיות איתם בשלום.',
    },
  },
  {
    worldId: 'PARTNER',
    id: 'partner_must_have_quality_final',
    category: 'partner',
    subcategory: 'non_negotiables',
    question:
      'לסיום עולם זה, מהי התכונה או האיכות *האחת* החשובה ביותר שחייבת להיות לבן/בת הזוג שלך כדי שתוכל/י לראות עתיד משותף?',
    type: 'openText',
    depth: 'EXPERT',
    isRequired: true,
    minLength: 10,
    maxLength: 150,
    placeholder: 'נסה/י לחשוב על הדבר האחד והיחיד שהוא הבסיס להכל עבורך...',
    metadata: { estimatedTime: 1 },
  },
];
--- End of Content for partnerQuestions.tsx ---

================================================================================
Directory: C:\Users\user\Desktop\matchpoint\shidduch-system\src\components\questionnaire\questions\personality
================================================================================

--------------------------------------------------------------------------------
File: C:\Users\user\Desktop\matchpoint\shidduch-system\src\components\questionnaire\questions\personality\personalityQuestions.tsx
--------------------------------------------------------------------------------
Content:
// src/components/questionnaire/questions/personality/personalityQuestions.ts
import { Question } from '../../types/types';
import {
  Sun, // אנרגיה, אופטימיות, בוקר
  Moon, // מופנמות, רוגע, לילה
  Users, // חברתיות, קהל
  Brain, // חשיבה, אינטליגנציה, למידה
  Heart, // רגשות, אמפתיה, אהבה
  Target, // מיקוד, מטרות, ארגון
  Compass, // כיוון, החלטות
  Cloud, // גמישות, זרימה, שינוי
  Leaf, // טבע, רוגע, צמיחה
  Home, // בית, נוחות
  Watch, // זמן, שגרה
  Scale,
  Coffee, // פנאי, חברים, שיחה
  MessageCircle, // תקשורת, דיבור
  HandHeart, // נתינה, תמיכה
  Lightbulb, // רעיונות, יצירתיות
  Sparkles, // השראה, ייחודיות, קסם
  Star, // שאיפות, ערכים (גם)
  Smile, // הומור, קלילות
  ShieldCheck, // ביטחון, ערכים (גם)
  BookOpen, // למידה, תחומי עניין
  Palette, // יצירתיות, אמנות
  Headphones, // תחביבים (מוזיקה)
  Mountain, // הרפתקאות, טבע
  Bed, // מנוחה, סוף יום
  Utensils, // אוכל, העדפות
  Activity, // ספורט, תנועה
  Edit, // כתיבה, ביטוי עצמי
  HelpCircle, // שאלה, סקרנות
  Anchor, // יציבות, עוגן
  Feather, // קלילות, רגישות
} from 'lucide-react';

export const personalityQuestions: Question[] = [
  // --- חלק 1: תפיסה עצמית וטמפרמנט בסיסי ---
  {
    worldId: 'PERSONALITY',
    id: 'personality_self_portrayal',
    category: 'personality',
    subcategory: 'self_perception',
    question:
      'אם היית צריך/ה לתאר את עצמך לחבר/ה טוב/ה שמעולם לא פגש/ה אותך, מהם 3-5 הדברים הראשונים שהיית מדגיש/ה באישיותך?',
    type: 'openText',
    depth: 'BASIC', // נתחיל עם זה כפתיחה
    isRequired: true,
    minLength: 70,
    maxLength: 500,
    placeholder:
      "לדוגמה: 'אני אדם אופטימי, אוהב/ת ללמוד דברים חדשים, נאמן/ה לחברים, קצת ביישנ/ית בהתחלה, אבל עם חוש הומור טוב...'",
    metadata: {
      estimatedTime: 3,
      helpText: 'נסה/י לחשוב על תמצית האישיות שלך כפי שאת/ה רואה אותה.',
    },
  },
  {
    worldId: 'PERSONALITY',
    id: 'personality_energy_level',
    category: 'personality',
    subcategory: 'self_perception',
    question: 'בדרך כלל, איך היית מתאר/ת את רמת האנרגיה הכללית שלך?',
    type: 'iconChoice',
    depth: 'BASIC',
    isRequired: true,
    options: [
      {
        icon: <Sun />,
        text: 'גבוהה - תמיד בתנועה ופעלתנות',
        value: 'גבוהה - תמיד בתנועה ופעלתנות',
      },
      {
        icon: <Activity />,
        text: 'בינונית - אנרגטי/ת כשצריך, יודע/ת גם לנוח',
        value: 'בינונית - אנרגטי/ת כשצריך, יודע/ת גם לנוח',
      },
      {
        icon: <Moon />,
        text: 'נמוכה - מעדיף/ה קצב רגוע ושליו',
        value: 'נמוכה - מעדיף/ה קצב רגוע ושליו',
      },
      {
        icon: <Cloud />,
        text: 'משתנה - תלוי במצב הרוח וביום',
        value: 'משתנה - תלוי במצב הרוח וביום',
      },
    ],
    metadata: { estimatedTime: 1 },
  },
  {
    worldId: 'PERSONALITY',
    id: 'personality_introversion_extroversion',
    category: 'personality',
    subcategory: 'self_perception',
    question: "שאלה על 'הסוללה החברתית' שלך: ממה את/ה בדרך כלל שואב/ת אנרגיה?",
    type: 'scale',
    depth: 'BASIC',
    isRequired: true,
    min: 1,
    max: 10,
    labels: {
      min: 'מזמן שקט עם עצמי',
      max: 'ממפגשים ואינטראקציה חברתית',
      middle: 'שילוב מאוזן בין השניים',
    },
    metadata: {
      estimatedTime: 1,
      helpText:
        "חשוב/י על זה כך: 1 משמעותו שאת/ה 'טוענ/ת מצברים' בעיקר לבד, ו-10 משמעותו שאת/ה 'טוענ/ת מצברים' בעיקר בחברת אנשים.",
    },
  },
  {
    worldId: 'PERSONALITY',
    id: 'personality_core_trait_selection',
    category: 'personality',
    subcategory: 'self_perception',
    question:
      "חלק/י 100 'נקודות אישיות' בין התכונות הבאות כדי לתאר את עצמך. תכונות דומיננטיות יותר צריכות לקבל יותר נקודות.",
    type: 'budgetAllocation',
    depth: 'BASIC',
    isRequired: true,
    totalPoints: 100,
    categories: [
      { label: 'אמפתי/ת ורגיש/ה', icon: <Heart /> },
      { label: 'ישר/ה ואמין/ה', icon: <ShieldCheck /> },
      { label: 'אופטימי/ת ושמח/ה', icon: <Sun /> },
      { label: 'בעל/ת חוש הומור', icon: <Smile /> },
      { label: 'אינטליגנט/ית וסקרנ/ית', icon: <Brain /> },
      { label: 'שאפתנ/ית ובעל/ת מוטיבציה', icon: <Star /> },
      { label: 'קליל/ה וזורמ/ת', icon: <Feather /> },
      { label: 'אחראי/ת ומאורגנ/ת', icon: <Target /> },
      { label: 'יצירתי/ת ומקור/ית', icon: <Lightbulb /> },
      { label: 'יציב/ה וקרקע/ית', icon: <Anchor /> },
      { label: 'החלטי/ת ובעל/ת ביטחון', icon: <Compass /> },
      { label: 'נדיב/ה ומתחשב/ת', icon: <HandHeart /> },
    ],
    metadata: {
      estimatedTime: 3,
      helpText:
        'את/ה יכול/ה להתמקד בכמה תכונות בודדות או לחלק את הנקודות בין רבות. הסך הכל צריך להיות 100.',
    },
  },

  // --- חלק 2: סגנון חיים והעדפות יומיומיות ---
  {
    worldId: 'PERSONALITY',
    id: 'personality_daily_structure',
    category: 'personality',
    subcategory: 'lifestyle',
    question: 'איך נראית השגרה היומית האידיאלית שלך?',
    type: 'iconChoice',
    depth: 'BASIC',
    isRequired: true,
    options: [
      {
        icon: <Watch />,
        text: 'מתוכננת ומסודרת עם לו"ז קבוע',
        value: 'מתוכננת ומסודרת עם לו"ז קבוע',
      },
      {
        icon: <Cloud />,
        text: 'גמישה וספונטנית, משתנה מיום ליום',
        value: 'גמישה וספונטנית, משתנה מיום ליום',
      },
      {
        icon: <Target />,
        text: 'ממוקדת משימות ויעדים ברורים',
        value: 'ממוקדת משימות ויעדים ברורים',
      },
      {
        icon: <Scale />,
        text: 'שילוב של תכנון וגמישות',
        value: 'שילוב של תכנון וגמישות',
      },
    ],
    metadata: { estimatedTime: 1 },
  },
  {
    worldId: 'PERSONALITY',
    id: 'personality_preferred_environment',
    category: 'personality',
    subcategory: 'lifestyle',
    question: 'באיזה סוג סביבה את/ה מרגיש/ה הכי פרודוקטיבי/ת ונינוח/ה?',
    type: 'iconChoice',
    depth: 'BASIC',
    isRequired: false,
    options: [
      {
        icon: <Home />,
        text: 'שקטה וביתית, עם מינימום הסחות דעת',
        value: 'שקטה וביתית, עם מינימום הסחות דעת',
      },
      {
        icon: <Coffee />,
        text: 'דינמית ותוססת, כמו בית קפה או משרד פתוח',
        value: 'דינמית ותוססת, כמו בית קפה או משרד פתוח',
      },
      {
        icon: <Leaf />,
        text: 'בטבע או בסביבה ירוקה',
        value: 'בטבע או בסביבה ירוקה',
      },
      {
        icon: <Users />,
        text: 'בסביבה חברתית, עם אנשים סביבי',
        value: 'בסביבה חברתית, עם אנשים סביבי',
      },
    ],
    metadata: { estimatedTime: 1 },
  },
  {
    worldId: 'PERSONALITY',
    id: 'personality_weekend_style',
    category: 'personality',
    subcategory: 'lifestyle',
    question: 'איך את/ה הכי אוהב/ת לבלות סוף שבוע טיפוסי?',
    type: 'multiSelect',
    depth: 'ADVANCED',
    isRequired: false,
    options: [
      {
        icon: <Bed />,
        text: 'מנוחה והטענת מצברים בבית',
        value: 'מנוחה והטענת מצברים בבית',
      },
      {
        icon: <Mountain />,
        text: 'טיולים והרפתקאות בטבע',
        value: 'טיולים והרפתקאות בטבע',
      },
      {
        icon: <Users />,
        text: 'מפגשים חברתיים ובילויים',
        value: 'מפגשים חברתיים ובילויים',
      },
      {
        icon: <Palette />,
        text: 'תרבות, אמנות והופעות',
        value: 'תרבות, אמנות והופעות',
      },
      {
        icon: <BookOpen />,
        text: 'למידה, קריאה והתפתחות אישית',
        value: 'למידה, קריאה והתפתחות אישית',
      },
      {
        icon: <Utensils />,
        text: 'בישול, אירוח ואוכל טוב',
        value: 'בישול, אירוח ואוכל טוב',
      },
      {
        icon: <Activity />,
        text: 'ספורט ופעילות גופנית',
        value: 'ספורט ופעילות גופנית',
      },
      {
        icon: <Sparkles />,
        text: 'זמן איכות ספונטני, מה שבא',
        value: 'זמן איכות ספונטני, מה שבא',
      },
    ],
    minSelections: 1,
    maxSelections: 3,
    metadata: { estimatedTime: 2 },
  },
  {
    worldId: 'PERSONALITY',
    id: 'personality_ideal_vacation',
    category: 'personality',
    subcategory: 'lifestyle',
    question: 'תאר/י את חופשת החלומות שלך. מה הופך אותה למושלמת עבורך?',
    type: 'openText',
    depth: 'ADVANCED',
    isRequired: false,
    minLength: 50,
    maxLength: 400,
    placeholder: 'לדוגמה: יעד, סוג הפעילויות, קצב, חברה, אווירה...',
    metadata: { estimatedTime: 2 },
  },

  // --- חלק 3: אינטראקציות חברתיות ותקשורת ---
  {
    worldId: 'PERSONALITY',
    id: 'personality_social_preference',
    category: 'personality',
    subcategory: 'social_communication',
    question: 'בסיטואציות חברתיות, את/ה בדרך כלל...',
    type: 'iconChoice',
    depth: 'BASIC',
    isRequired: true,
    options: [
      {
        icon: <Users />,
        text: 'במרכז העניינים, יוזמ/ת שיחה ופעילות',
        value: 'במרכז העניינים, יוזמ/ת שיחה ופעילות',
      },
      {
        icon: <MessageCircle />,
        text: 'מקשיב/ה ומתבוננ/ת יותר, תורמ/ת כשמתאים',
        value: 'מקשיב/ה ומתבוננ/ת יותר, תורמ/ת כשמתאים',
      },
      {
        icon: <Coffee />,
        text: 'נהנה/ית משיחות עומק בקבוצות קטנות',
        value: 'נהנה/ית משיחות עומק בקבוצות קטנות',
      },
      {
        icon: <Sparkles />,
        text: 'משתלב/ת לפי האווירה והאנשים',
        value: 'משתלב/ת לפי האווירה והאנשים',
      },
    ],
    metadata: { estimatedTime: 1 },
  },
  {
    worldId: 'PERSONALITY',
    id: 'personality_communication_style',
    category: 'personality',
    subcategory: 'social_communication',
    question:
      'איך היית מתאר/ת את סגנון התקשורת העיקרי שלך? חלק/י 100 נקודות בין הסגנונות השונים.',
    type: 'budgetAllocation',
    depth: 'ADVANCED',
    isRequired: true,
    totalPoints: 100,
    categories: [
      { label: 'ישיר/ה, ענייני/ת', icon: <Target /> },
      { label: 'אמפתי/ת ומתחשב/ת', icon: <HandHeart /> },
      { label: 'לוגי/ת ומבוסס/ת עובדות', icon: <Brain /> },
      { label: 'יצירתי/ת ואסוציאטיבי/ת', icon: <Lightbulb /> },
      { label: 'הומוריסטי/ת וקליל/ה', icon: <Smile /> },
      { label: 'פתוח/ה ומשתפ/ת', icon: <MessageCircle /> },
    ],
    metadata: {
      estimatedTime: 3,
      helpText:
        'סגנון התקשורת שלנו מורכב מכמה אלמנטים. נסה/י להראות מהם החלקים הדומיננטיים יותר אצלך.',
    },
  },
  {
    worldId: 'PERSONALITY',
    id: 'personality_handling_new_people',
    category: 'personality',
    subcategory: 'social_communication',
    question: 'כשאת/ה פוגש/ת אנשים חדשים, איך את/ה בדרך כלל מרגיש/ה ומתנהג/ת?',
    type: 'openText',
    depth: 'ADVANCED',
    isRequired: false,
    minLength: 50,
    maxLength: 400,
    placeholder:
      'לדוגמה: האם את/ה פתוח/ה ויוזמ/ת, או יותר מסויג/ת? האם קל לך ליצור קשר ראשוני? מה עוזר לך להרגיש בנוח?',
    metadata: { estimatedTime: 2 },
  },

  // --- חלק 4: התמודדות רגשית וקבלת החלטות ---
  {
    worldId: 'PERSONALITY',
    id: 'personality_stress_management',
    category: 'personality',
    subcategory: 'emotional_coping',
    question: 'מהן הדרכים העיקריות שלך להתמודד עם לחץ ומתח? (בחר/י עד 3)',
    type: 'multiSelectWithOther',
    depth: 'BASIC',
    isRequired: true,
    options: [
      {
        icon: <Activity />,
        text: 'פעילות גופנית (ספורט, הליכה)',
        value: 'פעילות גופנית (ספורט, הליכה)',
      },
      {
        icon: <Headphones />,
        text: 'מוזיקה או פודקאסטים',
        value: 'מוזיקה או פודקאסטים',
      },
      {
        icon: <Edit />,
        text: 'כתיבה, יומן, ביטוי עצמי',
        value: 'כתיבה, יומן, ביטוי עצמי',
      },
      {
        icon: <Users />,
        text: 'שיחה עם חבר/ה קרוב/ה או בן/בת משפחה',
        value: 'שיחה עם חבר/ה קרוב/ה או בן/בת משפחה',
      },
      {
        icon: <Bed />,
        text: 'זמן לבד, מנוחה ושקט',
        value: 'זמן לבד, מנוחה ושקט',
      },
      { icon: <Leaf />, text: 'בילוי בטבע', value: 'בילוי בטבע' },
      {
        icon: <Palette />,
        text: 'עיסוק בתחביב יצירתי',
        value: 'עיסוק בתחביב יצירתי',
      },
      {
        icon: <MessageCircle />,
        text: 'עיבוד וניתוח של המצב',
        value: 'עיבוד וניתוח של המצב',
      },
    ],
    minSelections: 1,
    maxSelections: 3,
    metadata: { estimatedTime: 2 },
  },
  {
    worldId: 'PERSONALITY',
    id: 'personality_decision_making_style',
    category: 'personality',
    subcategory: 'emotional_coping',
    question: 'כשאת/ה צריך/ה לקבל החלטה חשובה, מהי הגישה הטיפוסית שלך?',
    type: 'iconChoice',
    depth: 'BASIC',
    isRequired: true,
    options: [
      {
        icon: <Brain />,
        text: 'איסוף מידע וניתוח לוגי מעמיק',
        value: 'איסוף מידע וניתוח לוגי מעמיק',
      },
      {
        icon: <Heart />,
        text: 'הליכה עם תחושת הבטן והאינטואיציה',
        value: 'הליכה עם תחושת הבטן והאינטואיציה',
      },
      {
        icon: <Users />,
        text: 'התייעצות עם אנשים קרובים וקבלת חוות דעת',
        value: 'התייעצות עם אנשים קרובים וקבלת חוות דעת',
      },
      {
        icon: <Compass />,
        text: 'שילוב של לוגיקה ואינטואיציה, תוך לקיחת סיכונים מחושבים',
        value: 'שילוב של לוגיקה ואינטואיציה, תוך לקיחת סיכונים מחושבים',
      },
    ],
    metadata: { estimatedTime: 1 },
  },
  {
    worldId: 'PERSONALITY',
    id: 'personality_emotional_expression',
    category: 'personality',
    subcategory: 'emotional_coping',
    question:
      "באיזו מידה את/ה נוטה לבטא את רגשותיך (שמחה, עצב, כעס וכו') כלפי חוץ?",
    type: 'scale',
    depth: 'ADVANCED',
    isRequired: false,
    min: 1, // מאוד מאופק/ת
    max: 10, // מאוד אקספרסיבי/ת
    labels: { min: 'מאוד מאופק/ת', max: 'מאוד פתוח/ה וגלוי/ה' },
    metadata: { estimatedTime: 1 },
  },
  {
    worldId: 'PERSONALITY',
    id: 'personality_handling_criticism',
    category: 'personality',
    subcategory: 'emotional_coping',
    question: 'איך את/ה בדרך כלל מגיב/ה לביקורת (בונה או פחות בונה)?',
    type: 'openText',
    depth: 'ADVANCED',
    isRequired: false,
    minLength: 50,
    maxLength: 400,
    placeholder:
      'האם את/ה לוקח/ת ללב? מנסה ללמוד? מתגוננ/ת? זקוק/ה לזמן עיבוד?',
    metadata: { estimatedTime: 2 },
  },

  // --- חלק 5: צמיחה, ערכים ושאיפות (נגיעות קלות, העיקר בעולם הערכים) ---
  {
    worldId: 'PERSONALITY',
    id: 'personality_primary_motivation',
    category: 'personality',
    subcategory: 'growth_aspirations',
    question: 'מהו הדבר המרכזי שמניע אותך ונותן לך מוטיבציה בחיים?',
    type: 'iconChoice',
    depth: 'ADVANCED',
    isRequired: true,
    options: [
      {
        icon: <Star />,
        text: 'הגשמה עצמית והשגת מטרות',
        value: 'הגשמה עצמית והשגת מטרות',
      },
      {
        icon: <Heart />,
        text: 'יצירת קשרים משמעותיים ואהבה',
        value: 'יצירת קשרים משמעותיים ואהבה',
      },
      {
        icon: <HandHeart />,
        text: 'תרומה לאחרים והשפעה חיובית',
        value: 'תרומה לאחרים והשפעה חיובית',
      },
      {
        icon: <BookOpen />,
        text: 'למידה, סקרנות והבנת העולם',
        value: 'למידה, סקרנות והבנת העולם',
      },
      {
        icon: <Sparkles />,
        text: 'יצירה, ביטוי עצמי והשארת חותם',
        value: 'יצירה, ביטוי עצמי והשארת חותם',
      },
      {
        icon: <ShieldCheck />,
        text: 'ביטחון, יציבות ושקט נפשי',
        value: 'ביטחון, יציבות ושקט נפשי',
      },
    ],
    metadata: { estimatedTime: 1 },
  },
  {
    worldId: 'PERSONALITY',
    id: 'personality_strengths_and_weaknesses',
    category: 'personality',
    subcategory: 'growth_aspirations',
    question:
      'מהן לדעתך שלוש החוזקות המשמעותיות ביותר שלך, ותחום אחד שהיית רוצה לשפר או להתפתח בו?',
    type: 'openText',
    depth: 'ADVANCED',
    isRequired: true, // חשוב למודעות עצמית
    minLength: 70,
    maxLength: 600,
    placeholder:
      'חוזקות: (לדוגמה: סבלנות, יצירתיות, יכולת הקשבה). תחום לשיפור: (לדוגמה: דחיינות, ביטחון עצמי בדיבור מול קהל).',
    metadata: { estimatedTime: 3 },
  },
  {
    worldId: 'PERSONALITY',
    id: 'personality_proud_moment',
    category: 'personality',
    subcategory: 'growth_aspirations',
    question:
      'ספר/י על הישג או רגע בחיים שאת/ה גאה בו במיוחד, ומה הוא מלמד עליך.',
    type: 'openText',
    depth: 'ADVANCED',
    isRequired: false,
    minLength: 50,
    maxLength: 500,
    placeholder:
      "זה יכול להיות הישג אישי, מקצועי, התגברות על קושי, עזרה למישהו וכו'.",
    metadata: { estimatedTime: 3 },
  },
  {
    worldId: 'PERSONALITY',
    id: 'personality_humor_style',
    category: 'personality',
    subcategory: 'self_perception', // חזרה לתפיסה עצמית, אבל כסיום קליל
    question: 'איזה סוג הומור הכי מאפיין אותך או מצחיק אותך?',
    type: 'iconChoice',
    depth: 'BASIC',
    isRequired: false,
    options: [
      {
        icon: <Smile />,
        text: 'שנון ומשחקי מילים',
        value: 'שנון ומשחקי מילים',
      },
      {
        icon: <Feather />,
        text: 'ציני וסרקסטי (בטוב טעם)',
        value: 'ציני וסרקסטי (בטוב טעם)',
      },
      { icon: <Lightbulb />, text: 'אירוני וחכם', value: 'אירוני וחכם' },
      { icon: <Cloud />, text: 'סיטואציוני וקליל', value: 'סיטואציוני וקליל' },
      { icon: <Heart />, text: 'הומור עצמי', value: 'הומור עצמי' },
      {
        icon: <HelpCircle />,
        text: 'לא בטוח/ה / הכל מצחיק אותי',
        value: 'לא בטוח/ה / הכל מצחיק אותי',
      },
    ],
    metadata: { estimatedTime: 1 },
  },
];
--- End of Content for personalityQuestions.tsx ---

================================================================================
Directory: C:\Users\user\Desktop\matchpoint\shidduch-system\src\components\questionnaire\questions\relationship
================================================================================

--------------------------------------------------------------------------------
File: C:\Users\user\Desktop\matchpoint\shidduch-system\src\components\questionnaire\questions\relationship\relationshipQuestions.tsx
--------------------------------------------------------------------------------
Content:
// src/components/questionnaire/questions/relationship/relationshipQuestions.tsx
import { Question } from '../../types/types';
import {
  Briefcase,
  BookOpen,
  Heart, // אהבה, חיבור רגשי, אינטימיות
  Users, // שותפות, חברות, משפחה מורחבת
  Home, // בית, משפחה גרעינית, יציבות
  MessageCircle, // תקשורת, דיאלוג
  Scale, // איזון, פשרה, חלוקת תפקידים, כספים
  Brain, // הבנה, פתרון בעיות, אינטלקט
  Sparkles, // קסם, כיף, רומנטיקה
  HandHeart, // תמיכה, שפות אהבה, אמפתיה
  ShieldCheck, // ביטחון, אמון, גבולות
  Link, // מחויבות, חיבור
  Map, // מרחב אישי, עצמאות (גם כדרך)
  Clock, // זמן איכות, קצב התפתחות
  Award, // הערכה, כבוד
  Baby, // ילדים, הורות
  Coffee, // בילויים, פנאי משותף
  Bed, // אינטימיות (יכול להיות גם רגשית)
  Gift, // מתנות (שפת אהבה)
  Info,
} from 'lucide-react';

export const relationshipQuestions: Question[] = [
  // --- חלק 1: מהות הקשר וציפיות מרכזיות ---
  {
    worldId: 'RELATIONSHIP',
    id: 'relationship_core_meaning',
    category: 'relationship',
    subcategory: 'core_expectations',
    question:
      'מהי בעיניך התמצית של קשר זוגי בריא ומספק? (בחר/י עד 2 אפשרויות עיקריות)',
    type: 'multiSelect',
    depth: 'BASIC',
    isRequired: true,
    options: [
      {
        icon: <Heart />,
        text: 'חיבור רגשי עמוק, אינטימיות והבנה הדדית',
        value: 'חיבור רגשי עמוק, אינטימיות והבנה הדדית',
      },
      {
        icon: <Users />,
        text: 'שותפות איתנה, חברות אמת ותמיכה הדדית',
        value: 'שותפות איתנה, חברות אמת ותמיכה הדדית',
      },
      {
        icon: <Link />,
        text: 'מחויבות, נאמנות וביטחון בקשר לטווח ארוך',
        value: 'מחויבות, נאמנות וביטחון בקשר לטווח ארוך',
      },
      {
        icon: <Sparkles />,
        text: 'צמיחה אישית וזוגית, למידה והתפתחות משותפת',
        value: 'צמיחה אישית וזוגית, למידה והתפתחות משותפת',
      },
      {
        icon: <Home />,
        text: 'בניית בית ומשפחה המבוססים על ערכים משותפים',
        value: 'בניית בית ומשפחה המבוססים על ערכים משותפים',
      },
    ],
    minSelections: 1,
    maxSelections: 2,
    metadata: {
      estimatedTime: 1,
      helpText: 'נסה/י לחשוב על מה הכי חיוני לך כדי להרגיש סיפוק בזוגיות.',
    },
  },
  {
    worldId: 'RELATIONSHIP',
    id: 'relationship_key_expectations_from_partner',
    category: 'relationship',
    subcategory: 'core_expectations',
    question: 'מהן שלוש הציפיות החשובות ביותר שלך מבן/בת הזוג בתוך הקשר?',
    type: 'multiSelectWithOther',
    depth: 'BASIC',
    isRequired: true,
    options: [
      {
        icon: <HandHeart />,
        text: 'שיתוף רגשי, הקשבה ותמיכה ברגעים קשים',
        value: 'שיתוף רגשי, הקשבה ותמיכה ברגעים קשים',
      },
      {
        icon: <MessageCircle />,
        text: 'תקשורת פתוחה, כנה ומכבדת',
        value: 'תקשורת פתוחה, כנה ומכבדת',
      },
      {
        icon: <Award />,
        text: 'הערכה, כבוד הדדי ופרגון',
        value: 'הערכה, כבוד הדדי ופרגון',
      },
      {
        icon: <ShieldCheck />,
        text: 'אמינות, יושרה ונאמנות',
        value: 'אמינות, יושרה ונאמנות',
      },
      {
        icon: <Scale />,
        text: 'נכונות לפשרה והבנת צרכים הדדיים',
        value: 'נכונות לפשרה והבנת צרכים הדדיים',
      },
      {
        icon: <Sparkles />,
        text: 'יכולת להנות יחד, חוש הומור וקלילות',
        value: 'יכולת להנות יחד, חוש הומור וקלילות',
      },
      {
        icon: <Users />,
        text: 'שותפות פעילה בניהול החיים המשותפים',
        value: 'שותפות פעילה בניהול החיים המשותפים',
      },
    ],
    minSelections: 1,
    maxSelections: 3,
    metadata: { estimatedTime: 1 },
  },
  {
    worldId: 'RELATIONSHIP',
    id: 'relationship_romantic_gestures_importance',
    category: 'relationship',
    subcategory: 'core_expectations',
    question:
      'עד כמה חשובות לך מחוות רומנטיות והפתעות קטנות בזוגיות? (1=פחות חשוב, 10=חשוב מאוד)',
    type: 'scale',
    depth: 'ADVANCED',
    isRequired: false,
    min: 1,
    max: 10,
    labels: { min: 'פחות חשוב לי', max: 'חשוב לי מאוד' },
    metadata: { estimatedTime: 1 },
  },

  // --- חלק 2: תקשורת, אינטימיות ופתרון קונפליקטים ---
  {
    worldId: 'RELATIONSHIP',
    id: 'relationship_communication_ideal',
    category: 'relationship',
    subcategory: 'communication_intimacy',
    question: 'איך נראית תקשורת זוגית אידיאלית בעיניך?',
    type: 'iconChoice',
    depth: 'BASIC',
    isRequired: true,
    options: [
      {
        icon: <MessageCircle />,
        text: 'פתוחה וישירה - אומרים הכל, גם דברים קשים, בכבוד',
        value: 'פתוחה וישירה - אומרים הכל, גם דברים קשים, בכבוד',
      },
      {
        icon: <Heart />,
        text: 'רגישה ואמפתית - דגש על הקשבה והבנת רגשות',
        value: 'רגישה ואמפתית - דגש על הקשבה והבנת רגשות',
      },
      {
        icon: <Brain />,
        text: 'עניינית וממוקדת פתרונות - פחות דיבורים, יותר מעשים',
        value: 'עניינית וממוקדת פתרונות - פחות דיבורים, יותר מעשים',
      },
      {
        icon: <Scale />,
        text: 'מאוזנת - שילוב של פתיחות, רגישות ומעשיות',
        value: 'מאוזנת - שילוב של פתיחות, רגישות ומעשיות',
      },
    ],
    metadata: { estimatedTime: 1 },
  },
  {
    worldId: 'RELATIONSHIP',
    id: 'relationship_expressing_needs_comfort',
    category: 'relationship',
    subcategory: 'communication_intimacy',
    question:
      'באיזו מידה את/ה מרגיש/ה בנוח לבטא צרכים, רצונות ורגשות (גם פגיעים) בפני בן/בת זוג?',
    type: 'scale',
    depth: 'ADVANCED',
    isRequired: false,
    min: 1, // לא בנוח כלל
    max: 10, // מאוד בנוח
    labels: { min: 'לא נוח לי', max: 'מאוד נוח לי' },
    metadata: {
      estimatedTime: 1,
      helpText: 'כנות ופתיחות הן מפתח. עד כמה זה טבעי לך?',
    },
  },
  {
    worldId: 'RELATIONSHIP',
    id: 'relationship_conflict_resolution_style',
    category: 'relationship',
    subcategory: 'communication_intimacy',
    question:
      'כשמתעוררת מחלוקת, איך נראה סגנון ההתמודדות שלך? חלק/י 100 נקודות בין הגישות השונות.',
    type: 'budgetAllocation',
    depth: 'ADVANCED',
    isRequired: true,
    totalPoints: 100,
    categories: [
      { label: 'דיבור מיידי וגלוי', icon: <MessageCircle /> },
      { label: 'פסק זמן ואז שיחה', icon: <Clock /> },
      { label: 'התמקדות בהבנה ופשרה', icon: <Heart /> },
      { label: 'ניתוח לוגי של הבעיה', icon: <Brain /> },
      { label: 'הימנעות מוויכוחים', icon: <Info /> },
    ],
    metadata: {
      estimatedTime: 2,
      helpText: 'רובנו משלבים כמה גישות. מהו השילוב שמאפיין אותך?',
    },
  },
  {
    worldId: 'RELATIONSHIP',
    id: 'relationship_intimacy_meaning',
    category: 'relationship',
    subcategory: 'communication_intimacy',
    question:
      'מהי אינטימיות עבורך בזוגיות, וכיצד היא באה לידי ביטוי (מעבר לפיזיות)?',
    type: 'openText',
    depth: 'ADVANCED',
    isRequired: true,
    minLength: 50,
    maxLength: 500,
    placeholder:
      'לדוגמה: שיתוף סודות, חולשות, חלומות, תחושת ביטחון, צחוק משותף, הבנה ללא מילים...',
    metadata: { estimatedTime: 2 },
  },
  {
    worldId: 'RELATIONSHIP',
    id: 'relationship_love_languages_give_receive',
    category: 'relationship',
    subcategory: 'communication_intimacy',
    question:
      "בחר/י עד שתי 'שפות אהבה' עיקריות שדרכן את/ה נוטה *להביע* אהבה, ועד שתיים שדרכן את/ה הכי אוהב/ת *לקבל* אהבה:",
    type: 'multiSelect',
    depth: 'ADVANCED',
    isRequired: true,
    options: [
      {
        icon: <Award />,
        text: 'מילים מאשרות (מחמאות, עידוד)',
        value: 'מילים מאשרות (מחמאות, עידוד)',
      },
      {
        icon: <Clock />,
        text: 'זמן איכות (תשומת לב מלאה, בילוי משותף)',
        value: 'זמן איכות (תשומת לב מלאה, בילוי משותף)',
      },
      {
        icon: <Gift />,
        text: 'קבלת מתנות (סמליות או משמעותיות)',
        value: 'קבלת מתנות (סמליות או משמעותיות)',
      },
      {
        icon: <HandHeart />,
        text: 'מעשי שירות (עזרה, הקלה במטלות)',
        value: 'מעשי שירות (עזרה, הקלה במטלות)',
      },
      {
        icon: <Bed />,
        text: 'מגע פיזי (חיבוק, קרבה, אינטימיות)',
        value: 'מגע פיזי (חיבוק, קרבה, אינטימיות)',
      },
    ],
    minSelections: 1,
    maxSelections: 4,
    metadata: {
      estimatedTime: 2,
      helpText:
        'זו שאלה כפולה. סמן/י מה מאפיין אותך גם בנתינה וגם בקבלה. אפשר לבחור אותה אופציה פעמיים אם היא דומיננטית בשני הכיוונים, או להתמקד ב-1-2 לכל כיוון.',
    },
  },

  // --- חלק 3: חיי יומיום, שותפות ומרחב אישי ---
  {
    worldId: 'RELATIONSHIP',
    id: 'relationship_daily_togetherness_vs_autonomy',
    category: 'relationship',
    subcategory: 'daily_life_partnership',
    question: 'באיזון שבין זמן משותף לזמן אישי/עצמאי בזוגיות, מהי ההעדפה שלך?',
    type: 'scale',
    depth: 'BASIC',
    isRequired: true,
    min: 1, // דגש על עצמאות ומרחב אישי
    max: 10, // דגש על זמן משותף וביחדנס
    labels: {
      min: 'הרבה מרחב אישי',
      max: 'הרבה זמן ביחד',
      middle: 'איזון גמיש',
    },
    metadata: { estimatedTime: 1 },
  },
  {
    worldId: 'RELATIONSHIP',
    id: 'relationship_shared_activities_preference',
    category: 'relationship',
    subcategory: 'daily_life_partnership',
    question:
      'אילו סוגי פעילויות חשוב לך במיוחד לחלוק עם בן/בת הזוג? (בחר/י עד 3)',
    type: 'multiSelect',
    depth: 'BASIC',
    isRequired: false,
    options: [
      {
        icon: <Coffee />,
        text: 'בילויים ופנאי (מסעדות, סרטים, טיולים)',
        value: 'בילויים ופנאי (מסעדות, סרטים, טיולים)',
      },
      {
        icon: <Home />,
        text: 'מטלות הבית וניהול משק הבית',
        value: 'מטלות הבית וניהול משק הבית',
      },
      {
        icon: <BookOpen />,
        text: 'תחומי עניין משותפים, תחביבים ולמידה',
        value: 'תחומי עניין משותפים, תחביבים ולמידה',
      },
      {
        icon: <Users />,
        text: 'מפגשים עם חברים ומשפחה',
        value: 'מפגשים עם חברים ומשפחה',
      },
      {
        icon: <Heart />,
        text: 'חוויות רוחניות או דתיות משותפות',
        value: 'חוויות רוחניות או דתיות משותפות',
      },
      {
        icon: <Briefcase />,
        text: 'תמיכה הדדית בקריירה וביעדים אישיים',
        value: 'תמיכה הדדית בקריירה וביעדים אישיים',
      },
    ],
    minSelections: 1,
    maxSelections: 3,
    metadata: { estimatedTime: 1 },
  },
  {
    worldId: 'RELATIONSHIP',
    id: 'relationship_financial_management_preference',
    category: 'relationship',
    subcategory: 'daily_life_partnership',
    question: 'מהי הגישה המועדפת עליך לניהול כספים משותף בזוגיות?',
    type: 'iconChoice',
    depth: 'BASIC',
    isRequired: true,
    options: [
      {
        icon: <Link />,
        text: 'שקיפות מלאה וחשבון משותף לכל',
        value: 'שקיפות מלאה וחשבון משותף לכל',
      },
      {
        icon: <Scale />,
        text: 'הפרדה מסוימת עם קופה משותפת להוצאות הבית',
        value: 'הפרדה מסוימת עם קופה משותפת להוצאות הבית',
      },
      {
        icon: <Users />,
        text: 'כל אחד מנהל את כספו, ומתחלקים בהוצאות גדולות',
        value: 'כל אחד מנהל את כספו, ומתחלקים בהוצאות גדולות',
      },
      {
        icon: <Info />,
        text: 'פחות קריטי לי איך, כל עוד יש הסכמה ותקשורת פתוחה',
        value: 'פחות קריטי לי איך, כל עוד יש הסכמה ותקשורת פתוחה',
      },
    ],
    metadata: { estimatedTime: 1 },
  },
  {
    worldId: 'RELATIONSHIP',
    id: 'relationship_division_of_labor_home',
    category: 'relationship',
    subcategory: 'daily_life_partnership',
    question: 'כיצד היית רוצה שתתבצע חלוקת התפקידים ומטלות הבית בזוגיות?',
    type: 'openText',
    depth: 'ADVANCED',
    isRequired: false,
    minLength: 50,
    maxLength: 400,
    placeholder:
      'לדוגמה: חלוקה שוויונית, לפי חוזקות, לפי זמן פנוי, מיקור חוץ של חלק מהמטלות, או גישה אחרת?',
    metadata: { estimatedTime: 2 },
  },

  // --- חלק 4: חזון משפחתי ועתיד משותף ---
  {
    worldId: 'RELATIONSHIP',
    id: 'relationship_family_vision_children',
    category: 'relationship',
    subcategory: 'family_future_vision',
    question: 'מהי שאיפתך לגבי הקמת משפחה והבאת ילדים לעולם (אם רלוונטי)?',
    type: 'iconChoice',
    depth: 'BASIC',
    isRequired: true,
    options: [
      {
        icon: <Baby />,
        text: 'מאוד רוצה ילדים, רצוי בקרוב יחסית',
        value: 'מאוד רוצה ילדים, רצוי בקרוב יחסית',
      },
      {
        icon: <Home />,
        text: 'רוצה ילדים בעתיד, אך ללא לחץ של זמן',
        value: 'רוצה ילדים בעתיד, אך ללא לחץ של זמן',
      },
      {
        icon: <Scale />,
        text: 'פתוח/ה לאפשרות של ילדים, אך זה לא בראש סדר העדיפויות',
        value: 'פתוח/ה לאפשרות של ילדים, אך זה לא בראש סדר העדיפויות',
      },
      {
        icon: <Heart />,
        text: 'מעדיפ/ה זוגיות ללא ילדים, או שזה פחות רלוונטי לי',
        value: 'מעדיפ/ה זוגיות ללא ילדים, או שזה פחות רלוונטי לי',
      },
      {
        icon: <Info />,
        text: 'יש לי כבר ילדים ואני פתוח/ה לעוד / לא מעוניינ/ת בעוד',
        value: 'יש לי כבר ילדים ואני פתוח/ה לעוד / לא מעוניינ/ת בעוד',
      },
    ],
    metadata: { estimatedTime: 1 },
  },
  {
    worldId: 'RELATIONSHIP',
    id: 'relationship_parenting_style_alignment_importance',
    category: 'relationship',
    subcategory: 'family_future_vision',
    question:
      'עד כמה חשובה לך התאמה בגישות ובערכים המרכזיים הנוגעים לחינוך ילדים? (1=פחות חשוב, 10=קריטי)',
    type: 'scale',
    depth: 'ADVANCED',
    isRequired: false, // יכול להיות לא רלוונטי לכולם בשלב זה
    min: 1,
    max: 10,
    labels: { min: 'פחות חשוב', max: 'קריטי מאוד' },
    metadata: { estimatedTime: 1 },
  },
  {
    worldId: 'RELATIONSHIP',
    id: 'relationship_extended_family_involvement',
    category: 'relationship',
    subcategory: 'family_future_vision',
    question:
      'איזו רמת מעורבות וקשר היית רוצה שתהיה למשפחות המוצא של שניכם בחיי הזוגיות והמשפחה שתקימו?',
    type: 'iconChoice',
    depth: 'BASIC',
    isRequired: false,
    options: [
      {
        icon: <Users />,
        text: 'מעורבות גבוהה וקשר הדוק, כחלק אינטגרלי',
        value: 'מעורבות גבוהה וקשר הדוק, כחלק אינטגרלי',
      },
      {
        icon: <Home />,
        text: 'קשר חם, תומך ומכבד, תוך שמירה על גבולות ברורים',
        value: 'קשר חם, תומך ומכבד, תוך שמירה על גבולות ברורים',
      },
      {
        icon: <Map />,
        text: 'קשר מכבד אך מצומצם יחסית, עם דגש על עצמאות הזוג',
        value: 'קשר מכבד אך מצומצם יחסית, עם דגש על עצמאות הזוג',
      },
      {
        icon: <Info />,
        text: 'גמיש/ה, תלוי באופי הקשרים ובדינמיקה שתווצר',
        value: 'גמיש/ה, תלוי באופי הקשרים ובדינמיקה שתווצר',
      },
    ],
    metadata: { estimatedTime: 1 },
  },
  {
    worldId: 'RELATIONSHIP',
    id: 'relationship_long_term_dreams_together',
    category: 'relationship',
    subcategory: 'family_future_vision',
    question:
      'מהם החלומות או השאיפות המשותפות הגדולות ביותר שהיית רוצה להגשים יחד עם בן/בת הזוג שלך בטווח הארוך (למשל, בעוד 10-20 שנה)?',
    type: 'openText',
    depth: 'ADVANCED',
    isRequired: false,
    minLength: 50,
    maxLength: 600,
    placeholder:
      'לדוגמה: הקמת פרויקט משותף, טיול גדול, השגת יעד רוחני, השפעה חברתית, חיים במקום מסוים...',
    metadata: { estimatedTime: 2 },
  },

  // --- חלק 5: אתגרים, צמיחה וסיום ---
  {
    worldId: 'RELATIONSHIP',
    id: 'relationship_handling_life_challenges_together',
    category: 'relationship',
    subcategory: 'growth_challenges',
    question:
      "כיצד את/ה רואה את ההתמודדות המשותפת שלכם כזוג עם אתגרי החיים הבלתי צפויים (קשיים כלכליים, בריאותיים, משפחתיים וכו')?",
    type: 'openText',
    depth: 'EXPERT',
    isRequired: false,
    minLength: 70,
    maxLength: 500,
    placeholder:
      'מהם מקורות הכוח שלכם כזוג? איך תתמכו זה בזו? מה חשוב לך שיקרה במצבים כאלה?',
    metadata: { estimatedTime: 2 },
  },
  {
    worldId: 'RELATIONSHIP',
    id: 'relationship_deal_breaker_summary_final',
    category: 'relationship',
    subcategory: 'growth_challenges',
    question:
      'לסיום עולם זה, מהו הדבר האחד שבלעדיו קשר זוגי פשוט לא יכול לעבוד עבורך, ומהו הדבר האחד שאת/ה הכי שואפ/ת אליו בזוגיות?',
    type: 'openText',
    depth: 'EXPERT', // שאלה מסכמת חשובה
    isRequired: true,
    minLength: 50, // תשובה קצרה וממוקדת
    maxLength: 400,
    placeholder: "ה'דיל ברייקר' שלי הוא... והשאיפה הגדולה ביותר שלי היא...",
    metadata: { estimatedTime: 2 },
  },
];
--- End of Content for relationshipQuestions.tsx ---

================================================================================
Directory: C:\Users\user\Desktop\matchpoint\shidduch-system\src\components\questionnaire\questions\religion
================================================================================

--------------------------------------------------------------------------------
File: C:\Users\user\Desktop\matchpoint\shidduch-system\src\components\questionnaire\questions\religion\faithQuestions.tsx
--------------------------------------------------------------------------------
Content:
import { Question } from "../../types/types";

export const faithQuestions: Question[] = [
  // Spiritual and Religious Values
  {
    worldId: "RELIGION",  id: "spiritualMoment",
    category: "values",
    subcategory: "spiritual",
    question: "מהו הרגע הכי רוחני שחווית בחייך?",
    type: "openText",
    depth: "BASIC",
    isRequired: true,
    placeholder: "ספר/י על חוויה משמעותית...",
    minLength: 20,
    maxLength: 500,
  },
  {
    worldId: "RELIGION",
      id: "favoriteHoliday",
    category: "values",
    subcategory: "spiritual",
    question: "איזה חג יהודי הכי משמעותי עבורך?",
    type: "singleChoice",
    depth: "BASIC",
    isRequired: true,
    options: [
      { value: "roshHashana", text: "ראש השנה" },
      { value: "yomKippur", text: "יום כיפור" },
      { value: "pesach", text: "פסח" },
      { value: "shavuot", text: "שבועות" },
    ],
  },

  // Personal Values
  {
    worldId: "RELIGION",
    id: "coreValues",
    category: "values",
    subcategory: "personal",
    question: "מהם שלושת הערכים החשובים ביותר בחייך?",
    type: "multiSelect",
    depth: "BASIC",
    isRequired: true,
    options: [
      { value: "honesty", text: "יושר ואמת" },
      { value: "family", text: "משפחה" },
      { value: "learning", text: "לימוד והתפתחות" },
      { value: "kindness", text: "חסד" },
      { value: "tradition", text: "מסורת" },
      { value: "success", text: "הצלחה" },
    ],
    minSelections: 1,
    maxSelections: 3,
  },
  {worldId: "RELIGION",
    id: "lifeGoals",
    category: "values",
    subcategory: "personal",
    question: "מהי המטרה העיקרית שלך בחיים?",
    type: "openText",
    depth: "ADVANCED",
    isRequired: true,
    placeholder: "שתף/י במטרות החיים שלך...",
    minLength: 30,
    maxLength: 500,
  },

  // Community Values
  {worldId: "RELIGION",
    id: "communityRole",
    category: "values",
    subcategory: "community",
    question: "איזה תפקיד אתה רואה לעצמך בקהילה?",
    type: "multiSelect",
    depth: "BASIC",
    isRequired: true,
    options: [
      { value: "leader", text: "מנהיג/מוביל" },
      { value: "supporter", text: "תומך ומסייע" },
      { value: "teacher", text: "מחנך/מלמד" },
      { value: "participant", text: "משתתף פעיל" },
    ],
    minSelections: 1,
    maxSelections: 2,
  },
  {worldId: "RELIGION",
    id: "givingPhilosophy",
    category: "values",
    subcategory: "community",
    question: "מהי תפיסת עולמך בנושא נתינה וצדקה?",
    type: "openText",
    depth: "ADVANCED",
    isRequired: true,
    placeholder: "תאר/י את גישתך לנתינה...",
    minLength: 30,
    maxLength: 500,
  },

  // Future Values
  {worldId: "RELIGION",
    id: "nextGeneration",
    category: "values",
    subcategory: "future",
    question: "מה הערכים החשובים ביותר שתרצה להעביר לדור הבא?",
    type: "multiSelect",
    depth: "EXPERT",
    isRequired: true,
    options: [
      { value: "torah", text: "תורה ומסורת" },
      { value: "ethics", text: "מוסר וערכים" },
      { value: "education", text: "חינוך והשכלה" },
      { value: "independence", text: "עצמאות" },
      { value: "community", text: "קהילתיות" },
    ],
    minSelections: 1,
    maxSelections: 3,
  },
  {worldId: "RELIGION",
    id: "israelVision",
    category: "values",
    subcategory: "future",
    question: "מהו החזון שלך למדינת ישראל?",
    type: "openText",
    depth: "EXPERT",
    isRequired: true,
    placeholder: "שתף/י את חזונך...",
    minLength: 50,
    maxLength: 1000,
  }
];
--- End of Content for faithQuestions.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\user\Desktop\matchpoint\shidduch-system\src\components\questionnaire\questions\religion\practicalReligionQuestions.tsx
--------------------------------------------------------------------------------
Content:
import { Question } from "../../types/types";

export const practicalQuestions: Question[] = [
  // Basic Principles
  {worldId: "RELIGION",
    id: "religiousWorldview",
    category: "religiousLifestyle",
    subcategory: "basicPrinciples",
    question: "מהי השקפת עולמך הדתית?",
    type: "openText",
    depth: "BASIC",
    isRequired: true,
    placeholder: "תאר/י את תפיסת עולמך הדתית...",
    minLength: 20,
    maxLength: 500,
  },
  {worldId: "RELIGION",
    id: "religiousIdentity",
    category: "religiousLifestyle",
    subcategory: "basicPrinciples",
    question: "איך אתה מגדיר את זהותך הדתית?",
    type: "singleChoice",
    depth: "BASIC",
    isRequired: true,
    options: [
      { value: "charedi", text: "חרדי" },
      { value: "datiLeumi", text: "דתי לאומי" },
      { value: "masorti", text: "מסורתי" },
      { value: "other", text: "אחר" },
    ],
  },
  {worldId: "RELIGION",
    id: "halachaImportance",
    category: "religiousLifestyle",
    subcategory: "basicPrinciples",
    question: "מה מקומה של ההלכה בחיי היומיום שלך?",
    type: "openText",
    depth: "BASIC",
    isRequired: true,
    placeholder: "תאר/י את מקום ההלכה בחייך...",
    minLength: 20,
    maxLength: 500,
  },

  // Prayer and Learning
  {worldId: "RELIGION",
    id: "minyanImportance",
    category: "religiousLifestyle",
    subcategory: "prayerAndLearning",
    question: "מהי חשיבות התפילה במניין בחייך?",
    type: "singleChoice",
    depth: "BASIC",
    isRequired: true,
    options: [
      { value: "veryImportant", text: "חשוב מאוד - משתדל להתפלל כל תפילה במניין" },
      { value: "important", text: "חשוב - משתדל לפחות פעם ביום" },
      { value: "sometimes", text: "לעיתים - בעיקר בשבתות וחגים" },
      { value: "notImportant", text: "פחות חשוב לי" },
    ],
  },
  {worldId: "RELIGION",
    id: "dailyLearning",
    category: "religiousLifestyle",
    subcategory: "prayerAndLearning",
    question: "איך נראה סדר הלימוד היומי שלך?",
    type: "multiSelect",
    depth: "BASIC",
    isRequired: true,
    options: [
      { value: "dafYomi", text: "דף יומי" },
      { value: "halacha", text: "הלכה יומית" },
      { value: "parasha", text: "פרשת שבוע" },
      { value: "chassidut", text: "חסידות" },
      { value: "mussar", text: "מוסר" },
      { value: "other", text: "אחר" },
    ],
    minSelections: 1,
    maxSelections: 4,
  },
  
  // Shabbat and Holidays
  {worldId: "RELIGION",
    id: "idealShabbat",
    category: "religiousLifestyle",
    subcategory: "shabbatAndHolidays",
    question: "איך נראית השבת האידיאלית בעיניך?",
    type: "openText",
    depth: "BASIC",
    isRequired: true,
    placeholder: "תאר/י את השבת המושלמת עבורך...",
    minLength: 20,
    maxLength: 500,
  },
  {worldId: "RELIGION",
    id: "shabbatRestrictions",
    category: "religiousLifestyle",
    subcategory: "shabbatAndHolidays",
    question: "מה יחסך לחומרות בהלכות שבת?",
    type: "multiSelect",
    depth: "ADVANCED",
    isRequired: false,
    options: [
      { value: "strict", text: "מחמיר בהלכות שבת" },
      { value: "basic", text: "שומר על ההלכות הבסיסיות" },
      { value: "flexible", text: "גמיש יותר בפרשנות" },
      { value: "situational", text: "תלוי במצב ובנסיבות" },
    ],
    minSelections: 1,
    maxSelections: 2,
  },

  // Kashrut and Halacha
  {worldId: "RELIGION",
    id: "kashrutLevel",
    category: "religiousLifestyle",
    subcategory: "kashrutAndHalacha",
    question: "מה רמת ההקפדה שלך בכשרות?",
    type: "singleChoice",
    depth: "BASIC",
    isRequired: true,
    options: [
      { value: "mehadrin", text: "מהדרין בלבד" },
      { value: "regular", text: "כשרות רגילה" },
      { value: "basic", text: "כשרות בסיסית" },
      { value: "flexible", text: "גמיש יותר" },
    ],
  },
  {worldId: "RELIGION",
    id: "eatingOut",
    category: "religiousLifestyle",
    subcategory: "kashrutAndHalacha",
    question: "איך אתה מתייחס לאכילה מחוץ לבית?",
    type: "multiSelect",
    depth: "BASIC",
    isRequired: true,
    options: [
      { value: "onlyKosher", text: "רק במסעדות כשרות" },
      { value: "familyHome", text: "אוכל בבתים של משפחה" },
      { value: "friendsHome", text: "אוכל אצל חברים" },
      { value: "flexible", text: "גמיש בהתאם לנסיבות" },
    ],
    minSelections: 1,
    maxSelections: 3,
  },

  // Modesty and Public Space
  {worldId: "RELIGION",
    id: "modestyView",
    category: "religiousLifestyle",
    subcategory: "modestyAndPublic",
    question: "מהי השקפתך בענייני צניעות?",
    type: "openText",
    depth: "BASIC",
    isRequired: true,
    placeholder: "תאר/י את תפיסתך בנושא צניעות...",
    minLength: 20,
    maxLength: 500,
  },
  {worldId: "RELIGION",
    id: "genderSeparation",
    category: "religiousLifestyle",
    subcategory: "modestyAndPublic",
    question: "איך אתה מתייחס להפרדה בין גברים לנשים?",
    type: "singleChoice",
    depth: "ADVANCED",
    isRequired: true,
    options: [
      { value: "fullSeparation", text: "תומך בהפרדה מלאה" },
      { value: "situational", text: "תלוי בנסיבות ובמקום" },
      { value: "flexible", text: "גמיש יותר בנושא" },
      { value: "against", text: "מתנגד להפרדה" },
    ],
  },
];
--- End of Content for practicalReligionQuestions.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\user\Desktop\matchpoint\shidduch-system\src\components\questionnaire\questions\religion\religionQuestions.tsx
--------------------------------------------------------------------------------
Content:
// src/components/questionnaire/questions/religion/religionQuestions.tsx
import { Question } from "../../types/types";
import {
  Scroll,        // תעודה, זהות דתית, מסורת, לימוד (גם)
  BookOpen,      // לימוד תורה, השקפה, ספרים
  Users,         // קהילה, חברה, מניין
  Home,          // בית, אווירה דתית, משפחה
  Target,        // הלכה, קיום מצוות, מיקוד
  Scale,         // איזון, גישה להלכה, פלורליזם
  Heart,         // אמונה, רגש דתי, חיבור רוחני
  Sparkles,      // רוחניות, חוויה, התעלות
  ShieldCheck,   // הקפדה, כשרות, צניעות
  Flag,          // מדינה, ציונות
  HandHeart,     // חסד, נתינה (בהקשר דתי, מידות)
  Lightbulb,     // פתיחות מחשבתית, רעיונות חדשים
  Info,
  PocketKnife,   // צבא/שירות לאומי (בהקשר דתי)
} from "lucide-react";

export const religionQuestions: Question[] = [
  // --- חלק 1: זהות, אמונה והשקפה דתית ---
  {
    worldId: "RELIGION",
    id: "religion_self_definition_primary",
    category: "religion",
    subcategory: "identity_belief",
    question: "איזו הגדרה על הרצף הדתי-רוחני הכי משקפת את מי שאת/ה היום?",
    type: "iconChoice",
    depth: "BASIC",
    isRequired: true,
    options: [
      { icon: <Scroll />, text: "חרדי/ת (למשל: ליטאי, חסידי, ספרדי)", value: "חרדי/ת (למשל: ליטאי, חסידי, ספרדי)" },
      { icon: <BookOpen />, text: "דתי/ה לאומי/ת - תורני/ת (למשל: חרד\"ל, ישיבתי)", value: "דתי/ה לאומי/ת - תורני/ת (למשל: חרד\"ל, ישיבתי)" },
      { icon: <Sparkles />, text: "דתי/ה לאומי/ת - מרכז / פתוח/ה (למשל: דתי-לייט, ליברלי)", value: "דתי/ה לאומי/ת - מרכז / פתוח/ה (למשל: דתי-לייט, ליברלי)" },
      { icon: <Heart />, text: "מסורתי/ת (למשל: שומר/ת מסורת, מחובר/ת לבית הכנסת)", value: "מסורתי/ת (למשל: שומר/ת מסורת, מחובר/ת לבית הכנסת)" },
      { icon: <Users />, text: "חילוני/ת עם זיקה למסורת וליהדות", value: "חילוני/ת עם זיקה למסורת וליהדות" },
      { icon: <Lightbulb />, text: "רוחני/ת בדרכי (לאו דווקא במסגרת זרם מוגדר)", value: "רוחני/ת בדרכי (לאו דווקא במסגרת זרם מוגדר)" },
      { icon: <Info />, text: "אחר/ת או בתהליך גיבוש (ניתן לפרט בשאלה הבאה)", value: "אחר/ת או בתהליך גיבוש (ניתן לפרט בשאלה הבאה)" },
    ],
    metadata: { estimatedTime: 1, helpText: "בחר/י את התיאור שהכי קרוב לליבך ולדרך חייך." },
  },
  {
    worldId: "RELIGION",
    id: "religion_identity_elaboration_personal",
    category: "religion",
    subcategory: "identity_belief",
    question: "בהמשך להגדרתך, ספר/י בקצרה מה המשמעות המעשית של זהותך הדתית/רוחנית עבורך בחיי היומיום.",
    type: "openText",
    depth: "ADVANCED",
    isRequired: true,
    minLength: 40,
    maxLength: 400,
    placeholder: "לדוגמה: אילו מנהגים חשובים לך? איך זה משפיע על קבלת החלטות? מה מקור ההשראה שלך?",
    metadata: { estimatedTime: 1 },
  },
  {
    worldId: "RELIGION",
    id: "religion_faith_core_principles",
    category: "religion",
    subcategory: "identity_belief",
    question: "מהם עקרונות האמונה המרכזיים שמנחים אותך? (בחר/י 1-3)",
    type: "multiSelect",
    depth: "ADVANCED",
    isRequired: false,
    options: [
      { icon: <Heart />, text: "אמונה בקב\"ה ובבחירת עם ישראל", value: "אמונה בקב\"ה ובבחירת עם ישראל" },
      { icon: <Scroll />, text: "תורה מן השמיים ומחויבות להלכה", value: "תורה מן השמיים ומחויבות להלכה" },
      { icon: <Sparkles />, text: "חיפוש מתמיד אחר משמעות וחיבור רוחני", value: "חיפוש מתמיד אחר משמעות וחיבור רוחני" },
      { icon: <HandHeart />, text: "תיקון עולם, צדק חברתי וחסד", value: "תיקון עולם, צדק חברתי וחסד" },
      { icon: <Flag />, text: "גאולת ישראל וקיבוץ גלויות בארץ ישראל", value: "גאולת ישראל וקיבוץ גלויות בארץ ישראל" },
      { icon: <Users />, text: "ערבות הדדית ואחדות עם ישראל", value: "ערבות הדדית ואחדות עם ישראל" },
    ],
    minSelections: 1,
    maxSelections: 3,
    metadata: { estimatedTime: 1 },
  },
  {
    worldId: "RELIGION",
    id: "religion_rabbinic_guidance_role",
    category: "religion",
    subcategory: "identity_belief",
    question: "מהי החשיבות של דמות רבנית או הנהגה רוחנית אישית עבורך? (1=לא משמעותי, 10=משמעותי מאוד)",
    type: "scale",
    depth: "BASIC",
    isRequired: false,
    min: 1,
    max: 10,
    labels: { min: "לא משמעותי", max: "משמעותי מאוד" },
    metadata: { estimatedTime: 1, helpText: "האם את/ה נוהג/ת להתייעץ בשאלות הלכה, הנהגה או החלטות אישיות?" },
  },

  // --- חלק 2: שמירת מצוות והלכה מעשית ---
  {
    worldId: "RELIGION",
    id: "religion_shabbat_observance_level_practical",
    category: "religion",
    subcategory: "practical_observance",
    question: "איזו רמה של שמירת שבת מאפיינת את ביתך ואת התנהלותך האישית?",
    type: "iconChoice",
    depth: "BASIC",
    isRequired: true,
    options: [
      { icon: <ShieldCheck />, text: "הקפדה מלאה על כל ההלכות ודקדוקיהן", value: "הקפדה מלאה על כל ההלכות ודקדוקיהן" },
      { icon: <Target />, text: "שמירה על עיקרי ההלכות (ללא חשמל, בישול, נסיעה)", value: "שמירה על עיקרי ההלכות (ללא חשמל, בישול, נסיעה)" },
      { icon: <Scale />, text: "שמירה על אווירת השבת (קידוש, סעודות, תפילה) עם גמישות מסוימת בהלכות", value: "שמירה על אווירת השבת (קידוש, סעודות, תפילה) עם גמישות מסוימת בהלכות" },
      { icon: <Home />, text: "שמירת שבת בעיקר בבית ובמשפחה, פחות במרחב הציבורי", value: "שמירת שבת בעיקר בבית ובמשפחה, פחות במרחב הציבורי" },
      { icon: <Info />, text: "אינני שומר/ת שבת באופן הלכתי", value: "אינני שומר/ת שבת באופן הלכתי" },
    ],
    metadata: { estimatedTime: 1 },
  },
  {
    worldId: "RELIGION",
    id: "religion_kashrut_observance_details",
    category: "religion",
    subcategory: "practical_observance",
    question: "פרט/י את רמת הקפדתך על כשרות: סוג הכשר, הקפדה על כלים, אכילה בחוץ, בישולי גויים וכו'.",
    type: "openText",
    depth: "ADVANCED",
    isRequired: true,
    minLength: 40,
    maxLength: 400,
    placeholder: "לדוגמה: 'מקפיד/ה על מהדרין, כלים נפרדים, אוכל/ת רק בחוץ עם תעודה מהודרת, לא אוכל/ת בישולי גויים'.",
    metadata: { estimatedTime: 1 },
  },
  {
    worldId: "RELIGION",
    id: "religion_daily_prayer_practice",
    category: "religion",
    subcategory: "practical_observance",
    question: "כיצד נראית שגרת התפילה היומית שלך (שחרית, מנחה, ערבית, במניין/ביחידות)?",
    type: "openText",
    depth: "ADVANCED",
    isRequired: false,
    minLength: 0,
    maxLength: 300,
    placeholder: "לדוגמה: '3 תפילות במניין קבוע', 'שחרית וערבית ביחידות, מנחה במניין בעבודה', 'מתפלל/ת כשמתאפשר'.",
    metadata: { estimatedTime: 1 },
  },
  {
    worldId: "RELIGION",
    id: "religion_modesty_personal_approach",
    category: "religion",
    subcategory: "practical_observance",
    question: "מהי גישתך האישית לצניעות (לבוש, דיבור, התנהגות בין המינים) וכיצד היא מתבטאת?",
    type: "openText",
    depth: "ADVANCED",
    isRequired: true,
    minLength: 40,
    maxLength: 400,
    placeholder: "לדוגמה: כיסוי ראש (סוג), לבוש (אורך שרוול/חצאית), שמירת נגיעה, סגנון דיבור.",
    metadata: { estimatedTime: 1 },
  },
  {
    worldId: "RELIGION",
    id: "religion_family_purity_observance",
    category: "religion",
    subcategory: "practical_observance",
    question: "מהי גישתך ורמת הקפדתך על הלכות טהרת המשפחה?",
    type: "iconChoice",
    depth: "ADVANCED",
    isRequired: true,
    options: [
      { icon: <ShieldCheck />, text: "הקפדה מלאה על כל ההלכות והחומרות המקובלות", value: "הקפדה מלאה על כל ההלכות והחומרות המקובלות" },
      { icon: <Target />, text: "הקפדה על עיקרי ההלכות כפי שמקובל בקהילתי", value: "הקפדה על עיקרי ההלכות כפי שמקובל בקהילתי" },
      { icon: <Scale />, text: "שואפ/ת לשמור, עם רצון ללמוד ולהתחזק בנושא", value: "שואפ/ת לשמור, עם רצון ללמוד ולהתחזק בנושא" },
      { icon: <Info />, text: "הנושא אינו רלוונטי לי / דורש דיון מעמיק יותר", value: "הנושא אינו רלוונטי לי / דורש דיון מעמיק יותר" },
    ],
    metadata: { estimatedTime: 1, helpText: "זו שאלה רגישה וחשובה. אנא ענה/י בכנות." },
  },

  // --- חלק 3: קהילה, חברה והשפעות חיצוניות ---
  {
    worldId: "RELIGION",
    id: "religion_community_involvement_nature",
    category: "religion",
    subcategory: "community_influence",
    question: "באיזו מידה וכיצד את/ה מעורב/ת בקהילה הדתית שלך (שיעורים, אירועים, תפקידים, התנדבות)?",
    type: "openText",
    depth: "ADVANCED",
    isRequired: false,
    minLength: 0,
    maxLength: 400,
    placeholder: "ספר/י על הפעילויות והקשרים שלך במסגרת הקהילה.",
    metadata: { estimatedTime: 1 },
  },
  {
    worldId: "RELIGION",
    id: "religion_social_circle_religious_diversity",
    category: "religion",
    subcategory: "community_influence",
    question: "עד כמה המעגל החברתי הקרוב שלך מגוון מבחינה דתית?",
    type: "iconChoice",
    depth: "BASIC",
    isRequired: false,
    options: [
      { icon: <Users />, text: "רובו ככולו מורכב מאנשים ברמה דתית דומה לשלי", value: "רובו ככולו מורכב מאנשים ברמה דתית דומה לשלי" },
      { icon: <Scale />, text: "יש לי חברים ממגוון רמות דתיות והשקפות", value: "יש לי חברים ממגוון רמות דתיות והשקפות" },
      { icon: <Home />, text: "המעגל החברתי שלי מצומצם יחסית ופחות מוגדר דתית", value: "המעגל החברתי שלי מצומצם יחסית ופחות מוגדר דתית" },
    ],
    metadata: { estimatedTime: 1 },
  },
  {
    worldId: "RELIGION",
    id: "religion_attitude_towards_secular_world_engagement",
    category: "religion",
    subcategory: "community_influence",
    question: "מהי גישתך לשילוב והתמודדות עם העולם החילוני והתרבות הכללית (לימודים, עבודה, מדיה, בילויים)?",
    type: "openText",
    depth: "ADVANCED",
    isRequired: false,
    minLength: 40,
    maxLength: 400,
    placeholder: "לדוגמה: חיים בתוך 'בועה' מוגנת, שילוב תוך סינון, פתיחות מלאה, השפעה הדדית...",
    metadata: { estimatedTime: 1 },
  },
  {
    worldId: "RELIGION",
    id: "religion_state_and_army_service_view",
    category: "religion",
    subcategory: "community_influence",
    question: "מהי עמדתך לגבי שירות בצבא/שירות לאומי, והיחס הכללי למדינת ישראל ומוסדותיה?",
    type: "openText",
    depth: "ADVANCED",
    isRequired: false,
    minLength: 0,
    maxLength: 400,
    placeholder: "לדוגמה: חשיבות השירות, סוג השירות המועדף, יחס למדינה כ'אתחלתא דגאולה', וכו'.",
    metadata: { estimatedTime: 1 },
  },

  // --- חלק 4: התאמה דתית בזוגיות וחינוך ילדים ---
  {
    worldId: "RELIGION",
    id: "religion_partner_ideal_religious_profile",
    category: "religion",
    subcategory: "relationship_family",
    question: "תאר/י את הפרופיל הדתי-רוחני האידיאלי של בן/בת הזוג שאת/ה מחפש/ת (רמת דתיות, השקפה, הקפדה על מצוות).",
    type: "openText",
    depth: "BASIC", // קריטי לשדכן
    isRequired: true,
    minLength: 40,
    maxLength: 400,
    placeholder: "נסה/י להיות כמה שיותר ספציפי/ת. מהם הדברים החשובים לך ביותר בהקשר זה?",
    metadata: { estimatedTime: 1 },
  },
  {
    worldId: "RELIGION",
    id: "religion_flexibility_religious_differences_partner",
    category: "religion",
    subcategory: "relationship_family",
    question: "עד כמה את/ה גמיש/ה ומוכנ/ה לפשרות אם יהיו פערים מסוימים ברמה הדתית או בגישה ההלכתית בינך לבין בן/בת הזוג?",
    type: "scale",
    depth: "ADVANCED",
    isRequired: true,
    min: 1, // כלל לא גמיש/ה
    max: 10, // מאוד גמיש/ה ומוכנ/ה לפשרות
    labels: { min: "כלל לא גמיש/ה", max: "מאוד גמיש/ה" },
    metadata: { estimatedTime: 1, helpText: "חשוב/י על תחומים שבהם תוכל/י להתגמש יותר או פחות." },
  },
  {
    worldId: "RELIGION",
    id: "religion_children_education_religious_vision",
    category: "religion",
    subcategory: "relationship_family",
    question: "איזה סוג של בית וחינוך דתי/תורני היית רוצה להעניק לילדיך, ומהן הציפיות שלך מבן/בת הזוג בהקשר זה?",
    type: "openText",
    depth: "ADVANCED",
    isRequired: true, 
    minLength: 50,
    maxLength: 500,
    placeholder: "לדוגמה: סוג מוסדות חינוך, אווירה דתית בבית, דגש על ערכים ספציפיים, מעורבות הורית בלימוד.",
    metadata: { estimatedTime: 2 },
  },
  {
    worldId: "RELIGION",
    id: "religion_joint_spiritual_growth_expectations",
    category: "religion",
    subcategory: "relationship_family",
    question: "מהן ציפיותיך מבן/בת הזוג בנוגע לצמיחה רוחנית והתפתחות דתית משותפת (למשל, לימוד משותף, שיח רוחני, קיום מצוות יחד)?",
    type: "openText",
    depth: "EXPERT",
    isRequired: false,
    minLength: 0,
    maxLength: 400,
    placeholder: "האם חשוב לך להתפתח יחד? האם יש פעילויות ספציפיות שהיית רוצה לעשות כזוג?",
    metadata: { estimatedTime: 1 },
  },
  // --- חלק 5: סיכום ומבט אישי ---
  {
    worldId: "RELIGION",
    id: "religion_most_meaningful_mitzvah_or_practice",
    category: "religion",
    subcategory: "personal_reflection",
    question: "מהי המצווה או המנהג הדתי/רוחני שהכי משמעותי עבורך באופן אישי, ומדוע?",
    type: "openText",
    depth: "EXPERT",
    isRequired: false,
    minLength: 30,
    maxLength: 300,
    placeholder: "שתפ/י משהו שנוגע לליבך ומבטא את החיבור האישי שלך.",
    metadata: { estimatedTime: 1 },
  },
  {
    worldId: "RELIGION",
    id: "religion_final_thoughts_or_clarifications",
    category: "religion",
    subcategory: "personal_reflection",
    question: "האם יש משהו נוסף שחשוב לך להבהיר או להוסיף לגבי עולמך הדתי, אמונותיך, או ציפיותיך הדתיות מבן/בת זוג, שלא נשאלת עליו?",
    type: "openText",
    depth: "EXPERT",
    isRequired: false,
    minLength: 0,
    maxLength: 400,
    placeholder: "זה המקום להוסיף כל פרט או הבהרה שמרגישים לך חשובים.",
    metadata: { estimatedTime: 1 },
  },
];
--- End of Content for religionQuestions.tsx ---

================================================================================
Directory: C:\Users\user\Desktop\matchpoint\shidduch-system\src\components\questionnaire\questions\values
================================================================================

--------------------------------------------------------------------------------
File: C:\Users\user\Desktop\matchpoint\shidduch-system\src\components\questionnaire\questions\values\valuesQuestions.tsx
--------------------------------------------------------------------------------
Content:
// src/components/questionnaire/questions/values/valuesQuestions.tsx
import { Question } from '../../types/types';
import {
  Heart, // ערכים, אהבה, רגש, משפחה
  Scale, // איזון, צדק, כלכלה, סדרי עדיפויות
  Brain, // חשיבה, השכלה, אמונות
  BookOpen, // לימוד, תורה, רוחניות, השכלה
  Users, // קהילה, חברה, התנדבות
  Home, // בית, משפחה, סביבה
  Briefcase, // קריירה, עבודה
  Target, // מטרות, עקרונות
  PiggyBank, // כסף, חיסכון, כלכלה
  HandHeart, // נתינה, חסד, התנדבות
  TrendingUp, // צמיחה, התפתחות, שאיפות
  Leaf, // טבע, סביבה, פשטות
  Sparkles, // רוחניות, השראה
  ShieldCheck, // ביטחון, יושרה
  Flag, // מדינה, ציונות
  HelpCircle, // שאלות נוספות, הבהרה
  Info, // מידע כללי
  DollarSign, // כסף, נתינה
  Activity, // פעילות, סגנון חיים
  MessageCircle,
} from 'lucide-react';

export const valuesQuestions: Question[] = [
  // --- חלק 1: ערכי ליבה וסדרי עדיפויות ---
  {
    worldId: 'VALUES',
    id: 'values_core_identification',
    category: 'values',
    subcategory: 'core_values',
    question:
      "חלק/י 100 'נקודות ערך' בין הערכים הבאים כדי להראות מהם הדברים החשובים לך ביותר בחיים.",
    type: 'budgetAllocation',
    depth: 'BASIC',
    isRequired: true,
    totalPoints: 100,
    categories: [
      { label: 'משפחה וקשרים קרובים', icon: <Heart /> },
      { label: 'יושרה, אמינות וכנות', icon: <ShieldCheck /> },
      { label: 'רוחניות, אמונה ומסורת', icon: <BookOpen /> },
      { label: 'צמיחה אישית והתפתחות', icon: <TrendingUp /> },
      { label: 'נתינה, חסד ותרומה לחברה', icon: <HandHeart /> },
      { label: 'קריירה והצלחה מקצועית', icon: <Briefcase /> },
      { label: 'ביטחון ויציבות כלכלית', icon: <PiggyBank /> },
      { label: 'צדק חברתי ושוויון', icon: <Scale /> },
      { label: 'יצירתיות וביטוי עצמי', icon: <Sparkles /> },
      { label: 'חיבור לטבע וסביבה', icon: <Leaf /> },
      { label: 'בריאות ואורח חיים פעיל', icon: <Activity /> },
      { label: 'קהילתיות ומעורבות', icon: <Users /> },
    ],
    metadata: {
      estimatedTime: 3,
      helpText:
        'זו הזדמנות להראות את סדר העדיפויות הפנימי שלך. אין צורך לחלק נקודות לכל הערכים.',
    },
  },
  {
    worldId: 'VALUES',
    id: 'values_core_elaboration',
    category: 'values',
    subcategory: 'core_values',
    question:
      'בחר/י אחד או שניים מהערכים שסימנת כקריטיים ביותר, והסבר/י בקצרה כיצד הם באים לידי ביטוי בחיי היומיום שלך או בבחירות משמעותיות שעשית.',
    type: 'openText',
    depth: 'ADVANCED',
    isRequired: true,
    minLength: 70,
    maxLength: 600,
    placeholder:
      "לדוגמה: אם 'משפחה' הוא ערך עליון, איך זה מתבטא בהחלטות שלך, בזמן שאת/ה מקדיש/ה, או בתמיכה במשפחה?",
    metadata: { estimatedTime: 3 },
  },
  {
    worldId: 'VALUES',
    id: 'values_life_priorities_allocation',
    category: 'values',
    subcategory: 'life_priorities',
    question:
      'אם היית צריך/ה לחלק 100 נקודות המייצגות את סך האנרגיה, הזמן והחשיבות שאת/ה מקדיש/ה בחייך *כיום*, כיצד היית מחלק/ת אותן בין התחומים הבאים?',
    type: 'budgetAllocation',
    depth: 'ADVANCED',
    isRequired: true,
    totalPoints: 100,
    categories: [
      {
        label: 'זוגיות (אם קיימת) וחיפוש זוגיות',
        icon: <Heart />,
        min: 0,
        max: 100,
        description: 'זמן ומאמץ המושקעים בקשר קיים או בחיפוש פעיל אחר זוגיות.',
      },
      {
        label: 'משפחה (הורים, אחים, ילדים אם יש)',
        icon: <Home />,
        min: 0,
        max: 100,
        description: 'קשרים, תמיכה וזמן המוקדשים למשפחה המורחבת והגרעינית.',
      },
      {
        label: 'קריירה ופרנסה',
        icon: <Briefcase />,
        min: 0,
        max: 100,
        description:
          'עבודה, לימודים מקצועיים, פיתוח קריירה והשגת יציבות כלכלית.',
      },
      {
        label: 'רוחניות, דת ולימוד תורה',
        icon: <BookOpen />,
        min: 0,
        max: 100,
        description: 'תפילה, לימוד, קיום מצוות ועיסוק בצד הרוחני של החיים.',
      },
      {
        label: 'חברים, קהילה והתנדבות',
        icon: <Users />,
        min: 0,
        max: 100,
        description:
          'קשרים חברתיים, מעורבות קהילתית, פעילויות התנדבות ותרומה לחברה.',
      },
      {
        label: 'פנאי, תחביבים ובריאות אישית',
        icon: <Sparkles />,
        min: 0,
        max: 100,
        description: 'תחביבים, ספורט, תרבות, מנוחה, טיפוח עצמי ורווחה אישית.',
      },
    ],
    metadata: {
      estimatedTime: 4,
      helpText:
        'אין תשובה נכונה או לא נכונה. חשוב/י על מה שבאמת תופס מקום מרכזי בחייך כרגע.',
    },
  },
  {
    worldId: 'VALUES',
    id: 'values_future_priorities_partner',
    category: 'values',
    subcategory: 'life_priorities',
    question:
      'ובמבט לעתיד, בזוגיות משמעותית, כיצד היית *רוצה* לחלק את 100 הנקודות האלו בין אותם תחומים, כך שזה ישקף את האיזון האידיאלי עבורך ועבור הקשר?',
    type: 'budgetAllocation',
    depth: 'ADVANCED',
    isRequired: true,
    totalPoints: 100,
    categories: [
      {
        label: 'זוגיות (כולל ילדים עתידיים)',
        icon: <Heart />,
        min: 0,
        max: 100,
        description: 'השקעה בקשר הזוגי, בילדים ובבניית התא המשפחתי.',
      },
      {
        label: 'משפחה (הורים, אחים)',
        icon: <Home />,
        min: 0,
        max: 100,
        description: 'שמירה על קשר ותמיכה במשפחות המוצא של שני בני הזוג.',
      },
      {
        label: 'קריירה ופרנסה (של שניכם)',
        icon: <Briefcase />,
        min: 0,
        max: 100,
        description: 'פיתוח קריירה אישי ומשותף, תוך תמיכה הדדית.',
      },
      {
        label: 'רוחניות, דת ולימוד תורה (משותף ואישי)',
        icon: <BookOpen />,
        min: 0,
        max: 100,
        description: 'עיסוק משותף ואישי ברוחניות ובחיבור למסורת.',
      },
      {
        label: 'חברים, קהילה והתנדבות (משותף ואישי)',
        icon: <Users />,
        min: 0,
        max: 100,
        description: 'מעורבות חברתית וקהילתית כזוג וכפרטים.',
      },
      {
        label: 'פנאי, תחביבים ובריאות אישית (משותף ואישי)',
        icon: <Sparkles />,
        min: 0,
        max: 100,
        description: 'שמירה על תחומי עניין אישיים וזמן איכות זוגי.',
      },
    ],
    metadata: {
      estimatedTime: 4,
      helpText:
        'חשוב/י על האיזון שהיית שואפ/ת אליו בחיים זוגיים מלאים ומספקים.',
    },
  },

  // --- חלק 2: גישה לכסף, נתינה והשכלה ---
  {
    worldId: 'VALUES',
    id: 'values_attitude_towards_money',
    category: 'values',
    subcategory: 'material_intellectual',
    question: 'מהי גישתך הכללית לכסף ורמת חיים?',
    type: 'iconChoice',
    depth: 'BASIC',
    isRequired: true,
    options: [
      {
        icon: <Leaf />,
        text: 'פשטות והסתפקות במועט הן ערך עליון',
        value: 'פשטות והסתפקות במועט הן ערך עליון',
      },
      {
        icon: <Scale />,
        text: 'איזון בין נוחות חומרית לערכים אחרים',
        value: 'איזון בין נוחות חומרית לערכים אחרים',
      },
      {
        icon: <TrendingUp />,
        text: 'שאיפה לרווחה כלכלית והצלחה חומרית',
        value: 'שאיפה לרווחה כלכלית והצלחה חומרית',
      },
      {
        icon: <PiggyBank />,
        text: 'אחריות כלכלית, חיסכון ותכנון לטווח ארוך',
        value: 'אחריות כלכלית, חיסכון ותכנון לטווח ארוך',
      },
    ],
    metadata: { estimatedTime: 1 },
  },
  {
    worldId: 'VALUES',
    id: 'values_giving_tzedaka_importance',
    category: 'values',
    subcategory: 'material_intellectual',
    question:
      'על סולם של 1 (פחות מרכזי) עד 10 (מרכזי מאוד), עד כמה נתינה, צדקה וחסד פעיל תופסים מקום בחייך?',
    type: 'scale',
    depth: 'BASIC',
    isRequired: true,
    min: 1,
    max: 10,
    labels: { min: 'פחות מרכזי', max: 'מרכזי מאוד' },
    metadata: { estimatedTime: 1 },
  },
  {
    worldId: 'VALUES',
    id: 'values_how_you_give',
    category: 'values',
    subcategory: 'material_intellectual',
    question:
      'כיצד את/ה בדרך כלל מבטא/ת את ערך הנתינה? (בחר/י את הדרכים העיקריות)',
    type: 'multiSelectWithOther',
    depth: 'ADVANCED',
    isRequired: false,
    options: [
      {
        icon: <DollarSign />,
        text: 'תרומות כספיות קבועות/מזדמנות',
        value: 'תרומות כספיות קבועות/מזדמנות',
      },
      {
        icon: <HandHeart />,
        text: 'התנדבות פעילה בארגונים/קהילה',
        value: 'התנדבות פעילה בארגונים/קהילה',
      },
      {
        icon: <Users />,
        text: 'עזרה אישית לחברים, משפחה או שכנים',
        value: 'עזרה אישית לחברים, משפחה או שכנים',
      },
      {
        icon: <Briefcase />,
        text: 'שימוש בכישורים מקצועיים למען אחרים (פרו-בונו)',
        value: 'שימוש בכישורים מקצועיים למען אחרים (פרו-בונו)',
      },
      {
        icon: <Heart />,
        text: 'מעשי חסד קטנים ביומיום',
        value: 'מעשי חסד קטנים ביומיום',
      },
    ],
    minSelections: 1,
    maxSelections: 3,
    metadata: { estimatedTime: 2 },
  },
  {
    worldId: 'VALUES',
    id: 'values_education_pursuit',
    category: 'values',
    subcategory: 'material_intellectual',
    question:
      'מהי גישתך לרכישת השכלה (תורנית וכללית) ולהתפתחות אינטלקטואלית מתמדת?',
    type: 'iconChoice',
    depth: 'BASIC',
    isRequired: true,
    options: [
      {
        icon: <BookOpen />,
        text: 'למידה מתמדת היא דרך חיים והכרח',
        value: 'למידה מתמדת היא דרך חיים והכרח',
      },
      {
        icon: <Target />,
        text: 'חשוב לרכוש ידע והשכלה רלוונטיים למטרותיי',
        value: 'חשוב לרכוש ידע והשכלה רלוונטיים למטרותיי',
      },
      {
        icon: <Scale />,
        text: 'מעריך/ה השכלה, אך לא בראש סדר העדיפויות',
        value: 'מעריך/ה השכלה, אך לא בראש סדר העדיפויות',
      },
      {
        icon: <Sparkles />,
        text: 'מעדיפ/ה למידה חווייתית והתנסותית על פני פורמלית',
        value: 'מעדיפ/ה למידה חווייתית והתנסותית על פני פורמלית',
      },
    ],
    metadata: { estimatedTime: 1 },
  },
  {
    worldId: 'VALUES',
    id: 'values_career_family_balance_approach',
    category: 'values',
    subcategory: 'life_priorities',
    question:
      'בהתייחס לאיזון בין קריירה לזוגיות/משפחה, איזו גישה הכי מתארת אותך כרגע?',
    type: 'iconChoice',
    depth: 'ADVANCED',
    isRequired: true,
    options: [
      {
        icon: <Briefcase />,
        text: 'הקריירה/לימודים בעדיפות עליונה כרגע. אני מחפש/ת זוגיות תומכת שתשתלב בלו"ז האינטנסיבי שלי.',
        value: 'career_first',
      },
      {
        icon: <Scale />,
        text: 'אני שואפ/ת לאיזון. חשוב לי להשקיע בקריירה, אבל אני רוצה ומוכנ/ה לפנות זמן משמעותי לבניית קשר.',
        value: 'balanced_approach',
      },
      {
        icon: <Heart />,
        text: 'הגעתי לשלב שבו בניית זוגיות ומשפחה היא המטרה המרכזית. הקריירה חשובה, אך היא תומכת במטרה זו.',
        value: 'relationship_first',
      },
      {
        icon: <Sparkles />,
        text: 'אני גמיש/ה. האיזון הנכון יתעצב יחד עם בן/בת הזוג. מה שחשוב הוא ההחלטה המשותפת.',
        value: 'flexible_and_joint',
      },
    ],
    metadata: {
      estimatedTime: 1,
      helpText: 'התשובה כאן עוזרת להבין את סדר העדיפויות הנוכחי שלך בחיים.',
    },
  },

  // --- חלק 3: ערכים קהילתיים, חברתיים והשקפת עולם ---
  {
    worldId: 'VALUES',
    id: 'values_community_role',
    category: 'values',
    subcategory: 'community_social',
    question: 'איזה תפקיד או רמת מעורבות היית רוצה שתהיה לך בקהילה שבה תחיה/י?',
    type: 'iconChoice',
    depth: 'BASIC',
    isRequired: false,
    options: [
      {
        icon: <Target />,
        text: 'פעיל/ה ומוביל/ה, בעל/ת תפקיד מרכזי',
        value: 'פעיל/ה ומוביל/ה, בעל/ת תפקיד מרכזי',
      },
      {
        icon: <Users />,
        text: 'מעורב/ת ומשתתפ/ת קבוע/ה בפעילויות',
        value: 'מעורב/ת ומשתתפ/ת קבוע/ה בפעילויות',
      },
      {
        icon: <HandHeart />,
        text: 'תורמ/ת ועוזר/ת כשנדרש, מאחורי הקלעים',
        value: 'תורמ/ת ועוזר/ת כשנדרש, מאחורי הקלעים',
      },
      {
        icon: <Home />,
        text: 'חבר/ה שקט/ה בקהילה, פחות מעורב/ת רשמית',
        value: 'חבר/ה שקט/ה בקהילה, פחות מעורב/ת רשמית',
      },
    ],
    metadata: { estimatedTime: 1 },
  },
  {
    worldId: 'VALUES',
    id: 'values_ideal_community_description',
    category: 'values',
    subcategory: 'community_social',
    question:
      'תאר/י בכמה מילים את הקהילה האידיאלית בעיניך. מהם המאפיינים החשובים ביותר שלה?',
    type: 'openText',
    depth: 'ADVANCED',
    isRequired: false,
    minLength: 50,
    maxLength: 500,
    placeholder:
      'לדוגמה: חמה ותומכת, מגוונת, אינטלקטואלית, שומרת על צביון מסוים, פעילה חברתית...',
    metadata: { estimatedTime: 3 },
  },
  {
    worldId: 'VALUES',
    id: 'values_social_political_stance_importance_partner',
    category: 'values',
    subcategory: 'community_social',
    question:
      'עד כמה חשוב לך שתהיה התאמה או דמיון בהשקפות הפוליטיות והחברתיות בינך לבין בן/בת הזוג?',
    type: 'scale',
    depth: 'ADVANCED',
    isRequired: false,
    min: 1, // כלל לא חשוב
    max: 10, // קריטי מאוד
    labels: {
      min: 'אפשר להסכים לא להסכים',
      max: 'חייבת להיות ראיית עולם דומה',
      middle: 'חשוב שיהיה בסיס משותף',
    },
    metadata: { estimatedTime: 1 },
  },
  {
    worldId: 'VALUES',
    id: 'values_attitude_state_israel',
    category: 'values',
    subcategory: 'community_social',
    question: 'מהי עמדתך ויחסך למדינת ישראל ולציונות?',
    type: 'iconChoice',
    depth: 'BASIC', // שאלה בסיסית להבנת הקשר
    isRequired: true,
    options: [
      {
        icon: <Flag />,
        text: 'ציונות היא ערך מרכזי, הזדהות עמוקה עם המדינה',
        value: 'ציונות היא ערך מרכזי, הזדהות עמוקה עם המדינה',
      },
      {
        icon: <Heart />,
        text: 'קשר רגשי חזק למדינה ולארץ, גם אם יש ביקורת',
        value: 'קשר רגשי חזק למדינה ולארץ, גם אם יש ביקורת',
      },
      {
        icon: <Scale />,
        text: 'יחס פרגמטי, חי/ה כאן מסיבות שונות',
        value: 'יחס פרגמטי, חי/ה כאן מסיבות שונות',
      },
      {
        icon: <BookOpen />,
        text: 'יחס מורכב יותר, תלוי בהשקפה דתית/פוליטית',
        value: 'יחס מורכב יותר, תלוי בהשקפה דתית/פוליטית',
      },
    ],
    metadata: { estimatedTime: 1 },
  },
  {
    worldId: 'VALUES',
    id: 'values_religious_pluralism_view',
    category: 'values',
    subcategory: 'community_social',
    question: 'מהי גישתך לפלורליזם דתי ולקבלת זרמים שונים ביהדות ובעולם?',
    type: 'openText',
    depth: 'ADVANCED',
    isRequired: false,
    minLength: 50,
    maxLength: 500,
    placeholder:
      "האם את/ה מאמינ/ה ב'אלו ואלו דברי אלוהים חיים'? מהם הגבולות שלך מבחינת קבלה? איך זה משפיע על קשרים חברתיים?",
    metadata: { estimatedTime: 3 },
  },

  // --- חלק 4: התמודדות עם אתגרים וקונפליקטים ערכיים ---
  {
    worldId: 'VALUES',
    id: 'values_conflict_between_values',
    category: 'values',
    subcategory: 'challenges_conflicts',
    question:
      'תאר/י מצב שבו חווית קונפליקט בין שני ערכים שהיו חשובים לך. כיצד התמודדת ומה למדת מכך?',
    type: 'openText',
    depth: 'EXPERT', // שאלה רפלקטיבית עמוקה
    isRequired: false,
    minLength: 100,
    maxLength: 700,
    placeholder:
      'לדוגמה: קונפליקט בין נאמנות לחבר לבין אמירת אמת, או בין קריירה למשפחה. איך הכרעת? מה היו השיקולים?',
    metadata: { estimatedTime: 4 },
  },
  {
    worldId: 'VALUES',
    id: 'values_dealing_with_disagreement_partner',
    category: 'values',
    subcategory: 'challenges_conflicts',
    question:
      'כיצד היית רוצה להתמודד עם בן/בת הזוג במצבים של חוסר הסכמה עמוק בנושא ערכי או אידיאולוגי?',
    type: 'iconChoice',
    depth: 'ADVANCED',
    isRequired: true,
    options: [
      {
        icon: <MessageCircle />,
        text: 'שיחה פתוחה ומכבדת, גם אם לא מגיעים להסכמה מלאה',
        value: 'שיחה פתוחה ומכבדת, גם אם לא מגיעים להסכמה מלאה',
      },
      {
        icon: <Brain />,
        text: 'ניסיון להבין את נקודת המבט של השני ולמצוא בסיס משותף',
        value: 'ניסיון להבין את נקודת המבט של השני ולמצוא בסיס משותף',
      },
      {
        icon: <Scale />,
        text: 'חיפוש פשרה מעשית שמאפשרת חיים משותפים',
        value: 'חיפוש פשרה מעשית שמאפשרת חיים משותפים',
      },
      {
        icon: <HelpCircle />,
        text: 'התייעצות עם גורם שלישי (רב, יועץ) במקרה הצורך',
        value: 'התייעצות עם גורם שלישי (רב, יועץ) במקרה הצורך',
      },
      {
        icon: <Info />,
        text: 'עבורי, חייבת להיות הסכמה מלאה בנושאים אלו',
        value: 'עבורי, חייבת להיות הסכמה מלאה בנושאים אלו',
      },
    ],
    metadata: {
      estimatedTime: 1,
      helpText:
        "חשוב/י על מצבים שבהם אין 'תשובה נכונה' אחת, אלא שתי השקפות לגיטימיות.",
    },
  },
  {
    worldId: 'VALUES',
    id: 'values_flexibility_on_values',
    category: 'values',
    subcategory: 'challenges_conflicts',
    question:
      'באילו תחומים ערכיים את/ה מרגיש/ה שיש לך יותר גמישות, ובאילו פחות?',
    type: 'openText',
    depth: 'ADVANCED',
    isRequired: false,
    minLength: 50,
    maxLength: 500,
    placeholder:
      "לדוגמה: 'אני גמיש/ה יותר בנושאי סגנון חיים, אבל פחות גמיש/ה בנושאי חינוך ילדים או יושרה'.",
    metadata: { estimatedTime: 3 },
  },

  // --- חלק 5: סיכום ומבט לעתיד (ערכי) ---
  {
    worldId: 'VALUES',
    id: 'values_legacy_wish',
    category: 'values',
    subcategory: 'summary_future',
    question:
      "אם היית יכול/ה להשאיר 'צוואה ערכית' לדורות הבאים, מהם המסרים המרכזיים שהיית רוצה להעביר?",
    type: 'openText',
    depth: 'EXPERT',
    isRequired: false,
    minLength: 70,
    maxLength: 600,
    placeholder:
      'חשוב/י על העקרונות והתובנות החשובים ביותר שלמדת מהחיים ומהערכים שלך.',
    metadata: { estimatedTime: 3 },
  },
  {
    worldId: 'VALUES',
    id: 'values_non_negotiable_for_partner',
    category: 'values',
    subcategory: 'summary_future',
    question:
      'לסיום עולם זה, מהם 1-2 הערכים שבהם *חייבת* להיות התאמה בינך לבין בן/בת הזוג הפוטנציאלי/ת, ואין בהם מקום לפשרה מבחינתך?',
    type: 'openText',
    depth: 'ADVANCED',
    isRequired: true, // חשוב מאוד לשדכן!
    minLength: 30,
    maxLength: 300,
    placeholder:
      'נסה/י למקד את הדברים הקריטיים ביותר עבורך שאינם ניתנים למשא ומתן.',
    metadata: { estimatedTime: 2 },
  },
];
--- End of Content for valuesQuestions.tsx ---

================================================================================
Directory: C:\Users\user\Desktop\matchpoint\shidduch-system\src\components\questionnaire\types
================================================================================

--------------------------------------------------------------------------------
File: C:\Users\user\Desktop\matchpoint\shidduch-system\src\components\questionnaire\types\types.ts
--------------------------------------------------------------------------------
Content:
// src/components/questionnaire/types/types.ts

// Basic type definitions
export type WorldId =
  | 'VALUES'
  | 'RELATIONSHIP'
  | 'PERSONALITY'
  | 'PARTNER'
  | 'RELIGION';

export type QuestionType =
  | 'singleChoice'
  | 'multiChoice'
  | 'multiSelect'
  | 'openText'
  | 'scale'
  | 'iconChoice'
  | 'budgetAllocation'
  | 'ranking'
  | 'scenario'
  | 'multiSelectWithOther';

export type QuestionDepth = 'BASIC' | 'ADVANCED' | 'EXPERT';

export type AnswerValue =
  | string
  | number
  | string[]
  | number[]
  | Record<string, number>
  | undefined;

export type AnswerStatus = 'COMPLETE' | 'PARTIAL' | 'SKIPPED';

// Interface definitions
export interface Option {
  value: string;
  text: string;
  icon?: React.ReactNode; // Icon associated with a specific choice/option
  description?: string;
  allowFreeText?: boolean;
  placeholder?:string;
}

export interface BudgetCategory {
  label: string;
  icon?: React.ReactNode; // Icon associated with a specific budget category
  description?: string;
  min?: number;
  max?: number;
}

export interface QuestionMetadata {
  helpText?: string;
  estimatedTime?: number; // בדקות
  tags?: string[];
  // Icon is NOT part of metadata
}

// --- הוספנו כאן הגדרות לתוויות ותיאורים של סולם ---
export interface ScaleLabels {
  min: string;
  max: string;
  middle?: string;
}

export interface ScaleDescriptions { // זה מתאים ל-descriptions ב-InteractiveScale
  min?: string;
  max?: string;
  middle?: string;
  [key: number]: string; // אפשרות לתיאורים לערכים ספציפיים
}
// --- סוף ההוספה ---


export interface Question {
  worldId: string;
  id: string;
  category: string;
  subcategory?: string;
  question: string;
  type: QuestionType;
  depth: QuestionDepth;
  isRequired?: boolean;
  options?: Option[];
  placeholder?: string;
  minLength?: number;
  maxLength?: number;
  minSelections?: number;
  maxSelections?: number;
  description?: string; // תיאור כללי לשאלה
  min?: number; // for scale
  max?: number; // for scale
  step?: number; // for scale
  // --- הוספנו כאן את המאפיינים החדשים לשאלות סולם ---
  labels?: ScaleLabels; // תוויות קצה (ומידל) לשאלות סולם
  scaleDescriptions?: ScaleDescriptions; // תיאורים ספציפיים לערכים בסולם (אם InteractiveScale תומך בזה בצורה זו)
  // --- סוף ההוספה ---
  categories?: BudgetCategory[]; // for budgetAllocation
  totalPoints?: number; // for budgetAllocation
  metadata?: QuestionMetadata;
  items?: Option[]; // for ranking questions
  icon?: React.ReactNode; // <<< --- הוספנו כאן: אייקון אופציונלי לשאלה עצמה
}

// Answer-related interfaces
export interface QuestionnaireAnswer {
  questionId: string;
  worldId: WorldId;
  value: AnswerValue;
  answeredAt: string;
}

export interface Answer extends QuestionnaireAnswer {
  status?: AnswerStatus;
}

// Component Props interfaces
export interface WorldComponentProps {
  onAnswer: (questionId: string, value: AnswerValue) => void;
  onComplete: () => void;
  onBack: () => void;
  answers: QuestionnaireAnswer[];
  isCompleted?: boolean;
  language?: string;
  currentQuestionIndex: number;
  setCurrentQuestionIndex: (index: number) => void;
}

export interface AnswerInputProps {
  question: Question;
  value?: AnswerValue;
  onChange?: (value: AnswerValue) => void;
  onClear?: () => void;
  language?: string;
  showValidation?: boolean;
  className?: string;
}

export interface QuestionnaireLayoutProps {
  children: React.ReactNode;
  currentWorld: WorldId;
  userTrack: UserTrack;
  completedWorlds: WorldId[];
  onWorldChange: (worldId: WorldId) => void;
  onExit?: () => void;
  language?: string;
  onSaveProgress?: () => Promise<void>;
  isLoggedIn?: boolean;

}

// Data storage interfaces
export interface QuestionnaireSubmission {
  userId: string;
  answers: QuestionnaireAnswer[];
  worldsCompleted: WorldId[];
  completed: boolean;
  startedAt: string;
  completedAt?: string;
  userTrack?: UserTrack;
}

export type UserTrack =
  | 'חילוני'
  | 'מסורתי'
  | 'דתי'
  | 'חרדי';
--- End of Content for types.ts ---

================================================================================
Directory: C:\Users\user\Desktop\matchpoint\shidduch-system\src\components\questionnaire\worlds
================================================================================

--------------------------------------------------------------------------------
File: C:\Users\user\Desktop\matchpoint\shidduch-system\src\components\questionnaire\worlds\WorldComponent.tsx
--------------------------------------------------------------------------------
Content:
// src/components/questionnaire/worlds/WorldComponent.tsx
import React, { useState } from 'react';
import WorldIntro from '../common/WorldIntro';
import QuestionCard from '../common/QuestionCard';
import AnswerInput from '../common/AnswerInput';
import QuestionsList from '../common/QuestionsList';
import { Button } from '@/components/ui/button';
import { Progress } from '@/components/ui/progress';
import {
  ArrowLeft,
  ArrowRight,
  AlertCircle,
  CheckCircle,
  List,
  PanelLeftClose,
  PanelRightClose,
  ListChecks,
  CircleDot,
} from 'lucide-react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import {
  Sheet,
  SheetContent,
  SheetDescription,
  SheetHeader,
  SheetTitle,
  SheetTrigger,
} from '@/components/ui/sheet';
import type {
  WorldComponentProps,
  AnswerValue,
  Question,
  WorldId,
} from '../types/types';
import { cn } from '@/lib/utils';
import { useMediaQuery } from '../hooks/useMediaQuery';
import { motion, AnimatePresence } from 'framer-motion';

// 1. ייבוא כל קבצי השאלות
import { personalityQuestions } from '../questions/personality/personalityQuestions';
import { valuesQuestions } from '../questions/values/valuesQuestions';
import { relationshipQuestions } from '../questions/relationship/relationshipQuestions';
import { partnerQuestions } from '../questions/partner/partnerQuestions';
import { religionQuestions } from '../questions/religion/religionQuestions';

// 2. יצירת אובייקט קונפיגורציה מרכזי לניהול הנתונים של כל עולם, כולל צבע נושא
const worldConfig: Record<
  WorldId,
  {
    questions: Question[];
    title: string;
    themeColor: 'sky' | 'rose' | 'purple' | 'teal' | 'amber';
  }
> = {
  PERSONALITY: {
    questions: personalityQuestions,
    title: 'עולם האישיות',
    themeColor: 'sky', // גוונים של כחול-שמיים לאישיות ורפלקציה
  },
  VALUES: {
    questions: valuesQuestions,
    title: 'עולם הערכים והאמונות',
    themeColor: 'rose', // גוונים של ורוד-אדמדם לערכים ורגשות
  },
  RELATIONSHIP: {
    questions: relationshipQuestions,
    title: 'עולם הזוגיות',
    themeColor: 'purple', // גוונים של סגול לשותפות ואינטימיות
  },
  PARTNER: {
    questions: partnerQuestions,
    title: 'עולם הפרטנר',
    themeColor: 'teal', // גוונים של טורקיז למיקוד ובהירות
  },
  RELIGION: {
    questions: religionQuestions,
    title: 'עולם הדת והמסורת',
    themeColor: 'amber', // גוונים של ענבר/זהב למסורת ורוחניות
  },
};

// 3. הרחבת ה-Props של הקומפוננטה כדי שתקבל worldId
interface WorldComponentDynamicProps extends WorldComponentProps {
  worldId: WorldId;
}

export default function WorldComponent({
  worldId,
  onAnswer,
  onComplete,
  onBack,
  answers,
  language = 'he',
  currentQuestionIndex,
  setCurrentQuestionIndex,
}: WorldComponentDynamicProps) {
  // 4. שימוש ב-worldId כדי לשלוף את הנתונים הנכונים מהקונפיגורציה
  const { questions: allQuestions, title, themeColor } = worldConfig[worldId];

  const [isIntroComplete, setIsIntroComplete] = useState(false);
  const [validationErrors, setValidationErrors] = useState<
    Record<string, string>
  >({});
  const isDesktop = useMediaQuery('(min-width: 1024px)');
  const isRTL = language === 'he';
  const [isListVisible, setIsListVisible] = useState(true);

  const findAnswer = (questionId: string) => {
    return answers.find((a) => a.questionId === questionId)?.value;
  };

  const validateAnswer = (
    question: Question,
    value: AnswerValue
  ): string | null => {
    const isValueEmpty =
      value === undefined ||
      value === null ||
      (typeof value === 'string' && value.trim() === '') ||
      (Array.isArray(value) && value.length === 0) ||
      (typeof value === 'object' &&
        !Array.isArray(value) &&
        Object.keys(value || {}).length === 0);

    if (question.isRequired && isValueEmpty) {
      return 'נדרשת תשובה לשאלה זו';
    }
    if (!question.isRequired && isValueEmpty) {
      return null;
    }

    switch (question.type) {
      case 'openText': {
        const textValue = value as string;
        const trimmedLength = textValue?.trim().length || 0;
        if (
          question.minLength &&
          trimmedLength < question.minLength &&
          question.isRequired
        ) {
          return `התשובה חייבת להכיל לפחות ${question.minLength} תווים`;
        }
        if (question.maxLength && trimmedLength > question.maxLength) {
          return `התשובה לא יכולה להכיל יותר מ-${question.maxLength} תווים`;
        }
        break;
      }
      case 'multiSelect':
      case 'multiChoice':
      case 'multiSelectWithOther': {
        const selectedValues = value as string[] | undefined;
        const count = selectedValues?.length ?? 0;
        if (question.minSelections && count < question.minSelections) {
          return `יש לבחור לפחות ${question.minSelections} אפשרויות`;
        }
        if (question.maxSelections && count > question.maxSelections) {
          return `ניתן לבחור עד ${question.maxSelections} אפשרויות`;
        }
        break;
      }
      case 'budgetAllocation': {
        const allocationValue = value as Record<string, number> | undefined;
        if (allocationValue) {
          const totalAllocated = Object.values(allocationValue).reduce(
            (sum, val) => sum + (val || 0),
            0
          );
          if (
            question.totalPoints &&
            totalAllocated !== question.totalPoints &&
            question.isRequired
          ) {
            return `יש להקצות בדיוק ${question.totalPoints} נקודות.`;
          }
        } else if (question.isRequired && !isValueEmpty) {
          return 'נדרשת הקצאת תקציב.';
        }
        break;
      }
    }
    return null;
  };

  const handleNext = () => {
    const currentQuestion = allQuestions[currentQuestionIndex];
    const value = findAnswer(currentQuestion.id);
    const error = validateAnswer(currentQuestion, value);

    if (error && currentQuestion.isRequired) {
      setValidationErrors({ ...validationErrors, [currentQuestion.id]: error });
      return;
    }
    setValidationErrors((prev) => ({ ...prev, [currentQuestion.id]: '' }));

    if (currentQuestionIndex < allQuestions.length - 1) {
      setCurrentQuestionIndex(currentQuestionIndex + 1);
    } else {
      const firstUnansweredRequired = allQuestions.find(
        (q) => q.isRequired && validateAnswer(q, findAnswer(q.id)) !== null
      );
      if (firstUnansweredRequired) {
        const errorIndex = allQuestions.findIndex(
          (q) => q.id === firstUnansweredRequired.id
        );
        if (errorIndex !== -1) {
          setCurrentQuestionIndex(errorIndex);
          setValidationErrors({
            ...validationErrors,
            [firstUnansweredRequired.id]:
              validateAnswer(
                firstUnansweredRequired,
                findAnswer(firstUnansweredRequired.id)
              ) || 'נדרשת תשובה לשאלה זו',
          });
        }
      } else {
        onComplete();
      }
    }
  };

  const handlePrevious = () => {
    if (currentQuestionIndex > 0) {
      setCurrentQuestionIndex(currentQuestionIndex - 1);
    } else {
      onBack();
    }
  };

  const handleClearAnswer = () => {
    const currentQuestion = allQuestions[currentQuestionIndex];
    let emptyValue: AnswerValue;
    switch (currentQuestion.type) {
      case 'multiChoice':
      case 'multiSelect':
      case 'multiSelectWithOther':
        emptyValue = [];
        break;
      case 'budgetAllocation':
        emptyValue = {};
        break;
      case 'scale':
        emptyValue = undefined;
        break;
      default:
        emptyValue = '';
    }
    onAnswer(currentQuestion.id, emptyValue);
    setValidationErrors((prev) => ({ ...prev, [currentQuestion.id]: '' }));
  };

  if (!isIntroComplete) {
    return (
      <WorldIntro
        worldId={worldId}
        allQuestions={allQuestions}
        onStart={() => setIsIntroComplete(true)}
      />
    );
  }

  if (allQuestions.length === 0) {
    return (
      <div className="p-4 bg-red-50 rounded-lg border border-red-300 text-red-800 text-center">
        <h3 className="font-bold text-lg mb-2">שגיאה בטעינת השאלות</h3>
        <p>לא ניתן היה לטעון את השאלות עבור עולם זה.</p>
        <Button className="mt-4" variant="outline" onClick={onBack}>
          חזרה למפה
        </Button>
      </div>
    );
  }

  const currentQuestion = allQuestions[currentQuestionIndex];
  if (!currentQuestion) {
    console.error(
      `Error: Invalid question index ${currentQuestionIndex} for ${worldId} World.`
    );
    setCurrentQuestionIndex(0);
    return <div>שגיאה בטעינת השאלה...</div>;
  }

  const progress = ((currentQuestionIndex + 1) / allQuestions.length) * 100;
  const currentValue = findAnswer(currentQuestion.id);

  const renderHeader = () => (
    <div className="bg-white p-3 rounded-lg shadow-sm border space-y-2 mb-6">
      <div className="flex items-center justify-between">
        <div>
          <h2 className="text-lg font-medium text-slate-800">{title}</h2>
          <div className="text-sm text-slate-500">
            שאלה {currentQuestionIndex + 1} מתוך {allQuestions.length}
          </div>
        </div>
        <div className="flex items-center gap-2">
          {isDesktop && (
            <Button
              variant={isListVisible ? 'secondary' : 'outline'}
              size="sm"
              onClick={() => setIsListVisible(!isListVisible)}
              className="gap-2"
            >
              {isListVisible ? (
                isRTL ? (
                  <PanelRightClose className="h-4 w-4" />
                ) : (
                  <PanelLeftClose className="h-4 w-4" />
                )
              ) : (
                <List className="h-4 w-4" />
              )}
              {isListVisible ? 'הסתר רשימה' : 'הצג רשימה'}
            </Button>
          )}
          {!isDesktop && (
            <Sheet>
              <SheetTrigger asChild>
                <Button variant="outline" size="sm" className="gap-1">
                  <List className="h-4 w-4" />
                  <span className="hidden sm:inline">רשימת שאלות</span>
                </Button>
              </SheetTrigger>
              <SheetContent
                side={isRTL ? 'left' : 'right'}
                className="w-[300px] sm:w-[400px] flex flex-col"
              >
                <SheetHeader>
                  <SheetTitle>
                    <div className="flex items-center gap-2">
                      <ListChecks className="h-5 w-5 text-blue-600" />
                      <span>כל השאלות ב{title}</span>
                    </div>
                  </SheetTitle>
                  <SheetDescription>
                    לחץ על שאלה כדי לעבור אליה ישירות.
                    <div className="mt-3 pt-3 border-t space-y-1">
                      <div className="flex items-center text-xs text-slate-600">
                        <CheckCircle className={cn("h-3 w-3 me-1.5", `text-${themeColor}-600`)} />
                        <span>הושלם</span>
                      </div>
                      <div className="flex items-center text-xs text-slate-600">
                        <AlertCircle className="h-3 w-3 text-red-500 me-1.5" />
                        <span>חובה (לא נענה)</span>
                      </div>
                      <div className="flex items-center text-xs text-slate-600">
                        <CircleDot className="h-3 w-3 text-slate-400 me-1.5" />
                        <span>לא נענה</span>
                      </div>
                    </div>
                  </SheetDescription>
                </SheetHeader>
                <div className="mt-4 flex-1 overflow-hidden">
                  <QuestionsList
                    allQuestions={allQuestions}
                    currentQuestionIndex={currentQuestionIndex}
                    setCurrentQuestionIndex={setCurrentQuestionIndex}
                    answers={answers}
                    language={language}
                    themeColor={themeColor}
                    className="h-full"
                  />
                </div>
              </SheetContent>
            </Sheet>
          )}
        </div>
      </div>
      <Progress value={progress} className="h-2" indicatorClassName={`bg-${themeColor}-500`} />
    </div>
  );

  const renderQuestionCard = () => (
    <motion.div
      className={cn('transition-opacity duration-300')}
      key={currentQuestionIndex}
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      exit={{ opacity: 0 }}
    >
      <QuestionCard
        question={currentQuestion}
        depth={currentQuestion.depth}
        isRequired={currentQuestion.isRequired}
        validationError={validationErrors[currentQuestion.id]}
        language={language}
        themeColor={themeColor}
      >
        <AnswerInput
          question={currentQuestion}
          value={currentValue}
          onChange={(value) => {
            setValidationErrors((prev) => ({
              ...prev,
              [currentQuestion.id]: '',
            }));
            onAnswer(currentQuestion.id, value);
          }}
          onClear={handleClearAnswer}
          language={language}
          showValidation={!!validationErrors[currentQuestion.id]}
        />
      </QuestionCard>
    </motion.div>
  );

  const renderNavigationButtons = () => (
    <div className="flex justify-between pt-4 mt-6 border-t border-slate-200">
      <Button
        variant="outline"
        onClick={handlePrevious}
        className="flex items-center gap-2"
      >
        {isRTL ? <ArrowRight className="h-4 w-4" /> : <ArrowLeft className="h-4 w-4" />}
        <span>{currentQuestionIndex === 0 ? 'חזרה למפה' : 'שאלה קודמת'}</span>
      </Button>
      {currentQuestionIndex < allQuestions.length - 1 ? (
        <Button
          variant="default"
          onClick={handleNext}
          className={cn("flex items-center gap-2", `bg-${themeColor}-600 hover:bg-${themeColor}-700 text-white`)}
        >
          <span>שאלה הבאה</span>
          {isRTL ? <ArrowLeft className="h-4 w-4" /> : <ArrowRight className="h-4 w-4" />}
        </Button>
      ) : (
        <Button
          onClick={handleNext}
          className="bg-green-600 hover:bg-green-700 flex items-center gap-2"
        >
          <span>סיים עולם זה</span>
          <CheckCircle className="h-4 w-4" />
        </Button>
      )}
    </div>
  );

  if (isDesktop) {
    return (
      <div className="w-full relative" dir={isRTL ? 'rtl' : 'ltr'}>
        {renderHeader()}
        <div
          className={cn(
            'transition-all duration-300 ease-in-out',
            isListVisible ? 'grid grid-cols-12 gap-8' : 'flex justify-center'
          )}
        >
          <div
            className={cn(
              'space-y-6',
              isListVisible
                ? 'col-span-12 lg:col-span-7 xl:col-span-8'
                : 'w-full max-w-4xl'
            )}
          >
            {renderQuestionCard()}
            {renderNavigationButtons()}
          </div>
          <AnimatePresence>
            {isListVisible && (
              <motion.div
                className="col-span-12 lg:col-span-5 xl:col-span-4"
                initial={{ opacity: 0, width: 0, [isRTL ? 'marginRight' : 'marginLeft']: '-2rem' }}
                animate={{ opacity: 1, width: 'auto', [isRTL ? 'marginRight' : 'marginLeft']: '0' }}
                exit={{ opacity: 0, width: 0, [isRTL ? 'marginRight' : 'marginLeft']: '-2rem' }}
                transition={{ duration: 0.3, ease: 'easeInOut' }}
                layout
              >
                <Card className="sticky top-6 shadow-lg border-slate-200 h-[calc(100vh-10rem)] overflow-hidden flex flex-col">
                  <CardHeader className="pb-3 pt-4 border-b bg-slate-50/50 flex-shrink-0">
                    <CardTitle className="text-lg font-semibold flex items-center gap-2 text-slate-800">
                      <ListChecks className="h-5 w-5 text-blue-600" />
                      <span>שאלות בעולם זה</span>
                    </CardTitle>
                    <div className="pt-2 flex flex-wrap gap-x-4 gap-y-1 text-xs text-slate-500">
                      <div className="flex items-center">
                        <CheckCircle className={cn("h-3 w-3 me-1.5", `text-${themeColor}-600`)} />
                        <span>הושלם</span>
                      </div>
                      <div className="flex items-center">
                        <AlertCircle className="h-3 w-3 text-red-500 me-1.5" />
                        <span>חובה</span>
                      </div>
                      <div className="flex items-center">
                        <CircleDot className="h-3 w-3 text-slate-400 me-1.5" />
                        <span>לא נענה</span>
                      </div>
                    </div>
                  </CardHeader>
                  <CardContent className="p-2 flex-grow overflow-hidden">
                    <QuestionsList
                      allQuestions={allQuestions}
                      currentQuestionIndex={currentQuestionIndex}
                      setCurrentQuestionIndex={setCurrentQuestionIndex}
                      answers={answers}
                      language={language}
                      themeColor={themeColor}
                      className="h-full"
                    />
                  </CardContent>
                </Card>
              </motion.div>
            )}
          </AnimatePresence>
        </div>
      </div>
    );
  } else {
    // Mobile View
    return (
        <div
          className="max-w-2xl mx-auto p-2 sm:p-4 space-y-6 pb-24"
          dir={isRTL ? 'rtl' : 'ltr'}
        >
          {renderHeader()}
          {renderQuestionCard()}
          {renderNavigationButtons()}
        </div>
    );
  }
}
--- End of Content for WorldComponent.tsx ---

