################################################################################
# Directory Content Map For: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\questionnaire
# Generated on: 2025-08-26 18:48:03
################################################################################

================================================================================
Directory: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\questionnaire
================================================================================

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\questionnaire\MatchmakingQuestionnaire.tsx
--------------------------------------------------------------------------------
Content:
// src/components/questionnaire/MatchmakingQuestionnaire.tsx
'use client';

import React, {
  useState,
  useMemo,
  useEffect,
  useCallback,
  useRef,
} from 'react';
import { useRouter } from 'next/navigation';
import QuestionnaireLayout from './layout/QuestionnaireLayout';
import WorldComponent from './worlds/WorldComponent';
import QuestionnaireCompletion from './common/QuestionnaireCompletion';
import { useLanguage } from '@/app/[locale]/contexts/LanguageContext';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { cn } from '@/lib/utils';
import WorldsMap from './layout/WorldsMap';
import { useIdleTimeout } from './hooks/useIdleTimeout';
import { signOut } from 'next-auth/react';
import { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import {
  Loader2,
  CheckCircle,
  AlertTriangle,
  XCircle,
  Info,
  Clock,
  LogOut,
} from 'lucide-react';
import type {
  WorldId,
  QuestionnaireSubmission,
  QuestionnaireAnswer,
  AnswerValue,
  Question,
} from './types/types';
import type { QuestionnaireDictionary } from '@/types/dictionary'; // ייבוא טיפוס המילון המלא

import { personalityQuestions } from './questions/personality/personalityQuestions';
import { valuesQuestions } from './questions/values/valuesQuestions';
import { relationshipQuestions } from './questions/relationship/relationshipQuestions';
import { partnerQuestions } from './questions/partner/partnerQuestions';
import { religionQuestions } from './questions/religion/religionQuestions';

const worldConfig: Record<WorldId, { questions: Question[] }> = {
  PERSONALITY: { questions: personalityQuestions },
  VALUES: { questions: valuesQuestions },
  RELATIONSHIP: { questions: relationshipQuestions },
  PARTNER: { questions: partnerQuestions },
  RELIGION: { questions: religionQuestions },
};

enum OnboardingStep {
  WORLDS = 'WORLDS',
  COMPLETED = 'COMPLETED',
  MAP = 'MAP',
}

const WORLD_ORDER: WorldId[] = [
  'PERSONALITY',
  'VALUES',
  'RELATIONSHIP',
  'PARTNER',
  'RELIGION',
];

export interface MatchmakingQuestionnaireProps {
  userId?: string;
  onComplete?: () => void;
  initialWorld?: WorldId;
  initialQuestionId?: string;
  dict: QuestionnaireDictionary;
}

export default function MatchmakingQuestionnaire({
  userId,
  onComplete,
  initialWorld,
  initialQuestionId,
  dict,
}: MatchmakingQuestionnaireProps) {
  const router = useRouter();
  const { language } = useLanguage();
  const sessionId = useMemo(() => `session_${Date.now()}`, []);

  const [currentStep, setCurrentStep] = useState<OnboardingStep>(
    OnboardingStep.MAP
  );

  const [currentWorld, setCurrentWorld] = useState<WorldId>(
    initialWorld || 'VALUES'
  );
  const [answers, setAnswers] = useState<QuestionnaireAnswer[]>([]);
  const [completedWorlds, setCompletedWorlds] = useState<WorldId[]>([]);
  const [startTime] = useState(() => new Date().toISOString());
  const [lastSavedTime, setLastSavedTime] = useState<Date | null>(null);
  const [isDirectNavigation, setIsDirectNavigation] = useState(false);
  const [currentQuestionIndices, setCurrentQuestionIndices] = useState<
    Record<WorldId, number>
  >({
    PERSONALITY: 0,
    VALUES: 0,
    RELATIONSHIP: 0,
    PARTNER: 0,
    RELIGION: 0,
  });

  const [isSaving, setIsSaving] = useState(false);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [isDirty, setIsDirty] = useState(false);

  const [toastState, setToastState] = useState<{
    message: string;
    type: 'success' | 'error' | 'info';
    isVisible: boolean;
    action?: { label: string; onClick: () => void };
  }>({
    message: '',
    type: 'info',
    isVisible: false,
  });

  const [showIdleModal, setShowIdleModal] = useState(false);
  const logoutTimer = useRef<NodeJS.Timeout>();

  const handleIdle = useCallback(() => {
    if (userId) {
      setShowIdleModal(true);
      logoutTimer.current = setTimeout(() => {
        signOut({ callbackUrl: '/' });
      }, 60000);
    }
  }, [userId]);

  const { resetTimer: resetIdleTimer } = useIdleTimeout({
    onIdle: handleIdle,
    idleTimeSeconds: 7200,
  });

  const handleStayActive = useCallback(() => {
    if (logoutTimer.current) {
      clearTimeout(logoutTimer.current);
    }
    setShowIdleModal(false);
    resetIdleTimer();
  }, [resetIdleTimer]);

  useEffect(() => {
    if (initialWorld) {
      setCurrentWorld(initialWorld);
    }
  }, [initialWorld]);

  const showToast = useCallback(
    (
      message: string,
      type: 'success' | 'error' | 'info' = 'info',
      duration: number = 3000,
      action?: { label: string; onClick: () => void }
    ) => {
      setToastState({ message, type, isVisible: true, action });
      if (!action) {
        setTimeout(() => {
          setToastState((prev) => ({ ...prev, isVisible: false }));
        }, duration);
      }
    },
    []
  );

  const getNextWorld = (currentWorldId: WorldId): WorldId | null => {
    const currentIndex = WORLD_ORDER.indexOf(currentWorldId);
    if (currentIndex < WORLD_ORDER.length - 1) {
      return WORLD_ORDER[currentIndex + 1];
    }
    return null;
  };

  const prepareSubmissionData = useCallback((): QuestionnaireSubmission => {
    const isCompleted = completedWorlds.length === WORLD_ORDER.length;
    return {
      userId: userId || sessionId,
      answers: answers,
      worldsCompleted: completedWorlds,
      completed: isCompleted,
      startedAt: startTime,
      completedAt: isCompleted ? new Date().toISOString() : undefined,
    };
  }, [answers, completedWorlds, sessionId, startTime, userId]);

  const handleQuestionnaireSave = useCallback(
    async (isAutoSave = false) => {
      if (isSaving && !isAutoSave) return;
      setIsSaving(true);
      setError(null);
      try {
        const submissionData = prepareSubmissionData();
        const validateSubmission = (data: QuestionnaireSubmission): boolean => {
          if (!data.userId) return false;
          if (!Array.isArray(data.worldsCompleted)) return false;
          if (typeof data.completed !== 'boolean') return false;
          if (!data.startedAt) return false;
          if (data.completed && !data.completedAt) return false;
          return true;
        };

        if (!validateSubmission(submissionData)) {
          throw new Error(dict.matchmaking.errors.invalidSubmission);
        }

        if (!userId) {
          localStorage.setItem(
            'tempQuestionnaire',
            JSON.stringify(submissionData)
          );
          if (currentStep === OnboardingStep.COMPLETED) {
            router.push('/auth/signin?callbackUrl=/questionnaire/restore');
          }
        } else {
          const response = await fetch('/api/questionnaire', {
            method: 'PUT',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(submissionData),
          });

          if (!response.ok) {
            const errorData = await response.json();
            throw new Error(
              errorData.error || dict.matchmaking.errors.saveFailed
            );
          }
        }
        setLastSavedTime(new Date());
        setIsDirty(false);
        setToastState((prev) => ({ ...prev, isVisible: false }));

        if (!isAutoSave) {
          showToast(dict.matchmaking.toasts.saveSuccess, 'success');
        }

        if (
          submissionData.completed &&
          currentStep === OnboardingStep.COMPLETED
        ) {
          if (onComplete) onComplete();
        }
      } catch (err) {
        console.error('Failed to save questionnaire:', err);
        const errorMessage =
          err instanceof Error
            ? err.message
            : dict.matchmaking.errors.saveFailed;
        setError(errorMessage);
        if (!isAutoSave) {
          showToast(errorMessage, 'error');
        } else {
          showToast(dict.matchmaking.toasts.autoSaveError, 'error');
        }
      } finally {
        setIsSaving(false);
      }
    },
    [
      isSaving,
      prepareSubmissionData,
      userId,
      router,
      onComplete,
      showToast,
      currentStep,
      dict,
    ]
  );

  useEffect(() => {
    let autoSaveInterval: NodeJS.Timeout;
    if (currentStep === OnboardingStep.WORLDS && userId) {
      autoSaveInterval = setInterval(() => {
        if (isDirty) {
          showToast(
            dict.matchmaking.toasts.unsavedChanges.message,
            'info',
            10000,
            {
              label: dict.matchmaking.toasts.unsavedChanges.action,
              onClick: () => handleQuestionnaireSave(false),
            }
          );
        }
      }, 180000);
    }
    return () => {
      if (autoSaveInterval) clearInterval(autoSaveInterval);
    };
  }, [currentStep, userId, isDirty, handleQuestionnaireSave, showToast, dict]);

  useEffect(() => {
    const handleBeforeUnload = (event: BeforeUnloadEvent) => {
      if (isDirty) {
        event.preventDefault();
        event.returnValue = '';
      }
    };
    window.addEventListener('beforeunload', handleBeforeUnload);
    return () => {
      window.removeEventListener('beforeunload', handleBeforeUnload);
    };
  }, [isDirty]);

  useEffect(() => {
    const loadExistingAnswers = async () => {
      if (!userId) {
        setIsLoading(false);
        const tempData = localStorage.getItem('tempQuestionnaire');
        if (tempData) {
          console.warn(
            'Found temp data but user ID is missing. This should be handled by /questionnaire/restore.'
          );
        }
        return;
      }

      setIsLoading(true);
      try {
        const response = await fetch('/api/questionnaire');
        if (!response.ok) {
          if (response.status === 404) {
            console.log('No existing questionnaire data found for user.');
            setCurrentStep(OnboardingStep.MAP);
          } else {
            const errorData = await response.json();
            throw new Error(
              errorData.error || dict.matchmaking.errors.loadFailed
            );
          }
        } else {
          const data = await response.json();
          if (data.success && data.data) {
            const allAnswers = [
              ...(data.data.answers || []),
              ...(data.data.valuesAnswers || []),
              ...(data.data.personalityAnswers || []),
              ...(data.data.relationshipAnswers || []),
              ...(data.data.partnerAnswers || []),
              ...(data.data.religionAnswers || []),
            ].filter(
              (answer, index, self) =>
                index ===
                self.findIndex((a) => a.questionId === answer.questionId)
            );

            setAnswers(allAnswers);
            const loadedCompletedWorlds = data.data.worldsCompleted || [];
            setCompletedWorlds(loadedCompletedWorlds);

            const isQuestionnaireComplete =
              data.data.completed ||
              loadedCompletedWorlds.length === WORLD_ORDER.length;

            if (data.data.currentQuestionIndices) {
              setCurrentQuestionIndices(data.data.currentQuestionIndices);
            }

            if (initialWorld && initialQuestionId) {
              const worldQuestions = worldConfig[initialWorld].questions;
              const questionIndex = worldQuestions.findIndex(
                (q) => q.id === initialQuestionId
              );
              if (questionIndex !== -1) {
                setCurrentQuestionIndices((prev) => ({
                  ...prev,
                  [initialWorld]: questionIndex,
                }));
                setCurrentWorld(initialWorld);
                setCurrentStep(OnboardingStep.WORLDS);
                setIsDirectNavigation(true);
              } else {
                setCurrentWorld(initialWorld);
                setCurrentStep(OnboardingStep.MAP);
              }
            } else if (isQuestionnaireComplete) {
              setCurrentWorld(initialWorld || WORLD_ORDER[0]);
              setCurrentStep(OnboardingStep.MAP);
            } else if (
              loadedCompletedWorlds.length > 0 ||
              allAnswers.length > 0
            ) {
              const nextWorld = WORLD_ORDER.find(
                (world) => !loadedCompletedWorlds.includes(world)
              );
              setCurrentWorld(nextWorld || WORLD_ORDER[0]);
              setCurrentStep(OnboardingStep.MAP);
            } else {
              setCurrentStep(OnboardingStep.MAP);
            }
          } else {
            setCurrentStep(OnboardingStep.MAP);
          }
        }
      } catch (err) {
        console.error('Failed to load existing answers:', err);
        setError(dict.matchmaking.errors.genericLoadError);
        setCurrentStep(OnboardingStep.MAP);
      } finally {
        setIsLoading(false);
      }
    };
    loadExistingAnswers();
  }, [userId, initialWorld, initialQuestionId, dict]);

  const handleAnswer = useCallback(
    (questionId: string, value: AnswerValue) => {
      setError(null);
      setIsDirty(true);

      const currentQuestion = worldConfig[currentWorld].questions.find(
        (q) => q.id === questionId
      );

      setAnswers((prevAnswers) => {
        const answerIndex = prevAnswers.findIndex(
          (a) => a.questionId.toLowerCase() === questionId.toLowerCase()
        );

        const newAnswerBase = {
          questionId,
          worldId: currentWorld,
          value,
          answeredAt: new Date().toISOString(),
          isVisible:
            answerIndex > -1 ? prevAnswers[answerIndex].isVisible : true,
        };
        
        const finalNewAnswer: QuestionnaireAnswer = {
          ...newAnswerBase,
          ...(currentQuestion?.type === 'openText' && {
            language: language as 'en' | 'he',
          }),
        };

        if (answerIndex > -1) {
          const updatedAnswers = [...prevAnswers];
          updatedAnswers[answerIndex] = finalNewAnswer;
          return updatedAnswers;
        } else {
          return [...prevAnswers, finalNewAnswer];
        }
      });
    },
    [currentWorld, language]
  );

  const handleVisibilityChange = useCallback(
    (questionId: string, isVisible: boolean) => {
      setIsDirty(true);
      setAnswers((prevAnswers) => {
        const answerIndex = prevAnswers.findIndex(
          (a) => a.questionId.toLowerCase() === questionId.toLowerCase()
        );
        if (answerIndex > -1) {
          return prevAnswers.map((answer) => {
            if (answer.questionId.toLowerCase() === questionId.toLowerCase()) {
              return { ...answer, isVisible };
            }
            return answer;
          });
        } else {
          const newPlaceholderAnswer: QuestionnaireAnswer = {
            questionId,
            worldId: currentWorld,
            value: undefined,
            answeredAt: new Date().toISOString(),
            isVisible: isVisible,
          };
          return [...prevAnswers, newPlaceholderAnswer];
        }
      });
      showToast(
        isVisible
          ? dict.matchmaking.toasts.answerVisible
          : dict.matchmaking.toasts.answerHidden,
        'info',
        2000
      );
    },
    [showToast, currentWorld, dict]
  );

  const handleWorldChange = useCallback((newWorld: WorldId) => {
    setCurrentWorld(newWorld);
    setCurrentStep(OnboardingStep.WORLDS);
    setError(null);
    setIsDirectNavigation(false);
  }, []);

  const handleWorldComplete = useCallback(
    async (worldId: WorldId) => {
      let updatedCompletedWorlds = completedWorlds;
      if (!completedWorlds.includes(worldId)) {
        updatedCompletedWorlds = [...completedWorlds, worldId];
        setCompletedWorlds(updatedCompletedWorlds);
      }
      showToast(
        dict.matchmaking.toasts.worldFinished.replace(
          '{{worldName}}',
          dict.matchmaking.worldLabels[worldId] ?? worldId.toLowerCase()
        ),
        'success'
      );
      const isQuestionnaireNowFullyCompleted =
        updatedCompletedWorlds.length === WORLD_ORDER.length;
      const submissionDataForWorldComplete = {
        ...prepareSubmissionData(),
        worldsCompleted: updatedCompletedWorlds,
        completed: isQuestionnaireNowFullyCompleted,
        completedAt: isQuestionnaireNowFullyCompleted
          ? new Date().toISOString()
          : undefined,
      };
      if (userId) {
        try {
          setIsSaving(true);
          const response = await fetch('/api/questionnaire', {
            method: 'PUT',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(submissionDataForWorldComplete),
          });
          if (!response.ok)
            throw new Error('Failed to save after world completion');
          setLastSavedTime(new Date());
          setIsDirty(false);
          showToast(dict.matchmaking.toasts.worldProgressSaved, 'success');
        } catch (e) {
          console.error('Error saving after world complete:', e);
          showToast(dict.matchmaking.toasts.worldCompletionError, 'error');
          setError(dict.matchmaking.toasts.worldCompletionError + '.');
          setIsSaving(false);
          return;
        } finally {
          setIsSaving(false);
        }
      } else {
        localStorage.setItem(
          'tempQuestionnaire',
          JSON.stringify(submissionDataForWorldComplete)
        );
        setLastSavedTime(new Date());
        showToast(dict.matchmaking.toasts.worldProgressSavedBrowser, 'info');
      }
      if (isQuestionnaireNowFullyCompleted) {
        if (!userId) {
          router.push('/auth/signin?callbackUrl=/questionnaire/restore');
        } else {
          setCurrentStep(OnboardingStep.COMPLETED);
          if (onComplete) onComplete();
        }
      } else {
        const nextWorld = getNextWorld(worldId);
        if (nextWorld) {
          setCurrentWorld(nextWorld);
          setCurrentStep(OnboardingStep.MAP);
        } else {
          setCurrentStep(OnboardingStep.MAP);
        }
      }
    },
    [
      completedWorlds,
      showToast,
      userId,
      prepareSubmissionData,
      router,
      onComplete,
      dict,
    ]
  );

  const handleExit = useCallback(() => {
    setCurrentStep(OnboardingStep.MAP);
  }, []);

  // --- הקוד המתוקן והמדויק ---
  function renderCurrentWorld() {
    const worldProps = {
      onAnswer: handleAnswer,
      onVisibilityChange: handleVisibilityChange,
      onComplete: () => handleWorldComplete(currentWorld),
      onBack: handleExit,
      answers: answers.filter((a) => a.worldId === currentWorld),
      isCompleted: completedWorlds.includes(currentWorld),
      currentQuestionIndex: currentQuestionIndices[currentWorld],
      setCurrentQuestionIndex: (index: number) => {
        setCurrentQuestionIndices((prev) => ({
          ...prev,
          [currentWorld]: index,
        }));
      },
      onSave: () => handleQuestionnaireSave(false),
      isSaving: isSaving,
      isDirectNavigation: isDirectNavigation,
      dict: {
        world: dict.world,
        questionCard: dict.questionCard,
        // השורה הבאה היא התיקון המרכזי. אנחנו מעבירים את הכותרות ולא את כל אובייקט ההקדמה
        worldLabels: dict.matchmaking.worldLabels,
        answerInput: dict.answerInput,
        interactiveScale: dict.interactiveScale,
        questionsList: dict.questionsList,
        questions: dict.questions,
      },
    };
    return <WorldComponent {...worldProps} worldId={currentWorld} />;
  }

  interface ToastProps {
    message: string;
    type: 'success' | 'error' | 'info';
    isVisible: boolean;
    action?: { label: string; onClick: () => void };
  }

  function renderCurrentStep() {
    if (isLoading) {
      return (
        <div className="flex flex-col items-center justify-center min-h-screen bg-slate-50">
          <Loader2 className="h-10 w-10 animate-spin text-blue-500" />
          <p className="mt-4 text-gray-600">{dict.matchmaking.loading}</p>
        </div>
      );
    }
    switch (currentStep) {
      case OnboardingStep.MAP:
        return (
          <WorldsMap
            currentWorld={currentWorld}
            completedWorlds={completedWorlds}
            onWorldChange={handleWorldChange}
            dict={dict.worldsMap}
          />
        );

      case OnboardingStep.WORLDS:
        return (
          <QuestionnaireLayout
            currentWorld={currentWorld}
            completedWorlds={completedWorlds}
            onWorldChange={handleWorldChange}
            onExit={handleExit}
            onSaveProgress={() => handleQuestionnaireSave(false)}
            language={language}
            isLoggedIn={!!userId}
            dict={{
              layout: dict.layout,
              worldLabels: dict.matchmaking.worldLabels,
              faq: dict.faq,
              accessibilityFeatures: dict.accessibilityFeatures,
            }}
          >
            {renderCurrentWorld()}
          </QuestionnaireLayout>
        );
      case OnboardingStep.COMPLETED:
        return (
          <QuestionnaireCompletion
            onSendToMatching={async () => {
              if (onComplete) onComplete();
              else router.push('/dashboard');
            }}
            isLoading={isSaving}
            isLoggedIn={!!userId}
            dict={dict.completion}
          />
        );
      default:
        return <div>{dict.matchmaking.errors.stageLoadError}</div>;
    }
  }

  const Toast = ({ message, type, isVisible, action }: ToastProps) => {
    if (!isVisible) return null;
    return (
      <div
        className={cn(
          'fixed bottom-4 right-4 z-[100] p-4 rounded-lg shadow-lg max-w-md transition-all duration-300',
          type === 'success' && 'bg-green-500',
          type === 'error' && 'bg-red-500',
          type === 'info' && 'bg-blue-500',
          'text-white'
        )}
      >
        <div className="flex items-center justify-between w-full">
          <div className="flex items-center">
            {type === 'success' ? (
              <CheckCircle className="h-5 w-5 mr-2" />
            ) : type === 'error' ? (
              <XCircle className="h-5 w-5 mr-2" />
            ) : (
              <Info className="h-5 w-5 mr-2" />
            )}
            <p>{message}</p>
          </div>
          {action && (
            <Button
              variant="ghost"
              size="sm"
              onClick={() => {
                action.onClick();
                setToastState((prev) => ({ ...prev, isVisible: false }));
              }}
              className="mr-4 text-white hover:bg-white/20 font-bold"
            >
              {action.label}
            </Button>
          )}
        </div>
      </div>
    );
  };

  const IdleModal = () => {
    if (!showIdleModal) return null;
    return (
      <div className="fixed inset-0 bg-black/60 z-[200] flex items-center justify-center p-4">
        <Card className="max-w-md w-full">
          <CardHeader>
            <CardTitle className="flex items-center">
              <Clock className="w-6 h-6 mr-3 text-blue-500" />
              {dict.matchmaking.idleModal.title}
            </CardTitle>
          </CardHeader>
          <CardContent>
            <p className="text-gray-600 mb-4">
              {dict.matchmaking.idleModal.description}
            </p>
            <div className="flex justify-end gap-2">
              <Button
                variant="outline"
                onClick={() => signOut({ callbackUrl: '/' })}
              >
                <LogOut className="w-4 h-4 mr-2" />
                {dict.matchmaking.idleModal.logoutButton}
              </Button>
              <Button onClick={handleStayActive}>
                {dict.matchmaking.idleModal.stayActiveButton}
              </Button>
            </div>
          </CardContent>
        </Card>
      </div>
    );
  };

  return (
    <div
      className={cn(
        'min-h-screen bg-gray-50',
        language === 'he' ? 'dir-rtl' : 'dir-ltr'
      )}
    >
      <IdleModal />
      {lastSavedTime && currentStep === OnboardingStep.WORLDS && userId && (
        <div className="fixed bottom-4 left-4 z-40 bg-white p-2 rounded-lg shadow-md text-xs text-gray-600 border">
          <div className="flex items-center">
            <CheckCircle className="h-3.5 w-3.5 text-green-500 mr-1" />
            <span>
              {dict.matchmaking.lastSaved.replace(
                '{{time}}',
                lastSavedTime.toLocaleTimeString()
              )}
            </span>
          </div>
        </div>
      )}
      {error && currentStep !== OnboardingStep.WORLDS && (
        <Alert variant="destructive" className="m-4 max-w-lg mx-auto">
          <AlertTriangle className="h-4 w-4 mr-2" />
          <AlertDescription>{error}</AlertDescription>
        </Alert>
      )}
      {renderCurrentStep()}
      <Toast
        message={toastState.message}
        type={toastState.type}
        isVisible={toastState.isVisible}
        action={toastState.action}
      />
    </div>
  );
}
--- End of Content for MatchmakingQuestionnaire.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\questionnaire\QuestionnaireComplete.tsx
--------------------------------------------------------------------------------
Content:
'use client';

import { useEffect } from 'react';
import { useRouter } from 'next/navigation';
import { useSession } from 'next-auth/react';
import { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { CheckCircle2, ArrowRight } from 'lucide-react';
import type { QuestionnaireCompletePageDict } from '@/types/dictionary'; // Import dictionary type

// --- Props Interface ---
interface QuestionnaireCompleteProps {
  dict: QuestionnaireCompletePageDict;
}

export default function QuestionnaireComplete({
  dict,
}: QuestionnaireCompleteProps) {
  const { status } = useSession();
  const router = useRouter();

  useEffect(() => {
    if (status === 'unauthenticated') {
      router.push('/auth/signin');
    }
  }, [status, router]);

  if (status === 'loading') {
    return (
      <div className="container mx-auto py-8 px-4">
        <Card className="max-w-xl mx-auto">
          <CardContent className="p-8">
            <div className="text-center">{dict.loading}</div>
          </CardContent>
        </Card>
      </div>
    );
  }

  return (
    <div className="container mx-auto py-8 px-4">
      <Card className="max-w-xl mx-auto bg-green-50 border-green-200">
        <CardHeader className="text-center pb-2">
          <div className="flex justify-center mb-4">
            <CheckCircle2 className="w-12 h-12 text-green-500" />
          </div>
          <CardTitle className="text-2xl">{dict.title}</CardTitle>
        </CardHeader>

        <CardContent className="space-y-6 pt-4">
          <div className="text-center text-gray-600 space-y-2">
            <p>{dict.successMessage1}</p>
            <p>{dict.successMessage2}</p>
          </div>

          <Alert className="bg-blue-50 border-blue-200">
            <AlertDescription>{dict.profilePrompt}</AlertDescription>
          </Alert>

          <div className="flex justify-center pt-4">
            <Button
              onClick={() => router.push('/profile')}
              className="flex items-center"
            >
              {dict.continueButton}
              <ArrowRight className="mr-2 h-5 w-5" />
            </Button>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}
--- End of Content for QuestionnaireComplete.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\questionnaire\QuestionnairePageClient.tsx
--------------------------------------------------------------------------------
Content:
// src/components/questionnaire/QuestionnairePageClient.tsx
'use client';

import { useSession } from 'next-auth/react';
import { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import { useSearchParams } from 'next/navigation';
import { Button } from '@/components/ui/button';
import { ArrowLeft, AlertCircle, Loader2 } from 'lucide-react';
import { Alert, AlertDescription } from '@/components/ui/alert';
import QuestionnaireLandingPage from './pages/QuestionnaireLandingPage';
import MatchmakingQuestionnaire from './MatchmakingQuestionnaire';
import type { WorldId } from './types/types';
import type { QuestionnaireDictionary } from '@/types/dictionary'; // ייבוא טיפוס המילון

// Enum to track questionnaire flow stages
enum QuestionnaireStage {
  LANDING = 'LANDING',
  QUESTIONNAIRE = 'QUESTIONNAIRE',
  COMPLETE = 'COMPLETE',
}

// הגדרת Props לרכיב
interface QuestionnairePageClientProps {
  dict: QuestionnaireDictionary;
}

export default function QuestionnairePageClient({
  dict,
}: QuestionnairePageClientProps) {
  const { data: session, status } = useSession();
  const router = useRouter();
  const searchParams = useSearchParams();

  // State for tracking current stage in the flow
  const [currentStage, setCurrentStage] = useState<QuestionnaireStage>(
    QuestionnaireStage.LANDING
  );
  const [error, setError] = useState<string | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [hasSavedProgress, setHasSavedProgress] = useState(false);
  const [initialWorld, setInitialWorld] = useState<WorldId | undefined>(
    undefined
  );
  const [initialQuestionId, setInitialQuestionId] = useState<
    string | undefined
  >(undefined);

  // Check for existing progress when component mounts
  useEffect(() => {
    const checkExistingProgress = async () => {
      if (status === 'loading') return;
      setIsLoading(true);
      try {
        if (session?.user?.id) {
          const response = await fetch('/api/questionnaire');
          const data = await response.json();
          if (data.success && data.data) {
            setHasSavedProgress(true);
          }
        }
      } catch (err) {
        console.error('Error checking questionnaire progress:', err);
      } finally {
        setIsLoading(false);
      }
    };
    checkExistingProgress();
  }, [session, status]);

  // Check for world parameter in URL and normalize it
  useEffect(() => {
    if (status === 'loading') {
      return;
    }
    const worldParam = searchParams?.get('world');
    const questionParam = searchParams?.get('question');

    if (worldParam) {
      const worldParamUpper = worldParam.toUpperCase() as WorldId;
      const validWorlds: WorldId[] = [
        'PERSONALITY',
        'VALUES',
        'RELATIONSHIP',
        'PARTNER',
        'RELIGION',
      ];
      if (validWorlds.includes(worldParamUpper)) {
        setInitialWorld(worldParamUpper);
        if (questionParam) {
          setInitialQuestionId(questionParam);
        }
        setCurrentStage(QuestionnaireStage.QUESTIONNAIRE);
      } else {
        console.warn(
          `[QuestionnairePage] Invalid world param received in URL: ${worldParam}`
        );
      }
    }
  }, [searchParams, status]);

  const handleStartQuestionnaire = () => {
    setCurrentStage(QuestionnaireStage.QUESTIONNAIRE);
  };

  const handleQuestionnaireComplete = async () => {
    try {
      await router.push('/questionnaire/complete');
      setCurrentStage(QuestionnaireStage.COMPLETE);
    } catch (err) {
      console.error('Error completing questionnaire:', err);
      setError(dict.page.completionError); // שימוש במילון
    }
  };

  if (isLoading) {
    return (
      <div className="min-h-screen w-full flex flex-col items-center justify-center bg-slate-50">
        <Loader2 className="h-10 w-10 animate-spin text-blue-500" />
      </div>
    );
  }

  const renderCurrentStage = () => {
    switch (currentStage) {
      case QuestionnaireStage.LANDING:
        return (
          <QuestionnaireLandingPage
            onStartQuestionnaire={handleStartQuestionnaire}
            hasSavedProgress={hasSavedProgress}
            dict={dict.landingPage} // <- הוסף את השורה הזו

            // כאן נעביר את המילון הרלוונטי אם וכאשר הרכיב יעודכן
          />
        );
      case QuestionnaireStage.QUESTIONNAIRE:
        return (
          <MatchmakingQuestionnaire
            userId={session?.user?.id}
            onComplete={handleQuestionnaireComplete}
            initialWorld={initialWorld}
            initialQuestionId={initialQuestionId}
            dict={dict} // העברת המילון לרכיב הבן
          />
        );
      case QuestionnaireStage.COMPLETE:
        return null;
      default:
        return <div>{dict.page.stageLoadError}</div>; // שימוש במילון
    }
  };

  return (
    <div className="min-h-screen bg-gray-50">
      {currentStage !== QuestionnaireStage.LANDING && (
        <div className="container mx-auto p-4">
          <Button
            variant="ghost"
            size="sm"
            className="mb-4"
            onClick={() => setCurrentStage(QuestionnaireStage.LANDING)}
          >
            <ArrowLeft className="mr-2 h-4 w-4" />
            {dict.page.backToMain} {/* שימוש במילון */}
          </Button>
        </div>
      )}

      {error && (
        <div className="container mx-auto p-4">
          <Alert variant="destructive" className="mb-4">
            <AlertCircle className="h-4 w-4" />
            <AlertDescription>{error}</AlertDescription>
          </Alert>
        </div>
      )}

      {renderCurrentStage()}
    </div>
  );
}
--- End of Content for QuestionnairePageClient.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\questionnaire\QuestionnaireRestore.tsx
--------------------------------------------------------------------------------
Content:
'use client';

import { useEffect, useState } from 'react';
import { useRouter } from 'next/navigation';
import { useSession } from 'next-auth/react';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { Card, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Loader2 } from 'lucide-react';
import type { QuestionnaireRestoreDict } from '@/types/dictionary'; // Import dictionary type

// --- Props Interface ---
interface QuestionnaireRestoreProps {
  dict: QuestionnaireRestoreDict;
}

export default function QuestionnaireRestore({
  dict,
}: QuestionnaireRestoreProps) {
  const router = useRouter();
  const { data: session, status } = useSession();
  const [isProcessing, setIsProcessing] = useState(false);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    const restoreQuestionnaire = async () => {
      if (isProcessing) return;

      try {
        setIsProcessing(true);
        setError(null);

        const savedData = localStorage.getItem('tempQuestionnaire');

        if (!savedData || !session?.user?.id) {
          router.push('/dashboard');
          return;
        }

        const questionnaireData = JSON.parse(savedData);
        questionnaireData.userId = session.user.id;

        const response = await fetch('/api/questionnaire', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(questionnaireData),
        });

        if (!response.ok) {
          const errorData = await response.json();
          // Developer-facing error can remain in English
          throw new Error(errorData.message || 'Failed to save questionnaire');
        }

        localStorage.removeItem('tempQuestionnaire');
        router.push(
          questionnaireData.completed ? '/dashboard' : '/questionnaire'
        );
      } catch (err) {
        console.error('Error restoring questionnaire:', err);
        // Set user-facing error from the dictionary
        setError(dict.error);
      } finally {
        setIsProcessing(false);
      }
    };

    if (session?.user && !isProcessing && status === 'authenticated') {
      restoreQuestionnaire();
    }
  }, [session, router, isProcessing, status, dict.error]);

  const renderContent = () => {
    if (status === 'loading') {
      return (
        <Card>
          <CardContent className="p-6 text-center">
            <Loader2 className="w-8 h-8 animate-spin mx-auto mb-4" />
            <p className="text-lg">{dict.loading}</p>
          </CardContent>
        </Card>
      );
    }

    if (status === 'unauthenticated') {
      router.push('/login');
      return null;
    }

    if (error) {
      return (
        <>
          <Alert variant="destructive">
            <AlertDescription>{error}</AlertDescription>
          </Alert>
          <div className="mt-4 flex justify-center">
            <Button onClick={() => router.push('/questionnaire')}>
              {dict.backButton}
            </Button>
          </div>
        </>
      );
    }

    return (
      <Card>
        <CardContent className="p-6 text-center">
          <Loader2 className="w-8 h-8 animate-spin mx-auto mb-4" />
          <p className="text-lg">{dict.restoringTitle}</p>
          <p className="text-sm text-gray-500 mt-2">{dict.restoringSubtitle}</p>
        </CardContent>
      </Card>
    );
  };

  return (
    <div className="container mx-auto p-4 max-w-md">{renderContent()}</div>
  );
}
--- End of Content for QuestionnaireRestore.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\questionnaire\questionnaire_contents.txt
--------------------------------------------------------------------------------
[This is the output log file itself. Content not included.]

================================================================================
Directory: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\questionnaire\common
================================================================================

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\questionnaire\common\AnswerInput.tsx
--------------------------------------------------------------------------------
Content:
// src/components/questionnaire/common/AnswerInput.tsx

import React, { useState, useEffect, useCallback } from 'react';
import { Slider } from '@/components/ui/slider';
import { Textarea } from '@/components/ui/textarea';
import { Button } from '@/components/ui/button';
import { Label } from '@/components/ui/label';
import { Input } from '@/components/ui/input';
import { Card } from '@/components/ui/card';
import { Progress } from '@/components/ui/progress';
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from '@/components/ui/tooltip';
import {
  X,
  Plus,
  CheckCircle,
  Eraser,
  Info,
  ChevronDown,
  ChevronUp,
  CornerDownRight,
  AlertCircle,
  Sparkles,
  Clock,
  Copy,
  CheckCheck,
  Edit,
  Trash2,
} from 'lucide-react';
import InteractiveScale from './InteractiveScale';
import type { AnswerValue, Option, Question } from '../types/types';
import { cn } from '@/lib/utils';
import {
  Collapsible,
  CollapsibleContent,
  CollapsibleTrigger,
} from '@/components/ui/collapsible';
import { motion, AnimatePresence } from 'framer-motion';
import { Badge } from '@/components/ui/badge';
import type { AnswerInputDict, InteractiveScaleDict } from '@/types/dictionary';

export interface AnswerInputProps {
  question: Question;
  value?: AnswerValue;
  onChange?: (value: AnswerValue) => void;
  onClear?: () => void;
  className?: string;
  validationError?: string;
  dict: {
    answerInput: AnswerInputDict;
    interactiveScale: InteractiveScaleDict;
  };
}

export default function AnswerInput({
  question,
  value,
  onChange,
  onClear,
  className = '',
  validationError,
  dict,
}: AnswerInputProps) {
  const [internalValue, setInternalValue] = useState<AnswerValue>(value);
  const [error, setError] = useState<string | null>(null);
  const [customValue, setCustomValue] = useState<string>('');
  const [isFocused, setIsFocused] = useState<boolean>(false);
  const [textAreaHeight, setTextAreaHeight] = useState<number>(150);
  const [isCollapsibleOpen, setIsCollapsibleOpen] = useState<boolean>(false);
  const [textCopied, setTextCopied] = useState(false);

  useEffect(() => {
    setInternalValue(value);
    if (typeof value === 'string') {
      if (value.length > 200) setTextAreaHeight(220);
      else if (value.length > 100) setTextAreaHeight(180);
      else setTextAreaHeight(150);
    } else if (value === undefined || value === null) {
      setTextAreaHeight(150);
    }
  }, [value]);

  const handleClear = useCallback(() => {
    let emptyValue: AnswerValue;
    switch (question.type) {
      case 'multiChoice':
      case 'multiSelect':
      case 'multiSelectWithOther':
        emptyValue = [];
        break;
      case 'budgetAllocation':
        emptyValue = {};
        break;
      case 'openText':
        emptyValue = '';
        break;
      case 'scale':
        emptyValue = undefined;
        break;
      case 'singleChoice':
      case 'scenario':
      case 'iconChoice':
      default:
        emptyValue = undefined;
    }
    setInternalValue(emptyValue);
    setCustomValue('');
    setError(null);
    onClear?.();
  }, [question.type, onClear]);

  const handleValueChange = useCallback(
    (newValue: AnswerValue) => {
      if (
        (question.type === 'singleChoice' ||
          question.type === 'iconChoice' ||
          question.type === 'scenario') &&
        newValue === internalValue &&
        !question.isRequired
      ) {
        handleClear();
        return;
      }
      setInternalValue(newValue);
      setError(null);
      onChange?.(newValue);
    },
    [internalValue, onChange, question.isRequired, question.type, handleClear]
  );

  const handleCopyText = useCallback(() => {
    if (typeof internalValue === 'string' && internalValue) {
      navigator.clipboard.writeText(internalValue);
      setTextCopied(true);
      setTimeout(() => setTextCopied(false), 2000);
    }
  }, [internalValue]);

  const optionVariants = {
    initial: { opacity: 0, y: 10 },
    animate: { opacity: 1, y: 0, transition: { duration: 0.2 } },
    exit: { opacity: 0, scale: 0.96, transition: { duration: 0.15 } },
    hover: { scale: 1.02, transition: { duration: 0.2 } },
    tap: { scale: 0.98, transition: { duration: 0.1 } },
  };

  const renderSingleChoiceOption = (
    choiceOption: Option,
    isSelected: boolean
  ) => (
    <motion.div
      key={choiceOption.value}
      variants={optionVariants}
      initial="initial"
      animate="animate"
      exit="exit"
      whileHover={!isSelected ? 'hover' : undefined}
      whileTap="tap"
      className={cn(
        'p-3 border rounded-lg cursor-pointer transition-all',
        'hover:bg-gray-50 flex items-center justify-between gap-2',
        'relative overflow-hidden',
        isSelected && 'bg-blue-50 border-blue-500 shadow-sm'
      )}
      onClick={() => handleValueChange(choiceOption.value)}
    >
      <AnimatePresence>
        {isSelected && (
          <motion.div
            initial={{ opacity: 0, scale: 0.5 }}
            animate={{ opacity: 1, scale: 1 }}
            exit={{ opacity: 0, scale: 0.5 }}
            className="absolute inset-0 bg-gradient-to-r from-blue-50 via-blue-100 to-blue-50 opacity-60"
          />
        )}
      </AnimatePresence>
      <div className="flex items-center gap-2 flex-1 z-10">
        {choiceOption.icon && (
          <motion.div
            className={cn(
              'text-blue-600 transition-transform',
              isSelected && 'text-blue-700'
            )}
            animate={{ scale: isSelected ? 1.1 : 1 }}
          >
            {choiceOption.icon}
          </motion.div>
        )}
        <span className={cn('font-medium', isSelected && 'text-blue-700')}>
          {choiceOption.text}
        </span>
      </div>
      <div className="relative w-6 h-6 z-10">
        <AnimatePresence>
          {isSelected && (
            <motion.div
              key="check"
              initial={{ scale: 0, opacity: 0 }}
              animate={{ scale: 1, opacity: 1 }}
              exit={{ scale: 0, opacity: 0 }}
              className="absolute inset-0 flex items-center justify-center"
            >
              <CheckCircle className="h-5 w-5 text-blue-500" />
            </motion.div>
          )}
          {isSelected && !question.isRequired && (
            <motion.div
              key="clear"
              initial={{ scale: 0, opacity: 0 }}
              animate={{ scale: 1, opacity: 1 }}
              exit={{ scale: 0, opacity: 0 }}
              className="absolute inset-0 flex items-center justify-center opacity-0 hover:opacity-100 transition-opacity"
            >
              <Button
                size="icon"
                variant="ghost"
                className="h-6 w-6 rounded-full text-gray-400 hover:text-red-500 hover:bg-red-50 p-0"
                onClick={(e) => {
                  e.stopPropagation();
                  handleClear();
                }}
                aria-label={dict.answerInput.clearSelection}
              >
                <X className="w-4 h-4" />
              </Button>
            </motion.div>
          )}
        </AnimatePresence>
      </div>
    </motion.div>
  );

  const renderInput = () => {
    switch (question.type) {
      case 'singleChoice':
        return (
          <div className="space-y-2">
            <AnimatePresence initial={false}>
              {question.options?.map((optionItem) => {
                const isSelected = internalValue === optionItem.value;
                return renderSingleChoiceOption(optionItem, isSelected);
              })}
            </AnimatePresence>
          </div>
        );

      case 'scale':
        return (
          <InteractiveScale
            min={question.min ?? 1}
            max={question.max ?? 10}
            step={question.step ?? 1}
            value={
              typeof internalValue === 'number' ? internalValue : undefined
            }
            onChange={(newValue) => handleValueChange(newValue)}
            showLabels={true}
            showValue={true}
            name={question.id}
            required={question.isRequired}
            ariaLabelledby={question.id}
            dict={dict.interactiveScale}
          />
        );

      case 'multiChoice':
      case 'multiSelect':
        const selectedValues = Array.isArray(internalValue)
          ? (internalValue as string[])
          : [];
        return (
          <div className="space-y-2">
            <AnimatePresence initial={false}>
              {question.options?.map((option) => {
                const isSelected = selectedValues.includes(option.value);
                return (
                  <motion.div
                    key={option.value}
                    variants={optionVariants}
                    initial="initial"
                    animate="animate"
                    exit="exit"
                    whileHover="hover"
                    whileTap="tap"
                    className={cn(
                      'p-3 border rounded-lg cursor-pointer transition-all',
                      'hover:bg-gray-50 flex items-center justify-between',
                      'relative overflow-hidden',
                      isSelected && 'bg-blue-50 border-blue-500'
                    )}
                    onClick={() => {
                      let newValues: string[];
                      if (isSelected) {
                        newValues = selectedValues.filter(
                          (v) => v !== option.value
                        );
                      } else {
                        if (
                          question.maxSelections &&
                          selectedValues.length >= question.maxSelections
                        ) {
                          setError(
                            dict.answerInput.multiSelect.maxSelectionError.replace(
                              '{{count}}',
                              String(question.maxSelections)
                            )
                          );
                          setTimeout(() => setError(null), 2000);
                          return;
                        }
                        newValues = [...selectedValues, option.value];
                      }
                      handleValueChange(newValues);
                    }}
                  >
                    <AnimatePresence>
                      {isSelected && (
                        <motion.div
                          initial={{ opacity: 0, scale: 0.5 }}
                          animate={{ opacity: 1, scale: 1 }}
                          exit={{ opacity: 0, scale: 0.5 }}
                          className="absolute inset-0 bg-gradient-to-r from-blue-50 via-blue-100 to-blue-50 opacity-60"
                        />
                      )}
                    </AnimatePresence>
                    <div className="flex items-center gap-2 z-10">
                      {option.icon && (
                        <motion.div
                          className={cn(
                            'text-blue-600 transition-transform',
                            isSelected && 'text-blue-700'
                          )}
                          animate={{ scale: isSelected ? 1.1 : 1 }}
                        >
                          {option.icon}
                        </motion.div>
                      )}
                      <span
                        className={cn(
                          'font-medium',
                          isSelected && 'text-blue-700'
                        )}
                      >
                        {option.text}
                      </span>
                    </div>
                    <div
                      className={cn(
                        'w-5 h-5 border rounded flex items-center justify-center transition-colors',
                        isSelected
                          ? 'bg-blue-500 border-blue-500'
                          : 'border-gray-300 bg-white'
                      )}
                    >
                      <AnimatePresence>
                        {isSelected && (
                          <motion.div
                            initial={{ scale: 0 }}
                            animate={{ scale: 1 }}
                            exit={{ scale: 0 }}
                          >
                            <CheckCheck className="w-4 h-4 text-white" />
                          </motion.div>
                        )}
                      </AnimatePresence>
                    </div>
                  </motion.div>
                );
              })}
            </AnimatePresence>
            {error && (
              <motion.p
                initial={{ opacity: 0, y: -5 }}
                animate={{ opacity: 1, y: 0 }}
                className="text-xs text-red-500 flex items-center gap-1"
              >
                <AlertCircle className="w-3 h-3" /> {error}
              </motion.p>
            )}
            {(question.minSelections || question.maxSelections) && (
              <motion.div
                initial={{ opacity: 0 }}
                animate={{ opacity: 1 }}
                className="text-xs text-gray-500 mt-2 flex justify-between items-center p-2 bg-gray-50 rounded-lg"
              >
                <span className="flex items-center">
                  <Info className="h-3 w-3 mr-1 text-blue-500" />
                  {dict.answerInput.multiSelect.selectedInfo.replace(
                    '{{count}}',
                    selectedValues.length.toString()
                  )}
                </span>
                <span>
                  {question.minSelections &&
                    `${dict.answerInput.multiSelect.minLabel}: ${question.minSelections}`}
                  {question.minSelections && question.maxSelections && ' • '}
                  {question.maxSelections &&
                    `${dict.answerInput.multiSelect.maxLabel}: ${question.maxSelections}`}
                </span>
              </motion.div>
            )}
          </div>
        );

      case 'multiSelectWithOther':
        const selectedWithOtherValues = Array.isArray(internalValue)
          ? (internalValue as string[])
          : [];
        const customAnswers = selectedWithOtherValues.filter((v) =>
          v.startsWith('custom:')
        );
        const predefinedAnswers = selectedWithOtherValues.filter(
          (v) => !v.startsWith('custom:')
        );
        const isCustomValueEmpty = !customValue.trim();
        const isMaxLengthReached =
          question.maxSelections !== undefined &&
          selectedWithOtherValues.length >= question.maxSelections;
        return (
          <div className="space-y-4">
            {question.options?.map((option) => {
              if (option.value === 'other') return null;
              const isSelected = predefinedAnswers.includes(option.value);
              return (
                <motion.div
                  key={option.value}
                  variants={optionVariants}
                  initial="initial"
                  animate="animate"
                  exit="exit"
                  whileHover="hover"
                  whileTap="tap"
                  className={cn(
                    'p-3 border rounded-lg cursor-pointer transition-all',
                    'hover:bg-gray-50 flex items-center justify-between',
                    'relative overflow-hidden',
                    isSelected && 'bg-blue-50 border-blue-500'
                  )}
                  onClick={() => {
                    let newValues: string[];
                    if (isSelected)
                      newValues = predefinedAnswers.filter(
                        (v) => v !== option.value
                      );
                    else {
                      if (isMaxLengthReached) {
                        setError(
                          dict.answerInput.multiSelect.maxSelectionError.replace(
                            '{{count}}',
                            String(question.maxSelections)
                          )
                        );
                        setTimeout(() => setError(null), 2000);
                        return;
                      }
                      newValues = [...predefinedAnswers, option.value];
                    }
                    handleValueChange([...newValues, ...customAnswers]);
                  }}
                >
                  <AnimatePresence>
                    {isSelected && (
                      <motion.div
                        initial={{ opacity: 0, scale: 0.5 }}
                        animate={{ opacity: 1, scale: 1 }}
                        exit={{ opacity: 0, scale: 0.5 }}
                        className="absolute inset-0 bg-gradient-to-r from-blue-50 via-blue-100 to-blue-50 opacity-60"
                      />
                    )}
                  </AnimatePresence>
                  <div className="flex items-center gap-2 z-10">
                    {option.icon && (
                      <motion.div
                        animate={{ scale: isSelected ? 1.1 : 1 }}
                        className={cn(
                          'text-blue-600',
                          isSelected && 'text-blue-700'
                        )}
                      >
                        {option.icon}
                      </motion.div>
                    )}
                    <span
                      className={cn(
                        'font-medium',
                        isSelected && 'text-blue-700'
                      )}
                    >
                      {option.text}
                    </span>
                  </div>
                  <div
                    className={cn(
                      'w-5 h-5 border rounded flex items-center justify-center transition-colors',
                      isSelected
                        ? 'bg-blue-500 border-blue-500'
                        : 'border-gray-300 bg-white'
                    )}
                  >
                    <AnimatePresence>
                      {isSelected && (
                        <motion.div
                          initial={{ scale: 0 }}
                          animate={{ scale: 1 }}
                          exit={{ scale: 0 }}
                        >
                          <CheckCheck className="w-4 h-4 text-white" />
                        </motion.div>
                      )}
                    </AnimatePresence>
                  </div>
                </motion.div>
              );
            })}
            <div className="space-y-2 border-t pt-4 mt-4">
              <Label className="flex items-center gap-2 text-sm font-medium">
                <Plus className="h-4 w-4 text-blue-500" />
                {dict.answerInput.multiSelectWithOther.addOtherOptionLabel}
              </Label>
              <div className="flex gap-2">
                <Input
                  value={customValue}
                  onChange={(e) => setCustomValue(e.target.value)}
                  placeholder={
                    dict.answerInput.multiSelectWithOther.otherOptionPlaceholder
                  }
                  className="flex-1 text-sm"
                  disabled={isMaxLengthReached && isCustomValueEmpty}
                />
                <Button
                  type="button"
                  variant="outline"
                  size="sm"
                  onClick={() => {
                    if (!isCustomValueEmpty) {
                      if (isMaxLengthReached) {
                        setError(
                          dict.answerInput.multiSelect.maxSelectionError.replace(
                            '{{count}}',
                            String(question.maxSelections)
                          )
                        );
                        setTimeout(() => setError(null), 2000);
                        return;
                      }
                      const newCustomAnswer = `custom:${customValue.trim()}`;
                      if (!customAnswers.includes(newCustomAnswer)) {
                        handleValueChange([
                          ...predefinedAnswers,
                          ...customAnswers,
                          newCustomAnswer,
                        ]);
                        setCustomValue('');
                      } else {
                        setError(
                          dict.answerInput.multiSelectWithOther.errorExists
                        );
                        setTimeout(() => setError(null), 2000);
                      }
                    }
                  }}
                  disabled={isCustomValueEmpty || isMaxLengthReached}
                >
                  <Plus className="w-4 h-4 mr-1" />
                  {dict.answerInput.multiSelectWithOther.addButton}
                </Button>
              </div>
            </div>
            {customAnswers.length > 0 && (
              <motion.div
                initial={{ opacity: 0, y: 10 }}
                animate={{ opacity: 1, y: 0 }}
                className="space-y-2 bg-blue-50 p-3 rounded-lg border border-blue-200"
              >
                <Label className="text-xs text-gray-600 flex items-center font-normal">
                  <Edit className="h-3.5 w-3.5 mr-1 text-blue-600" />
                  {dict.answerInput.multiSelectWithOther.addedAnswersLabel}
                </Label>
                <div className="space-y-1 mt-1">
                  {customAnswers.map((customVal, index) => (
                    <motion.div
                      key={index}
                      initial={{ opacity: 0, x: -10 }}
                      animate={{ opacity: 1, x: 0 }}
                      exit={{ opacity: 0, x: 10 }}
                      className="flex items-center justify-between p-1.5 bg-white rounded-md border border-blue-100 text-sm"
                    >
                      <div className="flex items-center">
                        <CornerDownRight className="w-3.5 h-3.5 text-blue-400 mr-2" />
                        <span className="text-gray-700">
                          {customVal.replace('custom:', '')}
                        </span>
                      </div>
                      <Button
                        variant="ghost"
                        size="icon"
                        className="h-6 w-6 text-gray-400 hover:text-red-500 hover:bg-red-50 rounded-full p-0"
                        onClick={() => {
                          const newValues = selectedWithOtherValues.filter(
                            (v) => v !== customVal
                          );
                          handleValueChange(newValues);
                        }}
                        aria-label={
                          dict.answerInput.tooltips.removeCustomAnswer
                        }
                      >
                        <Trash2 className="w-3.5 h-3.5" />
                      </Button>
                    </motion.div>
                  ))}
                </div>
              </motion.div>
            )}
            {error && (
              <motion.p
                initial={{ opacity: 0, y: -5 }}
                animate={{ opacity: 1, y: 0 }}
                className="text-xs text-red-500 flex items-center gap-1"
              >
                <AlertCircle className="w-3 h-3" /> {error}
              </motion.p>
            )}
            {(question.minSelections || question.maxSelections) && (
              <motion.div
                initial={{ opacity: 0 }}
                animate={{ opacity: 1 }}
                className="text-xs text-gray-500 mt-2 flex justify-between items-center p-2 bg-gray-50 rounded-lg"
              >
                <span className="flex items-center">
                  <Info className="h-3 w-3 mr-1 text-blue-500" />
                  {dict.answerInput.multiSelect.selectedInfo.replace(
                    '{{count}}',
                    selectedWithOtherValues.length.toString()
                  )}
                </span>
                <span>
                  {question.minSelections &&
                    `${dict.answerInput.multiSelect.minLabel}: ${question.minSelections}`}
                  {question.minSelections && question.maxSelections && ' • '}
                  {question.maxSelections &&
                    `${dict.answerInput.multiSelect.maxLabel}: ${question.maxSelections}`}
                </span>
              </motion.div>
            )}
          </div>
        );

      case 'scenario':
        return (
          <div className="space-y-2">
            {question.options?.map((option, index) => {
              const optionValue = option.value || option.text;
              const isSelected = internalValue === optionValue;
              return (
                <motion.div
                  key={index}
                  variants={optionVariants}
                  initial="initial"
                  animate="animate"
                  whileHover="hover"
                  whileTap="tap"
                  className={cn(
                    'p-4 border rounded-lg cursor-pointer transition-all',
                    'hover:bg-gray-50 flex items-center justify-between',
                    'relative overflow-hidden',
                    isSelected && 'bg-blue-50 border-blue-500 shadow-sm'
                  )}
                  onClick={() => handleValueChange(optionValue)}
                >
                  <AnimatePresence>
                    {isSelected && (
                      <motion.div
                        initial={{ opacity: 0, scale: 0.5 }}
                        animate={{ opacity: 1, scale: 1 }}
                        exit={{ opacity: 0, scale: 0.5 }}
                        className="absolute inset-0 bg-gradient-to-r from-blue-50 via-blue-100 to-blue-50 opacity-60"
                      />
                    )}
                  </AnimatePresence>
                  <div className="flex-1 z-10">
                    <div
                      className={cn(
                        'font-medium',
                        isSelected && 'text-blue-700'
                      )}
                    >
                      {option.text}
                    </div>
                    {option.description && (
                      <div
                        className={cn(
                          'text-sm text-gray-600 mt-1',
                          isSelected && 'text-blue-600'
                        )}
                      >
                        {option.description}
                      </div>
                    )}
                  </div>
                  <div className="relative w-6 h-6 ml-2 z-10">
                    <AnimatePresence>
                      {isSelected ? (
                        <motion.div
                          key="check"
                          initial={{ scale: 0, opacity: 0 }}
                          animate={{ scale: 1, opacity: 1 }}
                          exit={{ scale: 0, opacity: 0 }}
                          className="absolute inset-0 flex items-center justify-center"
                        >
                          <CheckCircle className="h-5 w-5 text-blue-500" />
                        </motion.div>
                      ) : null}
                      {isSelected && !question.isRequired && (
                        <motion.div
                          key="clear"
                          initial={{ scale: 0, opacity: 0 }}
                          animate={{ scale: 1, opacity: 1 }}
                          exit={{ scale: 0, opacity: 0 }}
                          className="absolute inset-0 flex items-center justify-center opacity-0 hover:opacity-100 transition-opacity"
                        >
                          <Button
                            size="icon"
                            variant="ghost"
                            className="h-6 w-6 rounded-full text-gray-400 hover:text-red-500 hover:bg-red-50 p-0"
                            onClick={(e) => {
                              e.stopPropagation();
                              handleClear();
                            }}
                            aria-label={dict.answerInput.clearSelection}
                          >
                            <X className="w-4 h-4" />
                          </Button>
                        </motion.div>
                      )}
                    </AnimatePresence>
                  </div>
                </motion.div>
              );
            })}
          </div>
        );

      case 'iconChoice':
        return (
          <div className="grid grid-cols-2 sm:grid-cols-3 gap-3">
            {question.options?.map((option) => {
              const isSelected = internalValue === option.value;
              return (
                <TooltipProvider key={option.value} delayDuration={300}>
                  <Tooltip>
                    <TooltipTrigger asChild>
                      <motion.div
                        variants={optionVariants}
                        initial="initial"
                        animate="animate"
                        whileHover="hover"
                        whileTap="tap"
                        onClick={() => handleValueChange(option.value)}
                      >
                        <Card
                          className={cn(
                            'p-4 cursor-pointer transition-all hover:shadow-md relative min-h-[100px]',
                            'flex flex-col items-center justify-center gap-2 text-center',
                            isSelected
                              ? 'ring-2 ring-blue-500 bg-blue-50'
                              : 'bg-white hover:bg-gray-50 border'
                          )}
                        >
                          <AnimatePresence>
                            {isSelected && (
                              <motion.div
                                initial={{ scale: 0 }}
                                animate={{ scale: 1 }}
                                exit={{ scale: 0 }}
                                className="absolute -top-1.5 -right-1.5 bg-blue-500 text-white rounded-full p-0.5 shadow"
                              >
                                <CheckCircle className="h-3.5 w-3.5" />
                              </motion.div>
                            )}
                          </AnimatePresence>
                          {isSelected && !question.isRequired && (
                            <motion.div
                              key="clear-icon"
                              initial={{ scale: 0, opacity: 0 }}
                              animate={{ scale: 1, opacity: 1 }}
                              exit={{ scale: 0, opacity: 0 }}
                              className="absolute top-1 right-1 opacity-0 hover:opacity-100 transition-opacity"
                            >
                              <Button
                                size="icon"
                                variant="ghost"
                                className="h-6 w-6 rounded-full text-gray-400 hover:text-red-500 hover:bg-red-50 p-0"
                                onClick={(e) => {
                                  e.stopPropagation();
                                  handleClear();
                                }}
                                aria-label={dict.answerInput.clearSelection}
                              >
                                <X className="w-3.5 h-3.5" />
                              </Button>
                            </motion.div>
                          )}
                          <motion.div
                            animate={{
                              scale: isSelected ? 1.1 : 1,
                              y: isSelected ? -2 : 0,
                            }}
                            className={cn(
                              'text-3xl mb-1 transition-colors duration-200',
                              isSelected
                                ? 'text-blue-600'
                                : 'text-gray-500 group-hover:text-gray-700'
                            )}
                          >
                            {option.icon}
                          </motion.div>
                          <motion.span
                            animate={{ fontWeight: isSelected ? 600 : 500 }}
                            className={cn(
                              'text-sm',
                              isSelected ? 'text-blue-700' : 'text-gray-700'
                            )}
                          >
                            {option.text}
                          </motion.span>
                        </Card>
                      </motion.div>
                    </TooltipTrigger>
                    {option.description && (
                      <TooltipContent side="top" className="max-w-xs">
                        <p>{option.description}</p>
                      </TooltipContent>
                    )}
                  </Tooltip>
                </TooltipProvider>
              );
            })}
          </div>
        );

      case 'openText':
        const textValue = (internalValue as string) || '';
        const hasMinLength =
          question.minLength !== undefined && question.minLength > 0;
        const hasMaxLength =
          question.maxLength !== undefined && question.maxLength > 0;
        const hasLength = hasMinLength || hasMaxLength;
        const isMinLengthMet =
          !hasMinLength || textValue.length >= (question.minLength ?? 0);
        const isCloseToMax =
          hasMaxLength && textValue.length > (question.maxLength ?? 0) * 0.85;
        const lengthExceeded =
          hasMaxLength && textValue.length > (question.maxLength ?? 0);
        const completionPercentage = hasMinLength
          ? Math.min(
              100,
              Math.round((textValue.length / (question.minLength ?? 1)) * 100)
            )
          : 0;
        return (
          <div className="space-y-2">
            <div
              className={cn(
                'relative border rounded-md transition-all',
                isFocused && 'ring-2 ring-blue-500',
                !isMinLengthMet && question.isRequired
                  ? 'border-red-300'
                  : 'border-gray-300',
                lengthExceeded
                  ? 'border-red-400 bg-red-50/50'
                  : isCloseToMax
                    ? 'border-amber-300 bg-amber-50/50'
                    : ''
              )}
            >
              <Textarea
                value={textValue}
                onChange={(e) => handleValueChange(e.target.value)}
                onFocus={() => setIsFocused(true)}
                onBlur={() => setIsFocused(false)}
                placeholder={
                  question.placeholder || dict.answerInput.openText.placeholder
                }
                className={cn(
                  'resize-y border-0 focus-visible:ring-0 w-full min-h-[150px] text-base leading-relaxed',
                  textValue.length > 0 ? 'pr-12' : 'pr-3',
                  'py-3 pl-3'
                )}
                style={{ height: `${textAreaHeight}px` }}
                aria-label={question.question}
                aria-invalid={
                  (!isMinLengthMet && question.isRequired) || lengthExceeded
                }
                aria-describedby={question.id + '-length-info'}
              />
              {textValue.length > 0 && (
                <div className="absolute top-2 left-2 flex flex-col gap-1">
                  <TooltipProvider>
                    <Tooltip>
                      <TooltipTrigger asChild>
                        <Button
                          variant="ghost"
                          size="icon"
                          className="h-6 w-6 rounded-full"
                          onClick={handleCopyText}
                        >
                          {textCopied ? (
                            <CheckCheck className="h-3.5 w-3.5 text-green-500" />
                          ) : (
                            <Copy className="h-3.5 w-3.5 text-gray-400" />
                          )}
                        </Button>
                      </TooltipTrigger>
                      <TooltipContent side="right">
                        <p>
                          {textCopied
                            ? dict.answerInput.tooltips.copied
                            : dict.answerInput.tooltips.copy}
                        </p>
                      </TooltipContent>
                    </Tooltip>
                  </TooltipProvider>
                  {!question.isRequired && (
                    <TooltipProvider>
                      <Tooltip>
                        <TooltipTrigger asChild>
                          <Button
                            variant="ghost"
                            size="icon"
                            className="h-6 w-6 rounded-full"
                            onClick={handleClear}
                          >
                            <Eraser className="h-3.5 w-3.5 text-gray-400" />
                          </Button>
                        </TooltipTrigger>
                        <TooltipContent side="right">
                          <p>{dict.answerInput.tooltips.clearText}</p>
                        </TooltipContent>
                      </Tooltip>
                    </TooltipProvider>
                  )}
                </div>
              )}
              {hasLength && (
                <div
                  id={question.id + '-length-info'}
                  className="absolute bottom-2 left-2"
                >
                  <Badge
                    variant="outline"
                    className={cn(
                      'text-xs font-normal transition-colors',
                      lengthExceeded
                        ? 'bg-red-100 text-red-800 border-red-200'
                        : isCloseToMax
                          ? 'bg-amber-100 text-amber-800 border-amber-200'
                          : 'bg-gray-100 text-gray-600'
                    )}
                  >
                    {textValue.length}
                    {hasMaxLength && ` / ${question.maxLength}`}
                  </Badge>
                </div>
              )}
            </div>
            {hasMinLength && question.isRequired && (
              <div className="space-y-1">
                <div className="flex justify-between text-xs">
                  <span
                    className={cn(
                      'flex items-center',
                      !isMinLengthMet ? 'text-amber-600' : 'text-green-600'
                    )}
                  >
                    {!isMinLengthMet ? (
                      <>
                        <AlertCircle className="h-3 w-3 mr-1" />
                        {dict.answerInput.openText.minLengthRequired.replace(
                          '{{count}}',
                          (
                            (question.minLength ?? 0) - textValue.length
                          ).toString()
                        )}
                      </>
                    ) : (
                      <>
                        <CheckCircle className="h-3 w-3 mr-1" />
                        {dict.answerInput.openText.minLengthMet}
                      </>
                    )}
                  </span>
                  <span className="font-medium">{completionPercentage}%</span>
                </div>
                <Progress value={completionPercentage} className="h-1.5" />
              </div>
            )}
            <div className="flex flex-wrap justify-between items-center mt-1 gap-2">
              <div className="flex flex-wrap gap-1">
                {hasMinLength && (
                  <div
                    className={cn(
                      'inline-flex items-center text-xs px-2 py-0.5 rounded-full',
                      !isMinLengthMet && question.isRequired
                        ? 'bg-red-100 text-red-700'
                        : 'bg-blue-100 text-blue-700'
                    )}
                  >
                    <Info className="h-3 w-3 mr-1" />
                    {question.isRequired
                      ? dict.answerInput.openText.minLengthInfoRequired.replace(
                          '{{count}}',
                          String(question.minLength ?? 0)
                        )
                      : dict.answerInput.openText.minLengthInfoRecommended.replace(
                          '{{count}}',
                          String(question.minLength ?? 0)
                        )}
                  </div>
                )}
                {lengthExceeded && (
                  <div className="inline-flex items-center text-xs px-2 py-0.5 rounded-full bg-red-100 text-red-700">
                    <AlertCircle className="h-3 w-3 mr-1" />
                    {dict.answerInput.openText.maxLengthExceeded}
                  </div>
                )}
              </div>
              {hasMinLength && (
                <div className="text-xs text-gray-500 flex items-center">
                  <Clock className="h-3 w-3 mr-1" />
                  {dict.answerInput.openText.estimatedTime.replace(
                    '{{count}}',
                    String(
                      Math.max(1, Math.ceil((question.minLength ?? 0) / 70))
                    )
                  )}
                </div>
              )}
            </div>
            {question.description && (
              <Collapsible
                className="mt-4"
                open={isCollapsibleOpen}
                onOpenChange={setIsCollapsibleOpen}
              >
                <CollapsibleTrigger asChild>
                  <Button
                    variant="ghost"
                    size="sm"
                    className="w-full flex items-center justify-between px-3 py-1.5 h-auto hover:bg-blue-50 text-sm text-blue-700"
                  >
                    <div className="flex items-center">
                      <Sparkles className="h-4 w-4 mr-2 text-blue-500" />
                      <span>{dict.answerInput.openText.tipsButton}</span>
                    </div>
                    {isCollapsibleOpen ? (
                      <ChevronUp className="h-4 w-4 text-blue-500" />
                    ) : (
                      <ChevronDown className="h-4 w-4 text-blue-500" />
                    )}
                  </Button>
                </CollapsibleTrigger>
                <CollapsibleContent className="p-4 bg-blue-50 rounded-md mt-2 text-sm text-blue-900 prose prose-sm max-w-none">
                  {question.description}
                </CollapsibleContent>
              </Collapsible>
            )}
          </div>
        );

      case 'budgetAllocation':
        const budgetValues = (internalValue as Record<string, number>) || {};
        const totalAllocatedPoints = Object.values(budgetValues).reduce(
          (sum, val) => sum + (Number(val) || 0),
          0
        );
        const totalPointsRequired = question.totalPoints ?? 100;
        const pointsDifference = totalPointsRequired - totalAllocatedPoints;
        const isAllocationComplete = pointsDifference === 0;
        const isOverAllocated = pointsDifference < 0;
        return (
          <fieldset className="space-y-4 border-none p-0 m-0">
            <legend className="sr-only">{question.question}</legend>
            <div className="space-y-4">
              {question.categories?.map((category) => {
                const categoryValue = budgetValues[category.value] || 0;
                const isActive = categoryValue > 0;
                return (
                  <motion.div
                    key={category.value}
                    className="space-y-2"
                    whileHover={{ scale: 1.01 }}
                    transition={{ duration: 0.2 }}
                  >
                    <div className="flex justify-between items-center">
                      <Label className="flex items-center gap-2 text-sm font-medium">
                        {category.icon && (
                          <motion.div
                            animate={{ scale: isActive ? 1.1 : 1 }}
                            className="text-blue-600"
                          >
                            {category.icon}
                          </motion.div>
                        )}
                        {category.label}
                      </Label>
                      <Badge
                        variant="outline"
                        className={cn(
                          'transition-all text-sm px-2 py-0.5',
                          isActive
                            ? 'bg-blue-100 text-blue-800 border-blue-200'
                            : 'bg-gray-100 text-gray-600 border-gray-200'
                        )}
                      >
                        {categoryValue.toFixed(0)}
                        {question.totalPoints ? '' : '%'}
                      </Badge>
                    </div>
                    <Slider
                      value={[categoryValue]}
                      min={category.min ?? 0}
                      max={category.max ?? totalPointsRequired}
                      step={1}
                      onValueChange={(newValues: number[]) => {
                        const currentOthersTotal =
                          totalAllocatedPoints - categoryValue;
                        const newValue = Math.min(
                          newValues[0],
                          totalPointsRequired - currentOthersTotal
                        );
                        handleValueChange({
                          ...budgetValues,
                          [category.value]: newValue,
                        });
                      }}
                      className={cn(
                        'py-1',
                        isActive
                          ? '[&>span:first-child]:bg-blue-600'
                          : '[&>span:first-child]:bg-gray-300'
                      )}
                      aria-label={`הקצאת נקודות עבור ${category.label}`}
                    />
                    {category.description && (
                      <p className="text-xs text-gray-500 mt-1">
                        {category.description}
                      </p>
                    )}
                  </motion.div>
                );
              })}
              <div
                className={cn(
                  'flex justify-between items-center p-3 rounded-lg border mt-4',
                  isAllocationComplete
                    ? 'bg-green-50 border-green-200'
                    : isOverAllocated
                      ? 'bg-red-50 border-red-200'
                      : 'bg-blue-50 border-blue-200'
                )}
              >
                <div className="text-sm">
                  {dict.answerInput.budgetAllocation.totalAllocated}{' '}
                  <span
                    className={cn(
                      'font-bold',
                      isAllocationComplete
                        ? 'text-green-700'
                        : isOverAllocated
                          ? 'text-red-700'
                          : 'text-blue-700'
                    )}
                  >
                    {totalAllocatedPoints} / {totalPointsRequired}
                  </span>
                  {!isAllocationComplete && (
                    <span
                      className={cn(
                        'text-xs ml-2',
                        isOverAllocated ? 'text-red-600' : 'text-amber-600'
                      )}
                    >
                      (
                      {pointsDifference > 0
                        ? dict.answerInput.budgetAllocation.remaining.replace(
                            '{{count}}',
                            String(pointsDifference)
                          )
                        : dict.answerInput.budgetAllocation.surplus.replace(
                            '{{count}}',
                            String(Math.abs(pointsDifference))
                          )}
                      )
                    </span>
                  )}
                </div>
                {totalAllocatedPoints > 0 &&
                  (!question.isRequired || isAllocationComplete) && (
                    <Button
                      variant="ghost"
                      size="sm"
                      onClick={handleClear}
                      className="text-xs text-red-500 hover:text-red-700 hover:bg-red-50"
                      aria-label={dict.answerInput.tooltips.resetAllocation}
                    >
                      <Eraser className="w-3.5 h-3.5 mr-1" />
                      {dict.answerInput.budgetAllocation.resetButton}
                    </Button>
                  )}
              </div>
              <AnimatePresence>
                {validationError && (
                  <motion.div
                    initial={{ opacity: 0, y: -10 }}
                    animate={{ opacity: 1, y: 0 }}
                    exit={{ opacity: 0, y: -10 }}
                    className="mt-2 p-2 bg-red-50 border border-red-200 text-red-700 text-sm rounded-md flex items-center gap-2"
                  >
                    <AlertCircle className="h-4 w-4" />
                    <span>{validationError}</span>
                  </motion.div>
                )}
              </AnimatePresence>
            </div>
          </fieldset>
        );

      default:
        console.warn('Unsupported question type:', question.type);
        return (
          <div className="p-4 bg-yellow-50 border border-yellow-200 rounded-md text-yellow-800">
            <p>
              <strong>
                {dict.answerInput.unsupportedType.replace(
                  '{{type}}',
                  question.type
                )}
              </strong>
            </p>
          </div>
        );
    }
  };

  return <div className={cn('space-y-4', className)}>{renderInput()}</div>;
}
--- End of Content for AnswerInput.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\questionnaire\common\InteractiveScale.tsx
--------------------------------------------------------------------------------
Content:
// src/components/questionnaire/common/InteractiveScale.tsx
'use client';

import React, { useState, useCallback, useEffect, useRef } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { cn } from '@/lib/utils';
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from '@/components/ui/tooltip';
import { Star, Heart, ThumbsUp } from 'lucide-react';
import type { InteractiveScaleDict } from '@/types/dictionary';

interface ScaleOption {
  value: number;
  label: string;
  description?: string;
  icon?: React.ReactNode;
}

interface InteractiveScaleProps {
  min?: number;
  max?: number;
  step?: number;
  defaultValue?: number;
  value?: number;
  onChange?: (value: number) => void;
  onComplete?: (value: number) => void;
  labels?: { min: string; max: string; middle?: string };
  descriptions?: { min?: string; max?: string; middle?: string };
  options?: ScaleOption[];
  mode?: 'numeric' | 'icons' | 'hearts' | 'stars' | 'thumbs';
  size?: 'sm' | 'md' | 'lg';
  showLabels?: boolean;
  showValue?: boolean;
  showTooltips?: boolean;
  isDisabled?: boolean;
  className?: string;
  required?: boolean;
  name?: string;
  error?: string;
  ariaLabelledby?: string;
  dict: InteractiveScaleDict; // קבלת המילון כ-prop
}

const defaultIcons = { stars: Star, hearts: Heart, thumbs: ThumbsUp };

export default function InteractiveScale({
  min = 1,
  max = 10,
  step = 1,
  defaultValue,
  value: controlledValue,
  onChange,
  onComplete,
  labels,
  options,
  mode = 'numeric',
  size = 'md',
  showLabels = true,
  showValue = true,
  showTooltips = true,
  isDisabled = false,
  className = '',
  required = false,
  name,
  error,
  ariaLabelledby,
  dict, // שימוש במשתנה dict
}: InteractiveScaleProps) {
  const [internalValue, setInternalValue] = useState<number | null>(
    defaultValue || null
  );
  const [hoveredValue, setHoveredValue] = useState<number | null>(null);
  const [isDragging, setIsDragging] = useState(false);
  const containerRef = useRef<HTMLDivElement>(null);

  const value = controlledValue !== undefined ? controlledValue : internalValue;

  const handleValueChange = useCallback(
    (newValue: number) => {
      if (!isDisabled) {
        setInternalValue(newValue);
        onChange?.(newValue);
      }
    },
    [isDisabled, onChange]
  );

  const handleClick = useCallback(
    (clickedValue: number) => {
      handleValueChange(clickedValue);
      onComplete?.(clickedValue);
    },
    [handleValueChange, onComplete]
  );

  const handleKeyPress = useCallback(
    (event: React.KeyboardEvent, itemValue: number) => {
      if (event.key === 'Enter' || event.key === ' ') {
        event.preventDefault();
        handleClick(itemValue);
      }
    },
    [handleClick]
  );

  const handleMouseMove = useCallback(
    (event: MouseEvent) => {
      if (isDragging && containerRef.current) {
        const rect = containerRef.current.getBoundingClientRect();
        const x = event.clientX - rect.left;
        const width = rect.width;
        const percentage = Math.max(0, Math.min(1, x / width));
        const range = max - min;
        const newValue = Math.round((percentage * range) / step) * step + min;
        handleValueChange(newValue);
        setHoveredValue(newValue);
      }
    },
    [isDragging, min, max, step, handleValueChange]
  );

  useEffect(() => {
    if (isDragging) {
      window.addEventListener('mousemove', handleMouseMove);
      window.addEventListener('mouseup', () => setIsDragging(false));
    }
    return () => {
      window.removeEventListener('mousemove', handleMouseMove);
      window.removeEventListener('mouseup', () => setIsDragging(false));
    };
  }, [isDragging, handleMouseMove]);

  const getScaleItems = () => {
    if (options) return options;
    const items: ScaleOption[] = [];
    for (let i = min; i <= max; i += step) {
      const item: ScaleOption = { value: i, label: i.toString() };
      if (mode !== 'numeric') {
        const Icon = defaultIcons[mode as keyof typeof defaultIcons];
        item.icon = <Icon className="w-5 h-5" />;
      }
      items.push(item);
    }
    return items;
  };

  const scaleItems = getScaleItems();
  const activeValue = hoveredValue !== null ? hoveredValue : value;
  const sizeClasses = {
    sm: 'h-8 text-sm',
    md: 'h-10 text-base',
    lg: 'h-12 text-lg',
  };

  return (
    <div
      className={cn(
        'relative space-y-2',
        isDisabled && 'opacity-50 cursor-not-allowed',
        className
      )}
    >
      <div
        ref={containerRef}
        className={cn(
          'relative flex items-center justify-between gap-1',
          sizeClasses[size]
        )}
        onMouseDown={() => !isDisabled && setIsDragging(true)}
      >
        {showLabels && labels && (
          <div className="absolute -top-6 left-0 right-0 flex justify-between text-sm text-gray-500">
            <span>{labels.min}</span>
            {labels.middle && <span>{labels.middle}</span>}
            <span>{labels.max}</span>
          </div>
        )}
        <div className="relative flex-1 flex items-center justify-between">
          <AnimatePresence>
            {scaleItems.map((item) => (
              <TooltipProvider key={item.value}>
                <Tooltip>
                  <TooltipTrigger asChild>
                    <motion.button
                      type="button"
                      className={cn(
                        'relative flex items-center justify-center',
                        'w-8 h-8 rounded-full transition-colors',
                        'focus:outline-none focus:ring-2 focus:ring-offset-2',
                        activeValue !== null &&
                          item.value <= activeValue &&
                          'bg-blue-500 text-white',
                        activeValue !== null &&
                          item.value > activeValue &&
                          'bg-gray-200',
                        isDisabled && 'cursor-not-allowed'
                      )}
                      onClick={() => handleClick(item.value)}
                      onKeyDown={(e) => handleKeyPress(e, item.value)}
                      onMouseEnter={() =>
                        !isDisabled && setHoveredValue(item.value)
                      }
                      onMouseLeave={() => setHoveredValue(null)}
                      disabled={isDisabled}
                      aria-label={dict.ariaLabel.replace(
                        '{{value}}',
                        item.value.toString()
                      )}
                      initial={{ scale: 0.8, opacity: 0 }}
                      animate={{ scale: 1, opacity: 1 }}
                      exit={{ scale: 0.8, opacity: 0 }}
                    >
                      {item.icon || item.label}
                    </motion.button>
                  </TooltipTrigger>
                  {showTooltips && item.description && (
                    <TooltipContent>
                      <p>{item.description}</p>
                    </TooltipContent>
                  )}
                </Tooltip>
              </TooltipProvider>
            ))}
          </AnimatePresence>
        </div>
      </div>
      {showValue && value !== null && (
        <div className="text-center text-sm text-gray-500">
          {dict.selectedValue.replace('{{value}}', value.toString())}
        </div>
      )}
      {error && <div className="text-sm text-red-500 mt-1">{error}</div>}
      {required && (
        <input
          type="hidden"
          name={name}
          value={value || ''}
          required
          aria-hidden="true"
        />
      )}
    </div>
  );
}
--- End of Content for InteractiveScale.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\questionnaire\common\QuestionCard.tsx
--------------------------------------------------------------------------------
Content:
// src/components/questionnaire/common/QuestionCard.tsx
import React, { useState } from 'react';
import { VisibilityToggleButton } from '@/components/ui/VisibilityToggleButton';
import {
  Card,
  CardHeader,
  CardContent,
  CardFooter,
} from '@/components/ui/card';
import Link from 'next/link';
import { Button } from '@/components/ui/button';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { Badge } from '@/components/ui/badge';
import {
  Bookmark,
  AlertCircle,
  HelpCircle,
  SkipForward,
  Star,
  Lightbulb,
  Save,
  Loader2,
  BookUser,
} from 'lucide-react';
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from '@/components/ui/tooltip';
import { motion, AnimatePresence } from 'framer-motion';
import type { Question, QuestionDepth } from '../types/types';
import { cn } from '@/lib/utils';
import type { QuestionCardDict } from '@/types/dictionary'; // ייבוא טיפוס המילון

interface QuestionCardProps {
  question: Question;
  depth: QuestionDepth;
  isRequired?: boolean;
  onSkip?: () => void;
  onBookmark?: () => void;
  onHelp?: () => void;
  className?: string;
  validationError?: string;
  isDisabled?: boolean;
  children?: React.ReactNode;
  language?: string;
  isFirstInList?: boolean;
  themeColor?: 'sky' | 'rose' | 'purple' | 'teal' | 'amber';
  isVisible: boolean;
  onVisibilityChange: (isVisible: boolean) => void;
  onSave?: () => void;
  isSaving?: boolean;
  dict: QuestionCardDict; // קבלת המילון כ-prop
}

const getThemeClasses = (themeColor: string) => {
  const themes = {
    sky: {
      border: 'border-sky-500',
      text: 'text-sky-700',
      bg: 'bg-sky-100',
      bgSoft: 'bg-sky-50',
      ring: 'ring-sky-300',
      icon: 'text-sky-500',
    },
    rose: {
      border: 'border-rose-500',
      text: 'text-rose-700',
      bg: 'bg-rose-100',
      bgSoft: 'bg-rose-50',
      ring: 'ring-rose-300',
      icon: 'text-rose-500',
    },
    purple: {
      border: 'border-purple-500',
      text: 'text-purple-700',
      bg: 'bg-purple-100',
      bgSoft: 'bg-purple-50',
      ring: 'ring-purple-300',
      icon: 'text-purple-500',
    },
    teal: {
      border: 'border-teal-500',
      text: 'text-teal-700',
      bg: 'bg-teal-100',
      bgSoft: 'bg-teal-50',
      ring: 'ring-teal-300',
      icon: 'text-teal-500',
    },
    amber: {
      border: 'border-amber-500',
      text: 'text-amber-700',
      bg: 'bg-amber-100',
      bgSoft: 'bg-amber-50',
      ring: 'ring-amber-300',
      icon: 'text-amber-500',
    },
  };
  return themes[themeColor as keyof typeof themes] || themes.sky;
};

export default function QuestionCard({
  question,
  depth,
  isRequired = false,
  onSkip,
  onBookmark,
  onHelp,
  className = '',
  validationError,
  isDisabled = false,
  children,
  themeColor = 'sky',
  isVisible,
  onVisibilityChange,
  onSave,
  isSaving,
  dict, // שימוש במשתנה dict
}: QuestionCardProps) {
  const [isBookmarked, setIsBookmarked] = useState(false);
  const [showHelp, setShowHelp] = useState(false);

  const cardVariants = {
    initial: { opacity: 0, y: 30, scale: 0.98 },
    animate: {
      opacity: 1,
      y: 0,
      scale: 1,
      transition: { duration: 0.4, ease: 'easeOut' },
    },
    exit: { opacity: 0, y: -20, transition: { duration: 0.2 } },
  };

  const contentVariants = {
    initial: { opacity: 0 },
    animate: { opacity: 1, transition: { delay: 0.1, duration: 0.3 } },
  };

  const themeClasses = getThemeClasses(themeColor);

  return (
    <motion.div
      key={question.id}
      initial="initial"
      animate="animate"
      exit="exit"
      variants={cardVariants}
    >
      <Card
        role="region"
        aria-labelledby={question.id}
        className={cn(
          'transition-all duration-300 shadow-lg rounded-xl overflow-hidden border',
          isDisabled ? 'opacity-75 cursor-not-allowed' : 'hover:shadow-xl',
          `border-t-4 ${themeClasses.border}`,
          className
        )}
      >
        <CardHeader className="relative flex flex-col space-y-2 pb-3">
          <div className="flex items-center justify-between">
            <div className="flex flex-wrap items-center gap-2">
              <TooltipProvider delayDuration={200}>
                <Tooltip>
                  <TooltipTrigger>
                    <Badge
                      variant="outline"
                      className={cn(
                        'text-xs font-medium border-2',
                        themeClasses.border,
                        themeClasses.bgSoft,
                        themeClasses.text
                      )}
                    >
                      <Star className="h-3.5 w-3.5 mr-1.5" />
                      {dict.depthLabels[depth]}
                    </Badge>
                  </TooltipTrigger>
                  <TooltipContent side="bottom" className="max-w-xs">
                    <p className="text-sm">{dict.depthDescriptions[depth]}</p>
                  </TooltipContent>
                </Tooltip>
              </TooltipProvider>

              {isRequired && (
                <Badge variant="destructive" className="text-xs animate-pulse">
                  {dict.requiredBadge}
                </Badge>
              )}
            </div>

            <div className="flex items-center gap-1">
              {onBookmark && (
                <TooltipProvider>
                  <Tooltip>
                    <TooltipTrigger asChild>
                      <Button
                        variant="ghost"
                        size="icon"
                        onClick={() => setIsBookmarked(!isBookmarked)}
                        className={cn(
                          'h-8 w-8 rounded-full',
                          isBookmarked
                            ? 'text-amber-500 bg-amber-100'
                            : 'text-slate-400 hover:bg-slate-100'
                        )}
                        aria-label={
                          isBookmarked
                            ? dict.tooltips.removeBookmark
                            : dict.tooltips.addBookmark
                        }
                      >
                        <Bookmark className="w-4 h-4" />
                      </Button>
                    </TooltipTrigger>
                    <TooltipContent>
                      <p>
                        {isBookmarked
                          ? dict.tooltips.removeBookmark
                          : dict.tooltips.addBookmark}
                      </p>
                    </TooltipContent>
                  </Tooltip>
                </TooltipProvider>
              )}
              {question.metadata?.helpText && (
                <TooltipProvider>
                  <Tooltip>
                    <TooltipTrigger asChild>
                      <Button
                        variant="ghost"
                        size="icon"
                        onClick={() => setShowHelp(!showHelp)}
                        className={cn(
                          'h-8 w-8 rounded-full',
                          showHelp
                            ? `${themeClasses.bg} ${themeClasses.text}`
                            : 'text-slate-400 hover:bg-slate-100'
                        )}
                        aria-label={
                          showHelp
                            ? dict.tooltips.hideHelp
                            : dict.tooltips.showHelp
                        }
                      >
                        <HelpCircle className="w-4 h-4" />
                      </Button>
                    </TooltipTrigger>
                    <TooltipContent>
                      <p>
                        {showHelp
                          ? dict.tooltips.hideHelp
                          : dict.tooltips.whyQuestion}
                      </p>
                    </TooltipContent>
                  </Tooltip>
                </TooltipProvider>
              )}
            </div>
          </div>

          <motion.div variants={contentVariants}>
            <h2
              id={question.id}
              className="text-xl sm:text-2xl font-semibold mt-3 text-slate-800 leading-snug"
            >
              {question.question}
            </h2>
          </motion.div>
        </CardHeader>

        <CardContent className="relative pt-2 space-y-4">
          <AnimatePresence>
            {showHelp && question.metadata?.helpText && (
              <motion.div
                initial={{ opacity: 0, y: -10 }}
                animate={{ opacity: 1, y: 0 }}
                exit={{ opacity: 0, y: -10 }}
                transition={{ duration: 0.2 }}
              >
                <Alert
                  className={cn(
                    themeClasses.bgSoft,
                    'border-2',
                    themeClasses.border
                      .replace('border-', 'border-')
                      .replace('-500', '-200')
                  )}
                >
                  <Lightbulb className={cn('h-4 w-4', themeClasses.icon)} />
                  <AlertDescription
                    className={cn(themeClasses.text, 'font-medium')}
                  >
                    {question.metadata.helpText}
                  </AlertDescription>
                </Alert>
              </motion.div>
            )}
          </AnimatePresence>

          <AnimatePresence>
            {validationError && (
              <motion.div
                initial={{ opacity: 0, y: -10 }}
                animate={{ opacity: 1, y: 0 }}
                exit={{ opacity: 0, y: -10 }}
              >
                <Alert role="alert" variant="destructive" className="py-2">
                  <AlertCircle className="h-4 w-4 mr-2" />
                  <AlertDescription className="text-sm">
                    {validationError}
                  </AlertDescription>
                </Alert>
              </motion.div>
            )}
          </AnimatePresence>

          <div className="mt-4">
            <motion.div variants={contentVariants} className="relative">
              {children}
            </motion.div>
          </div>
        </CardContent>

        <CardFooter className="relative flex justify-between items-center pt-4 border-t border-slate-100 bg-slate-50/50">
          <div className="flex items-center gap-3">
            <TooltipProvider delayDuration={200}>
              <Tooltip>
                <TooltipTrigger asChild>
                  <VisibilityToggleButton
                    isVisible={isVisible}
                    onToggle={() => onVisibilityChange(!isVisible)}
                    disabled={isDisabled}
                    visibleText={dict.visibilityButton.visible}
                    hiddenText={dict.visibilityButton.hidden}
                  />
                </TooltipTrigger>
                <TooltipContent side="top" className="max-w-xs">
                  <div className="text-center">
                    <p className="font-medium mb-1">
                      {isVisible
                        ? dict.tooltips.visibility.visibleTitle
                        : dict.tooltips.visibility.hiddenTitle}
                    </p>
                    <p className="text-xs text-muted-foreground">
                      {isVisible
                        ? dict.tooltips.visibility.visibleDesc
                        : dict.tooltips.visibility.hiddenDesc}
                    </p>
                  </div>
                </TooltipContent>
              </Tooltip>
            </TooltipProvider>
          </div>

          <div className="flex items-center gap-1">
            {onSave && (
              <TooltipProvider>
                <Tooltip>
                  <TooltipTrigger asChild>
                    <Button
                      variant="ghost"
                      size="icon"
                      className="h-8 w-8 rounded-full text-slate-500 hover:bg-slate-100"
                      onClick={onSave}
                      disabled={isSaving || isDisabled}
                      aria-label={dict.tooltips.saveProgress}
                    >
                      {isSaving ? (
                        <Loader2 className="w-4 h-4 animate-spin text-blue-500" />
                      ) : (
                        <Save className="w-4 h-4" />
                      )}
                    </Button>
                  </TooltipTrigger>
                  <TooltipContent>
                    <p>
                      {isSaving
                        ? dict.tooltips.saveProgressSaving
                        : dict.tooltips.saveProgress}
                    </p>
                  </TooltipContent>
                </Tooltip>
              </TooltipProvider>
            )}

            <TooltipProvider>
              <Tooltip>
                <TooltipTrigger asChild>
                  <Link href="/profile?tab=questionnaire" legacyBehavior>
                    <a target="_blank" rel="noopener noreferrer">
                      <Button
                        variant="ghost"
                        size="icon"
                        className="h-8 w-8 rounded-full text-slate-500 hover:bg-slate-100"
                        aria-label={dict.tooltips.viewProfile}
                      >
                        <BookUser className="w-4 h-4" />
                      </Button>
                    </a>
                  </Link>
                </TooltipTrigger>
                <TooltipContent>
                  <p>{dict.tooltips.viewProfile}</p>
                </TooltipContent>
              </Tooltip>
            </TooltipProvider>

            {onSkip && (
              <Button
                variant="ghost"
                size="sm"
                onClick={onSkip}
                disabled={isRequired || isDisabled}
                className={cn(
                  'text-slate-500 hover:text-slate-800',
                  (isRequired || isDisabled) && 'opacity-50 cursor-not-allowed'
                )}
              >
                {isRequired ? dict.skipButton.required : dict.skipButton.skip}
                {!isRequired && <SkipForward className="w-4 h-4 mr-2" />}
              </Button>
            )}
          </div>
        </CardFooter>
      </Card>
    </motion.div>
  );
}
--- End of Content for QuestionCard.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\questionnaire\common\QuestionnaireCompletion.tsx
--------------------------------------------------------------------------------
Content:
// src/components/questionnaire/common/QuestionnaireCompletion.tsx
import React from 'react';
import Link from 'next/link';
import { Button } from '@/components/ui/button';
import {
  Card,
  CardContent,
  CardHeader,
  CardTitle,
  CardDescription,
} from '@/components/ui/card';
import { Send, CheckCircle2, BookUser, Loader2 } from 'lucide-react';
import type { QuestionnaireCompletionDict } from '@/types/dictionary'; // ייבוא טיפוס המילון

interface QuestionnaireCompletionProps {
  onSendToMatching: () => void;
  isLoading?: boolean;
  isLoggedIn?: boolean;
  dict: QuestionnaireCompletionDict; // קבלת המילון כ-prop
}

const QuestionnaireCompletion: React.FC<QuestionnaireCompletionProps> = ({
  onSendToMatching,
  isLoading = false,
  isLoggedIn = false,
  dict, // שימוש במשתנה dict
}) => {
  return (
    <div className="max-w-xl mx-auto p-4">
      <Card className="bg-green-50 border-green-200">
        <CardHeader>
          <div className="flex justify-center mb-4">
            <CheckCircle2 className="w-12 h-12 text-green-500" />
          </div>
          <CardTitle className="text-2xl text-center">{dict.title}</CardTitle>
          <CardDescription className="text-center">
            {isLoggedIn ? dict.loggedInDescription : dict.guestDescription}
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-6">
          {isLoggedIn ? (
            <>
              <div className="text-center text-gray-600">
                <p>{dict.loggedInContent.prompt}</p>
                <p className="text-sm mt-2">
                  {dict.loggedInContent.promptSubtitle}
                </p>
              </div>
              <div className="space-y-3">
                <Button
                  className="w-full"
                  size="lg"
                  onClick={onSendToMatching}
                  disabled={isLoading}
                >
                  {isLoading ? (
                    <Loader2 className="w-5 h-5 ml-2 animate-spin" />
                  ) : (
                    <Send className="w-5 h-5 ml-2" />
                  )}
                  {isLoading
                    ? dict.loggedInContent.sendingButton
                    : dict.loggedInContent.sendButton}
                </Button>
                <Link href="/profile?tab=questionnaire" className="block">
                  <Button
                    variant="outline"
                    className="w-full bg-white/70"
                    size="lg"
                    disabled={isLoading}
                  >
                    <BookUser className="w-5 h-5 ml-2 text-blue-600" />
                    {dict.loggedInContent.reviewButton}
                  </Button>
                </Link>
              </div>
            </>
          ) : (
            <Button className="w-full" size="lg" onClick={onSendToMatching}>
              {dict.guestContent.loginButton}
            </Button>
          )}
        </CardContent>
      </Card>
    </div>
  );
};

export default QuestionnaireCompletion;
--- End of Content for QuestionnaireCompletion.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\questionnaire\common\QuestionsList.tsx
--------------------------------------------------------------------------------
Content:
// src/components/questionnaire/common/QuestionsList.tsx
import React from 'react';
import { ScrollArea } from '@/components/ui/scroll-area';
import { CheckCircle, AlertCircle, Circle, Sparkles } from 'lucide-react';
import { cn } from '@/lib/utils';
import type {
  Question,
  QuestionnaireAnswer,
  AnswerValue,
} from '../types/types';
import { Badge } from '@/components/ui/badge';
import type { QuestionsListDict } from '@/types/dictionary'; // Import dictionary type

interface QuestionsListProps {
  allQuestions: Question[];
  currentQuestionIndex: number;
  setCurrentQuestionIndex: (index: number) => void;
  answers: QuestionnaireAnswer[];
  language?: string;
  className?: string;
  onClose?: () => void;
  themeColor?: 'sky' | 'rose' | 'purple' | 'teal' | 'amber';
  dict: QuestionsListDict; // Use the specific dictionary type
}

const QuestionsList: React.FC<QuestionsListProps> = ({
  allQuestions,
  currentQuestionIndex,
  setCurrentQuestionIndex,
  answers,
  language = 'he',
  className = '',
  onClose,
  themeColor = 'sky',
  dict,
}) => {
  const isRTL = language === 'he';

  const findAnswer = (questionId: string): AnswerValue | undefined => {
    return answers.find((a) => a.questionId === questionId)?.value;
  };

  const isAnswerNotEmpty = (answer: AnswerValue | undefined): boolean => {
    if (answer === undefined || answer === null) return false;
    if (typeof answer === 'string' && answer.trim() === '') return false;
    if (Array.isArray(answer) && answer.length === 0) return false;
    if (
      typeof answer === 'object' &&
      !Array.isArray(answer) &&
      Object.keys(answer).length === 0
    )
      return false;
    return true;
  };

  const handleItemClick = (index: number) => {
    setCurrentQuestionIndex(index);
    onClose?.();
  };

  const themeClasses = {
    text: `text-${themeColor}-700`,
    bgSoft: `bg-${themeColor}-50`,
    border: `border-${themeColor}-300`,
    ring: `ring-${themeColor}-400`,
    icon: `text-${themeColor}-600`,
  };

  return (
    <ScrollArea className={cn('h-full', className)}>
      <div className="relative space-y-2 p-2" dir={isRTL ? 'rtl' : 'ltr'}>
        <div
          className="absolute top-0 bottom-0 w-0.5 bg-slate-200"
          style={isRTL ? { right: '1.625rem' } : { left: '1.625rem' }}
        ></div>

        {allQuestions.map((q, index) => {
          const answer = findAnswer(q.id);
          const isAnswered = isAnswerNotEmpty(answer);
          const isCurrent = index === currentQuestionIndex;

          let StatusIcon;
          let itemClasses = 'bg-white hover:bg-slate-50 border-slate-200';
          let textClasses = 'text-slate-700';

          if (isAnswered) {
            StatusIcon = (
              <CheckCircle className={cn('h-5 w-5', themeClasses.icon)} />
            );
          } else if (q.isRequired) {
            StatusIcon = <AlertCircle className="h-5 w-5 text-red-500" />;
          } else {
            StatusIcon = <Circle className="h-5 w-5 text-slate-300" />;
          }

          if (isCurrent) {
            StatusIcon = (
              <Sparkles className={cn('h-5 w-5', themeClasses.icon)} />
            );
            itemClasses = `${themeClasses.bgSoft} ${themeClasses.border} ring-2 ${themeClasses.ring}`;
            textClasses = `${themeClasses.text} font-semibold`;
          }

          return (
            <button
              key={q.id}
              type="button"
              className={cn(
                'relative w-full flex items-start text-start p-3 rounded-lg transition-all duration-200 border shadow-sm group',
                itemClasses
              )}
              onClick={() => handleItemClick(index)}
              aria-current={isCurrent ? 'step' : undefined}
            >
              <div className="flex-shrink-0 z-10 bg-white rounded-full p-1">
                {StatusIcon}
              </div>

              <div className={cn('flex-1 min-w-0 ml-3', textClasses)}>
                <p
                  className="text-sm leading-relaxed"
                  style={{ whiteSpace: 'normal' }}
                >
                  <span className="font-medium">{index + 1}. </span>
                  {q.question}
                </p>
                <div className="mt-2">
                  <Badge
                    variant="outline"
                    className="text-xs font-normal bg-white"
                  >
                    {dict.depthLabels[q.depth]}
                  </Badge>
                </div>
              </div>
            </button>
          );
        })}
      </div>
    </ScrollArea>
  );
};

export default QuestionsList;
--- End of Content for QuestionsList.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\questionnaire\common\WorldIntro.tsx
--------------------------------------------------------------------------------
Content:
// src/components/questionnaire/common/WorldIntro.tsx
import React from 'react';
import { motion } from 'framer-motion';
import { Card, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import {
  Scroll,
  Heart,
  Users,
  UserCheck,
  ArrowRight,
  Clock,
  HelpCircle,
  CheckCircle2,
  User,
  Sparkles,
  Brain,
} from 'lucide-react';
import type { WorldId, Question } from '../types/types';
import { cn } from '@/lib/utils';
import { useMediaQuery } from '../hooks/useMediaQuery';
import type { WorldIntroDict } from '@/types/dictionary';

interface WorldIntroProps {
  worldId: WorldId;
  allQuestions: Question[];
  onStart: () => void;
  className?: string;
  dict: WorldIntroDict;
}

// אובייקט קונפיגורציה ויזואלי (נשאר בקוד)
const worldVisualConfig = {
  PERSONALITY: { Icon: User, themeColor: 'sky' },
  VALUES: { Icon: Heart, themeColor: 'rose' },
  RELATIONSHIP: { Icon: Users, themeColor: 'purple' },
  PARTNER: { Icon: UserCheck, themeColor: 'teal' },
  RELIGION: { Icon: Scroll, themeColor: 'amber' },
};

const WORLD_ORDER: WorldId[] = [
  'PERSONALITY',
  'VALUES',
  'RELATIONSHIP',
  'PARTNER',
  'RELIGION',
];

export default function WorldIntro({
  worldId,
  allQuestions,
  onStart,
  className = '',
  dict,
}: WorldIntroProps) {
  const visualConfig = worldVisualConfig[worldId];
  const content = dict.worldsContent[worldId];

  const { Icon, themeColor } = visualConfig;
  const {
    title,
    subtitle,
    whyIsItImportant,
    whatYouWillDiscover,
    guidingThought,
  } = content;

  const isMobile = useMediaQuery('(max-width: 1023px)');

  // חישובים דינמיים
  const totalQuestions = allQuestions.length;
  const requiredQuestions = allQuestions.filter((q) => q.isRequired).length;
  const estimatedTime = Math.max(5, Math.round(totalQuestions * 0.4));
  const worldIndex = WORLD_ORDER.indexOf(worldId) + 1;

  // Framer Motion Variants
  const containerVariants = {
    hidden: { opacity: 0, scale: 0.98 },
    visible: {
      opacity: 1,
      scale: 1,
      transition: { duration: 0.5, ease: 'circOut', staggerChildren: 0.1 },
    },
  };

  const itemVariants = {
    hidden: { opacity: 0, y: 20 },
    visible: {
      opacity: 1,
      y: 0,
      transition: { duration: 0.4, ease: 'easeOut' },
    },
  };

  const stats = [
    {
      label: dict.stats.estimatedTime,
      value: `~${estimatedTime} ${dict.statsValues.minutes}`,
      IconComp: Clock,
    },
    {
      label: dict.stats.totalQuestions,
      value: totalQuestions,
      IconComp: HelpCircle,
    },
    {
      label: dict.stats.requiredQuestions,
      value: requiredQuestions,
      IconComp: CheckCircle2,
    },
  ];

  const ActionButton = () => (
    <Button
      onClick={onStart}
      size="lg"
      className={cn(
        'w-full text-lg font-medium py-3 rounded-lg shadow-md transition-all duration-300 ease-in-out transform hover:scale-105',
        `bg-${themeColor}-600 hover:bg-${themeColor}-700 text-white`
      )}
    >
      {dict.startButton}
      <ArrowRight className="w-5 h-5 mr-2 animate-pulse-fast" />
    </Button>
  );

  return (
    <div className={cn('bg-slate-50 px-4 sm:px-6', className)}>
      <motion.div
        className="w-full max-w-4xl"
        variants={containerVariants}
        initial="hidden"
        animate="visible"
      >
        <Card className="overflow-hidden shadow-xl rounded-xl border-slate-200 bg-white">
          <CardContent className="p-0">
            {isMobile && (
              <div className="p-6 border-b">
                <ActionButton />
              </div>
            )}
            <div className="grid lg:grid-cols-2">
              <motion.div
                variants={itemVariants}
                className={`bg-${themeColor}-50/50 p-6 sm:p-8 flex flex-col justify-between`}
              >
                <div>
                  <Badge
                    variant="outline"
                    className={`border-${themeColor}-300 bg-white text-${themeColor}-700 mb-4`}
                  >
                    {dict.world} {worldIndex} {dict.of} {WORLD_ORDER.length}
                  </Badge>
                  <div
                    className={`mb-4 inline-block p-4 rounded-xl bg-gradient-to-br from-${themeColor}-500 to-${themeColor}-600 shadow-lg`}
                  >
                    <Icon className="w-12 h-12 text-white" />
                  </div>
                  <h1 className="text-3xl sm:text-4xl font-bold tracking-tight text-slate-800">
                    {title}
                  </h1>
                  <p
                    className={`mt-2 text-lg text-${themeColor}-800 font-medium`}
                  >
                    {subtitle}
                  </p>
                </div>
                <div className="mt-8 space-y-4">
                  {stats.map((stat, index) => (
                    <div key={index} className="flex items-center gap-3">
                      <div className={`p-2 rounded-md bg-${themeColor}-100`}>
                        <stat.IconComp
                          className={`w-5 h-5 text-${themeColor}-600`}
                        />
                      </div>
                      <div>
                        <div className="text-sm text-slate-500">
                          {stat.label}
                        </div>
                        <div className="font-semibold text-slate-700">
                          {stat.value}
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              </motion.div>

              <motion.div
                variants={itemVariants}
                className="p-6 sm:p-8 flex flex-col justify-between"
              >
                <div className="space-y-6">
                  <div>
                    <h3 className="text-lg font-semibold text-slate-700 flex items-center">
                      <Sparkles
                        className={`w-5 h-5 mr-2 text-${themeColor}-500`}
                      />
                      {dict.whyTitle}
                    </h3>
                    <p className="mt-2 text-slate-600 leading-relaxed">
                      {whyIsItImportant}
                    </p>
                  </div>
                  <div>
                    <h3 className="text-lg font-semibold text-slate-700 flex items-center">
                      <Brain
                        className={`w-5 h-5 mr-2 text-${themeColor}-500`}
                      />
                      {dict.whatYouWillDiscoverTitle}
                    </h3>
                    <ul className="mt-2 space-y-1 list-disc list-inside text-slate-600">
                      {whatYouWillDiscover.map((item, index) => (
                        <li key={index}>{item}</li>
                      ))}
                    </ul>
                  </div>
                  <div
                    className={`border-r-4 border-${themeColor}-300 pr-4 py-2 bg-${themeColor}-50/60 rounded-r-md`}
                  >
                    <p className="text-slate-700 italic">{guidingThought}</p>
                  </div>
                </div>

                {!isMobile && (
                  <div className="mt-8 pt-6 border-t border-slate-200">
                    <ActionButton />
                  </div>
                )}
              </motion.div>
            </div>
            {isMobile && (
              <div className="p-6 border-t">
                <ActionButton />
              </div>
            )}
          </CardContent>
        </Card>
      </motion.div>
      <style jsx global>{`
        @keyframes pulse-fast {
          0%,
          100% {
            opacity: 1;
            transform: translateX(0);
          }
          50% {
            opacity: 0.8;
            transform: translateX(2px);
          }
        }
        .animate-pulse-fast {
          animation: pulse-fast 1.5s ease-in-out infinite;
        }
        .bg-sky-50\\/50,
        .bg-sky-100,
        .bg-sky-600,
        .hover\\:bg-sky-700,
        .text-sky-600,
        .text-sky-700,
        .text-sky-800,
        .border-sky-300 {
        }
        .bg-rose-50\\/50,
        .bg-rose-100,
        .bg-rose-600,
        .hover\\:bg-rose-700,
        .text-rose-600,
        .text-rose-700,
        .text-rose-800,
        .border-rose-300 {
        }
        .bg-purple-50\\/50,
        .bg-purple-100,
        .bg-purple-600,
        .hover\\:bg-purple-700,
        .text-purple-600,
        .text-purple-700,
        .text-purple-800,
        .border-purple-300 {
        }
        .bg-teal-50\\/50,
        .bg-teal-100,
        .bg-teal-600,
        .hover\\:bg-teal-700,
        .text-teal-600,
        .text-teal-700,
        .text-teal-800,
        .border-teal-300 {
        }
        .bg-amber-50\\/50,
        .bg-amber-100,
        .bg-amber-600,
        .hover\\:bg-amber-700,
        .text-amber-600,
        .text-amber-700,
        .text-amber-800,
        .border-amber-300 {
        }
      `}</style>
    </div>
  );
}
--- End of Content for WorldIntro.tsx ---

================================================================================
Directory: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\questionnaire\components
================================================================================

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\questionnaire\components\AccessibilityFeatures.tsx
--------------------------------------------------------------------------------
Content:
'use client';

import React, { useState, useEffect, useRef, useCallback } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import {
  Accessibility,
  Plus,
  Minus,
  MoonStar,
  SunMedium,
  Type,
  MousePointer,
  Hand,
  Contrast,
  Speech,
  X,
  Settings,
  Volume2,
  VolumeX,
  Palette,
  Eye,
  RefreshCw,
  Check,
  Sparkles,
} from 'lucide-react';
import { cn } from '@/lib/utils';
import { Slider } from '@/components/ui/slider';
import { Label } from '@/components/ui/label';
import { Switch } from '@/components/ui/switch';
import type { AccessibilityFeaturesDict } from '@/types/dictionary'; // Import dictionary type

declare global {
  interface Window {
    webkitAudioContext: typeof AudioContext;
  }
}

interface AccessibilityFeaturesProps {
  className?: string;
  isPanelOpen?: boolean;
  onPanelOpenChange?: (isOpen: boolean) => void;
  dict: AccessibilityFeaturesDict; // Use the specific dictionary type
}

interface AccessibilitySettings {
  fontScale: number;
  contrastMode: 'normal' | 'high' | 'dark';
  reducedMotion: boolean;
  readableMode: boolean;
  bigCursor: boolean;
  textReader: boolean;
  soundEnabled: boolean;
}

const defaultSettings: AccessibilitySettings = {
  fontScale: 1,
  contrastMode: 'normal',
  reducedMotion: false,
  readableMode: false,
  bigCursor: false,
  textReader: false,
  soundEnabled: true,
};

const getSettingName = (
  key: keyof AccessibilitySettings,
  dict: AccessibilityFeaturesDict
): string => {
  return dict.settingNames[key] || key;
};

export default function AccessibilityFeatures({
  className,
  isPanelOpen,
  onPanelOpenChange,
  dict,
}: AccessibilityFeaturesProps) {
  const [settings, setSettings] =
    useState<AccessibilitySettings>(defaultSettings);
  const [internalShowPanel, setInternalShowPanel] = useState(false);
  const [hasChanges, setHasChanges] = useState(false);
  const [showToast, setShowToast] = useState<{
    message: string;
    type: 'success' | 'info';
    visible: boolean;
  }>({ message: '', type: 'info', visible: false });

  const panelRef = useRef<HTMLDivElement>(null);
  const toastTimeoutRef = useRef<NodeJS.Timeout>();

  const showAccessibilityPanel =
    isPanelOpen !== undefined ? isPanelOpen : internalShowPanel;
  const setShowAccessibilityPanel = onPanelOpenChange || setInternalShowPanel;

  useEffect(() => {
    const savedSettings = localStorage.getItem('accessibilitySettings');
    if (savedSettings) {
      try {
        const parsed = JSON.parse(savedSettings);
        setSettings({ ...defaultSettings, ...parsed });
      } catch (error) {
        console.error('Error loading accessibility settings:', error);
      }
    }
  }, []);

  useEffect(() => {
    const htmlElement = document.documentElement;
    htmlElement.style.fontSize = `${settings.fontScale * 100}%`;
    htmlElement.classList.toggle(
      'high-contrast',
      settings.contrastMode === 'high'
    );
    htmlElement.classList.toggle('dark-mode', settings.contrastMode === 'dark');
    htmlElement.classList.toggle('reduce-motion', settings.reducedMotion);
    htmlElement.classList.toggle('readable-font', settings.readableMode);
    htmlElement.classList.toggle('big-cursor', settings.bigCursor);
    updateAccessibilityStyles();
    localStorage.setItem('accessibilitySettings', JSON.stringify(settings));
  }, [settings]);

  const updateAccessibilityStyles = () => {
    const styleElement =
      document.getElementById('accessibility-styles') ||
      document.createElement('style');
    styleElement.id = 'accessibility-styles';
    styleElement.textContent = `
      .high-contrast { filter: contrast(1.5) brightness(1.1); }
      .dark-mode { filter: invert(1) hue-rotate(180deg); background: #1a1a1a !important; }
      .reduce-motion * { animation-duration: 0.001s !important; transition-duration: 0.001s !important; }
      .readable-font * { font-family: 'Arial', 'Helvetica', sans-serif !important; letter-spacing: 0.05em !important; word-spacing: 0.1em !important; line-height: 1.6 !important; }
      .big-cursor, .big-cursor * { cursor: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 16 16"><circle fill="%23000" stroke="%23fff" stroke-width="2" cx="8" cy="8" r="6"/></svg>') 16 16, auto !important; }
      .accessibility-panel-enter { opacity: 0; transform: scale(0.95) translateY(10px); transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1); }
      .accessibility-panel-enter-active { opacity: 1; transform: scale(1) translateY(0); }
      .accessibility-panel-exit { opacity: 1; transform: scale(1) translateY(0); transition: all 0.2s ease-in; }
      .accessibility-panel-exit-active { opacity: 0; transform: scale(0.95) translateY(10px); }
      .accessibility-button { transition: all 0.3s ease; }
      .accessibility-button:hover { transform: scale(1.05); box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15); }
      .accessibility-button:active { transform: scale(0.95); }
      .toast-enter { opacity: 0; transform: translateY(20px) scale(0.9); transition: all 0.3s ease; }
      .toast-enter-active { opacity: 1; transform: translateY(0) scale(1); }
      .toast-exit { opacity: 1; transform: translateY(0) scale(1); transition: all 0.2s ease; }
      .toast-exit-active { opacity: 0; transform: translateY(20px) scale(0.9); }
      .pulse-animation { animation: pulse 2s infinite; }
      @keyframes pulse { 0%, 100% { opacity: 1; transform: scale(1); } 50% { opacity: 0.8; transform: scale(1.1); } }
      .setting-card { transition: all 0.2s ease; border-radius: 8px; }
      .setting-card:hover { background-color: rgba(59, 130, 246, 0.05); transform: translateX(-2px); }
    `;
    if (!document.getElementById('accessibility-styles')) {
      document.head.appendChild(styleElement);
    }
  };

  const showSuccessToast = useCallback((message: string) => {
    setShowToast({ message, type: 'success', visible: true });
    if (toastTimeoutRef.current) clearTimeout(toastTimeoutRef.current);
    toastTimeoutRef.current = setTimeout(() => {
      setShowToast((prev) => ({ ...prev, visible: false }));
    }, 2500);
  }, []);

  const playClickSound = useCallback(() => {
    try {
      const AudioContext = window.AudioContext || window.webkitAudioContext;
      if (!AudioContext) return;
      const audioContext = new AudioContext();
      const oscillator = audioContext.createOscillator();
      const gainNode = audioContext.createGain();
      oscillator.connect(gainNode);
      gainNode.connect(audioContext.destination);
      oscillator.frequency.setValueAtTime(800, audioContext.currentTime);
      gainNode.gain.setValueAtTime(0.1, audioContext.currentTime);
      gainNode.gain.exponentialRampToValueAtTime(
        0.01,
        audioContext.currentTime + 0.1
      );
      oscillator.start(audioContext.currentTime);
      oscillator.stop(audioContext.currentTime + 0.1);
    } catch (error) {
      console.log('Could not play sound:', error);
    }
  }, []);

  const updateSetting = useCallback(
    <K extends keyof AccessibilitySettings>(
      key: K,
      value: AccessibilitySettings[K]
    ) => {
      setSettings((prev) => ({ ...prev, [key]: value }));
      setHasChanges(true);
      if (settings.soundEnabled) playClickSound();
      const settingName = getSettingName(key, dict);
      showSuccessToast(
        dict.toasts.settingUpdated.replace('{{settingName}}', settingName)
      );
    },
    [settings.soundEnabled, playClickSound, dict, showSuccessToast]
  );

  const readSelectedText = useCallback((e: MouseEvent) => {
    const element = e.target as HTMLElement;
    if (element && element.textContent && 'speechSynthesis' in window) {
      window.speechSynthesis.cancel();
      const text = element.textContent.trim();
      if (text && text.length > 0) {
        const utterance = new SpeechSynthesisUtterance(text);
        const voices = window.speechSynthesis.getVoices();
        const hebrewVoice = voices.find((voice) => voice.lang === 'he-IL');
        if (hebrewVoice) {
          utterance.voice = hebrewVoice;
          utterance.lang = 'he-IL';
        }
        utterance.rate = 0.9;
        window.speechSynthesis.speak(utterance);
      }
    }
  }, []);

  const toggleTextReader = useCallback(() => {
    const willBeActive = !settings.textReader;
    updateSetting('textReader', willBeActive);
    if (willBeActive) {
      document.addEventListener('click', readSelectedText);
      showSuccessToast(dict.toasts.readerEnabled);
    } else {
      document.removeEventListener('click', readSelectedText);
      if (window.speechSynthesis) window.speechSynthesis.cancel();
    }
  }, [
    settings.textReader,
    updateSetting,
    readSelectedText,
    showSuccessToast,
    dict.toasts.readerEnabled,
  ]);

  const resetSettings = () => {
    setSettings(defaultSettings);
    setHasChanges(false);
    showSuccessToast(dict.toasts.settingsReset);
    if (settings.soundEnabled) playClickSound();
  };

  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (
        panelRef.current &&
        !panelRef.current.contains(event.target as Node)
      ) {
        const target = event.target as HTMLElement;
        if (!target.closest('[data-accessibility-trigger]')) {
          setShowAccessibilityPanel(false);
        }
      }
    };
    if (showAccessibilityPanel) {
      document.addEventListener('mousedown', handleClickOutside);
    }
    return () => document.removeEventListener('mousedown', handleClickOutside);
  }, [showAccessibilityPanel, setShowAccessibilityPanel]);

  useEffect(() => {
    return () => {
      if (toastTimeoutRef.current) clearTimeout(toastTimeoutRef.current);
      document.removeEventListener('click', readSelectedText);
    };
  }, [readSelectedText]);

  const contrastOptions = [
    { key: 'normal' as const, icon: SunMedium },
    { key: 'high' as const, icon: Contrast },
    { key: 'dark' as const, icon: MoonStar },
  ];

  const advancedOptions = [
    {
      key: 'sound' as const,
      setting: 'soundEnabled' as const,
      icon: settings.soundEnabled ? Volume2 : VolumeX,
    },
    { key: 'reader' as const, setting: 'textReader' as const, icon: Speech },
    {
      key: 'cursor' as const,
      setting: 'bigCursor' as const,
      icon: MousePointer,
    },
    { key: 'font' as const, setting: 'readableMode' as const, icon: Eye },
    { key: 'motion' as const, setting: 'reducedMotion' as const, icon: Hand },
  ];

  return (
    <>
      <div className="fixed z-50 bottom-4 right-4">
        <Button
          data-accessibility-trigger
          variant={showAccessibilityPanel ? 'default' : 'outline'}
          size="icon"
          className={cn(
            'accessibility-button rounded-full shadow-lg transition-all duration-300',
            'hover:shadow-xl bg-white border-2',
            showAccessibilityPanel
              ? 'bg-blue-600 border-blue-600 text-white shadow-blue-200'
              : 'border-blue-200 hover:border-blue-400 hover:bg-blue-50',
            hasChanges && 'ring-2 ring-blue-400 ring-opacity-50 ring-offset-2',
            className
          )}
          onClick={() => setShowAccessibilityPanel(!showAccessibilityPanel)}
          title={
            showAccessibilityPanel
              ? dict.triggerButton.close
              : dict.triggerButton.open
          }
        >
          <div className="relative">
            {showAccessibilityPanel ? (
              <X className="h-5 w-5" />
            ) : (
              <Accessibility className="h-5 w-5" />
            )}
            {hasChanges && !showAccessibilityPanel && (
              <div className="absolute -top-1 -right-1 w-3 h-3 bg-blue-600 rounded-full pulse-animation" />
            )}
          </div>
        </Button>
      </div>

      {showAccessibilityPanel && (
        <div
          ref={panelRef}
          className={cn(
            'fixed z-40 bottom-20 right-4 max-w-sm w-[340px]',
            'accessibility-panel-enter accessibility-panel-enter-active'
          )}
        >
          <Card className="shadow-2xl border-2 border-blue-100 bg-white">
            <CardHeader className="pb-3 bg-gradient-to-r from-blue-50 to-indigo-50 rounded-t-lg">
              <div className="flex items-center justify-between">
                <CardTitle className="text-lg flex items-center gap-2 text-slate-800">
                  <div className="p-1.5 bg-blue-100 rounded-lg">
                    <Settings className="h-4 w-4 text-blue-600" />
                  </div>
                  {dict.panelTitle}
                  {hasChanges && (
                    <Badge
                      variant="secondary"
                      className="text-xs bg-blue-100 text-blue-700 border-blue-200"
                    >
                      <Sparkles className="h-3 w-3 mr-1" />
                      {dict.changedBadge}
                    </Badge>
                  )}
                </CardTitle>
              </div>
              <p className="text-xs text-slate-600 mt-1">
                {dict.panelSubtitle}
              </p>
            </CardHeader>

            <CardContent className="space-y-6 pt-5 max-h-[65vh] overflow-y-auto">
              <div className="space-y-3">
                <div className="flex justify-between items-center">
                  <Label className="text-sm font-medium flex items-center gap-2">
                    <Type className="h-4 w-4 text-blue-500" />
                    {dict.textSize.title}
                  </Label>
                  <div className="flex items-center gap-2">
                    <Button
                      variant="outline"
                      size="sm"
                      className="h-8 w-8 p-0 hover:bg-blue-50 border-blue-200"
                      onClick={() =>
                        updateSetting(
                          'fontScale',
                          Math.max(0.8, settings.fontScale - 0.1)
                        )
                      }
                      disabled={settings.fontScale <= 0.8}
                    >
                      <Minus className="h-3 w-3" />
                    </Button>
                    <Badge
                      variant="outline"
                      className="min-w-[55px] text-center font-mono bg-blue-50 border-blue-200"
                    >
                      {Math.round(settings.fontScale * 100)}%
                    </Badge>
                    <Button
                      variant="outline"
                      size="sm"
                      className="h-8 w-8 p-0 hover:bg-blue-50 border-blue-200"
                      onClick={() =>
                        updateSetting(
                          'fontScale',
                          Math.min(1.6, settings.fontScale + 0.1)
                        )
                      }
                      disabled={settings.fontScale >= 1.6}
                    >
                      <Plus className="h-3 w-3" />
                    </Button>
                  </div>
                </div>
                <Slider
                  value={[settings.fontScale * 100]}
                  min={80}
                  max={160}
                  step={5}
                  onValueChange={(value) =>
                    updateSetting('fontScale', value[0] / 100)
                  }
                  className="py-2"
                />
                <p className="text-xs text-slate-500">
                  {dict.textSize.description}
                </p>
              </div>

              <div className="space-y-4">
                <Label className="text-sm font-medium flex items-center gap-2">
                  <Palette className="h-4 w-4 text-blue-500" />
                  {dict.displayMode.title}
                </Label>
                <div className="grid grid-cols-3 gap-2">
                  {contrastOptions.map(({ key, icon: Icon }) => {
                    const optionDict = dict.contrastOptions[key];
                    return (
                      <Button
                        key={key}
                        variant={
                          settings.contrastMode === key ? 'default' : 'outline'
                        }
                        size="sm"
                        className={cn(
                          'h-14 flex flex-col gap-1 text-xs transition-all relative',
                          settings.contrastMode === key
                            ? 'bg-blue-600 text-white border-blue-600 shadow-md'
                            : 'hover:bg-blue-50 border-blue-200'
                        )}
                        onClick={() => updateSetting('contrastMode', key)}
                        title={optionDict.description}
                      >
                        <Icon className="h-4 w-4" />
                        <span className="font-medium">{optionDict.label}</span>
                        {settings.contrastMode === key && (
                          <div className="absolute top-1 right-1">
                            <Check className="h-3 w-3" />
                          </div>
                        )}
                      </Button>
                    );
                  })}
                </div>
              </div>

              <div className="space-y-4 pt-2 border-t border-slate-200">
                <Label className="text-sm font-medium text-slate-700">
                  {dict.additionalSettings.title}
                </Label>
                {advancedOptions.map(({ key, setting, icon: Icon }) => {
                  const optionDict = dict.advancedOptions[key];
                  return (
                    <div
                      key={key}
                      className="setting-card flex items-center justify-between group p-3 rounded-lg"
                    >
                      <div className="flex items-center gap-3">
                        <div
                          className={cn(
                            'p-2 rounded-lg transition-colors',
                            settings[setting]
                              ? 'bg-blue-100 text-blue-600'
                              : 'bg-slate-100 text-slate-500 group-hover:bg-blue-50 group-hover:text-blue-500'
                          )}
                        >
                          <Icon className="h-4 w-4" />
                        </div>
                        <div className="flex-1">
                          <Label className="text-sm font-medium cursor-pointer">
                            {optionDict.label}
                          </Label>
                          <p className="text-xs text-slate-500 mt-0.5 leading-relaxed">
                            {optionDict.description}
                          </p>
                        </div>
                      </div>
                      <Switch
                        checked={settings[setting]}
                        onCheckedChange={(checked) => {
                          if (setting === 'textReader') toggleTextReader();
                          else updateSetting(setting, checked);
                        }}
                      />
                    </div>
                  );
                })}
              </div>

              <div className="pt-4 border-t border-slate-200">
                <Button
                  variant="outline"
                  size="sm"
                  className={cn(
                    'w-full flex items-center gap-2 transition-all',
                    hasChanges
                      ? 'hover:bg-red-50 hover:border-red-200 hover:text-red-700'
                      : 'opacity-50 cursor-not-allowed'
                  )}
                  onClick={resetSettings}
                  disabled={!hasChanges}
                >
                  <RefreshCw className="h-4 w-4" />
                  {dict.resetButton}
                </Button>
              </div>
            </CardContent>
          </Card>
        </div>
      )}

      {showToast.visible && (
        <div className="fixed bottom-4 left-4 z-50 toast-enter toast-enter-active">
          <div className="bg-green-600 text-white px-4 py-3 rounded-lg shadow-lg flex items-center gap-2 border border-green-500">
            <div className="p-1 bg-green-500 rounded-full">
              <Check className="h-3 w-3" />
            </div>
            <span className="text-sm font-medium">{showToast.message}</span>
          </div>
        </div>
      )}
    </>
  );
}
--- End of Content for AccessibilityFeatures.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\questionnaire\components\FAQ.tsx
--------------------------------------------------------------------------------
Content:
import React, { useState, useMemo } from 'react';
import {
  Accordion,
  AccordionContent,
  AccordionItem,
  AccordionTrigger,
} from '@/components/ui/accordion';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { cn } from '@/lib/utils';
import {
  Search,
  HelpCircle,
  ArrowRight,
  Info,
  Clock,
  Star,
  AlertCircle,
} from 'lucide-react';
import { Badge } from '@/components/ui/badge';
import type { QuestionnaireFaqDict, FaqAnswerPart } from '@/types/dictionary'; // Import dictionary type

interface FAQProps {
  className?: string;
  showSearch?: boolean;
  showCategories?: boolean;
  initialOpenId?: string;
  dict: QuestionnaireFaqDict; // Use the specific dictionary type
}

// Metadata for FAQs (category, popularity) which is not part of translation
const faqMetadata: {
  [key: string]: { category: string; isPopular?: boolean };
} = {
  'save-progress': { category: 'technical', isPopular: true },
  'time-to-complete': { category: 'process', isPopular: true },
  'required-questions': { category: 'process' },
  'how-matching-works': { category: 'process', isPopular: true },
  'privacy-info': { category: 'privacy' },
  'edit-answers': { category: 'technical' },
  'match-percentage': { category: 'results' },
  'incomplete-questionnaire': { category: 'process' },
  'inactive-account': { category: 'general' },
};

// Helper function to render the answer JSX from dictionary data
const renderAnswer = (answerParts: FaqAnswerPart[]) => (
  <div className="space-y-3">
    {answerParts.map((part, index) => {
      switch (part.type) {
        case 'p':
          return <p key={index}>{part.content}</p>;
        case 'list':
          return (
            <ol key={index} className="list-decimal mr-5 space-y-1">
              {(part.content as string[]).map((item, i) => (
                <li key={i}>{item}</li>
              ))}
            </ol>
          );
        case 'tip':
          return (
            <div
              key={index}
              className="flex items-start gap-2 mt-2 p-3 bg-blue-50 rounded-md"
            >
              <Clock className="h-5 w-5 text-blue-500 mt-0.5" />
              <div className="text-sm text-blue-700">
                <p className="font-medium mb-1">{part.title}</p>
                <p>{part.content}</p>
              </div>
            </div>
          );
        case 'info':
          return (
            <div
              key={index}
              className="flex items-start gap-2 mt-2 p-3 bg-blue-50 rounded-md"
            >
              <Info className="h-5 w-5 text-blue-500 mt-0.5" />
              <div className="text-sm text-blue-700">
                <p>{part.content}</p>
              </div>
            </div>
          );
        case 'star':
          return (
            <div
              key={index}
              className="flex items-start gap-2 mt-2 p-3 bg-amber-50 rounded-md border border-amber-100"
            >
              <Star className="h-5 w-5 text-amber-500 mt-0.5" />
              <div className="text-sm text-amber-700">
                <p>{part.content}</p>
              </div>
            </div>
          );
        case 'alert':
          return (
            <div
              key={index}
              className="flex items-start gap-2 mt-2 p-3 bg-red-50 rounded-md border border-red-100"
            >
              <AlertCircle className="h-5 w-5 text-red-500 mt-0.5" />
              <div className="text-sm text-red-700">
                <p>{part.content}</p>
              </div>
            </div>
          );
        default:
          return null;
      }
    })}
  </div>
);

export default function FAQ({
  className,
  showSearch = true,
  showCategories = true,
  initialOpenId,
  dict,
}: FAQProps) {
  const [searchQuery, setSearchQuery] = useState('');
  const [activeCategory, setActiveCategory] = useState<string | null>(null);
  const [expandedItems, setExpandedItems] = useState<string[]>(
    initialOpenId ? [initialOpenId] : []
  );

  const faqItems = useMemo(() => {
    return Object.keys(dict.items).map((id) => {
      const key = id as keyof typeof dict.items;
      return {
        id,
        question: dict.items[key].question,
        answer: renderAnswer(dict.items[key].answer),
        category: faqMetadata[key].category,
        isPopular: faqMetadata[key].isPopular || false,
      };
    });
  }, [dict]); // <-- Change dict.items to dict

  const categories = useMemo(
    () => [
      {
        id: 'process',
        label: dict.categories.process,
        icon: <ArrowRight className="h-4 w-4" />,
      },
      {
        id: 'technical',
        label: dict.categories.technical,
        icon: <HelpCircle className="h-4 w-4" />,
      },
      {
        id: 'privacy',
        label: dict.categories.privacy,
        icon: <Info className="h-4 w-4" />,
      },
      {
        id: 'results',
        label: dict.categories.results,
        icon: <Star className="h-4 w-4" />,
      },
      {
        id: 'general',
        label: dict.categories.general,
        icon: <Info className="h-4 w-4" />,
      },
    ],
    [dict.categories]
  );

  const filteredItems = useMemo(() => {
    return faqItems.filter((item) => {
      const matchesSearch =
        !searchQuery ||
        item.question.toLowerCase().includes(searchQuery.toLowerCase());

      const matchesCategory =
        !activeCategory || item.category === activeCategory;

      return matchesSearch && matchesCategory;
    });
  }, [faqItems, searchQuery, activeCategory]);

  return (
    <Card className={cn('shadow-sm', className)}>
      <CardHeader className="pb-3">
        <CardTitle className="text-lg md:text-xl">{dict.title}</CardTitle>
        <p className="text-gray-500 text-sm">{dict.subtitle}</p>

        {showSearch && (
          <div className="relative mt-2">
            <Search className="absolute left-3 top-2.5 h-4 w-4 text-gray-400" />
            <Input
              placeholder={dict.searchPlaceholder}
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
              className="pl-10 bg-gray-50"
            />
          </div>
        )}

        {showCategories && (
          <div className="flex flex-wrap gap-2 mt-3">
            <Badge
              variant={activeCategory === null ? 'default' : 'outline'}
              className="cursor-pointer"
              onClick={() => setActiveCategory(null)}
            >
              {dict.categories.all}
            </Badge>

            {categories.map((category) => (
              <Badge
                key={category.id}
                variant={activeCategory === category.id ? 'default' : 'outline'}
                className="cursor-pointer flex items-center gap-1"
                onClick={() =>
                  setActiveCategory(
                    activeCategory === category.id ? null : category.id
                  )
                }
              >
                {category.icon}
                {category.label}
              </Badge>
            ))}
          </div>
        )}
      </CardHeader>

      <CardContent>
        {filteredItems.length === 0 ? (
          <div className="text-center py-8">
            <HelpCircle className="h-12 w-12 mx-auto text-gray-300 mb-2" />
            <p className="text-gray-500">{dict.emptyState}</p>
          </div>
        ) : (
          <Accordion
            type="multiple"
            value={expandedItems}
            onValueChange={setExpandedItems}
            className="space-y-2"
          >
            {filteredItems.map((item) => (
              <AccordionItem
                key={item.id}
                value={item.id}
                className={cn(
                  'border rounded-lg px-4 py-1',
                  expandedItems.includes(item.id)
                    ? 'bg-blue-50 border-blue-200'
                    : 'bg-white border-gray-200 hover:border-blue-200'
                )}
              >
                <AccordionTrigger className="hover:no-underline py-3">
                  <div className="flex items-center gap-2 text-right">
                    <span className="font-medium">{item.question}</span>
                    {item.isPopular && (
                      <Badge
                        variant="outline"
                        className="bg-amber-50 text-amber-700 border-amber-200 text-xs"
                      >
                        {dict.popularBadge}
                      </Badge>
                    )}
                  </div>
                </AccordionTrigger>
                <AccordionContent className="text-gray-700 pt-1 pb-4">
                  {item.answer}
                </AccordionContent>
              </AccordionItem>
            ))}
          </Accordion>
        )}
      </CardContent>
    </Card>
  );
}
--- End of Content for FAQ.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\questionnaire\components\MatchResultCard.tsx
--------------------------------------------------------------------------------
Content:
import React, { useState } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { Card, CardContent, CardFooter } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import {
  Heart,
  X,
  MessageCircle,
  User,
  MapPin,
  Calendar,
  GraduationCap,
  Briefcase,
  Sparkles,
  Star,
  BookOpen,
  ChevronsDown,
  ChevronsUp,
  Music,
  Coffee,
  Bookmark,
  ExternalLink,
} from 'lucide-react';
import { Progress } from '@/components/ui/progress';
import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';
import { cn } from '@/lib/utils';
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from '@/components/ui/tooltip';
import type { MatchResultCardDict } from '@/types/dictionary'; // Import dictionary type

interface MatchTrait {
  name: string;
  score: number; // 0-100
  description?: string;
}

interface CommonInterest {
  name: string;
  category:
    | 'hobby'
    | 'value'
    | 'lifestyle'
    | 'religion'
    | 'education'
    | 'other';
  icon?: React.ReactNode;
}

interface MatchResultCardProps {
  id: string;
  name: string;
  age: number;
  location: string;
  distance?: number;
  profileImage?: string;
  matchPercentage: number;
  occupation?: string;
  education?: string;
  about?: string;
  matchTraits?: MatchTrait[];
  commonInterests?: CommonInterest[];
  lastActive?: Date;
  conversationStarted?: boolean;
  bookmarked?: boolean;
  className?: string;
  onAccept?: (id: string) => void;
  onReject?: (id: string) => void;
  onMessage?: (id: string) => void;
  onViewProfile?: (id: string) => void;
  onBookmark?: (id: string, bookmarked: boolean) => void;
  isPremium?: boolean;
  dict: MatchResultCardDict; // Use the specific dictionary type
}

export default function MatchResultCard({
  id,
  name,
  age,
  location,
  distance,
  profileImage,
  matchPercentage,
  occupation,
  education,
  about,
  matchTraits = [],
  commonInterests = [],
  lastActive,
  conversationStarted = false,
  bookmarked = false,
  className,
  onAccept,
  onReject,
  onMessage,
  onViewProfile,
  onBookmark,
  isPremium = false,
  dict,
}: MatchResultCardProps) {
  const [isExpanded, setIsExpanded] = useState(false);
  const [isBookmarked, setIsBookmarked] = useState(bookmarked);
  const [showConfirmReject, setShowConfirmReject] = useState(false);

  const getCategoryIcon = (category: string) => {
    switch (category) {
      case 'hobby':
        return <Music className="h-3.5 w-3.5" />;
      case 'value':
        return <Heart className="h-3.5 w-3.5" />;
      case 'lifestyle':
        return <Coffee className="h-3.5 w-3.5" />;
      case 'religion':
        return <BookOpen className="h-3.5 w-3.5" />;
      case 'education':
        return <GraduationCap className="h-3.5 w-3.5" />;
      default:
        return <Star className="h-3.5 w-3.5" />;
    }
  };

  const formatLastActive = (date?: Date) => {
    if (!date) return dict.lastActiveFormat.unknown;
    const now = new Date();
    const diffInDays = Math.floor(
      (now.getTime() - date.getTime()) / (1000 * 60 * 60 * 24)
    );
    if (diffInDays === 0) return dict.lastActiveFormat.today;
    if (diffInDays === 1) return dict.lastActiveFormat.yesterday;
    if (diffInDays < 7)
      return dict.lastActiveFormat.daysAgo.replace(
        '{{count}}',
        diffInDays.toString()
      );
    const diffInWeeks = Math.floor(diffInDays / 7);
    if (diffInDays < 30)
      return dict.lastActiveFormat.weeksAgo.replace(
        '{{count}}',
        diffInWeeks.toString()
      );
    const diffInMonths = Math.floor(diffInDays / 30);
    return dict.lastActiveFormat.monthsAgo.replace(
      '{{count}}',
      diffInMonths.toString()
    );
  };

  const handleBookmark = () => {
    setIsBookmarked(!isBookmarked);
    if (onBookmark) onBookmark(id, !isBookmarked);
  };

  const getMatchColor = () => {
    if (matchPercentage >= 90) return 'from-green-400 to-emerald-500';
    if (matchPercentage >= 80) return 'from-emerald-400 to-green-500';
    if (matchPercentage >= 70) return 'from-blue-400 to-blue-500';
    if (matchPercentage >= 60) return 'from-blue-400 to-cyan-500';
    return 'from-cyan-400 to-blue-500';
  };

  const expandVariants = {
    hidden: { height: 0, opacity: 0 },
    visible: {
      height: 'auto',
      opacity: 1,
      transition: {
        height: { duration: 0.3 },
        opacity: { duration: 0.3, delay: 0.1 },
      },
    },
  };

  return (
    <Card
      className={cn(
        'overflow-hidden transition-all border',
        isExpanded ? 'shadow-md' : 'shadow-sm hover:shadow-md',
        isPremium ? 'border-amber-200' : 'border-blue-100',
        className
      )}
    >
      {isPremium && (
        <div className="absolute top-0 left-0 bg-gradient-to-r from-amber-400 to-amber-600 text-white px-2 py-0.5 text-xs rounded-br-md z-10">
          <Sparkles className="h-3 w-3 inline-block mr-1" />
          {dict.premiumBadge}
        </div>
      )}

      <div className="p-4 flex md:flex-row flex-col gap-4">
        <div className="relative">
          <Avatar className="w-24 h-24 rounded-lg border-2 border-white shadow-sm">
            <AvatarImage src={profileImage} alt={name} />
            <AvatarFallback className="bg-gradient-to-br from-blue-100 to-blue-200 text-blue-600 text-3xl">
              {name.charAt(0)}
            </AvatarFallback>
          </Avatar>
          <div className="absolute -bottom-3 left-1/2 transform -translate-x-1/2">
            <Badge
              className={cn(
                'rounded-full bg-gradient-to-r px-2 text-white border-0 shadow-sm',
                getMatchColor()
              )}
            >
              <Sparkles className="h-3 w-3 mr-1" />
              {dict.matchPercentageBadge.replace(
                '{{percentage}}',
                matchPercentage.toString()
              )}
            </Badge>
          </div>
        </div>

        <div className="flex-1 space-y-2">
          <div className="flex justify-between items-start">
            <div>
              <h3 className="text-lg font-medium">
                {name}, {age}
              </h3>
              <div className="flex items-center text-sm text-gray-600">
                <MapPin className="h-3.5 w-3.5 mr-1" />
                {location}
                {distance && <span className="mr-1">({distance} קמ)</span>}
              </div>
            </div>
            <TooltipProvider>
              <Tooltip>
                <TooltipTrigger asChild>
                  <Button
                    variant="ghost"
                    size="icon"
                    className={cn(
                      'h-8 w-8 rounded-full',
                      isBookmarked ? 'text-amber-500' : 'text-gray-400'
                    )}
                    onClick={handleBookmark}
                  >
                    <Bookmark className="h-5 w-5" />
                  </Button>
                </TooltipTrigger>
                <TooltipContent>
                  <p>
                    {isBookmarked
                      ? dict.tooltips.removeFromBookmarks
                      : dict.tooltips.addToBookmarks}
                  </p>
                </TooltipContent>
              </Tooltip>
            </TooltipProvider>
          </div>

          <div className="space-y-1">
            {occupation && (
              <div className="flex items-center text-sm text-gray-600">
                <Briefcase className="h-3.5 w-3.5 mr-1 text-gray-500" />
                {occupation}
              </div>
            )}
            {education && (
              <div className="flex items-center text-sm text-gray-600">
                <GraduationCap className="h-3.5 w-3.5 mr-1 text-gray-500" />
                {education}
              </div>
            )}
          </div>

          {commonInterests.length > 0 && (
            <div className="flex flex-wrap gap-1 pt-1">
              {commonInterests.slice(0, 3).map((interest, index) => (
                <Badge
                  key={index}
                  variant="outline"
                  className="bg-blue-50 text-blue-700 border-blue-200 text-xs py-0 h-5"
                >
                  {interest.icon || getCategoryIcon(interest.category)}
                  <span className="mr-1 truncate max-w-[100px]">
                    {interest.name}
                  </span>
                </Badge>
              ))}
              {commonInterests.length > 3 && (
                <Badge
                  variant="outline"
                  className="bg-gray-50 text-gray-600 border-gray-200 text-xs"
                >
                  +{commonInterests.length - 3}
                </Badge>
              )}
            </div>
          )}
        </div>
      </div>

      <div className="px-4 pb-3 flex gap-2 justify-center">
        {onReject &&
          (showConfirmReject ? (
            <>
              <Button
                variant="destructive"
                size="sm"
                className="flex-1"
                onClick={() => onReject(id)}
              >
                {dict.buttons.confirmReject}
              </Button>
              <Button
                variant="outline"
                size="sm"
                className="flex-1"
                onClick={() => setShowConfirmReject(false)}
              >
                {dict.buttons.cancel}
              </Button>
            </>
          ) : (
            <Button
              variant="outline"
              size="sm"
              className="flex-1 border-red-200 text-red-600 hover:bg-red-50 hover:text-red-700"
              onClick={() => setShowConfirmReject(true)}
            >
              <X className="h-4 w-4 mr-1" />
              {dict.buttons.reject}
            </Button>
          ))}
        {onAccept && (
          <Button
            variant="default"
            size="sm"
            className="flex-1 bg-gradient-to-r from-blue-500 to-blue-600 hover:from-blue-600 hover:to-blue-700"
            onClick={() => onAccept(id)}
          >
            <Heart className="h-4 w-4 mr-1" />
            {dict.buttons.accept}
          </Button>
        )}
        {conversationStarted && onMessage && (
          <Button
            variant="default"
            size="sm"
            className="flex-1"
            onClick={() => onMessage(id)}
          >
            <MessageCircle className="h-4 w-4 mr-1" />
            {dict.buttons.continueChat}
          </Button>
        )}
      </div>

      <div className="px-4 pb-2 text-center">
        <Button
          variant="ghost"
          size="sm"
          className="text-xs text-gray-500 hover:text-gray-700"
          onClick={() => setIsExpanded(!isExpanded)}
        >
          {isExpanded ? (
            <>
              <ChevronsUp className="h-3.5 w-3.5 mr-1" />
              {dict.buttons.hideMore}
            </>
          ) : (
            <>
              <ChevronsDown className="h-3.5 w-3.5 mr-1" />
              {dict.buttons.showMore}
            </>
          )}
        </Button>
      </div>

      <AnimatePresence>
        {isExpanded && (
          <motion.div
            variants={expandVariants}
            initial="hidden"
            animate="visible"
            exit="hidden"
            className="border-t border-gray-100"
          >
            <CardContent className="p-4 space-y-5">
              {about && (
                <div className="space-y-2">
                  <h4 className="text-sm font-medium flex items-center">
                    <User className="h-4 w-4 mr-1 text-blue-500" />
                    {dict.sections.about.replace('{{name}}', name)}
                  </h4>
                  <p className="text-sm text-gray-600 bg-gray-50 p-3 rounded-md border">
                    {about}
                  </p>
                </div>
              )}
              {matchTraits.length > 0 && (
                <div className="space-y-3">
                  <h4 className="text-sm font-medium flex items-center">
                    <Sparkles className="h-4 w-4 mr-1 text-blue-500" />
                    {dict.sections.topMatches}
                  </h4>
                  <div className="space-y-2">
                    {matchTraits.map((trait, index) => (
                      <TooltipProvider key={index}>
                        <Tooltip>
                          <TooltipTrigger asChild>
                            <div className="space-y-1">
                              <div className="flex justify-between text-sm">
                                <span>{trait.name}</span>
                                <span className="text-sm text-gray-600">
                                  {trait.score}%
                                </span>
                              </div>
                              <Progress
                                value={trait.score}
                                className={cn(
                                  'h-2',
                                  trait.score >= 80
                                    ? '[--progress-foreground:theme(colors.green.500)]'
                                    : trait.score >= 60
                                      ? '[--progress-foreground:theme(colors.blue.500)]'
                                      : '[--progress-foreground:theme(colors.blue.400)]'
                                )}
                              />
                            </div>
                          </TooltipTrigger>
                          {trait.description && (
                            <TooltipContent side="top" className="max-w-xs">
                              <p>
                                {dict.tooltips.traitDescription.replace(
                                  '{{description}}',
                                  trait.description
                                )}
                              </p>
                            </TooltipContent>
                          )}
                        </Tooltip>
                      </TooltipProvider>
                    ))}
                  </div>
                </div>
              )}
              {commonInterests.length > 0 && (
                <div className="space-y-3">
                  <h4 className="text-sm font-medium flex items-center">
                    <Heart className="h-4 w-4 mr-1 text-blue-500" />
                    {dict.sections.commonInterests}
                  </h4>
                  <div className="flex flex-wrap gap-2">
                    {commonInterests.map((interest, index) => (
                      <Badge
                        key={index}
                        variant="outline"
                        className={cn(
                          'bg-blue-50 text-blue-700 border-blue-200',
                          interest.category === 'value' &&
                            'bg-pink-50 text-pink-700 border-pink-200',
                          interest.category === 'religion' &&
                            'bg-purple-50 text-purple-700 border-purple-200',
                          interest.category === 'education' &&
                            'bg-emerald-50 text-emerald-700 border-emerald-200'
                        )}
                      >
                        {interest.icon || getCategoryIcon(interest.category)}
                        <span className="mr-1">{interest.name}</span>
                      </Badge>
                    ))}
                  </div>
                </div>
              )}
              {lastActive && (
                <div className="text-sm text-gray-500 flex items-center">
                  <Calendar className="h-4 w-4 mr-1 text-gray-400" />
                  {dict.sections.lastActive.replace(
                    '{{time}}',
                    formatLastActive(lastActive)
                  )}
                </div>
              )}
            </CardContent>
            <CardFooter className="px-4 py-3 bg-gray-50 flex justify-between">
              {onViewProfile && (
                <Button
                  variant="outline"
                  size="sm"
                  className="w-full"
                  onClick={() => onViewProfile(id)}
                >
                  <ExternalLink className="h-4 w-4 mr-1" />
                  {dict.buttons.viewFullProfile}
                </Button>
              )}
            </CardFooter>
          </motion.div>
        )}
      </AnimatePresence>
    </Card>
  );
}
--- End of Content for MatchResultCard.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\questionnaire\components\QuestionnaireProgress.tsx
--------------------------------------------------------------------------------
Content:
import React, { useState } from 'react';
import { Progress } from '@/components/ui/progress';
import { Badge } from '@/components/ui/badge';
import { cn } from '@/lib/utils';
import {
  CheckCircle,
  Clock,
  Info,
  Globe,
  CheckCircle2,
  ChevronRight,
  Award,
  Star,
  TrendingUp,
  Timer,
  PlayCircle,
  BarChart3,
  ArrowUpRight,
  HelpCircle,
} from 'lucide-react';
import type { WorldId } from '../types/types';
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from '@/components/ui/tooltip';
import { Button } from '@/components/ui/button';
import { motion, AnimatePresence } from 'framer-motion';
import { useMediaQuery } from '../hooks/useMediaQuery';
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from '@/components/ui/card';
import type { QuestionnaireProgressDict } from '@/types/dictionary';

interface QuestionnaireProgressProps {
  completedWorlds: WorldId[];
  allWorlds?: WorldId[];
  currentWorld: WorldId;
  totalQuestions: number;
  answeredQuestions: number;
  requiredQuestions: number;
  answeredRequiredQuestions: number;
  estimatedTimeLeft?: number; // in minutes
  lastSaved?: Date | null;
  onWorldChange?: (worldId: WorldId) => void;
  className?: string;
  dict: QuestionnaireProgressDict;
}

export default function QuestionnaireProgress({
  completedWorlds,
  allWorlds = ['PERSONALITY', 'VALUES', 'RELATIONSHIP', 'PARTNER', 'RELIGION'],
  currentWorld,
  totalQuestions,
  answeredQuestions,
  requiredQuestions,
  answeredRequiredQuestions,
  estimatedTimeLeft = 0,
  lastSaved = null,
  onWorldChange,
  className = '',
  dict,
}: QuestionnaireProgressProps) {
  const [expandedSection, setExpandedSection] = useState<string | null>(null);
  const isTablet = useMediaQuery('(max-width: 1024px)');
  const worldLabels = dict.worldLabels;

  const totalCompletion = Math.round(
    (answeredQuestions / totalQuestions) * 100
  );
  const requiredCompletion = Math.round(
    (answeredRequiredQuestions / requiredQuestions) * 100
  );
  const worldsCompletion = Math.round(
    (completedWorlds.length / allWorlds.length) * 100
  );

  let progressStatus: 'low' | 'medium' | 'high' | 'complete' = 'low';
  if (totalCompletion >= 100) progressStatus = 'complete';
  else if (totalCompletion >= 75) progressStatus = 'high';
  else if (totalCompletion >= 40) progressStatus = 'medium';

  const statusColors = {
    low: 'text-amber-600',
    medium: 'text-blue-600',
    high: 'text-blue-700',
    complete: 'text-green-600',
  };
  const statusBgColors = {
    low: 'bg-amber-100',
    medium: 'bg-blue-100',
    high: 'bg-blue-100',
    complete: 'bg-green-100',
  };

  const formatTimeLeft = (minutes: number): string => {
    if (minutes < 1) return dict.timeStrings.lessThanAMinute;
    if (minutes < 60) return `${minutes} ${dict.timeStrings.minutesSuffix}`;

    const hours = Math.floor(minutes / 60);
    const mins = minutes % 60;
    return `${hours} ${dict.timeStrings.hours} ${mins > 0 ? `${dict.timeStrings.and}${mins} ${dict.timeStrings.minutesSuffix}` : ''}`;
  };

  const getRelativeTime = (date: Date): string => {
    const now = new Date();
    const diffInMinutes = Math.floor(
      (now.getTime() - date.getTime()) / (1000 * 60)
    );
    if (diffInMinutes < 1) return dict.timeStrings.savedNow;
    if (diffInMinutes < 60)
      return dict.timeStrings.savedMinutesAgo.replace(
        '{{minutes}}',
        diffInMinutes.toString()
      );

    const diffInHours = Math.floor(diffInMinutes / 60);
    if (diffInHours < 24)
      return dict.timeStrings.savedHoursAgo.replace(
        '{{hours}}',
        diffInHours.toString()
      );

    return dict.timeStrings.savedAtTime.replace(
      '{{time}}',
      date.toLocaleTimeString()
    );
  };

  const getNextRecommendedWorld = (): WorldId | null => {
    for (const world of allWorlds) {
      if (!completedWorlds.includes(world) && world !== currentWorld) {
        return world;
      }
    }
    return null;
  };

  const AccordionSection = ({
    title,
    icon,
    children,
    id,
  }: {
    title: string;
    icon: React.ReactNode;
    children: React.ReactNode;
    id: string;
  }) => {
    const isExpanded = expandedSection === id;

    return (
      <div className="border rounded-lg overflow-hidden mb-2">
        <button
          className={cn(
            'w-full flex items-center justify-between p-3 text-left transition-colors',
            isExpanded
              ? 'bg-blue-50 border-blue-200'
              : 'bg-white hover:bg-gray-50'
          )}
          onClick={() => setExpandedSection(isExpanded ? null : id)}
        >
          <div className="flex items-center">
            <div
              className={cn(
                'mr-2',
                isExpanded ? 'text-blue-600' : 'text-gray-500'
              )}
            >
              {icon}
            </div>
            <span
              className={cn('font-medium', isExpanded ? 'text-blue-700' : '')}
            >
              {title}
            </span>
          </div>
          <ChevronRight
            className={cn(
              'w-5 h-5 transition-transform',
              isExpanded ? 'transform rotate-90 text-blue-600' : 'text-gray-400'
            )}
          />
        </button>

        <AnimatePresence initial={false}>
          {isExpanded && (
            <motion.div
              initial={{ height: 0, opacity: 0 }}
              animate={{ height: 'auto', opacity: 1 }}
              exit={{ height: 0, opacity: 0 }}
              transition={{ duration: 0.2 }}
            >
              <div className="p-3 bg-blue-50/50 border-t">{children}</div>
            </motion.div>
          )}
        </AnimatePresence>
      </div>
    );
  };

  const RewardsInfo = () => {
    const achievements = [
      {
        key: 'goal' as const,
        condition: requiredCompletion >= 100,
        icon: <Award className="h-4 w-4 text-amber-500" />,
      },
      {
        key: 'halfway' as const,
        condition: totalCompletion >= 50,
        icon: <Star className="h-4 w-4 text-amber-500" />,
      },
      {
        key: 'advanced' as const,
        condition: totalCompletion >= 80,
        icon: <TrendingUp className="h-4 w-4 text-amber-500" />,
      },
      {
        key: 'complete' as const,
        condition: totalCompletion >= 100,
        icon: <CheckCircle2 className="h-4 w-4 text-amber-500" />,
      },
    ];

    const earnedAchievements = achievements.filter((a) => a.condition);

    return (
      <div className="space-y-2">
        {earnedAchievements.length > 0 ? (
          <>
            <p className="text-sm text-gray-600 mb-2">
              {dict.rewards.achievedText}
            </p>
            <div className="space-y-2">
              {earnedAchievements.map((achievement, index) => {
                const achievementDict =
                  dict.rewards.achievements[achievement.key];
                return (
                  <div
                    key={index}
                    className="flex items-center bg-white p-2 rounded-lg border"
                  >
                    <div className="mr-2">{achievement.icon}</div>
                    <div>
                      <div className="font-medium text-sm">
                        {achievementDict.name}
                      </div>
                      <div className="text-xs text-gray-500">
                        {achievementDict.description}
                      </div>
                    </div>
                  </div>
                );
              })}
            </div>
            {earnedAchievements.length < achievements.length && (
              <p className="text-xs text-gray-500 mt-3">
                {dict.rewards.moreToGo.replace(
                  '{{count}}',
                  (achievements.length - earnedAchievements.length).toString()
                )}
              </p>
            )}
          </>
        ) : (
          <p className="text-sm text-gray-600">{dict.rewards.prompt}</p>
        )}
      </div>
    );
  };

  const WorldRecommendations = () => {
    const nextWorld = getNextRecommendedWorld();
    return (
      <div className="space-y-3">
        <p className="text-sm text-gray-600">{dict.recommendations.title}</p>
        <div className="flex flex-col space-y-1">
          {allWorlds.map((world, index) => {
            const isCompleted = completedWorlds.includes(world);
            const isCurrent = currentWorld === world;
            const isNextRecommended = world === nextWorld;
            return (
              <div
                key={world}
                className={cn(
                  'flex items-center justify-between p-2 rounded-lg border',
                  isCompleted
                    ? 'bg-green-50 border-green-200'
                    : isCurrent
                      ? 'bg-blue-50 border-blue-200'
                      : isNextRecommended
                        ? 'bg-amber-50 border-amber-200'
                        : 'bg-white border-gray-200'
                )}
              >
                <div className="flex items-center">
                  <div className="w-6 h-6 flex items-center justify-center rounded-full mr-2 text-gray-600 bg-white border">
                    {index + 1}
                  </div>
                  <span
                    className={cn(
                      'font-medium',
                      isCompleted
                        ? 'text-green-700'
                        : isCurrent
                          ? 'text-blue-700'
                          : isNextRecommended
                            ? 'text-amber-700'
                            : ''
                    )}
                  >
                    {worldLabels[world as keyof typeof worldLabels]}
                  </span>
                </div>
                <div className="flex items-center">
                  {isCompleted ? (
                    <Badge className="bg-green-100 text-green-800 border-0">
                      <CheckCircle2 className="w-3 h-3 mr-1" />
                      {dict.recommendations.statuses.completed}
                    </Badge>
                  ) : isCurrent ? (
                    <Badge className="bg-blue-100 text-blue-800 border-0">
                      <PlayCircle className="w-3 h-3 mr-1" />
                      {dict.recommendations.statuses.active}
                    </Badge>
                  ) : isNextRecommended ? (
                    <Button
                      size="sm"
                      variant="outline"
                      className="h-7 text-xs border-amber-300 text-amber-700 bg-amber-50 hover:bg-amber-100"
                      onClick={() => onWorldChange?.(world)}
                    >
                      <ArrowUpRight className="w-3 h-3 mr-1" />
                      {dict.recommendations.ctaButton}
                    </Button>
                  ) : (
                    <Badge variant="outline" className="text-gray-500 text-xs">
                      {dict.recommendations.statuses.pending}
                    </Badge>
                  )}
                </div>
              </div>
            );
          })}
        </div>
      </div>
    );
  };

  const TimeBreakdown = () => {
    return (
      <div className="space-y-3">
        <div className="text-sm text-gray-600 flex items-center">
          <Timer className="h-4 w-4 mr-1 text-blue-500" />
          <span>
            {dict.timeBreakdown.title.replace(
              '{{timeLeft}}',
              formatTimeLeft(estimatedTimeLeft)
            )}
          </span>
        </div>
        <div className="flex flex-col space-y-2">
          <div className="text-xs text-gray-500">
            {dict.timeBreakdown.subtitle}
          </div>
          {allWorlds.map((world) => {
            const isCompleted = completedWorlds.includes(world);
            const remainingWorlds = allWorlds.length - completedWorlds.length;
            const timePerWorld =
              remainingWorlds > 0
                ? Math.round(estimatedTimeLeft / remainingWorlds)
                : 0;
            return (
              <div key={world} className="flex items-center justify-between">
                <span className="text-sm flex items-center">
                  {isCompleted ? (
                    <CheckCircle className="h-3.5 w-3.5 mr-1 text-green-500" />
                  ) : (
                    <Clock className="h-3.5 w-3.5 mr-1 text-blue-400" />
                  )}
                  {worldLabels[world as keyof typeof worldLabels]}
                </span>
                <span
                  className={cn(
                    'text-sm',
                    isCompleted ? 'text-green-600' : 'text-gray-600'
                  )}
                >
                  {isCompleted
                    ? dict.timeBreakdown.statusCompleted
                    : dict.timeBreakdown.timePerWorld.replace(
                        '{{time}}',
                        timePerWorld.toString()
                      )}
                </span>
              </div>
            );
          })}
        </div>
      </div>
    );
  };

  const getProgressBadgeText = () => {
    if (progressStatus === 'complete') return dict.statusBadge.complete;
    if (totalCompletion <= 5) return dict.statusBadge.started;
    return dict.statusBadge.progress.replace(
      '{{progress}}',
      totalCompletion.toString()
    );
  };

  const renderMobile = () => (
    <div className="space-y-4">
      <div className="flex justify-between items-center">
        <h3 className="text-lg font-medium flex items-center">
          <BarChart3 className="h-5 w-5 mr-2 text-blue-500" />
          {dict.mobile.title}
        </h3>
        <Badge
          className={cn(
            statusBgColors[progressStatus],
            'text-xs border-0',
            statusColors[progressStatus]
          )}
        >
          {getProgressBadgeText()}
        </Badge>
      </div>
      <div className="space-y-2 pt-1">
        <div className="space-y-1">
          <div className="flex justify-between text-xs">
            <span className="text-gray-600">{dict.mobile.totalLabel}</span>
            <span className="font-medium">
              {answeredQuestions} / {totalQuestions}
            </span>
          </div>
          <Progress value={totalCompletion} className="h-2" />
        </div>
        <div className="space-y-1">
          <div className="flex justify-between text-xs">
            <span className="text-gray-600">{dict.mobile.requiredLabel}</span>
            <span
              className={cn(
                'font-medium',
                requiredCompletion < 100
                  ? answeredRequiredQuestions === 0
                    ? 'text-red-600'
                    : 'text-amber-600'
                  : 'text-green-600'
              )}
            >
              {answeredRequiredQuestions} / {requiredQuestions}
            </span>
          </div>
          <Progress
            value={requiredCompletion}
            className={cn('h-2', requiredCompletion < 100 ? 'bg-gray-100' : '')}
          />
        </div>
      </div>
      <div className="flex flex-col gap-1 text-xs pt-1">
        {estimatedTimeLeft > 0 && (
          <div className="flex items-center">
            <Clock className="h-3.5 w-3.5 mr-1 text-gray-500" />
            <span className="text-gray-600">
              {dict.mobile.timeLeftLabel.replace(
                '{{timeLeft}}',
                formatTimeLeft(estimatedTimeLeft)
              )}
            </span>
          </div>
        )}
        {lastSaved && (
          <div className="flex items-center">
            <CheckCircle className="h-3.5 w-3.5 mr-1 text-green-600" />
            <span className="text-gray-600">
              {dict.mobile.savedLabel.replace(
                '{{time}}',
                getRelativeTime(lastSaved)
              )}
            </span>
          </div>
        )}
      </div>
    </div>
  );

  const renderDesktop = () => (
    <div className="space-y-6">
      <div className="flex justify-between items-center">
        <div>
          <h3 className="text-xl font-medium">{dict.desktop.title}</h3>
          <p className="text-sm text-gray-500 mt-1">{dict.desktop.subtitle}</p>
        </div>
        <div className="flex items-center gap-2">
          <TooltipProvider>
            <Tooltip>
              <TooltipTrigger asChild>
                <Badge
                  className={cn(
                    statusBgColors[progressStatus],
                    'text-xs border-0 py-1 px-2',
                    statusColors[progressStatus]
                  )}
                >
                  <TrendingUp className="h-3.5 w-3.5 mr-1" />
                  {getProgressBadgeText()}
                </Badge>
              </TooltipTrigger>
              <TooltipContent>
                <p>
                  {dict.desktop.tooltip.completionDetails
                    .replace('{{answered}}', answeredQuestions.toString())
                    .replace('{{total}}', totalQuestions.toString())}
                </p>
              </TooltipContent>
            </Tooltip>
          </TooltipProvider>
          <TooltipProvider>
            <Tooltip>
              <TooltipTrigger asChild>
                <Button
                  variant="ghost"
                  size="sm"
                  className="h-8 w-8 p-0 rounded-full"
                >
                  <HelpCircle className="h-4 w-4 text-gray-500" />
                </Button>
              </TooltipTrigger>
              <TooltipContent>
                <div className="space-y-1 max-w-xs">
                  <p className="font-medium">
                    {dict.desktop.tooltip.progressInfoTitle}
                  </p>
                  <p className="text-xs">
                    {dict.desktop.tooltip.progressInfoDesc}
                  </p>
                </div>
              </TooltipContent>
            </Tooltip>
          </TooltipProvider>
        </div>
      </div>
      <div className="grid grid-cols-12 gap-4">
        <Card className="col-span-12 md:col-span-8">
          <CardHeader className="pb-2">
            <CardTitle className="text-lg flex items-center">
              <BarChart3 className="h-5 w-5 mr-2 text-blue-500" />
              {dict.desktop.progressSummaryTitle}
            </CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="space-y-4 pt-1">
              <div className="space-y-1">
                <div className="flex justify-between text-sm">
                  <span className="text-gray-600 flex items-center">
                    <Info className="h-3.5 w-3.5 mr-1 text-blue-500" />
                    {dict.mobile.totalLabel}
                  </span>
                  <span className="font-medium">
                    {answeredQuestions} / {totalQuestions}
                  </span>
                </div>
                <Progress value={totalCompletion} className="h-2" />
              </div>
              <div className="space-y-1">
                <div className="flex justify-between text-sm">
                  <span className="text-gray-600 flex items-center">
                    <Star className="h-3.5 w-3.5 mr-1 text-amber-500" />
                    {dict.mobile.requiredLabel}
                  </span>
                  <span
                    className={cn(
                      'font-medium',
                      requiredCompletion < 100
                        ? answeredRequiredQuestions === 0
                          ? 'text-red-600'
                          : 'text-amber-600'
                        : 'text-green-600'
                    )}
                  >
                    {answeredRequiredQuestions} / {requiredQuestions}
                  </span>
                </div>
                <Progress
                  value={requiredCompletion}
                  className={cn(
                    'h-2',
                    requiredCompletion < 100 ? 'bg-gray-100' : ''
                  )}
                />
              </div>
              <div className="space-y-1">
                <div className="flex justify-between text-sm">
                  <span className="text-gray-600 flex items-center">
                    <Globe className="h-3.5 w-3.5 mr-1 text-blue-500" />
                    {dict.desktop.worldsTitle}
                  </span>
                  <span className="font-medium">
                    {completedWorlds.length} / {allWorlds.length}
                  </span>
                </div>
                <Progress value={worldsCompletion} className="h-2" />
              </div>
            </div>
            <div className="flex justify-between items-center pt-4 mt-2 border-t text-sm">
              {estimatedTimeLeft > 0 && (
                <div className="flex items-center">
                  <Clock className="h-4 w-4 mr-1 text-blue-500" />
                  <span className="text-gray-600">
                    {dict.mobile.timeLeftLabel.replace(
                      '{{timeLeft}}',
                      formatTimeLeft(estimatedTimeLeft)
                    )}
                  </span>
                </div>
              )}
              {lastSaved && (
                <div className="flex items-center">
                  <CheckCircle className="h-4 w-4 mr-1 text-green-600" />
                  <span className="text-gray-600">
                    {dict.mobile.savedLabel.replace(
                      '{{time}}',
                      lastSaved.toLocaleTimeString()
                    )}
                  </span>
                </div>
              )}
            </div>
          </CardContent>
        </Card>
        <Card className="col-span-12 md:col-span-4">
          <CardHeader className="pb-2">
            <CardTitle className="text-lg flex items-center">
              <Award className="h-5 w-5 mr-2 text-amber-500" />
              {dict.desktop.achievementsTitle}
            </CardTitle>
          </CardHeader>
          <CardContent>
            <RewardsInfo />
          </CardContent>
        </Card>
        <Card className="col-span-12">
          <CardHeader className="pb-2">
            <CardTitle className="text-lg flex items-center">
              <Globe className="h-5 w-5 mr-2 text-blue-500" />
              {dict.desktop.worldsTitle}
            </CardTitle>
            <CardDescription>{dict.desktop.worldsSubtitle}</CardDescription>
          </CardHeader>
          <CardContent>
            <div className="space-y-2">
              <AccordionSection
                title={dict.desktop.accordion.recommendations}
                icon={<Star className="h-4 w-4" />}
                id="worlds-recommendations"
              >
                <WorldRecommendations />
              </AccordionSection>
              <AccordionSection
                title={dict.desktop.accordion.timeBreakdown}
                icon={<Clock className="h-4 w-4" />}
                id="time-breakdown"
              >
                <TimeBreakdown />
              </AccordionSection>
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  );

  return (
    <div className={cn('bg-white rounded-lg shadow-sm border p-4', className)}>
      {isTablet ? renderMobile() : renderDesktop()}
    </div>
  );
}
--- End of Content for QuestionnaireProgress.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\questionnaire\components\UserStats.tsx
--------------------------------------------------------------------------------
Content:
import React from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Progress } from '@/components/ui/progress';
import { Badge } from '@/components/ui/badge';
import {
  UserCheck,
  Users,
  Calendar,
  Sparkles,
  Heart,
  CheckCheck,
  BarChart4,
  Zap,
  Award,
  Star,
} from 'lucide-react';
import { cn } from '@/lib/utils';
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from '@/components/ui/tooltip';
import type { UserStatsDict } from '@/types/dictionary'; // Import dictionary type

interface UserStatsProps {
  totalQuestionsAnswered: number;
  totalQuestionsCount: number;
  activeMatches?: number;
  pendingMatches?: number;
  matchScore?: number;
  profileCompletion?: number;
  activeWorldsCompleted?: string[];
  personalityTraits?: Array<{
    trait: string;
    score: number;
  }>;
  activityLevel?: 'low' | 'medium' | 'high';
  registrationDate?: Date;
  lastActive?: Date;
  className?: string;
  dict: UserStatsDict; // Use the specific dictionary type
}

export default function UserStats({
  totalQuestionsAnswered,
  totalQuestionsCount,
  activeMatches = 0,
  pendingMatches = 0,
  matchScore = 0,
  profileCompletion = 0,
  activeWorldsCompleted = [],
  personalityTraits = [],
  activityLevel = 'medium',
  registrationDate,
  className,
  dict,
}: UserStatsProps) {
  const formatDate = (date?: Date) => {
    if (!date) return dict.common.notAvailable;
    return date.toLocaleDateString('he-IL');
  };

  const getDaysActive = () => {
    if (!registrationDate) return 0;
    const today = new Date();
    const diffTime = Math.abs(today.getTime() - registrationDate.getTime());
    return Math.ceil(diffTime / (1000 * 60 * 60 * 24));
  };

  const getActivityLevelColor = () => {
    switch (activityLevel) {
      case 'high':
        return 'text-green-600 bg-green-100';
      case 'medium':
        return 'text-blue-600 bg-blue-100';
      case 'low':
        return 'text-amber-600 bg-amber-100';
      default:
        return 'text-gray-600 bg-gray-100';
    }
  };

  const worldConfig = [
    { id: 'PERSONALITY', color: 'blue' },
    { id: 'VALUES', color: 'emerald' },
    { id: 'RELATIONSHIP', color: 'purple' },
    { id: 'PARTNER', color: 'pink' },
    { id: 'RELIGION', color: 'indigo' },
  ];

  return (
    <div className={cn('space-y-4', className)}>
      <Card className="shadow-sm hover:shadow-md transition-shadow border-blue-100">
        <CardHeader className="pb-2">
          <CardTitle className="text-lg flex items-center">
            <UserCheck className="h-5 w-5 mr-2 text-blue-500" />
            {dict.matchStatsCard.title}
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-2 gap-4">
            <div className="bg-blue-50 p-3 rounded-lg border border-blue-100">
              <div className="text-xs text-gray-600 mb-1">
                {dict.matchStatsCard.activeMatches}
              </div>
              <div className="flex items-center">
                <Users className="h-5 w-5 text-blue-600 mr-2" />
                <span className="text-2xl font-semibold">{activeMatches}</span>
              </div>
            </div>
            <div className="bg-amber-50 p-3 rounded-lg border border-amber-100">
              <div className="text-xs text-gray-600 mb-1">
                {dict.matchStatsCard.pendingMatches}
              </div>
              <div className="flex items-center">
                <Calendar className="h-5 w-5 text-amber-600 mr-2" />
                <span className="text-2xl font-semibold">{pendingMatches}</span>
              </div>
            </div>
            <div className="col-span-2 bg-gray-50 p-3 rounded-lg border">
              <div className="flex justify-between mb-1">
                <div className="text-xs text-gray-600">
                  {dict.matchStatsCard.matchScore}
                </div>
                <Badge variant="outline" className="text-xs">
                  {matchScore}%
                </Badge>
              </div>
              <Progress
                value={matchScore}
                className={cn(
                  'h-2',
                  matchScore > 70
                    ? '[--progress-foreground:theme(colors.green.500)]'
                    : '[--progress-foreground:theme(colors.blue.500)]'
                )}
              />
            </div>
            <div className="col-span-2 flex justify-between text-sm p-2">
              <div className="flex items-center text-gray-600">
                <Sparkles className="h-4 w-4 mr-1 text-blue-400" />
                {dict.matchStatsCard.daysActive.replace(
                  '{{days}}',
                  getDaysActive().toString()
                )}
              </div>
              <div className="text-gray-600">
                {dict.matchStatsCard.joinDate.replace(
                  '{{date}}',
                  formatDate(registrationDate)
                )}
              </div>
            </div>
          </div>
        </CardContent>
      </Card>

      <Card className="shadow-sm hover:shadow-md transition-shadow border-blue-100">
        <CardHeader className="pb-2">
          <CardTitle className="text-lg flex items-center">
            <BarChart4 className="h-5 w-5 mr-2 text-blue-500" />
            {dict.profileProgressCard.title}
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="space-y-4">
            <div className="space-y-1">
              <div className="flex justify-between text-sm">
                <div className="flex items-center">
                  <CheckCheck className="h-4 w-4 mr-1 text-blue-500" />
                  {dict.profileProgressCard.profileCompletion}
                </div>
                <Badge
                  variant="outline"
                  className={cn(
                    'text-xs',
                    profileCompletion >= 80
                      ? 'border-green-500 text-green-600'
                      : 'border-amber-500 text-amber-600'
                  )}
                >
                  {profileCompletion}%
                </Badge>
              </div>
              <Progress
                value={profileCompletion}
                className={cn(
                  'h-2',
                  profileCompletion < 30
                    ? '[--progress-foreground:theme(colors.red.500)]'
                    : profileCompletion < 70
                      ? '[--progress-foreground:theme(colors.amber.500)]'
                      : '[--progress-foreground:theme(colors.green.500)]'
                )}
              />
            </div>
            <div className="space-y-1">
              <div className="flex justify-between text-sm">
                <div className="flex items-center">
                  <Zap className="h-4 w-4 mr-1 text-amber-500" />
                  {dict.profileProgressCard.questionsAnswered}
                </div>
                <span className="text-xs text-gray-600">
                  {totalQuestionsAnswered} {dict.profileProgressCard.outOf}{' '}
                  {totalQuestionsCount}
                </span>
              </div>
              <Progress
                value={(totalQuestionsAnswered / totalQuestionsCount) * 100}
                className="h-2"
              />
            </div>
            <div className="pt-2">
              <div className="text-sm mb-2 flex items-center">
                <Heart className="h-4 w-4 mr-1 text-pink-500" />
                <span>{dict.profileProgressCard.completedWorlds}</span>
              </div>
              <div className="flex flex-wrap gap-2">
                {worldConfig.map((world) => {
                  const isCompleted = activeWorldsCompleted.includes(world.id);
                  const worldName =
                    dict.worlds[world.id as keyof typeof dict.worlds];
                  return (
                    <Badge
                      key={world.id}
                      variant={isCompleted ? 'default' : 'outline'}
                      className={
                        isCompleted
                          ? `bg-${world.color}-100 hover:bg-${world.color}-200 text-${world.color}-800 border-${world.color}-200`
                          : `text-gray-500 border-gray-200 bg-gray-50`
                      }
                    >
                      {isCompleted && <CheckCheck className="h-3 w-3 mr-1" />}
                      {worldName}
                    </Badge>
                  );
                })}
              </div>
            </div>
            {activityLevel && (
              <div className="flex justify-between items-center pt-2 text-sm text-gray-600">
                <div>{dict.profileProgressCard.activityLevel}</div>
                <Badge
                  variant="outline"
                  className={cn(
                    'font-normal border-0',
                    getActivityLevelColor()
                  )}
                >
                  {dict.activityLevels[activityLevel]}
                </Badge>
              </div>
            )}
          </div>
        </CardContent>
      </Card>

      {personalityTraits && personalityTraits.length > 0 && (
        <Card className="shadow-sm hover:shadow-md transition-shadow border-blue-100">
          <CardHeader className="pb-2">
            <CardTitle className="text-lg flex items-center">
              <Award className="h-5 w-5 mr-2 text-blue-500" />
              {dict.personalityTraitsCard.title}
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-3">
              {personalityTraits.map((trait, index) => (
                <TooltipProvider key={index}>
                  <Tooltip>
                    <TooltipTrigger asChild>
                      <div className="space-y-1">
                        <div className="flex justify-between text-sm">
                          <div className="flex items-center">
                            <Star className="h-3.5 w-3.5 mr-1 text-amber-500" />
                            {trait.trait}
                          </div>
                          <span className="text-xs">{trait.score}%</span>
                        </div>
                        <Progress
                          value={trait.score}
                          className={cn(
                            'h-1.5',
                            'relative overflow-hidden',
                            'before:absolute before:inset-0 before:bg-gradient-to-r before:from-blue-400',
                            trait.score < 40
                              ? 'before:to-blue-500'
                              : trait.score < 70
                                ? 'before:to-purple-500'
                                : 'before:to-pink-500'
                          )}
                        />
                      </div>
                    </TooltipTrigger>
                    <TooltipContent>
                      <p>
                        {dict.tooltips.traitScore.replace(
                          '{{score}}',
                          trait.score.toString()
                        )}
                      </p>
                    </TooltipContent>
                  </Tooltip>
                </TooltipProvider>
              ))}
            </div>
          </CardContent>
        </Card>
      )}
    </div>
  );
}
--- End of Content for UserStats.tsx ---

================================================================================
Directory: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\questionnaire\hooks
================================================================================

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\questionnaire\hooks\useIdleTimeout.ts
--------------------------------------------------------------------------------
Content:
// src/components/questionnaire/hooks/useIdleTimeout.ts
import { useState, useEffect, useCallback, useRef } from 'react';

interface UseIdleTimeoutProps {
  onIdle: () => void;
  idleTimeSeconds?: number;
}

export function useIdleTimeout({ onIdle, idleTimeSeconds = 7200 }: UseIdleTimeoutProps) { // ברירת מחדל: שעתיים
  const [isIdle, setIsIdle] = useState(false);
  const timeoutId = useRef<NodeJS.Timeout>();

  const startTimer = useCallback(() => {
    timeoutId.current = setTimeout(() => {
      setIsIdle(true);
      onIdle();
    }, idleTimeSeconds * 1000);
  }, [idleTimeSeconds, onIdle]);

  const resetTimer = useCallback(() => {
    if (timeoutId.current) {
      clearTimeout(timeoutId.current);
    }
    setIsIdle(false);
    startTimer();
  }, [startTimer]);

  const handleEvent = useCallback(() => {
    resetTimer();
  }, [resetTimer]);

  useEffect(() => {
    // אירועים שיאפסו את הטיימר
    const events = ['mousemove', 'keydown', 'mousedown', 'touchstart', 'scroll'];
    
    // התחלת הטיימר הראשוני
    startTimer();

    // הוספת מאזינים
    events.forEach(event => window.addEventListener(event, handleEvent));

    // ניקוי
    return () => {
      if (timeoutId.current) {
        clearTimeout(timeoutId.current);
      }
      events.forEach(event => window.removeEventListener(event, handleEvent));
    };
  }, [handleEvent, startTimer]);

  return { isIdle, resetTimer };
}
--- End of Content for useIdleTimeout.ts ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\questionnaire\hooks\useMediaQuery.ts
--------------------------------------------------------------------------------
Content:
import { useState, useEffect } from "react";

/**
 * הוק המאפשר לנטר שינויים במדיה קוורי
 * 
 * @param query מחרוזת מדיה קוורי כגון "(max-width: 768px)"
 * @returns בוליאני המציין האם המדיה קוורי פעיל
 * 
 * דוגמאות לשימוש:
 * const isMobile = useMediaQuery("(max-width: 768px)");
 * const isTablet = useMediaQuery("(min-width: 769px) and (max-width: 1024px)");
 * const isDesktop = useMediaQuery("(min-width: 1025px)");
 */
export function useMediaQuery(query: string): boolean {
  // מצב התאמת המדיה הנוכחית
  const [matches, setMatches] = useState<boolean>(false);

  // זיהוי האם אנו נמצאים בסביבת דפדפן
  const isBrowser = typeof window !== "undefined";

  useEffect(() => {
    // אם איננו בדפדפן, אין טעם להמשיך
    if (!isBrowser) {
      return undefined;
    }

    // בדיקה ראשונית של התאמת המדיה
    const media = window.matchMedia(query);
    setMatches(media.matches);

    // כשמתרחש שינוי בהתאמת המדיה, עדכן את המצב
    const listener = (event: MediaQueryListEvent) => {
      setMatches(event.matches);
    };

    // רישום האזנה לשינויים
    if (media.addEventListener) {
      media.addEventListener("change", listener);
    } else {
      // תמיכה בדפדפנים ישנים יותר
      media.addListener(listener);
    }

    // ניקוי האזנה בעת עזיבת הקומפוננטה
    return () => {
      if (media.removeEventListener) {
        media.removeEventListener("change", listener);
      } else {
        // תמיכה בדפדפנים ישנים יותר
        media.removeListener(listener);
      }
    };
  }, [query, isBrowser]);

  return matches;
}

// מקצרים נפוצים לשימוש
export function useIsMobile() {
  return useMediaQuery("(max-width: 767px)");
}

export function useIsTablet() {
  return useMediaQuery("(min-width: 768px) and (max-width: 1023px)");
}

export function useIsDesktop() {
  return useMediaQuery("(min-width: 1024px)");
}

export function useIsDarkMode() {
  return useMediaQuery("(prefers-color-scheme: dark)");
}

export function useReducedMotion() {
  return useMediaQuery("(prefers-reduced-motion: reduce)");
}

export default useMediaQuery;
--- End of Content for useMediaQuery.ts ---

================================================================================
Directory: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\questionnaire\layout
================================================================================

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\questionnaire\layout\QuestionnaireLayout.tsx
--------------------------------------------------------------------------------
Content:
// src/components/questionnaire/layout/QuestionnaireLayout.tsx
import React, { useState, useEffect, useCallback } from 'react';
import Link from 'next/link';
import { Card, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import {
  Heart,
  User,
  Users,
  Save,
  LogOut,
  Settings,
  HelpCircle,
  CheckCircle,
  Loader2,
  Menu,
  UserCheck,
  X,
  Home,
  ArrowRightLeft,
  LogIn,
  UserPlus,
  Scroll,
  ChevronLeft,
  Edit,
  BookUser,
  Info,
  Eye,
} from 'lucide-react';
import type { WorldId } from '../types/types';
import { cn } from '@/lib/utils';
import { useMediaQuery } from '../hooks/useMediaQuery';
import { motion, AnimatePresence } from 'framer-motion';
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from '@/components/ui/tooltip';
import {
  Sheet,
  SheetContent,
  SheetHeader,
  SheetTitle,
  SheetTrigger,
} from '@/components/ui/sheet';
import FAQ from '../components/FAQ';
import AccessibilityFeatures from '../components/AccessibilityFeatures';
import type {
  QuestionnaireLayoutDict,
  MatchmakingQuestionnaireDict,
  QuestionnaireFaqDict,
  AccessibilityFeaturesDict,
} from '@/types/dictionary';

// Props Interface - Updated to include FAQ and Accessibility dicts
export interface QuestionnaireLayoutProps {
  children: React.ReactNode;
  currentWorld: WorldId;
  completedWorlds: WorldId[];
  onWorldChange: (worldId: WorldId) => void;
  onExit?: () => void;
  language?: string;
  onSaveProgress?: () => Promise<void>;
  isLoggedIn?: boolean;
  dict: {
    layout: QuestionnaireLayoutDict;
    worldLabels: MatchmakingQuestionnaireDict['worldLabels'];
    faq: QuestionnaireFaqDict; // Added FAQ dictionary
    accessibilityFeatures: AccessibilityFeaturesDict; // Added Accessibility dictionary
  };
}

const worldConfig = {
  PERSONALITY: { icon: User, themeColor: 'sky' },
  VALUES: { icon: Heart, themeColor: 'rose' },
  RELATIONSHIP: { icon: Users, themeColor: 'purple' },
  PARTNER: { icon: UserCheck, themeColor: 'teal' },
  RELIGION: { icon: Scroll, themeColor: 'amber' },
} as const;

export default function QuestionnaireLayout({
  children,
  currentWorld,
  completedWorlds,
  onWorldChange,
  onExit,
  language = 'he',
  isLoggedIn = false,
  onSaveProgress,
  dict,
}: QuestionnaireLayoutProps) {
  const [isSaving, setIsSaving] = useState(false);
  const [showExitPrompt, setShowExitPrompt] = useState(false);
  const [showMobileNav, setShowMobileNav] = useState(false);
  const [lastSaved, setLastSaved] = useState<Date | null>(null);
  const [isAccessibilityPanelOpen, setAccessibilityPanelOpen] = useState(false);

  const isSmallScreen = useMediaQuery('(max-width: 640px)');
  const currentThemeColor = worldConfig[currentWorld]?.themeColor || 'sky';
  const isRTL = language === 'he';
  const directionClass = isRTL ? 'rtl' : 'ltr';

  const handleSave = useCallback(async () => {
    if (!onSaveProgress) return;
    setIsSaving(true);
    try {
      await onSaveProgress();
      setLastSaved(new Date());
    } catch (err) {
      console.error('Save failed in layout:', err);
    } finally {
      setIsSaving(false);
    }
  }, [onSaveProgress]);

  const NavButton = ({
    worldId,
    isMobile,
  }: {
    worldId: string;
    isMobile: boolean;
  }) => {
    const { icon: Icon, themeColor } =
      worldConfig[worldId as keyof typeof worldConfig];
    const label = dict.worldLabels[worldId as WorldId];
    const isActive = currentWorld === worldId;
    const isCompleted = completedWorlds.includes(worldId as WorldId);
    let status: 'active' | 'completed' | 'pending' = 'pending';
    if (isActive) status = 'active';
    else if (isCompleted) status = 'completed';

    const statusConfig = {
      active: {
        classes: `bg-${themeColor}-600 text-white shadow-lg hover:bg-${themeColor}-700 ring-2 ring-offset-2 ring-${themeColor}-400`,
        actionIcon: <ChevronLeft className="h-5 w-5 animate-pulse" />,
      },
      completed: {
        classes:
          'border-green-300 bg-green-50 text-green-800 hover:bg-green-100 opacity-90 hover:opacity-100',
        actionIcon: <Edit className="h-4 w-4 text-green-600" />,
      },
      pending: {
        classes: 'bg-white hover:bg-slate-50 border-slate-200 text-slate-700',
        actionIcon: null,
      },
    };
    const currentStatusConfig = statusConfig[status];

    return (
      <Button
        variant={'outline'}
        size={isMobile ? 'sm' : 'default'}
        className={cn(
          'flex items-center justify-between w-full mb-2 transition-all duration-200 rounded-lg',
          currentStatusConfig.classes,
          isMobile ? 'py-2 text-sm' : 'p-3'
        )}
        onClick={() => {
          onWorldChange(worldId as WorldId);
          if (isMobile) setShowMobileNav(false);
        }}
      >
        <div className="flex items-center gap-3">
          <Icon
            className={cn(
              'h-5 w-5',
              isActive ? 'text-white' : `text-${themeColor}-500`
            )}
          />
          <span className="truncate text-right font-medium">{label}</span>
        </div>
        <div className="flex-shrink-0">{currentStatusConfig.actionIcon}</div>
      </Button>
    );
  };

  const ProfileNotice = () => (
    <div className="mx-4 my-2 p-3 bg-slate-100/80 border border-slate-200/90 rounded-lg">
      <div className="flex items-start gap-3">
        <div className="flex-shrink-0 pt-0.5">
          <Info className="h-4 w-4 text-slate-500" />
        </div>
        <div className="flex-1 min-w-0">
          <p className="text-slate-600 leading-relaxed text-sm">
            <span className="font-medium text-slate-700">
              {dict.layout.profileNotice.title}
            </span>{' '}
            {dict.layout.profileNotice.textPart1}
            <span className="inline-flex items-center px-1 py-0.5 bg-white border border-slate-200 rounded text-xs font-mono">
              <Eye className="inline-block h-3 w-3 mr-1 text-slate-500" />
            </span>
            {dict.layout.profileNotice.textPart2}
            <br />
            <Link
              href="/profile?tab=questionnaire"
              className="inline-flex items-center gap-1 mt-2 text-sm font-medium text-blue-600 hover:text-blue-700 transition-colors"
              target="_blank"
            >
              {dict.layout.profileNotice.link}
              <svg
                className="w-3 h-3"
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
              >
                <path
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  strokeWidth={2}
                  d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14"
                />
              </svg>
            </Link>
          </p>
        </div>
      </div>
    </div>
  );

  const UnauthenticatedPrompt = () => (
    <div className="p-3 my-3 bg-cyan-50/70 border border-cyan-200 rounded-lg text-center space-y-2">
      <p className="text-sm text-cyan-800 font-medium">
        {dict.layout.unauthenticatedPrompt.title}
      </p>
      <p className="text-xs text-cyan-700">
        {dict.layout.unauthenticatedPrompt.subtitle}
      </p>
      <div className="flex gap-2 justify-center pt-1">
        <Link href="/auth/signin">
          <Button variant="outline" size="sm" className="bg-white/80">
            <LogIn className="w-3 h-3 ml-1" />
            {dict.layout.unauthenticatedPrompt.loginButton}
          </Button>
        </Link>
        <Link href="/auth/register">
          <Button variant="default" size="sm">
            <UserPlus className="w-3 h-3 ml-1" />
            {dict.layout.unauthenticatedPrompt.registerButton}
          </Button>
        </Link>
      </div>
    </div>
  );

  const renderFAQButton = (isMobile: boolean) => (
    <Sheet>
      <SheetTrigger asChild>
        <Button
          variant="ghost"
          size={isMobile ? 'sm' : 'icon'}
          className={cn(
            'text-slate-500 hover:text-slate-800',
            isMobile
              ? 'w-full justify-start gap-3 p-3'
              : 'w-8 h-8 p-0 rounded-full'
          )}
          aria-label={dict.layout.tooltips.faq}
        >
          <HelpCircle className="h-5 w-5" />
          {isMobile && <span>{dict.layout.tooltips.faq}</span>}
        </Button>
      </SheetTrigger>
      <SheetContent
        side={isRTL ? 'left' : 'right'}
        className="w-[90vw] max-w-lg overflow-y-auto"
      >
        <SheetHeader>
          <SheetTitle>{dict.layout.tooltips.faq}</SheetTitle>
        </SheetHeader>
        <div className="mt-4">
          <FAQ dict={dict.faq} />
        </div>
      </SheetContent>
    </Sheet>
  );

  const MobileNav = () => (
    <AnimatePresence>
      {showMobileNav && (
        <>
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            transition={{ duration: 0.2 }}
            className="fixed inset-0 bg-black/50 backdrop-blur-sm z-50"
            onClick={() => setShowMobileNav(false)}
          />
          <motion.div
            initial={{ x: isRTL ? '100%' : '-100%' }}
            animate={{ x: 0 }}
            exit={{ x: isRTL ? '100%' : '-100%' }}
            transition={{ type: 'spring', damping: 25, stiffness: 300 }}
            className={`fixed top-0 ${isRTL ? 'right-0' : 'left-0'} h-full w-3/4 max-w-xs bg-white shadow-lg p-4 z-50 ${directionClass} flex flex-col overflow-y-auto`}
          >
            <div className="flex items-center justify-between mb-6">
              <h2 className="text-lg font-medium flex items-center">
                <ArrowRightLeft className="w-5 h-5 mr-2 text-blue-500" />
                {dict.layout.mobileNav.title}
              </h2>
              <Button
                variant="ghost"
                size="sm"
                onClick={() => setShowMobileNav(false)}
                className="w-8 h-8 p-0 rounded-full"
              >
                <X className="h-4 w-4" />
              </Button>
            </div>
            <div className="flex-grow">
              {Object.keys(worldConfig).map((worldId) => (
                <NavButton key={worldId} worldId={worldId} isMobile={true} />
              ))}
            </div>
            {!isLoggedIn && <UnauthenticatedPrompt />}
            <div className="pt-4 mt-4 border-t space-y-2">
              <Link href="/profile?tab=questionnaire">
                <Button
                  variant="outline"
                  size="sm"
                  className="w-full justify-start gap-2"
                >
                  <BookUser className="h-4 w-4" />
                  {dict.layout.mobileNav.reviewAnswers}
                </Button>
              </Link>
              <Button
                variant="outline"
                size="sm"
                className="w-full justify-start gap-2"
                onClick={onExit}
              >
                <Home className="h-4 w-4" />
                {dict.layout.mobileNav.backToMap}
              </Button>
              <Button
                variant="outline"
                size="sm"
                className="w-full justify-start text-red-500 hover:text-red-700"
                onClick={() => setShowExitPrompt(true)}
              >
                <LogOut className="h-4 w-4" />
                {dict.layout.mobileNav.exit}
              </Button>
            </div>
          </motion.div>
        </>
      )}
    </AnimatePresence>
  );

  return (
    <div
      className={`flex flex-col min-h-screen lg:flex-row bg-slate-50 ${directionClass}`}
    >
      <header
        className={cn(
          'lg:hidden sticky top-0 z-40 bg-white shadow-sm p-3 flex items-center justify-between',
          `border-b-2 border-${currentThemeColor}-200`
        )}
      >
        <Button
          variant="ghost"
          size="sm"
          onClick={() => setShowMobileNav(true)}
          className="inline-flex items-center"
        >
          <Menu className="h-5 w-5" />
          {!isSmallScreen && <span className="ml-2">תפריט</span>}
        </Button>
        <div className="flex flex-col items-center">
          <h1
            className={cn(
              'text-sm font-semibold',
              `text-${currentThemeColor}-800`
            )}
          >
            {dict.worldLabels[currentWorld]}
          </h1>
          <div className="text-xs text-slate-500">
            {completedWorlds.length} / {Object.keys(worldConfig).length} הושלמו
          </div>
        </div>
        <div className="flex items-center gap-1">
          <Button
            variant="ghost"
            size="icon"
            className={cn(
              'h-8 w-8 rounded-full',
              isSaving
                ? `bg-${currentThemeColor}-100`
                : 'bg-green-50 text-green-600'
            )}
            onClick={() => handleSave()}
            disabled={isSaving}
          >
            {isSaving ? (
              <Loader2 className="h-4 w-4 animate-spin" />
            ) : (
              <Save className="h-4 w-4" />
            )}
          </Button>
        </div>
      </header>
      <MobileNav />
      <aside
        className={cn(
          'w-64 bg-white border-r hidden lg:flex lg:flex-col overflow-y-auto',
          isRTL ? 'border-l' : 'border-r'
        )}
      >
        <div className="p-4 border-b">
          <h3 className="font-semibold text-lg text-slate-800">
            {dict.layout.navHeader}
          </h3>
          <p className="text-xs text-slate-500">{dict.layout.navSubtitle}</p>
        </div>
        <div className="p-4 flex-grow">
          {Object.keys(worldConfig).map((worldId) => (
            <NavButton key={worldId} worldId={worldId} isMobile={false} />
          ))}
        </div>
        <ProfileNotice />
        {!isLoggedIn && (
          <div className="px-4">
            <UnauthenticatedPrompt />
          </div>
        )}
        <div className="p-4 border-t mt-auto space-y-2">
          {lastSaved && (
            <div className="flex items-center text-xs text-slate-500 mb-2">
              <CheckCircle className="h-3.5 w-3.5 mr-1.5 text-green-500" />
              <span>
                {dict.layout.lastSaved.replace(
                  '{{time}}',
                  lastSaved.toLocaleTimeString()
                )}
              </span>
            </div>
          )}
          <Button
            variant="outline"
            className="w-full"
            onClick={() => handleSave()}
            disabled={isSaving}
          >
            {isSaving ? (
              <>
                <Loader2 className="w-4 h-4 mr-2 animate-spin" />
                {dict.layout.buttons.saving}
              </>
            ) : (
              <>
                <Save className="w-4 h-4 mr-2" />
                {dict.layout.buttons.save}
              </>
            )}
          </Button>
          <Link href="/profile?tab=questionnaire">
            <Button variant="outline" className="w-full">
              <BookUser className="w-4 h-4 mr-2" />
              {dict.layout.buttons.review}
            </Button>
          </Link>
          <Button variant="outline" className="w-full" onClick={onExit}>
            <Home className="w-4 h-4 mr-2" />
            {dict.layout.buttons.map}
          </Button>
          <div className="flex gap-2 pt-2">
            {renderFAQButton(false)}
            {/* The redundant accessibility button has been removed from here */}
          </div>
        </div>
      </aside>
      <main className="flex-1 p-3 md:p-6 lg:pb-16 overflow-y-auto relative scroll-smooth">
        {children}
        <AccessibilityFeatures
          isPanelOpen={isAccessibilityPanelOpen}
          onPanelOpenChange={setAccessibilityPanelOpen}
          className="fixed bottom-4 right-4 lg:bottom-6 lg:left-6 lg:right-auto z-50"
          dict={dict.accessibilityFeatures}
        />
      </main>
      <AnimatePresence>
        {showExitPrompt && (
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            className="fixed inset-0 bg-black/50 backdrop-blur-sm flex items-center justify-center z-50 p-4"
          >
            <motion.div
              initial={{ scale: 0.9, opacity: 0 }}
              animate={{ scale: 1, opacity: 1 }}
              exit={{ scale: 0.9, opacity: 0 }}
              className="w-full max-w-md"
            >
              <Card className="bg-white">
                <CardContent className="pt-6">
                  <h3 className="text-lg font-medium mb-4">
                    {dict.layout.exitPrompt.title}
                  </h3>
                  <p className="text-slate-600 mb-6">
                    {dict.layout.exitPrompt.description}
                  </p>
                  <div className="flex flex-col sm:flex-row justify-end gap-2">
                    <Button
                      variant="outline"
                      size="sm"
                      onClick={() => setShowExitPrompt(false)}
                    >
                      {dict.layout.exitPrompt.cancel}
                    </Button>
                    <Button
                      variant="outline"
                      size="sm"
                      onClick={async () => {
                        await handleSave();
                        if (onExit) onExit();
                        setShowExitPrompt(false);
                      }}
                      disabled={isSaving}
                    >
                      {isSaving && (
                        <Loader2 className="h-4 w-4 animate-spin mr-1" />
                      )}
                      {dict.layout.exitPrompt.saveAndExit}
                    </Button>
                    <Button
                      variant="destructive"
                      size="sm"
                      onClick={() => {
                        setShowExitPrompt(false);
                        if (onExit) onExit();
                      }}
                    >
                      {dict.layout.exitPrompt.exitWithoutSaving}
                    </Button>
                  </div>
                </CardContent>
              </Card>
            </motion.div>
          </motion.div>
        )}
      </AnimatePresence>
    </div>
  );
}
--- End of Content for QuestionnaireLayout.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\questionnaire\layout\WorldsMap.tsx
--------------------------------------------------------------------------------
Content:
// src/components/questionnaire/layout/WorldsMap.tsx

import React, { useState } from 'react';
import Link from 'next/link';
import { motion, AnimatePresence } from 'framer-motion';
import { Card, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Progress } from '@/components/ui/progress';
import { Badge } from '@/components/ui/badge';
import {
  Scroll,
  Heart,
  Users,
  User,
  CheckCircle2,
  Lock,
  ArrowRight,
  Star,
  UserCheck,
  Sparkles,
  Edit3,
  Award,
  Brain,
  BookUser,
  ChevronDown,
  Clock,
  HelpCircle,
  ArrowLeft,
} from 'lucide-react';
import { cn } from '@/lib/utils';
import { useSession } from 'next-auth/react';
import type { WorldsMapDict } from '@/types/dictionary';
import { useLanguage } from '@/app/[locale]/contexts/LanguageContext';

// Importowanie pytań w celu uzyskania dynamicznych statystyk
import { personalityQuestions } from '../questions/personality/personalityQuestions';
import { valuesQuestions } from '../questions/values/valuesQuestions';
import { relationshipQuestions } from '../questions/relationship/relationshipQuestions';
import { partnerQuestions } from '../questions/partner/partnerQuestions';
import { religionQuestions } from '../questions/religion/religionQuestions';

// Konfiguracja wizualna (ikony, kolory) — etykiety tekstowe zostały usunięte
const worldsConfig = {
  PERSONALITY: { icon: User, order: 1, themeColor: 'sky' },
  VALUES: { icon: Heart, order: 2, themeColor: 'rose' },
  RELATIONSHIP: {
    icon: Users,
    order: 3,
    themeColor: 'purple',
  },
  PARTNER: {
    icon: UserCheck,
    order: 4,
    themeColor: 'teal',
  },
  RELIGION: { icon: Scroll, order: 5, themeColor: 'amber' },
} as const;

type WorldId = keyof typeof worldsConfig;
const WORLD_ORDER: WorldId[] = [
  'PERSONALITY',
  'VALUES',
  'RELATIONSHIP',
  'PARTNER',
  'RELIGION',
];
type WorldStatus =
  | 'completed'
  | 'recommended'
  | 'active'
  | 'available'
  | 'locked';

// Dynamiczne obliczanie statystyk dla każdego świata
const worldStats = {
  PERSONALITY: {
    questionCount: personalityQuestions.length,
    estimatedTime: Math.max(5, Math.round(personalityQuestions.length * 0.4)),
  },
  VALUES: {
    questionCount: valuesQuestions.length,
    estimatedTime: Math.max(5, Math.round(valuesQuestions.length * 0.4)),
  },
  RELATIONSHIP: {
    questionCount: relationshipQuestions.length,
    estimatedTime: Math.max(5, Math.round(relationshipQuestions.length * 0.4)),
  },
  PARTNER: {
    questionCount: partnerQuestions.length,
    estimatedTime: Math.max(5, Math.round(partnerQuestions.length * 0.4)),
  },
  RELIGION: {
    questionCount: religionQuestions.length,
    estimatedTime: Math.max(5, Math.round(religionQuestions.length * 0.4)),
  },
};

// Interfejsy propsów komponentów
interface WorldsMapProps {
  currentWorld: WorldId;
  completedWorlds: WorldId[];
  onWorldChange: (worldId: WorldId) => void;
  className?: string;
  dict: WorldsMapDict;
}

interface WorldCardProps {
  worldId: WorldId;
  status: WorldStatus;
  onSelect: () => void;
  dict: WorldsMapDict['worldCard'];
  fullContent: WorldsMapDict['worldsContent'][WorldId];
  stats: { questionCount: number; estimatedTime: number };
}

interface ProgressHeaderProps {
  userName?: string | null;
  completionPercent: number;
  completedCount: number;
  totalCount: number;
  nextRecommendedWorld?: WorldId;
  onGoToRecommended: () => void;
  dict: WorldsMapDict['progressHeader'];
  worldLabels: WorldsMapDict['worldLabels'];
}

// Podkomponenty
const ProgressHeader: React.FC<ProgressHeaderProps> = ({
  userName,
  completionPercent,
  completedCount,
  totalCount,
  nextRecommendedWorld,
  onGoToRecommended,
  dict,
  worldLabels,
}) => (
  <motion.div
    className="bg-white/95 backdrop-blur-xl p-6 rounded-2xl shadow-lg border border-white/60 space-y-4"
    initial={{ opacity: 0, y: -20 }}
    animate={{ opacity: 1, y: 0 }}
    transition={{ duration: 0.5, ease: 'easeOut' }}
  >
    <div>
      <h1 className="text-2xl sm:text-3xl font-bold text-gray-800">
        {userName
          ? dict.greeting.replace('{{name}}', userName)
          : dict.defaultTitle}
      </h1>
      <p className="text-md text-gray-600 mt-1">
        {dict.progressText
          .replace('{{completedCount}}', completedCount.toString())
          .replace('{{totalCount}}', totalCount.toString())}
      </p>
    </div>
    <div className="flex items-center gap-4">
      <Progress
        value={completionPercent}
        className="h-2.5 rounded-full"
        indicatorClassName="bg-gradient-to-r from-teal-500 via-orange-500 to-amber-500"
      />
      <span className="font-bold text-teal-600 text-lg">
        {completionPercent}%
      </span>
    </div>
    {nextRecommendedWorld && (
      <Button
        size="lg"
        onClick={onGoToRecommended}
        className="w-full sm:w-auto bg-gradient-to-r from-teal-500 via-orange-500 to-amber-500 hover:from-teal-600 hover:via-orange-600 hover:to-amber-600 text-white font-medium shadow-md hover:shadow-lg transition-all duration-200 ease-in-out transform hover:-translate-y-0.5 animate-pulse-slow"
      >
        <Sparkles className="h-5 w-5 me-2 fill-current" />
        {dict.ctaButton.replace(
          '{{worldName}}',
          worldLabels[nextRecommendedWorld]
        )}
      </Button>
    )}
  </motion.div>
);

const WorldCard: React.FC<WorldCardProps> = ({
  worldId,
  status,
  onSelect,
  dict,
  fullContent,
  stats,
}) => {
  const [isExpanded, setIsExpanded] = useState(false);
  const config = worldsConfig[worldId];
  const { icon: Icon, themeColor } = config;

  const statusInfo = {
    completed: {
      Icon: CheckCircle2,
      text: dict.statuses.completed,
      badge: 'bg-green-100 text-green-800 border-green-300',
      action: dict.actions.edit,
      ActionIcon: Edit3,
    },
    recommended: {
      Icon: Star,
      text: dict.statuses.recommended,
      badge:
        'bg-gradient-to-r from-teal-100 to-orange-100 text-teal-800 border-teal-300',
      action: dict.actions.start,
      ActionIcon: Sparkles,
    },
    active: {
      Icon: Sparkles,
      text: dict.statuses.active,
      badge: `bg-${themeColor}-100 text-${themeColor}-800 border-${themeColor}-300`,
      action: dict.actions.continue,
      ActionIcon: ArrowRight,
    },
    available: {
      Icon: ArrowRight,
      text: dict.statuses.available,
      badge: 'bg-gray-100 text-gray-800 border-gray-300',
      action: dict.actions.start,
      ActionIcon: ArrowRight,
    },
    locked: {
      Icon: Lock,
      text: dict.statuses.locked,
      badge: 'bg-gray-200 text-gray-600 border-gray-300',
      action: dict.actions.locked,
      ActionIcon: Lock,
    },
  }[status];

  return (
    <Card
      className={cn(
        'flex flex-col h-full transition-all duration-300 ease-in-out overflow-hidden shadow-lg hover:shadow-xl bg-white/90 backdrop-blur-sm border-2',
        status === 'recommended' &&
          'border-gradient-to-r from-teal-300 to-orange-300 scale-105 shadow-2xl ring-2 ring-teal-200',
        status === 'locked' &&
          'opacity-60 bg-gray-50 cursor-not-allowed border-gray-200'
      )}
    >
      <div className="p-6 pb-4 space-y-4">
        <div className="flex items-start justify-between gap-4">
          <div
            className={cn(
              'p-3 rounded-xl flex-shrink-0',
              `bg-${themeColor}-100`
            )}
          >
            <Icon className={cn('w-8 h-8', `text-${themeColor}-600`)} />
          </div>
          <Badge
            variant="outline"
            className={cn('text-xs font-medium', statusInfo.badge)}
          >
            <statusInfo.Icon className="w-3.5 h-3.5 ms-1.5" />
            {statusInfo.text}
          </Badge>
        </div>
        <div>
          <h3 className="text-xl font-bold text-gray-800">
            {fullContent.title}
          </h3>
          <p className="text-sm text-gray-600 mt-1">{fullContent.subtitle}</p>
        </div>
      </div>

      <div className="px-6 text-sm text-gray-500">
        <button
          onClick={() => setIsExpanded(!isExpanded)}
          className="flex items-center gap-1 hover:text-gray-800 transition-colors"
        >
          {isExpanded ? dict.showLess : dict.readMore}
          <ChevronDown
            className={cn(
              'w-4 h-4 transition-transform',
              isExpanded && 'rotate-180'
            )}
          />
        </button>
      </div>

      <AnimatePresence>
        {isExpanded && (
          <motion.div
            initial={{ height: 0, opacity: 0 }}
            animate={{ height: 'auto', opacity: 1 }}
            exit={{ height: 0, opacity: 0 }}
            transition={{ duration: 0.3, ease: 'easeInOut' }}
            className="overflow-hidden"
          >
            <div className="px-6 pt-4 pb-6 space-y-5">
              <div>
                <h4 className="font-semibold text-gray-700 mb-2 flex items-center gap-2">
                  <Brain className={`w-5 h-5 text-${themeColor}-500`} />
                  {fullContent.whyIsItImportant}
                </h4>
                <p className="text-sm text-gray-600 leading-relaxed">
                  {fullContent.whyIsItImportant}
                </p>
              </div>
              <div>
                <h4 className="font-semibold text-gray-700 mb-2 flex items-center gap-2">
                  <Sparkles className={`w-5 h-5 text-${themeColor}-500`} />
                  {fullContent.whatYouWillDiscover[0]}
                </h4>
                <ul className="list-disc list-inside space-y-1.5 text-sm text-gray-600">
                  {fullContent.whatYouWillDiscover.map((item, index) => (
                    <li key={index}>{item}</li>
                  ))}
                </ul>
              </div>
              <blockquote
                className={`border-s-4 border-${themeColor}-300 ps-4 py-2 bg-${themeColor}-50/60 my-4`}
              >
                <p className="text-sm text-gray-700 italic">
                  {fullContent.guidingThought}
                </p>
              </blockquote>
            </div>
          </motion.div>
        )}
      </AnimatePresence>

      <div className="flex-grow" />

      <div className="p-4 bg-gray-50/80 mt-auto border-t">
        <div className="flex justify-between text-xs text-gray-500 mb-3 px-2">
          <span className="flex items-center gap-1">
            <HelpCircle className="w-3.5 h-3.5" />
            {dict.questionCount.replace(
              '{{count}}',
              stats.questionCount.toString()
            )}
          </span>
          <span className="flex items-center gap-1">
            <Clock className="w-3.5 h-3.5" />
            {dict.estimatedTime.replace(
              '{{count}}',
              stats.estimatedTime.toString()
            )}
          </span>
        </div>
        <Button
          className={cn(
            'w-full font-medium',
            `bg-${themeColor}-600 hover:bg-${themeColor}-700 text-white`
          )}
          onClick={onSelect}
          disabled={status === 'locked'}
        >
          <statusInfo.ActionIcon className="w-4 h-4 ms-2" />
          {statusInfo.action}
        </Button>
      </div>
    </Card>
  );
};

// Komponent główny
export default function WorldsMap({
  currentWorld,
  completedWorlds,
  onWorldChange,
  className = '',
  dict,
}: WorldsMapProps) {
  const { data: session } = useSession();
  const { language } = useLanguage();
  const isRTL = language === 'he';
  const completionPercent = Math.round(
    (completedWorlds.length / WORLD_ORDER.length) * 100
  );
  const nextRecommendedWorld = WORLD_ORDER.find(
    (world) => !completedWorlds.includes(world)
  );

  const containerVariants = {
    hidden: { opacity: 0 },
    visible: {
      opacity: 1,
      transition: { staggerChildren: 0.1, delayChildren: 0.2 },
    },
  };
  const itemVariants = {
    hidden: { opacity: 0, y: 20 },
    visible: { opacity: 1, y: 0, transition: { duration: 0.5 } },
  };

  const getWorldStatus = (worldId: WorldId): WorldStatus => {
    if (completedWorlds.includes(worldId)) return 'completed';
    if (worldId === nextRecommendedWorld) return 'recommended';
    if (worldId === currentWorld) return 'active';
    return 'available';
  };

  const ReviewButtonArrow = isRTL ? ArrowLeft : ArrowRight;

  return (
    <div
      className={cn(
        'p-4 sm:p-6 bg-gradient-to-b from-white via-teal-50/20 to-white min-h-screen relative overflow-hidden',
        className
      )}
      dir={isRTL ? 'rtl' : 'ltr'} // Kluczowa zmiana: ustawienie kierunku
    >
      <div className="absolute inset-0 overflow-hidden pointer-events-none">
        <div className="absolute top-10 left-10 w-32 h-32 bg-gradient-to-br from-teal-200/30 to-orange-200/20 rounded-full blur-3xl animate-float-slow" />
        <div
          className="absolute top-40 right-20 w-24 h-24 bg-gradient-to-br from-amber-200/30 to-orange-200/20 rounded-full blur-2xl animate-float-slow"
          style={{ animationDelay: '2s' }}
        />
        <div
          className="absolute bottom-32 left-1/4 w-40 h-40 bg-gradient-to-br from-teal-200/25 to-amber-200/20 rounded-full blur-3xl animate-float-slow"
          style={{ animationDelay: '4s' }}
        />
        <div
          className="absolute bottom-10 right-10 w-28 h-28 bg-gradient-to-br from-orange-200/30 to-amber-200/25 rounded-full blur-2xl animate-float-slow"
          style={{ animationDelay: '1s' }}
        />
      </div>
      <div className="max-w-7xl mx-auto space-y-8 relative">
        <ProgressHeader
          userName={session?.user?.firstName}
          completionPercent={completionPercent}
          completedCount={completedWorlds.length}
          totalCount={WORLD_ORDER.length}
          nextRecommendedWorld={nextRecommendedWorld}
          onGoToRecommended={() =>
            nextRecommendedWorld && onWorldChange(nextRecommendedWorld)
          }
          dict={dict.progressHeader}
          worldLabels={dict.worldLabels}
        />
        {completedWorlds.length > 0 && (
          <motion.div
            initial={{ opacity: 0, y: -10 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.5, ease: 'easeOut', delay: 0.2 }}
          >
            <Card className="bg-white/90 backdrop-blur-md shadow-md border border-white/60">
              <CardContent className="p-4 sm:p-5 flex flex-col sm:flex-row items-center justify-between gap-4">
                <div className="flex items-center gap-4">
                  <div className="p-3 bg-teal-100 rounded-lg">
                    <BookUser className="w-6 h-6 text-teal-600" />
                  </div>
                  <div>
                    <h3 className="font-semibold text-gray-800">
                      {dict.reviewCard.title}
                    </h3>
                    <p className="text-sm text-gray-600">
                      {dict.reviewCard.description}
                    </p>
                  </div>
                </div>
                <Link href="/profile?tab=questionnaire">
                  <Button
                    variant="outline"
                    className="w-full sm:w-auto bg-white/80 border-teal-200 text-teal-600 hover:bg-teal-50 hover:border-teal-300"
                  >
                    <ReviewButtonArrow className="w-4 h-4 me-2" />
                    {dict.reviewCard.button}
                  </Button>
                </Link>
              </CardContent>
            </Card>
          </motion.div>
        )}
        <motion.div
          className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6"
          variants={containerVariants}
          initial="hidden"
          animate="visible"
        >
          {WORLD_ORDER.map((worldId) => (
            <motion.div variants={itemVariants} key={worldId}>
              <WorldCard
                worldId={worldId}
                status={getWorldStatus(worldId)}
                onSelect={() => onWorldChange(worldId)}
                dict={dict.worldCard}
                fullContent={dict.worldsContent[worldId]}
                stats={worldStats[worldId]}
              />
            </motion.div>
          ))}
        </motion.div>
        {completionPercent === 100 && (
          <motion.div
            variants={itemVariants}
            initial="hidden"
            animate="visible"
          >
            <Card className="bg-gradient-to-r from-teal-500 via-orange-500 to-amber-500 text-white text-center p-8 rounded-2xl shadow-2xl">
              <Award className="w-16 h-16 mx-auto mb-4" />
              <h2 className="text-3xl font-bold">
                {dict.completionBanner.title.replace(
                  '{{name}}',
                  session?.user?.firstName || ''
                )}
              </h2>
              <p className="mt-2 text-lg opacity-90">
                {dict.completionBanner.subtitle}
              </p>
              <p className="mt-1 text-sm opacity-80">
                {dict.completionBanner.description}
              </p>
            </Card>
          </motion.div>
        )}
      </div>
      <style jsx global>{`
        @keyframes pulse-slow {
          50% {
            opacity: 0.9;
            transform: scale(1.02);
          }
        }
        .animate-pulse-slow {
          animation: pulse-slow 2.5s cubic-bezier(0.4, 0, 0.6, 1) infinite;
        }
        @keyframes float-slow {
          0%,
          100% {
            transform: translateY(0px) rotate(0deg);
          }
          25% {
            transform: translateY(-3px) rotate(0.5deg);
          }
          75% {
            transform: translateY(3px) rotate(-0.5deg);
          }
        }
        .animate-float-slow {
          animation: float-slow 6s ease-in-out infinite;
        }
      `}</style>
    </div>
  );
}
--- End of Content for WorldsMap.tsx ---

================================================================================
Directory: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\questionnaire\onboarding
================================================================================

(This directory is empty.)

================================================================================
Directory: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\questionnaire\pages
================================================================================

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\questionnaire\pages\QuestionnaireLandingPage.tsx
--------------------------------------------------------------------------------
Content:
// src/components/questionnaire/pages/QuestionnaireLandingPage.tsx
import React from 'react';
import { Card, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import Link from 'next/link';
import {
  Heart,
  User,
  Users,
  Scroll,
  Clock,
  Star,
  Shield,
  CheckCircle,
  Lock,
  ArrowLeft,
  Loader2,
  Sparkles,
  UserCheck,
} from 'lucide-react';
import { cn } from '@/lib/utils';
import { useSession } from 'next-auth/react';
import { useIsMobile } from '../hooks/useMediaQuery';
import { motion } from 'framer-motion';
import type { QuestionnaireLandingPageDict } from '@/types/dictionary';

// --- Props Interface ---
interface QuestionnaireLandingPageProps {
  onStartQuestionnaire: () => void;
  hasSavedProgress: boolean;
  isLoading?: boolean;
  dict: QuestionnaireLandingPageDict;
}

// --- Animation Variants ---
const containerVariants = {
  hidden: { opacity: 0 },
  visible: {
    opacity: 1,
    transition: { staggerChildren: 0.1, delayChildren: 0.2 },
  },
};

const fadeInUp = {
  hidden: { opacity: 0, y: 30 },
  visible: {
    opacity: 1,
    y: 0,
    transition: { duration: 0.6, ease: 'easeOut' },
  },
};

// --- START: התיקון ---
// הוספת ההגדרה החסרה של האנימציה
const staggeredCardVariants = {
  hidden: { opacity: 0 },
  visible: {
    opacity: 1,
    transition: { staggerChildren: 0.1, delayChildren: 0.1 },
  },
};
// --- END: התיקון ---

// --- Background Component ---
const DynamicBackground: React.FC = () => (
  <div className="absolute inset-0 overflow-hidden pointer-events-none">
    <div className="absolute inset-0 opacity-40">
      <div className="absolute top-10 left-10 w-40 h-40 bg-gradient-to-br from-teal-200/40 to-orange-300/30 rounded-full blur-3xl animate-float-slow" />
      <div
        className="absolute top-1/2 right-20 w-32 h-32 bg-gradient-to-br from-amber-200/40 to-orange-300/30 rounded-full blur-2xl animate-float-slow"
        style={{ animationDelay: '2s' }}
      />
      <div
        className="absolute bottom-10 left-1/4 w-48 h-48 bg-gradient-to-br from-teal-200/30 to-amber-300/25 rounded-full blur-3xl animate-float-slow"
        style={{ animationDelay: '4s' }}
      />
    </div>
    <div className="absolute inset-0 opacity-5 bg-[radial-gradient(#f97316_0.5px,transparent_0.5px)] [background-size:24px_24px]" />
  </div>
);

// --- Main Component ---
export default function QuestionnaireLandingPage({
  onStartQuestionnaire,
  hasSavedProgress,
  isLoading = false,
  dict,
}: QuestionnaireLandingPageProps) {
  const { status, data: session } = useSession();
  const isMobile = useIsMobile();

  const worldVisuals = [
    { id: 'PERSONALITY', icon: <User />, color: 'sky' },
    { id: 'VALUES', icon: <Heart />, color: 'rose' },
    { id: 'RELATIONSHIP', icon: <Users />, color: 'purple' },
    { id: 'PARTNER', icon: <UserCheck />, color: 'teal' },
    { id: 'RELIGION', icon: <Scroll />, color: 'amber' },
  ];

  const getCtaText = () => {
    if (hasSavedProgress) return dict.cta.continue;
    if (session?.user?.firstName)
      return dict.cta.startAsUser.replace('{{name}}', session.user.firstName);
    return dict.cta.start;
  };
  const CtaIcon = hasSavedProgress ? CheckCircle : Heart;

  return (
    <div
      className={cn(
        'relative min-h-screen overflow-hidden text-right dir-rtl bg-slate-50',
        isMobile && 'pb-28'
      )}
    >
      <DynamicBackground />

      {/* SECTION 1: HERO - The Invitation */}
      <motion.section
        className="relative py-20 px-4 sm:py-24 text-center"
        initial="hidden"
        animate="visible"
        variants={containerVariants}
      >
        <div className="max-w-4xl mx-auto">
          <motion.div
            className="inline-flex items-center gap-3 bg-white/80 backdrop-blur-sm rounded-full px-6 py-3 shadow-lg border border-white/60 mb-8"
            variants={fadeInUp}
          >
            <Sparkles className="w-6 h-6 text-rose-500" />
            <span className="text-rose-700 font-semibold">
              {dict.hero.badge}
            </span>
          </motion.div>
          <motion.h1
            className="text-4xl sm:text-5xl lg:text-6xl font-extrabold mb-4 tracking-tight"
            variants={fadeInUp}
          >
            <span className="text-gray-800">{dict.hero.title}</span>
          </motion.h1>
          <motion.p
            className="text-lg md:text-xl text-gray-700 max-w-3xl mx-auto leading-relaxed"
            variants={fadeInUp}
          >
            {dict.hero.subtitle}
          </motion.p>
          <motion.div
            className="mt-12 space-y-4 flex flex-col items-center"
            variants={fadeInUp}
          >
            <Button
              size="lg"
              className="w-full max-w-sm text-lg font-semibold px-8 py-7 bg-gradient-to-r from-teal-500 via-orange-500 to-amber-500 hover:from-teal-600 hover:via-orange-600 hover:to-amber-600 text-white rounded-full shadow-lg hover:shadow-xl transition-all duration-300 group relative overflow-hidden transform hover:-translate-y-1"
              onClick={onStartQuestionnaire}
              disabled={isLoading}
            >
              <span className="absolute inset-0 w-full h-full bg-gradient-to-r from-white/0 via-white/20 to-white/0 transform -translate-x-full group-hover:animate-shimmer"></span>
              <div className="relative z-10 flex items-center justify-center">
                {isLoading ? (
                  <Loader2 className="h-6 w-6 animate-spin" />
                ) : (
                  <>
                    <CtaIcon className="h-6 w-6 ms-2 fill-white" />
                    <span>{getCtaText()}</span>
                  </>
                )}
              </div>
            </Button>
            {status !== 'authenticated' && (
              <Link href="/auth/signin" className="w-full max-w-sm">
                <Button
                  variant="outline"
                  size="lg"
                  className="w-full text-md font-medium px-8 py-6 border-2 border-teal-200 text-teal-600 hover:bg-teal-50 hover:border-teal-300 rounded-full transition-all duration-300 bg-white/70 backdrop-blur-sm"
                >
                  <Lock className="h-5 w-5 ms-2" />
                  {dict.cta.loginButton}
                </Button>
              </Link>
            )}
          </motion.div>
        </div>
      </motion.section>

      {/* SECTION 2: WORLDS - The Journey's Map */}
      <motion.section
        className="py-16 px-4 relative"
        initial="hidden"
        whileInView="visible"
        viewport={{ once: true, amount: 0.1 }}
        variants={containerVariants}
      >
        <div className="absolute inset-0 -m-8 bg-white/95 backdrop-blur-xl rounded-t-3xl shadow-2xl border-t border-white/60" />
        <div className="max-w-6xl mx-auto relative">
          <motion.div className="text-center mb-12" variants={fadeInUp}>
            <h2 className="text-3xl font-bold mb-3 text-gray-800">
              {dict.worldsSection.title}
            </h2>
            <div className="w-24 h-1 bg-gradient-to-r from-teal-500 via-orange-500 to-amber-500 mx-auto rounded-full mb-6" />
            <p className="text-lg text-gray-600 max-w-3xl mx-auto">
              {dict.worldsSection.subtitle}
            </p>
          </motion.div>
          <motion.div
            className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-6"
            variants={staggeredCardVariants}
          >
            {worldVisuals.map((world) => {
              const worldContent =
                dict.worlds[world.id as keyof typeof dict.worlds];
              const colorClasses = {
                sky: 'from-sky-400 to-blue-500',
                rose: 'from-rose-400 to-red-500',
                purple: 'from-purple-400 to-indigo-500',
                teal: 'from-teal-400 to-emerald-500',
                amber: 'from-amber-400 to-orange-500',
              };
              return (
                <motion.div key={world.id} variants={fadeInUp}>
                  <div className="overflow-hidden rounded-2xl shadow-lg hover:shadow-2xl transition-all duration-500 hover:-translate-y-2 bg-white/90 backdrop-blur-sm border border-white/60 flex flex-col h-full group p-6 text-center items-center">
                    <div
                      className={cn(
                        'p-4 rounded-full bg-gradient-to-br text-white shadow-lg mb-4 group-hover:scale-110 transition-all duration-300',
                        colorClasses[world.color as keyof typeof colorClasses]
                      )}
                    >
                      {React.cloneElement(world.icon as React.ReactElement, {
                        className: 'h-7 w-7',
                      })}
                    </div>
                    <h3 className="text-xl font-bold text-gray-800 mb-2">
                      {worldContent.title}
                    </h3>
                    <p className="text-base text-gray-600 leading-relaxed flex-grow">
                      {worldContent.description}
                    </p>
                  </div>
                </motion.div>
              );
            })}
          </motion.div>
        </div>
      </motion.section>

      {/* SECTION 3: FEATURES - The Promise */}
      <motion.section
        className="py-16 px-4 bg-white"
        initial="hidden"
        whileInView="visible"
        viewport={{ once: true, amount: 0.1 }}
        variants={containerVariants}
      >
        <div className="max-w-5xl mx-auto">
          <motion.div className="text-center mb-12" variants={fadeInUp}>
            <h2 className="text-3xl font-bold mb-3 text-gray-800">
              {dict.featuresSection.title}
            </h2>
            <div className="w-24 h-1 bg-gradient-to-r from-teal-500 via-orange-500 to-amber-500 mx-auto rounded-full mb-6" />
            <p className="text-lg text-gray-600 max-w-2xl mx-auto">
              {dict.featuresSection.subtitle}
            </p>
          </motion.div>
          <motion.div
            className="grid grid-cols-1 md:grid-cols-3 gap-8 text-center"
            variants={staggeredCardVariants}
          >
            {dict.featuresSection.features.map((feature, index) => (
              <motion.div
                key={index}
                className="flex flex-col items-center p-6 group"
                variants={fadeInUp}
              >
                <div className="p-4 rounded-full mb-5 transition-all duration-300 bg-slate-100 group-hover:bg-slate-200">
                  {index === 0 && <Clock className="h-8 w-8 text-sky-600" />}
                  {index === 1 && <Shield className="h-8 w-8 text-rose-600" />}
                  {index === 2 && <Star className="h-8 w-8 text-amber-600" />}
                </div>
                <h3 className="font-bold text-xl mb-2 text-gray-800">
                  {feature.title}
                </h3>
                <p className="text-base text-gray-600 leading-relaxed">
                  {feature.description}
                </p>
              </motion.div>
            ))}
          </motion.div>
        </div>
      </motion.section>

      {/* SECTION 4: FINAL CTA */}
      <motion.section
        className="py-20 px-4 text-center relative bg-slate-50"
        initial="hidden"
        whileInView="visible"
        viewport={{ once: true, amount: 0.15 }}
        variants={containerVariants}
      >
        <div className="max-w-3xl mx-auto">
          <motion.h2
            className="text-3xl font-bold mb-4 text-gray-800"
            variants={fadeInUp}
          >
            {dict.finalCta.title}
          </motion.h2>
          <motion.p
            className="text-lg text-gray-600 mb-8 max-w-xl mx-auto leading-relaxed"
            variants={fadeInUp}
          >
            {dict.finalCta.subtitle}
          </motion.p>
          <motion.div variants={fadeInUp}>
            <Button
              size="lg"
              onClick={onStartQuestionnaire}
              disabled={isLoading}
              className="w-full max-w-xs text-lg font-semibold px-8 py-7 bg-gradient-to-r from-teal-500 via-orange-500 to-amber-500 hover:from-teal-600 hover:via-orange-600 hover:to-amber-600 text-white rounded-full shadow-lg hover:shadow-xl transition-all duration-300 group relative overflow-hidden transform hover:-translate-y-1"
            >
              <span className="absolute inset-0 w-full h-full bg-gradient-to-r from-white/0 via-white/20 to-white/0 transform -translate-x-full group-hover:animate-shimmer"></span>
              <div className="relative z-10 flex items-center justify-center">
                {isLoading ? (
                  <Loader2 className="h-6 w-6 animate-spin" />
                ) : (
                  <>
                    <ArrowLeft className="h-6 w-6 ms-2" />
                    <span>{dict.finalCta.buttonText}</span>
                  </>
                )}
              </div>
            </Button>
          </motion.div>
        </div>
      </motion.section>

      {isMobile && (
        <div className="fixed bottom-0 left-0 right-0 p-3 bg-white/90 backdrop-blur-sm border-t border-teal-200/80 shadow-top z-50">
          <Button
            size="lg"
            className="w-full text-base font-semibold py-3 bg-gradient-to-r from-teal-500 via-orange-500 to-amber-500 text-white rounded-lg shadow-md hover:shadow-lg transition-shadow group relative overflow-hidden"
            onClick={onStartQuestionnaire}
            disabled={isLoading}
          >
            <span className="absolute inset-0 w-full h-full bg-gradient-to-r from-white/0 via-white/20 to-white/0 transform -translate-x-full group-hover:animate-shimmer"></span>
            <div className="relative z-10 flex items-center justify-center">
              {isLoading ? (
                <Loader2 className="h-5 w-5 animate-spin" />
              ) : (
                <>
                  <CtaIcon className="h-5 w-5 ms-2 fill-white" />
                  <span>{getCtaText()}</span>
                </>
              )}
            </div>
          </Button>
        </div>
      )}

      <footer className="text-center py-6 text-gray-500 text-sm bg-slate-50">
        {dict.footer.copyright.replace(
          '{{year}}',
          new Date().getFullYear().toString()
        )}
      </footer>

      <style jsx global>{`
        @keyframes float-slow {
          0%,
          100% {
            transform: translateY(0px);
          }
          50% {
            transform: translateY(-20px);
          }
        }
        .animate-float-slow {
          animation: float-slow 8s ease-in-out infinite;
        }
        @keyframes pulse-slow {
          0%,
          100% {
            opacity: 0.8;
          }
          50% {
            opacity: 1;
          }
        }
        .animate-pulse-slow {
          animation: pulse-slow 4s ease-in-out infinite;
        }
        @keyframes shimmer {
          100% {
            transform: translateX(100%);
          }
        }
        .animate-shimmer {
          animation: shimmer 2s infinite;
        }
        .shadow-top {
          box-shadow:
            0 -4px 6px -1px rgb(0 0 0 / 0.1),
            0 -2px 4px -2px rgb(0 0 0 / 0.1);
        }
      `}</style>
    </div>
  );
}
--- End of Content for QuestionnaireLandingPage.tsx ---

================================================================================
Directory: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\questionnaire\questions
================================================================================

(This directory contains subdirectories but no files directly. See subdirectories below.)

================================================================================
Directory: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\questionnaire\questions\partner
================================================================================

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\questionnaire\questions\partner\partnerQuestions.tsx
--------------------------------------------------------------------------------
Content:
// src/components/questionnaire/questions/partner/partnerQuestions.tsx
import { Question } from '../../types/types';
import {
  Heart,
  Brain,
  Smile,
  ShieldCheck,
  Star,
  Users,
  Moon,
  Home,
  Target,
  Scale,
  BookOpen,
  Scroll,
  Activity,
  Coffee,
  Eye,
  Car,
  Flag,
  Globe,
  HandHeart,
  Lightbulb,
  Briefcase,
  PiggyBank,
  Info,
  Sparkles,
  Palette,
  Headphones,
  MessageCircle,
  TrendingUp,
  Building2,
  Mountain,
  TreePine,
  MapPin,
  DollarSign,
  HelpCircle,
} from 'lucide-react';

export const partnerQuestions: Question[] = [
  {
    worldId: 'PARTNER',
    id: 'partner_initial_impression_priorities_revised',
    category: 'partner',
    subcategory: 'first_impression_basics',
    type: 'multiSelect',
    depth: 'BASIC',
    isRequired: false,
    options: [
      { value: 'appearance_style', icon: <Eye /> },
      { value: 'smile_energy', icon: <Smile /> },
      { value: 'conversation_chemistry', icon: <MessageCircle /> },
      { value: 'wit_depth', icon: <Brain /> },
      { value: 'sense_of_security', icon: <ShieldCheck /> },
    ],
    minSelections: 1,
    maxSelections: 3,
    metadata: { estimatedTime: 1 },
  },
  {
    worldId: 'PARTNER',
    id: 'partner_appearance_importance_scale_revised',
    category: 'partner',
    subcategory: 'first_impression_basics',
    type: 'scale',
    depth: 'BASIC',
    isRequired: false,
    min: 1,
    max: 10,
    metadata: { estimatedTime: 1 },
  },
  {
    worldId: 'PARTNER',
    id: 'partner_intelligence_types',
    category: 'partner',
    subcategory: 'first_impression_basics',
    type: 'budgetAllocation',
    depth: 'ADVANCED',
    isRequired: false,
    totalPoints: 100,
    categories: [
      { value: 'emotional', icon: <Heart /> },
      { value: 'analytical', icon: <Brain /> },
      { value: 'life_smarts', icon: <Sparkles /> },
      { value: 'creative', icon: <Lightbulb /> },
      { value: 'spiritual_torah', icon: <BookOpen /> },
    ],
    metadata: { estimatedTime: 3 },
  },
  {
    worldId: 'PARTNER',
    id: 'partner_core_character_traits_essential_revised',
    category: 'partner',
    subcategory: 'first_impression_basics',
    type: 'budgetAllocation',
    depth: 'BASIC',
    isRequired: false,
    totalPoints: 100,
    categories: [
      { value: 'integrity', icon: <ShieldCheck /> },
      { value: 'warmth', icon: <Heart /> },
      { value: 'optimism', icon: <Smile /> },
      { value: 'maturity', icon: <Target /> },
      { value: 'ambition', icon: <Star /> },
      { value: 'communication', icon: <HandHeart /> },
    ],
    metadata: { estimatedTime: 3 },
  },
  {
    worldId: 'PARTNER',
    id: 'partner_completion_trait',
    category: 'partner',
    subcategory: 'first_impression_basics',
    type: 'openText',
    depth: 'ADVANCED',
    isRequired: false,
    minLength: 20,
    maxLength: 300,
    metadata: { estimatedTime: 2 },
  },
  {
    worldId: 'PARTNER',
    id: 'partner_dating_persona',
    category: 'partner',
    subcategory: 'first_impression_basics',
    type: 'budgetAllocation',
    depth: 'ADVANCED',
    isRequired: false,
    totalPoints: 100,
    categories: [
      { value: 'observer_listener', icon: <Headphones /> },
      { value: 'storyteller_initiator', icon: <MessageCircle /> },
      { value: 'humorous_light', icon: <Smile /> },
      { value: 'deep_serious', icon: <Brain /> },
      { value: 'shy_reserved', icon: <Moon /> },
    ],
    metadata: { estimatedTime: 3 },
  },

  {
    worldId: 'PARTNER',
    id: 'partner_lifestyle_pace_preference_revised',
    category: 'partner',
    subcategory: 'lifestyle_social',
    type: 'iconChoice',
    depth: 'BASIC',
    isRequired: false,
    options: [
      { value: 'dynamic_active', icon: <Activity /> },
      { value: 'calm_serene', icon: <Home /> },
      { value: 'balanced', icon: <Scale /> },
      { value: 'adventurous_spontaneous', icon: <Sparkles /> },
    ],
    metadata: { estimatedTime: 1 },
  },
  {
    worldId: 'PARTNER',
    id: 'partner_financial_habits_scale',
    category: 'partner',
    subcategory: 'career_finance_education',
    type: 'scale',
    depth: 'BASIC',
    isRequired: false,
    min: 1,
    max: 10,
    metadata: { estimatedTime: 1 },
  },
  {
    worldId: 'PARTNER',
    id: 'partner_career_ambition_preference_revised',
    category: 'partner',
    subcategory: 'career_finance_education',
    type: 'iconChoice',
    depth: 'ADVANCED',
    isRequired: false,
    options: [
      { value: 'ambition_focus', icon: <Star /> },
      { value: 'work_life_balance', icon: <Scale /> },
      { value: 'personal_satisfaction', icon: <Heart /> },
    ],
    metadata: { estimatedTime: 1 },
  },
  {
    worldId: 'PARTNER',
    id: 'partner_deal_breakers_open_text_revised',
    category: 'partner',
    subcategory: 'non_negotiables',
    type: 'openText',
    depth: 'EXPERT',
    isRequired: false,
    minLength: 30,
    maxLength: 300,
    metadata: { estimatedTime: 2 },
  },
  {
    worldId: 'PARTNER',
    id: 'partner_common_disqualifiers',
    category: 'partner',
    subcategory: 'non_negotiables',
    type: 'openText',
    depth: 'EXPERT',
    isRequired: false,
    minLength: 40,
    maxLength: 400,
    metadata: { estimatedTime: 2 },
  },
  {
    worldId: 'PARTNER',
    id: 'partner_personality_clash',
    category: 'partner',
    subcategory: 'non_negotiables',
    type: 'openText',
    depth: 'EXPERT',
    isRequired: false,
    minLength: 40,
    maxLength: 400,
    metadata: { estimatedTime: 2 },
  },
  {
    worldId: 'PARTNER',
    id: 'partner_red_flag_vs_quirk',
    category: 'partner',
    subcategory: 'non_negotiables',
    type: 'openText',
    depth: 'EXPERT',
    isRequired: false,
    minLength: 50,
    maxLength: 400,
    metadata: { estimatedTime: 2 },
  },
  {
    worldId: 'PARTNER',
    id: 'partner_in_laws_conflict',
    category: 'partner',
    subcategory: 'family_background',
    type: 'iconChoice',
    depth: 'EXPERT',
    isRequired: false,
    options: [
      { value: 'loyalty_to_couple', icon: <ShieldCheck /> },
      { value: 'mediation_compromise', icon: <Scale /> },
      { value: 'diplomacy', icon: <Users /> },
      { value: 'loyalty_to_family_of_origin', icon: <Home /> },
    ],
    metadata: { estimatedTime: 1 },
  },
  {
    worldId: 'PARTNER',
    id: 'partner_must_have_quality_final_revised',
    category: 'partner',
    subcategory: 'non_negotiables',
    type: 'openText',
    depth: 'EXPERT',
    isRequired: false,
    minLength: 10,
    maxLength: 150,
    metadata: { estimatedTime: 1 },
  },
];
--- End of Content for partnerQuestions.tsx ---

================================================================================
Directory: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\questionnaire\questions\personality
================================================================================

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\questionnaire\questions\personality\personalityQuestions.tsx
--------------------------------------------------------------------------------
Content:
// src/components/questionnaire/questions/personality/personalityQuestions.tsx
import { Question } from '../../types/types';
import {
  Sun,
  Moon,
  Users,
  Brain,
  Heart,
  Target,
  Compass,
  Cloud,
  Leaf,
  Home,
  Watch,
  Scale,
  Coffee,
  MessageCircle,
  HandHeart,
  Lightbulb,
  Sparkles,
  Star,
  Smile,
  ShieldCheck,
  BookOpen,
  Palette,
  Headphones,
  Mountain,
  Bed,
  Utensils,
  Activity,
  Edit,
  HelpCircle,
  Anchor,
  Feather,
} from 'lucide-react';

export const personalityQuestions: Question[] = [
  {
    worldId: 'PERSONALITY',
    id: 'personality_self_portrayal_revised',
    category: 'personality',
    subcategory: 'self_perception',
    type: 'openText',
    depth: 'BASIC',
    isRequired: false,
    minLength: 70,
    maxLength: 500,
    metadata: { estimatedTime: 3 },
  },
  {
    worldId: 'PERSONALITY',
    id: 'personality_core_trait_selection_revised',
    category: 'personality',
    subcategory: 'self_perception',
    type: 'budgetAllocation',
    depth: 'BASIC',
    isRequired: false,
    totalPoints: 100,
    categories: [
      { value: 'empathetic_sensitive', icon: <Heart /> },
      { value: 'honest_reliable', icon: <ShieldCheck /> },
      { value: 'optimistic_cheerful', icon: <Sun /> },
      { value: 'humorous', icon: <Smile /> },
      { value: 'intelligent_curious', icon: <Brain /> },
      { value: 'ambitious_motivated', icon: <Star /> },
      { value: 'easygoing_flexible', icon: <Feather /> },
      { value: 'responsible_organized', icon: <Target /> },
      { value: 'creative_original', icon: <Lightbulb /> },
      { value: 'stable_grounded', icon: <Anchor /> },
      { value: 'decisive_confident', icon: <Compass /> },
      { value: 'generous_caring', icon: <HandHeart /> },
    ],
    metadata: { estimatedTime: 3 },
  },
  {
    worldId: 'PERSONALITY',
    id: 'personality_social_battery_recharge',
    category: 'personality',
    subcategory: 'lifestyle',
    type: 'scenario',
    depth: 'BASIC',
    isRequired: false,
    options: [
      { value: 'quiet_evening_home', icon: <Moon /> },
      { value: 'intimate_gathering', icon: <Coffee /> },
      { value: 'energetic_social_outing', icon: <Users /> },
      { value: 'flexible_combination', icon: <Scale /> },
    ],
    metadata: { estimatedTime: 1 },
  },
  {
    worldId: 'PERSONALITY',
    id: 'personality_biological_clock',
    category: 'personality',
    subcategory: 'lifestyle',
    type: 'scale',
    depth: 'BASIC',
    isRequired: false,
    min: 1,
    max: 10,
    metadata: { estimatedTime: 1 },
  },
  {
    worldId: 'PERSONALITY',
    id: 'personality_daily_structure_revised',
    category: 'personality',
    subcategory: 'lifestyle',
    type: 'iconChoice',
    depth: 'BASIC',
    isRequired: false,
    options: [
      { value: 'order_planning', icon: <Watch /> },
      { value: 'flexibility_flow', icon: <Cloud /> },
      { value: 'task_oriented', icon: <Target /> },
      { value: 'balance', icon: <Scale /> },
    ],
    metadata: { estimatedTime: 1 },
  },
  {
    worldId: 'PERSONALITY',
    id: 'personality_social_situation_revised',
    category: 'personality',
    subcategory: 'social_communication',
    type: 'iconChoice',
    depth: 'BASIC',
    isRequired: false,
    options: [
      { value: 'initiator', icon: <Users /> },
      { value: 'joiner', icon: <Coffee /> },
      { value: 'deep_diver', icon: <MessageCircle /> },
      { value: 'observer', icon: <Compass /> },
    ],
    metadata: { estimatedTime: 1 },
  },
  {
    worldId: 'PERSONALITY',
    id: 'personality_unproductive_day_feeling',
    category: 'personality',
    subcategory: 'emotional_coping',
    type: 'iconChoice',
    depth: 'ADVANCED',
    isRequired: false,
    options: [
      { value: 'self_compassion', icon: <Heart /> },
      { value: 'criticism_action', icon: <Target /> },
      { value: 'analysis_learning', icon: <Brain /> },
      { value: 'immediate_fix', icon: <Activity /> },
    ],
    metadata: { estimatedTime: 1 },
  },
  {
    worldId: 'PERSONALITY',
    id: 'personality_plan_change_reaction',
    category: 'personality',
    subcategory: 'emotional_coping',
    type: 'scale',
    depth: 'BASIC',
    isRequired: false,
    min: 1,
    max: 10,
    metadata: { estimatedTime: 1 },
  },
  {
    worldId: 'PERSONALITY',
    id: 'personality_stress_management_revised',
    category: 'personality',
    subcategory: 'emotional_coping',
    type: 'multiSelectWithOther',
    depth: 'BASIC',
    isRequired: false,
    options: [
      { value: 'movement_sport', icon: <Activity /> },
      { value: 'talk_vent', icon: <Users /> },
      { value: 'alone_time_rest', icon: <Bed /> },
      { value: 'nature', icon: <Leaf /> },
      { value: 'creative_hobby', icon: <Palette /> },
      { value: 'order_organization', icon: <Brain /> },
      { value: 'media_disconnect', icon: <Headphones /> },
    ],
    minSelections: 1,
    maxSelections: 3,
    metadata: { estimatedTime: 2 },
  },
  {
    worldId: 'PERSONALITY',
    id: 'personality_friendship_in_action',
    category: 'personality',
    subcategory: 'social_communication',
    type: 'openText',
    depth: 'ADVANCED',
    isRequired: false,
    minLength: 50,
    maxLength: 400,
    metadata: { estimatedTime: 2 },
  },
  {
    worldId: 'PERSONALITY',
    id: 'personality_friend_in_crisis',
    category: 'personality',
    subcategory: 'social_communication',
    type: 'iconChoice',
    depth: 'ADVANCED',
    isRequired: false,
    options: [
      { value: 'emotional_support', icon: <Heart /> },
      { value: 'problem_solving', icon: <Brain /> },
      { value: 'clarification_analysis', icon: <MessageCircle /> },
      { value: 'distraction', icon: <Sparkles /> },
    ],
    metadata: { estimatedTime: 1 },
  },
  {
    worldId: 'PERSONALITY',
    id: 'personality_handling_criticism_revised',
    category: 'personality',
    subcategory: 'emotional_coping',
    type: 'openText',
    depth: 'ADVANCED',
    isRequired: false,
    minLength: 50,
    maxLength: 400,
    metadata: { estimatedTime: 2 },
  },
  {
    worldId: 'PERSONALITY',
    id: 'personality_communication_style_revised',
    category: 'personality',
    subcategory: 'social_communication',
    type: 'budgetAllocation',
    depth: 'ADVANCED',
    isRequired: false,
    totalPoints: 100,
    categories: [
      { value: 'direct_clear', icon: <Target /> },
      { value: 'empathetic_listening', icon: <HandHeart /> },
      { value: 'logic_facts', icon: <Brain /> },
      { value: 'humor_lightness', icon: <Smile /> },
      { value: 'openness_emotional_sharing', icon: <Heart /> },
    ],
    metadata: { estimatedTime: 3 },
  },
  {
    worldId: 'PERSONALITY',
    id: 'personality_humor_type',
    category: 'personality',
    subcategory: 'social_communication',
    type: 'multiSelect',
    depth: 'ADVANCED',
    isRequired: false,
    minSelections: 1,
    maxSelections: 2,
    options: [
      { value: 'cynical_witty' },
      { value: 'puns_wordplay' },
      { value: 'situational_sitcom' },
      { value: 'self_deprecating' },
      { value: 'silly_light' },
    ],
    metadata: { estimatedTime: 1 },
  },
  {
    worldId: 'PERSONALITY',
    id: 'personality_learning_process',
    category: 'personality',
    subcategory: 'growth_aspirations',
    type: 'openText',
    depth: 'EXPERT',
    isRequired: false,
    minLength: 50,
    maxLength: 500,
    metadata: { estimatedTime: 3 },
  },
  {
    worldId: 'PERSONALITY',
    id: 'personality_failure_lesson',
    category: 'personality',
    subcategory: 'emotional_coping',
    type: 'openText',
    depth: 'EXPERT',
    isRequired: false,
    minLength: 50,
    maxLength: 500,
    metadata: { estimatedTime: 3 },
  },
  {
    worldId: 'PERSONALITY',
    id: 'personality_good_vs_perfect_day',
    category: 'personality',
    subcategory: 'lifestyle',
    type: 'openText',
    depth: 'ADVANCED',
    isRequired: false,
    minLength: 40,
    maxLength: 400,
    metadata: { estimatedTime: 2 },
  },
  {
    worldId: 'PERSONALITY',
    id: 'personality_vacation_compass',
    category: 'personality',
    subcategory: 'lifestyle',
    type: 'budgetAllocation',
    depth: 'ADVANCED',
    isRequired: false,
    totalPoints: 100,
    categories: [
      { value: 'relaxation', icon: <Bed /> },
      { value: 'adventure', icon: <Mountain /> },
      { value: 'city_life', icon: <Sparkles /> },
      { value: 'social_time', icon: <Users /> },
      { value: 'romance', icon: <Heart /> },
      { value: 'enrichment', icon: <BookOpen /> },
    ],
    metadata: { estimatedTime: 3 },
  },
  {
    worldId: 'PERSONALITY',
    id: 'personality_primary_motivation_revised',
    category: 'personality',
    subcategory: 'growth_aspirations',
    type: 'iconChoice',
    depth: 'ADVANCED',
    isRequired: false,
    options: [
      { value: 'achieving_goals', icon: <Star /> },
      { value: 'building_connections', icon: <Heart /> },
      { value: 'giving_impact', icon: <HandHeart /> },
      { value: 'learning_curiosity', icon: <BookOpen /> },
      { value: 'creativity_expression', icon: <Sparkles /> },
      { value: 'security_stability', icon: <ShieldCheck /> },
    ],
    metadata: { estimatedTime: 1 },
  },
  {
    worldId: 'PERSONALITY',
    id: 'personality_strengths_and_weaknesses_revised',
    category: 'personality',
    subcategory: 'growth_aspirations',
    type: 'openText',
    depth: 'ADVANCED',
    isRequired: false,
    minLength: 70,
    maxLength: 600,
    metadata: { estimatedTime: 3 },
  },
];
--- End of Content for personalityQuestions.tsx ---

================================================================================
Directory: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\questionnaire\questions\relationship
================================================================================

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\questionnaire\questions\relationship\relationshipQuestions.tsx
--------------------------------------------------------------------------------
Content:
// src/components/questionnaire/questions/relationship/relationshipQuestions.tsx
import { Question } from '../../types/types';
import {
  Briefcase,
  BookOpen,
  Target,
  Heart,
  Users,
  Home,
  MessageCircle,
  Scale,
  Brain,
  Moon,
  Sparkles,
  HandHeart,
  ShieldCheck,
  Link,
  Map,
  Clock,
  Award,
  Baby,
  Coffee,
  Bed,
  Smile,
  Gift,
  Info,
  HelpCircle,
} from 'lucide-react';

export const relationshipQuestions: Question[] = [
  {
    worldId: 'RELATIONSHIP',
    id: 'relationship_core_meaning_revised',
    category: 'relationship',
    subcategory: 'core_expectations',
    type: 'multiSelect',
    depth: 'BASIC',
    isRequired: false,
    options: [
      { value: 'deep_emotional_connection', icon: <Heart /> },
      { value: 'friendship_support', icon: <Users /> },
      { value: 'commitment_security', icon: <Link /> },
      { value: 'shared_growth', icon: <Sparkles /> },
      { value: 'building_home_family', icon: <Home /> },
    ],
    minSelections: 1,
    maxSelections: 2,
    metadata: { estimatedTime: 1 },
  },
  {
    worldId: 'RELATIONSHIP',
    id: 'relationship_key_feelings_from_partner_revised',
    category: 'relationship',
    subcategory: 'core_expectations',
    type: 'multiSelectWithOther',
    depth: 'BASIC',
    isRequired: false,
    options: [
      { value: 'support_understanding', icon: <HandHeart /> },
      { value: 'appreciation_respect', icon: <Award /> },
      { value: 'security_trust', icon: <ShieldCheck /> },
      { value: 'desire_attraction', icon: <Sparkles /> },
      { value: 'lightness_fun', icon: <Smile /> },
      { value: 'intellectual_partnership', icon: <Brain /> },
    ],
    minSelections: 1,
    maxSelections: 3,
    metadata: { estimatedTime: 1 },
  },
  {
    worldId: 'RELATIONSHIP',
    id: 'relationship_love_languages',
    category: 'relationship',
    subcategory: 'core_expectations',
    type: 'multiSelect',
    depth: 'BASIC',
    isRequired: false,
    minSelections: 1,
    maxSelections: 2,
    options: [
      { value: 'words_of_affirmation' },
      { value: 'quality_time' },
      { value: 'physical_touch' },
      { value: 'acts_of_service' },
      { value: 'receiving_gifts' },
    ],
    metadata: { estimatedTime: 1 },
  },
  {
    worldId: 'RELATIONSHIP',
    id: 'relationship_communication_ideal_revised',
    category: 'relationship',
    subcategory: 'communication_intimacy',
    type: 'iconChoice',
    depth: 'BASIC',
    isRequired: false,
    options: [
      { value: 'openness_directness', icon: <MessageCircle /> },
      { value: 'sensitivity_empathy', icon: <Heart /> },
      { value: 'solution_focused', icon: <Brain /> },
      { value: 'balance', icon: <Scale /> },
    ],
    metadata: { estimatedTime: 1 },
  },
  {
    worldId: 'RELATIONSHIP',
    id: 'relationship_handling_partner_disappointment_revised',
    category: 'relationship',
    subcategory: 'communication_intimacy',
    type: 'iconChoice',
    depth: 'ADVANCED',
    isRequired: false,
    options: [
      { value: 'withdraw_process', icon: <Moon /> },
      { value: 'immediate_talk', icon: <MessageCircle /> },
      { value: 'suppression', icon: <ShieldCheck /> },
      { value: 'logical_analysis', icon: <Brain /> },
      { value: 'not_sure', icon: <HelpCircle /> },
    ],
    metadata: { estimatedTime: 1 },
  },
  {
    worldId: 'RELATIONSHIP',
    id: 'relationship_repair_mechanism',
    category: 'relationship',
    subcategory: 'communication_intimacy',
    type: 'iconChoice',
    depth: 'ADVANCED',
    isRequired: false,
    options: [
      { value: 'processing_talk', icon: <MessageCircle /> },
      { value: 'hug_move_on', icon: <HandHeart /> },
      { value: 'time_out', icon: <Clock /> },
      { value: 'change_of_scenery', icon: <Sparkles /> },
    ],
    metadata: { estimatedTime: 1 },
  },
  {
    worldId: 'RELATIONSHIP',
    id: 'relationship_meaningful_apology',
    category: 'relationship',
    subcategory: 'communication_intimacy',
    type: 'iconChoice',
    depth: 'ADVANCED',
    isRequired: false,
    options: [
      { value: 'express_remorse', icon: <Heart /> },
      { value: 'take_responsibility', icon: <ShieldCheck /> },
      { value: 'offer_to_fix', icon: <Target /> },
      { value: 'saying_sorry', icon: <MessageCircle /> },
    ],
    metadata: { estimatedTime: 1 },
  },
  {
    worldId: 'RELATIONSHIP',
    id: 'relationship_silent_treatment_view',
    category: 'relationship',
    subcategory: 'communication_intimacy',
    type: 'scale',
    depth: 'ADVANCED',
    isRequired: false,
    min: 1,
    max: 10,
    metadata: { estimatedTime: 1 },
  },
  {
    worldId: 'RELATIONSHIP',
    id: 'relationship_partner_bad_day',
    category: 'relationship',
    subcategory: 'daily_life_partnership',
    type: 'iconChoice',
    depth: 'ADVANCED',
    isRequired: false,
    options: [
      { value: 'listen_contain', icon: <Heart /> },
      { value: 'analyze_solve', icon: <Brain /> },
      { value: 'give_space', icon: <Home /> },
      { value: 'distract', icon: <Sparkles /> },
    ],
    metadata: { estimatedTime: 1 },
  },
  {
    worldId: 'RELATIONSHIP',
    id: 'relationship_household_philosophy',
    category: 'relationship',
    subcategory: 'daily_life_partnership',
    type: 'openText',
    depth: 'BASIC',
    isRequired: false,
    minLength: 40,
    maxLength: 400,
    metadata: { estimatedTime: 2 },
  },
  {
    worldId: 'RELATIONSHIP',
    id: 'relationship_daily_togetherness_vs_autonomy_revised',
    category: 'relationship',
    subcategory: 'daily_life_partnership',
    type: 'scale',
    depth: 'BASIC',
    isRequired: false,
    min: 1,
    max: 10,
    metadata: { estimatedTime: 1 },
  },
  {
    worldId: 'RELATIONSHIP',
    id: 'relationship_role_in_growth',
    category: 'relationship',
    subcategory: 'growth_challenges',
    type: 'scale',
    depth: 'EXPERT',
    isRequired: false,
    min: 1,
    max: 10,
    metadata: { estimatedTime: 1 },
  },
  {
    worldId: 'RELATIONSHIP',
    id: 'relationship_celebrating_success',
    category: 'relationship',
    subcategory: 'daily_life_partnership',
    type: 'openText',
    depth: 'ADVANCED',
    isRequired: false,
    minLength: 30,
    maxLength: 300,
    metadata: { estimatedTime: 2 },
  },
  {
    worldId: 'RELATIONSHIP',
    id: 'relationship_family_vision_children_revised',
    category: 'relationship',
    subcategory: 'family_future_vision',
    type: 'iconChoice',
    depth: 'BASIC',
    isRequired: false,
    options: [
      { value: 'central_part', icon: <Baby /> },
      { value: 'see_myself_as_parent', icon: <Home /> },
      { value: 'open_but_not_essential', icon: <Scale /> },
      { value: 'less_relevant', icon: <Heart /> },
    ],
    metadata: { estimatedTime: 1 },
  },
  {
    worldId: 'RELATIONSHIP',
    id: 'relationship_deal_breaker_summary_final_revised',
    category: 'relationship',
    subcategory: 'growth_challenges',
    type: 'openText',
    depth: 'EXPERT',
    isRequired: false,
    minLength: 50,
    maxLength: 400,
    metadata: { estimatedTime: 2 },
  },
  {
    worldId: 'RELATIONSHIP',
    id: 'relationship_dating_journey_reflection',
    category: 'relationship',
    subcategory: 'growth_challenges',
    type: 'iconChoice',
    depth: 'ADVANCED',
    isRequired: false,
    options: [
      { value: 'new_to_process', icon: <Sparkles /> },
      { value: 'some_experience', icon: <Map /> },
      { value: 'long_journey', icon: <Clock /> },
      { value: 'taking_a_break', icon: <Moon /> },
    ],
    metadata: { estimatedTime: 1 },
  },
  {
    worldId: 'RELATIONSHIP',
    id: 'relationship_dating_journey_lesson',
    category: 'relationship',
    subcategory: 'growth_challenges',
    type: 'openText',
    depth: 'EXPERT',
    isRequired: false,
    minLength: 50,
    maxLength: 500,
    metadata: { estimatedTime: 3 },
  },
];
--- End of Content for relationshipQuestions.tsx ---

================================================================================
Directory: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\questionnaire\questions\religion
================================================================================

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\questionnaire\questions\religion\faithQuestions.tsx
--------------------------------------------------------------------------------
Content:
// src/components/questionnaire/questions/religion/faithQuestions.tsx - (גרסה מתוקנת)
import { Question } from '../../types/types';

export const faithQuestions: Question[] = [
  // Spiritual and Religious Values
  {
    worldId: 'RELIGION',
    id: 'spiritualMoment',
    category: 'values',
    subcategory: 'spiritual',
    question: 'מהו הרגע הכי רוחני שחווית בחייך?',
    type: 'openText',
    depth: 'BASIC',
    isRequired: false,
    placeholder: 'ספר/י על חוויה משמעותית...',
    minLength: 20,
    maxLength: 500,
  },
  {
    worldId: 'RELIGION',
    id: 'favoriteHoliday',
    category: 'values',
    subcategory: 'spiritual',
    question: 'איזה חג יהודי הכי משמעותי עבורך?',
    type: 'singleChoice',
    depth: 'BASIC',
    isRequired: false,
    options: [
      { value: 'ראש השנה', text: 'ראש השנה' },
      { value: 'יום כיפור', text: 'יום כיפור' },
      { value: 'פסח', text: 'פסח' },
      { value: 'שבועות', text: 'שבועות' },
    ],
  },

  // Personal Values
  {
    worldId: 'RELIGION',
    id: 'coreValues',
    category: 'values',
    subcategory: 'personal',
    question: 'מהם שלושת הערכים החשובים ביותר בחייך?',
    type: 'multiSelect',
    depth: 'BASIC',
    isRequired: false,
    options: [
      { value: 'יושר ואמת', text: 'יושר ואמת' },
      { value: 'משפחה', text: 'משפחה' },
      { value: 'לימוד והתפתחות', text: 'לימוד והתפתחות' },
      { value: 'חסד', text: 'חסד' },
      { value: 'מסורת', text: 'מסורת' },
      { value: 'הצלחה', text: 'הצלחה' },
    ],
    minSelections: 1,
    maxSelections: 3,
  },
  {
    worldId: 'RELIGION',
    id: 'lifeGoals',
    category: 'values',
    subcategory: 'personal',
    question: 'מהי המטרה העיקרית שלך בחיים?',
    type: 'openText',
    depth: 'ADVANCED',
    isRequired: false,
    placeholder: 'שתף/י במטרות החיים שלך...',
    minLength: 30,
    maxLength: 500,
  },

  // Community Values
  {
    worldId: 'RELIGION',
    id: 'communityRole',
    category: 'values',
    subcategory: 'community',
    question: 'איזה תפקיד אתה רואה לעצמך בקהילה?',
    type: 'multiSelect',
    depth: 'BASIC',
    isRequired: false,
    options: [
      { value: 'מנהיג/מוביל', text: 'מנהיג/מוביל' },
      { value: 'תומך ומסייע', text: 'תומך ומסייע' },
      { value: 'מחנך/מלמד', text: 'מחנך/מלמד' },
      { value: 'משתתף פעיל', text: 'משתתף פעיל' },
    ],
    minSelections: 1,
    maxSelections: 2,
  },
  {
    worldId: 'RELIGION',
    id: 'givingPhilosophy',
    category: 'values',
    subcategory: 'community',
    question: 'מהי תפיסת עולמך בנושא נתינה וצדקה?',
    type: 'openText',
    depth: 'ADVANCED',
    isRequired: false,
    placeholder: 'תאר/י את גישתך לנתינה...',
    minLength: 30,
    maxLength: 500,
  },

  // Future Values
  {
    worldId: 'RELIGION',
    id: 'nextGeneration',
    category: 'values',
    subcategory: 'future',
    question: 'מה הערכים החשובים ביותר שתרצה להעביר לדור הבא?',
    type: 'multiSelect',
    depth: 'EXPERT',
    isRequired: false,
    options: [
      { value: 'תורה ומסורת', text: 'תורה ומסורת' },
      { value: 'מוסר וערכים', text: 'מוסר וערכים' },
      { value: 'חינוך והשכלה', text: 'חינוך והשכלה' },
      { value: 'עצמאות', text: 'עצמאות' },
      { value: 'קהילתיות', text: 'קהילתיות' },
    ],
    minSelections: 1,
    maxSelections: 3,
  },
  {
    worldId: 'RELIGION',
    id: 'israelVision',
    category: 'values',
    subcategory: 'future',
    question: 'מהו החזון שלך למדינת ישראל?',
    type: 'openText',
    depth: 'EXPERT',
    isRequired: false,
    placeholder: 'שתף/י את חזונך...',
    minLength: 50,
    maxLength: 1000,
  },
];
--- End of Content for faithQuestions.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\questionnaire\questions\religion\practicalReligionQuestions.tsx
--------------------------------------------------------------------------------
Content:
// src/components/questionnaire/questions/religion/practicalReligionQuestions.tsx - (גרסה מתוקנת)
import { Question } from "../../types/types";

export const practicalQuestions: Question[] = [
  // Basic Principles
  {worldId: "RELIGION",
    id: "religiousWorldview",
    category: "religiousLifestyle",
    subcategory: "basicPrinciples",
    question: "מהי השקפת עולמך הדתית?",
    type: "openText",
    depth: "BASIC",
    isRequired: false,
    placeholder: "תאר/י את תפיסת עולמך הדתית...",
    minLength: 20,
    maxLength: 500,
  },
  {worldId: "RELIGION",
    id: "religiousIdentity",
    category: "religiousLifestyle",
    subcategory: "basicPrinciples",
    question: "איך אתה מגדיר את זהותך הדתית?",
    type: "singleChoice",
    depth: "BASIC",
    isRequired: false,
    options: [
      { value: "חרדי", text: "חרדי" },
      { value: "דתי לאומי", text: "דתי לאומי" },
      { value: "מסורתי", text: "מסורתי" },
      { value: "אחר", text: "אחר" },
    ],
  },
  {worldId: "RELIGION",
    id: "halachaImportance",
    category: "religiousLifestyle",
    subcategory: "basicPrinciples",
    question: "מה מקומה של ההלכה בחיי היומיום שלך?",
    type: "openText",
    depth: "BASIC",
    isRequired: false,
    placeholder: "תאר/י את מקום ההלכה בחייך...",
    minLength: 20,
    maxLength: 500,
  },

  // Prayer and Learning
  {worldId: "RELIGION",
    id: "minyanImportance",
    category: "religiousLifestyle",
    subcategory: "prayerAndLearning",
    question: "מהי חשיבות התפילה במניין בחייך?",
    type: "singleChoice",
    depth: "BASIC",
    isRequired: false,
    options: [
      { value: "חשוב מאוד - משתדל להתפלל כל תפילה במניין", text: "חשוב מאוד - משתדל להתפלל כל תפילה במניין" },
      { value: "חשוב - משתדל לפחות פעם ביום", text: "חשוב - משתדל לפחות פעם ביום" },
      { value: "לעיתים - בעיקר בשבתות וחגים", text: "לעיתים - בעיקר בשבתות וחגים" },
      { value: "פחות חשוב לי", text: "פחות חשוב לי" },
    ],
  },
  {worldId: "RELIGION",
    id: "dailyLearning",
    category: "religiousLifestyle",
    subcategory: "prayerAndLearning",
    question: "איך נראה סדר הלימוד היומי שלך?",
    type: "multiSelect",
    depth: "BASIC",
    isRequired: false,
    options: [
      { value: "דף יומי", text: "דף יומי" },
      { value: "הלכה יומית", text: "הלכה יומית" },
      { value: "פרשת שבוע", text: "פרשת שבוע" },
      { value: "חסידות", text: "חסידות" },
      { value: "מוסר", text: "מוסר" },
      { value: "אחר", text: "אחר" },
    ],
    minSelections: 1,
    maxSelections: 4,
  },
  
  // Shabbat and Holidays
  {worldId: "RELIGION",
    id: "idealShabbat",
    category: "religiousLifestyle",
    subcategory: "shabbatAndHolidays",
    question: "איך נראית השבת האידיאלית בעיניך?",
    type: "openText",
    depth: "BASIC",
    isRequired: false,
    placeholder: "תאר/י את השבת המושלמת עבורך...",
    minLength: 20,
    maxLength: 500,
  },
  {worldId: "RELIGION",
    id: "shabbatRestrictions",
    category: "religiousLifestyle",
    subcategory: "shabbatAndHolidays",
    question: "מה יחסך לחומרות בהלכות שבת?",
    type: "multiSelect",
    depth: "ADVANCED",
    isRequired: false,
    options: [
      { value: "מחמיר בהלכות שבת", text: "מחמיר בהלכות שבת" },
      { value: "שומר על ההלכות הבסיסיות", text: "שומר על ההלכות הבסיסיות" },
      { value: "גמיש יותר בפרשנות", text: "גמיש יותר בפרשנות" },
      { value: "תלוי במצב ובנסיבות", text: "תלוי במצב ובנסיבות" },
    ],
    minSelections: 1,
    maxSelections: 2,
  },

  // Kashrut and Halacha
  {worldId: "RELIGION",
    id: "kashrutLevel",
    category: "religiousLifestyle",
    subcategory: "kashrutAndHalacha",
    question: "מה רמת ההקפדה שלך בכשרות?",
    type: "singleChoice",
    depth: "BASIC",
    isRequired: false,
    options: [
      { value: "מהדרין בלבד", text: "מהדרין בלבד" },
      { value: "כשרות רגילה", text: "כשרות רגילה" },
      { value: "כשרות בסיסית", text: "כשרות בסיסית" },
      { value: "גמיש יותר", text: "גמיש יותר" },
    ],
  },
  {worldId: "RELIGION",
    id: "eatingOut",
    category: "religiousLifestyle",
    subcategory: "kashrutAndHalacha",
    question: "איך אתה מתייחס לאכילה מחוץ לבית?",
    type: "multiSelect",
    depth: "BASIC",
    isRequired: false,
    options: [
      { value: "רק במסעדות כשרות", text: "רק במסעדות כשרות" },
      { value: "אוכל בבתים של משפחה", text: "אוכל בבתים של משפחה" },
      { value: "אוכל אצל חברים", text: "אוכל אצל חברים" },
      { value: "גמיש בהתאם לנסיבות", text: "גמיש בהתאם לנסיבות" },
    ],
    minSelections: 1,
    maxSelections: 3,
  },

  // Modesty and Public Space
  {worldId: "RELIGION",
    id: "modestyView",
    category: "religiousLifestyle",
    subcategory: "modestyAndPublic",
    question: "מהי השקפתך בענייני צניעות?",
    type: "openText",
    depth: "BASIC",
    isRequired: false,
    placeholder: "תאר/י את תפיסתך בנושא צניעות...",
    minLength: 20,
    maxLength: 500,
  },
  {worldId: "RELIGION",
    id: "genderSeparation",
    category: "religiousLifestyle",
    subcategory: "modestyAndPublic",
    question: "איך אתה מתייחס להפרדה בין גברים לנשים?",
    type: "singleChoice",
    depth: "ADVANCED",
    isRequired: false,
    options: [
      { value: "תומך בהפרדה מלאה", text: "תומך בהפרדה מלאה" },
      { value: "תלוי בנסיבות ובמקום", text: "תלוי בנסיבות ובמקום" },
      { value: "גמיש יותר בנושא", text: "גמיש יותר בנושא" },
      { value: "מתנגד להפרדה", text: "מתנגד להפרדה" },
    ],
  },
];
--- End of Content for practicalReligionQuestions.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\questionnaire\questions\religion\religionQuestions.tsx
--------------------------------------------------------------------------------
Content:
// src/components/questionnaire/questions/religion/religionQuestions.tsx
import { Question } from '../../types/types';
import {
  Scroll,
  BookOpen,
  Users,
  Home,
  Target,
  Scale,
  Heart,
  Sparkles,
  ShieldCheck,
  Flag,
  X,
  HandHeart,
  Lightbulb,
  Info,
  PocketKnife,
  Bed,
  Smile,
  Brain,
} from 'lucide-react';

export const religionQuestions: Question[] = [
  {
    worldId: 'RELIGION',
    id: 'religion_core_feeling_of_faith',
    category: 'religion',
    subcategory: 'identity_belief',
    type: 'iconChoice',
    depth: 'BASIC',
    isRequired: false,
    options: [
      { value: 'security_stability', icon: <ShieldCheck /> },
      { value: 'meaning_belonging', icon: <Target /> },
      { value: 'joy_gratitude', icon: <Sparkles /> },
      { value: 'challenge_growth', icon: <Brain /> },
    ],
    metadata: { estimatedTime: 1 },
  },
  {
    worldId: 'RELIGION',
    id: 'religion_my_personal_prayer',
    category: 'religion',
    subcategory: 'personal_reflection',
    type: 'openText',
    depth: 'EXPERT',
    isRequired: false,
    minLength: 30,
    maxLength: 300,
    metadata: { estimatedTime: 2 },
  },
  {
    worldId: 'RELIGION',
    id: 'religion_rabbinic_guidance_role_revised',
    category: 'religion',
    subcategory: 'identity_belief',
    type: 'scale',
    depth: 'BASIC',
    isRequired: false,
    min: 1,
    max: 10,
    metadata: { estimatedTime: 1 },
  },
  {
    worldId: 'RELIGION',
    id: 'religion_shabbat_experience',
    category: 'religion',
    subcategory: 'practical_observance',
    type: 'iconChoice',
    depth: 'ADVANCED',
    isRequired: false,
    options: [
      { value: 'family_time', icon: <Home /> },
      { value: 'spiritual_ascension', icon: <BookOpen /> },
      { value: 'rest_recharge', icon: <Bed /> },
      { value: 'community_social', icon: <Users /> },
    ],
    metadata: { estimatedTime: 1 },
  },
  {
    worldId: 'RELIGION',
    id: 'religion_daily_spiritual_connection',
    category: 'religion',
    subcategory: 'practical_observance',
    type: 'multiSelect',
    depth: 'ADVANCED',
    isRequired: false,
    minSelections: 1,
    maxSelections: 3,
    options: [
      { value: 'torah_study' },
      { value: 'personal_prayer' },
      { value: 'nature_gratitude' },
      { value: 'acts_of_kindness' },
      { value: 'song_music' },
    ],
    metadata: { estimatedTime: 1 },
  },
  {
    worldId: 'RELIGION',
    id: 'religion_kashrut_observance_details_revised',
    category: 'religion',
    subcategory: 'practical_observance',
    type: 'openText',
    depth: 'ADVANCED',
    isRequired: false,
    minLength: 40,
    maxLength: 400,
    metadata: { estimatedTime: 1 },
  },
  {
    worldId: 'RELIGION',
    id: 'religion_modesty_personal_approach_revised',
    category: 'religion',
    subcategory: 'practical_observance',
    type: 'openText',
    depth: 'ADVANCED',
    isRequired: false,
    minLength: 40,
    maxLength: 400,
    metadata: { estimatedTime: 1 },
  },
  {
    worldId: 'RELIGION',
    id: 'religion_secular_culture_scenario',
    category: 'religion',
    subcategory: 'community_influence',
    type: 'iconChoice',
    depth: 'ADVANCED',
    isRequired: false,
    options: [
      { value: 'avoid', icon: <X /> },
      { value: 'filter_check', icon: <Info /> },
      { value: 'social_inclusion', icon: <Users /> },
      { value: 'suggest_alternative', icon: <Smile /> },
    ],
    metadata: { estimatedTime: 1 },
  },
  {
    worldId: 'RELIGION',
    id: 'religion_general_culture_consumption',
    category: 'religion',
    subcategory: 'community_influence',
    type: 'scale',
    depth: 'ADVANCED',
    isRequired: false,
    min: 1,
    max: 10,
    metadata: { estimatedTime: 1 },
  },
  {
    worldId: 'RELIGION',
    id: 'religion_doubts_and_struggles',
    category: 'religion',
    subcategory: 'identity_belief',
    type: 'openText',
    depth: 'EXPERT',
    isRequired: false,
    minLength: 40,
    maxLength: 400,
    metadata: { estimatedTime: 2 },
  },
  {
    worldId: 'RELIGION',
    id: 'religion_partner_ideal_religious_profile_revised',
    category: 'religion',
    subcategory: 'relationship_family',
    type: 'openText',
    depth: 'BASIC',
    isRequired: false,
    minLength: 40,
    maxLength: 400,
    metadata: { estimatedTime: 2 },
  },
  {
    worldId: 'RELIGION',
    id: 'religion_flexibility_religious_differences_partner_revised',
    category: 'religion',
    subcategory: 'relationship_family',
    type: 'scale',
    depth: 'ADVANCED',
    isRequired: false,
    min: 1,
    max: 10,
    metadata: { estimatedTime: 1 },
  },
  {
    worldId: 'RELIGION',
    id: 'religion_gender_roles_philosophy',
    category: 'religion',
    subcategory: 'relationship_family',
    type: 'budgetAllocation',
    depth: 'EXPERT',
    isRequired: false,
    totalPoints: 100,
    categories: [
      { value: 'traditional', icon: <Scroll /> },
      { value: 'egalitarian', icon: <Scale /> },
      { value: 'flexible', icon: <Sparkles /> },
    ],
    metadata: { estimatedTime: 2 },
  },
  {
    worldId: 'RELIGION',
    id: 'religion_children_education_religious_vision_revised',
    category: 'religion',
    subcategory: 'relationship_family',
    type: 'openText',
    depth: 'ADVANCED',
    isRequired: false,
    minLength: 50,
    maxLength: 500,
    metadata: { estimatedTime: 2 },
  },
];
--- End of Content for religionQuestions.tsx ---

================================================================================
Directory: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\questionnaire\questions\values
================================================================================

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\questionnaire\questions\values\valuesQuestions.tsx
--------------------------------------------------------------------------------
Content:
// src/components/questionnaire/questions/values/valuesQuestions.tsx
import { Question } from '../../types/types';
import {
  Heart,
  Scale,
  Brain,
  BookOpen,
  Users,
  Home,
  Briefcase,
  Target,
  PiggyBank,
  HandHeart,
  TrendingUp,
  Leaf,
  Sparkles,
  ShieldCheck,
  Flag,
  HelpCircle,
  Info,
  Scroll,
  DollarSign,
  Activity,
  MessageCircle,
} from 'lucide-react';

export const valuesQuestions: Question[] = [
  {
    worldId: 'VALUES',
    id: 'values_core_identification_revised',
    category: 'values',
    subcategory: 'core_values',
    type: 'budgetAllocation',
    depth: 'BASIC',
    isRequired: false,
    totalPoints: 100,
    categories: [
      { value: 'family_connections', icon: <Heart /> },
      { value: 'integrity_honesty', icon: <ShieldCheck /> },
      { value: 'spirituality_faith', icon: <BookOpen /> },
      { value: 'personal_growth', icon: <TrendingUp /> },
      { value: 'giving_contribution', icon: <HandHeart /> },
      { value: 'career_fulfillment', icon: <Briefcase /> },
      { value: 'financial_security', icon: <PiggyBank /> },
      { value: 'creativity_expression', icon: <Sparkles /> },
    ],
    metadata: { estimatedTime: 3 },
  },
  {
    worldId: 'VALUES',
    id: 'values_core_elaboration_revised',
    category: 'values',
    subcategory: 'core_values',
    type: 'openText',
    depth: 'ADVANCED',
    isRequired: false,
    minLength: 70,
    maxLength: 600,
    metadata: { estimatedTime: 3 },
  },
  {
    worldId: 'VALUES',
    id: 'values_childhood_home_atmosphere',
    category: 'values',
    subcategory: 'core_values',
    type: 'openText',
    depth: 'ADVANCED',
    isRequired: false,
    minLength: 10,
    maxLength: 150,
    metadata: { estimatedTime: 1 },
  },
  {
    worldId: 'VALUES',
    id: 'values_quiet_heroes',
    category: 'values',
    subcategory: 'core_values',
    type: 'openText',
    depth: 'ADVANCED',
    isRequired: false,
    minLength: 40,
    maxLength: 400,
    metadata: { estimatedTime: 2 },
  },
  {
    worldId: 'VALUES',
    id: 'values_childhood_shaping_experience',
    category: 'values',
    subcategory: 'core_values',
    type: 'multiSelect',
    depth: 'ADVANCED',
    isRequired: false,
    minSelections: 1,
    maxSelections: 3,
    options: [
      { value: 'financial_struggle_or_abundance', icon: <DollarSign /> },
      { value: 'parental_relationship_dynamics', icon: <Home /> },
      { value: 'social_challenges_school', icon: <Users /> },
      { value: 'health_or_loss_experiences', icon: <Heart /> },
      { value: 'academic_pressure_or_freedom', icon: <BookOpen /> },
      { value: 'religious_environment_strict_or_open', icon: <Scroll /> },
    ],
    metadata: { estimatedTime: 2 },
  },
  {
    worldId: 'VALUES',
    id: 'values_strength_from_challenge',
    category: 'values',
    subcategory: 'core_values',
    type: 'openText',
    depth: 'EXPERT',
    isRequired: false,
    minLength: 50,
    maxLength: 500,
    metadata: { estimatedTime: 3 },
  },

  {
    worldId: 'VALUES',
    id: 'values_two_job_offers',
    category: 'values',
    subcategory: 'life_priorities',
    type: 'scenario',
    depth: 'EXPERT',
    isRequired: false,
    options: [{ value: 'offer_a' }, { value: 'offer_b' }],
    metadata: { estimatedTime: 2 },
  },
  {
    worldId: 'VALUES',
    id: 'values_life_priorities_allocation_revised',
    category: 'values',
    subcategory: 'life_priorities',
    type: 'budgetAllocation',
    depth: 'ADVANCED',
    isRequired: false,
    totalPoints: 100,
    categories: [
      { value: 'relationship', icon: <Heart /> },
      { value: 'family', icon: <Home /> },
      { value: 'career', icon: <Briefcase /> },
      { value: 'spirituality', icon: <BookOpen /> },
      { value: 'community', icon: <Users /> },
      { value: 'leisure', icon: <Sparkles /> },
    ],
    metadata: { estimatedTime: 4 },
  },
  {
    worldId: 'VALUES',
    id: 'values_health_lifestyle_importance',
    category: 'values',
    subcategory: 'life_priorities',
    type: 'scale',
    depth: 'BASIC',
    isRequired: false,
    min: 1,
    max: 10,
    metadata: { estimatedTime: 1 },
  },
  {
    worldId: 'VALUES',
    id: 'values_feeling_of_home',
    category: 'values',
    subcategory: 'community_social',
    type: 'openText',
    depth: 'ADVANCED',
    isRequired: false,
    minLength: 30,
    maxLength: 300,
    metadata: { estimatedTime: 2 },
  },
  {
    worldId: 'VALUES',
    id: 'values_definition_of_rich_life',
    category: 'values',
    subcategory: 'material_intellectual',
    type: 'openText',
    depth: 'ADVANCED',
    isRequired: false,
    minLength: 40,
    maxLength: 400,
    metadata: { estimatedTime: 2 },
  },
  {
    worldId: 'VALUES',
    id: 'values_attitude_towards_money_revised',
    category: 'values',
    subcategory: 'material_intellectual',
    type: 'iconChoice',
    depth: 'BASIC',
    isRequired: false,
    options: [
      { value: 'security_tool', icon: <PiggyBank /> },
      { value: 'means_for_experiences', icon: <Sparkles /> },
      { value: 'balance_responsibility', icon: <Scale /> },
      { value: 'simplicity', icon: <Leaf /> },
    ],
    metadata: { estimatedTime: 1 },
  },
  {
    worldId: 'VALUES',
    id: 'values_definition_of_success',
    category: 'values',
    subcategory: 'material_intellectual',
    type: 'openText',
    depth: 'ADVANCED',
    isRequired: false,
    minLength: 40,
    maxLength: 400,
    metadata: { estimatedTime: 2 },
  },
  {
    worldId: 'VALUES',
    id: 'values_lost_wallet',
    category: 'values',
    subcategory: 'core_values',
    type: 'openText',
    depth: 'BASIC',
    isRequired: false,
    minLength: 30,
    maxLength: 300,
    metadata: { estimatedTime: 2 },
  },
  {
    worldId: 'VALUES',
    id: 'values_giving_tzedaka_importance_revised',
    category: 'values',
    subcategory: 'material_intellectual',
    type: 'scale',
    depth: 'BASIC',
    isRequired: false,
    min: 1,
    max: 10,
    metadata: { estimatedTime: 1 },
  },
  {
    worldId: 'VALUES',
    id: 'values_education_pursuit_revised',
    category: 'values',
    subcategory: 'material_intellectual',
    type: 'iconChoice',
    depth: 'BASIC',
    isRequired: false,
    options: [
      { value: 'lifelong_learning', icon: <BookOpen /> },
      { value: 'goal_oriented_learning', icon: <Target /> },
      { value: 'experiential_learning', icon: <Sparkles /> },
      { value: 'appreciative_but_passive', icon: <Scale /> },
    ],
    metadata: { estimatedTime: 1 },
  },
  {
    worldId: 'VALUES',
    id: 'values_parents_tradition_conflict',
    category: 'values',
    subcategory: 'challenges_conflicts',
    type: 'openText',
    depth: 'EXPERT',
    isRequired: false,
    minLength: 50,
    maxLength: 500,
    metadata: { estimatedTime: 3 },
  },
  {
    worldId: 'VALUES',
    id: 'values_social_political_stance_importance_partner_revised',
    category: 'values',
    subcategory: 'community_social',
    type: 'scale',
    depth: 'ADVANCED',
    isRequired: false,
    min: 1,
    max: 10,
    metadata: { estimatedTime: 1 },
  },
  {
    worldId: 'VALUES',
    id: 'values_dealing_with_disagreement_partner_revised',
    category: 'values',
    subcategory: 'challenges_conflicts',
    type: 'iconChoice',
    depth: 'ADVANCED',
    isRequired: false,
    options: [
      { value: 'discussion_understanding', icon: <MessageCircle /> },
      { value: 'finding_common_ground', icon: <Brain /> },
      { value: 'seeking_compromise', icon: <Scale /> },
      { value: 'agree_to_disagree', icon: <Heart /> },
    ],
    metadata: { estimatedTime: 1 },
  },
  {
    worldId: 'VALUES',
    id: 'values_non_negotiable_for_partner_revised',
    category: 'values',
    subcategory: 'summary_future',
    type: 'openText',
    depth: 'ADVANCED',
    isRequired: false,
    minLength: 30,
    maxLength: 300,
    metadata: { estimatedTime: 2 },
  },
];
--- End of Content for valuesQuestions.tsx ---

================================================================================
Directory: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\questionnaire\types
================================================================================

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\questionnaire\types\types.ts
--------------------------------------------------------------------------------
Content:
// src/components/questionnaire/types/types.ts

// Basic type definitions
export type WorldId =
  | 'VALUES'
  | 'RELATIONSHIP'
  | 'PERSONALITY'
  | 'PARTNER'
  | 'RELIGION';

export type QuestionType =
  | 'singleChoice'
  | 'multiChoice'
  | 'multiSelect'
  | 'openText'
  | 'scale'
  | 'iconChoice'
  | 'budgetAllocation'
  | 'ranking'
  | 'scenario'
  | 'multiSelectWithOther';

export type QuestionDepth = 'BASIC' | 'ADVANCED' | 'EXPERT';

export type AnswerValue =
  | string
  | number
  | string[]
  | number[]
  | Record<string, number>
  | undefined;

export type AnswerStatus = 'COMPLETE' | 'PARTIAL' | 'SKIPPED';

// --- UPDATED INTERFACES ---

export interface Option {
  value: string; // This is the key for the dictionary
  icon?: React.ReactNode;
  text?: string; // Re-added as optional
  description?: string; // Re-added as optional
  allowFreeText?: boolean;
  placeholder?: string;
}

export interface BudgetCategory {
  value: string; // The key for the dictionary
  label?: string; // Re-added as optional
  icon?: React.ReactNode;
  description?: string; // Re-added as optional
  min?: number;
  max?: number;
}

export interface QuestionMetadata {
  estimatedTime?: number;
  tags?: string[];
  helpText?: string; // Re-added as optional
}

export interface ScaleLabels {
  min: string;
  max: string;
  middle?: string;
}

export interface ScaleDescriptions {
  min?: string;
  max?: string;
  middle?: string;
  [key: number]: string;
}

export interface Question {
  worldId: string;
  id: string;
  category: string;
  subcategory?: string;
  question?: string; // Re-added as optional
  type: QuestionType;
  depth: QuestionDepth;
  isRequired?: boolean;
  options?: Option[];
  placeholder?: string; // Re-added as optional
  description?: string; // Re-added as optional
  minLength?: number;
  maxLength?: number;
  minSelections?: number;
  maxSelections?: number;
  min?: number;
  max?: number;
  step?: number;
  labels?: ScaleLabels;
  scaleDescriptions?: ScaleDescriptions;
  categories?: BudgetCategory[];
  totalPoints?: number;
  metadata?: QuestionMetadata;
  items?: Option[];
  icon?: React.ReactNode;
}

// --- Answer-related interfaces ---

export interface QuestionnaireAnswer {
  questionId: string;
  worldId: WorldId;
  value: AnswerValue;
  answeredAt: string;
  isVisible?: boolean;
  language?: 'en' | 'he';
}

export interface Answer extends QuestionnaireAnswer {
  status?: AnswerStatus;
}

// --- Component Props interfaces ---

export interface WorldComponentProps {
  onAnswer: (questionId: string, value: AnswerValue) => void;
  onComplete: () => void;
  onBack: () => void;
  answers: QuestionnaireAnswer[];
  isCompleted?: boolean;
  language?: string;
  currentQuestionIndex: number;
  setCurrentQuestionIndex: (index: number) => void;
}

export interface AnswerInputProps {
  question: Question;
  value?: AnswerValue;
  onChange?: (value: AnswerValue) => void;
  onClear?: () => void;
  language?: string;
  showValidation?: boolean;
  className?: string;
  validationError?: string;
}

export interface QuestionnaireLayoutProps {
  children: React.ReactNode;
  currentWorld: WorldId;
  completedWorlds: WorldId[];
  onWorldChange: (worldId: WorldId) => void;
  onExit?: () => void;
  language?: string;
  onSaveProgress?: () => Promise<void>;
  isLoggedIn?: boolean;
}

// --- Data storage interfaces ---

export interface QuestionnaireSubmission {
  userId: string;
  answers: QuestionnaireAnswer[];
  worldsCompleted: WorldId[];
  completed: boolean;
  startedAt: string;
  completedAt?: string;
}
--- End of Content for types.ts ---

================================================================================
Directory: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\questionnaire\worlds
================================================================================

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\questionnaire\worlds\WorldComponent.tsx
--------------------------------------------------------------------------------
Content:
// src/components/questionnaire/worlds/WorldComponent.tsx
import React, { useState, useEffect } from 'react';
import QuestionCard from '../common/QuestionCard';
import AnswerInput from '../common/AnswerInput';
import QuestionsList from '../common/QuestionsList';
import { Button } from '@/components/ui/button';
import { Progress } from '@/components/ui/progress';
import {
  ArrowLeft,
  ArrowRight,
  AlertCircle,
  CheckCircle,
  List,
  PanelLeftClose,
  PanelRightClose,
  ListChecks,
  CircleDot,
} from 'lucide-react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import {
  Sheet,
  SheetContent,
  SheetDescription,
  SheetHeader,
  SheetTitle,
  SheetTrigger,
} from '@/components/ui/sheet';
import type {
  AnswerValue,
  Question,
  WorldId,
  QuestionnaireAnswer,
} from '../types/types';
import { cn } from '@/lib/utils';
import { useMediaQuery } from '../hooks/useMediaQuery';
import { motion, AnimatePresence } from 'framer-motion';
import { useLanguage } from '@/app/[locale]/contexts/LanguageContext';
import type {
  WorldComponentDict,
  QuestionCardDict,
  AnswerInputDict,
  InteractiveScaleDict,
  QuestionsListDict,
  QuestionsDictionary,
} from '@/types/dictionary';

import { personalityQuestions } from '../questions/personality/personalityQuestions';
import { valuesQuestions } from '../questions/values/valuesQuestions';
import { relationshipQuestions } from '../questions/relationship/relationshipQuestions';
import { partnerQuestions } from '../questions/partner/partnerQuestions';
import { religionQuestions } from '../questions/religion/religionQuestions';

const worldConfig: Record<
  WorldId,
  {
    questions: Question[];
    themeColor: 'sky' | 'rose' | 'purple' | 'teal' | 'amber';
  }
> = {
  PERSONALITY: { questions: personalityQuestions, themeColor: 'sky' },
  VALUES: { questions: valuesQuestions, themeColor: 'rose' },
  RELATIONSHIP: { questions: relationshipQuestions, themeColor: 'purple' },
  PARTNER: { questions: partnerQuestions, themeColor: 'teal' },
  RELIGION: { questions: religionQuestions, themeColor: 'amber' },
};

// --- CORRECTED HELPER FUNCTION ---
const getQuestionWithText = (
  questionStructure: Question,
  dict: WorldComponentDynamicProps['dict']
): Question => {
  const qContent =
    dict.questions[questionStructure.worldId as WorldId]?.[
      questionStructure.id
    ];

  if (!qContent) {
    console.error(
      `Missing dictionary entry for question: ${questionStructure.id}`
    );
    return {
      ...questionStructure,
      question: `Error: Missing text for ${questionStructure.id}`,
    };
  }

  const optionsWithText = questionStructure.options?.map((opt) => {
    const optionContent = qContent.options?.[opt.value];
    if (typeof optionContent === 'string') {
      return { ...opt, text: optionContent };
    }
    if (typeof optionContent === 'object' && optionContent !== null) {
      return {
        ...opt,
        text: optionContent.text,
        description: optionContent.description,
      };
    }
    return { ...opt, text: opt.value };
  });

  const categoriesWithText = questionStructure.categories?.map((cat) => {
    const categoryContent = qContent.categories?.[cat.value];
    if (typeof categoryContent === 'string') {
      return { ...cat, label: categoryContent };
    }
    if (typeof categoryContent === 'object' && categoryContent !== null) {
      return {
        ...cat,
        label: categoryContent.label,
        description: categoryContent.description,
      };
    }
    return { ...cat, label: cat.value };
  });

  return {
    ...questionStructure,
    question: qContent.question,
    placeholder: qContent.placeholder,
    metadata: {
      ...questionStructure.metadata,
      helpText: qContent.helpText,
    },
    options: optionsWithText,
    categories: categoriesWithText,
    labels: qContent.labels || questionStructure.labels,
  };
};

interface WorldComponentDynamicProps {
  worldId: WorldId;
  onAnswer: (questionId: string, value: AnswerValue) => void;
  onVisibilityChange: (questionId: string, isVisible: boolean) => void;
  onComplete: () => void;
  onBack: () => void;
  answers: QuestionnaireAnswer[];
  currentQuestionIndex: number;
  setCurrentQuestionIndex: (index: number) => void;
  onSave?: () => void;
  isSaving?: boolean;
  isDirectNavigation?: boolean;
  dict: {
    world: WorldComponentDict;
    questionCard: QuestionCardDict;
    answerInput: AnswerInputDict;
    interactiveScale: InteractiveScaleDict;
    questionsList: QuestionsListDict;
    questions: QuestionsDictionary;
    worldLabels: Record<WorldId, string>;
  };
}

export default function WorldComponent({
  worldId,
  onAnswer,
  onVisibilityChange,
  onComplete,
  onBack,
  answers,
  currentQuestionIndex,
  setCurrentQuestionIndex,
  onSave,
  isSaving,
  isDirectNavigation = false,
  dict,
}: WorldComponentDynamicProps) {
  const [validationErrors, setValidationErrors] = useState<
    Record<string, string>
  >({});
  const isDesktop = useMediaQuery('(min-width: 1024px)');
  const [isListVisible, setIsListVisible] = useState(true);

  const { language } = useLanguage();
  const isRTL = language === 'he';

  const { questions: allQuestionsStructure, themeColor } = worldConfig[worldId];
  const allQuestions = allQuestionsStructure.map((qStruct) =>
    getQuestionWithText(qStruct, dict)
  );

  const title = dict.worldLabels[worldId];

  const findAnswer = (questionId: string): QuestionnaireAnswer | undefined => {
    return answers.find(
      (a) => a.questionId.toLowerCase() === questionId.toLowerCase()
    );
  };

  const validateAnswer = (
    question: Question,
    value: AnswerValue
  ): string | null => {
    const isValueEmpty =
      value === undefined ||
      value === null ||
      (typeof value === 'string' && value.trim() === '') ||
      (Array.isArray(value) && value.length === 0) ||
      (typeof value === 'object' &&
        !Array.isArray(value) &&
        Object.keys(value || {}).length === 0);
    if (question.isRequired && isValueEmpty) return 'נדרשת תשובה לשאלה זו';
    if (!question.isRequired && isValueEmpty) return null;
    switch (question.type) {
      case 'openText': {
        const textValue = value as string;
        const trimmedLength = textValue?.trim().length || 0;
        if (
          question.minLength &&
          trimmedLength < question.minLength &&
          question.isRequired
        )
          return `התשובה חייבת להכיל לפחות ${question.minLength} תווים`;
        if (question.maxLength && trimmedLength > question.maxLength)
          return `התשובה לא יכולה להכיל יותר מ-${question.maxLength} תווים`;
        break;
      }
      case 'multiSelect':
      case 'multiChoice':
      case 'multiSelectWithOther': {
        const selectedValues = value as string[] | undefined;
        const count = selectedValues?.length ?? 0;
        if (question.minSelections && count < question.minSelections)
          return `יש לבחור לפחות ${question.minSelections} אפשרויות`;
        if (question.maxSelections && count > question.maxSelections)
          return `ניתן לבחור עד ${question.maxSelections} אפשרויות`;
        break;
      }
      case 'budgetAllocation': {
        const allocationValue = value as Record<string, number> | undefined;
        if (allocationValue) {
          const totalAllocated = Object.values(allocationValue).reduce(
            (sum, val) => sum + (val || 0),
            0
          );
          if (
            question.totalPoints &&
            totalAllocated !== question.totalPoints &&
            question.isRequired
          )
            return `יש להקצות בדיוק ${question.totalPoints} נקודות.`;
        } else if (question.isRequired && !isValueEmpty)
          return 'נדרשת הקצאת תקציב.';
        break;
      }
    }
    return null;
  };

  const handleNext = () => {
    const currentQuestion = allQuestions[currentQuestionIndex];
    const value = findAnswer(currentQuestion.id)?.value;
    const error = validateAnswer(currentQuestion, value);
    if (error && currentQuestion.isRequired) {
      setValidationErrors({ ...validationErrors, [currentQuestion.id]: error });
      return;
    }
    setValidationErrors((prev) => ({ ...prev, [currentQuestion.id]: '' }));
    if (currentQuestionIndex < allQuestions.length - 1) {
      setCurrentQuestionIndex(currentQuestionIndex + 1);
    } else {
      const firstUnansweredRequired = allQuestions.find(
        (q) =>
          q.isRequired && validateAnswer(q, findAnswer(q.id)?.value) !== null
      );
      if (firstUnansweredRequired) {
        const errorIndex = allQuestions.findIndex(
          (q) => q.id === firstUnansweredRequired.id
        );
        if (errorIndex !== -1) {
          setCurrentQuestionIndex(errorIndex);
          setValidationErrors({
            ...validationErrors,
            [firstUnansweredRequired.id]:
              validateAnswer(
                firstUnansweredRequired,
                findAnswer(firstUnansweredRequired.id)?.value
              ) || 'נדרשת תשובה לשאלה זו',
          });
        }
      } else {
        onComplete();
      }
    }
  };

  const handlePrevious = () => {
    if (currentQuestionIndex > 0)
      setCurrentQuestionIndex(currentQuestionIndex - 1);
    else onBack();
  };

  const handleClearAnswer = (questionId: string) => {
    onAnswer(questionId, undefined);
  };

  if (allQuestions.length === 0) {
    return (
      <div className="p-4 bg-red-50 rounded-lg border border-red-300 text-red-800 text-center">
        <h3 className="font-bold text-lg mb-2">
          {dict.world.errors.loadingFailedTitle}
        </h3>
        <p>{dict.world.errors.loadingFailedDescription}</p>
        <Button className="mt-4" variant="outline" onClick={onBack}>
          {dict.world.buttons.backToMap}
        </Button>
      </div>
    );
  }

  const currentQuestion = allQuestions[currentQuestionIndex];
  if (!currentQuestion) {
    console.error(
      `Error: Invalid question index ${currentQuestionIndex} for ${worldId} World.`
    );
    setCurrentQuestionIndex(0);
    return <div>{dict.world.errors.invalidQuestion}</div>;
  }

  const progress = ((currentQuestionIndex + 1) / allQuestions.length) * 100;
  const currentAnswerObject = findAnswer(currentQuestion.id);
  const currentValue = currentAnswerObject?.value;

  const renderHeader = () => (
    <div className="bg-white p-3 rounded-lg shadow-sm border space-y-2 mb-6">
      <div className="flex items-center justify-between">
        <div>
          <h2 className="text-lg font-medium text-slate-800">{title}</h2>
          <div className="text-sm text-slate-500">
            {dict.world.header.questionLabel
              .replace('{{current}}', (currentQuestionIndex + 1).toString())
              .replace('{{total}}', allQuestions.length.toString())}
          </div>
        </div>
        <div className="flex items-center gap-2">
          {isDesktop && (
            <Button
              variant={isListVisible ? 'secondary' : 'outline'}
              size="sm"
              onClick={() => setIsListVisible(!isListVisible)}
              className="gap-2"
            >
              {isListVisible ? (
                isRTL ? (
                  <PanelRightClose className="h-4 w-4" />
                ) : (
                  <PanelLeftClose className="h-4 w-4" />
                )
              ) : (
                <List className="h-4 w-4" />
              )}
              {isListVisible
                ? dict.world.buttons.hideList
                : dict.world.buttons.showList}
            </Button>
          )}
          {!isDesktop && (
            <Sheet>
              <SheetTrigger asChild>
                <Button
                  variant="outline"
                  size="sm"
                  className={cn(
                    'gap-2 font-medium transition-all',
                    `border-${themeColor}-200 text-${themeColor}-700 bg-white hover:bg-${themeColor}-50`
                  )}
                >
                  <List className="h-4 w-4" />
                  <span>{dict.world.buttons.questionList}</span>
                </Button>
              </SheetTrigger>
              <SheetContent
                side={isRTL ? 'left' : 'right'}
                className="w-[300px] sm:w-[400px] flex flex-col"
              >
                <SheetHeader>
                  <SheetTitle>
                    <div className="flex items-center gap-2">
                      <ListChecks className="h-5 w-5 text-blue-600" />
                      <span>
                        {dict.world.listSheet.title.replace(
                          '{{worldTitle}}',
                          title
                        )}
                      </span>
                    </div>
                  </SheetTitle>
                  <SheetDescription>
                    {dict.world.listSheet.description}
                    <div className="mt-3 pt-3 border-t space-y-1">
                      <div className="flex items-center text-xs text-slate-600">
                        <CheckCircle
                          className={cn(
                            'h-3 w-3 me-1.5',
                            `text-${themeColor}-600`
                          )}
                        />
                        <span>{dict.world.listSheet.legend.completed}</span>
                      </div>
                      <div className="flex items-center text-xs text-slate-600">
                        <AlertCircle className="h-3 w-3 text-red-500 me-1.5" />
                        <span>{dict.world.listSheet.legend.required}</span>
                      </div>
                      <div className="flex items-center text-xs text-slate-600">
                        <CircleDot className="h-3 w-3 text-slate-400 me-1.5" />
                        <span>{dict.world.listSheet.legend.notAnswered}</span>
                      </div>
                    </div>
                  </SheetDescription>
                </SheetHeader>
                <div className="mt-4 flex-1 overflow-hidden">
                  <QuestionsList
                    allQuestions={allQuestions}
                    currentQuestionIndex={currentQuestionIndex}
                    setCurrentQuestionIndex={setCurrentQuestionIndex}
                    answers={answers}
                    language={language}
                    themeColor={themeColor}
                    className="h-full"
                    dict={dict.questionsList}
                  />
                </div>
              </SheetContent>
            </Sheet>
          )}
        </div>
      </div>
      <Progress
        value={progress}
        className="h-2"
        indicatorClassName={`bg-${themeColor}-500`}
      />
    </div>
  );

  const renderQuestionCard = () => (
    <motion.div
      className="transition-opacity duration-300"
      key={currentQuestionIndex}
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      exit={{ opacity: 0 }}
    >
      <QuestionCard
        question={currentQuestion}
        depth={currentQuestion.depth}
        isRequired={currentQuestion.isRequired}
        validationError={validationErrors[currentQuestion.id]}
        language={language}
        themeColor={themeColor}
        isVisible={currentAnswerObject?.isVisible ?? true}
        onVisibilityChange={(isVisible) =>
          onVisibilityChange(currentQuestion.id, isVisible)
        }
        onSave={onSave}
        isSaving={isSaving}
        dict={dict.questionCard}
      >
        <AnswerInput
          question={currentQuestion}
          value={currentValue}
          onChange={(value) => {
            setValidationErrors((prev) => ({
              ...prev,
              [currentQuestion.id]: '',
            }));
            onAnswer(currentQuestion.id, value);
          }}
          onClear={() => handleClearAnswer(currentQuestion.id)}
          validationError={validationErrors[currentQuestion.id]}
          dict={{
            answerInput: dict.answerInput,
            interactiveScale: dict.interactiveScale,
          }}
        />
      </QuestionCard>
    </motion.div>
  );

  const renderNavigationButtons = () => {
    const PrevIcon = isRTL ? ArrowRight : ArrowLeft;
    const NextIcon = isRTL ? ArrowLeft : ArrowRight;

    return (
      <div className="flex justify-between pt-4 mt-6 border-t border-slate-200">
        <Button
          variant="outline"
          onClick={handlePrevious}
          className="flex items-center gap-2"
        >
          <PrevIcon className="h-4 w-4" />
          <span>
            {currentQuestionIndex === 0
              ? dict.world.buttons.backToMap
              : dict.world.buttons.previous}
          </span>
        </Button>
        {currentQuestionIndex < allQuestions.length - 1 ? (
          <Button
            variant="default"
            onClick={handleNext}
            className={cn(
              'flex items-center gap-2',
              `bg-${themeColor}-600 hover:bg-${themeColor}-700 text-white`
            )}
          >
            <span>{dict.world.buttons.next}</span>
            <NextIcon className="h-4 w-4" />
          </Button>
        ) : (
          <Button
            onClick={handleNext}
            className="bg-green-600 hover:bg-green-700 flex items-center gap-2"
          >
            <span>{dict.world.buttons.finish}</span>
            <CheckCircle className="h-4 w-4" />
          </Button>
        )}
      </div>
    );
  };

  if (isDesktop) {
    return (
      <div className="w-full relative" dir={isRTL ? 'rtl' : 'ltr'}>
        {renderHeader()}
        <div
          className={cn(
            'transition-all duration-300 ease-in-out',
            isListVisible ? 'grid grid-cols-12 gap-8' : 'flex justify-center'
          )}
        >
          <div
            className={cn(
              'space-y-6',
              isListVisible
                ? 'col-span-12 lg:col-span-7 xl:col-span-8'
                : 'w-full max-w-4xl'
            )}
          >
            {renderQuestionCard()}
            {renderNavigationButtons()}
          </div>
          <AnimatePresence>
            {isListVisible && (
              <motion.div
                className="col-span-12 lg:col-span-5 xl:col-span-4"
                initial={{
                  opacity: 0,
                  width: 0,
                  [isRTL ? 'marginRight' : 'marginLeft']: '-2rem',
                }}
                animate={{
                  opacity: 1,
                  width: 'auto',
                  [isRTL ? 'marginRight' : 'marginLeft']: '0',
                }}
                exit={{
                  opacity: 0,
                  width: 0,
                  [isRTL ? 'marginRight' : 'marginLeft']: '-2rem',
                }}
                transition={{ duration: 0.3, ease: 'easeInOut' }}
                layout
              >
                <Card className="sticky top-6 shadow-lg border-slate-200 h-[calc(100vh-10rem)] overflow-hidden flex flex-col">
                  <CardHeader className="pb-3 pt-4 border-b bg-slate-50/50 flex-shrink-0">
                    <CardTitle className="text-lg font-semibold flex items-center gap-2 text-slate-800">
                      <ListChecks className="h-5 w-5 text-blue-600" />
                      <span>
                        {dict.world.listSheet.title.replace(
                          '{{worldTitle}}',
                          title
                        )}
                      </span>
                    </CardTitle>
                    <div className="pt-2 flex flex-wrap gap-x-4 gap-y-1 text-xs text-slate-500">
                      <div className="flex items-center">
                        <CheckCircle
                          className={cn(
                            'h-3 w-3 me-1.5',
                            `text-${themeColor}-600`
                          )}
                        />
                        <span>{dict.world.listSheet.legend.completed}</span>
                      </div>
                      <div className="flex items-center">
                        <AlertCircle className="h-3 w-3 text-red-500 me-1.5" />
                        <span>{dict.world.listSheet.legend.required}</span>
                      </div>
                      <div className="flex items-center">
                        <CircleDot className="h-3 w-3 text-slate-400 me-1.5" />
                        <span>{dict.world.listSheet.legend.notAnswered}</span>
                      </div>
                    </div>
                  </CardHeader>
                  <CardContent className="p-2 flex-grow overflow-hidden">
                    <QuestionsList
                      allQuestions={allQuestions}
                      currentQuestionIndex={currentQuestionIndex}
                      setCurrentQuestionIndex={setCurrentQuestionIndex}
                      answers={answers}
                      language={language}
                      themeColor={themeColor}
                      className="h-full"
                      dict={dict.questionsList}
                    />
                  </CardContent>
                </Card>
              </motion.div>
            )}
          </AnimatePresence>
        </div>
      </div>
    );
  } else {
    // Widok mobilny
    return (
      <div
        className="max-w-2xl mx-auto p-2 sm:p-4 space-y-6 pb-24"
        dir={isRTL ? 'rtl' : 'ltr'}
      >
        {renderHeader()}
        {renderQuestionCard()}
        {renderNavigationButtons()}
      </div>
    );
  }
}
--- End of Content for WorldComponent.tsx ---

