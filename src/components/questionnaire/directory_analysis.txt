מבנה התיקייה:
questionnaire
  .dist
  MatchmakingQuestionnaire.tsx
  QuestionnaireComplete.tsx
  QuestionnairePage.tsx
  QuestionnaireRestore.tsx
  common
    AnswerInput.tsx
    InteractiveScale.tsx
    QuestionCard.tsx
    QuestionnaireCompletion.tsx
    QuestionsList.tsx
    WorldIntro.tsx
  components
    AccessibilityFeatures.tsx
    FAQ.tsx
    InteractiveScale.tsx
    MatchResultCard.tsx
    QuestionnaireProgress.tsx
    UserStats.tsx
  hooks
    useMediaQuery.ts
  layout
    QuestionnaireLayout.tsx
    WorldsMap.tsx
  onboarding
    TrackSelection.tsx
    Welcome.tsx
  pages
    QuestionnaireLandingPage.tsx
    questionnaire
      map.tsx
  questions
    partner
      partnerQuestions.tsx
    personality
      personalityQuestions.tsx
    relationship
      relationshipQuestions.tsx
    religion
      faithQuestions.tsx
      practicalReligionQuestions.tsx
      religionQuestions.tsx
    values
      valuesQuestions.tsx
  types
    types.ts
  worlds
    PartnerWorld.tsx
    PersonalityWorld.tsx
    RelationshipWorld.tsx
    ReligionWorld.tsx
    ValuesWorld.tsx

תוכן הקבצים:

==================================================
Contents of C:\Users\eytan\Desktop\שידוכים\shidduch-system\src\components\questionnaire\MatchmakingQuestionnaire.tsx:
==================================================
"use client";

import React, { useState, useMemo, useEffect, useCallback } from "react";
import { useRouter } from "next/navigation";
import QuestionnaireLayout from "./layout/QuestionnaireLayout";
import Welcome from "./onboarding/Welcome";
import TrackSelection from "./onboarding/TrackSelection";
import ValuesWorld from "./worlds/ValuesWorld";
import RelationshipWorld from "./worlds/RelationshipWorld";
import PersonalityWorld from "./worlds/PersonalityWorld";
import PartnerWorld from "./worlds/PartnerWorld";
import ReligionWorld from "./worlds/ReligionWorld";
import QuestionnaireCompletion from "./common/QuestionnaireCompletion";
import { useLanguage } from "@/app/contexts/LanguageContext";
import { Alert, AlertDescription } from "@/components/ui/alert";
import { cn } from "@/lib/utils";
import WorldsMap from "./layout/WorldsMap"; // הוסף בחלק של ייבוא הקומפוננטות
import {
  Loader2,
  CheckCircle,
  AlertTriangle,
  XCircle,
  Info,
} from "lucide-react";
import type {
  WorldId,
  UserTrack,
  QuestionnaireSubmission,
  QuestionnaireAnswer,
  AnswerValue,
} from "./types/types";

enum OnboardingStep {
  WELCOME = "WELCOME",
  TRACK_SELECTION = "TRACK_SELECTION",
  WORLDS = "WORLDS",
  COMPLETED = "COMPLETED",
  MAP = "MAP", // הוסף את זה
}

const WORLD_ORDER: WorldId[] = [
  "PERSONALITY",
  "VALUES",
  "RELATIONSHIP",
  "PARTNER",
  "RELIGION",
];

export interface MatchmakingQuestionnaireProps {
  userId?: string;
  onComplete?: () => void;
  initialWorld?: WorldId;
}
export default function MatchmakingQuestionnaire({
  userId,
  onComplete,
  initialWorld,
}: MatchmakingQuestionnaireProps) {
  const router = useRouter();
  const { language } = useLanguage();
  const sessionId = useMemo(() => `session_${Date.now()}`, []);

  // Basic State
  const [currentStep, setCurrentStep] = useState<OnboardingStep>(
    OnboardingStep.WELCOME
  );
  // עדכון currentWorld כאשר יש שינוי ב-initialWorld
  useEffect(() => {
    if (initialWorld) {
      setCurrentWorld(initialWorld);
    }
  }, [initialWorld]);

  const [currentWorld, setCurrentWorld] = useState<WorldId>(
    initialWorld || "VALUES"
  );
  const [userTrack, setUserTrack] = useState<UserTrack>("SECULAR");
  const [answers, setAnswers] = useState<QuestionnaireAnswer[]>([]);
  const [completedWorlds, setCompletedWorlds] = useState<WorldId[]>([]);
  const [startTime] = useState(() => new Date().toISOString());
  const [lastSavedTime, setLastSavedTime] = useState<Date | null>(null);

  // Submission state
  const [isSaving, setIsSaving] = useState(false);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [toastState, setToastState] = useState<{
    message: string;
    type: "success" | "error" | "info";
    isVisible: boolean;
  }>({
    message: "",
    type: "info",
    isVisible: false,
  });

  const showToast = useCallback(
    (message: string, type: "success" | "error" | "info" = "info") => {
      setToastState({ message, type, isVisible: true });
      setTimeout(() => {
        setToastState((prev) => ({ ...prev, isVisible: false }));
      }, 3000);
    },
    []
  );

  const getNextWorld = (currentWorldId: WorldId): WorldId | null => {
    const currentIndex = WORLD_ORDER.indexOf(currentWorldId);
    if (currentIndex < WORLD_ORDER.length - 1) {
      return WORLD_ORDER[currentIndex + 1];
    }
    return null;
  };

  const prepareSubmissionData = useCallback((): QuestionnaireSubmission => {
    const isCompleted = completedWorlds.length === WORLD_ORDER.length;
    return {
      userId: userId || sessionId,
      answers: answers,
      worldsCompleted: completedWorlds,
      completed: isCompleted,
      startedAt: startTime,
      completedAt: isCompleted ? new Date().toISOString() : undefined,
      userTrack,
    };
  }, [answers, completedWorlds, sessionId, startTime, userId, userTrack]);

  const handleQuestionnaireComplete = useCallback(
    async (isAutoSave = false) => {
      if (isSaving) return;

      setIsSaving(true);
      setError(null);

      try {
        const submissionData = prepareSubmissionData();

        // Moved validateSubmission inside the callback
        const validateSubmission = (data: QuestionnaireSubmission): boolean => {
          if (!data.userId) return false;
          if (!Array.isArray(data.answers) || data.answers.length === 0)
            return false;
          if (!Array.isArray(data.worldsCompleted)) return false;
          if (typeof data.completed !== "boolean") return false;
          if (!data.startedAt) return false;
          if (data.completed && !data.completedAt) return false;
          return true;
        };

        if (!validateSubmission(submissionData)) {
          throw new Error("Invalid submission data");
        }

        // אם המשתמש לא מחובר, שומרים בlocal ומעבירים לדף התחברות
        if (!userId) {
          localStorage.setItem(
            "tempQuestionnaire",
            JSON.stringify(submissionData)
          );
          router.push("/auth/signin");
          return;
        }

        // שמירה בשרת
        const response = await fetch("/api/questionnaire", {
          method: "PUT",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify(submissionData),
        });

        if (!response.ok) {
          const errorData = await response.json();
          throw new Error(errorData.error || "Failed to save questionnaire");
        }

        setLastSavedTime(new Date());

        if (!isAutoSave && onComplete) {
          onComplete();
        }

        if (!isAutoSave) {
          showToast("השאלון נשמר בהצלחה", "success");
        }
      } catch (err) {
        console.error("Failed to save questionnaire:", err);
        setError(
          err instanceof Error
            ? err.message
            : "אירעה שגיאה בשמירת השאלון. אנא נסה שוב."
        );

        if (!isAutoSave) {
          showToast("אירעה שגיאה בשמירת השאלון", "error");
        }
      } finally {
        setIsSaving(false);
      }
    },
    [isSaving, prepareSubmissionData, userId, router, onComplete, showToast]
  );

  // אוטוסייב
  useEffect(() => {
    let autoSaveInterval: NodeJS.Timeout;

    if (currentStep === OnboardingStep.WORLDS && userId) {
      autoSaveInterval = setInterval(() => {
        if (answers.length > 0) {
          handleQuestionnaireComplete(true);
        }
      }, 120000); // auto-save every 2 minutes
    }

    return () => {
      if (autoSaveInterval) clearInterval(autoSaveInterval);
    };
  }, [currentStep, answers.length, userId, handleQuestionnaireComplete]);

  // Load existing answers when component mounts
  useEffect(() => {
    const loadExistingAnswers = async () => {
      setIsLoading(true);
      try {
        const response = await fetch("/api/questionnaire");
        const data = await response.json();

        if (data.success && data.data) {
          // Combine all answers from different worlds
          const allAnswers = [
            ...(data.data.valuesAnswers || []),
            ...(data.data.personalityAnswers || []),
            ...(data.data.relationshipAnswers || []),
            ...(data.data.partnerAnswers || []),
            ...(data.data.religionAnswers || []),
          ];

          // Update states
          setAnswers(allAnswers);
          setCompletedWorlds(data.data.worldsCompleted || []);
          setUserTrack(data.data.userTrack || "SECULAR");
          setCurrentStep(
            data.data.completed
              ? OnboardingStep.COMPLETED
              : OnboardingStep.WORLDS
          );

          // אם יש עולמות שהושלמו, בחר את העולם הבא בתור
          if (data.data.worldsCompleted?.length > 0) {
            const nextWorld = WORLD_ORDER.find(
              (world) => !data.data.worldsCompleted.includes(world)
            );
            if (nextWorld) {
              setCurrentWorld(nextWorld);
            }
          }
        }
      } catch (err) {
        console.error("Failed to load existing answers:", err);
        setError("אירעה שגיאה בטעינת התשובות הקיימות");
      } finally {
        setIsLoading(false);
      }
    };

    if (userId) {
      loadExistingAnswers();
    } else {
      setIsLoading(false);
    }
  }, [userId]);

  const handleAnswer = useCallback(
    (questionId: string, value: AnswerValue) => {
      setError(null);
      const newAnswer: QuestionnaireAnswer = {
        questionId,
        worldId: currentWorld,
        value,
        answeredAt: new Date().toISOString(),
      };

      setAnswers((prev) => {
        const filtered = prev.filter((a) => a.questionId !== questionId);
        return [...filtered, newAnswer];
      });
    },
    [currentWorld]
  );

  const handleWorldChange = useCallback((newWorld: WorldId) => {
    setCurrentWorld(newWorld);
    setError(null);
  }, []);

  const handleWorldComplete = useCallback(
    async (worldId: WorldId) => {
      try {
        if (!completedWorlds.includes(worldId)) {
          setCompletedWorlds((prev) => [...prev, worldId]);
        }

        showToast(
          `כל הכבוד! סיימת את עולם ה${
            worldId === "PERSONALITY"
              ? "אישיות"
              : worldId === "VALUES"
              ? "ערכים"
              : worldId === "RELATIONSHIP"
              ? "זוגיות"
              : worldId === "PARTNER"
              ? "פרטנר"
              : "דת ומסורת"
          }`,
          "success"
        );

        const nextWorld = getNextWorld(worldId);
        if (!nextWorld) {
          setCurrentStep(OnboardingStep.COMPLETED);
        } else {
          setCurrentWorld(nextWorld);
        }

        // שמירה אוטומטית לאחר השלמת עולם
        if (userId) {
          await handleQuestionnaireComplete(true);
        }
      } catch (err) {
        setError("אירעה שגיאה בשמירת ההתקדמות. אנא נסה שוב.");
        console.error("Error completing world:", err);
      }
    },
    [completedWorlds, showToast, userId, handleQuestionnaireComplete]
  );

  function renderCurrentWorld() {
    const worldProps = {
      onAnswer: handleAnswer,
      onComplete: () => handleWorldComplete(currentWorld),
      onBack: () => setCurrentStep(OnboardingStep.MAP),
      answers: answers.filter((a) => a.worldId === currentWorld),
      isCompleted: completedWorlds.includes(currentWorld),
      language,
    };

    switch (currentWorld) {
      case "VALUES":
        return <ValuesWorld {...worldProps} />;
      case "RELATIONSHIP":
        return <RelationshipWorld {...worldProps} />;
      case "PERSONALITY":
        return <PersonalityWorld {...worldProps} />;
      case "PARTNER":
        return <PartnerWorld {...worldProps} />;
      case "RELIGION":
        return <ReligionWorld {...worldProps} />;
      default:
        return <div>עולם לא נמצא</div>;
    }
  }

  const handleExit = useCallback(() => {
    setCurrentStep(OnboardingStep.MAP);
  }, []);
  function renderCurrentStep() {
    if (isLoading) {
      return (
        <div className="flex flex-col items-center justify-center min-h-screen p-4">
          <Loader2 className="w-12 h-12 animate-spin text-blue-500 mb-4" />
          <h2 className="text-xl font-medium">טוען את השאלון...</h2>
          <p className="text-gray-500 mt-2">אנא המתן, מאחזר את ההתקדמות שלך</p>
        </div>
      );
    }

    switch (currentStep) {
      case OnboardingStep.MAP:
        return (
          <WorldsMap
            currentWorld={currentWorld}
            completedWorlds={completedWorlds}
            onWorldChange={(worldId) => {
              setCurrentWorld(worldId);
              setCurrentStep(OnboardingStep.WORLDS);
            }}
          />
        );
      case OnboardingStep.WELCOME:
        return (
          <Welcome
            onStart={() => setCurrentStep(OnboardingStep.TRACK_SELECTION)}
            onLearnMore={() => router.push("/profile")}
            isLoggedIn={!!userId}
          />
        );

      case OnboardingStep.TRACK_SELECTION:
        return (
          <TrackSelection
            onSelect={(track: UserTrack) => {
              setUserTrack(track);
              setCurrentStep(OnboardingStep.WORLDS);
            }}
            onBack={() => setCurrentStep(OnboardingStep.WELCOME)}
            selectedTrack={userTrack}
          />
        );

      case OnboardingStep.WORLDS:
        return (
          <QuestionnaireLayout
            currentWorld={currentWorld}
            userTrack={userTrack}
            completedWorlds={completedWorlds}
            onWorldChange={handleWorldChange}
            onExit={handleExit} // כאן
            onSaveProgress={() => handleQuestionnaireComplete(true)}
            language={language}
          >
            {renderCurrentWorld()}
          </QuestionnaireLayout>
        );

      case OnboardingStep.COMPLETED:
        return (
          <QuestionnaireCompletion
            onSendToMatching={() => handleQuestionnaireComplete()}
            isLoading={isSaving}
            isLoggedIn={!!userId}
          />
        );

      default:
        return <div>שגיאה בטעינת השלב</div>;
    }
  }

  const Toast = ({ message, type, isVisible }) => {
    if (!isVisible) return null;

    return (
      <div
        className={cn(
          "fixed bottom-4 right-4 z-50 p-4 rounded-lg shadow-lg max-w-md transition-all duration-300",
          type === "success"
            ? "bg-green-500"
            : type === "error"
            ? "bg-red-500"
            : "bg-blue-500",
          "text-white"
        )}
      >
        <div className="flex items-center">
          {type === "success" ? (
            <CheckCircle className="h-5 w-5 mr-2" />
          ) : type === "error" ? (
            <XCircle className="h-5 w-5 mr-2" />
          ) : (
            <Info className="h-5 w-5 mr-2" />
          )}
          <p>{message}</p>
        </div>
      </div>
    );
  };

  return (
    <div
      className={cn(
        "min-h-screen bg-gray-50",
        language === "he" ? "dir-rtl" : "dir-ltr"
      )}
    >
      {/* נתוני שמירה אחרונה והתקדמות */}
      {lastSavedTime && currentStep === OnboardingStep.WORLDS && (
        <div className="fixed bottom-4 left-4 z-40 bg-white p-2 rounded-lg shadow-md text-xs text-gray-600 border">
          <div className="flex items-center">
            <CheckCircle className="h-3.5 w-3.5 text-green-500 mr-1" />
            <span>נשמר לאחרונה: {lastSavedTime.toLocaleTimeString()}</span>
          </div>
        </div>
      )}

      {error && (
        <Alert variant="destructive" className="m-4 max-w-lg mx-auto">
          <AlertTriangle className="h-4 w-4 mr-2" />
          <AlertDescription>{error}</AlertDescription>
        </Alert>
      )}

      {/* תצוגת השלב הנוכחי */}
      {renderCurrentStep()}

      {/* התראות (Toast) */}
      <Toast
        message={toastState.message}
        type={toastState.type}
        isVisible={toastState.isVisible}
      />
    </div>
  );
}


==================================================
Contents of C:\Users\eytan\Desktop\שידוכים\shidduch-system\src\components\questionnaire\QuestionnaireComplete.tsx:
==================================================
"use client";

import { useEffect } from "react";
import { useRouter } from "next/navigation";
import { useSession } from "next-auth/react";
import { Card, CardHeader, CardTitle, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Alert, AlertDescription } from "@/components/ui/alert";
import { CheckCircle2, ArrowRight } from "lucide-react";

export default function QuestionnairePage() {
  const { status } = useSession();
  const router = useRouter();

  useEffect(() => {
    if (status === "unauthenticated") {
      router.push("/auth/signin");
    }
  }, [status, router]);

  if (status === "loading") {
    return (
      <div className="container mx-auto py-8 px-4">
        <Card className="max-w-xl mx-auto">
          <CardContent className="p-8">
            <div className="text-center">טוען...</div>
          </CardContent>
        </Card>
      </div>
    );
  }

  return (
    <div className="container mx-auto py-8 px-4">
      <Card className="max-w-xl mx-auto bg-green-50 border-green-200">
        <CardHeader className="text-center pb-2">
          <div className="flex justify-center mb-4">
            <CheckCircle2 className="w-12 h-12 text-green-500" />
          </div>
          <CardTitle className="text-2xl">תודה על מילוי השאלון!</CardTitle>
        </CardHeader>

        <CardContent className="space-y-6 pt-4">
          <div className="text-center text-gray-600 space-y-2">
            <p>התשובות שלך נשמרו בהצלחה במערכת</p>
            <p>הצוות שלנו יעבור על התשובות ויחזור אליך בהקדם</p>
          </div>

          <Alert className="bg-blue-50 border-blue-200">
            <AlertDescription>
              בזמן שהצוות עובד על ההתאמות עבורך, תוכל/י להשלים את הפרופיל האישי
              שלך
            </AlertDescription>
          </Alert>

          <div className="flex justify-center pt-4">
            <Button
              onClick={() => router.push("/profile")}
              className="flex items-center"
            >
              המשך לפרופיל
              <ArrowRight className="mr-2 h-5 w-5" />
            </Button>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}


==================================================
Contents of C:\Users\eytan\Desktop\שידוכים\shidduch-system\src\components\questionnaire\QuestionnairePage.tsx:
==================================================
// src/components/questionnaire/QuestionnairePage.tsx
"use client";

import { useSession } from "next-auth/react";
import { useState, useEffect } from "react";
import { useRouter } from "next/navigation";
import { useSearchParams } from "next/navigation";
import { Card } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { ArrowLeft, AlertCircle, Loader2 } from "lucide-react";
import { Alert, AlertDescription } from "@/components/ui/alert";
import QuestionnaireLandingPage from "./pages/QuestionnaireLandingPage";
import MatchmakingQuestionnaire from "./MatchmakingQuestionnaire";
import type { WorldId } from "./types/types";

// Enum to track questionnaire flow stages
enum QuestionnaireStage {
  LANDING = "LANDING",
  QUESTIONNAIRE = "QUESTIONNAIRE",
  COMPLETE = "COMPLETE",
}

export default function QuestionnairePage() {
  const { data: session, status } = useSession();
  const router = useRouter();
  const searchParams = useSearchParams();

  // State for tracking current stage in the flow
  const [currentStage, setCurrentStage] = useState<QuestionnaireStage>(
    QuestionnaireStage.LANDING
  );
  const [error, setError] = useState<string | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [hasSavedProgress, setHasSavedProgress] = useState(false);
  const [initialWorld, setInitialWorld] = useState<WorldId | undefined>(
    undefined
  );

  // Check for existing progress when component mounts
  useEffect(() => {
    const checkExistingProgress = async () => {
      if (status === "loading") return;

      setIsLoading(true);

      try {
        // If user is logged in, check for saved progress
        if (session?.user?.id) {
          const response = await fetch("/api/questionnaire");
          const data = await response.json();

          if (data.success && data.data) {
            setHasSavedProgress(true);
          }
        }
      } catch (err) {
        console.error("Error checking questionnaire progress:", err);
      } finally {
        setIsLoading(false);
      }
    };

    checkExistingProgress();
  }, [session, status]);

  // Check for world parameter in URL
  useEffect(() => {
    if (status === "loading") return;

    const worldParam = searchParams?.get("world");
    if (
      worldParam &&
      ["PERSONALITY", "VALUES", "RELATIONSHIP", "PARTNER", "RELIGION"].includes(
        worldParam as string
      )
    ) {
      // If we have a world parameter and the current stage is appropriate, we'll set it
      if (
        currentStage === QuestionnaireStage.QUESTIONNAIRE ||
        currentStage === QuestionnaireStage.LANDING
      ) {
        setCurrentStage(QuestionnaireStage.QUESTIONNAIRE);

        // Pass the selected world to MatchmakingQuestionnaire
        const selectedWorld = worldParam as WorldId;
        setInitialWorld(selectedWorld);
      }
    }
  }, [searchParams, status, currentStage]);

  // Handler when the landing page "start" button is clicked
  const handleStartQuestionnaire = () => {
    setCurrentStage(QuestionnaireStage.QUESTIONNAIRE);
  };

  // Handler when questionnaire is completed
  const handleQuestionnaireComplete = async () => {
    try {
      await router.push("/questionnaire/complete");
      setCurrentStage(QuestionnaireStage.COMPLETE);
    } catch (err) {
      console.error("Error completing questionnaire:", err);
      setError("אירעה שגיאה בסיום השאלון. אנא נסה שוב.");
    }
  };

  // Loading state
  if (isLoading) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <Card className="w-full max-w-md p-8 text-center">
          <Loader2 className="h-12 w-12 animate-spin mx-auto mb-4 text-blue-600" />
          <p className="text-lg font-medium">טוען...</p>
          <p className="text-sm text-gray-500 mt-2">מאחזר את נתוני השאלון</p>
        </Card>
      </div>
    );
  }

  // Render different components based on current stage
  const renderCurrentStage = () => {
    switch (currentStage) {
      case QuestionnaireStage.LANDING:
        return (
          <QuestionnaireLandingPage
            onStartQuestionnaire={handleStartQuestionnaire}
            hasSavedProgress={hasSavedProgress}
          />
        );

      case QuestionnaireStage.QUESTIONNAIRE:
        return (
          <MatchmakingQuestionnaire
            userId={session?.user?.id}
            onComplete={handleQuestionnaireComplete}
            initialWorld={initialWorld}
          />
        );

      case QuestionnaireStage.COMPLETE:
        // This should redirect to /questionnaire/complete
        return null;

      default:
        return <div>שגיאה בטעינת השלב</div>;
    }
  };

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Back navigation for non-landing stages */}
      {currentStage !== QuestionnaireStage.LANDING && (
        <div className="container mx-auto p-4">
          <Button
            variant="ghost"
            size="sm"
            className="mb-4"
            onClick={() => setCurrentStage(QuestionnaireStage.LANDING)}
          >
            <ArrowLeft className="mr-2 h-4 w-4" />
            חזרה לעמוד הראשי
          </Button>
        </div>
      )}

      {/* Error messages */}
      {error && (
        <div className="container mx-auto p-4">
          <Alert variant="destructive" className="mb-4">
            <AlertCircle className="h-4 w-4" />
            <AlertDescription>{error}</AlertDescription>
          </Alert>
        </div>
      )}

      {/* Current stage content */}
      {renderCurrentStage()}
    </div>
  );
}


==================================================
Contents of C:\Users\eytan\Desktop\שידוכים\shidduch-system\src\components\questionnaire\QuestionnaireRestore.tsx:
==================================================
"use client";

import { useEffect, useState } from "react";
import { useRouter } from "next/navigation";
import { useSession } from "next-auth/react";
import { Alert, AlertDescription } from "@/components/ui/alert";
import { Card, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Loader2 } from "lucide-react";

export default function QuestionnaireRestore() {
  const router = useRouter();
  const { data: session, status } = useSession();
  const [isProcessing, setIsProcessing] = useState(false);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    const restoreQuestionnaire = async () => {
      if (isProcessing) return;

      try {
        setIsProcessing(true);
        setError(null);

        const savedData = localStorage.getItem("tempQuestionnaire");

        if (!savedData || !session?.user?.id) {
          router.push("/dashboard");
          return;
        }

        const questionnaireData = JSON.parse(savedData);
        questionnaireData.userId = session.user.id;

        const response = await fetch("/api/questionnaire", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify(questionnaireData),
        });

        if (!response.ok) {
          const errorData = await response.json();
          throw new Error(errorData.message || "Failed to save questionnaire");
        }

        localStorage.removeItem("tempQuestionnaire");
        router.push(
          questionnaireData.completed ? "/dashboard" : "/questionnaire"
        );
      } catch (err) {
        console.error("Error restoring questionnaire:", err);
        setError("אירעה שגיאה בשחזור הנתונים. אנא נסה שוב.");
      } finally {
        setIsProcessing(false);
      }
    };

    if (session?.user && !isProcessing && status === "authenticated") {
      restoreQuestionnaire();
    }
  }, [session, router, isProcessing, status]);

  const renderContent = () => {
    if (status === "loading") {
      return (
        <Card>
          <CardContent className="p-6 text-center">
            <Loader2 className="w-8 h-8 animate-spin mx-auto mb-4" />
            <p className="text-lg">טוען...</p>
          </CardContent>
        </Card>
      );
    }

    if (status === "unauthenticated") {
      router.push("/login");
      return null;
    }

    if (error) {
      return (
        <>
          <Alert variant="destructive">
            <AlertDescription>{error}</AlertDescription>
          </Alert>
          <div className="mt-4 flex justify-center">
            <Button onClick={() => router.push("/questionnaire")}>
              חזור לשאלון
            </Button>
          </div>
        </>
      );
    }

    return (
      <Card>
        <CardContent className="p-6 text-center">
          <Loader2 className="w-8 h-8 animate-spin mx-auto mb-4" />
          <p className="text-lg">משחזר את נתוני השאלון...</p>
          <p className="text-sm text-gray-500 mt-2">אנא המתן</p>
        </CardContent>
      </Card>
    );
  };

  return (
    <div className="container mx-auto p-4 max-w-md">{renderContent()}</div>
  );
}


==================================================
Contents of C:\Users\eytan\Desktop\שידוכים\shidduch-system\src\components\questionnaire\common\AnswerInput.tsx:
==================================================
// src/components/questionnaire/common/AnswerInput.tsx

import React, { useState, useEffect, useCallback } from "react";
import { Slider } from "@/components/ui/slider";
import { Textarea } from "@/components/ui/textarea";
import { Button } from "@/components/ui/button";
import { Label } from "@/components/ui/label";
import { Input } from "@/components/ui/input";
import { Card } from "@/components/ui/card";
import { Progress } from "@/components/ui/progress";
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip";
import {
  X,
  Plus,
  CheckCircle,
  Eraser,
  Info,
  ChevronDown,
  ChevronUp,
  CornerDownRight,
  AlertCircle,
  Sparkles,
  Clock,
  Copy,
  CheckCheck,
  Edit,
  Trash2,
} from "lucide-react";
import InteractiveScale from "./InteractiveScale";
// ודא שגם Option מיובא מפורשות אם הוא לא
import type { AnswerValue, AnswerInputProps, Question, Option } from "../types/types";
import { cn } from "@/lib/utils";
import {
  Collapsible,
  CollapsibleContent,
  CollapsibleTrigger,
} from "@/components/ui/collapsible";
import { motion, AnimatePresence } from "framer-motion";
import { Badge } from "@/components/ui/badge";

// הגדרות CSS יכולות להיות בקובץ CSS גלובלי או בסגנון מוטבע אם נדרש
/*
.progress-green .progress-indicator { background-color: #22c55e; }
.progress-blue .progress-indicator { background-color: #3b82f6; }
.progress-amber .progress-indicator { background-color: #f59e0b; }
*/

export default function AnswerInput({
  question,
  value,
  onChange,
  onClear,
  showValidation = false,
  className = "",
}: AnswerInputProps) {
  const [internalValue, setInternalValue] = useState<AnswerValue>(value);
  const [error, setError] = useState<string | null>(null);
  const [customValue, setCustomValue] = useState<string>("");
  const [charactersCount, setCharactersCount] = useState<number>(0);
  const [isFocused, setIsFocused] = useState<boolean>(false);
  const [selectedOption, setSelectedOption] = useState<string | null>(null);
  const [textAreaHeight, setTextAreaHeight] = useState<number>(150);
  const [isCollapsibleOpen, setIsCollapsibleOpen] = useState<boolean>(false);
  const [textCopied, setTextCopied] = useState(false);

  useEffect(() => {
    setInternalValue(value);
    if (typeof value === "string") {
      setCharactersCount(value.length);
      if (value.length > 200) setTextAreaHeight(220);
      else if (value.length > 100) setTextAreaHeight(180);
      else setTextAreaHeight(150);
    } else if (value === undefined || value === null) {
         setCharactersCount(0);
         setTextAreaHeight(150);
    }
  }, [value]);

   const handleClear = useCallback(() => {
     let emptyValue: AnswerValue;
     switch (question.type) {
       case "multiChoice":
       case "multiSelect":
       case "multiSelectWithOther":
         emptyValue = [];
         break;
       case "budgetAllocation":
         emptyValue = {};
         break;
       case "openText":
         emptyValue = "";
         break;
       case "scale":
          emptyValue = undefined;
          break;
       case "singleChoice":
       case "scenario":
       case "iconChoice":
       default:
         emptyValue = undefined;
     }

     setInternalValue(emptyValue);
     setCustomValue("");
     setCharactersCount(0);
     setSelectedOption(null);
     setError(null);
     onClear?.();
   }, [question.type, onClear]);


  const handleValueChange = useCallback((newValue: AnswerValue) => {
    if (question.type === 'singleChoice' && newValue === internalValue && !question.isRequired) {
      handleClear();
      return;
    }
     if (question.type === 'iconChoice' && newValue === internalValue && !question.isRequired) {
       handleClear();
       return;
     }
     if (question.type === 'scenario' && newValue === internalValue && !question.isRequired) {
       handleClear();
       return;
     }

    setInternalValue(newValue);
    setError(null);
    onChange?.(newValue);

    if (typeof newValue === "string") {
      setCharactersCount(newValue.length);
    } else {
        setCharactersCount(0);
    }
  }, [internalValue, onChange, question.isRequired, question.type, handleClear]);

  const handleCopyText = useCallback(() => {
    if (typeof internalValue === "string" && internalValue) {
      navigator.clipboard.writeText(internalValue);
      setTextCopied(true);
      setTimeout(() => setTextCopied(false), 2000);
    }
  }, [internalValue]);

  const optionVariants = {
    initial: { opacity: 0, y: 10 },
    animate: { opacity: 1, y: 0, transition: { duration: 0.2 } },
    exit: { opacity: 0, scale: 0.96, transition: { duration: 0.15 } },
    hover: { scale: 1.02, transition: { duration: 0.2 } },
    tap: { scale: 0.98, transition: { duration: 0.1 } },
  };

  const renderSingleChoiceOption = (choiceOption: Option, isSelected: boolean) => (
    <motion.div
      key={choiceOption.value}
      variants={optionVariants}
      initial="initial"
      animate="animate"
      exit="exit"
      whileHover={!isSelected ? "hover" : undefined}
      whileTap="tap"
      className={cn(
        "p-3 border rounded-lg cursor-pointer transition-all",
        "hover:bg-gray-50 flex items-center justify-between gap-2",
        "relative overflow-hidden",
        isSelected && "bg-blue-50 border-blue-500 shadow-sm"
      )}
       onClick={() => handleValueChange(choiceOption.value)}
    >
      <AnimatePresence>
       {isSelected && (
        <motion.div
          initial={{ opacity: 0, scale: 0.5 }}
          animate={{ opacity: 1, scale: 1 }}
          exit={{ opacity: 0, scale: 0.5 }}
          className="absolute inset-0 bg-gradient-to-r from-blue-50 via-blue-100 to-blue-50 opacity-60"
        />
       )}
      </AnimatePresence>

      <div className="flex items-center gap-2 flex-1 z-10">
        {choiceOption.icon && (
          <motion.div
            className={cn("text-blue-600 transition-transform", isSelected && "text-blue-700")}
             animate={{ scale: isSelected ? 1.1 : 1 }}
          >
            {choiceOption.icon}
          </motion.div>
        )}
        <span className={cn("font-medium", isSelected && "text-blue-700")}>
          {choiceOption.text}
        </span>
      </div>

      <div className="relative w-6 h-6 z-10">
          <AnimatePresence>
            {isSelected && (
                 <motion.div
                   key="check"
                   initial={{ scale: 0, opacity: 0 }}
                   animate={{ scale: 1, opacity: 1 }}
                   exit={{ scale: 0, opacity: 0 }}
                   className="absolute inset-0 flex items-center justify-center"
                 >
                    <CheckCircle className="h-5 w-5 text-blue-500" />
                 </motion.div>
            )}
           {isSelected && !question.isRequired && (
                 <motion.div
                     key="clear"
                     initial={{ scale: 0, opacity: 0 }}
                     animate={{ scale: 1, opacity: 1 }}
                     exit={{ scale: 0, opacity: 0 }}
                     className="absolute inset-0 flex items-center justify-center opacity-0 hover:opacity-100 transition-opacity"
                 >
                     <Button
                        size="icon"
                        variant="ghost"
                        className="h-6 w-6 rounded-full text-gray-400 hover:text-red-500 hover:bg-red-50 p-0"
                        onClick={(e) => {
                           e.stopPropagation();
                           handleClear();
                        }}
                        aria-label="נקה בחירה"
                     >
                         <X className="w-4 h-4" />
                     </Button>
                 </motion.div>
           )}
         </AnimatePresence>
       </div>
    </motion.div>
  );

  const renderInput = () => {
    switch (question.type) {
      case "singleChoice":
        return (
          <div className="space-y-2">
            <AnimatePresence initial={false}>
              {question.options?.map((optionItem) => {
                const isSelected = internalValue === optionItem.value;
                return renderSingleChoiceOption(optionItem, isSelected);
              })}
            </AnimatePresence>
          </div>
        );

       case "scale":
         return (
           <InteractiveScale
             min={question.min ?? 1}
             max={question.max ?? 10}
             step={question.step ?? 1}
             value={typeof internalValue === 'number' ? internalValue : undefined}
             onChange={(newValue) => handleValueChange(newValue)}
             showLabels={true}
             showValue={true}
             name={question.id}
             required={question.isRequired}
             // ניתן להוסיף props נוספים ל-InteractiveScale כאן אם הוגדרו ב-Question
             // labels={question.labels}
             // descriptions={question.descriptions}
           />
         );

      case "multiChoice":
      case "multiSelect":
        const selectedValues = Array.isArray(internalValue) ? internalValue as string[] : [];
        return (
          <div className="space-y-2">
            <AnimatePresence initial={false}>
              {question.options?.map((option) => {
                const isSelected = selectedValues.includes(option.value);
                return (
                  <motion.div
                    key={option.value}
                    variants={optionVariants} initial="initial" animate="animate" exit="exit" whileHover="hover" whileTap="tap"
                    className={cn(
                      "p-3 border rounded-lg cursor-pointer transition-all",
                      "hover:bg-gray-50 flex items-center justify-between",
                      "relative overflow-hidden",
                      isSelected && "bg-blue-50 border-blue-500"
                    )}
                    onClick={() => {
                      let newValues: string[];
                      if (isSelected) {
                        newValues = selectedValues.filter((v) => v !== option.value);
                      } else {
                          if (question.maxSelections && selectedValues.length >= question.maxSelections) {
                               setError(`ניתן לבחור עד ${question.maxSelections} אפשרויות`);
                               setTimeout(() => setError(null), 2000);
                               return;
                          }
                          newValues = [...selectedValues, option.value];
                      }
                      handleValueChange(newValues);
                    }}
                  >
                   <AnimatePresence>
                       {isSelected && (
                           <motion.div
                               initial={{ opacity: 0, scale: 0.5 }} animate={{ opacity: 1, scale: 1 }} exit={{ opacity: 0, scale: 0.5 }}
                               className="absolute inset-0 bg-gradient-to-r from-blue-50 via-blue-100 to-blue-50 opacity-60"
                           />
                       )}
                   </AnimatePresence>
                    <div className="flex items-center gap-2 z-10">
                      {option.icon && (
                        <motion.div
                          className={cn("text-blue-600 transition-transform", isSelected && "text-blue-700")}
                          animate={{ scale: isSelected ? 1.1 : 1 }}
                        >
                          {option.icon}
                        </motion.div>
                      )}
                      <span className={cn("font-medium", isSelected && "text-blue-700")}>
                        {option.text}
                      </span>
                    </div>
                     <div className={cn(
                         "w-5 h-5 border rounded flex items-center justify-center transition-colors",
                         isSelected ? "bg-blue-500 border-blue-500" : "border-gray-300 bg-white"
                     )}>
                         <AnimatePresence>
                           {isSelected && (
                             <motion.div initial={{scale: 0}} animate={{scale: 1}} exit={{scale: 0}}>
                               <CheckCheck className="w-4 h-4 text-white" />
                             </motion.div>
                           )}
                         </AnimatePresence>
                     </div>
                  </motion.div>
                );
              })}
            </AnimatePresence>
             {error && (
                 <motion.p
                     initial={{ opacity: 0, y: -5 }} animate={{ opacity: 1, y: 0 }}
                     className="text-xs text-red-500 flex items-center gap-1"
                 >
                     <AlertCircle className="w-3 h-3"/> {error}
                 </motion.p>
             )}
            {(question.minSelections || question.maxSelections) && (
              <motion.div
                initial={{ opacity: 0 }} animate={{ opacity: 1 }}
                className="text-xs text-gray-500 mt-2 flex justify-between items-center p-2 bg-gray-50 rounded-lg"
              >
                <span className="flex items-center">
                  <Info className="h-3 w-3 mr-1 text-blue-500" />
                  נבחרו {selectedValues.length} אפשרויות
                </span>
                <span>
                  {question.minSelections && `מינימום: ${question.minSelections}`}
                  {question.minSelections && question.maxSelections && " • "}
                  {question.maxSelections && `מקסימום: ${question.maxSelections}`}
                </span>
              </motion.div>
            )}
          </div>
        );

       case "multiSelectWithOther":
         const selectedWithOtherValues = Array.isArray(internalValue) ? internalValue as string[] : [];
         const customAnswers = selectedWithOtherValues.filter(v => v.startsWith("custom:"));
         const predefinedAnswers = selectedWithOtherValues.filter(v => !v.startsWith("custom:"));
         const isCustomValueEmpty = !customValue.trim();
         const isMaxLengthReached = question.maxSelections !== undefined && selectedWithOtherValues.length >= question.maxSelections;

         return (
             <div className="space-y-4">
                 {/* Predefined Options */}
                 {question.options?.map((option) => {
                     if (option.value === 'other') return null;
                     const isSelected = predefinedAnswers.includes(option.value);
                     return (
                         <motion.div
                             key={option.value}
                             variants={optionVariants} initial="initial" animate="animate" exit="exit" whileHover="hover" whileTap="tap"
                             className={cn(
                                 "p-3 border rounded-lg cursor-pointer transition-all",
                                 "hover:bg-gray-50 flex items-center justify-between",
                                 "relative overflow-hidden",
                                 isSelected && "bg-blue-50 border-blue-500"
                             )}
                             onClick={() => {
                                 let newValues: string[];
                                 if (isSelected) {
                                     newValues = predefinedAnswers.filter(v => v !== option.value);
                                 } else {
                                     if (isMaxLengthReached) {
                                         setError(`ניתן לבחור עד ${question.maxSelections} אפשרויות`);
                                         setTimeout(() => setError(null), 2000);
                                         return;
                                     }
                                     newValues = [...predefinedAnswers, option.value];
                                 }
                                 handleValueChange([...newValues, ...customAnswers]);
                             }}
                         >
                            <AnimatePresence>
                                {isSelected && (
                                    <motion.div
                                        initial={{ opacity: 0, scale: 0.5 }}
                                        animate={{ opacity: 1, scale: 1 }}
                                        exit={{ opacity: 0, scale: 0.5 }}
                                        className="absolute inset-0 bg-gradient-to-r from-blue-50 via-blue-100 to-blue-50 opacity-60"
                                    />
                                )}
                            </AnimatePresence>
                             <div className="flex items-center gap-2 z-10">
                                 {option.icon && <motion.div animate={{ scale: isSelected ? 1.1 : 1 }} className={cn("text-blue-600", isSelected && "text-blue-700")}>{option.icon}</motion.div>}
                                 <span className={cn("font-medium", isSelected && "text-blue-700")}>{option.text}</span>
                             </div>
                             <div className={cn(
                                 "w-5 h-5 border rounded flex items-center justify-center transition-colors",
                                 isSelected ? "bg-blue-500 border-blue-500" : "border-gray-300 bg-white"
                             )}>
                                 <AnimatePresence>
                                   {isSelected && (
                                     <motion.div initial={{scale: 0}} animate={{scale: 1}} exit={{scale: 0}}>
                                       <CheckCheck className="w-4 h-4 text-white" />
                                     </motion.div>
                                   )}
                                 </AnimatePresence>
                             </div>
                         </motion.div>
                     );
                 })}

                 {/* Custom Input Section */}
                 <div className="space-y-2 border-t pt-4 mt-4">
                     <Label className="flex items-center gap-2 text-sm font-medium">
                         <Plus className="h-4 w-4 text-blue-500" />
                         הוספת אפשרות אחרת (אופציונלי)
                     </Label>
                     <div className="flex gap-2">
                         <Input
                             value={customValue}
                             onChange={(e) => setCustomValue(e.target.value)}
                             placeholder="הקלד/י אפשרות נוספת..."
                             className="flex-1 text-sm"
                             disabled={isMaxLengthReached && isCustomValueEmpty}
                         />
                         <Button
                             type="button"
                             variant="outline"
                             size="sm"
                             onClick={() => {
                                 if (!isCustomValueEmpty) {
                                     if (isMaxLengthReached) {
                                         setError(`ניתן לבחור עד ${question.maxSelections} אפשרויות`);
                                         setTimeout(() => setError(null), 2000);
                                         return;
                                     }
                                     const newCustomAnswer = `custom:${customValue.trim()}`;
                                     if (!customAnswers.includes(newCustomAnswer)) {
                                        handleValueChange([...predefinedAnswers, ...customAnswers, newCustomAnswer]);
                                        setCustomValue("");
                                     } else {
                                        setError("אפשרות זו כבר קיימת");
                                        setTimeout(() => setError(null), 2000);
                                     }
                                 }
                             }}
                             disabled={isCustomValueEmpty || isMaxLengthReached}
                         >
                             <Plus className="w-4 h-4 mr-1" />
                             הוסף
                         </Button>
                     </div>
                 </div>

                 {/* Display Custom Answers */}
                 {customAnswers.length > 0 && (
                     <motion.div
                         initial={{ opacity: 0, y: 10 }} animate={{ opacity: 1, y: 0 }}
                         className="space-y-2 bg-blue-50 p-3 rounded-lg border border-blue-200"
                     >
                         <Label className="text-xs text-gray-600 flex items-center font-normal">
                             <Edit className="h-3.5 w-3.5 mr-1 text-blue-600" />
                             תשובות שהוספת:
                         </Label>
                         <div className="space-y-1 mt-1">
                             {customAnswers.map((customVal, index) => (
                                 <motion.div
                                     key={index}
                                     initial={{ opacity: 0, x: -10 }} animate={{ opacity: 1, x: 0 }} exit={{ opacity: 0, x: 10 }}
                                     className="flex items-center justify-between p-1.5 bg-white rounded-md border border-blue-100 text-sm"
                                 >
                                     <div className="flex items-center">
                                         <CornerDownRight className="w-3.5 h-3.5 text-blue-400 mr-2" />
                                         <span className="text-gray-700">{customVal.replace("custom:", "")}</span>
                                     </div>
                                     <Button
                                         variant="ghost" size="icon"
                                         className="h-6 w-6 text-gray-400 hover:text-red-500 hover:bg-red-50 rounded-full p-0"
                                         onClick={() => {
                                             const newValues = selectedWithOtherValues.filter(v => v !== customVal);
                                             handleValueChange(newValues);
                                         }}
                                         aria-label="הסר תשובה מותאמת"
                                     >
                                         <Trash2 className="w-3.5 h-3.5" />
                                     </Button>
                                 </motion.div>
                             ))}
                         </div>
                     </motion.div>
                 )}
                 {error && (
                     <motion.p
                         initial={{ opacity: 0, y: -5 }} animate={{ opacity: 1, y: 0 }}
                         className="text-xs text-red-500 flex items-center gap-1"
                     >
                         <AlertCircle className="w-3 h-3"/> {error}
                     </motion.p>
                 )}
                 {(question.minSelections || question.maxSelections) && (
                     <motion.div
                         initial={{ opacity: 0 }} animate={{ opacity: 1 }}
                         className="text-xs text-gray-500 mt-2 flex justify-between items-center p-2 bg-gray-50 rounded-lg"
                     >
                         <span className="flex items-center">
                             <Info className="h-3 w-3 mr-1 text-blue-500" />
                             נבחרו {selectedWithOtherValues.length} אפשרויות
                         </span>
                         <span>
                             {question.minSelections && `מינימום: ${question.minSelections}`}
                             {question.minSelections && question.maxSelections && " • "}
                             {question.maxSelections && `מקסימום: ${question.maxSelections}`}
                         </span>
                     </motion.div>
                 )}
             </div>
         );

       case "scenario":
          return (
           <div className="space-y-2">
             {question.options?.map((option, index) => {
                const optionValue = option.value || option.text;
                const isSelected = internalValue === optionValue;

                return (
                 <motion.div
                   key={index}
                   variants={optionVariants} initial="initial" animate="animate" whileHover="hover" whileTap="tap"
                   className={cn(
                      "p-4 border rounded-lg cursor-pointer transition-all",
                      "hover:bg-gray-50 flex items-center justify-between",
                      "relative overflow-hidden",
                      isSelected && "bg-blue-50 border-blue-500 shadow-sm"
                    )}
                   onClick={() => handleValueChange(optionValue)}
                 >
                    <AnimatePresence>
                       {isSelected && (
                           <motion.div
                               initial={{ opacity: 0, scale: 0.5 }} animate={{ opacity: 1, scale: 1 }} exit={{ opacity: 0, scale: 0.5 }}
                               className="absolute inset-0 bg-gradient-to-r from-blue-50 via-blue-100 to-blue-50 opacity-60"
                           />
                       )}
                   </AnimatePresence>
                   <div className="flex-1 z-10">
                     <div className={cn("font-medium", isSelected && "text-blue-700")}>
                       {option.text}
                     </div>
                     {option.description && (
                       <div className={cn("text-sm text-gray-600 mt-1", isSelected && "text-blue-600")}>
                         {option.description}
                       </div>
                     )}
                   </div>
                     <div className="relative w-6 h-6 ml-2 z-10">
                         <AnimatePresence>
                             {isSelected ? (
                                 <motion.div
                                     key="check"
                                     initial={{ scale: 0, opacity: 0 }} animate={{ scale: 1, opacity: 1 }} exit={{ scale: 0, opacity: 0 }}
                                     className="absolute inset-0 flex items-center justify-center"
                                 >
                                     <CheckCircle className="h-5 w-5 text-blue-500" />
                                 </motion.div>
                             ) : null}
                             {isSelected && !question.isRequired && (
                                 <motion.div
                                     key="clear"
                                     initial={{ scale: 0, opacity: 0 }} animate={{ scale: 1, opacity: 1 }} exit={{ scale: 0, opacity: 0 }}
                                     className="absolute inset-0 flex items-center justify-center opacity-0 hover:opacity-100 transition-opacity"
                                 >
                                     <Button
                                         size="icon" variant="ghost"
                                         className="h-6 w-6 rounded-full text-gray-400 hover:text-red-500 hover:bg-red-50 p-0"
                                         onClick={(e) => { e.stopPropagation(); handleClear(); }}
                                         aria-label="נקה בחירה"
                                     >
                                         <X className="w-4 h-4" />
                                     </Button>
                                 </motion.div>
                             )}
                         </AnimatePresence>
                     </div>
                 </motion.div>
               );
              })}
            </div>
         );

       case "iconChoice":
         return (
           <div className="grid grid-cols-2 sm:grid-cols-3 gap-3">
             {question.options?.map((option) => {
               const isSelected = internalValue === option.value;

               return (
                 <TooltipProvider key={option.value} delayDuration={300}>
                   <Tooltip>
                     <TooltipTrigger asChild>
                       <motion.div
                         variants={optionVariants} initial="initial" animate="animate" whileHover="hover" whileTap="tap"
                         onClick={() => handleValueChange(option.value)}
                       >
                         <Card className={cn(
                           "p-4 cursor-pointer transition-all hover:shadow-md relative min-h-[100px]",
                           "flex flex-col items-center justify-center gap-2 text-center",
                           isSelected ? "ring-2 ring-blue-500 bg-blue-50" : "bg-white hover:bg-gray-50 border"
                         )}>
                           <AnimatePresence>
                               {isSelected && (
                                   <motion.div
                                       initial={{ scale: 0 }} animate={{ scale: 1 }} exit={{ scale: 0 }}
                                       className="absolute -top-1.5 -right-1.5 bg-blue-500 text-white rounded-full p-0.5 shadow"
                                   >
                                       <CheckCircle className="h-3.5 w-3.5" />
                                   </motion.div>
                               )}
                           </AnimatePresence>
                             {isSelected && !question.isRequired && (
                                 <motion.div
                                     key="clear-icon"
                                     initial={{ scale: 0, opacity: 0 }} animate={{ scale: 1, opacity: 1 }} exit={{ scale: 0, opacity: 0 }}
                                     className="absolute top-1 right-1 opacity-0 hover:opacity-100 transition-opacity"
                                 >
                                     <Button
                                         size="icon" variant="ghost"
                                         className="h-6 w-6 rounded-full text-gray-400 hover:text-red-500 hover:bg-red-50 p-0"
                                         onClick={(e) => { e.stopPropagation(); handleClear(); }}
                                         aria-label="נקה בחירה"
                                     >
                                         <X className="w-3.5 h-3.5" />
                                     </Button>
                                 </motion.div>
                             )}
                           <motion.div
                             animate={{ scale: isSelected ? 1.1 : 1, y: isSelected ? -2 : 0 }}
                             className={cn("text-3xl mb-1 transition-colors duration-200",
                                isSelected ? "text-blue-600" : "text-gray-500 group-hover:text-gray-700")}
                           >
                             {option.icon}
                           </motion.div>
                           <motion.span
                             animate={{ fontWeight: isSelected ? 600 : 500 }}
                             className={cn("text-sm", isSelected ? "text-blue-700" : "text-gray-700")}
                           >
                             {option.text}
                           </motion.span>
                         </Card>
                       </motion.div>
                     </TooltipTrigger>
                     {option.description && (
                       <TooltipContent side="top" className="max-w-xs">
                         <p>{option.description}</p>
                       </TooltipContent>
                     )}
                   </Tooltip>
                 </TooltipProvider>
               );
             })}
           </div>
         );

       case "openText":
         const textValue = (internalValue as string) || "";
         const hasMinLength = question.minLength !== undefined && question.minLength > 0;
         const hasMaxLength = question.maxLength !== undefined && question.maxLength > 0;
         const hasLength = hasMinLength || hasMaxLength;
         const isMinLengthMet = !hasMinLength || textValue.length >= (question.minLength ?? 0);
         const isCloseToMax = hasMaxLength && textValue.length > (question.maxLength ?? 0) * 0.85;
         const lengthExceeded = hasMaxLength && textValue.length > (question.maxLength ?? 0);
         const completionPercentage = hasMinLength
           ? Math.min(100, Math.round((textValue.length / (question.minLength ?? 1)) * 100))
           : 0;

         return (
           <div className="space-y-2">
             <div className={cn(
                "relative border rounded-md transition-all",
                isFocused && "ring-2 ring-blue-500",
                !isMinLengthMet && question.isRequired ? "border-red-300" : "border-gray-300",
                lengthExceeded ? "border-red-400 bg-red-50/50" : isCloseToMax ? "border-amber-300 bg-amber-50/50" : ""
             )}>
               <Textarea
                 value={textValue}
                 onChange={(e) => handleValueChange(e.target.value)}
                 onFocus={() => setIsFocused(true)}
                 onBlur={() => setIsFocused(false)}
                 placeholder={question.placeholder || "הקלד/י את תשובתך כאן..."}
                 className={cn(
                   "resize-y border-0 focus-visible:ring-0 w-full", "min-h-[150px]", "text-base leading-relaxed",
                   textValue.length > 0 ? "pr-12" : "pr-3", "py-3 pl-3"
                 )}
                 style={{ height: `${textAreaHeight}px` }}
                 aria-label={question.question}
                 aria-invalid={(!isMinLengthMet && question.isRequired) || lengthExceeded}
                 aria-describedby={question.id + "-length-info"}
               />
               {textValue.length > 0 && (
                 <div className="absolute top-2 left-2 flex flex-col gap-1">
                   <TooltipProvider>
                     <Tooltip>
                       <TooltipTrigger asChild>
                         <Button variant="ghost" size="icon" className="h-6 w-6 rounded-full" onClick={handleCopyText}>
                           {textCopied ? <CheckCheck className="h-3.5 w-3.5 text-green-500" /> : <Copy className="h-3.5 w-3.5 text-gray-400" />}
                         </Button>
                       </TooltipTrigger>
                       <TooltipContent side="right"><p>{textCopied ? "הועתק!" : "העתק טקסט"}</p></TooltipContent>
                     </Tooltip>
                   </TooltipProvider>
                    {!question.isRequired && (
                       <TooltipProvider>
                         <Tooltip>
                           <TooltipTrigger asChild>
                             <Button variant="ghost" size="icon" className="h-6 w-6 rounded-full" onClick={handleClear}>
                               <Eraser className="h-3.5 w-3.5 text-gray-400" />
                             </Button>
                           </TooltipTrigger>
                           <TooltipContent side="right"><p>נקה טקסט</p></TooltipContent>
                         </Tooltip>
                       </TooltipProvider>
                     )}
                 </div>
               )}
               {hasLength && (
                 <div id={question.id + "-length-info"} className="absolute bottom-2 left-2">
                   <Badge
                     variant="outline"
                     className={cn(
                       "text-xs font-normal transition-colors",
                       lengthExceeded ? "bg-red-100 text-red-800 border-red-200"
                       : isCloseToMax ? "bg-amber-100 text-amber-800 border-amber-200"
                       : "bg-gray-100 text-gray-600"
                     )}
                   >
                     {textValue.length}
                     {hasMaxLength && ` / ${question.maxLength}`}
                   </Badge>
                 </div>
               )}
             </div>
             {hasMinLength && question.isRequired && (
               <div className="space-y-1">
                 <div className="flex justify-between text-xs">
                   <span className={cn("flex items-center", !isMinLengthMet ? "text-amber-600" : "text-green-600")}>
                     {!isMinLengthMet ? (
                         <><AlertCircle className="h-3 w-3 mr-1" /> נדרשים עוד {(question.minLength ?? 0) - textValue.length} תווים</>
                     ) : (
                         <><CheckCircle className="h-3 w-3 mr-1" /> הגעת למינימום הנדרש</>
                     )}
                   </span>
                   <span className="font-medium">{completionPercentage}%</span>
                 </div>
                 <Progress value={completionPercentage} className="h-1.5" />
               </div>
             )}
              <div className="flex flex-wrap justify-between items-center mt-1 gap-2">
                  <div className="flex flex-wrap gap-1">
                      {hasMinLength && (
                           <div className={cn("inline-flex items-center text-xs px-2 py-0.5 rounded-full", !isMinLengthMet && question.isRequired ? "bg-red-100 text-red-700" : "bg-blue-100 text-blue-700")}>
                              <Info className="h-3 w-3 mr-1" /> {question.isRequired ? "נדרש לפחות" : "מומלץ לפחות"} {question.minLength ?? 0} תווים
                           </div>
                      )}
                      {lengthExceeded && (
                         <div className="inline-flex items-center text-xs px-2 py-0.5 rounded-full bg-red-100 text-red-700">
                             <AlertCircle className="h-3 w-3 mr-1" /> חריגה מהאורך המקסימלי
                         </div>
                      )}
                  </div>
                 {hasMinLength && (
                   <div className="text-xs text-gray-500 flex items-center">
                     <Clock className="h-3 w-3 mr-1" /> זמן כתיבה משוער: {Math.max(1, Math.ceil((question.minLength ?? 0) / 70))} דקות
                   </div>
                 )}
             </div>
             {question.description && (
               <Collapsible className="mt-4" open={isCollapsibleOpen} onOpenChange={setIsCollapsibleOpen}>
                 <CollapsibleTrigger asChild>
                   <Button variant="ghost" size="sm" className="w-full flex items-center justify-between px-3 py-1.5 h-auto hover:bg-blue-50 text-sm text-blue-700">
                     <div className="flex items-center"><Sparkles className="h-4 w-4 mr-2 text-blue-500" /> <span>טיפים למענה על שאלה זו</span></div>
                     {isCollapsibleOpen ? <ChevronUp className="h-4 w-4 text-blue-500" /> : <ChevronDown className="h-4 w-4 text-blue-500" />}
                   </Button>
                 </CollapsibleTrigger>
                 <CollapsibleContent className="p-4 bg-blue-50 rounded-md mt-2 text-sm text-blue-900 prose prose-sm max-w-none">
                    {question.description}
                 </CollapsibleContent>
               </Collapsible>
             )}
           </div>
         );

       case "budgetAllocation":
         const budgetValues = (internalValue as Record<string, number>) || {};
         const totalAllocatedPoints = Object.values(budgetValues).reduce((sum, val) => sum + (val || 0), 0);
         const totalPointsRequired = question.totalPoints ?? 100;
         const pointsDifference = totalPointsRequired - totalAllocatedPoints;
         const isAllocationComplete = pointsDifference === 0;
         const isOverAllocated = pointsDifference < 0;

         return (
             <div className="space-y-4">
                 {question.categories?.map((category) => {
                     const categoryValue = budgetValues[category.label] || 0;
                     const isActive = categoryValue > 0;

                     return (
                         <motion.div
                             key={category.label} className="space-y-2"
                             whileHover={{ scale: 1.01 }} transition={{ duration: 0.2 }}
                         >
                             <div className="flex justify-between items-center">
                                 <Label className="flex items-center gap-2 text-sm font-medium">
                                     {category.icon && (<motion.div animate={{ scale: isActive ? 1.1 : 1 }} className={cn("text-blue-600")}>{category.icon}</motion.div>)}
                                     {category.label}
                                 </Label>
                                 <Badge variant="outline" className={cn("transition-all text-sm px-2 py-0.5", isActive ? "bg-blue-100 text-blue-800 border-blue-200" : "bg-gray-100 text-gray-600 border-gray-200")}>
                                     {categoryValue.toFixed(0)}{question.totalPoints ? '' : '%'}
                                 </Badge>
                             </div>
                             <Slider
                                 value={[categoryValue]}
                                 min={category.min ?? 0} max={category.max ?? totalPointsRequired} step={1}
                                 onValueChange={(newValues: number[]) => {
                                     const currentOthersTotal = totalAllocatedPoints - categoryValue;
                                     const newValue = Math.min(newValues[0], totalPointsRequired - currentOthersTotal);
                                     handleValueChange({...budgetValues, [category.label]: newValue});
                                 }}
                                 className={cn("py-1", isActive ? "[&>span:first-child]:bg-blue-600" : "[&>span:first-child]:bg-gray-300")}
                                 aria-label={`הקצאת נקודות עבור ${category.label}`}
                             />
                             {category.description && <p className="text-xs text-gray-500 mt-1">{category.description}</p>}
                         </motion.div>
                     );
                 })}
                 <div className={cn("flex justify-between items-center p-3 rounded-lg border mt-4", isAllocationComplete ? "bg-green-50 border-green-200" : isOverAllocated ? "bg-red-50 border-red-200" : "bg-blue-50 border-blue-200")}>
                     <div className="text-sm">
                         סה״כ הוקצה:{" "}
                         <span className={cn("font-bold", isAllocationComplete ? "text-green-700" : isOverAllocated ? "text-red-700" : "text-blue-700")}>
                             {totalAllocatedPoints} / {totalPointsRequired}
                         </span>
                         {!isAllocationComplete && (
                             <span className={cn("text-xs ml-2", isOverAllocated ? "text-red-600" : "text-amber-600")}>
                                 ({pointsDifference > 0 ? `חסר ${pointsDifference}` : `עודף ${Math.abs(pointsDifference)}`})
                             </span>
                         )}
                     </div>
                     {totalAllocatedPoints > 0 && (!question.isRequired || isAllocationComplete) && (
                         <Button variant="ghost" size="sm" onClick={handleClear} className="text-xs text-red-500 hover:text-red-700 hover:bg-red-50" aria-label="אפס הקצאה">
                             <Eraser className="w-3.5 h-3.5 mr-1" /> אפס הכל
                         </Button>
                     )}
                 </div>
             </div>
         );

      default:
        console.warn("Unsupported question type:", question.type);
        return (
             <div className="p-4 bg-yellow-50 border border-yellow-200 rounded-md text-yellow-800">
                 <p><strong>אופס!</strong> סוג השאלה '{question.type}' אינו נתמך כרגע.</p>
             </div>
         );
    }
  };

  return (
    <div className={cn("space-y-4", className)}>
      {renderInput()}
    </div>
  );
}

==================================================
Contents of C:\Users\eytan\Desktop\שידוכים\shidduch-system\src\components\questionnaire\common\InteractiveScale.tsx:
==================================================
"use client";

import React, { useState, useCallback, useEffect, useRef } from "react";
import { motion, AnimatePresence } from "framer-motion";
import { cn } from "@/lib/utils";
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip";
import { Star, Heart, ThumbsUp } from "lucide-react";

interface ScaleOption {
  value: number;
  label: string;
  description?: string;
  icon?: React.ReactNode;
}

interface InteractiveScaleProps {
  min?: number;
  max?: number;
  step?: number;
  defaultValue?: number;
  value?: number;
  onChange?: (value: number) => void;
  onComplete?: (value: number) => void;
  labels?: {
    min: string;
    max: string;
    middle?: string;
  };
  descriptions?: {
    min?: string;
    max?: string;
    middle?: string;
  };
  options?: ScaleOption[];
  mode?: "numeric" | "icons" | "hearts" | "stars" | "thumbs";
  size?: "sm" | "md" | "lg";
  showLabels?: boolean;
  showValue?: boolean;
  showTooltips?: boolean;
  isDisabled?: boolean;
  className?: string;
  required?: boolean;
  name?: string;
  error?: string;
}

const defaultIcons = {
  stars: Star,
  hearts: Heart,
  thumbs: ThumbsUp,
};

export default function InteractiveScale({
  min = 1,
  max = 10,
  step = 1,
  defaultValue,
  value: controlledValue,
  onChange,
  onComplete,
  labels,
  options,
  mode = "numeric",
  size = "md",
  showLabels = true,
  showValue = true,
  showTooltips = true,
  isDisabled = false,
  className = "",
  required = false,
  name,
  error,
}: InteractiveScaleProps) {
  const [internalValue, setInternalValue] = useState<number | null>(
    defaultValue || null
  );
  const [hoveredValue, setHoveredValue] = useState<number | null>(null);
  const [isDragging, setIsDragging] = useState(false);
  const containerRef = useRef<HTMLDivElement>(null);

  const value = controlledValue !== undefined ? controlledValue : internalValue;

  const handleValueChange = useCallback(
    (newValue: number) => {
      if (!isDisabled) {
        setInternalValue(newValue);
        onChange?.(newValue);
      }
    },
    [isDisabled, onChange]
  );

  const handleClick = useCallback(
    (clickedValue: number) => {
      handleValueChange(clickedValue);
      onComplete?.(clickedValue);
    },
    [handleValueChange, onComplete]
  );

  const handleKeyPress = useCallback(
    (event: React.KeyboardEvent, itemValue: number) => {
      if (event.key === "Enter" || event.key === " ") {
        event.preventDefault();
        handleClick(itemValue);
      }
    },
    [handleClick]
  );

  const handleMouseMove = useCallback(
    (event: MouseEvent) => {
      if (isDragging && containerRef.current) {
        const rect = containerRef.current.getBoundingClientRect();
        const x = event.clientX - rect.left;
        const width = rect.width;
        const percentage = Math.max(0, Math.min(1, x / width));
        const range = max - min;
        const newValue = Math.round((percentage * range) / step) * step + min;
        handleValueChange(newValue);
        setHoveredValue(newValue);
      }
    },
    [isDragging, min, max, step, handleValueChange]
  );

  useEffect(() => {
    if (isDragging) {
      window.addEventListener("mousemove", handleMouseMove);
      window.addEventListener("mouseup", () => setIsDragging(false));
    }

    return () => {
      window.removeEventListener("mousemove", handleMouseMove);
      window.removeEventListener("mouseup", () => setIsDragging(false));
    };
  }, [isDragging, handleMouseMove]);

  const getScaleItems = () => {
    if (options) return options;

    const items: ScaleOption[] = [];
    for (let i = min; i <= max; i += step) {
      const item: ScaleOption = {
        value: i,
        label: i.toString(),
      };

      if (mode !== "numeric") {
        const Icon = defaultIcons[mode as keyof typeof defaultIcons];
        item.icon = <Icon className="w-5 h-5" />;
      }

      items.push(item);
    }
    return items;
  };

  const scaleItems = getScaleItems();
  const activeValue = hoveredValue !== null ? hoveredValue : value;

  const sizeClasses = {
    sm: "h-8 text-sm",
    md: "h-10 text-base",
    lg: "h-12 text-lg",
  };

  return (
    <div
      className={cn(
        "relative space-y-2",
        isDisabled && "opacity-50 cursor-not-allowed",
        className
      )}
    >
      <div
        ref={containerRef}
        className={cn(
          "relative flex items-center justify-between gap-1",
          sizeClasses[size]
        )}
        onMouseDown={() => !isDisabled && setIsDragging(true)}
      >
        {showLabels && labels && (
          <div className="absolute -top-6 left-0 right-0 flex justify-between text-sm text-gray-500">
            <span>{labels.min}</span>
            {labels.middle && <span>{labels.middle}</span>}
            <span>{labels.max}</span>
          </div>
        )}

        <div className="relative flex-1 flex items-center justify-between">
          <AnimatePresence>
            {scaleItems.map((item) => (
              <TooltipProvider key={item.value}>
                <Tooltip>
                  <TooltipTrigger asChild>
                    <motion.button
                      type="button"
                      className={cn(
                        "relative flex items-center justify-center",
                        "w-8 h-8 rounded-full transition-colors",
                        "focus:outline-none focus:ring-2 focus:ring-offset-2",
                        activeValue !== null &&
                          item.value <= activeValue &&
                          "bg-blue-500 text-white",
                        activeValue !== null &&
                          item.value > activeValue &&
                          "bg-gray-200",
                        isDisabled && "cursor-not-allowed"
                      )}
                      onClick={() => handleClick(item.value)}
                      onKeyDown={(e) => handleKeyPress(e, item.value)}
                      onMouseEnter={() =>
                        !isDisabled && setHoveredValue(item.value)
                      }
                      onMouseLeave={() => setHoveredValue(null)}
                      disabled={isDisabled}
                      aria-label={`Scale value ${item.value}`}
                      initial={{ scale: 0.8, opacity: 0 }}
                      animate={{ scale: 1, opacity: 1 }}
                      exit={{ scale: 0.8, opacity: 0 }}
                    >
                      {item.icon || item.label}
                    </motion.button>
                  </TooltipTrigger>
                  {showTooltips && item.description && (
                    <TooltipContent>
                      <p>{item.description}</p>
                    </TooltipContent>
                  )}
                </Tooltip>
              </TooltipProvider>
            ))}
          </AnimatePresence>
        </div>
      </div>

      {showValue && value !== null && (
        <div className="text-center text-sm text-gray-500">
          {`ערך נבחר: ${value}`}
        </div>
      )}

      {error && <div className="text-sm text-red-500 mt-1">{error}</div>}

      {required && (
        <input
          type="hidden"
          name={name}
          value={value || ""}
          required
          aria-hidden="true"
        />
      )}
    </div>
  );
}


==================================================
Contents of C:\Users\eytan\Desktop\שידוכים\shidduch-system\src\components\questionnaire\common\QuestionCard.tsx:
==================================================
// src/components/questionnaire/common/QuestionCard.tsx
import React, { useState } from "react";
import {
  Card,
  CardHeader,
  CardContent,
  CardFooter,
} from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Alert, AlertDescription } from "@/components/ui/alert";
import { Badge } from "@/components/ui/badge";
import {
  Bookmark,
  AlertCircle,
  HelpCircle,
  SkipForward,
  Info,
  Star,
  X,
  CornerRightDown, // Corrected from CornerDownRight
  MessageCircle,
  Lightbulb,
} from "lucide-react";
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip";
import { motion, AnimatePresence } from "framer-motion";
import type {
  Question,
  Answer,
  AnswerValue,
  QuestionDepth,
} from "../types/types";
import { cn } from "@/lib/utils";
import { useMediaQuery } from "../hooks/useMediaQuery";

interface QuestionCardProps {
  question: Question;
  answer?: Answer; // Assuming Answer type is defined elsewhere, includes value and potentially status
  depth: QuestionDepth;
  isRequired?: boolean;
  onAnswer?: (value: AnswerValue) => void; // Kept for potential direct answer handling if needed
  onSkip?: () => void;
  onBookmark?: () => void;
  onHelp?: () => void;
  className?: string;
  validationError?: string;
  isDisabled?: boolean;
  children?: React.ReactNode; // This is where AnswerInput will be rendered
  language?: string;
  onNext?: () => void; // Kept for potential future use
  onPrevious?: () => void; // Kept for potential future use
  isLastQuestion?: boolean; // Kept for potential future use
  isFirstQuestion?: boolean; // Kept for potential future use
}

// קונפיגורציה של צבעים ותוויות עבור רמות שאלה שונות
const depthColors = {
  BASIC: "border-blue-200 bg-blue-50/80",
  ADVANCED: "border-purple-200 bg-purple-50/80",
  EXPERT: "border-green-200 bg-green-50/80",
};

const depthGradients = {
  BASIC: "from-blue-50 to-white",
  ADVANCED: "from-purple-50 to-white",
  EXPERT: "from-green-50 to-white",
};

const depthBadgeColors = {
  BASIC: "bg-blue-100 text-blue-700 hover:bg-blue-200",
  ADVANCED: "bg-purple-100 text-purple-700 hover:bg-purple-200",
  EXPERT: "bg-green-100 text-green-700 hover:bg-green-200",
};

const depthLabels = {
  BASIC: "בסיסי",
  ADVANCED: "מתקדם",
  EXPERT: "מעמיק",
};

const depthDescriptions = {
  BASIC: "שאלות חובה המהוות את הבסיס להיכרות",
  ADVANCED: "שאלות מומלצות להיכרות מעמיקה יותר",
  EXPERT: "שאלות העשרה לחיבור מעמיק במיוחד",
};

export default function QuestionCard({
  question,
  depth,
  isRequired = false,
  onSkip,
  onBookmark,
  onHelp,
  className = "",
  validationError,
  isDisabled = false,
  children, // Children will contain the AnswerInput component
  language = "he", // Default language
}: QuestionCardProps) {
  const [isBookmarked, setIsBookmarked] = useState(false);
  const [showHelp, setShowHelp] = useState(false);
  const [showHint, setShowHint] = useState(false);
  const isMobile = useMediaQuery("(max-width: 640px)");

  // אפקטים ויזואליים באמצעות framer-motion
  const cardVariants = {
    initial: { opacity: 0, y: 20 },
    animate: { opacity: 1, y: 0, transition: { duration: 0.3 } },
    exit: { opacity: 0, y: -20, transition: { duration: 0.2 } },
  };

  const contentVariants = {
    initial: { opacity: 0 },
    animate: { opacity: 1, transition: { delay: 0.1, duration: 0.3 } },
  };

  const handleBookmark = () => {
    setIsBookmarked(!isBookmarked);
    onBookmark?.();
  };

  const handleHelp = () => {
    setShowHelp(!showHelp);
    onHelp?.();
  };

  // הרנדור משתנה בהתאם למכשיר
  const renderFooter = () => {
    if (isMobile) {
      // למובייל - השאר רק את המידע ללא כפתורים
      return (
        <div className="text-center text-xs text-gray-500">
          {question.metadata?.estimatedTime && (
            <div className="flex items-center justify-center">
              <Info className="h-3 w-3 mr-1 text-blue-400" />
              זמן מוערך: {question.metadata.estimatedTime} דקות
            </div>
          )}
        </div>
      );
    }

    // למסך רגיל - השאר רק את כפתור הדילוג אם קיים ואת המידע
    return (
      <div className="flex justify-between items-center">
        <div className="flex items-center gap-2">
          {onSkip && (
            <Button
              variant="ghost"
              size="sm"
              onClick={onSkip}
              disabled={isRequired || isDisabled}
              className={cn(
                "text-gray-500",
                (isRequired || isDisabled) && "opacity-50 cursor-not-allowed"
              )}
            >
              <SkipForward className="w-4 h-4 ml-1" />
              דלג
            </Button>
          )}
        </div>

        <div className="flex items-center">
          {question.metadata?.estimatedTime && (
            <div className="text-xs text-gray-500 mr-2 flex items-center">
              <Info className="h-3 w-3 mr-1 text-blue-400" />
              זמן מוערך: {question.metadata.estimatedTime} דקות
            </div>
          )}
        </div>
      </div>
    );
  };

  return (
    <motion.div
      // Using question.id as key might interfere with animations between questions
      // key={question.id}
      initial="initial"
      animate="animate"
      exit="exit"
      variants={cardVariants}
    >
      <Card
        className={cn(
          "transition-all duration-200 border shadow-sm",
          "relative", // Ensure relative positioning for the absolute background
          depthColors[depth],
          isDisabled ? "opacity-75 cursor-not-allowed" : "hover:shadow-md",
          "overflow-hidden",
          className
        )}
      >
        {/* רקע גרדיאנט עדין - *** תוקן עם pointer-events-none *** */}
        <div
          className={cn(
            "absolute inset-0 bg-gradient-to-b opacity-50",
            depthGradients[depth],
            "pointer-events-none" // Add this class to prevent blocking clicks
          )}
        />

        {/* Header Section */}
        <CardHeader className="relative flex flex-col space-y-2 pb-2 z-10">
          {" "}
          {/* Added z-10 */}
          <div className="flex items-center justify-between">
            <div className="flex flex-wrap items-center gap-2">
              <TooltipProvider delayDuration={300}>
                <Tooltip>
                  <TooltipTrigger asChild>
                    {/* Changed from asChild to avoid ref issues if Badge doesn't support it */}
                    <Badge
                      variant="outline"
                      className={cn(
                        "text-xs px-2 py-1 rounded-full font-normal cursor-default", // Added cursor-default
                        depthBadgeColors[depth]
                      )}
                    >
                      <Star className="h-3 w-3 mr-1" />
                      {depthLabels[depth]}
                    </Badge>
                  </TooltipTrigger>
                  <TooltipContent side="bottom" className="max-w-xs">
                    <p className="text-sm">{depthDescriptions[depth]}</p>
                  </TooltipContent>
                </Tooltip>
              </TooltipProvider>

              {isRequired && (
                <Badge variant="destructive" className="text-xs animate-pulse">
                  חובה *
                </Badge>
              )}
            </div>

            <div className="flex items-center gap-1">
              <TooltipProvider>
                <Tooltip>
                  <TooltipTrigger asChild>
                    <Button
                      variant="ghost"
                      size="sm"
                      onClick={handleBookmark}
                      className={cn(
                        "h-8 w-8 p-0 rounded-full transition-colors",
                        isBookmarked
                          ? "text-amber-500 bg-amber-50"
                          : "text-gray-400 hover:bg-gray-100"
                      )}
                      aria-label={isBookmarked ? "הסר סימניה" : "הוסף סימניה"}
                    >
                      <Bookmark className="w-4 h-4" />
                    </Button>
                  </TooltipTrigger>
                  <TooltipContent>
                    <p>{isBookmarked ? "הסר סימניה" : "הוסף סימניה"}</p>
                  </TooltipContent>
                </Tooltip>
              </TooltipProvider>

              <TooltipProvider>
                <Tooltip>
                  <TooltipTrigger asChild>
                    <Button
                      variant="ghost"
                      size="sm"
                      onClick={handleHelp}
                      className={cn(
                        "h-8 w-8 p-0 rounded-full transition-colors",
                        showHelp
                          ? "text-blue-500 bg-blue-50"
                          : "text-gray-400 hover:bg-gray-100"
                      )}
                      aria-label={showHelp ? "הסתר עזרה" : "הצג עזרה"}
                    >
                      <HelpCircle className="w-4 h-4" />
                    </Button>
                  </TooltipTrigger>
                  <TooltipContent>
                    <p>{showHelp ? "הסתר עזרה" : "הצג עזרה"}</p>
                  </TooltipContent>
                </Tooltip>
              </TooltipProvider>
            </div>
          </div>

          {/* Question Text */}
          <motion.div variants={contentVariants} className="relative">
            <div className="text-lg font-medium mt-2">{question.question}</div>

            {/* רמז קריאה למשתמשים לשאלות טקסט פתוח */}
            {question.type === "openText" && !isMobile && (
              <div className="absolute -right-4 -bottom-4 text-gray-400">
                <Button
                  variant="ghost"
                  size="sm"
                  className={cn(
                    "h-8 w-8 p-0 rounded-full text-blue-500 opacity-70 hover:opacity-100",
                    "flex items-center justify-center"
                  )}
                  onClick={() => setShowHint(!showHint)}
                  aria-label="הצג טיפים" // Added aria-label
                >
                  <Lightbulb className="h-4 w-4" />
                </Button>
              </div>
            )}
          </motion.div>
        </CardHeader>

        {/* Content Section */}
        <CardContent className="relative pt-2 space-y-4 z-10">
          {" "}
          {/* Added z-10 */}
          {/* Tips for writing */}
          <AnimatePresence>
            {showHint && question.type === "openText" && (
              <motion.div
                initial={{ opacity: 0, height: 0 }}
                animate={{ opacity: 1, height: "auto" }}
                exit={{ opacity: 0, height: 0 }}
                transition={{ duration: 0.3 }}
                className="bg-blue-50 p-3 rounded-md border border-blue-100 mb-3"
              >
                <div className="flex items-start">
                  <MessageCircle className="h-4 w-4 text-blue-500 mt-0.5 ml-2 flex-shrink-0" />
                  <div className="text-sm text-blue-700">
                    <p className="font-medium mb-1">טיפים לכתיבה:</p>
                    <ul className="list-disc mr-4 space-y-1 text-xs">
                      <li>התמקד/י בדוגמאות ספציפיות</li>
                      <li>שתף/י תחושות ומחשבות אישיות</li>
                      <li>הדגש/י את הנקודות החשובות עבורך ביותר</li>
                    </ul>
                  </div>
                  <Button
                    variant="ghost"
                    size="sm"
                    className="p-0 h-6 w-6 ml-1 text-blue-500"
                    onClick={() => setShowHint(false)}
                    aria-label="סגור טיפים" // Added aria-label
                  >
                    <X className="h-3 w-3" />
                  </Button>
                </div>
              </motion.div>
            )}
          </AnimatePresence>

          {/* Description if exists */}
          {question.description && (
            <div className="bg-gray-50 p-3 rounded-md border border-gray-100">
              <p className="text-sm text-gray-600 flex items-start">
                <Info className="inline-block h-4 w-4 mr-2 mt-0.5 text-blue-500 flex-shrink-0" />
                <span>{question.description}</span>
              </p>
            </div>
          )}

          {/* Help Text when shown */}
          <AnimatePresence>
            {showHelp && question.metadata?.helpText && (
              <motion.div
                initial={{ opacity: 0, y: -10 }}
                animate={{ opacity: 1, y: 0 }}
                exit={{ opacity: 0, y: -10 }}
                transition={{ duration: 0.2 }}
              >
                <Alert className="bg-blue-50 border-blue-200">
                  <CornerRightDown className="h-4 w-4 text-blue-500 mr-2" />
                  <AlertDescription className="text-sm text-blue-700">
                    {question.metadata.helpText}
                  </AlertDescription>
                </Alert>
              </motion.div>
            )}
          </AnimatePresence>

          {/* Validation Error */}
          <AnimatePresence>
            {validationError && (
              <motion.div
                initial={{ opacity: 0, y: -10 }}
                animate={{ opacity: 1, y: 0 }}
                exit={{ opacity: 0, y: -10 }}
              >
                <Alert variant="destructive" className="py-2">
                  <AlertCircle className="h-4 w-4 mr-2" />
                  <AlertDescription className="text-sm">
                    {validationError}
                  </AlertDescription>
                </Alert>
              </motion.div>
            )}
          </AnimatePresence>

          {/* Required Indicator */}
          {isRequired && !validationError && ( // Only show if no error is present
            <div className="text-xs text-red-500 flex items-center">
              <AlertCircle className="h-3 w-3 mr-1" />
              שאלת חובה
            </div>
          )}

          {/* Answer Component */}
          <div className="mt-4">
            <motion.div variants={contentVariants} className="relative">
              {children} {/* This renders the AnswerInput */}
            </motion.div>
          </div>
        </CardContent>

        {/* Footer Section */}
        <CardFooter className="relative flex justify-between items-center pt-4 border-t border-gray-100 bg-gray-50/50 z-10">
          {" "}
          {/* Added z-10 */}
          {renderFooter()}
        </CardFooter>
      </Card>
    </motion.div>
  );
}

==================================================
Contents of C:\Users\eytan\Desktop\שידוכים\shidduch-system\src\components\questionnaire\common\QuestionnaireCompletion.tsx:
==================================================
import React from "react";
import { Button } from "@/components/ui/button";
import {
  Card,
  CardContent,
  CardHeader,
  CardTitle,
  CardDescription,
} from "@/components/ui/card";
import { Send, CheckCircle2 } from "lucide-react";

interface QuestionnaireCompletionProps {
  onSendToMatching: () => void;
  isLoading?: boolean;
  isLoggedIn?: boolean;
}

const QuestionnaireCompletion: React.FC<QuestionnaireCompletionProps> = ({
  onSendToMatching,
  isLoading = false,
  isLoggedIn = false,
}) => {
  return (
    <div className="max-w-xl mx-auto p-4">
      <Card className="bg-green-50 border-green-200">
        <CardHeader>
          <div className="flex justify-center mb-4">
            <CheckCircle2 className="w-12 h-12 text-green-500" />
          </div>
          <CardTitle className="text-2xl text-center">
            כל הכבוד! סיימת את השאלון
          </CardTitle>
          <CardDescription className="text-center">
            {isLoggedIn
              ? "התשובות שלך יעזרו לנו למצוא עבורך את ההתאמה הטובה ביותר"
              : "כדי לשמור את התשובות ולהתחיל בתהליך ההתאמה, יש להתחבר למערכת"}
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-6">
          {isLoggedIn ? (
            <>
              <div className="text-center text-gray-600">
                <p>כעת ניתן לשלוח את השאלון לצוות האיפיון שלנו</p>
                <p className="text-sm mt-2">
                  הצוות יעבור על התשובות ויתחיל בתהליך ההתאמה
                </p>
              </div>
              <Button
                className="w-full"
                size="lg"
                onClick={onSendToMatching}
                disabled={isLoading}
              >
                <Send className="w-5 h-5 ml-2" />
                {isLoading ? "שולח..." : "שלח לאיפיון"}
              </Button>
            </>
          ) : (
            <Button className="w-full" size="lg" onClick={onSendToMatching}>
              התחבר למערכת
            </Button>
          )}
        </CardContent>
      </Card>
    </div>
  );
};

export default QuestionnaireCompletion;


==================================================
Contents of C:\Users\eytan\Desktop\שידוכים\shidduch-system\src\components\questionnaire\common\QuestionsList.tsx:
==================================================
// src/components/questionnaire/common/QuestionsList.tsx
import React from "react";
import { ScrollArea } from "@/components/ui/scroll-area";
import { CheckCircle, AlertCircle, CircleDot, ChevronLeft } from "lucide-react"; // הוספנו חץ שמאלה
import { cn } from "@/lib/utils";
import type {
  Question,
  QuestionnaireAnswer,
  AnswerValue,
} from "../types/types";
import { Badge } from "@/components/ui/badge"; // נוסיף Badge לרמת הקושי

interface QuestionsListProps {
  allQuestions: Question[];
  currentQuestionIndex: number;
  setCurrentQuestionIndex: (index: number) => void;
  answers: QuestionnaireAnswer[];
  language?: string;
  className?: string;
  onClose?: () => void; // פונקציה לסגירת הרשימה (שימושי במובייל)
}

const QuestionsList: React.FC<QuestionsListProps> = ({
  allQuestions,
  currentQuestionIndex,
  setCurrentQuestionIndex,
  answers,
  language = "he",
  className = "",
  onClose, // קבלת הפונקציה
}) => {
  const isRTL = language === "he";

  const findAnswer = (questionId: string): AnswerValue | undefined => {
    return answers.find((a) => a.questionId === questionId)?.value;
  };

  const isAnswerNotEmpty = (answer: AnswerValue | undefined): boolean => {
    if (answer === undefined || answer === null) return false;
    if (typeof answer === "string" && answer.trim() === "") return false;
    if (Array.isArray(answer) && answer.length === 0) return false;
    if (
      typeof answer === "object" &&
      !Array.isArray(answer) &&
      Object.keys(answer).length === 0
    )
      return false;
    return true;
  };

  // פונקציה לטיפול בלחיצה על פריט ברשימה
  const handleItemClick = (index: number) => {
    setCurrentQuestionIndex(index);
    onClose?.(); // קורא לפונקציית הסגירה אם היא קיימת (רלוונטי בעיקר למובייל)
  };

  // הגדרת צבעים ותוויות לרמות קושי
  const depthBadgeColors = {
    BASIC: "bg-blue-100 text-blue-700 hover:bg-blue-200",
    ADVANCED: "bg-purple-100 text-purple-700 hover:bg-purple-200",
    EXPERT: "bg-green-100 text-green-700 hover:bg-green-200",
  };
  const depthLabels = { BASIC: "בסיסי", ADVANCED: "מתקדם", EXPERT: "מעמיק" };

  return (
    <ScrollArea className={cn("h-[60vh] lg:h-[calc(100vh-18rem)]", className)}>
      <div className="space-y-2 p-1" dir={isRTL ? "rtl" : "ltr"}>
        {" "}
        {/* הוספנו dir */}
        {allQuestions.map((q, index) => {
          const answer = findAnswer(q.id);
          const isAnswered = isAnswerNotEmpty(answer);
          const isCurrent = index === currentQuestionIndex;

          let StatusIcon = <CircleDot className="h-4 w-4 text-gray-400" />; // אייקון ברירת מחדל
          let statusColorClass =
            "border-gray-200 hover:bg-gray-100 hover:border-gray-300"; // ברירת מחדל
          let textColorClass = "text-gray-700";

          if (isAnswered) {
            StatusIcon = <CheckCircle className="h-4 w-4 text-green-600" />;
            statusColorClass =
              "border-green-300 bg-green-50/60 hover:bg-green-100 hover:border-green-400";
            textColorClass = "text-gray-800"; // טקסט רגיל, לא ירוק
          } else if (q.isRequired) {
            StatusIcon = <AlertCircle className="h-4 w-4 text-red-600" />;
            statusColorClass =
              "border-red-300 bg-red-50/60 hover:bg-red-100 hover:border-red-400";
            textColorClass = "text-gray-800"; // טקסט רגיל, לא אדום
          }

          if (isCurrent) {
            statusColorClass =
              "bg-blue-100 border-blue-400 ring-2 ring-blue-500 ring-offset-1"; // טבעת בולטת
            textColorClass = "text-blue-900 font-semibold"; // טקסט כחול כהה ומודגש
          }

          return (
            <button
              key={q.id}
              type="button"
              className={cn(
                "w-full flex items-center justify-between text-start p-3 rounded-lg transition-all duration-150 border shadow-sm group", // שימוש ב-flex ו-justify-between
                statusColorClass
              )}
              onClick={() => handleItemClick(index)}
              aria-current={isCurrent ? "step" : undefined}
            >
              {/* תוכן ראשי - אייקון סטטוס, מספר וטקסט שאלה */}
              <div
                className={cn(
                  "flex items-start gap-3 flex-1 min-w-0",
                  textColorClass
                )}
              >
                {" "}
                {/* שימוש ב-gap */}
                <div className="flex-shrink-0 pt-0.5">{StatusIcon}</div>
                <div className="flex-1">
                  <span
                    className={cn("font-medium", isCurrent ? "font-bold" : "")}
                  >
                    {index + 1}.
                  </span>
                  <span
                    className="ms-1.5 text-sm leading-relaxed"
                    style={{ whiteSpace: "normal" }}
                  >
                    {" "}
                    {/* שימוש ב-ms (margin-start) שמתאים ל-RTL/LTR */}
                    {q.question}
                  </span>
                  {/* הצגת תגית רמת קושי מתחת לשאלה */}
                  <div className="mt-1.5">
                    <Badge
                      variant="outline"
                      className={cn(
                        "text-xs px-1.5 py-0.5 rounded-full font-normal border", // גבול דק
                        depthBadgeColors[q.depth]
                      )}
                    >
                      {depthLabels[q.depth]}
                    </Badge>
                  </div>
                </div>
              </div>

              {/* חץ המצביע על הפריט הנוכחי (מופיע רק בפריט הנוכחי) */}
              {isCurrent && (
                <ChevronLeft
                  className={cn(
                    "h-5 w-5 text-blue-600 flex-shrink-0 transform transition-transform",
                    isRTL ? "rotate-180" : "" // היפוך החץ ב-RTL
                  )}
                />
              )}
              {/* אייקון חץ כללי להצביע על אפשרות לחיצה (אופציונלי) */}
              {!isCurrent && (
                <ChevronLeft
                  className={cn(
                    "h-5 w-5 text-gray-400 flex-shrink-0 opacity-0 group-hover:opacity-100 transition-opacity", // מופיע ב-hover
                    isRTL ? "rotate-180" : ""
                  )}
                />
              )}
            </button>
          );
        })}
      </div>
    </ScrollArea>
  );
};

export default QuestionsList;


==================================================
Contents of C:\Users\eytan\Desktop\שידוכים\shidduch-system\src\components\questionnaire\common\WorldIntro.tsx:
==================================================
import React from "react";
import { motion } from "framer-motion";
import { Card, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Scroll, Heart, Users, User, ArrowRight } from "lucide-react";
import type { WorldId } from "../types/types";
import { cn } from "@/lib/utils";

interface WorldIntroProps {
  worldId: WorldId;
  title: string;
  description: string;
  estimatedTime: number;
  totalQuestions: number;
  requiredQuestions: number;
  depths: Array<"BASIC" | "ADVANCED" | "EXPERT">;
  onStart: () => void;
  className?: string;
}

const worldIcons = {
  RELIGION: Scroll,
  VALUES: Heart,
  RELATIONSHIP: Users,
  PERSONALITY: User,
  PARTNER: Heart,
} as const;

const worldStyles = {
  RELIGION: {
    bg: "bg-indigo-100",
    hover: "hover:bg-indigo-200",
    border: "border-indigo-300",
    text: "text-indigo-500",
  },
  VALUES: {
    bg: "bg-pink-100",
    hover: "hover:bg-pink-200",
    border: "border-pink-300",
    text: "text-pink-500",
  },
  RELATIONSHIP: {
    bg: "bg-purple-100",
    hover: "hover:bg-purple-200",
    border: "border-purple-300",
    text: "text-purple-500",
  },
  PERSONALITY: {
    bg: "bg-blue-100",
    hover: "hover:bg-blue-200",
    border: "border-blue-300",
    text: "text-blue-500",
  },
  PARTNER: {
    bg: "bg-pink-100",
    hover: "hover:bg-pink-200",
    border: "border-pink-300",
    text: "text-pink-500",
  },
} as const;

const depthInfo = {
  BASIC: {
    label: "שאלות בסיסיות",
    description: "שאלות חובה המהוות את הבסיס להיכרות",
    color: "text-blue-600",
  },
  ADVANCED: {
    label: "שאלות מתקדמות",
    description: "שאלות מומלצות להיכרות מעמיקה יותר",
    color: "text-purple-600",
  },
  EXPERT: {
    label: "שאלות מעמיקות",
    description: "שאלות העשרה לחיבור מעמיק במיוחד",
    color: "text-green-600",
  },
} as const;

export default function WorldIntro({
  worldId,
  title,
  description,
  estimatedTime,
  totalQuestions,
  requiredQuestions,
  depths,
  onStart,
  className = "",
}: WorldIntroProps) {
  const WorldIcon = worldIcons[worldId];

  const containerVariants = {
    hidden: { opacity: 0, y: 20 },
    visible: {
      opacity: 1,
      y: 0,
      transition: {
        duration: 0.5,
        staggerChildren: 0.1,
      },
    },
  };

  const itemVariants = {
    hidden: { opacity: 0, x: -20 },
    visible: { opacity: 1, x: 0 },
  };

  return (
    <motion.div
      className={cn("max-w-2xl mx-auto p-4", className)}
      variants={containerVariants}
      initial="hidden"
      animate="visible"
    >
      <Card className="overflow-hidden">
        <CardContent className="p-6 space-y-6">
          <motion.div
            variants={itemVariants}
            className="flex items-center gap-4"
          >
            <div className={cn("p-3 rounded-full", worldStyles[worldId].bg)}>
              <WorldIcon className={cn("w-8 h-8", worldStyles[worldId].text)} />
            </div>
            <div>
              <h2 className="text-2xl font-bold">{title}</h2>
              <p className="text-gray-500 mt-1">{description}</p>
            </div>
          </motion.div>

          <motion.div
            variants={itemVariants}
            className="grid grid-cols-3 gap-4"
          >
            <div className="text-center">
              <div className="text-2xl font-bold text-gray-800">
                {estimatedTime}
              </div>
              <div className="text-sm text-gray-500">דקות</div>
            </div>
            <div className="text-center">
              <div className="text-2xl font-bold text-gray-800">
                {totalQuestions}
              </div>
              <div className="text-sm text-gray-500">שאלות</div>
            </div>
            <div className="text-center">
              <div className="text-2xl font-bold text-gray-800">
                {requiredQuestions}
              </div>
              <div className="text-sm text-gray-500">שאלות חובה</div>
            </div>
          </motion.div>

          <motion.div variants={itemVariants} className="space-y-4">
            <h3 className="font-medium">רמות העומק בעולם זה:</h3>
            {depths.map((depth) => (
              <div
                key={depth}
                className="flex items-start gap-4 p-3 bg-gray-50 rounded-lg"
              >
                <div
                  className={cn(
                    "mt-1 w-2 h-2 rounded-full",
                    depth === "BASIC"
                      ? "bg-blue-500"
                      : depth === "ADVANCED"
                      ? "bg-purple-500"
                      : "bg-green-500"
                  )}
                />
                <div>
                  <h4 className={cn("font-medium", depthInfo[depth].color)}>
                    {depthInfo[depth].label}
                  </h4>
                  <p className="text-sm text-gray-600">
                    {depthInfo[depth].description}
                  </p>
                </div>
              </div>
            ))}
          </motion.div>

          <motion.div variants={itemVariants} className="pt-4">
            <Button onClick={onStart} className="w-full" size="lg">
              בוא/י נתחיל
              <ArrowRight className="w-5 h-5 mr-2" />
            </Button>
          </motion.div>
        </CardContent>
      </Card>
    </motion.div>
  );
}


==================================================
Contents of C:\Users\eytan\Desktop\שידוכים\shidduch-system\src\components\questionnaire\components\AccessibilityFeatures.tsx:
==================================================
"use client";

import React, { useState, useEffect } from "react";
import { Button } from "@/components/ui/button";
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip";
import {
  Accessibility,
  Plus,
  Minus,
  MoonStar,
  SunMedium,
  Type,
  MousePointer,
  Hand,
  Contrast,
  Speech,
  X,
} from "lucide-react";
import { cn } from "@/lib/utils";
import { Slider } from "@/components/ui/slider";
import { Label } from "@/components/ui/label";
import { Switch } from "@/components/ui/switch";

interface AccessibilityFeaturesProps {
  className?: string;
}

export default function AccessibilityFeatures({
  className,
}: AccessibilityFeaturesProps) {
  const [fontScale, setFontScale] = useState(1);
  const [contrastMode, setContrastMode] = useState<"normal" | "high" | "dark">(
    "normal"
  );
  const [reducedMotion, setReducedMotion] = useState(false);
  const [readableMode, setReadableMode] = useState(false);
  const [showAccessibilityPanel, setShowAccessibilityPanel] = useState(false);
  const [textReader, setTextReader] = useState(false);
  const [bigCursor, setBigCursor] = useState(false);

  // החל את ההגדרות שנשמרו בעבר
  useEffect(() => {
    // טען הגדרות מהלוקל סטורג' אם קיימות
    const savedSettings = localStorage.getItem("accessibilitySettings");
    if (savedSettings) {
      const settings = JSON.parse(savedSettings);
      setFontScale(settings.fontScale || 1);
      setContrastMode(settings.contrastMode || "normal");
      setReducedMotion(settings.reducedMotion || false);
      setReadableMode(settings.readableMode || false);
      setBigCursor(settings.bigCursor || false);
    }
  }, []);

  // שמור הגדרות ועדכן את ה-CSS בכל שינוי
  useEffect(() => {
    // שמור הגדרות בלוקל סטורג'
    const settings = {
      fontScale,
      contrastMode,
      reducedMotion,
      readableMode,
      bigCursor,
    };
    localStorage.setItem("accessibilitySettings", JSON.stringify(settings));

    // החל את השינויים על תגית ה-HTML
    const htmlElement = document.documentElement;

    // גודל גופן
    htmlElement.style.fontSize = `${fontScale * 100}%`;

    // מצב ניגודיות
    if (contrastMode === "high") {
      htmlElement.classList.add("high-contrast");
      htmlElement.classList.remove("dark-mode");
    } else if (contrastMode === "dark") {
      htmlElement.classList.add("dark-mode");
      htmlElement.classList.remove("high-contrast");
    } else {
      htmlElement.classList.remove("high-contrast", "dark-mode");
    }

    // הפחתת אנימציות
    if (reducedMotion) {
      htmlElement.classList.add("reduce-motion");
    } else {
      htmlElement.classList.remove("reduce-motion");
    }

    // מצב קריאה נוח
    if (readableMode) {
      htmlElement.classList.add("readable-font");
    } else {
      htmlElement.classList.remove("readable-font");
    }

    // סמן גדול
    if (bigCursor) {
      htmlElement.classList.add("big-cursor");
    } else {
      htmlElement.classList.remove("big-cursor");
    }

    // הוסף את ה-CSS לגיליון הסגנון
    const styleElement =
      document.getElementById("accessibility-styles") ||
      document.createElement("style");
    styleElement.id = "accessibility-styles";
    styleElement.textContent = `
      .high-contrast {
        filter: contrast(1.5);
      }
      
      .dark-mode {
        filter: invert(1) hue-rotate(180deg);
      }
      
      .reduce-motion * {
        animation-duration: 0.001s !important;
        transition-duration: 0.001s !important;
      }
      
      .readable-font {
        font-family: Arial, sans-serif !important;
        letter-spacing: 0.12em !important;
        word-spacing: 0.16em !important;
        line-height: 1.6 !important;
      }
      
      .big-cursor,
      .big-cursor * {
        cursor: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 16 16"><circle fill="%23000" stroke="%23fff" stroke-width="2" cx="8" cy="8" r="5"/></svg>') 16 16, auto !important;
      }
    `;

    if (!document.getElementById("accessibility-styles")) {
      document.head.appendChild(styleElement);
    }
  }, [fontScale, contrastMode, reducedMotion, readableMode, bigCursor]);

  // פונקציה להפעלת/כיבוי קורא טקסט
  const toggleTextReader = () => {
    setTextReader(!textReader);

    if (!textReader) {
      // הוסף מאזין ללחיצה על אלמנטים כדי להקריא את התוכן שלהם
      document.addEventListener("click", readSelectedText);
    } else {
      // הסר את המאזין
      document.removeEventListener("click", readSelectedText);
    }
  };

  // פונקציה להקראת טקסט שנבחר
  const readSelectedText = (e: MouseEvent) => {
    const element = e.target as HTMLElement;

    if (element && element.textContent) {
      // בדוק אם ה-Web Speech API נתמך בדפדפן
      if ("speechSynthesis" in window) {
        // עצור הקראות קודמות
        window.speechSynthesis.cancel();

        const text = element.textContent.trim();
        if (text) {
          const utterance = new SpeechSynthesisUtterance(text);
          utterance.lang = "he-IL"; // עברית
          window.speechSynthesis.speak(utterance);
        }
      }
    }
  };

  // איפוס כל ההגדרות
  const resetSettings = () => {
    setFontScale(1);
    setContrastMode("normal");
    setReducedMotion(false);
    setReadableMode(false);
    setBigCursor(false);
    setTextReader(false);

    // הסר את מאזין הקראת הטקסט
    document.removeEventListener("click", readSelectedText);
  };

  // הצגת הפאנל הצף
  const toggleAccessibilityPanel = () => {
    setShowAccessibilityPanel(!showAccessibilityPanel);
  };

  return (
    <>
      {/* כפתור נגישות קבוע */}
      <TooltipProvider>
        <Tooltip>
          <TooltipTrigger asChild>
            <Button
              variant="outline"
              size="icon"
              className={cn(
                "fixed z-50 rounded-full shadow-md",
                showAccessibilityPanel ? "bottom-4 right-4" : "top-20 right-4",
                className
              )}
              onClick={toggleAccessibilityPanel}
            >
              {showAccessibilityPanel ? (
                <X className="h-5 w-5" />
              ) : (
                <Accessibility className="h-5 w-5" />
              )}
            </Button>
          </TooltipTrigger>
          <TooltipContent side="left">
            <p>הגדרות נגישות</p>
          </TooltipContent>
        </Tooltip>
      </TooltipProvider>

      {/* פאנל נגישות */}
      {showAccessibilityPanel && (
        <div className="fixed z-40 bottom-4 right-16 bg-white p-4 rounded-lg shadow-lg border max-w-xs w-full">
          <div className="flex justify-between items-center mb-3">
            <h3 className="font-medium flex items-center">
              <Accessibility className="h-4 w-4 mr-2" />
              הגדרות נגישות
            </h3>
            <Button
              variant="ghost"
              size="sm"
              className="h-7 w-7 p-0 rounded-full"
              onClick={() => setShowAccessibilityPanel(false)}
            >
              <X className="h-4 w-4" />
            </Button>
          </div>

          <div className="space-y-4">
            {/* גודל טקסט */}
            <div className="space-y-2">
              <div className="flex justify-between">
                <Label className="text-sm flex items-center">
                  <Type className="h-3.5 w-3.5 mr-1" />
                  גודל טקסט
                </Label>
                <div className="flex items-center gap-1">
                  <Button
                    variant="outline"
                    size="sm"
                    className="h-6 w-6 p-0"
                    onClick={() => setFontScale(Math.max(0.8, fontScale - 0.1))}
                  >
                    <Minus className="h-3 w-3" />
                  </Button>
                  <span className="text-xs w-8 text-center">
                    {Math.round(fontScale * 100)}%
                  </span>
                  <Button
                    variant="outline"
                    size="sm"
                    className="h-6 w-6 p-0"
                    onClick={() => setFontScale(Math.min(1.5, fontScale + 0.1))}
                  >
                    <Plus className="h-3 w-3" />
                  </Button>
                </div>
              </div>
              <Slider
                value={[fontScale * 100]}
                min={80}
                max={150}
                step={5}
                onValueChange={(value) => setFontScale(value[0] / 100)}
                className="py-1"
              />
            </div>

            {/* מצב ניגודיות */}
            <div className="space-y-2">
              <Label className="text-sm flex items-center">
                <Contrast className="h-3.5 w-3.5 mr-1" />
                מצב תצוגה
              </Label>
              <div className="flex gap-1">
                <Button
                  variant={contrastMode === "normal" ? "default" : "outline"}
                  size="sm"
                  className="flex-1 h-8 text-xs"
                  onClick={() => setContrastMode("normal")}
                >
                  <SunMedium className="h-3.5 w-3.5 mr-1" />
                  רגיל
                </Button>
                <Button
                  variant={contrastMode === "high" ? "default" : "outline"}
                  size="sm"
                  className="flex-1 h-8 text-xs"
                  onClick={() => setContrastMode("high")}
                >
                  <Contrast className="h-3.5 w-3.5 mr-1" />
                  ניגודיות
                </Button>
                <Button
                  variant={contrastMode === "dark" ? "default" : "outline"}
                  size="sm"
                  className="flex-1 h-8 text-xs"
                  onClick={() => setContrastMode("dark")}
                >
                  <MoonStar className="h-3.5 w-3.5 mr-1" />
                  חשוך
                </Button>
              </div>
            </div>

            {/* מתגים נוספים */}
            <div className="space-y-3 pt-1 border-t">
              <div className="flex items-center justify-between">
                <Label className="text-sm flex items-center">
                  <Speech className="h-3.5 w-3.5 mr-1" />
                  הקראת תוכן
                </Label>
                <Switch
                  checked={textReader}
                  onCheckedChange={toggleTextReader}
                />
              </div>

              <div className="flex items-center justify-between">
                <Label className="text-sm flex items-center">
                  <MousePointer className="h-3.5 w-3.5 mr-1" />
                  סמן גדול
                </Label>
                <Switch checked={bigCursor} onCheckedChange={setBigCursor} />
              </div>

              <div className="flex items-center justify-between">
                <Label className="text-sm flex items-center">
                  <Type className="h-3.5 w-3.5 mr-1" />
                  פונט קריא
                </Label>
                <Switch
                  checked={readableMode}
                  onCheckedChange={setReadableMode}
                />
              </div>

              <div className="flex items-center justify-between">
                <Label className="text-sm flex items-center">
                  <Hand className="h-3.5 w-3.5 mr-1" />
                  הפחתת אנימציות
                </Label>
                <Switch
                  checked={reducedMotion}
                  onCheckedChange={setReducedMotion}
                />
              </div>
            </div>

            {/* כפתור איפוס */}
            <Button
              variant="outline"
              size="sm"
              className="w-full mt-2"
              onClick={resetSettings}
            >
              איפוס הגדרות
            </Button>
          </div>
        </div>
      )}
    </>
  );
}


==================================================
Contents of C:\Users\eytan\Desktop\שידוכים\shidduch-system\src\components\questionnaire\components\FAQ.tsx:
==================================================
import React, { useState } from "react";
import {
  Accordion,
  AccordionContent,
  AccordionItem,
  AccordionTrigger,
} from "@/components/ui/accordion";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { cn } from "@/lib/utils";
import {
  Search,
  HelpCircle,
  ArrowRight,
  Info,
  Clock,
  Star,
  AlertCircle,
} from "lucide-react";
import { Badge } from "@/components/ui/badge";

interface FAQItem {
  id: string;
  question: string;
  answer: React.ReactNode;
  category: "process" | "technical" | "privacy" | "results" | "general";
  isPopular?: boolean;
}

interface FAQProps {
  className?: string;
  title?: string;
  subtitle?: string;
  showSearch?: boolean;
  showCategories?: boolean;
  initialOpenId?: string;
  items?: FAQItem[];
}

// שאלות נפוצות לדוגמה
const defaultFAQItems: FAQItem[] = [
  {
    id: "save-progress",
    question: "האם אפשר לשמור את ההתקדמות ולהמשיך בפעם אחרת?",
    answer: (
      <div className="space-y-2">
        <p>
          כן, המערכת שומרת באופן אוטומטי את התקדמותך בשאלון. תוכל/י לחזור בכל עת
          ולהמשיך מהמקום שבו הפסקת.
        </p>
        <div className="flex items-start gap-2 mt-2 p-3 bg-blue-50 rounded-md">
          <Clock className="h-5 w-5 text-blue-500 mt-0.5" />
          <div className="text-sm text-blue-700">
            <p className="font-medium mb-1">עצה:</p>
            <p>
              בכל פעם שאתה עובר לעולם אחר או מסיים עולם, המערכת שומרת אוטומטית
              את התקדמותך.
            </p>
          </div>
        </div>
      </div>
    ),
    category: "technical",
    isPopular: true,
  },
  {
    id: "time-to-complete",
    question: "כמה זמן לוקח להשלים את השאלון?",
    answer: (
      <p>
        השאלון כולו אורך כ-30-40 דקות, אך אין צורך למלא הכל ברצף. אפשר למלא חלק
        בכל פעם. העולמות השונים אורכים כ-5-10 דקות כל אחד.
      </p>
    ),
    category: "process",
    isPopular: true,
  },
  {
    id: "required-questions",
    question: "האם חובה לענות על כל השאלות?",
    answer: (
      <div className="space-y-2">
        <p>
          לא, רק השאלות המסומנות ב-
          <Badge variant="destructive" className="text-xs">
            חובה *
          </Badge>{" "}
          הן שאלות שחייבים לענות עליהן. שאלות אלו חיוניות ליצירת פרופיל התאמה
          בסיסי.
        </p>
        <p>
          עם זאת, ככל שתענה/י על יותר שאלות, כך נוכל לעשות התאמה טובה יותר
          עבורך.
        </p>
      </div>
    ),
    category: "process",
  },
  {
    id: "how-matching-works",
    question: "איך עובד תהליך ההתאמה?",
    answer: (
      <div className="space-y-3">
        <p>תהליך ההתאמה מבוסס על מספר שלבים:</p>
        <ol className="list-decimal mr-5 space-y-1">
          <li>מילוי השאלון ויצירת פרופיל אישיותי וערכי</li>
          <li>ניתוח התשובות על ידי צוות מקצועי וגם אלגוריתם ממוחשב</li>
          <li>איתור התאמות פוטנציאליות על סמך קריטריונים רבים</li>
          <li>הצגת התאמות מובילות לשני הצדדים</li>
          <li>במקרה של הסכמה הדדית, תיווך לקשר ראשוני</li>
        </ol>
      </div>
    ),
    category: "process",
    isPopular: true,
  },
  {
    id: "privacy-info",
    question: "מי יכול לראות את התשובות שלי?",
    answer: (
      <div className="space-y-2">
        <p>
          המידע שלך נשמר בסודיות מוחלטת. רק צוות המאצמייקינג המקצועי שלנו יכול
          לראות את התשובות המלאות שלך, וזאת אך ורק לצורך יצירת התאמות.
        </p>
        <div className="flex items-start gap-2 mt-2 p-3 bg-blue-50 rounded-md">
          <Info className="h-5 w-5 text-blue-500 mt-0.5" />
          <div className="text-sm text-blue-700">
            <p>
              בעת הצגת התאמה פוטנציאלית, הצד השני רואה רק פרטים כלליים ותחומי
              עניין משותפים, לא את כל התשובות שלך.
            </p>
          </div>
        </div>
      </div>
    ),
    category: "privacy",
  },
  {
    id: "edit-answers",
    question: "האם ניתן לערוך תשובות אחרי שסיימתי?",
    answer: (
      <p>
        כן, תמיד אפשר לחזור ולערוך את התשובות. פשוט היכנס/י לשאלון דרך הפרופיל
        האישי ובחר/י את העולם שתרצה/י לערוך. שינוי התשובות עשוי להשפיע על
        ההתאמות העתידיות שלך.
      </p>
    ),
    category: "technical",
  },
  {
    id: "match-percentage",
    question: "איך מחושב אחוז ההתאמה?",
    answer: (
      <div className="space-y-2">
        <p>אחוז ההתאמה מחושב על סמך מגוון פרמטרים:</p>
        <ul className="list-disc mr-5 space-y-1">
          <li>מידת ההתאמה בערכי ליבה ואמונות</li>
          <li>סגנון חיים ושאיפות לעתיד</li>
          <li>ציפיות מחיי משפחה וזוגיות</li>
          <li>תחומי עניין משותפים</li>
          <li>התאמה רגשית וקוגניטיבית</li>
        </ul>
        <div className="flex items-start gap-2 mt-2 p-3 bg-amber-50 rounded-md border border-amber-100">
          <Star className="h-5 w-5 text-amber-500 mt-0.5" />
          <div className="text-sm text-amber-700">
            <p>
              אחוז התאמה גבוה מעיד על פוטנציאל טוב לקשר משמעותי, אך זכרו שכימיה
              אישית ומפגש פנים אל פנים הם תמיד המבחן האמיתי!
            </p>
          </div>
        </div>
      </div>
    ),
    category: "results",
  },
  {
    id: "incomplete-questionnaire",
    question: "מה קורה אם לא אשלים את כל השאלון?",
    answer: (
      <div className="space-y-2">
        <p>
          אתה יכול להתחיל לקבל התאמות גם אם לא השלמת את כל העולמות בשאלון, בתנאי
          שענית על שאלות החובה ועל מספיק שאלות כדי ליצור פרופיל בסיסי.
        </p>
        <div className="flex items-start gap-2 mt-2 p-3 bg-red-50 rounded-md border border-red-100">
          <AlertCircle className="h-5 w-5 text-red-500 mt-0.5" />
          <div className="text-sm text-red-700">
            <p>
              עם זאת, ככל שתשלים יותר שאלות, כך תגדל הדיוק של ההתאמות שתקבל.
              מומלץ להשלים את כל השאלות בהדרגה.
            </p>
          </div>
        </div>
      </div>
    ),
    category: "process",
  },
  {
    id: "inactive-account",
    question: "מה קורה אם אני לא פעיל/ה לתקופה ממושכת?",
    answer: (
      <p>
        אם חשבונך לא יהיה פעיל למשך 3 חודשים, נשלח לך התראה בדואל. לאחר 6
        חודשים של חוסר פעילות, הפרופיל שלך יוגדר כלא פעיל ולא יוצג בהתאמות
        חדשות. תוכל/י תמיד להפעיל אותו מחדש בכניסה לחשבון.
      </p>
    ),
    category: "general",
  },
];

export default function FAQ({
  className,
  title = "שאלות נפוצות",
  subtitle = "כל מה שחשוב לדעת על השאלון ותהליך ההתאמה",
  showSearch = true,
  showCategories = true,
  initialOpenId,
  items = defaultFAQItems,
}: FAQProps) {
  const [searchQuery, setSearchQuery] = useState("");
  const [activeCategory, setActiveCategory] = useState<string | null>(null);
  const [expandedItems, setExpandedItems] = useState<string[]>(
    initialOpenId ? [initialOpenId] : []
  );

  // קטגוריות שאלות נפוצות
  const categories = [
    {
      id: "process",
      label: "תהליך ההתאמה",
      icon: <ArrowRight className="h-4 w-4" />,
    },
    {
      id: "technical",
      label: "טכני",
      icon: <HelpCircle className="h-4 w-4" />,
    },
    {
      id: "privacy",
      label: "פרטיות ואבטחה",
      icon: <Info className="h-4 w-4" />,
    },
    { id: "results", label: "תוצאות", icon: <Star className="h-4 w-4" /> },
    { id: "general", label: "כללי", icon: <Info className="h-4 w-4" /> },
  ];

  // סינון שאלות לפי חיפוש וקטגוריה
  const filteredItems = items.filter((item) => {
    const matchesSearch =
      !searchQuery ||
      item.question.toLowerCase().includes(searchQuery.toLowerCase()) ||
      (typeof item.answer === "string" &&
        item.answer.toLowerCase().includes(searchQuery.toLowerCase()));

    const matchesCategory = !activeCategory || item.category === activeCategory;

    return matchesSearch && matchesCategory;
  });

  return (
    <Card className={cn("shadow-sm", className)}>
      <CardHeader className="pb-3">
        <CardTitle className="text-lg md:text-xl">{title}</CardTitle>
        {subtitle && <p className="text-gray-500 text-sm">{subtitle}</p>}

        {/* חיפוש */}
        {showSearch && (
          <div className="relative mt-2">
            <Search className="absolute left-3 top-2.5 h-4 w-4 text-gray-400" />
            <Input
              placeholder="חיפוש שאלה..."
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
              className="pl-10 bg-gray-50"
            />
          </div>
        )}

        {/* קטגוריות */}
        {showCategories && (
          <div className="flex flex-wrap gap-2 mt-3">
            <Badge
              variant={activeCategory === null ? "default" : "outline"}
              className="cursor-pointer"
              onClick={() => setActiveCategory(null)}
            >
              הכל
            </Badge>

            {categories.map((category) => (
              <Badge
                key={category.id}
                variant={activeCategory === category.id ? "default" : "outline"}
                className="cursor-pointer flex items-center gap-1"
                onClick={() =>
                  setActiveCategory(
                    activeCategory === category.id ? null : category.id
                  )
                }
              >
                {category.icon}
                {category.label}
              </Badge>
            ))}
          </div>
        )}
      </CardHeader>

      <CardContent>
        {filteredItems.length === 0 ? (
          <div className="text-center py-8">
            <HelpCircle className="h-12 w-12 mx-auto text-gray-300 mb-2" />
            <p className="text-gray-500">לא נמצאו שאלות שתואמות את החיפוש</p>
          </div>
        ) : (
          <Accordion
            type="multiple"
            value={expandedItems}
            onValueChange={setExpandedItems}
            className="space-y-2"
          >
            {filteredItems.map((item) => (
              <AccordionItem
                key={item.id}
                value={item.id}
                className={cn(
                  "border rounded-lg px-4 py-1",
                  expandedItems.includes(item.id)
                    ? "bg-blue-50 border-blue-200"
                    : "bg-white border-gray-200 hover:border-blue-200"
                )}
              >
                <AccordionTrigger className="hover:no-underline py-3">
                  <div className="flex items-center gap-2 text-right">
                    <span className="font-medium">{item.question}</span>
                    {item.isPopular && (
                      <Badge
                        variant="outline"
                        className="bg-amber-50 text-amber-700 border-amber-200 text-xs"
                      >
                        נפוץ
                      </Badge>
                    )}
                  </div>
                </AccordionTrigger>
                <AccordionContent className="text-gray-700 pt-1 pb-4">
                  {item.answer}
                </AccordionContent>
              </AccordionItem>
            ))}
          </Accordion>
        )}
      </CardContent>
    </Card>
  );
}


==================================================
Contents of C:\Users\eytan\Desktop\שידוכים\shidduch-system\src\components\questionnaire\components\InteractiveScale.tsx:
==================================================
import React, { useState, useCallback, useEffect, useRef } from "react";
import { motion, AnimatePresence } from "framer-motion";
import { cn } from "@/lib/utils";
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip";
import {
  Star,
  Heart,
  ThumbsUp,
  Sparkles,
  Info,
  AlertCircle,
} from "lucide-react";
import { useMediaQuery } from "../hooks/useMediaQuery";
import { Progress } from "@/components/ui/progress";

interface ScaleOption {
  value: number;
  label: string;
  description?: string;
  icon?: React.ReactNode;
}

interface InteractiveScaleProps {
  min?: number;
  max?: number;
  step?: number;
  defaultValue?: number;
  value?: number;
  onChange?: (value: number) => void;
  onComplete?: (value: number) => void;
  labels?: {
    min: string;
    max: string;
    middle?: string;
  };
  descriptions?: {
    min?: string;
    max?: string;
    middle?: string;
  };
  options?: ScaleOption[];
  mode?: "numeric" | "icons" | "hearts" | "stars" | "thumbs";
  size?: "sm" | "md" | "lg";
  showLabels?: boolean;
  showValue?: boolean;
  showTooltips?: boolean;
  isDisabled?: boolean;
  className?: string;
  required?: boolean;
  name?: string;
  error?: string;
}

const defaultIcons = {
  stars: Star,
  hearts: Heart,
  thumbs: ThumbsUp,
};

export default function InteractiveScale({
  min = 1,
  max = 10,
  step = 1,
  defaultValue,
  value: controlledValue,
  onChange,
  onComplete,
  labels,
  options,
  mode = "numeric",
  size = "md",
  showLabels = true,
  showValue = true,
  showTooltips = true,
  isDisabled = false,
  className = "",
  required = false,
  name,
  error,
  descriptions,
}: InteractiveScaleProps) {
  const [internalValue, setInternalValue] = useState<number | null>(
    defaultValue || null
  );
  const [hoveredValue, setHoveredValue] = useState<number | null>(null);
  const [isDragging, setIsDragging] = useState(false);
  const [isTouching, setIsTouching] = useState(false);
  const [hintVisible, setHintVisible] = useState(false);
  const containerRef = useRef<HTMLDivElement>(null);
  const trackRef = useRef<HTMLDivElement>(null);

  const isMobileDevice = useMediaQuery("(max-width: 640px)");
  const isTablet = useMediaQuery("(max-width: 1024px)");

  const value = controlledValue !== undefined ? controlledValue : internalValue;

  // טיימר להצגת הרמז
  useEffect(() => {
    // אם יש ערך - הסתר את הרמז
    if (value !== null) {
      setHintVisible(false);
      return;
    }

    // הצג רמז למשתמש אחרי 2 שניות אם אין ערך
    const timer = setTimeout(() => {
      if (value === null) {
        setHintVisible(true);
      }
    }, 2000);

    return () => clearTimeout(timer);
  }, [value]);

  const handleValueChange = useCallback(
    (newValue: number) => {
      if (!isDisabled) {
        setInternalValue(newValue);
        onChange?.(newValue);
        setHintVisible(false);
      }
    },
    [isDisabled, onChange]
  );

  const handleClick = useCallback(
    (clickedValue: number) => {
      handleValueChange(clickedValue);
      onComplete?.(clickedValue);
    },
    [handleValueChange, onComplete]
  );

  const handleTouchStart = useCallback(() => {
    if (!isDisabled) {
      setIsTouching(true);
    }
  }, [isDisabled]);

  const handleTouchMove = useCallback(
    (event: TouchEvent) => {
      if (isTouching && containerRef.current) {
        const touch = event.touches[0];
        const rect = containerRef.current.getBoundingClientRect();
        const x = touch.clientX - rect.left;
        const width = rect.width;
        const percentage = Math.max(0, Math.min(1, x / width));
        const range = max - min;
        const newValue = Math.round((percentage * range) / step) * step + min;

        handleValueChange(newValue);
        setHoveredValue(newValue);
      }
    },
    [isTouching, min, max, step, handleValueChange]
  );

  const handleTouchEnd = useCallback(() => {
    setIsTouching(false);
    if (hoveredValue !== null) {
      onComplete?.(hoveredValue);
    }
  }, [hoveredValue, onComplete]);

  const handleKeyPress = useCallback(
    (event: React.KeyboardEvent, itemValue: number) => {
      if (event.key === "Enter" || event.key === " ") {
        event.preventDefault();
        handleClick(itemValue);
      } else if (event.key === "ArrowRight" || event.key === "ArrowUp") {
        event.preventDefault();
        const nextValue = Math.min(max, itemValue + step);
        handleClick(nextValue);
      } else if (event.key === "ArrowLeft" || event.key === "ArrowDown") {
        event.preventDefault();
        const prevValue = Math.max(min, itemValue - step);
        handleClick(prevValue);
      }
    },
    [handleClick, max, min, step]
  );

  const handleMouseMove = useCallback(
    (event: MouseEvent) => {
      if (isDragging && containerRef.current) {
        const rect = containerRef.current.getBoundingClientRect();
        const x = event.clientX - rect.left;
        const width = rect.width;
        const percentage = Math.max(0, Math.min(1, x / width));
        const range = max - min;
        const newValue = Math.round((percentage * range) / step) * step + min;
        handleValueChange(newValue);
        setHoveredValue(newValue);
      }
    },
    [isDragging, min, max, step, handleValueChange]
  );

  const handleTrackClick = useCallback(
    (event: React.MouseEvent) => {
      if (isDisabled) return;

      if (trackRef.current) {
        const rect = trackRef.current.getBoundingClientRect();
        const x = event.clientX - rect.left;
        const width = rect.width;
        const percentage = Math.max(0, Math.min(1, x / width));
        const range = max - min;
        const newValue = Math.round((percentage * range) / step) * step + min;
        handleClick(newValue);
      }
    },
    [isDisabled, min, max, step, handleClick]
  );

  useEffect(() => {
    if (isDragging) {
      window.addEventListener("mousemove", handleMouseMove);
      window.addEventListener("mouseup", () => {
        setIsDragging(false);
        if (hoveredValue !== null) {
          onComplete?.(hoveredValue);
        }
      });
    }

    return () => {
      window.removeEventListener("mousemove", handleMouseMove);
      window.removeEventListener("mouseup", () => setIsDragging(false));
    };
  }, [isDragging, handleMouseMove, hoveredValue, onComplete]);

  useEffect(() => {
    if (isTouching) {
      window.addEventListener("touchmove", handleTouchMove);
      window.addEventListener("touchend", handleTouchEnd);
    }

    return () => {
      window.removeEventListener("touchmove", handleTouchMove);
      window.removeEventListener("touchend", handleTouchEnd);
    };
  }, [isTouching, handleTouchMove, handleTouchEnd]);

  const getScaleItems = () => {
    if (options) return options;

    const items: ScaleOption[] = [];
    for (let i = min; i <= max; i += step) {
      const item: ScaleOption = {
        value: i,
        label: i.toString(),
      };

      if (mode !== "numeric") {
        const Icon = defaultIcons[mode as keyof typeof defaultIcons];
        item.icon = <Icon className="w-5 h-5" />;
      }

      items.push(item);
    }
    return items;
  };

  const scaleItems = getScaleItems();
  const activeValue = hoveredValue !== null ? hoveredValue : value;

  const sizeClasses = {
    sm: "h-8 text-sm gap-1",
    md: "h-10 text-base gap-1.5",
    lg: "h-12 text-lg gap-2",
  };

  // לקבוע אם להראות את התיאור - התיאור יוצג רק אם יש ערך פעיל ויש תיאור
  const showDescription =
    activeValue !== null &&
    descriptions &&
    ((activeValue === min && descriptions.min) ||
      (activeValue === max && descriptions.max) ||
      (activeValue === Math.floor((min + max) / 2) && descriptions.middle));

  const getDescription = () => {
    if (activeValue === null || !descriptions) return "";

    if (activeValue === min) return descriptions.min || "";
    if (activeValue === max) return descriptions.max || "";
    if (activeValue === Math.floor((min + max) / 2))
      return descriptions.middle || "";

    if (options) {
      const option = options.find((o) => o.value === activeValue);
      return option?.description || "";
    }

    return "";
  };

  // חישוב אחוז ערך הסולם הנוכחי
  const getValuePercentage = () => {
    if (activeValue === null) return 0;
    return ((activeValue - min) / (max - min)) * 100;
  };

  // אנימציות
  const variants = {
    hidden: { opacity: 0, scale: 0.8 },
    visible: { opacity: 1, scale: 1, transition: { duration: 0.2 } },
    hover: { scale: 1.1, transition: { duration: 0.2 } },
    tap: { scale: 0.95, transition: { duration: 0.1 } },
  };

  // רכיב שמציג תיאור לערך הנוכחי
  const ValueDescription = () => {
    const description = getDescription();
    if (!description) return null;

    return (
      <motion.div
        initial={{ opacity: 0, y: 10 }}
        animate={{ opacity: 1, y: 0 }}
        exit={{ opacity: 0, y: 10 }}
        className="mt-4 p-3 bg-blue-50 rounded-md border border-blue-100 text-sm text-blue-800"
      >
        {description}
      </motion.div>
    );
  };

  // רכיב רמז למשתמש כאשר אין ערך
  const UserHint = () => {
    if (!hintVisible) return null;

    return (
      <motion.div
        initial={{ opacity: 0, y: 5 }}
        animate={{ opacity: 1, y: 0 }}
        exit={{ opacity: 0 }}
        className="flex items-center justify-center mt-2 text-xs text-blue-600 bg-blue-50 rounded-full py-1 px-3"
      >
        <Sparkles className="h-3 w-3 mr-1" />
        {isMobileDevice ? "לחץ/החלק לבחירת ערך" : "בחר ערך בסולם למעלה"}
      </motion.div>
    );
  };

  return (
    <div
      className={cn(
        "relative space-y-2",
        isDisabled && "opacity-50 cursor-not-allowed",
        className
      )}
    >
      {/* Track Bar - שורה אחידה ברקע */}
      <div
        ref={trackRef}
        className={cn(
          "absolute left-0 right-0 h-2 bg-gray-200 rounded-full top-1/2 -translate-y-1/2 z-0 cursor-pointer",
          isDisabled ? "bg-gray-100" : ""
        )}
        onClick={handleTrackClick}
      ></div>

      {/* Progress Fill Track */}
      {activeValue !== null && (
        <div
          className="absolute left-0 h-2 bg-blue-500 rounded-full top-1/2 -translate-y-1/2 z-0 transition-all duration-150"
          style={{ width: `${getValuePercentage()}%` }}
        ></div>
      )}

      <div
        ref={containerRef}
        className={cn(
          "relative flex items-center justify-between z-10",
          sizeClasses[size]
        )}
        onMouseDown={() => !isDisabled && setIsDragging(true)}
        onTouchStart={handleTouchStart}
      >
        {showLabels && labels && (
          <div className="absolute -top-8 left-0 right-0 flex justify-between text-sm text-gray-600">
            <span>{labels.min}</span>
            {labels.middle && <span>{labels.middle}</span>}
            <span>{labels.max}</span>
          </div>
        )}

        <div className="relative flex-1 flex items-center justify-between">
          <AnimatePresence initial={false}>
            {scaleItems.map((item) => {
              // האם האייטם הנוכחי פעיל (כלומר הערך הנוכחי או קטן ממנו)
              const isActive =
                activeValue !== null && item.value <= activeValue;
              const isHighlighted = item.value === activeValue;

              return (
                <TooltipProvider key={item.value} delayDuration={300}>
                  <Tooltip>
                    <TooltipTrigger asChild>
                      <motion.button
                        type="button"
                        variants={variants}
                        initial="hidden"
                        animate="visible"
                        whileHover="hover"
                        whileTap="tap"
                        className={cn(
                          "relative flex items-center justify-center",
                          "w-8 h-8 rounded-full transition-all duration-150",
                          "focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-0",
                          isActive
                            ? "bg-blue-500 text-white shadow-sm"
                            : "bg-white border border-gray-300",
                          isHighlighted && "ring-2 ring-blue-500 scale-110",
                          isDisabled && "cursor-not-allowed"
                        )}
                        onClick={() => handleClick(item.value)}
                        onKeyDown={(e) => handleKeyPress(e, item.value)}
                        onMouseEnter={() =>
                          !isDisabled && setHoveredValue(item.value)
                        }
                        onMouseLeave={() => setHoveredValue(null)}
                        disabled={isDisabled}
                        aria-label={`Scale value ${item.value}, ${item.label}`}
                        style={{
                          zIndex: isHighlighted ? 5 : isActive ? 4 : 3,
                        }}
                      >
                        {item.icon || item.label}

                        {/* Animation pulse for highlighted item */}
                        {isHighlighted && (
                          <motion.div
                            className="absolute inset-0 rounded-full bg-blue-500 opacity-20"
                            initial={{ scale: 1 }}
                            animate={{
                              scale: [1, 1.2, 1],
                              opacity: [0.2, 0.3, 0.2],
                            }}
                            transition={{
                              duration: 2,
                              repeat: Infinity,
                              repeatType: "loop",
                            }}
                          />
                        )}
                      </motion.button>
                    </TooltipTrigger>
                    {showTooltips && (item.description || item.label) && (
                      <TooltipContent>
                        <p>{item.description || `ערך: ${item.label}`}</p>
                      </TooltipContent>
                    )}
                  </Tooltip>
                </TooltipProvider>
              );
            })}
          </AnimatePresence>
        </div>
      </div>

      {/* Touch hint for mobile */}
      <AnimatePresence>{hintVisible && <UserHint />}</AnimatePresence>

      {/* Show Current Value */}
      {showValue && (
        <div className="flex justify-center">
          <motion.div
            initial={{ opacity: 0, y: 5 }}
            animate={{ opacity: 1, y: 0 }}
            className={cn(
              "mt-3 px-4 py-1 rounded-full text-sm font-medium transition-all",
              value !== null
                ? "bg-blue-100 text-blue-800"
                : "bg-gray-100 text-gray-600"
            )}
          >
            {value !== null ? (
              <span className="flex items-center">
                <Star className="h-3.5 w-3.5 text-blue-500 mr-1" />
                ערך נבחר: {value}
              </span>
            ) : (
              <span className="flex items-center">
                <Info className="h-3.5 w-3.5 text-gray-500 mr-1" />
                לא נבחר ערך
              </span>
            )}
          </motion.div>
        </div>
      )}

      {/* Error Message */}
      {error && (
        <motion.div
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          className="text-sm text-red-500 mt-1 flex items-center"
        >
          <AlertCircle className="h-3.5 w-3.5 mr-1" />
          {error}
        </motion.div>
      )}

      {/* Progress bar showing value relationship to min/max */}
      {value !== null && !isTablet && (
        <div className="pt-2">
          <Progress value={getValuePercentage()} className="h-1" />
        </div>
      )}

      {/* Description for the selected value */}
      <AnimatePresence>
        {showDescription && <ValueDescription />}
      </AnimatePresence>

      {/* Hidden input for form submission */}
      {required && (
        <input
          type="hidden"
          name={name}
          value={value || ""}
          required
          aria-hidden="true"
        />
      )}
    </div>
  );
}


==================================================
Contents of C:\Users\eytan\Desktop\שידוכים\shidduch-system\src\components\questionnaire\components\MatchResultCard.tsx:
==================================================
import React, { useState } from "react";
import { motion, AnimatePresence } from "framer-motion";
import { Card, CardContent, CardFooter } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import {
  Heart,
  X,
  MessageCircle,
  User,
  MapPin,
  Calendar,
  GraduationCap,
  Briefcase,
  Sparkles,
  Star,
  BookOpen,
  ChevronsDown,
  ChevronsUp,
  Music,
  Coffee,
  Bookmark,
  ExternalLink,
} from "lucide-react";
import { Progress } from "@/components/ui/progress";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { cn } from "@/lib/utils";
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip";

interface MatchTrait {
  name: string;
  score: number; // 0-100
  description?: string;
}

interface CommonInterest {
  name: string;
  category:
    | "hobby"
    | "value"
    | "lifestyle"
    | "religion"
    | "education"
    | "other";
  icon?: React.ReactNode;
}

interface MatchResultCardProps {
  id: string;
  name: string;
  age: number;
  location: string;
  distance?: number; // בקילומטרים
  profileImage?: string;
  matchPercentage: number;
  occupation?: string;
  education?: string;
  about?: string;
  matchTraits?: MatchTrait[];
  commonInterests?: CommonInterest[];
  lastActive?: Date;
  conversationStarted?: boolean;
  bookmarked?: boolean;
  className?: string;
  onAccept?: (id: string) => void;
  onReject?: (id: string) => void;
  onMessage?: (id: string) => void;
  onViewProfile?: (id: string) => void;
  onBookmark?: (id: string, bookmarked: boolean) => void;
  isPremium?: boolean;
}

export default function MatchResultCard({
  id,
  name,
  age,
  location,
  distance,
  profileImage,
  matchPercentage,
  occupation,
  education,
  about,
  matchTraits = [],
  commonInterests = [],
  lastActive,
  conversationStarted = false,
  bookmarked = false,
  className,
  onAccept,
  onReject,
  onMessage,
  onViewProfile,
  onBookmark,
  isPremium = false,
}: MatchResultCardProps) {
  const [isExpanded, setIsExpanded] = useState(false);
  const [isBookmarked, setIsBookmarked] = useState(bookmarked);
  const [showConfirmReject, setShowConfirmReject] = useState(false);

  // מיפוי אייקון לקטגוריות תחומי עניין משותפים
  const getCategoryIcon = (category: string) => {
    switch (category) {
      case "hobby":
        return <Music className="h-3.5 w-3.5" />;
      case "value":
        return <Heart className="h-3.5 w-3.5" />;
      case "lifestyle":
        return <Coffee className="h-3.5 w-3.5" />;
      case "religion":
        return <BookOpen className="h-3.5 w-3.5" />;
      case "education":
        return <GraduationCap className="h-3.5 w-3.5" />;
      default:
        return <Star className="h-3.5 w-3.5" />;
    }
  };

  // פורמט לזמן פעילות אחרונה
  const formatLastActive = (date?: Date) => {
    if (!date) return "לא ידוע";

    const now = new Date();
    const diffInDays = Math.floor(
      (now.getTime() - date.getTime()) / (1000 * 60 * 60 * 24)
    );

    if (diffInDays === 0) return "היום";
    if (diffInDays === 1) return "אתמול";
    if (diffInDays < 7) return `לפני ${diffInDays} ימים`;
    if (diffInDays < 30) return `לפני ${Math.floor(diffInDays / 7)} שבועות`;
    return `לפני ${Math.floor(diffInDays / 30)} חודשים`;
  };

  // טיפול בשמירה במועדפים
  const handleBookmark = () => {
    setIsBookmarked(!isBookmarked);
    if (onBookmark) {
      onBookmark(id, !isBookmarked);
    }
  };

  // קביעת צבע לפי אחוז התאמה
  const getMatchColor = () => {
    if (matchPercentage >= 90) return "from-green-400 to-emerald-500";
    if (matchPercentage >= 80) return "from-emerald-400 to-green-500";
    if (matchPercentage >= 70) return "from-blue-400 to-blue-500";
    if (matchPercentage >= 60) return "from-blue-400 to-cyan-500";
    return "from-cyan-400 to-blue-500";
  };

  // אנימציות
  const expandVariants = {
    hidden: { height: 0, opacity: 0 },
    visible: {
      height: "auto",
      opacity: 1,
      transition: {
        height: { duration: 0.3 },
        opacity: { duration: 0.3, delay: 0.1 },
      },
    },
  };

  return (
    <Card
      className={cn(
        "overflow-hidden transition-all border",
        isExpanded ? "shadow-md" : "shadow-sm hover:shadow-md",
        isPremium ? "border-amber-200" : "border-blue-100",
        className
      )}
    >
      {/* Premium Badge */}
      {isPremium && (
        <div className="absolute top-0 left-0 bg-gradient-to-r from-amber-400 to-amber-600 text-white px-2 py-0.5 text-xs rounded-br-md z-10">
          <Sparkles className="h-3 w-3 inline-block mr-1" />
          התאמה מומלצת
        </div>
      )}

      {/* Top Section */}
      <div className="p-4 flex md:flex-row flex-col gap-4">
        {/* Image */}
        <div className="relative">
          <Avatar className="w-24 h-24 rounded-lg border-2 border-white shadow-sm">
            <AvatarImage src={profileImage} alt={name} />
            <AvatarFallback className="bg-gradient-to-br from-blue-100 to-blue-200 text-blue-600 text-3xl">
              {name.charAt(0)}
            </AvatarFallback>
          </Avatar>

          {/* Match Percentage */}
          <div className="absolute -bottom-3 left-1/2 transform -translate-x-1/2">
            <Badge
              className={cn(
                "rounded-full bg-gradient-to-r px-2 text-white border-0 shadow-sm",
                getMatchColor()
              )}
            >
              <Sparkles className="h-3 w-3 mr-1" />
              {matchPercentage}% התאמה
            </Badge>
          </div>
        </div>

        {/* Basic Info */}
        <div className="flex-1 space-y-2">
          <div className="flex justify-between items-start">
            <div>
              <h3 className="text-lg font-medium">
                {name}, {age}
              </h3>
              <div className="flex items-center text-sm text-gray-600">
                <MapPin className="h-3.5 w-3.5 mr-1" />
                {location}
                {distance && <span className="mr-1">({distance} קמ)</span>}
              </div>
            </div>

            <TooltipProvider>
              <Tooltip>
                <TooltipTrigger asChild>
                  <Button
                    variant="ghost"
                    size="icon"
                    className={cn(
                      "h-8 w-8 rounded-full",
                      isBookmarked ? "text-amber-500" : "text-gray-400"
                    )}
                    onClick={handleBookmark}
                  >
                    <Bookmark className="h-5 w-5" />
                  </Button>
                </TooltipTrigger>
                <TooltipContent>
                  <p>{isBookmarked ? "הסר ממועדפים" : "הוסף למועדפים"}</p>
                </TooltipContent>
              </Tooltip>
            </TooltipProvider>
          </div>

          {/* Occupation + Education */}
          <div className="space-y-1">
            {occupation && (
              <div className="flex items-center text-sm text-gray-600">
                <Briefcase className="h-3.5 w-3.5 mr-1 text-gray-500" />
                {occupation}
              </div>
            )}

            {education && (
              <div className="flex items-center text-sm text-gray-600">
                <GraduationCap className="h-3.5 w-3.5 mr-1 text-gray-500" />
                {education}
              </div>
            )}
          </div>

          {/* Common Interests Preview */}
          {commonInterests.length > 0 && (
            <div className="flex flex-wrap gap-1 pt-1">
              {commonInterests.slice(0, 3).map((interest, index) => (
                <Badge
                  key={index}
                  variant="outline"
                  className="bg-blue-50 text-blue-700 border-blue-200 text-xs py-0 h-5"
                >
                  {interest.icon || getCategoryIcon(interest.category)}
                  <span className="mr-1 truncate max-w-[100px]">
                    {interest.name}
                  </span>
                </Badge>
              ))}

              {commonInterests.length > 3 && (
                <Badge
                  variant="outline"
                  className="bg-gray-50 text-gray-600 border-gray-200 text-xs"
                >
                  +{commonInterests.length - 3}
                </Badge>
              )}
            </div>
          )}
        </div>
      </div>

      {/* Action Buttons */}
      <div className="px-4 pb-3 flex gap-2 justify-center">
        {onReject &&
          (showConfirmReject ? (
            <>
              <Button
                variant="destructive"
                size="sm"
                className="flex-1"
                onClick={() => onReject(id)}
              >
                לאשר דחייה
              </Button>
              <Button
                variant="outline"
                size="sm"
                className="flex-1"
                onClick={() => setShowConfirmReject(false)}
              >
                בטל
              </Button>
            </>
          ) : (
            <Button
              variant="outline"
              size="sm"
              className="flex-1 border-red-200 text-red-600 hover:bg-red-50 hover:text-red-700"
              onClick={() => setShowConfirmReject(true)}
            >
              <X className="h-4 w-4 mr-1" />
              לא מתאים
            </Button>
          ))}

        {onAccept && (
          <Button
            variant="default"
            size="sm"
            className="flex-1 bg-gradient-to-r from-blue-500 to-blue-600 hover:from-blue-600 hover:to-blue-700"
            onClick={() => onAccept(id)}
          >
            <Heart className="h-4 w-4 mr-1" />
            מעוניין/ת
          </Button>
        )}

        {conversationStarted && onMessage && (
          <Button
            variant="default"
            size="sm"
            className="flex-1"
            onClick={() => onMessage(id)}
          >
            <MessageCircle className="h-4 w-4 mr-1" />
            המשך שיחה
          </Button>
        )}
      </div>

      {/* Expand/Collapse Button */}
      <div className="px-4 pb-2 text-center">
        <Button
          variant="ghost"
          size="sm"
          className="text-xs text-gray-500 hover:text-gray-700"
          onClick={() => setIsExpanded(!isExpanded)}
        >
          {isExpanded ? (
            <>
              <ChevronsUp className="h-3.5 w-3.5 mr-1" />
              הסתר פרטים נוספים
            </>
          ) : (
            <>
              <ChevronsDown className="h-3.5 w-3.5 mr-1" />
              הצג פרטים נוספים
            </>
          )}
        </Button>
      </div>

      {/* Expanded Content */}
      <AnimatePresence>
        {isExpanded && (
          <motion.div
            variants={expandVariants}
            initial="hidden"
            animate="visible"
            exit="hidden"
            className="border-t border-gray-100"
          >
            <CardContent className="p-4 space-y-5">
              {/* About Section */}
              {about && (
                <div className="space-y-2">
                  <h4 className="text-sm font-medium flex items-center">
                    <User className="h-4 w-4 mr-1 text-blue-500" />
                    קצת על {name}
                  </h4>
                  <p className="text-sm text-gray-600 bg-gray-50 p-3 rounded-md border">
                    {about}
                  </p>
                </div>
              )}

              {/* Match Traits */}
              {matchTraits.length > 0 && (
                <div className="space-y-3">
                  <h4 className="text-sm font-medium flex items-center">
                    <Sparkles className="h-4 w-4 mr-1 text-blue-500" />
                    תחומי התאמה בולטים
                  </h4>

                  <div className="space-y-2">
                    {matchTraits.map((trait, index) => (
                      <TooltipProvider key={index}>
                        <Tooltip>
                          <TooltipTrigger asChild>
                            <div className="space-y-1">
                              <div className="flex justify-between text-sm">
                                <span>{trait.name}</span>
                                <span className="text-sm text-gray-600">
                                  {trait.score}%
                                </span>
                              </div>
                              <Progress
                                value={trait.score}
                                className={cn(
                                  "h-2",
                                  trait.score >= 80
                                    ? "[--progress-foreground:theme(colors.green.500)]"
                                    : trait.score >= 60
                                    ? "[--progress-foreground:theme(colors.blue.500)]"
                                    : "[--progress-foreground:theme(colors.blue.400)]"
                                )}
                              />
                            </div>
                          </TooltipTrigger>
                          {trait.description && (
                            <TooltipContent side="top" className="max-w-xs">
                              <p>{trait.description}</p>
                            </TooltipContent>
                          )}
                        </Tooltip>
                      </TooltipProvider>
                    ))}
                  </div>
                </div>
              )}

              {/* All Common Interests */}
              {commonInterests.length > 0 && (
                <div className="space-y-3">
                  <h4 className="text-sm font-medium flex items-center">
                    <Heart className="h-4 w-4 mr-1 text-blue-500" />
                    תחומי עניין משותפים
                  </h4>

                  <div className="flex flex-wrap gap-2">
                    {commonInterests.map((interest, index) => (
                      <Badge
                        key={index}
                        variant="outline"
                        className={cn(
                          "bg-blue-50 text-blue-700 border-blue-200",
                          interest.category === "value" &&
                            "bg-pink-50 text-pink-700 border-pink-200",
                          interest.category === "religion" &&
                            "bg-purple-50 text-purple-700 border-purple-200",
                          interest.category === "education" &&
                            "bg-emerald-50 text-emerald-700 border-emerald-200"
                        )}
                      >
                        {interest.icon || getCategoryIcon(interest.category)}
                        <span className="mr-1">{interest.name}</span>
                      </Badge>
                    ))}
                  </div>
                </div>
              )}

              {/* Last Active */}
              {lastActive && (
                <div className="text-sm text-gray-500 flex items-center">
                  <Calendar className="h-4 w-4 mr-1 text-gray-400" />
                  פעילות אחרונה: {formatLastActive(lastActive)}
                </div>
              )}
            </CardContent>

            {/* Footer */}
            <CardFooter className="px-4 py-3 bg-gray-50 flex justify-between">
              {onViewProfile && (
                <Button
                  variant="outline"
                  size="sm"
                  className="w-full"
                  onClick={() => onViewProfile(id)}
                >
                  <ExternalLink className="h-4 w-4 mr-1" />
                  צפייה בפרופיל מלא
                </Button>
              )}
            </CardFooter>
          </motion.div>
        )}
      </AnimatePresence>
    </Card>
  );
}


==================================================
Contents of C:\Users\eytan\Desktop\שידוכים\shidduch-system\src\components\questionnaire\components\QuestionnaireProgress.tsx:
==================================================
import React, { useState } from "react";
import { Progress } from "@/components/ui/progress";
import { Badge } from "@/components/ui/badge";
import { cn } from "@/lib/utils";
import {
  CheckCircle,
  Clock,
  Info,
  Globe,
  CheckCircle2,
  ChevronRight,
  Award,
  Star,
  TrendingUp,
  Timer,
  PlayCircle,
  BarChart3,
  ArrowUpRight,
  HelpCircle,
} from "lucide-react";
import type { WorldId } from "../types/types";
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip";
import { Button } from "@/components/ui/button";
import { motion, AnimatePresence } from "framer-motion";
import { useMediaQuery } from "../hooks/useMediaQuery";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";

interface QuestionnaireProgressProps {
  completedWorlds: WorldId[];
  allWorlds?: WorldId[];
  currentWorld: WorldId;
  totalQuestions: number;
  answeredQuestions: number;
  requiredQuestions: number;
  answeredRequiredQuestions: number;
  estimatedTimeLeft?: number; // בדקות
  lastSaved?: Date | null;
  onWorldChange?: (worldId: WorldId) => void;
  className?: string;
}

const worldLabels = {
  PERSONALITY: "אישיות",
  VALUES: "ערכים ואמונות",
  RELATIONSHIP: "זוגיות",
  PARTNER: "פרטנר",
  RELIGION: "דת ומסורת",
};

export default function QuestionnaireProgress({
  completedWorlds,
  allWorlds = ["PERSONALITY", "VALUES", "RELATIONSHIP", "PARTNER", "RELIGION"],
  currentWorld,
  totalQuestions,
  answeredQuestions,
  requiredQuestions,
  answeredRequiredQuestions,
  estimatedTimeLeft = 0,
  lastSaved = null,
  onWorldChange,
  className = "",
}: QuestionnaireProgressProps) {
  // מצב מקומי
  const [expandedSection, setExpandedSection] = useState<string | null>(null);
  const isTablet = useMediaQuery("(max-width: 1024px)");

  // חישוב אחוזי התקדמות
  const totalCompletion = Math.round(
    (answeredQuestions / totalQuestions) * 100
  );
  const requiredCompletion = Math.round(
    (answeredRequiredQuestions / requiredQuestions) * 100
  );
  const worldsCompletion = Math.round(
    (completedWorlds.length / allWorlds.length) * 100
  );

  // מצב התקדמות כולל להצגה למשתמש
  let progressStatus: "low" | "medium" | "high" | "complete" = "low";
  if (totalCompletion >= 100) progressStatus = "complete";
  else if (totalCompletion >= 75) progressStatus = "high";
  else if (totalCompletion >= 40) progressStatus = "medium";

  // צבעים המותאמים למצב התקדמות
  const statusColors = {
    low: "text-amber-600",
    medium: "text-blue-600",
    high: "text-blue-700",
    complete: "text-green-600",
  };

  const statusBgColors = {
    low: "bg-amber-100",
    medium: "bg-blue-100",
    high: "bg-blue-100",
    complete: "bg-green-100",
  };

  // הופך זמן שנותר בדקות למחרוזת מותאמת
  const formatTimeLeft = (minutes: number): string => {
    if (minutes < 1) return "פחות מדקה";
    if (minutes < 60) return `${minutes} דק'`;

    const hours = Math.floor(minutes / 60);
    const mins = minutes % 60;
    return `${hours} שעות ${mins > 0 ? `ו-${mins} דק'` : ""}`;
  };

  // חישוב זמן שמירה אחרון יחסית
  const getRelativeTime = (date: Date): string => {
    const now = new Date();
    const diffInMinutes = Math.floor(
      (now.getTime() - date.getTime()) / (1000 * 60)
    );

    if (diffInMinutes < 1) return "עכשיו";
    if (diffInMinutes < 60) return `לפני ${diffInMinutes} דקות`;

    const diffInHours = Math.floor(diffInMinutes / 60);
    if (diffInHours < 24) return `לפני ${diffInHours} שעות`;

    return `ב-${date.toLocaleTimeString()}`;
  };

  // קבל המלצה לעולם הבא שטרם הושלם
  const getNextRecommendedWorld = (): WorldId | null => {
    for (const world of allWorlds) {
      if (!completedWorlds.includes(world) && world !== currentWorld) {
        return world;
      }
    }
    return null;
  };

  // אקורדיון מונפש
  const AccordionSection = ({
    title,
    icon,
    children,
    id,
  }: {
    title: string;
    icon: React.ReactNode;
    children: React.ReactNode;
    id: string;
  }) => {
    const isExpanded = expandedSection === id;

    return (
      <div className="border rounded-lg overflow-hidden mb-2">
        <button
          className={cn(
            "w-full flex items-center justify-between p-3 text-left transition-colors",
            isExpanded
              ? "bg-blue-50 border-blue-200"
              : "bg-white hover:bg-gray-50"
          )}
          onClick={() => setExpandedSection(isExpanded ? null : id)}
        >
          <div className="flex items-center">
            <div
              className={cn(
                "mr-2",
                isExpanded ? "text-blue-600" : "text-gray-500"
              )}
            >
              {icon}
            </div>
            <span
              className={cn("font-medium", isExpanded ? "text-blue-700" : "")}
            >
              {title}
            </span>
          </div>
          <ChevronRight
            className={cn(
              "w-5 h-5 transition-transform",
              isExpanded ? "transform rotate-90 text-blue-600" : "text-gray-400"
            )}
          />
        </button>

        <AnimatePresence initial={false}>
          {isExpanded && (
            <motion.div
              initial={{ height: 0, opacity: 0 }}
              animate={{ height: "auto", opacity: 1 }}
              exit={{ height: 0, opacity: 0 }}
              transition={{ duration: 0.2 }}
            >
              <div className="p-3 bg-blue-50/50 border-t">{children}</div>
            </motion.div>
          )}
        </AnimatePresence>
      </div>
    );
  };

  // קומפוננטה עבור מידע על תגמולים
  const RewardsInfo = () => {
    const achievements = [
      {
        name: "עמידה ביעד",
        condition: requiredCompletion >= 100,
        icon: <Award className="h-4 w-4 text-amber-500" />,
        description: "השלמת את כל שאלות החובה",
      },
      {
        name: "לומד מצטיין",
        condition: totalCompletion >= 50,
        icon: <Star className="h-4 w-4 text-amber-500" />,
        description: "ענית על לפחות מחצית מהשאלות",
      },
      {
        name: "חוקר עמוק",
        condition: totalCompletion >= 80,
        icon: <TrendingUp className="h-4 w-4 text-amber-500" />,
        description: "ענית על מעל 80% מהשאלות",
      },
      {
        name: "שלם ומושלם",
        condition: totalCompletion >= 100,
        icon: <CheckCircle2 className="h-4 w-4 text-amber-500" />,
        description: "ענית על כל השאלות בשאלון",
      },
    ];

    // מסנן רק הישגים שהושגו
    const earnedAchievements = achievements.filter(
      (achievement) => achievement.condition
    );

    return (
      <div className="space-y-2">
        {earnedAchievements.length > 0 ? (
          <>
            <p className="text-sm text-gray-600 mb-2">
              כל הכבוד! השגת את ההישגים הבאים:
            </p>
            <div className="space-y-2">
              {earnedAchievements.map((achievement, index) => (
                <div
                  key={index}
                  className="flex items-center bg-white p-2 rounded-lg border"
                >
                  <div className="mr-2">{achievement.icon}</div>
                  <div>
                    <div className="font-medium text-sm">
                      {achievement.name}
                    </div>
                    <div className="text-xs text-gray-500">
                      {achievement.description}
                    </div>
                  </div>
                </div>
              ))}
            </div>

            {earnedAchievements.length < achievements.length && (
              <p className="text-xs text-gray-500 mt-3">
                השלם עוד {achievements.length - earnedAchievements.length}{" "}
                הישגים נוספים!
              </p>
            )}
          </>
        ) : (
          <p className="text-sm text-gray-600">
            ענה על יותר שאלות כדי לקבל הישגים!
          </p>
        )}
      </div>
    );
  };

  // המלצות עולמות
  const WorldRecommendations = () => {
    const nextWorld = getNextRecommendedWorld();

    return (
      <div className="space-y-3">
        <p className="text-sm text-gray-600">
          שים לב לסדר המומלץ של מילוי העולמות:
        </p>

        <div className="flex flex-col space-y-1">
          {allWorlds.map((world, index) => {
            const isCompleted = completedWorlds.includes(world);
            const isCurrent = currentWorld === world;
            const isNextRecommended = world === nextWorld;

            return (
              <div
                key={world}
                className={cn(
                  "flex items-center justify-between p-2 rounded-lg border",
                  isCompleted
                    ? "bg-green-50 border-green-200"
                    : isCurrent
                    ? "bg-blue-50 border-blue-200"
                    : isNextRecommended
                    ? "bg-amber-50 border-amber-200"
                    : "bg-white border-gray-200"
                )}
              >
                <div className="flex items-center">
                  <div className="w-6 h-6 flex items-center justify-center rounded-full mr-2 text-gray-600 bg-white border">
                    {index + 1}
                  </div>
                  <span
                    className={cn(
                      "font-medium",
                      isCompleted
                        ? "text-green-700"
                        : isCurrent
                        ? "text-blue-700"
                        : isNextRecommended
                        ? "text-amber-700"
                        : ""
                    )}
                  >
                    {worldLabels[world]}
                  </span>
                </div>

                <div className="flex items-center">
                  {isCompleted ? (
                    <Badge className="bg-green-100 text-green-800 border-0">
                      <CheckCircle2 className="w-3 h-3 mr-1" />
                      הושלם
                    </Badge>
                  ) : isCurrent ? (
                    <Badge className="bg-blue-100 text-blue-800 border-0">
                      <PlayCircle className="w-3 h-3 mr-1" />
                      פעיל
                    </Badge>
                  ) : isNextRecommended ? (
                    <Button
                      size="sm"
                      variant="outline"
                      className="h-7 text-xs border-amber-300 text-amber-700 bg-amber-50 hover:bg-amber-100"
                      onClick={() => onWorldChange?.(world)}
                    >
                      <ArrowUpRight className="w-3 h-3 mr-1" />
                      עבור לכאן
                    </Button>
                  ) : (
                    <Badge variant="outline" className="text-gray-500 text-xs">
                      ממתין
                    </Badge>
                  )}
                </div>
              </div>
            );
          })}
        </div>
      </div>
    );
  };

  // קומפוננטת חלוקת זמן
  const TimeBreakdown = () => {
    return (
      <div className="space-y-3">
        <div className="text-sm text-gray-600 flex items-center">
          <Timer className="h-4 w-4 mr-1 text-blue-500" />
          <span>
            זמן משוער להשלמת השאלון: {formatTimeLeft(estimatedTimeLeft)}
          </span>
        </div>

        <div className="flex flex-col space-y-2">
          {/* חלוקת זמן לפי עולמות */}
          <div className="text-xs text-gray-500">חלוקת זמן לפי עולמות:</div>
          {allWorlds.map((world) => {
            const isCompleted = completedWorlds.includes(world);
            const timePerWorld = Math.round(
              estimatedTimeLeft / (allWorlds.length - completedWorlds.length)
            );

            return (
              <div key={world} className="flex items-center justify-between">
                <span className="text-sm flex items-center">
                  {isCompleted ? (
                    <CheckCircle className="h-3.5 w-3.5 mr-1 text-green-500" />
                  ) : (
                    <Clock className="h-3.5 w-3.5 mr-1 text-blue-400" />
                  )}
                  {worldLabels[world]}
                </span>
                <span
                  className={cn(
                    "text-sm",
                    isCompleted ? "text-green-600" : "text-gray-600"
                  )}
                >
                  {isCompleted ? "הושלם" : `~${timePerWorld} דקות`}
                </span>
              </div>
            );
          })}
        </div>
      </div>
    );
  };

  // רנדור מותנה במגבלות מסך
  const renderMobile = () => {
    return (
      <div className="space-y-4">
        {/* כותרת עם סטטוס התקדמות כולל */}
        <div className="flex justify-between items-center">
          <h3 className="text-lg font-medium flex items-center">
            <BarChart3 className="h-5 w-5 mr-2 text-blue-500" />
            התקדמות
          </h3>
          <Badge
            className={cn(
              statusBgColors[progressStatus],
              "text-xs border-0",
              statusColors[progressStatus]
            )}
          >
            {progressStatus === "complete"
              ? "הושלם"
              : totalCompletion <= 5
              ? "התחלנו"
              : `${totalCompletion}%`}
          </Badge>
        </div>

        {/* פרוגרס ברים */}
        <div className="space-y-2 pt-1">
          {/* סך התקדמות */}
          <div className="space-y-1">
            <div className="flex justify-between text-xs">
              <span className="text-gray-600">סך הכל שאלות</span>
              <span className="font-medium">
                {answeredQuestions} / {totalQuestions}
              </span>
            </div>
            <Progress value={totalCompletion} className="h-2" />
          </div>

          {/* שאלות חובה */}
          <div className="space-y-1">
            <div className="flex justify-between text-xs">
              <span className="text-gray-600">שאלות חובה</span>
              <span
                className={cn(
                  "font-medium",
                  requiredCompletion < 100
                    ? answeredRequiredQuestions === 0
                      ? "text-red-600"
                      : "text-amber-600"
                    : "text-green-600"
                )}
              >
                {answeredRequiredQuestions} / {requiredQuestions}
              </span>
            </div>
            <Progress
              value={requiredCompletion}
              className={cn(
                "h-2",
                requiredCompletion < 100 ? "bg-gray-100" : ""
              )}
            />
          </div>
        </div>

        {/* מידע על זמן שנותר ושמירה אחרונה */}
        <div className="flex flex-col gap-1 text-xs pt-1">
          {estimatedTimeLeft > 0 && (
            <div className="flex items-center">
              <Clock className="h-3.5 w-3.5 mr-1 text-gray-500" />
              <span className="text-gray-600">
                זמן משוער שנותר: {formatTimeLeft(estimatedTimeLeft)}
              </span>
            </div>
          )}

          {lastSaved && (
            <div className="flex items-center">
              <CheckCircle className="h-3.5 w-3.5 mr-1 text-green-600" />
              <span className="text-gray-600">
                נשמר {getRelativeTime(lastSaved)}
              </span>
            </div>
          )}
        </div>
      </div>
    );
  };

  // רנדור מורחב למסך גדול
  const renderDesktop = () => {
    return (
      <div className="space-y-6">
        {/* כותרת עם סטטוס התקדמות כולל */}
        <div className="flex justify-between items-center">
          <div>
            <h3 className="text-xl font-medium">התקדמות השאלון</h3>
            <p className="text-sm text-gray-500 mt-1">
              סקירת ההתקדמות שלך בשאלון ההיכרות
            </p>
          </div>
          <div className="flex items-center gap-2">
            <TooltipProvider>
              <Tooltip>
                <TooltipTrigger asChild>
                  <Badge
                    className={cn(
                      statusBgColors[progressStatus],
                      "text-xs border-0 py-1 px-2",
                      statusColors[progressStatus]
                    )}
                  >
                    <TrendingUp className="h-3.5 w-3.5 mr-1" />
                    {progressStatus === "complete"
                      ? "הושלם"
                      : totalCompletion <= 5
                      ? "התחלת"
                      : `${totalCompletion}% הושלם`}
                  </Badge>
                </TooltipTrigger>
                <TooltipContent>
                  <p>
                    השלמת {answeredQuestions} מתוך {totalQuestions} שאלות
                  </p>
                </TooltipContent>
              </Tooltip>
            </TooltipProvider>

            <TooltipProvider>
              <Tooltip>
                <TooltipTrigger asChild>
                  <Button
                    variant="ghost"
                    size="sm"
                    className="h-8 w-8 p-0 rounded-full"
                  >
                    <HelpCircle className="h-4 w-4 text-gray-500" />
                  </Button>
                </TooltipTrigger>
                <TooltipContent>
                  <div className="space-y-1 max-w-xs">
                    <p className="font-medium">מידע על התקדמות</p>
                    <p className="text-xs">
                      דף זה מציג את התקדמותך בשאלון, כולל שאלות שעליהן ענית,
                      עולמות שהשלמת והזמן המשוער שנותר.
                    </p>
                  </div>
                </TooltipContent>
              </Tooltip>
            </TooltipProvider>
          </div>
        </div>

        <div className="grid grid-cols-12 gap-4">
          {/* תיבת פרוגרס ברים ראשית */}
          <Card className="col-span-12 md:col-span-8">
            <CardHeader className="pb-2">
              <CardTitle className="text-lg flex items-center">
                <BarChart3 className="h-5 w-5 mr-2 text-blue-500" />
                סיכום התקדמות
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              {/* פרוגרס ברים */}
              <div className="space-y-4 pt-1">
                {/* סך התקדמות */}
                <div className="space-y-1">
                  <div className="flex justify-between text-sm">
                    <span className="text-gray-600 flex items-center">
                      <Info className="h-3.5 w-3.5 mr-1 text-blue-500" />
                      סך הכל שאלות
                    </span>
                    <span className="font-medium">
                      {answeredQuestions} / {totalQuestions}
                    </span>
                  </div>
                  <Progress value={totalCompletion} className="h-2" />
                </div>

                {/* שאלות חובה */}
                <div className="space-y-1">
                  <div className="flex justify-between text-sm">
                    <span className="text-gray-600 flex items-center">
                      <Star className="h-3.5 w-3.5 mr-1 text-amber-500" />
                      שאלות חובה
                    </span>
                    <span
                      className={cn(
                        "font-medium",
                        requiredCompletion < 100
                          ? answeredRequiredQuestions === 0
                            ? "text-red-600"
                            : "text-amber-600"
                          : "text-green-600"
                      )}
                    >
                      {answeredRequiredQuestions} / {requiredQuestions}
                    </span>
                  </div>
                  <Progress
                    value={requiredCompletion}
                    className={cn(
                      "h-2",
                      requiredCompletion < 100 ? "bg-gray-100" : ""
                    )}
                  />
                </div>

                {/* עולמות */}
                <div className="space-y-1">
                  <div className="flex justify-between text-sm">
                    <span className="text-gray-600 flex items-center">
                      <Globe className="h-3.5 w-3.5 mr-1 text-blue-500" />
                      עולמות
                    </span>
                    <span className="font-medium">
                      {completedWorlds.length} / {allWorlds.length}
                    </span>
                  </div>
                  <Progress value={worldsCompletion} className="h-2" />
                </div>
              </div>

              {/* מידע על זמן שנותר ושמירה אחרונה */}
              <div className="flex justify-between items-center pt-4 mt-2 border-t text-sm">
                {estimatedTimeLeft > 0 && (
                  <div className="flex items-center">
                    <Clock className="h-4 w-4 mr-1 text-blue-500" />
                    <span className="text-gray-600">
                      זמן משוער שנותר: {formatTimeLeft(estimatedTimeLeft)}
                    </span>
                  </div>
                )}

                {lastSaved && (
                  <div className="flex items-center">
                    <CheckCircle className="h-4 w-4 mr-1 text-green-600" />
                    <span className="text-gray-600">
                      נשמר לאחרונה: {lastSaved.toLocaleTimeString()}
                    </span>
                  </div>
                )}
              </div>
            </CardContent>
          </Card>

          {/* סיכום מצב התקדמות */}
          <Card className="col-span-12 md:col-span-4">
            <CardHeader className="pb-2">
              <CardTitle className="text-lg flex items-center">
                <Award className="h-5 w-5 mr-2 text-amber-500" />
                הישגים
              </CardTitle>
            </CardHeader>
            <CardContent>
              <RewardsInfo />
            </CardContent>
          </Card>

          {/* מידע מורחב על העולמות */}
          <Card className="col-span-12">
            <CardHeader className="pb-2">
              <CardTitle className="text-lg flex items-center">
                <Globe className="h-5 w-5 mr-2 text-blue-500" />
                עולמות השאלון
              </CardTitle>
              <CardDescription>
                מעקב אחר התקדמותך בעולמות השונים של השאלון
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="space-y-2">
                <AccordionSection
                  title="המלצות עולמות"
                  icon={<Star className="h-4 w-4" />}
                  id="worlds-recommendations"
                >
                  <WorldRecommendations />
                </AccordionSection>

                <AccordionSection
                  title="חלוקת זמן משוערת"
                  icon={<Clock className="h-4 w-4" />}
                  id="time-breakdown"
                >
                  <TimeBreakdown />
                </AccordionSection>
              </div>
            </CardContent>
          </Card>
        </div>
      </div>
    );
  };

  return (
    <div className={cn("bg-white rounded-lg shadow-sm border p-4", className)}>
      {isTablet ? renderMobile() : renderDesktop()}
    </div>
  );
}


==================================================
Contents of C:\Users\eytan\Desktop\שידוכים\shidduch-system\src\components\questionnaire\components\UserStats.tsx:
==================================================
import React from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Progress } from "@/components/ui/progress";
import { Badge } from "@/components/ui/badge";
import {
  UserCheck,
  Users,
  Calendar,
  Sparkles,
  Heart,
  CheckCheck,
  BarChart4,
  Zap,
  Award,
  Star,
} from "lucide-react";
import { cn } from "@/lib/utils";
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip";

interface UserStatsProps {
  totalQuestionsAnswered: number;
  totalQuestionsCount: number;
  activeMatches?: number; // מספר התאמות פעילות
  pendingMatches?: number; // מספר התאמות ממתינות
  matchScore?: number; // ציון התאמה כללי (0-100)
  profileCompletion?: number; // אחוז השלמת הפרופיל
  activeWorldsCompleted?: string[]; // עולמות שהושלמו
  personalityTraits?: Array<{
    trait: string;
    score: number;
  }>;
  activityLevel?: "low" | "medium" | "high"; // רמת פעילות המשתמש
  registrationDate?: Date; // תאריך הרשמה
  lastActive?: Date; // פעילות אחרונה
  className?: string;
}

export default function UserStats({
  totalQuestionsAnswered,
  totalQuestionsCount,
  activeMatches = 0,
  pendingMatches = 0,
  matchScore = 0,
  profileCompletion = 0,
  activeWorldsCompleted = [],
  personalityTraits = [],
  activityLevel = "medium",
  registrationDate,
  className,
}: UserStatsProps) {
  // חישוב תאריכים יפים להצגה
  const formatDate = (date?: Date) => {
    if (!date) return "לא זמין";
    return date.toLocaleDateString("he-IL");
  };

  // זמן בשירות
  const getDaysActive = () => {
    if (!registrationDate) return 0;
    const today = new Date();
    const diffTime = Math.abs(today.getTime() - registrationDate.getTime());
    return Math.ceil(diffTime / (1000 * 60 * 60 * 24));
  };

  // רמת פעילות בצבע מתאים
  const getActivityLevelColor = () => {
    switch (activityLevel) {
      case "high":
        return "text-green-600 bg-green-100";
      case "medium":
        return "text-blue-600 bg-blue-100";
      case "low":
        return "text-amber-600 bg-amber-100";
      default:
        return "text-gray-600 bg-gray-100";
    }
  };

  return (
    <div className={cn("space-y-4", className)}>
      {/* כרטיס התאמות */}
      <Card className="shadow-sm hover:shadow-md transition-shadow border-blue-100">
        <CardHeader className="pb-2">
          <CardTitle className="text-lg flex items-center">
            <UserCheck className="h-5 w-5 mr-2 text-blue-500" />
            סטטיסטיקת התאמות
          </CardTitle>
        </CardHeader>

        <CardContent>
          <div className="grid grid-cols-2 gap-4">
            {/* התאמות פעילות */}
            <div className="bg-blue-50 p-3 rounded-lg border border-blue-100">
              <div className="text-xs text-gray-600 mb-1">התאמות פעילות</div>
              <div className="flex items-center">
                <Users className="h-5 w-5 text-blue-600 mr-2" />
                <span className="text-2xl font-semibold">{activeMatches}</span>
              </div>
            </div>

            {/* ממתינות לאישור */}
            <div className="bg-amber-50 p-3 rounded-lg border border-amber-100">
              <div className="text-xs text-gray-600 mb-1">ממתינות לבדיקה</div>
              <div className="flex items-center">
                <Calendar className="h-5 w-5 text-amber-600 mr-2" />
                <span className="text-2xl font-semibold">{pendingMatches}</span>
              </div>
            </div>

            {/* ציון התאמה */}
            <div className="col-span-2 bg-gray-50 p-3 rounded-lg border">
              <div className="flex justify-between mb-1">
                <div className="text-xs text-gray-600">ציון התאמה</div>
                <Badge variant="outline" className="text-xs">
                  {matchScore}%
                </Badge>
              </div>
              <Progress
                value={matchScore}
                className={cn(
                  "h-2",
                  matchScore > 70
                    ? "[--progress-foreground:theme(colors.green.500)]"
                    : "[--progress-foreground:theme(colors.blue.500)]"
                )}
              />
            </div>

            {/* פעיל מתאריך */}
            <div className="col-span-2 flex justify-between text-sm p-2">
              <div className="flex items-center text-gray-600">
                <Sparkles className="h-4 w-4 mr-1 text-blue-400" />
                פעיל {getDaysActive()} ימים
              </div>
              <div className="text-gray-600">
                הצטרפת בתאריך {formatDate(registrationDate)}
              </div>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* כרטיס פרופיל והתקדמות */}
      <Card className="shadow-sm hover:shadow-md transition-shadow border-blue-100">
        <CardHeader className="pb-2">
          <CardTitle className="text-lg flex items-center">
            <BarChart4 className="h-5 w-5 mr-2 text-blue-500" />
            התקדמות והשלמת פרופיל
          </CardTitle>
        </CardHeader>

        <CardContent>
          <div className="space-y-4">
            {/* אחוז השלמת פרופיל */}
            <div className="space-y-1">
              <div className="flex justify-between text-sm">
                <div className="flex items-center">
                  <CheckCheck className="h-4 w-4 mr-1 text-blue-500" />
                  השלמת פרופיל
                </div>
                <Badge
                  variant="outline"
                  className={cn(
                    "text-xs",
                    profileCompletion >= 80
                      ? "border-green-500 text-green-600"
                      : "border-amber-500 text-amber-600"
                  )}
                >
                  {profileCompletion}%
                </Badge>
              </div>
              <Progress
                value={profileCompletion}
                className={cn(
                  "h-2",
                  profileCompletion < 30
                    ? "[--progress-foreground:theme(colors.red.500)]"
                    : profileCompletion < 70
                    ? "[--progress-foreground:theme(colors.amber.500)]"
                    : "[--progress-foreground:theme(colors.green.500)]"
                )}
              />
            </div>

            {/* שאלות שנענו */}
            <div className="space-y-1">
              <div className="flex justify-between text-sm">
                <div className="flex items-center">
                  <Zap className="h-4 w-4 mr-1 text-amber-500" />
                  שאלות שנענו
                </div>
                <span className="text-xs text-gray-600">
                  {totalQuestionsAnswered} מתוך {totalQuestionsCount}
                </span>
              </div>
              <Progress
                value={(totalQuestionsAnswered / totalQuestionsCount) * 100}
                className="h-2"
              />
            </div>

            {/* עולמות פעילים */}
            <div className="pt-2">
              <div className="text-sm mb-2 flex items-center">
                <Heart className="h-4 w-4 mr-1 text-pink-500" />
                <span>עולמות שהושלמו:</span>
              </div>

              <div className="flex flex-wrap gap-2">
                {[
                  { id: "PERSONALITY", name: "אישיות", color: "blue" },
                  { id: "VALUES", name: "ערכים", color: "emerald" },
                  { id: "RELATIONSHIP", name: "זוגיות", color: "purple" },
                  { id: "PARTNER", name: "פרטנר", color: "pink" },
                  { id: "RELIGION", name: "דת", color: "indigo" },
                ].map((world) => {
                  const isCompleted = activeWorldsCompleted.includes(world.id);
                  return (
                    <Badge
                      key={world.id}
                      variant={isCompleted ? "default" : "outline"}
                      className={
                        isCompleted
                          ? `bg-${world.color}-100 hover:bg-${world.color}-200 text-${world.color}-800 border-${world.color}-200`
                          : `text-gray-500 border-gray-200 bg-gray-50`
                      }
                    >
                      {isCompleted && <CheckCheck className="h-3 w-3 mr-1" />}
                      {world.name}
                    </Badge>
                  );
                })}
              </div>
            </div>

            {/* רמת פעילות */}
            {activityLevel && (
              <div className="flex justify-between items-center pt-2 text-sm text-gray-600">
                <div>רמת פעילות:</div>
                <Badge
                  variant="outline"
                  className={cn(
                    "font-normal border-0",
                    getActivityLevelColor()
                  )}
                >
                  {activityLevel === "high" && "גבוהה"}
                  {activityLevel === "medium" && "בינונית"}
                  {activityLevel === "low" && "נמוכה"}
                </Badge>
              </div>
            )}
          </div>
        </CardContent>
      </Card>

      {/* מאפייני אישיות */}
      {personalityTraits && personalityTraits.length > 0 && (
        <Card className="shadow-sm hover:shadow-md transition-shadow border-blue-100">
          <CardHeader className="pb-2">
            <CardTitle className="text-lg flex items-center">
              <Award className="h-5 w-5 mr-2 text-blue-500" />
              מאפייני אישיות בולטים
            </CardTitle>
          </CardHeader>

          <CardContent>
            <div className="space-y-3">
              {personalityTraits.map((trait, index) => (
                <TooltipProvider key={index}>
                  <Tooltip>
                    <TooltipTrigger asChild>
                      <div className="space-y-1">
                        <div className="flex justify-between text-sm">
                          <div className="flex items-center">
                            <Star className="h-3.5 w-3.5 mr-1 text-amber-500" />
                            {trait.trait}
                          </div>
                          <span className="text-xs">{trait.score}%</span>
                        </div>
                        <Progress
                          value={trait.score}
                          className={cn(
                            "h-1.5",
                            "relative overflow-hidden",
                            "before:absolute before:inset-0 before:bg-gradient-to-r before:from-blue-400",
                            trait.score < 40
                              ? "before:to-blue-500"
                              : trait.score < 70
                              ? "before:to-purple-500"
                              : "before:to-pink-500"
                          )}
                        />
                      </div>
                    </TooltipTrigger>
                    <TooltipContent>
                      <p>ציון: {trait.score}/100</p>
                    </TooltipContent>
                  </Tooltip>
                </TooltipProvider>
              ))}
            </div>
          </CardContent>
        </Card>
      )}
    </div>
  );
}


==================================================
Contents of C:\Users\eytan\Desktop\שידוכים\shidduch-system\src\components\questionnaire\hooks\useMediaQuery.ts:
==================================================
import { useState, useEffect } from "react";

/**
 * הוק המאפשר לנטר שינויים במדיה קוורי
 * 
 * @param query מחרוזת מדיה קוורי כגון "(max-width: 768px)"
 * @returns בוליאני המציין האם המדיה קוורי פעיל
 * 
 * דוגמאות לשימוש:
 * const isMobile = useMediaQuery("(max-width: 768px)");
 * const isTablet = useMediaQuery("(min-width: 769px) and (max-width: 1024px)");
 * const isDesktop = useMediaQuery("(min-width: 1025px)");
 */
export function useMediaQuery(query: string): boolean {
  // מצב התאמת המדיה הנוכחית
  const [matches, setMatches] = useState<boolean>(false);

  // זיהוי האם אנו נמצאים בסביבת דפדפן
  const isBrowser = typeof window !== "undefined";

  useEffect(() => {
    // אם איננו בדפדפן, אין טעם להמשיך
    if (!isBrowser) {
      return undefined;
    }

    // בדיקה ראשונית של התאמת המדיה
    const media = window.matchMedia(query);
    setMatches(media.matches);

    // כשמתרחש שינוי בהתאמת המדיה, עדכן את המצב
    const listener = (event: MediaQueryListEvent) => {
      setMatches(event.matches);
    };

    // רישום האזנה לשינויים
    if (media.addEventListener) {
      media.addEventListener("change", listener);
    } else {
      // תמיכה בדפדפנים ישנים יותר
      media.addListener(listener);
    }

    // ניקוי האזנה בעת עזיבת הקומפוננטה
    return () => {
      if (media.removeEventListener) {
        media.removeEventListener("change", listener);
      } else {
        // תמיכה בדפדפנים ישנים יותר
        media.removeListener(listener);
      }
    };
  }, [query, isBrowser]);

  return matches;
}

// מקצרים נפוצים לשימוש
export function useIsMobile() {
  return useMediaQuery("(max-width: 767px)");
}

export function useIsTablet() {
  return useMediaQuery("(min-width: 768px) and (max-width: 1023px)");
}

export function useIsDesktop() {
  return useMediaQuery("(min-width: 1024px)");
}

export function useIsDarkMode() {
  return useMediaQuery("(prefers-color-scheme: dark)");
}

export function useReducedMotion() {
  return useMediaQuery("(prefers-reduced-motion: reduce)");
}

export default useMediaQuery;

==================================================
Contents of C:\Users\eytan\Desktop\שידוכים\shidduch-system\src\components\questionnaire\layout\QuestionnaireLayout.tsx:
==================================================
// src/components/questionnaire/layout/QuestionnaireLayout.tsx

import React, { useState, useEffect, useCallback } from "react";
import { Card, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Alert, AlertDescription } from "@/components/ui/alert";
import {
  Heart,
  User,
  Users,
  Save,
  LogOut,
  Settings,
  HelpCircle,
  CheckCircle,
  Loader2,
  Menu,
  X,
  Home,
  ArrowRightLeft,
} from "lucide-react";
import type { WorldId, QuestionnaireLayoutProps } from "../types/types";
import { cn } from "@/lib/utils";
import { useMediaQuery } from "../hooks/useMediaQuery";
import { motion, AnimatePresence } from "framer-motion";
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip";
import {
  Sheet,
  SheetContent,
  SheetHeader,
  SheetTitle,
  SheetTrigger,
} from "@/components/ui/sheet"; // הוספת ייבוא ל-Sheet
import FAQ from "../components/FAQ"; // ייבוא קומפוננטת FAQ
import AccessibilityFeatures from "../components/AccessibilityFeatures"; // ייבוא קומפוננטת נגישות

// Mapping icons for different "worlds" in the system
const worldIcons = {
  PERSONALITY: User,
  VALUES: Heart,
  RELATIONSHIP: Users,
  PARTNER: Heart,
  RELIGION: CheckCircle, // Using CheckCircle for Religion as an example, adjust if needed
} as const;

// Mapping labels for different "worlds"
const worldLabels = {
  PERSONALITY: "אישיות",
  VALUES: "ערכים ואמונות",
  RELATIONSHIP: "זוגיות",
  PARTNER: "תכונות וערכים בבן/בת הזוג", // Corrected label
  RELIGION: "דת ומסורת",
} as const;

// Enhanced Toast component
const Toast = ({ message, type, isVisible, onClose }) => {
  if (!isVisible) return null;

  return (
    <motion.div
      initial={{ opacity: 0, y: 50 }}
      animate={{ opacity: 1, y: 0 }}
      exit={{ opacity: 0, y: 20 }}
      className={cn(
        "fixed bottom-4 left-1/2 transform -translate-x-1/2 z-50 px-4 py-3 rounded-lg shadow-lg",
        "max-w-md w-full flex items-center justify-between",
        type === "success" && "bg-green-500 text-white",
        type === "error" && "bg-red-500 text-white",
        type === "info" && "bg-blue-500 text-white"
      )}
    >
      <span className="font-medium">{message}</span>
      {onClose && (
        <button
          onClick={onClose}
          className="ml-2 text-white hover:bg-white/20 p-1 rounded-full transition-colors"
          aria-label="סגור הודעה"
        >
          <X className="h-4 w-4" />
        </button>
      )}
    </motion.div>
  );
};

export default function QuestionnaireLayout({
  children,
  currentWorld,
  completedWorlds,
  onWorldChange,
  onExit,
  onSaveProgress,
  language = "he",
}: QuestionnaireLayoutProps) {
  const [isSaving, setIsSaving] = useState(false);
  const [showExitPrompt, setShowExitPrompt] = useState(false);
  const [showMobileNav, setShowMobileNav] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [toast, setToast] = useState<{
    message: string;
    type: "success" | "error" | "info";
    isVisible: boolean;
  }>({
    message: "",
    type: "info",
    isVisible: false,
  });
  const [lastSaved, setLastSaved] = useState<Date | null>(null);
  const [saveCount, setSaveCount] = useState(0); // Save counter

  const isSmallScreen = useMediaQuery("(max-width: 640px)");

  // Toast utilities
  const showToast = useCallback(
    (message: string, type: "success" | "error" | "info" = "info") => {
      setToast({ message, type, isVisible: true });
      setTimeout(() => {
        setToast((prev) => ({ ...prev, isVisible: false }));
      }, 3000);
    },
    []
  );

  // Save functionality
  const handleSave = useCallback(
    async (isAutoSave = false) => {
      if (!onSaveProgress) {
        if (!isAutoSave) {
          showToast("לא ניתן לשמור את השאלון כרגע", "error");
        }
        return;
      }

      setIsSaving(true);
      setError(null);

      try {
        await onSaveProgress();
        setLastSaved(new Date());
        setSaveCount((prev) => prev + 1);
        if (!isAutoSave) {
          showToast("השאלון נשמר בהצלחה", "success");
        }
      } catch {
        setError("אירעה שגיאה בשמירת השאלון");
        if (!isAutoSave) {
          showToast("אירעה שגיאה בשמירת השאלון", "error");
        }
      } finally {
        setIsSaving(false);
      }
    },
    [onSaveProgress, showToast]
  );

  // Automatic save timer
  useEffect(() => {
    let saveTimer: NodeJS.Timeout;

    if (onSaveProgress) {
      saveTimer = setInterval(() => {
        handleSave(true);
      }, 120000); // Auto-save every 2 minutes
    }

    return () => {
      if (saveTimer) clearInterval(saveTimer);
    };
  }, [onSaveProgress, handleSave]);

  // Setup RTL/LTR classes
  const isRTL = language === "he";
  const directionClass = isRTL ? "rtl" : "ltr";

  const NavButton = ({ worldId, isMobile }) => {
    const Icon = worldIcons[worldId as keyof typeof worldIcons];
    const isActive = currentWorld === worldId;
    const isCompleted = completedWorlds.includes(worldId as WorldId);

    return (
      <TooltipProvider delayDuration={300}>
        <Tooltip>
          <TooltipTrigger asChild>
            <Button
              variant={isActive ? "default" : "outline"}
              size={isMobile ? "sm" : "default"}
              className={cn(
                "flex items-center justify-start gap-2 w-full mb-2 transition-all",
                isActive ? "bg-primary text-white" : "", // Use primary color from theme
                isCompleted ? "border-green-500" : "",
                isMobile ? "text-xs py-1" : ""
              )}
              onClick={() => {
                onWorldChange(worldId as WorldId);
                if (isMobile) {
                  setShowMobileNav(false);
                }
              }}
            >
              <Icon className={cn("h-4 w-4", isMobile ? "mr-1" : "mr-2")} />
              <span className="truncate">
                {worldLabels[worldId as keyof typeof worldLabels]}
              </span>
              {isCompleted && (
                <CheckCircle className="h-3 w-3 text-green-500 ml-auto" />
              )}
            </Button>
          </TooltipTrigger>
          <TooltipContent side={isRTL ? "left" : "right"}>
            <div className="text-sm">
              <p className="font-medium">
                {worldLabels[worldId as keyof typeof worldLabels]}
              </p>
              <p>
                {isCompleted
                  ? "✓ הושלם"
                  : isActive
                  ? "◉ פעיל כעת"
                  : "○ טרם הושלם"}
              </p>
            </div>
          </TooltipContent>
        </Tooltip>
      </TooltipProvider>
    );
  };

  // --- תחילת הוספת קוד ---
  // פונקציה לרנדור כפתור FAQ עם Sheet
  const renderFAQButton = (isMobile: boolean) => (
    <Sheet>
      <SheetTrigger asChild>
        <Button
          variant="ghost"
          size={isMobile ? "sm" : "icon"} // Changed size to "icon" for desktop
          className={cn(
            "flex items-center justify-center", // Centered content for icon button
            isMobile
              ? "justify-start gap-2 w-full mb-2 text-xs py-1"
              : "w-8 h-8 p-0 rounded-full" // Specific desktop styles
          )}
          aria-label="שאלות נפוצות"
        >
          <HelpCircle className={cn("h-4 w-4", isMobile ? "mr-1" : "")} />
          {!isMobile && <span className="sr-only">שאלות נפוצות</span>}{" "}
          {/* Hidden text for desktop */}
          {isMobile && <span>שאלות נפוצות</span>}
        </Button>
      </SheetTrigger>
      <SheetContent
        side={isRTL ? "left" : "right"}
        className="w-[90vw] max-w-lg overflow-y-auto"
      >
        <SheetHeader>
          <SheetTitle>שאלות נפוצות</SheetTitle>
        </SheetHeader>
        <div className="mt-4">
          <FAQ
          // You can pass currentWorld to filter FAQs if desired
          // initialOpenId="save-progress" // Optionally open a specific FAQ item
          />
        </div>
      </SheetContent>
    </Sheet>
  );
  // --- סוף הוספת קוד ---

  const MobileNav = () => (
    <AnimatePresence>
      {showMobileNav && (
        <>
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            transition={{ duration: 0.2 }}
            className="fixed inset-0 bg-black/50 backdrop-blur-sm z-50"
            onClick={() => setShowMobileNav(false)}
          />
          <motion.div
            initial={{ x: isRTL ? "100%" : "-100%" }}
            animate={{ x: 0 }}
            exit={{ x: isRTL ? "100%" : "-100%" }}
            transition={{ type: "spring", damping: 25, stiffness: 300 }}
            className={`fixed top-0 ${
              isRTL ? "right-0" : "left-0"
            } h-full w-3/4 max-w-xs bg-white shadow-lg p-4 z-50 ${directionClass} flex flex-col`} // Added flex flex-col
          >
            <div className="flex items-center justify-between mb-6">
              <h2 className="text-lg font-medium flex items-center">
                <ArrowRightLeft className="w-5 h-5 mr-2 text-blue-500" />
                ניווט בשאלון
              </h2>
              <Button
                variant="ghost"
                size="sm"
                onClick={() => setShowMobileNav(false)}
                className="w-8 h-8 p-0 rounded-full"
              >
                <X className="h-4 w-4" />
              </Button>
            </div>

            <div className="flex-1 overflow-y-auto mb-4">
              {" "}
              {/* Made scrollable */}
              {Object.keys(worldIcons).map((worldId) => (
                <NavButton key={worldId} worldId={worldId} isMobile={true} />
              ))}
              {/* Add FAQ button to mobile nav */}
              {renderFAQButton(true)}
            </div>

            <div className="mt-auto pt-4 border-t space-y-4">
              {lastSaved && (
                <div className="flex items-center text-xs text-gray-500 mb-2">
                  <CheckCircle className="h-3 w-3 mr-1 text-green-500" />
                  <span>
                    נשמר לאחרונה: {lastSaved.toLocaleTimeString()}
                    {saveCount > 0 && ` (${saveCount} שמירות)`}
                  </span>
                </div>
              )}

              <div className="flex flex-col gap-2">
                <Button
                  variant="outline"
                  size="sm"
                  className="justify-start"
                  onClick={() => handleSave()}
                  disabled={isSaving}
                >
                  {isSaving ? (
                    <Loader2 className="h-3 w-3 mr-2 animate-spin" />
                  ) : (
                    <Save className="h-3 w-3 mr-2" />
                  )}
                  שמור מצב נוכחי
                </Button>

                {/* Changed to use onExit function instead of direct router navigation */}
                <Button
                  variant="outline"
                  size="sm"
                  className="justify-start"
                  onClick={onExit}
                >
                  <Home className="h-3 w-3 mr-2" />
                  חזרה למפת העולמות
                </Button>

                <Button
                  variant="outline"
                  size="sm"
                  className="justify-start text-red-500 hover:text-red-700"
                  onClick={() => setShowExitPrompt(true)}
                >
                  <LogOut className="h-3 w-3 mr-2" />
                  יציאה
                </Button>
              </div>
            </div>
          </motion.div>
        </>
      )}
    </AnimatePresence>
  );

  return (
    <div
      className={`flex flex-col min-h-screen lg:flex-row bg-gray-50 ${directionClass}`}
    >
      {/* Mobile Header */}
      <header className="lg:hidden sticky top-0 z-40 bg-white shadow-sm p-3 flex items-center justify-between">
        <Button
          variant="ghost"
          size="sm"
          onClick={() => setShowMobileNav(true)}
          className="inline-flex items-center"
        >
          <Menu className="h-5 w-5" />
          {!isSmallScreen && <span className="ml-2">תפריט</span>}
        </Button>

        <div className="flex flex-col items-center">
          <h1 className="text-sm font-medium">
            {worldLabels[currentWorld as keyof typeof worldLabels]}
          </h1>
          {completedWorlds.length > 0 && (
            <div className="text-xs text-gray-500">
              {completedWorlds.length} / {Object.keys(worldLabels).length}{" "}
              הושלמו
            </div>
          )}
        </div>

        <div className="flex items-center gap-1">
          {/* --- תחילת הוספת קוד --- */}
          {/* Add FAQ button to Mobile Header */}
          <Sheet>
            <SheetTrigger asChild>
              <Button
                variant="ghost"
                size="icon"
                className="h-8 w-8 rounded-full"
              >
                <HelpCircle className="h-4 w-4" />
              </Button>
            </SheetTrigger>
            <SheetContent
              side={isRTL ? "left" : "right"}
              className="w-[90vw] max-w-lg overflow-y-auto"
            >
              <SheetHeader>
                <SheetTitle>שאלות נפוצות</SheetTitle>
              </SheetHeader>
              <div className="mt-4">
                <FAQ />
              </div>
            </SheetContent>
          </Sheet>
          {/* --- סוף הוספת קוד --- */}
          {lastSaved && !isSmallScreen && (
            <span className="text-xs text-gray-500 mr-1">
              <CheckCircle className="inline-block h-3 w-3 mr-1 text-green-500" />
              נשמר
            </span>
          )}
          <Button
            variant="ghost"
            size="icon"
            className={cn(
              "h-8 w-8 rounded-full",
              isSaving ? "bg-blue-100" : "bg-green-50 text-green-600"
            )}
            onClick={() => handleSave()}
            disabled={isSaving}
          >
            {isSaving ? (
              <Loader2 className="h-4 w-4 animate-spin" />
            ) : (
              <Save className="h-4 w-4" />
            )}
          </Button>
        </div>
      </header>

      {/* Mobile Nav */}
      <MobileNav />

      {/* Desktop Sidebar */}
      <aside
        className={cn(
          "w-60 bg-white border-r hidden lg:flex lg:flex-col overflow-y-auto",
          isRTL ? "border-l" : "border-r"
        )}
      >
        <div className="p-4 border-b">
          <div className="flex items-center justify-between">
            <h3 className="font-medium text-lg">עולמות השאלון</h3>
            <div className="flex gap-1">
              {/* --- תחילת הוספת קוד --- */}
              {/* FAQ button for desktop */}
              {renderFAQButton(false)}
              {/* --- סוף הוספת קוד --- */}
              <TooltipProvider delayDuration={300}>
                <Tooltip>
                  <TooltipTrigger asChild>
                    <Button
                      variant="ghost"
                      size="icon"
                      className="w-8 h-8 p-0 rounded-full"
                    >
                      <Settings className="w-4 h-4" />
                    </Button>
                  </TooltipTrigger>
                  <TooltipContent side="bottom">
                    <p>הגדרות</p>
                  </TooltipContent>
                </Tooltip>
              </TooltipProvider>
              {/* Removed the original HelpCircle as FAQ button replaces it */}
            </div>
          </div>
        </div>

        <div className="p-4 space-y-2 flex-1 overflow-y-auto">
          {" "}
          {/* Made scrollable */}
          {Object.keys(worldIcons).map((worldId) => (
            <NavButton key={worldId} worldId={worldId} isMobile={false} />
          ))}
        </div>

        <div className="p-4 border-t mt-auto">
          {lastSaved && (
            <div className="flex items-center text-xs text-gray-500 mb-3">
              <CheckCircle className="h-3 w-3 mr-1 text-green-500" />
              <span>
                נשמר לאחרונה: {lastSaved.toLocaleTimeString()}
                {saveCount > 0 && ` (${saveCount} שמירות)`}
              </span>
            </div>
          )}

          <div className="space-y-2">
            <Button
              variant="outline"
              className="w-full"
              onClick={() => handleSave()}
              disabled={isSaving}
            >
              {isSaving ? (
                <Loader2 className="w-4 h-4 mr-2 animate-spin" />
              ) : (
                <Save className="w-4 h-4 mr-2" />
              )}
              שמור התקדמות
            </Button>

            {/* Changed to use onExit function instead of direct router navigation */}
            <Button variant="outline" className="w-full" onClick={onExit}>
              <Home className="w-4 h-4 mr-2" />
              מפת העולמות
            </Button>

            <Button
              variant="outline"
              className="w-full text-red-500 hover:text-red-700"
              onClick={() => setShowExitPrompt(true)}
            >
              <LogOut className="w-4 h-4 mr-2" />
              יציאה
            </Button>
          </div>
        </div>
      </aside>

      {/* Main content area */}
      <main className="flex-1 p-3 md:p-6 lg:pb-16 overflow-y-auto relative">
        {" "}
        {/* Added relative */}
        {error && (
          <Alert variant="destructive" className="mb-4">
            <AlertDescription>{error}</AlertDescription>
          </Alert>
        )}
        {children}
        {/* --- תחילת הוספת קוד --- */}
        {/* Render AccessibilityFeatures so it's always available */}
        <AccessibilityFeatures className="fixed bottom-4 right-4 lg:bottom-6 lg:right-6 z-50" />{" "}
        {/* Added fixed positioning */}
        {/* --- סוף הוספת קוד --- */}
      </main>

      {/* Exit Confirmation Dialog */}
      <AnimatePresence>
        {showExitPrompt && (
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            className="fixed inset-0 bg-black/50 backdrop-blur-sm flex items-center justify-center z-50 p-4"
          >
            <motion.div
              initial={{ scale: 0.9, opacity: 0 }}
              animate={{ scale: 1, opacity: 1 }}
              exit={{ scale: 0.9, opacity: 0 }}
              className="w-full max-w-md"
            >
              <Card className="bg-white">
                <CardContent className="pt-6">
                  <h3 className="text-lg font-medium mb-4">
                    האם אתה בטוח שברצונך לצאת?
                  </h3>
                  <p className="text-gray-600 mb-6">
                    כל התשובות שלא נשמרו יאבדו. האם ברצונך לשמור לפני היציאה?
                  </p>
                  <div className="flex flex-col sm:flex-row justify-end gap-2">
                    <Button
                      variant="outline"
                      size="sm"
                      onClick={() => setShowExitPrompt(false)}
                    >
                      ביטול
                    </Button>
                    <Button
                      variant="outline"
                      size="sm"
                      onClick={async () => {
                        await handleSave();
                        if (onExit) {
                          onExit();
                        }
                        setShowExitPrompt(false); // Close prompt after action
                      }}
                      disabled={isSaving} // Disable while saving
                    >
                      {isSaving ? (
                        <Loader2 className="h-4 w-4 animate-spin mr-1" />
                      ) : null}
                      שמור וצא
                    </Button>
                    <Button
                      variant="destructive"
                      size="sm"
                      onClick={() => {
                        setShowExitPrompt(false);
                        if (onExit) {
                          onExit();
                        }
                      }}
                    >
                      צא ללא שמירה
                    </Button>
                  </div>
                </CardContent>
              </Card>
            </motion.div>
          </motion.div>
        )}
      </AnimatePresence>

      {/* Toast */}
      <AnimatePresence>
        {toast.isVisible && (
          <Toast
            message={toast.message}
            type={toast.type}
            isVisible={toast.isVisible}
            onClose={() => setToast((prev) => ({ ...prev, isVisible: false }))}
          />
        )}
      </AnimatePresence>
    </div>
  );
}


==================================================
Contents of C:\Users\eytan\Desktop\שידוכים\shidduch-system\src\components\questionnaire\layout\WorldsMap.tsx:
==================================================
import React, { useState } from "react";
import { motion, AnimatePresence } from "framer-motion";
import { Card, CardContent } from "@/components/ui/card";
import {
  Scroll,
  Heart,
  Users,
  User,
  CheckCircle2,
  Lock,
  ArrowRight,
  Info,
  Star,
  Play,
  UserCheck, // Added UserCheck icon
} from "lucide-react";
import type { WorldId } from "../types/types";
import { cn } from "@/lib/utils";
import { Button } from "@/components/ui/button";
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip";
import { Progress } from "@/components/ui/progress";
import { useMediaQuery } from "../hooks/useMediaQuery";
import { Badge } from "@/components/ui/badge"; // Added Badge import

interface WorldsMapProps {
  currentWorld: WorldId;
  completedWorlds: WorldId[];
  onWorldChange?: (worldId: WorldId) => void;
  className?: string;
}

// Updated config with UserCheck for Partner
const worldsConfig = {
  RELATIONSHIP: {
    icon: Users,
    color: "bg-purple-100",
    activeColor: "bg-purple-600",
    hoverColor: "hover:bg-purple-200",
    borderColor: "border-purple-300",
    textColor: "text-purple-700",
    activeTextColor: "text-white",
    label: "זוגיות",
    description: "תפיסת הזוגיות והציפיות ממערכת היחסים",
    order: 3,
  },
  VALUES: {
    icon: Heart,
    color: "bg-pink-100",
    activeColor: "bg-pink-600",
    hoverColor: "hover:bg-pink-200",
    borderColor: "border-pink-300",
    textColor: "text-pink-700",
    activeTextColor: "text-white",
    label: "ערכים ואמונות",
    description: "עולם הערכים והאמונות שלך",
    order: 2,
  },
  PERSONALITY: {
    icon: User,
    color: "bg-blue-100",
    activeColor: "bg-blue-600",
    hoverColor: "hover:bg-blue-200",
    borderColor: "border-blue-300",
    textColor: "text-blue-700",
    activeTextColor: "text-white",
    label: "אישיות",
    description: "המאפיינים האישיותיים שלך",
    order: 1,
  },
  PARTNER: {
    icon: UserCheck, // Changed icon
    color: "bg-pink-100", // Adjusted color to match Values for example, change if needed
    activeColor: "bg-pink-600",
    hoverColor: "hover:bg-pink-200",
    borderColor: "border-pink-300",
    textColor: "text-pink-700",
    activeTextColor: "text-white",
    label: "פרטנר",
    description: "מה חשוב לך בבן/בת הזוג",
    order: 4,
  },
  RELIGION: {
    icon: Scroll,
    color: "bg-indigo-100",
    activeColor: "bg-indigo-600",
    hoverColor: "hover:bg-indigo-200",
    borderColor: "border-indigo-300",
    textColor: "text-indigo-700",
    activeTextColor: "text-white",
    label: "דת ומסורת",
    description: "חיבור לדת, אמונה ומסורת ישראל",
    order: 5,
  },
} as const;

// Define the keys of worldsConfig as a specific type
type WorldConfigKey = keyof typeof worldsConfig;

// Define the order using the specific type
const WORLD_ORDER: WorldConfigKey[] = [
  "PERSONALITY",
  "VALUES",
  "RELATIONSHIP",
  "PARTNER",
  "RELIGION",
];

// Define Badge variants (add to your theme or global CSS if needed)
// Assuming your Badge component accepts these variant names as strings
const badgeVariants = {
  default: "border-transparent bg-blue-100 text-blue-800",
  success: "border-transparent bg-green-100 text-green-800",
  warning: "border-transparent bg-yellow-100 text-yellow-800",
  secondary: "border-transparent bg-gray-100 text-gray-800",
  outline: "text-foreground", // Default outline style
};

// Define the type for the badge variant keys
type BadgeVariant = keyof typeof badgeVariants;

export default function WorldsMap({
  currentWorld,
  completedWorlds,
  onWorldChange,
  className = "",
}: WorldsMapProps) {
  const [hoveredWorld, setHoveredWorld] = useState<WorldId | null>(null);
  const [expanded, setExpanded] = useState<WorldId | null>(null);
  const isMobile = useMediaQuery("(max-width: 640px)");

  // Type safety: Ensure WorldId is compatible with WorldConfigKey if needed elsewhere
  // This check is usually implicit if WorldId is defined as keyof typeof worldsConfig
  // Example assertion if types were potentially incompatible:
  // const currentWorldTyped: WorldConfigKey = currentWorld;

  const isWorldAccessible = (): boolean => {
    // Implement logic here if some worlds should be locked initially
    // For now, all worlds are accessible
    return true;
  };

  const completionPercent =
    completedWorlds.length > 0
      ? Math.round((completedWorlds.length / WORLD_ORDER.length) * 100)
      : 0;

  // Find the next recommended world
  const nextRecommendedWorld = WORLD_ORDER.find(
    (world) => !completedWorlds.includes(world)
  );

  const cardVariants = {
    hidden: { opacity: 0, y: 20 },
    visible: { opacity: 1, y: 0, transition: { duration: 0.3 } },
    hover: { scale: 1.03, transition: { duration: 0.2 } },
    tap: { scale: 0.98, transition: { duration: 0.1 } },
  };

  const contentVariants = {
    hidden: { opacity: 0 },
    visible: { opacity: 1, transition: { duration: 0.2 } },
  };

  return (
    <div className="space-y-6">
      {/* Status Header */}
      <div className="flex flex-col sm:flex-row justify-between items-center bg-white p-4 rounded-lg shadow-sm border mb-4">
        <div className="text-center sm:text-right mb-4 sm:mb-0">
          <h3 className="font-medium text-lg">מפת העולמות</h3>
          <div className="text-sm text-gray-500 mt-1">
            השלמת {completedWorlds.length} מתוך {WORLD_ORDER.length} עולמות
          </div>

          <div className="mt-2 w-full sm:max-w-[200px]">
            {/* Progress bar - simple version */}
            <Progress value={completionPercent} className="h-2" />
          </div>
        </div>

        {/* Recommended World Button */}
        {nextRecommendedWorld && nextRecommendedWorld !== currentWorld && (
          <TooltipProvider delayDuration={200}>
            <Tooltip>
              <TooltipTrigger asChild>
                <Button
                  size="sm"
                  onClick={() => onWorldChange?.(nextRecommendedWorld)}
                  className="bg-gradient-to-r from-blue-500 to-cyan-500 hover:from-blue-600 hover:to-cyan-600 text-white gap-1 shadow-md hover:shadow-lg transition-shadow animate-pulse-slow" // Added animation
                >
                  <Star className="h-4 w-4 ml-1 fill-current" />{" "}
                  {/* Filled star */}
                  עבור לעולם המומלץ: {worldsConfig[nextRecommendedWorld].label}
                </Button>
              </TooltipTrigger>
              <TooltipContent>
                <p>המשך בסדר המומלץ לחוויה מיטבית</p>
              </TooltipContent>
            </Tooltip>
          </TooltipProvider>
        )}
      </div>

      {/* Progress Visual Tracker */}
      <div className="flex items-center justify-center mb-6 overflow-x-auto py-2">
        <div className="flex items-center max-w-lg w-full relative">
          {/* Connection Lines */}
          <div className="absolute h-1 bg-gray-200 top-1/2 left-5 right-5 -translate-y-1/2 z-0"></div>

          {/* World Circles */}
          {WORLD_ORDER.map((worldId, index) => {
            const config = worldsConfig[worldId];
            const isActive = currentWorld === worldId;
            const isCompleted = completedWorlds.includes(worldId);
            const isAccessible = isWorldAccessible();
            const isRecommended =
              worldId === nextRecommendedWorld && !isCompleted; // Is this the next recommended?

            const progressClass = isCompleted
              ? "bg-green-500"
              : isActive
              ? config.activeColor
              : isRecommended // Highlight recommended world
              ? "bg-gradient-to-r from-blue-400 to-cyan-400"
              : "bg-gray-200";

            const circleContent = isCompleted ? (
              <CheckCircle2 className="h-5 w-5 text-white" />
            ) : isAccessible ? (
              <span className="text-sm font-medium">{index + 1}</span>
            ) : (
              <Lock className="h-3.5 w-3.5 text-gray-400" />
            );

            return (
              <TooltipProvider key={worldId} delayDuration={300}>
                <Tooltip>
                  <TooltipTrigger asChild>
                    <motion.div
                      className="relative z-10 flex-1 flex justify-center"
                      whileHover={{ scale: 1.1 }}
                      whileTap={{ scale: 0.95 }}
                      transition={{ duration: 0.2 }}
                    >
                      <motion.button
                        className={cn(
                          "w-10 h-10 rounded-full flex items-center justify-center",
                          "border-2 border-white shadow-sm transition-all",
                          isActive
                            ? "ring-2 ring-offset-2 ring-blue-500" // Simpler active indicator
                            : isRecommended // Highlight recommended
                            ? "ring-2 ring-offset-1 ring-cyan-400"
                            : "",
                          progressClass,
                          isActive || isCompleted
                            ? "text-white"
                            : "text-gray-600",
                          !isAccessible
                            ? "cursor-not-allowed opacity-70"
                            : "hover:shadow-md"
                        )}
                        onClick={() => isAccessible && onWorldChange?.(worldId)}
                        disabled={!isAccessible}
                      >
                        {/* Recommended Star Indicator */}
                        {isRecommended && (
                          <Star className="absolute -top-1 -right-1 h-3 w-3 text-yellow-400 fill-current" />
                        )}
                        {circleContent}
                      </motion.button>
                      {/* World Label Below Circle */}
                      <div className="absolute -bottom-6 text-xs font-medium whitespace-nowrap">
                        {config.label}
                      </div>
                    </motion.div>
                  </TooltipTrigger>
                  {/* Enhanced Tooltip Content */}
                  <TooltipContent
                    side="top"
                    className="p-2 max-w-[200px] text-center"
                  >
                    <p className="font-medium text-base mb-1">{config.label}</p>
                    <p className="text-xs text-gray-600">
                      {config.description}
                    </p>
                    <div className="mt-2 flex justify-center">
                      {isCompleted && (
                        <Badge className={cn("text-xs", badgeVariants.success)}>
                          ✓ הושלם
                        </Badge>
                      )}
                      {isActive && (
                        <Badge className={cn("text-xs", badgeVariants.default)}>
                          ◉ פעיל כעת
                        </Badge>
                      )}
                      {isRecommended && (
                        <Badge className={cn("text-xs", badgeVariants.warning)}>
                          ★ מומלץ הבא
                        </Badge>
                      )}
                      {!isCompleted &&
                        !isActive &&
                        !isRecommended &&
                        isAccessible && (
                          <Badge
                            className={cn("text-xs", badgeVariants.outline)}
                          >
                            ○ זמין
                          </Badge>
                        )}
                      {!isAccessible && (
                        <Badge
                          className={cn("text-xs", badgeVariants.secondary)}
                        >
                          <Lock className="h-3 w-3 mr-1" /> נעול
                        </Badge>
                      )}
                    </div>
                  </TooltipContent>
                </Tooltip>
              </TooltipProvider>
            );
          })}
        </div>
      </div>

      {/* World Cards */}
      <div
        className={cn(
          "grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4",
          className
        )}
      >
        {WORLD_ORDER.map((worldId) => {
          const config = worldsConfig[worldId];
          const Icon = config.icon;
          const isActive = currentWorld === worldId;
          const isCompleted = completedWorlds.includes(worldId);
          const isAccessible = isWorldAccessible();
          const isRecommended =
            worldId === nextRecommendedWorld && !isCompleted;
          const isHovered = hoveredWorld === worldId;
          const isExpanded = expanded === worldId;

          let statusText = "";
          // *** FIX START ***
          // Declare badgeVariant with the specific BadgeVariant type
          let badgeVariant: BadgeVariant = "outline";
          // *** FIX END ***

          if (isCompleted) {
            statusText = "הושלם";
            badgeVariant = "success";
          } else if (!isAccessible) {
            statusText = "נעול";
            badgeVariant = "secondary";
          } else if (isActive) {
            statusText = "פעיל כעת";
            badgeVariant = "default";
          } else if (isRecommended) {
            statusText = "מומלץ הבא";
            badgeVariant = "warning";
          } else {
            statusText = "זמין";
            badgeVariant = "outline"; // Explicitly setting default
          }

          return (
            <motion.div
              key={worldId}
              initial="hidden"
              animate="visible"
              whileHover={isAccessible ? "hover" : ""}
              whileTap={isAccessible ? "tap" : ""}
              variants={cardVariants}
              onClick={() => {
                if (!isAccessible) return; // Prevent action on locked cards
                if (isExpanded) {
                  setExpanded(null); // Close if already expanded
                } else {
                  setExpanded(worldId); // Expand this card
                }
                // Optionally navigate immediately on click if not expanded
                // if (!isExpanded && onWorldChange) {
                //    onWorldChange(worldId);
                // }
              }}
            >
              <Card
                className={cn(
                  "transition-all duration-200 overflow-hidden h-full cursor-pointer", // Added cursor-pointer
                  isActive
                    ? "ring-2 ring-blue-500 shadow-md"
                    : "hover:shadow-md",
                  isRecommended ? "ring-2 ring-cyan-400 shadow-md" : "", // Recommended highlight
                  !isAccessible && "cursor-not-allowed opacity-90 bg-gray-50" // Style locked cards
                )}
                onMouseEnter={() => setHoveredWorld(worldId)}
                onMouseLeave={() => setHoveredWorld(null)}
              >
                {/* Top color bar */}
                <div
                  className={cn(
                    "h-2",
                    isActive
                      ? config.activeColor
                      : isCompleted
                      ? "bg-green-500"
                      : isRecommended
                      ? "bg-gradient-to-r from-blue-400 to-cyan-400"
                      : "bg-gray-200"
                  )}
                ></div>

                <CardContent
                  className={cn("p-4", isExpanded ? "pb-8" : "pb-4")}
                >
                  <div className="flex items-center gap-3">
                    {/* Icon */}
                    <div
                      className={cn(
                        "p-2 rounded-full",
                        isActive ? config.activeColor : config.color
                      )}
                    >
                      <Icon
                        className={cn(
                          "w-5 h-5",
                          isActive ? config.activeTextColor : config.textColor
                        )}
                      />
                    </div>

                    {/* Title and Status Badge */}
                    <div className="flex-1">
                      <h3 className="font-medium flex items-center">
                        {config.label}
                        {/* *** FIX START *** */}
                        {/* Remove 'as any'. The type of badgeVariant is now correctly inferred */}
                        <Badge
                          variant={badgeVariant}
                          className="ml-2 text-xs px-1.5 py-0.5"
                        >
                          {/* *** FIX END *** */}
                          {/* Icons for badges */}
                          {badgeVariant === "success" && (
                            <CheckCircle2 className="h-3 w-3 mr-1" />
                          )}
                          {badgeVariant === "warning" && (
                            <Star className="h-3 w-3 mr-1" />
                          )}
                          {badgeVariant === "default" && (
                            <Play className="h-3 w-3 mr-1" />
                          )}
                          {badgeVariant === "secondary" && (
                            <Lock className="h-3 w-3 mr-1" />
                          )}
                          {statusText}
                        </Badge>
                      </h3>

                      {/* Description (shown on hover/expand) */}
                      <AnimatePresence mode="wait">
                        {(isHovered ||
                          isExpanded ||
                          (isMobile && isActive)) && (
                          <motion.p
                            initial="hidden"
                            animate="visible"
                            exit="hidden"
                            variants={contentVariants}
                            className="text-xs text-gray-500 mt-1"
                          >
                            {config.description}
                          </motion.p>
                        )}
                      </AnimatePresence>
                    </div>
                  </div>

                  {/* Expanded Content */}
                  <AnimatePresence>
                    {isExpanded && (
                      <motion.div
                        initial={{ opacity: 0, height: 0 }}
                        animate={{ opacity: 1, height: "auto" }}
                        exit={{ opacity: 0, height: 0 }}
                        transition={{ duration: 0.3 }}
                        className="mt-4 pt-4 border-t"
                      >
                        <p className="text-sm text-gray-600 mb-3">
                          {config.description}
                        </p>

                        {/* Action Button */}
                        <Button
                          className={cn(
                            "w-full",
                            isCompleted
                              ? "bg-green-600 hover:bg-green-700"
                              : isRecommended
                              ? "bg-gradient-to-r from-blue-500 to-cyan-500 hover:from-blue-600 hover:to-cyan-600"
                              : "bg-blue-600 hover:bg-blue-700"
                          )}
                          onClick={(e) => {
                            e.stopPropagation(); // Prevent card click when button is clicked
                            if (isAccessible && onWorldChange) {
                              onWorldChange(worldId);
                            }
                          }}
                          disabled={!isAccessible}
                        >
                          {isCompleted ? (
                            <>
                              <CheckCircle2 className="w-4 h-4 mr-2" />
                              ערוך תשובות
                            </>
                          ) : isActive ? (
                            <>
                              <Play className="w-4 h-4 mr-2" />
                              המשך בעולם זה
                            </>
                          ) : isRecommended ? (
                            <>
                              <Star className="w-4 h-4 mr-2 fill-current" />
                              התחל עולם מומלץ
                            </>
                          ) : (
                            <>
                              <ArrowRight className="w-4 h-4 mr-2" />
                              התחל עולם זה
                            </>
                          )}
                        </Button>
                      </motion.div>
                    )}
                  </AnimatePresence>

                  {/* Indicator for active world (when not expanded) */}
                  {isActive && !isExpanded && (
                    <motion.div
                      initial={{ opacity: 0, y: 5 }}
                      animate={{ opacity: 1, y: 0 }}
                      className="mt-3 pt-3 border-t text-xs text-gray-600 flex items-center"
                    >
                      <Info className="h-3 w-3 text-blue-500 mr-1" />
                      אתה נמצא כעת בעולם זה
                    </motion.div>
                  )}
                </CardContent>
              </Card>
            </motion.div>
          );
        })}
      </div>
    </div>
  );
}

// Remember to add the animation if needed:
/*
@layer utilities {
  @keyframes pulse-slow {
    50% { opacity: .7; }
  }
  .animate-pulse-slow {
    animation: pulse-slow 2.5s cubic-bezier(0.4, 0, 0.6, 1) infinite;
  }
}
*/


==================================================
Contents of C:\Users\eytan\Desktop\שידוכים\shidduch-system\src\components\questionnaire\onboarding\TrackSelection.tsx:
==================================================
import React, { useState } from "react";
import { motion } from "framer-motion";
import { Card, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Progress } from "@/components/ui/progress";
import { Alert, AlertDescription } from "@/components/ui/alert";
import {
  Scroll,
  Book,
  Heart,
  Sun,
  ArrowLeft,
  ArrowRight,
  Info,
  Star,
} from "lucide-react";
import type { UserTrack } from "../types/types";

interface TrackSelectionProps {
  onSelect: (track: UserTrack) => void;
  onBack: () => void;
  selectedTrack?: UserTrack;
}

interface TrackOption {
  id: UserTrack;
  title: string;
  description: string;
  icon: React.ReactNode;
  color: string;
  characteristics: string[];
  details: {
    traditions: string;
    lifestyle: string;
    community: string;
  };
}

const trackOptions: TrackOption[] = [
  {
    id: "SECULAR",
    title: "חילוני",
    description: "אורח חיים חופשי עם זיקה למסורת",
    icon: <Sun className="w-6 h-6" />,
    color: "bg-blue-500",
    characteristics: [
      "גמישות בשמירת מסורת",
      "פתיחות לאורח חיים מודרני",
      "חיבור לערכים יהודיים תרבותיים",
    ],
    details: {
      traditions: "שמירה על מסורות משפחתיות וחגים",
      lifestyle: "אורח חיים מודרני ופתוח",
      community: "חיבור לקהילה היהודית הרחבה",
    },
  },
  {
    id: "TRADITIONAL",
    title: "מסורתי",
    description: "שילוב בין מסורת למודרנה",
    icon: <Heart className="w-6 h-6" />,
    color: "bg-purple-500",
    characteristics: [
      "שמירת מסורת מתוך בחירה",
      "איזון בין דת לחיים מודרניים",
      "כבוד למנהגים ולמורשת",
    ],
    details: {
      traditions: "שמירת שבת וחגים באופן גמיש",
      lifestyle: "שילוב בין מסורת למודרניות",
      community: "קשר עם קהילות מגוונות",
    },
  },
  {
    id: "RELIGIOUS",
    title: "דתי",
    description: "אורח חיים על פי ההלכה",
    icon: <Book className="w-6 h-6" />,
    color: "bg-green-500",
    characteristics: [
      "מחויבות להלכה ולמצוות",
      "השקפת עולם תורנית",
      "שילוב תורה עם דרך ארץ",
    ],
    details: {
      traditions: "הקפדה על הלכה ומצוות",
      lifestyle: "חיים דתיים עם השתלבות בחברה",
      community: "חיבור לקהילה דתית",
    },
  },
  {
    id: "ORTHODOX",
    title: "חרדי",
    description: "הקפדה מלאה על קלה כבחמורה",
    icon: <Scroll className="w-6 h-6" />,
    color: "bg-red-500",
    characteristics: [
      "מחויבות מלאה לאורח חיים תורני",
      "הקפדה על קוצו של יו״ד",
      "לימוד תורה כדרך חיים",
    ],
    details: {
      traditions: "הקפדה מלאה על כל פרטי ההלכה",
      lifestyle: "אורח חיים תורני מובהק",
      community: "השתייכות לקהילה חרדית",
    },
  },
];

export default function TrackSelection({
  onSelect,
  onBack,
  selectedTrack,
}: TrackSelectionProps) {
  const [, setHoveredTrack] = useState<UserTrack | null>(null);
  const [currentStep, setCurrentStep] = useState<1 | 2>(1);

  const containerVariants = {
    hidden: { opacity: 0, y: 20 },
    visible: {
      opacity: 1,
      y: 0,
      transition: {
        duration: 0.5,
        staggerChildren: 0.1,
      },
    },
  };

  const cardVariants = {
    hidden: { opacity: 0, x: -20 },
    visible: {
      opacity: 1,
      x: 0,
      transition: { duration: 0.3 },
    },
  };

  const confirmSelection = () => {
    if (selectedTrack) {
      onSelect(selectedTrack);
    }
  };

  return (
    <motion.div
      className="min-h-screen p-6 bg-gradient-to-b from-gray-50 to-white"
      initial="hidden"
      animate="visible"
      variants={containerVariants}
    >
      <div className="max-w-4xl mx-auto space-y-8">
        {/* Header */}
        <div className="text-center space-y-4">
          <motion.div variants={cardVariants}>
            <h1 className="text-3xl font-bold">בחירת מסלול מותאם אישית</h1>
            <p className="text-gray-600">
              בחר/י את המסלול שמשקף בצורה הטובה ביותר את אורח חייך ואמונתך
            </p>
          </motion.div>

          <Alert className="bg-blue-50 border-blue-200">
            <Info className="w-4 h-4 text-blue-500" />
            <AlertDescription className="text-blue-700">
              בחירת המסלול תעזור לנו להתאים את השאלות והשידוכים המוצעים באופן
              מיטבי עבורך
            </AlertDescription>
          </Alert>
        </div>

        {/* Progress Steps */}
        <div className="flex justify-between items-center px-4">
          <div className="flex-1">
            <Progress value={currentStep === 1 ? 50 : 100} className="h-2" />
          </div>
          <div className="px-4 text-sm text-gray-500">
            שלב {currentStep} מתוך 2
          </div>
        </div>

        {currentStep === 1 ? (
          /* Track Selection Grid */
          <motion.div
            variants={cardVariants}
            className="grid grid-cols-1 md:grid-cols-2 gap-6"
          >
            {trackOptions.map((track) => (
              <Card
                key={track.id}
                className={`cursor-pointer transition-all duration-200 hover:shadow-lg ${
                  selectedTrack === track.id
                    ? "ring-2 ring-blue-500"
                    : "hover:border-blue-200"
                }`}
                onClick={() => {
                  setCurrentStep(2);
                  onSelect(track.id);
                }}
                onMouseEnter={() => setHoveredTrack(track.id)}
                onMouseLeave={() => setHoveredTrack(null)}
              >
                <CardContent className="p-6">
                  <div className="flex items-start space-x-4 rtl:space-x-reverse">
                    <div
                      className={`p-3 rounded-lg ${track.color} bg-opacity-10`}
                    >
                      {track.icon}
                    </div>
                    <div className="flex-1">
                      <h3 className="text-lg font-medium mb-2">
                        {track.title}
                      </h3>
                      <p className="text-gray-600 mb-4">{track.description}</p>
                      <ul className="space-y-2">
                        {track.characteristics.map((char, index) => (
                          <li
                            key={index}
                            className="flex items-center text-sm text-gray-600"
                          >
                            <Star className="w-4 h-4 ml-2 text-gray-400" />
                            {char}
                          </li>
                        ))}
                      </ul>
                    </div>
                  </div>
                </CardContent>
              </Card>
            ))}
          </motion.div>
        ) : (
          /* Confirmation Step */
          <motion.div variants={cardVariants} className="space-y-6">
            {selectedTrack && (
              <Card className="p-6">
                <h3 className="text-xl font-medium mb-4">
                  אישור בחירת מסלול{" "}
                  {trackOptions.find((t) => t.id === selectedTrack)?.title}
                </h3>
                <div className="space-y-4">
                  {Object.entries(
                    trackOptions.find((t) => t.id === selectedTrack)?.details ||
                      {}
                  ).map(([key, value]) => (
                    <div key={key} className="space-y-2">
                      <h4 className="font-medium">
                        {key === "traditions"
                          ? "מסורת"
                          : key === "lifestyle"
                          ? "אורח חיים"
                          : "קהילה"}
                      </h4>
                      <p className="text-gray-600">{value}</p>
                    </div>
                  ))}
                </div>
              </Card>
            )}
          </motion.div>
        )}

        {/* Navigation Buttons */}
        <motion.div
          variants={cardVariants}
          className="flex justify-between pt-6"
        >
          <Button
            variant="outline"
            onClick={() => {
              if (currentStep === 2) {
                setCurrentStep(1);
              } else {
                onBack();
              }
            }}
          >
            <ArrowRight className="w-4 h-4 ml-2" />
            {currentStep === 1 ? "חזרה" : "בחירה מחדש"}
          </Button>

          {currentStep === 2 && (
            <Button onClick={confirmSelection} disabled={!selectedTrack}>
              אישור והמשך
              <ArrowLeft className="w-4 h-4 mr-2" />
            </Button>
          )}
        </motion.div>
      </div>
    </motion.div>
  );
}


==================================================
Contents of C:\Users\eytan\Desktop\שידוכים\shidduch-system\src\components\questionnaire\onboarding\Welcome.tsx:
==================================================
import React, { useState } from "react";
import { motion } from "framer-motion";
import { Button } from "@/components/ui/button";
import { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert';
import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import {
  Heart,
  Users,
  Search,
  ArrowRight,
  Star,
  Shield,
  Clock,
  AlertTriangle
} from "lucide-react";

interface WelcomeProps {
  onStart: () => void;
  onLearnMore: () => void;
  isLoggedIn?: boolean;
}

export default function Welcome({ onStart, onLearnMore, isLoggedIn }: WelcomeProps) {
  const [isHovered, setIsHovered] = useState(false);

  const containerVariants = {
    hidden: { opacity: 0, y: 20 },
    visible: {
      opacity: 1,
      y: 0,
      transition: {
        duration: 0.6,
        staggerChildren: 0.2,
      },
    },
  };

  const itemVariants = {
    hidden: { opacity: 0, x: -20 },
    visible: { opacity: 1, x: 0 },
  };

  const features = [
    {
      icon: <Clock className="w-5 h-5 text-blue-500" />,
      title: "תהליך מותאם אישית",
      description: "השאלון מתאים את עצמו לקצב ולהעדפות שלך",
    },
    {
      icon: <Shield className="w-5 h-5 text-green-500" />,
      title: "פרטיות מלאה",
      description: "המידע שלך מאובטח ונשמר בצורה מוגנת",
    },
    {
      icon: <Star className="w-5 h-5 text-yellow-500" />,
      title: "התאמה מדויקת",
      description: "אלגוריתם חכם שמבין את הצרכים שלך",
    },
  ];

  return (
    <motion.div
      className="min-h-screen flex items-center justify-center p-4 bg-gradient-to-b from-blue-50 to-white"
      variants={containerVariants}
      initial="hidden"
      animate="visible"
    >
      <Card className="max-w-4xl w-full">
        <CardHeader className="text-center pb-2">
          <motion.div
            className="flex justify-center mb-6"
            variants={itemVariants}
          >
            <div className="relative">
              <Heart className="w-16 h-16 text-pink-500" />
              <Users className="w-10 h-10 text-blue-500 absolute -bottom-2 -right-2" />
              <Search className="w-8 h-8 text-purple-500 absolute -top-1 -right-3" />
            </div>
          </motion.div>
          <motion.div variants={itemVariants}>
            <CardTitle className="text-3xl mb-2">
              ברוכים הבאים לשאלון ההיכרות
            </CardTitle>
            <CardDescription className="text-lg">
              הצעד הראשון במסע למציאת הזיווג המתאים עבורך
            </CardDescription>
          </motion.div>
        </CardHeader>

        <CardContent className="space-y-8">
          {!isLoggedIn && (
            <motion.div variants={itemVariants}>
             <Alert variant="default" className="bg-yellow-50 border-yellow-200">
                <AlertTriangle className="h-4 w-4 text-yellow-600" />
                <AlertTitle className="text-yellow-800 font-medium">שים/י לב!</AlertTitle>
                <AlertDescription className="text-yellow-700">
                  <p className="mb-2">את/ה כרגע לא מחובר/ת למערכת.</p>
                  <p className="mb-2">ניתן למלא את השאלון גם ללא חשבון, אבל:</p>
                  <ul className="list-disc mr-6 space-y-1 mb-2">
                    <li>התשובות לא יישמרו במערכת</li>
                    <li>לא תוכל/י לחזור לשאלון בפעם אחרת</li>
                    <li>בסיום השאלון תוכל/י להוריד את הסיכום כקובץ PDF</li>
                  </ul>
                  <Button 
                    variant="link" 
                    className="p-0 h-auto text-blue-600 hover:text-blue-800" 
                    onClick={() => window.location.href = '/login'}
                  >
                    להתחברות למערכת לחץ/י כאן
                  </Button>
                </AlertDescription>
              </Alert>
            </motion.div>
          )}

          <motion.div
            variants={itemVariants}
            className="text-center text-gray-600 max-w-2xl mx-auto"
          >
            <p>
              השאלון שלנו מסייע לנו להכיר אותך טוב יותר ולהבין את הערכים,
              השאיפות והצרכים שלך. כך נוכל למצוא עבורך את ההתאמה הטובה ביותר.
            </p>
          </motion.div>

          <motion.div
            variants={itemVariants}
            className="grid md:grid-cols-3 gap-6"
          >
            {features.map((feature, index) => (
              <Card key={index} className="bg-white">
                <CardContent className="pt-6">
                  <div className="flex flex-col items-center text-center space-y-2">
                    <div className="p-3 bg-gray-50 rounded-full">
                      {feature.icon}
                    </div>
                    <h3 className="font-medium">{feature.title}</h3>
                    <p className="text-sm text-gray-500">
                      {feature.description}
                    </p>
                  </div>
                </CardContent>
              </Card>
            ))}
          </motion.div>

          <motion.div
            variants={itemVariants}
            className="bg-blue-50 p-6 rounded-lg"
          >
            <h3 className="font-medium mb-2">מה מחכה לך?</h3>
            <ul className="space-y-2 text-sm text-gray-600">
              <li className="flex items-center">
                <ArrowRight className="w-4 h-4 ml-2 text-blue-500" />
                כ-30 דקות של שאלון מעמיק ומחכים
              </li>
              <li className="flex items-center">
                <ArrowRight className="w-4 h-4 ml-2 text-blue-500" />
                אפשרות לעצור ולהמשיך בכל שלב
              </li>
              <li className="flex items-center">
                <ArrowRight className="w-4 h-4 ml-2 text-blue-500" />
                תובנות משמעותיות על עצמך
              </li>
            </ul>
          </motion.div>
        </CardContent>

        <CardFooter className="flex flex-col sm:flex-row gap-4 justify-center pt-6">
          <Button
            variant="outline"
            onClick={onLearnMore}
            className="w-full sm:w-auto"
          >
            למידע נוסף
          </Button>
          <Button
            onClick={onStart}
            className="w-full sm:w-auto"
            onMouseEnter={() => setIsHovered(true)}
            onMouseLeave={() => setIsHovered(false)}
          >
            <motion.div
              className="flex items-center"
              animate={{ x: isHovered ? 5 : 0 }}
              transition={{ duration: 0.2 }}
            >
              בוא/י נתחיל
              <ArrowRight className="w-5 h-5 mr-2" />
            </motion.div>
          </Button>
        </CardFooter>
      </Card>
    </motion.div>
  );
}

==================================================
Contents of C:\Users\eytan\Desktop\שידוכים\shidduch-system\src\components\questionnaire\pages\QuestionnaireLandingPage.tsx:
==================================================
// src/components/questionnaire/pages/QuestionnaireLandingPage.tsx
import React from "react";
import { Card, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import Link from "next/link";
import {
  Heart,
  User,
  Users,
  Scroll,
  Clock,
  Star,
  Shield,
  CheckCircle,
  Lock,
  ArrowLeft, // Changed from ArrowRight for RTL context
  Loader2,
  Sparkles, // Added for visual flair potentially
} from "lucide-react";
import { cn } from "@/lib/utils";
import { useSession } from "next-auth/react";

// Define the props interface
interface QuestionnaireLandingPageProps {
  onStartQuestionnaire: () => void;
  hasSavedProgress: boolean;
  isLoading?: boolean; // Optional loading state from parent
}

// Define the world structure for clarity
interface WorldInfo {
  id: string;
  title: string;
  icon: React.ReactElement;
  colorGradient: string; // Use gradient for icon background
  questions: number;
  description: string;
}

export default function QuestionnaireLandingPage({
  onStartQuestionnaire,
  hasSavedProgress,
  isLoading = false, // Default to false if not provided
}: QuestionnaireLandingPageProps) {
  const { status } = useSession();

  const worlds: WorldInfo[] = [
    {
      id: "PERSONALITY",
      title: "אישיות",
      icon: <User className="h-6 w-6" />,
      colorGradient: "from-cyan-400 to-cyan-600",
      questions: 20,
      description: "מי אתה באמת? הבנת האישיות, התכונות והשאיפות שלך",
    },
    {
      id: "VALUES",
      title: "ערכים ואמונות",
      icon: <Heart className="h-6 w-6" />,
      colorGradient: "from-pink-400 to-pink-600",
      questions: 25,
      description: "מה באמת חשוב לך? עקרונות, אמונות וערכי הליבה שלך",
    },
    {
      id: "RELATIONSHIP",
      title: "זוגיות",
      icon: <Users className="h-6 w-6" />,
      colorGradient: "from-purple-400 to-purple-600",
      questions: 18,
      description: "מה אתה מחפש בזוגיות? ציפיות ורצונות במערכת היחסים",
    },
    {
      id: "PARTNER",
      title: "פרטנר",
      icon: <Heart className="h-6 w-6" />, // Can use a different icon if desired
      colorGradient: "from-amber-400 to-amber-600",
      questions: 22,
      description: "איזה בן/בת זוג אתה מחפש? תכונות וערכים בבן/בת הזוג",
    },
    {
      id: "RELIGION",
      title: "דת ומסורת",
      icon: <Scroll className="h-6 w-6" />,
      colorGradient: "from-emerald-400 to-emerald-600",
      questions: 15,
      description: "מה היחס שלך לדת, מסורת ואמונה? רוחניות וערכי יהדות",
    },
  ];

  const features = [
    {
      icon: <Clock className="h-6 w-6 text-cyan-600" />,
      title: "מהיר ונוח",
      description: "השאלון מתחלק לעולמות נפרדים, כך שאפשר למלא חלק בכל פעם",
      bgColor: "bg-cyan-100/70",
    },
    {
      icon: <Shield className="h-6 w-6 text-pink-600" />,
      title: "פרטיות מוחלטת",
      description: "הנתונים שלך מאובטחים ונשמרים בסודיות מלאה",
      bgColor: "bg-pink-100/70",
    },
    {
      icon: <Star className="h-6 w-6 text-cyan-600" />,
      title: "התאמה מדויקת",
      description: "אלגוריתם חכם המזהה את המועמדים המתאימים ביותר עבורך",
      bgColor: "bg-cyan-100/70",
    },
  ];

  return (
    <div className="relative min-h-screen overflow-hidden text-right dir-rtl">
      {/* Enhanced Background */}
      <div
        className="absolute inset-0 bg-gradient-to-br from-cyan-50 via-white to-pink-50 animate-gradient-slow -z-20"
        style={{ backgroundSize: "400% 400%" }}
      />
      <div className="absolute inset-0 opacity-10 bg-[radial-gradient(#06b6d4_1px,transparent_1px)] [background-size:20px_20px] -z-10"></div>

      {/* Floating Orbs (Adjust positions and sizes as needed) */}
      <div className="absolute top-10 -left-10 w-40 h-40 md:w-64 md:h-64 rounded-full bg-gradient-to-br from-cyan-200/20 to-cyan-300/10 animate-float-slow backdrop-blur-sm -z-10" style={{ animationDuration: '15s' }}></div>
      <div className="absolute bottom-5 -right-16 w-48 h-48 md:w-72 md:h-72 rounded-full bg-gradient-to-br from-pink-200/20 to-pink-300/10 animate-float-slow backdrop-blur-sm -z-10" style={{ animationDuration: '18s', animationDelay: '1s' }}></div>

      {/* Hero Section */}
      <section className="relative py-16 px-4 sm:py-20">
        <div className="max-w-4xl mx-auto text-center">
          <div className="mb-8">
            <h1 className="text-4xl sm:text-5xl font-extrabold mb-4 tracking-tight bg-gradient-to-r from-cyan-600 to-pink-600 text-transparent bg-clip-text">
              ברוכים הבאים לשאלון ההיכרות
            </h1>
            <p className="text-lg text-gray-700 max-w-2xl mx-auto mt-4 leading-relaxed">
              שאלון מקיף ומעמיק שיעזור לנו להכיר אותך ולמצוא את ההתאמה הטובה
              ביותר. מבוסס על מחקר מתקדם בתחום ההתאמה הזוגית ומותאם לציבור הדתי.
            </p>
          </div>

          <div className="mt-10 space-y-5 flex flex-col items-center">
            {/* Main Action Button */}
            {hasSavedProgress ? (
              <Button
                size="lg"
                className="w-full max-w-xs text-lg px-8 py-6 bg-gradient-to-r from-green-500 to-green-600 hover:from-green-600 hover:to-green-700 text-white rounded-full shadow-lg hover:shadow-xl transition-all duration-300 group relative overflow-hidden"
                onClick={onStartQuestionnaire}
                disabled={isLoading}
              >
                <span className="absolute inset-0 w-full h-full bg-gradient-to-r from-white/0 via-white/20 to-white/0 transform -translate-x-full group-hover:animate-shimmer"></span>
                {isLoading ? (
                  <Loader2 className="h-5 w-5 animate-spin ms-2" />
                ) : (
                  <CheckCircle className="h-5 w-5 ms-2 group-hover:scale-110 transition-transform" />
                )}
                <span className="relative z-10">המשך מהנקודה האחרונה</span>
              </Button>
            ) : (
              <Button
                size="lg"
                className="w-full max-w-xs text-lg px-8 py-6 bg-gradient-to-r from-cyan-500 to-pink-500 hover:from-cyan-600 hover:to-pink-600 text-white rounded-full shadow-lg hover:shadow-xl transition-all duration-300 group relative overflow-hidden"
                onClick={onStartQuestionnaire}
                disabled={isLoading}
              >
                <span className="absolute inset-0 w-full h-full bg-gradient-to-r from-white/0 via-white/20 to-white/0 transform -translate-x-full group-hover:animate-shimmer"></span>
                {isLoading ? (
                  <Loader2 className="h-5 w-5 animate-spin ms-2" />
                ) : (
                  <Heart className="h-5 w-5 ms-2 group-hover:scale-110 transition-transform fill-white" />
                )}
                <span className="relative z-10">
                  {status === "authenticated"
                    ? "התחל/י בשאלון"
                    : "התחל/י כאורח/ת"}
                </span>
              </Button>
            )}

            {/* Login Option */}
            {status !== "authenticated" && (
              <Link href="/auth/signin" className="w-full max-w-xs">
                <Button
                  variant="outline"
                  size="lg"
                  className="w-full text-lg px-8 py-6 border-2 border-cyan-300 text-cyan-700 hover:bg-cyan-50/50 hover:border-cyan-400 rounded-full transition-all duration-300 bg-white/70 backdrop-blur-sm"
                >
                  <Lock className="h-5 w-5 ms-2" />
                  התחברות למשתמשים רשומים
                </Button>
              </Link>
            )}
          </div>

          {/* Time Estimation Badge */}
          <div className="mt-12 flex justify-center">
            <div className="flex items-center justify-center space-x-2 rtl:space-x-reverse bg-gradient-to-r from-cyan-100/50 to-pink-100/50 backdrop-blur-sm rounded-full px-5 py-3 text-sm text-gray-700 shadow-md border border-white/50">
              <Clock className="h-5 w-5 text-cyan-600" />
              <span>
                זמן מילוי משוער: 30-40 דקות • ניתן לשמור ולחזור בכל שלב
              </span>
            </div>
          </div>
        </div>
      </section>

      {/* Worlds Section */}
      <section className="py-12 px-4">
        <div className="max-w-5xl mx-auto">
          <div className="text-center mb-10">
            <h2 className="text-3xl font-bold mb-3 text-gray-800">
              חמישה עולמות, התאמה אחת מושלמת
            </h2>
            <p className="text-gray-600 max-w-2xl mx-auto text-lg">
              השאלון מחולק לחמישה עולמות שונים, כל אחד מתמקד בהיבט אחר של
              האישיות והציפיות שלך לקראת בניית בית נאמן בישראל.
            </p>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            {worlds.map((world) => (
              <Card
                key={world.id}
                className="overflow-hidden rounded-xl shadow-md hover:shadow-xl transition-all duration-300 hover:-translate-y-1.5 bg-white/80 backdrop-blur-sm border border-gray-100"
              >
                <CardContent className="p-6 text-right">
                  <div className="flex items-center space-x-4 rtl:space-x-reverse mb-4">
                    <div
                      className={cn(
                        "p-3 rounded-full bg-gradient-to-br text-white shadow-lg",
                        world.colorGradient
                      )}
                    >
                      {React.cloneElement(world.icon, { className: "h-7 w-7" })}
                    </div>
                    <div>
                      <h3 className="text-xl font-bold text-gray-800">{world.title}</h3>
                      <p className="text-sm text-gray-500">
                        {world.questions} שאלות
                      </p>
                    </div>
                  </div>
                  <p className="text-base text-gray-600 leading-relaxed">{world.description}</p>
                </CardContent>
              </Card>
            ))}
          </div>
        </div>
      </section>

      {/* Features Section */}
      <section className="py-12 px-4 bg-gradient-to-r from-cyan-50/30 to-pink-50/30">
        <div className="max-w-5xl mx-auto">
          <div className="text-center mb-10">
            <h2 className="text-3xl font-bold mb-3 text-gray-800">מדוע לבחור בנו?</h2>
            <p className="text-gray-600 max-w-2xl mx-auto text-lg">
               היתרונות שלנו בשילוב טכנולוגיה מתקדמת וליווי אישי.
            </p>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-3 gap-6 text-center">
            {features.map((feature, index) => (
              <div
                key={index}
                className="flex flex-col items-center p-6 rounded-xl shadow-md hover:shadow-lg transition-all duration-300 bg-white/90 backdrop-blur-sm border border-gray-100"
              >
                <div className={cn("p-3 rounded-full mb-4", feature.bgColor)}>
                  {feature.icon}
                </div>
                <h3 className="font-bold text-xl mb-2 text-gray-800">{feature.title}</h3>
                <p className="text-base text-gray-600 leading-relaxed">{feature.description}</p>
              </div>
            ))}
          </div>
        </div>
      </section>

      {/* CTA Section */}
      <section className="py-16 px-4 text-center">
        <div className="max-w-3xl mx-auto">
          <Sparkles className="h-12 w-12 text-pink-500 mx-auto mb-4" />
          <h2 className="text-3xl font-bold mb-4 text-gray-800">
            מוכנים להתחיל במסע למציאת האהבה?
          </h2>
          <p className="text-lg text-gray-600 mb-8 max-w-xl mx-auto leading-relaxed">
            מילוי השאלון הוא הצעד הראשון והמשמעותי לקראת מציאת השידוך המדויק עבורך בעזרת ה.
          </p>

          <Button
            size="lg"
            onClick={onStartQuestionnaire}
            disabled={isLoading}
            className="w-full max-w-xs text-lg px-8 py-6 bg-gradient-to-r from-cyan-500 to-pink-500 hover:from-cyan-600 hover:to-pink-600 text-white rounded-full shadow-lg hover:shadow-xl transition-all duration-300 group relative overflow-hidden"
          >
             <span className="absolute inset-0 w-full h-full bg-gradient-to-r from-white/0 via-white/20 to-white/0 transform -translate-x-full group-hover:animate-shimmer"></span>
             {isLoading ? (
                  <Loader2 className="h-5 w-5 animate-spin ms-2" />
                ) : (
                 <ArrowLeft className="h-5 w-5 ms-2 group-hover:scale-110 transition-transform" /> // ArrowLeft for RTL 'start now' -> 'go left'
             )}
            <span className="relative z-10">התחל/י עכשיו</span>
          </Button>
        </div>
      </section>

      {/* Footer placeholder - Add your actual footer here */}
      <footer className="text-center py-6 text-gray-500 text-sm">
         © {new Date().getFullYear()} כל הזכויות שמורות. פותח באהבה ❤️.
      </footer>

    </div>
  );
}

// Add these animations to your global CSS (e.g., globals.css) or Tailwind config:
/*
@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  body {
    @apply dir-rtl; // Ensure RTL direction globally if needed
  }
}

@layer utilities {
  @keyframes float {
    0%, 100% { transform: translateY(0); }
    50% { transform: translateY(-20px); }
  }
  .animate-float-slow {
    animation: float 10s ease-in-out infinite; // Slower duration
  }

  @keyframes gradient-anim {
    0% { background-position: 0% 50%; }
    50% { background-position: 100% 50%; }
    100% { background-position: 0% 50%; }
  }
  .animate-gradient-slow {
    animation: gradient-anim 15s ease infinite;
  }

  @keyframes shimmer {
    100% { transform: translateX(100%); }
  }
  .animate-shimmer {
    animation: shimmer 2.5s infinite linear; // Added linear timing
  }
}
*/

==================================================
Contents of C:\Users\eytan\Desktop\שידוכים\shidduch-system\src\components\questionnaire\pages\questionnaire\map.tsx:
==================================================
// pages/questionnaire/map.tsx
import { useState, useEffect } from "react";
import { useRouter } from "next/navigation";
import { useSession } from "next-auth/react";
import WorldsMap from "@/components/questionnaire/layout/WorldsMap";
import { Card } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Loader2, ArrowLeft, AlertCircle } from "lucide-react";
import { Alert, AlertDescription } from "@/components/ui/alert";
import type { WorldId } from "@/components/questionnaire/types/types";

export default function QuestionnairesMapPage() {
  const router = useRouter();
  const { data: session, status } = useSession();
  const [currentWorld, setCurrentWorld] = useState<WorldId>("VALUES");
  const [completedWorlds, setCompletedWorlds] = useState<WorldId[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  // Load user's questionnaire progress
  useEffect(() => {
    const loadQuestionnaire = async () => {
      if (status === "loading") return;

      try {
        setIsLoading(true);
        setError(null);

        if (status === "authenticated" && session?.user?.id) {
          // Fetch the user's progress
          const response = await fetch("/api/questionnaire");
          const data = await response.json();

          if (data.success && data.data) {
            // Update states with saved progress
            setCompletedWorlds(data.data.worldsCompleted || []);

            // If a current world is saved, use it
            if (data.data.currentWorld) {
              setCurrentWorld(data.data.currentWorld);
            }
            // Otherwise select the first incomplete world
            else if (data.data.worldsCompleted?.length > 0) {
              const allWorlds: WorldId[] = [
                "PERSONALITY",
                "VALUES",
                "RELATIONSHIP",
                "PARTNER",
                "RELIGION",
              ];
              const nextWorld = allWorlds.find(
                (world) => !data.data.worldsCompleted.includes(world)
              );
              if (nextWorld) {
                setCurrentWorld(nextWorld);
              }
            }
          }
        }
      } catch (error) {
        console.error("Error loading questionnaire data:", error);
        setError("אירעה שגיאה בטעינת נתוני השאלון. אנא נסה שוב מאוחר יותר.");
      } finally {
        setIsLoading(false);
      }
    };

    loadQuestionnaire();
  }, [status, session]);

  // Handle world selection
  const handleWorldChange = (worldId: WorldId) => {
    // Navigate to the questionnaire with the selected world
    router.push(`/questionnaire?world=${worldId}`);
  };

  if (isLoading) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <Card className="w-full max-w-md p-8 text-center">
          <Loader2 className="h-12 w-12 animate-spin mx-auto mb-4 text-blue-600" />
          <p className="text-lg font-medium">טוען...</p>
          <p className="text-sm text-gray-500 mt-2">מאחזר את נתוני השאלון</p>
        </Card>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50 p-4">
      <div className="container mx-auto max-w-5xl">
        <div className="mb-6 flex items-center justify-between">
          <div className="flex items-center">
            <Button
              variant="ghost"
              size="sm"
              onClick={() => router.push("/questionnaire")}
              className="mr-4"
            >
              <ArrowLeft className="mr-2 h-4 w-4" />
              חזרה לשאלון
            </Button>

            <h1 className="text-2xl font-bold">מפת העולמות</h1>
          </div>

          {session?.user && (
            <div className="text-sm text-gray-500">
              מחובר כ: {session.user.name || session.user.email}
            </div>
          )}
        </div>

        {error && (
          <Alert variant="destructive" className="mb-4">
            <AlertCircle className="h-4 w-4 mr-2" />
            <AlertDescription>{error}</AlertDescription>
          </Alert>
        )}

        <div className="bg-white p-6 rounded-lg shadow-sm mb-6">
          <h2 className="text-xl font-medium mb-4">בחר עולם לעבור אליו</h2>
          <p className="text-gray-600 mb-6">
            במפת העולמות תוכל/י לנווט בחופשיות בין העולמות השונים בשאלון. כל
            עולם מתמקד בהיבט שונה ומאפשר לך להשלים אותו בהדרגה.
          </p>

          <WorldsMap
            currentWorld={currentWorld}
            completedWorlds={completedWorlds}
            onWorldChange={handleWorldChange}
          />
        </div>

        <div className="text-center text-sm text-gray-500 mt-8">
          <p>
            השתמש במפת העולמות כדי לעבור בין חלקי השאלון ולשנות תשובות בכל עת.
          </p>
          <p>התקדמותך נשמרת אוטומטית.</p>
        </div>
      </div>
    </div>
  );
}


==================================================
Contents of C:\Users\eytan\Desktop\שידוכים\shidduch-system\src\components\questionnaire\questions\partner\partnerQuestions.tsx:
==================================================
// src/components/questionnaire/questions/partner/partnerQuestions.tsx
import { Question } from "../../types/types";
import {
  Heart, // כללי, אהבה, רגש
  Home, // בית, משפחה
  Users, // אנשים, חברה
  Brain, // מוח, אינטליגנציה
  Star, // כוכב, שאיפות, הצלחה, איכות
  Sun, // שמש, אופטימיות, אנרגיה
  Target, // מטרה, מיקוד, יושרה
  MessageCircle, // תקשורת
  Smile, // הומור, נעימות
  HandHeart, // תמיכה, נתינה, אמפתיה
  Globe, // עולם, טיולים, פתיחות
  Music, // מוזיקה, תחביבים
  Book, // ספר, לימוד, רוחניות
  Clock, // זמן, קצב
  Map, // מפה, תכנון, עצמאות
  Church, // בניין דתי (סמל כללי לדת/מסורת)
  Brush, // אמנות, יצירתיות
  Coffee, // פנאי, רוגע
  Laugh, // צחוק, הומור
  Eye, // עין, מראה חיצוני
  Scale, // מאזניים, איזון, כספים
  ShieldCheck, // מגן, ביטחון, יושרה
  Briefcase, // קריירה
  AlertTriangle, // קו אדום
  Baby, // ילדים
  CookingPot, // בית, מטלות
  Link, // קשר, מחויבות
  Award, // הערכה, הישגים
  PiggyBank, // כסף, חסכנות
  Palette, // תרבות, אמנות
  Activity, // פעילות, אנרגיה
  Thermometer, // טמפרמנט
  UsersRound, // חברים, משפחה
} from "lucide-react";

export const partnerQuestions: Question[] = [
  // --- 1. רושם ראשוני ומראה חיצוני ---
  {
    worldId: "PARTNER",
    id: "partner_first_impression", // שינוי מ-initial_attraction
    category: "partner",
    subcategory: "first_impression",
    question: "מה הכי חשוב לך ברושם ראשוני אצל בן/בת זוג?",
    type: "iconChoice",
    depth: "BASIC",
    isRequired: true,
    options: [
      {
        icon: <Smile />,
        text: "חום ונעימות",
        value: "warmth",
        description: "אישיות מקבלת ומאירת פנים",
      },
      {
        icon: <Brain />,
        text: "אינטליגנציה ושיחה", // חידוד
        value: "intelligence",
        description: "חוכמה, סקרנות ויכולת שיחה מעניינת",
      },
      {
        icon: <Eye />,
        text: "מראה חיצוני",
        value: "appearance",
        description: "משיכה פיזית ראשונית וטיפוח",
      },
      {
        icon: <Sun />,
        text: "אנרגיה וחיוניות", // שינוי מאפשרות קודמת
        value: "energy",
        description: "נוכחות אנרגטית וחיובית",
      },
    ],
    metadata: { estimatedTime: 1 },
  },
  {
    worldId: "PARTNER",
    id: "partner_appearance_importance", // שאלה חדשה
    category: "partner",
    subcategory: "first_impression",
    question:
      "על סולם של 1 (פחות חשוב) עד 10 (חשוב מאוד), עד כמה מראה חיצוני וטיפוח חשובים לך בבחירת בן/בת זוג?",
    type: "scale",
    depth: "BASIC",
    isRequired: true, // חשוב לשידוך
    min: 1,
    max: 10,
    metadata: { estimatedTime: 1 },
  },

  // --- 2. תכונות אישיות ואופי ---
  {
    worldId: "PARTNER",
    id: "partner_core_traits", // שאלה חדשה מרכזית
    category: "partner",
    subcategory: "personality_character",
    question:
      "אילו תכונות אופי הן *החיוניות ביותר* עבורך אצל בן/בת זוג? (בחר/י 3)",
    type: "multiSelect",
    depth: "BASIC",
    isRequired: true,
    options: [
      { icon: <HandHeart />, text: "אמפתיה ורגישות", value: "empathy" },
      { icon: <ShieldCheck />, text: "יושרה ואמינות", value: "integrity" },
      { icon: <Smile />, text: "אופטימיות ושמחת חיים", value: "optimism" },
      { icon: <Laugh />, text: "חוש הומור וקלילות", value: "humor" },
      { icon: <Brain />, text: "אינטליגנציה וסקרנות", value: "intelligence" },
      { icon: <Star />, text: "שאפתנות ומוטיבציה", value: "ambition" },
      { icon: <Heart />, text: "חום ופתיחות רגשית", value: "warmth" },
      { icon: <Target />, text: "אחריות ובגרות", value: "responsibility" },
      { icon: <Globe />, text: "פתיחות מחשבתית וגמישות", value: "openness" },
    ],
    minSelections: 3,
    maxSelections: 3,
    metadata: { estimatedTime: 2 },
  },
  {
    worldId: "PARTNER",
    id: "partner_temperament", // שאלה חדשה
    category: "partner",
    subcategory: "personality_character",
    question: "איזה סוג טמפרמנט מושך אותך יותר אצל בן/בת זוג?",
    type: "iconChoice",
    depth: "BASIC",
    isRequired: true,
    options: [
      {
        icon: <Activity />,
        text: "אנרגטי/ת ותוסס/ת",
        value: "energetic",
        description: "פעיל/ה, מלא/ת חיים ויזמ/ת",
      },
      {
        icon: <Thermometer />, // או אייקון אחר לרוגע
        text: "רגוע/ה ושליו/וה",
        value: "calm",
        description: "נינוח/ה, יציב/ה ובעל/ת שלוות נפש",
      },
      {
        icon: <Sun />,
        text: "ספונטני/ת והרפתקן/ית",
        value: "spontaneous",
        description: "זורמ/ת, אוהב/ת שינויים והפתעות",
      },
      {
        icon: <Target />,
        text: "יציב/ה וצפוי/ה", // שינוי ניסוח
        value: "stable",
        description: "עקבי/ת, שקול/ה וניתן לסמוך עליו/ה",
      },
    ],
    metadata: { estimatedTime: 1 },
  },
  {
    worldId: "PARTNER",
    id: "partner_emotional_expression_desired", // שינוי מ-partner_emotional_expression
    category: "partner",
    subcategory: "personality_character",
    question: "איך היית רוצה שבן/בת הזוג יביעו רגשות?",
    type: "iconChoice",
    depth: "BASIC",
    isRequired: true,
    options: [
      {
        icon: <Heart />,
        text: "פתוח/ה ומביע/ה", // שינוי ניסוח
        value: "expressive",
        description: "משתף/ת רגשות בפתיחות ובחופשיות",
      },
      {
        icon: <HandHeart />,
        text: "מאופק/ת ומכיל/ה", // שינוי ניסוח
        value: "contained",
        description: "יודע/ת להכיל רגשות, פחות מוחצנ/ת",
      },
      {
        icon: <Brain />,
        text: "מילולי/ת ורציונלי/ת", // שינוי ניסוח
        value: "verbal_rational",
        description: "מעדיפ/ה לדבר על רגשות בצורה מובנית",
      },
      {
        icon: <Smile />,
        text: "חיובי/ת ומעודד/ת", // שינוי ניסוח
        value: "positive_encouraging",
        description: "נוטה לראות את הטוב ומשרה אווירה חיובית",
      },
    ],
    metadata: { estimatedTime: 1 },
  },
  {
    worldId: "PARTNER",
    id: "partner_intelligence_type", // שאלה חדשה
    category: "partner",
    subcategory: "personality_character",
    question: "איזה סוג של 'חכמה' או אינטליגנציה הכי מושך אותך בבן/בת זוג?",
    type: "multiSelect",
    depth: "ADVANCED",
    isRequired: false,
    options: [
      {
        icon: <Brain />,
        text: "אינטליגנציה שכלית (ידע, ניתוח)",
        value: "intellectual",
      },
      {
        icon: <Heart />,
        text: "אינטליגנציה רגשית (אמפתיה, מודעות)",
        value: "emotional",
      },
      {
        icon: <Users />,
        text: "אינטליגנציה חברתית (הבנת אנשים)",
        value: "social",
      },
      {
        icon: <Target />,
        text: "אינטליגנציה מעשית (פתרון בעיות)",
        value: "practical",
      },
      {
        icon: <Brush />,
        text: "אינטליגנציה יצירתית (חשיבה מקורית)",
        value: "creative",
      },
    ],
    minSelections: 1,
    maxSelections: 2,
    metadata: { estimatedTime: 1 },
  },

  // --- 3. סגנון חיים והרגלים ---
  {
    worldId: "PARTNER",
    id: "partner_lifestyle_preference", // שינוי מ-partner_lifestyle
    category: "partner",
    subcategory: "lifestyle_habits",
    question: "איזה סגנון חיים היית רוצה שלבן/בת הזוג יהיה?",
    type: "iconChoice",
    depth: "BASIC",
    isRequired: true,
    options: [
      {
        icon: <Globe />,
        text: "דינמי והרפתקני",
        value: "adventurous",
        description: "טיולים, חוויות חדשות, שינויים",
      },
      {
        icon: <Home />,
        text: "יציב וביתי", // שינוי ניסוח
        value: "stable_homey",
        description: "שגרה מסודרת, נוחות ביתית, שקט",
      },
      {
        icon: <Music />,
        text: "תרבותי ויצירתי", // שינוי ניסוח
        value: "cultural_creative",
        description: "אמנות, מוזיקה, יצירה, אירועי תרבות",
      },
      {
        icon: <Book />,
        text: "לימודי ואינטלקטואלי", // שינוי ניסוח
        value: "intellectual_learning",
        description: "למידה מתמדת, קריאה, דיונים מעמיקים",
      },
    ],
    metadata: { estimatedTime: 1 },
  },
  {
    worldId: "PARTNER",
    id: "partner_leisure_activities_shared", // שינוי מ-partner_leisure
    category: "partner",
    subcategory: "lifestyle_habits",
    question: "אילו פעילויות פנאי חשוב לך *לחלוק* עם בן/בת הזוג? (בחר/י עד 3)",
    type: "multiSelect",
    depth: "BASIC",
    isRequired: true, // חשוב לראות ציפיות משותפות
    options: [
      { icon: <Globe />, text: "טיולים וחוויות טבע", value: "travel_nature" },
      { icon: <Music />, text: "מוזיקה והופעות", value: "music_shows" },
      { icon: <Users />, text: "בילויים חברתיים", value: "social_events" },
      { icon: <Book />, text: "למידה והתפתחות משותפת", value: "learning" },
      { icon: <Palette />, text: "אמנות ותרבות", value: "culture_art" },
      {
        icon: <Home />,
        text: "זמן איכות ביתי ורגוע",
        value: "home_quality_time",
      },
      { icon: <Coffee />, text: "יציאה למסעדות/בתי קפה", value: "dining_out" },
      {
        icon: <Heart />,
        text: "פעילויות רוחניות/דתיות",
        value: "spiritual_activities",
      },
    ],
    minSelections: 1,
    maxSelections: 3,
    metadata: { estimatedTime: 2 },
  },
  {
    worldId: "PARTNER",
    id: "partner_social_style_preference", // שינוי מ-partner_social_style
    category: "partner",
    subcategory: "lifestyle_habits",
    question: "איזה סגנון חברתי היית מעדיף/ה אצל בן/בת זוג?",
    type: "iconChoice",
    depth: "BASIC",
    isRequired: true,
    options: [
      {
        icon: <UsersRound />,
        text: "חברותי/ת ופתוח/ה", // שינוי ניסוח
        value: "extroverted",
        description: "אוהב/ת להיות עם אנשים, קל להתחבר",
      },
      {
        icon: <Home />,
        text: "סלקטיבי/ת ואינטימי/ת", // שינוי ניסוח
        value: "selective_introverted",
        description: "מעדיפ/ה חוג חברים קטן וקרוב",
      },
      {
        icon: <Scale />,
        text: "מאוזנ/ת - גם וגם",
        value: "balanced",
        description: "נהנה/ית גם מחברה וגם מזמן לבד/אינטימי",
      },
    ],
    metadata: { estimatedTime: 1 },
  },
  {
    worldId: "PARTNER",
    id: "partner_home_management_style", // שינוי מ-partner_home_management
    category: "partner",
    subcategory: "lifestyle_habits",
    question: "איזו גישה של בן/בת הזוג לניהול הבית הכי תתאים לך?",
    type: "iconChoice",
    depth: "BASIC",
    isRequired: true,
    options: [
      {
        icon: <CookingPot />, // או Target
        text: "מאורגנ/ת ומסודר/ת",
        value: "organized",
        description: "מקפיד/ה על סדר, ניקיון ותכנון",
      },
      {
        icon: <Heart />,
        text: "יוצר/ת אווירה נעימה וביתית",
        value: "atmosphere_focused",
        description: "הדגש הוא על הרגשה טובה וחמימות",
      },
      {
        icon: <Coffee />,
        text: "זורמ/ת וגמיש/ה", // שינוי ניסוח
        value: "flexible_relaxed",
        description: "פחות מתעסק/ת בפרטים, יותר נינוח/ה",
      },
      {
        icon: <Users />,
        text: "רואה בבית בסיס לאירוח", // אפשרות חדשה
        value: "hospitality_focused",
        description: "אוהב/ת לארח ולפתוח את הבית",
      },
    ],
    metadata: { estimatedTime: 1 },
  },

  // --- 4. ערכים, אמונות והשקפת עולם ---
  {
    worldId: "PARTNER",
    id: "partner_core_values_match", // שינוי מ-partner_values
    category: "partner",
    subcategory: "values_beliefs",
    question:
      "עד כמה חשוב לך שתהיה התאמה בערכי הליבה בינך לבין בן/בת הזוג? (1=פחות חשוב, 10=חשוב מאוד)",
    type: "scale",
    depth: "BASIC",
    isRequired: true,
    min: 1,
    max: 10,
    metadata: { estimatedTime: 1 },
  },
  {
    worldId: "PARTNER",
    id: "partner_values_expression_observe", // שאלה חדשה (פתוחה)
    category: "partner",
    subcategory: "values_beliefs",
    question:
      "אילו ערכים חשוב לך *לראות* באים לידי ביטוי בהתנהגות היומיומית של בן/בת הזוג? תן/י דוגמה אחת או שתיים.",
    type: "openText",
    depth: "ADVANCED",
    isRequired: true, // חשוב להבנת הדברים המוחשיים
    minLength: 50,
    maxLength: 500,
    placeholder: "לדוגמה: לראות אותו/ה עוזר/ת לאחרים, מקפיד/ה על כבוד...",
    metadata: { estimatedTime: 3 },
  },
  {
    worldId: "PARTNER",
    id: "partner_religious_level_desired", // שינוי מ-partner_religious_approach
    category: "partner",
    subcategory: "values_beliefs",
    question: "מהי רמת הדתיות או שמירת המסורת הרצויה אצל בן/בת הזוג?",
    type: "singleChoice", // יכול להיות גם scale אם רוצים יותר רזולוציה
    depth: "BASIC",
    isRequired: true,
    options: [
      { value: "charedi", text: "חרדי/ת" },
      { value: "dati_leumi_torani", text: "דתי/ה לאומי/ת תורני/ת" }, // פיצול
      { value: "dati_leumi_liberal", text: "דתי/ה לאומי/ת ליברלי/ת" }, // פיצול
      { value: "masorti_strong", text: "מסורתי/ת (קרוב/ה לדת)" }, // פיצול
      { value: "masorti_light", text: "מסורתי/ת (קשר קל למסורת)" }, // פיצול
      {
        value: "secular_traditional_connection",
        text: "חילוני/ת עם זיקה למסורת",
      }, // פיצול
      { value: "secular", text: "חילוני/ת" },
    ],
    metadata: { estimatedTime: 1 },
  },
  {
    worldId: "PARTNER",
    id: "partner_spiritual_connection", // שאלה חדשה
    category: "partner",
    subcategory: "values_beliefs",
    question:
      "עד כמה חשוב לך שבן/בת הזוג יהיו מחוברים לצד הרוחני של החיים (לאו דווקא דתי פורמלי)? (1=לא חשוב, 10=חשוב מאוד)",
    type: "scale",
    depth: "ADVANCED",
    isRequired: false,
    min: 1,
    max: 10,
    metadata: { estimatedTime: 1 },
  },
  {
    worldId: "PARTNER",
    id: "partner_political_view_importance", // שאלה חדשה
    category: "partner",
    subcategory: "values_beliefs",
    question:
      "עד כמה חשובה לך התאמה בהשקפות הפוליטיות/חברתיות עם בן/בת הזוג? (1=לא חשוב, 10=חשוב מאוד)",
    type: "scale",
    depth: "ADVANCED",
    isRequired: false,
    min: 1,
    max: 10,
    metadata: { estimatedTime: 1 },
  },

  // --- 5. ציפיות בתחום המשפחה ויחסים ---
  {
    worldId: "PARTNER",
    id: "partner_family_importance_desired", // שינוי מ-partner_family_approach
    category: "partner",
    subcategory: "family_relationships",
    question:
      "איזו גישה למשפחה (משפחת המוצא והגרעינית) היית רוצה שתהיה לבן/בת הזוג?",
    type: "iconChoice",
    depth: "BASIC",
    isRequired: true,
    options: [
      {
        icon: <Heart />,
        text: "משפחתי/ת מאוד",
        value: "very_family_oriented",
        description: "קשר הדוק, מעורבות גבוהה, זמן משפחתי רב",
      },
      {
        icon: <Home />,
        text: "מאוזנ/ת - חשיבות למשפחה לצד עצמאות", // שינוי ניסוח
        value: "balanced",
        description: "קשר טוב וחם, אך גם מרחב לזוגיות ולחיים אישיים",
      },
      {
        icon: <Map />,
        text: "עצמאי/ת יחסית", // שינוי ניסוח
        value: "independent",
        description: "קשר מכבד, אך ללא מעורבות יתר ביומיום",
      },
    ],
    metadata: { estimatedTime: 1 },
  },
  {
    worldId: "PARTNER",
    id: "partner_children_desire_timing", // שאלה חדשה
    category: "partner",
    subcategory: "family_relationships",
    question:
      "מה הציפייה שלך מבן/בת הזוג לגבי רצון והתאמה בגישה להבאת ילדים לעולם (מספר, תזמון)?",
    type: "singleChoice",
    depth: "BASIC",
    isRequired: true,
    options: [
      { value: "aligned", text: "חשוב לי שתהיה התאמה מלאה ברצונות" },
      { value: "similar", text: "חשוב שתהיה גישה דומה, גמישות בפרטים" },
      { value: "open", text: "פתוח/ה לדון ולהחליט יחד, פחות קריטי בשלב זה" },
      { value: "unsure", text: "עדיין לא בטוח/ה לגבי ילדים" },
    ],
    metadata: { estimatedTime: 1 },
  },
  {
    worldId: "PARTNER",
    id: "partner_children_previous_relationship", // שאלה חדשה
    category: "partner",
    subcategory: "family_relationships",
    question: "מהי גישתך לקשר עם בן/בת זוג שיש לו/לה ילדים ממערכת יחסים קודמת?",
    type: "singleChoice",
    depth: "ADVANCED", // שאלה רגישה
    isRequired: false,
    options: [
      { value: "open_positive", text: "פתוח/ה וחיובי/ת לגמרי" },
      { value: "open_cautious", text: "פתוח/ה אך עם חששות/שאלות" },
      { value: "prefer_not", text: "מעדיפ/ה שלא, אך לא שולל/ת לחלוטין" },
      { value: "not_interested", text: "לא מעוניינ/ת בקשר כזה" },
    ],
    metadata: { estimatedTime: 1 },
  },
  {
    worldId: "PARTNER",
    id: "partner_relationship_with_their_family", // שאלה חדשה
    category: "partner",
    subcategory: "family_relationships",
    question: "איזה סוג קשר היית רוצה שלבן/בת הזוג יהיה עם משפחתם/ן?",
    type: "iconChoice",
    depth: "BASIC",
    isRequired: false,
    options: [
      {
        icon: <Heart />,
        text: "קשר קרוב, חם ותומך",
        value: "close_supportive",
      },
      {
        icon: <UsersRound />,
        text: "קשר מכבד עם גבולות ברורים",
        value: "respectful_boundaries",
      },
      {
        icon: <Scale />,
        text: "קשר מאוזן ולא תלותי",
        value: "balanced_independent",
      },
      {
        icon: <Target />,
        text: "פחות קריטי לי, חשוב לי הקשר שלנו",
        value: "less_critical",
      },
    ],
    metadata: { estimatedTime: 1 },
  },

  // --- 6. קריירה וכספים ---
  {
    worldId: "PARTNER",
    id: "partner_career_ambition_level", // שינוי מ-partner_career_attitude
    category: "partner",
    subcategory: "career_finance",
    question: "איזו רמת שאפתנות ומיקוד בקריירה היית רוצה לראות אצל בן/בת הזוג?",
    type: "scale",
    depth: "BASIC",
    isRequired: true,
    min: 1, // פחות חשוב
    max: 10, // חשוב מאוד
    metadata: { estimatedTime: 1 },
  },
  {
    worldId: "PARTNER",
    id: "partner_financial_approach", // שאלה חדשה
    category: "partner",
    subcategory: "career_finance",
    question: "איזו גישה כלכלית היית מעדיף/ה אצל בן/בת זוג?",
    type: "iconChoice",
    depth: "BASIC",
    isRequired: true,
    options: [
      {
        icon: <PiggyBank />,
        text: "חסכנ/ית ומחושב/ת",
        value: "frugal",
        description: "מתנהל/ת בצורה אחראית, חוסכ/ת לעתיד",
      },
      {
        icon: <Scale />,
        text: "מאוזנ/ת - יודע/ת להנות אך גם לחסוך",
        value: "balanced",
        description: "נהנה/ית מהחיים אך שומר/ת על אחריות כלכלית",
      },
      {
        icon: <Star />,
        text: "נדיב/ה ונהנה/ית מהחיים", // שינוי ניסוח
        value: "generous_enjoyer",
        description: "אוהב/ת להוציא, לבלות ולפנק",
      },
      {
        icon: <Briefcase />,
        text: "מוכוונ/ת להצלחה פיננסית", // שינוי ניסוח
        value: "success_oriented",
        description: "שאפתנ/ית כלכלית, שואפ/ת לרווחה",
      },
    ],
    metadata: { estimatedTime: 1 },
  },
  {
    worldId: "PARTNER",
    id: "partner_career_support", // שאלה חדשה
    category: "partner",
    subcategory: "career_finance",
    question:
      "עד כמה חשוב לך שבן/בת הזוג יתמכו בשאיפות הקריירה *שלך* ויבינו את דרישותיה? (1=לא חשוב, 10=חשוב מאוד)",
    type: "scale",
    depth: "ADVANCED",
    isRequired: false,
    min: 1,
    max: 10,
    metadata: { estimatedTime: 1 },
  },

  // --- 7. שאלות עומק וסיכום ---
  {
    worldId: "PARTNER",
    id: "partner_non_negotiables_summary", // שאלה חדשה (פתוחה מסכמת)
    category: "partner",
    subcategory: "summary_depth",
    question:
      "לסיכום, מהם 2-3 הדברים ה*לא מתפשרים* (Deal Breakers) החשובים ביותר עבורך בבחירת בן/בת זוג לחיים?",
    type: "openText",
    depth: "ADVANCED",
    isRequired: true, // חשוב מאוד לשדכן
    minLength: 30,
    maxLength: 400,
    placeholder: "נסה/י למקד את הדברים הקריטיים ביותר עבורך...",
    metadata: { estimatedTime: 3 },
  },
  {
    worldId: "PARTNER",
    id: "partner_ideal_description", // שאלה קיימת ששופרה מ-depth
    category: "partner",
    subcategory: "summary_depth",
    question:
      "אם היית צריך/ה לתאר בכמה מילים את בן/בת הזוג ה'אידיאלי/ת' עבורך (מעבר לתכונות הספציפיות), מה היית כותב/ת?",
    type: "openText",
    depth: "ADVANCED",
    isRequired: false,
    minLength: 50,
    maxLength: 500,
    placeholder: "נסה/י לתאר את התחושה, האווירה, או המהות שאת/ה מחפש/ת...",
    metadata: { estimatedTime: 3 },
  },
  // --- שאלות עומק שהיו קיימות והוטמעו או שונו ---
  // חלק מהשאלות הפתוחות הקודמות (כמו emotional_support_style, values_expression, future_challenges וכו')
  // יכולות להיות משולבות בשאלות הקיימות או שהן יותר רלוונטיות לעולם הזוגיות (איך *אתם יחד* תתמודדו).
  // לדוגמה, במקום לשאול "איך היית רוצה שהיא תתמוך", שאלנו "איזו תמיכה אתה צריך".
  // השאלה על "trust_building" הוטמעה חלקית בשאלת היושרה והאמינות.
  // השאלה על "family_relationships" (שלהם עם משפחתם) נוספה למעלה.
  // השאלה על "life_balance" נוגעת יותר לדינמיקה הזוגית.
  // השאלה על "life_philosophy" הוטמעה חלקית בשאלות על ערכים ודת.
];


==================================================
Contents of C:\Users\eytan\Desktop\שידוכים\shidduch-system\src\components\questionnaire\questions\personality\personalityQuestions.tsx:
==================================================
// src/components/questionnaire/questions/personality/personalityQuestions.ts
import { Question } from "../../types/types";
import {
  Sun,
  Moon,
  Cloud,
  Compass,
  Leaf,
  Target,
  Heart,
  Star,
  Users,
  Book,
  Coffee,
  Music,
  Bike,
  PenTool,
  Globe,
  Watch,
  MessageCircle,
  HandHeart,
  Lightbulb,
  Brain,
  Home,
  Edit,
  AlertTriangle,
  Activity,
  ShieldCheck,
  Scale,
  Award,
  CheckCheck,
  Smile,
} from "lucide-react";

export const personalityQuestions: Question[] = [
  // --- תפיסה עצמית בסיסית ---
  {
    worldId: "PERSONALITY",
    id: "personality_description_revised", // שינוי ID מהקודם personality_description
    category: "personality",
    subcategory: "self_perception",
    question:
      "ספר/י על עצמך בכמה משפטים. מהם הדברים המרכזיים שחשוב לך שאנשים ידעו עליך?",
    type: "openText",
    depth: "ADVANCED",
    isRequired: true,
    minLength: 100,
    maxLength: 800,
    placeholder: "מה מאפיין אותך? מה חשוב לך? במה את/ה גאה? נשמח לשמוע...",
    metadata: { estimatedTime: 4 },
  },
  {
    worldId: "PERSONALITY",
    id: "personality_type",
    category: "personality",
    subcategory: "self_perception",
    question: "איך היית מגדיר/ה את האישיות שלך בצורה הכי מדוייקת?",
    type: "iconChoice",
    depth: "BASIC",
    isRequired: true,
    options: [
      {
        icon: <Sun />,
        text: "אנרגטי/ת ופתוח/ה",
        value: "energetic",
        description: "אוהב/ת להיות במרכז העניינים ולהכיר אנשים חדשים",
      },
      {
        icon: <Moon />,
        text: "שקט/ה ומופנם/ת",
        value: "quiet",
        description: "מעדיף/ה מפגשים אינטימיים ושקט",
      },
      {
        icon: <Cloud />,
        text: "זורם/ת ומסתגל/ת",
        value: "adaptable",
        description: "גמיש/ה ומסתגל/ת בקלות למצבים חדשים",
      },
      {
        icon: <Compass />,
        text: "מוכוון/ת מטרה",
        value: "focused",
        description: "ממוקד/ת במטרות וביעדים",
      },
    ],
    metadata: { estimatedTime: 1 },
  },
  {
    worldId: "PERSONALITY",
    id: "optimism_level", // שאלה חדשה
    category: "personality",
    subcategory: "self_perception",
    question:
      "על סולם של 1 (פסימיסט/ית) עד 10 (אופטימיסט/ית), איך היית מגדיר/ה את הגישה הכללית שלך לחיים?",
    type: "scale",
    depth: "BASIC",
    isRequired: false, // ניתן להפוך לחובה אם רוצים
    min: 1,
    max: 10,
    metadata: { estimatedTime: 1 },
  },

  // --- סגנון חיים והרגלים ---
  {
    worldId: "PERSONALITY",
    id: "daily_routine",
    category: "personality",
    subcategory: "lifestyle",
    question: "איך את/ה מעדיף/ה לנהל את היום-יום?",
    type: "iconChoice",
    depth: "BASIC",
    isRequired: true,
    options: [
      {
        icon: <Watch />,
        text: "שגרה מתוכננת",
        value: "structured",
        description: "לוח זמנים קבוע ומאורגן",
      },
      {
        icon: <Cloud />,
        text: "זרימה גמישה",
        value: "flexible",
        description: "התאמה לפי הצורך והמצב",
      },
      {
        icon: <Target />,
        text: "מוכוון משימות",
        value: "task_oriented",
        description: "התקדמות לפי יעדים",
      },
      {
        icon: <Sun />,
        text: "ספונטני ומשתנה",
        value: "spontaneous",
        description: "כל יום שונה ומפתיע",
      },
    ],
    metadata: { estimatedTime: 1 },
  },
  {
    worldId: "PERSONALITY",
    id: "home_environment",
    category: "personality",
    subcategory: "lifestyle",
    question: "איך את/ה אוהב/ת את סביבת המגורים שלך?",
    type: "iconChoice",
    depth: "BASIC",
    isRequired: true,
    options: [
      {
        icon: <Leaf />,
        text: "טבעי ומרגיע",
        value: "natural",
        description: "צמחים, אור טבעי ואווירה רגועה",
      },
      {
        icon: <Target />,
        text: "מינימליסטי ומסודר",
        value: "minimal",
        description: "נקי, מאורגן ופונקציונלי",
      },
      {
        icon: <Heart />,
        text: "חמים וביתי",
        value: "cozy",
        description: "נעים, מזמין ונוח",
      },
      {
        icon: <Star />,
        text: "מודרני ועיצובי",
        value: "modern",
        description: "סטייל עכשווי ואלמנטים עיצוביים",
      },
    ],
    metadata: { estimatedTime: 1 },
  },
  {
    worldId: "PERSONALITY",
    id: "organization_approach",
    category: "personality",
    subcategory: "lifestyle",
    question: "איך את/ה מתייחס/ת לארגון וסדר?",
    type: "iconChoice",
    depth: "BASIC",
    isRequired: false,
    options: [
      {
        icon: <Target />,
        text: "מסודר/ת ומאורגן/ת",
        value: "organized",
        description: "הכל במקום ומתוכנן",
      },
      {
        icon: <Cloud />,
        text: "גמיש/ה ומסתגל/ת",
        value: "flexible",
        description: "סדר עם גמישות",
      },
      {
        icon: <Star />,
        text: "יצירתי/ת ומשתנה",
        value: "creative",
        description: "סדר בתוך הכאוס",
      },
      {
        icon: <Heart />,
        text: "זורם/ת עם מה שיש",
        value: "flow",
        description: "פחות מתעסק/ת בארגון",
      },
    ],
    metadata: { estimatedTime: 1 },
  },
  {
    worldId: "PERSONALITY",
    id: "free_time_activities",
    category: "personality",
    subcategory: "lifestyle",
    question: "מה את/ה הכי אוהב/ת לעשות בזמן הפנוי? (בחר/י עד 3)",
    type: "multiSelectWithOther", // נשאר עם אפשרות לאחר
    depth: "BASIC",
    isRequired: false, // לא חובה קריטי
    options: [
      { icon: <Book />, text: "קריאה ולמידה", value: "reading" },
      { icon: <Bike />, text: "ספורט ופעילות גופנית", value: "sports" },
      { icon: <PenTool />, text: "יצירה ואומנות", value: "art" },
      { icon: <Music />, text: "מוזיקה ובידור", value: "music" },
      { icon: <Leaf />, text: "טבע וגינון", value: "nature" }, // שינוי אייקון
      { icon: <Globe />, text: "טיולים ונסיעות", value: "travel" },
      { icon: <Users />, text: "בילוי חברתי", value: "social_activities" }, // הפרדה מ'סביבה חברתית'
      { icon: <Home />, text: "זמן רגוע בבית", value: "home_relax" }, // אפשרות נוספת
      // האפשרות 'אחר' מטופלת אוטומטית על ידי הקומפוננטה multiSelectWithOther
    ],
    minSelections: 1,
    maxSelections: 3,
    metadata: { estimatedTime: 2 },
  },
  {
    worldId: "PERSONALITY",
    id: "perfect_morning_detail",
    category: "personality",
    subcategory: "lifestyle",
    question:
      "תאר/י את הבוקר המושלם שלך - משעת הקימה ועד הצהריים. מה כולל בוקר כזה ולמה דווקא הפעילויות האלו משמחות אותך?",
    type: "openText",
    depth: "ADVANCED",
    isRequired: false,
    minLength: 50,
    maxLength: 500,
    placeholder: "תאר/י את סדר היום, הפעילויות והתחושות שעולות בך...",
    metadata: { estimatedTime: 3 },
  },

  // --- אינטראקציות חברתיות ותקשורת ---
  {
    worldId: "PERSONALITY",
    id: "social_settings",
    category: "personality",
    subcategory: "social_communication",
    question: "באיזו סביבה חברתית את/ה מרגיש/ה הכי בנוח?",
    type: "iconChoice",
    depth: "BASIC",
    isRequired: true,
    options: [
      {
        icon: <Users />,
        text: "אירועים גדולים ותוססים",
        value: "large_events",
        description: "מסיבות, חתונות, התקהלויות גדולות",
      },
      {
        icon: <Coffee />,
        text: "מפגשים קטנים ואינטימיים",
        value: "small_gatherings",
        description: "שיחה עם חברים קרובים, קבוצה קטנה",
      },
      {
        icon: <Home />,
        text: "אחד על אחד",
        value: "one_on_one",
        description: "שיחה עמוקה עם אדם אחד",
      },
      {
        icon: <Book />,
        text: "מעדיף/ה להיות לבד",
        value: "alone_preference",
        description: "טעינת מצברים בשקט ובפרטיות",
      },
    ],
    metadata: { estimatedTime: 1 },
  },
  {
    worldId: "PERSONALITY",
    id: "communication_style_personal", // שינוי ID וניסוח
    category: "personality",
    subcategory: "social_communication",
    question: "איזה סגנון תקשורת מאפיין אותך הכי טוב?",
    type: "multiSelect",
    depth: "BASIC",
    isRequired: true,
    options: [
      { icon: <MessageCircle />, text: "ישיר/ה וענייני/ת", value: "direct" },
      { icon: <HandHeart />, text: "רגיש/ה ומתחשב/ת", value: "sensitive" },
      { icon: <Lightbulb />, text: "יצירתי/ת ובעל/ת דמיון", value: "creative" },
      { icon: <Brain />, text: "שקול/ה ואנליטי/ת", value: "analytical" },
      { icon: <Smile />, text: "הומוריסטי/ת וקליל/ה", value: "humorous" },
      { icon: <Book />, text: "נוטה להקשיב יותר מלדבר", value: "listener" },
    ],
    minSelections: 1,
    maxSelections: 2,
    metadata: { estimatedTime: 1 },
  },
  {
    worldId: "PERSONALITY",
    id: "expressing_love_language_personal", // שאלה חדשה
    category: "personality",
    subcategory: "social_communication",
    question:
      "איך את/ה בדרך כלל מביע/ה אהבה וחיבה לאנשים הקרובים אליך? (בחר/י 1-2 דרכים עיקריות)",
    type: "multiSelect",
    depth: "ADVANCED",
    isRequired: true, // חשוב להבנת האישיות
    options: [
      { value: "words", text: "מילים (מחמאות, עידוד)", icon: <Award /> },
      { value: "acts", text: "מעשים (עזרה, שירות)", icon: <HandHeart /> },
      { value: "gifts", text: "מתנות סמליות", icon: <Star /> },
      { value: "quality_time", text: "זמן איכות משותף", icon: <Coffee /> },
      {
        value: "physical_touch",
        text: "מגע פיזי (חיבוק, יד ביד)",
        icon: <Heart />,
      },
    ],
    minSelections: 1,
    maxSelections: 2,
    metadata: {
      estimatedTime: 1,
      helpText:
        "חשוב/י איך את/ה נוטה *להראות* אכפתיות, לא רק איך את/ה אוהב/ת לקבל.",
    },
  },
  {
    worldId: "PERSONALITY",
    id: "dinner_with_historical_figures",
    category: "personality",
    subcategory: "social_communication", // קשור גם לתחומי עניין
    question:
      "אם היית יכול/ה לארח לארוחת ערב שלושה אנשים מכל התקופות (חיים או היסטוריים), את מי היית מזמין/ה ומה היית רוצה ללמוד מהם?",
    type: "openText",
    depth: "ADVANCED",
    isRequired: false,
    minLength: 100,
    maxLength: 1000,
    placeholder: "ספר/י על האורחים שבחרת ומה היית רוצה לשוחח איתם...",
    metadata: { estimatedTime: 4 },
  },

  // --- נוף רגשי והתמודדות ---
  {
    worldId: "PERSONALITY",
    id: "stress_relief",
    category: "personality",
    subcategory: "emotional_landscape",
    question: "מה עוזר לך להירגע ולהתמודד במצבי לחץ?",
    type: "multiSelect",
    depth: "BASIC",
    isRequired: true, // חשוב להבנת דרכי התמודדות
    options: [
      { icon: <Music />, text: "מוזיקה או אומנות", value: "arts" },
      { icon: <Users />, text: "שיחה עם חברים/משפחה", value: "social_support" },
      { icon: <Bike />, text: "פעילות גופנית", value: "exercise" },
      {
        icon: <Book />,
        text: "זמן שקט לבד (קריאה, מדיטציה)",
        value: "alone_time",
      },
      { icon: <Leaf />, text: "בילוי בטבע", value: "nature_relief" }, // אפשרות נוספת
      { icon: <Edit />, text: "כתיבה או יצירה", value: "writing_creating" }, // אפשרות נוספת
      {
        icon: <Coffee />,
        text: "פינוק קטן (אוכל, שתיה)",
        value: "small_treats",
      }, // אפשרות נוספת
    ],
    minSelections: 1,
    maxSelections: 3, // אפשר יותר אפשרויות כאן
    metadata: { estimatedTime: 1 },
  },
  {
    worldId: "PERSONALITY",
    id: "risk_taking", // שאלה חדשה
    category: "personality",
    subcategory: "emotional_landscape",
    question:
      "על סולם של 1 (שונא/ת סיכונים) עד 10 (אוהב/ת סיכונים והרפתקאות), איפה היית ממקם/ת את עצמך?",
    type: "scale",
    depth: "BASIC",
    isRequired: false,
    min: 1,
    max: 10,
    metadata: { estimatedTime: 1 },
  },
  {
    worldId: "PERSONALITY",
    id: "change_adaptation", // שאלה חדשה
    category: "personality",
    subcategory: "emotional_landscape",
    question: "איך את/ה בדרך כלל מגיב/ה לשינויים גדולים ובלתי צפויים בחיים?",
    type: "iconChoice",
    depth: "BASIC",
    isRequired: false,
    options: [
      { icon: <Star />, text: "מתרגש/ת מההזדמנות החדשה", value: "excited" },
      {
        icon: <Cloud />,
        text: "מסתגל/ת בהדרגה ובזהירות",
        value: "adapt_gradually",
      },
      {
        icon: <AlertTriangle />,
        text: "מרגיש/ה לחץ ודאגה בהתחלה",
        value: "stressed_initially",
      },
      {
        icon: <Compass />,
        text: "מקבל/ת ברוגע ומתכנן/ת את הצעדים הבאים",
        value: "calm_planner",
      },
    ],
    metadata: { estimatedTime: 1 },
  },
  {
    worldId: "PERSONALITY",
    id: "happiness_definition",
    category: "personality",
    subcategory: "emotional_landscape",
    question: "מה משמעותו של אושר עבורך? מתי את/ה מרגיש/ה הכי מאושר/ת?",
    type: "openText",
    depth: "ADVANCED",
    isRequired: true,
    minLength: 100,
    maxLength: 800,
    placeholder: "שתף/י את תפיסתך לגבי משמעות האושר ומה גורם לך להרגיש כך...",
    metadata: { estimatedTime: 4 },
  },
  {
    worldId: "PERSONALITY",
    id: "conflict_resolution_personal", // שינוי ID מהקודם conflict_resolution
    category: "personality",
    subcategory: "emotional_landscape", // קשור גם לתקשורת
    question:
      "איך את/ה בדרך כלל מתמודד/ת עם מחלוקות או קונפליקטים במערכות יחסים (עם חברים, משפחה, עמיתים)?",
    type: "openText",
    depth: "ADVANCED",
    isRequired: true,
    minLength: 100,
    maxLength: 800,
    placeholder:
      "תאר/י את הגישה שלך: האם את/ה ישיר/ה? נמנע/ת? מנסה לגשר? מחפש/ת פתרון?...",
    metadata: { estimatedTime: 4 },
  },

  // --- צמיחה, ערכים ושאיפות ---
  {
    worldId: "PERSONALITY",
    id: "life_values",
    category: "personality",
    subcategory: "growth_aspirations",
    question:
      "מהם שלושת הערכים החשובים ביותר בחייך ואיך הם באים לידי ביטוי ביומיום?",
    type: "openText",
    depth: "ADVANCED",
    isRequired: true,
    minLength: 100,
    maxLength: 800,
    placeholder: "תאר/י את הערכים שמנחים אותך והדוגמאות מחייך...",
    metadata: { estimatedTime: 5 },
  },
  {
    worldId: "PERSONALITY",
    id: "strengths_description", // שאלה חדשה
    category: "personality",
    subcategory: "growth_aspirations",
    question: "מהן לדעתך 3 החוזקות הבולטות ביותר שלך?",
    type: "openText",
    depth: "ADVANCED",
    isRequired: false, // יכול להיות קשה לחלק
    minLength: 30,
    maxLength: 400,
    placeholder:
      "לדוגמה: אמפתיה, יכולת ארגון, יצירתיות, אופטימיות, חוש הומור...",
    metadata: { estimatedTime: 3 },
  },
  {
    worldId: "PERSONALITY",
    id: "growth_areas_optional", // שאלה חדשה
    category: "personality",
    subcategory: "growth_aspirations",
    question: "(אופציונלי) באילו תחומים היית רוצה להתפתח או להשתפר?",
    type: "openText",
    depth: "ADVANCED",
    isRequired: false,
    minLength: 0, // לא חובה
    maxLength: 400,
    placeholder:
      "לדוגמה: להיות סבלני/ת יותר, לשפר ביטחון עצמי, ללמוד משהו חדש...",
    metadata: { estimatedTime: 3 },
  },
  {
    worldId: "PERSONALITY",
    id: "relationship_lessons",
    category: "personality",
    subcategory: "growth_aspirations",
    question:
      "מה למדת על עצמך ממערכות היחסים המשמעותיות בחייך (לאו דווקא זוגיות)?",
    type: "openText",
    depth: "ADVANCED",
    isRequired: true, // חשוב לצמיחה
    minLength: 100,
    maxLength: 800,
    placeholder: "שתף/י תובנות ולקחים ממערכות יחסים עם חברים, משפחה, קולגות...",
    metadata: { estimatedTime: 4 },
  },
  {
    worldId: "PERSONALITY",
    id: "life_challenges",
    category: "personality",
    subcategory: "growth_aspirations",
    question: "מהו האתגר המשמעותי ביותר שהתגברת עליו ומה למדת ממנו על עצמך?",
    type: "openText",
    depth: "ADVANCED",
    isRequired: true, // חשוב להבנת עמידות
    minLength: 100,
    maxLength: 1000,
    placeholder: "שתף/י את סיפור ההתמודדות, מה עזר לך ומה גילית על כוחותיך...",
    metadata: { estimatedTime: 5 },
  },
  {
    worldId: "PERSONALITY",
    id: "life_mission",
    category: "personality",
    subcategory: "growth_aspirations",
    question:
      "מהי השליחות או המטרה שאת/ה מרגיש/ה שיש לך בחיים כיום (גם אם זה לא משהו גרנדיוזי)?",
    type: "openText",
    depth: "ADVANCED",
    isRequired: false,
    minLength: 50, // הקטנת מינימום
    maxLength: 800,
    placeholder:
      "מה מניע אותך? מה נותן לך משמעות? מה היית רוצה להשיג או לתרום?...",
    metadata: { estimatedTime: 4 },
  },
  {
    worldId: "PERSONALITY",
    id: "future_self",
    category: "personality",
    subcategory: "growth_aspirations",
    question:
      "איך את/ה רואה את עצמך בעוד עשר שנים? מה השתנה ומה נשאר דומה מבחינת אישיות, עיסוקים וסגנון חיים?",
    type: "openText",
    depth: "ADVANCED",
    isRequired: false,
    minLength: 100,
    maxLength: 800,
    placeholder:
      "תאר/י את החזון העתידי שלך - לא רק מה תעשה/י, אלא מי תהיה/י...",
    metadata: { estimatedTime: 4 },
  },
  {
    worldId: "PERSONALITY",
    id: "family_traditions",
    category: "personality",
    subcategory: "growth_aspirations", // קשור גם לערכים וזהות
    question: "אילו מסורות משפחתיות (או חברתיות) חשובות לך במיוחד ולמה?",
    type: "openText",
    depth: "ADVANCED",
    isRequired: true, // חשוב להבנת הזהות
    minLength: 50, // אפשר גם קצר
    maxLength: 800,
    placeholder:
      "ספר/י על מסורות שעוברות במשפחה, טקסים אישיים, מנהגים שאימצת...",
    metadata: { estimatedTime: 3 },
  },
];

// אין צורך לייצא ברירת מחדל


==================================================
Contents of C:\Users\eytan\Desktop\שידוכים\shidduch-system\src\components\questionnaire\questions\relationship\relationshipQuestions.tsx:
==================================================
// src/components/questionnaire/questions/relationship/relationshipQuestions.tsx
import { Question } from "../../types/types";
import {
  Heart, // לב (כללי, אהבה)
  Home, // בית (משפחה, יציבות)
  Users, // אנשים (חברה, שותפות)
  Coffee, // כוס קפה (פנאי, רוגע)
  Sun, // שמש (אנרגיה, אופטימיות)
  Moon, // ירח (רוגע, אינטימיות)
  Target, // מטרה (מיקוד, יעדים)
  MessageCircle, // בועת דיבור (תקשורת)
  Smile, // סמיילי (הומור, קלילות)
  HandHeart, // יד עם לב (תמיכה, חיבה, שפות אהבה)
  Globe, // גלובוס (טיולים, הרפתקאות)
  Music, // תו מוזיקה (תחביבים)
  Book, // ספר (למידה, רוחניות)
  Clock, // שעון (זמן, קצב)
  Star, // כוכב (הגשמה, איכות)
  Map, // מפה (תכנון, עצמאות)
  Baby, // תינוק (ילדים, משפחה)
  Wallet, // ארנק (כספים)
  Church, // בניין דתי (דת, מסורת - ניתן להחליף אם יש סמל מתאים יותר למסורת)
  Scale, // מאזניים (איזון, חלוקה)
  ShieldCheck, // מגן עם וי (ביטחון, גבולות)
  Lightbulb, // נורה (רעיונות, פתרונות)
  Activity, // גרף פעילות (דינמיות)
  AlertTriangle, // משולש אזהרה (קווים אדומים)
  Award, // מדליה (הערכה)
  Briefcase, // תיק עסקים (קריירה)
  CookingPot, // סיר בישול (תפקידים בבית)
  Link, // שרשרת (חיבור, מחויבות)
  CheckCheck, // וי כפול (הסכמה, אישור)
  Brain,
} from "lucide-react";

export const relationshipQuestions: Question[] = [
  // --- 1. ציפיות ומהות הקשר ---
  {
    worldId: "RELATIONSHIP",
    id: "relationship_type_preference", // שינוי שם מ-relationship_type
    category: "relationship",
    subcategory: "expectations",
    question: "מהי הליבה של קשר זוגי משמעותי בעיניך?",
    type: "iconChoice",
    depth: "BASIC",
    isRequired: true,
    options: [
      {
        icon: <Heart />,
        text: "חיבור רגשי עמוק",
        value: "emotional_connection",
        description: "הבנה, שיתוף ואינטימיות רגשית",
      },
      {
        icon: <Link />,
        text: "שותפות וחברות אמת",
        value: "partnership_friendship",
        description: "עבודת צוות, תמיכה וחברות קרובה",
      },
      {
        icon: <Home />,
        text: "בניית בית ומשפחה",
        value: "family_building",
        description: "יצירת מסגרת משפחתית יציבה ואוהבת",
      },
      {
        icon: <Star />,
        text: "צמיחה משותפת",
        value: "mutual_growth",
        description: "התפתחות אישית וזוגית לאורך הדרך",
      },
    ],
    metadata: { estimatedTime: 1 },
  },
  {
    worldId: "RELATIONSHIP",
    id: "relationship_success_definition", // שאלה חדשה שהייתה ב-depth
    category: "relationship",
    subcategory: "expectations",
    question:
      "מהם שלושת המרכיבים החשובים ביותר עבורך להצלחה ארוכת טווח בזוגיות?",
    type: "multiSelect",
    depth: "ADVANCED",
    isRequired: true,
    options: [
      {
        value: "communication",
        text: "תקשורת פתוחה וכנה",
        icon: <MessageCircle />,
      },
      { value: "trust", text: "אמון וביטחון הדדי", icon: <ShieldCheck /> },
      { value: "respect", text: "כבוד והערכה הדדית", icon: <Award /> },
      { value: "shared_values", text: "ערכים משותפים", icon: <Book /> },
      { value: "intimacy", text: "אינטימיות רגשית ופיזית", icon: <Heart /> },
      { value: "support", text: "תמיכה הדדית", icon: <HandHeart /> },
      { value: "fun", text: "כיף והנאה משותפת", icon: <Smile /> },
      { value: "growth", text: "צמיחה משותפת", icon: <Star /> },
    ],
    minSelections: 3,
    maxSelections: 3,
    metadata: { estimatedTime: 2 },
  },
  {
    worldId: "RELATIONSHIP",
    id: "relationship_deal_breakers", // שאלה חדשה
    category: "relationship",
    subcategory: "expectations",
    question:
      "האם ישנם 'קווים אדומים' או דברים שאינם מקובלים עליך בשום אופן בזוגיות? אם כן, פרט/י בקצרה (עד 2 דוגמאות).",
    type: "openText",
    depth: "ADVANCED",
    isRequired: false, // לא חובה כדי לא להלחיץ, אבל חשוב לשדכן
    minLength: 0, // לא דורשים מינימום
    maxLength: 300,
    placeholder: "לדוגמה: חוסר כנות, חוסר כבוד, חוסר שאיפה להתפתחות...",
    metadata: {
      estimatedTime: 2,
      helpText: "חשוב על דברים שאינך יכול/ה להתפשר עליהם.",
    },
  },
  {
    worldId: "RELATIONSHIP",
    id: "relationship_expectations_partner", // שאלה קיימת ששופרה מעט
    category: "relationship",
    subcategory: "expectations",
    question: "מהן הציפיות המרכזיות שלך מבן/בת הזוג?",
    type: "multiSelect",
    depth: "BASIC",
    isRequired: true,
    options: [
      { icon: <HandHeart />, text: "שיתוף ותמיכה רגשית", value: "support" },
      {
        icon: <Users />,
        text: "שותפות מעשית בניהול החיים",
        value: "partnership",
      },
      {
        icon: <MessageCircle />,
        text: "תקשורת פתוחה וכנות",
        value: "communication",
      },
      { icon: <Map />, text: "מרחב אישי וכבוד לעצמאות", value: "independence" },
      { icon: <Smile />, text: "חוש הומור וקלילות", value: "humor" },
      {
        icon: <Brain />,
        text: "עומק אינטלקטואלי ושיחות מעניינות",
        value: "intellect",
      }, // שינוי טקסט
    ],
    minSelections: 2,
    maxSelections: 4,
    metadata: { estimatedTime: 1 },
  },

  // --- 2. תקשורת והתמודדות ---
  {
    worldId: "RELATIONSHIP",
    id: "communication_style_preference", // שינוי שם מ-communication_style
    category: "relationship",
    subcategory: "communication",
    question: "איזה סגנון תקשורת הכי חשוב לך שיהיה בזוגיות?",
    type: "iconChoice",
    depth: "BASIC",
    isRequired: true,
    options: [
      {
        icon: <MessageCircle />,
        text: "פתוחה וישירה",
        value: "open_direct",
        description: "אומרים הכל, גם מה שלא נעים, בצורה מכבדת",
      },
      {
        icon: <Heart />,
        text: "רגשית ומכילה",
        value: "emotional_empathetic",
        description: "שיתוף רגשות והקשבה אמפתית",
      },
      {
        icon: <Smile />,
        text: "קלילה והומוריסטית",
        value: "light_humorous",
        description: "גישה חיובית, הומור ופחות דרמה",
      },
      {
        icon: <Lightbulb />,
        text: "ממוקדת פתרונות",
        value: "solution_focused",
        description: "מתמקדים בפתרון בעיות ולא בהאשמות",
      },
    ],
    metadata: { estimatedTime: 1 },
  },
  {
    worldId: "RELATIONSHIP",
    id: "conflict_resolution_approach", // שינוי שם מ-conflict_resolution
    category: "relationship",
    subcategory: "communication",
    question: "כשמתעוררת מחלוקת, מהי הדרך המועדפת עליך להתמודדות?",
    type: "iconChoice",
    depth: "BASIC",
    isRequired: true,
    options: [
      {
        icon: <MessageCircle />,
        text: "לדבר על זה מיד",
        value: "talk_immediately",
        description: "לפתור את העניין כמה שיותר מהר",
      },
      {
        icon: <Clock />,
        text: "לקחת פסק זמן לעיבוד",
        value: "time_to_process",
        description: "לחשוב ולהירגע לפני שמדברים",
      },
      {
        icon: <HandHeart />,
        text: "לחפש פשרה והבנה",
        value: "seek_compromise",
        description: "למצוא פתרון שמתאים לשני הצדדים",
      },
      {
        icon: <Users />,
        text: "לשתף צד שלישי (אם צריך)",
        value: "involve_third_party",
        description: "פתיחות לייעוץ או גישור במקרה הצורך",
      },
    ],
    metadata: { estimatedTime: 1 },
  },
  {
    worldId: "RELATIONSHIP",
    id: "expressing_love_language", // שאלה חדשה
    category: "relationship",
    subcategory: "communication",
    question: "באילו דרכים עיקריות את/ה נוטה להביע אהבה וחיבה?",
    type: "multiSelect",
    depth: "ADVANCED",
    isRequired: true,
    options: [
      { value: "words", text: "מילים (מחמאות, עידוד)", icon: <Award /> },
      { value: "acts", text: "מעשים (עזרה, שירות)", icon: <HandHeart /> },
      { value: "gifts", text: "מתנות סמליות", icon: <Star /> },
      { value: "quality_time", text: "זמן איכות משותף", icon: <Coffee /> },
      {
        value: "physical_touch",
        text: "מגע פיזי (חיבוק, יד ביד)",
        icon: <Heart />,
      },
    ],
    minSelections: 1,
    maxSelections: 2,
    metadata: {
      estimatedTime: 1,
      helpText: "חשוב/י על 'שפות האהבה' - איך את/ה מראה לאחרים שאכפת לך.",
    },
  },
  {
    worldId: "RELATIONSHIP",
    id: "receiving_love_language", // שאלה חדשה
    category: "relationship",
    subcategory: "communication",
    question: "איך את/ה הכי אוהב/ת לקבל אהבה וחיבה?",
    type: "multiSelect",
    depth: "ADVANCED",
    isRequired: true,
    options: [
      { value: "words", text: "מילים (מחמאות, עידוד)", icon: <Award /> },
      { value: "acts", text: "מעשים (עזרה, שירות)", icon: <HandHeart /> },
      { value: "gifts", text: "מתנות סמליות", icon: <Star /> },
      { value: "quality_time", text: "זמן איכות משותף", icon: <Coffee /> },
      {
        value: "physical_touch",
        text: "מגע פיזי (חיבוק, יד ביד)",
        icon: <Heart />,
      },
    ],
    minSelections: 1,
    maxSelections: 2,
    metadata: {
      estimatedTime: 1,
      helpText: "חשוב/י מה גורם לך להרגיש הכי אהוב/ה ומוערכ/ת.",
    },
  },
  {
    worldId: "RELATIONSHIP",
    id: "conflict_handling_deep", // שאלה קיימת ששופרה מ-depth
    category: "relationship",
    subcategory: "communication",
    question:
      "תאר/י גישה בונה בעיניך להתמודדות עם מחלוקות בזוגיות. מה חשוב לך שיקרה (או לא יקרה) בזמן ויכוח?",
    type: "openText",
    depth: "ADVANCED",
    isRequired: true,
    minLength: 100,
    maxLength: 800,
    placeholder:
      "לדוגמה: הקשבה הדדית, הימנעות מהאשמות, התמקדות בפתרון, לקיחת אחריות...",
    metadata: { estimatedTime: 4 },
  },

  // --- 3. חיי היומיום המשותפים ---
  {
    worldId: "RELATIONSHIP",
    id: "daily_routine_preference", // שינוי שם מ-daily_routine
    category: "relationship",
    subcategory: "daily_life",
    question: "איזו אווירה היית רוצה שתאפיין את שגרת היום-יום הזוגית?",
    type: "iconChoice",
    depth: "BASIC",
    isRequired: true,
    options: [
      {
        icon: <Activity />,
        text: "אנרגטית ופעילה",
        value: "active_energetic",
        description: "עשייה משותפת, יוזמות ופעלתנות",
      },
      {
        icon: <Moon />,
        text: "רגועה וביתית",
        value: "calm_homey",
        description: "שלווה, נוחות ופשטות",
      },
      {
        icon: <Coffee />,
        text: "גמישה וספונטנית",
        value: "flexible_spontaneous",
        description: "זרימה עם היום, פחות תכנון קשיח",
      },
      {
        icon: <Clock />,
        text: "מאורגנת ויציבה",
        value: "organized_stable",
        description: "סדר יום ברור, תכנון ויציבות",
      },
    ],
    metadata: { estimatedTime: 1 },
  },
  {
    worldId: "RELATIONSHIP",
    id: "leisure_preference", // שינוי שם מ-leisure_time
    category: "relationship",
    subcategory: "daily_life",
    question: "איזה סוג בילוי פנאי משותף הכי חשוב לך?",
    type: "singleChoice", // שינוי לסוג שאלה
    depth: "BASIC",
    isRequired: true,
    options: [
      {
        icon: <Home />,
        text: "בילוי ביתי רגוע",
        value: "home_chill",
        description: "סרט, ספר, שיחה נעימה בבית",
      },
      {
        icon: <Globe />,
        text: "יציאות וחוויות בחוץ",
        value: "going_out_experiences",
        description: "מסעדות, טיולים, הופעות, טבע",
      },
      {
        icon: <Users />,
        text: "מפגשים חברתיים",
        value: "social_gatherings",
        description: "אירוח או בילוי עם חברים/משפחה",
      },
      {
        icon: <Book />,
        text: "פעילות משותפת סביב תחביב",
        value: "shared_hobby",
        description: "ספורט, יצירה, למידה משותפת וכו'",
      },
    ],
    metadata: { estimatedTime: 1 },
  },
  {
    worldId: "RELATIONSHIP",
    id: "financial_management_style", // שינוי שם מ-financial_approach
    category: "relationship",
    subcategory: "daily_life",
    question: "מהי הגישה המועדפת עליך לניהול כספים בזוגיות?", // נוסח זהה
    type: "iconChoice",
    depth: "BASIC",
    isRequired: true,
    options: [
      {
        icon: <Wallet />,
        text: "חשבון משותף להכל",
        value: "fully_shared",
        description: "שקיפות מלאה, כל ההכנסות וההוצאות משותפות",
      },
      {
        icon: <Scale />,
        text: "הפרדה עם קופה משותפת להוצאות",
        value: "separate_with_joint_expenses",
        description: "חשבונות נפרדים, תקציב משותף להוצאות הבית",
      },
      {
        icon: <Target />,
        text: "הפרדה כמעט מלאה",
        value: "mostly_separate",
        description: "כל אחד מנהל את כספו, מתחלקים בהוצאות גדולות",
      },
      {
        icon: <Lightbulb />,
        text: "פחות קריטי לי, חשוב שיהיה דיון פתוח",
        value: "flexible_open_discussion",
        description: "השיטה פחות חשובה מהתקשורת סביב כסף",
      },
    ],
    metadata: { estimatedTime: 1 },
  },
  {
    worldId: "RELATIONSHIP",
    id: "home_roles_preference", // שאלה חדשה
    category: "relationship",
    subcategory: "daily_life",
    question: "איזו גישה היית רוצה לחלוקת התפקידים והמטלות בבית?",
    type: "iconChoice",
    depth: "BASIC",
    isRequired: true,
    options: [
      {
        icon: <Scale />,
        text: "חלוקה שוויונית ומדויקת",
        value: "equal_division",
        description: "חלוקה ברורה ושווה של כל המטלות",
      },
      {
        icon: <Users />,
        text: "שיתוף פעולה גמיש לפי הצורך",
        value: "flexible_collaboration",
        description: "עושים מה שצריך, בלי לספור בדיוק מי עשה מה",
      },
      {
        icon: <CookingPot />, // או אייקון אחר לתפקידים
        text: "התמחות לפי חוזקות/העדפות",
        value: "specialization",
        description: "כל אחד מתמקד במה שהוא טוב בו או מעדיף",
      },
      {
        icon: <Briefcase />,
        text: "התאמה לפי שעות עבודה/פנאי",
        value: "adjusted_to_work",
        description: "מי שיש לו יותר זמן/פניות עושה יותר",
      },
    ],
    metadata: { estimatedTime: 1 },
  },

  // --- 4. אינטימיות, קרבה ותמיכה ---
  {
    worldId: "RELATIONSHIP",
    id: "emotional_intimacy_importance", // שאלה חדשה (משולבת)
    category: "relationship",
    subcategory: "intimacy_support",
    question:
      "על סולם של 1 (פחות מרכזי) עד 10 (מרכזי מאוד), עד כמה חשובה לך אינטימיות רגשית (שיחות נפש, פתיחות, שיתוף) בזוגיות?",
    type: "scale",
    depth: "ADVANCED",
    isRequired: true,
    min: 1,
    max: 10,
    metadata: { estimatedTime: 1 },
  },
  {
    worldId: "RELATIONSHIP",
    id: "physical_intimacy_importance", // שאלה חדשה (משולבת)
    category: "relationship",
    subcategory: "intimacy_support",
    question:
      "על סולם של 1 (פחות מרכזי) עד 10 (מרכזי מאוד), עד כמה חשובה לך אינטימיות פיזית (חיבה, מגע, קשר פיזי) בזוגיות?",
    type: "scale",
    depth: "ADVANCED",
    isRequired: true,
    min: 1,
    max: 10,
    metadata: { estimatedTime: 1 },
  },
  {
    worldId: "RELATIONSHIP",
    id: "building_intimacy", // שאלה קיימת ששופרה מ-depth
    category: "relationship",
    subcategory: "intimacy_support",
    question:
      "מה בעיניך בונה ומטפח אינטימיות (רגשית ופיזית) בקשר זוגי לאורך זמן?",
    type: "openText",
    depth: "ADVANCED",
    isRequired: true,
    minLength: 50,
    maxLength: 600,
    placeholder:
      "לדוגמה: זמן איכות, שיחות פתוחות, חוויות משותפות, מחוות קטנות...",
    metadata: { estimatedTime: 3 },
  },
  {
    worldId: "RELATIONSHIP",
    id: "support_style_needed", // שאלה חדשה (משולבת)
    category: "relationship",
    subcategory: "intimacy_support",
    question: "כשאת/ה מתמודד/ת עם קושי, איזה סוג תמיכה הכי עוזר לך?",
    type: "iconChoice",
    depth: "BASIC",
    isRequired: true,
    options: [
      {
        icon: <HandHeart />,
        text: "הקשבה ואמפתיה",
        value: "listening_empathy",
      },
      {
        icon: <Lightbulb />,
        text: "עצות ופתרונות מעשיים",
        value: "advice_solutions",
      },
      {
        icon: <Coffee />,
        text: "הסחת דעת ועידוד",
        value: "distraction_encouragement",
      },
      {
        icon: <Home />,
        text: "מרחב שקט לעיבוד עצמי",
        value: "space_processing",
      },
    ],
    metadata: { estimatedTime: 1 },
  },
  {
    worldId: "RELATIONSHIP",
    id: "personal_space_need", // שינוי שם מ-personal_space
    category: "relationship",
    subcategory: "intimacy_support",
    question:
      "על סולם של 1 (זקוק/ה למעט מאוד) עד 10 (זקוק/ה להרבה), כמה מרחב אישי וזמן לבד חשובים לך בתוך הזוגיות?",
    type: "scale",
    depth: "BASIC",
    isRequired: true,
    min: 1,
    max: 10,
    metadata: { estimatedTime: 1 },
  },

  // --- 5. חזון משפחתי ועתידי ---
  {
    worldId: "RELATIONSHIP",
    id: "family_size_timing", // שינוי שם מ-family_vision
    category: "relationship",
    subcategory: "family_future",
    question: "מהי השאיפה שלך לגבי גודל המשפחה ותזמון הבאת ילדים?",
    type: "iconChoice",
    depth: "BASIC",
    isRequired: true,
    options: [
      {
        icon: <Baby />,
        text: "רוצה משפחה גדולה יחסית ומוקדם",
        value: "large_early",
      },
      {
        icon: <Home />,
        text: "רוצה משפחה קטנה/בינונית, בקצב טבעי",
        value: "small_medium_natural",
      },
      {
        icon: <Clock />,
        text: "רוצה ילדים, אבל לא בלחץ של זמן",
        value: "kids_no_rush",
      },
      {
        icon: <Heart />,
        text: "פתוח/ה למה שיבוא, גמיש/ה בנושא",
        value: "open_flexible",
      },
    ],
    metadata: { estimatedTime: 1 },
  },
  {
    worldId: "RELATIONSHIP",
    id: "parenting_style_vision", // שאלה חדשה
    category: "relationship",
    subcategory: "family_future",
    question: "אילו עקרונות מרכזיים היית רוצה שיובילו את גידול הילדים במשפחתך?",
    type: "multiSelect",
    depth: "ADVANCED",
    isRequired: false, // אפשר להפוך לחובה אם רלוונטי
    options: [
      { value: "independence", text: "עידוד עצמאות ואחריות", icon: <Star /> },
      { value: "discipline", text: "גבולות ומשמעת ברורה", icon: <Target /> },
      {
        value: "emotional_expression",
        text: "פתיחות רגשית וביטוי עצמי",
        icon: <Heart />,
      },
      { value: "learning_curiosity", text: "סקרנות ולמידה", icon: <Book /> },
      { value: "religious_values", text: "ערכי דת ומסורת", icon: <Church /> },
      {
        value: "creativity",
        text: "יצירתיות וחשיבה מחוץ לקופסה",
        icon: <Lightbulb />,
      },
    ],
    minSelections: 1,
    maxSelections: 3,
    metadata: { estimatedTime: 2 },
  },
  {
    worldId: "RELATIONSHIP",
    id: "extended_family_relations", // שינוי שם מ-family_boundaries
    category: "relationship",
    subcategory: "family_future",
    question: "איזה סוג קשר היית רוצה לקיים עם המשפחות המורחבות של שניכם?",
    type: "iconChoice",
    depth: "BASIC",
    isRequired: true,
    options: [
      {
        icon: <Users />,
        text: "מעורבות גבוהה וחלק אינטגרלי מהחיים",
        value: "high_involvement_integral",
      },
      {
        icon: <Home />,
        text: "קשר חם ותומך, תוך שמירה על גבולות",
        value: "warm_supportive_boundaries",
      },
      {
        icon: <Map />,
        text: "קשר מכבד אך עצמאי יחסית",
        value: "respectful_independent",
      },
      {
        icon: <Scale />,
        text: "משתנה לפי הנסיבות והצרכים",
        value: "variable_needs_based",
      },
    ],
    metadata: { estimatedTime: 1 },
  },
  {
    worldId: "RELATIONSHIP",
    id: "childhood_influence_deep", // שאלה קיימת מ-depth
    category: "relationship",
    subcategory: "family_future",
    question:
      "איך הבית שבו גדלת השפיע על תפיסת הזוגיות והמשפחה שלך? מה היית רוצה לשחזר ומה היית רוצה ליצור באופן שונה?",
    type: "openText",
    depth: "ADVANCED",
    isRequired: true,
    minLength: 100,
    maxLength: 1000,
    placeholder:
      "שתף/י תובנות לגבי השפעות הבית, דברים חיוביים ושליליים, ואיך זה מעצב את הרצונות שלך להיום...",
    metadata: { estimatedTime: 5 },
  },
  {
    worldId: "RELATIONSHIP",
    id: "long_term_vision", // שאלה קיימת מ-depth שופרה
    category: "relationship",
    subcategory: "family_future",
    question:
      "איך את/ה מדמיין/ת את חייכם המשותפים בעוד 10-15 שנה? מהם הדברים העיקריים שהיית רוצה להשיג יחד עד אז?",
    type: "openText",
    depth: "ADVANCED",
    isRequired: true,
    minLength: 100,
    maxLength: 800,
    placeholder: "תאר/י את החזון שלך לעתיד הזוגי והמשפחתי בטווח הבינוני...",
    metadata: { estimatedTime: 4 },
  },
];

// הסרנו את ייצוא ברירת המחדל, מכיוון שהקובץ הזה רק מייצא את המערך
// export default relationshipQuestions;


==================================================
Contents of C:\Users\eytan\Desktop\שידוכים\shidduch-system\src\components\questionnaire\questions\religion\faithQuestions.tsx:
==================================================
import { Question } from "../../types/types";

export const faithQuestions: Question[] = [
  // Spiritual and Religious Values
  {
    worldId: "RELIGION",  id: "spiritualMoment",
    category: "values",
    subcategory: "spiritual",
    question: "מהו הרגע הכי רוחני שחווית בחייך?",
    type: "openText",
    depth: "BASIC",
    isRequired: true,
    placeholder: "ספר/י על חוויה משמעותית...",
    minLength: 20,
    maxLength: 500,
  },
  {
    worldId: "RELIGION",
      id: "favoriteHoliday",
    category: "values",
    subcategory: "spiritual",
    question: "איזה חג יהודי הכי משמעותי עבורך?",
    type: "singleChoice",
    depth: "BASIC",
    isRequired: true,
    options: [
      { value: "roshHashana", text: "ראש השנה" },
      { value: "yomKippur", text: "יום כיפור" },
      { value: "pesach", text: "פסח" },
      { value: "shavuot", text: "שבועות" },
    ],
  },

  // Personal Values
  {
    worldId: "RELIGION",
    id: "coreValues",
    category: "values",
    subcategory: "personal",
    question: "מהם שלושת הערכים החשובים ביותר בחייך?",
    type: "multiSelect",
    depth: "BASIC",
    isRequired: true,
    options: [
      { value: "honesty", text: "יושר ואמת" },
      { value: "family", text: "משפחה" },
      { value: "learning", text: "לימוד והתפתחות" },
      { value: "kindness", text: "חסד" },
      { value: "tradition", text: "מסורת" },
      { value: "success", text: "הצלחה" },
    ],
    minSelections: 1,
    maxSelections: 3,
  },
  {worldId: "RELIGION",
    id: "lifeGoals",
    category: "values",
    subcategory: "personal",
    question: "מהי המטרה העיקרית שלך בחיים?",
    type: "openText",
    depth: "ADVANCED",
    isRequired: true,
    placeholder: "שתף/י במטרות החיים שלך...",
    minLength: 30,
    maxLength: 500,
  },

  // Community Values
  {worldId: "RELIGION",
    id: "communityRole",
    category: "values",
    subcategory: "community",
    question: "איזה תפקיד אתה רואה לעצמך בקהילה?",
    type: "multiSelect",
    depth: "BASIC",
    isRequired: true,
    options: [
      { value: "leader", text: "מנהיג/מוביל" },
      { value: "supporter", text: "תומך ומסייע" },
      { value: "teacher", text: "מחנך/מלמד" },
      { value: "participant", text: "משתתף פעיל" },
    ],
    minSelections: 1,
    maxSelections: 2,
  },
  {worldId: "RELIGION",
    id: "givingPhilosophy",
    category: "values",
    subcategory: "community",
    question: "מהי תפיסת עולמך בנושא נתינה וצדקה?",
    type: "openText",
    depth: "ADVANCED",
    isRequired: true,
    placeholder: "תאר/י את גישתך לנתינה...",
    minLength: 30,
    maxLength: 500,
  },

  // Future Values
  {worldId: "RELIGION",
    id: "nextGeneration",
    category: "values",
    subcategory: "future",
    question: "מה הערכים החשובים ביותר שתרצה להעביר לדור הבא?",
    type: "multiSelect",
    depth: "EXPERT",
    isRequired: true,
    options: [
      { value: "torah", text: "תורה ומסורת" },
      { value: "ethics", text: "מוסר וערכים" },
      { value: "education", text: "חינוך והשכלה" },
      { value: "independence", text: "עצמאות" },
      { value: "community", text: "קהילתיות" },
    ],
    minSelections: 1,
    maxSelections: 3,
  },
  {worldId: "RELIGION",
    id: "israelVision",
    category: "values",
    subcategory: "future",
    question: "מהו החזון שלך למדינת ישראל?",
    type: "openText",
    depth: "EXPERT",
    isRequired: true,
    placeholder: "שתף/י את חזונך...",
    minLength: 50,
    maxLength: 1000,
  }
];

==================================================
Contents of C:\Users\eytan\Desktop\שידוכים\shidduch-system\src\components\questionnaire\questions\religion\practicalReligionQuestions.tsx:
==================================================
import { Question } from "../../types/types";

export const practicalQuestions: Question[] = [
  // Basic Principles
  {worldId: "RELIGION",
    id: "religiousWorldview",
    category: "religiousLifestyle",
    subcategory: "basicPrinciples",
    question: "מהי השקפת עולמך הדתית?",
    type: "openText",
    depth: "BASIC",
    isRequired: true,
    placeholder: "תאר/י את תפיסת עולמך הדתית...",
    minLength: 20,
    maxLength: 500,
  },
  {worldId: "RELIGION",
    id: "religiousIdentity",
    category: "religiousLifestyle",
    subcategory: "basicPrinciples",
    question: "איך אתה מגדיר את זהותך הדתית?",
    type: "singleChoice",
    depth: "BASIC",
    isRequired: true,
    options: [
      { value: "charedi", text: "חרדי" },
      { value: "datiLeumi", text: "דתי לאומי" },
      { value: "masorti", text: "מסורתי" },
      { value: "other", text: "אחר" },
    ],
  },
  {worldId: "RELIGION",
    id: "halachaImportance",
    category: "religiousLifestyle",
    subcategory: "basicPrinciples",
    question: "מה מקומה של ההלכה בחיי היומיום שלך?",
    type: "openText",
    depth: "BASIC",
    isRequired: true,
    placeholder: "תאר/י את מקום ההלכה בחייך...",
    minLength: 20,
    maxLength: 500,
  },

  // Prayer and Learning
  {worldId: "RELIGION",
    id: "minyanImportance",
    category: "religiousLifestyle",
    subcategory: "prayerAndLearning",
    question: "מהי חשיבות התפילה במניין בחייך?",
    type: "singleChoice",
    depth: "BASIC",
    isRequired: true,
    options: [
      { value: "veryImportant", text: "חשוב מאוד - משתדל להתפלל כל תפילה במניין" },
      { value: "important", text: "חשוב - משתדל לפחות פעם ביום" },
      { value: "sometimes", text: "לעיתים - בעיקר בשבתות וחגים" },
      { value: "notImportant", text: "פחות חשוב לי" },
    ],
  },
  {worldId: "RELIGION",
    id: "dailyLearning",
    category: "religiousLifestyle",
    subcategory: "prayerAndLearning",
    question: "איך נראה סדר הלימוד היומי שלך?",
    type: "multiSelect",
    depth: "BASIC",
    isRequired: true,
    options: [
      { value: "dafYomi", text: "דף יומי" },
      { value: "halacha", text: "הלכה יומית" },
      { value: "parasha", text: "פרשת שבוע" },
      { value: "chassidut", text: "חסידות" },
      { value: "mussar", text: "מוסר" },
      { value: "other", text: "אחר" },
    ],
    minSelections: 1,
    maxSelections: 4,
  },
  
  // Shabbat and Holidays
  {worldId: "RELIGION",
    id: "idealShabbat",
    category: "religiousLifestyle",
    subcategory: "shabbatAndHolidays",
    question: "איך נראית השבת האידיאלית בעיניך?",
    type: "openText",
    depth: "BASIC",
    isRequired: true,
    placeholder: "תאר/י את השבת המושלמת עבורך...",
    minLength: 20,
    maxLength: 500,
  },
  {worldId: "RELIGION",
    id: "shabbatRestrictions",
    category: "religiousLifestyle",
    subcategory: "shabbatAndHolidays",
    question: "מה יחסך לחומרות בהלכות שבת?",
    type: "multiSelect",
    depth: "ADVANCED",
    isRequired: false,
    options: [
      { value: "strict", text: "מחמיר בהלכות שבת" },
      { value: "basic", text: "שומר על ההלכות הבסיסיות" },
      { value: "flexible", text: "גמיש יותר בפרשנות" },
      { value: "situational", text: "תלוי במצב ובנסיבות" },
    ],
    minSelections: 1,
    maxSelections: 2,
  },

  // Kashrut and Halacha
  {worldId: "RELIGION",
    id: "kashrutLevel",
    category: "religiousLifestyle",
    subcategory: "kashrutAndHalacha",
    question: "מה רמת ההקפדה שלך בכשרות?",
    type: "singleChoice",
    depth: "BASIC",
    isRequired: true,
    options: [
      { value: "mehadrin", text: "מהדרין בלבד" },
      { value: "regular", text: "כשרות רגילה" },
      { value: "basic", text: "כשרות בסיסית" },
      { value: "flexible", text: "גמיש יותר" },
    ],
  },
  {worldId: "RELIGION",
    id: "eatingOut",
    category: "religiousLifestyle",
    subcategory: "kashrutAndHalacha",
    question: "איך אתה מתייחס לאכילה מחוץ לבית?",
    type: "multiSelect",
    depth: "BASIC",
    isRequired: true,
    options: [
      { value: "onlyKosher", text: "רק במסעדות כשרות" },
      { value: "familyHome", text: "אוכל בבתים של משפחה" },
      { value: "friendsHome", text: "אוכל אצל חברים" },
      { value: "flexible", text: "גמיש בהתאם לנסיבות" },
    ],
    minSelections: 1,
    maxSelections: 3,
  },

  // Modesty and Public Space
  {worldId: "RELIGION",
    id: "modestyView",
    category: "religiousLifestyle",
    subcategory: "modestyAndPublic",
    question: "מהי השקפתך בענייני צניעות?",
    type: "openText",
    depth: "BASIC",
    isRequired: true,
    placeholder: "תאר/י את תפיסתך בנושא צניעות...",
    minLength: 20,
    maxLength: 500,
  },
  {worldId: "RELIGION",
    id: "genderSeparation",
    category: "religiousLifestyle",
    subcategory: "modestyAndPublic",
    question: "איך אתה מתייחס להפרדה בין גברים לנשים?",
    type: "singleChoice",
    depth: "ADVANCED",
    isRequired: true,
    options: [
      { value: "fullSeparation", text: "תומך בהפרדה מלאה" },
      { value: "situational", text: "תלוי בנסיבות ובמקום" },
      { value: "flexible", text: "גמיש יותר בנושא" },
      { value: "against", text: "מתנגד להפרדה" },
    ],
  },
];

==================================================
Contents of C:\Users\eytan\Desktop\שידוכים\shidduch-system\src\components\questionnaire\questions\religion\religionQuestions.tsx:
==================================================
// src/components/questionnaire/questions/religion/religionQuestions.tsx
import { Question } from "../../types/types";
import {
  BookOpen, // לימוד תורה, השקפה
  Users, // קהילה, חברה
  Home, // בית, משפחה
  Star, // כללי, ערכים, חשיבות
  Target, // מטרה, הלכה
  Scale, // איזון, גישה
  Clock, // זמן, תדירות
  Heart, // רגש, רוחניות
  Scroll, // מגילה, מסורת
  Building, // בניין, מוסד (קהילה/חינוך)
  ShieldCheck, // ביטחון, הקפדה
  MapPin, // מיקום, קהילה ספציפית
  Sparkles, // רוחניות, חוויה
  MessageCircle, // שיח, דיון
  Flag, // מדינה, ציונות
  UsersRound, // חברים, מעגל חברתי
  GraduationCap, // חינוך
  HandHeart, // תמיכה, נתינה (בהקשר דתי)
  AlertTriangle, // אזהרה, קו אדום (פחות מתאים כאן)
  Coffee, // פנאי (בהקשר של שבת)
  CheckCheck, // אישור, הסכמה
  Info, // מידע, הבהרה
  Briefcase, // עבודה (לעומת לימוד)
  Percent, // סולם, רמה
  Lightbulb, // רעיון, פתיחות
} from "lucide-react";

export const religionQuestions: Question[] = [
  // --- 1. זהות והשקפה דתית ---
  {
    worldId: "RELIGION",
    id: "religious_identity", // שילוב של religiousIdentity ו-religiousWorldview
    category: "identity_belief",
    subcategory: "self_definition",
    question: "איך היית מגדיר/ה את עצמך מבחינה דתית-רוחנית?",
    type: "iconChoice",
    depth: "BASIC",
    isRequired: true,
    options: [
      { icon: <Scroll />, text: "חרדי/ת", value: "charedi" },
      {
        icon: <BookOpen />,
        text: "דתי/ה לאומי/ת - תורני/ת",
        value: "dati_leumi_torani",
      },
      {
        icon: <Star />,
        text: "דתי/ה לאומי/ת - ליברלי/ת",
        value: "dati_leumi_liberal",
      },
      { icon: <Heart />, text: "מסורתי/ת", value: "masorti" },
      {
        icon: <Sparkles />,
        text: "רוחני/ת (לא בהכרח דתי/ה פורמלי)",
        value: "spiritual_not_formal",
      },
      {
        icon: <Users />,
        text: "חילוני/ת עם זיקה למסורת",
        value: "secular_traditional",
      },
      { icon: <Info />, text: "אחר/ת", value: "other" }, // ללא אייקון ספציפי
    ],
    metadata: { estimatedTime: 1 },
  },
  {
    worldId: "RELIGION",
    id: "religious_worldview_details",
    category: "identity_belief",
    subcategory: "self_definition",
    question:
      "בהמשך להגדרה שבחרת, תאר/י בכמה משפטים מה המשמעות של זהות זו עבורך וכיצד היא באה לידי ביטוי בחייך.",
    type: "openText",
    depth: "ADVANCED",
    isRequired: true, // חשוב להבנה מעמיקה
    minLength: 50,
    maxLength: 600,
    placeholder: "פרט/י על תפיסת עולמך, אמונותיך והחיבור האישי שלך...",
    metadata: { estimatedTime: 3 },
  },
  {
    worldId: "RELIGION",
    id: "halacha_role", // שינוי מ-halachaImportance
    category: "identity_belief",
    subcategory: "halacha_view",
    question:
      "מה מקומה וחשיבותה של ההלכה בחיי היומיום שלך? (1=פחות מרכזי, 10=מרכזי מאוד)",
    type: "scale",
    depth: "BASIC",
    isRequired: true,
    min: 1,
    max: 10,
    metadata: { estimatedTime: 1 },
  },
  {
    worldId: "RELIGION",
    id: "halacha_approach",
    category: "identity_belief",
    subcategory: "halacha_view",
    question: "איזו גישה הלכתית הכי מאפיינת אותך?",
    type: "iconChoice",
    depth: "BASIC",
    isRequired: true,
    options: [
      {
        icon: <ShieldCheck />,
        text: "הקפדה על קלה כבחמורה",
        value: "strict",
      },
      {
        icon: <Target />,
        text: "הקפדה על עיקרי ההלכה",
        value: "mainstream",
      },
      {
        icon: <Scale />,
        text: "גישה מקלה וגמישה יותר",
        value: "lenient_flexible",
      },
      {
        icon: <Lightbulb />,
        text: "חיפוש אחר רוח ההלכה והמשמעות",
        value: "spirit_meaning",
      },
    ],
    metadata: { estimatedTime: 1 },
  },
  {
    worldId: "RELIGION",
    id: "faith_certainty", // שאלה חדשה
    category: "identity_belief",
    subcategory: "belief_faith",
    question:
      "על סולם של 1 (הרבה שאלות וספקות) עד 10 (אמונה שלמה וברורה), היכן היית ממקם/ת את עצמך מבחינת וודאות באמונה?",
    type: "scale",
    depth: "ADVANCED",
    isRequired: false,
    min: 1,
    max: 10,
    metadata: { estimatedTime: 1 },
  },
  {
    worldId: "RELIGION",
    id: "god_connection", // שאלה חדשה
    category: "identity_belief",
    subcategory: "belief_faith",
    question: "איך היית מתאר/ת את הקשר האישי שלך עם אלוקים?",
    type: "openText",
    depth: "ADVANCED",
    isRequired: false,
    minLength: 50,
    maxLength: 500,
    placeholder: "תאר/י את התחושות, המחשבות והחוויות שלך בנושא...",
    metadata: { estimatedTime: 3 },
  },
  {
    worldId: "RELIGION",
    id: "rabbi_role", // שאלה חדשה
    category: "identity_belief",
    subcategory: "guidance",
    question: "מה חשיבותו של רב/נית או דמות רוחנית מנחה בחייך?",
    type: "scale",
    depth: "BASIC",
    isRequired: true,
    min: 1, // לא חשוב
    max: 10, // חשוב מאוד
    metadata: { estimatedTime: 1 },
  },

  // --- 2. שמירת מצוות (פרקטיקה) ---
  {
    worldId: "RELIGION",
    id: "minyan_frequency", // שינוי מ-minyanImportance
    category: "practice",
    subcategory: "prayer_learning",
    question: "מהי תדירות ההשתתפות שלך בתפילה במניין?",
    type: "iconChoice",
    depth: "BASIC",
    isRequired: true,
    options: [
      { icon: <Clock />, text: "3 תפילות ביום", value: "daily_3" },
      { icon: <Clock />, text: "פעם-פעמיים ביום", value: "daily_1_2" },
      { icon: <Star />, text: "בעיקר בשבתות וחגים", value: "shabbat_holidays" },
      { icon: <Users />, text: "לעיתים רחוקות", value: "rarely" },
      { icon: <Info />, text: "לא רלוונטי לי כרגע", value: "not_applicable" },
    ],
    metadata: { estimatedTime: 1 },
  },
  {
    worldId: "RELIGION",
    id: "torah_learning_regularity", // שינוי מ-dailyLearning
    category: "practice",
    subcategory: "prayer_learning",
    question: "באיזו תדירות ופורמט את/ה עוסק/ת בלימוד תורה באופן קבוע?",
    type: "multiSelect",
    depth: "BASIC",
    isRequired: true,
    options: [
      {
        icon: <Clock />,
        text: "לימוד יומי קבוע (דף יומי, הלכה וכו')",
        value: "daily",
      },
      { icon: <Star />, text: "שיעור שבועי קבוע", value: "weekly_class" },
      {
        icon: <BookOpen />,
        text: "לימוד עצמי/חברותא (ללא קביעות)",
        value: "self_study",
      },
      {
        icon: <UsersRound />,
        text: "לימוד בחגים/אירועים מיוחדים",
        value: "special_occasions",
      },
      {
        icon: <Info />,
        text: "כרגע פחות עוסק/ת בלימוד קבוע",
        value: "not_regularly",
      },
    ],
    minSelections: 1,
    maxSelections: 3,
    metadata: { estimatedTime: 1 },
  },
  {
    worldId: "RELIGION",
    id: "shabbat_observance_level", // שינוי מ-idealShabbat ו-shabbatRestrictions
    category: "practice",
    subcategory: "shabbat_holidays",
    question: "איזו רמה של שמירת שבת מאפיינת אותך?",
    type: "iconChoice",
    depth: "BASIC",
    isRequired: true,
    options: [
      {
        icon: <ShieldCheck />,
        text: "הקפדה מלאה על כל ההלכות",
        value: "full_observance",
      },
      {
        icon: <Target />,
        text: "שמירה על עיקרי ההלכות",
        value: "main_observance",
      },
      { icon: <Scale />, text: "שמירה חלקית/גמישה", value: "partial_flexible" },
      {
        icon: <Coffee />,
        text: "שמירה בעיקר על האווירה",
        value: "atmosphere_focused",
      },
      { icon: <Info />, text: "אינני שומר/ת שבת", value: "not_observant" },
    ],
    metadata: { estimatedTime: 1 },
  },
  {
    worldId: "RELIGION",
    id: "shabbat_atmosphere_preference",
    category: "practice",
    subcategory: "shabbat_holidays",
    question: "איזו אווירה את/ה מעדיף/ה לשבתות וחגים?",
    type: "iconChoice",
    depth: "BASIC",
    isRequired: true,
    options: [
      { icon: <Home />, text: "שקט ורגוע בבית", value: "quiet_home" },
      { icon: <Users />, text: "אירוח וחברה", value: "social_hosting" },
      { icon: <BookOpen />, text: "לימוד ותפילה", value: "learning_prayer" },
      { icon: <Sparkles />, text: "שילוב של הכל", value: "mix_everything" },
    ],
    metadata: { estimatedTime: 1 },
  },
  {
    worldId: "RELIGION",
    id: "kashrut_observance_level", // שינוי מ-kashrutLevel
    category: "practice",
    subcategory: "kashrut",
    question: "מהי רמת ההקפדה שלך על כשרות בבית ומחוצה לו?",
    type: "iconChoice",
    depth: "BASIC",
    isRequired: true,
    options: [
      {
        icon: <ShieldCheck />,
        text: "מהדרין בלבד (בבית ובחוץ)",
        value: "mehadrin_strict",
      },
      {
        icon: <Target />,
        text: "כשרות רגילה (רבנות)",
        value: "regular_kosher",
      },
      {
        icon: <Scale />,
        text: "כשרות בסיסית (מוצרים כשרים, הפרדה)",
        value: "basic_kosher",
      },
      {
        icon: <Home />,
        text: "שומר/ת כשרות בעיקר בבית",
        value: "kosher_at_home",
      },
      {
        icon: <Info />,
        text: "אינני מקפיד/ה על כשרות",
        value: "not_observant",
      },
    ],
    metadata: { estimatedTime: 1 },
  },
  {
    worldId: "RELIGION",
    id: "modesty_practice", // שינוי מ-modestyView
    category: "practice",
    subcategory: "modesty",
    question: "כיצד באה לידי ביטוי תפיסת הצניעות שלך בלבוש ובהתנהגות?",
    type: "openText",
    depth: "ADVANCED",
    isRequired: false,
    minLength: 50,
    maxLength: 500,
    placeholder: "תאר/י את רמת ההקפדה שלך והשיקולים המנחים אותך...",
    metadata: { estimatedTime: 3 },
  },
  {
    worldId: "RELIGION",
    id: "gender_separation_practice", // שינוי מ-genderSeparation
    category: "practice",
    subcategory: "modesty",
    question:
      "כיצד את/ה נוהג/ת בפועל בנושא הפרדה בין גברים לנשים (באירועים, בקהילה, במרחב הציבורי)?",
    type: "openText",
    depth: "ADVANCED",
    isRequired: false,
    minLength: 50,
    maxLength: 500,
    placeholder: "תאר/י את ההתנהלות שלך במצבים שונים...",
    metadata: { estimatedTime: 3 },
  },

  // --- 3. קהילה וחברה ---
  {
    worldId: "RELIGION",
    id: "community_type_preference", // שאלה חדשה
    category: "community_social",
    subcategory: "community_involvement",
    question:
      "לאיזה סוג קהילה דתית/רוחנית את/ה מרגיש/ה שייכות או היית רוצה להשתייך?",
    type: "multiSelectWithOther",
    depth: "BASIC",
    isRequired: false,
    options: [
      { icon: <Building />, text: "קהילה ליטאית", value: "litvish" },
      {
        icon: <Sparkles />,
        text: "קהילה חסידית (ציין/י איזו אם רלוונטי)",
        value: "chasidish",
      },
      { icon: <MapPin />, text: "קהילה ספרדית", value: "sephardi" },
      { icon: <BookOpen />, text: "קהילה דתית-לאומית", value: "dati_leumi" },
      { icon: <Scale />, text: "קהילה מעורבת", value: "mixed" },
      { icon: <Heart />, text: "קהילה מסורתית", value: "masorti_community" },
      {
        icon: <Users />,
        text: "קהילה צעירה/סטודנטיאלית",
        value: "young_student",
      },
      { icon: <Info />, text: "קהילה אינטרנטית/וירטואלית", value: "online" },
      {
        icon: <Info />,
        text: "אינני מרגיש/ה צורך בקהילה ספציפית",
        value: "no_specific_community",
      },
    ],
    maxSelections: 2,
    metadata: { estimatedTime: 1 },
  },
  {
    worldId: "RELIGION",
    id: "community_involvement_level", // שינוי מ-communityRole
    category: "community_social",
    subcategory: "community_involvement",
    question: "מהי רמת המעורבות הרצויה שלך בחיים הקהילתיים?",
    type: "scale",
    depth: "BASIC",
    isRequired: false,
    min: 1, // מעורבות נמוכה
    max: 10, // מעורבות גבוהה
    metadata: { estimatedTime: 1 },
  },
  {
    worldId: "RELIGION",
    id: "attitude_towards_other_streams", // שאלה חדשה
    category: "community_social",
    subcategory: "social_view",
    question: "מה יחסך לאנשים מזרמים דתיים אחרים או לרמות דתיות שונות משלך?",
    type: "iconChoice",
    depth: "ADVANCED",
    isRequired: false,
    options: [
      { icon: <Heart />, text: "פתוח/ה ומקבל/ת", value: "open_accepting" },
      {
        icon: <MessageCircle />,
        text: "מוכן/ה לדיאלוג ולמידה",
        value: "dialogue_learning",
      },
      {
        icon: <Scale />,
        text: "מכבד/ת אך שומר/ת על דרכי",
        value: "respectful_distinct",
      },
      {
        icon: <UsersRound />,
        text: "מעדיפ/ה חברה דומה לשלי",
        value: "prefer_similar",
      },
    ],
    metadata: { estimatedTime: 1 },
  },
  {
    worldId: "RELIGION",
    id: "zionism_view", // שאלה חדשה
    category: "community_social",
    subcategory: "social_view",
    question: "מהי עמדתך כלפי הציונות ומדינת ישראל?",
    type: "iconChoice",
    depth: "ADVANCED",
    isRequired: false, // חשוב לדעת, אך לא חובה קריטי לכולם
    options: [
      {
        icon: <Flag />,
        text: "ציוני/ת דתי/ת (תמיכה פעילה)",
        value: "religious_zionist",
      },
      {
        icon: <CheckCheck />,
        text: "מזדהה עם המדינה ותומכ/ת בה",
        value: "supportive_state",
      },
      {
        icon: <Scale />,
        text: "יחס מורכב / אמביוולנטי",
        value: "complex_ambivalent",
      },
      {
        icon: <Info />,
        text: "א-ציוני/ת / אנטי-ציוני/ת",
        value: "non_anti_zionist",
      },
    ],
    metadata: { estimatedTime: 1 },
  },

  // --- 4. משפחה וחינוך דתי ---
  {
    worldId: "RELIGION",
    id: "partner_religious_level_match", // שאלה חדשה
    category: "family_education",
    subcategory: "partner_expectations",
    question: "עד כמה חשוב לך שבן/בת הזוג יהיו באותה רמה דתית כמוך?",
    type: "scale",
    depth: "BASIC",
    isRequired: true,
    min: 1, // לא חשוב
    max: 10, // חשוב מאוד
    metadata: { estimatedTime: 1 },
  },
  {
    worldId: "RELIGION",
    id: "partner_religious_growth", // שאלה חדשה
    category: "family_education",
    subcategory: "partner_expectations",
    question:
      "האם חשוב לך שבן/בת הזוג יהיו פתוחים לצמיחה והתפתחות רוחנית/דתית?",
    type: "singleChoice",
    depth: "BASIC",
    isRequired: true,
    options: [
      { value: "very_important", text: "כן, חשוב לי מאוד שנתפתח יחד" },
      { value: "somewhat_important", text: "כן, חשוב שתהיה פתיחות לכך" },
      { value: "not_crucial", text: "פחות קריטי, חשוב לי המצב הנוכחי" },
      { value: "prefer_stability", text: "מעדיפ/ה יציבות ברמה הדתית" },
    ],
    metadata: { estimatedTime: 1 },
  },
  {
    worldId: "RELIGION",
    id: "children_education_type", // שאלה חדשה
    category: "family_education",
    subcategory: "children_education",
    question:
      "איזה סוג מוסד חינוכי (זרם, דגשים) היית רוצה עבור ילדיך העתידיים?",
    type: "multiSelectWithOther",
    depth: "ADVANCED",
    isRequired: false, // לא כולם הורים/חושבים על זה
    options: [
      {
        icon: <GraduationCap />,
        text: 'חינוך ממלכתי-דתי (ממ"ד)',
        value: "mamad",
      },
      { icon: <BookOpen />, text: "חינוך תורני-לאומי", value: "torani_leumi" },
      {
        icon: <Scroll />,
        text: "חינוך חרדי (חיידר, ישיבה קטנה, סמינר)",
        value: "charedi",
      },
      {
        icon: <Building />,
        text: "חינוך עצמאי / מוכר שאינו רשמי",
        value: "independent",
      },
      {
        icon: <Scale />,
        text: "חינוך משלב / דמוקרטי-דתי",
        value: "integrative_democratic",
      },
      {
        icon: <Home />,
        text: "חינוך ביתי עם דגש דתי",
        value: "homeschooling_religious",
      },
    ],
    maxSelections: 2,
    metadata: { estimatedTime: 1 },
  },
  {
    worldId: "RELIGION",
    id: "home_religious_atmosphere", // שאלה חדשה
    category: "family_education",
    subcategory: "home_environment",
    question: "איזו אווירה דתית/רוחנית היית רוצה ליצור בביתך המשותף?",
    type: "openText",
    depth: "ADVANCED",
    isRequired: false,
    minLength: 50,
    maxLength: 500,
    placeholder:
      "תאר/י את האווירה הרצויה - דגש על הלכה, רוחניות, מסורת, פתיחות...",
    metadata: { estimatedTime: 3 },
  },

  // --- 5. רוחניות וצמיחה ---
  {
    worldId: "RELIGION",
    id: "spiritual_experiences", // שינוי מ-spiritualMoment
    category: "spirituality_growth",
    subcategory: "personal_experience",
    question: "שתף/י בחוויה רוחנית משמעותית שעברת ומה למדת ממנה.",
    type: "openText",
    depth: "ADVANCED",
    isRequired: false,
    minLength: 50,
    maxLength: 600,
    placeholder: "ספר/י על רגע של התעלות, התחברות, הבנה רוחנית...",
    metadata: { estimatedTime: 3 },
  },
  {
    worldId: "RELIGION",
    id: "religious_challenges", // שאלה חדשה
    category: "spirituality_growth",
    subcategory: "growth_development",
    question: "מהם האתגרים הגדולים ביותר שלך בחיים הדתיים/רוחניים?",
    type: "openText",
    depth: "ADVANCED",
    isRequired: false,
    minLength: 50,
    maxLength: 500,
    placeholder:
      "לדוגמה: קשיים באמונה, התמודדות עם מצוות, שילוב עם העולם המודרני...",
    metadata: { estimatedTime: 3 },
  },
  {
    worldId: "RELIGION",
    id: "religious_growth_areas", // שאלה חדשה
    category: "spirituality_growth",
    subcategory: "growth_development",
    question: "באילו תחומים דתיים/רוחניים היית רוצה להתפתח או להעמיק?",
    type: "multiSelectWithOther",
    depth: "ADVANCED",
    isRequired: false,
    options: [
      {
        icon: <BookOpen />,
        text: "לימוד תורה (גמרא, הלכה, מחשבה)",
        value: "torah_study",
      },
      { icon: <Heart />, text: "תפילה וכוונה", value: "prayer_intention" },
      {
        icon: <ShieldCheck />,
        text: "הקפדה על מצוות",
        value: "mitzvot_observance",
      },
      { icon: <HandHeart />, text: "מידות ודרך ארץ", value: "middot_ethics" },
      {
        icon: <Sparkles />,
        text: "חיבור רוחני וחוויה",
        value: "spiritual_connection",
      },
      {
        icon: <Users />,
        text: "מעורבות קהילתית",
        value: "community_involvement",
      },
    ],
    maxSelections: 3,
    metadata: { estimatedTime: 1 },
  },
];

// ייצא את המערך המאוחד
export default religionQuestions;


==================================================
Contents of C:\Users\eytan\Desktop\שידוכים\shidduch-system\src\components\questionnaire\questions\values\valuesQuestions.tsx:
==================================================
// src/components/questionnaire/questions/values/valuesQuestions.tsx
import { Question } from "../../types/types";
import {
  Scale,
  Briefcase,
  Book,
  Target,
  Leaf,
  Building,
  Gem,
  Sword,
  Brain,
  Laptop,
  HandHeart,
  School,
  LibraryBig,
  Users,
  Globe,
  Map,
  ScrollText,
  Construction,
  Flag,
  Star,
  TreePine,
  Church,
  Heart,
  Coffee,
  Home,
  ShieldCheck,
  Clock,
  Award,
  PiggyBank,
  Palette,
  Music,
  TrendingUp, // אייקון לצמיחה אישית
  DollarSign, // אייקון לנתינה/כסף
  HelpCircle, // אייקון לשאלת המשך
} from "lucide-react";

export const valuesQuestions: Question[] = [
  // --- ערכים אישיים ---
  {
    worldId: "VALUES",
    id: "core_values_open",
    category: "values",
    subcategory: "personal",
    question:
      "מהם 3-5 הערכים החשובים ביותר שמנחים אותך בחיי היומיום? הסבר/י בקצרה מדוע כל אחד מהם חשוב ואיך הוא בא לידי ביטוי בחייך.",
    type: "openText",
    depth: "ADVANCED",
    isRequired: true,
    minLength: 150,
    maxLength: 1000,
    placeholder:
      "לדוגמה: משפחתיות - הקשר עם המשפחה הוא עוגן מרכזי עבורי, ואני משקיע/ה זמן בקשרים אלו. יושרה - חשוב לי להיות אדם שאפשר לסמוך עליו, לכן אעמוד במילה שלי גם אם זה לא נוח. צמיחה אישית - אני מאמינ/ה בלמידה מתמדת, ולכן אני קורא/ת ספרים בתחום המקצועי שלי...",
    metadata: { estimatedTime: 5 },
  },
  {
    worldId: "VALUES",
    id: "life_priorities_today",
    category: "values",
    subcategory: "personal",
    question:
      "סדר עדיפויות נוכחי: חלק/י 100 נקודות אנרגיה/חשיבות בין תחומי החיים הבאים, כפי שהם באים לידי ביטוי בחייך *היום*.",
    type: "budgetAllocation",
    depth: "ADVANCED",
    isRequired: true,
    totalPoints: 100,
    categories: [
      { label: "משפחה וקשרים קרובים", icon: <Home />, min: 0, max: 100, description: "זמן, אנרגיה ומחשבה המוקדשים למשפחה הגרעינית, משפחת המוצא וחברים קרובים." },
      { label: "קריירה ועבודה", icon: <Briefcase />, min: 0, max: 100, description: "השקעה בפיתוח מקצועי, קידום בעבודה, שעות עבודה והתמודדות עם אתגרים." },
      { label: "רוחניות ולימוד תורה", icon: <Book />, min: 0, max: 100, description: "זמן המוקדש לתפילה, לימוד, חשבון נפש ופעילויות רוחניות אחרות." },
      { label: "קהילה, חברים והתנדבות", icon: <Users />, min: 0, max: 100, description: "מעורבות קהילתית, קשרים חברתיים רחבים יותר, פעילויות התנדבות ותרומה לחברה." },
      { label: "פנאי, תחביבים וצמיחה אישית", icon: <Star />, min: 0, max: 100, description: "זמן המוקדש לתחביבים, ספורט, תרבות, מנוחה, למידה שאינה רוחנית/מקצועית ופיתוח עצמי." },
    ],
    metadata: { estimatedTime: 3 },
  },
  {
    worldId: "VALUES",
    id: "life_priorities_future",
    category: "values",
    subcategory: "personal",
    question:
      "סדר עדיפויות רצוי בזוגיות: איך היית רוצה לחלק 100 נקודות אנרגיה/חשיבות בין תחומי החיים בזוגיות *עתידית*?",
    type: "budgetAllocation",
    depth: "ADVANCED",
    isRequired: true,
    totalPoints: 100,
    categories: [
      { label: "זוגיות ומשפחה", icon: <Home />, min: 0, max: 100, description: "זמן, אנרגיה ותשומת לב המוקדשים לבן/בת הזוג ולילדים (אם וכאשר יהיו)." },
      { label: "קריירה ועבודה (של שניכם)", icon: <Briefcase />, min: 0, max: 100, description: "השקעה בקריירה של כל אחד מבני הזוג והתמיכה ההדדית בה." },
      { label: "רוחניות ולימוד תורה", icon: <Book />, min: 0, max: 100, description: "זמן משותף ואישי המוקדש ללימוד, תפילה וחיבור רוחני." },
      { label: "קהילה, חברים והתנדבות", icon: <Users />, min: 0, max: 100, description: "מעורבות משותפת ונפרדת בחיי הקהילה, קשרים חברתיים ותרומה." },
      { label: "פנאי, תחביבים וצמיחה אישית", icon: <Star />, min: 0, max: 100, description: "זמן משותף ואישי המוקדש לתחביבים, בילויים, מנוחה והתפתחות עצמית." },
    ],
    metadata: {
      estimatedTime: 3,
      helpText: "חשוב/י על האיזון האידיאלי עבורך ועבור הזוגיות שת/ירצה לבנות.",
    },
  },
  {
    worldId: "VALUES",
    id: "economic_approach",
    category: "values",
    subcategory: "personal",
    question:
      "על סולם של 1 (פשטות והסתפקות במועט) עד 10 (שאיפה להצלחה ורווחה כלכלית), היכן היית ממקם/ת את גישתך הכלכלית?",
    type: "scale",
    depth: "BASIC",
    isRequired: true,
    min: 1,
    max: 10,
    metadata: { estimatedTime: 1 },
  },
  {
    worldId: "VALUES",
    id: "economic_approach_elaboration",
    category: "values",
    subcategory: "personal",
    question: "(אופציונלי) הסבר/י בקצרה את המשמעות של הדירוג שבחרת בשאלה הקודמת לגבי גישתך הכלכלית.",
    type: "openText",
    depth: "ADVANCED",
    isRequired: false,
    minLength: 0,
    maxLength: 300,
    placeholder: "מה עומד מאחורי הדירוג? מהם השיקולים שלך בנושא כלכלי?",
    metadata: { estimatedTime: 2 },
    icon: <HelpCircle/>, // <<--- Icon at the top level
  },
  {
    worldId: "VALUES",
    id: "money_role",
    category: "values",
    subcategory: "personal",
    question: "מהו בעיניך תפקידו של כסף בחיים ובזוגיות?",
    type: "openText",
    depth: "ADVANCED",
    isRequired: false,
    minLength: 50,
    maxLength: 400,
    placeholder: "האם הוא אמצעי להשגת מטרות, מקור לביטחון, גורם לחץ, מאפשר חוויות, כלי לנתינה?...",
    metadata: { estimatedTime: 2 },
  },
  {
    worldId: "VALUES",
    id: "giving_importance",
    category: "values",
    subcategory: "personal",
    question: "על סולם של 1 (פחות חשוב) עד 10 (חשוב מאוד), עד כמה נתינה, צדקה וחסד מהווים חלק משמעותי בחייך?",
    type: "scale",
    depth: "BASIC",
    isRequired: false,
    min: 1,
    max: 10,
    metadata: { estimatedTime: 1 },
    icon: <DollarSign/>, // <<--- Icon at the top level
  },
  {
    worldId: "VALUES",
    id: "personal_growth_importance",
    category: "values",
    subcategory: "personal",
    question: "על סולם של 1 (פחות חשוב) עד 10 (חשוב מאוד), עד כמה חשובה לך צמיחה והתפתחות אישית מתמדת (בתחומים שונים)?",
    type: "scale",
    depth: "BASIC",
    isRequired: true,
    min: 1,
    max: 10,
    metadata: { estimatedTime: 1 },
    icon: <TrendingUp/>, // <<--- Icon at the top level
  },
  {
    worldId: "VALUES",
    id: "education_level_preference",
    category: "values",
    subcategory: "personal",
    question:
      "מהי רמת ההשכלה הכללית (לימודי חול) הרצויה בעיניך עבורך ועבור בן/בת זוגך?",
    type: "singleChoice",
    depth: "BASIC",
    isRequired: true,
    options: [
      { value: "not_important", text: "רמת ההשכלה הפורמלית פחות חשובה לי" },
      { value: "high_school", text: "השכלה תיכונית / מקצועית" },
      { value: "academic", text: "השכלה אקדמית (תואר ראשון ומעלה)" },
      { value: "depends", text: "תלוי באדם ובתחומי העניין שלו" },
    ],
    metadata: { estimatedTime: 1 },
  },
  {
    worldId: "VALUES",
    id: "education_importance",
    category: "values",
    subcategory: "personal",
    question:
      "עד כמה חשובה לך השכלה פורמלית (כללית או תורנית) בהתפתחות אישית ובחיי המשפחה?",
    type: "scale",
    depth: "BASIC",
    isRequired: true,
    min: 1, // לא חשוב כלל
    max: 10, // חשוב מאוד
    metadata: { estimatedTime: 1 },
  },
  {
    worldId: "VALUES",
    id: "torah_learning_importance",
    category: "values",
    subcategory: "personal",
    question:
      "על סולם של 1 (פחות מרכזי) עד 10 (מרכזי מאוד), איזה מקום תופס לימוד תורה (אישי או משותף) בחייך ואיזה מקום היית רוצה שיתפוס בעתיד?",
    type: "scale",
    depth: "ADVANCED",
    isRequired: true,
    min: 1,
    max: 10,
    metadata: { estimatedTime: 1 },
  },
  {
    worldId: "VALUES",
    id: "torah_learning_expression",
    category: "values",
    subcategory: "personal",
    question:
      "כיצד לימוד תורה בא לידי ביטוי בחייך כיום, או איך היית רוצה שיבוא לידי ביטוי?",
    type: "openText",
    depth: "ADVANCED",
    isRequired: false,
    minLength: 50,
    maxLength: 400,
    placeholder:
      "לדוגמה: שיעור קבוע, דף יומי, חברותא, לימוד עצמי מספרים, דיונים על פרשת שבוע, שיעורים באינטרנט...",
    metadata: { estimatedTime: 2 },
  },
  {
    worldId: "VALUES",
    id: "career_priorities",
    category: "values",
    subcategory: "personal",
    question: "מהם הדברים החשובים לך ביותר בקריירה או בעבודה? (בחר/י עד 3)",
    type: "multiSelect",
    depth: "BASIC",
    isRequired: true,
    options: [
      { icon: <HandHeart />, text: "תרומה ומשמעות", value: "contribution" },
      { icon: <PiggyBank />, text: "ביטחון כלכלי ותגמול", value: "stability_reward" },
      { icon: <Award />, text: "התפתחות מקצועית והישגים", value: "achievement_growth" },
      { icon: <Scale />, text: "איזון בית-עבודה", value: "balance" },
      { icon: <Star />, text: "עניין, אתגר וגיוון", value: "interest_challenge" },
      { icon: <Users />, text: "סביבה חברתית נעימה", value: "social_environment" },
    ],
    minSelections: 1,
    maxSelections: 3,
    metadata: { estimatedTime: 1 },
  },
  {
    worldId: "VALUES",
    id: "leisure_importance",
    category: "values",
    subcategory: "personal",
    question: "עד כמה חשוב לך לפנות זמן לפנאי, תחביבים ופעילויות תרבות?",
    type: "scale",
    depth: "BASIC",
    isRequired: false,
    min: 1, // לא חשוב
    max: 10, // חשוב מאוד
    metadata: { estimatedTime: 1 },
  },
  {
    worldId: "VALUES",
    id: "leisure_preferences",
    category: "values",
    subcategory: "personal",
    question: "אילו סוגי בילוי ופנאי חשוב לך שיהיו משותפים עם בן/בת הזוג? (בחר/י עד 4)",
    type: "multiSelect",
    depth: "BASIC",
    isRequired: false,
    options: [
      { icon: <Coffee />, text: "בילויים שקטים ורגועים", value: "quiet" },
      { icon: <Globe />, text: "טיולים בטבע והרפתקאות", value: "nature_adventure" },
      { icon: <Palette />, text: "תרבות ואמנות", value: "culture_art" },
      { icon: <Music />, text: "מוזיקה והופעות", value: "music_shows" },
      { icon: <Book />, text: "למידה והעשרה משותפת", value: "learning" },
      { icon: <Users />, text: "מפגשים חברתיים ואירוח", value: "social_hosting" },
      { icon: <HandHeart />, text: "התנדבות ופעילות קהילתית", value: "volunteering" },
      { icon: <Heart />, text: "פעילויות רוחניות משותפות", value: "spiritual" },
    ],
    minSelections: 1,
    maxSelections: 4,
    metadata: { estimatedTime: 2 },
  },
  {
    worldId: "VALUES",
    id: "modesty_meaning",
    category: "values",
    subcategory: "personal",
    question:
      "מהי המשמעות של 'צניעות' עבורך? כיצד היא באה לידי ביטוי בתחומים שונים (לבוש, דיבור, התנהלות כלכלית, התנהגות חברתית)?",
    type: "openText",
    depth: "ADVANCED",
    isRequired: false,
    minLength: 100,
    maxLength: 600,
    placeholder: "שתף/י את תפיסתך והבנתך את המושג. למשל: בלבוש - הקפדה על כיסוי מסוים. בדיבור - הימנעות מרכילות או דיבור בוטה. בהתנהלות כלכלית - הימנעות מראוותנות. בהתנהגות חברתית - שמירה על איפוק או גבולות מסוימים...",
    metadata: { estimatedTime: 3 },
  },
  {
    worldId: "VALUES",
    id: "modesty_partner_importance",
    category: "values",
    subcategory: "personal",
    question: "עד כמה חשוב לך שבן/בת הזוג יחזיקו בתפיסת צניעות דומה לשלך?",
    type: "scale",
    depth: "ADVANCED",
    isRequired: false,
    min: 1, // לא חשוב
    max: 10, // חשוב מאוד
    metadata: { estimatedTime: 1 },
  },

  // --- ערכים קהילתיים וחברתיים ---
  {
    worldId: "VALUES",
    id: "community_importance",
    category: "values",
    subcategory: "community",
    question:
      "על סולם של 1 (לא חשוב) עד 10 (חשוב מאוד), עד כמה חשוב לך להיות חלק מקהילה תומכת ומעורבת?",
    type: "scale",
    depth: "BASIC",
    isRequired: false,
    min: 1,
    max: 10,
    metadata: { estimatedTime: 1 },
  },
  {
    worldId: "VALUES",
    id: "social_responsibility_partner",
    category: "values",
    subcategory: "community",
    question:
      "עד כמה חשוב לך שבן/בת הזוג יהיו שותפים לפעילויות התנדבותיות, קהילתיות או סביבתיות?",
    type: "scale",
    depth: "ADVANCED",
    isRequired: false,
    min: 1, // לא חשוב
    max: 10, // חשוב מאוד
    metadata: { estimatedTime: 1 },
  },

  // --- השקפת עולם ומדינה ---
  {
    worldId: "VALUES",
    id: "military_service_view",
    category: "values",
    subcategory: "worldview",
    question:
      "מהי גישתך האישית לשירות צבאי/לאומי או ללימוד תורה כמסלול חיים מרכזי?",
    type: "iconChoice",
    depth: "BASIC",
    isRequired: true,
    options: [
      { icon: <Sword />, text: "שירות משמעותי (צבאי/לאומי)", value: "meaningful_service" },
      { icon: <Book />, text: "שילוב תורה ושירות (הסדר/שילובים)", value: "hesder_integration" },
      { icon: <LibraryBig />, text: "לימוד תורה כמרכז החיים", value: "torah_centric" },
      { icon: <Target />, text: "תרומה בדרכים אחרות", value: "other_contribution" },
      { icon: <HelpCircle />, text: "פטור / לא רלוונטי עבורי", value: "exempt_not_relevant" },
    ],
    metadata: { estimatedTime: 1 },
  },
  {
    worldId: "VALUES",
    id: "military_service_partner_expectation",
    category: "values",
    subcategory: "worldview",
    question:
      "עד כמה חשוב לך שבן/בת הזוג יגיעו ממסלול (שירות צבאי/לאומי/לימוד תורה) דומה או תואם לשלך?",
    type: "scale",
    depth: "BASIC",
    isRequired: true,
    min: 1, // לא חשוב
    max: 10, // חשוב מאוד
    metadata: { estimatedTime: 1 },
  },
  {
    worldId: "VALUES",
    id: "state_religion_view",
    category: "values",
    subcategory: "worldview",
    question: "מהי גישתך האידיאלית ליחס בין דת ומדינה בישראל?",
    type: "iconChoice",
    depth: "ADVANCED",
    isRequired: true,
    options: [
      { icon: <Flag />, text: "הפרדה מלאה בין דת למדינה", value: "separation" },
      { icon: <Scale />, text: "סטטוס קוו (שמירה על האיזון הקיים)", value: "status_quo" },
      { icon: <Church />, text: "מדינה יהודית-דמוקרטית (עם צביון יהודי בולט)", value: "jewish_democratic" },
      { icon: <ScrollText />, text: "מדינת הלכה (החלת ההלכה במרחב הציבורי)", value: "halacha_state" },
      { icon: <HelpCircle />, text: "גישה אחרת / מורכבת", value: "other_complex" },
    ],
    metadata: { estimatedTime: 1 },
  },
  {
    worldId: "VALUES",
    id: "state_religion_partner_importance",
    category: "values",
    subcategory: "worldview",
    question:
      "עד כמה חשוב לך שבן/בת הזוג יחזיקו בהשקפה דומה לשלך בנושא דת ומדינה?",
    type: "scale",
    depth: "ADVANCED",
    isRequired: false,
    min: 1, // לא חשוב
    max: 10, // חשוב מאוד
    metadata: { estimatedTime: 1 },
  },
  {
    worldId: "VALUES",
    id: "shabbat_public_space_view",
    category: "values",
    subcategory: "worldview",
    question:
      "איך לדעתך צריך להיראות המרחב הציבורי (תחבורה, מסחר, בילוי) בשבת?",
    type: "iconChoice",
    depth: "ADVANCED",
    isRequired: true,
    options: [
      { icon: <ScrollText />, text: "שמירה מלאה על קדושת השבת (ללא חילול שבת פומבי)", value: "full_observance" },
      { icon: <Scale />, text: "שמירה חלקית עם התחשבות הדדית ומתן אפשרויות מסוימות", value: "partial_observance" },
      { icon: <Map />, text: "הסדרה מקומית לפי אופי האזור/העיר", value: "local_decision" },
      { icon: <Star />, text: "חופש פעילות מלא לכל אדם", value: "full_freedom" },
    ],
    metadata: { estimatedTime: 1 },
  },
  {
    worldId: "VALUES",
    id: "shabbat_home_vision",
    category: "values",
    subcategory: "worldview",
    question: "איך היית רוצה שהשבת תיראה בביתכם המשותף?",
    type: "openText",
    depth: "ADVANCED",
    isRequired: false,
    minLength: 50,
    maxLength: 500,
    placeholder: "תאר/י את האווירה (רוגע, חברה), הפעילויות (תפילה, לימוד, טיול, משחקים), ורמת ההקפדה ההלכתית הרצויה...",
    metadata: { estimatedTime: 2 },
  },

  // --- גישות נוספות ---
  {
    worldId: "VALUES",
    id: "technology_integration_view",
    category: "values",
    subcategory: "approach",
    question:
      "מהי גישתך לשילוב טכנולוגיה (סמארטפונים, אינטרנט, רשתות חברתיות) בחיי היומיום ובחינוך הילדים?",
    type: "iconChoice",
    depth: "BASIC",
    isRequired: false,
    options: [
      { icon: <Laptop />, text: "אימוץ פתוח ושימוש חופשי", value: "open_adoption" },
      { icon: <Scale />, text: "שימוש מבוקר ומאוזן עם גבולות", value: "controlled_use" },
      { icon: <ShieldCheck />, text: "סינון והגנה קפדניים", value: "filtered_protected" },
      { icon: <Target />, text: "צמצום השימוש למינימום ההכרחי", value: "minimal_necessary" },
    ],
    metadata: { estimatedTime: 1 },
  },
  {
    worldId: "VALUES",
    id: "technology_role_home",
    category: "values",
    subcategory: "approach",
    question:
      "איזה תפקיד היית רוצה שלטכנולוגיה יהיה בבית המשותף ובגידול הילדים?",
    type: "openText",
    depth: "ADVANCED",
    isRequired: false,
    minLength: 50,
    maxLength: 400,
    placeholder: "האם היא כלי עזר ללמידה ותקשורת, מקור בידור, גורם שיש להגביל את השימוש בו, מקור למתח פוטנציאלי?...",
    metadata: { estimatedTime: 2 },
  },
  {
    worldId: "VALUES",
    id: "medical_approach",
    category: "values",
    subcategory: "approach",
    question: "מהי גישתך לרפואה ובריאות?",
    type: "iconChoice",
    depth: "BASIC",
    isRequired: false,
    options: [
      { icon: <Building />, text: "רפואה קונבנציונלית מערבית", value: "conventional" },
      { icon: <Leaf />, text: "פתיחות לרפואה משלימה / אלטרנטיבית", value: "alternative" },
      { icon: <Scale />, text: "גישה משולבת (אינטגרטיבית)", value: "integrated" },
      { icon: <Brain />, text: "מחקר אישי ולקיחת אחריות", value: "research_personal" },
    ],
    metadata: { estimatedTime: 1 },
  },
  {
    worldId: "VALUES",
    id: "environmental_approach",
    category: "values",
    subcategory: "approach",
    question: "מהי גישתך לשמירה על איכות הסביבה וקיימות?",
    type: "iconChoice",
    depth: "BASIC",
    isRequired: false,
    options: [
      { icon: <TreePine />, text: "חשוב מאוד, אורח חיים אקולוגי", value: "very_important_active" },
      { icon: <Leaf />, text: "חשוב, מודעות ושמירה בסיסית", value: "important_aware" },
      { icon: <Scale />, text: "מאזן/ת בין נוחות לסביבה", value: "balanced_practical" },
      { icon: <Target />, text: "פחות בראש סדר העדיפויות", value: "lower_priority" },
    ],
    metadata: { estimatedTime: 1 },
  },
];

export default valuesQuestions;

==================================================
Contents of C:\Users\eytan\Desktop\שידוכים\shidduch-system\src\components\questionnaire\types\types.ts:
==================================================
// src/components/questionnaire/types/types.ts

// Basic type definitions
export type WorldId =
  | 'VALUES'
  | 'RELATIONSHIP'
  | 'PERSONALITY'
  | 'PARTNER'
  | 'RELIGION';

export type QuestionType =
  | 'singleChoice'
  | 'multiChoice'
  | 'multiSelect'
  | 'openText'
  | 'scale'
  | 'iconChoice'
  | 'budgetAllocation'
  | 'ranking'
  | 'scenario'
  | 'multiSelectWithOther';

export type QuestionDepth = 'BASIC' | 'ADVANCED' | 'EXPERT';

export type AnswerValue =
  | string
  | number
  | string[]
  | number[]
  | Record<string, number>
  | undefined;

export type AnswerStatus = 'COMPLETE' | 'PARTIAL' | 'SKIPPED';

// Interface definitions
export interface Option {
  value: string;
  text: string;
  icon?: React.ReactNode; // Icon associated with a specific choice/option
  description?: string;
  allowFreeText?: boolean;
  placeholder?:string;
}

export interface BudgetCategory {
  label: string;
  icon?: React.ReactNode; // Icon associated with a specific budget category
  description?: string;
  min?: number;
  max?: number;
}

export interface QuestionMetadata {
  helpText?: string;
  estimatedTime?: number; // בדקות
  tags?: string[];
  // Icon is NOT part of metadata
}

export interface Question {
  worldId: string;
  id: string;
  category: string;
  subcategory?: string;
  question: string;
  type: QuestionType;
  depth: QuestionDepth;
  isRequired?: boolean;
  options?: Option[];
  placeholder?: string;
  minLength?: number;
  maxLength?: number;
  minSelections?: number;
  maxSelections?: number;
  description?: string;
  min?: number; // for scale
  max?: number; // for scale
  step?: number; // for scale
  categories?: BudgetCategory[]; // for budgetAllocation
  totalPoints?: number; // for budgetAllocation
  metadata?: QuestionMetadata;
  items?: Option[]; // for ranking questions
  icon?: React.ReactNode; // <<< --- הוספנו כאן: אייקון אופציונלי לשאלה עצמה
}

// Answer-related interfaces
export interface QuestionnaireAnswer {
  questionId: string;
  worldId: WorldId;
  value: AnswerValue;
  answeredAt: string;
}

export interface Answer extends QuestionnaireAnswer {
  status?: AnswerStatus;
}

// Component Props interfaces
export interface WorldComponentProps {
  onAnswer: (questionId: string, value: AnswerValue) => void;
  onComplete: () => void;
  onBack: () => void;
  answers: QuestionnaireAnswer[];
  isCompleted?: boolean;
  language?: string;
}

export interface AnswerInputProps {
  question: Question;
  value?: AnswerValue;
  onChange?: (value: AnswerValue) => void;
  onClear?: () => void;
  language?: string;
  showValidation?: boolean;
  className?: string;
}

export interface QuestionnaireLayoutProps {
  children: React.ReactNode;
  currentWorld: WorldId;
  userTrack: UserTrack;
  completedWorlds: WorldId[];
  onWorldChange: (worldId: WorldId) => void;
  onExit?: () => void;
  language?: string;
  onSaveProgress?: () => Promise<void>;
}

// Data storage interfaces
export interface QuestionnaireSubmission {
  userId: string;
  answers: QuestionnaireAnswer[];
  worldsCompleted: WorldId[];
  completed: boolean;
  startedAt: string;
  completedAt?: string;
  userTrack?: UserTrack;
}

export type UserTrack =
  | 'SECULAR'
  | 'TRADITIONAL'
  | 'RELIGIOUS'
  | 'ORTHODOX';

==================================================
Contents of C:\Users\eytan\Desktop\שידוכים\shidduch-system\src\components\questionnaire\worlds\PartnerWorld.tsx:
==================================================
// src/components/questionnaire/worlds/PartnerWorld.tsx
import React, { useState, useEffect } from "react";
import WorldIntro from "../common/WorldIntro";
import QuestionCard from "../common/QuestionCard";
import AnswerInput from "../common/AnswerInput";
import { Button } from "@/components/ui/button";
import { Progress } from "@/components/ui/progress";
import {
  ArrowLeft,
  ArrowRight,
  List,
  CheckCircle,
  AlertCircle,
} from "lucide-react";
import { cn } from "@/lib/utils";
import type {
  WorldComponentProps,
  AnswerValue,
  Question,
} from "../types/types";
// *** שינוי: ייבוא מהקובץ המאוחד החדש ***
import { partnerQuestions } from "../questions/partner/partnerQuestions";
import {
  Sheet,
  SheetContent,
  SheetDescription,
  SheetHeader,
  SheetTitle,
  SheetTrigger,
} from "@/components/ui/sheet";
import { ScrollArea } from "@/components/ui/scroll-area";

// *** שינוי: שימוש במשתנה החדש ***
const allQuestions = partnerQuestions;

export default function PartnerWorld({
  onAnswer,
  onComplete,
  onBack,
  answers,
  language = "he",
}: WorldComponentProps) {
  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);
  const [isIntroComplete, setIsIntroComplete] = useState(false);
  const [validationErrors, setValidationErrors] = useState<
    Record<string, string>
  >({});
  const [animateDirection, setAnimateDirection] = useState<
    "left" | "right" | null
  >(null);

  // אפקט אנימציה (ללא שינוי)
  useEffect(() => {
    const timer = setTimeout(() => {
      setAnimateDirection(null);
    }, 500);
    return () => clearTimeout(timer);
  }, [currentQuestionIndex]);

  // מציאת תשובה (ללא שינוי)
  const findAnswer = (questionId: string) => {
    return answers.find((a) => a.questionId === questionId)?.value;
  };

  // ולידציה (אותה לוגיקה כמו בעולמות הקודמים, מטפלת בכל הסוגים)
  const validateAnswer = (
    question: Question,
    value: AnswerValue
  ): string | null => {
    const isValueEmpty =
      value === undefined ||
      value === null ||
      (typeof value === "string" && value.trim() === "") ||
      (Array.isArray(value) && value.length === 0) ||
      (typeof value === 'object' && !Array.isArray(value) && Object.keys(value || {}).length === 0); // בדיקה ל-budgetAllocation ריק

    if (question.isRequired && isValueEmpty) {
        return "נדרשת תשובה לשאלה זו";
    }
    if (!question.isRequired && isValueEmpty) {
        return null;
    }

    switch (question.type) {
      case "openText": {
        const textValue = value as string;
        const trimmedLength = textValue?.trim().length || 0;
        if (question.minLength && trimmedLength < question.minLength && question.isRequired) {
          return `התשובה חייבת להכיל לפחות ${question.minLength} תווים`;
        }
        if (question.maxLength && trimmedLength > question.maxLength) {
          return `התשובה לא יכולה להכיל יותר מ-${question.maxLength} תווים`;
        }
        break;
      }
      case "multiSelect":
      case "multiChoice":
      case "multiSelectWithOther": {
        const selectedValues = value as string[];
        if (question.minSelections && selectedValues.length < question.minSelections) {
          return `יש לבחור לפחות ${question.minSelections} אפשרויות`;
        }
        if (question.maxSelections && selectedValues.length > question.maxSelections) {
          return `ניתן לבחור עד ${question.maxSelections} אפשרויות`;
        }
        break;
      }
      case "budgetAllocation": {
        const allocationValue = value as Record<string, number>;
        if (allocationValue) {
            const totalAllocated = Object.values(allocationValue).reduce((sum, val) => sum + (val || 0), 0);
            if (question.totalPoints && totalAllocated !== question.totalPoints && question.isRequired) {
                 return `יש להקצות בדיוק ${question.totalPoints} נקודות.`;
            }
        }
        break;
      }
    }
    return null;
  };


  // מעבר לשאלה הבאה (ללא שינוי)
  const handleNext = () => {
    const currentQuestion = allQuestions[currentQuestionIndex];
    const value = findAnswer(currentQuestion.id);
    const error = validateAnswer(currentQuestion, value);

    if (error && currentQuestion.isRequired) {
      setValidationErrors({ ...validationErrors, [currentQuestion.id]: error });
      return;
    }
     setValidationErrors((prev) => {
       const newErrors = { ...prev };
       delete newErrors[currentQuestion.id];
       return newErrors;
     });

    if (currentQuestionIndex < allQuestions.length - 1) {
      setAnimateDirection("left");
      setCurrentQuestionIndex((prev) => prev + 1);
    } else {
      onComplete();
    }
  };

  // חזרה לשאלה קודמת (ללא שינוי)
  const handlePrevious = () => {
    if (currentQuestionIndex > 0) {
      setAnimateDirection("right");
      setCurrentQuestionIndex((prev) => prev - 1);
    } else {
      onBack();
    }
  };

  // ניקוי תשובה (ללא שינוי)
  const handleClearAnswer = () => {
    const currentQuestion = allQuestions[currentQuestionIndex];
    let emptyValue: AnswerValue;

    switch (currentQuestion.type) {
      case "multiChoice":
      case "multiSelect":
      case "multiSelectWithOther":
        emptyValue = [];
        break;
      case "budgetAllocation":
        emptyValue = {};
        break;
      case "scale":
        emptyValue = undefined;
        break;
      default:
        emptyValue = "";
    }

    onAnswer(currentQuestion.id, emptyValue);
    setValidationErrors({
      ...validationErrors,
      [currentQuestion.id]: "",
    });
  };

  // מבוא לעולם (עם פרטים מעודכנים)
  if (!isIntroComplete) {
    // *** עדכון פרטי המבוא ***
    return (
      <WorldIntro
        worldId="PARTNER"
        title="עולם הפרטנר"
        description="בואו נגדיר יחד מהן התכונות, הערכים והציפיות החשובים לך ביותר בבן/בת הזוג האידיאלי/ת" // תיאור מעודכן
        estimatedTime={45} // הערכה מעודכנת (הרבה שאלות)
        totalQuestions={allQuestions.length}
        requiredQuestions={allQuestions.filter((q) => q.isRequired).length}
        depths={["BASIC", "ADVANCED"]} // עדכון רמות עומק
        onStart={() => setIsIntroComplete(true)}
      />
    );
  }

  // טיפול בשגיאת טעינה (ללא שינוי)
  if (allQuestions.length === 0) {
    return (
      <div className="p-4 bg-red-50 rounded-lg border border-red-300 text-red-800">
        <h3 className="font-bold">שגיאה בטעינת השאלות</h3>
        <p>לא ניתן לטעון את השאלות לעולם זה. אנא נסה לרענן את הדף.</p>
        <Button className="mt-4" variant="outline" onClick={onBack}>
          חזרה למפה
        </Button>
      </div>
    );
  }

  // הגדרת השאלה הנוכחית (ללא שינוי)
  const currentQuestion = allQuestions[currentQuestionIndex];
  if (!currentQuestion) {
     console.error("Current question is undefined at index:", currentQuestionIndex);
     return <div>שגיאה בטעינת השאלה הנוכחית.</div>;
   }
  const progress = ((currentQuestionIndex + 1) / allQuestions.length) * 100;
  const currentValue = findAnswer(currentQuestion.id);

  // חישוב התקדמות (ללא שינוי)
  const answeredQuestionsCount = allQuestions.filter((q) =>
    answers.some(
      (a) =>
        a.questionId === q.id &&
        a.value !== undefined && a.value !== null &&
        (typeof a.value === 'string' ? a.value.trim() !== '' : true) &&
        (Array.isArray(a.value) ? a.value.length > 0 : true) &&
        (typeof a.value === 'object' && !Array.isArray(a.value) ? Object.keys(a.value || {}).length > 0 : true)
    )
  ).length;
  const completionPercentage = Math.round(
    (answeredQuestionsCount / allQuestions.length) * 100
  );

  // קומפוננטת רשימת שאלות (אותו דבר כמו בעולמות הקודמים)
  const QuestionsList = ({ closeSheet }: { closeSheet?: () => void }) => (
    <ScrollArea className="h-[60vh]">
      <div className="space-y-2 p-2">
        {allQuestions.map((q, index) => {
          const answer = findAnswer(q.id);
          const isAnswered =
             answer !== undefined && answer !== null &&
             (typeof answer === 'string' ? answer.trim() !== '' : true) &&
             (Array.isArray(answer) ? answer.length > 0 : true) &&
             (typeof answer === 'object' && !Array.isArray(answer) ? Object.keys(answer || {}).length > 0 : true);
          const isCurrent = index === currentQuestionIndex;

          return (
            <Button
              key={q.id}
              variant={isCurrent ? "default" : "outline"}
              size="sm"
              className={cn(
                "w-full justify-start text-start h-auto py-2",
                isCurrent ? "bg-blue-600 text-white" : "",
                isAnswered && !isCurrent ? "border-green-500" : "",
                q.isRequired && !isAnswered ? "border-red-300" : ""
              )}
              onClick={() => {
                   setCurrentQuestionIndex(index);
                   closeSheet?.();
               }}
            >
              <div className="flex items-center w-full">
                <span className="w-6 h-6 rounded-full bg-gray-100 text-gray-700 flex items-center justify-center text-xs flex-shrink-0 mr-2">
                  {index + 1}
                </span>
                <div className="flex-1 text-xs" style={{ whiteSpace: 'normal' }}>
                  {q.question}
                </div>
                <div className="ml-2 flex-shrink-0">
                  {isAnswered ? (
                    <CheckCircle className="h-4 w-4 text-green-500" />
                  ) : q.isRequired ? (
                    <AlertCircle className="h-4 w-4 text-red-500" />
                  ) : null}
                </div>
              </div>
            </Button>
          );
        })}
      </div>
    </ScrollArea>
  );

  // רנדור הקומפוננטה (אותו מבנה כמו בעולמות הקודמים)
  return (
    <div className="max-w-2xl mx-auto p-2 sm:p-4 space-y-6">
      {/* סרגל ניווט עליון */}
      <div className="bg-white p-3 rounded-lg shadow-sm border space-y-2">
        <div className="flex items-center justify-between">
          <div>
            <h2 className="text-lg font-medium">עולם הפרטנר</h2>
            <div className="text-sm text-gray-500">
              שאלה {currentQuestionIndex + 1} מתוך {allQuestions.length}
            </div>
          </div>
          <div className="flex items-center gap-2">
            <div className="hidden sm:flex items-center text-sm text-gray-600">
              <CheckCircle className="h-4 w-4 text-green-500 mr-1" />
              <span>{completionPercentage}% הושלם</span>
            </div>
            <Sheet>
              <SheetTrigger asChild>
                <Button variant="outline" size="sm" className="gap-1">
                  <List className="h-4 w-4" />
                  <span className="hidden sm:inline">רשימת שאלות</span>
                </Button>
              </SheetTrigger>
              <SheetContent side={language === "he" ? "left" : "right"} className="w-[300px] sm:w-[400px]">
                <SheetHeader>
                  <SheetTitle>כל השאלות בעולם הפרטנר</SheetTitle>
                  <SheetDescription>
                    לחץ על שאלה כדי לעבור אליה ישירות.
                    <div className="mt-2 flex gap-2 text-xs">
                      <div className="flex items-center"><CheckCircle className="h-3 w-3 text-green-500 mr-1" /><span>הושלם</span></div>
                      <div className="flex items-center"><AlertCircle className="h-3 w-3 text-red-500 mr-1" /><span>שאלת חובה</span></div>
                    </div>
                  </SheetDescription>
                </SheetHeader>
                <div className="mt-6"><QuestionsList closeSheet={() => {}} /></div>
              </SheetContent>
            </Sheet>
          </div>
        </div>
        <Progress value={progress} className="h-2" />
      </div>

      {/* כרטיס שאלה */}
      <div
        className={cn(
          "transition-all duration-300 transform",
          animateDirection === "left" && "translate-x-4 opacity-0",
          animateDirection === "right" && "-translate-x-4 opacity-0"
        )}
      >
        <QuestionCard
          question={currentQuestion}
          depth={currentQuestion.depth}
          isRequired={currentQuestion.isRequired}
          validationError={validationErrors[currentQuestion.id]}
          language={language}
        >
          <AnswerInput
            question={currentQuestion}
            value={currentValue}
            onChange={(value) => {
              setValidationErrors({ ...validationErrors, [currentQuestion.id]: "" });
              onAnswer(currentQuestion.id, value);
            }}
            onClear={handleClearAnswer}
            language={language}
            showValidation={!!validationErrors[currentQuestion.id]}
          />
        </QuestionCard>
      </div>

      {/* כפתורי ניווט תחתונים */}
      <div className="flex justify-between pt-4 border-t">
        <Button
          variant="outline"
          onClick={handlePrevious}
          disabled={currentQuestionIndex === 0}
          className={currentQuestionIndex === 0 ? "opacity-50" : ""}
        >
          <ArrowRight className="w-4 h-4 ml-2" />
          {currentQuestionIndex === 0 ? "חזור למפה" : "שאלה קודמת"}
        </Button>

        {currentQuestionIndex < allQuestions.length - 1 ? (
          <Button
            variant="default"
            onClick={handleNext}
            className="bg-blue-600 hover:bg-blue-700"
          >
            שאלה הבאה
            <ArrowLeft className="w-4 h-4 mr-2" />
          </Button>
        ) : (
          <Button
            onClick={handleNext}
            className="bg-green-600 hover:bg-green-700"
          >
            סיים עולם זה
            <CheckCircle className="w-4 h-4 mr-2" />
          </Button>
        )}
      </div>
    </div>
  );
}

==================================================
Contents of C:\Users\eytan\Desktop\שידוכים\shidduch-system\src\components\questionnaire\worlds\PersonalityWorld.tsx:
==================================================
// src/components/questionnaire/worlds/PersonalityWorld.tsx
import React, { useState, useEffect } from "react";
import WorldIntro from "../common/WorldIntro";
import QuestionCard from "../common/QuestionCard";
import AnswerInput from "../common/AnswerInput";
import { Button } from "@/components/ui/button";
import { Progress } from "@/components/ui/progress";
import {
  ArrowLeft,
  ArrowRight,
  List,
  CheckCircle,
  AlertCircle,
} from "lucide-react";
import { cn } from "@/lib/utils";
import type {
  WorldComponentProps,
  AnswerValue,
  Question,
} from "../types/types";
// *** שינוי: ייבוא מהקובץ המאוחד ***
import { personalityQuestions } from "../questions/personality/personalityQuestions";
import {
  Sheet,
  SheetContent,
  SheetDescription,
  SheetHeader,
  SheetTitle,
  SheetTrigger,
} from "@/components/ui/sheet";
import { ScrollArea } from "@/components/ui/scroll-area";

// *** שינוי: שימוש במשתנה החדש ***
const allQuestions = personalityQuestions;

export default function PersonalityWorld({
  onAnswer,
  onComplete,
  onBack,
  answers,
  language = "he",
}: WorldComponentProps) {
  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);
  const [isIntroComplete, setIsIntroComplete] = useState(false);
  const [validationErrors, setValidationErrors] = useState<
    Record<string, string>
  >({});
  const [animateDirection, setAnimateDirection] = useState<
    "left" | "right" | null
  >(null);

  // אפקט אנימציה (ללא שינוי)
  useEffect(() => {
    const timer = setTimeout(() => {
      setAnimateDirection(null);
    }, 500);
    return () => clearTimeout(timer);
  }, [currentQuestionIndex]);

  // מציאת תשובה (ללא שינוי)
  const findAnswer = (questionId: string) => {
    return answers.find((a) => a.questionId === questionId)?.value;
  };

  // ולידציה (אותה לוגיקה מעודכנת כמו ב-ValuesWorld, כולל טיפול ב-budgetAllocation אם יתווסף)
  const validateAnswer = (
    question: Question,
    value: AnswerValue
  ): string | null => {
    const isValueEmpty =
      value === undefined ||
      value === null ||
      (typeof value === "string" && value.trim() === "") ||
      (Array.isArray(value) && value.length === 0);
    if (question.isRequired && isValueEmpty) {
       if(question.type === 'budgetAllocation' && typeof value === 'object' && Object.keys(value || {}).length === 0) {
           return "נדרשת תשובה לשאלה זו";
       } else if (question.type !== 'budgetAllocation') {
           return "נדרשת תשובה לשאלה זו";
       }
    }
    if (!question.isRequired && isValueEmpty) {
        return null;
    }

    switch (question.type) {
      case "openText": {
        const textValue = value as string;
        const trimmedLength = textValue?.trim().length || 0;
        if (question.minLength && trimmedLength < question.minLength && question.isRequired) {
          return `התשובה חייבת להכיל לפחות ${question.minLength} תווים`;
        }
        if (question.maxLength && trimmedLength > question.maxLength) {
          return `התשובה לא יכולה להכיל יותר מ-${question.maxLength} תווים`;
        }
        break;
      }
      case "multiSelect":
      case "multiChoice":
      case "multiSelectWithOther": { // הוספנו טיפול ב-WithOther
        const selectedValues = value as string[];
        if (question.minSelections && selectedValues.length < question.minSelections) {
          return `יש לבחור לפחות ${question.minSelections} אפשרויות`;
        }
        if (question.maxSelections && selectedValues.length > question.maxSelections) {
          return `ניתן לבחור עד ${question.maxSelections} אפשרויות`;
        }
        break;
      }
      case "budgetAllocation": { // נשאר למקרה שנוסיף בעתיד
        const allocationValue = value as Record<string, number>;
        if (allocationValue) {
            const totalAllocated = Object.values(allocationValue).reduce((sum, val) => sum + (val || 0), 0);
            if (question.totalPoints && totalAllocated !== question.totalPoints && question.isRequired) {
                 return `יש להקצות בדיוק ${question.totalPoints} נקודות.`; // הודעה כללית יותר
            }
        }
        break;
      }
      // אין צורך בטיפול מיוחד ל-scale, iconChoice, singleChoice מבחינת תוכן
    }
    return null;
  };

  // מעבר לשאלה הבאה (ללא שינוי)
  const handleNext = () => {
    const currentQuestion = allQuestions[currentQuestionIndex];
    const value = findAnswer(currentQuestion.id);
    const error = validateAnswer(currentQuestion, value);

    if (error && currentQuestion.isRequired) {
      setValidationErrors({ ...validationErrors, [currentQuestion.id]: error });
      return;
    }
     setValidationErrors((prev) => {
       const newErrors = { ...prev };
       delete newErrors[currentQuestion.id];
       return newErrors;
     });

    if (currentQuestionIndex < allQuestions.length - 1) {
      setAnimateDirection("left");
      setCurrentQuestionIndex((prev) => prev + 1);
    } else {
      onComplete();
    }
  };

  // חזרה לשאלה קודמת (ללא שינוי)
  const handlePrevious = () => {
    if (currentQuestionIndex > 0) {
      setAnimateDirection("right");
      setCurrentQuestionIndex((prev) => prev - 1);
    } else {
      onBack();
    }
  };

  // ניקוי תשובה (ללא שינוי מהותי, מטפל בערך ריק של סוגים שונים)
  const handleClearAnswer = () => {
    const currentQuestion = allQuestions[currentQuestionIndex];
    let emptyValue: AnswerValue;

    switch (currentQuestion.type) {
      case "multiChoice":
      case "multiSelect":
      case "multiSelectWithOther":
        emptyValue = [];
        break;
      case "budgetAllocation":
        emptyValue = {};
        break;
      case "scale":
        emptyValue = undefined; // או min אם מוגדר
        break;
      default:
        emptyValue = "";
    }

    onAnswer(currentQuestion.id, emptyValue);
    setValidationErrors({
      ...validationErrors,
      [currentQuestion.id]: "",
    });
  };

  // מבוא לעולם (עם פרטים מעודכנים)
  if (!isIntroComplete) {
    return (
      <WorldIntro
        worldId="PERSONALITY"
        title="עולם האישיות" // שם קצר יותר
        description="בואו נגלה יחד את התכונות, הערכים, סגנון החיים והשאיפות הייחודיים שלך" // תיאור מעודכן
        estimatedTime={40} // הערכת זמן מעודכנת (יותר שאלות עומק)
        totalQuestions={allQuestions.length} // מספר שאלות מעודכן
        requiredQuestions={allQuestions.filter((q) => q.isRequired).length} // ספירה מעודכנת
        depths={["BASIC", "ADVANCED"]} // עדכון רמות עומק (אין EXPERT כרגע)
        onStart={() => setIsIntroComplete(true)}
      />
    );
  }

  // טיפול בשגיאת טעינה (ללא שינוי)
  if (allQuestions.length === 0) {
    return (
      <div className="p-4 bg-red-50 rounded-lg border border-red-300 text-red-800">
        <h3 className="font-bold">שגיאה בטעינת השאלות</h3>
        <p>לא ניתן לטעון את השאלות לעולם זה. אנא נסה לרענן את הדף.</p>
        <Button className="mt-4" variant="outline" onClick={onBack}>
          חזרה למפה
        </Button>
      </div>
    );
  }

  // הגדרת השאלה הנוכחית (ללא שינוי)
  const currentQuestion = allQuestions[currentQuestionIndex];
  if (!currentQuestion) {
     console.error("Current question is undefined at index:", currentQuestionIndex);
     return <div>שגיאה בטעינת השאלה הנוכחית.</div>;
   }
  const progress = ((currentQuestionIndex + 1) / allQuestions.length) * 100;
  const currentValue = findAnswer(currentQuestion.id);

  // חישוב התקדמות (ללא שינוי)
  const answeredQuestionsCount = allQuestions.filter((q) =>
    answers.some(
      (a) =>
        a.questionId === q.id &&
        a.value !== undefined && a.value !== null &&
        (typeof a.value === 'string' ? a.value.trim() !== '' : true) &&
        (Array.isArray(a.value) ? a.value.length > 0 : true) &&
        (typeof a.value === 'object' && !Array.isArray(a.value) ? Object.keys(a.value || {}).length > 0 : true)
    )
  ).length;
  const completionPercentage = Math.round(
    (answeredQuestionsCount / allQuestions.length) * 100
  );

  // קומפוננטת רשימת שאלות (אותו דבר כמו בעולמות הקודמים)
  const QuestionsList = ({ closeSheet }: { closeSheet?: () => void }) => (
    <ScrollArea className="h-[60vh]">
      <div className="space-y-2 p-2">
        {allQuestions.map((q, index) => {
          const answer = findAnswer(q.id);
          const isAnswered =
             answer !== undefined && answer !== null &&
             (typeof answer === 'string' ? answer.trim() !== '' : true) &&
             (Array.isArray(answer) ? answer.length > 0 : true) &&
             (typeof answer === 'object' && !Array.isArray(answer) ? Object.keys(answer || {}).length > 0 : true);
          const isCurrent = index === currentQuestionIndex;

          return (
            <Button
              key={q.id}
              variant={isCurrent ? "default" : "outline"}
              size="sm"
              className={cn(
                "w-full justify-start text-start h-auto py-2",
                isCurrent ? "bg-blue-600 text-white" : "",
                isAnswered && !isCurrent ? "border-green-500" : "",
                q.isRequired && !isAnswered ? "border-red-300" : ""
              )}
              onClick={() => {
                   setCurrentQuestionIndex(index);
                   closeSheet?.();
               }}
            >
              <div className="flex items-center w-full">
                <span className="w-6 h-6 rounded-full bg-gray-100 text-gray-700 flex items-center justify-center text-xs flex-shrink-0 mr-2">
                  {index + 1}
                </span>
                <div className="flex-1 text-xs" style={{ whiteSpace: 'normal' }}>
                  {q.question}
                </div>
                <div className="ml-2 flex-shrink-0">
                  {isAnswered ? (
                    <CheckCircle className="h-4 w-4 text-green-500" />
                  ) : q.isRequired ? (
                    <AlertCircle className="h-4 w-4 text-red-500" />
                  ) : null}
                </div>
              </div>
            </Button>
          );
        })}
      </div>
    </ScrollArea>
  );

  // רנדור הקומפוננטה (אותו מבנה כמו בעולמות הקודמים)
  return (
    <div className="max-w-2xl mx-auto p-2 sm:p-4 space-y-6">
      {/* סרגל ניווט עליון */}
      <div className="bg-white p-3 rounded-lg shadow-sm border space-y-2">
        <div className="flex items-center justify-between">
          <div>
            <h2 className="text-lg font-medium">עולם האישיות</h2>
            <div className="text-sm text-gray-500">
              שאלה {currentQuestionIndex + 1} מתוך {allQuestions.length}
            </div>
          </div>
          <div className="flex items-center gap-2">
            <div className="hidden sm:flex items-center text-sm text-gray-600">
              <CheckCircle className="h-4 w-4 text-green-500 mr-1" />
              <span>{completionPercentage}% הושלם</span>
            </div>
            <Sheet>
              <SheetTrigger asChild>
                <Button variant="outline" size="sm" className="gap-1">
                  <List className="h-4 w-4" />
                  <span className="hidden sm:inline">רשימת שאלות</span>
                </Button>
              </SheetTrigger>
              <SheetContent side={language === "he" ? "left" : "right"} className="w-[300px] sm:w-[400px]">
                <SheetHeader>
                  <SheetTitle>כל השאלות בעולם האישיות</SheetTitle>
                  <SheetDescription>
                    לחץ על שאלה כדי לעבור אליה ישירות.
                    <div className="mt-2 flex gap-2 text-xs">
                      <div className="flex items-center"><CheckCircle className="h-3 w-3 text-green-500 mr-1" /><span>הושלם</span></div>
                      <div className="flex items-center"><AlertCircle className="h-3 w-3 text-red-500 mr-1" /><span>שאלת חובה</span></div>
                    </div>
                  </SheetDescription>
                </SheetHeader>
                <div className="mt-6"><QuestionsList closeSheet={() => {}} /></div>
              </SheetContent>
            </Sheet>
          </div>
        </div>
        <Progress value={progress} className="h-2" />
      </div>

      {/* כרטיס שאלה */}
      <div
        className={cn(
          "transition-all duration-300 transform",
          animateDirection === "left" && "translate-x-4 opacity-0",
          animateDirection === "right" && "-translate-x-4 opacity-0"
        )}
      >
        <QuestionCard
          question={currentQuestion}
          depth={currentQuestion.depth}
          isRequired={currentQuestion.isRequired}
          validationError={validationErrors[currentQuestion.id]}
          language={language}
          // onNext ו-onPrevious יטופלו בכפתורים התחתונים
        >
          <AnswerInput
            question={currentQuestion}
            value={currentValue}
            onChange={(value) => {
              setValidationErrors({ ...validationErrors, [currentQuestion.id]: "" });
              onAnswer(currentQuestion.id, value);
            }}
            onClear={handleClearAnswer}
            language={language}
            showValidation={!!validationErrors[currentQuestion.id]}
          />
        </QuestionCard>
      </div>

      {/* כפתורי ניווט תחתונים */}
      <div className="flex justify-between pt-4 border-t">
        <Button
          variant="outline"
          onClick={handlePrevious}
          // disabled={currentQuestionIndex === 0} // נאפשר חזרה למפה תמיד
          // className={currentQuestionIndex === 0 ? "opacity-50" : ""}
        >
          <ArrowRight className="w-4 h-4 ml-2" />
          {currentQuestionIndex === 0 ? "חזור למפה" : "שאלה קודמת"}
        </Button>

        {currentQuestionIndex < allQuestions.length - 1 ? (
          <Button
            variant="default"
            onClick={handleNext}
            className="bg-blue-600 hover:bg-blue-700"
          >
            שאלה הבאה
            <ArrowLeft className="w-4 h-4 mr-2" />
          </Button>
        ) : (
          <Button
            onClick={handleNext}
            className="bg-green-600 hover:bg-green-700"
          >
            סיים עולם זה
            <CheckCircle className="w-4 h-4 mr-2" />
          </Button>
        )}
      </div>
    </div>
  );
}

==================================================
Contents of C:\Users\eytan\Desktop\שידוכים\shidduch-system\src\components\questionnaire\worlds\RelationshipWorld.tsx:
==================================================
// src/components/questionnaire/worlds/RelationshipWorld.tsx
import React, { useState, useEffect } from "react";
import WorldIntro from "../common/WorldIntro";
import QuestionCard from "../common/QuestionCard";
import AnswerInput from "../common/AnswerInput";
import { Button } from "@/components/ui/button";
import { Progress } from "@/components/ui/progress";
import {
  ArrowLeft,
  ArrowRight,
  List,
  CheckCircle,
  AlertCircle,
} from "lucide-react";
import { cn } from "@/lib/utils";
import type {
  WorldComponentProps,
  AnswerValue,
  Question,
} from "../types/types";
// *** שינוי: ייבוא מהקובץ המאוחד ***
import { relationshipQuestions } from "../questions/relationship/relationshipQuestions";
import {
  Sheet,
  SheetContent,
  SheetDescription,
  SheetHeader,
  SheetTitle,
  SheetTrigger,
} from "@/components/ui/sheet";
import { ScrollArea } from "@/components/ui/scroll-area";

// *** שינוי: שימוש במשתנה החדש ***
const allQuestions = relationshipQuestions;

export default function RelationshipWorld({
  onAnswer,
  onComplete,
  onBack,
  answers,
  language = "he",
}: WorldComponentProps) {
  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);
  const [isIntroComplete, setIsIntroComplete] = useState(false);
  const [validationErrors, setValidationErrors] = useState<
    Record<string, string>
  >({});
  const [animateDirection, setAnimateDirection] = useState<
    "left" | "right" | null
  >(null);

  // (אותה לוגיקה של useEffect, findAnswer, validateAnswer כמו ב-ValuesWorld)
  useEffect(() => {
    const timer = setTimeout(() => {
      setAnimateDirection(null);
    }, 500);
    return () => clearTimeout(timer);
  }, [currentQuestionIndex]);

  const findAnswer = (questionId: string) => {
    return answers.find((a) => a.questionId === questionId)?.value;
  };

  const validateAnswer = (
    question: Question,
    value: AnswerValue
  ): string | null => {
    const isValueEmpty =
      value === undefined ||
      value === null ||
      (typeof value === "string" && value.trim() === "") ||
      (Array.isArray(value) && value.length === 0);
    if (question.isRequired && isValueEmpty) {
      if (
        question.type === "budgetAllocation" &&
        typeof value === "object" &&
        Object.keys(value || {}).length === 0
      ) {
        return "נדרשת תשובה לשאלה זו";
      } else if (question.type !== "budgetAllocation") {
        return "נדרשת תשובה לשאלה זו";
      }
    }
    if (!question.isRequired && isValueEmpty) {
      return null;
    }

    switch (question.type) {
      case "openText": {
        const textValue = value as string;
        const trimmedLength = textValue?.trim().length || 0;
        if (
          question.minLength &&
          trimmedLength < question.minLength &&
          question.isRequired
        ) {
          return `התשובה חייבת להכיל לפחות ${question.minLength} תווים`;
        }
        if (question.maxLength && trimmedLength > question.maxLength) {
          return `התשובה לא יכולה להכיל יותר מ-${question.maxLength} תווים`;
        }
        break;
      }
      case "multiSelect":
      case "multiChoice": {
        const selectedValues = value as string[];
        if (
          question.minSelections &&
          selectedValues.length < question.minSelections
        ) {
          return `יש לבחור לפחות ${question.minSelections} אפשרויות`;
        }
        if (
          question.maxSelections &&
          selectedValues.length > question.maxSelections
        ) {
          return `ניתן לבחור עד ${question.maxSelections} אפשרויות`;
        }
        break;
      }
      case "budgetAllocation": {
        const allocationValue = value as Record<string, number>;
        if (allocationValue) {
          const totalAllocated = Object.values(allocationValue).reduce(
            (sum, val) => sum + (val || 0),
            0
          );
          if (
            question.totalPoints &&
            totalAllocated !== question.totalPoints &&
            question.isRequired
          ) {
            if (totalAllocated < question.totalPoints) {
              return `יש להקצות בדיוק ${question.totalPoints} נקודות. חסרות ${
                question.totalPoints - totalAllocated
              } נקודות.`;
            } else {
              return `יש להקצות בדיוק ${
                question.totalPoints
              } נקודות. יש עודף של ${
                totalAllocated - question.totalPoints
              } נקודות.`;
            }
          }
        }
        break;
      }
    }
    return null;
  };

  const handleNext = () => {
    const currentQuestion = allQuestions[currentQuestionIndex];
    const value = findAnswer(currentQuestion.id);
    const error = validateAnswer(currentQuestion, value);

    if (error && currentQuestion.isRequired) {
      setValidationErrors({ ...validationErrors, [currentQuestion.id]: error });
      return;
    }
    setValidationErrors((prev) => {
      const newErrors = { ...prev };
      delete newErrors[currentQuestion.id];
      return newErrors;
    });

    if (currentQuestionIndex < allQuestions.length - 1) {
      setAnimateDirection("left");
      setCurrentQuestionIndex((prev) => prev + 1);
    } else {
      onComplete();
    }
  };

  const handlePrevious = () => {
    if (currentQuestionIndex > 0) {
      setAnimateDirection("right");
      setCurrentQuestionIndex((prev) => prev - 1);
    } else {
      onBack();
    }
  };

  const handleClearAnswer = () => {
    const currentQuestion = allQuestions[currentQuestionIndex];
    let emptyValue: AnswerValue;

    switch (currentQuestion.type) {
      case "multiChoice":
      case "multiSelect":
      case "multiSelectWithOther":
        emptyValue = [];
        break;
      case "budgetAllocation":
        emptyValue = {};
        break;
      case "scale":
        emptyValue = undefined; // או min אם מוגדר
        break;
      default:
        emptyValue = "";
    }

    onAnswer(currentQuestion.id, emptyValue);
    setValidationErrors({
      ...validationErrors,
      [currentQuestion.id]: "",
    });
  };

  if (!isIntroComplete) {
    // *** עדכון פרטי המבוא ***
    return (
      <WorldIntro
        worldId="RELATIONSHIP"
        title="עולם הזוגיות" // שם קצר יותר
        description="בואו נבין יחד מה חשוב לך בקשר זוגי, בתקשורת, בשותפות ובחזון המשפחתי" // תיאור מעודכן
        estimatedTime={40} // הערכה מעודכנת
        totalQuestions={allQuestions.length}
        requiredQuestions={allQuestions.filter((q) => q.isRequired).length}
        depths={["BASIC", "ADVANCED"]} // עדכון רמות עומק
        onStart={() => setIsIntroComplete(true)}
      />
    );
  }

  if (allQuestions.length === 0) {
    return (
      <div className="p-4 bg-red-50 rounded-lg border border-red-300 text-red-800">
        <h3 className="font-bold">שגיאה בטעינת השאלות</h3>
        <p>לא ניתן לטעון את השאלות לעולם זה. אנא נסה לרענן את הדף.</p>
        <Button className="mt-4" variant="outline" onClick={onBack}>
          חזרה למפה
        </Button>
      </div>
    );
  }

  const currentQuestion = allQuestions[currentQuestionIndex];
  if (!currentQuestion) {
    console.error(
      "Current question is undefined at index:",
      currentQuestionIndex
    );
    return <div>שגיאה בטעינת השאלה הנוכחית.</div>;
  }

  const progress = ((currentQuestionIndex + 1) / allQuestions.length) * 100;
  const currentValue = findAnswer(currentQuestion.id);

  const answeredQuestionsCount = allQuestions.filter((q) =>
    answers.some(
      (a) =>
        a.questionId === q.id &&
        a.value !== undefined &&
        a.value !== null &&
        (typeof a.value === "string" ? a.value.trim() !== "" : true) &&
        (Array.isArray(a.value) ? a.value.length > 0 : true) &&
        (typeof a.value === "object" && !Array.isArray(a.value)
          ? Object.keys(a.value || {}).length > 0
          : true)
    )
  ).length;

  const completionPercentage = Math.round(
    (answeredQuestionsCount / allQuestions.length) * 100
  );

  // *** הוספת הקומפוננטה לרשימת השאלות ב-Sheet ***
  const QuestionsList = ({ closeSheet }: { closeSheet?: () => void }) => (
    <ScrollArea className="h-[60vh]">
      <div className="space-y-2 p-2">
        {allQuestions.map((q, index) => {
          const answer = findAnswer(q.id);
          const isAnswered =
            answer !== undefined &&
            answer !== null &&
            (typeof answer === "string" ? answer.trim() !== "" : true) &&
            (Array.isArray(answer) ? answer.length > 0 : true) &&
            (typeof answer === "object" && !Array.isArray(answer)
              ? Object.keys(answer || {}).length > 0
              : true);
          const isCurrent = index === currentQuestionIndex;

          return (
            <Button
              key={q.id}
              variant={isCurrent ? "default" : "outline"}
              size="sm"
              className={cn(
                "w-full justify-start text-start h-auto py-2", // גובה אוטומטי
                isCurrent ? "bg-blue-600 text-white" : "",
                isAnswered && !isCurrent ? "border-green-500" : "",
                q.isRequired && !isAnswered ? "border-red-300" : ""
              )}
              onClick={() => {
                setCurrentQuestionIndex(index);
                closeSheet?.();
              }}
            >
              <div className="flex items-center w-full">
                <span className="w-6 h-6 rounded-full bg-gray-100 text-gray-700 flex items-center justify-center text-xs flex-shrink-0 mr-2">
                  {index + 1}
                </span>
                <div
                  className="flex-1 text-xs"
                  style={{ whiteSpace: "normal" }}
                >
                  {" "}
                  {/* אפשור גלישת טקסט */}
                  {q.question}
                </div>
                <div className="ml-2 flex-shrink-0">
                  {isAnswered ? (
                    <CheckCircle className="h-4 w-4 text-green-500" />
                  ) : q.isRequired ? (
                    <AlertCircle className="h-4 w-4 text-red-500" />
                  ) : null}
                </div>
              </div>
            </Button>
          );
        })}
      </div>
    </ScrollArea>
  );

  return (
    <div className="max-w-2xl mx-auto p-2 sm:p-4 space-y-6">
      {/* *** סרגל ניווט עליון עם Sheet *** */}
      <div className="bg-white p-3 rounded-lg shadow-sm border space-y-2">
        <div className="flex items-center justify-between">
          <div>
            <h2 className="text-lg font-medium">עולם הזוגיות</h2>
            <div className="text-sm text-gray-500">
              שאלה {currentQuestionIndex + 1} מתוך {allQuestions.length}
            </div>
          </div>
          <div className="flex items-center gap-2">
            <div className="hidden sm:flex items-center text-sm text-gray-600">
              <CheckCircle className="h-4 w-4 text-green-500 mr-1" />
              <span>{completionPercentage}% הושלם</span>
            </div>
            <Sheet>
              <SheetTrigger asChild>
                <Button variant="outline" size="sm" className="gap-1">
                  <List className="h-4 w-4" />
                  <span className="hidden sm:inline">רשימת שאלות</span>
                </Button>
              </SheetTrigger>
              {/* שינוי כיוון הפתיחה ל-left אם RTL */}
              <SheetContent
                side={language === "he" ? "left" : "right"}
                className="w-[300px] sm:w-[400px]"
              >
                <SheetHeader>
                  <SheetTitle>כל השאלות בעולם הזוגיות</SheetTitle>
                  <SheetDescription>
                    לחץ על שאלה כדי לעבור אליה ישירות.
                    <div className="mt-2 flex gap-2 text-xs">
                      <div className="flex items-center">
                        <CheckCircle className="h-3 w-3 text-green-500 mr-1" />
                        <span>הושלם</span>
                      </div>
                      <div className="flex items-center">
                        <AlertCircle className="h-3 w-3 text-red-500 mr-1" />
                        <span>שאלת חובה</span>
                      </div>
                    </div>
                  </SheetDescription>
                </SheetHeader>
                <div className="mt-6">
                  <QuestionsList closeSheet={() => {}} />
                </div>
              </SheetContent>
            </Sheet>
          </div>
        </div>
        <Progress value={progress} className="h-2" />
      </div>

      {/* כרטיס שאלה (אותה לוגיקה) */}
      <div
        className={cn(
          "transition-all duration-300 transform",
          animateDirection === "left" && "translate-x-4 opacity-0",
          animateDirection === "right" && "-translate-x-4 opacity-0"
        )}
      >
        <QuestionCard
          question={currentQuestion}
          depth={currentQuestion.depth}
          isRequired={currentQuestion.isRequired}
          validationError={validationErrors[currentQuestion.id]}
          language={language}
          // מסירים את כפתורי הניווט מכאן
          // onNext={handleNext}
          // onPrevious={handlePrevious}
          // isLastQuestion={currentQuestionIndex === allQuestions.length - 1}
          // isFirstQuestion={currentQuestionIndex === 0}
        >
          <AnswerInput
            question={currentQuestion}
            value={currentValue}
            onChange={(value) => {
              setValidationErrors({
                ...validationErrors,
                [currentQuestion.id]: "",
              });
              onAnswer(currentQuestion.id, value);
            }}
            onClear={handleClearAnswer} // מאפשרים ניקוי
            language={language}
            showValidation={!!validationErrors[currentQuestion.id]} // הצג שגיאה אם קיימת
          />
        </QuestionCard>
      </div>

      {/* כפתורי ניווט תחתונים (אותה לוגיקה) */}
      <div className="flex justify-between pt-4 border-t">
        <Button
          variant="outline"
          onClick={handlePrevious}
          disabled={currentQuestionIndex === 0}
          className={currentQuestionIndex === 0 ? "opacity-50" : ""}
        >
          <ArrowRight className="w-4 h-4 ml-2" />
          {currentQuestionIndex === 0 ? "חזור למפה" : "שאלה קודמת"}
        </Button>

        {currentQuestionIndex < allQuestions.length - 1 ? (
          <Button
            variant="default"
            onClick={handleNext}
            className="bg-blue-600 hover:bg-blue-700"
          >
            שאלה הבאה
            <ArrowLeft className="w-4 h-4 mr-2" />
          </Button>
        ) : (
          <Button
            onClick={handleNext}
            className="bg-green-600 hover:bg-green-700"
          >
            סיים עולם זה
            <CheckCircle className="w-4 h-4 mr-2" />
          </Button>
        )}
      </div>
    </div>
  );
}


==================================================
Contents of C:\Users\eytan\Desktop\שידוכים\shidduch-system\src\components\questionnaire\worlds\ReligionWorld.tsx:
==================================================
// src/components/questionnaire/worlds/ReligionWorld.tsx
import React, { useState, useEffect } from "react";
import WorldIntro from "../common/WorldIntro";
import QuestionCard from "../common/QuestionCard";
import AnswerInput from "../common/AnswerInput";
import { Button } from "@/components/ui/button";
import { Progress } from "@/components/ui/progress";
import {
  ArrowLeft,
  ArrowRight,
  List,
  CheckCircle,
  AlertCircle,
} from "lucide-react";
import { cn } from "@/lib/utils";
import type {
  WorldComponentProps,
  AnswerValue,
  Question,
} from "../types/types";
// *** שינוי: ייבוא מהקובץ המאוחד החדש ***
import { religionQuestions } from "../questions/religion/religionQuestions";
import {
  Sheet,
  SheetContent,
  SheetDescription,
  SheetHeader,
  SheetTitle,
  SheetTrigger,
} from "@/components/ui/sheet";
import { ScrollArea } from "@/components/ui/scroll-area";

// *** שינוי: שימוש במשתנה החדש ***
const allQuestions = religionQuestions;

export default function ReligionWorld({
  onAnswer,
  onComplete,
  onBack,
  answers,
  language = "he",
}: WorldComponentProps) {
  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);
  const [isIntroComplete, setIsIntroComplete] = useState(false);
  const [validationErrors, setValidationErrors] = useState<
    Record<string, string>
  >({});
  const [animateDirection, setAnimateDirection] = useState<
    "left" | "right" | null
  >(null);

  // אפקט אנימציה (ללא שינוי)
  useEffect(() => {
    const timer = setTimeout(() => {
      setAnimateDirection(null);
    }, 500);
    return () => clearTimeout(timer);
  }, [currentQuestionIndex]);

  // מציאת תשובה (ללא שינוי)
  const findAnswer = (questionId: string) => {
    return answers.find((a) => a.questionId === questionId)?.value;
  };

  // ולידציה (אותה לוגיקה כמו בעולמות הקודמים, מטפלת בכל הסוגים)
  const validateAnswer = (
    question: Question,
    value: AnswerValue
  ): string | null => {
    const isValueEmpty =
      value === undefined ||
      value === null ||
      (typeof value === "string" && value.trim() === "") ||
      (Array.isArray(value) && value.length === 0) ||
      (typeof value === "object" &&
        !Array.isArray(value) &&
        Object.keys(value || {}).length === 0); // בדיקה ל-budgetAllocation ריק

    if (question.isRequired && isValueEmpty) {
      return "נדרשת תשובה לשאלה זו";
    }
    if (!question.isRequired && isValueEmpty) {
      return null;
    }

    switch (question.type) {
      case "openText": {
        const textValue = value as string;
        const trimmedLength = textValue?.trim().length || 0;
        if (
          question.minLength &&
          trimmedLength < question.minLength &&
          question.isRequired
        ) {
          return `התשובה חייבת להכיל לפחות ${question.minLength} תווים`;
        }
        if (question.maxLength && trimmedLength > question.maxLength) {
          return `התשובה לא יכולה להכיל יותר מ-${question.maxLength} תווים`;
        }
        break;
      }
      case "multiSelect":
      case "multiChoice":
      case "multiSelectWithOther": {
        const selectedValues = value as string[];
        if (
          question.minSelections &&
          selectedValues.length < question.minSelections
        ) {
          return `יש לבחור לפחות ${question.minSelections} אפשרויות`;
        }
        if (
          question.maxSelections &&
          selectedValues.length > question.maxSelections
        ) {
          return `ניתן לבחור עד ${question.maxSelections} אפשרויות`;
        }
        break;
      }
      case "budgetAllocation": {
        const allocationValue = value as Record<string, number>;
        if (allocationValue) {
          const totalAllocated = Object.values(allocationValue).reduce(
            (sum, val) => sum + (val || 0),
            0
          );
          if (
            question.totalPoints &&
            totalAllocated !== question.totalPoints &&
            question.isRequired
          ) {
            return `יש להקצות בדיוק ${question.totalPoints} נקודות.`;
          }
        }
        break;
      }
    }
    return null;
  };

  // מעבר לשאלה הבאה (ללא שינוי)
  const handleNext = () => {
    const currentQuestion = allQuestions[currentQuestionIndex];
    const value = findAnswer(currentQuestion.id);
    const error = validateAnswer(currentQuestion, value);

    if (error && currentQuestion.isRequired) {
      setValidationErrors({ ...validationErrors, [currentQuestion.id]: error });
      return;
    }
    setValidationErrors((prev) => {
      const newErrors = { ...prev };
      delete newErrors[currentQuestion.id];
      return newErrors;
    });

    if (currentQuestionIndex < allQuestions.length - 1) {
      setAnimateDirection("left");
      setCurrentQuestionIndex((prev) => prev + 1);
    } else {
      onComplete();
    }
  };

  // חזרה לשאלה קודמת (ללא שינוי)
  const handlePrevious = () => {
    if (currentQuestionIndex > 0) {
      setAnimateDirection("right");
      setCurrentQuestionIndex((prev) => prev - 1);
    } else {
      onBack(); // חזרה למפת העולמות או למבוא
    }
  };

  // ניקוי תשובה (ללא שינוי)
  const handleClearAnswer = () => {
    const currentQuestion = allQuestions[currentQuestionIndex];
    let emptyValue: AnswerValue;

    switch (currentQuestion.type) {
      case "multiChoice":
      case "multiSelect":
      case "multiSelectWithOther":
        emptyValue = [];
        break;
      case "budgetAllocation":
        emptyValue = {};
        break;
      case "scale":
        emptyValue = undefined;
        break;
      default:
        emptyValue = "";
    }

    onAnswer(currentQuestion.id, emptyValue);
    setValidationErrors({
      ...validationErrors,
      [currentQuestion.id]: "",
    });
  };

  // *** שינוי: מבוא לעולם עם פרטים מעודכנים ***
  if (!isIntroComplete) {
    return (
      <WorldIntro
        worldId="RELIGION"
        title="עולם הדת והמסורת" // כותרת מעודכנת
        description="בואו נבין יחד את מקומם של האמונה, ההלכה, הקהילה והרוחניות בחייך" // תיאור מעודכן
        estimatedTime={45} // הערכה מעודכנת (יותר שאלות)
        totalQuestions={allQuestions.length} // מספר שאלות מעודכן
        requiredQuestions={allQuestions.filter((q) => q.isRequired).length} // ספירה מעודכנת
        depths={["BASIC", "ADVANCED"]} // עדכון רמות עומק
        onStart={() => setIsIntroComplete(true)}
      />
    );
  }

  // טיפול בשגיאת טעינה (ללא שינוי)
  if (allQuestions.length === 0) {
    return (
      <div className="p-4 bg-red-50 rounded-lg border border-red-300 text-red-800">
        <h3 className="font-bold">שגיאה בטעינת השאלות</h3>
        <p>לא ניתן לטעון את השאלות לעולם זה. אנא נסה לרענן את הדף.</p>
        <Button className="mt-4" variant="outline" onClick={onBack}>
          חזרה למפה
        </Button>
      </div>
    );
  }

  // הגדרת השאלה הנוכחית (ללא שינוי)
  const currentQuestion = allQuestions[currentQuestionIndex];
  if (!currentQuestion) {
    console.error(
      "Current question is undefined at index:",
      currentQuestionIndex
    );
    return <div>שגיאה בטעינת השאלה הנוכחית.</div>;
  }
  const progress = ((currentQuestionIndex + 1) / allQuestions.length) * 100;
  const currentValue = findAnswer(currentQuestion.id);

  // חישוב התקדמות (ללא שינוי)
  const answeredQuestionsCount = allQuestions.filter((q) =>
    answers.some(
      (a) =>
        a.questionId === q.id &&
        a.value !== undefined &&
        a.value !== null &&
        (typeof a.value === "string" ? a.value.trim() !== "" : true) &&
        (Array.isArray(a.value) ? a.value.length > 0 : true) &&
        (typeof a.value === "object" && !Array.isArray(a.value)
          ? Object.keys(a.value || {}).length > 0
          : true)
    )
  ).length;
  const completionPercentage = Math.round(
    (answeredQuestionsCount / allQuestions.length) * 100
  );

  // קומפוננטת רשימת שאלות (אותו דבר כמו בעולמות הקודמים)
  const QuestionsList = ({ closeSheet }: { closeSheet?: () => void }) => (
    <ScrollArea className="h-[60vh]">
      <div className="space-y-2 p-2">
        {allQuestions.map((q, index) => {
          const answer = findAnswer(q.id);
          const isAnswered =
            answer !== undefined &&
            answer !== null &&
            (typeof answer === "string" ? answer.trim() !== "" : true) &&
            (Array.isArray(answer) ? answer.length > 0 : true) &&
            (typeof answer === "object" && !Array.isArray(answer)
              ? Object.keys(answer || {}).length > 0
              : true);
          const isCurrent = index === currentQuestionIndex;

          return (
            <Button
              key={q.id}
              variant={isCurrent ? "default" : "outline"}
              size="sm"
              className={cn(
                "w-full justify-start text-start h-auto py-2",
                isCurrent ? "bg-blue-600 text-white" : "",
                isAnswered && !isCurrent ? "border-green-500" : "",
                q.isRequired && !isAnswered ? "border-red-300" : ""
              )}
              onClick={() => {
                setCurrentQuestionIndex(index);
                closeSheet?.();
              }}
            >
              <div className="flex items-center w-full">
                <span className="w-6 h-6 rounded-full bg-gray-100 text-gray-700 flex items-center justify-center text-xs flex-shrink-0 mr-2">
                  {index + 1}
                </span>
                <div
                  className="flex-1 text-xs"
                  style={{ whiteSpace: "normal" }}
                >
                  {q.question}
                </div>
                <div className="ml-2 flex-shrink-0">
                  {isAnswered ? (
                    <CheckCircle className="h-4 w-4 text-green-500" />
                  ) : q.isRequired ? (
                    <AlertCircle className="h-4 w-4 text-red-500" />
                  ) : null}
                </div>
              </div>
            </Button>
          );
        })}
      </div>
    </ScrollArea>
  );

  // רנדור הקומפוננטה (אותו מבנה כמו בעולמות הקודמים)
  return (
    <div className="max-w-2xl mx-auto p-2 sm:p-4 space-y-6">
      {/* סרגל ניווט עליון */}
      <div className="bg-white p-3 rounded-lg shadow-sm border space-y-2">
        <div className="flex items-center justify-between">
          <div>
            <h2 className="text-lg font-medium">עולם הדת והמסורת</h2>{" "}
            {/* כותרת מעודכנת */}
            <div className="text-sm text-gray-500">
              שאלה {currentQuestionIndex + 1} מתוך {allQuestions.length}
            </div>
          </div>
          <div className="flex items-center gap-2">
            <div className="hidden sm:flex items-center text-sm text-gray-600">
              <CheckCircle className="h-4 w-4 text-green-500 mr-1" />
              <span>{completionPercentage}% הושלם</span>
            </div>
            <Sheet>
              <SheetTrigger asChild>
                <Button variant="outline" size="sm" className="gap-1">
                  <List className="h-4 w-4" />
                  <span className="hidden sm:inline">רשימת שאלות</span>
                </Button>
              </SheetTrigger>
              <SheetContent
                side={language === "he" ? "left" : "right"}
                className="w-[300px] sm:w-[400px]"
              >
                <SheetHeader>
                  <SheetTitle>כל השאלות בעולם הדת והמסורת</SheetTitle>{" "}
                  {/* כותרת מעודכנת */}
                  <SheetDescription>
                    לחץ על שאלה כדי לעבור אליה ישירות.
                    <div className="mt-2 flex gap-2 text-xs">
                      <div className="flex items-center">
                        <CheckCircle className="h-3 w-3 text-green-500 mr-1" />
                        <span>הושלם</span>
                      </div>
                      <div className="flex items-center">
                        <AlertCircle className="h-3 w-3 text-red-500 mr-1" />
                        <span>שאלת חובה</span>
                      </div>
                    </div>
                  </SheetDescription>
                </SheetHeader>
                <div className="mt-6">
                  <QuestionsList closeSheet={() => {}} />
                </div>
              </SheetContent>
            </Sheet>
          </div>
        </div>
        <Progress value={progress} className="h-2" />
      </div>

      {/* כרטיס שאלה */}
      <div
        className={cn(
          "transition-all duration-300 transform",
          animateDirection === "left" && "translate-x-4 opacity-0",
          animateDirection === "right" && "-translate-x-4 opacity-0"
        )}
      >
        <QuestionCard
          question={currentQuestion}
          depth={currentQuestion.depth}
          isRequired={currentQuestion.isRequired}
          validationError={validationErrors[currentQuestion.id]}
          language={language}
        >
          <AnswerInput
            question={currentQuestion}
            value={currentValue}
            onChange={(value) => {
              setValidationErrors({
                ...validationErrors,
                [currentQuestion.id]: "",
              });
              onAnswer(currentQuestion.id, value);
            }}
            onClear={handleClearAnswer}
            language={language}
            showValidation={!!validationErrors[currentQuestion.id]}
          />
        </QuestionCard>
      </div>

      {/* כפתורי ניווט תחתונים */}
      <div className="flex justify-between pt-4 border-t">
        <Button
          variant="outline"
          onClick={handlePrevious}
          // disabled={currentQuestionIndex === 0} // מאפשרים חזרה למפה תמיד
        >
          <ArrowRight className="w-4 h-4 ml-2" />
          {currentQuestionIndex === 0 ? "חזור למפה" : "שאלה קודמת"}
        </Button>

        {currentQuestionIndex < allQuestions.length - 1 ? (
          <Button
            variant="default"
            onClick={handleNext}
            className="bg-blue-600 hover:bg-blue-700"
          >
            שאלה הבאה
            <ArrowLeft className="w-4 h-4 mr-2" />
          </Button>
        ) : (
          <Button
            onClick={handleNext}
            className="bg-green-600 hover:bg-green-700"
          >
            סיים עולם זה
            <CheckCircle className="w-4 h-4 mr-2" />
          </Button>
        )}
      </div>
    </div>
  );
}


==================================================
Contents of C:\Users\eytan\Desktop\שידוכים\shidduch-system\src\components\questionnaire\worlds\ValuesWorld.tsx:
==================================================
// src/components/questionnaire/worlds/ValuesWorld.tsx
import React, { useState, useEffect } from "react";
import WorldIntro from "../common/WorldIntro";
import QuestionCard from "../common/QuestionCard";
import AnswerInput from "../common/AnswerInput";
import QuestionsList from "../common/QuestionsList";
import { Button } from "@/components/ui/button";
import { Progress } from "@/components/ui/progress";
import {
  ArrowLeft,
  ArrowRight,
  AlertCircle,
  CheckCircle,
  List,
  PanelLeftClose,
  PanelRightClose,
  PanelLeftOpen,
  PanelRightOpen,
  ListChecks,
  CircleDot,
} from "lucide-react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import {
  Sheet,
  SheetContent,
  SheetDescription,
  SheetHeader,
  SheetTitle,
  SheetTrigger,
} from "@/components/ui/sheet";
import type {
  WorldComponentProps,
  AnswerValue,
  Question,
} from "../types/types";
import { valuesQuestions } from "../questions/values/valuesQuestions";
import { cn } from "@/lib/utils";
import { useMediaQuery } from "../hooks/useMediaQuery";
import { motion, AnimatePresence } from "framer-motion";
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip";

const allQuestions = valuesQuestions;

export default function ValuesWorld({
  onAnswer,
  onComplete,
  onBack,
  answers,
  language = "he",
}: WorldComponentProps) {
  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);
  const [isIntroComplete, setIsIntroComplete] = useState(false);
  const [validationErrors, setValidationErrors] = useState<
    Record<string, string>
  >({});
  const [animateDirection, setAnimateDirection] = useState<
    "left" | "right" | null
  >(null);

  const isDesktop = useMediaQuery("(min-width: 1024px)");
  const isRTL = language === "he";
  const [isListVisible, setIsListVisible] = useState(true);

  useEffect(() => {
    const timer = setTimeout(() => setAnimateDirection(null), 300);
    return () => clearTimeout(timer);
  }, [currentQuestionIndex]);

  const findAnswer = (questionId: string) => {
    return answers.find((a) => a.questionId === questionId)?.value;
  };

  // פונקציית ולידציה (ללא שינוי)
  const validateAnswer = (
    question: Question,
    value: AnswerValue
  ): string | null => {
    const isValueEmpty =
      value === undefined ||
      value === null ||
      (typeof value === "string" && value.trim() === "") ||
      (Array.isArray(value) && value.length === 0) ||
      (typeof value === "object" &&
        !Array.isArray(value) &&
        Object.keys(value || {}).length === 0);

    if (question.isRequired && isValueEmpty) {
      return "נדרשת תשובה לשאלה זו";
    }
    if (!question.isRequired && isValueEmpty) {
      return null;
    }

    switch (question.type) {
      case "openText": {
        const textValue = value as string;
        const trimmedLength = textValue?.trim().length || 0;
        if (
          question.minLength &&
          trimmedLength < question.minLength &&
          question.isRequired
        ) {
          return `התשובה חייבת להכיל לפחות ${question.minLength} תווים`;
        }
        if (question.maxLength && trimmedLength > question.maxLength) {
          return `התשובה לא יכולה להכיל יותר מ-${question.maxLength} תווים`;
        }
        break;
      }
      case "multiSelect":
      case "multiChoice":
      case "multiSelectWithOther": {
        const selectedValues = value as string[];
        if (
          question.minSelections &&
          selectedValues.length < question.minSelections
        ) {
          return `יש לבחור לפחות ${question.minSelections} אפשרויות`;
        }
        if (
          question.maxSelections &&
          selectedValues.length > question.maxSelections
        ) {
          return `ניתן לבחור עד ${question.maxSelections} אפשרויות`;
        }
        break;
      }
      case "budgetAllocation": {
        const allocationValue = value as Record<string, number>;
        if (allocationValue) {
          const totalAllocated = Object.values(allocationValue).reduce(
            (sum, val) => sum + (val || 0),
            0
          );
          if (
            question.totalPoints &&
            totalAllocated !== question.totalPoints &&
            question.isRequired
          ) {
            if (totalAllocated < question.totalPoints) {
              return `יש להקצות בדיוק ${question.totalPoints} נקודות. חסרות ${
                question.totalPoints - totalAllocated
              } נקודות.`;
            } else {
              return `יש להקצות בדיוק ${
                question.totalPoints
              } נקודות. יש עודף של ${
                totalAllocated - question.totalPoints
              } נקודות.`;
            }
          }
        }
        break;
      }
    }
    return null;
  };

  const handleNext = () => {
    console.log("handleNext called"); // בדיקה
    const currentQuestion = allQuestions[currentQuestionIndex];
    const value = findAnswer(currentQuestion.id);
    const error = validateAnswer(currentQuestion, value);

    if (error && currentQuestion.isRequired) {
      setValidationErrors({ ...validationErrors, [currentQuestion.id]: error });
      console.log("Validation error, returning");
      return;
    }
    setValidationErrors((prev) => {
      const newErrors = { ...prev };
      delete newErrors[currentQuestion.id];
      return newErrors;
    });

    if (currentQuestionIndex < allQuestions.length - 1) {
      console.log("Going to next question");
      setAnimateDirection("left");
      setCurrentQuestionIndex((prev) => prev + 1);
    } else {
      console.log("Completing world");
      onComplete();
    }
  };

  const handlePrevious = () => {
    console.log("handlePrevious called"); // בדיקה
    if (currentQuestionIndex > 0) {
      console.log("Going to previous question");
      setAnimateDirection("right");
      setCurrentQuestionIndex((prev) => prev - 1);
    } else {
      console.log("Going back");
      onBack();
    }
  };

  const handleClearAnswer = () => {
    // ... (קוד ניקוי תשובה ללא שינוי) ...
    const currentQuestion = allQuestions[currentQuestionIndex];
    let emptyValue: AnswerValue;
    switch (currentQuestion.type) {
      case "multiChoice":
      case "multiSelect":
      case "multiSelectWithOther":
        emptyValue = [];
        break;
      case "budgetAllocation":
        emptyValue = {};
        break;
      case "scale":
        emptyValue = undefined;
        break;
      default:
        emptyValue = "";
    }
    onAnswer(currentQuestion.id, emptyValue);
    setValidationErrors({ ...validationErrors, [currentQuestion.id]: "" });
  };

  // --- Render Intro ---
  if (!isIntroComplete) {
    // ... (קוד הצגת מבוא) ...
    return (
      <WorldIntro
        worldId="VALUES"
        title="עולם הערכים והאמונות"
        description="בואו נברר יחד מהם הערכים והעקרונות המנחים בחייך"
        estimatedTime={35}
        totalQuestions={allQuestions.length}
        requiredQuestions={allQuestions.filter((q) => q.isRequired).length}
        depths={["BASIC", "ADVANCED"]}
        onStart={() => setIsIntroComplete(true)}
      />
    );
  }

  // --- Handle Loading Error ---
  if (allQuestions.length === 0) {
    // ... (קוד טיפול בשגיאה) ...
    return (
      <div className="p-4 bg-red-50 rounded-lg border border-red-300 text-red-800">
        <h3 className="font-bold">שגיאה בטעינת השאלות</h3>
        <p>לא ניתן לטעון את השאלות לעולם זה. אנא נסה לרענן את הדף.</p>
        <Button className="mt-4" variant="outline" onClick={onBack}>
          חזרה למפה
        </Button>
      </div>
    );
  }

  const currentQuestion = allQuestions[currentQuestionIndex];
  if (!currentQuestion) {
    // ... (קוד טיפול בשגיאה) ...
    return <div>שגיאה בטעינת השאלה הנוכחית.</div>;
  }

  // --- Calculate Progress ---
  // ... (קוד חישוב התקדמות ללא שינוי) ...
  const progress = ((currentQuestionIndex + 1) / allQuestions.length) * 100;
  const currentValue = findAnswer(currentQuestion.id);
  const answeredQuestionsCount = allQuestions.filter((q) =>
    answers.some((a) => {
      const val = a.value;
      return (
        a.questionId === q.id &&
        val !== undefined &&
        val !== null &&
        (typeof val === "string" ? val.trim() !== "" : true) &&
        (Array.isArray(val) ? val.length > 0 : true) &&
        (typeof val === "object" && !Array.isArray(val)
          ? Object.keys(val).length > 0
          : true)
      );
    })
  ).length;
  const completionPercentage = Math.round(
    (answeredQuestionsCount / allQuestions.length) * 100
  );

  // --- Helper Components for Rendering ---

  const renderHeader = (showSheetButton: boolean) => (
    <div className="bg-white p-3 rounded-lg shadow-sm border space-y-2 mb-6">
      {/* ... (קוד כותרת ללא שינוי) ... */}
      <div className="flex items-center justify-between">
        <div>
          <h2 className="text-lg font-medium">עולם הערכים והאמונות</h2>
          <div className="text-sm text-gray-500">
            שאלה {currentQuestionIndex + 1} מתוך {allQuestions.length}
          </div>
        </div>
        <div className="flex items-center gap-2">
          <div
            className={cn(
              "hidden sm:flex items-center text-sm",
              completionPercentage === 100 ? "text-green-600" : "text-gray-600"
            )}
          >
            <CheckCircle
              className={cn(
                "h-4 w-4 me-1",
                completionPercentage === 100
                  ? "text-green-500"
                  : "text-gray-400"
              )}
            />
            <span>{completionPercentage}% הושלם</span>
          </div>
          {showSheetButton && (
            <Sheet>
              <SheetTrigger asChild>
                <Button variant="outline" size="sm" className="gap-1">
                  <List className="h-4 w-4" />
                  <span className="hidden sm:inline">רשימת שאלות</span>
                </Button>
              </SheetTrigger>
              <SheetContent
                side={isRTL ? "left" : "right"}
                className="w-[300px] sm:w-[400px]"
              >
                <SheetHeader>
                  <SheetTitle>
                    <div className="flex items-center gap-2">
                      <ListChecks className="h-5 w-5 text-blue-600" />
                      <span>כל השאלות בעולם הערכים</span>
                    </div>
                  </SheetTitle>
                  <SheetDescription>
                    לחץ על שאלה כדי לעבור אליה ישירות.
                    <div className="mt-3 pt-3 border-t space-y-1">
                      <div className="flex items-center text-xs text-gray-600">
                        <CheckCircle className="h-3 w-3 text-green-500 me-1.5" />
                        <span>הושלם</span>
                      </div>
                      <div className="flex items-center text-xs text-gray-600">
                        <AlertCircle className="h-3 w-3 text-red-500 me-1.5" />
                        <span>חובה (לא נענה)</span>
                      </div>
                      <div className="flex items-center text-xs text-gray-600">
                        <CircleDot className="h-3 w-3 text-gray-400 me-1.5" />
                        <span>לא נענה</span>
                      </div>
                    </div>
                  </SheetDescription>
                </SheetHeader>
                <div className="mt-4">
                  <QuestionsList
                    allQuestions={allQuestions}
                    currentQuestionIndex={currentQuestionIndex}
                    setCurrentQuestionIndex={setCurrentQuestionIndex}
                    answers={answers}
                    language={language}
                    // Pass a function to close the sheet if needed
                    // onClose={() => ... }
                  />
                </div>
              </SheetContent>
            </Sheet>
          )}
        </div>
      </div>
      <Progress value={progress} className="h-2" />
    </div>
  );

  // *** שינוי: הוצאת כפתורי הניווט מחוץ לאזור האנימציה של השאלה ***
  const renderQuestionCard = () => (
    <motion.div
      className={cn(
        "transition-opacity duration-300" // רק אנימציית opacity
      )}
      key={currentQuestionIndex}
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      exit={{ opacity: 0 }}
    >
      <QuestionCard
        question={currentQuestion}
        depth={currentQuestion.depth}
        isRequired={currentQuestion.isRequired}
        validationError={validationErrors[currentQuestion.id]}
        language={language}
      >
        <AnswerInput
          question={currentQuestion}
          value={currentValue}
          onChange={(value) => {
            setValidationErrors({
              ...validationErrors,
              [currentQuestion.id]: "",
            });
            onAnswer(currentQuestion.id, value);
          }}
          onClear={handleClearAnswer}
          language={language}
          showValidation={!!validationErrors[currentQuestion.id]}
        />
      </QuestionCard>
    </motion.div>
  );

  const renderNavigationButtons = () => (
    <div className="flex justify-between pt-4 mt-6 border-t">
      {" "}
      {/* ללא אנימציה עוטפת */}
      <Button
        variant="outline"
        onClick={handlePrevious}
        className="flex items-center gap-2"
      >
        <ArrowRight className="h-4 w-4" />
        <span>{currentQuestionIndex === 0 ? "חזור למפה" : "שאלה קודמת"}</span>
      </Button>
      {currentQuestionIndex < allQuestions.length - 1 ? (
        <Button
          variant="default"
          onClick={handleNext} // ישירות על הכפתור
          className="bg-blue-600 hover:bg-blue-700 flex items-center gap-2"
        >
          <span>שאלה הבאה</span>
          <ArrowLeft className="h-4 w-4" />
        </Button>
      ) : (
        <Button
          onClick={handleNext} // ישירות על הכפתור
          className="bg-green-600 hover:bg-green-700 flex items-center gap-2"
        >
          <span>סיים עולם זה</span>
          <CheckCircle className="h-4 w-4" />
        </Button>
      )}
    </div>
  );

  const ListToggleButton = () => (
    // ... (קוד כפתור הטוגל ללא שינוי) ...
    <TooltipProvider delayDuration={100}>
      <Tooltip>
        <TooltipTrigger asChild>
          <Button
            variant="outline"
            size="icon"
            onClick={() => setIsListVisible(!isListVisible)}
            className="fixed top-[80px] z-30 bg-white/80 backdrop-blur-sm shadow-md hover:bg-gray-100 rounded-full w-10 h-10" // שינוי לעיגול
            style={isRTL ? { left: "1.5rem" } : { right: "1.5rem" }}
          >
            {isListVisible ? (
              isRTL ? (
                <PanelRightClose className="h-5 w-5" />
              ) : (
                <PanelLeftClose className="h-5 w-5" />
              )
            ) : isRTL ? (
              <PanelRightOpen className="h-5 w-5" />
            ) : (
              <PanelLeftOpen className="h-5 w-5" />
            )}
            <span className="sr-only">
              {isListVisible ? "הסתר רשימה" : "הצג רשימה"}
            </span>{" "}
            {/* טקסט לנגישות */}
          </Button>
        </TooltipTrigger>
        <TooltipContent side={isRTL ? "right" : "left"}>
          {" "}
          {/* שינוי כיוון ה-Tooltip */}
          <p>{isListVisible ? "הסתר רשימת שאלות" : "הצג רשימת שאלות"}</p>
        </TooltipContent>
      </Tooltip>
    </TooltipProvider>
  );

  // --- Conditional Layout Rendering ---
  if (isDesktop) {
    // --- Desktop Layout ---
    return (
      <div className="w-full relative" dir={isRTL ? "rtl" : "ltr"}>
        <ListToggleButton />
        {renderHeader(false)}

        <div
          className={cn(
            "transition-all duration-300 ease-in-out",
            isListVisible ? "grid grid-cols-12 gap-8" : "flex justify-center"
          )}
        >
          {/* Main Question Area */}
          <div // *** שינוי: div רגיל, ללא motion וללא layout ***
            className={cn(
              "space-y-6", // רק style בסיסי
              isListVisible
                ? "col-span-12 lg:col-span-7 xl:col-span-8"
                : "w-full max-w-4xl" // הגבלת רוחב כשממורכז
            )}
            // *** אין אנימציית layout ***
          >
            {renderQuestionCard()} {/* מכיל את האנימציה של השאלה עצמה */}
            {renderNavigationButtons()} {/* כפתורים מחוץ לאנימציה */}
          </div>

          {/* Questions List Sidebar */}
          <AnimatePresence>
            {isListVisible && (
              <motion.div
                className="col-span-12 lg:col-span-5 xl:col-span-4"
                initial={{
                  opacity: 0,
                  width: 0,
                  marginInlineStart: isRTL ? "-2rem" : undefined,
                  marginInlineEnd: isRTL ? undefined : "-2rem",
                }}
                animate={{
                  opacity: 1,
                  width: "auto",
                  marginInlineStart: 0,
                  marginInlineEnd: 0,
                }}
                exit={{
                  opacity: 0,
                  width: 0,
                  marginInlineStart: isRTL ? "-2rem" : undefined,
                  marginInlineEnd: isRTL ? undefined : "-2rem",
                }}
                transition={{ duration: 0.3, ease: "easeInOut" }}
                layout // Keep layout for sidebar animation
              >
                <Card className="sticky top-6 shadow-lg border border-gray-200 h-[calc(100vh-5rem)] overflow-hidden flex flex-col">
                  <CardHeader className="pb-3 pt-4 border-b bg-gray-50/50 flex-shrink-0">
                    {/* ... כותרת רשימה ... */}
                    <CardTitle className="text-lg font-semibold flex items-center gap-2 text-gray-800">
                      <ListChecks className="h-5 w-5 text-blue-600" />
                      <span>שאלות בעולם זה</span>
                    </CardTitle>
                    <div className="pt-2 flex flex-wrap gap-x-4 gap-y-1 text-xs text-gray-500">
                      <div className="flex items-center">
                        <CheckCircle className="h-3 w-3 text-green-500 me-1.5" />
                        <span>הושלם</span>
                      </div>
                      <div className="flex items-center">
                        <AlertCircle className="h-3 w-3 text-red-500 me-1.5" />
                        <span>חובה</span>
                      </div>
                      <div className="flex items-center">
                        <CircleDot className="h-3 w-3 text-gray-400 me-1.5" />
                        <span>לא נענה</span>
                      </div>
                    </div>
                  </CardHeader>
                  <CardContent className="p-2 flex-grow overflow-hidden">
                    <QuestionsList
                      allQuestions={allQuestions}
                      currentQuestionIndex={currentQuestionIndex}
                      setCurrentQuestionIndex={setCurrentQuestionIndex}
                      answers={answers}
                      language={language}
                      className="h-full"
                    />
                  </CardContent>
                </Card>
              </motion.div>
            )}
          </AnimatePresence>
        </div>
      </div>
    );
  } else {
    // --- Mobile Layout ---
    return (
      <div
        className="max-w-2xl mx-auto p-2 sm:p-4 space-y-6"
        dir={isRTL ? "rtl" : "ltr"}
      >
        {renderHeader(true)}
        {renderQuestionCard()}
        {renderNavigationButtons()}
      </div>
    );
  }
}

