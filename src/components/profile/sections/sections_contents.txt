################################################################################
# Directory Content Map For: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\profile\sections
# Generated on: 2025-09-28 19:55:30
################################################################################

================================================================================
Directory: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\profile\sections
================================================================================

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\profile\sections\AIProfileAdvisorDialog.tsx
--------------------------------------------------------------------------------
Content:
// src/app/[locale]/(authenticated)/profile/components/advisor/AIProfileAdvisorDialog.tsx
'use client';

import React, { useState } from 'react';
import { Button } from '@/components/ui/button';
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription,
  DialogTrigger,
  DialogClose,
} from '@/components/ui/dialog';
import { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert';
import { Loader2, Sparkles, AlertTriangle, X } from 'lucide-react';
import { toast } from 'sonner';
import { cn } from '@/lib/utils'; // Import cn utility

import AnalysisResultDisplay from './AnalysisResultDisplay';
import type { AiProfileAnalysisResult } from '@/lib/services/aiService';
import {
  AIAdvisorDialogDict,
  AnalysisResultDisplayDict,
} from '@/types/dictionary';

interface AIProfileAdvisorDialogProps {
  userId: string;
  dict: AIAdvisorDialogDict;
  analysisDict: AnalysisResultDisplayDict;
  locale: string; // Added locale prop
}

export const AIProfileAdvisorDialog: React.FC<AIProfileAdvisorDialogProps> = ({
  userId,
  dict,
  analysisDict,
  locale,
}) => {
  const [isOpen, setIsOpen] = useState(false);
  const [analysis, setAnalysis] = useState<AiProfileAnalysisResult | null>(
    null
  );
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const direction = locale === 'he' ? 'rtl' : 'ltr';

  const handleGetAnalysis = async () => {
    if (analysis) {
      setIsOpen(true);
      return;
    }

    setIsLoading(true);
    setError(null);

    try {
      const response = await fetch('/api/ai/analyze-my-profile', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
      });

      const result = await response.json();

      if (!response.ok || !result.success) {
        throw new Error(result.message || 'Error getting profile analysis.');
      }

      setAnalysis(result.data);
    } catch (err) {
      const errorMessage =
        err instanceof Error ? err.message : 'An unexpected error occurred.';
      setError(errorMessage);
      toast.error(dict.toast.errorTitle, {
        description: dict.toast.errorDescription.replace(
          '{{error}}',
          errorMessage
        ),
      });
    } finally {
      setIsLoading(false);
    }
  };

  const handleOpenChange = (open: boolean) => {
    setIsOpen(open);
    if (!open) {
      setError(null);
    }
  };

  const handleTriggerClick = () => {
    if (!analysis && !isLoading) {
      handleGetAnalysis();
    }
  };

  return (
    <Dialog open={isOpen} onOpenChange={handleOpenChange}>
      <DialogTrigger asChild>
        <Button
          onClick={handleTriggerClick}
          variant="outline"
          size="lg"
          className="rounded-full border-2 border-purple-300 bg-purple-50 text-purple-700 hover:bg-purple-100 hover:border-purple-400 transition-all duration-300 shadow-sm hover:shadow-lg group w-full max-w-sm flex items-center gap-2"
        >
          <Sparkles className="w-5 h-5 text-purple-500 transition-transform duration-500 group-hover:rotate-12 group-hover:scale-110" />
          <span>{dict.triggerButton}</span>
        </Button>
      </DialogTrigger>

      <DialogContent
        className="max-w-4xl w-[95vw] h-[90vh] flex flex-col p-0"
        dir={direction} // Dynamically set direction
      >
        <DialogHeader className="p-4 border-b">
          <div className="flex justify-between items-start gap-4">
            {/* Step 1: Move the Close Button to be the first element */}
            <DialogClose asChild>
              <button className="rounded-full p-1.5 text-gray-500 hover:text-gray-800 shrink-0 transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2">
                <X className="h-5 w-5" />
                <span className="sr-only">{dict.closeButton}</span>
              </button>
            </DialogClose>

            {/* Wrapper for title and description - now the second element */}
            <div className="flex-grow">
              <DialogTitle className="flex items-center gap-2 text-xl">
                <Sparkles className="w-6 h-6 text-purple-500" />
                <span>{dict.dialogTitle}</span>
              </DialogTitle>
              <DialogDescription className="mt-1">
                {dict.dialogDescription}
              </DialogDescription>
            </div>
          </div>
        </DialogHeader>

        <div className="flex-grow overflow-y-auto p-4 md:p-6 bg-slate-50/50">
          {isLoading ? (
            <div
              role="status"
              aria-live="polite"
              className="flex flex-col items-center justify-center h-full text-center"
            >
              <Loader2 className="w-12 h-12 text-purple-500 animate-spin mb-4" />
              <p className="text-lg font-semibold text-gray-700">
                {dict.loadingTitle}
              </p>
              <p className="text-sm text-gray-500 mt-2">
                {dict.loadingDescription}
              </p>
            </div>
          ) : error ? (
            <div className="flex flex-col items-center justify-center h-full text-center">
              <Alert variant="destructive" className="max-w-md">
                <AlertTriangle className="h-5 w-5" />
                <AlertTitle>{dict.errorAlertTitle}</AlertTitle>
                <AlertDescription>
                  <p>{dict.errorAlertDescription}</p>
                  <p className="text-xs mt-2">{error}</p>
                </AlertDescription>
              </Alert>
              <Button
                onClick={handleGetAnalysis}
                variant="outline"
                className="mt-4"
              >
                {dict.retryButton}
              </Button>
            </div>
          ) : analysis ? (
            <AnalysisResultDisplay
              analysis={analysis}
              dict={analysisDict}
              locale={locale} // Pass locale down
            />
          ) : (
            <div className="flex items-center justify-center h-full">
              <p>{dict.initialState}</p>
            </div>
          )}
        </div>
      </DialogContent>
    </Dialog>
  );
};

export default AIProfileAdvisorDialog;
--- End of Content for AIProfileAdvisorDialog.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\profile\sections\AnalysisResultDisplay.tsx
--------------------------------------------------------------------------------
Content:
// src/app/[locale]/(authenticated)/profile/components/advisor/AnalysisResultDisplay.tsx
'use client';

import React from 'react';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import {
  Card,
  CardContent,
  CardHeader,
  CardTitle,
  CardDescription,
} from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import {
  Lightbulb,
  CheckCircle2,
  AlertCircle,
  XCircle,
  User,
  Target,
} from 'lucide-react';
import { AiProfileAnalysisResult } from '@/lib/services/aiService';
import { cn } from '@/lib/utils';
import { AnalysisResultDisplayDict } from '@/types/dictionary';

interface AnalysisResultDisplayProps {
  analysis: AiProfileAnalysisResult;
  dict: AnalysisResultDisplayDict;
  locale: string; // Added locale prop
}

const TipCard: React.FC<{ area: string; tip: string }> = ({ area, tip }) => (
  <div className="p-4 rounded-lg bg-yellow-50/70 border border-yellow-200/80 flex items-start gap-4">
    <div className="flex-shrink-0 mt-1">
      <Lightbulb className="w-5 h-5 text-yellow-600" />
    </div>
    <div>
      <p className="font-semibold text-sm text-yellow-800">{area}</p>
      <p className="text-sm text-yellow-900 mt-1">{tip}</p>
    </div>
  </div>
);

interface ReportItemProps {
  area: string;
  status: 'COMPLETE' | 'PARTIAL' | 'MISSING';
  feedback: string;
  dict: AnalysisResultDisplayDict['completeness']['status'];
}

const ReportItem: React.FC<ReportItemProps> = ({
  area,
  status,
  feedback,
  dict,
}) => {
  const statusConfig = {
    COMPLETE: {
      icon: CheckCircle2,
      color: 'text-green-600',
      text: dict.complete,
    },
    PARTIAL: { icon: AlertCircle, color: 'text-amber-600', text: dict.partial },
    MISSING: { icon: XCircle, color: 'text-red-600', text: dict.missing },
  };

  const { icon: Icon, color, text } = statusConfig[status];

  return (
    <div className="flex items-start gap-3 p-3 border-b last:border-b-0">
      <div className="flex-shrink-0 mt-1">
        <Icon className={cn('w-5 h-5', color)} />
      </div>
      <div className="flex-1">
        <div className="flex justify-between items-center">
          <p className="font-medium text-sm text-slate-800">{area}</p>
          <Badge
            variant="outline"
            className={cn(
              'text-xs font-mono',
              color.replace('text-', 'border-').replace('-600', '-300')
            )}
          >
            {text}
          </Badge>
        </div>
        <p className="text-sm text-slate-600 mt-1">{feedback}</p>
      </div>
    </div>
  );
};

const AnalysisResultDisplay: React.FC<AnalysisResultDisplayProps> = ({
  analysis,
  dict,
  locale,
}) => {
  const direction = locale === 'he' ? 'rtl' : 'ltr';

  return (
    <div dir={direction} className="w-full">
      <Tabs defaultValue="summary" className="w-full">
        <TabsList className="grid w-full grid-cols-3 h-auto p-1.5 bg-slate-200/70 rounded-lg">
          <TabsTrigger value="summary">{dict.tabs.summary}</TabsTrigger>
          <TabsTrigger value="completeness">
            {dict.tabs.completeness}
          </TabsTrigger>
          <TabsTrigger value="tips">{dict.tabs.tips}</TabsTrigger>
        </TabsList>

        <div className="mt-4">
          <TabsContent value="summary" className="space-y-4">
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2 text-lg">
                  <User className="text-blue-500" />
                  {dict.summary.myPersonalityTitle}
                </CardTitle>
                <CardDescription>
                  {dict.summary.myPersonalityDescription}
                </CardDescription>
              </CardHeader>
              <CardContent>
                <p className="text-slate-700 whitespace-pre-wrap leading-relaxed">
                  {analysis.personalitySummary}
                </p>
              </CardContent>
            </Card>
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2 text-lg">
                  <Target className="text-green-500" />
                  {dict.summary.lookingForTitle}
                </CardTitle>
                <CardDescription>
                  {dict.summary.lookingForDescription}
                </CardDescription>
              </CardHeader>
              <CardContent>
                <p className="text-slate-700 whitespace-pre-wrap leading-relaxed">
                  {analysis.lookingForSummary}
                </p>
              </CardContent>
            </Card>
          </TabsContent>

          <TabsContent value="completeness">
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2 text-lg">
                  <CheckCircle2 className="text-indigo-500" />
                  {dict.completeness.title}
                </CardTitle>
                <CardDescription>
                  {dict.completeness.description}
                </CardDescription>
              </CardHeader>
              <CardContent className="p-0">
                <div className="space-y-0 divide-y">
                  {analysis.completenessReport.map((item, index) => (
                    <ReportItem
                      key={index}
                      {...item}
                      dict={dict.completeness.status}
                    />
                  ))}
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          <TabsContent value="tips">
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2 text-lg">
                  <Lightbulb className="text-yellow-500" />
                  {dict.tips.title}
                </CardTitle>
                <CardDescription>{dict.tips.description}</CardDescription>
              </CardHeader>
              <CardContent className="space-y-3">
                {analysis.actionableTips.map((tip, index) => (
                  <TipCard key={index} area={tip.area} tip={tip.tip} />
                ))}
              </CardContent>
            </Card>
          </TabsContent>
        </div>
      </Tabs>
    </div>
  );
};

export default AnalysisResultDisplay;
--- End of Content for AnalysisResultDisplay.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\profile\sections\BudgetDisplay.tsx
--------------------------------------------------------------------------------
Content:
// src/components/profile/sections/BudgetDisplay.tsx
import React from 'react';
import { Progress } from '@/components/ui/progress';
import { motion } from 'framer-motion';
import type { BudgetDisplayDict } from '@/types/dictionary';

interface BudgetDisplayProps {
  data: Record<string, number>;
  dict: BudgetDisplayDict;
  locale: string; // Added locale prop
}

const BudgetDisplay: React.FC<BudgetDisplayProps> = ({
  data,
  dict,
  locale,
}) => {
  const direction = locale === 'he' ? 'rtl' : 'ltr';

  if (!data || typeof data !== 'object' || Array.isArray(data)) {
    return <p className="text-sm text-red-500">{dict.errorInvalidData}</p>;
  }

  const sortedEntries = Object.entries(data)
    .filter(([_, value]) => typeof value === 'number' && value > 0)
    .sort(([, a], [, b]) => b - a);

  if (sortedEntries.length === 0) {
    return (
      <p className="text-sm text-gray-500 italic">{dict.noValuesAllocated}</p>
    );
  }

  const colors = [
    'bg-cyan-500',
    'bg-teal-500',
    'bg-sky-500',
    'bg-indigo-500',
    'bg-purple-500',
    'bg-gray-400',
  ];

  const containerVariants = {
    hidden: { opacity: 0 },
    visible: {
      opacity: 1,
      transition: { staggerChildren: 0.1 },
    },
  };

  // Adjust animation based on direction
  const itemVariants = {
    hidden: { opacity: 0, x: direction === 'rtl' ? 20 : -20 },
    visible: { opacity: 1, x: 0 },
  };

  return (
    <motion.div
      dir={direction} // Set direction for the whole component
      className="space-y-3 pt-2"
      variants={containerVariants}
      initial="hidden"
      animate="visible"
    >
      {sortedEntries.map(([label, value], index) => (
        <motion.div key={label} variants={itemVariants}>
          <div className="flex justify-between items-center mb-1 text-sm">
            <span className="font-medium text-gray-700">{label}</span>
            <span className="font-semibold text-cyan-700">{value}%</span>
          </div>
          <Progress
            value={value}
            className="h-2.5 rounded-full bg-gray-200/70"
            indicatorClassName={colors[index % colors.length]}
          />
        </motion.div>
      ))}
    </motion.div>
  );
};

export default BudgetDisplay;
--- End of Content for BudgetDisplay.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\profile\sections\PhotosSection.tsx
--------------------------------------------------------------------------------
Content:
// src/components/profile/sections/PhotosSection.tsx

'use client';

import React, { useRef, useState, useEffect, useCallback } from 'react';
import Image from 'next/image';
import { cn, getRelativeCloudinaryPath } from '@/lib/utils';
// UI Components
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import {
  Dialog,
  DialogContent,
  DialogTitle,
  DialogDescription,
  DialogHeader,
  DialogFooter,
} from '@/components/ui/dialog';
import { toast } from 'sonner';

// Icons
import {
  Camera,
  Star,
  Loader2,
  ChevronLeft,
  ChevronRight,
  Upload,
  Trash2,
  X,
  CheckCircle2,
  MinusSquare,
} from 'lucide-react';

// Types
import type { UserImage } from '@/types/next-auth';
import { PhotosSectionDict } from '@/types/dictionary';

interface PhotosSectionProps {
  images: UserImage[];
  isUploading: boolean;
  disabled?: boolean;
  maxImages?: number;
  onUpload: (files: File[]) => Promise<void>;
  onSetMain: (imageId: string) => Promise<void>;
  onDelete: (imageIds: string[]) => Promise<void>;
  dict: PhotosSectionDict;
  locale: string; // Prop for language to determine direction
}

const PhotosSection: React.FC<PhotosSectionProps> = ({
  images,
  isUploading: isExternallyUploading,
  disabled = false,
  maxImages = 5,
  onUpload,
  onSetMain,
  onDelete,
  dict,
  locale,
}) => {
  const fileInputRef = useRef<HTMLInputElement>(null);

  const [showImageViewer, setShowImageViewer] = useState(false);
  const [selectedViewerIndex, setSelectedViewerIndex] = useState<number | null>(
    null
  );
  const [isProcessing, setIsProcessing] = useState(false);
  const [deleteConfirmOpen, setDeleteConfirmOpen] = useState(false);
  const [imageToDelete, setImageToDelete] = useState<string | null>(null);
  const [uploadingFiles, setUploadingFiles] = useState<string[]>([]);
  const [selectionMode, setSelectionMode] = useState(false);
  const [selectedImageIds, setSelectedImageIds] = useState<Set<string>>(
    new Set()
  );

  const direction = locale === 'he' ? 'rtl' : 'ltr';
  const isLoading =
    isExternallyUploading || isProcessing || uploadingFiles.length > 0;

  const validateFiles = (
    files: FileList | File[]
  ): { validFiles: File[]; errors: string[] } => {
    const validTypes = ['image/jpeg', 'image/png', 'image/jpg', 'image/webp'];
    const maxSize = 5 * 1024 * 1024; // 5MB
    const validFiles: File[] = [];
    const errors: string[] = [];
    Array.from(files).forEach((file) => {
      if (!validTypes.includes(file.type)) {
        errors.push(
          dict.toasts.invalidFileTypeError.replace('{{fileName}}', file.name)
        );
        return;
      }
      if (file.size > maxSize) {
        errors.push(
          dict.toasts.fileTooLargeError.replace('{{fileName}}', file.name)
        );
        return;
      }
      validFiles.push(file);
    });
    return { validFiles, errors };
  };

  const handleFileSelect = async (e: React.ChangeEvent<HTMLInputElement>) => {
    const files = e.target.files;
    if (!files || files.length === 0) return;

    const remainingSlots = maxImages - images.length;
    if (remainingSlots <= 0) {
      toast.error(dict.toasts.maxImagesError);
      return;
    }
    if (files.length > remainingSlots) {
      toast.error(
        dict.toasts.slotsError.replace('{{count}}', remainingSlots.toString())
      );
      return;
    }
    if (isLoading) return;

    const { validFiles, errors } = validateFiles(files);
    if (errors.length > 0) {
      errors.forEach((error) => toast.error(error));
    }
    if (validFiles.length === 0) return;

    setUploadingFiles(validFiles.map((f) => f.name));
    try {
      await onUpload(validFiles);
      toast.success(
        dict.toasts.uploadSuccess.replace(
          '{{count}}',
          validFiles.length.toString()
        )
      );
    } catch (error) {
      console.error('Error during upload process:', error);
      toast.error(dict.toasts.uploadError);
    } finally {
      setUploadingFiles([]);
      if (fileInputRef.current) fileInputRef.current.value = '';
    }
  };

  const triggerFileInput = () => {
    if (!isLoading && !disabled && images.length < maxImages) {
      fileInputRef.current?.click();
    }
  };

  const handleToggleSelectionMode = () => {
    setSelectionMode((prev) => !prev);
    setSelectedImageIds(new Set());
  };

  const handleSelectAll = () => {
    if (selectedImageIds.size === images.length) {
      setSelectedImageIds(new Set());
    } else {
      setSelectedImageIds(new Set(images.map((img) => img.id)));
    }
  };

  const toggleImageSelection = (imageId: string) => {
    setSelectedImageIds((prev) => {
      const newSet = new Set(prev);
      if (newSet.has(imageId)) {
        newSet.delete(imageId);
      } else {
        newSet.add(imageId);
      }
      return newSet;
    });
  };

  const handleImageClick = (index: number) => {
    if (selectionMode) {
      toggleImageSelection(images[index].id);
    } else {
      setSelectedViewerIndex(index);
      setShowImageViewer(true);
    }
  };

  const handleBulkDelete = async () => {
    if (selectedImageIds.size === 0) {
      toast.info(dict.toasts.selectOneError);
      return;
    }

    const confirmationMessage = dict.confirmations.bulkDelete.replace(
      '{{count}}',
      selectedImageIds.size.toString()
    );
    if (!window.confirm(confirmationMessage)) {
      return;
    }

    setIsProcessing(true);
    try {
      await onDelete(Array.from(selectedImageIds));
      toast.success(
        dict.toasts.bulkDeleteSuccess.replace(
          '{{count}}',
          selectedImageIds.size.toString()
        )
      );
      setSelectionMode(false);
      setSelectedImageIds(new Set());
    } catch (error) {
      console.error('Error during bulk delete:', error);
      toast.error(dict.toasts.bulkDeleteError);
    } finally {
      setIsProcessing(false);
    }
  };

  const requestDelete = (imageId: string, event?: React.MouseEvent) => {
    event?.stopPropagation();
    if (isLoading) return;
    setImageToDelete(imageId);
    setDeleteConfirmOpen(true);
  };

  const confirmDelete = async () => {
    if (!imageToDelete || isProcessing) return;
    setIsProcessing(true);
    try {
      await onDelete([imageToDelete]);
      toast.success(dict.toasts.singleDeleteSuccess);
      closeImageViewer();
      setDeleteConfirmOpen(false);
      setImageToDelete(null);
    } catch (error) {
      console.error('Error deleting image:', error);
      toast.error(dict.toasts.singleDeleteError);
    } finally {
      setIsProcessing(false);
    }
  };

  const closeImageViewer = useCallback(() => {
    setShowImageViewer(false);
    setSelectedViewerIndex(null);
  }, []);

  const handleNextImage = useCallback(
    () =>
      setSelectedViewerIndex((prev) =>
        prev === null || prev >= images.length - 1 ? 0 : prev + 1
      ),
    [images.length]
  );
  const handlePreviousImage = useCallback(
    () =>
      setSelectedViewerIndex((prev) =>
        prev === null || prev <= 0 ? images.length - 1 : prev - 1
      ),
    [images.length]
  );

  const handleSetMainImage = async (
    imageId: string,
    showToast = true,
    event?: React.MouseEvent
  ) => {
    event?.stopPropagation();
    if (isLoading) return;
    const currentImage = images.find((img) => img.id === imageId);
    if (!currentImage || currentImage.isMain) return;
    setIsProcessing(true);
    try {
      await onSetMain(imageId);
      if (showToast) toast.success(dict.toasts.setMainSuccess);
    } catch (error) {
      console.error('Error setting main image:', error);
      toast.error(dict.toasts.setMainError);
    } finally {
      setIsProcessing(false);
    }
  };

  const handleControlClick = (e: React.MouseEvent) => e.stopPropagation();

  useEffect(() => {
    const handleKeyDown = (e: KeyboardEvent) => {
      if (!showImageViewer) return;
      if (direction === 'rtl') {
        if (e.key === 'ArrowRight') handlePreviousImage();
        if (e.key === 'ArrowLeft') handleNextImage();
      } else {
        if (e.key === 'ArrowRight') handleNextImage();
        if (e.key === 'ArrowLeft') handlePreviousImage();
      }
      if (e.key === 'Escape') closeImageViewer();
    };
    window.addEventListener('keydown', handleKeyDown);
    return () => window.removeEventListener('keydown', handleKeyDown);
  }, [
    showImageViewer,
    handlePreviousImage,
    handleNextImage,
    closeImageViewer,
    direction,
  ]);

  const getRemainingSlots = () => maxImages - images.length;

  return (
    <div
      dir={direction}
      className="bg-white/80 backdrop-blur-lg rounded-3xl shadow-xl p-6 md:p-8"
    >
      <div className="flex flex-col sm:flex-row items-start sm:items-center justify-between mb-6 pb-4 border-b border-gray-200/80">
        {!selectionMode ? (
          <>
            <div
              className={cn(
                'mb-3 sm:mb-0',
                direction === 'rtl' ? 'text-right' : 'text-left'
              )}
            >
              <h2 className="text-xl font-semibold text-gray-800">
                {dict.title}
              </h2>
              <p className="mt-1 text-sm text-gray-600">
                {dict.subtitle.replace('{{maxImages}}', maxImages.toString())}
              </p>
              {uploadingFiles.length > 0 && (
                <p className="mt-2 text-sm text-cyan-600 font-medium">
                  {dict.uploadingMultiple.replace(
                    '{{count}}',
                    uploadingFiles.length.toString()
                  )}
                </p>
              )}
            </div>
            <div className="flex gap-2 self-end sm:self-center">
              {images.length > 0 && !disabled && (
                <Button
                  variant="outline"
                  onClick={handleToggleSelectionMode}
                  className="rounded-full px-4 text-sm"
                >
                  {dict.selectForDeletion}
                </Button>
              )}
              {!disabled && (
                <Button
                  variant="outline"
                  onClick={triggerFileInput}
                  disabled={isLoading || images.length >= maxImages}
                  className="rounded-full border-2 border-cyan-300 text-cyan-700 hover:bg-cyan-50/50 hover:border-cyan-400 transition-all duration-300 px-5 py-2.5 text-sm font-medium flex items-center gap-2"
                >
                  {isExternallyUploading || uploadingFiles.length > 0 ? (
                    <Loader2 className="w-4 h-4 animate-spin" />
                  ) : (
                    <Upload className="w-4 h-4" />
                  )}
                  <span>{dict.uploadButton}</span>
                </Button>
              )}
            </div>
          </>
        ) : (
          <div className="w-full flex justify-between items-center">
            <div className="flex items-center gap-4">
              <Button
                variant="ghost"
                size="icon"
                onClick={handleToggleSelectionMode}
                className="rounded-full text-gray-600 hover:bg-gray-100"
              >
                <X className="w-5 h-5" />
              </Button>
              <span className="font-semibold text-gray-700">
                {dict.selectionHeader.replace(
                  '{{count}}',
                  selectedImageIds.size.toString()
                )}
              </span>
            </div>
            <div className="flex gap-2">
              <Button
                variant="outline"
                onClick={handleSelectAll}
                className="rounded-full px-4 text-sm"
              >
                {selectedImageIds.size === images.length
                  ? dict.deselectAll
                  : dict.selectAll}
              </Button>
              <Button
                variant="destructive"
                onClick={handleBulkDelete}
                disabled={isProcessing || selectedImageIds.size === 0}
                className="rounded-full px-4 text-sm flex items-center gap-2"
              >
                {isProcessing ? (
                  <Loader2 className="w-4 h-4 animate-spin" />
                ) : (
                  <Trash2 className="w-4 h-4" />
                )}
                {dict.deleteSelected}
              </Button>
            </div>
          </div>
        )}
      </div>

      <input
        type="file"
        ref={fileInputRef}
        className="hidden"
        accept="image/jpeg,image/png,image/jpg,image/webp"
        onChange={handleFileSelect}
        disabled={isLoading || disabled || images.length >= maxImages}
        multiple
      />

      <div className="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-5 gap-4 md:gap-5">
        {images.map((image, index) => (
          <div
            key={image.id}
            role="button"
            tabIndex={0}
            aria-pressed={
              selectionMode ? selectedImageIds.has(image.id) : undefined
            }
            aria-label={`${dict.selectForDeletion} ${index + 1}`}
            className={cn(
              'relative group aspect-square rounded-xl overflow-hidden bg-gray-100 shadow-md transition-all duration-300 ease-in-out',
              selectionMode
                ? 'cursor-pointer'
                : 'cursor-pointer hover:shadow-lg',
              selectedImageIds.has(image.id) &&
                'ring-4 ring-offset-2 ring-cyan-500'
            )}
            onClick={() => handleImageClick(index)}
            onKeyDown={(e) => {
              if (e.key === 'Enter' || e.key === ' ') {
                e.preventDefault();
                handleImageClick(index);
              }
            }}
          >
            <Image
              src={getRelativeCloudinaryPath(image.url)}
              alt={`${dict.title} ${index + 1}`}
              fill
              className={cn(
                'object-cover transition-transform duration-300',
                !selectionMode && 'group-hover:scale-105'
              )}
              sizes="(max-width: 640px) 50vw, (max-width: 768px) 33vw, (max-width: 1024px) 25vw, 20vw"
              priority={index < 2}
            />
            {selectionMode && (
              <div className="absolute inset-0 bg-black/30 flex items-center justify-center transition-opacity opacity-0 group-hover:opacity-100">
                {selectedImageIds.has(image.id) ? (
                  <CheckCircle2 className="w-10 h-10 text-white drop-shadow-lg" />
                ) : (
                  <MinusSquare className="w-10 h-10 text-white/70 drop-shadow-lg" />
                )}
              </div>
            )}
            {!disabled && !selectionMode && (
              <div
                className={cn(
                  'absolute top-2 z-10 flex gap-1.5 opacity-85 group-hover:opacity-100 transition-opacity duration-200',
                  direction === 'rtl' ? 'left-2' : 'right-2'
                )}
                onClick={handleControlClick}
              >
                <Button
                  variant="secondary"
                  size="icon"
                  className={cn(
                    'w-8 h-8 rounded-full shadow-md border border-white/30 bg-black/40 text-white hover:bg-black/60 transition-colors',
                    image.isMain ? 'cursor-default' : 'hover:text-yellow-300'
                  )}
                  onClick={(e) => handleSetMainImage(image.id, true, e)}
                  disabled={image.isMain || isLoading}
                  title={image.isMain ? dict.mainBadge : dict.setAsMainTooltip}
                  aria-label={`${dict.setAsMainTooltip} ${index + 1}`}
                >
                  <Star
                    className={cn(
                      'w-4 h-4 transition-colors',
                      image.isMain
                        ? 'text-yellow-400 fill-yellow-400'
                        : 'text-white'
                    )}
                  />
                </Button>
                <Button
                  variant="secondary"
                  size="icon"
                  className="w-8 h-8 rounded-full shadow-md border border-white/30 bg-black/40 text-white hover:bg-red-600 hover:border-red-700 transition-colors"
                  onClick={(e) => requestDelete(image.id, e)}
                  disabled={isLoading}
                  title={dict.deleteTooltip}
                  aria-label={`${dict.deleteTooltip} ${index + 1}`}
                >
                  <Trash2 className="w-4 h-4" />
                </Button>
              </div>
            )}
            {image.isMain && !selectionMode && (
              <Badge
                className={cn(
                  'absolute bottom-2 rounded-full px-2.5 py-0.5 text-xs font-medium shadow-md text-white bg-gradient-to-r from-cyan-500 to-pink-500 border-none',
                  direction === 'rtl' ? 'right-2' : 'left-2'
                )}
              >
                {dict.mainBadge}
              </Badge>
            )}
          </div>
        ))}

        {!disabled && !selectionMode && images.length < maxImages && (
          <div
            onClick={triggerFileInput}
            className="flex flex-col items-center justify-center text-center p-4 aspect-square rounded-xl border-2 border-dashed border-cyan-300/70 bg-cyan-50/30 hover:bg-cyan-50/60 hover:border-cyan-400 transition-colors duration-300 cursor-pointer group"
          >
            <Upload className="w-8 h-8 text-cyan-500 mb-2 transition-transform group-hover:scale-110" />
            <span className="text-sm font-medium text-cyan-700">
              {dict.uploadPlaceholder.title}
            </span>
            <span className="text-xs text-cyan-600/90 mt-1">
              {dict.uploadPlaceholder.remaining.replace(
                '{{count}}',
                getRemainingSlots().toString()
              )}
            </span>
            <span className="text-xs text-cyan-500/80 mt-1">
              {dict.uploadPlaceholder.prompt}
            </span>
          </div>
        )}

        {uploadingFiles.map((_, index) => (
          <div
            key={`uploading-${index}`}
            className="relative aspect-square rounded-xl overflow-hidden bg-gray-200 shadow-md"
          >
            <div className="absolute inset-0 flex flex-col items-center justify-center">
              <Loader2 className="w-8 h-8 text-cyan-500 animate-spin mb-2" />
              <span className="text-xs text-gray-600 text-center px-2">
                {dict.uploadingPlaceholder}
              </span>
            </div>
            <div className="absolute bottom-0 left-0 right-0 bg-cyan-500 h-1 animate-pulse"></div>
          </div>
        ))}
      </div>

      {images.length === 0 &&
        uploadingFiles.length === 0 &&
        !disabled &&
        !selectionMode && (
          <div className="text-center py-16 mt-6 bg-gradient-to-br from-cyan-50/20 to-pink-50/20 rounded-xl border border-dashed border-gray-300">
            <Camera className="w-12 h-12 mx-auto text-gray-400/80" />
            <p className="mt-4 text-gray-600 font-medium">
              {dict.emptyState.title}
            </p>
            <p className="text-sm text-gray-500 mt-1 px-4">
              {dict.emptyState.description}
            </p>
          </div>
        )}
      {images.length === 0 && disabled && (
        <div className="text-center py-16 mt-6 bg-gray-50/50 rounded-xl border border-gray-200">
          <Camera className="w-12 h-12 mx-auto text-gray-400" />
          <p className="mt-4 text-gray-500 font-medium">
            {dict.emptyStateDisabled.title}
          </p>
        </div>
      )}

      <Dialog open={deleteConfirmOpen} onOpenChange={setDeleteConfirmOpen}>
        <DialogContent
          className="sm:max-w-md bg-white/95 backdrop-blur-md rounded-2xl shadow-2xl border-none p-6"
          dir={direction}
        >
          <DialogHeader>
            <DialogTitle className="text-lg font-semibold text-gray-800">
              {dict.deleteDialog.title}
            </DialogTitle>
            <DialogDescription className="text-sm text-gray-600 mt-2">
              {dict.deleteDialog.description}
            </DialogDescription>
          </DialogHeader>
          <DialogFooter className="mt-6 flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2 sm:space-x-reverse gap-2">
            <Button
              type="button"
              variant="outline"
              onClick={() => setDeleteConfirmOpen(false)}
              disabled={isLoading}
              className="rounded-full px-5"
            >
              {dict.deleteDialog.cancel}
            </Button>
            <Button
              type="button"
              variant="destructive"
              onClick={confirmDelete}
              disabled={isLoading}
              className="rounded-full px-5 flex items-center gap-2"
            >
              {isProcessing ? (
                <Loader2 className="w-4 h-4 animate-spin" />
              ) : (
                <Trash2 className="w-4 h-4" />
              )}
              <span>{dict.deleteDialog.confirm}</span>
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>

      <Dialog open={showImageViewer} onOpenChange={setShowImageViewer}>
        <DialogContent
          className="p-0 m-0 w-screen h-screen max-w-none sm:max-w-full sm:h-full bg-black/90 backdrop-blur-sm border-none rounded-none flex items-center justify-center outline-none"
          aria-describedby={undefined}
          dir={direction}
        >
          <Button
            variant="ghost"
            size="icon"
            className={cn(
              'absolute top-4 z-50 bg-black/40 hover:bg-black/60 text-white rounded-full w-10 h-10 sm:w-12 sm:h-12 transition-colors',
              direction === 'rtl' ? 'right-4' : 'left-4'
            )}
            onClick={closeImageViewer}
            aria-label={dict.imageViewer.closeLabel}
          >
            <X className="w-6 h-6" />
          </Button>
          {selectedViewerIndex !== null && images[selectedViewerIndex] && (
            <div className="relative w-full h-full flex items-center justify-center">
              <div className="relative w-[95%] h-[85%] sm:w-[90%] sm:h-[90%]">
                <Image
                  src={getRelativeCloudinaryPath(
                    images[selectedViewerIndex].url
                  )}
                  alt={dict.imageViewer.altText.replace(
                    '{{index}}',
                    (selectedViewerIndex + 1).toString()
                  )}
                  fill
                  className="object-contain select-none"
                  sizes="90vw"
                  priority
                />
              </div>
              <div className="absolute top-0 left-0 w-full h-full pointer-events-none">
                {images.length > 1 && (
                  <>
                    {/* Previous Button */}
                    <Button
                      variant="ghost"
                      size="icon"
                      className={cn(
                        'absolute top-1/2 transform -translate-y-1/2 z-40 bg-black/40 hover:bg-black/60 text-white rounded-full w-10 h-10 sm:w-12 sm:h-12 transition-colors pointer-events-auto',
                        direction === 'rtl'
                          ? 'right-2 sm:right-4'
                          : 'left-2 sm:left-4'
                      )}
                      onClick={(e) => {
                        e.stopPropagation();
                        handlePreviousImage();
                      }}
                      disabled={selectedViewerIndex === 0}
                      aria-label={dict.imageViewer.prevLabel}
                    >
                      {direction === 'rtl' ? (
                        <ChevronRight className="w-7 h-7" />
                      ) : (
                        <ChevronLeft className="w-7 h-7" />
                      )}
                    </Button>
                    {/* Next Button */}
                    <Button
                      variant="ghost"
                      size="icon"
                      className={cn(
                        'absolute top-1/2 transform -translate-y-1/2 z-40 bg-black/40 hover:bg-black/60 text-white rounded-full w-10 h-10 sm:w-12 sm:h-12 transition-colors pointer-events-auto',
                        direction === 'rtl'
                          ? 'left-2 sm:left-4'
                          : 'right-2 sm:right-4'
                      )}
                      onClick={(e) => {
                        e.stopPropagation();
                        handleNextImage();
                      }}
                      disabled={selectedViewerIndex === images.length - 1}
                      aria-label={dict.imageViewer.nextLabel}
                    >
                      {direction === 'rtl' ? (
                        <ChevronLeft className="w-7 h-7" />
                      ) : (
                        <ChevronRight className="w-7 h-7" />
                      )}
                    </Button>
                  </>
                )}
                {!disabled && (
                  <div
                    className={cn(
                      'absolute top-4 z-50 flex flex-col sm:flex-row gap-2 pointer-events-auto',
                      direction === 'rtl' ? 'left-4' : 'right-4'
                    )}
                  >
                    {!images[selectedViewerIndex].isMain && (
                      <Button
                        variant="secondary"
                        className="rounded-full bg-white/70 backdrop-blur-sm shadow-md hover:bg-white/90 text-gray-800 px-3 py-1.5 text-xs sm:text-sm border border-white/20 flex items-center gap-1.5"
                        onClick={(e) =>
                          handleSetMainImage(
                            images[selectedViewerIndex].id,
                            true,
                            e
                          )
                        }
                        size="sm"
                        disabled={isLoading}
                      >
                        <Star className="w-4 h-4" />
                        <span>{dict.imageViewer.setMainButton}</span>
                      </Button>
                    )}
                    <Button
                      variant="destructive"
                      className="rounded-full bg-red-600/80 hover:bg-red-700 text-white px-3 py-1.5 text-xs sm:text-sm shadow-md border-none flex items-center gap-1.5"
                      onClick={(e) =>
                        requestDelete(images[selectedViewerIndex].id, e)
                      }
                      size="sm"
                      disabled={isLoading}
                    >
                      <Trash2 className="w-4 h-4" />
                      <span>{dict.imageViewer.deleteButton}</span>
                    </Button>
                  </div>
                )}
                {images.length > 0 && (
                  <div className="absolute bottom-4 left-1/2 transform -translate-x-1/2 bg-black/60 text-white px-3 py-1 rounded-full text-xs sm:text-sm font-medium select-none">
                    {dict.imageViewer.counter
                      .replace(
                        '{{current}}',
                        (selectedViewerIndex + 1).toString()
                      )
                      .replace('{{total}}', images.length.toString())}
                  </div>
                )}
              </div>
            </div>
          )}
        </DialogContent>
      </Dialog>
    </div>
  );
};

export default PhotosSection;
--- End of Content for PhotosSection.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\profile\sections\PreferencesSection.tsx
--------------------------------------------------------------------------------
Content:
// src/app/(authenticated)/profile/components/dashboard/PreferencesSection.tsx
'use client';
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from '@/components/ui/tooltip';
import { Info, XCircle } from 'lucide-react';
import React, { useState, useEffect, useMemo } from 'react';
import { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import {
  Pencil,
  Save,
  X,
  FileText,
  SlidersHorizontal,
  MapPin,
  GraduationCap,
  Users,
  Sparkles,
  Heart,
  Briefcase,
  Shield,
  Palette,
  Smile,
} from 'lucide-react';
import { UserProfile } from '@/types/next-auth';
import { cn } from '@/lib/utils';
import {
  Gender,
  ServiceType,
  HeadCoveringType,
  KippahType,
  ReligiousJourney,
} from '@prisma/client';
import Autocomplete from 'react-google-autocomplete';
import { PreferencesSectionDict } from '@/types/dictionary'; // Assuming this is the correct path

// This would typically come from a context or a hook like `useI18n()`
// For this example, we'll pass it as a prop.
interface PreferencesSectionProps {
  profile: UserProfile | null;
  isEditing: boolean;
  viewOnly?: boolean;
  setIsEditing: (value: boolean) => void;
  onChange: (data: Partial<UserProfile>) => void;
  dictionary: PreferencesSectionDict; // Passing the dictionary as a prop
  locale: string; // Added locale for RTL/LTR support
}

const PreferencesSection: React.FC<PreferencesSectionProps> = ({
  profile,
  isEditing,
  viewOnly = false,
  setIsEditing,
  onChange,
  dictionary: t, // Using 't' as a shorthand for the dictionary
  locale, // Destructure locale
}) => {
  const [formData, setFormData] = useState<Partial<UserProfile>>({});
  const [initialData, setInitialData] = useState<Partial<UserProfile>>({});
  const [locationInputValue, setLocationInputValue] = useState('');
  const [originInputValue, setOriginInputValue] = useState('');

  const direction = locale === 'he' ? 'rtl' : 'ltr';

  // --- Map icons to values for dynamic options ---
  const iconMap: { [key: string]: React.ElementType } = {
    empathetic: Heart,
    driven: Briefcase,
    optimistic: Smile,
    family_oriented: Users,
    intellectual: GraduationCap,
    organized: Palette,
    calm: Heart,
    humorous: Smile,
    sociable: Users,
    sensitive: Heart,
    independent: MapPin,
    creative: Palette,
    honest: Shield,
    responsible: Shield,
    easy_going: Smile,
    no_strong_preference: Sparkles,
    travel: MapPin,
    sports: Briefcase,
    reading: GraduationCap,
    cooking_baking: Palette,
    music_playing_instrument: Palette,
    art_crafts: Palette,
    volunteering: Heart,
    learning_courses: GraduationCap,
    board_games_puzzles: Smile,
    movies_theater: Smile,
    dancing: Users,
    writing: GraduationCap,
    nature_hiking: MapPin,
    photography: Palette,
  };

  // --- Generate options from dictionary ---
  const useGenerateOptions = (
    optionsDict: { [key: string]: string },
    withIcon?: boolean
  ) => {
    return useMemo(
      () =>
        Object.entries(optionsDict).map(([value, label]) => ({
          value,
          label,
          ...(withIcon && { icon: iconMap[value] }),
        })),
      [optionsDict, withIcon]
    );
  };

  const religiousLevelOptions = useGenerateOptions(t.options.religiousLevels);
  const preferredReligiousJourneyOptions = useGenerateOptions(
    t.options.religiousJourneys
  );
  const educationPreferenceOptions = useGenerateOptions(t.options.education);
  const occupationPreferenceOptions = useGenerateOptions(t.options.occupation);
  const preferredShomerNegiahOptions = useGenerateOptions(
    t.options.shomerNegiah
  );
  const preferredPartnerHasChildrenOptions = useGenerateOptions(
    t.options.partnerHasChildren
  );
  const preferredOriginOptions = useGenerateOptions(t.options.origins);
  const preferredAliyaStatusOptions = useGenerateOptions(t.options.aliyaStatus);
  const maritalStatusOptions = useGenerateOptions(t.options.maritalStatus);
  const serviceTypeOptions = useGenerateOptions(t.options.serviceTypes);
  const headCoveringOptions = useGenerateOptions(t.options.headCovering);
  const kippahTypeOptions = useGenerateOptions(t.options.kippahType);
  const characterTraitsOptions = useGenerateOptions(t.options.traits, true);
  const hobbiesOptions = useGenerateOptions(t.options.hobbies, true);
  const contactPreferenceOptions = Object.entries(
    t.options.contactPreference
  ).map(([value, label]) => ({ value, label }));

  useEffect(() => {
    if (profile) {
      const nullToUndefined = <T,>(value: T | null): T | undefined =>
        value === null ? undefined : value;

      const newFormData: Partial<UserProfile> = {
        ...profile,
        preferredAgeMin: nullToUndefined(profile.preferredAgeMin),
        preferredAgeMax: nullToUndefined(profile.preferredAgeMax),
        preferredHeightMin: nullToUndefined(profile.preferredHeightMin),
        preferredHeightMax: nullToUndefined(profile.preferredHeightMax),
        matchingNotes: profile.matchingNotes ?? '',
        contactPreference: nullToUndefined(profile.contactPreference),
        preferredShomerNegiah: nullToUndefined(profile.preferredShomerNegiah),
        preferredPartnerHasChildren: nullToUndefined(
          profile.preferredPartnerHasChildren
        ),
        preferredAliyaStatus: nullToUndefined(profile.preferredAliyaStatus),
        preferredLocations: profile.preferredLocations ?? [],
        preferredReligiousLevels: profile.preferredReligiousLevels ?? [],
        preferredEducation: profile.preferredEducation ?? [],
        preferredOccupations: profile.preferredOccupations ?? [],
        preferredMaritalStatuses: profile.preferredMaritalStatuses ?? [],
        preferredOrigins: profile.preferredOrigins ?? [],
        preferredServiceTypes: profile.preferredServiceTypes ?? [],
        preferredHeadCoverings: profile.preferredHeadCoverings ?? [],
        preferredKippahTypes: profile.preferredKippahTypes ?? [],
        preferredCharacterTraits: profile.preferredCharacterTraits ?? [],
        preferredHobbies: profile.preferredHobbies ?? [],
        preferredReligiousJourneys: profile.preferredReligiousJourneys ?? [],
      };
      setFormData(newFormData);
      setInitialData(newFormData);
    }
  }, [profile]);

  useEffect(() => {
    if (!isEditing && initialData) {
      setFormData(initialData);
    }
  }, [isEditing, initialData]);

  const handleInputChange = (
    e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>
  ) => {
    const { name, value, type } = e.target;
    const field = name as keyof UserProfile;

    setFormData((prev) => {
      let processedValue: string | number | undefined;
      if (type === 'number') {
        const num = parseInt(value, 10);
        processedValue = isNaN(num) ? undefined : num;
      } else {
        processedValue = value === '' ? undefined : value;
      }
      return { ...prev, [field]: processedValue };
    });
  };

  const handleSelectChange = (field: keyof UserProfile, value: string) => {
    setFormData((prev) => ({
      ...prev,
      [field]:
        value === '' ||
        value === 'לא_משנה' || // Keep legacy values just in case
        value === 'any' ||
        value === 'no_preference'
          ? undefined
          : (value as UserProfile[typeof field]),
    }));
  };

  const handleMultiSelectChange = (field: keyof UserProfile, value: string) => {
    setFormData((prev) => {
      const currentValues =
        (Array.isArray(prev[field]) ? (prev[field] as string[]) : []) ?? [];
      let newValues;
      const resetValues = [
        'any',
        'no_preference',
        'לא_משנה',
        'no_strong_preference',
      ];

      if (resetValues.includes(value)) {
        newValues = currentValues.includes(value) ? [] : [value];
      } else {
        const filteredValues = currentValues.filter(
          (v) => !resetValues.includes(v)
        );
        newValues = filteredValues.includes(value)
          ? filteredValues.filter((v) => v !== value)
          : [...filteredValues, value];
      }
      return { ...prev, [field]: newValues };
    });
  };

  const handleAddItemToArray = (field: keyof UserProfile, value: string) => {
    if (!value) return;
    setFormData((prev) => {
      const currentValues =
        (Array.isArray(prev[field]) ? (prev[field] as string[]) : []) ?? [];
      if (currentValues.includes(value)) {
        return prev;
      }
      return { ...prev, [field]: [...currentValues, value] };
    });
  };

  const handleRemoveItemFromArray = (
    field: keyof UserProfile,
    value: string
  ) => {
    setFormData((prev) => {
      const currentValues =
        (Array.isArray(prev[field]) ? (prev[field] as string[]) : []) ?? [];
      return {
        ...prev,
        [field]: currentValues.filter((item) => item !== value),
      };
    });
  };

  const handleSave = () => {
    const dataToSave = { ...formData };
    onChange(dataToSave);
    setIsEditing(false);
    setInitialData(dataToSave);
  };

  const handleCancel = () => {
    setFormData(initialData);
    setIsEditing(false);
  };

  const renderMultiSelectBadges = (
    fieldValues: string[] | undefined | null,
    options: { value: string; label: string; icon?: React.ElementType }[],
    badgeClass: string = 'bg-sky-100 text-sky-700',
    emptyPlaceholder: string
  ) => {
    if (!fieldValues || fieldValues.length === 0) {
      return <p className="text-sm text-gray-500 italic">{emptyPlaceholder}</p>;
    }
    return fieldValues.map((value) => {
      const option = options.find((opt) => opt.value === value);
      return option ? (
        <Badge
          key={value}
          variant="secondary"
          className={cn(
            'ltr:mr-1 rtl:ml-1 mb-1 text-xs px-2 py-0.5 rounded-full flex items-center',
            badgeClass
          )}
        >
          {option.icon && <option.icon className="w-3 h-3 ltr:mr-1 rtl:ml-1" />}
          {option.label}
        </Badge>
      ) : null;
    });
  };

  const getSelectDisplayValue = (
    value: string | undefined | null,
    options: { value: string; label: string }[],
    placeholder: string
  ) => {
    if (!value)
      return <span className="text-gray-500 italic">{placeholder}</span>;
    const option = options.find((opt) => opt.value === value);
    return option ? (
      option.label
    ) : (
      <span className="text-gray-500 italic">{placeholder}</span>
    );
  };

  return (
    <div className="relative" dir={direction}>
      <div className="sticky top-4 z-10 bg-gradient-to-b from-white via-white/95 to-white/0 pt-4 pb-3 backdrop-blur-sm">
        {' '}
        <div className="container mx-auto max-w-screen-xl px-4">
          <div className="flex items-center justify-between">
            <div>
              <h1 className="text-xl md:text-2xl font-bold text-slate-800">
                {t.header.title}
              </h1>
              <p className="text-sm text-slate-500">
                {isEditing && !viewOnly
                  ? t.header.subtitleEdit
                  : t.header.subtitleView}
              </p>
            </div>
            {!viewOnly && (
              <div className="flex gap-2">
                {!isEditing ? (
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={() => setIsEditing(true)}
                    className="rounded-full shadow-sm hover:shadow-md transition-all duration-300 border-cyan-400 text-cyan-700 hover:bg-cyan-50"
                  >
                    <Pencil className="w-3.5 h-3.5 ltr:ml-1.5 rtl:mr-1.5" />
                    {t.buttons.edit}
                  </Button>
                ) : (
                  <>
                    <Button
                      variant="outline"
                      size="sm"
                      onClick={handleCancel}
                      className="rounded-full shadow-sm hover:shadow-md transition-all duration-300 border-gray-300 text-gray-700 hover:bg-gray-50"
                    >
                      <X className="w-3.5 h-3.5 ltr:ml-1.5 rtl:mr-1.5" />
                      {t.buttons.cancel}
                    </Button>
                    <Button
                      variant="default"
                      size="sm"
                      onClick={handleSave}
                      className="rounded-full shadow-sm hover:shadow-md transition-all duration-300 bg-cyan-600 hover:bg-cyan-700 text-white"
                    >
                      <Save className="w-3.5 h-3.5 ltr:ml-1.5 rtl:mr-1.5" />
                      {t.buttons.save}
                    </Button>
                  </>
                )}
              </div>
            )}
          </div>
        </div>
      </div>

      <div className="container mx-auto max-w-screen-xl py-6 px-4">
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
          {/* --- Column 1 --- */}
          <div className="space-y-6">
            <Card className="bg-white/80 backdrop-blur-md rounded-2xl shadow-lg border border-gray-200/40 overflow-hidden">
              <CardHeader className="bg-gradient-to-r from-slate-50/40 to-gray-100/40 border-b border-gray-200/50 p-4 flex items-center space-x-2 rtl:space-x-reverse">
                <FileText className="w-5 h-5 text-slate-600" />
                <CardTitle className="text-base font-semibold text-gray-700">
                  {t.cards.general.title}
                </CardTitle>
              </CardHeader>
              <CardContent className="p-4 md:p-6 space-y-5">
                <div>
                  <div className="flex items-center gap-1.5 mb-1.5">
                    <Label
                      htmlFor="matchingNotes"
                      className="text-sm font-medium text-gray-700"
                    >
                      {t.cards.general.notesLabel}
                    </Label>
                    <TooltipProvider delayDuration={100}>
                      <Tooltip>
                        <TooltipTrigger asChild>
                          <button
                            type="button"
                            aria-describedby="matchingNotes-tooltip"
                          >
                            <Info className="w-4 h-4 text-gray-400 hover:text-gray-600" />
                          </button>
                        </TooltipTrigger>
                        <TooltipContent
                          id="matchingNotes-tooltip"
                          side="top"
                          className="max-w-xs text-center"
                        >
                          <p>{t.cards.general.notesTooltip}</p>
                        </TooltipContent>
                      </Tooltip>
                    </TooltipProvider>
                  </div>
                  {isEditing ? (
                    <Textarea
                      id="matchingNotes"
                      name="matchingNotes"
                      value={formData.matchingNotes || ''}
                      onChange={handleInputChange}
                      placeholder={t.cards.general.notesPlaceholder}
                      className="text-sm focus:ring-cyan-500 min-h-[100px] rounded-lg"
                      rows={4}
                    />
                  ) : (
                    <p className="mt-1 text-sm text-gray-700 whitespace-pre-wrap min-h-[60px] bg-slate-50/70 p-3 rounded-lg border border-slate-200/50">
                      {formData.matchingNotes || (
                        <span className="text-gray-500 italic">
                          {t.cards.general.notesEmpty}
                        </span>
                      )}
                    </p>
                  )}
                </div>
                <div>
                  <Label
                    htmlFor="contactPreference"
                    className="block mb-1.5 text-xs font-medium text-gray-600"
                  >
                    {t.cards.general.contactPreferenceLabel}
                  </Label>
                  {isEditing ? (
                    <Select
                      name="contactPreference"
                      value={formData.contactPreference || ''}
                      onValueChange={(value: string) =>
                        handleSelectChange('contactPreference', value)
                      }
                    >
                      <SelectTrigger
                        id="contactPreference"
                        className="h-9 text-sm focus:ring-cyan-500"
                      >
                        <SelectValue
                          placeholder={
                            t.cards.general.contactPreferencePlaceholder
                          }
                        />
                      </SelectTrigger>
                      <SelectContent>
                        {contactPreferenceOptions.map((opt) => (
                          <SelectItem key={opt.value} value={opt.value}>
                            {opt.label}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  ) : (
                    <p className="text-sm text-gray-800 font-medium mt-1">
                      {getSelectDisplayValue(
                        formData.contactPreference,
                        contactPreferenceOptions,
                        t.cards.general.contactPreferenceEmpty
                      )}
                    </p>
                  )}
                </div>
              </CardContent>
            </Card>

            <Card className="bg-white/80 backdrop-blur-md rounded-2xl shadow-lg border border-gray-200/40 overflow-hidden">
              <CardHeader className="bg-gradient-to-r from-indigo-50/40 to-purple-50/40 border-b border-gray-200/50 p-4 flex items-center space-x-2 rtl:space-x-reverse">
                <SlidersHorizontal className="w-5 h-5 text-indigo-700" />
                <CardTitle className="text-base font-semibold text-gray-700">
                  {t.cards.ageAndHeight.title}
                </CardTitle>
              </CardHeader>
              <CardContent className="p-4 md:p-6">
                <div className="grid grid-cols-1 sm:grid-cols-2 gap-x-6 gap-y-5">
                  <fieldset>
                    <legend className="flex items-center gap-1.5 text-xs font-medium text-gray-600 mb-1.5">
                      {t.cards.ageAndHeight.ageLegend}
                      <TooltipProvider delayDuration={100}>
                        <Tooltip>
                          <TooltipTrigger asChild>
                            <button
                              type="button"
                              aria-describedby="age-range-tooltip"
                            >
                              <Info className="w-4 h-4 text-gray-400 hover:text-gray-600" />
                            </button>
                          </TooltipTrigger>
                          <TooltipContent id="age-range-tooltip" side="top">
                            <p>{t.cards.ageAndHeight.ageTooltip}</p>
                          </TooltipContent>
                        </Tooltip>
                      </TooltipProvider>
                    </legend>
                    <div className="flex items-center gap-2">
                      <Label htmlFor="preferredAgeMin" className="sr-only">
                        {t.cards.ageAndHeight.ageMinPlaceholder}
                      </Label>
                      <Input
                        id="preferredAgeMin"
                        type="number"
                        name="preferredAgeMin"
                        placeholder={t.cards.ageAndHeight.ageMinPlaceholder}
                        value={formData.preferredAgeMin ?? ''}
                        onChange={handleInputChange}
                        disabled={!isEditing}
                        className="h-9 text-sm focus:ring-cyan-500 disabled:bg-gray-100/70"
                      />
                      <span aria-hidden="true" className="text-gray-500">
                        -
                      </span>
                      <Label htmlFor="preferredAgeMax" className="sr-only">
                        {t.cards.ageAndHeight.ageMaxPlaceholder}
                      </Label>
                      <Input
                        id="preferredAgeMax"
                        type="number"
                        name="preferredAgeMax"
                        placeholder={t.cards.ageAndHeight.ageMaxPlaceholder}
                        value={formData.preferredAgeMax ?? ''}
                        onChange={handleInputChange}
                        disabled={!isEditing}
                        className="h-9 text-sm focus:ring-cyan-500 disabled:bg-gray-100/70"
                      />
                    </div>
                    {!isEditing &&
                      !formData.preferredAgeMin &&
                      !formData.preferredAgeMax && (
                        <p className="text-xs text-gray-500 italic mt-1">
                          {t.cards.ageAndHeight.ageEmpty}
                        </p>
                      )}
                  </fieldset>
                  <fieldset>
                    <legend className="block mb-1.5 text-xs font-medium text-gray-600">
                      {t.cards.ageAndHeight.heightLegend}
                    </legend>
                    <div className="flex items-center gap-2">
                      <Label htmlFor="preferredHeightMin" className="sr-only">
                        {t.cards.ageAndHeight.heightMinPlaceholder}
                      </Label>
                      <Input
                        id="preferredHeightMin"
                        type="number"
                        name="preferredHeightMin"
                        placeholder={t.cards.ageAndHeight.heightMinPlaceholder}
                        value={formData.preferredHeightMin ?? ''}
                        onChange={handleInputChange}
                        disabled={!isEditing}
                        className="h-9 text-sm focus:ring-cyan-500 disabled:bg-gray-100/70"
                      />
                      <span aria-hidden="true" className="text-gray-500">
                        -
                      </span>
                      <Label htmlFor="preferredHeightMax" className="sr-only">
                        {t.cards.ageAndHeight.heightMaxPlaceholder}
                      </Label>
                      <Input
                        id="preferredHeightMax"
                        type="number"
                        name="preferredHeightMax"
                        placeholder={t.cards.ageAndHeight.heightMaxPlaceholder}
                        value={formData.preferredHeightMax ?? ''}
                        onChange={handleInputChange}
                        disabled={!isEditing}
                        className="h-9 text-sm focus:ring-cyan-500 disabled:bg-gray-100/70"
                      />
                    </div>
                    {!isEditing &&
                      !formData.preferredHeightMin &&
                      !formData.preferredHeightMax && (
                        <p className="text-xs text-gray-500 italic mt-1">
                          {t.cards.ageAndHeight.heightEmpty}
                        </p>
                      )}
                  </fieldset>
                </div>
              </CardContent>
            </Card>
          </div>

          {/* --- Column 2 --- */}
          <div className="space-y-6">
            <Card className="bg-white/80 backdrop-blur-md rounded-2xl shadow-lg border border-gray-200/40 overflow-hidden">
              <CardHeader className="bg-gradient-to-r from-sky-50/40 to-blue-50/40 border-b border-gray-200/50 p-4 flex items-center space-x-2 rtl:space-x-reverse">
                <MapPin className="w-5 h-5 text-sky-700" />
                <CardTitle className="text-base font-semibold text-gray-700">
                  {t.cards.locationAndReligion.title}
                </CardTitle>
              </CardHeader>
              <CardContent className="p-4 md:p-6 space-y-6">
                <div>
                  <Label
                    htmlFor="preferred-locations-input"
                    className="block mb-2 text-xs font-medium text-gray-600"
                  >
                    {t.cards.locationAndReligion.locationsLabel}
                  </Label>
                  {isEditing ? (
                    <div className="space-y-2">
                      <div className="flex flex-wrap gap-1.5">
                        {(formData.preferredLocations || []).map((loc) => (
                          <Badge
                            key={loc}
                            variant="secondary"
                            className="bg-sky-100 text-sky-800 rounded-full px-2 py-1 text-sm font-normal"
                          >
                            <span>{loc}</span>
                            <button
                              type="button"
                              className="ltr:mr-1.5 rtl:ml-1.5 text-sky-600 hover:text-sky-900"
                              onClick={() =>
                                handleRemoveItemFromArray(
                                  'preferredLocations',
                                  loc
                                )
                              }
                              aria-label={t.cards.locationAndReligion.locationsRemoveLabel.replace(
                                '{{loc}}',
                                loc
                              )}
                            >
                              <XCircle className="w-3.5 h-3.5" />
                            </button>
                          </Badge>
                        ))}
                      </div>
                      <Autocomplete
                        id="preferred-locations-input"
                        apiKey={process.env.NEXT_PUBLIC_GOOGLE_MAPS_API_KEY}
                        value={locationInputValue}
                        onChange={(e: React.ChangeEvent<HTMLInputElement>) =>
                          setLocationInputValue(e.target.value)
                        }
                        onPlaceSelected={(place) => {
                          const cityComponent = place.address_components?.find(
                            (component) => component.types.includes('locality')
                          );
                          const selectedCity =
                            cityComponent?.long_name ||
                            place.formatted_address ||
                            '';
                          handleAddItemToArray(
                            'preferredLocations',
                            selectedCity
                          );
                          setLocationInputValue('');
                        }}
                        options={{
                          types: ['(cities)'],
                          componentRestrictions: { country: 'il' },
                        }}
                        className="w-full h-9 text-sm p-2 border border-gray-300 rounded-md focus:ring-cyan-500 focus:border-cyan-500"
                        placeholder={
                          t.cards.locationAndReligion.locationsPlaceholder
                        }
                      />
                    </div>
                  ) : (
                    <div className="mt-1 flex flex-wrap gap-1.5">
                      {!formData.preferredLocations ||
                      formData.preferredLocations.length === 0 ? (
                        <p className="text-sm text-gray-500 italic">
                          {t.cards.locationAndReligion.locationsEmpty}
                        </p>
                      ) : (
                        formData.preferredLocations.map((loc) => (
                          <Badge
                            key={loc}
                            variant="secondary"
                            className="ltr:mr-1 rtl:ml-1 mb-1 bg-sky-100 text-sky-700 text-xs px-2 py-0.5 rounded-full"
                          >
                            {loc}
                          </Badge>
                        ))
                      )}
                    </div>
                  )}
                </div>
                <fieldset>
                  <legend className="flex items-center gap-1.5 text-xs font-medium text-gray-600 mb-2">
                    {t.cards.locationAndReligion.religiousLevelsLegend}
                    <TooltipProvider delayDuration={100}>
                      <Tooltip>
                        <TooltipTrigger asChild>
                          <button
                            type="button"
                            aria-describedby="religious-level-tooltip"
                          >
                            <Info className="w-4 h-4 text-gray-400 hover:text-gray-600" />
                          </button>
                        </TooltipTrigger>
                        <TooltipContent
                          id="religious-level-tooltip"
                          side="top"
                          className="max-w-xs text-center"
                        >
                          <p>
                            {t.cards.locationAndReligion.religiousLevelsTooltip}
                          </p>
                        </TooltipContent>
                      </Tooltip>
                    </TooltipProvider>
                  </legend>
                  {isEditing ? (
                    <div className="flex flex-wrap gap-2">
                      {religiousLevelOptions.map((level) => (
                        <Button
                          key={level.value}
                          type="button"
                          variant={
                            (formData.preferredReligiousLevels || []).includes(
                              level.value
                            )
                              ? 'default'
                              : 'outline'
                          }
                          size="sm"
                          onClick={() =>
                            handleMultiSelectChange(
                              'preferredReligiousLevels',
                              level.value
                            )
                          }
                          className={cn(
                            'rounded-full text-xs px-3 py-1.5 transition-all',
                            (formData.preferredReligiousLevels || []).includes(
                              level.value
                            )
                              ? 'bg-pink-500 hover:bg-pink-600 text-white border-pink-500'
                              : 'border-gray-300 text-gray-600 hover:bg-gray-50 hover:border-gray-400'
                          )}
                        >
                          {level.label}
                        </Button>
                      ))}
                    </div>
                  ) : (
                    <div className="mt-1 flex flex-wrap gap-1.5">
                      {renderMultiSelectBadges(
                        formData.preferredReligiousLevels,
                        religiousLevelOptions,
                        'bg-pink-100 text-pink-700',
                        t.cards.locationAndReligion.religiousLevelsEmpty
                      )}
                    </div>
                  )}
                </fieldset>

                <fieldset>
                  <legend className="block mb-2 text-xs font-medium text-gray-600">
                    {t.cards.locationAndReligion.religiousJourneysLegend}
                  </legend>
                  {isEditing ? (
                    <div className="flex flex-wrap gap-2">
                      {preferredReligiousJourneyOptions.map((opt) => (
                        <Button
                          key={opt.value}
                          type="button"
                          variant={
                            (
                              formData.preferredReligiousJourneys || []
                            ).includes(opt.value as ReligiousJourney)
                              ? 'default'
                              : 'outline'
                          }
                          size="sm"
                          onClick={() =>
                            handleMultiSelectChange(
                              'preferredReligiousJourneys',
                              opt.value
                            )
                          }
                          className={cn(
                            'rounded-full text-xs px-3 py-1.5 transition-all',
                            (
                              formData.preferredReligiousJourneys || []
                            ).includes(opt.value as ReligiousJourney)
                              ? 'bg-cyan-500 hover:bg-cyan-600 text-white border-cyan-500'
                              : 'border-gray-300 text-gray-600 hover:bg-gray-50 hover:border-gray-400'
                          )}
                        >
                          {opt.label}
                        </Button>
                      ))}
                    </div>
                  ) : (
                    <div className="mt-1 flex flex-wrap gap-1.5">
                      {renderMultiSelectBadges(
                        formData.preferredReligiousJourneys as string[],
                        preferredReligiousJourneyOptions,
                        'bg-cyan-100 text-cyan-700',
                        t.cards.locationAndReligion.religiousJourneysEmpty
                      )}
                    </div>
                  )}
                </fieldset>

                <div>
                  <Label
                    htmlFor="preferredShomerNegiah"
                    className="block mb-1.5 text-xs font-medium text-gray-600"
                  >
                    {t.cards.locationAndReligion.shomerNegiahLabel}
                  </Label>
                  {isEditing ? (
                    <Select
                      name="preferredShomerNegiah"
                      value={formData.preferredShomerNegiah || ''}
                      onValueChange={(value) =>
                        handleSelectChange('preferredShomerNegiah', value)
                      }
                    >
                      <SelectTrigger
                        id="preferredShomerNegiah"
                        className="h-9 text-sm focus:ring-cyan-500"
                      >
                        <SelectValue
                          placeholder={
                            t.cards.locationAndReligion.shomerNegiahPlaceholder
                          }
                        />
                      </SelectTrigger>
                      <SelectContent>
                        {preferredShomerNegiahOptions.map((opt) => (
                          <SelectItem key={opt.value} value={opt.value}>
                            {opt.label}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  ) : (
                    <p className="text-sm text-gray-800 font-medium mt-1">
                      {getSelectDisplayValue(
                        formData.preferredShomerNegiah,
                        preferredShomerNegiahOptions,
                        ''
                      )}
                    </p>
                  )}
                </div>
                {profile?.gender === Gender.MALE && (
                  <fieldset>
                    <legend className="block mb-2 text-xs font-medium text-gray-600">
                      {t.cards.locationAndReligion.headCoveringLegend}
                    </legend>
                    {isEditing ? (
                      <div className="flex flex-wrap gap-2">
                        {headCoveringOptions.map((opt) => (
                          <Button
                            key={opt.value}
                            type="button"
                            variant={
                              (formData.preferredHeadCoverings || []).includes(
                                opt.value as HeadCoveringType
                              )
                                ? 'default'
                                : 'outline'
                            }
                            size="sm"
                            onClick={() =>
                              handleMultiSelectChange(
                                'preferredHeadCoverings',
                                opt.value as HeadCoveringType
                              )
                            }
                            className={cn(
                              'rounded-full text-xs px-3 py-1.5 transition-all',
                              (formData.preferredHeadCoverings || []).includes(
                                opt.value as HeadCoveringType
                              )
                                ? 'bg-purple-500 hover:bg-purple-600 text-white border-purple-500'
                                : 'border-gray-300 text-gray-600 hover:bg-gray-50 hover:border-gray-400'
                            )}
                          >
                            {opt.label}
                          </Button>
                        ))}
                      </div>
                    ) : (
                      <div className="mt-1 flex flex-wrap gap-1.5">
                        {renderMultiSelectBadges(
                          formData.preferredHeadCoverings as string[],
                          headCoveringOptions,
                          'bg-purple-100 text-purple-700',
                          t.cards.locationAndReligion.headCoveringEmpty
                        )}
                      </div>
                    )}
                  </fieldset>
                )}
                {profile?.gender === Gender.FEMALE && (
                  <fieldset>
                    <legend className="block mb-2 text-xs font-medium text-gray-600">
                      {t.cards.locationAndReligion.kippahTypeLegend}
                    </legend>
                    {isEditing ? (
                      <div className="flex flex-wrap gap-2">
                        {kippahTypeOptions.map((opt) => (
                          <Button
                            key={opt.value}
                            type="button"
                            variant={
                              (formData.preferredKippahTypes || []).includes(
                                opt.value as KippahType
                              )
                                ? 'default'
                                : 'outline'
                            }
                            size="sm"
                            onClick={() =>
                              handleMultiSelectChange(
                                'preferredKippahTypes',
                                opt.value as KippahType
                              )
                            }
                            className={cn(
                              'rounded-full text-xs px-3 py-1.5 transition-all',
                              (formData.preferredKippahTypes || []).includes(
                                opt.value as KippahType
                              )
                                ? 'bg-orange-500 hover:bg-orange-600 text-white border-orange-500'
                                : 'border-gray-300 text-gray-600 hover:bg-gray-50 hover:border-gray-400'
                            )}
                          >
                            {opt.label}
                          </Button>
                        ))}
                      </div>
                    ) : (
                      <div className="mt-1 flex flex-wrap gap-1.5">
                        {renderMultiSelectBadges(
                          formData.preferredKippahTypes as string[],
                          kippahTypeOptions,
                          'bg-orange-100 text-orange-700',
                          t.cards.locationAndReligion.kippahTypeEmpty
                        )}
                      </div>
                    )}
                  </fieldset>
                )}
              </CardContent>
            </Card>
            <Card className="bg-white/80 backdrop-blur-md rounded-2xl shadow-lg border border-gray-200/40 overflow-hidden">
              <CardHeader className="bg-gradient-to-r from-teal-50/40 to-green-50/40 border-b border-gray-200/50 p-4 flex items-center space-x-2 rtl:space-x-reverse">
                <GraduationCap className="w-5 h-5 text-teal-700" />
                <CardTitle className="text-base font-semibold text-gray-700">
                  {t.cards.educationAndCareer.title}
                </CardTitle>
              </CardHeader>
              <CardContent className="p-4 md:p-6 space-y-6">
                <fieldset>
                  <legend className="block mb-2 text-xs font-medium text-gray-600">
                    {t.cards.educationAndCareer.educationLegend}
                  </legend>
                  {isEditing ? (
                    <div className="flex flex-wrap gap-2">
                      {educationPreferenceOptions.map((edu) => (
                        <Button
                          key={edu.value}
                          type="button"
                          variant={
                            (formData.preferredEducation || []).includes(
                              edu.value
                            )
                              ? 'default'
                              : 'outline'
                          }
                          size="sm"
                          onClick={() =>
                            handleMultiSelectChange(
                              'preferredEducation',
                              edu.value
                            )
                          }
                          className={cn(
                            'rounded-full text-xs px-3 py-1.5 transition-all',
                            (formData.preferredEducation || []).includes(
                              edu.value
                            )
                              ? 'bg-teal-500 hover:bg-teal-600 text-white border-teal-500'
                              : 'border-gray-300 text-gray-600 hover:bg-gray-50 hover:border-gray-400'
                          )}
                        >
                          {edu.label}
                        </Button>
                      ))}
                    </div>
                  ) : (
                    <div className="mt-1 flex flex-wrap gap-1.5">
                      {renderMultiSelectBadges(
                        formData.preferredEducation,
                        educationPreferenceOptions,
                        'bg-teal-100 text-teal-700',
                        t.cards.educationAndCareer.educationEmpty
                      )}
                    </div>
                  )}
                </fieldset>
                <fieldset>
                  <legend className="block mb-2 text-xs font-medium text-gray-600">
                    {t.cards.educationAndCareer.occupationLegend}
                  </legend>
                  {isEditing ? (
                    <div className="flex flex-wrap gap-2">
                      {occupationPreferenceOptions.map((occ) => (
                        <Button
                          key={occ.value}
                          type="button"
                          variant={
                            (formData.preferredOccupations || []).includes(
                              occ.value
                            )
                              ? 'default'
                              : 'outline'
                          }
                          size="sm"
                          onClick={() =>
                            handleMultiSelectChange(
                              'preferredOccupations',
                              occ.value
                            )
                          }
                          className={cn(
                            'rounded-full text-xs px-3 py-1.5 transition-all',
                            (formData.preferredOccupations || []).includes(
                              occ.value
                            )
                              ? 'bg-green-500 hover:bg-green-600 text-white border-green-500'
                              : 'border-gray-300 text-gray-600 hover:bg-gray-50 hover:border-gray-400'
                          )}
                        >
                          {occ.label}
                        </Button>
                      ))}
                    </div>
                  ) : (
                    <div className="mt-1 flex flex-wrap gap-1.5">
                      {renderMultiSelectBadges(
                        formData.preferredOccupations,
                        occupationPreferenceOptions,
                        'bg-green-100 text-green-700',
                        t.cards.educationAndCareer.occupationEmpty
                      )}
                    </div>
                  )}
                </fieldset>
                <fieldset>
                  <legend className="block mb-2 text-xs font-medium text-gray-600">
                    {t.cards.educationAndCareer.serviceTypeLegend}
                  </legend>
                  {isEditing ? (
                    <div className="flex flex-wrap gap-2">
                      {serviceTypeOptions.map((opt) => (
                        <Button
                          key={opt.value}
                          type="button"
                          variant={
                            (formData.preferredServiceTypes || []).includes(
                              opt.value as ServiceType
                            )
                              ? 'default'
                              : 'outline'
                          }
                          size="sm"
                          onClick={() =>
                            handleMultiSelectChange(
                              'preferredServiceTypes',
                              opt.value as ServiceType
                            )
                          }
                          className={cn(
                            'rounded-full text-xs px-3 py-1.5 transition-all',
                            (formData.preferredServiceTypes || []).includes(
                              opt.value as ServiceType
                            )
                              ? 'bg-lime-500 hover:bg-lime-600 text-white border-lime-500'
                              : 'border-gray-300 text-gray-600 hover:bg-gray-50 hover:border-gray-400'
                          )}
                        >
                          {opt.label}
                        </Button>
                      ))}
                    </div>
                  ) : (
                    <div className="mt-1 flex flex-wrap gap-1.5">
                      {renderMultiSelectBadges(
                        formData.preferredServiceTypes as string[],
                        serviceTypeOptions,
                        'bg-lime-100 text-lime-700',
                        t.cards.educationAndCareer.serviceTypeEmpty
                      )}
                    </div>
                  )}
                </fieldset>
              </CardContent>
            </Card>
          </div>

          {/* --- Column 3 --- */}
          <div className="space-y-6">
            <Card className="bg-white/80 backdrop-blur-md rounded-2xl shadow-lg border border-gray-200/40 overflow-hidden">
              <CardHeader className="bg-gradient-to-r from-rose-50/40 to-fuchsia-50/40 border-b border-gray-200/50 p-4 flex items-center space-x-2 rtl:space-x-reverse">
                <Users className="w-5 h-5 text-rose-700" />
                <CardTitle className="text-base font-semibold text-gray-700">
                  {t.cards.personalBackground.title}
                </CardTitle>
              </CardHeader>
              <CardContent className="p-4 md:p-6 space-y-6">
                <fieldset>
                  <legend className="block mb-2 text-xs font-medium text-gray-600">
                    {t.cards.personalBackground.maritalStatusLegend}
                  </legend>
                  {isEditing ? (
                    <div className="flex flex-wrap gap-2">
                      {maritalStatusOptions.map((opt) => (
                        <Button
                          key={opt.value}
                          type="button"
                          variant={
                            (formData.preferredMaritalStatuses || []).includes(
                              opt.value
                            )
                              ? 'default'
                              : 'outline'
                          }
                          size="sm"
                          onClick={() =>
                            handleMultiSelectChange(
                              'preferredMaritalStatuses',
                              opt.value
                            )
                          }
                          className={cn(
                            'rounded-full text-xs px-3 py-1.5 transition-all',
                            (formData.preferredMaritalStatuses || []).includes(
                              opt.value
                            )
                              ? 'bg-rose-500 hover:bg-rose-600 text-white border-rose-500'
                              : 'border-gray-300 text-gray-600 hover:bg-gray-50 hover:border-gray-400'
                          )}
                        >
                          {opt.label}
                        </Button>
                      ))}
                    </div>
                  ) : (
                    <div className="mt-1 flex flex-wrap gap-1.5">
                      {renderMultiSelectBadges(
                        formData.preferredMaritalStatuses,
                        maritalStatusOptions,
                        'bg-rose-100 text-rose-700',
                        t.cards.personalBackground.maritalStatusEmpty
                      )}
                    </div>
                  )}
                </fieldset>
                <div>
                  <Label
                    htmlFor="preferredPartnerHasChildren"
                    className="block mb-1.5 text-xs font-medium text-gray-600"
                  >
                    {t.cards.personalBackground.partnerHasChildrenLabel}
                  </Label>
                  {isEditing ? (
                    <Select
                      name="preferredPartnerHasChildren"
                      value={formData.preferredPartnerHasChildren || ''}
                      onValueChange={(value) =>
                        handleSelectChange('preferredPartnerHasChildren', value)
                      }
                    >
                      <SelectTrigger
                        id="preferredPartnerHasChildren"
                        className="h-9 text-sm focus:ring-cyan-500"
                      >
                        <SelectValue
                          placeholder={
                            t.cards.personalBackground
                              .partnerHasChildrenPlaceholder
                          }
                        />
                      </SelectTrigger>
                      <SelectContent>
                        {preferredPartnerHasChildrenOptions.map((opt) => (
                          <SelectItem key={opt.value} value={opt.value}>
                            {opt.label}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  ) : (
                    <p className="text-sm text-gray-800 font-medium mt-1">
                      {getSelectDisplayValue(
                        formData.preferredPartnerHasChildren,
                        preferredPartnerHasChildrenOptions,
                        ''
                      )}
                    </p>
                  )}
                </div>
                <fieldset>
                  <legend className="block mb-2 text-xs font-medium text-gray-600">
                    {t.cards.personalBackground.originLegend}
                  </legend>
                  {isEditing ? (
                    <div className="space-y-3">
                      <div className="flex flex-wrap gap-2">
                        {preferredOriginOptions.map((opt) => (
                          <Button
                            key={opt.value}
                            type="button"
                            variant={
                              (formData.preferredOrigins || []).includes(
                                opt.value
                              )
                                ? 'default'
                                : 'outline'
                            }
                            size="sm"
                            onClick={() =>
                              handleMultiSelectChange(
                                'preferredOrigins',
                                opt.value
                              )
                            }
                            className={cn(
                              'rounded-full text-xs px-3 py-1.5 transition-all',
                              (formData.preferredOrigins || []).includes(
                                opt.value
                              )
                                ? 'bg-fuchsia-500 hover:bg-fuchsia-600 text-white border-fuchsia-500'
                                : 'border-gray-300 text-gray-600 hover:bg-gray-50 hover:border-gray-400'
                            )}
                          >
                            {opt.label}
                          </Button>
                        ))}
                      </div>
                      <div className="space-y-2">
                        <div className="flex flex-wrap gap-1.5">
                          {(formData.preferredOrigins || [])
                            .filter(
                              (origin) =>
                                !preferredOriginOptions.some(
                                  (opt) => opt.value === origin
                                )
                            )
                            .map((origin) => (
                              <Badge
                                key={origin}
                                variant="secondary"
                                className="bg-fuchsia-100 text-fuchsia-800 rounded-full px-2 py-1 text-sm font-normal"
                              >
                                <span>{origin}</span>
                                <button
                                  type="button"
                                  className="ltr:mr-1.5 rtl:ml-1.5 text-fuchsia-600 hover:text-fuchsia-900"
                                  onClick={() =>
                                    handleRemoveItemFromArray(
                                      'preferredOrigins',
                                      origin
                                    )
                                  }
                                  aria-label={t.cards.personalBackground.originRemoveLabel.replace(
                                    '{{origin}}',
                                    origin
                                  )}
                                >
                                  <XCircle className="w-3.5 h-3.5" />
                                </button>
                              </Badge>
                            ))}
                        </div>
                        <Label
                          htmlFor="preferred-origins-input"
                          className="sr-only"
                        >
                          {t.cards.personalBackground.originPlaceholder}
                        </Label>
                        <Autocomplete
                          id="preferred-origins-input"
                          apiKey={process.env.NEXT_PUBLIC_GOOGLE_MAPS_API_KEY}
                          value={originInputValue}
                          onChange={(e: React.ChangeEvent<HTMLInputElement>) =>
                            setOriginInputValue(e.target.value)
                          }
                          onPlaceSelected={(place) => {
                            const countryComponent =
                              place.address_components?.find((component) =>
                                component.types.includes('country')
                              );
                            const selectedCountry =
                              countryComponent?.long_name ||
                              place.formatted_address ||
                              '';
                            handleAddItemToArray(
                              'preferredOrigins',
                              selectedCountry
                            );
                            setOriginInputValue('');
                          }}
                          options={{ types: ['country'] }}
                          className="w-full h-9 text-sm p-2 border border-gray-300 rounded-md focus:ring-cyan-500 focus:border-cyan-500"
                          placeholder={
                            t.cards.personalBackground.originPlaceholder
                          }
                        />
                      </div>
                    </div>
                  ) : (
                    <div className="mt-1 flex flex-wrap gap-1.5">
                      {!formData.preferredOrigins ||
                      formData.preferredOrigins.length === 0 ? (
                        <p className="text-sm text-gray-500 italic">
                          {t.cards.personalBackground.originEmpty}
                        </p>
                      ) : (
                        formData.preferredOrigins.map((originValue) => {
                          const option = preferredOriginOptions.find(
                            (opt) => opt.value === originValue
                          );
                          const label = option ? option.label : originValue;
                          return (
                            <Badge
                              key={originValue}
                              variant="secondary"
                              className="ltr:mr-1 rtl:ml-1 mb-1 bg-fuchsia-100 text-fuchsia-700 text-xs px-2 py-0.5 rounded-full"
                            >
                              {label}
                            </Badge>
                          );
                        })
                      )}
                    </div>
                  )}
                </fieldset>
                <div>
                  <Label
                    htmlFor="preferredAliyaStatus"
                    className="block mb-1.5 text-xs font-medium text-gray-600"
                  >
                    {t.cards.personalBackground.aliyaStatusLabel}
                  </Label>
                  {isEditing ? (
                    <Select
                      name="preferredAliyaStatus"
                      value={formData.preferredAliyaStatus || ''}
                      onValueChange={(value) =>
                        handleSelectChange('preferredAliyaStatus', value)
                      }
                    >
                      <SelectTrigger
                        id="preferredAliyaStatus"
                        className="h-9 text-sm focus:ring-cyan-500"
                      >
                        <SelectValue
                          placeholder={
                            t.cards.personalBackground.aliyaStatusPlaceholder
                          }
                        />
                      </SelectTrigger>
                      <SelectContent>
                        {preferredAliyaStatusOptions.map((opt) => (
                          <SelectItem key={opt.value} value={opt.value}>
                            {opt.label}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  ) : (
                    <p className="text-sm text-gray-800 font-medium mt-1">
                      {getSelectDisplayValue(
                        formData.preferredAliyaStatus,
                        preferredAliyaStatusOptions,
                        ''
                      )}
                    </p>
                  )}
                </div>
              </CardContent>
            </Card>
            <Card className="bg-white/80 backdrop-blur-md rounded-2xl shadow-lg border border-gray-200/40 overflow-hidden">
              <CardHeader className="bg-gradient-to-r from-amber-50/40 to-yellow-50/40 border-b border-gray-200/50 p-4 flex items-center space-x-2 rtl:space-x-reverse">
                <Sparkles className="w-5 h-5 text-amber-700" />
                <CardTitle className="text-base font-semibold text-gray-700">
                  {t.cards.characterAndInterests.title}
                </CardTitle>
              </CardHeader>
              <CardContent className="p-4 md:p-6 space-y-6">
                <fieldset>
                  <legend className="block mb-2 text-xs font-medium text-gray-600">
                    {t.cards.characterAndInterests.traitsLegend}
                  </legend>
                  {isEditing ? (
                    <div className="flex flex-wrap gap-2">
                      {characterTraitsOptions.map((opt) => (
                        <Button
                          key={opt.value}
                          type="button"
                          variant={
                            (formData.preferredCharacterTraits || []).includes(
                              opt.value
                            )
                              ? 'default'
                              : 'outline'
                          }
                          size="sm"
                          onClick={() =>
                            handleMultiSelectChange(
                              'preferredCharacterTraits',
                              opt.value
                            )
                          }
                          disabled={
                            !viewOnly &&
                            (formData.preferredCharacterTraits || []).length >=
                              3 &&
                            !(formData.preferredCharacterTraits || []).includes(
                              opt.value
                            ) &&
                            opt.value !== 'no_strong_preference'
                          }
                          className={cn(
                            'rounded-full text-xs px-3 py-1.5 transition-all flex items-center',
                            (formData.preferredCharacterTraits || []).includes(
                              opt.value
                            )
                              ? 'bg-yellow-500 hover:bg-yellow-600 text-white border-yellow-500'
                              : 'border-gray-300 text-gray-600 hover:bg-gray-50 hover:border-gray-400'
                          )}
                        >
                          {opt.icon && (
                            <opt.icon className="w-3.5 h-3.5 ltr:mr-1.5 rtl:ml-1.5" />
                          )}
                          {opt.label}
                        </Button>
                      ))}
                    </div>
                  ) : (
                    <div className="mt-1 flex flex-wrap gap-1.5">
                      {renderMultiSelectBadges(
                        formData.preferredCharacterTraits,
                        characterTraitsOptions,
                        'bg-yellow-100 text-yellow-700',
                        t.cards.characterAndInterests.traitsEmpty
                      )}
                    </div>
                  )}
                </fieldset>
                <fieldset>
                  <legend className="block mb-2 text-xs font-medium text-gray-600">
                    {t.cards.characterAndInterests.hobbiesLegend}
                  </legend>
                  {isEditing ? (
                    <div className="flex flex-wrap gap-2">
                      {hobbiesOptions.map((opt) => (
                        <Button
                          key={opt.value}
                          type="button"
                          variant={
                            (formData.preferredHobbies || []).includes(
                              opt.value
                            )
                              ? 'default'
                              : 'outline'
                          }
                          size="sm"
                          onClick={() =>
                            handleMultiSelectChange(
                              'preferredHobbies',
                              opt.value
                            )
                          }
                          disabled={
                            !viewOnly &&
                            (formData.preferredHobbies || []).length >= 3 &&
                            !(formData.preferredHobbies || []).includes(
                              opt.value
                            ) &&
                            opt.value !== 'no_strong_preference'
                          }
                          className={cn(
                            'rounded-full text-xs px-3 py-1.5 transition-all flex items-center',
                            (formData.preferredHobbies || []).includes(
                              opt.value
                            )
                              ? 'bg-amber-500 hover:bg-amber-600 text-white border-amber-500'
                              : 'border-gray-300 text-gray-600 hover:bg-gray-50 hover:border-gray-400'
                          )}
                        >
                          {opt.icon && (
                            <opt.icon className="w-3.5 h-3.5 ltr:mr-1.5 rtl:ml-1.5" />
                          )}
                          {opt.label}
                        </Button>
                      ))}
                    </div>
                  ) : (
                    <div className="mt-1 flex flex-wrap gap-1.5">
                      {renderMultiSelectBadges(
                        formData.preferredHobbies,
                        hobbiesOptions,
                        'bg-amber-100 text-amber-700',
                        t.cards.characterAndInterests.hobbiesEmpty
                      )}
                    </div>
                  )}
                </fieldset>
              </CardContent>
            </Card>
          </div>
        </div>
      </div>
    </div>
  );
};

export default PreferencesSection;
--- End of Content for PreferencesSection.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\profile\sections\ProfileChecklist.tsx
--------------------------------------------------------------------------------
Content:
// src/app/[locale]/(authenticated)/profile/components/dashboard/ProfileChecklist.tsx

import React, { useState, useMemo } from 'react';
import Link from 'next/link';
import { Progress } from '@/components/ui/progress';
import { Button } from '@/components/ui/button';
import {
  CheckCircle,
  User,
  BookOpen,
  Camera,
  Target,
  ChevronUp,
  ChevronDown,
  Sparkles,
  Edit3,
} from 'lucide-react';
import { motion, AnimatePresence } from 'framer-motion';
import { cn } from '@/lib/utils';
import type { User as SessionUserType } from '@/types/next-auth';
import type { QuestionnaireResponse } from '@/types/next-auth';
import { Gender } from '@prisma/client';
import { ProfileChecklistDict } from '@/types/dictionary';

// Helper Types & Constants
const QUESTION_COUNTS: Record<
  'VALUES' | 'PERSONALITY' | 'RELATIONSHIP' | 'PARTNER' | 'RELIGION',
  number
> = {
  VALUES: 19,
  PERSONALITY: 19,
  RELATIONSHIP: 19,
  PARTNER: 17,
  RELIGION: 19,
};

const WORLD_NAMES_MAP = {
  values: 'ערכים',
  personality: 'אישיות',
  relationship: 'זוגיות',
  partner: 'פרטנר',
  religion: 'דת ומסורת',
} as const;

type WorldKey = keyof typeof WORLD_NAMES_MAP;

interface ChecklistItemProps {
  id: string;
  isCompleted: boolean;
  title: string;
  description: string;
  link?: string;
  onClick?: () => void;
  icon: React.ElementType;
  missingItems?: string[];
  worldProgress?: {
    world: string;
    completed: number;
    total: number;
    isDone: boolean;
  }[];
  isActive: boolean;
  setActiveItemId: React.Dispatch<React.SetStateAction<string | null>>;
  dict: ProfileChecklistDict;
}

const ChecklistItem: React.FC<ChecklistItemProps> = ({
  id,
  isCompleted,
  title,
  description,
  link,
  onClick,
  icon: Icon,
  missingItems,
  worldProgress,
  isActive,
  setActiveItemId,
  dict,
}) => {
  const canExpand =
    (missingItems && missingItems.length > 0) ||
    (worldProgress && worldProgress.length > 0);
  const isExpanded = isActive && canExpand;

  // --- שינוי 1: שם הפונקציה שונה כדי לשקף את השימוש ב-onPointerDown ---
  const handleInteraction = (event: React.PointerEvent) => {
    if (isCompleted) return;

    // מונע מהאירוע להפעיל אירועי עכבר מדומים שעלולים לגרום ללחיצה כפולה
    event.preventDefault();

    if (onClick) {
      onClick();
    }
  };

  const cardContent = (
    <>
      <div className="relative w-full flex justify-center mb-3">
        <div
          className={cn(
            'relative flex items-center justify-center w-14 h-14 rounded-2xl transition-all duration-300 transform group-hover:scale-110',
            isCompleted
              ? 'bg-emerald-100 shadow-emerald-500/10'
              : 'bg-cyan-100 shadow-cyan-500/10'
          )}
        >
          <Icon
            className={cn(
              'w-7 h-7 transition-colors duration-300',
              isCompleted ? 'text-emerald-500' : 'text-cyan-600'
            )}
          />
        </div>
        {isCompleted && (
          <motion.div
            initial={{ scale: 0, opacity: 0 }}
            animate={{ scale: 1, opacity: 1 }}
            transition={{
              type: 'spring',
              stiffness: 400,
              damping: 20,
              delay: 0.2,
            }}
            className="absolute -top-1 -end-1"
          >
            <CheckCircle
              className="w-5 h-5 text-emerald-500 bg-white rounded-full p-0.5"
              fill="white"
            />
          </motion.div>
        )}
      </div>
      <h4
        className={cn(
          'font-bold text-sm text-center transition-colors',
          isCompleted ? 'text-gray-400 line-through' : 'text-gray-800'
        )}
      >
        {title}
      </h4>
      {!isCompleted && (
        <p className="text-xs text-center text-gray-500 mt-1 leading-tight h-8">
          {description}
        </p>
      )}
    </>
  );

  const interactiveContent =
    link && !isCompleted ? (
      <Link href={link} passHref legacyBehavior>
        <a className="block h-full w-full">{cardContent}</a>
      </Link>
    ) : (
      <button
        // --- שינוי 2: החלפת onClick ב-onPointerDown ---
        onPointerDown={handleInteraction}
        className="h-full w-full text-start"
        disabled={isCompleted}
      >
        {cardContent}
      </button>
    );

  return (
    <motion.div
      layout
      className={cn(
        'relative flex flex-col rounded-2xl transition-all duration-300 group overflow-hidden',
        isCompleted ? 'bg-white/40' : 'bg-white/70 shadow-md',
        isExpanded && 'shadow-xl bg-white'
      )}
    >
      <div className={cn('p-4 relative', !isCompleted && 'cursor-pointer')}>
        {interactiveContent}
        {canExpand && !isCompleted && (
          <Button
            variant="ghost"
            size="icon"
            // --- שינוי 3: החלפת onClick ב-onPointerDown בכפתור ההרחבה ---
            onPointerDown={(e) => {
              e.stopPropagation(); // עדיין חשוב מאוד למנוע bubbling
              setActiveItemId((prev) => (prev === id ? null : id));
            }}
            className="absolute bottom-1 end-1 w-8 h-8 rounded-full text-gray-500 hover:bg-gray-200/50"
            aria-label={isExpanded ? dict.minimizeLabel : dict.expandLabel}
          >
            {isExpanded ? (
              <ChevronUp className="w-5 h-5" />
            ) : (
              <ChevronDown className="w-5 h-5" />
            )}
          </Button>
        )}
      </div>
      <AnimatePresence>
        {isExpanded && (
          <motion.div
            layout
            initial={{ opacity: 0, height: 0 }}
            animate={{ opacity: 1, height: 'auto' }}
            exit={{ opacity: 0, height: 0 }}
            transition={{ duration: 0.3, ease: 'easeInOut' }}
            className="overflow-hidden"
          >
            <div className="bg-slate-50/70 border-t border-slate-200 px-4 py-3 text-sm">
              <h4 className="font-semibold text-xs mb-2 text-gray-800">
                {dict.missingItemsTitle}
              </h4>
              {missingItems && (
                <ul className="list-disc ps-4 space-y-1.5 text-gray-600 text-xs">
                  {missingItems.map((item) => (
                    <li key={item}>{item}</li>
                  ))}
                </ul>
              )}
              {worldProgress && (
                <div className="space-y-2">
                  {worldProgress.map((world) => (
                    <div
                      key={world.world}
                      className="flex items-center justify-between text-xs"
                    >
                      <span
                        className={cn(
                          'font-medium',
                          world.isDone ? 'text-emerald-600' : 'text-gray-700'
                        )}
                      >
                        {WORLD_NAMES_MAP[world.world as WorldKey] ||
                          world.world}
                      </span>
                      <div className="flex items-center gap-2">
                        <span className="font-mono text-xs">
                          {world.completed}/{world.total}
                        </span>
                        {world.isDone && (
                          <CheckCircle className="h-4 w-4 text-emerald-500" />
                        )}
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </div>
          </motion.div>
        )}
      </AnimatePresence>
    </motion.div>
  );
};

interface ProfileChecklistProps {
  user: SessionUserType;
  hasSeenPreview: boolean;
  onPreviewClick: () => void;
  questionnaireResponse: QuestionnaireResponse | null;
  dict: ProfileChecklistDict;
  locale: string; // Added: locale prop for directionality
  onNavigateToTab: (tab: string) => void; // <-- הוסף שורה זו
}

export const ProfileChecklist: React.FC<ProfileChecklistProps> = ({
  user,
  onPreviewClick,
  hasSeenPreview,
  questionnaireResponse,
  dict,
  locale, // Added: destructure locale
  onNavigateToTab, // <-- הוסף את זה
}) => {
  const [isMinimized, setIsMinimized] = useState(true);
  const [activeItemId, setActiveItemId] = useState<string | null>(null);
  const missingItemsDict = dict.missingItems;

  // Added: Determine direction based on locale
  const direction = locale === 'he' ? 'rtl' : 'ltr';

  const getMissingItems = useMemo(() => {
    const p = user.profile;
    if (!p) return { personalDetails: [], partnerPreferences: [] };

    const personalDetails = [
      !p.profileHeadline && missingItemsDict.profileHeadline,
      (!p.about || p.about.trim().length < 100) && missingItemsDict.about,
      // --- START: הוספת בדיקות חדשות ---
      !p.humorStory && missingItemsDict.humorStory,
      (!p.testimonials ||
        p.testimonials.filter((t) => t.status === 'APPROVED').length < 1) &&
        missingItemsDict.testimonials,
      // --- END: הוספת בדיקות חדשות ---
      !p.inspiringCoupleStory && missingItemsDict.inspiringCoupleStory,
      !p.influentialRabbi && missingItemsDict.influentialRabbi,
      (p.hasMedicalInfo === null || p.hasMedicalInfo === undefined) &&
        missingItemsDict.medicalInfoReference,
      p.hasMedicalInfo === true &&
        !p.medicalInfoDetails &&
        missingItemsDict.medicalInfoDetails,
      p.hasMedicalInfo === true &&
        !p.medicalInfoDisclosureTiming &&
        missingItemsDict.medicalInfoDisclosureTiming,
      !p.birthDate && missingItemsDict.birthDate,
      !p.height && missingItemsDict.height,
      !p.city && missingItemsDict.city,
      !p.origin && missingItemsDict.origin,
      !p.nativeLanguage && missingItemsDict.nativeLanguage,
      p.aliyaCountry && !p.aliyaYear && missingItemsDict.aliyaYear,
      !p.maritalStatus && missingItemsDict.maritalStatus,
      p.maritalStatus &&
        ['divorced', 'widowed', 'annulled'].includes(p.maritalStatus) &&
        (p.hasChildrenFromPrevious === null ||
          p.hasChildrenFromPrevious === undefined) &&
        missingItemsDict.childrenFromPreviousReference,
      !p.parentStatus && missingItemsDict.parentStatus,
      !p.fatherOccupation && missingItemsDict.fatherOccupation,
      !p.motherOccupation && missingItemsDict.motherOccupation,
      (p.siblings === null || p.siblings === undefined) &&
        missingItemsDict.siblings,
      (p.position === null || p.position === undefined) &&
        missingItemsDict.position,
      !p.religiousLevel && missingItemsDict.religiousLevel,
      !p.religiousJourney && missingItemsDict.religiousJourney,
      (p.shomerNegiah === null || p.shomerNegiah === undefined) &&
        missingItemsDict.shomerNegiah,
      !p.educationLevel && missingItemsDict.educationLevel,
      !p.education && missingItemsDict.educationDetails,
      !p.occupation && missingItemsDict.occupation,
      !p.serviceType && missingItemsDict.serviceType,
      !p.serviceDetails && missingItemsDict.serviceDetails,
      (!p.profileCharacterTraits || p.profileCharacterTraits.length === 0) &&
        missingItemsDict.characterTraits,
      (!p.profileHobbies || p.profileHobbies.length === 0) &&
        missingItemsDict.hobbies,
    ].filter(Boolean);

    const partnerPreferences = [
      (!p.matchingNotes || p.matchingNotes.trim().length === 0) &&
        missingItemsDict.matchingNotes,
      !p.contactPreference && missingItemsDict.contactPreference,
      (!p.preferredAgeMin || !p.preferredAgeMax) &&
        missingItemsDict.preferredAgeRange,
      (!p.preferredHeightMin || !p.preferredHeightMax) &&
        missingItemsDict.preferredHeightRange,
      (!p.preferredLocations || p.preferredLocations.length === 0) &&
        missingItemsDict.preferredLocations,
      (!p.preferredReligiousLevels ||
        p.preferredReligiousLevels.length === 0) &&
        missingItemsDict.preferredReligiousLevels,
      (!p.preferredReligiousJourneys ||
        p.preferredReligiousJourneys.length === 0) &&
        missingItemsDict.preferredReligiousJourneys,
      (p.preferredShomerNegiah === null ||
        p.preferredShomerNegiah === undefined) &&
        missingItemsDict.preferredShomerNegiah,
      (!p.preferredEducation || p.preferredEducation.length === 0) &&
        missingItemsDict.preferredEducation,
      (!p.preferredOccupations || p.preferredOccupations.length === 0) &&
        missingItemsDict.preferredOccupations,
      (!p.preferredServiceTypes || p.preferredServiceTypes.length === 0) &&
        missingItemsDict.preferredServiceTypes,
      (!p.preferredMaritalStatuses ||
        p.preferredMaritalStatuses.length === 0) &&
        missingItemsDict.preferredMaritalStatuses,
      (p.preferredPartnerHasChildren === null ||
        p.preferredPartnerHasChildren === undefined) &&
        missingItemsDict.preferredPartnerHasChildren,
      (!p.preferredOrigins || p.preferredOrigins.length === 0) &&
        missingItemsDict.preferredOrigins,
      !p.preferredAliyaStatus && missingItemsDict.preferredAliyaStatus,
      (!p.preferredCharacterTraits ||
        p.preferredCharacterTraits.length === 0) &&
        missingItemsDict.preferredCharacterTraits,
      (!p.preferredHobbies || p.preferredHobbies.length === 0) &&
        missingItemsDict.preferredHobbies,
    ].filter(Boolean);

    if (p.gender === Gender.FEMALE) {
      if (!p.headCovering) personalDetails.push(missingItemsDict.headCovering);
      if (!p.preferredKippahTypes || p.preferredKippahTypes.length === 0)
        partnerPreferences.push(missingItemsDict.preferredKippahTypes);
    } else if (p.gender === Gender.MALE) {
      if (!p.kippahType) personalDetails.push(missingItemsDict.kippahType);
      if (!p.preferredHeadCoverings || p.preferredHeadCoverings.length === 0)
        partnerPreferences.push(missingItemsDict.preferredHeadCoverings);
    }

    return {
      personalDetails: personalDetails as string[],
      partnerPreferences: partnerPreferences as string[],
    };
  }, [user.profile, missingItemsDict]);

  const questionnaireProgress = useMemo(() => {
    const getAnswerCountFromJsonArray = (jsonValue: unknown): number => {
      if (Array.isArray(jsonValue)) return jsonValue.length;
      return 0;
    };

    if (!questionnaireResponse) {
      return (Object.keys(WORLD_NAMES_MAP) as WorldKey[]).map((key) => ({
        world: WORLD_NAMES_MAP[key],
        completed: 0,
        total:
          QUESTION_COUNTS[key.toUpperCase() as keyof typeof QUESTION_COUNTS],
        isDone: false,
      }));
    }

    const qr = questionnaireResponse;
    return (Object.keys(WORLD_NAMES_MAP) as WorldKey[]).map((key) => {
      const uppercaseKey = key.toUpperCase() as keyof typeof QUESTION_COUNTS;
      const answersFieldKey = `${key}Answers` as keyof QuestionnaireResponse;
      const completedCount = getAnswerCountFromJsonArray(qr[answersFieldKey]);
      return {
        world: WORLD_NAMES_MAP[key],
        completed: completedCount,
        total: QUESTION_COUNTS[uppercaseKey],
        isDone: qr.worldsCompleted?.includes(uppercaseKey) ?? false,
      };
    });
  }, [questionnaireResponse]);

  const questionnaireCompleted = questionnaireResponse?.completed ?? false;

  // src/app/[locale]/(authenticated)/profile/components/dashboard/ProfileChecklist.tsx

  const tasks = [
    {
      id: 'photo',
      isCompleted: (user.images?.length ?? 0) >= 3,
      title: dict.tasks.photos.title,
      description: dict.tasks.photos.description,
      onClick: () => onNavigateToTab('photos'), // <-- שורה זו עודכנה
      icon: Camera,
      missingItems:
        (user.images?.length ?? 0) < 3
          ? [
              dict.tasks.photos.missing.replace(
                '{{count}}',
                (3 - (user.images?.length ?? 0)).toString()
              ),
            ]
          : [],
    },
    {
      id: 'personal_details',
      isCompleted: getMissingItems.personalDetails.length === 0,
      title: dict.tasks.personalDetails.title,
      description: dict.tasks.personalDetails.description,
      onClick: () => onNavigateToTab('overview'), // <-- שורה זו עודכנה
      icon: User,
      missingItems: getMissingItems.personalDetails,
    },
    {
      id: 'partner_preferences',
      isCompleted: getMissingItems.partnerPreferences.length === 0,
      title: dict.tasks.partnerPreferences.title,
      description: dict.tasks.partnerPreferences.description,
      onClick: () => onNavigateToTab('preferences'), // <-- שורה זו עודכנה
      icon: Target,
      missingItems: getMissingItems.partnerPreferences,
    },
    {
      id: 'questionnaire',
      isCompleted: questionnaireCompleted,
      title: dict.tasks.questionnaire.title,
      description: dict.tasks.questionnaire.description,
      link: '/questionnaire', // <-- ללא שינוי, מפנה לעמוד אחר
      icon: BookOpen,
      worldProgress: questionnaireProgress ?? undefined,
    },
    {
      id: 'review',
      isCompleted: hasSeenPreview,
      title: dict.tasks.review.title,
      description: dict.tasks.review.description,
      onClick: onPreviewClick, // <-- ללא שינוי, פותח דיאלוג
      icon: Edit3,
      missingItems: !hasSeenPreview ? [dict.tasks.review.missing] : [],
    },
  ];

  const completionPercentage = useMemo(() => {
    const QUESTIONNAIRE_WEIGHT = 20;
    const OTHER_TASKS_WEIGHT = 80;

    const totalQuestions = Object.values(QUESTION_COUNTS).reduce(
      (sum, count) => sum + count,
      0
    );
    const answeredQuestions = questionnaireProgress.reduce(
      (sum, world) => sum + world.completed,
      0
    );
    const questionnaireContribution =
      totalQuestions > 0
        ? (answeredQuestions / totalQuestions) * QUESTIONNAIRE_WEIGHT
        : 0;

    const p = user.profile;
    const otherTasksStatus: boolean[] = [];

    // Task 1: Photos
    otherTasksStatus.push((user.images?.length ?? 0) >= 3);

    if (p) {
      // --- START OF UPDATED LOGIC FOR PROGRESS BAR ---
      // Personal Details Checks
      otherTasksStatus.push(!!p.profileHeadline);
      otherTasksStatus.push(!!(p.about && p.about.trim().length >= 100));
      // --- START: הוספת בדיקות חדשות לסרגל ההתקדמות ---
      otherTasksStatus.push(!!p.humorStory);
      otherTasksStatus.push(
        !!(
          p.testimonials &&
          p.testimonials.filter((t) => t.status === 'APPROVED').length >= 1
        )
      );
      // --- END: הוספת בדיקות חדשות לסרגל ההתקדמות ---
      otherTasksStatus.push(!!p.inspiringCoupleStory);
      otherTasksStatus.push(!!p.influentialRabbi);
      otherTasksStatus.push(
        p.hasMedicalInfo !== null && p.hasMedicalInfo !== undefined
      );
      otherTasksStatus.push(!p.hasMedicalInfo || !!p.medicalInfoDetails);
      otherTasksStatus.push(
        !p.hasMedicalInfo || !!p.medicalInfoDisclosureTiming
      );
      otherTasksStatus.push(!!p.birthDate);
      otherTasksStatus.push(!!p.height);
      otherTasksStatus.push(!!p.city);
      otherTasksStatus.push(!!p.origin);
      otherTasksStatus.push(!!p.nativeLanguage);
      otherTasksStatus.push(!p.aliyaCountry || !!p.aliyaYear);
      otherTasksStatus.push(!!p.maritalStatus);
      otherTasksStatus.push(
        !['divorced', 'widowed', 'annulled'].includes(p.maritalStatus || '') ||
          (p.hasChildrenFromPrevious !== null &&
            p.hasChildrenFromPrevious !== undefined)
      );
      otherTasksStatus.push(!!p.parentStatus);
      otherTasksStatus.push(!!p.fatherOccupation);
      otherTasksStatus.push(!!p.motherOccupation);
      otherTasksStatus.push(p.siblings !== null && p.siblings !== undefined);
      otherTasksStatus.push(p.position !== null && p.position !== undefined);
      otherTasksStatus.push(!!p.religiousLevel);
      otherTasksStatus.push(!!p.religiousJourney);
      otherTasksStatus.push(
        p.shomerNegiah !== null && p.shomerNegiah !== undefined
      );
      otherTasksStatus.push(!!p.educationLevel);
      otherTasksStatus.push(!!p.education);
      otherTasksStatus.push(!!p.occupation);
      otherTasksStatus.push(!!p.serviceType);
      otherTasksStatus.push(!!p.serviceDetails);
      otherTasksStatus.push(
        !!(p.profileCharacterTraits && p.profileCharacterTraits.length > 0)
      );
      otherTasksStatus.push(
        !!(p.profileHobbies && p.profileHobbies.length > 0)
      );

      // Partner Preferences Checks
      otherTasksStatus.push(
        !!(p.matchingNotes && p.matchingNotes.trim().length > 0)
      );
      otherTasksStatus.push(!!p.contactPreference);
      otherTasksStatus.push(!!(p.preferredAgeMin && p.preferredAgeMax));
      otherTasksStatus.push(!!(p.preferredHeightMin && p.preferredHeightMax));
      otherTasksStatus.push(
        !!(p.preferredLocations && p.preferredLocations.length > 0)
      );
      otherTasksStatus.push(
        !!(p.preferredReligiousLevels && p.preferredReligiousLevels.length > 0)
      );
      otherTasksStatus.push(
        !!(
          p.preferredReligiousJourneys &&
          p.preferredReligiousJourneys.length > 0
        )
      );
      otherTasksStatus.push(
        p.preferredShomerNegiah !== null &&
          p.preferredShomerNegiah !== undefined
      );
      otherTasksStatus.push(
        !!(p.preferredEducation && p.preferredEducation.length > 0)
      );
      otherTasksStatus.push(
        !!(p.preferredOccupations && p.preferredOccupations.length > 0)
      );
      otherTasksStatus.push(
        !!(p.preferredServiceTypes && p.preferredServiceTypes.length > 0)
      );
      otherTasksStatus.push(
        !!(p.preferredMaritalStatuses && p.preferredMaritalStatuses.length > 0)
      );
      otherTasksStatus.push(
        p.preferredPartnerHasChildren !== null &&
          p.preferredPartnerHasChildren !== undefined
      );
      otherTasksStatus.push(
        !!(p.preferredOrigins && p.preferredOrigins.length > 0)
      );
      otherTasksStatus.push(!!p.preferredAliyaStatus);
      otherTasksStatus.push(
        !!(p.preferredCharacterTraits && p.preferredCharacterTraits.length > 0)
      );
      otherTasksStatus.push(
        !!(p.preferredHobbies && p.preferredHobbies.length > 0)
      );

      // Gender-specific checks
      if (p.gender === Gender.FEMALE) {
        otherTasksStatus.push(!!p.headCovering); // personal
        otherTasksStatus.push(
          !!(p.preferredKippahTypes && p.preferredKippahTypes.length > 0)
        ); // preference
      } else if (p.gender === Gender.MALE) {
        otherTasksStatus.push(!!p.kippahType); // personal
        otherTasksStatus.push(
          !!(p.preferredHeadCoverings && p.preferredHeadCoverings.length > 0)
        ); // preference
      }
      // --- END OF UPDATED LOGIC FOR PROGRESS BAR ---
    } else {
      // If no profile, add placeholders for all items
      const totalProfileFields = 56; // Calculated number of fields including gender-specific and new ones
      otherTasksStatus.push(...Array(totalProfileFields).fill(false));
    }

    // Task 5: Review
    otherTasksStatus.push(hasSeenPreview);

    const totalOtherTasks = otherTasksStatus.length;
    const completedOtherTasks = otherTasksStatus.filter(
      (isCompleted) => isCompleted
    ).length;

    const otherTasksContribution =
      totalOtherTasks > 0
        ? (completedOtherTasks / totalOtherTasks) * OTHER_TASKS_WEIGHT
        : 0;

    return Math.round(questionnaireContribution + otherTasksContribution);
  }, [user, questionnaireProgress, hasSeenPreview]);

  const isAllComplete = completionPercentage >= 100;

  return (
    <AnimatePresence>
      <motion.div
        layout
        initial={{ opacity: 0, y: -20 }}
        animate={{ opacity: 1, y: 0 }}
        exit={{ opacity: 0, height: 0, transition: { duration: 0.4 } }}
        transition={{ duration: 0.5, ease: 'easeOut' }}
        className="mb-8 rounded-3xl shadow-xl border border-white/50 bg-white/70 backdrop-blur-md overflow-hidden"
        dir={direction} // Added: set direction for the whole component
      >
        <div className="p-4 sm:p-6">
          <div className="md:flex md:items-center md:justify-between">
            <div className="flex-1 text-center md:text-start">
              {' '}
              {/* Updated: from md:text-right to md:text-start */}
              <h2 className="text-xl font-bold text-slate-800 flex items-center justify-center md:justify-start gap-2">
                {isAllComplete && (
                  <Sparkles className="w-6 h-6 text-amber-500" />
                )}
                {(() => {
                  const isFemale = user.profile?.gender === 'FEMALE';
                  const welcomeText =
                    isFemale && dict.welcome_female
                      ? dict.welcome_female
                      : dict.welcome;
                  const allCompleteText =
                    isFemale && dict.allComplete_female
                      ? dict.allComplete_female
                      : dict.allComplete;
                  const textToShow = isAllComplete
                    ? allCompleteText
                    : welcomeText;
                  return textToShow.replace(
                    '{{firstName}}',
                    user.firstName || ''
                  );
                })()}
              </h2>
              <AnimatePresence initial={false}>
                {!isMinimized && (
                  <motion.p
                    initial={{ opacity: 0, height: 0, marginTop: 0 }}
                    animate={{
                      opacity: 1,
                      height: 'auto',
                      marginTop: '0.25rem',
                    }}
                    exit={{ opacity: 0, height: 0, marginTop: 0 }}
                    className="text-slate-600 text-sm md:text-base overflow-hidden"
                  >
                    {isAllComplete
                      ? dict.allCompleteSubtitle
                      : dict.welcomeSubtitle}
                  </motion.p>
                )}
              </AnimatePresence>
            </div>
            <div className="mt-4 md:mt-0 md:w-auto lg:w-1/3 flex items-center gap-4">
              <div className="flex-1">
                <div className="flex justify-between items-center text-sm mb-1">
                  <span
                    id="profile-completion-label"
                    className="font-medium text-gray-700"
                  >
                    {dict.completionLabel}
                  </span>
                  <span className="font-bold text-cyan-600">
                    {completionPercentage}%
                  </span>
                </div>
                <Progress
                  value={completionPercentage}
                  aria-labelledby="profile-completion-label"
                  className="h-2 bg-slate-200/70"
                />
              </div>
              <Button
                variant="ghost"
                size="icon"
                className="text-slate-500 hover:bg-slate-200/50 rounded-full flex-shrink-0"
                onClick={() => setIsMinimized(!isMinimized)}
                aria-label={isMinimized ? dict.expandLabel : dict.minimizeLabel}
              >
                {isMinimized ? (
                  <ChevronDown className="h-5 w-5" />
                ) : (
                  <ChevronUp className="h-5 w-5" />
                )}
              </Button>
            </div>
          </div>
          <AnimatePresence initial={false}>
            {!isMinimized && (
              <motion.div
                key="checklist-content"
                initial={{ height: 0, opacity: 0 }}
                animate={{
                  height: 'auto',
                  opacity: 1,
                  transition: { opacity: { delay: 0.1 } },
                }}
                exit={{ height: 0, opacity: 0, transition: { duration: 0.3 } }}
                className="overflow-hidden"
                // The onMouseLeave event handler has been removed from here.
              >
                <ul className="mt-6 grid grid-cols-2 sm:grid-cols-3 md:grid-cols-5 gap-3 sm:gap-4">
                  {tasks.map((task) => (
                    <li key={task.id}>
                      <ChecklistItem
                        key={task.id}
                        {...task}
                        isActive={activeItemId === task.id}
                        setActiveItemId={setActiveItemId}
                        dict={dict}
                      />
                    </li>
                  ))}
                </ul>
              </motion.div>
            )}
          </AnimatePresence>
        </div>
      </motion.div>
    </AnimatePresence>
  );
};
--- End of Content for ProfileChecklist.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\profile\sections\ProfileSection.tsx
--------------------------------------------------------------------------------
Content:
// src/app/components/profile/sections/ProfileSection.tsx
'use client';

import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from '@/components/ui/tooltip';
import React, { useState, useEffect, useCallback, useMemo } from 'react';
import {
  Gender,
  AvailabilityStatus,
  ServiceType,
  HeadCoveringType,
  KippahType,
  ReligiousJourney,
} from '@prisma/client';
import { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select';
import { Checkbox } from '@/components/ui/checkbox';
import {
  Pencil,
  Save,
  X,
  MessageSquare,
  Award,
  Send,
  Copy,
  Users,
  BookOpen,
  Loader2,
  Trash2,
  Briefcase,
  Shield,
  Heart,
  MapPin,
  Languages,
  Palette,
  Smile,
  UserCircle,
  Info,
  HeartPulse,
  Lock,
  Eye,
  EyeOff,
} from 'lucide-react';
import { UserProfile, FriendTestimonial } from '@/types/next-auth';
import { cn } from '@/lib/utils';
import { Badge } from '@/components/ui/badge';
import { languageOptions } from '@/lib/languageOptions';
import { toast } from 'sonner';
import Autocomplete from 'react-google-autocomplete';
import { Switch } from '@/components/ui/switch';
import { ProfileSectionDict, FriendTestimonialsDict } from '@/types/dictionary';
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogFooter,
  DialogDescription,
} from '@/components/ui/dialog';

interface ProfileSectionProps {
  profile: UserProfile | null;
  isEditing: boolean;
  setIsEditing: (value: boolean) => void;
  viewOnly?: boolean;
  onSave: (data: Partial<UserProfile>) => void;
  dict: ProfileSectionDict;
  locale: string;
}

const ensureDateObject = (
  value: string | number | Date | null | undefined
): Date | undefined => {
  if (!value) return undefined;
  if (value instanceof Date && !isNaN(value.getTime())) {
    return value;
  }
  if (typeof value === 'string' || typeof value === 'number') {
    const date = new Date(value);
    if (!isNaN(date.getTime())) {
      return date;
    }
  }
  return undefined;
};

// ========================================================================
// ✨ Helper Functions (Moved outside the main component)
// ========================================================================

const renderDisplayValue = (
  value: unknown,
  dict: ProfileSectionDict,
  placeholder?: string
): React.ReactNode => {
  const finalPlaceholder = placeholder || dict.placeholders.notSpecified;
  if (value === null || value === undefined || value === '') {
    return <span className="italic text-gray-500">{finalPlaceholder}</span>;
  }
  if (value instanceof Date && !isNaN(value.getTime())) {
    return new Intl.DateTimeFormat('he-IL').format(value);
  }
  return String(value);
};

const renderSelectDisplayValue = (
  value: string | undefined | null,
  options: { value: string; label: string }[],
  dict: ProfileSectionDict,
  placeholder?: string
) => {
  const finalPlaceholder = placeholder || dict.placeholders.notSpecified;
  if (!value) {
    return <span className="italic text-gray-500">{finalPlaceholder}</span>;
  }
  const option = options.find((opt) => opt.value === value);
  return option ? (
    option.label
  ) : (
    <span className="italic text-gray-500">{finalPlaceholder}</span>
  );
};

const renderBooleanDisplayValue = (
  value: boolean | undefined | null,
  dict: ProfileSectionDict,
  trueLabel?: string,
  falseLabel?: string,
  placeholder?: string
) => {
  const finalPlaceholder = placeholder || dict.placeholders.notSpecified;
  const finalTrueLabel = trueLabel || dict.cards.family.hasChildrenYes;
  const finalFalseLabel = falseLabel || dict.cards.medical.display.no;

  if (value === undefined || value === null) {
    return <span className="italic text-gray-500">{finalPlaceholder}</span>;
  }
  return value ? finalTrueLabel : finalFalseLabel;
};


// ========================================================================
// ✨ Sub-Components
// ========================================================================

const StoryAndMoreCard: React.FC<{
  profile: UserProfile | null;
  isEditing: boolean;
  dict: ProfileSectionDict;
  handleChange: (field: keyof UserProfile, value: any) => void;
  formData: Partial<UserProfile>;
}> = ({ profile, isEditing, dict, handleChange, formData }) => {
  if (!profile) return null;
  const tAboutCard = dict.cards.about;
  const tAboutMe = dict.aboutMe;

  return (
    <Card className="bg-white/80 backdrop-blur-md rounded-2xl shadow-lg border border-gray-200/40 overflow-hidden">
      <CardHeader className="bg-gradient-to-r from-slate-50/40 to-gray-100/40 border-b border-gray-200/50 p-4 flex items-center space-x-2 rtl:space-x-reverse">
        <Info className="w-5 h-5 text-slate-600" />
        <CardTitle className="text-base font-semibold text-gray-700">
          {tAboutCard.title}
        </CardTitle>
      </CardHeader>
      <CardContent className="p-4 md:p-6">
        <div className="space-y-6">
          {/* Profile Headline Section */}
          <div>
            <div className="flex items-center gap-1.5 mb-2">
              <Label
                htmlFor="profileHeadline"
                className="text-sm font-medium text-gray-700"
              >
                {tAboutCard.headlineLabel}
              </Label>
              <TooltipProvider>
                <Tooltip>
                  <TooltipTrigger asChild>
                    <button type="button" aria-describedby="headline-tooltip">
                      <Info className="w-4 h-4 text-gray-400" />
                    </button>
                  </TooltipTrigger>
                  <TooltipContent
                    id="headline-tooltip"
                    side="top"
                    className="max-w-xs text-center"
                  >
                    <p>{dict.tooltips.headline}</p>
                  </TooltipContent>
                </Tooltip>
              </TooltipProvider>
            </div>
            {isEditing ? (
              <Input
                id="profileHeadline"
                value={formData.profileHeadline || ''}
                onChange={(e) =>
                  handleChange('profileHeadline', e.target.value)
                }
                className="text-sm focus:ring-cyan-500 rounded-lg"
                placeholder={tAboutCard.headlinePlaceholder}
                maxLength={80}
              />
            ) : (
              <div className="mt-1">
                {formData.profileHeadline &&
                typeof formData.profileHeadline === 'string' &&
                formData.profileHeadline.trim() ? (
                  <p className="text-lg font-semibold text-cyan-700 italic">
                    {`"${formData.profileHeadline}"`}
                  </p>
                ) : (
                  <div className="rounded-lg bg-slate-50 p-3 text-base italic border border-slate-200/80">
                    <p className="font-medium not-italic text-slate-600">
                      {tAboutCard.headlineEmpty.title}
                    </p>
                    <p className="mt-1.5 text-slate-500">
                      {tAboutCard.headlineEmpty.subtitle}
                      <span className="block mt-1 font-semibold text-slate-700">
                        {tAboutCard.headlineEmpty.example}
                      </span>
                    </p>
                  </div>
                )}
              </div>
            )}
          </div>

          {/* My Story Section (formerly AboutMeCard) */}
          <div>
            <div className="flex items-center justify-between mb-2">
              <div className="flex items-center gap-1.5">
                <Label
                  htmlFor="about"
                  className="text-sm font-medium text-gray-700"
                >
                  {tAboutMe.cardTitle}
                </Label>
                <TooltipProvider delayDuration={100}>
                  <Tooltip>
                    <TooltipTrigger asChild>
                      <button
                        type="button"
                        aria-describedby="about-tooltip"
                        className="text-gray-400 hover:text-gray-600"
                      >
                        <Info className="w-4 h-4" />
                      </button>
                    </TooltipTrigger>
                    <TooltipContent
                      id="about-tooltip"
                      side="top"
                      className="max-w-xs text-center"
                    >
                      <p>{dict.tooltips.about.replace('{{count}}', '100')}</p>
                    </TooltipContent>
                  </Tooltip>
                </TooltipProvider>
              </div>
              <TooltipProvider>
                <Tooltip>
                  <TooltipTrigger asChild>
                    <div className="flex items-center gap-2">
                      <Switch
                        checked={formData.isAboutVisible ?? true}
                        onCheckedChange={(checked) =>
                          handleChange('isAboutVisible', checked)
                        }
                        disabled={!isEditing}
                      />
                    </div>
                  </TooltipTrigger>
                  <TooltipContent>
                    <p>{tAboutMe.visibilityTooltip}</p>
                  </TooltipContent>
                </Tooltip>
              </TooltipProvider>
            </div>
            {isEditing ? (
              <div>
                <Textarea
                  id="about"
                  value={formData.about || ''}
                  onChange={(e) => handleChange('about', e.target.value)}
                  className={cn(
                    'text-sm focus:ring-cyan-500 min-h-[120px] rounded-lg',
                    formData.about && formData.about.trim().length < 100
                      ? 'border-red-400 focus:ring-red-300'
                      : ''
                  )}
                  placeholder={tAboutMe.placeholder}
                  rows={5}
                  aria-describedby="about-char-count"
                />
                {formData.about && (
                  <div
                    id="about-char-count"
                    className={cn(
                      'text-xs mt-1 text-end',
                      formData.about.trim().length < 100
                        ? 'text-red-600'
                        : 'text-gray-500'
                    )}
                  >
                    {formData.about.trim().length}
                    {dict.charCount.replace('{{count}}', '100')}
                  </div>
                )}
              </div>
            ) : (
              <p className="mt-1 text-sm text-gray-700 whitespace-pre-wrap min-h-[60px] bg-slate-50/70 p-3 rounded-lg border border-slate-200/50">
                {formData.about || (
                  <span className="text-gray-500 italic">
                    {tAboutCard.aboutEmpty}
                  </span>
                )}
              </p>
            )}
          </div>

          {/* Inspiring Couple Section */}
          <div>
            <div className="flex items-center gap-1.5 mb-2">
              <Label
                htmlFor="inspiringCoupleStory"
                className="text-sm font-medium text-gray-700"
              >
                {tAboutCard.inspiringCoupleLabel}
              </Label>
              <TooltipProvider>
                <Tooltip>
                  <TooltipTrigger asChild>
                    <button type="button" aria-describedby="couple-tooltip">
                      <Info className="w-4 h-4 text-gray-400" />
                    </button>
                  </TooltipTrigger>
                  <TooltipContent
                    id="couple-tooltip"
                    side="top"
                    className="max-w-xs text-center"
                  >
                    <p>{dict.tooltips.inspiringCouple}</p>
                  </TooltipContent>
                </Tooltip>
              </TooltipProvider>
            </div>
            {isEditing ? (
              <Textarea
                id="inspiringCoupleStory"
                value={formData.inspiringCoupleStory || ''}
                onChange={(e) =>
                  handleChange('inspiringCoupleStory', e.target.value)
                }
                className="text-sm focus:ring-cyan-500 min-h-[90px] rounded-lg"
                placeholder={tAboutCard.inspiringCouplePlaceholder}
                rows={3}
              />
            ) : (
              <p className="mt-1 text-sm text-gray-700 whitespace-pre-wrap min-h-[50px] bg-slate-50/70 p-3 rounded-lg border border-slate-200/50">
                {renderDisplayValue(
                  formData.inspiringCoupleStory,
                  dict,
                  tAboutCard.inspiringCoupleEmpty
                )}
              </p>
            )}
          </div>

          {/* Private Notes Section */}
          <div>
            <div className="flex items-center gap-1.5 mb-2">
              <Label
                htmlFor="matchingNotes-private"
                className="text-sm font-medium text-gray-700"
              >
                {tAboutCard.privateNotesLabel}
              </Label>
              <TooltipProvider delayDuration={100}>
                <Tooltip>
                  <TooltipTrigger asChild>
                    <button
                      type="button"
                      aria-describedby="private-notes-tooltip"
                      className="text-gray-400 hover:text-gray-600"
                    >
                      <Info className="w-4 h-4" />
                    </button>
                  </TooltipTrigger>
                  <TooltipContent
                    id="private-notes-tooltip"
                    side="top"
                    className="max-w-xs text-center"
                  >
                    <p>{dict.tooltips.privateNotes}</p>
                  </TooltipContent>
                </Tooltip>
              </TooltipProvider>
            </div>
            {isEditing ? (
              <Textarea
                id="matchingNotes-private"
                value={formData.matchingNotes || ''}
                onChange={(e) => handleChange('matchingNotes', e.target.value)}
                className="text-sm focus:ring-cyan-500 min-h-[90px] rounded-lg"
                placeholder={tAboutCard.privateNotesPlaceholder}
                rows={3}
              />
            ) : (
              <p className="mt-1 text-sm text-gray-700 whitespace-pre-wrap min-h-[50px] bg-slate-50/70 p-3 rounded-lg border border-slate-200/50">
                {formData.matchingNotes || (
                  <span className="text-gray-500 italic">
                    {tAboutCard.privateNotesEmpty}
                  </span>
                )}
              </p>
            )}
          </div>
        </div>
      </CardContent>
    </Card>
  );
};

const NeshamaTechSummaryCard: React.FC<{
  profile: UserProfile | null;
  isEditing: boolean;
  dict: ProfileSectionDict;
  handleChange: (field: keyof UserProfile, value: any) => void;
  formData: Partial<UserProfile>;
}> = ({ profile, isEditing, dict, handleChange, formData }) => {
  if (!profile) return null;
  const t = dict.neshamaTechSummary;
  return (
    <Card className="bg-white/80 backdrop-blur-md rounded-2xl shadow-lg border border-gray-200/40 overflow-hidden">
      <CardHeader className="bg-gradient-to-r from-purple-50/40 to-indigo-50/40 border-b border-gray-200/50 p-4 flex items-center justify-between">
        <div className="flex items-center gap-2">
          <Award className="w-5 h-5 text-purple-700" />
          <CardTitle className="text-base font-semibold text-gray-700">
            {t.cardTitle}
          </CardTitle>
        </div>
        <TooltipProvider>
          <Tooltip>
            <TooltipTrigger asChild>
              <Switch
                checked={formData.isNeshamaTechSummaryVisible ?? true}
                onCheckedChange={(checked) =>
                  handleChange('isNeshamaTechSummaryVisible', checked)
                }
                disabled={!isEditing}
              />
            </TooltipTrigger>
            <TooltipContent>
              <p>{t.visibilityTooltip}</p>
            </TooltipContent>
          </Tooltip>
        </TooltipProvider>
      </CardHeader>
      <CardContent className="p-4 md:p-6">
        <p className="text-sm text-gray-700 whitespace-pre-wrap min-h-[60px]">
          {profile.manualEntryText || (
            <span className="italic text-gray-500">{t.emptyState}</span>
          )}
        </p>
      </CardContent>
    </Card>
  );
};

const FriendTestimonialsManager: React.FC<{
  profile: UserProfile | null;
  isEditing: boolean;
  dict: ProfileSectionDict;
  handleChange: (field: keyof UserProfile, value: any) => void;
  formData: Partial<UserProfile>;
}> = ({ profile, isEditing, dict, handleChange, formData }) => {
  const [testimonials, setTestimonials] = useState<FriendTestimonial[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [isAddModalOpen, setIsAddModalOpen] = useState(false);
  const [isLinkModalOpen, setIsLinkModalOpen] = useState(false);
  const [requestLink, setRequestLink] = useState('');

  const t = dict.friendTestimonials;

  const fetchTestimonials = useCallback(async () => {
    if (!profile) return;
    setIsLoading(true);
    try {
      const response = await fetch('/api/profile/testimonials');
      const data = await response.json();
      if (data.success) {
        setTestimonials(data.testimonials);
      } else {
        throw new Error(data.message || 'Failed to fetch');
      }
    } catch (error) {
      toast.error('Failed to load testimonials.');
      console.error(error);
    } finally {
      setIsLoading(false);
    }
  }, [profile]);

  useEffect(() => {
    fetchTestimonials();
  }, [fetchTestimonials]);

  const handleStatusChange = async (
    id: string,
    status: 'APPROVED' | 'HIDDEN'
  ) => {
    try {
      const response = await fetch(`/api/profile/testimonials/${id}`, {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ status }),
      });
      if (!response.ok) throw new Error('Failed to update status');
      toast.success('סטטוס ההמלצה עודכן!');
      fetchTestimonials(); // Refresh list
    } catch (error) {
      toast.error('שגיאה בעדכון סטטוס ההמלצה.');
    }
  };

  const handleDelete = async (id: string) => {
    if (window.confirm(t.deleteConfirm)) {
      try {
        const response = await fetch(`/api/profile/testimonials/${id}`, {
          method: 'DELETE',
        });
        if (!response.ok) throw new Error('Failed to delete');
        toast.success('ההמלצה נמחקה.');
        fetchTestimonials(); // Refresh list
      } catch (error) {
        toast.error('שגיאה במחיקת ההמלצה.');
      }
    }
  };

  const handleGenerateLink = async () => {
    try {
      const response = await fetch('/api/profile/testimonials/request-link', {
        method: 'POST',
      });
      const data = await response.json();
      if (data.success) {
        setRequestLink(data.link);
        setIsLinkModalOpen(true);
      } else {
        throw new Error(data.message || 'Failed to generate link');
      }
    } catch (error) {
      toast.error('שגיאה ביצירת קישור לבקשת המלצה.');
    }
  };

  const getStatusBadge = (status: 'PENDING' | 'APPROVED' | 'HIDDEN') => {
    switch (status) {
      case 'PENDING':
        return <Badge variant="warning">{t.pendingApproval}</Badge>;
      case 'APPROVED':
        return <Badge variant="success">{t.approvedAndVisible}</Badge>;
      case 'HIDDEN':
        return <Badge variant="secondary">{t.hidden}</Badge>;
    }
  };

  return (
    <Card className="bg-white/80 backdrop-blur-md rounded-2xl shadow-lg border border-gray-200/40 overflow-hidden">
      <CardHeader className="bg-gradient-to-r from-teal-50/40 to-green-50/40 border-b border-gray-200/50 p-4 flex items-center justify-between">
        <div className="flex items-center gap-2">
          <Users className="w-5 h-5 text-teal-700" />
          <CardTitle className="text-base font-semibold text-gray-700">
            {t.cardTitle}
          </CardTitle>
        </div>
        <TooltipProvider>
          <Tooltip>
            <TooltipTrigger asChild>
              <Switch
                checked={formData.isFriendsSectionVisible ?? true}
                onCheckedChange={(checked) =>
                  handleChange('isFriendsSectionVisible', checked)
                }
                disabled={!isEditing}
              />
            </TooltipTrigger>
            <TooltipContent>
              <p>{t.visibilityTooltip}</p>
            </TooltipContent>
          </Tooltip>
        </TooltipProvider>
      </CardHeader>
      <CardContent className="p-4 md:p-6">
        {isEditing && (
          <div className="flex flex-col sm:flex-row gap-2 mb-4 p-4 bg-slate-50 rounded-lg border">
            <Button
              size="sm"
              className="flex-1"
              onClick={() => setIsAddModalOpen(true)}
            >
              {t.addManualButton}
            </Button>
            <Button
              size="sm"
              variant="outline"
              className="flex-1"
              onClick={handleGenerateLink}
            >
              <Send className="w-4 h-4 mr-2" />
              {t.requestLinkButton}
            </Button>
          </div>
        )}

        {isLoading ? (
          <div className="flex justify-center p-4">
            <Loader2 className="animate-spin" />
          </div>
        ) : (
          <div className="space-y-3">
            {testimonials.length === 0 ? (
              <p className="text-sm text-center text-gray-500 py-4">
                {t.emptyState}
              </p>
            ) : (
              testimonials.map((item) => (
                <div
                  key={item.id}
                  className="border rounded-md p-3 bg-white/50"
                >
                  <div className="flex justify-between items-start">
                    <div className="flex-1">
                      <p className="italic text-sm text-gray-600">
                        &quot;{item.content}&quot;
                      </p>
                      <p className="text-xs font-semibold mt-2">
                        - {item.authorName}, {item.relationship}
                      </p>
                    </div>
                    {isEditing && getStatusBadge(item.status)}
                  </div>
                  {isEditing && (
                    <div className="flex items-center gap-2 mt-2 pt-2 border-t">
                      {item.status !== 'APPROVED' && (
                        <Button
                          size="xs"
                          onClick={() =>
                            handleStatusChange(item.id, 'APPROVED')
                          }
                        >
                          {t.approveButton}
                        </Button>
                      )}
                      {item.status === 'APPROVED' && (
                        <Button
                          size="xs"
                          variant="outline"
                          onClick={() => handleStatusChange(item.id, 'HIDDEN')}
                        >
                          {t.hideButton}
                        </Button>
                      )}
                      {item.status === 'HIDDEN' && (
                        <Button
                          size="xs"
                          variant="outline"
                          onClick={() =>
                            handleStatusChange(item.id, 'APPROVED')
                          }
                        >
                          {t.showButton}
                        </Button>
                      )}
                      <Button
                        size="xs"
                        variant="destructive"
                        onClick={() => handleDelete(item.id)}
                      >
                        <Trash2 className="w-3 h-3 mr-1" />
                        {t.deleteButton}
                      </Button>
                    </div>
                  )}
                </div>
              ))
            )}
          </div>
        )}
      </CardContent>

      <AddTestimonialModal
        isOpen={isAddModalOpen}
        setIsOpen={setIsAddModalOpen}
        dict={t.addModal}
        onSuccess={fetchTestimonials}
      />

      <Dialog open={isLinkModalOpen} onOpenChange={setIsLinkModalOpen}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>{t.linkModal.title}</DialogTitle>
            <DialogDescription>{t.linkModal.description}</DialogDescription>
          </DialogHeader>
          <div className="flex items-center space-x-2 rtl:space-x-reverse">
            <Input value={requestLink} readOnly />
            <Button
              onClick={() =>
                navigator.clipboard
                  .writeText(requestLink)
                  .then(() => toast.success(t.linkModal.copiedTooltip))
              }
              size="icon"
            >
              <Copy className="h-4 w-4" />
            </Button>
          </div>
          <DialogFooter>
            <Button onClick={() => setIsLinkModalOpen(false)}>
              {t.linkModal.closeButton}
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </Card>
  );
};

const AddTestimonialModal: React.FC<{
  isOpen: boolean;
  setIsOpen: (isOpen: boolean) => void;
  dict: FriendTestimonialsDict['addModal'];
  onSuccess: () => void;
}> = ({ isOpen, setIsOpen, dict, onSuccess }) => {
  const [formData, setFormData] = useState({
    authorName: '',
    relationship: '',
    content: '',
    authorPhone: '',
    isPhoneVisibleToMatch: false,
  });
  const [isLoading, setIsLoading] = useState(false);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setIsLoading(true);
    try {
      const response = await fetch('/api/profile/testimonials', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(formData),
      });
      if (!response.ok) throw new Error('Failed to add testimonial');
      toast.success('Testimonial added!');
      onSuccess();
      setIsOpen(false);
      setFormData({
        authorName: '',
        relationship: '',
        content: '',
        authorPhone: '',
        isPhoneVisibleToMatch: false,
      });
    } catch (error) {
      toast.error('Error adding testimonial.');
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <Dialog open={isOpen} onOpenChange={setIsOpen}>
      <DialogContent>
        <DialogHeader>
          <DialogTitle>{dict.title}</DialogTitle>
        </DialogHeader>
        <form onSubmit={handleSubmit} className="space-y-4">
          <div>
            <Label>{dict.authorNameLabel}</Label>
            <Input
              name="authorName"
              value={formData.authorName}
              onChange={(e) =>
                setFormData((p) => ({ ...p, authorName: e.target.value }))
              }
              required
              placeholder={dict.authorNamePlaceholder}
            />
          </div>
          <div>
            <Label>{dict.relationshipLabel}</Label>
            <Input
              name="relationship"
              value={formData.relationship}
              onChange={(e) =>
                setFormData((p) => ({ ...p, relationship: e.target.value }))
              }
              required
              placeholder={dict.relationshipPlaceholder}
            />
          </div>
          <div>
            <Label>{dict.contentLabel}</Label>
            <Textarea
              name="content"
              value={formData.content}
              onChange={(e) =>
                setFormData((p) => ({ ...p, content: e.target.value }))
              }
              required
              placeholder={dict.contentPlaceholder}
            />
          </div>
          <div>
            <Label>{dict.phoneLabel}</Label>
            <Input
              name="authorPhone"
              type="tel"
              value={formData.authorPhone}
              onChange={(e) =>
                setFormData((p) => ({ ...p, authorPhone: e.target.value }))
              }
              placeholder={dict.phonePlaceholder}
            />
          </div>
          <div className="flex items-center space-x-2 rtl:space-x-reverse">
            <Checkbox
              id="consent"
              checked={formData.isPhoneVisibleToMatch}
              onCheckedChange={(c) =>
                setFormData((p) => ({ ...p, isPhoneVisibleToMatch: !!c }))
              }
              disabled={!formData.authorPhone}
            />
            <Label htmlFor="consent">{dict.consentLabel}</Label>
          </div>
          <DialogFooter>
            <Button
              type="button"
              variant="ghost"
              onClick={() => setIsOpen(false)}
            >
              {dict.cancelButton}
            </Button>
            <Button type="submit" disabled={isLoading}>
              {isLoading ? (
                <Loader2 className="animate-spin" />
              ) : (
                dict.saveButton
              )}
            </Button>
          </DialogFooter>
        </form>
      </DialogContent>
    </Dialog>
  );
};

// ========================================================================
// ✨ Main Component: ProfileSection
// ========================================================================

const ProfileSection: React.FC<ProfileSectionProps> = ({
  profile: profileProp,
  isEditing,
  setIsEditing,
  viewOnly = false,
  onSave,
  dict,
  locale,
}) => {
  const [formData, setFormData] = useState<Partial<UserProfile>>({});
  const [loading, setLoading] = useState(true);
  const [initialData, setInitialData] = useState<Partial<UserProfile>>({});
  
  const [cityInputValue, setCityInputValue] = useState('');
  const [aliyaCountryInputValue, setAliyaCountryInputValue] = useState('');

  const direction = locale === 'he' ? 'rtl' : 'ltr';

  const characterTraitsOptions = useMemo(
    () =>
      Object.entries(dict.options.traits).map(([value, label]) => ({
        value,
        label,
        icon:
          {
            empathetic: Heart,
            driven: Briefcase,
            optimistic: Smile,
            family_oriented: Users,
            intellectual: BookOpen,
            organized: Palette,
            calm: Heart,
            humorous: Smile,
            sociable: Users,
            sensitive: Heart,
            independent: MapPin,
            creative: Palette,
            honest: Shield,
            responsible: Shield,
            easy_going: Smile,
          }[value] || Smile,
      })),
    [dict.options.traits]
  );

  const hobbiesOptions = useMemo(
    () =>
      Object.entries(dict.options.hobbies).map(([value, label]) => ({
        value,
        label,
        icon:
          {
            travel: MapPin,
            sports: Briefcase,
            reading: BookOpen,
            cooking_baking: Palette,
            music_playing_instrument: Languages,
            art_crafts: Palette,
            volunteering: Heart,
            learning_courses: BookOpen,
            board_games_puzzles: Smile,
            movies_theater: Smile,
            dancing: Users,
            writing: BookOpen,
            nature_hiking: MapPin,
            photography: Palette,
          }[value] || Smile,
      })),
    [dict.options.hobbies]
  );

  const maritalStatusOptions = useMemo(
    () =>
      Object.entries(dict.options.maritalStatus).map(([value, label]) => ({
        value,
        label,
      })),
    [dict.options.maritalStatus]
  );
  const religiousLevelOptions = useMemo(
    () =>
      Object.entries(dict.options.religiousLevel).map(([value, label]) => ({
        value,
        label,
      })),
    [dict.options.religiousLevel]
  );
  const religiousJourneyOptions = useMemo(
    () =>
      Object.entries(dict.options.religiousJourney).map(([value, label]) => ({
        value,
        label,
      })),
    [dict.options.religiousJourney]
  );
  const educationLevelOptions = useMemo(
    () =>
      Object.entries(dict.options.educationLevel).map(([value, label]) => ({
        value,
        label,
      })),
    [dict.options.educationLevel]
  );
  const serviceTypeOptions = useMemo(
    () =>
      Object.entries(dict.options.serviceType).map(([value, label]) => ({
        value,
        label,
      })),
    [dict.options.serviceType]
  );
  const headCoveringOptions = useMemo(
    () =>
      Object.entries(dict.options.headCovering).map(([value, label]) => ({
        value,
        label,
      })),
    [dict.options.headCovering]
  );
  const kippahTypeOptions = useMemo(
    () =>
      Object.entries(dict.options.kippahType).map(([value, label]) => ({
        value,
        label,
      })),
    [dict.options.kippahType]
  );
  const preferredMatchmakerGenderOptions = useMemo(
    () =>
      Object.entries(dict.options.matchmakerGender).map(([value, label]) => ({
        value,
        label,
      })),
    [dict.options.matchmakerGender]
  );

  const initializeFormData = useCallback((profileData: UserProfile | null) => {
    let headline = profileData?.profileHeadline || '';
    if (typeof headline === 'object' && headline !== null) {
      headline = '';
    }

    const dataToSet: Partial<UserProfile> = {
      gender: profileData?.gender || undefined,
      birthDate: ensureDateObject(profileData?.birthDate),
      nativeLanguage: profileData?.nativeLanguage || undefined,
      additionalLanguages: profileData?.additionalLanguages || [],
      height: profileData?.height ?? undefined,
      maritalStatus: profileData?.maritalStatus || undefined,
      occupation: profileData?.occupation || '',
      education: profileData?.education || '',
      educationLevel: profileData?.educationLevel || undefined,
      city: profileData?.city || '',
      origin: profileData?.origin || '',
      religiousJourney: profileData?.religiousJourney || undefined,
      religiousLevel: profileData?.religiousLevel || undefined,
      about: profileData?.about || '',
      parentStatus: profileData?.parentStatus || undefined,
      fatherOccupation: profileData?.fatherOccupation || '',
      motherOccupation: profileData?.motherOccupation || '',
      siblings: profileData?.siblings ?? undefined,
      position: profileData?.position ?? undefined,
      isProfileVisible: profileData?.isProfileVisible ?? true,
      preferredMatchmakerGender:
        profileData?.preferredMatchmakerGender || undefined,
      availabilityStatus:
        profileData?.availabilityStatus || AvailabilityStatus.AVAILABLE,
      availabilityNote: profileData?.availabilityNote || '',
      availabilityUpdatedAt: ensureDateObject(
        profileData?.availabilityUpdatedAt
      ),
      matchingNotes: profileData?.matchingNotes || '',
      shomerNegiah: profileData?.shomerNegiah ?? undefined,
      serviceType: profileData?.serviceType || undefined,
      serviceDetails: profileData?.serviceDetails || '',
      headCovering: profileData?.headCovering || undefined,
      kippahType: profileData?.kippahType || undefined,
      hasChildrenFromPrevious:
        profileData?.hasChildrenFromPrevious ?? undefined,
      profileCharacterTraits: profileData?.profileCharacterTraits || [],
      profileHobbies: profileData?.profileHobbies || [],
      aliyaCountry: profileData?.aliyaCountry || '',
      aliyaYear: profileData?.aliyaYear ?? undefined,
      id: profileData?.id,
      userId: profileData?.userId,
      createdAt: ensureDateObject(profileData?.createdAt),
      updatedAt: ensureDateObject(profileData?.updatedAt),
      lastActive: ensureDateObject(profileData?.lastActive),
      hasMedicalInfo: profileData?.hasMedicalInfo ?? false,
      medicalInfoDetails: profileData?.medicalInfoDetails || '',
      medicalInfoDisclosureTiming:
        profileData?.medicalInfoDisclosureTiming || undefined,
      isMedicalInfoVisible: profileData?.isMedicalInfoVisible ?? false,
      profileHeadline: headline,
      inspiringCoupleStory: profileData?.inspiringCoupleStory || '',
      influentialRabbi: profileData?.influentialRabbi || '',
      isAboutVisible: profileData?.isAboutVisible ?? true,
      isFriendsSectionVisible: profileData?.isFriendsSectionVisible ?? true,
      isNeshamaTechSummaryVisible: profileData?.isNeshamaTechSummaryVisible ?? true,
    };
    setFormData(dataToSet);
    setInitialData(dataToSet);

    setCityInputValue(dataToSet.city || '');
    setAliyaCountryInputValue(dataToSet.aliyaCountry || '');
  }, []);

  useEffect(() => {
    setLoading(true);
    if (profileProp) {
      initializeFormData(profileProp);
      setLoading(false);
    }
  }, [profileProp, initializeFormData]);

  const handleChange = (
    field: keyof UserProfile,
    value:
      | UserProfile[keyof UserProfile]
      | string
      | number
      | boolean
      | Date
      | string[]
      | null
  ) => {
    setFormData((prev) => {
      let finalValue: UserProfile[keyof UserProfile] | undefined = undefined;

      if (
        [
          'height',
          'siblings',
          'position',
          'aliyaYear'
        ].includes(field)
      ) {
        const rawValue = value as string | number;
        if (rawValue === '' || rawValue === null || rawValue === undefined) {
          finalValue = undefined;
        } else {
          const parsed = parseInt(String(rawValue), 10);
          finalValue = !isNaN(parsed)
            ? (parsed as UserProfile[typeof field])
            : undefined;
        }
      } else if (field === 'birthDate') {
        finalValue = ensureDateObject(
          value as string | Date | null | undefined
        ) as UserProfile[typeof field];
      } else {
        finalValue = (
          value === '' || value === null ? undefined : value
        ) as UserProfile[typeof field];
      }

      return {
        ...prev,
        [field]: finalValue,
      };
    });
  };

  const handleMultiSelectToggle = (
    field: keyof UserProfile,
    optionValue: string
  ) => {
    setFormData((prev) => {
      const currentValues = (prev[field] as string[]) || [];
      const newValues = currentValues.includes(optionValue)
        ? currentValues.filter((v) => v !== optionValue)
        : [...currentValues, optionValue];
      return { ...prev, [field]: newValues };
    });
  };

  const handleSave = () => {
    if (formData.about && formData.about.trim().length < 100) {
      toast.error(dict.toasts.validationErrorTitle, {
        description: dict.toasts.aboutMinLength.replace('{{count}}', '100'),
        duration: 5000,
      });
      return;
    }

    const dataToSave = { ...formData };
    onSave(dataToSave);
    setIsEditing(false);
    setInitialData(dataToSave);
  };

  const handleCancel = () => {
    setFormData(initialData);
    setCityInputValue(initialData.city || '');
    setAliyaCountryInputValue(initialData.aliyaCountry || '');
    setIsEditing(false);
  };

  if (loading) {
    return (
      <div role="status" aria-live="polite" className="text-center p-4">
        {dict.loading}
      </div>
    );
  }

  const renderMultiSelectBadges = (
    fieldValues: string[] | undefined,
    options: { value: string; label: string; icon?: React.ElementType }[],
    emptyPlaceholder: string
  ) => {
    if (!fieldValues || fieldValues.length === 0) {
      return <p className="text-sm text-gray-500 italic">{emptyPlaceholder}</p>;
    }
    return fieldValues.map((value) => {
      const option = options.find((opt) => opt.value === value);
      return option ? (
        <Badge
          key={value}
          variant="secondary"
          className="me-1 mb-1 bg-sky-100 text-sky-700 text-xs px-2 py-0.5 rounded-full"
        >
          {option.icon && <option.icon className="w-3 h-3 me-1" />}
          {option.label}
        </Badge>
      ) : null;
    });
  };

  return (
    <div className="relative" dir={direction}>
      <div className="sticky top-0 z-10 bg-gradient-to-b from-white via-white/95 to-white/0 pt-4 pb-3 backdrop-blur-sm">
        <div className="container mx-auto max-w-screen-xl px-4">
          <div className="flex items-center justify-between">
            <div className="text-start">
              <h1 className="text-xl md:text-2xl font-bold text-slate-800">
                {dict.header.title}
              </h1>
              <p className="text-sm text-slate-500">
                {isEditing && !viewOnly
                  ? dict.header.subtitleEdit
                  : dict.header.subtitleView}
              </p>
            </div>
            {!viewOnly && (
              <div className="flex gap-2">
                {!isEditing ? (
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={() => setIsEditing(true)}
                    className="rounded-full shadow-sm hover:shadow-md transition-all duration-300 border-cyan-400 text-cyan-700 hover:bg-cyan-50"
                  >
                    <Pencil className="w-3.5 h-3.5 ms-1.5" />
                    {dict.buttons.edit}
                  </Button>
                ) : (
                  <>
                    <div className="hidden sm:flex gap-2">
                      <Button
                        variant="outline"
                        size="sm"
                        onClick={handleCancel}
                        className="rounded-full shadow-sm hover:shadow-md transition-all duration-300 border-gray-300 text-gray-700 hover:bg-gray-50"
                      >
                        <X className="w-3.5 h-3.5 ms-1.5" />
                        {dict.buttons.cancel}
                      </Button>
                      <Button
                        variant="default"
                        size="sm"
                        onClick={handleSave}
                        className="rounded-full shadow-sm hover:shadow-md transition-all duration-300 bg-cyan-600 hover:bg-cyan-700 text-white"
                      >
                        <Save className="w-3.5 h-3.5 ms-1.5" />
                        {dict.buttons.save}
                      </Button>
                    </div>
                  </>
                )}
              </div>
            )}
          </div>
        </div>
      </div>

      <div className="container mx-auto max-w-screen-xl py-6 px-4">
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
          <div className="space-y-6">
            <Card className="bg-white/80 backdrop-blur-md rounded-2xl shadow-lg border border-gray-200/40 overflow-hidden">
              <CardHeader className="bg-gradient-to-r from-cyan-50/40 to-pink-50/40 border-b border-gray-200/50 p-4 flex items-center space-x-2 rtl:space-x-reverse">
                <UserCircle className="w-5 h-5 text-cyan-700" />
                <CardTitle className="text-base font-semibold text-gray-700">
                  {dict.cards.personal.title}
                </CardTitle>
              </CardHeader>
              <CardContent className="p-4 md:p-6">
                <div className="grid grid-cols-1 sm:grid-cols-2 gap-x-6 gap-y-5">
                  <div>
                    <Label
                      htmlFor="gender"
                      className="block mb-1.5 text-xs font-medium text-gray-600"
                    >
                      {dict.cards.personal.genderLabel}
                    </Label>
                    {isEditing && !viewOnly ? (
                      <Select
                        dir={direction}
                        value={formData.gender || ''}
                        onValueChange={(value) =>
                          handleChange('gender', value as Gender)
                        }
                      >
                        <SelectTrigger
                          id="gender"
                          className="h-9 text-sm focus:ring-cyan-500 text-start"
                        >
                          <SelectValue
                            placeholder={dict.cards.personal.genderPlaceholder}
                          />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="MALE">
                            {dict.options.gender.MALE}
                          </SelectItem>
                          <SelectItem value="FEMALE">
                            {dict.options.gender.FEMALE}
                          </SelectItem>
                        </SelectContent>
                      </Select>
                    ) : (
                      <p className="text-sm text-gray-800 font-medium mt-1">
                        {renderDisplayValue(
                          formData.gender
                            ? dict.options.gender[formData.gender]
                            : undefined,
                          dict
                        )}
                      </p>
                    )}
                  </div>
                  <div>
                    <Label
                      htmlFor="birthDate"
                      className="block mb-1.5 text-xs font-medium text-gray-600"
                    >
                      {dict.cards.personal.birthDateLabel}
                    </Label>
                    {isEditing && !viewOnly ? (
                      <Input
                        id="birthDate"
                        type="date"
                        value={
                          formData.birthDate instanceof Date &&
                          !isNaN(formData.birthDate.getTime())
                            ? formData.birthDate.toISOString().split('T')[0]
                            : ''
                        }
                        onChange={(e) =>
                          handleChange('birthDate', e.target.value || undefined)
                        }
                        className="h-9 text-sm focus:ring-cyan-500"
                        max={new Date().toISOString().split('T')[0]}
                      />
                    ) : (
                      <p className="text-sm text-gray-800 font-medium mt-1">
                        {renderDisplayValue(formData.birthDate, dict)}
                      </p>
                    )}
                  </div>
                  <div>
                    <Label
                      htmlFor="height"
                      className="block mb-1.5 text-xs font-medium text-gray-600"
                    >
                      {dict.cards.personal.heightLabel}
                    </Label>
                    {isEditing && !viewOnly ? (
                      <Input
                        id="height"
                        type="number"
                        value={formData.height ?? ''}
                        onChange={(e) => handleChange('height', e.target.value)}
                        className="h-9 text-sm focus:ring-cyan-500"
                        placeholder={dict.cards.personal.heightPlaceholder}
                        min="100"
                        max="250"
                      />
                    ) : (
                      <p className="text-sm text-gray-800 font-medium mt-1">
                        {renderDisplayValue(
                          formData.height ? `${formData.height} cm` : undefined,
                          dict
                        )}
                      </p>
                    )}
                  </div>
                  <div>
                    <Label
                      htmlFor="city-autocomplete"
                      className="block mb-1.5 text-xs font-medium text-gray-600"
                    >
                      {dict.cards.personal.cityLabel}
                    </Label>
                    {isEditing && !viewOnly ? (
                      <Autocomplete
                        apiKey={process.env.NEXT_PUBLIC_GOOGLE_MAPS_API_KEY}
                        inputProps={{ id: 'city-autocomplete' }}
                        value={cityInputValue}
                        onChange={(e: React.ChangeEvent<HTMLInputElement>) => {
                          setCityInputValue(e.target.value);
                        }}
                        onPlaceSelected={(place) => {
                          const cityComponent = place.address_components?.find(
                            (component) => component.types.includes('locality')
                          );
                          const selectedCity =
                            cityComponent?.long_name ||
                            place.formatted_address ||
                            '';
                          handleChange('city', selectedCity);
                          setCityInputValue(selectedCity);
                        }}
                        onBlur={() => {
                          if (cityInputValue !== formData.city) {
                            setCityInputValue(formData.city || '');
                          }
                        }}
                        options={{
                          types: ['(cities)'],
                          componentRestrictions: { country: 'il' },
                        }}
                        className="w-full h-9 text-sm p-2 border border-gray-300 rounded-md focus:ring-cyan-500 focus:border-cyan-500"
                        placeholder={dict.cards.personal.cityPlaceholder}
                      />
                    ) : (
                      <p className="text-sm text-gray-800 font-medium mt-1">
                        {renderDisplayValue(formData.city, dict)}
                      </p>
                    )}
                  </div>
                  <div>
                    <Label
                      htmlFor="origin"
                      className="block mb-1.5 text-xs font-medium text-gray-600"
                    >
                      {dict.cards.personal.originLabel}
                    </Label>
                    {isEditing && !viewOnly ? (
                      <Input
                        id="origin"
                        value={formData.origin || ''}
                        onChange={(e) => handleChange('origin', e.target.value)}
                        placeholder={dict.cards.personal.originPlaceholder}
                        className="h-9 text-sm focus:ring-cyan-500"
                      />
                    ) : (
                      <p className="text-sm text-gray-800 font-medium mt-1">
                        {renderDisplayValue(formData.origin, dict)}
                      </p>
                    )}
                  </div>
                  <div>
                    <Label
                      htmlFor="aliyaCountry-autocomplete"
                      className="block mb-1.5 text-xs font-medium text-gray-600"
                    >
                      {dict.cards.personal.aliyaCountryLabel}
                    </Label>
                    {isEditing && !viewOnly ? (
                      <Autocomplete
                        apiKey={process.env.NEXT_PUBLIC_GOOGLE_MAPS_API_KEY}
                        inputProps={{ id: 'aliyaCountry-autocomplete' }}
                        value={aliyaCountryInputValue}
                        onChange={(e: React.ChangeEvent<HTMLInputElement>) => {
                          setAliyaCountryInputValue(e.target.value);
                        }}
                        onPlaceSelected={(place) => {
                          const countryComponent =
                            place.address_components?.find((component) =>
                              component.types.includes('country')
                            );
                          const selectedCountry =
                            countryComponent?.long_name ||
                            place.formatted_address ||
                            '';
                          handleChange('aliyaCountry', selectedCountry);
                          setAliyaCountryInputValue(selectedCountry);
                        }}
                        onBlur={() => {
                          if (
                            aliyaCountryInputValue !== formData.aliyaCountry
                          ) {
                            setAliyaCountryInputValue(
                              formData.aliyaCountry || ''
                            );
                          }
                        }}
                        options={{
                          types: ['country'],
                        }}
                        className="w-full h-9 text-sm p-2 border border-gray-300 rounded-md focus:ring-cyan-500 focus:border-cyan-500"
                        placeholder={
                          dict.cards.personal.aliyaCountryPlaceholder
                        }
                      />
                    ) : (
                      <p className="text-sm text-gray-800 font-medium mt-1">
                        {renderDisplayValue(
                          formData.aliyaCountry,
                          dict,
                          dict.placeholders.notRelevant
                        )}
                      </p>
                    )}
                  </div>
                  <div>
                    <Label
                      htmlFor="aliyaYear"
                      className="block mb-1.5 text-xs font-medium text-gray-600"
                    >
                      {dict.cards.personal.aliyaYearLabel}
                    </Label>
                    {isEditing && !viewOnly ? (
                      <Input
                        id="aliyaYear"
                        type="number"
                        value={formData.aliyaYear ?? ''}
                        onChange={(e) =>
                          handleChange('aliyaYear', e.target.value)
                        }
                        disabled={!formData.aliyaCountry}
                        placeholder={dict.cards.personal.aliyaYearPlaceholder}
                        className="h-9 text-sm focus:ring-cyan-500"
                        min="1900"
                        max={new Date().getFullYear()}
                      />
                    ) : (
                      <p className="text-sm text-gray-800 font-medium mt-1">
                        {renderDisplayValue(
                          formData.aliyaYear,
                          dict,
                          formData.aliyaCountry
                            ? dict.placeholders.noYear
                            : dict.placeholders.notRelevant
                        )}
                      </p>
                    )}
                  </div>
                  <div>
                    <Label
                      htmlFor="nativeLanguage"
                      className="block mb-1.5 text-xs font-medium text-gray-600"
                    >
                      {dict.cards.personal.nativeLanguageLabel}
                    </Label>
                    {isEditing && !viewOnly ? (
                      <Select
                        dir={direction}
                        value={formData.nativeLanguage || ''}
                        onValueChange={(value) =>
                          handleChange('nativeLanguage', value || undefined)
                        }
                      >
                        <SelectTrigger
                          id="nativeLanguage"
                          className="h-9 text-sm focus:ring-cyan-500 text-start"
                        >
                          <SelectValue
                            placeholder={
                              dict.cards.personal.nativeLanguagePlaceholder
                            }
                          />
                        </SelectTrigger>
                        <SelectContent>
                          {languageOptions.map((lang) => (
                            <SelectItem key={lang.value} value={lang.value}>
                              {lang.label}
                            </SelectItem>
                          ))}
                        </SelectContent>
                      </Select>
                    ) : (
                      <p className="text-sm text-gray-800 font-medium mt-1">
                        {renderSelectDisplayValue(
                          formData.nativeLanguage,
                          languageOptions,
                          dict
                        )}
                      </p>
                    )}
                  </div>
                  <div className="sm:col-span-2 lg:col-span-1">
                    <Label
                      htmlFor="additionalLanguages"
                      className="block mb-1.5 text-xs font-medium text-gray-600"
                    >
                      {dict.cards.personal.additionalLanguagesLabel}
                    </Label>
                    {isEditing && !viewOnly ? (
                      <Select
                        dir={direction}
                        onValueChange={(value) => {
                          const currentLanguages =
                            formData.additionalLanguages || [];
                          if (!currentLanguages.includes(value)) {
                            handleChange('additionalLanguages', [
                              ...currentLanguages,
                              value,
                            ]);
                          }
                        }}
                      >
                        <SelectTrigger
                          id="additionalLanguages"
                          className="h-9 text-sm focus:ring-cyan-500 text-start"
                        >
                          <SelectValue
                            placeholder={
                              dict.cards.personal.additionalLanguagesPlaceholder
                            }
                          />
                        </SelectTrigger>
                        <SelectContent className="max-h-[200px]">
                          {languageOptions
                            .filter(
                              (lang) =>
                                !(formData.additionalLanguages || []).includes(
                                  lang.value
                                ) && lang.value !== formData.nativeLanguage
                            )
                            .map((lang) => (
                              <SelectItem key={lang.value} value={lang.value}>
                                {lang.label}
                              </SelectItem>
                            ))}
                        </SelectContent>
                      </Select>
                    ) : null}
                    <div className="mt-2 flex flex-wrap gap-1.5">
                      {(formData.additionalLanguages || []).map((langValue) => {
                        const lang = languageOptions.find(
                          (l) => l.value === langValue
                        );
                        return lang ? (
                          <Badge
                            key={lang.value}
                            variant="secondary"
                            className="bg-cyan-100/70 text-cyan-800 px-2 py-0.5 rounded-full text-[11px] font-medium flex items-center"
                          >
                            {lang.label}
                            {isEditing && !viewOnly && (
                              <button
                                type="button"
                                onClick={() =>
                                  handleChange(
                                    'additionalLanguages',
                                    (formData.additionalLanguages || []).filter(
                                      (l) => l !== langValue
                                    )
                                  )
                                }
                                className="ms-1.5 text-cyan-600 hover:text-cyan-800 text-xs"
                                aria-label={dict.cards.personal.removeLanguageLabel.replace(
                                  '{{lang}}',
                                  lang.label
                                )}
                              >
                                ×
                              </button>
                            )}
                          </Badge>
                        ) : null;
                      })}
                      {(!isEditing || viewOnly) &&
                        (!formData.additionalLanguages ||
                          formData.additionalLanguages.length === 0) && (
                          <p className="text-sm text-gray-500 italic">
                            {dict.cards.personal.noAdditionalLanguages}
                          </p>
                        )}
                    </div>
                  </div>
                </div>
              </CardContent>
            </Card>

            <Card className="bg-white/80 backdrop-blur-md rounded-2xl shadow-lg border border-gray-200/40 overflow-hidden">
              <CardHeader className="bg-gradient-to-r from-purple-50/40 to-indigo-50/40 border-b border-gray-200/50 p-4 flex items-center space-x-2 rtl:space-x-reverse">
                <Users className="w-5 h-5 text-purple-700" />
                <CardTitle className="text-base font-semibold text-gray-700">
                  {dict.cards.family.title}
                </CardTitle>
              </CardHeader>
              <CardContent className="p-4 md:p-6">
                <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-x-6 gap-y-5 items-start">
                  <div>
                    <Label
                      htmlFor="maritalStatus"
                      className="block mb-1.5 text-xs font-medium text-gray-600"
                    >
                      {dict.cards.family.maritalStatusLabel}
                    </Label>
                    {isEditing && !viewOnly ? (
                      <Select
                        dir={direction}
                        value={formData.maritalStatus || ''}
                        onValueChange={(value) =>
                          handleChange('maritalStatus', value || undefined)
                        }
                      >
                        <SelectTrigger
                          id="maritalStatus"
                          className="h-9 text-sm focus:ring-cyan-500 text-start"
                        >
                          <SelectValue
                            placeholder={
                              dict.cards.family.maritalStatusPlaceholder
                            }
                          />
                        </SelectTrigger>
                        <SelectContent>
                          {maritalStatusOptions.map((opt) => (
                            <SelectItem key={opt.value} value={opt.value}>
                              {opt.label}
                            </SelectItem>
                          ))}
                        </SelectContent>
                      </Select>
                    ) : (
                      <p className="text-sm text-gray-800 font-medium mt-1">
                        {renderSelectDisplayValue(
                          formData.maritalStatus,
                          maritalStatusOptions,
                          dict
                        )}
                      </p>
                    )}
                  </div>
                  {(formData.maritalStatus === 'divorced' ||
                    formData.maritalStatus === 'widowed' ||
                    formData.maritalStatus === 'annulled') && (
                    <div
                      className={cn(
                        'pt-1 sm:pt-0',
                        isEditing && !viewOnly ? 'sm:pt-5' : 'sm:pt-0'
                      )}
                    >
                      <Label
                        htmlFor="hasChildrenFromPrevious"
                        className="block mb-1.5 text-xs font-medium text-gray-600"
                      >
                        {dict.cards.family.hasChildrenLabel}
                      </Label>
                      {isEditing && !viewOnly ? (
                        <div className="flex items-center space-x-2 rtl:space-x-reverse mt-2">
                          <Checkbox
                            id="hasChildrenFromPrevious"
                            checked={formData.hasChildrenFromPrevious || false}
                            onCheckedChange={(checked) =>
                              handleChange(
                                'hasChildrenFromPrevious',
                                checked as boolean
                              )
                            }
                          />
                          <Label
                            htmlFor="hasChildrenFromPrevious"
                            className="text-sm font-normal text-gray-700"
                          >
                            {dict.cards.family.hasChildrenYes}
                          </Label>
                        </div>
                      ) : (
                        <p className="text-sm text-gray-800 font-medium mt-1">
                          {renderBooleanDisplayValue(
                            formData.hasChildrenFromPrevious,
                            dict
                          )}
                        </p>
                      )}
                    </div>
                  )}
                  <div>
                    <Label
                      htmlFor="parentStatus"
                      className="block mb-1.5 text-xs font-medium text-gray-600"
                    >
                      {dict.cards.family.parentStatusLabel}
                    </Label>
                    {isEditing && !viewOnly ? (
                      <Input
                        id="parentStatus"
                        value={formData.parentStatus || ''}
                        onChange={(e) =>
                          handleChange('parentStatus', e.target.value)
                        }
                        placeholder={dict.cards.family.parentStatusPlaceholder}
                        className="h-9 text-sm focus:ring-cyan-500"
                      />
                    ) : (
                      <p className="text-sm text-gray-800 font-medium mt-1">
                        {renderDisplayValue(formData.parentStatus, dict)}
                      </p>
                    )}
                  </div>

                  <div>
                    <Label
                      htmlFor="fatherOccupation"
                      className="block mb-1.5 text-xs font-medium text-gray-600"
                    >
                      {dict.cards.family.fatherOccupationLabel}
                    </Label>
                    {isEditing && !viewOnly ? (
                      <Input
                        id="fatherOccupation"
                        value={formData.fatherOccupation || ''}
                        onChange={(e) =>
                          handleChange('fatherOccupation', e.target.value)
                        }
                        placeholder={
                          dict.cards.family.fatherOccupationPlaceholder
                        }
                        className="h-9 text-sm focus:ring-cyan-500"
                      />
                    ) : (
                      <p className="text-sm text-gray-800 font-medium mt-1">
                        {renderDisplayValue(formData.fatherOccupation, dict)}
                      </p>
                    )}
                  </div>

                  <div>
                    <Label
                      htmlFor="motherOccupation"
                      className="block mb-1.5 text-xs font-medium text-gray-600"
                    >
                      {dict.cards.family.motherOccupationLabel}
                    </Label>
                    {isEditing && !viewOnly ? (
                      <Input
                        id="motherOccupation"
                        value={formData.motherOccupation || ''}
                        onChange={(e) =>
                          handleChange('motherOccupation', e.target.value)
                        }
                        placeholder={
                          dict.cards.family.motherOccupationPlaceholder
                        }
                        className="h-9 text-sm focus:ring-cyan-500"
                      />
                    ) : (
                      <p className="text-sm text-gray-800 font-medium mt-1">
                        {renderDisplayValue(formData.motherOccupation, dict)}
                      </p>
                    )}
                  </div>

                  <div>
                    <Label
                      htmlFor="siblings"
                      className="block mb-1.5 text-xs font-medium text-gray-600"
                    >
                      {dict.cards.family.siblingsLabel}
                    </Label>
                    {isEditing && !viewOnly ? (
                      <Input
                        id="siblings"
                        type="number"
                        value={formData.siblings ?? ''}
                        onChange={(e) =>
                          handleChange('siblings', e.target.value)
                        }
                        className="h-9 text-sm focus:ring-cyan-500"
                        placeholder={dict.cards.family.siblingsPlaceholder}
                        min="0"
                      />
                    ) : (
                      <p className="text-sm text-gray-800 font-medium mt-1">
                        {renderDisplayValue(formData.siblings, dict)}
                      </p>
                    )}
                  </div>
                  <div>
                    <Label
                      htmlFor="position"
                      className="block mb-1.5 text-xs font-medium text-gray-600"
                    >
                      {dict.cards.family.positionLabel}
                    </Label>
                    {isEditing && !viewOnly ? (
                      <Input
                        id="position"
                        type="number"
                        value={formData.position ?? ''}
                        onChange={(e) =>
                          handleChange('position', e.target.value)
                        }
                        className="h-9 text-sm focus:ring-cyan-500"
                        placeholder={dict.cards.family.positionPlaceholder}
                        min="0"
                      />
                    ) : (
                      <p className="text-sm text-gray-800 font-medium mt-1">
                        {renderDisplayValue(formData.position, dict)}
                      </p>
                    )}
                  </div>
                </div>
              </CardContent>
            </Card>

            <Card className="bg-white/80 backdrop-blur-md rounded-2xl shadow-lg border border-gray-200/40 overflow-hidden">
              <CardHeader className="bg-gradient-to-r from-yellow-50/40 to-amber-50/40 border-b border-gray-200/50 p-4 flex items-center space-x-2 rtl:space-x-reverse">
                <BookOpen className="w-5 h-5 text-amber-700" />
                <CardTitle className="text-base font-semibold text-gray-700">
                  {dict.cards.religion.title}
                </CardTitle>
              </CardHeader>
              <CardContent className="p-4 md:p-6">
                <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-x-6 gap-y-5 items-start">
                  <div>
                    <Label
                      htmlFor="religiousLevel"
                      className="block mb-1.5 text-xs font-medium text-gray-600"
                    >
                      {dict.cards.religion.religiousLevelLabel}
                    </Label>
                    {isEditing && !viewOnly ? (
                      <Select
                        dir={direction}
                        value={formData.religiousLevel || ''}
                        onValueChange={(value) =>
                          handleChange('religiousLevel', value || undefined)
                        }
                      >
                        <SelectTrigger
                          id="religiousLevel"
                          className="h-9 text-sm focus:ring-cyan-500 text-start"
                        >
                          <SelectValue
                            placeholder={
                              dict.cards.religion.religiousLevelPlaceholder
                            }
                          />
                        </SelectTrigger>
                        <SelectContent className="max-h-[250px]">
                          {religiousLevelOptions.map((opt) => (
                            <SelectItem key={opt.value} value={opt.value}>
                              {opt.label}
                            </SelectItem>
                          ))}
                        </SelectContent>
                      </Select>
                    ) : (
                      <p className="text-sm text-gray-800 font-medium mt-1">
                        {renderSelectDisplayValue(
                          formData.religiousLevel,
                          religiousLevelOptions,
                          dict
                        )}
                      </p>
                    )}
                  </div>
                  <div>
                    <Label
                      htmlFor="religiousJourney"
                      className="block mb-1.5 text-xs font-medium text-gray-600"
                    >
                      {dict.cards.religion.religiousJourneyLabel}
                    </Label>
                    {isEditing && !viewOnly ? (
                      <Select
                        dir={direction}
                        value={formData.religiousJourney || ''}
                        onValueChange={(value) =>
                          handleChange(
                            'religiousJourney',
                            (value as ReligiousJourney) || undefined
                          )
                        }
                      >
                        <SelectTrigger
                          id="religiousJourney"
                          className="h-9 text-sm focus:ring-cyan-500 text-start"
                        >
                          <SelectValue
                            placeholder={
                              dict.cards.religion.religiousJourneyPlaceholder
                            }
                          />
                        </SelectTrigger>
                        <SelectContent className="max-h-[250px]">
                          {religiousJourneyOptions.map((opt) => (
                            <SelectItem key={opt.value} value={opt.value}>
                              {opt.label}
                            </SelectItem>
                          ))}
                        </SelectContent>
                      </Select>
                    ) : (
                      <p className="text-sm text-gray-800 font-medium mt-1">
                        {renderSelectDisplayValue(
                          formData.religiousJourney,
                          religiousJourneyOptions,
                          dict
                        )}
                      </p>
                    )}
                  </div>
                  <div
                    className={cn(
                      'pt-1 sm:pt-0',
                      isEditing && !viewOnly ? 'sm:pt-5' : 'sm:pt-0'
                    )}
                  >
                    <Label className="block mb-1.5 text-xs font-medium text-gray-600">
                      {dict.cards.religion.shomerNegiahLabel}
                    </Label>
                    {isEditing && !viewOnly ? (
                      <div className="flex items-center space-x-2 rtl:space-x-reverse mt-2">
                        <Checkbox
                          id="shomerNegiah"
                          checked={formData.shomerNegiah || false}
                          onCheckedChange={(checked) =>
                            handleChange('shomerNegiah', checked as boolean)
                          }
                        />
                        <Label
                          htmlFor="shomerNegiah"
                          className="text-sm font-normal text-gray-700"
                        >
                          {dict.cards.religion.shomerNegiahYes}
                        </Label>
                      </div>
                    ) : (
                      <p className="text-sm text-gray-800 font-medium mt-1">
                        {renderBooleanDisplayValue(
                          formData.shomerNegiah,
                          dict,
                          dict.cards.religion.shomerNegiahYes
                        )}
                      </p>
                    )}
                  </div>
                  {formData.gender === Gender.FEMALE && (
                    <div>
                      <Label
                        htmlFor="headCovering"
                        className="block mb-1.5 text-xs font-medium text-gray-600"
                      >
                        {dict.cards.religion.headCoveringLabel}
                      </Label>
                      {isEditing && !viewOnly ? (
                        <Select
                          dir={direction}
                          value={formData.headCovering || ''}
                          onValueChange={(value) =>
                            handleChange(
                              'headCovering',
                              (value as HeadCoveringType) || undefined
                            )
                          }
                        >
                          <SelectTrigger
                            id="headCovering"
                            className="h-9 text-sm focus:ring-cyan-500 text-start"
                          >
                            <SelectValue
                              placeholder={
                                dict.cards.religion.headCoveringPlaceholder
                              }
                            />
                          </SelectTrigger>
                          <SelectContent>
                            {headCoveringOptions.map((opt) => (
                              <SelectItem key={opt.value} value={opt.value}>
                                {opt.label}
                              </SelectItem>
                            ))}
                          </SelectContent>
                        </Select>
                      ) : (
                        <p className="text-sm text-gray-800 font-medium mt-1">
                          {renderSelectDisplayValue(
                            formData.headCovering,
                            headCoveringOptions,
                            dict,
                            dict.cards.religion.headCoveringDefault
                          )}
                        </p>
                      )}
                    </div>
                  )}
                  {formData.gender === Gender.MALE && (
                    <div>
                      <Label
                        htmlFor="kippahType"
                        className="block mb-1.5 text-xs font-medium text-gray-600"
                      >
                        {dict.cards.religion.kippahTypeLabel}
                      </Label>
                      {isEditing && !viewOnly ? (
                        <Select
                          dir={direction}
                          value={formData.kippahType || ''}
                          onValueChange={(value) =>
                            handleChange(
                              'kippahType',
                              (value as KippahType) || undefined
                            )
                          }
                        >
                          <SelectTrigger
                            id="kippahType"
                            className="h-9 text-sm focus:ring-cyan-500 text-start"
                          >
                            <SelectValue
                              placeholder={
                                dict.cards.religion.kippahTypePlaceholder
                              }
                            />
                          </SelectTrigger>
                          <SelectContent className="max-h-[200px]">
                            {kippahTypeOptions.map((opt) => (
                              <SelectItem key={opt.value} value={opt.value}>
                                {opt.label}
                              </SelectItem>
                            ))}
                          </SelectContent>
                        </Select>
                      ) : (
                        <p className="text-sm text-gray-800 font-medium mt-1">
                          {renderSelectDisplayValue(
                            formData.kippahType,
                            kippahTypeOptions,
                            dict,
                            dict.cards.religion.kippahTypeDefault
                          )}
                        </p>
                      )}
                    </div>
                  )}
                  <div>
                    <Label
                      htmlFor="preferredMatchmakerGender"
                      className="block mb-1.5 text-xs font-medium text-gray-600"
                    >
                      {dict.cards.religion.matchmakerGenderLabel}
                    </Label>
                    {isEditing && !viewOnly ? (
                      <Select
                        dir={direction}
                        value={formData.preferredMatchmakerGender || ''}
                        onValueChange={(value) =>
                          handleChange(
                            'preferredMatchmakerGender',
                            (value as Gender) || undefined
                          )
                        }
                      >
                        <SelectTrigger
                          id="preferredMatchmakerGender"
                          className="h-9 text-sm focus:ring-cyan-500 text-start"
                        >
                          <SelectValue
                            placeholder={
                              dict.cards.religion.matchmakerGenderPlaceholder
                            }
                          />
                        </SelectTrigger>
                        <SelectContent>
                          {preferredMatchmakerGenderOptions.map((opt) => (
                            <SelectItem key={opt.value} value={opt.value}>
                              {opt.label}
                            </SelectItem>
                          ))}
                        </SelectContent>
                      </Select>
                    ) : (
                      <p className="text-sm text-gray-800 font-medium mt-1">
                        {renderSelectDisplayValue(
                          formData.preferredMatchmakerGender,
                          preferredMatchmakerGenderOptions,
                          dict,
                          dict.cards.religion.matchmakerGenderDefault
                        )}
                      </p>
                    )}
                  </div>
                </div>

                <div className="mt-6 pt-6 border-t border-gray-200/70">
                  <div className="flex items-center gap-1.5 mb-2">
                    <Label
                      htmlFor="influentialRabbi"
                      className="text-sm font-medium text-gray-700"
                    >
                      {dict.cards.religion.influentialRabbiLabel}
                    </Label>
                    <TooltipProvider>
                      <Tooltip>
                        <TooltipTrigger asChild>
                          <button
                            type="button"
                            aria-describedby="rabbi-tooltip"
                          >
                            <Info className="w-4 h-4 text-gray-400" />
                          </button>
                        </TooltipTrigger>
                        <TooltipContent
                          id="rabbi-tooltip"
                          side="top"
                          className="max-w-xs text-center"
                        >
                          <p>{dict.tooltips.influentialRabbi}</p>
                        </TooltipContent>
                      </Tooltip>
                    </TooltipProvider>
                  </div>
                  {isEditing && !viewOnly ? (
                    <Textarea
                      id="influentialRabbi"
                      value={formData.influentialRabbi || ''}
                      onChange={(e) =>
                        handleChange('influentialRabbi', e.target.value)
                      }
                      className="text-sm focus:ring-cyan-500 min-h-[90px] rounded-lg"
                      placeholder={
                        dict.cards.religion.influentialRabbiPlaceholder
                      }
                      rows={3}
                    />
                  ) : (
                    <p className="mt-1 text-sm text-gray-700 whitespace-pre-wrap min-h-[50px] bg-slate-50/70 p-3 rounded-lg border border-slate-200/50">
                      {renderDisplayValue(
                        formData.influentialRabbi,
                        dict,
                        dict.cards.religion.influentialRabbiEmpty
                      )}
                    </p>
                  )}
                </div>
              </CardContent>
            </Card>
            
               <Card className="bg-white/80 backdrop-blur-md rounded-2xl shadow-lg border border-gray-200/40 overflow-hidden">
              <CardHeader className="bg-gradient-to-r from-red-50/40 to-pink-50/40 border-b border-gray-200/50 p-4">
                <div className="flex items-center space-x-2 rtl:space-x-reverse">
                  <HeartPulse className="w-5 h-5 text-red-700" />
                  <CardTitle className="text-base font-semibold text-gray-700">
                    {dict.cards.medical.title}
                  </CardTitle>
                  <TooltipProvider delayDuration={100}>
                    <Tooltip>
                      <TooltipTrigger asChild>
                        <button
                          type="button"
                          aria-describedby="medical-tooltip"
                        >
                          <Lock className="w-4 h-4 text-gray-400" />
                        </button>
                      </TooltipTrigger>
                      <TooltipContent id="medical-tooltip">
                        <p>{dict.cards.medical.tooltip}</p>
                      </TooltipContent>
                    </Tooltip>
                  </TooltipProvider>
                </div>
              </CardHeader>
              <CardContent className="p-4 md:p-6 space-y-4">
                <div className="text-sm text-gray-600 bg-gray-50 p-3 rounded-lg border border-gray-200/80">
                  {dict.cards.medical.description}
                </div>

                {isEditing && !viewOnly ? (
                  <div className="space-y-4">
                    <div className="flex items-center space-x-2 rtl:space-x-reverse">
                      <Checkbox
                        id="hasMedicalInfo"
                        checked={formData.hasMedicalInfo || false}
                        onCheckedChange={(checked) =>
                          handleChange('hasMedicalInfo', checked as boolean)
                        }
                      />
                      <Label
                        htmlFor="hasMedicalInfo"
                        className="text-sm font-medium text-gray-700 cursor-pointer"
                      >
                        {dict.cards.medical.hasInfoLabel}
                      </Label>
                    </div>

                    {formData.hasMedicalInfo && (
                      <div className="space-y-4 border-t pt-4 animate-in fade-in-50">
                        <div>
                          <Label
                            htmlFor="medicalInfoDetails"
                            className="block mb-1.5 text-xs font-medium text-gray-600"
                          >
                            {dict.cards.medical.detailsLabel}
                          </Label>
                          <Textarea
                            id="medicalInfoDetails"
                            value={formData.medicalInfoDetails || ''}
                            onChange={(e) =>
                              handleChange('medicalInfoDetails', e.target.value)
                            }
                            className="text-sm focus:ring-cyan-500 min-h-[100px] rounded-lg"
                            placeholder={dict.cards.medical.detailsPlaceholder}
                          />
                        </div>
                        <div>
                          <Label
                            htmlFor="medicalInfoDisclosureTiming"
                            className="block mb-1.5 text-xs font-medium text-gray-600"
                          >
                            {dict.cards.medical.timingLabel}
                          </Label>
                          <Select
                            dir={direction}
                            value={formData.medicalInfoDisclosureTiming || ''}
                            onValueChange={(value) =>
                              handleChange(
                                'medicalInfoDisclosureTiming',
                                value || undefined
                              )
                            }
                          >
                            <SelectTrigger
                              id="medicalInfoDisclosureTiming"
                              className="h-9 text-sm focus:ring-cyan-500 text-start"
                            >
                              <SelectValue
                                placeholder={
                                  dict.cards.medical.timingPlaceholder
                                }
                              />
                            </SelectTrigger>
                            <SelectContent>
                              {Object.entries(dict.options.medicalTiming).map(
                                ([value, label]) => (
                                  <SelectItem key={value} value={value}>
                                    {label}
                                  </SelectItem>
                                )
                              )}
                            </SelectContent>
                          </Select>
                        </div>

                        <div className="border-t pt-4">
                          <Label className="block mb-2 text-xs font-medium text-gray-600">
                            {dict.cards.medical.visibilityLabel}
                          </Label>
                          <div className="flex items-center gap-3 bg-gray-50 p-3 rounded-lg">
                            <Switch
                              id="isMedicalInfoVisible"
                              checked={!!formData.isMedicalInfoVisible}
                              onCheckedChange={(checked) =>
                                handleChange('isMedicalInfoVisible', checked)
                              }
                              className="data-[state=checked]:bg-green-500"
                            />
                            <div className="flex flex-col">
                              <Label
                                htmlFor="isMedicalInfoVisible"
                                className="text-sm font-medium text-gray-800 cursor-pointer"
                              >
                                {formData.isMedicalInfoVisible
                                  ? dict.cards.medical.visibilityToggle.visible
                                  : dict.cards.medical.visibilityToggle.hidden}
                              </Label>
                              <p className="text-xs text-gray-500">
                                {formData.isMedicalInfoVisible
                                  ? dict.cards.medical.visibilityDescription
                                      .visible
                                  : dict.cards.medical.visibilityDescription
                                      .hidden}
                              </p>
                            </div>
                          </div>
                        </div>
                      </div>
                    )}
                  </div>
                ) : (
                  <div className="space-y-4">
                    <div>
                      <p className="block text-xs font-medium text-gray-500">
                        {dict.cards.medical.display.sharedInfo}
                      </p>
                      <p className="text-sm text-gray-800 font-medium mt-1">
                        {renderBooleanDisplayValue(
                          formData.hasMedicalInfo,
                          dict,
                          dict.cards.medical.display.yes,
                          dict.cards.medical.display.no
                        )}
                      </p>
                    </div>
                    {formData.hasMedicalInfo && (
                      <>
                        <div>
                          <p className="block text-xs font-medium text-gray-500">
                            {dict.cards.medical.display.details}
                          </p>
                          <p className="mt-1 text-sm text-gray-700 whitespace-pre-wrap min-h-[40px] bg-slate-50/70 p-3 rounded-lg border border-slate-200/50">
                            {formData.medicalInfoDetails || (
                              <span className="text-gray-500 italic">
                                {dict.cards.medical.display.noDetails}
                              </span>
                            )}
                          </p>
                        </div>
                        <div>
                          <p className="block text-xs font-medium text-gray-500">
                            {dict.cards.medical.display.timing}
                          </p>
                          <p className="text-sm text-gray-800 font-medium mt-1">
                            {renderSelectDisplayValue(
                              formData.medicalInfoDisclosureTiming,
                              Object.entries(dict.options.medicalTiming).map(
                                ([value, label]) => ({ value, label })
                              ),
                              dict
                            )}
                          </p>
                        </div>
                        <div>
                          <p className="block text-xs font-medium text-gray-500">
                            {dict.cards.medical.display.visibility}
                          </p>
                          <div className="flex items-center gap-2 mt-1">
                            {formData.isMedicalInfoVisible ? (
                              <Badge
                                variant="secondary"
                                className="bg-green-100 text-green-800"
                              >
                                <Eye className="w-3.5 h-3.5 ms-1.5" />
                                {dict.cards.medical.display.visibleBadge}
                              </Badge>
                            ) : (
                              <Badge
                                variant="secondary"
                                className="bg-gray-100 text-gray-700"
                              >
                                <Lock className="w-3.5 h-3.5 ms-1.5" />
                                {dict.cards.medical.display.hiddenBadge}
                              </Badge>
                            )}
                          </div>
                        </div>
                      </>
                    )}
                  </div>
                )}
              </CardContent>
            </Card>
              <FriendTestimonialsManager
              profile={profileProp}
              isEditing={isEditing}
              dict={dict}
              handleChange={handleChange}
              formData={formData}
            />
          </div>

          <div className="space-y-6">
         <StoryAndMoreCard
              profile={profileProp}
              isEditing={isEditing}
              dict={dict}
              handleChange={handleChange}
              formData={formData}
            />
         

            <Card className="bg-white/80 backdrop-blur-md rounded-2xl shadow-lg border border-gray-200/40 overflow-hidden">
              <CardHeader className="bg-gradient-to-r from-teal-50/40 to-green-50/40 border-b border-gray-200/50 p-4 flex items-center space-x-2 rtl:space-x-reverse">
                <Briefcase className="w-5 h-5 text-teal-700" />
                <CardTitle className="text-base font-semibold text-gray-700">
                  {dict.cards.education.title}
                </CardTitle>
              </CardHeader>
              <CardContent className="p-4 md:p-6">
                <div className="grid grid-cols-1 sm:grid-cols-2 gap-x-6 gap-y-5">
                  <div>
                    <Label
                      htmlFor="educationLevel"
                      className="block mb-1.5 text-xs font-medium text-gray-600"
                    >
                      {dict.cards.education.levelLabel}
                    </Label>
                    {isEditing && !viewOnly ? (
                      <Select
                        dir={direction}
                        value={formData.educationLevel || ''}
                        onValueChange={(value) =>
                          handleChange('educationLevel', value || undefined)
                        }
                      >
                        <SelectTrigger
                          id="educationLevel"
                          className="h-9 text-sm focus:ring-cyan-500 text-start"
                        >
                          <SelectValue
                            placeholder={dict.cards.education.levelPlaceholder}
                          />
                        </SelectTrigger>
                        <SelectContent>
                          {educationLevelOptions.map((opt) => (
                            <SelectItem key={opt.value} value={opt.value}>
                              {opt.label}
                            </SelectItem>
                          ))}
                        </SelectContent>
                      </Select>
                    ) : (
                      <p className="text-sm text-gray-800 font-medium mt-1">
                        {renderSelectDisplayValue(
                          formData.educationLevel,
                          educationLevelOptions,
                          dict
                        )}
                      </p>
                    )}
                  </div>
                  <div className="sm:col-span-2">
                    <Label
                      htmlFor="education"
                      className="block mb-1.5 text-xs font-medium text-gray-600"
                    >
                      {dict.cards.education.detailsLabel}
                    </Label>
                    {isEditing && !viewOnly ? (
                      <Input
                        id="education"
                        value={formData.education || ''}
                        onChange={(e) =>
                          handleChange('education', e.target.value)
                        }
                        placeholder={dict.cards.education.detailsPlaceholder}
                        className="h-9 text-sm focus:ring-cyan-500"
                      />
                    ) : (
                      <p className="text-sm text-gray-800 font-medium mt-1">
                        {renderDisplayValue(formData.education, dict)}
                      </p>
                    )}
                  </div>
                  <div className="sm:col-span-2">
                    <Label
                      htmlFor="occupation"
                      className="block mb-1.5 text-xs font-medium text-gray-600"
                    >
                      {dict.cards.education.occupationLabel}
                    </Label>
                    {isEditing && !viewOnly ? (
                      <Input
                        id="occupation"
                        value={formData.occupation || ''}
                        onChange={(e) =>
                          handleChange('occupation', e.target.value)
                        }
                        placeholder={dict.cards.education.occupationPlaceholder}
                        className="h-9 text-sm focus:ring-cyan-500"
                        maxLength={20}
                      />
                    ) : (
                      <p className="text-sm text-gray-800 font-medium mt-1">
                        {renderDisplayValue(formData.occupation, dict)}
                      </p>
                    )}
                  </div>
                  <div>
                    <Label
                      htmlFor="serviceType"
                      className="block mb-1.5 text-xs font-medium text-gray-600"
                    >
                      {dict.cards.education.serviceTypeLabel}
                    </Label>
                    {isEditing && !viewOnly ? (
                      <Select
                        dir={direction}
                        value={formData.serviceType || ''}
                        onValueChange={(value) =>
                          handleChange(
                            'serviceType',
                            (value as ServiceType) || undefined
                          )
                        }
                      >
                        <SelectTrigger
                          id="serviceType"
                          className="h-9 text-sm focus:ring-cyan-500 text-start"
                        >
                          <SelectValue
                            placeholder={
                              dict.cards.education.serviceTypePlaceholder
                            }
                          />
                        </SelectTrigger>
                        <SelectContent className="max-h-[250px]">
                          {serviceTypeOptions.map((opt) => (
                            <SelectItem key={opt.value} value={opt.value}>
                              {opt.label}
                            </SelectItem>
                          ))}
                        </SelectContent>
                      </Select>
                    ) : (
                      <p className="text-sm text-gray-800 font-medium mt-1">
                        {renderSelectDisplayValue(
                          formData.serviceType,
                          serviceTypeOptions,
                          dict
                        )}
                      </p>
                    )}
                  </div>
                  <div className="sm:col-span-2">
                    <Label
                      htmlFor="serviceDetails"
                      className="block mb-1.5 text-xs font-medium text-gray-600"
                    >
                      {dict.cards.education.serviceDetailsLabel}
                    </Label>
                    {isEditing && !viewOnly ? (
                      <Input
                        id="serviceDetails"
                        value={formData.serviceDetails || ''}
                        onChange={(e) =>
                          handleChange('serviceDetails', e.target.value)
                        }
                        placeholder={
                          dict.cards.education.serviceDetailsPlaceholder
                        }
                        className="h-9 text-sm focus:ring-cyan-500"
                      />
                    ) : (
                      <p className="text-sm text-gray-800 font-medium mt-1">
                        {renderDisplayValue(formData.serviceDetails, dict)}
                      </p>
                    )}
                  </div>
                </div>
              </CardContent>
            </Card>

            <Card className="bg-white/80 backdrop-blur-md rounded-2xl shadow-lg border border-gray-200/40 overflow-hidden">
              <CardHeader className="bg-gradient-to-r from-amber-50/40 to-yellow-50/40 border-b border-gray-200/50 p-4 flex items-center space-x-2 rtl:space-x-reverse">
                <Smile className="w-5 h-5 text-amber-600" />
                <CardTitle className="text-base font-semibold text-gray-700">
                  {dict.cards.character.title}
                </CardTitle>
              </CardHeader>
              <CardContent className="p-4 md:p-6 space-y-6">
                <fieldset>
                  <legend className="block mb-2 text-sm font-medium text-gray-700">
                    {dict.cards.character.traitsLabel}
                  </legend>
                  {isEditing && !viewOnly ? (
                    <div className="flex flex-wrap gap-2">
                      {characterTraitsOptions.map((trait) => (
                        <Button
                          key={trait.value}
                          type="button"
                          variant={
                            (formData.profileCharacterTraits || []).includes(
                              trait.value
                            )
                              ? 'default'
                              : 'outline'
                          }
                          size="sm"
                          onClick={() =>
                            handleMultiSelectToggle(
                              'profileCharacterTraits',
                              trait.value
                            )
                          }
                          disabled={
                            !viewOnly &&
                            (formData.profileCharacterTraits || []).length >=
                              3 &&
                            !(formData.profileCharacterTraits || []).includes(
                              trait.value
                            )
                          }
                          className={cn(
                            'rounded-full text-xs px-3 py-1.5 transition-all',
                            (formData.profileCharacterTraits || []).includes(
                              trait.value
                            )
                              ? 'bg-amber-500 hover:bg-amber-600 text-white border-amber-500'
                              : 'border-gray-300 text-gray-600 hover:bg-gray-50 hover:border-gray-400'
                          )}
                        >
                          {trait.icon && (
                            <trait.icon className="w-3.5 h-3.5 ms-1.5" />
                          )}
                          {trait.label}
                        </Button>
                      ))}
                    </div>
                  ) : (
                    <div className="mt-1 flex flex-wrap gap-1.5">
                      {renderMultiSelectBadges(
                        formData.profileCharacterTraits,
                        characterTraitsOptions,
                        dict.cards.character.traitsEmpty
                      )}
                    </div>
                  )}
                </fieldset>
                <fieldset>
                  <legend className="block mb-2 text-sm font-medium text-gray-700">
                    {dict.cards.character.hobbiesLabel}
                  </legend>
                  {isEditing && !viewOnly ? (
                    <div className="flex flex-wrap gap-2">
                      {hobbiesOptions.map((hobby) => (
                        <Button
                          key={hobby.value}
                          type="button"
                          variant={
                            (formData.profileHobbies || []).includes(
                              hobby.value
                            )
                              ? 'default'
                              : 'outline'
                          }
                          size="sm"
                          onClick={() =>
                            handleMultiSelectToggle(
                              'profileHobbies',
                              hobby.value
                            )
                          }
                          disabled={
                            !viewOnly &&
                            (formData.profileHobbies || []).length >= 3 &&
                            !(formData.profileHobbies || []).includes(
                              hobby.value
                            )
                          }
                          className={cn(
                            'rounded-full text-xs px-3 py-1.5 transition-all',
                            (formData.profileHobbies || []).includes(
                              hobby.value
                            )
                              ? 'bg-sky-500 hover:bg-sky-600 text-white border-sky-500'
                              : 'border-gray-300 text-gray-600 hover:bg-gray-50 hover:border-gray-400'
                          )}
                        >
                          {hobby.icon && (
                            <hobby.icon className="w-3.5 h-3.5 ms-1.5" />
                          )}
                          {hobby.label}
                        </Button>
                      ))}
                    </div>
                  ) : (
                    <div className="mt-1 flex flex-wrap gap-1.5">
                      {renderMultiSelectBadges(
                        formData.profileHobbies,
                        hobbiesOptions,
                        dict.cards.character.hobbiesEmpty
                      )}
                    </div>
                  )}
                </fieldset>
              </CardContent>
            </Card>
                    <NeshamaTechSummaryCard
              profile={profileProp}
              isEditing={isEditing}
              dict={dict}
              handleChange={handleChange}
              formData={formData}
            />
          
          </div>
        </div>
      </div>

      {isEditing && !viewOnly && (
        <div className="sticky bottom-0 z-20 mt-4 border-t border-gray-200 bg-white/90 p-4 backdrop-blur-md shadow-[0_-4px_15px_-5px_rgba(0,0,0,0.15)] sm:hidden">
          <div className="flex items-center justify-center gap-3">
            <Button
              variant="outline"
              size="sm"
              onClick={handleCancel}
              className="rounded-full shadow-sm hover:shadow-md transition-all duration-300 border-gray-300 text-gray-700 hover:bg-gray-50 px-6 py-2"
            >
              <X className="w-4 h-4 ms-1.5" />
              {dict.buttons.cancel}
            </Button>
            <Button
              variant="default"
              size="sm"
              onClick={handleSave}
              className="rounded-full shadow-sm hover:shadow-md transition-all duration-300 bg-cyan-600 hover:bg-cyan-700 text-white px-6 py-2"
            >
              <Save className="w-4 h-4 ms-1.5" />
              {dict.buttons.saveChanges}
            </Button>
          </div>
        </div>
      )}
    </div>
  );
};

export default ProfileSection;
--- End of Content for ProfileSection.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\profile\sections\QuestionnaireResponsesSection.tsx
--------------------------------------------------------------------------------
Content:
// src/app/components/profile/sections/QuestionnaireResponsesSection.tsx

import React, { useState, useMemo, useEffect } from 'react';
import { Progress } from '@/components/ui/progress';
import Link from 'next/link';
import {
  Card,
  CardHeader,
  CardTitle,
  CardContent,
  CardDescription,
} from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
// Textarea is no longer needed for editing here, but might be used elsewhere.
// Keeping it for now, but it can be removed if not used in other contexts.
import { Textarea } from '@/components/ui/textarea';
import {
  Book,
  CheckCircle,
  Clock,
  Pencil,
  X,
  Save,
  Eye,
  EyeOff,
  Loader2,
  ArrowRight,
  ArrowLeft,
  Trash2,
} from 'lucide-react';
import { cn } from '@/lib/utils';
import { toast } from 'sonner';
import {
  Tooltip,
  TooltipProvider,
  TooltipContent,
  TooltipTrigger,
} from '@/components/ui/tooltip';
import BudgetDisplay from './BudgetDisplay';

import type {
  QuestionnaireResponse,
  FormattedAnswer,
  UpdateValue,
} from '@/types/next-auth';
import type { ProfilePageDictionary } from '@/types/dictionary';
import { WORLDS_CONFIG } from '../constants';

const QUESTIONNAIRE_URL = '/questionnaire';

interface QuestionnaireResponsesSectionProps {
  questionnaire: QuestionnaireResponse | null;
  onUpdate?: (
    world: string,
    questionId: string,
    value: UpdateValue
  ) => Promise<void>;
  isEditable?: boolean;
  dict: ProfilePageDictionary;
  locale: string;
}

interface QuestionCardProps {
  question: string;
  answer: FormattedAnswer;
  isEditingGlobally: boolean;
  worldKey: string;
  onUpdate: (
    world: string,
    questionId: string,
    value: UpdateValue
  ) => Promise<void>;
  isFirstInList?: boolean;
  dict: ProfilePageDictionary;
  locale: string;
}

interface WorldSectionProps {
  worldKey: keyof typeof WORLDS_CONFIG;
  worldConfig: (typeof WORLDS_CONFIG)[keyof typeof WORLDS_CONFIG];
  answers: FormattedAnswer[];
  isEditingGlobally: boolean;
  onUpdate: (
    world: string,
    questionId: string,
    value: UpdateValue
  ) => Promise<void>;
  isCompleted: boolean;
  className?: string;
  dict: ProfilePageDictionary;
  locale: string;
}

const QuestionCard: React.FC<QuestionCardProps> = ({
  question,
  answer,
  isEditingGlobally,
  worldKey,
  onUpdate,
  dict,
  locale,
}) => {
  // --- START: שינויים ---
  // הסרת מצבים הקשורים לעריכת טקסט מקומית
  // const [isEditingText, setIsEditingText] = useState(false);
  // const [editValue, setEditValue] = useState(answer.displayText);
  // const [isSavingText, setIsSavingText] = useState(false);
  const [isSavingVisibility, setIsSavingVisibility] = useState(false);
  const [isDeleting, setIsDeleting] = useState(false);
  const [currentIsVisible, setCurrentIsVisible] = useState(
    answer.isVisible ?? true
  );
  // --- END: שינויים ---

  const direction = locale === 'he' ? 'rtl' : 'ltr';
  const t = dict.questionnaireSection.questionCard;

  useEffect(() => {
    setCurrentIsVisible(answer.isVisible ?? true);
  }, [answer.isVisible]);

  // --- START: שינויים ---
  // עדכון המשתנה isSaving כדי שיכלול רק את המצבים הרלוונטיים
  const isSaving = isSavingVisibility || isDeleting;
  // --- END: שינויים ---

  // --- START: שינויים ---
  // הסרת פונקציות הקשורות לעריכת טקסט מקומית
  /*
  const handleStartEdit = () => {
    if (isSaving) return;
    setIsEditingText(true);
    setEditValue(answer.displayText);
  };

  const handleSaveText = async () => {
    if (!editValue?.trim()) {
      toast.error(t.toasts.emptyAnswer);
      return;
    }
    if (editValue.trim() === answer.displayText) {
      setIsEditingText(false);
      return;
    }

    setIsSavingText(true);
    try {
      await onUpdate(worldKey, answer.questionId, {
        type: 'answer',
        value: editValue.trim(),
      });
      toast.success(t.toasts.updateSuccess);
      setIsEditingText(false);
    } catch (error) {
      console.error('Error updating answer:', error);
      toast.error(t.toasts.updateError);
    } finally {
      setIsSavingText(false);
    }
  };

  const handleCancelEdit = () => {
    setIsEditingText(false);
    setEditValue(answer.displayText);
  };
  */
  // --- END: שינויים ---

  const handleVisibilityChange = async (newIsVisibleState: boolean) => {
    setCurrentIsVisible(newIsVisibleState);
    setIsSavingVisibility(true);
    try {
      await onUpdate(worldKey, answer.questionId, {
        type: 'visibility',
        isVisible: newIsVisibleState,
      });
      toast.success(t.toasts.visibilitySuccess);
    } catch (error) {
      console.error('Error updating visibility:', error);
      toast.error(t.toasts.visibilityError);
      setCurrentIsVisible(answer.isVisible ?? true);
    } finally {
      setIsSavingVisibility(false);
    }
  };

  const handleDelete = async () => {
    if (isSaving) return;

    const isConfirmed = window.confirm(t.deleteConfirm.message);
    if (!isConfirmed) {
      return;
    }

    setIsDeleting(true);
    try {
      await onUpdate(worldKey, answer.questionId, {
        type: 'delete',
      });
      toast.success(t.toasts.deleteSuccess);
    } catch (error) {
      console.error('Error deleting answer:', error);
      toast.error(t.toasts.deleteError);
    } finally {
      setIsDeleting(false);
    }
  };

  const renderAnswerContent = () => {
    // --- START: התיקון המרכזי ---
    if (
      answer.questionType === 'budgetAllocation' &&
      typeof answer.rawValue === 'object' &&
      answer.rawValue !== null &&
      !Array.isArray(answer.rawValue)
    ) {
      // השרת כבר הכין לנו את הטקסט המתורגם ב-displayText.
      // נשתמש בו ונוסיף את העיצוב הגרפי.
      const budgetData = answer.rawValue as Record<string, number>;

      // פיצול ה-displayText כדי לקבל את התוויות המתורגמות
      const displayItems = answer.displayText.split(' | ').map((item) => {
        const parts = item.split(': ');
        return { label: parts[0].trim(), value: parseInt(parts[1], 10) };
      });

      return (
        <div className="w-full space-y-3">
          {displayItems.map(({ label, value }) => (
            <div key={label}>
              <div className="flex justify-between items-center text-sm mb-1">
                <span className="text-gray-800 font-medium">{label}</span>
                <span className="text-gray-600 font-semibold">
                  {value}
                  {question.includes('%') ? '%' : ''}
                </span>
              </div>
              <Progress value={value} />
            </div>
          ))}
        </div>
      );
    }
    // --- END: התיקון המרכזי ---

    // הלוגיקה הקיימת לשאר סוגי השאלות נשארת זהה
    return (
      <p className="text-sm text-gray-800 break-words overflow-wrap-anywhere whitespace-pre-wrap">
        {answer.displayText}
      </p>
    );
  };
  const getVisibilityTooltip = () => {
    if (isEditingGlobally) {
      return currentIsVisible
        ? t.visibilityTooltip.editing.visible
        : t.visibilityTooltip.editing.hidden;
    }
    return currentIsVisible
      ? t.visibilityTooltip.viewing.visible
      : t.visibilityTooltip.viewing.hidden;
  };

  // --- START: שינויים ---
  // הגדרת ה-URL לעריכה שיהיה זהה לכל סוגי השאלות
  const editUrl = `/${locale}/questionnaire?world=${worldKey}&question=${answer.questionId}`;
  // בחירת טקסט גנרי עבור ה-Tooltip. אפשר להוסיף מפתח חדש ל-dictionary אם רוצים.
  const editTooltipText =
    answer.questionType === 'budgetAllocation'
      ? t.editTooltip.budget
      : t.editTooltip.text;
  // --- END: שינויים ---

  return (
    <div
      className="rounded-lg border bg-card p-4 shadow-sm transition-shadow duration-300 hover:shadow-md"
      dir={direction}
    >
      <div className="flex items-start justify-between gap-4">
        <div className="flex-1 min-w-0">
          <div className="flex flex-col sm:flex-row items-start sm:items-center justify-between mb-3 gap-2">
            <h4 className="font-medium text-sm sm:text-base flex-1 text-start">
              {question}
            </h4>
            <div className="flex items-center gap-2 self-end sm:self-center">
              {isDeleting && (
                <Loader2 className="h-4 w-4 animate-spin text-red-500" />
              )}
              {isSavingVisibility && (
                <Loader2 className="h-4 w-4 animate-spin text-muted-foreground" />
              )}
              <TooltipProvider delayDuration={200}>
                <Tooltip>
                  <TooltipTrigger asChild>
                    <button
                      type="button"
                      role="switch"
                      aria-checked={currentIsVisible}
                      disabled={!isEditingGlobally || isSaving}
                      onClick={() => handleVisibilityChange(!currentIsVisible)}
                      className={cn(
                        'inline-flex items-center justify-center h-8 px-3 rounded-full gap-2 transition-all duration-200 ease-in-out',
                        'disabled:opacity-100 disabled:cursor-default',
                        currentIsVisible
                          ? 'bg-emerald-100 text-emerald-800'
                          : 'bg-gray-200 text-gray-600',
                        isEditingGlobally &&
                          !isSaving &&
                          'hover:shadow-md active:scale-95',
                        isEditingGlobally &&
                          !isSaving &&
                          currentIsVisible &&
                          'hover:bg-emerald-200',
                        isEditingGlobally &&
                          !isSaving &&
                          !currentIsVisible &&
                          'hover:bg-gray-300'
                      )}
                    >
                      {currentIsVisible ? (
                        <Eye className="h-3.5 w-3.5" />
                      ) : (
                        <EyeOff className="h-3.5 w-3.5" />
                      )}
                      <span className="text-xs font-medium whitespace-nowrap">
                        {currentIsVisible
                          ? t.visibilityButton.visible
                          : t.visibilityButton.hidden}
                      </span>
                    </button>
                  </TooltipTrigger>
                  <TooltipContent side="top" dir={direction}>
                    <p>{getVisibilityTooltip()}</p>
                  </TooltipContent>
                </Tooltip>
              </TooltipProvider>
            </div>
          </div>
          {/* --- START: שינויים --- */}
          {/* הסרת ה-Conditional Rendering של עריכה מקומית */}
          <div className="relative group overflow-hidden mt-1">
            <div className="p-3 bg-gray-50/50 rounded-md border border-gray-200/60 min-h-[40px]">
              {renderAnswerContent()}
              <TooltipProvider delayDuration={200}>
                <Tooltip>
                  <TooltipTrigger asChild>
                    <span className="text-xs text-gray-400 block mt-2 text-start">
                      {new Date(answer.answeredAt).toLocaleDateString(
                        locale === 'he' ? 'he-IL' : 'en-US',
                        { year: 'numeric', month: '2-digit', day: '2-digit' }
                      )}
                    </span>
                  </TooltipTrigger>
                  <TooltipContent side="top" dir={direction}>
                    <p>{t.dateTooltip}</p>
                  </TooltipContent>
                </Tooltip>
              </TooltipProvider>
            </div>

            {isEditingGlobally && !isSaving && (
              // --- START: התיקון כאן ---
              <div className="absolute top-0 end-0 opacity-100 transition-opacity duration-200 flex items-center">
                <TooltipProvider delayDuration={200}>
                  <Tooltip>
                    <TooltipTrigger asChild>
                      <Button
                        variant="ghost"
                        size="icon"
                        className="h-7 w-7 text-red-500 hover:bg-red-50"
                        onClick={handleDelete}
                        disabled={isSaving}
                      >
                        <Trash2 className="h-4 w-4" />
                        <span className="sr-only">{t.editTooltip.delete}</span>
                      </Button>
                    </TooltipTrigger>
                    <TooltipContent side="top" dir={direction}>
                      <p>{t.editTooltip.delete}</p>
                    </TooltipContent>
                  </Tooltip>
                </TooltipProvider>

                <TooltipProvider delayDuration={200}>
                  <Tooltip>
                    <TooltipTrigger asChild>
                      <Button
                        asChild
                        variant="ghost"
                        size="icon"
                        className="h-7 w-7 text-cyan-600 hover:bg-cyan-50"
                      >
                        <a href={editUrl}>
                          <Pencil className="h-4 w-4" />
                          <span className="sr-only">{editTooltipText}</span>
                        </a>
                      </Button>
                    </TooltipTrigger>
                    <TooltipContent side="top" dir={direction}>
                      <p>{editTooltipText}</p>
                    </TooltipContent>
                  </Tooltip>
                </TooltipProvider>
              </div>
            )}
          </div>
          {/* --- END: שינויים --- */}
        </div>
      </div>
    </div>
  );
};

// ... (שאר הרכיבים WorldSection ו-QuestionnaireResponsesSection נשארים ללא שינוי)

const WorldSection: React.FC<WorldSectionProps> = ({
  worldKey,
  worldConfig,
  answers,
  isEditingGlobally,
  onUpdate,
  isCompleted,
  className,
  dict,
  locale,
}) => {
  const { icon: Icon, color, bgColor, borderColor } = worldConfig;
  const t = dict.questionnaireSection.worldSection;
  const direction = locale === 'he' ? 'rtl' : 'ltr';

  const title = dict.questionnaireSection.worlds[worldKey]?.title || worldKey;
  const answerCountText = `${answers.length} ${
    answers.length === 1 ? t.answerSingular : t.answerPlural
  }`;

  return (
    <Card
      className={cn(
        'overflow-hidden shadow-sm border',
        bgColor,
        borderColor,
        className
      )}
      dir={direction}
    >
      <CardHeader
        className="p-4 border-b"
        style={{
          borderColor: `rgba(var(--${color.split('-')[1]}-200-rgb), 0.5)`,
        }}
      >
        <div className="flex items-center justify-between">
          <div className="flex items-center gap-3">
            <div
              className={cn(
                'p-2 rounded-full',
                color.replace('text-', 'bg-') + '/10'
              )}
            >
              <Icon className={cn('h-5 w-5', color)} />
            </div>
            <div>
              <CardTitle className="text-md sm:text-lg text-gray-800">
                {title}
              </CardTitle>
              <CardDescription className="text-xs text-gray-500 mt-0.5">
                {answerCountText}
              </CardDescription>
            </div>
          </div>
          <Badge
            variant={isCompleted ? 'success' : 'secondary'}
            className={cn(
              'gap-1 text-xs px-2 py-0.5 rounded-full',
              isCompleted
                ? 'bg-emerald-100 text-emerald-800'
                : 'bg-blue-100 text-blue-800'
            )}
          >
            {isCompleted ? (
              <CheckCircle className="h-3 w-3" />
            ) : (
              <Clock className="h-3 w-3" />
            )}
            {isCompleted ? t.status.completed : t.status.inProgress}
          </Badge>
        </div>
      </CardHeader>
      <CardContent className="p-4 pt-4">
        <div className="space-y-4">
          {answers.map((answer, index) => (
            <QuestionCard
              key={answer.questionId}
              question={answer.question}
              answer={answer}
              isFirstInList={index === 0}
              isEditingGlobally={isEditingGlobally}
              worldKey={worldKey}
              onUpdate={onUpdate}
              dict={dict}
              locale={locale}
            />
          ))}
        </div>
      </CardContent>
    </Card>
  );
};

const QuestionnaireResponsesSection: React.FC<
  QuestionnaireResponsesSectionProps
> = ({ questionnaire, onUpdate, isEditable = false, dict, locale }) => {
  const [isEditingGlobally, setIsEditingGlobally] = useState(false);

  const direction = locale === 'he' ? 'rtl' : 'ltr';
  const ArrowIcon = direction === 'rtl' ? ArrowLeft : ArrowRight;
  const t = dict.questionnaireSection;

  const worldsWithAnswers = useMemo(() => {
    if (!questionnaire?.formattedAnswers) {
      console.log(
        '---[ CLIENT LOG | QuestionnaireResponsesSection useMemo ]--- אין "formattedAnswers". מחזיר מערך ריק.'
      );
      return [];
    }

    console.log(
      '---[ CLIENT LOG | QuestionnaireResponsesSection useMemo ]--- נמצא "formattedAnswers". מעבד את העולמות.'
    );

    return Object.entries(WORLDS_CONFIG)
      .map(([key, config]) => ({
        key: key as keyof typeof WORLDS_CONFIG,
        config,
        answers:
          questionnaire.formattedAnswers?.[
            key.toUpperCase() as keyof typeof questionnaire.formattedAnswers // ✨ התיקון: המרת המפתח לאותיות גדולות
          ] ?? [],
        isCompleted:
          (questionnaire[
            `${key.toLowerCase()}Completed` as keyof QuestionnaireResponse
          ] as boolean) ?? false,
      }))
      .filter((world) => world.answers.length > 0);
  }, [questionnaire]);

  if (!questionnaire) {
    const emptyStateT = t.emptyState;
    return (
      <Card
        className="text-center py-12 text-gray-500 bg-gray-50 rounded-lg border border-dashed"
        dir={direction}
      >
        <Book className="h-10 w-10 mx-auto mb-3 opacity-50 text-gray-400" />
        <p className="font-medium">{emptyStateT.title}</p>
        <p className="text-sm mt-1">{emptyStateT.subtitle}</p>
        <div className="mt-6">
          <Button
            asChild
            variant="default"
            className="bg-cyan-600 hover:bg-cyan-700"
          >
            <Link
              href={QUESTIONNAIRE_URL}
              className="flex items-center gap-1.5"
            >
              {emptyStateT.button} <ArrowIcon className="h-4 w-4" />
            </Link>
          </Button>
        </div>
      </Card>
    );
  }

  const hasAnyAnswers = worldsWithAnswers.length > 0;
  const headerT = t.header;

  return (
    <div className="space-y-6" dir={direction}>
      <Card className="shadow-sm border">
        <CardHeader className="p-6 space-y-4">
          {/* שורה ראשונה - כותרת ומידע */}
          <div className="flex items-center justify-center gap-3">
            {' '}
            {questionnaire.completed ? (
              <CheckCircle className="h-6 w-6 text-emerald-500 flex-shrink-0" />
            ) : (
              <Clock className="h-6 w-6 text-blue-500 flex-shrink-0" />
            )}
            <div>
              <h2 className="text-xl font-semibold text-gray-800">
                {questionnaire.completed
                  ? headerT.title.completed
                  : headerT.title.inProgress}
              </h2>
              <p className="text-sm text-gray-500 mt-1">
                {hasAnyAnswers
                  ? `${headerT.lastUpdated}: ${new Date(
                      questionnaire.lastSaved
                    ).toLocaleDateString(locale === 'he' ? 'he-IL' : 'en-US')}`
                  : headerT.notStarted}
              </p>
            </div>
          </div>

          {/* שורה שנייה - כפתורים */}
          <div className="flex items-center justify-center gap-3 pt-2 border-t border-gray-100">
            <Button asChild variant="outline" size="sm" className="h-9 px-4">
              <Link
                href={QUESTIONNAIRE_URL}
                className="flex items-center gap-2"
              >
                {headerT.goToButton}
                <ArrowIcon className="h-4 w-4" />
              </Link>
            </Button>

            {isEditable && hasAnyAnswers && onUpdate && (
              <Button
                variant={isEditingGlobally ? 'default' : 'outline'}
                size="sm"
                onClick={() => setIsEditingGlobally(!isEditingGlobally)}
                className="h-9 px-4 gap-2"
              >
                {isEditingGlobally ? (
                  <>
                    <Save className="h-4 w-4" />
                    {headerT.editButton.finish}
                  </>
                ) : (
                  <>
                    <Pencil className="h-4 w-4" />
                    {headerT.editButton.start}
                  </>
                )}
              </Button>
            )}
          </div>
        </CardHeader>
      </Card>
      {/* שאר הקוד נשאר זהה... */}
      {hasAnyAnswers ? (
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          {worldsWithAnswers.map(({ key, config, answers, isCompleted }) => (
            <WorldSection
              key={key}
              worldKey={key}
              worldConfig={config}
              answers={answers}
              isEditingGlobally={isEditingGlobally}
              onUpdate={onUpdate!}
              isCompleted={isCompleted}
              dict={dict}
              locale={locale}
            />
          ))}
        </div>
      ) : (
        <div className="text-center py-10 text-gray-500 bg-gray-50/50 rounded-lg border border-gray-200">
          <Book className="h-8 w-8 mx-auto mb-2 opacity-50 text-gray-400" />
          <p className="font-medium text-lg">{t.noAnswersState.title}</p>
          <p className="text-sm mt-1 text-gray-600">
            {t.noAnswersState.subtitle}
          </p>
          <div className="mt-6">
            <Button
              asChild
              variant="default"
              className="bg-cyan-600 hover:bg-cyan-700 text-white"
            >
              <Link
                href={QUESTIONNAIRE_URL}
                className="flex items-center gap-1.5 px-6 py-2"
              >
                {t.noAnswersState.button} <ArrowIcon className="h-4 w-4" />
              </Link>
            </Button>
          </div>
        </div>
      )}
    </div>
  );
};

export default QuestionnaireResponsesSection;
--- End of Content for QuestionnaireResponsesSection.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\profile\sections\UnifiedProfileDashboard.tsx
--------------------------------------------------------------------------------
Content:
// src/app/[locale]/(authenticated)/profile/components/dashboard/UnifiedProfileDashboard.tsx

'use client';

import React, { useState, useEffect, useCallback } from 'react';
import { useSession } from 'next-auth/react';
import Link from 'next/link';
import { useRouter } from 'next/navigation';
import { toast } from 'sonner';
import { cn } from '@/lib/utils';
import type { User as SessionUserType } from '@/types/next-auth';

// Child Components
import { ProfileChecklist } from './ProfileChecklist';
import { AIProfileAdvisorDialog } from './AIProfileAdvisorDialog';

// UI Components
import { Button } from '@/components/ui/button';
import { Dialog, DialogContent, DialogTrigger } from '@/components/ui/dialog';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { ScrollArea, ScrollBar } from '@/components/ui/scroll-area';

// Shared Profile Components
import {
  ProfileCard,
  PhotosSection,
  PreferencesSection,
  ProfileSection,
  QuestionnaireResponsesSection,
} from '@/components/profile';

// Icons
import { Eye, Loader2 } from 'lucide-react';

// Types
import type {
  UserProfile,
  UserImage,
  QuestionnaireResponse,
  UpdateValue, // <-- פתרון בעיית ה-any
} from '@/types/next-auth';
import type { ProfilePageDictionary } from '@/types/dictionary';

// Props interface for the component, now including the dictionary
interface UnifiedProfileDashboardProps {
  viewOnly?: boolean;
  userId?: string;
  initialTab?: string;
  dict: ProfilePageDictionary;
  locale: string; // Added locale prop
}

const UnifiedProfileDashboard: React.FC<UnifiedProfileDashboardProps> = ({
  viewOnly = false,
  userId,
  initialTab = 'overview',
  dict,
  locale, // Destructure locale
}) => {
  console.log(
    `---[ CLIENT LOG 3 | UnifiedProfileDashboard.tsx ]--- הרכיב נטען. הוא קיבל את ה-prop "initialTab" עם הערך: "${initialTab}".`
  );

  const {
    data: session,
    status: sessionStatus,
    update: updateSession,
  } = useSession();
  const router = useRouter();

  // State hooks
  const [profileData, setProfileData] = useState<UserProfile | null>(null);
  const [images, setImages] = useState<UserImage[]>([]);
  const [questionnaireResponse, setQuestionnaireResponse] =
    useState<QuestionnaireResponse | null>(null);
  const [activeTab, setActiveTab] = useState(initialTab);
  console.log(
    `---[ CLIENT LOG 4 | UnifiedProfileDashboard.tsx ]--- מאתחל את ה-state של "activeTab". הערך כעת הוא: "${activeTab}". ערך זה שולט על רכיב ה-Tabs.`
  );

  const [isEditing, setIsEditing] = useState(false);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState('');
  const [previewOpen, setPreviewOpen] = useState(false);
  const [hasSeenPreview, setHasSeenPreview] = useState(
    session?.user?.profile?.hasViewedProfilePreview || false
  );
  const direction = locale === 'he' ? 'rtl' : 'ltr'; // Define direction based on locale

  useEffect(() => {
    setActiveTab(initialTab);
  }, [initialTab]);

  // --- קוד מעודכן ---
  // src/app/[locale]/(authenticated)/profile/components/dashboard/UnifiedProfileDashboard.tsx

  const handleTabChange = (newTab: string) => {
    // --- לוג מקדים ---
    console.log(
      `---[ CLIENT LOG 5 | UnifiedProfileDashboard.tsx ]--- handleTabChange נקראה עם הטאב החדש: "${newTab}".`
    );

    console.log(
      `---[ CLIENT LOG 5 | UnifiedProfileDashboard.tsx ]--- handleTabChange נקראה עם הטאב החדש: "${newTab}".`
    );

    setActiveTab(newTab);
    // ✨ התיקון המרכזי: הוספת משתנה ה-locale לכתובת ה-URL
    router.push(`/${locale}/profile?tab=${newTab}`, { scroll: false });

    // הגדלנו מעט את ההשהיה כדי לתת ל-React יותר זמן לעבד את השינוי ב-DOM.
    setTimeout(() => {
      console.log(
        `---[ CLIENT LOG 6 | UnifiedProfileDashboard.tsx ]--- ה-setTimeout של הגלילה החל. מנסה לגלול לטאב: "${newTab}".`
      );

      const elementId = `${newTab}-content`;
      console.log(
        `---[ CLIENT LOG 7 | UnifiedProfileDashboard.tsx ]--- מחפש אלמנט עם ID דינמי: "${elementId}".`
      );

      const element = document.getElementById(elementId);

      // --- זהו הלוג הקריטי ביותר ---
      if (element) {
        console.log(
          `✅ ---[ CLIENT LOG 8 | UnifiedProfileDashboard.tsx ]--- הצלחה! האלמנט נמצא. גולל אליו.`,
          element
        );
        element.scrollIntoView({ behavior: 'smooth', block: 'start' });
      } else {
        console.error(
          `❌ ---[ CLIENT LOG 8 | UnifiedProfileDashboard.tsx ]--- כישלון! האלמנט עם ID "${elementId}" לא נמצא ב-DOM ברגע זה. הגלילה נכשלה.`
        );

        // ננסה לגלוש לאלמנט החלופי כדי לראות אם הוא קיים
        const fallbackElement = document.getElementById('profile-tabs-content');
        if (fallbackElement) {
          console.warn(
            `---[ CLIENT LOG 9 | UnifiedProfileDashboard.tsx ]--- נסוג לגלילה לאלמנט החלופי "profile-tabs-content".`
          );
          fallbackElement.scrollIntoView({
            behavior: 'smooth',
            block: 'start',
          });
        } else {
          console.error(
            `❌ ---[ CLIENT LOG 9 | UnifiedProfileDashboard.tsx ]--- כישלון קריטי! גם אלמנט הגיבוי "profile-tabs-content" לא נמצא.`
          );
        }
      }
    }, 150); // הגדלתי מעט את הזמן ל-150ms
  };

  const isOwnProfile = !userId || session?.user?.id === userId;

  const loadData = useCallback(async () => {
    setIsLoading(true);
    setError('');
    try {
      // Fetch profile data
      const profileUrl = userId
        ? `/api/profile?userId=${userId}`
        : '/api/profile';
      const profileResponse = await fetch(profileUrl);
      const profileJson = await profileResponse.json();

      if (!profileResponse.ok || !profileJson.success) {
        throw new Error(profileJson.message || 'Failed to load profile');
      }
      console.log('---[ CLIENT LOG 1 ]--- Received Profile Data from API:');
      console.log(profileJson.profile);

      setProfileData(profileJson.profile);
      setImages(profileJson.images || []);
      if (profileJson.profile?.hasViewedProfilePreview) {
        setHasSeenPreview(true);
      }

      // Fetch questionnaire data
      const params = new URLSearchParams();
      if (userId) {
        params.append('userId', userId);
      }
      params.append('locale', locale); // ✨ הוספת פרמטר השפה

      const questionnaireUrl = `/api/profile/questionnaire?${params.toString()}`;

      const questionnaireFetchResponse = await fetch(questionnaireUrl);

      console.log(
        `---[ CLIENT LOG | Dashboard loadData ]--- סטטוס תגובה מ-API השאלון: ${questionnaireFetchResponse.status}`
      );

      if (questionnaireFetchResponse.status === 404) {
        setQuestionnaireResponse(null);
      } else if (questionnaireFetchResponse.ok) {
        const questionnaireJson = await questionnaireFetchResponse.json();
        console.log(
          '---[ DEBUG LOG | Questionnaire API Response ]---',
          questionnaireJson
        );

        console.log(
          '---[ CLIENT LOG | Dashboard loadData ]--- התקבל JSON מה-API:',
          questionnaireJson
        );

        if (questionnaireJson.success) {
          setQuestionnaireResponse(questionnaireJson.questionnaireResponse);
        } else {
          console.warn(
            'Could not load questionnaire. Reason:',
            questionnaireJson.message
          );
          setQuestionnaireResponse(null);
        }
      } else {
        console.error(
          'Failed to fetch questionnaire data. Status:',
          questionnaireFetchResponse.status
        );
        setQuestionnaireResponse(null);
      }
    } catch (err: unknown) {
      console.error('Failed to load profile data:', err);
      let errorMessage = 'An unexpected error occurred.';
      if (err instanceof Error) {
        errorMessage = err.message || errorMessage;
      }
      const translatedError = dict.dashboard.loadError.replace(
        '{{error}}',
        errorMessage
      );
      setError(translatedError);
      toast.error(translatedError);
    } finally {
      setIsLoading(false);
    }
  }, [userId, dict]);

  useEffect(() => {
    if (sessionStatus === 'authenticated') {
      loadData();
    }
  }, [sessionStatus, loadData]);

  useEffect(() => {
    const handleVisibilityChange = () => {
      if (
        document.visibilityState === 'visible' &&
        sessionStatus === 'authenticated'
      ) {
        loadData();
      }
    };
    document.addEventListener('visibilitychange', handleVisibilityChange);
    return () => {
      document.removeEventListener('visibilitychange', handleVisibilityChange);
    };
  }, [loadData, sessionStatus]);

  const handlePreviewClick = async () => {
    setPreviewOpen(true);
    if (!hasSeenPreview) {
      try {
        const response = await fetch('/api/profile/viewed-preview', {
          method: 'POST',
        });
        if (!response.ok) {
          throw new Error('Failed to update preview status');
        }
        setHasSeenPreview(true);
        toast.success(dict.dashboard.viewedPreviewSuccess);
        await updateSession();
      } catch (error) {
        console.error('Error in handlePreviewClick:', error);
        toast.error(dict.dashboard.viewedPreviewError);
      }
    }
  };

  const handleSave = async (formData: Partial<UserProfile>) => {
    setIsLoading(true);
    try {
      const response = await fetch('/api/profile/update', {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(formData),
      });

      const data = await response.json();
      if (data.success && data.profile) {
        await updateSession();
        setProfileData(data.profile);
        setIsEditing(false);
        toast.success(dict.dashboard.updateSuccess);
        setError('');
      } else {
        const errorMessage = data.message || 'Profile update error';
        const translatedError = dict.dashboard.updateError.replace(
          '{{error}}',
          errorMessage
        );
        setError(translatedError);
        toast.error(translatedError);
      }
    } catch (err) {
      console.error('Save error:', err);
      const errorMessage = 'Profile update error';
      const translatedError = dict.dashboard.updateError.replace(
        '{{error}}',
        errorMessage
      );
      setError(translatedError);
      toast.error(translatedError);
    } finally {
      setIsLoading(false);
    }
  };

  // --- השלמת הפונקציות החסרות עם תרגום ---

  const handleImageUpload = async (files: File[]) => {
    if (!files || files.length === 0) return;

    setIsLoading(true);
    const uploadedImages: UserImage[] = [];
    const failedUploads: string[] = [];
    const toastsDict = dict.photosSection.toasts;

    for (let i = 0; i < files.length; i++) {
      const file = files[i];
      const toastId = `upload-${i}`;
      const loadingMsg = dict.photosSection.uploadingMultiple.replace(
        '{{count}}',
        `${i + 1}/${files.length}`
      );

      try {
        toast.loading(loadingMsg, { id: toastId });

        const formData = new FormData();
        formData.append('file', file);

        const response = await fetch('/api/profile/images', {
          method: 'POST',
          body: formData,
        });

        const data = await response.json();

        if (response.ok && data.success && data.image) {
          uploadedImages.push(data.image);
          toast.success(
            `${file.name} uploaded successfully!`, // This specific string is often kept in English for file names
            { id: toastId }
          );
        } else {
          throw new Error(data.error || 'Upload failed');
        }
      } catch (err) {
        const errorMessage =
          err instanceof Error ? err.message : toastsDict.uploadError;
        failedUploads.push(`${file.name}: ${errorMessage}`);
        toast.error(`${file.name}: ${errorMessage}`, { id: toastId });
      }
    }

    if (uploadedImages.length > 0) {
      setImages((prev) => [...prev, ...uploadedImages].slice(0, 10)); // Assuming max 10 images
      await updateSession();
      toast.success(
        toastsDict.uploadSuccess.replace(
          '{{count}}',
          String(uploadedImages.length)
        )
      );
      setError('');
    }

    if (failedUploads.length > 0 && uploadedImages.length === 0) {
      setError(toastsDict.uploadError);
      toast.error(toastsDict.uploadError);
    }

    setIsLoading(false);
  };

  const handleSetMainImage = async (imageId: string) => {
    setIsLoading(true);
    try {
      const response = await fetch(`/api/profile/images/${imageId}`, {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ isMain: true }),
      });
      const data = await response.json();
      if (data.success) {
        setImages(data.images);
        await updateSession();
        toast.success(dict.photosSection.toasts.setMainSuccess);
        setError('');
      } else {
        const errorMsg = data.message || dict.photosSection.toasts.setMainError;
        setError(errorMsg);
        toast.error(errorMsg);
      }
    } catch (err) {
      const errorMsg = dict.photosSection.toasts.setMainError;
      setError(errorMsg);
      toast.error(errorMsg);
    } finally {
      setIsLoading(false);
    }
  };

  const handleDeleteImage = async (imageIds: string[]) => {
    if (!imageIds || imageIds.length === 0) {
      toast.info(dict.photosSection.toasts.selectOneError);
      return;
    }
    setIsLoading(true);
    try {
      const response = await fetch(`/api/profile/images`, {
        method: 'DELETE',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ imageIds }),
      });

      const data = await response.json();
      if (data.success) {
        setImages(data.images);
        await updateSession();
        const successMsg =
          imageIds.length > 1
            ? dict.photosSection.toasts.bulkDeleteSuccess.replace(
                '{{count}}',
                String(imageIds.length)
              )
            : dict.photosSection.toasts.singleDeleteSuccess;
        toast.success(successMsg);
        setError('');
      } else {
        const errorMsg =
          data.message || dict.photosSection.toasts.bulkDeleteError;
        setError(errorMsg);
        toast.error(errorMsg);
      }
    } catch (err) {
      console.error('Delete image error:', err);
      setError(dict.photosSection.toasts.bulkDeleteError);
      toast.error(dict.photosSection.toasts.bulkDeleteError);
    } finally {
      setIsLoading(false);
    }
  };

  // src/app/[locale]/(authenticated)/profile/components/dashboard/UnifiedProfileDashboard.tsx

  const handleQuestionnaireUpdate = async (
    world: string,
    questionId: string,
    value: UpdateValue
  ) => {
    // אין צורך ב-setIsLoading(true) כאן, כי loadData עושה זאת בעצמו.
    try {
      const payload = { worldKey: world, questionId: questionId, value };
      const response = await fetch('/api/profile/questionnaire', {
        method: 'PATCH',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(payload),
      });

      const data = await response.json();
      if (data.success) {
        toast.success(dict.dashboard.tabContent.questionnaireUpdateSuccess);
        setError('');

        // ✨ התיקון: במקום לעדכן עם תגובה חלקית מהשרת,
        // נטען מחדש את כל המידע כדי להבטיח סנכרון מלא.
        await loadData();
      } else {
        const errorMsg =
          data.message || dict.dashboard.tabContent.questionnaireUpdateError;
        setError(errorMsg);
        toast.error(errorMsg);
        // במקרה של שגיאה, נחזיר את המצב הטעינה לקדמותו
        setIsLoading(false);
      }
    } catch (err) {
      console.error('Failed to update questionnaire:', err);
      setError(dict.dashboard.tabContent.questionnaireUpdateError);
      toast.error(dict.dashboard.tabContent.questionnaireUpdateError);
      // גם במקרה של חריגה, נחזיר את המצב הטעינה לקדמותו
      setIsLoading(false);
    }
    // פונקציית loadData כבר משנה את isLoading ל-false בסופה,
    // כך שאין צורך בלוק 'finally'.
  };

  // --- סוף החלק שהושלם ---

  if (isLoading && !profileData) {
    return (
      <div
        role="status"
        aria-live="polite"
        className="flex items-center justify-center min-h-screen bg-gradient-to-br from-cyan-50 via-white to-pink-50"
        dir={direction} // Changed
      >
        <div className="flex items-center gap-2 text-lg text-cyan-600">
          <Loader2 className="animate-spin h-6 w-6" />
          <span>{dict.dashboard.loadingData}</span>
        </div>
      </div>
    );
  }

  if (error && !profileData) {
    return (
      <div
        className="flex items-center justify-center min-h-screen bg-gradient-to-br from-red-50 via-white to-orange-50 p-4"
        dir={direction} // Changed
      >
        <Alert variant="destructive" className="max-w-md mx-auto">
          <AlertDescription className="text-center">{error}</AlertDescription>
        </Alert>
      </div>
    );
  }

  const user = session?.user as SessionUserType | undefined;

  return (
    <div className="relative min-h-screen w-full" dir={direction}>
      <div
        className="absolute inset-0 bg-gradient-to-br from-cyan-50 via-white to-pink-50 animate-gradient-slow -z-10"
        style={{ backgroundSize: '400% 400%' }}
      />
      <div className="absolute inset-0 opacity-10 bg-[radial-gradient(#06b6d4_1px,transparent_1px)] [background-size:30px_30px] -z-10"></div>
      <div className="relative max-w-7xl mx-auto py-8 sm:py-12 px-4 sm:px-6 lg:px-8 z-10">
        <div className="space-y-6 md:space-y-8">
          {error && (
            <Alert variant="destructive">
              <AlertDescription>{error}</AlertDescription>
            </Alert>
          )}

          {isOwnProfile && user && profileData && (
            <>
              <ProfileChecklist
                user={{
                  ...user,
                  profile: profileData,
                  images: images,
                }}
                hasSeenPreview={hasSeenPreview}
                onPreviewClick={handlePreviewClick}
                questionnaireResponse={questionnaireResponse}
                dict={dict.dashboard.checklist}
                locale={locale} // Added
                onNavigateToTab={handleTabChange} // <-- הוסף שורה זו
              />
              <div className="my-6 md:my-8 flex justify-center">
                <AIProfileAdvisorDialog
                  userId={user.id}
                  dict={dict.dashboard.aiAdvisor}
                  analysisDict={dict.dashboard.analysisResult}
                  locale={locale}
                />
              </div>
            </>
          )}

          {!viewOnly && isOwnProfile && (
            <div
              id="onboarding-target-preview-profile"
              className="flex justify-center my-6 md:my-8"
            >
              <Dialog open={previewOpen} onOpenChange={setPreviewOpen}>
                <DialogTrigger asChild>
                  <Button
                    onClick={handlePreviewClick}
                    variant="outline"
                    size="lg"
                    className="px-8 py-3 text-base sm:text-lg gap-2 rounded-full border-2 border-cyan-200 text-cyan-600 hover:bg-cyan-50 hover:border-cyan-400 transition-all duration-300 shadow-sm hover:shadow-md"
                  >
                    {dict.dashboard.previewButton}
                    <Eye className="w-5 h-5 sm:w-6 sm:h-6" />
                  </Button>
                </DialogTrigger>
                <DialogContent className="w-screen h-screen sm:w-[95vw] sm:h-[90vh] sm:max-w-6xl p-0 bg-white/95 backdrop-blur-md sm:rounded-3xl shadow-2xl border-none overflow-hidden">
                  {profileData ? (
                    <ProfileCard
                      profile={profileData}
                      images={images}
                      questionnaire={questionnaireResponse}
                      viewMode="candidate"
                      isProfileComplete={
                        session?.user?.isProfileComplete ?? false
                      }
                      className="h-full"
                      onClose={() => setPreviewOpen(false)}
                      dict={dict.profileCard}
                      locale={locale} // Pass locale to ProfileCard
                    />
                  ) : (
                    <p className="text-center text-gray-500 py-10">
                      {dict.dashboard.previewLoading}
                    </p>
                  )}
                </DialogContent>
              </Dialog>
            </div>
          )}

          <Tabs
            value={activeTab}
            onValueChange={handleTabChange}
            className="w-full"
          >
            <div className="flex justify-center mb-6 md:mb-8">
              <ScrollArea dir={direction} className="w-auto max-w-full">
                <TabsList className="h-auto p-1.5 bg-white/70 backdrop-blur-sm rounded-full shadow-md gap-1 inline-flex flex-nowrap">
                  <TabsTrigger
                    value="overview"
                    className="px-4 py-2 rounded-full text-sm font-medium text-gray-600 transition-colors duration-200 ease-in-out hover:bg-cyan-100/50 data-[state=active]:bg-cyan-500 data-[state=active]:text-white data-[state=active]:shadow-md"
                  >
                    {dict.dashboard.tabs.overview}
                  </TabsTrigger>
                  <TabsTrigger
                    value="photos"
                    className="px-4 py-2 rounded-full text-sm font-medium text-gray-600 transition-colors duration-200 ease-in-out hover:bg-cyan-100/50 data-[state=active]:bg-cyan-500 data-[state=active]:text-white data-[state=active]:shadow-md"
                  >
                    {dict.dashboard.tabs.photos}
                  </TabsTrigger>
                  <TabsTrigger
                    value="preferences"
                    className="px-4 py-2 rounded-full text-sm font-medium text-gray-600 transition-colors duration-200 ease-in-out hover:bg-cyan-100/50 data-[state=active]:bg-cyan-500 data-[state=active]:text-white data-[state=active]:shadow-md"
                  >
                    {dict.dashboard.tabs.preferences}
                  </TabsTrigger>
                  <TabsTrigger
                    value="questionnaire"
                    className="px-4 py-2 rounded-full text-sm font-medium text-gray-600 transition-colors duration-200 ease-in-out hover:bg-cyan-100/50 data-[state=active]:bg-cyan-500 data-[state=active]:text-white data-[state=active]:shadow-md"
                  >
                    {dict.dashboard.tabs.questionnaire}
                  </TabsTrigger>
                </TabsList>
                <ScrollBar orientation="horizontal" className="mt-1" />
              </ScrollArea>
            </div>
            <div
              id="profile-tabs-content"
              className="bg-white/80 backdrop-blur-lg rounded-3xl shadow-xl transition-all duration-300 ease-in-out scroll-mt-4"
            >
              {/* הוסף id ו-className לכל TabsContent */}
              <TabsContent
                value="overview"
                id="overview-content"
                className="scroll-mt-24" // ✨ שינוי: הגדלת המרווח
              >
                {profileData ? (
                  <ProfileSection
                    profile={profileData}
                    isEditing={isEditing}
                    setIsEditing={setIsEditing}
                    onSave={handleSave}
                    viewOnly={viewOnly || !isOwnProfile}
                    dict={dict.profileSection}
                    locale={locale}
                  />
                ) : (
                  <p className="text-center text-gray-500 py-10">
                    {dict.dashboard.tabContent.loadingOverview}
                  </p>
                )}
              </TabsContent>
              <TabsContent
                value="photos"
                id="photos-content"
                className="scroll-mt-4"
              >
                <PhotosSection
                  images={images}
                  isUploading={isLoading}
                  disabled={viewOnly || !isOwnProfile}
                  onUpload={handleImageUpload}
                  onSetMain={handleSetMainImage}
                  onDelete={handleDeleteImage}
                  dict={dict.photosSection}
                  locale={locale}
                />
              </TabsContent>
              <TabsContent
                value="preferences"
                id="preferences-content"
                className="scroll-mt-4"
              >
                {profileData ? (
                  <PreferencesSection
                    profile={profileData}
                    isEditing={isEditing}
                    setIsEditing={setIsEditing}
                    onChange={handleSave}
                    viewOnly={viewOnly || !isOwnProfile}
                    dictionary={dict.preferencesSection}
                    locale={locale}
                  />
                ) : (
                  <p className="text-center text-gray-500 py-10">
                    {dict.dashboard.tabContent.loadingPreferences}
                  </p>
                )}
              </TabsContent>
              <TabsContent
                value="questionnaire"
                id="questionnaire-content"
                className="scroll-mt-4"
              >
                {questionnaireResponse ? (
                  <QuestionnaireResponsesSection
                    questionnaire={questionnaireResponse}
                    onUpdate={handleQuestionnaireUpdate}
                    isEditable={!viewOnly && isOwnProfile}
                    dict={dict}
                    locale={locale}
                  />
                ) : (
                  <div className="text-center py-12 text-gray-500">
                    {isLoading
                      ? dict.dashboard.tabContent.loadingQuestionnaire
                      : dict.dashboard.tabContent.noQuestionnaire}
                    {!isLoading && isOwnProfile && (
                      <Button
                        asChild
                        variant="link"
                        className="mt-2 text-cyan-600"
                      >
                        <Link href="/questionnaire">
                          {dict.dashboard.tabContent.fillQuestionnaireLink}
                        </Link>
                      </Button>
                    )}
                  </div>
                )}
              </TabsContent>
            </div>
          </Tabs>
        </div>
      </div>
    </div>
  );
};

export default UnifiedProfileDashboard;
--- End of Content for UnifiedProfileDashboard.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\profile\sections\sections_contents.txt
--------------------------------------------------------------------------------
[This is the output log file itself. Content not included.]

