################################################################################
# Directory Content Map For: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\profile
# Generated on: 2025-08-21 22:23:23
################################################################################

================================================================================
Directory: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\profile
================================================================================


File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\profile\constants.ts
--------------------------------------------------------------------------------
Content:
// src/components/shared/profile/constants.ts
import { Heart, User, Users, Scroll, GraduationCap, MapPin } from "lucide-react";

export const WORLDS = {
  values: {
    key: "values",
    title: "ערכים ואמונות",
    icon: Heart,
    color: "text-pink-500",
    bgColor: "bg-pink-50",
    borderColor: "border-pink-200",
  },
  personality: {
    key: "personality",
    title: "אישיות",
    icon: User,
    color: "text-blue-500",
    bgColor: "bg-blue-50",
    borderColor: "border-blue-200",
  },
  relationship: {
    key: "relationship",
    title: "זוגיות ומשפחה",
    icon: Users,
    color: "text-purple-500",
    bgColor: "bg-purple-50",
    borderColor: "border-purple-200",
  },
  religion: {
    key: "religion",
    title: "דת ומסורת",
    icon: Scroll,
    color: "text-indigo-500",
    bgColor: "bg-indigo-50",
    borderColor: "border-indigo-200",
  },
  partner: {
    key: "partner",
    title: "העדפות בן/בת זוג",
    icon: Heart,
    color: "text-red-500",
    bgColor: "bg-red-50",
    borderColor: "border-red-200",
  },
} as const;

export const RELIGIOUS_LEVELS = [
  "חרדי",
  "חרדי מודרני",
  "דתי",
  "דתי-לייט",
  "מסורתי"
] as const;

export const MARITAL_STATUS = [
  "single",
  "divorced",
  "widowed"
] as const;

export const EDUCATION_LEVELS = [
  "תיכונית",
  "על תיכונית",
  "אקדמית",
  "תורנית"
] as const;

export const OCCUPATION_TYPES = [
  "עובד/ת",
  "סטודנט/ית",
  "אברך/אברכית",
  "עצמאי/ת"
] as const;

export const LOCATIONS = [
  "צפון",
  "מרכז",
  "דרום",
  "ירושלים",
  "יהודה ושומרון"
] as const;

export const PROFILE_SECTIONS = {
  BASIC_INFO: {
    title: "פרטים אישיים",
    icon: User,
  },
  EDUCATION: {
    title: "השכלה ותעסוקה",
    icon: GraduationCap,
  },
  LOCATION: {
    title: "מיקום",
    icon: MapPin,
  },
  FAMILY: {
    title: "מידע משפחתי",
    icon: Users,
  },
  PREFERENCES: {
    title: "העדפות",
    icon: Heart,
  },
} as const;

export const COMMUNICATION_STYLES = [
  "ישיר",
  "עקיף",
  "דיפלומטי"
] as const;

export const STRESS_MANAGEMENT = [
  "רגוע",
  "לחוץ",
  "משתנה"
] as const;

export const CONTACT_PREFERENCES = [
  { value: "direct", label: "ישירות" },
  { value: "matchmaker", label: "דרך השדכן/ית" },
  { value: "both", label: "שתי האפשרויות" }
] as const;

// הגדרות עבור הוולידציה
export const VALIDATION_RULES = {
  AGE: {
    MIN: 18,
    MAX: 99
  },
  HEIGHT: {
    MIN: 100,
    MAX: 250
  },
  NAME: {
    MIN_LENGTH: 2,
    MAX_LENGTH: 50
  }
} as const;
--- End of Content for constants.ts ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\profile\index.ts
--------------------------------------------------------------------------------
Content:
// src/components/shared/profile/index.ts

// Main Components
export { default as ProfileCard } from './ProfileCard';

// Sections
export { default as PhotosSection } from './sections/PhotosSection';
export { default as PreferencesSection } from './sections/PreferencesSection';
export { default as ProfileSection } from './sections/ProfileSection';
export { default as QuestionnaireResponsesSection } from './sections/QuestionnaireResponsesSection';

// Elements
export { default as StatsCard } from './elements/StatsCard';
export { default as VisibilityControl } from './elements/VisibilityControl';
export { default as MinimalCard } from './elements/MinimalCard';

// Types
export * from './types/profile';
export * from './types/questionnaire';
--- End of Content for index.ts ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\profile\profile_contents.txt
--------------------------------------------------------------------------------
[This is the output log file itself. Content not included.]

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\profile\utils.ts
--------------------------------------------------------------------------------
Content:
// src/components/shared/profile/utils.ts
import type { UserProfile } from "@/types/next-auth";

export const calculateAge = (birthDate: Date): number => {
  const today = new Date();
  const birth = new Date(birthDate);
  let age = today.getFullYear() - birth.getFullYear();
  const monthDiff = today.getMonth() - birth.getMonth();
  
  if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birth.getDate())) {
    age--;
  }
  return age;
};

export const formatProfileData = (profile: UserProfile) => {
  return {
    ...profile,
    age: calculateAge(new Date(profile.birthDate)),
    // Add any other formatting needed
  };
};

export const validateProfileData = (data: Partial<UserProfile>) => {
  const errors: Record<string, string> = {};
  
  // Add validation rules as needed
  if (data.height && (data.height < 100 || data.height > 250)) {
    errors.height = "גובה חייב להיות בין 100 ל-250 ס\"מ";
  }
  
  return {
    isValid: Object.keys(errors).length === 0,
    errors
  };
};
--- End of Content for utils.ts ---

================================================================================
Directory: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\profile\elements
================================================================================

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\profile\elements\MinimalCard.tsx
--------------------------------------------------------------------------------
Content:
// src/components/shared/profile/elements/MinimalCard.tsx
import React from "react";
import { Card } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { User, MapPin, Scroll, Heart } from "lucide-react";
import Image from "next/image";
import { calculateAge } from "../utils";
import type { UserProfile, UserImage } from "@/types/next-auth";

interface MinimalCardProps {
  profile: UserProfile;
  mainImage?: UserImage;
  onClick?: () => void;
  className?: string;
}

const MinimalCard: React.FC<MinimalCardProps> = ({
  profile,
  mainImage,
  onClick,
  className = "",
}) => {
  const age = calculateAge(new Date(profile.birthDate));

  // Handle cases where profile.user might be undefined
  const userName = profile.user
    ? `${profile.user.firstName} ${profile.user.lastName}`
    : "שם לא זמין"; // "Name not available" in Hebrew

  return (
    <Card
      onClick={onClick}
      className={`relative overflow-hidden cursor-pointer hover:shadow-md transition-shadow ${className}`}
    >
      <div className="flex gap-4 p-4">
        {/* תמונת פרופיל */}
        <div className="relative w-24 h-24 rounded-lg overflow-hidden bg-gray-100">
          {mainImage ? (
            <Image
              src={mainImage.url}
              alt="תמונת פרופיל"
              fill
              className="object-cover"
              sizes="96px"
            />
          ) : (
            <div className="w-full h-full flex items-center justify-center">
              <User className="w-8 h-8 text-gray-400" />
            </div>
          )}
        </div>

        {/* מידע בסיסי */}
        <div className="flex-1 space-y-2">
          <div>
            <h3 className="text-lg font-medium">{userName}</h3>
            <p className="text-sm text-gray-500">{age} שנים</p>
          </div>

          <div className="flex flex-wrap gap-2">
            {profile.city && (
              <Badge variant="secondary" className="flex items-center gap-1">
                <MapPin className="w-3 h-3" />
                {profile.city}
              </Badge>
            )}
            {profile.religiousLevel && (
              <Badge variant="secondary" className="flex items-center gap-1">
                <Scroll className="w-3 h-3" />
                {profile.religiousLevel}
              </Badge>
            )}
          </div>

          {/* סטטוס זמינות */}
          <div className="flex items-center gap-2 text-sm">
            {profile.availabilityStatus === "AVAILABLE" ? (
              <Badge variant="success" className="flex items-center gap-1">
                <Heart className="w-3 h-3" />
                פנוי/ה להצעות
              </Badge>
            ) : (
              <Badge variant="secondary" className="flex items-center gap-1">
                <Heart className="w-3 h-3" />
                בתהליך הכרות
              </Badge>
            )}
          </div>
        </div>
      </div>
    </Card>
  );
};

export default MinimalCard;
--- End of Content for MinimalCard.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\profile\elements\StatsCard.tsx
--------------------------------------------------------------------------------
Content:
import React from "react";
import { Card, CardContent } from "@/components/ui/card";
import { Progress } from "@/components/ui/progress";
import { cn } from "@/lib/utils";

interface StatsCardProps {
  /**
   * The icon to display in the card
   */
  icon: React.ElementType;

  /**
   * The title text to display
   */
  title: string;

  /**
   * The main value to display
   */
  value: string | number;

  /**
   * Optional progress value (0-100)
   */
  progress?: number;

  /**
   * Optional trend information
   */
  trend?: {
    value: number;
    label: string;
    isPositive?: boolean;
  };

  /**
   * Visual variant of the card
   */
  variant?: "default" | "success" | "warning" | "destructive";

  /**
   * Additional CSS classes
   */
  className?: string;
}

const StatsCard: React.FC<StatsCardProps> = ({
  icon: Icon,
  title,
  value,
  progress,
  trend,
  variant = "default",
  className,
}) => {
  // Determine variant-specific background color
  const getVariantStyles = () => {
    switch (variant) {
      case "success":
        return "bg-emerald-50 dark:bg-emerald-900/20";
      case "warning":
        return "bg-amber-50 dark:bg-amber-900/20";
      case "destructive":
        return "bg-red-50 dark:bg-red-900/20";
      default:
        return "bg-card";
    }
  };

  // Special handling for availability status
  const isAvailabilityStatus = title === "סטטוס פניות";
  const isAvailable = typeof value === 'string' && value.toLowerCase() === 'available';

  // Render the value with special handling for availability status
  const renderValue = () => {
    if (isAvailabilityStatus) {
      return (
        <div className="mt-1">
          <span className={cn(
            "inline-flex px-3 py-1 rounded-full text-sm font-semibold tracking-wide",
            isAvailable 
              ? "bg-emerald-100 text-emerald-800 dark:bg-emerald-900/30 dark:text-emerald-300"
              : "bg-gray-100 text-gray-800 dark:bg-gray-800 dark:text-gray-200"
          )}>
            {value}
          </span>
        </div>
      );
    }
    return <h3 className="text-2xl font-semibold">{value}</h3>;
  };

  return (
    <Card
      className={cn(
        "hover:shadow-md transition-shadow",
        getVariantStyles(),
        className
      )}
    >
      <CardContent className="p-6">
        {/* Header Section */}
        <div className="flex items-center space-x-4 rtl:space-x-reverse">
          <div className="p-2 bg-primary/10 rounded-full">
            <Icon className="w-6 h-6 text-primary" />
          </div>
          <div className="flex-1 space-y-1">
            <p className="text-sm text-muted-foreground">{title}</p>
            {renderValue()}
          </div>
        </div>

        {/* Progress Bar Section */}
        {progress !== undefined && (
          <div className="mt-4 space-y-2">
            <Progress 
              value={progress} 
              className="h-2"
              aria-label={`${title} progress: ${progress}%`}
            />
            <p className="text-sm text-muted-foreground text-right">
              {progress}%
            </p>
          </div>
        )}

        {/* Trend Section */}
        {trend && (
          <div className="mt-4 flex items-center">
            <span
              className={cn(
                "text-sm font-medium",
                trend.isPositive ? "text-emerald-600" : "text-red-600"
              )}
            >
              {trend.isPositive ? "+" : "-"}
              {trend.value}%
            </span>
            <span className="text-sm text-muted-foreground mr-2">
              {trend.label}
            </span>
          </div>
        )}
      </CardContent>
    </Card>
  );
};

// Default export
export default StatsCard;

// Named exports for specific use cases
export type { StatsCardProps };
--- End of Content for StatsCard.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\profile\elements\VisibilityControl.tsx
--------------------------------------------------------------------------------
Content:
import React from "react";
import { Eye, EyeOff } from "lucide-react";
import { Switch } from "@/components/ui/switch";
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip";
import { cn } from "@/lib/utils";

interface VisibilityControlProps {
  /**
   * Current visibility state
   */
  isVisible: boolean;

  /**
   * Callback when visibility changes
   */
  onChange: (isVisible: boolean) => void;

  /**
   * Optional class name for additional styling
   */
  className?: string;

  /**
   * Optional disabled state
   */
  disabled?: boolean;

  /**
   * Optional custom tooltip text
   */
  tooltipText?: {
    visible?: string;
    hidden?: string;
    action?: string;
  };
}

const VisibilityControl: React.FC<VisibilityControlProps> = ({
  isVisible,
  onChange,
  className,
  disabled = false,
  tooltipText = {
    visible: "תשובה זו גלויה למועמדים",
    hidden: "תשובה זו מוסתרת מהמועמדים",
    action: "לחץ כדי",
  },
}) => {
  return (
    <div
      className={cn(
        "flex items-center gap-2 bg-secondary/20 p-2 rounded-md",
        disabled && "opacity-50 cursor-not-allowed",
        className
      )}
    >
      {/* Icon */}
      {isVisible ? (
        <Eye 
          className="h-4 w-4 text-primary" 
          aria-hidden="true"
        />
      ) : (
        <EyeOff 
          className="h-4 w-4 text-muted-foreground" 
          aria-hidden="true"
        />
      )}

      {/* Switch with Tooltip */}
      <TooltipProvider>
        <Tooltip>
          <TooltipTrigger asChild>
            <div className="relative">
              <Switch
                checked={isVisible}
                onCheckedChange={onChange}
                disabled={disabled}
                className={cn(
                  "data-[state=checked]:bg-primary",
                  disabled && "cursor-not-allowed"
                )}
                aria-label={`Toggle visibility: currently ${isVisible ? 'visible' : 'hidden'}`}
              />
              {/* Visually hidden text for screen readers */}
              <span className="sr-only">
                {isVisible ? "הסתר תוכן" : "הצג תוכן"}
              </span>
            </div>
          </TooltipTrigger>
          <TooltipContent 
            side="left" 
            className="max-w-[200px]"
            dir="rtl"
          >
            <p>
              {isVisible ? tooltipText.visible : tooltipText.hidden}
            </p>
            <p className="text-xs text-muted-foreground mt-1">
              {tooltipText.action} {isVisible ? "להסתיר" : "להציג"} תשובה זו
            </p>
          </TooltipContent>
        </Tooltip>
      </TooltipProvider>
    </div>
  );
};

// Default export
export default VisibilityControl;

// Named exports for types
export type { VisibilityControlProps };
--- End of Content for VisibilityControl.tsx ---

================================================================================
Directory: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\profile\sections
================================================================================

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\profile\sections\BudgetDisplay.tsx
--------------------------------------------------------------------------------
Content:
// src/app/components/profile/sections/BudgetDisplay.tsx

import React from 'react';
import { Progress } from "@/components/ui/progress";
import { motion } from 'framer-motion';

interface BudgetDisplayProps {
  // הקומפוננטה מקבלת את הנתונים הגולמיים של התשובה
  data: Record<string, number>;
}

const BudgetDisplay: React.FC<BudgetDisplayProps> = ({ data }) => {
  // בדיקה שהנתונים תקינים
  if (!data || typeof data !== 'object' || Array.isArray(data)) {
    return <p className="text-sm text-red-500">שגיאה: נתונים לא תקינים לתצוגה.</p>;
  }

  // 1. המרת האובייקט למערך, סינון ערכים ריקים, ומיון מהגבוה לנמוך
  const sortedEntries = Object.entries(data)
    .filter(([_, value]) => typeof value === 'number' && value > 0)
    .sort(([, a], [, b]) => b - a);
  
  // אם אין נתונים להצגה אחרי הסינון
  if (sortedEntries.length === 0) {
    return <p className="text-sm text-gray-500 italic">לא הוקצו ערכים.</p>;
  }

  // 2. פלטת צבעים דינמית להמחשה ויזואלית
  const colors = [
    'bg-cyan-500',
    'bg-teal-500',
    'bg-sky-500',
    'bg-indigo-500',
    'bg-purple-500',
    'bg-gray-400',
  ];

  // 3. הגדרות אנימציה
  const containerVariants = {
    hidden: { opacity: 0 },
    visible: {
      opacity: 1,
      transition: {
        staggerChildren: 0.1, // כל פריט יופיע בעיכוב קל
      },
    },
  };

  const itemVariants = {
    hidden: { opacity: 0, x: -20 },
    visible: { opacity: 1, x: 0 },
  };

  return (
    <motion.div 
      className="space-y-3 pt-2"
      variants={containerVariants}
      initial="hidden"
      animate="visible"
    >
      {sortedEntries.map(([label, value], index) => (
        <motion.div key={label} variants={itemVariants}>
          <div className="flex justify-between items-center mb-1 text-sm">
            <span className="font-medium text-gray-700">{label}</span>
            <span className="font-semibold text-cyan-700">{value}%</span>
          </div>
          <Progress 
            value={value} 
            className="h-2.5 rounded-full bg-gray-200/70"
            indicatorClassName={colors[index % colors.length]} // בחירת צבע מהפלטה
          />
        </motion.div>
      ))}
    </motion.div>
  );
};

export default BudgetDisplay;
--- End of Content for BudgetDisplay.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\profile\sections\PhotosSection.tsx
--------------------------------------------------------------------------------
Content:
// src/components/profile/sections/PhotosSection.tsx

'use client';

import React, { useRef, useState, useEffect, useCallback } from 'react';
import Image from 'next/image';
import { cn, getRelativeCloudinaryPath } from '@/lib/utils';
// UI Components
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import {
  Dialog,
  DialogContent,
  DialogTitle,
  DialogDescription,
  DialogHeader,
  DialogFooter,
} from '@/components/ui/dialog';
import { toast } from 'sonner';

// Icons
import {
  Camera,
  Star,
  Loader2,
  ChevronLeft,
  ChevronRight,
  Upload,
  Trash2,
  X,
  CheckCircle2,
  MinusSquare,
} from 'lucide-react';

// Types
import type { UserImage } from '@/types/next-auth';
import { PhotosSectionDict } from '@/types/dictionary';

interface PhotosSectionProps {
  images: UserImage[];
  isUploading: boolean;
  disabled?: boolean;
  maxImages?: number;
  onUpload: (files: File[]) => Promise<void>;
  onSetMain: (imageId: string) => Promise<void>;
  onDelete: (imageIds: string[]) => Promise<void>;
  dict: PhotosSectionDict;
}

const PhotosSection: React.FC<PhotosSectionProps> = ({
  images,
  isUploading: isExternallyUploading,
  disabled = false,
  maxImages = 5,
  onUpload,
  onSetMain,
  onDelete,
  dict,
}) => {
  const fileInputRef = useRef<HTMLInputElement>(null);

  const [showImageViewer, setShowImageViewer] = useState(false);
  const [selectedViewerIndex, setSelectedViewerIndex] = useState<number | null>(
    null
  );
  const [isProcessing, setIsProcessing] = useState(false);
  const [deleteConfirmOpen, setDeleteConfirmOpen] = useState(false);
  const [imageToDelete, setImageToDelete] = useState<string | null>(null);
  const [uploadingFiles, setUploadingFiles] = useState<string[]>([]);
  const [selectionMode, setSelectionMode] = useState(false);
  const [selectedImageIds, setSelectedImageIds] = useState<Set<string>>(
    new Set()
  );

  const isLoading =
    isExternallyUploading || isProcessing || uploadingFiles.length > 0;

  const validateFiles = (
    files: FileList | File[]
  ): { validFiles: File[]; errors: string[] } => {
    const validTypes = ['image/jpeg', 'image/png', 'image/jpg', 'image/webp'];
    const maxSize = 5 * 1024 * 1024; // 5MB
    const validFiles: File[] = [];
    const errors: string[] = [];
    Array.from(files).forEach((file) => {
      if (!validTypes.includes(file.type)) {
        errors.push(
          dict.toasts.invalidFileTypeError.replace('{{fileName}}', file.name)
        );
        return;
      }
      if (file.size > maxSize) {
        errors.push(
          dict.toasts.fileTooLargeError.replace('{{fileName}}', file.name)
        );
        return;
      }
      validFiles.push(file);
    });
    return { validFiles, errors };
  };

  const handleFileSelect = async (e: React.ChangeEvent<HTMLInputElement>) => {
    const files = e.target.files;
    if (!files || files.length === 0) return;

    const remainingSlots = maxImages - images.length;
    if (remainingSlots <= 0) {
      toast.error(dict.toasts.maxImagesError);
      return;
    }
    if (files.length > remainingSlots) {
      toast.error(
        dict.toasts.slotsError.replace('{{count}}', remainingSlots.toString())
      );
      return;
    }
    if (isLoading) return;

    const { validFiles, errors } = validateFiles(files);
    if (errors.length > 0) {
      errors.forEach((error) => toast.error(error));
    }
    if (validFiles.length === 0) return;

    setUploadingFiles(validFiles.map((f) => f.name));
    try {
      await onUpload(validFiles);
      toast.success(
        dict.toasts.uploadSuccess.replace(
          '{{count}}',
          validFiles.length.toString()
        )
      );
    } catch (error) {
      console.error('Error during upload process:', error);
      toast.error(dict.toasts.uploadError);
    } finally {
      setUploadingFiles([]);
      if (fileInputRef.current) fileInputRef.current.value = '';
    }
  };

  const triggerFileInput = () => {
    if (!isLoading && !disabled && images.length < maxImages) {
      fileInputRef.current?.click();
    }
  };

  const handleToggleSelectionMode = () => {
    setSelectionMode((prev) => !prev);
    setSelectedImageIds(new Set());
  };

  const handleSelectAll = () => {
    if (selectedImageIds.size === images.length) {
      setSelectedImageIds(new Set());
    } else {
      setSelectedImageIds(new Set(images.map((img) => img.id)));
    }
  };

  const toggleImageSelection = (imageId: string) => {
    setSelectedImageIds((prev) => {
      const newSet = new Set(prev);
      if (newSet.has(imageId)) {
        newSet.delete(imageId);
      } else {
        newSet.add(imageId);
      }
      return newSet;
    });
  };

  const handleImageClick = (index: number) => {
    if (selectionMode) {
      toggleImageSelection(images[index].id);
    } else {
      setSelectedViewerIndex(index);
      setShowImageViewer(true);
    }
  };

  const handleBulkDelete = async () => {
    if (selectedImageIds.size === 0) {
      toast.info(dict.toasts.selectOneError);
      return;
    }

    const confirmationMessage = dict.confirmations.bulkDelete.replace(
      '{{count}}',
      selectedImageIds.size.toString()
    );
    if (!window.confirm(confirmationMessage)) {
      return;
    }

    setIsProcessing(true);
    try {
      await onDelete(Array.from(selectedImageIds));
      toast.success(
        dict.toasts.bulkDeleteSuccess.replace(
          '{{count}}',
          selectedImageIds.size.toString()
        )
      );
      setSelectionMode(false);
      setSelectedImageIds(new Set());
    } catch (error) {
      console.error('Error during bulk delete:', error);
      toast.error(dict.toasts.bulkDeleteError);
    } finally {
      setIsProcessing(false);
    }
  };

  const requestDelete = (imageId: string, event?: React.MouseEvent) => {
    event?.stopPropagation();
    if (isLoading) return;
    setImageToDelete(imageId);
    setDeleteConfirmOpen(true);
  };

  const confirmDelete = async () => {
    if (!imageToDelete || isProcessing) return;
    setIsProcessing(true);
    try {
      await onDelete([imageToDelete]);
      toast.success(dict.toasts.singleDeleteSuccess);
      closeImageViewer();
      setDeleteConfirmOpen(false);
      setImageToDelete(null);
    } catch (error) {
      console.error('Error deleting image:', error);
      toast.error(dict.toasts.singleDeleteError);
    } finally {
      setIsProcessing(false);
    }
  };

  const closeImageViewer = useCallback(() => {
    setShowImageViewer(false);
    setSelectedViewerIndex(null);
  }, []);

  const handleNextImage = useCallback(
    () =>
      setSelectedViewerIndex((prev) =>
        prev === null || prev >= images.length - 1 ? prev : prev + 1
      ),
    [images.length]
  );
  const handlePreviousImage = useCallback(
    () =>
      setSelectedViewerIndex((prev) =>
        prev === null || prev <= 0 ? prev : prev - 1
      ),
    []
  );

  const handleSetMainImage = async (
    imageId: string,
    showToast = true,
    event?: React.MouseEvent
  ) => {
    event?.stopPropagation();
    if (isLoading) return;
    const currentImage = images.find((img) => img.id === imageId);
    if (!currentImage || currentImage.isMain) return;
    setIsProcessing(true);
    try {
      await onSetMain(imageId);
      if (showToast) toast.success(dict.toasts.setMainSuccess);
    } catch (error) {
      console.error('Error setting main image:', error);
      toast.error(dict.toasts.setMainError);
    } finally {
      setIsProcessing(false);
    }
  };

  const handleControlClick = (e: React.MouseEvent) => e.stopPropagation();

  useEffect(() => {
    const handleKeyDown = (e: KeyboardEvent) => {
      if (!showImageViewer) return;
      if (e.key === 'ArrowRight') handlePreviousImage();
      if (e.key === 'ArrowLeft') handleNextImage();
      if (e.key === 'Escape') closeImageViewer();
    };
    window.addEventListener('keydown', handleKeyDown);
    return () => window.removeEventListener('keydown', handleKeyDown);
  }, [showImageViewer, handlePreviousImage, handleNextImage, closeImageViewer]);

  const getRemainingSlots = () => maxImages - images.length;

  return (
    <div
      dir="rtl"
      className="bg-white/80 backdrop-blur-lg rounded-3xl shadow-xl p-6 md:p-8"
    >
      <div className="flex flex-col sm:flex-row items-start sm:items-center justify-between mb-6 pb-4 border-b border-gray-200/80">
        {!selectionMode ? (
          <>
            <div className="mb-3 sm:mb-0 text-right">
              <h2 className="text-xl font-semibold text-gray-800">
                {dict.title}
              </h2>
              <p className="mt-1 text-sm text-gray-600">
                {dict.subtitle.replace('{{maxImages}}', maxImages.toString())}
              </p>
              {uploadingFiles.length > 0 && (
                <p className="mt-2 text-sm text-cyan-600 font-medium">
                  {dict.uploadingMultiple.replace(
                    '{{count}}',
                    uploadingFiles.length.toString()
                  )}
                </p>
              )}
            </div>
            <div className="flex gap-2 self-end sm:self-center">
              {images.length > 0 && !disabled && (
                <Button
                  variant="outline"
                  onClick={handleToggleSelectionMode}
                  className="rounded-full px-4 text-sm"
                >
                  {dict.selectForDeletion}
                </Button>
              )}
              {!disabled && (
                <Button
                  variant="outline"
                  onClick={triggerFileInput}
                  disabled={isLoading || images.length >= maxImages}
                  className="rounded-full border-2 border-cyan-300 text-cyan-700 hover:bg-cyan-50/50 hover:border-cyan-400 transition-all duration-300 px-5 py-2.5 text-sm font-medium flex items-center gap-2"
                >
                  {isExternallyUploading || uploadingFiles.length > 0 ? (
                    <Loader2 className="w-4 h-4 animate-spin" />
                  ) : (
                    <Upload className="w-4 h-4" />
                  )}
                  <span>{dict.uploadButton}</span>
                </Button>
              )}
            </div>
          </>
        ) : (
          <div className="w-full flex justify-between items-center">
            <div className="flex items-center gap-4">
              <Button
                variant="ghost"
                size="icon"
                onClick={handleToggleSelectionMode}
                className="rounded-full text-gray-600 hover:bg-gray-100"
              >
                <X className="w-5 h-5" />
              </Button>
              <span className="font-semibold text-gray-700">
                {dict.selectionHeader.replace(
                  '{{count}}',
                  selectedImageIds.size.toString()
                )}
              </span>
            </div>
            <div className="flex gap-2">
              <Button
                variant="outline"
                onClick={handleSelectAll}
                className="rounded-full px-4 text-sm"
              >
                {selectedImageIds.size === images.length
                  ? dict.deselectAll
                  : dict.selectAll}
              </Button>
              <Button
                variant="destructive"
                onClick={handleBulkDelete}
                disabled={isProcessing || selectedImageIds.size === 0}
                className="rounded-full px-4 text-sm flex items-center gap-2"
              >
                {isProcessing ? (
                  <Loader2 className="w-4 h-4 animate-spin" />
                ) : (
                  <Trash2 className="w-4 h-4" />
                )}
                {dict.deleteSelected}
              </Button>
            </div>
          </div>
        )}
      </div>

      <input
        type="file"
        ref={fileInputRef}
        className="hidden"
        accept="image/jpeg,image/png,image/jpg,image/webp"
        onChange={handleFileSelect}
        disabled={isLoading || disabled || images.length >= maxImages}
        multiple
      />

      <div className="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-5 gap-4 md:gap-5">
        {images.map((image, index) => (
          <div
            key={image.id}
            role="button"
            tabIndex={0}
            aria-pressed={
              selectionMode ? selectedImageIds.has(image.id) : undefined
            }
            aria-label={`${dict.selectForDeletion} ${index + 1}`}
            className={cn(
              'relative group aspect-square rounded-xl overflow-hidden bg-gray-100 shadow-md transition-all duration-300 ease-in-out',
              selectionMode
                ? 'cursor-pointer'
                : 'cursor-pointer hover:shadow-lg',
              selectedImageIds.has(image.id) &&
                'ring-4 ring-offset-2 ring-cyan-500'
            )}
            onClick={() => handleImageClick(index)}
            onKeyDown={(e) => {
              if (e.key === 'Enter' || e.key === ' ') {
                e.preventDefault();
                handleImageClick(index);
              }
            }}
          >
            <Image
              src={getRelativeCloudinaryPath(image.url)}
              alt={`${dict.title} ${index + 1}`}
              fill
              className={cn(
                'object-cover transition-transform duration-300',
                !selectionMode && 'group-hover:scale-105'
              )}
              sizes="(max-width: 640px) 50vw, (max-width: 768px) 33vw, (max-width: 1024px) 25vw, 20vw"
              priority={index < 2}
            />
            {selectionMode && (
              <div className="absolute inset-0 bg-black/30 flex items-center justify-center transition-opacity opacity-0 group-hover:opacity-100">
                {selectedImageIds.has(image.id) ? (
                  <CheckCircle2 className="w-10 h-10 text-white drop-shadow-lg" />
                ) : (
                  <MinusSquare className="w-10 h-10 text-white/70 drop-shadow-lg" />
                )}
              </div>
            )}
            {!disabled && !selectionMode && (
              <div
                className="absolute top-2 right-2 z-10 flex gap-1.5 opacity-85 group-hover:opacity-100 transition-opacity duration-200"
                onClick={handleControlClick}
              >
                <Button
                  variant="secondary"
                  size="icon"
                  className={cn(
                    'w-8 h-8 rounded-full shadow-md border border-white/30 bg-black/40 text-white hover:bg-black/60 transition-colors',
                    image.isMain ? 'cursor-default' : 'hover:text-yellow-300'
                  )}
                  onClick={(e) => handleSetMainImage(image.id, true, e)}
                  disabled={image.isMain || isLoading}
                  title={image.isMain ? dict.mainBadge : dict.setAsMainTooltip}
                  aria-label={`${dict.setAsMainTooltip} ${index + 1}`}
                >
                  <Star
                    className={cn(
                      'w-4 h-4 transition-colors',
                      image.isMain
                        ? 'text-yellow-400 fill-yellow-400'
                        : 'text-white'
                    )}
                  />
                </Button>
                <Button
                  variant="secondary"
                  size="icon"
                  className="w-8 h-8 rounded-full shadow-md border border-white/30 bg-black/40 text-white hover:bg-red-600 hover:border-red-700 transition-colors"
                  onClick={(e) => requestDelete(image.id, e)}
                  disabled={isLoading}
                  title={dict.deleteTooltip}
                  aria-label={`${dict.deleteTooltip} ${index + 1}`}
                >
                  <Trash2 className="w-4 h-4" />
                </Button>
              </div>
            )}
            {image.isMain && !selectionMode && (
              <Badge className="absolute bottom-2 left-2 rounded-full px-2.5 py-0.5 text-xs font-medium shadow-md text-white bg-gradient-to-r from-cyan-500 to-pink-500 border-none">
                {dict.mainBadge}
              </Badge>
            )}
          </div>
        ))}

        {!disabled && !selectionMode && images.length < maxImages && (
          <div
            onClick={triggerFileInput}
            className="flex flex-col items-center justify-center text-center p-4 aspect-square rounded-xl border-2 border-dashed border-cyan-300/70 bg-cyan-50/30 hover:bg-cyan-50/60 hover:border-cyan-400 transition-colors duration-300 cursor-pointer group"
          >
            <Upload className="w-8 h-8 text-cyan-500 mb-2 transition-transform group-hover:scale-110" />
            <span className="text-sm font-medium text-cyan-700">
              {dict.uploadPlaceholder.title}
            </span>
            <span className="text-xs text-cyan-600/90 mt-1">
              {dict.uploadPlaceholder.remaining.replace(
                '{{count}}',
                getRemainingSlots().toString()
              )}
            </span>
            <span className="text-xs text-cyan-500/80 mt-1">
              {dict.uploadPlaceholder.prompt}
            </span>
          </div>
        )}

        {uploadingFiles.map((_, index) => (
          <div
            key={`uploading-${index}`}
            className="relative aspect-square rounded-xl overflow-hidden bg-gray-200 shadow-md"
          >
            <div className="absolute inset-0 flex flex-col items-center justify-center">
              <Loader2 className="w-8 h-8 text-cyan-500 animate-spin mb-2" />
              <span className="text-xs text-gray-600 text-center px-2">
                {dict.uploadingPlaceholder}
              </span>
            </div>
            <div className="absolute bottom-0 left-0 right-0 bg-cyan-500 h-1 animate-pulse"></div>
          </div>
        ))}
      </div>

      {images.length === 0 &&
        uploadingFiles.length === 0 &&
        !disabled &&
        !selectionMode && (
          <div className="text-center py-16 mt-6 bg-gradient-to-br from-cyan-50/20 to-pink-50/20 rounded-xl border border-dashed border-gray-300">
            <Camera className="w-12 h-12 mx-auto text-gray-400/80" />
            <p className="mt-4 text-gray-600 font-medium">
              {dict.emptyState.title}
            </p>
            <p className="text-sm text-gray-500 mt-1 px-4">
              {dict.emptyState.description}
            </p>
          </div>
        )}
      {images.length === 0 && disabled && (
        <div className="text-center py-16 mt-6 bg-gray-50/50 rounded-xl border border-gray-200">
          <Camera className="w-12 h-12 mx-auto text-gray-400" />
          <p className="mt-4 text-gray-500 font-medium">
            {dict.emptyStateDisabled.title}
          </p>
        </div>
      )}

      <Dialog open={deleteConfirmOpen} onOpenChange={setDeleteConfirmOpen}>
        <DialogContent
          className="sm:max-w-md bg-white/95 backdrop-blur-md rounded-2xl shadow-2xl border-none p-6"
          dir="rtl"
        >
          <DialogHeader>
            <DialogTitle className="text-lg font-semibold text-gray-800">
              {dict.deleteDialog.title}
            </DialogTitle>
            <DialogDescription className="text-sm text-gray-600 mt-2">
              {dict.deleteDialog.description}
            </DialogDescription>
          </DialogHeader>
          <DialogFooter className="mt-6 flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2 sm:space-x-reverse gap-2">
            <Button
              type="button"
              variant="outline"
              onClick={() => setDeleteConfirmOpen(false)}
              disabled={isLoading}
              className="rounded-full px-5"
            >
              {dict.deleteDialog.cancel}
            </Button>
            <Button
              type="button"
              variant="destructive"
              onClick={confirmDelete}
              disabled={isLoading}
              className="rounded-full px-5"
            >
              {isProcessing ? (
                <Loader2 className="w-4 h-4 ml-2 animate-spin" />
              ) : (
                <Trash2 className="w-4 h-4 ml-2" />
              )}
              <span>{dict.deleteDialog.confirm}</span>
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>

      <Dialog open={showImageViewer} onOpenChange={setShowImageViewer}>
        <DialogContent
          className="p-0 m-0 w-screen h-screen max-w-none sm:max-w-full sm:h-full bg-black/90 backdrop-blur-sm border-none rounded-none flex items-center justify-center outline-none"
          aria-describedby={undefined}
        >
          <Button
            variant="ghost"
            size="icon"
            className="absolute top-4 left-4 z-50 bg-black/40 hover:bg-black/60 text-white rounded-full w-10 h-10 sm:w-12 sm:h-12 transition-colors"
            onClick={closeImageViewer}
            aria-label={dict.imageViewer.closeLabel}
          >
            <X className="w-6 h-6" />
          </Button>
          {selectedViewerIndex !== null && images[selectedViewerIndex] && (
            <div className="relative w-full h-full flex items-center justify-center">
              <div className="relative w-[95%] h-[85%] sm:w-[90%] sm:h-[90%]">
                <Image
                  src={getRelativeCloudinaryPath(
                    images[selectedViewerIndex].url
                  )}
                  alt={dict.imageViewer.altText.replace(
                    '{{index}}',
                    (selectedViewerIndex + 1).toString()
                  )}
                  fill
                  className="object-contain select-none"
                  sizes="90vw"
                  priority
                />
              </div>
              <div className="absolute top-0 left-0 w-full h-full pointer-events-none">
                {images.length > 1 && (
                  <>
                    <Button
                      variant="ghost"
                      size="icon"
                      className="absolute right-2 sm:right-4 top-1/2 transform -translate-y-1/2 z-40 bg-black/40 hover:bg-black/60 text-white rounded-full w-10 h-10 sm:w-12 sm:h-12 transition-colors pointer-events-auto"
                      onClick={(e) => {
                        e.stopPropagation();
                        handlePreviousImage();
                      }}
                      disabled={selectedViewerIndex === 0}
                      aria-label={dict.imageViewer.prevLabel}
                    >
                      <ChevronRight className="w-7 h-7" />
                    </Button>
                    <Button
                      variant="ghost"
                      size="icon"
                      className="absolute left-2 sm:left-4 top-1/2 transform -translate-y-1/2 z-40 bg-black/40 hover:bg-black/60 text-white rounded-full w-10 h-10 sm:w-12 sm:h-12 transition-colors pointer-events-auto"
                      onClick={(e) => {
                        e.stopPropagation();
                        handleNextImage();
                      }}
                      disabled={selectedViewerIndex === images.length - 1}
                      aria-label={dict.imageViewer.nextLabel}
                    >
                      <ChevronLeft className="w-7 h-7" />
                    </Button>
                  </>
                )}
                {!disabled && (
                  <div className="absolute top-4 right-4 z-50 flex flex-col sm:flex-row gap-2 pointer-events-auto">
                    {!images[selectedViewerIndex].isMain && (
                      <Button
                        variant="secondary"
                        className="rounded-full bg-white/70 backdrop-blur-sm shadow-md hover:bg-white/90 text-gray-800 px-3 py-1.5 text-xs sm:text-sm border border-white/20 flex items-center gap-1.5"
                        onClick={(e) =>
                          handleSetMainImage(
                            images[selectedViewerIndex].id,
                            true,
                            e
                          )
                        }
                        size="sm"
                        disabled={isLoading}
                      >
                        <Star className="w-4 h-4" />
                        <span>{dict.imageViewer.setMainButton}</span>
                      </Button>
                    )}
                    <Button
                      variant="destructive"
                      className="rounded-full bg-red-600/80 hover:bg-red-700 text-white px-3 py-1.5 text-xs sm:text-sm shadow-md border-none flex items-center gap-1.5"
                      onClick={(e) =>
                        requestDelete(images[selectedViewerIndex].id, e)
                      }
                      size="sm"
                      disabled={isLoading}
                    >
                      <Trash2 className="w-4 h-4" />
                      <span>{dict.imageViewer.deleteButton}</span>
                    </Button>
                  </div>
                )}
                {images.length > 0 && (
                  <div className="absolute bottom-4 left-1/2 transform -translate-x-1/2 bg-black/60 text-white px-3 py-1 rounded-full text-xs sm:text-sm font-medium select-none">
                    {dict.imageViewer.counter
                      .replace(
                        '{{current}}',
                        (selectedViewerIndex + 1).toString()
                      )
                      .replace('{{total}}', images.length.toString())}
                  </div>
                )}
              </div>
            </div>
          )}
        </DialogContent>
      </Dialog>
    </div>
  );
};

export default PhotosSection;
--- End of Content for PhotosSection.tsx ---

----------------------------------------------------------------------------------------------------------------------------------------------------------------

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\profile\sections\QuestionnaireResponsesSection.tsx
--------------------------------------------------------------------------------
Content:
// src/app/components/profile/sections/QuestionnaireResponsesSection.tsx

import React, { useState, useMemo, useEffect } from 'react';
import Link from 'next/link';
import {
  Card,
  CardHeader,
  CardTitle,
  CardContent,
  CardDescription,
} from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { Textarea } from '@/components/ui/textarea';
import {
  Book,
  CheckCircle,
  Clock,
  Pencil,
  X,
  Save,
  Eye,
  EyeOff,
  Loader2,
  ArrowRight,
} from 'lucide-react';
import { cn } from '@/lib/utils';
import { toast } from 'sonner';
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from '@/components/ui/tooltip';

// --- START: הוספת ייבוא לקומפוננטה החדשה ---
import BudgetDisplay from './BudgetDisplay';
// --- END: הוספת ייבוא לקומפוננטה החדשה ---

import type {
  QuestionnaireResponse,
  FormattedAnswer, // הטיפוס הזה עודכן בקובץ הטיפוסים
  UpdateValue,
} from '@/types/next-auth';

import { WORLDS } from '../constants';

const QUESTIONNAIRE_URL = '/questionnaire';

interface QuestionnaireResponsesSectionProps {
  questionnaire: QuestionnaireResponse | null;
  onUpdate?: (
    world: string,
    questionId: string,
    value: UpdateValue
  ) => Promise<void>;
  isEditable?: boolean;
  isFirstInList?: boolean;
  viewMode?: 'matchmaker' | 'candidate';
}

interface QuestionCardProps {
  question: string;
  answer: FormattedAnswer; // משתמש במבנה החדש שכולל rawValue ו-questionType
  isEditingGlobally: boolean;
  worldKey: string;
  onUpdate: (
    world: string,
    questionId: string,
    value: UpdateValue
  ) => Promise<void>;
  isFirstInList?: boolean;
}

// החלף את כל הקוד של QuestionCard בקוד הבא
// בתוך הקובץ: src/app/components/profile/sections/QuestionnaireResponsesSection.tsx

const QuestionCard: React.FC<QuestionCardProps> = ({
  question,
  answer,
  isEditingGlobally,
  worldKey,
  onUpdate,
  isFirstInList,
}) => {
  const [isEditingText, setIsEditingText] = useState(false);
  const [editValue, setEditValue] = useState(answer.displayText);
  const [isSavingText, setIsSavingText] = useState(false);
  const [isSavingVisibility, setIsSavingVisibility] = useState(false);
  const [currentIsVisible, setCurrentIsVisible] = useState(
    answer.isVisible ?? true
  );

  useEffect(() => {
    setCurrentIsVisible(answer.isVisible ?? true);
  }, [answer.isVisible]);

  const isSaving = isSavingText || isSavingVisibility;

  const handleStartEdit = () => {
    if (isSaving) return;
    setIsEditingText(true);
    setEditValue(answer.displayText);
  };

  const handleSaveText = async () => {
    if (!editValue?.trim()) {
      toast.error('לא ניתן לשמור תשובה ריקה.');
      return;
    }
    if (editValue.trim() === answer.displayText) {
      setIsEditingText(false);
      return;
    }

    setIsSavingText(true);
    try {
      await onUpdate(worldKey, answer.questionId, {
        type: 'answer',
        value: editValue.trim(),
      });
      toast.success('התשובה עודכנה בהצלחה');
      setIsEditingText(false);
    } catch (error) {
      console.error('Error updating answer:', error);
      toast.error('שגיאה בעדכון התשובה');
    } finally {
      setIsSavingText(false);
    }
  };

  const handleCancelEdit = () => {
    setIsEditingText(false);
    setEditValue(answer.displayText);
  };

  const handleVisibilityChange = async (newIsVisibleState: boolean) => {
    setCurrentIsVisible(newIsVisibleState);
    setIsSavingVisibility(true);
    try {
      await onUpdate(worldKey, answer.questionId, {
        type: 'visibility',
        isVisible: newIsVisibleState,
      });
      toast.success('הגדרות הנראות עודכנו');
    } catch (error) {
      console.error('Error updating visibility:', error);
      toast.error('שגיאה בעדכון הנראות');
      setCurrentIsVisible(answer.isVisible ?? true);
    } finally {
      setIsSavingVisibility(false);
    }
  };

  const renderAnswerContent = () => {
    if (
      answer.questionType === 'budgetAllocation' &&
      typeof answer.rawValue === 'object' &&
      answer.rawValue !== null &&
      !Array.isArray(answer.rawValue)
    ) {
      const budgetData = answer.rawValue as Record<string, number>;
      return <BudgetDisplay data={budgetData} />;
    }
    return (
      <p className="text-sm text-gray-800 break-words overflow-wrap-anywhere whitespace-pre-wrap">
        {answer.displayText}
      </p>
    );
  };

  const visibilityLabel = `הצג תשובה זו למועמדים: ${currentIsVisible ? 'מופעל' : 'כבוי'}`;

  return (
    <div className="rounded-lg border bg-card p-4 shadow-sm transition-shadow duration-300 hover:shadow-md">
      <div className="flex items-start justify-between gap-4">
        <div className="flex-1 min-w-0">
          <div className="flex flex-col sm:flex-row items-start sm:items-center justify-between mb-3 gap-2">
            <h4 className="font-medium text-sm sm:text-base flex-1 text-right">
              {question}
            </h4>
            <div className="flex items-center gap-2 self-end sm:self-center">
              {isSavingVisibility && (
                <Loader2 className="h-4 w-4 animate-spin text-muted-foreground" />
              )}
              <TooltipProvider delayDuration={200}>
                <Tooltip>
                  <TooltipTrigger asChild>
                    <button
                      type="button"
                      role="switch"
                      aria-checked={currentIsVisible}
                      disabled={!isEditingGlobally || isSaving}
                      onClick={() => handleVisibilityChange(!currentIsVisible)}
                      className={cn(
                        'inline-flex items-center justify-center h-8 px-3 rounded-full gap-2 transition-all duration-200 ease-in-out',
                        // Styles for disabled state (when not editing globally)
                        'disabled:opacity-100 disabled:cursor-default',
                        // Conditional styles based on visibility state
                        currentIsVisible
                          ? 'bg-emerald-100 text-emerald-800'
                          : 'bg-gray-200 text-gray-600',
                        // Hover and active effects, only when editable
                        isEditingGlobally &&
                          !isSaving &&
                          'hover:shadow-md active:scale-95',
                        isEditingGlobally &&
                          !isSaving &&
                          currentIsVisible &&
                          'hover:bg-emerald-200',
                        isEditingGlobally &&
                          !isSaving &&
                          !currentIsVisible &&
                          'hover:bg-gray-300'
                      )}
                    >
                      {currentIsVisible ? (
                        <Eye className="h-3.5 w-3.5" />
                      ) : (
                        <EyeOff className="h-3.5 w-3.5" />
                      )}
                      <span
                        className="text-xs font-medium whitespace-nowrap"
                        dir="rtl"
                      >
                        {currentIsVisible ? 'גלוי למועמדים' : 'מוסתר'}
                      </span>
                    </button>
                  </TooltipTrigger>
                  <TooltipContent side="top" dir="rtl">
                    <p>
                      {isEditingGlobally
                        ? currentIsVisible
                          ? 'הפוך למוסתר (יוצג רק לך ולשדכנים)'
                          : 'הפוך לגלוי (יוצג למועמדים)'
                        : currentIsVisible
                          ? 'תשובה זו גלויה למועמדים'
                          : 'תשובה זו מוסתרת מהמועמדים'}
                    </p>
                  </TooltipContent>
                </Tooltip>
              </TooltipProvider>
            </div>
          </div>

          {isEditingText ? (
            <div className="space-y-2 mt-1">
              <Textarea
                value={editValue}
                onChange={(e) => setEditValue(e.target.value)}
                className="min-h-[80px] text-sm focus:ring-cyan-500 focus:border-cyan-500"
                placeholder="הקלד/י את תשובתך כאן..."
                disabled={isSavingText}
              />
              <div className="flex justify-end gap-2">
                <Button
                  size="sm"
                  variant="ghost"
                  onClick={handleCancelEdit}
                  disabled={isSavingText}
                  className="text-gray-600 hover:bg-gray-100"
                >
                  <X className="h-4 w-4 ml-1" />
                  ביטול
                </Button>
                <Button
                  size="sm"
                  onClick={handleSaveText}
                  disabled={isSavingText || !editValue?.trim()}
                  className="bg-cyan-600 hover:bg-cyan-700 text-white"
                >
                  {isSavingText ? (
                    <Loader2 className="h-4 w-4 animate-spin" />
                  ) : (
                    <CheckCircle className="h-4 w-4 ml-1" />
                  )}
                  שמירה
                </Button>
              </div>
            </div>
          ) : (
            <div className="relative group overflow-hidden mt-1">
              <div className="p-3 bg-gray-50/50 rounded-md border border-gray-200/60 min-h-[40px]">
                {renderAnswerContent()}
                <TooltipProvider delayDuration={200}>
                  <Tooltip>
                    <TooltipTrigger asChild>
                      <span className="text-xs text-gray-400 block mt-2 text-left">
                        {new Date(answer.answeredAt).toLocaleDateString(
                          'he-IL',
                          { year: 'numeric', month: '2-digit', day: '2-digit' }
                        )}
                      </span>
                    </TooltipTrigger>
                    <TooltipContent side="top" dir="rtl">
                      <p>תאריך עדכון אחרון</p>
                    </TooltipContent>
                  </Tooltip>
                </TooltipProvider>
              </div>

              {/* --- START: כאן נמצא השינוי המרכזי --- */}
              {isEditingGlobally && !isSaving && (
                <TooltipProvider delayDuration={200}>
                  <Tooltip>
                    <TooltipTrigger asChild>
                      {/* אם זו שאלת תקציב, הכפתור הוא קישור. אחרת, הוא כפתור רגיל */}
                      {answer.questionType === 'budgetAllocation' ? (
                        <Button
                          asChild // מאפשר לכפתור לעטוף את הקישור
                          variant="ghost"
                          size="icon"
                          className="absolute top-0 right-0 opacity-0 group-hover:opacity-100 transition-opacity duration-200 h-7 w-7 text-cyan-600 hover:bg-cyan-50"
                        >
                          <Link
                            href={`/questionnaire?world=${worldKey}&question=${answer.questionId}`}
                          >
                            <Pencil className="h-4 w-4" />
                            <span className="sr-only">עריכה בשאלון המלא</span>
                          </Link>
                        </Button>
                      ) : (
                        <Button
                          variant="ghost"
                          size="icon"
                          className="absolute top-0 right-0 opacity-0 group-hover:opacity-100 transition-opacity duration-200 h-7 w-7 text-cyan-600 hover:bg-cyan-50"
                          onClick={handleStartEdit}
                        >
                          <Pencil className="h-4 w-4" />
                          <span className="sr-only">עריכת תשובה</span>
                        </Button>
                      )}
                    </TooltipTrigger>
                    <TooltipContent side="top" dir="rtl">
                      <p>
                        {answer.questionType === 'budgetAllocation'
                          ? 'עריכה בשאלון המלא'
                          : 'עריכת תשובה'}
                      </p>
                    </TooltipContent>
                  </Tooltip>
                </TooltipProvider>
              )}
              {/* --- END: סוף השינוי המרכזי --- */}

              {isSavingText && !isEditingText && (
                <div className="absolute top-1 right-1">
                  <Loader2 className="h-4 w-4 animate-spin text-cyan-500" />
                </div>
              )}
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

// ... (שאר הקובץ נשאר ללא שינוי)
// --- WorldSection Component ---
interface WorldSectionProps {
  worldKey: keyof typeof WORLDS;
  worldConfig: (typeof WORLDS)[keyof typeof WORLDS];
  answers: FormattedAnswer[];
  isEditingGlobally: boolean;
  onUpdate: (
    world: string,
    questionId: string,
    value: UpdateValue
  ) => Promise<void>;
  isCompleted: boolean;
  className?: string;
}

const WorldSection: React.FC<WorldSectionProps> = ({
  worldKey,
  worldConfig,
  answers,
  isEditingGlobally,
  onUpdate,
  isCompleted,
  className,
}) => {
  const { title, icon: Icon, color, bgColor, borderColor } = worldConfig;

  return (
    <Card
      className={cn(
        'overflow-hidden shadow-sm border',
        bgColor,
        borderColor,
        className
      )}
    >
      <CardHeader
        className="p-4 border-b"
        style={{
          borderColor: `rgba(var(--${color.split('-')[1]}-200-rgb), 0.5)`,
        }}
      >
        <div className="flex items-center justify-between">
          <div className="flex items-center gap-3">
            <div
              className={cn(
                'p-2 rounded-full',
                color.replace('text-', 'bg-') + '/10'
              )}
            >
              <Icon className={cn('h-5 w-5', color)} />
            </div>
            <div>
              <CardTitle className="text-md sm:text-lg text-gray-800">
                {title}
              </CardTitle>
              <CardDescription className="text-xs text-gray-500 mt-0.5">
                {answers.length} {answers.length === 1 ? 'תשובה' : 'תשובות'}
              </CardDescription>
            </div>
          </div>
          <Badge
            variant={isCompleted ? 'success' : 'secondary'}
            className={cn(
              'gap-1 text-xs px-2 py-0.5 rounded-full',
              isCompleted
                ? 'bg-emerald-100 text-emerald-800'
                : 'bg-blue-100 text-blue-800'
            )}
          >
            {isCompleted ? (
              <CheckCircle className="h-3 w-3" />
            ) : (
              <Clock className="h-3 w-3" />
            )}
            {isCompleted ? 'הושלם' : 'בתהליך'}
          </Badge>
        </div>
      </CardHeader>
      <CardContent className="p-4 pt-4">
        <div className="space-y-4">
          {answers.map((answer, index) => (
            <QuestionCard
              key={answer.questionId}
              question={answer.question}
              answer={answer}
              isFirstInList={index === 0}
              isEditingGlobally={isEditingGlobally}
              worldKey={worldKey}
              onUpdate={onUpdate}
            />
          ))}
        </div>
      </CardContent>
    </Card>
  );
};

// --- QuestionnaireResponsesSection Component ---
const QuestionnaireResponsesSection: React.FC<
  QuestionnaireResponsesSectionProps
> = ({ questionnaire, onUpdate, isEditable = false }) => {
  const [isEditingGlobally, setIsEditingGlobally] = useState(false);

  const worldsWithAnswers = useMemo(() => {
    if (!questionnaire?.formattedAnswers) return [];
    return Object.entries(WORLDS)
      .map(([key, config]) => ({
        key: key as keyof typeof WORLDS,
        config,
        answers:
          questionnaire.formattedAnswers?.[
            key as keyof typeof questionnaire.formattedAnswers
          ] ?? [],
        isCompleted:
          (questionnaire[
            `${key}Completed` as keyof QuestionnaireResponse
          ] as boolean) ?? false,
      }))
      .filter((world) => world.answers.length > 0);
  }, [questionnaire]);

  if (!questionnaire) {
    return (
      <Card className="text-center py-12 text-gray-500 bg-gray-50 rounded-lg border border-dashed">
        <Book className="h-10 w-10 mx-auto mb-3 opacity-50 text-gray-400" />
        <p className="font-medium">לא מולא שאלון עבור פרופיל זה.</p>
        <p className="text-sm mt-1">אין תשובות להציג.</p>
        <div className="mt-6">
          <Button
            asChild
            variant="default"
            className="bg-cyan-600 hover:bg-cyan-700"
          >
            <Link
              href={QUESTIONNAIRE_URL}
              className="flex items-center gap-1.5"
            >
              מלא את השאלון
              <ArrowRight className="h-4 w-4" />
            </Link>
          </Button>
        </div>
      </Card>
    );
  }

  const hasAnyAnswers = worldsWithAnswers.length > 0;

  return (
    <div className="space-y-6">
      <Card className="shadow-sm border">
        <CardHeader className="p-4">
          <div className="flex flex-col sm:flex-row items-start sm:items-center justify-between gap-3">
            <div className="flex items-center gap-3">
              {questionnaire.completed ? (
                <CheckCircle className="h-5 w-5 text-emerald-500 flex-shrink-0" />
              ) : (
                <Clock className="h-5 w-5 text-blue-500 flex-shrink-0" />
              )}
              <div>
                <p className="font-semibold text-base text-gray-800">
                  {questionnaire.completed ? 'שאלון הושלם' : 'שאלון בתהליך'}
                </p>
                <p className="text-xs text-gray-500 mt-0.5">
                  {hasAnyAnswers
                    ? `עודכן לאחרונה: ${new Date(
                        questionnaire.lastSaved
                      ).toLocaleDateString('he-IL')}`
                    : 'השאלון טרם החל'}
                </p>
              </div>
            </div>

            <div className="flex flex-col sm:flex-row items-center gap-2 self-end sm:self-center">
              <Button
                asChild
                variant="outline"
                size="sm"
                className="rounded-full px-4 py-2 text-xs sm:text-sm"
              >
                <Link
                  href={QUESTIONNAIRE_URL}
                  className="flex items-center gap-1.5"
                >
                  עבור לשאלון
                  <ArrowRight className="h-4 w-4" />
                </Link>
              </Button>
              {isEditable && hasAnyAnswers && onUpdate && (
                <Button
                  variant="outline"
                  size="sm"
                  onClick={() => setIsEditingGlobally(!isEditingGlobally)}
                  className="gap-1.5 rounded-full px-4 py-2 text-xs sm:text-sm"
                >
                  {isEditingGlobally ? (
                    <>
                      <Save className="h-4 w-4" />
                      סיום עריכה
                    </>
                  ) : (
                    <>
                      <Pencil className="h-4 w-4" />
                      עריכת תשובות
                    </>
                  )}
                </Button>
              )}
            </div>
          </div>
        </CardHeader>
      </Card>

      {hasAnyAnswers ? (
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          {worldsWithAnswers.map(({ key, config, answers, isCompleted }) => (
            <WorldSection
              key={key}
              worldKey={key}
              worldConfig={config}
              answers={answers}
              isEditingGlobally={isEditingGlobally}
              onUpdate={onUpdate!}
              isCompleted={isCompleted}
            />
          ))}
        </div>
      ) : (
        <div className="text-center py-10 text-gray-500 bg-gray-50/50 rounded-lg border border-gray-200">
          <Book className="h-8 w-8 mx-auto mb-2 opacity-50 text-gray-400" />
          <p className="font-medium text-lg">השאלון טרם מולא במלואו</p>
          <p className="text-sm mt-1 text-gray-600">
            עדיין אין תשובות להציג, אך ניתן להמשיך למלא את השאלון.
          </p>
          <div className="mt-6">
            <Button
              asChild
              variant="default"
              className="bg-cyan-600 hover:bg-cyan-700 text-white"
            >
              <Link
                href={QUESTIONNAIRE_URL}
                className="flex items-center gap-1.5 px-6 py-2"
              >
                המשך מילוי השאלון
                <ArrowRight className="h-4 w-4" />
              </Link>
            </Button>
          </div>
        </div>
      )}
    </div>
  );
};

export default QuestionnaireResponsesSection;
--- End of Content for QuestionnaireResponsesSection.tsx ---

================================================================================
Directory: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\profile\types
================================================================================

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\profile\types\profile.ts
--------------------------------------------------------------------------------
Content:
import type { UserProfile, UserImage, QuestionnaireResponse } from "@/types/next-auth";

// Define specific types for questionnaire updates
export interface QuestionnaireUpdateValue {
  type: 'answer' | 'visibility';
  value?: string;
  isVisible?: boolean;
}

// Interfaces for the main sections
export interface PhotosSectionProps {
  images: UserImage[];
  isUploading: boolean;
  disabled?: boolean;
  onUpload: (file: File) => Promise<void>;
  onSetMain: (imageId: string) => Promise<void>;
  onDelete: (imageId: string) => Promise<void>;
}


export interface PreferencesSectionProps {
  profile: UserProfile | null;
  isEditing: boolean;
  viewOnly?: boolean;
  setIsEditing: (value: boolean) => void;
  onChange: (data: Partial<UserProfile>) => void;
}

export interface QuestionnaireResponsesSectionProps {
  questionnaire: QuestionnaireResponse | null;
  onUpdate?: (world: string, questionId: string, value: QuestionnaireUpdateValue) => Promise<void>;
  isEditable?: boolean;
  viewMode?: "matchmaker" | "candidate";
}

// Types for the extended profile data
export interface ExtendedProfileData {
  personalityTraits?: {
    temperament?: string;
    decisionMaking?: string;
    stressManagement?: string;
    communicationStyle?: string;
  };
  spiritualProfile?: {
    prayerStyle?: string;
    secularStudiesAttitude?: string;
    modestyLevel?: string;
    childrenEducationApproach?: string;
  };
  familyBackground?: {
    parentsSpiritualLevel?: string;
    parentsOccupations?: {
      father?: string;
      mother?: string;
    };
    familyDynamics?: string;
  };
  lifestylePreferences?: {
    careerAspiration?: string;
    futureStudyPlans?: string;
    livingPreferences?: {
      proximity?: string;
    };
    relationshipExpectations?: string;
  };
  healthProfile?: {
    generalHealth?: string;
    dietaryRestrictions?: string[];
    physicalActivity?: string;
  };
  personalValues?: {
    parentalRespect?: number;
    communityInvolvement?: string;
    volunteeringPreferences?: string;
    financialManagement?: string;
  };
  futureGoals?: string[];
  [key: string]: unknown;
}

// Additional utility types
export type ViewMode = "matchmaker" | "candidate";
export type CardSize = "sm" | "md" | "lg";
--- End of Content for profile.ts ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\profile\types\questionnaire.ts
--------------------------------------------------------------------------------
Content:
// src/components/shared/profile/types/questionnaire.ts

export type QuestionnaireAnswerValue = {
  type: 'answer';
  value: string;
} | {
  type: 'visibility';
  isVisible: boolean;
} | string | number | boolean;

export interface FormattedAnswer {
  questionId: string;
  question: string;
  value: QuestionnaireAnswerValue;
  displayText: string;
  answeredAt: string;
  category?: string;
  isVisible: boolean;
}

export interface QuestionnaireResponse {
  id: string;
  userId: string;
  formattedAnswers: {
    values: FormattedAnswer[];
    personality: FormattedAnswer[];
    relationship: FormattedAnswer[];
    partner: FormattedAnswer[];
    religion: FormattedAnswer[];
  };
  valuesCompleted: boolean;
  personalityCompleted: boolean;
  relationshipCompleted: boolean;
  partnerCompleted: boolean;
  religionCompleted: boolean;
  worldsCompleted: string[];
  completed: boolean;
  startedAt: string | Date;
  completedAt?: string | Date;
  lastSaved: string | Date;
}

export interface QuestionnaireWorld {
  key: string;
  title: string;
  icon: React.ElementType;
  color: string;
  bgColor: string;
  borderColor: string;
}

export interface QuestionCardProps {
  question: string;
  answer: FormattedAnswer;
  isEditing: boolean;
  onEdit: (value: string) => void;
  onVisibilityChange: (isVisible: boolean) => void;
}

export interface WorldSectionProps {
  title: string;
  icon: React.ElementType;
  answers: FormattedAnswer[];
  isEditing: boolean;
  onEdit: (questionId: string, value: string) => void;
  onVisibilityChange: (questionId: string, isVisible: boolean) => void;
  isCompleted: boolean;
  className?: string;
}
--- End of Content for questionnaire.ts ---

