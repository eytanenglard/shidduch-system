################################################################################
# Directory Content Map For: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\profile
# Generated on: 2025-09-02 20:19:28
################################################################################

================================================================================
Directory: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\profile
================================================================================

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\profile\ProfileCard.tsx
--------------------------------------------------------------------------------
Content:
// src/components/profile/ProfileCard.tsx

'use client';

import React, {
  useState,
  useMemo,
  useCallback,
  useEffect,
  useRef,
} from 'react';
import Image from 'next/image';
import BudgetDisplay from './sections/BudgetDisplay';

import { cn, getRelativeCloudinaryPath } from '@/lib/utils';
import {
  ResizableHandle,
  ResizablePanel,
  ResizablePanelGroup,
} from '@/components/ui/resizable';

// UI Components
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import {
  Dialog,
  DialogContent,
  DialogTitle,
  DialogHeader,
  DialogFooter,
  DialogClose,
} from '@/components/ui/dialog';
import { ScrollArea, ScrollBar } from '@/components/ui/scroll-area';
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from '@/components/ui/tooltip';
import { ToggleGroup, ToggleGroupItem } from '@/components/ui/toggle-group';
import { Skeleton } from '@/components/ui/skeleton';
import { Separator } from '@/components/ui/separator';

// Icons
import {
  User,
  Heart,
  FileText,
  Image as ImageIcon,
  Info as InfoIcon,
  Eye,
  Phone,
  ChevronLeft,
  ChevronRight,
  Briefcase,
  GraduationCap,
  Users,
  BookOpen,
  School,
  Lock,
  Languages,
  Calendar,
  Star,
  MapPin,
  CheckCircle,
  Clock,
  Cake,
  Gem,
  Sparkles,
  Users2,
  Award,
  Palette,
  Smile,
  X,
  BookMarked,
  Search,
  Target,
  UserCheck,
  Link as LinkIcon,
  Handshake,
  Edit3,
  ExternalLink,
  Bot,
  Coffee,
  Camera,
  Music,
  Globe,
  Compass,
  Telescope,
  Crown,
  Zap,
  Gift,
  ArrowRight,
  Quote,
  ChevronDown,
  Moon,
  Sun,
  Baby,
  Home,
  Flame,
  MessageCircle,
  Play,
  Plus,
  Lightbulb,
  Mountain,
  Share2,
  Download,
  Printer,
  Bookmark,
  Search as SearchIcon,
  Filter,
  SortDesc,
  MessageSquare,
  Phone as PhoneIcon,
  Mail,
  Send,
  Stars,
  Sparkle,
  Sunrise,
  Sunset,
  TreePine,
  Flower,
  Rainbow,
  Waves,
  Wind,
  Shield,
  ArrowLeft,
} from 'lucide-react';

// Types and Interfaces
import type {
  UserProfile,
  UserImage as UserImageType,
  QuestionnaireResponse,
  FormattedAnswer,
  ServiceType,
  HeadCoveringType,
  KippahType,
} from '@/types/next-auth';
import { languageOptions } from '@/lib/languageOptions';
import type { Candidate } from '@/components/matchmaker/new/types/candidates';

import NewSuggestionForm from '@/components/matchmaker/suggestions/NewSuggestionForm';
import { ProfileCardDict, ProfileCardDisplayDict } from '@/types/dictionary';

// --- Maps Creation ---
const createMaritalStatusMap = (
  dict: ProfileCardDict['options']['maritalStatus']
) => ({
  single: {
    label: dict.single,
    shortLabel: 'רווק',
    icon: Heart,
    color: 'text-rose-600',
  },
  divorced: {
    label: dict.divorced,
    shortLabel: 'גרוש',
    icon: Sunrise,
    color: 'text-amber-600',
  },
  widowed: {
    label: dict.widowed,
    shortLabel: 'אלמן',
    icon: Stars,
    color: 'text-purple-600',
  },
  annulled: {
    label: dict.annulled,
    shortLabel: 'מוכן לאהבה',
    icon: Rainbow,
    color: 'text-pink-600',
  },
  any: {
    label: 'פתוח/ה לכל האפשרויות',
    shortLabel: 'פתוח',
    icon: Sparkles,
    color: 'text-indigo-600',
  },
});

const createReligiousLevelMap = (
  dict: ProfileCardDict['options']['religiousLevel']
) => ({
  charedi: {
    label: dict.charedi,
    shortLabel: 'חרדי',
    icon: BookMarked,
    color: 'text-indigo-700',
  },
  charedi_modern: {
    label: dict.charedi_modern,
    shortLabel: 'חרדי מודרני',
    icon: BookOpen,
    color: 'text-indigo-600',
  },
  dati_leumi_torani: {
    label: dict.dati_leumi_torani,
    shortLabel: 'דתי תורני',
    icon: Star,
    color: 'text-blue-700',
  },
  dati_leumi_liberal: {
    label: dict.dati_leumi_liberal,
    shortLabel: 'דתי ליברלי',
    icon: Flower,
    color: 'text-blue-600',
  },
  dati_leumi_standard: {
    label: dict.dati_leumi_standard,
    shortLabel: 'דתי לאומי',
    icon: Crown,
    color: 'text-blue-600',
  },
  masorti_strong: {
    label: dict.masorti_strong,
    shortLabel: 'מסורתי חזק',
    icon: TreePine,
    color: 'text-emerald-700',
  },
  masorti_light: {
    label: dict.masorti_light,
    shortLabel: 'מסורתי קל',
    icon: Wind,
    color: 'text-emerald-600',
  },
  secular_traditional_connection: {
    label: dict.secular_traditional_connection,
    shortLabel: 'חילוני עם זיקה',
    icon: Waves,
    color: 'text-cyan-600',
  },
  secular: {
    label: dict.secular,
    shortLabel: 'חילוני',
    icon: Sunrise,
    color: 'text-orange-600',
  },
  spiritual_not_religious: {
    label: dict.spiritual_not_religious,
    shortLabel: 'רוחני',
    icon: Sparkle,
    color: 'text-purple-600',
  },
  other: {
    label: dict.other,
    shortLabel: 'ייחודי',
    icon: Rainbow,
    color: 'text-pink-600',
  },
  no_preference: {
    label: dict.other, // Assuming 'other' can serve as a fallback for 'no preference' text
    shortLabel: 'פתוח',
    icon: Globe,
    color: 'text-gray-600',
  },
});

const createReligiousJourneyMap = (
  dict: ProfileCardDict['options']['religiousJourney']
) => ({
  BORN_INTO_CURRENT_LIFESTYLE: {
    label: dict.BORN_INTO_CURRENT_LIFESTYLE,
    shortLabel: 'גדלתי דתי',
    icon: Home,
    color: 'text-blue-600',
  },
  BORN_SECULAR: {
    label: dict.BORN_SECULAR,
    shortLabel: 'גדלתי חילוני',
    icon: Sun,
    color: 'text-orange-600',
  },
  BAAL_TESHUVA: {
    label: dict.BAAL_TESHUVA,
    shortLabel: 'חוזר בתשובה',
    icon: Sparkles,
    color: 'text-purple-600',
  },
  DATLASH: {
    label: dict.DATLASH,
    shortLabel: 'דתל"ש',
    icon: ArrowLeft,
    color: 'text-gray-600',
  },
  CONVERT: {
    label: dict.CONVERT,
    shortLabel: 'גיורת',
    icon: Star,
    color: 'text-amber-600',
  },
  IN_PROCESS: {
    label: dict.IN_PROCESS,
    shortLabel: 'בתהליך',
    icon: Compass,
    color: 'text-teal-600',
  },
  OTHER: {
    label: dict.OTHER,
    shortLabel: 'אחר',
    icon: InfoIcon,
    color: 'text-pink-600',
  },
  no_preference: {
    label: 'ללא העדפה למסע הדתי',
    shortLabel: 'ללא העדפה',
    icon: Globe,
    color: 'text-gray-500',
  },
});

const createEducationLevelMap = (
  dict: ProfileCardDict['options']['educationLevel']
) => ({
  high_school: {
    label: dict.high_school,
    shortLabel: 'תיכון',
    icon: School,
    color: 'text-blue-600',
  },
  vocational: {
    label: dict.vocational,
    shortLabel: 'מקצועי',
    icon: Award,
    color: 'text-green-600',
  },
  academic_student: {
    label: dict.academic_student,
    shortLabel: 'סטודנט',
    icon: BookOpen,
    color: 'text-orange-600',
  },
  academic_ba: {
    label: dict.academic_ba,
    shortLabel: 'ב.א',
    icon: GraduationCap,
    color: 'text-purple-600',
  },
  academic_ma: {
    label: dict.academic_ma,
    shortLabel: 'מ.א',
    icon: Star,
    color: 'text-indigo-600',
  },
  academic_phd: {
    label: dict.academic_phd,
    shortLabel: 'דוקטור',
    icon: Crown,
    color: 'text-rose-600',
  },
  yeshiva_seminary: {
    label: dict.yeshiva_seminary,
    shortLabel: 'תורני',
    icon: BookMarked,
    color: 'text-amber-600',
  },
  other: {
    label: dict.other,
    shortLabel: 'ייחודי',
    icon: Sparkles,
    color: 'text-pink-600',
  },
  'ללא העדפה': {
    label: 'הכל פתוח',
    shortLabel: 'פתוח',
    icon: Globe,
    color: 'text-gray-600',
  },
});

const createServiceTypeMap = (
  dict: ProfileCardDict['options']['serviceType']
) => ({
  MILITARY_COMBATANT: {
    label: dict.MILITARY_COMBATANT,
    shortLabel: 'לוחם',
    icon: Award,
    color: 'text-red-600',
  },
  MILITARY_SUPPORT: {
    label: dict.MILITARY_SUPPORT,
    shortLabel: 'תומך',
    icon: Users,
    color: 'text-orange-600',
  },
  MILITARY_OFFICER: {
    label: dict.MILITARY_OFFICER,
    shortLabel: 'קצין',
    icon: Crown,
    color: 'text-purple-600',
  },
  MILITARY_INTELLIGENCE_CYBER_TECH: {
    label: dict.MILITARY_INTELLIGENCE_CYBER_TECH,
    shortLabel: 'טכנולוגיה',
    icon: Zap,
    color: 'text-blue-600',
  },
  NATIONAL_SERVICE_ONE_YEAR: {
    label: dict.NATIONAL_SERVICE_ONE_YEAR,
    shortLabel: 'שירות לאומי',
    icon: Heart,
    color: 'text-pink-600',
  },
  NATIONAL_SERVICE_TWO_YEARS: {
    label: dict.NATIONAL_SERVICE_TWO_YEARS,
    shortLabel: 'שירות מורחב',
    icon: Stars,
    color: 'text-rose-600',
  },
  HESDER_YESHIVA: {
    label: dict.HESDER_YESHIVA,
    shortLabel: 'הסדר',
    icon: BookMarked,
    color: 'text-indigo-600',
  },
  YESHIVA_ONLY_POST_HS: {
    label: dict.YESHIVA_ONLY_POST_HS,
    shortLabel: 'תורני',
    icon: BookOpen,
    color: 'text-amber-600',
  },
  PRE_MILITARY_ACADEMY_AND_SERVICE: {
    label: dict.PRE_MILITARY_ACADEMY_AND_SERVICE,
    shortLabel: 'מכינה',
    icon: GraduationCap,
    color: 'text-green-600',
  },
  EXEMPTED: {
    label: dict.EXEMPTED,
    shortLabel: 'פטור',
    icon: Shield,
    color: 'text-gray-600',
  },
  CIVILIAN_SERVICE: {
    label: dict.CIVILIAN_SERVICE,
    shortLabel: 'אזרחי',
    icon: Users2,
    color: 'text-teal-600',
  },
  OTHER: {
    label: dict.OTHER,
    shortLabel: 'ייחודי',
    icon: Sparkles,
    color: 'text-purple-600',
  },
});

const createHeadCoveringMap = (
  dict: ProfileCardDict['options']['headCovering']
) => ({
  FULL_COVERAGE: {
    label: dict.FULL_COVERAGE,
    shortLabel: 'מלא',
    icon: Crown,
    color: 'text-purple-600',
  },
  PARTIAL_COVERAGE: {
    label: dict.PARTIAL_COVERAGE,
    shortLabel: 'חלקי',
    icon: Flower,
    color: 'text-pink-600',
  },
  HAT_BERET: {
    label: dict.HAT_BERET,
    shortLabel: 'כובע',
    icon: Sun,
    color: 'text-orange-600',
  },
  SCARF_ONLY_SOMETIMES: {
    label: dict.SCARF_ONLY_SOMETIMES,
    shortLabel: 'לאירועים',
    icon: Sparkle,
    color: 'text-rose-600',
  },
  NONE: {
    label: dict.NONE,
    shortLabel: 'ללא',
    icon: Wind,
    color: 'text-blue-600',
  },
  any: {
    label: 'גמיש/ה',
    shortLabel: 'גמיש',
    icon: Rainbow,
    color: 'text-indigo-600',
  },
});

const createKippahTypeMap = (
  dict: ProfileCardDict['options']['kippahType']
) => ({
  BLACK_VELVET: {
    label: dict.BLACK_VELVET,
    shortLabel: 'קטיפה',
    icon: Crown,
    color: 'text-indigo-700',
  },
  KNITTED_SMALL: {
    label: dict.KNITTED_SMALL,
    shortLabel: 'סרוגה קטנה',
    icon: Star,
    color: 'text-blue-600',
  },
  KNITTED_LARGE: {
    label: dict.KNITTED_LARGE,
    shortLabel: 'סרוגה גדולה',
    icon: Stars,
    color: 'text-blue-700',
  },
  CLOTH: {
    label: dict.CLOTH,
    shortLabel: 'בד',
    icon: Flower,
    color: 'text-green-600',
  },
  BRESLEV: {
    label: dict.BRESLEV,
    shortLabel: 'ברסלב',
    icon: Sparkle,
    color: 'text-purple-600',
  },
  NONE_AT_WORK_OR_CASUAL: {
    label: dict.NONE_AT_WORK_OR_CASUAL,
    shortLabel: 'לא בעבודה',
    icon: Briefcase,
    color: 'text-gray-600',
  },
  NONE_USUALLY: {
    label: dict.NONE_USUALLY,
    shortLabel: 'לרוב לא',
    icon: Wind,
    color: 'text-gray-500',
  },
  OTHER: {
    label: dict.OTHER,
    shortLabel: 'ייחודי',
    icon: Rainbow,
    color: 'text-pink-600',
  },
  any: {
    label: 'גמיש',
    shortLabel: 'גמיש',
    icon: Globe,
    color: 'text-teal-600',
  },
});

const createCharacterTraitMap = (
  dict: ProfileCardDict['options']['traits']
) => ({
  empathetic: {
    label: dict.empathetic,
    shortLabel: 'אמפתי',
    icon: Heart,
    color: 'text-rose-600',
  },
  driven: {
    label: dict.driven,
    shortLabel: 'שאפתן',
    icon: Zap,
    color: 'text-orange-600',
  },
  optimistic: {
    label: dict.optimistic,
    shortLabel: 'אופטימי',
    icon: Sunrise,
    color: 'text-yellow-600',
  },
  family_oriented: {
    label: dict.family_oriented,
    shortLabel: 'משפחתי',
    icon: Users2,
    color: 'text-pink-600',
  },
  intellectual: {
    label: dict.intellectual,
    shortLabel: 'אינטלקטואל',
    icon: BookOpen,
    color: 'text-indigo-600',
  },
  organized: {
    label: dict.organized,
    shortLabel: 'מאורגן',
    icon: CheckCircle,
    color: 'text-green-600',
  },
  calm: {
    label: dict.calm,
    shortLabel: 'רגוע',
    icon: Waves,
    color: 'text-blue-600',
  },
  humorous: {
    label: dict.humorous,
    shortLabel: 'מצחיק',
    icon: Smile,
    color: 'text-purple-600',
  },
  sociable: {
    label: dict.sociable,
    shortLabel: 'חברותי',
    icon: Users,
    color: 'text-cyan-600',
  },
  sensitive: {
    label: dict.sensitive,
    shortLabel: 'רגיש',
    icon: Flower,
    color: 'text-pink-600',
  },
  independent: {
    label: dict.independent,
    shortLabel: 'עצמאי',
    icon: Crown,
    color: 'text-amber-600',
  },
  creative: {
    label: dict.creative,
    shortLabel: 'יצירתי',
    icon: Palette,
    color: 'text-rose-600',
  },
  honest: {
    label: dict.honest,
    shortLabel: 'כן וישר',
    icon: Star,
    color: 'text-blue-600',
  },
  responsible: {
    label: dict.responsible,
    shortLabel: 'אחראי',
    icon: Award,
    color: 'text-green-600',
  },
  easy_going: {
    label: dict.easy_going,
    shortLabel: 'זורם',
    icon: Wind,
    color: 'text-teal-600',
  },
  no_strong_preference: {
    label: 'פתוח/ה לגילוי',
    shortLabel: 'פתוח',
    icon: Compass,
    color: 'text-gray-600',
  },
});

const createHobbiesMap = (dict: ProfileCardDict['options']['hobbies']) => ({
  travel: {
    label: dict.travel,
    shortLabel: 'טיולים',
    icon: Compass,
    color: 'text-green-600',
  },
  sports: {
    label: dict.sports,
    shortLabel: 'ספורט',
    icon: Zap,
    color: 'text-orange-600',
  },
  reading: {
    label: dict.reading,
    shortLabel: 'קריאה',
    icon: BookOpen,
    color: 'text-indigo-600',
  },
  cooking_baking: {
    label: dict.cooking_baking,
    shortLabel: 'בישול',
    icon: Coffee,
    color: 'text-amber-600',
  },
  music_playing_instrument: {
    label: dict.music_playing_instrument,
    shortLabel: 'מוזיקה',
    icon: Music,
    color: 'text-purple-600',
  },
  art_crafts: {
    label: dict.art_crafts,
    shortLabel: 'אומנות',
    icon: Palette,
    color: 'text-pink-600',
  },
  volunteering: {
    label: dict.volunteering,
    shortLabel: 'התנדבות',
    icon: Heart,
    color: 'text-rose-600',
  },
  learning_courses: {
    label: dict.learning_courses,
    shortLabel: 'למידה',
    icon: GraduationCap,
    color: 'text-blue-600',
  },
  board_games_puzzles: {
    label: dict.board_games_puzzles,
    shortLabel: 'משחקים',
    icon: Play,
    color: 'text-cyan-600',
  },
  movies_theater: {
    label: dict.movies_theater,
    shortLabel: 'סרטים',
    icon: Camera,
    color: 'text-red-600',
  },
  dancing: {
    label: dict.dancing,
    shortLabel: 'ריקוד',
    icon: Sparkle,
    color: 'text-pink-600',
  },
  writing: {
    label: dict.writing,
    shortLabel: 'כתיבה',
    icon: Edit3,
    color: 'text-gray-600',
  },
  nature_hiking: {
    label: dict.nature_hiking,
    shortLabel: 'טבע',
    icon: TreePine,
    color: 'text-green-600',
  },
  photography: {
    label: dict.photography,
    shortLabel: 'צילום',
    icon: Camera,
    color: 'text-blue-600',
  },
  no_strong_preference: {
    label: 'פתוח/ה לגילוי יחד',
    shortLabel: 'פתוח',
    icon: Rainbow,
    color: 'text-gray-600',
  },
});

const createContactPreferenceMap = () => ({
  direct: {
    label: 'ישירות',
    shortLabel: 'ישירות',
    icon: PhoneIcon,
    color: 'text-green-600',
  },
  matchmaker: {
    label: 'דרך השדכן/ית',
    shortLabel: 'דרך שדכן',
    icon: Users,
    color: 'text-purple-600',
  },
  both: {
    label: 'גמיש/ה',
    shortLabel: 'גמיש',
    icon: MessageSquare,
    color: 'text-blue-600',
  },
});

// Enhanced Interfaces with Responsive Support
interface CreateSuggestionData {
  priority: 'LOW' | 'MEDIUM' | 'HIGH' | 'URGENT';
  firstPartyId: string;
  secondPartyId: string;
  status:
    | 'DRAFT'
    | 'PENDING_FIRST_PARTY'
    | 'FIRST_PARTY_APPROVED'
    | 'FIRST_PARTY_DECLINED'
    | string;
  firstPartyNotes?: string;
  secondPartyNotes?: string;
}

interface ExcitementFactor {
  icon: React.ElementType;
  text: string;
  gradient: string;
  shortText?: string;
}

// Enhanced Color Palette & Theme with Responsive Support
const COLOR_PALETTES = {
  professional: {
    name: 'כחול-אפור',
    colors: {
      primary: {
        main: 'from-gray-700 via-gray-800 to-gray-900',
        mainSm: 'from-gray-600 via-gray-700 to-gray-800', // גרסה קלה יותר למובייל
        accent: 'from-blue-600 via-blue-700 to-blue-800',
        accentSm: 'from-blue-500 via-blue-600 to-blue-700',
        light: 'from-gray-100 via-gray-200 to-gray-300',
        lightSm: 'from-gray-50 via-gray-100 to-gray-200',
        romantic: 'from-blue-600 via-blue-700 to-blue-800',
        romanticSm: 'from-blue-500 via-blue-600 to-blue-700',
        rose: 'from-blue-500 via-blue-600 to-blue-700',
        roseSm: 'from-blue-400 via-blue-500 to-blue-600',
        gold: 'from-gray-400 via-gray-500 to-gray-600',
        goldSm: 'from-gray-300 via-gray-400 to-gray-500',
        elegant: 'from-gray-700 via-gray-800 to-gray-900',
        elegantSm: 'from-gray-600 via-gray-700 to-gray-800',
      },
      secondary: {
        sage: 'from-gray-300 via-gray-400 to-gray-500',
        sageSm: 'from-gray-200 via-gray-300 to-gray-400',
        sky: 'from-blue-100 via-blue-200 to-blue-300',
        skySm: 'from-blue-50 via-blue-100 to-blue-200',
        lavender: 'from-gray-200 via-gray-300 to-gray-400',
        lavenderSm: 'from-gray-100 via-gray-200 to-gray-300',
        peach: 'from-orange-100 via-amber-100 to-yellow-200',
        peachSm: 'from-orange-50 via-amber-50 to-yellow-100',
      },
      neutral: {
        warm: 'from-gray-50 via-white to-gray-100',
        warmSm: 'from-gray-25 via-white to-gray-50',
        cool: 'from-slate-50 via-gray-50 to-zinc-50',
        coolSm: 'from-slate-25 via-gray-25 to-zinc-25',
        elegant: 'from-white via-gray-50 to-neutral-100',
        elegantSm: 'from-white via-gray-25 to-neutral-50',
      },
    },
    shadows: {
      elegant: 'shadow-lg sm:shadow-xl shadow-gray-200/25',
      elegantSm: 'shadow-md shadow-gray-200/20',
      warm: 'shadow-md sm:shadow-lg shadow-gray-200/30',
      warmSm: 'shadow-sm shadow-gray-200/25',
      soft: 'shadow-sm sm:shadow-md shadow-gray-100/40',
      softSm: 'shadow-xs shadow-gray-100/30',
    },
  },
  feminine: {
    name: 'ורוד-אדום',
    colors: {
      primary: {
        main: 'from-rose-400 via-pink-400 to-rose-500',
        mainSm: 'from-rose-300 via-pink-300 to-rose-400',
        accent: 'from-pink-500 via-rose-500 to-red-400',
        accentSm: 'from-pink-400 via-rose-400 to-red-300',
        light: 'from-pink-100 via-rose-100 to-red-100',
        lightSm: 'from-pink-50 via-rose-50 to-red-50',
        romantic: 'from-rose-400 via-pink-400 to-rose-500',
        romanticSm: 'from-rose-300 via-pink-300 to-rose-400',
        rose: 'from-rose-400 via-pink-400 to-rose-500',
        roseSm: 'from-rose-300 via-pink-300 to-rose-400',
        gold: 'from-amber-200 via-yellow-200 to-orange-300',
        goldSm: 'from-amber-100 via-yellow-100 to-orange-200',
        elegant: 'from-pink-500 via-rose-500 to-red-400',
        elegantSm: 'from-pink-400 via-rose-400 to-red-300',
      },
      secondary: {
        sage: 'from-pink-200 via-rose-200 to-red-200',
        sageSm: 'from-pink-100 via-rose-100 to-red-100',
        sky: 'from-purple-200 via-pink-200 to-rose-300',
        skySm: 'from-purple-100 via-pink-100 to-rose-200',
        lavender: 'from-purple-200 via-violet-200 to-purple-300',
        lavenderSm: 'from-purple-100 via-violet-100 to-purple-200',
        peach: 'from-pink-200 via-rose-200 to-orange-300',
        peachSm: 'from-pink-100 via-rose-100 to-orange-200',
      },
      neutral: {
        warm: 'from-rose-50 via-pink-50 to-orange-50',
        warmSm: 'from-rose-25 via-pink-25 to-orange-25',
        cool: 'from-purple-50 via-pink-50 to-rose-50',
        coolSm: 'from-purple-25 via-pink-25 to-rose-25',
        elegant: 'from-pink-50 via-rose-50 to-neutral-100',
        elegantSm: 'from-pink-25 via-rose-25 to-neutral-50',
      },
    },
    shadows: {
      elegant: 'shadow-lg sm:shadow-xl shadow-pink-200/25',
      elegantSm: 'shadow-md shadow-pink-200/20',
      warm: 'shadow-md sm:shadow-lg shadow-rose-200/30',
      warmSm: 'shadow-sm shadow-rose-200/25',
      soft: 'shadow-sm sm:shadow-md shadow-pink-100/40',
      softSm: 'shadow-xs shadow-pink-100/30',
    },
  },
  masculine: {
    name: 'כחול-ירוק',
    colors: {
      primary: {
        main: 'from-blue-600 via-indigo-600 to-blue-700',
        mainSm: 'from-blue-500 via-indigo-500 to-blue-600',
        accent: 'from-cyan-500 via-blue-500 to-indigo-600',
        accentSm: 'from-cyan-400 via-blue-400 to-indigo-500',
        light: 'from-blue-100 via-indigo-100 to-cyan-100',
        lightSm: 'from-blue-50 via-indigo-50 to-cyan-50',
        romantic: 'from-cyan-500 via-blue-500 to-indigo-600',
        romanticSm: 'from-cyan-400 via-blue-400 to-indigo-500',
        rose: 'from-cyan-500 via-blue-500 to-indigo-600',
        roseSm: 'from-cyan-400 via-blue-400 to-indigo-500',
        gold: 'from-blue-200 via-cyan-200 to-teal-300',
        goldSm: 'from-blue-100 via-cyan-100 to-teal-200',
        elegant: 'from-blue-600 via-indigo-600 to-blue-700',
        elegantSm: 'from-blue-500 via-indigo-500 to-blue-600',
      },
      secondary: {
        sage: 'from-emerald-300 via-teal-300 to-cyan-400',
        sageSm: 'from-emerald-200 via-teal-200 to-cyan-300',
        sky: 'from-blue-200 via-sky-200 to-indigo-300',
        skySm: 'from-blue-100 via-sky-100 to-indigo-200',
        lavender: 'from-indigo-200 via-blue-200 to-cyan-300',
        lavenderSm: 'from-indigo-100 via-blue-100 to-cyan-200',
        peach: 'from-blue-200 via-cyan-200 to-teal-300',
        peachSm: 'from-blue-100 via-cyan-100 to-teal-200',
      },
      neutral: {
        warm: 'from-blue-50 via-indigo-50 to-cyan-50',
        warmSm: 'from-blue-25 via-indigo-25 to-cyan-25',
        cool: 'from-slate-50 via-blue-50 to-indigo-50',
        coolSm: 'from-slate-25 via-blue-25 to-indigo-25',
        elegant: 'from-gray-50 via-blue-50 to-neutral-100',
        elegantSm: 'from-gray-25 via-blue-25 to-neutral-50',
      },
    },
    shadows: {
      elegant: 'shadow-lg sm:shadow-xl shadow-blue-200/25',
      elegantSm: 'shadow-md shadow-blue-200/20',
      warm: 'shadow-md sm:shadow-lg shadow-indigo-200/30',
      warmSm: 'shadow-sm shadow-indigo-200/25',
      soft: 'shadow-sm sm:shadow-md shadow-blue-100/40',
      softSm: 'shadow-xs shadow-blue-100/30',
    },
  },
  luxury: {
    name: 'זהב-סגול',
    colors: {
      primary: {
        main: 'from-amber-500 via-yellow-500 to-amber-600',
        mainSm: 'from-amber-400 via-yellow-400 to-amber-500',
        accent: 'from-purple-600 via-indigo-600 to-purple-700',
        accentSm: 'from-purple-500 via-indigo-500 to-purple-600',
        light: 'from-amber-100 via-yellow-100 to-gold-100',
        lightSm: 'from-amber-50 via-yellow-50 to-gold-50',
        romantic: 'from-purple-600 via-indigo-600 to-purple-700',
        romanticSm: 'from-purple-500 via-indigo-500 to-purple-600',
        rose: 'from-purple-600 via-indigo-600 to-purple-700',
        roseSm: 'from-purple-500 via-indigo-500 to-purple-600',
        gold: 'from-amber-500 via-yellow-500 to-amber-600',
        goldSm: 'from-amber-400 via-yellow-400 to-amber-500',
        elegant: 'from-amber-500 via-yellow-500 to-amber-600',
        elegantSm: 'from-amber-400 via-yellow-400 to-amber-500',
      },
      secondary: {
        sage: 'from-emerald-400 via-teal-400 to-cyan-500',
        sageSm: 'from-emerald-300 via-teal-300 to-cyan-400',
        sky: 'from-indigo-300 via-purple-300 to-violet-400',
        skySm: 'from-indigo-200 via-purple-200 to-violet-300',
        lavender: 'from-purple-300 via-violet-300 to-indigo-400',
        lavenderSm: 'from-purple-200 via-violet-200 to-indigo-300',
        peach: 'from-amber-300 via-yellow-300 to-orange-400',
        peachSm: 'from-amber-200 via-yellow-200 to-orange-300',
      },
      neutral: {
        warm: 'from-amber-50 via-yellow-50 to-orange-50',
        warmSm: 'from-amber-25 via-yellow-25 to-orange-25',
        cool: 'from-purple-50 via-indigo-50 to-violet-50',
        coolSm: 'from-purple-25 via-indigo-25 to-violet-25',
        elegant: 'from-gray-50 via-amber-50 to-neutral-100',
        elegantSm: 'from-gray-25 via-amber-25 to-neutral-50',
      },
    },
    shadows: {
      elegant: 'shadow-lg sm:shadow-xl shadow-amber-200/25',
      elegantSm: 'shadow-md shadow-amber-200/20',
      warm: 'shadow-md sm:shadow-lg shadow-yellow-200/30',
      warmSm: 'shadow-sm shadow-yellow-200/25',
      soft: 'shadow-sm sm:shadow-md shadow-amber-100/40',
      softSm: 'shadow-xs shadow-amber-100/30',
    },
  },
} as const;

type ColorPaletteName = keyof typeof COLOR_PALETTES;

type ThemeType = {
  colors: {
    primary: {
      main: string;
      mainSm: string;
      accent: string;
      accentSm: string;
      light: string;
      lightSm: string;
      romantic: string;
      romanticSm: string;
      rose: string;
      roseSm: string;
      gold: string;
      goldSm: string;
      elegant: string;
      elegantSm: string;
    };
    secondary: {
      sage: string;
      sageSm: string;
      sky: string;
      skySm: string;
      lavender: string;
      lavenderSm: string;
      peach: string;
      peachSm: string;
    };
    neutral: {
      warm: string;
      warmSm: string;
      cool: string;
      coolSm: string;
      elegant: string;
      elegantSm: string;
    };
  };
  shadows: {
    elegant: string;
    elegantSm: string;
    warm: string;
    warmSm: string;
    soft: string;
    softSm: string;
  };
};

// --- Enhanced Helper Functions with Responsive Support ---

const formatEnumValue = (
  value: string | null | undefined,
  map: {
    [key: string]: {
      label: string;
      shortLabel?: string;
      icon: React.ElementType;
      color: string;
      mobileClasses?: string;
    };
  },
  placeholder: string,
  useMobile: boolean = false
): {
  label: string;
  shortLabel?: string;
  icon: React.ElementType;
  color: string;
  mobileClasses?: string;
} => {
  if (!value || !map[value]) {
    return {
      label: placeholder,
      shortLabel:
        useMobile && placeholder.length > 10
          ? placeholder.substring(0, 10) + '...'
          : placeholder,
      icon: Telescope,
      color: 'text-gray-500',
      mobileClasses: 'text-xs sm:text-sm',
    };
  }

  const result = map[value];
  return {
    ...result,
    shortLabel:
      result.shortLabel ||
      (useMobile && result.label.length > 10
        ? result.label.substring(0, 10) + '...'
        : result.label),
  };
};

const getInitials = (
  firstName?: string,
  lastName?: string,
  maxLength: number = 2
): string => {
  let initials = '';
  if (firstName && firstName.length > 0) initials += firstName[0];
  if (lastName && lastName.length > 0) initials += lastName[0];

  if (initials.length === 0 && firstName && firstName.length > 0) {
    initials =
      firstName.length > 1
        ? firstName.substring(0, Math.min(maxLength, firstName.length))
        : firstName[0];
  }

  return initials.toUpperCase() || '♥';
};

const calculateAge = (birthDate: Date | string | null | undefined): number => {
  if (!birthDate) return 0;
  try {
    const today = new Date();
    const birth = new Date(birthDate);
    if (isNaN(birth.getTime())) return 0;
    let age = today.getFullYear() - birth.getFullYear();
    const monthDiff = today.getMonth() - birth.getMonth();
    if (
      monthDiff < 0 ||
      (monthDiff === 0 && today.getDate() < birth.getDate())
    ) {
      age--;
    }
    return age > 0 ? age : 0;
  } catch (e) {
    return 0;
  }
};

const formatAvailabilityStatus = (
  status: UserProfile['availabilityStatus'] | undefined,
  THEME: ThemeType,
  dict: ProfileCardDisplayDict['availability'] & { mysterious: string },
  badgeDict: ProfileCardDisplayDict['header']['availabilityBadge']
) => {
  const statusMap = {
    AVAILABLE: {
      text: dict.AVAILABLE,
      shortText: badgeDict.available_short,
      gradient: THEME.colors.primary.main,
      gradientSm: THEME.colors.primary.mainSm,
      icon: Heart,
      pulse: false,
      bgColor: 'bg-gradient-to-r from-emerald-500 to-green-500',
      bgColorSm: 'bg-gradient-to-r from-emerald-400 to-green-400',
      mobileClasses: 'text-xs sm:text-sm px-2 py-1 sm:px-3 sm:py-2',
    },
    UNAVAILABLE: {
      text: dict.UNAVAILABLE,
      shortText: badgeDict.unavailable_short,
      gradient: 'from-gray-400 to-gray-500',
      gradientSm: 'from-gray-300 to-gray-400',
      icon: Clock,
      pulse: false,
      bgColor: 'bg-gradient-to-r from-gray-400 to-gray-500',
      bgColorSm: 'bg-gradient-to-r from-gray-300 to-gray-400',
      mobileClasses: 'text-xs sm:text-sm px-2 py-1 sm:px-3 sm:py-2',
    },
    DATING: {
      text: dict.DATING,
      shortText: badgeDict.dating_short,
      gradient: THEME.colors.primary.accent,
      gradientSm: THEME.colors.primary.accentSm,
      icon: Coffee,
      pulse: false,
      bgColor: 'bg-gradient-to-r from-amber-500 to-orange-500',
      bgColorSm: 'bg-gradient-to-r from-amber-400 to-orange-400',
      mobileClasses: 'text-xs sm:text-sm px-2 py-1 sm:px-3 sm:py-2',
    },
    PAUSED: {
      text: dict.PAUSED,
      shortText: badgeDict.paused_short,
      gradient: THEME.colors.secondary.sky,
      gradientSm: THEME.colors.secondary.skySm,
      icon: Moon,
      pulse: false,
      bgColor: 'bg-gradient-to-r from-blue-500 to-cyan-500',
      bgColorSm: 'bg-gradient-to-r from-blue-400 to-cyan-400',
      mobileClasses: 'text-xs sm:text-sm px-2 py-1 sm:px-3 sm:py-2',
    },
    ENGAGED: {
      text: dict.ENGAGED,
      shortText: badgeDict.engaged_short,
      gradient: THEME.colors.primary.light,
      gradientSm: THEME.colors.primary.lightSm,
      icon: Star,
      pulse: false,
      bgColor: 'bg-gradient-to-r from-pink-500 to-rose-500',
      bgColorSm: 'bg-gradient-to-r from-pink-400 to-rose-400',
      mobileClasses: 'text-xs sm:text-sm px-2 py-1 sm:px-3 sm:py-2',
    },
    MARRIED: {
      text: dict.MARRIED,
      shortText: badgeDict.married_short,
      gradient: THEME.colors.primary.main,
      gradientSm: THEME.colors.primary.mainSm,
      icon: Heart,
      pulse: false,
      bgColor: 'bg-gradient-to-r from-rose-500 to-pink-500',
      bgColorSm: 'bg-gradient-to-r from-rose-400 to-pink-400',
      mobileClasses: 'text-xs sm:text-sm px-2 py-1 sm:px-3 sm:py-2',
    },
  };

  return (
    statusMap[status as keyof typeof statusMap] || {
      text: dict.mysterious,
      shortText: badgeDict.mysterious_short,
      gradient: THEME.colors.secondary.lavender,
      gradientSm: THEME.colors.secondary.lavenderSm,
      icon: Sparkles,
      pulse: true,
      bgColor: 'bg-gradient-to-r from-purple-500 to-indigo-500',
      bgColorSm: 'bg-gradient-to-r from-purple-400 to-indigo-400',
      mobileClasses: 'text-xs sm:text-sm px-2 py-1 sm:px-3 sm:py-2',
    }
  );
};

const formatBooleanPreference = (
  value: boolean | null | undefined,
  dict: ProfileCardDisplayDict['booleanPrefs'] & { willDiscover: string },
  useYesShomer: boolean = false,
  useMobile: boolean = false
): {
  label: string;
  shortLabel?: string;
  icon: React.ElementType;
  color: string;
  mobileClasses?: string;
} => {
  const yesLabel = useYesShomer ? dict.shomerYes : dict.yes;
  const noLabel = dict.no;
  const notSpecifiedLabel = dict.willDiscover;

  const baseResponse = {
    mobileClasses: 'text-xs sm:text-sm',
  };

  if (value === true) {
    return {
      label: yesLabel,
      shortLabel:
        useMobile && yesLabel.length > 8
          ? yesLabel.substring(0, 8) + '...'
          : yesLabel,
      icon: CheckCircle,
      color: 'text-green-600',
      ...baseResponse,
    };
  }

  if (value === false) {
    return {
      label: noLabel,
      shortLabel:
        useMobile && noLabel.length > 8
          ? noLabel.substring(0, 8) + '...'
          : noLabel,
      icon: X,
      color: 'text-red-500',
      ...baseResponse,
    };
  }

  return {
    label: notSpecifiedLabel,
    shortLabel:
      useMobile && notSpecifiedLabel.length > 8
        ? notSpecifiedLabel.substring(0, 8) + '...'
        : notSpecifiedLabel,
    icon: Telescope,
    color: 'text-gray-500',
    ...baseResponse,
  };
};

const formatStringBooleanPreference = (
  value: string | null | undefined,
  dict: ProfileCardDisplayDict['stringBooleanPrefs'] & { willDiscover: string },
  useMobile: boolean = false
): {
  label: string;
  shortLabel?: string;
  icon: React.ElementType;
  color: string;
  mobileClasses?: string;
} => {
  const options: {
    [key: string]: {
      label: string;
      shortLabel?: string;
      icon: React.ElementType;
      color: string;
    };
  } = {
    yes: {
      label: dict.yes,
      shortLabel: dict.yes,
      icon: CheckCircle,
      color: 'text-green-600',
    },
    no: { label: dict.no, shortLabel: dict.no, icon: X, color: 'text-red-500' },
    flexible: {
      label: dict.flexible,
      shortLabel: dict.flexible,
      icon: Rainbow,
      color: 'text-indigo-600',
    },
  };

  const notSpecifiedLabel = {
    label: dict.willDiscover,
    shortLabel: 'נגלה',
    icon: Telescope,
    color: 'text-gray-500',
  };

  const baseResponse = {
    mobileClasses: 'text-xs sm:text-sm',
  };

  if (value && options[value.toLowerCase()]) {
    const result = options[value.toLowerCase()];
    return {
      ...result,
      shortLabel:
        result.shortLabel ||
        (useMobile && result.label.length > 8
          ? result.label.substring(0, 8) + '...'
          : result.label),
      ...baseResponse,
    };
  }

  return {
    ...notSpecifiedLabel,
    shortLabel:
      notSpecifiedLabel.shortLabel ||
      (useMobile && notSpecifiedLabel.label.length > 8
        ? notSpecifiedLabel.label.substring(0, 8) + '...'
        : notSpecifiedLabel.label),
    ...baseResponse,
  };
};

// --- Enhanced Helper Components with Full Responsive Support ---

// 1. DetailItem
const DetailItem: React.FC<{
  icon: React.ElementType;
  label: string;
  value: React.ReactNode;
  className?: string;
  iconColorClass?: string;
  valueClassName?: string;
  tooltip?: string;
  variant?: 'default' | 'highlight' | 'elegant' | 'romantic';
  size?: 'sm' | 'md' | 'lg';
  textAlign?: 'center' | 'right' | 'left' | 'start' | 'end';
  responsive?: boolean;
  useMobileLayout?: boolean;
  placeholder: string;
}> = ({
  icon: Icon,
  label,
  value,
  className,
  iconColorClass = 'text-rose-500',
  valueClassName,
  tooltip,
  variant = 'default',
  size = 'md',
  textAlign = 'center',
  responsive = true,
  useMobileLayout = false,
  placeholder,
}) => {
  const sizes = {
    sm: {
      container: 'p-2 gap-2 sm:p-3 sm:gap-3',
      icon: 'w-6 h-6 sm:w-8 sm:h-8',
      iconPadding: 'p-1 sm:p-1.5',
      text: 'text-xs sm:text-sm',
      label: 'text-xs sm:text-sm',
      value: 'text-xs sm:text-sm',
    },
    md: {
      container: 'p-2 gap-2 sm:p-3 sm:gap-3 md:p-4 md:gap-4',
      icon: 'w-8 h-8 sm:w-10 sm:h-10 md:w-12 md:h-12',
      iconPadding: 'p-1.5 sm:p-2 md:p-2.5',
      text: 'text-xs sm:text-sm md:text-base',
      label: 'text-xs sm:text-sm md:text-base',
      value: 'text-xs sm:text-sm md:text-base',
    },
    lg: {
      container: 'p-3 gap-3 sm:p-4 sm:gap-4 md:p-5 md:gap-5',
      icon: 'w-10 h-10 sm:w-12 sm:h-12 md:w-14 md:h-14',
      iconPadding: 'p-2 sm:p-2.5 md:p-3',
      text: 'text-sm sm:text-base md:text-lg',
      label: 'text-sm sm:text-base md:text-lg',
      value: 'text-sm sm:text-base md:text-lg',
    },
  };

  const variants = {
    default: {
      card: 'bg-white border border-gray-200 hover:border-rose-300 hover:shadow-md',
      icon: 'bg-rose-50 border border-rose-200',
      iconColor: iconColorClass || 'text-rose-500',
    },
    highlight: {
      card: `bg-gradient-to-r from-rose-50 via-pink-50 to-rose-50 border border-rose-200 shadow-sm hover:shadow-md`,
      icon: `bg-gradient-to-r from-rose-500 via-pink-500 to-rose-600 text-white shadow-sm`,
      iconColor: 'text-white',
    },
    elegant: {
      card: `bg-gradient-to-br from-white via-gray-50 to-neutral-100 border border-amber-200 shadow-md hover:shadow-lg`,
      icon: `bg-gradient-to-r from-amber-400 via-yellow-400 to-amber-500 text-white shadow-md`,
      iconColor: 'text-white',
    },
    romantic: {
      card: `bg-gradient-to-r from-rose-50 via-pink-50 to-orange-50 border border-pink-200 shadow-sm hover:shadow-lg`,
      icon: `bg-gradient-to-r from-pink-500 via-rose-500 to-red-500 text-white shadow-sm`,
      iconColor: 'text-white',
    },
  };

  const currentSize = sizes[size];
  const currentVariant = variants[variant];
  const textAlignClass = `text-${textAlign}`;

  const content = (
    <div
      className={cn(
        'flex rounded-xl transition-all duration-300',
        'min-w-0 w-full max-w-full overflow-hidden',
        useMobileLayout
          ? 'flex-col items-center text-center gap-2 sm:gap-3'
          : 'items-start',
        currentSize.container,
        currentVariant.card,
        responsive && 'hover:scale-[1.02] active:scale-[0.98]',
        className
      )}
    >
      <div
        className={cn(
          'flex-1 overflow-hidden',
          useMobileLayout ? 'text-center w-full' : 'min-w-0'
        )}
      >
        <div className="flex items-center justify-center gap-2 sm:gap-3 mb-2">
          <div
            className={cn(
              'flex-shrink-0 rounded-lg transition-all duration-300',
              currentSize.iconPadding,
              currentVariant.icon,
              'min-w-fit'
            )}
          >
            <Icon
              aria-hidden="true"
              className={cn(
                currentSize.icon,
                currentVariant.iconColor,
                'transition-all duration-300'
              )}
            />
          </div>
        </div>
        <p
          className={cn(
            'font-semibold mb-1 tracking-wide leading-tight',
            textAlignClass,
            currentSize.label,
            'break-words hyphens-auto word-break-break-word overflow-wrap-anywhere',
            variant === 'highlight' || variant === 'elegant'
              ? 'text-rose-700 sm:text-gray-700'
              : 'text-gray-600 sm:text-gray-700',
            useMobileLayout && 'px-1'
          )}
        >
          {label}
        </p>
        <div
          className={cn(
            'font-medium leading-relaxed',
            textAlignClass,
            currentSize.value,
            'break-words hyphens-auto word-break-break-word overflow-wrap-anywhere',
            'max-w-full overflow-hidden',
            variant === 'highlight' || variant === 'elegant'
              ? 'text-gray-800 sm:text-gray-900'
              : 'text-gray-700 sm:text-gray-800',
            useMobileLayout && 'px-1',
            valueClassName
          )}
        >
          {value || (
            <span className="text-gray-400 italic text-xs sm:text-sm">
              {placeholder}
            </span>
          )}
        </div>
      </div>
    </div>
  );

  if (tooltip && responsive) {
    return (
      <Tooltip>
        <TooltipTrigger asChild className="w-full">
          {content}
        </TooltipTrigger>
        <TooltipContent
          side="top"
          className="max-w-xs text-center bg-white border border-rose-200 shadow-lg z-50"
          sideOffset={5}
        >
          <p className="text-gray-700 text-sm break-words p-2">{tooltip}</p>
        </TooltipContent>
      </Tooltip>
    );
  }

  return content;
};

// 2. EmptyState
const EmptyState: React.FC<{
  icon: React.ElementType;
  title: string;
  description?: string;
  className?: string;
  action?: React.ReactNode;
  variant?: 'mystery' | 'adventure' | 'discovery' | 'romantic';
  size?: 'sm' | 'md' | 'lg';
  compact?: boolean;
}> = ({
  icon: Icon,
  title,
  description,
  className,
  action,
  variant = 'discovery',
  size = 'md',
  compact = false,
}) => {
  const sizes = {
    sm: {
      container: compact ? 'py-4 px-3' : 'py-6 px-4',
      icon: 'w-6 h-6 sm:w-8 sm:h-8',
      iconContainer: 'p-2 sm:p-3',
      title: 'text-sm sm:text-base',
      description: 'text-xs sm:text-sm',
      spacing: 'mb-2 sm:mb-3',
    },
    md: {
      container: compact ? 'py-6 px-4' : 'py-8 px-6',
      icon: 'w-8 h-8 sm:w-10 sm:h-10 md:w-12 md:h-12',
      iconContainer: 'p-3 sm:p-4',
      title: 'text-base sm:text-lg md:text-xl',
      description: 'text-sm sm:text-base',
      spacing: 'mb-3 sm:mb-4',
    },
    lg: {
      container: compact ? 'py-8 px-6' : 'py-12 px-8',
      icon: 'w-10 h-10 sm:w-12 sm:h-12 md:w-16 md:h-16',
      iconContainer: 'p-4 sm:p-5 md:p-6',
      title: 'text-lg sm:text-xl md:text-2xl',
      description: 'text-base sm:text-lg',
      spacing: 'mb-4 sm:mb-6',
    },
  };

  const variants = {
    mystery: {
      bg: `bg-gradient-to-br from-purple-50 via-violet-50 to-purple-100`,
      bgSm: `bg-gradient-to-br from-purple-25 via-violet-25 to-purple-50`,
      border: 'border-purple-200 hover:border-purple-300',
      iconBg: `bg-gradient-to-r from-purple-500 via-violet-500 to-purple-600`,
      iconBgSm: `bg-gradient-to-r from-purple-400 via-violet-400 to-purple-500`,
      textColor: 'text-purple-700 sm:text-purple-800',
      titleColor: 'text-purple-800 sm:text-purple-900',
    },
    adventure: {
      bg: `bg-gradient-to-br from-emerald-50 via-teal-50 to-green-100`,
      bgSm: `bg-gradient-to-br from-emerald-25 via-teal-25 to-green-50`,
      border: 'border-emerald-200 hover:border-emerald-300',
      iconBg: `bg-gradient-to-r from-emerald-500 via-teal-500 to-green-600`,
      iconBgSm: `bg-gradient-to-r from-emerald-400 via-teal-400 to-green-500`,
      textColor: 'text-emerald-700 sm:text-emerald-800',
      titleColor: 'text-emerald-800 sm:text-emerald-900',
    },
    discovery: {
      bg: `bg-gradient-to-br from-amber-50 via-yellow-50 to-orange-100`,
      bgSm: `bg-gradient-to-br from-amber-25 via-yellow-25 to-orange-50`,
      border: 'border-amber-200 hover:border-amber-300',
      iconBg: `bg-gradient-to-r from-amber-500 via-yellow-500 to-orange-600`,
      iconBgSm: `bg-gradient-to-r from-amber-400 via-yellow-400 to-orange-500`,
      textColor: 'text-amber-700 sm:text-amber-800',
      titleColor: 'text-amber-800 sm:text-amber-900',
    },
    romantic: {
      bg: `bg-gradient-to-br from-rose-50 via-pink-50 to-red-100`,
      bgSm: `bg-gradient-to-br from-rose-25 via-pink-25 to-red-50`,
      border: 'border-rose-200 hover:border-rose-300',
      iconBg: `bg-gradient-to-r from-rose-500 via-pink-500 to-red-600`,
      iconBgSm: `bg-gradient-to-r from-rose-400 via-pink-400 to-red-500`,
      textColor: 'text-rose-700 sm:text-rose-800',
      titleColor: 'text-rose-800 sm:text-rose-900',
    },
  };

  const currentSize = sizes[size];
  const currentVariant = variants[variant];

  return (
    <div
      className={cn(
        'flex flex-col items-center justify-center text-center rounded-xl border border-dashed transition-all duration-300',
        currentSize.container,
        currentVariant.bg,
        'sm:' + currentVariant.bgSm,
        currentVariant.border,
        'shadow-sm hover:shadow-md',
        'max-w-full overflow-hidden',
        className
      )}
    >
      <div
        className={cn(
          'rounded-full transition-all duration-300 hover:scale-110 active:scale-95',
          currentSize.iconContainer,
          currentSize.spacing,
          currentVariant.iconBg,
          'shadow-md hover:shadow-lg sm:shadow-lg sm:hover:shadow-xl'
        )}
      >
        <Icon
          className={cn(
            currentSize.icon,
            'text-white transition-all duration-300'
          )}
        />
      </div>

      <h3
        className={cn(
          'font-bold leading-tight',
          currentSize.title,
          currentVariant.titleColor,
          currentSize.spacing,
          'break-words hyphens-auto word-break-break-word max-w-full px-2'
        )}
      >
        {title}
      </h3>

      {description && (
        <p
          className={cn(
            'leading-relaxed max-w-xs mx-auto',
            currentSize.description,
            currentVariant.textColor,
            action ? 'mb-4 sm:mb-6' : '',
            'break-words hyphens-auto word-break-break-word px-2'
          )}
        >
          {description}
        </p>
      )}

      {action && (
        <div className="flex flex-wrap justify-center gap-2 sm:gap-3 max-w-full">
          {action}
        </div>
      )}
    </div>
  );
};

// 3. SectionCard
const SectionCard: React.FC<{
  title: string;
  subtitle?: string;
  icon?: React.ElementType;
  children: React.ReactNode;
  className?: string;
  contentClassName?: string;
  headerClassName?: string;
  action?: React.ReactNode;
  variant?: 'default' | 'elegant' | 'romantic' | 'highlight';
  gradient?: string;
  size?: 'sm' | 'md' | 'lg';
  collapsible?: boolean;
  compact?: boolean;
}> = ({
  title,
  subtitle,
  icon: Icon,
  children,
  className,
  contentClassName,
  headerClassName,
  action,
  variant = 'default',
  gradient,
  size = 'md',
  collapsible = false,
  compact = false,
}) => {
  const [isCollapsed, setIsCollapsed] = useState(false);

  const sizes = {
    sm: {
      card: 'rounded-lg sm:rounded-xl',
      header: 'p-2 sm:p-3',
      content: 'p-2 sm:p-3',
      icon: 'w-4 h-4 sm:w-5 sm:h-5',
      iconPadding: 'p-1.5 sm:p-2',
      title: 'text-sm sm:text-base',
      subtitle: 'text-xs sm:text-sm',
      gap: 'gap-2 sm:gap-3',
    },
    md: {
      card: 'rounded-xl sm:rounded-2xl',
      header: compact ? 'p-3 sm:p-4' : 'p-4 sm:p-5 md:p-6',
      content: compact ? 'p-3 sm:p-4' : 'p-4 sm:p-5 md:p-6',
      icon: 'w-5 h-5 sm:w-6 sm:h-6',
      iconPadding: 'p-2 sm:p-2.5',
      title: 'text-base sm:text-lg md:text-xl',
      subtitle: 'text-sm sm:text-base',
      gap: 'gap-3 sm:gap-4',
    },
    lg: {
      card: 'rounded-2xl',
      header: compact ? 'p-4 sm:p-5' : 'p-5 sm:p-6 md:p-8',
      content: compact ? 'p-4 sm:p-5' : 'p-5 sm:p-6 md:p-8',
      icon: 'w-6 h-6 sm:w-7 sm:h-7',
      iconPadding: 'p-2.5 sm:p-3',
      title: 'text-lg sm:text-xl md:text-2xl',
      subtitle: 'text-base sm:text-lg',
      gap: 'gap-4 sm:gap-5',
    },
  };

  const variants = {
    default: {
      card: 'bg-white border-gray-200 shadow-lg hover:shadow-xl',
      header: 'bg-gradient-to-r from-gray-50 to-white border-gray-200',
      headerSm: 'bg-gradient-to-r from-gray-25 to-white border-gray-100',
      iconBg: 'bg-gray-100 border border-gray-200',
      iconColor: 'text-gray-600',
    },
    elegant: {
      card: `bg-white border-amber-200 shadow-xl hover:shadow-2xl`,
      header: `bg-gradient-to-r ${gradient || 'from-amber-50 via-yellow-50 to-orange-50'} border-amber-200`,
      headerSm: `bg-gradient-to-r from-amber-25 via-yellow-25 to-orange-25 border-amber-100`,
      iconBg: `bg-gradient-to-r from-amber-400 via-yellow-400 to-amber-500 text-white shadow-md`,
      iconColor: 'text-white',
    },
    romantic: {
      card: `bg-white border-rose-200 shadow-lg hover:shadow-xl`,
      header: `bg-gradient-to-r ${gradient || 'from-rose-50 via-pink-50 to-red-50'} border-rose-200`,
      headerSm: `bg-gradient-to-r from-rose-25 via-pink-25 to-red-25 border-rose-100`,
      iconBg: `bg-gradient-to-r from-rose-500 via-pink-500 to-red-500 text-white shadow-md`,
      iconColor: 'text-white',
    },
    highlight: {
      card: `bg-white border-pink-200 shadow-lg hover:shadow-xl ring-1 ring-pink-100 hover:ring-pink-200`,
      header: `bg-gradient-to-r ${gradient || 'from-pink-500 via-rose-500 to-red-500'} border-pink-200`,
      headerSm: `bg-gradient-to-r from-pink-400 via-rose-400 to-red-400 border-pink-100`,
      iconBg: `bg-gradient-to-r from-purple-600 via-indigo-600 to-purple-700 text-white shadow-lg`,
      iconColor: 'text-white',
    },
  };

  const currentSize = sizes[size];
  const currentVariant = variants[variant];

  return (
    <div
      className={cn(
        'border overflow-hidden flex flex-col transition-all duration-300',
        currentSize.card,
        currentVariant.card,
        'max-w-full min-w-0',
        className
      )}
    >
      <div
        className={cn(
          'flex items-center justify-between border-b transition-all duration-300',
          currentSize.header,
          'gap-2',
          currentVariant.header,
          'sm:' + currentVariant.headerSm,
          'min-w-0 overflow-hidden',
          headerClassName
        )}
      >
        <div
          className={cn('flex items-center min-w-0 flex-1', 'gap-1 sm:gap-2')}
        >
          {Icon && (
            <div
              className={cn(
                'flex-shrink-0 rounded-lg transition-all duration-300',
                currentSize.iconPadding,
                currentVariant.iconBg,
                'hover:scale-110 active:scale-95'
              )}
            >
              <Icon
                className={cn(currentSize.icon, currentVariant.iconColor)}
              />
            </div>
          )}
          <div className="min-w-0 flex-1 overflow-hidden text-center">
            <h3
              className={cn(
                'font-bold leading-tight transition-all duration-300 text-center',
                currentSize.title,
                variant === 'default'
                  ? 'text-gray-800 hover:text-gray-900'
                  : 'text-gray-800',
                'break-words hyphens-auto word-break-break-word overflow-wrap-anywhere max-w-full'
              )}
            >
              {title}
            </h3>
            {subtitle && (
              <p
                className={cn(
                  'mt-0.5 opacity-80 transition-all duration-300 text-center',
                  currentSize.subtitle,
                  'text-gray-600 text-center mx-auto',
                  'break-words hyphens-auto word-break-break-word overflow-wrap-anywhere max-w-full'
                )}
              >
                {subtitle}
              </p>
            )}
          </div>
        </div>
        <div className="flex items-center gap-2 flex-shrink-0">
          {collapsible && (
            <Button
              variant="ghost"
              size="sm"
              className="md:hidden p-1 h-8 w-8 hover:bg-white/60"
              onClick={() => setIsCollapsed(!isCollapsed)}
            >
              <ChevronDown
                className={cn(
                  'w-4 h-4 transition-transform duration-200',
                  isCollapsed && 'rotate-180'
                )}
              />
            </Button>
          )}
          {action && <div className="flex-shrink-0">{action}</div>}
        </div>
      </div>
      <div
        className={cn(
          'transition-all duration-300 overflow-hidden',
          currentSize.content,
          collapsible &&
            isCollapsed &&
            'max-h-0 p-0 md:max-h-none md:p-4 md:sm:p-5 md:md:p-6',
          'min-w-0 max-w-full',
          contentClassName
        )}
      >
        {children}
      </div>
    </div>
  );
};

// 4. ColorPaletteSelector
const ColorPaletteSelector: React.FC<{
  selectedPalette: ColorPaletteName;
  onPaletteChange: (palette: ColorPaletteName) => void;
  THEME: ThemeType;
  dict: ProfileCardDisplayDict['colorPalette'];
  compact?: boolean;
  direction: 'ltr' | 'rtl';
}> = ({
  selectedPalette,
  onPaletteChange,
  THEME,
  dict,
  compact = false,
  direction,
}) => {
  const [isOpen, setIsOpen] = useState(false);

  return (
    <div className="relative">
      <Button
        id="color-palette-button"
        aria-haspopup="menu"
        aria-expanded={isOpen}
        variant="ghost"
        size="icon"
        className={cn(
          'bg-white/90 backdrop-blur-sm rounded-full border border-gray-200/80 shadow-lg hover:shadow-xl transition-all duration-300',
          'text-gray-600 hover:text-gray-800 hover:bg-white/95',
          compact
            ? 'w-8 h-8 min-h-[44px] min-w-[44px]'
            : 'w-10 h-10 min-h-[44px] min-w-[44px]',
          'touch-manipulation'
        )}
        onClick={() => setIsOpen(!isOpen)}
        aria-label={dict.selectLabel}
      >
        <Palette
          className={cn(
            compact ? 'w-4 h-4' : 'w-5 h-5',
            'transition-all duration-300'
          )}
        />
      </Button>
      {isOpen && (
        <>
          <div
            className="fixed inset-0 z-40"
            onClick={() => setIsOpen(false)}
          />
          <div
            role="menu"
            aria-labelledby="color-palette-button"
            className={cn(
              'absolute top-full mt-2 z-50',
              direction === 'rtl' ? 'right-0' : 'right-0',
              'bg-white/95 backdrop-blur-md rounded-2xl border border-gray-200/80 shadow-xl',
              'min-w-[160px] py-2',
              'animate-in fade-in-0 zoom-in-95 duration-200'
            )}
            dir={direction}
          >
            {Object.entries(COLOR_PALETTES).map(([key, palette]) => (
              <button
                key={key}
                role="menuitem"
                onClick={() => {
                  onPaletteChange(key as ColorPaletteName);
                  setIsOpen(false);
                }}
                className={cn(
                  'w-full px-4 py-3 text-start transition-all duration-200',
                  'hover:bg-gray-100/80 active:bg-gray-200/50',
                  'flex items-center gap-3 min-h-[44px]',
                  selectedPalette === key && 'bg-gray-100/60 font-semibold'
                )}
              >
                <div
                  aria-hidden="true"
                  className={cn(
                    'w-4 h-4 rounded-full flex-shrink-0',
                    key === 'feminine' &&
                      'bg-gradient-to-r from-rose-400 to-pink-500',
                    key === 'masculine' &&
                      'bg-gradient-to-r from-blue-500 to-cyan-600',
                    key === 'luxury' &&
                      'bg-gradient-to-r from-amber-400 to-yellow-500',
                    key === 'professional' &&
                      'bg-gradient-to-r from-gray-500 to-slate-600'
                  )}
                />
                <span
                  className={cn(
                    'text-gray-700 font-medium text-sm',
                    selectedPalette === key && 'text-gray-900 font-semibold'
                  )}
                >
                  {dict.palettes[key as keyof typeof dict.palettes]}
                </span>
                {selectedPalette === key && (
                  <>
                    <span className="sr-only">{dict.selected}</span>
                    <CheckCircle
                      aria-hidden="true"
                      className="w-4 h-4 text-green-600 ms-auto"
                    />
                  </>
                )}
              </button>
            ))}
          </div>
        </>
      )}
    </div>
  );
};

interface ProfileCardProps {
  profile: Omit<UserProfile, 'isProfileComplete'>;
  isProfileComplete: boolean;
  images?: UserImageType[];
  questionnaire?: QuestionnaireResponse | null;
  viewMode?: 'matchmaker' | 'candidate';
  className?: string;
  candidate?: Candidate;
  allCandidates?: Candidate[];
  onCreateSuggestion?: (data: CreateSuggestionData) => Promise<void>;
  onClose?: () => void;
  dict: ProfileCardDict;
  locale: string;
}

const ProfileHeader: React.FC<{
  profile: UserProfile;
  age: number;
  mainImageToDisplay: UserImageType | null;
  availability: ReturnType<typeof formatAvailabilityStatus>;
  viewMode: 'matchmaker' | 'candidate';
  onSuggestClick: () => void;
  isMobile?: boolean;
  selectedPalette: ColorPaletteName;
  onPaletteChange?: (palette: ColorPaletteName) => void;
  THEME: ThemeType;
  dict: ProfileCardDisplayDict;
  compact?: boolean;
  characterTraitMap: ReturnType<typeof createCharacterTraitMap>;
  hobbiesMap: ReturnType<typeof createHobbiesMap>;
  religiousLevelMap: ReturnType<typeof createReligiousLevelMap>;
  educationLevelMap: ReturnType<typeof createEducationLevelMap>;
  locale: string;
}> = ({
  profile,
  age,
  mainImageToDisplay,
  availability,
  viewMode,
  onSuggestClick,
  isMobile = false,
  selectedPalette,
  onPaletteChange,
  THEME,
  dict,
  compact = false,
  characterTraitMap,
  hobbiesMap,
  religiousLevelMap,
  educationLevelMap,
  locale,
}) => {
  const direction = locale === 'he' ? 'rtl' : 'ltr';
  console.log(
    `ProfileCard Loaded - Locale: ${locale}, Direction: ${direction}`
  );

  const personalityHighlights = useMemo(() => {
    const highlights: ExcitementFactor[] = [];
    if (profile.profileCharacterTraits?.length > 0) {
      const trait = profile.profileCharacterTraits[0];
      const traitData = formatEnumValue(
        trait,
        characterTraitMap,
        trait,
        isMobile
      );
      highlights.push({
        icon: traitData.icon,
        text: traitData.label,
        shortText: traitData.shortLabel || traitData.label,
        gradient: THEME.colors.primary.light,
      });
    }

    if (profile.profileHobbies?.length > 0) {
      const hobby = profile.profileHobbies[0];
      const hobbyData = formatEnumValue(hobby, hobbiesMap, hobby, isMobile);
      highlights.push({
        icon: hobbyData.icon,
        text: hobbyData.label,
        shortText: hobbyData.shortLabel || hobbyData.label,
        gradient: THEME.colors.secondary.sage,
      });
    }

    if (profile.city) {
      const cityText = `גר/ה ב${profile.city}`;
      highlights.push({
        icon: MapPin,
        text: cityText,
        shortText:
          isMobile && cityText.length > 15 ? `${profile.city}` : cityText,
        gradient: THEME.colors.secondary.sky,
      });
    }

    return highlights.slice(0, 3);
  }, [
    profile.profileCharacterTraits,
    profile.profileHobbies,
    profile.city,
    isMobile,
    THEME.colors.primary.light,
    THEME.colors.secondary.sage,
    THEME.colors.secondary.sky,
    characterTraitMap,
    hobbiesMap,
  ]);

  return (
    <div className="relative overflow-hidden">
      <div
        className={cn(
          'absolute inset-0 bg-gradient-to-br',
          THEME.colors.neutral.warm
        )}
      >
        <div
          className={cn(
            'absolute bg-gradient-to-br from-rose-200/40 to-pink-200/40 rounded-full blur-xl sm:blur-2xl animate-pulse',
            compact
              ? 'top-2 end-2 w-8 h-8 sm:w-16 sm:h-16'
              : 'top-4 end-4 sm:top-10 sm:end-10 w-16 h-16 sm:w-32 sm:h-32'
          )}
        ></div>
        <div
          className={cn(
            'absolute bg-gradient-to-br from-amber-200/40 to-orange-200/40 rounded-full blur-lg sm:blur-xl animate-pulse',
            compact
              ? 'bottom-2 start-2 w-6 h-6 sm:w-12 sm:h-12'
              : 'bottom-4 start-4 sm:bottom-10 sm:start-10 w-12 h-12 sm:w-24 sm:h-24'
          )}
          style={{ animationDelay: '1s' }}
        ></div>
        <div
          className={cn(
            'absolute bg-gradient-to-br from-purple-200/30 to-pink-200/30 rounded-full blur-md sm:blur-lg animate-pulse',
            compact
              ? 'top-1/2 left-1/2 w-4 h-4 sm:w-8 sm:h-8'
              : 'top-1/2 left-1/2 w-8 h-8 sm:w-20 sm:h-20'
          )}
          style={{ animationDelay: '2s' }}
        ></div>
      </div>

      <div
        className={cn(
          'relative z-10',
          compact ? 'p-2 sm:p-3' : 'p-3 sm:p-4 md:p-6'
        )}
      >
        <div
          className={cn(
            'flex items-start',
            isMobile
              ? 'flex-col items-center text-center gap-3 sm:gap-4'
              : 'flex-row gap-4 sm:gap-6'
          )}
        >
          <div className="relative flex-shrink-0">
            <div
              className={cn(
                'relative rounded-full overflow-hidden border-2 sm:border-4 border-white shadow-lg sm:shadow-2xl ring-2 sm:ring-4 ring-rose-200/50 transition-all duration-300 hover:scale-105',
                compact
                  ? 'h-32 w-32 sm:h-36 sm:w-36 md:h-40 md:w-40'
                  : isMobile
                    ? 'h-36 w-36 sm:h-40 sm:w-40 md:h-44 md:w-44'
                    : 'h-20 w-20 sm:h-24 sm:w-24 md:h-32 md:w-32 lg:h-36 lg:w-36',
                THEME.shadows.elegant
              )}
            >
              {mainImageToDisplay?.url ? (
                <Image
                  src={getRelativeCloudinaryPath(mainImageToDisplay.url)}
                  alt={dict.header.profileImageAlt.replace(
                    '{{name}}',
                    `${profile.user?.firstName || ''} ${profile.user?.lastName || ''}`.trim()
                  )}
                  fill
                  className="object-cover transition-transform duration-700 hover:scale-110"
                  sizes={compact ? '160px' : isMobile ? '176px' : '144px'}
                  priority
                />
              ) : (
                <div
                  className={cn(
                    'w-full h-full flex items-center justify-center',
                    `bg-gradient-to-br ${THEME.colors.primary.romantic}`
                  )}
                >
                  <span
                    className={cn(
                      'font-bold text-white',
                      compact
                        ? 'text-xl sm:text-2xl'
                        : 'text-3xl sm:text-4xl lg:text-6xl'
                    )}
                  >
                    {getInitials(
                      profile.user?.firstName,
                      profile.user?.lastName,
                      compact ? 1 : 2
                    )}
                  </span>
                </div>
              )}
            </div>

            <div
              className={cn(
                'absolute transition-all duration-300',
                compact ? '-bottom-1 -end-1' : '-bottom-2 -end-2'
              )}
            >
              <Badge
                className={cn(
                  'font-bold text-white border-0 transition-all duration-300 hover:scale-110',
                  compact
                    ? 'text-xs px-2 py-1'
                    : 'text-xs sm:text-sm px-2 py-1 sm:px-3 sm:py-2',
                  isMobile
                    ? availability.bgColorSm || availability.bgColor
                    : availability.bgColor,
                  false && 'animate-pulse',
                  THEME.shadows.warm
                )}
              >
                <availability.icon
                  className={cn(
                    'flex-shrink-0',
                    compact ? 'w-2 h-2 me-1' : 'w-3 h-3 me-1 sm:me-1.5'
                  )}
                />
                <span className={cn('break-words')}>
                  {isMobile && compact
                    ? availability.shortText || availability.text
                    : isMobile
                      ? availability.shortText || availability.text
                      : availability.text}
                </span>
              </Badge>
            </div>
          </div>

          <div className="flex-1 min-w-0 flex flex-col justify-start items-start w-full">
            {!isMobile && onPaletteChange && (
              <div className="flex justify-end mb-2 sm:mb-3 w-full">
                <ColorPaletteSelector
                  selectedPalette={selectedPalette}
                  onPaletteChange={onPaletteChange}
                  THEME={THEME}
                  dict={dict.colorPalette}
                  compact={compact}
                  direction={direction}
                />
              </div>
            )}
            <div
              className={cn(
                'w-full overflow-hidden',
                compact ? 'mb-2 sm:mb-3' : 'mb-3 sm:mb-4',
                isMobile && 'text-center'
              )}
            >
              <h1
                className={cn(
                  'font-extrabold leading-tight transition-all duration-300',
                  compact
                    ? 'text-sm sm:text-base md:text-lg'
                    : isMobile
                      ? 'text-lg sm:text-xl md:text-2xl'
                      : 'text-xl sm:text-2xl md:text-3xl lg:text-4xl',
                  'break-words hyphens-auto word-break-break-word overflow-wrap-anywhere',
                  'text-center max-w-full overflow-hidden',
                  'px-1 sm:px-2',
                  'bg-gradient-to-r from-gray-800 via-gray-900 to-black bg-clip-text text-transparent',
                  'hover:from-rose-600 hover:via-pink-600 hover:to-purple-600'
                )}
              >
                {profile.user?.firstName
                  ? dict.header.storyOf.replace(
                      '{{name}}',
                      `${profile.user.firstName} ${profile.user.lastName || ''}`.trim()
                    )
                  : dict.placeholders.storyWaiting}
              </h1>

              {age > 0 && (
                <div
                  className={cn(
                    'flex items-center justify-center gap-1 sm:gap-2 flex-wrap',
                    isMobile ? 'justify-center' : 'lg:justify-start',
                    'mt-2 sm:mt-3'
                  )}
                >
                  <Cake
                    className={cn(
                      'text-blue-500 flex-shrink-0',
                      compact ? 'w-3 h-3' : 'w-4 h-4 sm:w-5 sm:h-5'
                    )}
                  />
                  <span
                    className={cn(
                      'font-semibold text-gray-700',
                      compact
                        ? 'text-xs sm:text-sm'
                        : 'text-sm sm:text-base md:text-lg'
                    )}
                  >
                    {dict.header.ageLabel.replace('{{age}}', age.toString())}
                  </span>
                </div>
              )}
            </div>
            {personalityHighlights.length > 0 && (
              <div
                className={cn(
                  'w-full overflow-hidden',
                  compact ? 'mt-2 mb-2' : 'mt-3 mb-4',
                  isMobile ? 'flex justify-center' : 'flex justify-start'
                )}
              >
                <ScrollArea className="w-full max-w-full" dir={direction}>
                  <div
                    className={cn(
                      'flex gap-2 sm:gap-3 pb-2 px-1 min-w-max',
                      isMobile && 'justify-center'
                    )}
                  >
                    {personalityHighlights.map((highlight, index) => (
                      <div
                        key={index}
                        className={cn(
                          'flex items-center bg-white/80 border border-gray-200/50 text-gray-700 font-semibold backdrop-blur-sm flex-shrink-0 transition-all duration-300 hover:scale-105 hover:bg-white/90',
                          compact
                            ? 'gap-1 px-2 py-1 rounded-full text-xs'
                            : 'gap-1.5 sm:gap-2 px-2 sm:px-3 py-1.5 sm:py-2 rounded-full text-xs sm:text-sm',
                          THEME.shadows.soft
                        )}
                      >
                        <highlight.icon
                          className={cn(
                            'flex-shrink-0',
                            compact ? 'w-3 h-3' : 'w-3 h-3 sm:w-4 sm:h-4'
                          )}
                        />
                        <span className="whitespace-nowrap font-medium">
                          {isMobile && compact
                            ? highlight.shortText || highlight.text
                            : isMobile
                              ? highlight.shortText || highlight.text
                              : highlight.text}
                        </span>
                      </div>
                    ))}
                  </div>
                  <ScrollBar orientation="horizontal" />
                </ScrollArea>
              </div>
            )}
            <div
              className={cn(
                'w-full overflow-hidden',
                compact ? 'mt-2' : 'mt-4 sm:mt-6'
              )}
            >
              {isMobile ? (
                <div className="w-full max-w-full overflow-hidden px-1">
                  <ScrollArea className="w-full" dir={direction}>
                    <div
                      className={cn(
                        'flex gap-2 sm:gap-3 pb-2 px-1',
                        'justify-center min-w-max'
                      )}
                    >
                      {profile.occupation && (
                        <KeyFactCard
                          icon={Briefcase}
                          label={dict.keyFacts.occupation}
                          value={profile.occupation}
                          color="amber"
                          compact={compact}
                        />
                      )}
                      {profile.religiousLevel && (
                        <KeyFactCard
                          icon={BookMarked}
                          label={dict.keyFacts.outlook}
                          value={
                            formatEnumValue(
                              profile.religiousLevel,
                              religiousLevelMap,
                              '',
                              true
                            ).shortLabel || ''
                          }
                          color="purple"
                          compact={compact}
                        />
                      )}
                    </div>
                    <ScrollBar orientation="horizontal" />
                  </ScrollArea>
                </div>
              ) : (
                <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-3 sm:gap-4">
                  {profile.city && (
                    <KeyFactCard
                      icon={MapPin}
                      label={dict.keyFacts.location}
                      value={profile.city}
                      color="rose"
                      compact={compact}
                    />
                  )}
                  {profile.occupation && (
                    <KeyFactCard
                      icon={Briefcase}
                      label={dict.keyFacts.occupation}
                      value={profile.occupation}
                      color="amber"
                      compact={compact}
                    />
                  )}
                  {profile.religiousLevel && (
                    <KeyFactCard
                      icon={BookMarked}
                      label={dict.keyFacts.outlook}
                      value={
                        formatEnumValue(
                          profile.religiousLevel,
                          religiousLevelMap,
                          ''
                        ).label
                      }
                      color="purple"
                      compact={compact}
                    />
                  )}
                </div>
              )}
            </div>
            {viewMode === 'matchmaker' && (
              <div
                className={cn(
                  'w-full flex',
                  compact ? 'pt-3' : 'pt-4 sm:pt-6',
                  isMobile ? 'justify-center' : 'justify-end'
                )}
              >
                <Button
                  size={compact ? 'default' : 'lg'}
                  className={cn(
                    'bg-gradient-to-r from-rose-500 via-pink-500 to-rose-600 hover:from-rose-600 hover:via-pink-600 hover:to-rose-700',
                    'text-white font-bold rounded-full shadow-xl hover:shadow-2xl transition-all duration-300 transform hover:scale-105 active:scale-95',
                    compact
                      ? 'px-4 py-2 text-sm'
                      : 'px-6 sm:px-8 py-2 sm:py-3 text-sm sm:text-base',
                    'min-h-[44px]'
                  )}
                  onClick={onSuggestClick}
                >
                  <Heart
                    className={cn(
                      'flex-shrink-0',
                      compact ? 'w-4 h-4' : 'w-4 h-4 sm:w-5 sm:h-5',
                      direction === 'rtl' ? 'ml-1 sm:ml-2' : 'mr-1 sm:mr-2'
                    )}
                  />
                  <span className="break-words">
                    {compact
                      ? dict.header.suggestMatchButton
                      : dict.header.suggestPerfectMatchButton}
                  </span>
                  {direction === 'rtl' ? (
                    <ArrowLeft
                      className={cn(
                        'flex-shrink-0',
                        compact
                          ? 'w-4 h-4 mr-1'
                          : 'w-4 h-4 sm:w-5 sm:h-5 mr-1 sm:mr-2'
                      )}
                    />
                  ) : (
                    <ArrowRight
                      className={cn(
                        'flex-shrink-0',
                        compact
                          ? 'w-4 h-4 ml-1'
                          : 'w-4 h-4 sm:w-5 sm:h-5 ml-1 sm:ml-2'
                      )}
                    />
                  )}
                </Button>
              </div>
            )}
          </div>
        </div>
        {!compact && (
          <div
            className={cn(
              'text-center w-full overflow-hidden',
              isMobile ? 'mt-3 px-2' : 'mt-6 sm:mt-8'
            )}
          >
            <div
              className={cn(
                'inline-flex items-center justify-center rounded-full text-white shadow-lg max-w-full transition-all duration-300 hover:scale-105',
                isMobile
                  ? 'gap-1.5 px-3 py-2 text-sm flex-wrap'
                  : 'gap-2 px-4 py-3 text-base',
                `bg-gradient-to-r ${THEME.colors.primary.romantic}`
              )}
            >
              <Quote
                aria-hidden="true"
                className={cn(
                  'flex-shrink-0',
                  isMobile ? 'w-3 h-3' : 'w-4 h-4'
                )}
              />
              <p className="font-medium italic text-center break-words flex-shrink min-w-0">
                {dict.header.excitementQuote}
              </p>
              <Quote
                aria-hidden="true"
                className={cn(
                  'transform rotate-180 flex-shrink-0',
                  isMobile ? 'w-3 h-3' : 'w-4 h-4'
                )}
              />
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

const KeyFactCard: React.FC<{
  icon: React.ElementType;
  label: string;
  value: string;
  color: 'rose' | 'amber' | 'purple';
  compact?: boolean;
}> = ({ icon: Icon, label, value, color, compact = false }) => {
  const colorClasses = {
    rose: 'border-rose-200/50 hover:border-rose-300',
    amber: 'border-amber-200/50 hover:border-amber-300',
    purple: 'border-purple-200/50 hover:border-purple-300',
  };

  const iconColors = {
    rose: 'text-rose-500',
    amber: 'text-amber-600',
    purple: 'text-purple-600',
  };

  return (
    <div
      className={cn(
        'flex items-center bg-white/80 backdrop-blur-sm rounded-xl border shadow-sm hover:shadow-md transition-all duration-300 flex-shrink-0',
        compact
          ? 'gap-2 p-2 min-w-[100px] max-w-[120px]'
          : 'gap-2 sm:gap-3 p-2 sm:p-3 min-w-[120px] max-w-[140px] sm:min-w-[140px] sm:max-w-[160px]',
        colorClasses[color],
        'max-w-[calc((100vw-4rem)/3)]'
      )}
    >
      <Icon
        aria-hidden="true"
        className={cn(
          'flex-shrink-0',
          compact ? 'w-4 h-4' : 'w-4 h-4 sm:w-5 sm:h-5',
          iconColors[color]
        )}
      />
      <div className="min-w-0 flex-1 overflow-hidden">
        <p
          className={cn(
            'font-medium text-gray-500 leading-tight',
            compact ? 'text-xs' : 'text-xs sm:text-sm'
          )}
        >
          {label}
        </p>
        <p
          className={cn(
            'font-semibold text-gray-800 break-words overflow-wrap-anywhere word-break-break-word leading-tight',
            compact ? 'text-xs' : 'text-xs sm:text-sm'
          )}
        >
          {value}
        </p>
      </div>
    </div>
  );
};

const MobileImageGallery: React.FC<{
  orderedImages: UserImageType[];
  profile: UserProfile;
  onImageClick: (image: UserImageType) => void;
  THEME: ThemeType;
  dict: ProfileCardDisplayDict['gallery'];
  compact?: boolean;
  direction: 'ltr' | 'rtl';
}> = ({
  orderedImages,
  profile,
  onImageClick,
  THEME,
  dict,
  compact = false,
  direction,
}) => {
  if (orderedImages.length === 0) return null;

  return (
    <div
      className={cn(
        'overflow-hidden',
        compact ? 'px-2 pt-2 pb-2' : 'px-3 sm:px-4 pt-3 sm:pt-4 pb-2 sm:pb-3',
        `bg-gradient-to-r ${THEME.colors.neutral.warm}`
      )}
    >
      <div
        className={cn(
          'text-center overflow-hidden',
          compact ? 'mb-2' : 'mb-3 sm:mb-4'
        )}
      >
        <h3
          className={cn(
            'font-bold text-gray-800 flex items-center justify-center gap-1.5 sm:gap-2',
            compact ? 'text-sm mb-1' : 'text-base sm:text-lg mb-1 sm:mb-2'
          )}
        >
          <Camera
            className={cn(
              'text-rose-500 flex-shrink-0',
              compact ? 'w-4 h-4' : 'w-4 h-4 sm:w-5 sm:h-5'
            )}
          />
          <span className="break-words min-w-0">
            {dict.title.replace(
              '{{name}}',
              profile.user?.firstName || 'המועמד'
            )}
          </span>
        </h3>
        <p
          className={cn(
            'text-gray-600',
            compact ? 'text-xs' : 'text-xs sm:text-sm'
          )}
        >
          {dict.subtitle}
        </p>
      </div>
      <ScrollArea dir={direction} className="w-full overflow-hidden">
        <div
          className={cn(
            'flex pb-2 sm:pb-3',
            compact ? 'gap-2' : 'gap-2 sm:gap-3 md:gap-4',
            'justify-center min-w-full'
          )}
        >
          {orderedImages.map((image, idx) => (
            <button
              key={image.id}
              type="button"
              aria-label={dict.showImageAlt.replace(
                '{{index}}',
                (idx + 1).toString()
              )}
              className={cn(
                'relative flex-shrink-0 rounded-xl sm:rounded-2xl overflow-hidden cursor-pointer group transition-all duration-300 hover:scale-105 active:scale-95 focus:outline-none focus-visible:ring-2 focus-visible:ring-offset-2 focus-visible:ring-rose-500',
                orderedImages.length <= 3
                  ? compact
                    ? 'w-20 h-24 border-2'
                    : 'w-24 h-32 sm:w-28 sm:h-36 border-2 sm:border-3'
                  : compact
                    ? 'w-16 h-20 border-2'
                    : 'w-20 h-26 sm:w-22 sm:h-30 border-2 sm:border-3',
                'border-white shadow-md hover:shadow-lg sm:shadow-lg sm:hover:shadow-xl',
                'max-w-[calc((100vw-3rem)/5)]'
              )}
              onClick={() => onImageClick(image)}
            >
              <Image
                src={getRelativeCloudinaryPath(image.url)}
                alt={dict.imageAlt.replace('{{index}}', (idx + 1).toString())}
                fill
                className="object-cover transition-transform duration-500 group-hover:scale-110"
                sizes={
                  orderedImages.length <= 3
                    ? compact
                      ? '80px'
                      : '112px'
                    : compact
                      ? '64px'
                      : '88px'
                }
              />
              <div className="absolute inset-0 bg-gradient-to-t from-black/60 via-transparent to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
              {image.isMain && (
                <Badge
                  className={cn(
                    'absolute font-bold',
                    compact
                      ? 'top-0.5 end-0.5 text-xs px-1 py-0.5 gap-0.5'
                      : 'top-1 end-1 text-xs px-1.5 py-0.5 gap-1',
                    'bg-gradient-to-r from-yellow-400 to-amber-500 text-black shadow-sm',
                    THEME.shadows.warm
                  )}
                >
                  <Star
                    className={cn(
                      'fill-current',
                      compact ? 'w-2 h-2' : 'w-2 h-2 sm:w-2.5 sm:h-2.5'
                    )}
                  />
                  {!compact && <span>{dict.mainBadge}</span>}
                </Badge>
              )}
            </button>
          ))}
        </div>
        <ScrollBar orientation="horizontal" className="mt-1" />
      </ScrollArea>
    </div>
  );
};

const ImageDialogComponent: React.FC<{
  selectedImageForDialog: UserImageType | null;
  currentDialogImageIndex: number;
  orderedImages: UserImageType[];
  onClose: () => void;
  onNavigate: (direction: 'next' | 'prev') => void;
  onImageSelect: (image: UserImageType) => void;
  dict: ProfileCardDisplayDict['imageDialog'];
  direction: 'ltr' | 'rtl';
}> = ({
  selectedImageForDialog,
  currentDialogImageIndex,
  orderedImages,
  onClose,
  onNavigate,
  onImageSelect,
  dict,
  direction,
}) => {
  if (!selectedImageForDialog) return null;
  const PrevIcon = direction === 'rtl' ? ChevronRight : ChevronLeft;
  const NextIcon = direction === 'rtl' ? ChevronLeft : ChevronRight;

  return (
    <Dialog
      open={!!selectedImageForDialog}
      onOpenChange={(isOpen) => !isOpen && onClose()}
    >
      <DialogContent
        className={cn(
          'max-w-5xl w-[95vw] h-[90vh] p-0 border-none rounded-2xl flex flex-col',
          'bg-black/95 backdrop-blur-md'
        )}
        dir={direction}
      >
        <DialogHeader
          className={cn(
            'p-3 sm:p-4 text-white flex-row justify-between items-center border-b border-gray-700/50',
            'bg-black/80 backdrop-blur-sm'
          )}
        >
          <DialogTitle
            className={cn(
              'font-bold flex items-center gap-2',
              'text-base sm:text-lg'
            )}
          >
            <Camera className="w-4 h-4 sm:w-5 sm:h-5 flex-shrink-0" />
            <span className="break-words">
              {dict.title
                .replace(
                  '{{current}}',
                  (currentDialogImageIndex + 1).toString()
                )
                .replace('{{total}}', orderedImages.length.toString())}
            </span>
          </DialogTitle>
          <DialogClose asChild>
            <Button
              variant="ghost"
              size="icon"
              aria-label={dict.closeLabel}
              className={cn(
                'text-gray-300 hover:text-white hover:bg-white/10 rounded-full transition-all',
                'w-8 h-8 sm:w-10 sm:h-10 min-h-[44px] min-w-[44px]'
              )}
            >
              <X className="w-4 h-4 sm:w-5 sm:h-5" />
            </Button>
          </DialogClose>
        </DialogHeader>

        <div className="relative flex-1 w-full min-h-0 overflow-hidden">
          <Image
            key={selectedImageForDialog.id}
            src={getRelativeCloudinaryPath(selectedImageForDialog.url)}
            alt={`תמונה מוגדלת ${currentDialogImageIndex + 1}`}
            fill
            className="object-contain"
            sizes="90vw"
            priority
          />

          {orderedImages.length > 1 && (
            <>
              <Button
                variant="ghost"
                aria-label={dict.prevLabel}
                className={cn(
                  'absolute top-1/2 -translate-y-1/2 rounded-full',
                  direction === 'rtl' ? 'right-4' : 'left-4',
                  'bg-black/50 hover:bg-black/70 text-white border border-white/20',
                  'backdrop-blur-sm transition-all hover:scale-110 active:scale-95',
                  'w-12 h-12 sm:w-14 sm:h-14 min-h-[44px] min-w-[44px]'
                )}
                onClick={() => onNavigate('prev')}
              >
                <PrevIcon className="h-5 w-5 sm:h-6 sm:w-6" />
              </Button>
              <Button
                variant="ghost"
                aria-label={dict.nextLabel}
                className={cn(
                  'absolute top-1/2 -translate-y-1/2 rounded-full',
                  direction === 'rtl' ? 'left-4' : 'right-4',
                  'bg-black/50 hover:bg-black/70 text-white border border-white/20',
                  'backdrop-blur-sm transition-all hover:scale-110 active:scale-95',
                  'w-12 h-12 sm:w-14 sm:h-14 min-h-[44px] min-w-[44px]'
                )}
                onClick={() => onNavigate('next')}
              >
                <NextIcon className="h-5 w-5 sm:h-6 sm:w-6" />
              </Button>
            </>
          )}
        </div>

        {orderedImages.length > 1 && (
          <DialogFooter className="border-t border-gray-700/50 bg-black/80 backdrop-blur-sm p-0">
            <ScrollArea dir={direction} className="w-full">
              <div className="flex gap-2 p-3 justify-center min-w-max">
                {orderedImages.map((img) => (
                  <div
                    key={img.id}
                    className={cn(
                      'relative flex-shrink-0 w-12 h-12 sm:w-16 sm:h-16 rounded-lg overflow-hidden cursor-pointer transition-all hover:scale-105',
                      'border-2',
                      img.id === selectedImageForDialog.id
                        ? 'border-rose-400 ring-2 ring-rose-400/50'
                        : 'border-white/20 opacity-60 hover:opacity-100 hover:border-white/40'
                    )}
                    onClick={() => onImageSelect(img)}
                  >
                    <Image
                      src={getRelativeCloudinaryPath(img.url)}
                      alt={dict.thumbAlt}
                      fill
                      className="object-cover"
                      sizes="64px"
                    />
                  </div>
                ))}
              </div>
              <ScrollBar orientation="horizontal" />
            </ScrollArea>
          </DialogFooter>
        )}
      </DialogContent>
    </Dialog>
  );
};

const MobileTabNavigation: React.FC<{
  activeTab: string;
  tabItems: {
    value: string;
    label: string;
    shortLabel?: string;
    icon: React.ElementType;
    gradient: string;
  }[];
  onTabChange: (newTab: string) => void;
  THEME: ThemeType;
  dict: ProfileCardDisplayDict['mobileNav'];
  direction: 'ltr' | 'rtl';
}> = ({ activeTab, tabItems, onTabChange, THEME, dict, direction }) => {
  const currentIndex = useMemo(
    () => tabItems.findIndex((tab) => tab.value === activeTab),
    [tabItems, activeTab]
  );

  const prevTab = useMemo(
    () => (currentIndex > 0 ? tabItems[currentIndex - 1] : null),
    [tabItems, currentIndex]
  );
  const nextTab = useMemo(
    () =>
      currentIndex < tabItems.length - 1 ? tabItems[currentIndex + 1] : null,
    [tabItems, currentIndex]
  );

  if (!prevTab && !nextTab) {
    return null;
  }

  const baseButtonClasses =
    'flex-1 flex flex-col p-4 rounded-2xl shadow-md hover:shadow-lg transition-all duration-300 transform hover:-translate-y-1 focus:outline-none focus-visible:ring-2 focus-visible:ring-offset-2';

  const PrevIcon = direction === 'rtl' ? ChevronRight : ChevronLeft;
  const NextIcon = direction === 'rtl' ? ChevronLeft : ChevronRight;

  return (
    <div className="mt-8 pt-6 border-t border-gray-200/80 flex items-stretch justify-between gap-3 sm:gap-4 w-full">
      {prevTab ? (
        <button
          className={cn(
            baseButtonClasses,
            'items-start text-start',
            'bg-white border border-gray-200/80 hover:border-gray-300',
            'focus-visible:ring-gray-400'
          )}
          onClick={() => onTabChange(prevTab.value)}
        >
          <div className="flex items-center gap-2">
            <PrevIcon className="w-6 h-6 text-gray-400 flex-shrink-0" />
            <p className="text-xs font-medium text-gray-500">{dict.previous}</p>
          </div>
          <div className="flex items-center gap-2 mt-1.5">
            <prevTab.icon className="w-5 h-5 text-gray-600 flex-shrink-0" />
            <span className="text-base font-bold text-gray-800 text-start break-words min-w-0">
              {prevTab.label}
            </span>
          </div>
        </button>
      ) : (
        <div className="flex-1" />
      )}
      {nextTab ? (
        <button
          className={cn(
            baseButtonClasses,
            'items-end text-end',
            'bg-rose-50 border border-rose-200/80 hover:border-rose-300',
            'focus-visible:ring-rose-500'
          )}
          onClick={() => onTabChange(nextTab.value)}
        >
          <div className="flex items-center gap-2">
            <p className="text-xs font-medium text-rose-700">{dict.next}</p>
            <NextIcon className="w-6 h-6 text-rose-500 flex-shrink-0" />
          </div>
          <div className="flex items-center justify-end gap-2 mt-1.5">
            <span className="text-base font-bold text-rose-900 text-end break-words min-w-0">
              {nextTab.label}
            </span>
            <nextTab.icon className="w-5 h-5 text-rose-600 flex-shrink-0" />
          </div>
        </button>
      ) : (
        <div className="flex-1" />
      )}
    </div>
  );
};

// Main ProfileCard Component
const ProfileCard: React.FC<ProfileCardProps> = ({
  profile: profileData,
  isProfileComplete,
  candidate,
  images = [],
  questionnaire,
  viewMode = 'candidate',
  className,
  allCandidates = [],
  onCreateSuggestion,
  onClose,
  dict,
  locale,
}) => {
  const direction = locale === 'he' ? 'rtl' : 'ltr';

  const profile = useMemo(
    () => ({
      ...profileData,
      isProfileComplete,
    }),
    [profileData, isProfileComplete]
  );

  const displayDict = dict.display;

  const [isClient, setIsClient] = useState(false);
  const [isDesktop, setIsDesktop] = useState(true);
  const [selectedImageForDialog, setSelectedImageForDialog] =
    useState<UserImageType | null>(null);
  const [activeTab, setActiveTab] = useState('essence');
  const [isSuggestDialogOpen, setIsSuggestDialogOpen] = useState(false);
  const [mobileViewLayout, setMobileViewLayout] = useState<
    'focus' | 'detailed'
  >('focus');
  const [selectedPalette, setSelectedPalette] = useState<ColorPaletteName>(
    () => {
      return profile.gender === 'MALE' ? 'masculine' : 'feminine';
    }
  );

  const maritalStatusMap = useMemo(
    () => createMaritalStatusMap(dict.options.maritalStatus),
    [dict.options.maritalStatus]
  );
  const religiousLevelMap = useMemo(
    () => createReligiousLevelMap(dict.options.religiousLevel),
    [dict.options.religiousLevel]
  );
  const religiousJourneyMap = useMemo(
    () => createReligiousJourneyMap(dict.options.religiousJourney),
    [dict.options.religiousJourney]
  );
  const educationLevelMap = useMemo(
    () => createEducationLevelMap(dict.options.educationLevel),
    [dict.options.educationLevel]
  );
  const serviceTypeMap = useMemo(
    () =>
      createServiceTypeMap(
        dict.options.serviceType as Record<ServiceType, string>
      ),
    [dict.options.serviceType]
  );
  const headCoveringMap = useMemo(
    () =>
      createHeadCoveringMap(
        dict.options.headCovering as Record<HeadCoveringType, string>
      ),
    [dict.options.headCovering]
  );
  const kippahTypeMap = useMemo(
    () =>
      createKippahTypeMap(
        dict.options.kippahType as Record<KippahType, string>
      ),
    [dict.options.kippahType]
  );
  const contactPreferenceMap = useMemo(() => createContactPreferenceMap(), []);
  const characterTraitMap = useMemo(
    () => createCharacterTraitMap(dict.options.traits),
    [dict.options.traits]
  );
  const hobbiesMap = useMemo(
    () => createHobbiesMap(dict.options.hobbies),
    [dict.options.hobbies]
  );

  const activeTabRef = useRef(activeTab);

  useEffect(() => {
    activeTabRef.current = activeTab;
  }, [activeTab]);

  const handleTabChange = (newTab: string) => {
    if (activeTabRef.current === newTab) return;
    setActiveTab(newTab);
  };

  const THEME = useMemo(
    () => COLOR_PALETTES[selectedPalette],
    [selectedPalette]
  );

  const WORLDS: {
    [key: string]: {
      label: string;
      shortLabel?: string;
      icon: React.ElementType;
      gradient: string;
      description: string;
      accentColor: string;
    };
  } = useMemo(
    () => ({
      values: {
        ...displayDict.content.worlds.values,
        shortLabel: displayDict.tabs.journey.shortLabel,
        icon: BookMarked,
        gradient: THEME.colors.primary.accent,
        accentColor: 'blue',
      },
      personality: {
        ...displayDict.content.worlds.personality,
        shortLabel: displayDict.tabs.essence.shortLabel,
        icon: Sparkles,
        gradient: THEME.colors.primary.light,
        accentColor: 'purple',
      },
      relationship: {
        ...displayDict.content.worlds.relationship,
        shortLabel: displayDict.tabs.vision.shortLabel,
        icon: Heart,
        gradient: THEME.colors.primary.main,
        accentColor: 'rose',
      },
      partner: {
        ...displayDict.content.worlds.partner,
        shortLabel: displayDict.tabs.connection.shortLabel,
        icon: Users,
        gradient: THEME.colors.secondary.sky,
        accentColor: 'blue',
      },
      religion: {
        ...displayDict.content.worlds.religion,
        shortLabel: displayDict.tabs.spirit.shortLabel,
        icon: Star,
        gradient: THEME.colors.secondary.peach,
        accentColor: 'amber',
      },
      general: {
        ...displayDict.content.worlds.general,
        shortLabel: 'עוד',
        icon: FileText,
        gradient: THEME.colors.secondary.lavender,
        accentColor: 'purple',
      },
    }),
    [THEME, displayDict]
  );

  const hasAnyPreferences = useMemo(() => {
    return (
      (profile.preferredMaritalStatuses &&
        profile.preferredMaritalStatuses.length > 0) ||
      (profile.preferredReligiousLevels &&
        profile.preferredReligiousLevels.length > 0) ||
      (profile.preferredReligiousJourneys &&
        profile.preferredReligiousJourneys.length > 0) ||
      (profile.preferredEducation && profile.preferredEducation.length > 0) ||
      (profile.preferredOccupations &&
        profile.preferredOccupations.length > 0) ||
      (profile.preferredLocations && profile.preferredLocations.length > 0) ||
      (profile.preferredCharacterTraits &&
        profile.preferredCharacterTraits.length > 0) ||
      (profile.preferredHobbies && profile.preferredHobbies.length > 0)
    );
  }, [profile]);

  const orderedImages = useMemo(() => {
    const validImages = (images || []).filter((img) => img.url);
    const mainImg = validImages.find((img) => img.isMain);
    const otherImages = validImages.filter((img) => !img.isMain);
    return mainImg ? [mainImg, ...otherImages] : validImages;
  }, [images]);

  const mainImageToDisplay = useMemo(
    () => (orderedImages.length > 0 ? orderedImages[0] : null),
    [orderedImages]
  );
  const age = useMemo(
    () => calculateAge(profile.birthDate),
    [profile.birthDate]
  );

  const availability = useMemo(
    () =>
      formatAvailabilityStatus(
        profile.availabilityStatus,
        THEME,
        {
          ...displayDict.availability,
          mysterious: displayDict.placeholders.mysterious,
        },
        displayDict.header.availabilityBadge
      ),
    [profile.availabilityStatus, THEME, displayDict]
  );

  // Helper function to check if an answer has actual content
  const isRawValueAnswered = (value: FormattedAnswer['rawValue']): boolean => {
    if (value === null || value === undefined) return false;
    if (typeof value === 'string' && value.trim() === '') return false;
    if (Array.isArray(value) && value.length === 0) return false;
    if (
      typeof value === 'object' &&
      !Array.isArray(value) &&
      Object.keys(value).length === 0
    )
      return false;
    return true;
  };

  const getVisibleAnswers = useCallback(
    (world: keyof NonNullable<QuestionnaireResponse['formattedAnswers']>) => {
      if (!questionnaire?.formattedAnswers?.[world]) return [];
      return questionnaire.formattedAnswers[world].filter((a) => {
        const hasContent = isRawValueAnswered(a.rawValue);
        if (!hasContent) return false;
        if (viewMode === 'matchmaker') return true;
        return a.isVisible !== false;
      });
    },
    [questionnaire, viewMode]
  );

  const personalityAnswers = useMemo(
    () => getVisibleAnswers('personality'),
    [getVisibleAnswers]
  );
  const valuesAnswers = useMemo(
    () => getVisibleAnswers('values'),
    [getVisibleAnswers]
  );
  const relationshipAnswers = useMemo(
    () => getVisibleAnswers('relationship'),
    [getVisibleAnswers]
  );
  const partnerAnswers = useMemo(
    () => getVisibleAnswers('partner'),
    [getVisibleAnswers]
  );
  const religionAnswers = useMemo(
    () => getVisibleAnswers('religion'),
    [getVisibleAnswers]
  );

  const hasDisplayableQuestionnaireAnswers = useMemo(
    () =>
      [
        ...personalityAnswers,
        ...valuesAnswers,
        ...relationshipAnswers,
        ...partnerAnswers,
        ...religionAnswers,
      ].length > 0,
    [
      personalityAnswers,
      valuesAnswers,
      relationshipAnswers,
      partnerAnswers,
      religionAnswers,
    ]
  );

  const currentDialogImageIndex = useMemo(
    () =>
      selectedImageForDialog
        ? orderedImages.findIndex((img) => img.id === selectedImageForDialog.id)
        : -1,
    [selectedImageForDialog, orderedImages]
  );

  const handleOpenImageDialog = (image: UserImageType) =>
    image.url && setSelectedImageForDialog(image);
  const handleCloseImageDialog = () => setSelectedImageForDialog(null);

  const handleDialogNav = (navDirection: 'next' | 'prev') => {
    if (currentDialogImageIndex === -1 || orderedImages.length <= 1) return;
    const newIndex =
      (currentDialogImageIndex +
        (navDirection === 'next' ? 1 : -1) +
        orderedImages.length) %
      orderedImages.length;
    setSelectedImageForDialog(orderedImages[newIndex]);
  };

  const handleCreateSuggestion = async (data: CreateSuggestionData) => {
    if (onCreateSuggestion) {
      await onCreateSuggestion(data);
    }
    setIsSuggestDialogOpen(false);
  };

  const handleClose = () => {
    if (onClose) {
      onClose();
    }
  };

  const tabItems = useMemo(
    () =>
      [
        {
          value: 'essence',
          label: displayDict.tabs.essence.label,
          shortLabel: displayDict.tabs.essence.shortLabel,
          icon: Sparkles,
          gradient: THEME.colors.primary.light,
          hasContent:
            !!profile.profileHeadline ||
            !!profile.about ||
            personalityAnswers.length > 0 ||
            (profile.profileCharacterTraits &&
              profile.profileCharacterTraits.length > 0) ||
            (profile.profileHobbies && profile.profileHobbies.length > 0),
        },
        {
          value: 'journey',
          label: displayDict.tabs.journey.label,
          shortLabel: displayDict.tabs.journey.shortLabel,
          icon: Compass,
          gradient: THEME.colors.primary.accent,
          hasContent:
            valuesAnswers.length > 0 ||
            !!profile.educationLevel ||
            !!profile.occupation ||
            !!profile.serviceType ||
            !!profile.parentStatus,
        },
        {
          value: 'spirit',
          label: displayDict.tabs.spirit.label,
          shortLabel: displayDict.tabs.spirit.shortLabel,
          icon: Star,
          gradient: THEME.colors.secondary.peach,
          hasContent:
            religionAnswers.length > 0 ||
            !!profile.religiousLevel ||
            !!profile.religiousJourney ||
            !!profile.influentialRabbi,
        },
        {
          value: 'vision',
          label: displayDict.tabs.vision.label,
          shortLabel: displayDict.tabs.vision.shortLabel,
          icon: Heart,
          gradient: THEME.colors.primary.main,
          hasContent:
            relationshipAnswers.length > 0 ||
            !!profile.matchingNotes?.trim() ||
            !!profile.inspiringCoupleStory?.trim(),
        },
        {
          value: 'connection',
          label: displayDict.tabs.connection.label,
          shortLabel: displayDict.tabs.connection.shortLabel,
          icon: Target,
          gradient: THEME.colors.secondary.sky,
          hasContent: hasAnyPreferences || partnerAnswers.length > 0,
        },
        viewMode === 'matchmaker' && {
          value: 'professional',
          label: displayDict.tabs.professional.label,
          shortLabel: displayDict.tabs.professional.shortLabel,
          icon: Lock,
          gradient: THEME.colors.secondary.lavender,
          hasContent: true,
        },
      ].filter(Boolean) as {
        value: string;
        label: string;
        shortLabel?: string;
        icon: React.ElementType;
        gradient: string;
        hasContent: boolean;
      }[],
    [
      THEME,
      profile,
      hasAnyPreferences,
      viewMode,
      personalityAnswers,
      valuesAnswers,
      relationshipAnswers,
      partnerAnswers,
      religionAnswers,
      displayDict,
    ]
  );

  const renderPreferenceBadges = (
    title: string,
    icon: React.ElementType,
    values: string[] | undefined,
    translationMap: {
      [key: string]: {
        label: string;
        shortLabel?: string;
        icon: React.ElementType;
        color: string;
      };
    },
    gradientClass: string = THEME.colors.secondary.sky,
    compact: boolean = false
  ) => {
    if (!values || values.length === 0) {
      return null;
    }

    const IconComponent = icon;
    return (
      <div className="space-y-3 sm:space-y-4 min-w-0 max-w-full overflow-hidden">
        <div className="flex items-center gap-2 sm:gap-3 min-w-0">
          <div
            className={cn(
              'flex-shrink-0 rounded-lg',
              compact ? 'p-1.5' : 'p-1.5 sm:p-2',
              `bg-gradient-to-r ${gradientClass}`
            )}
          >
            <IconComponent
              className={cn(
                'text-white',
                compact ? 'w-4 h-4' : 'w-4 h-4 sm:w-5 sm:h-5'
              )}
            />
          </div>
          <h4
            className={cn(
              'font-bold text-gray-800 break-words hyphens-auto word-break-break-word min-w-0 flex-1 overflow-wrap-anywhere',
              compact ? 'text-sm' : 'text-sm sm:text-base'
            )}
          >
            {title}
          </h4>
        </div>
        <div className="flex flex-wrap gap-2 sm:gap-3 min-w-0 max-w-full">
          {values.map((val) => {
            const itemData = translationMap[val] || {
              label: val,
              shortLabel: val.length > 12 ? val.substring(0, 12) + '...' : val,
              icon: Sparkles,
              color: 'text-gray-600',
            };
            return (
              <Badge
                key={val}
                variant="outline"
                className={cn(
                  'flex items-center font-semibold border-2 min-w-0 max-w-full transition-all hover:scale-105 active:scale-95',
                  compact
                    ? 'gap-1 px-2 py-1 text-xs'
                    : 'gap-1 sm:gap-2 px-2 py-1 sm:px-3 sm:py-2 text-xs sm:text-sm',
                  'bg-white hover:bg-gray-50 border-gray-200 hover:border-rose-300',
                  THEME.shadows.soft,
                  'break-words hyphens-auto word-break-break-word overflow-wrap-anywhere'
                )}
              >
                <itemData.icon
                  className={cn(
                    'flex-shrink-0',
                    compact ? 'w-3 h-3' : 'w-3 h-3 sm:w-4 sm:h-4',
                    itemData.color
                  )}
                />
                <span className="break-words overflow-hidden min-w-0">
                  {compact && itemData.shortLabel
                    ? itemData.shortLabel
                    : itemData.label}
                </span>
              </Badge>
            );
          })}
        </div>
      </div>
    );
  };

  const QuestionnaireItem: React.FC<{
    answer: FormattedAnswer;
    worldName: string;
    worldColor?: string;
    worldGradient?: string;
    compact?: boolean;
    direction: 'ltr' | 'rtl';
  }> = ({
    answer,
    worldName,
    worldColor = 'rose',
    worldGradient,
    compact = false,
    direction,
  }) => {
    return (
      <div
        className={cn(
          'rounded-xl border transition-all duration-300 hover:shadow-lg overflow-hidden',
          compact ? 'p-3 sm:p-4' : 'p-4 sm:p-5',
          'bg-gradient-to-br from-white to-gray-50/30 max-w-full min-w-0',
          `border-${worldColor}-200 hover:border-${worldColor}-300`
        )}
      >
        <div className="flex items-start gap-3 sm:gap-4 min-w-0">
          <div
            className={cn(
              'flex-shrink-0 rounded-lg text-white shadow-md',
              compact ? 'p-2' : 'p-2 sm:p-3',
              worldGradient
                ? `bg-gradient-to-r ${worldGradient}`
                : `bg-gradient-to-r from-${worldColor}-400 to-${worldColor}-500`
            )}
          >
            <Quote
              className={cn(compact ? 'w-4 h-4' : 'w-4 h-4 sm:w-5 sm:h-5')}
            />
          </div>
          <div className="flex-1 min-w-0 overflow-hidden">
            <h4
              dir="auto"
              className={cn(
                'font-bold mb-2 sm:mb-3 text-gray-800 leading-relaxed',
                'flex items-center justify-between gap-2 text-start',
                compact ? 'text-sm' : 'text-sm sm:text-base'
              )}
            >
              <span className="flex-1 break-words ...">
                <span className="sr-only">
                  {displayDict.content.questionnaire.questionFromCategory.replace(
                    '{{worldName}}',
                    worldName
                  )}{' '}
                </span>
                {answer.question}
              </span>
              {answer.isVisible === false && (
                <TooltipProvider>
                  <Tooltip>
                    <TooltipTrigger asChild>
                      <div className="flex-shrink-0 flex items-center gap-1 bg-amber-100 text-amber-800 px-2 py-1 rounded-full text-xs cursor-default">
                        <Lock className="w-3 h-3" />
                        <span>
                          {displayDict.content.questionnaire.confidential}
                        </span>
                      </div>
                    </TooltipTrigger>
                    <TooltipContent side="top">
                      <p>
                        {displayDict.content.questionnaire.confidentialTooltip}
                      </p>
                    </TooltipContent>
                  </Tooltip>
                </TooltipProvider>
              )}
            </h4>
            <div
              className={cn(
                'rounded-lg bg-white/60 overflow-hidden',
                compact ? 'p-3' : 'p-3 sm:p-4',
                direction === 'rtl'
                  ? `border-r-4 border-${worldColor}-400`
                  : `border-l-4 border-${worldColor}-400`
              )}
            >
              {answer.questionType === 'budgetAllocation' &&
              typeof answer.rawValue === 'object' &&
              answer.rawValue &&
              !Array.isArray(answer.rawValue) ? (
                <BudgetDisplay
                  data={answer.rawValue as Record<string, number>}
                  dict={dict.budgetDisplay}
                  locale={locale}
                />
              ) : (
                <p
                  className={cn(
                    'text-gray-700 leading-relaxed italic break-words hyphens-auto word-break-break-word overflow-wrap-anywhere',
                    compact ? 'text-sm' : 'text-sm sm:text-base'
                  )}
                >
                  <Quote
                    className={cn(
                      'w-3 h-3 sm:w-4 sm:h-4 inline text-gray-400 flex-shrink-0',
                      direction === 'rtl' ? 'ml-1' : 'mr-1'
                    )}
                  />
                  {answer.displayText}
                  <Quote
                    className={cn(
                      'w-3 h-3 sm:w-4 sm:h-4 inline text-gray-400 transform rotate-180 flex-shrink-0',
                      direction === 'rtl' ? 'mr-1' : 'ml-1'
                    )}
                  />
                </p>
              )}
            </div>
          </div>
        </div>
      </div>
    );
  };

  useEffect(() => {
    setIsClient(true);
    const checkScreenSize = () => setIsDesktop(window.innerWidth >= 1024);
    checkScreenSize();
    window.addEventListener('resize', checkScreenSize);

    return () => {
      window.removeEventListener('resize', checkScreenSize);
    };
  }, []);

  const MainContentTabs = () => {
    const activeTabConfig = tabItems.find((tab) => tab.value === activeTab);

    // --- START: Refactored Logic for Content Slicing ---
    const getTabContent = (
      answers: FormattedAnswer[]
    ): {
      hookAnswer: FormattedAnswer | undefined;
      deeperAnswers: FormattedAnswer[];
    } => {
      if (!answers || answers.length === 0) {
        return { hookAnswer: undefined, deeperAnswers: [] };
      }
      return {
        hookAnswer: answers[0],
        deeperAnswers: answers.slice(1),
      };
    };

    const personalityContent = getTabContent(personalityAnswers);
    const valuesContent = getTabContent(valuesAnswers);
    const religionContent = getTabContent(religionAnswers);
    const relationshipContent = getTabContent(relationshipAnswers);
    const partnerContent = getTabContent(partnerAnswers);
    // --- END: Refactored Logic for Content Slicing ---

    return (
      <Tabs
        value={activeTab}
        onValueChange={handleTabChange}
        className="w-full flex flex-col flex-1 min-h-0 max-w-full overflow-hidden"
      >
        <div
          className={cn(
            'bg-white/95 backdrop-blur-md rounded-2xl border border-gray-200/50 overflow-hidden sticky top-0 z-20',
            'mb-3 sm:mb-4 md:mb-6 p-1 sm:p-2',
            THEME.shadows.elegant
          )}
        >
          <ScrollArea
            className="w-full max-w-full overflow-hidden"
            dir={direction}
          >
            <div className="flex gap-0.5 sm:gap-1 justify-center min-w-max px-2 sm:px-4">
              {tabItems.map((tab) => (
                <button
                  key={tab.value}
                  onClick={() => handleTabChange(tab.value)}
                  className={cn(
                    'flex flex-col items-center gap-1 rounded-xl flex-shrink-0 transition-all duration-300 border border-transparent',
                    'text-gray-600 hover:text-gray-800 hover:bg-rose-50',
                    'min-w-[50px] min-h-[44px] touch-manipulation',
                    'sm:min-w-[60px] md:min-w-[80px]',
                    'px-1.5 py-1.5 sm:px-2 sm:py-2 md:px-3 md:py-2',
                    'text-xs sm:text-sm font-semibold',
                    !tab.hasContent && 'opacity-50 cursor-not-allowed',
                    activeTab === tab.value &&
                      cn(
                        'font-bold text-white shadow-lg border-white/20',
                        `bg-gradient-to-r ${tab.gradient}`
                      )
                  )}
                  disabled={!tab.hasContent}
                >
                  <tab.icon className="w-3 h-3 sm:w-4 sm:h-4 flex-shrink-0" />
                  <span className="leading-tight text-center break-words hyphens-auto word-break-break-word max-w-full">
                    {typeof window !== 'undefined' &&
                    window.innerWidth < 640 &&
                    tab.shortLabel
                      ? tab.shortLabel
                      : tab.label}
                  </span>
                </button>
              ))}
            </div>
            <ScrollBar orientation="horizontal" className="mt-1" />
          </ScrollArea>
        </div>
        <ScrollArea
          id="profile-card-tabs-content"
          className="flex-1 overflow-auto h-full max-w-full"
        >
          <div className="space-y-3 sm:space-y-4 md:space-y-6 p-1 sm:p-2 min-w-0 max-w-full">
            {!(activeTabConfig && activeTabConfig.hasContent) && (
              <EmptyState
                icon={Telescope}
                title={displayDict.content.emptyStateTitle}
                description={displayDict.content.emptyStateDescription}
                variant="discovery"
              />
            )}

            {/* Essence Tab - REFACTORED */}
            <TabsContent value="essence" className="mt-0 max-w-full min-w-0">
              <div className="space-y-6 sm:space-y-8 max-w-full min-w-0">
                {personalityContent.hookAnswer && (
                  <QuestionnaireItem
                    answer={personalityContent.hookAnswer}
                    worldName={WORLDS.personality.label}
                    worldColor={WORLDS.personality.accentColor}
                    worldGradient={WORLDS.personality.gradient}
                    direction={direction}
                  />
                )}
                {profile.profileHeadline && (
                  <SectionCard
                    title={displayDict.content.openingSentence}
                    icon={Quote}
                    variant="highlight"
                    gradient={THEME.colors.primary.main}
                  >
                    <p className="text-center text-lg italic font-semibold text-gray-700">
                      &quot;{profile.profileHeadline}&quot;
                    </p>
                  </SectionCard>
                )}
                {profile.about && (
                  <SectionCard
                    title={displayDict.content.aboutMe}
                    subtitle={displayDict.content.aboutMeSubtitle.replace(
                      '{{name}}',
                      profile.user?.firstName || 'המועמד/ת'
                    )}
                    icon={Heart}
                    variant="romantic"
                    gradient={THEME.colors.primary.main}
                  >
                    <div
                      className={cn(
                        'relative p-4 sm:p-6 rounded-2xl border border-rose-200/50 max-w-full min-w-0 overflow-hidden',
                        `bg-gradient-to-r ${THEME.colors.neutral.warm}`,
                        THEME.shadows.soft
                      )}
                    >
                      <Quote className="absolute top-3 end-3 w-6 h-6 sm:w-8 sm:h-8 text-rose-300" />
                      <p className="text-base sm:text-lg text-gray-800 leading-relaxed italic font-medium text-center lg:text-start break-words hyphens-auto word-break-break-word overflow-wrap-anywhere">
                        {profile.about}
                      </p>
                      <Quote className="absolute bottom-3 start-3 w-6 h-6 sm:w-8 sm:h-8 text-rose-300 transform rotate-180" />
                    </div>
                  </SectionCard>
                )}
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4 sm:gap-6 max-w-full min-w-0">
                  {profile.profileCharacterTraits &&
                    profile.profileCharacterTraits.length > 0 && (
                      <SectionCard
                        title={displayDict.content.whatMakesMeSpecial}
                        subtitle={displayDict.content.myTraits}
                        icon={Sparkles}
                        variant="elegant"
                        gradient={THEME.colors.primary.light}
                      >
                        <div className="flex flex-wrap gap-2 sm:gap-3">
                          {profile.profileCharacterTraits.map((trait) => {
                            const traitData = formatEnumValue(
                              trait,
                              characterTraitMap,
                              trait
                            );
                            return (
                              <Badge
                                key={trait}
                                className={cn(
                                  'flex items-center gap-1 sm:gap-2 px-3 sm:px-4 py-1.5 sm:py-2 font-semibold text-xs sm:text-sm',
                                  'bg-gradient-to-r from-purple-100 to-pink-100 text-purple-800',
                                  'border border-purple-200 rounded-full hover:scale-105 transition-transform',
                                  THEME.shadows.soft
                                )}
                              >
                                <traitData.icon
                                  className={cn(
                                    'w-3 h-3 sm:w-4 sm:h-4 flex-shrink-0',
                                    traitData.color
                                  )}
                                />
                                <span>{traitData.label}</span>
                              </Badge>
                            );
                          })}
                        </div>
                      </SectionCard>
                    )}
                  {profile.profileHobbies &&
                    profile.profileHobbies.length > 0 && (
                      <SectionCard
                        title={displayDict.content.whatFillsMySoul}
                        subtitle={displayDict.content.myHobbies}
                        icon={Heart}
                        variant="elegant"
                        gradient={THEME.colors.secondary.sage}
                      >
                        <div className="flex flex-wrap gap-2 sm:gap-3">
                          {profile.profileHobbies.map((hobby) => {
                            const hobbyData = formatEnumValue(
                              hobby,
                              hobbiesMap,
                              hobby
                            );
                            return (
                              <Badge
                                key={hobby}
                                className={cn(
                                  'flex items-center gap-1 sm:gap-2 px-3 sm:px-4 py-1.5 sm:py-2 font-semibold text-xs sm:text-sm',
                                  'bg-gradient-to-r from-emerald-100 to-cyan-100 text-emerald-800',
                                  'border border-emerald-200 rounded-full hover:scale-105 transition-transform',
                                  THEME.shadows.soft
                                )}
                              >
                                <hobbyData.icon
                                  className={cn(
                                    'w-3 h-3 sm:w-4 sm:h-4 flex-shrink-0',
                                    hobbyData.color
                                  )}
                                />
                                <span>{hobbyData.label}</span>
                              </Badge>
                            );
                          })}
                        </div>
                      </SectionCard>
                    )}
                </div>
                {personalityContent.deeperAnswers.length > 0 && (
                  <SectionCard
                    title={displayDict.content.deepDivePersonality}
                    subtitle={displayDict.content.moreAnswersPersonality}
                    icon={Telescope}
                    variant="elegant"
                    gradient={WORLDS.personality.gradient}
                  >
                    <div className="grid grid-cols-1 gap-4 sm:gap-6">
                      {personalityContent.deeperAnswers.map((answer) => (
                        <QuestionnaireItem
                          key={answer.questionId}
                          answer={answer}
                          worldName={WORLDS.personality.label}
                          worldColor={WORLDS.personality.accentColor}
                          worldGradient={WORLDS.personality.gradient}
                          direction={direction}
                        />
                      ))}
                    </div>
                  </SectionCard>
                )}
                {!isDesktop && mobileViewLayout === 'detailed' && (
                  <MobileTabNavigation
                    activeTab={activeTab}
                    tabItems={tabItems}
                    onTabChange={handleTabChange}
                    THEME={THEME}
                    dict={displayDict.mobileNav}
                    direction={direction}
                  />
                )}
              </div>
            </TabsContent>

            {/* Journey Tab - REFACTORED */}
            <TabsContent
              value="journey"
              className="mt-0 space-y-4 sm:space-y-6 max-w-full min-w-0"
            >
              <div className="space-y-6 sm:space-y-8 max-w-full min-w-0">
                {valuesContent.hookAnswer && (
                  <QuestionnaireItem
                    answer={valuesContent.hookAnswer}
                    worldName={WORLDS.values.label}
                    worldColor={WORLDS.values.accentColor}
                    worldGradient={WORLDS.values.gradient}
                    direction={direction}
                  />
                )}
                <div className="grid grid-cols-1 lg:grid-cols-2 gap-6 sm:gap-8">
                  <SectionCard
                    title={displayDict.content.educationAndCareer}
                    subtitle={displayDict.content.academicAndProfessionalPath}
                    icon={GraduationCap}
                    variant="elegant"
                    gradient={THEME.colors.secondary.sky}
                  >
                    <div className="space-y-4 sm:space-y-5">
                      <DetailItem
                        icon={GraduationCap}
                        label={displayDict.content.detailLabels.educationLevel}
                        value={
                          formatEnumValue(
                            profile.educationLevel,
                            educationLevelMap,
                            displayDict.placeholders.willDiscover
                          ).label
                        }
                        variant="highlight"
                        textAlign="start"
                        placeholder={displayDict.placeholders.willDiscover}
                      />
                      {profile.education && (
                        <DetailItem
                          icon={BookOpen}
                          label={
                            displayDict.content.detailLabels.educationDetails
                          }
                          value={profile.education}
                          variant="elegant"
                          valueClassName="whitespace-pre-wrap"
                          placeholder={displayDict.placeholders.willDiscover}
                        />
                      )}
                      <DetailItem
                        icon={Briefcase}
                        label={
                          displayDict.content.detailLabels.professionalField
                        }
                        value={
                          profile.occupation ||
                          displayDict.placeholders.professionWaiting
                        }
                        variant="elegant"
                        textAlign="start"
                        placeholder={displayDict.placeholders.willDiscover}
                      />
                      <DetailItem
                        icon={Award}
                        label={displayDict.content.detailLabels.militaryService}
                        value={
                          formatEnumValue(
                            profile.serviceType,
                            serviceTypeMap,
                            displayDict.placeholders.willDiscover
                          ).label
                        }
                        variant="elegant"
                        textAlign="start"
                        placeholder={displayDict.placeholders.willDiscover}
                      />
                      {profile.serviceDetails && (
                        <DetailItem
                          icon={InfoIcon}
                          label={
                            displayDict.content.detailLabels.serviceDetails
                          }
                          value={profile.serviceDetails}
                          variant="elegant"
                          valueClassName="whitespace-pre-wrap"
                          placeholder={displayDict.placeholders.willDiscover}
                        />
                      )}
                    </div>
                  </SectionCard>
                  <SectionCard
                    title={displayDict.content.familyAndCulturalBackground}
                    subtitle={displayDict.content.familyThatShapedMe}
                    icon={Users2}
                    variant="romantic"
                    gradient={THEME.colors.primary.accent}
                  >
                    <div className="grid grid-cols-1 sm:grid-cols-2 gap-4 sm:gap-5">
                      <DetailItem
                        icon={Users2}
                        label={displayDict.content.detailLabels.parentStatus}
                        value={
                          profile.parentStatus ||
                          displayDict.placeholders.willDiscover
                        }
                        variant="elegant"
                        textAlign="start"
                        placeholder={displayDict.placeholders.willDiscover}
                      />
                      {profile.fatherOccupation && (
                        <DetailItem
                          icon={Briefcase}
                          label={
                            displayDict.content.detailLabels.fatherOccupation
                          }
                          value={profile.fatherOccupation}
                          variant="elegant"
                          textAlign="start"
                          placeholder={displayDict.placeholders.willDiscover}
                        />
                      )}
                      {profile.motherOccupation && (
                        <DetailItem
                          icon={Briefcase}
                          label={
                            displayDict.content.detailLabels.motherOccupation
                          }
                          value={profile.motherOccupation}
                          variant="elegant"
                          textAlign="start"
                          placeholder={displayDict.placeholders.willDiscover}
                        />
                      )}
                      <DetailItem
                        icon={Users}
                        label={displayDict.content.detailLabels.siblings}
                        value={
                          profile.siblings
                            ? `${profile.siblings} אחים/אחיות`
                            : displayDict.placeholders.willDiscover
                        }
                        variant="elegant"
                        textAlign="start"
                        placeholder={displayDict.placeholders.willDiscover}
                      />
                      <DetailItem
                        icon={Crown}
                        label={displayDict.content.detailLabels.birthOrder}
                        value={
                          profile.position
                            ? `מקום ${profile.position}`
                            : displayDict.placeholders.willDiscover
                        }
                        variant="elegant"
                        textAlign="start"
                        placeholder={displayDict.placeholders.willDiscover}
                      />
                      {profile.aliyaCountry && (
                        <DetailItem
                          icon={Globe}
                          label={
                            displayDict.content.detailLabels.countryOfOrigin
                          }
                          value={`${profile.aliyaCountry} - השורשים שלי`}
                          variant="elegant"
                          textAlign="start"
                          placeholder={displayDict.placeholders.willDiscover}
                        />
                      )}
                      {profile.aliyaYear && (
                        <DetailItem
                          icon={Calendar}
                          label={displayDict.content.detailLabels.aliyaYear}
                          value={`${profile.aliyaYear} - הגעתי הביתה`}
                          variant="elegant"
                          textAlign="start"
                          placeholder={displayDict.placeholders.willDiscover}
                        />
                      )}
                    </div>
                  </SectionCard>
                </div>
                {valuesContent.deeperAnswers.length > 0 && (
                  <SectionCard
                    title={displayDict.content.valuesAndPrinciples}
                    subtitle={displayDict.content.answersOnWhatMatters}
                    icon={BookMarked}
                    variant="elegant"
                    gradient={WORLDS.values.gradient}
                  >
                    <div className="grid grid-cols-1 gap-4 sm:gap-6">
                      {valuesContent.deeperAnswers.map((answer) => (
                        <QuestionnaireItem
                          key={answer.questionId}
                          answer={answer}
                          worldName={WORLDS.values.label}
                          worldColor={WORLDS.values.accentColor}
                          worldGradient={WORLDS.values.gradient}
                          direction={direction}
                        />
                      ))}
                    </div>
                  </SectionCard>
                )}
                {!isDesktop && mobileViewLayout === 'detailed' && (
                  <MobileTabNavigation
                    activeTab={activeTab}
                    tabItems={tabItems}
                    onTabChange={handleTabChange}
                    THEME={THEME}
                    dict={displayDict.mobileNav}
                    direction={direction}
                  />
                )}
              </div>
            </TabsContent>

            {/* Spirit Tab - NEW & REFACTORED */}
            <TabsContent
              value="spirit"
              className="mt-0 space-y-4 sm:space-y-6 max-w-full min-w-0"
            >
              <div className="space-y-6 sm:space-y-8 max-w-full min-w-0">
                {religionContent.hookAnswer && (
                  <QuestionnaireItem
                    answer={religionContent.hookAnswer}
                    worldName={WORLDS.religion.label}
                    worldColor={WORLDS.religion.accentColor}
                    worldGradient={WORLDS.religion.gradient}
                    direction={direction}
                  />
                )}
                <SectionCard
                  title={displayDict.content.myConnectionToJudaism}
                  subtitle={displayDict.content.faithAndTraditionInMyLife}
                  icon={BookMarked}
                  variant="elegant"
                  gradient={THEME.colors.primary.gold}
                >
                  <div className="space-y-4 sm:space-y-5">
                    <DetailItem
                      icon={BookMarked}
                      label="השקפת העולם שמנחה אותי"
                      value={
                        formatEnumValue(
                          profile.religiousLevel,
                          religiousLevelMap,
                          displayDict.placeholders.willDiscover
                        ).label
                      }
                      variant="highlight"
                      textAlign="start"
                      placeholder={displayDict.placeholders.willDiscover}
                    />
                    {profile.religiousJourney && (
                      <DetailItem
                        icon={Compass}
                        label={
                          displayDict.content.detailLabels.religiousJourney
                        }
                        value={
                          formatEnumValue(
                            profile.religiousJourney,
                            religiousJourneyMap,
                            displayDict.placeholders.willDiscover
                          ).label
                        }
                        variant="elegant"
                        textAlign="start"
                        placeholder={displayDict.placeholders.willDiscover}
                      />
                    )}
                    <DetailItem
                      icon={Heart}
                      label={displayDict.content.detailLabels.shomerNegiah}
                      value={
                        formatBooleanPreference(
                          profile.shomerNegiah,
                          {
                            ...displayDict.booleanPrefs,
                            willDiscover: displayDict.placeholders.willDiscover,
                          },
                          true
                        ).label
                      }
                      variant="elegant"
                      textAlign="start"
                      placeholder={displayDict.placeholders.willDiscover}
                    />
                    {profile.gender === 'FEMALE' && profile.headCovering && (
                      <DetailItem
                        icon={Crown}
                        label={displayDict.content.detailLabels.headCovering}
                        value={
                          formatEnumValue(
                            profile.headCovering,
                            headCoveringMap,
                            displayDict.placeholders.willDiscover
                          ).label
                        }
                        variant="elegant"
                        textAlign="start"
                        placeholder={displayDict.placeholders.willDiscover}
                      />
                    )}
                    {profile.gender === 'MALE' && profile.kippahType && (
                      <DetailItem
                        icon={Crown}
                        label={displayDict.content.detailLabels.kippahType}
                        value={
                          formatEnumValue(
                            profile.kippahType,
                            kippahTypeMap,
                            displayDict.placeholders.willDiscover
                          ).label
                        }
                        variant="elegant"
                        textAlign="start"
                        placeholder={displayDict.placeholders.willDiscover}
                      />
                    )}
                  </div>
                </SectionCard>
                {profile.influentialRabbi && (
                  <SectionCard
                    title={displayDict.content.inspiringSpiritualFigure}
                    icon={Lightbulb}
                    variant="elegant"
                    gradient={THEME.colors.primary.gold}
                  >
                    <div
                      className={cn(
                        'p-4 sm:p-6 rounded-2xl border border-amber-200',
                        `bg-gradient-to-r ${THEME.colors.neutral.warm}`
                      )}
                    >
                      <p className="text-amber-800 leading-relaxed italic">
                        &quot;{profile.influentialRabbi}&quot;
                      </p>
                    </div>
                  </SectionCard>
                )}
                {religionContent.deeperAnswers.length > 0 && (
                  <SectionCard
                    title={displayDict.content.myReligiousAndSpiritualWorld}
                    subtitle={displayDict.content.answersOnFaith}
                    icon={Star}
                    variant="elegant"
                    gradient={WORLDS.religion.gradient}
                  >
                    <div className="grid grid-cols-1 gap-4 sm:gap-6">
                      {religionContent.deeperAnswers.map((answer) => (
                        <QuestionnaireItem
                          key={answer.questionId}
                          answer={answer}
                          worldName={WORLDS.religion.label}
                          worldColor={WORLDS.religion.accentColor}
                          worldGradient={WORLDS.religion.gradient}
                          direction={direction}
                        />
                      ))}
                    </div>
                  </SectionCard>
                )}
                {!isDesktop && mobileViewLayout === 'detailed' && (
                  <MobileTabNavigation
                    activeTab={activeTab}
                    tabItems={tabItems}
                    onTabChange={handleTabChange}
                    THEME={THEME}
                    dict={displayDict.mobileNav}
                    direction={direction}
                  />
                )}
              </div>
            </TabsContent>

            {/* Vision Tab - REFACTORED */}
            <TabsContent
              value="vision"
              className="mt-0 space-y-4 sm:space-y-6 max-w-full min-w-0"
            >
              <div className="space-y-6 sm:space-y-8 max-w-full min-w-0">
                {relationshipContent.hookAnswer && (
                  <QuestionnaireItem
                    answer={relationshipContent.hookAnswer}
                    worldName={WORLDS.relationship.label}
                    worldColor={WORLDS.relationship.accentColor}
                    worldGradient={WORLDS.relationship.gradient}
                    direction={direction}
                  />
                )}
                {profile.matchingNotes && (
                  <SectionCard
                    title={displayDict.content.myDreamRelationship}
                    icon={Heart}
                    variant="romantic"
                    gradient={THEME.colors.primary.main}
                  >
                    <div
                      className={cn(
                        'p-4 sm:p-6 rounded-2xl border border-rose-200 max-w-full min-w-0 overflow-hidden',
                        `bg-gradient-to-r ${THEME.colors.neutral.warm}`,
                        THEME.shadows.soft
                      )}
                    >
                      <p className="text-rose-700 leading-relaxed whitespace-pre-wrap italic text-base sm:text-lg break-words hyphens-auto word-break-break-word overflow-wrap-anywhere">
                        <Quote
                          className={cn(
                            'w-4 h-4 sm:w-5 sm:h-5 inline text-rose-400 flex-shrink-0',
                            direction === 'rtl' ? 'ml-1' : 'mr-1'
                          )}
                        />
                        {profile.matchingNotes}
                        <Quote
                          className={cn(
                            'w-4 h-4 sm:w-5 sm:h-5 inline text-rose-400 transform rotate-180 flex-shrink-0',
                            direction === 'rtl' ? 'mr-1' : 'ml-1'
                          )}
                        />
                      </p>
                    </div>
                  </SectionCard>
                )}
                {profile.inspiringCoupleStory && (
                  <SectionCard
                    title={displayDict.content.myRoleModelForRelationship}
                    subtitle={displayDict.content.theCoupleThatInspiresMe}
                    icon={Stars}
                    variant="elegant"
                    gradient={THEME.colors.primary.gold}
                  >
                    <div
                      className={cn(
                        'p-4 sm:p-6 rounded-2xl border border-amber-200',
                        `bg-gradient-to-r ${THEME.colors.neutral.warm}`
                      )}
                    >
                      <p className="text-amber-800 leading-relaxed italic">
                        &quot;{profile.inspiringCoupleStory}&quot;
                      </p>
                    </div>
                  </SectionCard>
                )}
                {relationshipContent.deeperAnswers.length > 0 && (
                  <SectionCard
                    title={displayDict.content.moreOnMyVision}
                    subtitle={displayDict.content.answersOnLoveAndFamily}
                    icon={Heart}
                    variant="romantic"
                    gradient={WORLDS.relationship.gradient}
                  >
                    <div className="grid grid-cols-1 gap-4 sm:gap-6">
                      {relationshipContent.deeperAnswers.map((answer) => (
                        <QuestionnaireItem
                          key={answer.questionId}
                          answer={answer}
                          worldName={WORLDS.relationship.label}
                          worldColor={WORLDS.relationship.accentColor}
                          worldGradient={WORLDS.relationship.gradient}
                          direction={direction}
                        />
                      ))}
                    </div>
                  </SectionCard>
                )}
                {!isDesktop && mobileViewLayout === 'detailed' && (
                  <MobileTabNavigation
                    activeTab={activeTab}
                    tabItems={tabItems}
                    onTabChange={handleTabChange}
                    THEME={THEME}
                    dict={displayDict.mobileNav}
                    direction={direction}
                  />
                )}
              </div>
            </TabsContent>

            {/* Connection Tab - REFACTORED */}
            <TabsContent
              value="connection"
              className="mt-0 space-y-4 sm:space-y-6 max-w-full min-w-0"
            >
              <div className="space-y-6 sm:space-y-8 max-w-full min-w-0">
                {partnerContent.hookAnswer && (
                  <QuestionnaireItem
                    answer={partnerContent.hookAnswer}
                    worldName={WORLDS.partner.label}
                    worldColor={WORLDS.partner.accentColor}
                    worldGradient={WORLDS.partner.gradient}
                    direction={direction}
                  />
                )}
                {hasAnyPreferences ? (
                  <SectionCard
                    title={displayDict.content.matchingPreferences}
                    subtitle={displayDict.content.whatHelpsFindConnection}
                    icon={Filter}
                    variant="default"
                  >
                    <div className="space-y-6 sm:space-y-8">
                      {renderPreferenceBadges(
                        displayDict.content.maritalStatuses,
                        Heart,
                        profile.preferredMaritalStatuses,
                        maritalStatusMap,
                        THEME.colors.primary.main
                      )}
                      {renderPreferenceBadges(
                        displayDict.content.religiousLevels,
                        BookMarked,
                        profile.preferredReligiousLevels,
                        religiousLevelMap,
                        THEME.colors.secondary.peach
                      )}
                      {renderPreferenceBadges(
                        displayDict.content.partnerReligiousJourney,
                        Compass,
                        profile.preferredReligiousJourneys as string[],
                        religiousJourneyMap,
                        THEME.colors.secondary.sage
                      )}
                      {renderPreferenceBadges(
                        displayDict.content.educationLevels,
                        GraduationCap,
                        profile.preferredEducation,
                        educationLevelMap,
                        THEME.colors.secondary.sky
                      )}
                    </div>
                  </SectionCard>
                ) : (
                  !partnerContent.hookAnswer &&
                  partnerContent.deeperAnswers.length === 0 && (
                    <EmptyState
                      icon={Compass}
                      title={displayDict.content.emptyPrefsTitle}
                      description={displayDict.content.emptyPrefsDescription}
                      variant="discovery"
                    />
                  )
                )}
                {partnerContent.deeperAnswers.length > 0 && (
                  <SectionCard
                    title={displayDict.content.howIVisionMyPartner}
                    subtitle={displayDict.content.moreAnswersAboutPartner}
                    icon={Target}
                    variant="elegant"
                    gradient={WORLDS.partner.gradient}
                  >
                    <div className="grid grid-cols-1 gap-4 sm:gap-6">
                      {partnerContent.deeperAnswers.map((answer) => (
                        <QuestionnaireItem
                          key={answer.questionId}
                          answer={answer}
                          worldName={WORLDS.partner.label}
                          worldColor={WORLDS.partner.accentColor}
                          worldGradient={WORLDS.partner.gradient}
                          direction={direction}
                        />
                      ))}
                    </div>
                  </SectionCard>
                )}
                {!isDesktop && mobileViewLayout === 'detailed' && (
                  <MobileTabNavigation
                    activeTab={activeTab}
                    tabItems={tabItems}
                    onTabChange={handleTabChange}
                    THEME={THEME}
                    dict={displayDict.mobileNav}
                    direction={direction}
                  />
                )}
              </div>
            </TabsContent>

            {/* Professional Tab */}
            {viewMode === 'matchmaker' && (
              <TabsContent
                value="professional"
                className="mt-0 max-w-full min-w-0"
              >
                <SectionCard
                  title={displayDict.content.confidentialInfo}
                  subtitle={displayDict.content.professionalDetails}
                  icon={Lock}
                  variant="elegant"
                  gradient={THEME.colors.primary.gold}
                >
                  <div className="space-y-6">
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <DetailItem
                        icon={Phone}
                        label={
                          displayDict.content.professionalInfo.contactPreference
                        }
                        value={
                          formatEnumValue(
                            profile.contactPreference,
                            contactPreferenceMap,
                            displayDict.placeholders.willDiscover
                          ).label
                        }
                        variant="elegant"
                        textAlign="start"
                        placeholder={displayDict.placeholders.willDiscover}
                      />
                      <DetailItem
                        icon={Users}
                        label={
                          displayDict.content.professionalInfo
                            .matchmakerGenderPref
                        }
                        value={
                          profile.preferredMatchmakerGender
                            ? profile.preferredMatchmakerGender === 'MALE'
                              ? displayDict.content.professionalInfo
                                  .matchmakerMale
                              : displayDict.content.professionalInfo
                                  .matchmakerFemale
                            : displayDict.content.professionalInfo.noPreference
                        }
                        variant="elegant"
                        textAlign="start"
                        placeholder={displayDict.placeholders.willDiscover}
                      />
                    </div>
                    {profile.hasMedicalInfo && (
                      <DetailItem
                        icon={Heart}
                        label={displayDict.content.professionalInfo.medicalInfo}
                        value={
                          profile.isMedicalInfoVisible
                            ? displayDict.content.professionalInfo
                                .medicalInfoVisible
                            : displayDict.content.professionalInfo
                                .medicalInfoDiscreet
                        }
                        variant="elegant"
                        textAlign="start"
                        tooltip={profile.medicalInfoDetails || undefined}
                        placeholder={displayDict.placeholders.willDiscover}
                      />
                    )}
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-3 text-sm">
                      <div className="flex items-center gap-2">
                        <Calendar className="w-4 h-4 text-gray-500" />
                        <span>
                          {displayDict.content.professionalInfo.profileCreated}{' '}
                          {profile.createdAt
                            ? new Date(profile.createdAt).toLocaleDateString(
                                locale
                              )
                            : displayDict.content.professionalInfo.unknown}
                        </span>
                      </div>
                      {profile.lastActive && (
                        <div className="flex items-center gap-2">
                          <Clock className="w-4 h-4 text-gray-500" />
                          <span>
                            {displayDict.content.professionalInfo.lastActive}{' '}
                            {new Date(profile.lastActive).toLocaleDateString(
                              locale
                            )}
                          </span>
                        </div>
                      )}
                    </div>
                  </div>
                </SectionCard>
                {!isDesktop && mobileViewLayout === 'detailed' && (
                  <MobileTabNavigation
                    activeTab={activeTab}
                    tabItems={tabItems}
                    onTabChange={handleTabChange}
                    THEME={THEME}
                    dict={displayDict.mobileNav}
                    direction={direction}
                  />
                )}
              </TabsContent>
            )}
          </div>
        </ScrollArea>
      </Tabs>
    );
  };

  const MobileHeader = () => (
    <div
      className={cn(
        'flex-shrink-0 flex justify-between items-center border-b border-rose-200/50 sticky top-0 z-30 backdrop-blur-md',
        'p-3 sm:p-4 min-h-[60px]',
        `bg-gradient-to-r ${THEME.colors.neutral.warm}`
      )}
      dir={direction}
    >
      <Button
        variant="ghost"
        size="icon"
        className={cn(
          'text-gray-600 hover:text-gray-800 hover:bg-white/60 rounded-full transition-all duration-300 shadow-sm hover:shadow-md',
          'w-10 h-10 sm:w-12 sm:h-12 min-h-[44px] min-w-[44px] touch-manipulation'
        )}
        onClick={handleClose}
        aria-label={displayDict.mobileNav.closePreview}
      >
        <X className="w-4 h-4 sm:w-5 sm:h-5" />
      </Button>
      <div className="flex items-center gap-3 flex-1 justify-center">
        <ToggleGroup
          type="single"
          value={mobileViewLayout}
          onValueChange={(value: 'focus' | 'detailed') => {
            if (value) setMobileViewLayout(value);
          }}
          className={cn(
            'bg-white/95 backdrop-blur-sm rounded-2xl border border-rose-200/50 shadow-lg',
            'p-1',
            THEME.shadows.soft
          )}
        >
          <ToggleGroupItem
            value="focus"
            aria-label={displayDict.mobileNav.introView}
            className={cn(
              'rounded-xl transition-all duration-300 min-h-[44px] px-3 sm:px-4 py-2 touch-manipulation',
              'data-[state=on]:bg-gradient-to-r data-[state=on]:from-rose-500 data-[state=on]:to-pink-500 data-[state=on]:text-white data-[state=on]:shadow-md'
            )}
          >
            <Heart className="h-3 h-3 sm:h-4 sm:w-4" />
            <span className="mx-1.5 sm:mx-2 text-xs sm:text-sm font-medium">
              {displayDict.mobileNav.introView}
            </span>
          </ToggleGroupItem>
          <ToggleGroupItem
            value="detailed"
            aria-label={displayDict.mobileNav.detailedView}
            className={cn(
              'rounded-xl transition-all duration-300 min-h-[44px] px-3 sm:px-4 py-2 touch-manipulation',
              'data-[state=on]:bg-gradient-to-r data-[state=on]:from-purple-500 data-[state=on]:to-indigo-500 data-[state=on]:text-white data-[state=on]:shadow-md'
            )}
          >
            <FileText className="h-3 h-3 sm:h-4 sm:w-4" />
            <span className="mx-1.5 sm:mx-2 text-xs sm:text-sm font-medium">
              {displayDict.mobileNav.detailedView}
            </span>
          </ToggleGroupItem>
        </ToggleGroup>
        <ColorPaletteSelector
          selectedPalette={selectedPalette}
          onPaletteChange={setSelectedPalette}
          THEME={THEME}
          dict={displayDict.colorPalette}
          compact={true}
          direction={direction}
        />
      </div>
    </div>
  );

  const DetailedMobileLayout = () => (
    <ScrollArea className="flex-1 min-h-0 max-w-full overflow-hidden">
      <div className="flex flex-col min-w-0 max-w-full">
        <ProfileHeader
          profile={profile}
          age={age}
          mainImageToDisplay={mainImageToDisplay}
          availability={availability}
          viewMode={viewMode}
          onSuggestClick={() => setIsSuggestDialogOpen(true)}
          isMobile={true}
          selectedPalette={selectedPalette}
          THEME={THEME}
          dict={displayDict}
          compact={false}
          characterTraitMap={characterTraitMap}
          hobbiesMap={hobbiesMap}
          religiousLevelMap={religiousLevelMap}
          educationLevelMap={educationLevelMap}
          locale={locale}
        />
        <MobileImageGallery
          orderedImages={orderedImages}
          profile={profile}
          onImageClick={handleOpenImageDialog}
          THEME={THEME}
          dict={displayDict.gallery}
          compact={false}
          direction={direction}
        />
        <div
          className={cn(
            'p-3 sm:p-4 min-w-0 max-w-full overflow-hidden',
            `bg-gradient-to-br ${THEME.colors.neutral.cool}`
          )}
        >
          <MainContentTabs />
        </div>
      </div>
    </ScrollArea>
  );

  const FocusMobileLayout = () => (
    <div className="flex-1 min-h-0 flex flex-col max-w-full overflow-hidden">
      <ScrollArea className="flex-1 min-h-0 max-w-full">
        <div className="pb-4 px-2 sm:px-3 min-w-0 max-w-full overflow-hidden">
          <ProfileHeader
            profile={profile}
            age={age}
            mainImageToDisplay={mainImageToDisplay}
            availability={availability}
            viewMode={viewMode}
            onSuggestClick={() => setIsSuggestDialogOpen(true)}
            isMobile={true}
            selectedPalette={selectedPalette}
            onPaletteChange={setSelectedPalette}
            THEME={THEME}
            dict={displayDict}
            compact={true}
            characterTraitMap={characterTraitMap}
            hobbiesMap={hobbiesMap}
            religiousLevelMap={religiousLevelMap}
            educationLevelMap={educationLevelMap}
            locale={locale}
          />
          <MobileImageGallery
            orderedImages={orderedImages}
            profile={profile}
            onImageClick={handleOpenImageDialog}
            THEME={THEME}
            dict={displayDict.gallery}
            compact={true}
            direction={direction}
          />
          <div
            className={cn(
              'px-2 sm:px-3 py-2 space-y-3 sm:space-y-4 min-w-0 max-w-full overflow-hidden',
              `bg-gradient-to-br ${THEME.colors.neutral.warm}`
            )}
          >
            {profile.about ? (
              <SectionCard
                title={displayDict.content.focus.aboutMe}
                subtitle={displayDict.content.focus.myStory}
                icon={Heart}
                variant="romantic"
                gradient={THEME.colors.primary.main}
                compact={true}
                className="min-w-0 max-w-full"
              >
                <div
                  className={cn(
                    'p-3 sm:p-4 rounded-xl border border-rose-200/50 min-w-0 max-w-full overflow-hidden',
                    `bg-gradient-to-r ${THEME.colors.neutral.warm}`
                  )}
                >
                  <p
                    className="text-gray-800 leading-relaxed italic font-medium break-words hyphens-auto word-break-break-word overflow-wrap-anywhere text-start"
                    dir={direction}
                  >
                    <Quote
                      className={cn(
                        'w-3 h-3 sm:w-4 sm:h-4 inline text-rose-400 flex-shrink-0',
                        direction === 'rtl' ? 'ml-1' : 'mr-1'
                      )}
                    />
                    {profile.about}
                    <Quote
                      className={cn(
                        'w-3 h-3 sm:w-4 sm:h-4 inline text-rose-400 transform rotate-180 flex-shrink-0',
                        direction === 'rtl' ? 'mr-1' : 'ml-1'
                      )}
                    />
                  </p>
                </div>
              </SectionCard>
            ) : (
              <SectionCard
                title={displayDict.content.focus.myStory}
                subtitle={displayDict.content.focus.myStory}
                icon={Telescope}
                variant="romantic"
                compact={true}
              >
                <EmptyState
                  icon={Telescope}
                  title={displayDict.content.emptyPrefsTitle}
                  description={displayDict.content.emptyPrefsDescription}
                  variant="romantic"
                  compact={true}
                />
              </SectionCard>
            )}
            <SectionCard
              title={displayDict.content.focus.quickSummary}
              subtitle={displayDict.content.focus.importantDetails}
              icon={Zap}
              variant="elegant"
              gradient={THEME.colors.primary.gold}
              compact={true}
              className="min-w-0 max-w-full"
            >
              <div className="grid grid-cols-1 gap-2 sm:gap-3 min-w-0 max-w-full">
                <DetailItem
                  icon={BookMarked}
                  label={dict.display.keyFacts.outlook}
                  value={
                    formatEnumValue(
                      profile.religiousLevel,
                      religiousLevelMap,
                      displayDict.placeholders.willDiscover
                    ).label
                  }
                  variant="elegant"
                  size="sm"
                  useMobileLayout={true}
                  textAlign="center"
                  placeholder={displayDict.placeholders.willDiscover}
                />
                <DetailItem
                  icon={Heart}
                  label={displayDict.content.detailLabels.shomerNegiah}
                  value={
                    formatBooleanPreference(profile.shomerNegiah, {
                      ...displayDict.booleanPrefs,
                      willDiscover: displayDict.placeholders.willDiscover,
                    }).label
                  }
                  variant="elegant"
                  size="sm"
                  useMobileLayout={true}
                  placeholder={displayDict.placeholders.willDiscover}
                />
                <DetailItem
                  icon={Briefcase}
                  label={dict.display.keyFacts.occupation}
                  value={
                    profile.occupation || displayDict.placeholders.willDiscover
                  }
                  variant="elegant"
                  size="sm"
                  useMobileLayout={true}
                  placeholder={displayDict.placeholders.willDiscover}
                />
                <DetailItem
                  icon={GraduationCap}
                  label={displayDict.content.detailLabels.educationLevel}
                  value={
                    formatEnumValue(
                      profile.educationLevel,
                      educationLevelMap,
                      displayDict.placeholders.willDiscover
                    ).label
                  }
                  variant="elegant"
                  size="sm"
                  useMobileLayout={true}
                  placeholder={displayDict.placeholders.willDiscover}
                />
              </div>
            </SectionCard>
            <SectionCard
              title={displayDict.content.focus.whatMakesMeUnique}
              subtitle={displayDict.content.focus.traitsAndHobbies}
              icon={Sparkles}
              variant="romantic"
              gradient={THEME.colors.primary.romantic}
              compact={true}
              className="min-w-0 max-w-full"
            >
              <div className="space-y-4 sm:space-y-5 min-w-0 max-w-full">
                {profile.profileCharacterTraits &&
                  profile.profileCharacterTraits.length > 0 && (
                    <div className="min-w-0 max-w-full">
                      <h4 className="text-sm font-bold text-purple-700 mb-2 sm:mb-3 flex items-center justify-center gap-2">
                        <span className="break-words">
                          {displayDict.content.focus.myTraits}
                        </span>
                        <Sparkles className="w-3 h-3 sm:w-4 sm:h-4 flex-shrink-0" />
                      </h4>
                      <div className="flex flex-wrap gap-2 min-w-0 max-w-full justify-center">
                        {profile.profileCharacterTraits
                          .slice(0, 4)
                          .map((trait) => {
                            const traitData = formatEnumValue(
                              trait,
                              characterTraitMap,
                              trait,
                              true
                            );
                            return (
                              <Badge
                                key={trait}
                                className={cn(
                                  'flex items-center gap-1 px-2 py-1 text-xs font-semibold min-w-0 max-w-full',
                                  'bg-gradient-to-r from-purple-100 to-violet-100 text-purple-800',
                                  'border border-purple-200 rounded-full',
                                  'break-words'
                                )}
                              >
                                <traitData.icon className="w-2.5 h-2.5 sm:w-3 sm:h-3 flex-shrink-0" />
                                <span className="break-words min-w-0 overflow-hidden">
                                  {traitData.shortLabel || traitData.label}
                                </span>
                              </Badge>
                            );
                          })}
                      </div>
                    </div>
                  )}
                {profile.profileHobbies &&
                  profile.profileHobbies.length > 0 && (
                    <div className="min-w-0 max-w-full">
                      <h4 className="text-sm font-bold text-emerald-700 mb-2 sm:mb-3 flex items-center justify-center gap-2">
                        <span className="break-words">
                          {displayDict.content.focus.whatILove}
                        </span>
                        <Heart className="w-3 h-3 sm:w-4 sm:h-4 flex-shrink-0" />
                      </h4>
                      <div className="flex flex-wrap gap-2 min-w-0 max-w-full justify-center">
                        {profile.profileHobbies.slice(0, 4).map((hobby) => {
                          const hobbyData = formatEnumValue(
                            hobby,
                            hobbiesMap,
                            hobby,
                            true
                          );
                          return (
                            <Badge
                              key={hobby}
                              className={cn(
                                'flex items-center gap-1 px-2 py-1 text-xs font-semibold min-w-0 max-w-full',
                                'bg-gradient-to-r from-emerald-100 to-green-100 text-emerald-800',
                                'border border-emerald-200 rounded-full',
                                'break-words'
                              )}
                            >
                              <hobbyData.icon className="w-2.5 h-2.5 sm:w-3 sm:h-3 flex-shrink-0" />
                              <span className="break-words min-w-0 overflow-hidden">
                                {hobbyData.shortLabel || hobbyData.label}
                              </span>
                            </Badge>
                          );
                        })}
                      </div>
                    </div>
                  )}
              </div>
            </SectionCard>
            <div
              className={cn(
                'text-center p-4 sm:p-6 rounded-2xl text-white min-w-0 max-w-full overflow-hidden',
                `bg-gradient-to-r ${THEME.colors.primary.main}`,
                THEME.shadows.elegant
              )}
            >
              <h3 className="text-base sm:text-lg font-bold mb-2 break-words">
                {displayDict.content.focus.wantToKnowMore}
              </h3>
              <p className="mb-3 sm:mb-4 opacity-90 text-sm break-words">
                {displayDict.content.focus.moreToDiscover}
              </p>
              <Button
                onClick={() => setMobileViewLayout('detailed')}
                className={cn(
                  'bg-white text-gray-600 hover:bg-gray-50 font-bold rounded-full min-h-[44px]',
                  'px-4 py-2 sm:px-6 sm:py-3 text-sm sm:text-base',
                  THEME.shadows.warm
                )}
              >
                <Eye
                  className={cn(
                    'w-4 h-4 sm:w-5 sm:h-5 flex-shrink-0',
                    direction === 'rtl' ? 'ml-2' : 'mr-2'
                  )}
                />
                <span className="break-words">
                  {displayDict.content.focus.letsGetToKnow}
                </span>
              </Button>
            </div>
          </div>
        </div>
      </ScrollArea>
    </div>
  );

  if (!isClient) {
    return (
      <Card
        dir={direction}
        className={cn(
          'w-full bg-white shadow-2xl rounded-2xl overflow-hidden border-0 flex flex-col h-full',
          className
        )}
      >
        <div
          className={cn(
            'p-4 sm:p-6 border-b border-gray-200/80',
            `bg-gradient-to-r ${THEME.colors.neutral.warm}`
          )}
        >
          <div className="flex flex-col sm:flex-row items-center sm:items-start gap-4 sm:gap-6">
            <Skeleton className="h-24 w-24 sm:h-36 sm:w-36 rounded-full flex-shrink-0" />
            <div className="flex-grow w-full space-y-4">
              <Skeleton className="h-8 sm:h-12 w-3/4 mx-auto sm:mx-0" />
              <Skeleton className="h-4 sm:h-6 w-1/2 mx-auto sm:mx-0" />
              <div className="grid grid-cols-2 sm:grid-cols-3 gap-3 sm:gap-4 mt-4">
                <Skeleton className="h-10 sm:h-12 w-full rounded-xl" />
                <Skeleton className="h-10 sm:h-12 w-full rounded-xl" />
                <Skeleton className="h-10 sm:h-12 w-full rounded-xl" />
              </div>
            </div>
          </div>
        </div>
        <div className="p-4 sm:p-6 flex-grow">
          <div className="space-y-4">
            <Skeleton className="h-6 sm:h-8 w-full rounded-xl" />
            <Skeleton className="h-24 sm:h-32 w-full rounded-xl" />
            <Skeleton className="h-16 sm:h-24 w-full rounded-xl" />
          </div>
        </div>
      </Card>
    );
  }

  return (
    <TooltipProvider>
      <Card
        dir={direction}
        id="profile-card-container"
        className={cn(
          'w-full h-full overflow-hidden flex flex-col max-w-full min-w-0',
          `bg-gradient-to-br ${THEME.colors.neutral.elegant}`,
          THEME.shadows.elegant,
          '[&_*]:box-border [&_*]:max-w-full',
          className
        )}
        style={{
          textAlign: direction === 'rtl' ? 'right' : 'left',
          overflow: 'hidden',
        }}
      >
        {isDesktop && onClose && (
          <div
            className={cn(
              'absolute top-4 z-40',
              direction === 'rtl' ? 'left-4' : 'right-4'
            )}
          >
            <Tooltip>
              <TooltipTrigger asChild>
                <Button
                  variant="ghost"
                  size="icon"
                  className={cn(
                    'text-gray-600 hover:text-gray-800 bg-white/80 hover:bg-white/90 rounded-full shadow-lg hover:shadow-xl transition-all duration-300',
                    'w-10 h-10 sm:w-12 sm:h-12 min-h-[44px] min-w-[44px]'
                  )}
                  onClick={handleClose}
                >
                  <X className="w-4 h-4 sm:w-5 sm:h-5" />
                </Button>
              </TooltipTrigger>
              <TooltipContent>
                <p>{displayDict.mobileNav.closePreview}</p>
              </TooltipContent>
            </Tooltip>
          </div>
        )}

        {isDesktop ? (
          <ResizablePanelGroup
            direction="horizontal"
            dir={direction}
            className="flex-grow min-h-0 max-w-full"
          >
            <ResizablePanel
              defaultSize={60}
              minSize={40}
              className="min-w-0 flex flex-col max-w-full overflow-hidden"
            >
              <ScrollArea className="flex-1 min-h-0 max-w-full">
                <ProfileHeader
                  profile={profile}
                  age={age}
                  mainImageToDisplay={mainImageToDisplay}
                  availability={availability}
                  viewMode={viewMode}
                  onSuggestClick={() => setIsSuggestDialogOpen(true)}
                  selectedPalette={selectedPalette}
                  onPaletteChange={setSelectedPalette}
                  THEME={THEME}
                  dict={displayDict}
                  characterTraitMap={characterTraitMap}
                  hobbiesMap={hobbiesMap}
                  religiousLevelMap={religiousLevelMap}
                  educationLevelMap={educationLevelMap}
                  locale={locale}
                />
                <div className="p-4 sm:p-6 overflow-hidden flex max-w-full">
                  <MainContentTabs />
                </div>
              </ScrollArea>
            </ResizablePanel>
            <ResizableHandle
              withHandle
              className={cn(
                'bg-gradient-to-b from-rose-200 to-pink-200 hover:from-rose-300 hover:to-pink-300',
                'transition-all duration-300'
              )}
            />
            <ResizablePanel
              defaultSize={40}
              minSize={25}
              className="min-w-0 flex flex-col max-w-full overflow-hidden"
            >
              <ScrollArea className="flex-grow min-h-0 max-w-full">
                <div className="p-4 sm:p-6 space-y-4 sm:space-y-6 min-w-0 max-w-full">
                  <SectionCard
                    title={displayDict.gallery.title.replace(
                      '{{name}}',
                      profile.user?.firstName || 'המועמד'
                    )}
                    subtitle={displayDict.gallery.subtitle}
                    icon={Camera}
                    variant="romantic"
                    gradient={THEME.colors.primary.rose}
                    className="min-w-0 max-w-full"
                  >
                    {orderedImages.length > 0 ? (
                      <div className="space-y-4 min-w-0 max-w-full">
                        <div
                          className={cn(
                            'relative aspect-video rounded-2xl overflow-hidden cursor-pointer group border-2 sm:border-3 border-white shadow-lg hover:shadow-xl transition-all duration-300 max-w-full'
                          )}
                          onClick={() =>
                            handleOpenImageDialog(orderedImages[0])
                          }
                        >
                          <Image
                            src={getRelativeCloudinaryPath(
                              orderedImages[0].url
                            )}
                            alt={displayDict.gallery.imageAlt.replace(
                              '{{index}}',
                              '1'
                            )}
                            fill
                            className="object-cover transition-transform duration-500 group-hover:scale-105"
                            sizes="35vw"
                            priority
                          />
                          <div className="absolute inset-0 bg-gradient-to-t from-black/60 via-transparent to-transparent opacity-0 group-hover:opacity-100 transition-opacity flex items-center justify-center">
                            <div className="text-center text-white">
                              <Eye className="w-6 h-6 sm:w-8 sm:h-8 mx-auto mb-2" />
                              <p className="font-bold text-sm sm:text-base">
                                {displayDict.gallery.subtitle}
                              </p>
                            </div>
                          </div>
                        </div>
                        {orderedImages.length > 1 && (
                          <div className="grid grid-cols-2 sm:grid-cols-3 gap-2 sm:gap-3 min-w-0 max-w-full">
                            {orderedImages.slice(1, 7).map((img, idx) => (
                              <div
                                key={img.id}
                                className={cn(
                                  'relative aspect-square rounded-xl overflow-hidden cursor-pointer border-2 border-transparent hover:border-rose-400 transition-all duration-300 shadow-md hover:shadow-lg max-w-full'
                                )}
                                onClick={() => handleOpenImageDialog(img)}
                              >
                                <Image
                                  src={getRelativeCloudinaryPath(img.url)}
                                  alt={displayDict.gallery.imageAlt.replace(
                                    '{{index}}',
                                    (idx + 2).toString()
                                  )}
                                  fill
                                  className="object-cover hover:scale-110 transition-transform duration-300"
                                  sizes="15vw"
                                />
                              </div>
                            ))}
                          </div>
                        )}
                      </div>
                    ) : (
                      <EmptyState
                        icon={Camera}
                        title={displayDict.content.emptyStateTitle}
                        description={displayDict.content.emptyStateDescription}
                        variant="romantic"
                      />
                    )}
                  </SectionCard>
                </div>
              </ScrollArea>
            </ResizablePanel>
          </ResizablePanelGroup>
        ) : (
          <div className="flex flex-col h-full w-full max-w-full min-w-0 overflow-hidden">
            <MobileHeader />
            {mobileViewLayout === 'detailed' ? (
              <DetailedMobileLayout />
            ) : (
              <FocusMobileLayout />
            )}
          </div>
        )}

        <ImageDialogComponent
          selectedImageForDialog={selectedImageForDialog}
          currentDialogImageIndex={currentDialogImageIndex}
          orderedImages={orderedImages}
          onClose={handleCloseImageDialog}
          onNavigate={handleDialogNav}
          onImageSelect={setSelectedImageForDialog}
          dict={displayDict.imageDialog}
          direction={direction}
        />
      </Card>
    </TooltipProvider>
  );
};

export default ProfileCard;
--- End of Content for ProfileCard.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\profile\account-settings.tsx
--------------------------------------------------------------------------------
Content:
// src/components/profile/account-settings.tsx

'use client';

import React, { useState, useEffect, useMemo } from 'react';
import {
  Card,
  CardContent,
  CardHeader,
  CardTitle,
  CardDescription,
  CardFooter,
} from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Badge } from '@/components/ui/badge';
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription,
  DialogFooter,
  DialogClose,
} from '@/components/ui/dialog';
import { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert';
import { Progress } from '@/components/ui/progress';
import { Switch } from '@/components/ui/switch';
import {
  User,
  Mail,
  Key,
  Shield,
  Clock,
  Eye,
  EyeOff,
  CheckCircle,
  XCircle,
  ArrowRight,
  Calendar,
  Bell,
  Settings,
  AlertCircle,
  Trash2,
  Loader2,
} from 'lucide-react';
import { toast } from 'sonner';
import { useSession, signOut } from 'next-auth/react';
import { UserRole, UserStatus } from '@prisma/client';
import type { AccountSettingsDict } from '@/types/dictionary';
import type { Locale } from '../../../i18n-config'; // ייבוא טיפוס השפה

interface AccountSettingsProps {
  user: {
    id: string;
    email: string;
    firstName: string;
    lastName: string;
    role: UserRole;
    status: UserStatus;
    isVerified: boolean;
    lastLogin: Date | null;
    createdAt: Date;
    marketingConsent?: boolean;
  };
  dict: AccountSettingsDict;
  locale: Locale; // ✨ הוספת locale לממשק
}

const PASSWORD_MIN_LENGTH = 8;

const AccountSettings: React.FC<AccountSettingsProps> = ({
  user: propUser,
  dict,
  locale, // ✨ קבלת locale
}) => {
  const {
    data: session,
    status: sessionStatus,
    update: updateSession,
  } = useSession();

  const [isChangingPassword, setIsChangingPassword] = useState(false);
  const [isSendingVerification, setIsSendingVerification] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const [isDeletingAccount, setIsDeletingAccount] = useState(false);
  const [deleteConfirmText, setDeleteConfirmText] = useState('');
  const [currentPassword, setCurrentPassword] = useState('');
  const [newPassword, setNewPassword] = useState('');
  const [confirmPassword, setConfirmPassword] = useState('');
  const [verificationCode, setVerificationCode] = useState('');
  const [showCurrentPassword, setShowCurrentPassword] = useState(false);
  const [showNewPassword, setShowNewPassword] = useState(false);
  const [showConfirmPassword, setShowConfirmPassword] = useState(false);
  const [passwordChangeStep, setPasswordChangeStep] = useState(1);
  const [showVerificationInput, setShowVerificationInput] = useState(false);
  const [passwordStrength, setPasswordStrength] = useState(0);
  const [passwordRequirements, setPasswordRequirements] = useState({
    length: false,
    uppercase: false,
    lowercase: false,
    number: false,
  });
  const [activeSection, setActiveSection] = useState<string | null>(null);
  const [marketingConsent, setMarketingConsent] = useState(
    propUser.marketingConsent || false
  );
  const [isMarketingLoading, setIsMarketingLoading] = useState(false);

  useEffect(() => {
    if (session?.user && typeof session.user.marketingConsent === 'boolean') {
      if (session.user.marketingConsent !== marketingConsent) {
        setMarketingConsent(session.user.marketingConsent);
      }
    }
  }, [session?.user, marketingConsent]);

  const canChangePassword = useMemo(() => {
    if (sessionStatus === 'authenticated' && session?.user?.accounts) {
      return session.user.accounts.some(
        (acc) => acc.provider === 'credentials'
      );
    }
    return false;
  }, [session, sessionStatus]);

  useEffect(() => {
    if (!newPassword) {
      setPasswordStrength(0);
      setPasswordRequirements({
        length: false,
        uppercase: false,
        lowercase: false,
        number: false,
      });
      return;
    }
    const requirements = {
      length: newPassword.length >= PASSWORD_MIN_LENGTH,
      uppercase: /[A-Z]/.test(newPassword),
      lowercase: /[a-z]/.test(newPassword),
      number: /[0-9]/.test(newPassword),
    };
    setPasswordRequirements(requirements);
    const metRequirements = Object.values(requirements).filter(Boolean).length;
    setPasswordStrength(metRequirements * 25);
  }, [newPassword]);

  const validatePassword = (password: string) => {
    const { requirements } = dict.passwordDialog;
    if (password.length < PASSWORD_MIN_LENGTH)
      throw new Error(
        requirements.length.replace('{{count}}', String(PASSWORD_MIN_LENGTH))
      );
    if (!/[A-Z]/.test(password)) throw new Error(requirements.uppercase);
    if (!/[a-z]/.test(password)) throw new Error(requirements.lowercase);
    if (!/[0-9]/.test(password)) throw new Error(requirements.number);
  };

  const resetPasswordForm = () => {
    setCurrentPassword('');
    setNewPassword('');
    setConfirmPassword('');
    setVerificationCode('');
    setShowVerificationInput(false);
    setIsChangingPassword(false);
    setPasswordChangeStep(1);
    setShowCurrentPassword(false);
    setShowNewPassword(false);
    setShowConfirmPassword(false);
  };

  const sendVerificationEmail = async () => {
    setIsSendingVerification(true);
    try {
      const response = await fetch(`/api/auth/send-verification`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ email: propUser.email }),
      });
      if (!response.ok) {
        const error = await response.json();
        throw new Error(error.message || 'Failed to send verification email');
      }
      toast.success(dict.toasts.verificationSentSuccess, {
        description: dict.toasts.verificationSentDesc,
        icon: <Mail className="h-5 w-5 text-blue-500" />,
      });
    } catch (error) {
      toast.error(
        error instanceof Error
          ? error.message
          : dict.toasts.sendVerificationError,
        {
          description: dict.toasts.sendVerificationDesc,
          icon: <AlertCircle className="h-5 w-5 text-red-500" />,
        }
      );
    } finally {
      setIsSendingVerification(false);
    }
  };

  const initiatePasswordChange = async () => {
    if (!currentPassword || !newPassword || !confirmPassword) {
      toast.error(dict.toasts.fillAllFieldsError, {
        description: dict.toasts.fillAllFieldsDesc,
        icon: <AlertCircle className="h-5 w-5 text-red-500" />,
      });
      return;
    }
    if (newPassword !== confirmPassword) {
      toast.error(dict.toasts.passwordsMismatchError, {
        description: dict.toasts.passwordsMismatchDesc,
        icon: <AlertCircle className="h-5 w-5 text-red-500" />,
      });
      return;
    }
    try {
      validatePassword(newPassword);
    } catch (error) {
      toast.error(
        error instanceof Error
          ? error.message
          : dict.toasts.passwordValidationError,
        {
          description: dict.toasts.passwordValidationDesc,
          icon: <AlertCircle className="h-5 w-5 text-red-500" />,
        }
      );
      return;
    }
    setIsLoading(true);
    try {
      const response = await fetch(`/api/auth/initiate-password-change`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          userId: propUser.id,
          currentPassword,
          newPassword,
        }),
      });
      if (!response.ok) {
        const error = await response.json();
        throw new Error(error.message || 'Failed to initiate password change');
      }
      setPasswordChangeStep(2);
      setShowVerificationInput(true);
      toast.success(dict.toasts.verificationSentSuccess, {
        description: dict.toasts.verificationSentDesc,
        icon: <Mail className="h-5 w-5 text-blue-500" />,
      });
    } catch (error) {
      toast.error(
        error instanceof Error
          ? error.message
          : dict.toasts.initiatePasswordError,
        {
          description: dict.toasts.initiatePasswordDesc,
          icon: <AlertCircle className="h-5 w-5 text-red-500" />,
        }
      );
    } finally {
      setIsLoading(false);
    }
  };

  const completePasswordChange = async () => {
    if (!verificationCode) {
      toast.error(dict.toasts.verificationCodeRequired, {
        description: dict.toasts.verificationCodeDesc,
        icon: <AlertCircle className="h-5 w-5 text-red-500" />,
      });
      return;
    }
    if (!/^\d{6}$/.test(verificationCode)) {
      toast.error(dict.toasts.invalidVerificationCode, {
        description: dict.toasts.invalidVerificationCodeDesc,
        icon: <AlertCircle className="h-5 w-5 text-red-500" />,
      });
      return;
    }
    setIsLoading(true);
    try {
      const response = await fetch(`/api/auth/complete-password-change`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          userId: propUser.id,
          token: verificationCode,
          newPassword,
        }),
      });
      if (!response.ok) {
        const error = await response.json();
        throw new Error(error.message || 'Failed to complete password change');
      }
      toast.success(dict.toasts.passwordUpdateSuccess, {
        description: dict.toasts.passwordUpdateSuccessDesc,
        icon: <CheckCircle className="h-5 w-5 text-green-500" />,
      });
      resetPasswordForm();
    } catch (error) {
      toast.error(
        error instanceof Error
          ? error.message
          : dict.toasts.passwordUpdateError,
        {
          description: dict.toasts.passwordUpdateDesc,
          icon: <AlertCircle className="h-5 w-5 text-red-500" />,
        }
      );
    } finally {
      setIsLoading(false);
    }
  };

  const handleDeleteAccount = async () => {
    if (deleteConfirmText !== dict.deleteDialog.confirmationPhrase) {
      toast.error(dict.toasts.invalidDeleteConfirmation, {
        description: dict.toasts.invalidDeleteConfirmationDesc.replace(
          '{{phrase}}',
          dict.deleteDialog.confirmationPhrase
        ),
        icon: <AlertCircle className="h-5 w-5 text-red-500" />,
      });
      return;
    }
    setIsLoading(true);
    try {
      const response = await fetch(`/api/auth/delete`, { method: 'DELETE' });
      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.message || 'Failed to delete account');
      }
      toast.success(dict.toasts.deleteSuccess, {
        description: dict.toasts.deleteSuccessDesc,
        icon: <CheckCircle className="h-5 w-5 text-green-500" />,
      });
      await signOut({ callbackUrl: '/' });
    } catch (error) {
      toast.error(
        error instanceof Error ? error.message : dict.toasts.deleteError,
        {
          description: dict.toasts.deleteErrorDesc,
          icon: <AlertCircle className="h-5 w-5 text-red-500" />,
        }
      );
    } finally {
      setIsLoading(false);
    }
  };

  const handleMarketingConsentChange = async (checked: boolean) => {
    setIsMarketingLoading(true);
    setMarketingConsent(checked);
    try {
      const response = await fetch('/api/user/marketing-consent', {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ marketingConsent: checked }),
      });
      const result = await response.json();
      if (!response.ok || !result.success) {
        setMarketingConsent(!checked);
        throw new Error(
          result.error || 'Failed to update marketing preferences.'
        );
      }
      toast.success(dict.toasts.marketingUpdateSuccess, {
        icon: <CheckCircle className="h-5 w-5 text-green-500" />,
      });
      await updateSession();
    } catch (error) {
      setMarketingConsent(!checked);
      toast.error(
        error instanceof Error
          ? error.message
          : dict.toasts.marketingUpdateError,
        {
          icon: <AlertCircle className="h-5 w-5 text-red-500" />,
        }
      );
    } finally {
      setIsMarketingLoading(false);
    }
  };

  const getPasswordStrengthColor = () => {
    if (passwordStrength === 0) return 'bg-gray-200';
    if (passwordStrength <= 25) return 'bg-red-500';
    if (passwordStrength <= 50) return 'bg-orange-500';
    if (passwordStrength <= 75) return 'bg-yellow-500';
    return 'bg-green-500';
  };

  const getPasswordStrengthText = () => {
    const { passwordStrength: strengthDict } = dict;
    if (passwordStrength === 0) return '';
    if (passwordStrength <= 25) return strengthDict.veryWeak;
    if (passwordStrength <= 50) return strengthDict.weak;
    if (passwordStrength <= 75) return strengthDict.medium;
    return strengthDict.strong;
  };

  if (!propUser) {
    return <div>{dict.loadingText}</div>;
  }

  const PasswordRequirement: React.FC<{ label: string; met: boolean }> = ({
    label,
    met,
  }) => (
    <li
      className={`flex items-center text-xs ${met ? 'text-green-600' : 'text-gray-500'}`}
    >
      {met ? (
        <CheckCircle className="w-3.5 h-3.5 me-1.5" />
      ) : (
        <XCircle className="w-3.5 h-3.5 me-1.5" />
      )}
      {label}
    </li>
  );

  return (
    // ✨ הוספת dir דינמי
    <div
      className="max-w-2xl mx-auto space-y-6"
      dir={locale === 'he' ? 'rtl' : 'ltr'}
    >
      <Card
        className={`shadow-md hover:shadow-lg transition-all duration-300 border-t-4 border-blue-600 overflow-hidden relative`}
        onMouseEnter={() => setActiveSection('main')}
        onMouseLeave={() => setActiveSection(null)}
      >
        <div
          className={`absolute inset-0 bg-gradient-to-r from-blue-50 to-blue-100 opacity-0 transition-opacity duration-500 ${activeSection === 'main' ? 'opacity-60' : ''}`}
        />
        <CardHeader className="border-b pb-3 relative">
          <CardTitle className="text-xl flex items-center">
            <Settings className="w-5 h-5 text-blue-600 me-2" />
            {dict.cardHeader.title}
          </CardTitle>
          <CardDescription>{dict.cardHeader.description}</CardDescription>
        </CardHeader>
        <CardContent className="divide-y relative">
          <div className="py-4">
            <h3 className="text-base font-semibold flex items-center mb-4">
              <User className="w-4 h-4 text-blue-600 me-2" />
              {dict.sections.personal.title}
            </h3>
            <div className="grid gap-3">
              <div className="bg-gray-50 p-3 rounded-lg flex items-start gap-3">
                <User className="w-5 h-5 text-blue-600 mt-0.5" />
                <div>
                  <p className="text-sm font-medium text-gray-700">
                    {dict.sections.personal.fullNameLabel}
                  </p>
                  <p className="text-base text-gray-800">
                    {propUser.firstName || ''}{' '}
                    {propUser.lastName || dict.sections.personal.fullNameNotSet}
                  </p>
                </div>
              </div>
              <div className="bg-gray-50 p-3 rounded-lg flex items-start gap-3">
                <Mail className="w-5 h-5 text-blue-600 mt-0.5" />
                <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between w-full gap-3">
                  <div>
                    <p className="text-sm font-medium text-gray-700">
                      {dict.sections.personal.emailLabel}
                    </p>
                    <p className="text-base text-gray-800">{propUser.email}</p>
                  </div>
                  {!propUser.isVerified && (
                    <Button
                      variant="outline"
                      size="sm"
                      onClick={sendVerificationEmail}
                      disabled={isSendingVerification}
                    >
                      <Mail className="w-4 h-4 me-2" />
                      {dict.sections.personal.sendVerificationButton}
                    </Button>
                  )}
                </div>
              </div>
            </div>
          </div>
          <div className="py-4">
            <h3 className="text-base font-semibold mb-4 flex items-center">
              <Shield className="w-4 h-4 text-blue-600 me-2" />
              {dict.sections.status.title}
            </h3>
            <div className="grid gap-3">
              <div className="bg-gray-50 p-3 rounded-lg flex items-start gap-3">
                <Shield className="w-5 h-5 text-blue-600 mt-0.5" />
                <div>
                  <p className="text-sm font-medium text-gray-700">
                    {dict.sections.status.permissionsLabel}
                  </p>
                  <div className="flex flex-wrap gap-2 mt-1">
                    <Badge variant="outline">
                      {dict.sections.status.roles[propUser.role]}
                    </Badge>
                    <Badge>
                      {dict.sections.status.statuses[propUser.status]}
                    </Badge>
                    <Badge>
                      {propUser.isVerified
                        ? dict.sections.status.verification.verified
                        : dict.sections.status.verification.notVerified}
                    </Badge>
                  </div>
                </div>
              </div>
              <div className="bg-gray-50 p-3 rounded-lg flex items-start gap-3">
                <Clock className="w-5 h-5 text-blue-600 mt-0.5" />
                <div>
                  <p className="text-sm font-medium text-gray-700">
                    {dict.sections.status.timeInfoLabel}
                  </p>
                  <p className="text-gray-800">
                    {dict.sections.status.createdAt}{' '}
                    {new Date(propUser.createdAt).toLocaleDateString(locale)}
                  </p>
                  {propUser.lastLogin && (
                    <p className="text-gray-800">
                      {dict.sections.status.lastLogin}{' '}
                      {new Date(propUser.lastLogin).toLocaleDateString(locale)}
                    </p>
                  )}
                </div>
              </div>
            </div>
          </div>
          <div className="py-4">
            <h3 className="text-base font-semibold mb-4 flex items-center">
              <Bell className="w-4 h-4 text-blue-600 me-2" />
              {dict.sections.marketing.title}
            </h3>
            <div className="bg-gray-50 p-3 rounded-lg flex items-center justify-between">
              <div>
                <Label
                  htmlFor="marketing-switch"
                  className="cursor-pointer text-start"
                >
                  {dict.sections.marketing.label}
                </Label>
                <p className="text-xs text-gray-600 text-start">
                  {dict.sections.marketing.description}
                </p>
              </div>
              <Switch
                id="marketing-switch"
                checked={marketingConsent}
                onCheckedChange={handleMarketingConsentChange}
                disabled={isMarketingLoading}
              />
            </div>
          </div>
          <div className="py-4">
            <div className="flex items-center justify-between mb-4">
              <div className="text-start">
                <h3 className="text-base font-semibold flex items-center">
                  <Key className="w-4 h-4 text-blue-600 me-2" />
                  {dict.sections.security.title}
                </h3>
                <p className="text-sm text-muted-foreground">
                  {dict.sections.security.description}
                </p>
              </div>
              {sessionStatus !== 'loading' && canChangePassword && (
                <Button
                  variant="outline"
                  size="sm"
                  onClick={() => setIsChangingPassword(true)}
                  disabled={isLoading}
                >
                  <Key className="w-4 h-4 me-2" />
                  {dict.sections.security.changePasswordButton}
                </Button>
              )}
            </div>
            <div className="grid gap-3">
              <div className="bg-gray-50 p-3 rounded-lg flex items-start gap-3">
                <Shield className="w-5 h-5 text-blue-600 mt-0.5" />
                <div>
                  <p className="text-sm font-medium text-gray-700">
                    {dict.sections.security.accountVerificationLabel}
                  </p>
                  <p className="text-base text-gray-800 flex items-center gap-1">
                    {propUser.isVerified ? (
                      <CheckCircle className="w-4 h-4 text-green-600" />
                    ) : (
                      <XCircle className="w-4 h-4 text-red-600" />
                    )}
                    {propUser.isVerified
                      ? dict.sections.status.verification.verified
                      : dict.sections.status.verification.notVerified}
                  </p>
                </div>
              </div>
              {sessionStatus !== 'loading' && !canChangePassword && (
                <div className="bg-gray-50 p-3 rounded-lg flex items-start gap-3">
                  <Key className="w-5 h-5 text-blue-600 mt-0.5" />
                  <div>
                    <p className="text-sm font-medium text-gray-700">
                      {dict.sections.security.passwordManagementLabel}
                    </p>
                    <p className="text-sm text-gray-600">
                      {session?.user?.accounts &&
                      session.user.accounts.length > 0
                        ? dict.sections.security.managedByProvider.replace(
                            '{{provider}}',
                            session.user.accounts[0].provider
                          )
                        : dict.sections.security.managedExternally}
                    </p>
                  </div>
                </div>
              )}
            </div>
          </div>
          <div className="py-4 border-t border-dashed border-red-200">
            <div className="flex items-center justify-between">
              <div className="text-start">
                <h3 className="text-base font-semibold flex items-center text-red-600">
                  <Trash2 className="w-4 h-4 me-2" />
                  {dict.sections.delete.title}
                </h3>
                <p className="text-sm text-muted-foreground">
                  {dict.sections.delete.description}
                </p>
              </div>
              <Button
                variant="destructive"
                size="sm"
                onClick={() => setIsDeletingAccount(true)}
                disabled={isLoading}
              >
                <Trash2 className="w-4 h-4 me-2" />
                {dict.sections.delete.deleteButton}
              </Button>
            </div>
          </div>
        </CardContent>
        <CardFooter className="bg-gradient-to-r from-gray-50 to-white border-t p-4 text-sm text-gray-500 relative">
          <div className="flex items-center">
            <Bell className="w-4 h-4 text-blue-600 me-2" />
            <span>{dict.cardFooter.notice}</span>
          </div>
        </CardFooter>
      </Card>

      {canChangePassword && (
        <Dialog
          open={isChangingPassword}
          onOpenChange={(open) => {
            if (!open) resetPasswordForm();
            else setIsChangingPassword(true);
          }}
        >
          <DialogContent
            className="sm:max-w-md"
            dir={locale === 'he' ? 'rtl' : 'ltr'}
          >
            <DialogHeader className="text-start">
              <DialogTitle>{dict.passwordDialog.title}</DialogTitle>
              <DialogDescription>
                {passwordChangeStep === 1
                  ? dict.passwordDialog.step1Description
                  : dict.passwordDialog.step2Description.replace(
                      '{{email}}',
                      propUser.email
                    )}
              </DialogDescription>
            </DialogHeader>
            {passwordChangeStep === 1 ? (
              <div className="space-y-4 text-start">
                <div className="space-y-2">
                  <Label htmlFor="currentPassword">
                    {dict.passwordDialog.currentPasswordLabel}
                  </Label>
                  <div className="relative">
                    <Input
                      id="currentPassword"
                      type={showCurrentPassword ? 'text' : 'password'}
                      value={currentPassword}
                      onChange={(e) => setCurrentPassword(e.target.value)}
                    />
                    <Button
                      variant="ghost"
                      size="icon"
                      className="absolute end-1 top-1/2 -translate-y-1/2 h-7 w-7"
                      onClick={() =>
                        setShowCurrentPassword(!showCurrentPassword)
                      }
                    >
                      <span className="sr-only">
                        {showCurrentPassword
                          ? dict.passwordDialog.hidePassword
                          : dict.passwordDialog.showPassword}
                      </span>
                      {showCurrentPassword ? (
                        <EyeOff className="h-4 w-4" />
                      ) : (
                        <Eye className="h-4 w-4" />
                      )}
                    </Button>
                  </div>
                </div>
                <div className="space-y-2">
                  <Label htmlFor="newPassword">
                    {dict.passwordDialog.newPasswordLabel}
                  </Label>
                  <div className="relative">
                    <Input
                      id="newPassword"
                      type={showNewPassword ? 'text' : 'password'}
                      value={newPassword}
                      onChange={(e) => setNewPassword(e.target.value)}
                    />
                    <Button
                      variant="ghost"
                      size="icon"
                      className="absolute end-1 top-1/2 -translate-y-1/2 h-7 w-7"
                      onClick={() => setShowNewPassword(!showNewPassword)}
                    >
                      <span className="sr-only">
                        {showNewPassword
                          ? dict.passwordDialog.hidePassword
                          : dict.passwordDialog.showPassword}
                      </span>
                      {showNewPassword ? (
                        <EyeOff className="h-4 w-4" />
                      ) : (
                        <Eye className="h-4 w-4" />
                      )}
                    </Button>
                  </div>
                </div>
                <div className="space-y-2">
                  <Label htmlFor="confirmPassword">
                    {dict.passwordDialog.confirmPasswordLabel}
                  </Label>
                  <div className="relative">
                    <Input
                      id="confirmPassword"
                      type={showConfirmPassword ? 'text' : 'password'}
                      value={confirmPassword}
                      onChange={(e) => setConfirmPassword(e.target.value)}
                    />
                    <Button
                      variant="ghost"
                      size="icon"
                      className="absolute end-1 top-1/2 -translate-y-1/2 h-7 w-7"
                      onClick={() =>
                        setShowConfirmPassword(!showConfirmPassword)
                      }
                    >
                      <span className="sr-only">
                        {showConfirmPassword
                          ? dict.passwordDialog.hidePassword
                          : dict.passwordDialog.showPassword}
                      </span>
                      {showConfirmPassword ? (
                        <EyeOff className="h-4 w-4" />
                      ) : (
                        <Eye className="h-4 w-4" />
                      )}
                    </Button>
                  </div>
                </div>
                {newPassword && (
                  <div className="space-y-2">
                    <div className="flex items-center justify-between">
                      <p className="text-xs font-medium">
                        {dict.passwordDialog.strengthLabel}
                      </p>
                      <p
                        className={`text-xs font-semibold ${getPasswordStrengthColor().replace('bg-', 'text-')}`}
                      >
                        {getPasswordStrengthText()}
                      </p>
                    </div>
                    <Progress
                      value={passwordStrength}
                      className={`h-1.5 ${getPasswordStrengthColor()}`}
                    />
                    <ul className="grid grid-cols-2 gap-x-4 gap-y-1 mt-2">
                      <PasswordRequirement
                        label={dict.passwordDialog.requirements.length.replace(
                          '{{count}}',
                          String(PASSWORD_MIN_LENGTH)
                        )}
                        met={passwordRequirements.length}
                      />
                      <PasswordRequirement
                        label={dict.passwordDialog.requirements.uppercase}
                        met={passwordRequirements.uppercase}
                      />
                      <PasswordRequirement
                        label={dict.passwordDialog.requirements.lowercase}
                        met={passwordRequirements.lowercase}
                      />
                      <PasswordRequirement
                        label={dict.passwordDialog.requirements.number}
                        met={passwordRequirements.number}
                      />
                    </ul>
                  </div>
                )}
              </div>
            ) : (
              <div className="space-y-4 text-start">
                <Label htmlFor="verificationCode">
                  {dict.passwordDialog.verificationCodeLabel}
                </Label>
                <Input
                  id="verificationCode"
                  value={verificationCode}
                  onChange={(e) => setVerificationCode(e.target.value)}
                  placeholder="123456"
                  maxLength={6}
                />
              </div>
            )}
            <DialogFooter>
              <Button variant="outline" onClick={resetPasswordForm}>
                {dict.passwordDialog.cancelButton}
              </Button>
              <Button
                onClick={
                  passwordChangeStep === 1
                    ? initiatePasswordChange
                    : completePasswordChange
                }
                disabled={isLoading}
              >
                {isLoading ? (
                  <Loader2 className="me-2 h-4 w-4 animate-spin" />
                ) : null}
                {passwordChangeStep === 1
                  ? dict.passwordDialog.continueButton
                  : dict.passwordDialog.confirmButton}
              </Button>
            </DialogFooter>
          </DialogContent>
        </Dialog>
      )}

      <Dialog
        open={isDeletingAccount}
        onOpenChange={(open) => {
          if (!open) {
            setIsDeletingAccount(false);
            setDeleteConfirmText('');
          } else {
            setIsDeletingAccount(true);
          }
        }}
      >
        <DialogContent
          className="sm:max-w-md"
          dir={locale === 'he' ? 'rtl' : 'ltr'}
        >
          <DialogHeader className="text-start">
            <DialogTitle>{dict.deleteDialog.title}</DialogTitle>
            <DialogDescription>
              {dict.deleteDialog.description}
            </DialogDescription>
          </DialogHeader>
          <div className="grid gap-4 py-4 text-start">
            <Label htmlFor="deleteConfirm">
              {dict.deleteDialog.confirmationLabel}{' '}
              <strong>{dict.deleteDialog.confirmationPhrase}</strong>
            </Label>
            <Input
              id="deleteConfirm"
              value={deleteConfirmText}
              onChange={(e) => setDeleteConfirmText(e.target.value)}
              placeholder={dict.deleteDialog.confirmationPhrase}
            />
            {deleteConfirmText &&
              deleteConfirmText !== dict.deleteDialog.confirmationPhrase && (
                <p className="text-xs text-red-600">
                  {dict.deleteDialog.mismatchWarning}
                </p>
              )}
          </div>
          <DialogFooter>
            <Button
              variant="outline"
              onClick={() => setIsDeletingAccount(false)}
            >
              {dict.deleteDialog.cancelButton}
            </Button>
            <Button
              variant="destructive"
              onClick={handleDeleteAccount}
              disabled={
                isLoading ||
                deleteConfirmText !== dict.deleteDialog.confirmationPhrase
              }
            >
              {isLoading
                ? dict.deleteDialog.deletingButton
                : dict.deleteDialog.deleteButton}
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </div>
  );
};

export default AccountSettings;
--- End of Content for account-settings.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\profile\constants.ts
--------------------------------------------------------------------------------
Content:
// src/components/profile/constants.ts
import { Heart, User, Users, Scroll, GraduationCap, MapPin } from "lucide-react";

// Keys for WORLDS, titles are now in the dictionary
export const WORLD_KEYS = {
  values: "values",
  personality: "personality",
  relationship: "relationship",
  religion: "religion",
  partner: "partner",
} as const;

export const WORLDS_CONFIG = {
  [WORLD_KEYS.values]: {
    icon: Heart,
    color: "text-pink-500",
    bgColor: "bg-pink-50",
    borderColor: "border-pink-200",
  },
  [WORLD_KEYS.personality]: {
    icon: User,
    color: "text-blue-500",
    bgColor: "bg-blue-50",
    borderColor: "border-blue-200",
  },
  [WORLD_KEYS.relationship]: {
    icon: Users,
    color: "text-purple-500",
    bgColor: "bg-purple-50",
    borderColor: "border-purple-200",
  },
  [WORLD_KEYS.religion]: {
    icon: Scroll,
    color: "text-indigo-500",
    bgColor: "bg-indigo-50",
    borderColor: "border-indigo-200",
  },
  [WORLD_KEYS.partner]: {
    icon: Heart,
    color: "text-red-500",
    bgColor: "bg-red-50",
    borderColor: "border-red-200",
  },
} as const;


// Keys for PROFILE_SECTIONS, titles are in the dictionary
export const PROFILE_SECTION_KEYS = {
  BASIC_INFO: "BASIC_INFO",
  EDUCATION: "EDUCATION",
  LOCATION: "LOCATION",
  FAMILY: "FAMILY",
  PREFERENCES: "PREFERENCES",
} as const;

export const PROFILE_SECTIONS_CONFIG = {
  [PROFILE_SECTION_KEYS.BASIC_INFO]: { icon: User },
  [PROFILE_SECTION_KEYS.EDUCATION]: { icon: GraduationCap },
  [PROFILE_SECTION_KEYS.LOCATION]: { icon: MapPin },
  [PROFILE_SECTION_KEYS.FAMILY]: { icon: Users },
  [PROFILE_SECTION_KEYS.PREFERENCES]: { icon: Heart },
} as const;


// Technical constants (keys or values that don't change with language)
export const CONTACT_PREFERENCE_KEYS = {
  DIRECT: "direct",
  MATCHMAKER: "matchmaker",
  BOTH: "both",
} as const;

// Validation rules (non-translatable)
export const VALIDATION_RULES = {
  AGE: {
    MIN: 18,
    MAX: 99
  },
  HEIGHT: {
    MIN: 100,
    MAX: 250
  },
  NAME: {
    MIN_LENGTH: 2,
    MAX_LENGTH: 50
  }
} as const;
--- End of Content for constants.ts ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\profile\index.ts
--------------------------------------------------------------------------------
Content:
// src/components/shared/profile/index.ts

// Main Components
export { default as ProfileCard } from './ProfileCard';

// Sections
export { default as PhotosSection } from './sections/PhotosSection';
export { default as PreferencesSection } from './sections/PreferencesSection';
export { default as ProfileSection } from './sections/ProfileSection';
export { default as QuestionnaireResponsesSection } from './sections/QuestionnaireResponsesSection';

// Elements
export { default as StatsCard } from './elements/StatsCard';
export { default as VisibilityControl } from './elements/VisibilityControl';
export { default as MinimalCard } from './elements/MinimalCard';

// Types
export * from './types/profile';
export * from './types/questionnaire';
--- End of Content for index.ts ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\profile\profile_contents.txt
--------------------------------------------------------------------------------
[This is the output log file itself. Content not included.]

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\profile\utils.ts
--------------------------------------------------------------------------------
Content:
// src/components/profile/utils.ts
import type { UserProfile } from "@/types/next-auth";
import { VALIDATION_RULES } from "./constants";
import { ProfileUtilsDict } from "@/types/dictionary";

export const calculateAge = (birthDate: Date): number => {
  const today = new Date();
  const birth = new Date(birthDate);
  let age = today.getFullYear() - birth.getFullYear();
  const monthDiff = today.getMonth() - birth.getMonth();
  
  if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birth.getDate())) {
    age--;
  }
  return age;
};

export const formatProfileData = (profile: UserProfile) => {
  return {
    ...profile,
    age: calculateAge(new Date(profile.birthDate)),
    // Add any other formatting needed
  };
};

// The function now returns error keys instead of strings.
// The component calling it will use the key to get the translated message.
export const validateProfileData = (data: Partial<UserProfile>) => {
  const errors: Record<string, string> = {};
  
  if (data.height && (data.height < VALIDATION_RULES.HEIGHT.MIN || data.height > VALIDATION_RULES.HEIGHT.MAX)) {
    errors.height = "heightRange";
  }
  
  return {
    isValid: Object.keys(errors).length === 0,
    errors
  };
};
--- End of Content for utils.ts ---

================================================================================
Directory: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\profile\elements
================================================================================

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\profile\elements\MinimalCard.tsx
--------------------------------------------------------------------------------
Content:
// src/components/profile/elements/MinimalCard.tsx
import React from "react";
import { Card } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { User, MapPin, Scroll, Heart } from "lucide-react";
import Image from "next/image";
import { calculateAge } from "../utils";
import type { UserProfile, UserImage } from "@/types/next-auth";
import type { MinimalCardDict } from "@/types/dictionary";

interface MinimalCardProps {
  profile: UserProfile;
  mainImage?: UserImage;
  onClick?: () => void;
  className?: string;
  dict: MinimalCardDict;
}

const MinimalCard: React.FC<MinimalCardProps> = ({
  profile,
  mainImage,
  onClick,
  className = "",
  dict,
}) => {
  const age = calculateAge(new Date(profile.birthDate));
  const userName = profile.user
    ? `${profile.user.firstName} ${profile.user.lastName}`
    : dict.nameNotAvailable;

  return (
    <Card
      onClick={onClick}
      className={`relative overflow-hidden cursor-pointer hover:shadow-md transition-shadow ${className}`}
    >
      <div className="flex gap-4 p-4">
        {/* Profile Image */}
        <div className="relative w-24 h-24 rounded-lg overflow-hidden bg-gray-100">
          {mainImage ? (
            <Image
              src={mainImage.url}
              alt={dict.profileImageAlt}
              fill
              className="object-cover"
              sizes="96px"
            />
          ) : (
            <div className="w-full h-full flex items-center justify-center">
              <User className="w-8 h-8 text-gray-400" />
            </div>
          )}
        </div>

        {/* Basic Info */}
        <div className="flex-1 space-y-2">
          <div>
            <h3 className="text-lg font-medium">{userName}</h3>
            <p className="text-sm text-gray-500">
              {dict.yearsOld.replace('{{age}}', age.toString())}
            </p>
          </div>

          <div className="flex flex-wrap gap-2">
            {profile.city && (
              <Badge variant="secondary" className="flex items-center gap-1">
                <MapPin className="w-3 h-3" />
                {profile.city}
              </Badge>
            )}
            {profile.religiousLevel && (
              <Badge variant="secondary" className="flex items-center gap-1">
                <Scroll className="w-3 h-3" />
                {profile.religiousLevel}
              </Badge>
            )}
          </div>

          {/* Availability Status */}
          <div className="flex items-center gap-2 text-sm">
            {profile.availabilityStatus === "AVAILABLE" ? (
              <Badge variant="success" className="flex items-center gap-1">
                <Heart className="w-3 h-3" />
                {dict.available}
              </Badge>
            ) : (
              <Badge variant="secondary" className="flex items-center gap-1">
                <Heart className="w-3 h-3" />
                {dict.inProcess}
              </Badge>
            )}
          </div>
        </div>
      </div>
    </Card>
  );
};

export default MinimalCard;
--- End of Content for MinimalCard.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\profile\elements\StatsCard.tsx
--------------------------------------------------------------------------------
Content:
// src/components/profile/elements/StatsCard.tsx
import React from 'react';
import { Card, CardContent } from '@/components/ui/card';
import { Progress } from '@/components/ui/progress';
import { cn } from '@/lib/utils';
import type { StatsCardDict } from '@/types/dictionary';

interface StatsCardProps {
  icon: React.ElementType;
  title: string;
  value: string | number;
  dict?: StatsCardDict; // Optional dict for specific cases
  progress?: number;
  trend?: { value: number; label: string; isPositive?: boolean };
  variant?: 'default' | 'success' | 'warning' | 'destructive';
  className?: string;
}

const StatsCard: React.FC<StatsCardProps> = ({
  icon: Icon,
  title,
  value,
  dict,
  progress,
  trend,
  variant = 'default',
  className,
}) => {
  const getVariantStyles = () => {
    switch (variant) {
      case 'success':
        return 'bg-emerald-50 dark:bg-emerald-900/20';
      case 'warning':
        return 'bg-amber-50 dark:bg-amber-900/20';
      case 'destructive':
        return 'bg-red-50 dark:bg-red-900/20';
      default:
        return 'bg-card';
    }
  };

  const isAvailabilityStatus = dict && title === dict.availabilityStatusTitle;
  const isAvailable =
    typeof value === 'string' && value.toLowerCase() === 'available';

  const renderValue = () => {
    if (isAvailabilityStatus && dict) {
      const displayValue = isAvailable
        ? dict.availabilityValue.available
        : dict.availabilityValue.unavailable;
      return (
        <div className="mt-1">
          <span
            className={cn(
              'inline-flex px-3 py-1 rounded-full text-sm font-semibold tracking-wide',
              isAvailable
                ? 'bg-emerald-100 text-emerald-800 dark:bg-emerald-900/30 dark:text-emerald-300'
                : 'bg-gray-100 text-gray-800 dark:bg-gray-800 dark:text-gray-200'
            )}
          >
            {displayValue}
          </span>
        </div>
      );
    }
    return <h3 className="text-2xl font-semibold">{value}</h3>;
  };

  return (
    <Card
      className={cn(
        'hover:shadow-md transition-shadow',
        getVariantStyles(),
        className
      )}
    >
      <CardContent className="p-6">
        <div className="flex items-center space-x-4 rtl:space-x-reverse">
          <div className="p-2 bg-primary/10 rounded-full">
            <Icon className="w-6 h-6 text-primary" />
          </div>
          <div className="flex-1 space-y-1">
            <p className="text-sm text-muted-foreground">{title}</p>
            {renderValue()}
          </div>
        </div>
        {progress !== undefined && (
          <div className="mt-4 space-y-2">
            <Progress
              value={progress}
              className="h-2"
              aria-label={`${title} progress: ${progress}%`}
            />
            <p className="text-sm text-muted-foreground text-right">
              {progress}%
            </p>
          </div>
        )}
        {trend && (
          <div className="mt-4 flex items-center">
            <span
              className={cn(
                'text-sm font-medium',
                trend.isPositive ? 'text-emerald-600' : 'text-red-600'
              )}
            >
              {trend.isPositive ? '+' : '-'}
              {trend.value}%
            </span>
            <span className="text-sm text-muted-foreground mr-2">
              {trend.label}
            </span>
          </div>
        )}
      </CardContent>
    </Card>
  );
};

export default StatsCard;
export type { StatsCardProps };
--- End of Content for StatsCard.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\profile\elements\VisibilityControl.tsx
--------------------------------------------------------------------------------
Content:
// src/components/profile/elements/VisibilityControl.tsx
import React from 'react';
import { Eye, EyeOff } from 'lucide-react';
import { Switch } from '@/components/ui/switch';
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from '@/components/ui/tooltip';
import { cn } from '@/lib/utils';
import type { VisibilityControlDict } from '@/types/dictionary';

interface VisibilityControlProps {
  isVisible: boolean;
  onChange: (isVisible: boolean) => void;
  dict: VisibilityControlDict;
  className?: string;
  disabled?: boolean;
}

const VisibilityControl: React.FC<VisibilityControlProps> = ({
  isVisible,
  onChange,
  dict,
  className,
  disabled = false,
}) => {
  return (
    <div
      className={cn(
        'flex items-center gap-2 bg-secondary/20 p-2 rounded-md',
        disabled && 'opacity-50 cursor-not-allowed',
        className
      )}
    >
      {isVisible ? (
        <Eye className="h-4 w-4 text-primary" aria-hidden="true" />
      ) : (
        <EyeOff className="h-4 w-4 text-muted-foreground" aria-hidden="true" />
      )}

      <TooltipProvider>
        <Tooltip>
          <TooltipTrigger asChild>
            <div className="relative">
              <Switch
                checked={isVisible}
                onCheckedChange={onChange}
                disabled={disabled}
                className={cn(
                  'data-[state=checked]:bg-primary',
                  disabled && 'cursor-not-allowed'
                )}
                aria-label={dict.ariaLabel.replace(
                  '{{status}}',
                  isVisible ? 'visible' : 'hidden'
                )}
              />
              <span className="sr-only">
                {isVisible ? dict.srAction.hide : dict.srAction.show}
              </span>
            </div>
          </TooltipTrigger>
          <TooltipContent side="left" className="max-w-[200px]" dir="rtl">
            <p>{isVisible ? dict.tooltip.visible : dict.tooltip.hidden}</p>
            <p className="text-xs text-muted-foreground mt-1">
              {`${dict.tooltip.actionPrefix} ${isVisible ? dict.tooltip.actionHide : dict.tooltip.actionShow}`}
            </p>
          </TooltipContent>
        </Tooltip>
      </TooltipProvider>
    </div>
  );
};

export default VisibilityControl;
export type { VisibilityControlProps };
--- End of Content for VisibilityControl.tsx ---

================================================================================
Directory: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\profile\sections
================================================================================

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\profile\sections\AIProfileAdvisorDialog.tsx
--------------------------------------------------------------------------------
Content:
// src/app/[locale]/(authenticated)/profile/components/advisor/AIProfileAdvisorDialog.tsx
'use client';

import React, { useState } from 'react';
import { Button } from '@/components/ui/button';
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription,
  DialogTrigger,
  DialogClose,
} from '@/components/ui/dialog';
import { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert';
import { Loader2, Sparkles, AlertTriangle, X } from 'lucide-react';
import { toast } from 'sonner';
import { cn } from '@/lib/utils'; // Import cn utility

import AnalysisResultDisplay from './AnalysisResultDisplay';
import type { AiProfileAnalysisResult } from '@/lib/services/aiService';
import { AIAdvisorDialogDict, AnalysisResultDisplayDict } from '@/types/dictionary';

interface AIProfileAdvisorDialogProps {
  userId: string;
  dict: AIAdvisorDialogDict;
  analysisDict: AnalysisResultDisplayDict;
  locale: string; // Added locale prop
}

export const AIProfileAdvisorDialog: React.FC<AIProfileAdvisorDialogProps> = ({
  userId,
  dict,
  analysisDict,
  locale,
}) => {
  const [isOpen, setIsOpen] = useState(false);
  const [analysis, setAnalysis] = useState<AiProfileAnalysisResult | null>(null);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const direction = locale === 'he' ? 'rtl' : 'ltr';

  const handleGetAnalysis = async () => {
    if (analysis) {
      setIsOpen(true);
      return;
    }

    setIsLoading(true);
    setError(null);

    try {
      const response = await fetch('/api/ai/analyze-my-profile', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
      });

      const result = await response.json();

      if (!response.ok || !result.success) {
        throw new Error(result.message || 'Error getting profile analysis.');
      }

      setAnalysis(result.data);
    } catch (err) {
      const errorMessage =
        err instanceof Error ? err.message : 'An unexpected error occurred.';
      setError(errorMessage);
      toast.error(dict.toast.errorTitle, {
        description: dict.toast.errorDescription.replace('{{error}}', errorMessage),
      });
    } finally {
      setIsLoading(false);
    }
  };

  const handleOpenChange = (open: boolean) => {
    setIsOpen(open);
    if (!open) {
      setError(null);
    }
  };

  const handleTriggerClick = () => {
    if (!analysis && !isLoading) {
      handleGetAnalysis();
    }
  };

  return (
    <Dialog open={isOpen} onOpenChange={handleOpenChange}>
      <DialogTrigger asChild>
        <Button
          onClick={handleTriggerClick}
          variant="outline"
          size="lg"
          className="rounded-full border-2 border-purple-300 bg-purple-50 text-purple-700 hover:bg-purple-100 hover:border-purple-400 transition-all duration-300 shadow-sm hover:shadow-lg group w-full max-w-sm flex items-center gap-2"
        >
          <Sparkles className="w-5 h-5 text-purple-500 transition-transform duration-500 group-hover:rotate-12 group-hover:scale-110" />
          <span>{dict.triggerButton}</span>
        </Button>
      </DialogTrigger>

      <DialogContent
        className="max-w-4xl w-[95vw] h-[90vh] flex flex-col p-0"
        dir={direction} // Dynamically set direction
      >
        <DialogClose asChild>
          <button
            className={cn(
              'absolute top-3 text-gray-400 hover:text-gray-600 transition-colors rounded-full p-1 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 z-10',
              direction === 'rtl' ? 'left-4' : 'right-4'
            )}
          >
            <X className="h-5 w-5" />
            <span className="sr-only">{dict.closeButton}</span>
          </button>
        </DialogClose>

        <DialogHeader className="p-4 border-b">
          <DialogTitle className="flex items-center gap-2 text-xl">
            <Sparkles className="w-6 h-6 text-purple-500" />
            <span>{dict.dialogTitle}</span>
          </DialogTitle>
          <DialogDescription>
            {dict.dialogDescription}
          </DialogDescription>
        </DialogHeader>

        <div className="flex-grow overflow-y-auto p-4 md:p-6 bg-slate-50/50">
          {isLoading ? (
            <div
              role="status"
              aria-live="polite"
              className="flex flex-col items-center justify-center h-full text-center"
            >
              <Loader2 className="w-12 h-12 text-purple-500 animate-spin mb-4" />
              <p className="text-lg font-semibold text-gray-700">
                {dict.loadingTitle}
              </p>
              <p className="text-sm text-gray-500 mt-2">
                {dict.loadingDescription}
              </p>
            </div>
          ) : error ? (
            <div className="flex flex-col items-center justify-center h-full text-center">
              <Alert variant="destructive" className="max-w-md">
                <AlertTriangle className="h-5 w-5" />
                <AlertTitle>{dict.errorAlertTitle}</AlertTitle>
                <AlertDescription>
                  <p>{dict.errorAlertDescription}</p>
                  <p className="text-xs mt-2">{error}</p>
                </AlertDescription>
              </Alert>
              <Button
                onClick={handleGetAnalysis}
                variant="outline"
                className="mt-4"
              >
                {dict.retryButton}
              </Button>
            </div>
          ) : analysis ? (
            <AnalysisResultDisplay
              analysis={analysis}
              dict={analysisDict}
              locale={locale} // Pass locale down
            />
          ) : (
            <div className="flex items-center justify-center h-full">
              <p>{dict.initialState}</p>
            </div>
          )}
        </div>
      </DialogContent>
    </Dialog>
  );
};

export default AIProfileAdvisorDialog;
--- End of Content for AIProfileAdvisorDialog.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\profile\sections\AnalysisResultDisplay.tsx
--------------------------------------------------------------------------------
Content:
// src/app/[locale]/(authenticated)/profile/components/advisor/AnalysisResultDisplay.tsx
'use client';

import React from 'react';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import {
  Card,
  CardContent,
  CardHeader,
  CardTitle,
  CardDescription,
} from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import {
  Lightbulb,
  CheckCircle2,
  AlertCircle,
  XCircle,
  User,
  Target,
} from 'lucide-react';
import { AiProfileAnalysisResult } from '@/lib/services/aiService';
import { cn } from '@/lib/utils';
import { AnalysisResultDisplayDict } from '@/types/dictionary';

interface AnalysisResultDisplayProps {
  analysis: AiProfileAnalysisResult;
  dict: AnalysisResultDisplayDict;
  locale: string; // Added locale prop
}

const TipCard: React.FC<{ area: string; tip: string }> = ({ area, tip }) => (
  <div className="p-4 rounded-lg bg-yellow-50/70 border border-yellow-200/80 flex items-start gap-4">
    <div className="flex-shrink-0 mt-1">
      <Lightbulb className="w-5 h-5 text-yellow-600" />
    </div>
    <div>
      <p className="font-semibold text-sm text-yellow-800">{area}</p>
      <p className="text-sm text-yellow-900 mt-1">{tip}</p>
    </div>
  </div>
);

interface ReportItemProps {
  area: string;
  status: 'COMPLETE' | 'PARTIAL' | 'MISSING';
  feedback: string;
  dict: AnalysisResultDisplayDict['completeness']['status'];
}

const ReportItem: React.FC<ReportItemProps> = ({
  area,
  status,
  feedback,
  dict,
}) => {
  const statusConfig = {
    COMPLETE: {
      icon: CheckCircle2,
      color: 'text-green-600',
      text: dict.complete,
    },
    PARTIAL: { icon: AlertCircle, color: 'text-amber-600', text: dict.partial },
    MISSING: { icon: XCircle, color: 'text-red-600', text: dict.missing },
  };

  const { icon: Icon, color, text } = statusConfig[status];

  return (
    <div className="flex items-start gap-3 p-3 border-b last:border-b-0">
      <div className="flex-shrink-0 mt-1">
        <Icon className={cn('w-5 h-5', color)} />
      </div>
      <div className="flex-1">
        <div className="flex justify-between items-center">
          <p className="font-medium text-sm text-slate-800">{area}</p>
          <Badge
            variant="outline"
            className={cn(
              'text-xs font-mono',
              color.replace('text-', 'border-').replace('-600', '-300')
            )}
          >
            {text}
          </Badge>
        </div>
        <p className="text-sm text-slate-600 mt-1">{feedback}</p>
      </div>
    </div>
  );
};

const AnalysisResultDisplay: React.FC<AnalysisResultDisplayProps> = ({
  analysis,
  dict,
  locale,
}) => {
  const direction = locale === 'he' ? 'rtl' : 'ltr';

  return (
    <div dir={direction} className="w-full">
      <Tabs defaultValue="summary" className="w-full">
        <TabsList className="grid w-full grid-cols-3 h-auto p-1.5 bg-slate-200/70 rounded-lg">
          <TabsTrigger value="summary">{dict.tabs.summary}</TabsTrigger>
          <TabsTrigger value="completeness">
            {dict.tabs.completeness}
          </TabsTrigger>
          <TabsTrigger value="tips">{dict.tabs.tips}</TabsTrigger>
        </TabsList>

        <div className="mt-4">
          <TabsContent value="summary" className="space-y-4">
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2 text-lg">
                  <User className="text-blue-500" />
                  {dict.summary.myPersonalityTitle}
                </CardTitle>
                <CardDescription>
                  {dict.summary.myPersonalityDescription}
                </CardDescription>
              </CardHeader>
              <CardContent>
                <p className="text-slate-700 whitespace-pre-wrap leading-relaxed">
                  {analysis.personalitySummary}
                </p>
              </CardContent>
            </Card>
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2 text-lg">
                  <Target className="text-green-500" />
                  {dict.summary.lookingForTitle}
                </CardTitle>
                <CardDescription>
                  {dict.summary.lookingForDescription}
                </CardDescription>
              </CardHeader>
              <CardContent>
                <p className="text-slate-700 whitespace-pre-wrap leading-relaxed">
                  {analysis.lookingForSummary}
                </p>
              </CardContent>
            </Card>
          </TabsContent>

          <TabsContent value="completeness">
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2 text-lg">
                  <CheckCircle2 className="text-indigo-500" />
                  {dict.completeness.title}
                </CardTitle>
                <CardDescription>
                  {dict.completeness.description}
                </CardDescription>
              </CardHeader>
              <CardContent className="p-0">
                <div className="space-y-0 divide-y">
                  {analysis.completenessReport.map((item, index) => (
                    <ReportItem
                      key={index}
                      {...item}
                      dict={dict.completeness.status}
                    />
                  ))}
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          <TabsContent value="tips">
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2 text-lg">
                  <Lightbulb className="text-yellow-500" />
                  {dict.tips.title}
                </CardTitle>
                <CardDescription>{dict.tips.description}</CardDescription>
              </CardHeader>
              <CardContent className="space-y-3">
                {analysis.actionableTips.map((tip, index) => (
                  <TipCard key={index} area={tip.area} tip={tip.tip} />
                ))}
              </CardContent>
            </Card>
          </TabsContent>
        </div>
      </Tabs>
    </div>
  );
};

export default AnalysisResultDisplay;
--- End of Content for AnalysisResultDisplay.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\profile\sections\BudgetDisplay.tsx
--------------------------------------------------------------------------------
Content:
// src/components/profile/sections/BudgetDisplay.tsx
import React from 'react';
import { Progress } from '@/components/ui/progress';
import { motion } from 'framer-motion';
import type { BudgetDisplayDict } from '@/types/dictionary';

interface BudgetDisplayProps {
  data: Record<string, number>;
  dict: BudgetDisplayDict;
  locale: string; // Added locale prop
}

const BudgetDisplay: React.FC<BudgetDisplayProps> = ({
  data,
  dict,
  locale,
}) => {
  const direction = locale === 'he' ? 'rtl' : 'ltr';

  if (!data || typeof data !== 'object' || Array.isArray(data)) {
    return <p className="text-sm text-red-500">{dict.errorInvalidData}</p>;
  }

  const sortedEntries = Object.entries(data)
    .filter(([_, value]) => typeof value === 'number' && value > 0)
    .sort(([, a], [, b]) => b - a);

  if (sortedEntries.length === 0) {
    return (
      <p className="text-sm text-gray-500 italic">{dict.noValuesAllocated}</p>
    );
  }

  const colors = [
    'bg-cyan-500',
    'bg-teal-500',
    'bg-sky-500',
    'bg-indigo-500',
    'bg-purple-500',
    'bg-gray-400',
  ];

  const containerVariants = {
    hidden: { opacity: 0 },
    visible: {
      opacity: 1,
      transition: { staggerChildren: 0.1 },
    },
  };

  // Adjust animation based on direction
  const itemVariants = {
    hidden: { opacity: 0, x: direction === 'rtl' ? 20 : -20 },
    visible: { opacity: 1, x: 0 },
  };

  return (
    <motion.div
      dir={direction} // Set direction for the whole component
      className="space-y-3 pt-2"
      variants={containerVariants}
      initial="hidden"
      animate="visible"
    >
      {sortedEntries.map(([label, value], index) => (
        <motion.div key={label} variants={itemVariants}>
          <div className="flex justify-between items-center mb-1 text-sm">
            <span className="font-medium text-gray-700">{label}</span>
            <span className="font-semibold text-cyan-700">{value}%</span>
          </div>
          <Progress
            value={value}
            className="h-2.5 rounded-full bg-gray-200/70"
            indicatorClassName={colors[index % colors.length]}
          />
        </motion.div>
      ))}
    </motion.div>
  );
};

export default BudgetDisplay;
--- End of Content for BudgetDisplay.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\profile\sections\PhotosSection.tsx
--------------------------------------------------------------------------------
Content:
// src/components/profile/sections/PhotosSection.tsx

'use client';

import React, { useRef, useState, useEffect, useCallback } from 'react';
import Image from 'next/image';
import { cn, getRelativeCloudinaryPath } from '@/lib/utils';
// UI Components
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import {
  Dialog,
  DialogContent,
  DialogTitle,
  DialogDescription,
  DialogHeader,
  DialogFooter,
} from '@/components/ui/dialog';
import { toast } from 'sonner';

// Icons
import {
  Camera,
  Star,
  Loader2,
  ChevronLeft,
  ChevronRight,
  Upload,
  Trash2,
  X,
  CheckCircle2,
  MinusSquare,
} from 'lucide-react';

// Types
import type { UserImage } from '@/types/next-auth';
import { PhotosSectionDict } from '@/types/dictionary';

interface PhotosSectionProps {
  images: UserImage[];
  isUploading: boolean;
  disabled?: boolean;
  maxImages?: number;
  onUpload: (files: File[]) => Promise<void>;
  onSetMain: (imageId: string) => Promise<void>;
  onDelete: (imageIds: string[]) => Promise<void>;
  dict: PhotosSectionDict;
  locale: string; // Prop for language to determine direction
}

const PhotosSection: React.FC<PhotosSectionProps> = ({
  images,
  isUploading: isExternallyUploading,
  disabled = false,
  maxImages = 5,
  onUpload,
  onSetMain,
  onDelete,
  dict,
  locale,
}) => {
  const fileInputRef = useRef<HTMLInputElement>(null);

  const [showImageViewer, setShowImageViewer] = useState(false);
  const [selectedViewerIndex, setSelectedViewerIndex] = useState<number | null>(
    null
  );
  const [isProcessing, setIsProcessing] = useState(false);
  const [deleteConfirmOpen, setDeleteConfirmOpen] = useState(false);
  const [imageToDelete, setImageToDelete] = useState<string | null>(null);
  const [uploadingFiles, setUploadingFiles] = useState<string[]>([]);
  const [selectionMode, setSelectionMode] = useState(false);
  const [selectedImageIds, setSelectedImageIds] = useState<Set<string>>(
    new Set()
  );

  const direction = locale === 'he' ? 'rtl' : 'ltr';
  const isLoading =
    isExternallyUploading || isProcessing || uploadingFiles.length > 0;

  const validateFiles = (
    files: FileList | File[]
  ): { validFiles: File[]; errors: string[] } => {
    const validTypes = ['image/jpeg', 'image/png', 'image/jpg', 'image/webp'];
    const maxSize = 5 * 1024 * 1024; // 5MB
    const validFiles: File[] = [];
    const errors: string[] = [];
    Array.from(files).forEach((file) => {
      if (!validTypes.includes(file.type)) {
        errors.push(
          dict.toasts.invalidFileTypeError.replace('{{fileName}}', file.name)
        );
        return;
      }
      if (file.size > maxSize) {
        errors.push(
          dict.toasts.fileTooLargeError.replace('{{fileName}}', file.name)
        );
        return;
      }
      validFiles.push(file);
    });
    return { validFiles, errors };
  };

  const handleFileSelect = async (e: React.ChangeEvent<HTMLInputElement>) => {
    const files = e.target.files;
    if (!files || files.length === 0) return;

    const remainingSlots = maxImages - images.length;
    if (remainingSlots <= 0) {
      toast.error(dict.toasts.maxImagesError);
      return;
    }
    if (files.length > remainingSlots) {
      toast.error(
        dict.toasts.slotsError.replace('{{count}}', remainingSlots.toString())
      );
      return;
    }
    if (isLoading) return;

    const { validFiles, errors } = validateFiles(files);
    if (errors.length > 0) {
      errors.forEach((error) => toast.error(error));
    }
    if (validFiles.length === 0) return;

    setUploadingFiles(validFiles.map((f) => f.name));
    try {
      await onUpload(validFiles);
      toast.success(
        dict.toasts.uploadSuccess.replace(
          '{{count}}',
          validFiles.length.toString()
        )
      );
    } catch (error) {
      console.error('Error during upload process:', error);
      toast.error(dict.toasts.uploadError);
    } finally {
      setUploadingFiles([]);
      if (fileInputRef.current) fileInputRef.current.value = '';
    }
  };

  const triggerFileInput = () => {
    if (!isLoading && !disabled && images.length < maxImages) {
      fileInputRef.current?.click();
    }
  };

  const handleToggleSelectionMode = () => {
    setSelectionMode((prev) => !prev);
    setSelectedImageIds(new Set());
  };

  const handleSelectAll = () => {
    if (selectedImageIds.size === images.length) {
      setSelectedImageIds(new Set());
    } else {
      setSelectedImageIds(new Set(images.map((img) => img.id)));
    }
  };

  const toggleImageSelection = (imageId: string) => {
    setSelectedImageIds((prev) => {
      const newSet = new Set(prev);
      if (newSet.has(imageId)) {
        newSet.delete(imageId);
      } else {
        newSet.add(imageId);
      }
      return newSet;
    });
  };

  const handleImageClick = (index: number) => {
    if (selectionMode) {
      toggleImageSelection(images[index].id);
    } else {
      setSelectedViewerIndex(index);
      setShowImageViewer(true);
    }
  };

  const handleBulkDelete = async () => {
    if (selectedImageIds.size === 0) {
      toast.info(dict.toasts.selectOneError);
      return;
    }

    const confirmationMessage = dict.confirmations.bulkDelete.replace(
      '{{count}}',
      selectedImageIds.size.toString()
    );
    if (!window.confirm(confirmationMessage)) {
      return;
    }

    setIsProcessing(true);
    try {
      await onDelete(Array.from(selectedImageIds));
      toast.success(
        dict.toasts.bulkDeleteSuccess.replace(
          '{{count}}',
          selectedImageIds.size.toString()
        )
      );
      setSelectionMode(false);
      setSelectedImageIds(new Set());
    } catch (error) {
      console.error('Error during bulk delete:', error);
      toast.error(dict.toasts.bulkDeleteError);
    } finally {
      setIsProcessing(false);
    }
  };

  const requestDelete = (imageId: string, event?: React.MouseEvent) => {
    event?.stopPropagation();
    if (isLoading) return;
    setImageToDelete(imageId);
    setDeleteConfirmOpen(true);
  };

  const confirmDelete = async () => {
    if (!imageToDelete || isProcessing) return;
    setIsProcessing(true);
    try {
      await onDelete([imageToDelete]);
      toast.success(dict.toasts.singleDeleteSuccess);
      closeImageViewer();
      setDeleteConfirmOpen(false);
      setImageToDelete(null);
    } catch (error) {
      console.error('Error deleting image:', error);
      toast.error(dict.toasts.singleDeleteError);
    } finally {
      setIsProcessing(false);
    }
  };

  const closeImageViewer = useCallback(() => {
    setShowImageViewer(false);
    setSelectedViewerIndex(null);
  }, []);

  const handleNextImage = useCallback(
    () =>
      setSelectedViewerIndex((prev) =>
        prev === null || prev >= images.length - 1 ? 0 : prev + 1
      ),
    [images.length]
  );
  const handlePreviousImage = useCallback(
    () =>
      setSelectedViewerIndex((prev) =>
        prev === null || prev <= 0 ? images.length - 1 : prev - 1
      ),
    [images.length]
  );

  const handleSetMainImage = async (
    imageId: string,
    showToast = true,
    event?: React.MouseEvent
  ) => {
    event?.stopPropagation();
    if (isLoading) return;
    const currentImage = images.find((img) => img.id === imageId);
    if (!currentImage || currentImage.isMain) return;
    setIsProcessing(true);
    try {
      await onSetMain(imageId);
      if (showToast) toast.success(dict.toasts.setMainSuccess);
    } catch (error) {
      console.error('Error setting main image:', error);
      toast.error(dict.toasts.setMainError);
    } finally {
      setIsProcessing(false);
    }
  };

  const handleControlClick = (e: React.MouseEvent) => e.stopPropagation();

  useEffect(() => {
    const handleKeyDown = (e: KeyboardEvent) => {
      if (!showImageViewer) return;
      if (direction === 'rtl') {
        if (e.key === 'ArrowRight') handlePreviousImage();
        if (e.key === 'ArrowLeft') handleNextImage();
      } else {
        if (e.key === 'ArrowRight') handleNextImage();
        if (e.key === 'ArrowLeft') handlePreviousImage();
      }
      if (e.key === 'Escape') closeImageViewer();
    };
    window.addEventListener('keydown', handleKeyDown);
    return () => window.removeEventListener('keydown', handleKeyDown);
  }, [
    showImageViewer,
    handlePreviousImage,
    handleNextImage,
    closeImageViewer,
    direction,
  ]);

  const getRemainingSlots = () => maxImages - images.length;

  return (
    <div
      dir={direction}
      className="bg-white/80 backdrop-blur-lg rounded-3xl shadow-xl p-6 md:p-8"
    >
      <div className="flex flex-col sm:flex-row items-start sm:items-center justify-between mb-6 pb-4 border-b border-gray-200/80">
        {!selectionMode ? (
          <>
            <div
              className={cn(
                'mb-3 sm:mb-0',
                direction === 'rtl' ? 'text-right' : 'text-left'
              )}
            >
              <h2 className="text-xl font-semibold text-gray-800">
                {dict.title}
              </h2>
              <p className="mt-1 text-sm text-gray-600">
                {dict.subtitle.replace('{{maxImages}}', maxImages.toString())}
              </p>
              {uploadingFiles.length > 0 && (
                <p className="mt-2 text-sm text-cyan-600 font-medium">
                  {dict.uploadingMultiple.replace(
                    '{{count}}',
                    uploadingFiles.length.toString()
                  )}
                </p>
              )}
            </div>
            <div className="flex gap-2 self-end sm:self-center">
              {images.length > 0 && !disabled && (
                <Button
                  variant="outline"
                  onClick={handleToggleSelectionMode}
                  className="rounded-full px-4 text-sm"
                >
                  {dict.selectForDeletion}
                </Button>
              )}
              {!disabled && (
                <Button
                  variant="outline"
                  onClick={triggerFileInput}
                  disabled={isLoading || images.length >= maxImages}
                  className="rounded-full border-2 border-cyan-300 text-cyan-700 hover:bg-cyan-50/50 hover:border-cyan-400 transition-all duration-300 px-5 py-2.5 text-sm font-medium flex items-center gap-2"
                >
                  {isExternallyUploading || uploadingFiles.length > 0 ? (
                    <Loader2 className="w-4 h-4 animate-spin" />
                  ) : (
                    <Upload className="w-4 h-4" />
                  )}
                  <span>{dict.uploadButton}</span>
                </Button>
              )}
            </div>
          </>
        ) : (
          <div className="w-full flex justify-between items-center">
            <div className="flex items-center gap-4">
              <Button
                variant="ghost"
                size="icon"
                onClick={handleToggleSelectionMode}
                className="rounded-full text-gray-600 hover:bg-gray-100"
              >
                <X className="w-5 h-5" />
              </Button>
              <span className="font-semibold text-gray-700">
                {dict.selectionHeader.replace(
                  '{{count}}',
                  selectedImageIds.size.toString()
                )}
              </span>
            </div>
            <div className="flex gap-2">
              <Button
                variant="outline"
                onClick={handleSelectAll}
                className="rounded-full px-4 text-sm"
              >
                {selectedImageIds.size === images.length
                  ? dict.deselectAll
                  : dict.selectAll}
              </Button>
              <Button
                variant="destructive"
                onClick={handleBulkDelete}
                disabled={isProcessing || selectedImageIds.size === 0}
                className="rounded-full px-4 text-sm flex items-center gap-2"
              >
                {isProcessing ? (
                  <Loader2 className="w-4 h-4 animate-spin" />
                ) : (
                  <Trash2 className="w-4 h-4" />
                )}
                {dict.deleteSelected}
              </Button>
            </div>
          </div>
        )}
      </div>

      <input
        type="file"
        ref={fileInputRef}
        className="hidden"
        accept="image/jpeg,image/png,image/jpg,image/webp"
        onChange={handleFileSelect}
        disabled={isLoading || disabled || images.length >= maxImages}
        multiple
      />

      <div className="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-5 gap-4 md:gap-5">
        {images.map((image, index) => (
          <div
            key={image.id}
            role="button"
            tabIndex={0}
            aria-pressed={
              selectionMode ? selectedImageIds.has(image.id) : undefined
            }
            aria-label={`${dict.selectForDeletion} ${index + 1}`}
            className={cn(
              'relative group aspect-square rounded-xl overflow-hidden bg-gray-100 shadow-md transition-all duration-300 ease-in-out',
              selectionMode
                ? 'cursor-pointer'
                : 'cursor-pointer hover:shadow-lg',
              selectedImageIds.has(image.id) &&
                'ring-4 ring-offset-2 ring-cyan-500'
            )}
            onClick={() => handleImageClick(index)}
            onKeyDown={(e) => {
              if (e.key === 'Enter' || e.key === ' ') {
                e.preventDefault();
                handleImageClick(index);
              }
            }}
          >
            <Image
              src={getRelativeCloudinaryPath(image.url)}
              alt={`${dict.title} ${index + 1}`}
              fill
              className={cn(
                'object-cover transition-transform duration-300',
                !selectionMode && 'group-hover:scale-105'
              )}
              sizes="(max-width: 640px) 50vw, (max-width: 768px) 33vw, (max-width: 1024px) 25vw, 20vw"
              priority={index < 2}
            />
            {selectionMode && (
              <div className="absolute inset-0 bg-black/30 flex items-center justify-center transition-opacity opacity-0 group-hover:opacity-100">
                {selectedImageIds.has(image.id) ? (
                  <CheckCircle2 className="w-10 h-10 text-white drop-shadow-lg" />
                ) : (
                  <MinusSquare className="w-10 h-10 text-white/70 drop-shadow-lg" />
                )}
              </div>
            )}
            {!disabled && !selectionMode && (
              <div
                className={cn(
                  'absolute top-2 z-10 flex gap-1.5 opacity-85 group-hover:opacity-100 transition-opacity duration-200',
                  direction === 'rtl' ? 'left-2' : 'right-2'
                )}
                onClick={handleControlClick}
              >
                <Button
                  variant="secondary"
                  size="icon"
                  className={cn(
                    'w-8 h-8 rounded-full shadow-md border border-white/30 bg-black/40 text-white hover:bg-black/60 transition-colors',
                    image.isMain ? 'cursor-default' : 'hover:text-yellow-300'
                  )}
                  onClick={(e) => handleSetMainImage(image.id, true, e)}
                  disabled={image.isMain || isLoading}
                  title={image.isMain ? dict.mainBadge : dict.setAsMainTooltip}
                  aria-label={`${dict.setAsMainTooltip} ${index + 1}`}
                >
                  <Star
                    className={cn(
                      'w-4 h-4 transition-colors',
                      image.isMain
                        ? 'text-yellow-400 fill-yellow-400'
                        : 'text-white'
                    )}
                  />
                </Button>
                <Button
                  variant="secondary"
                  size="icon"
                  className="w-8 h-8 rounded-full shadow-md border border-white/30 bg-black/40 text-white hover:bg-red-600 hover:border-red-700 transition-colors"
                  onClick={(e) => requestDelete(image.id, e)}
                  disabled={isLoading}
                  title={dict.deleteTooltip}
                  aria-label={`${dict.deleteTooltip} ${index + 1}`}
                >
                  <Trash2 className="w-4 h-4" />
                </Button>
              </div>
            )}
            {image.isMain && !selectionMode && (
              <Badge
                className={cn(
                  'absolute bottom-2 rounded-full px-2.5 py-0.5 text-xs font-medium shadow-md text-white bg-gradient-to-r from-cyan-500 to-pink-500 border-none',
                  direction === 'rtl' ? 'right-2' : 'left-2'
                )}
              >
                {dict.mainBadge}
              </Badge>
            )}
          </div>
        ))}

        {!disabled && !selectionMode && images.length < maxImages && (
          <div
            onClick={triggerFileInput}
            className="flex flex-col items-center justify-center text-center p-4 aspect-square rounded-xl border-2 border-dashed border-cyan-300/70 bg-cyan-50/30 hover:bg-cyan-50/60 hover:border-cyan-400 transition-colors duration-300 cursor-pointer group"
          >
            <Upload className="w-8 h-8 text-cyan-500 mb-2 transition-transform group-hover:scale-110" />
            <span className="text-sm font-medium text-cyan-700">
              {dict.uploadPlaceholder.title}
            </span>
            <span className="text-xs text-cyan-600/90 mt-1">
              {dict.uploadPlaceholder.remaining.replace(
                '{{count}}',
                getRemainingSlots().toString()
              )}
            </span>
            <span className="text-xs text-cyan-500/80 mt-1">
              {dict.uploadPlaceholder.prompt}
            </span>
          </div>
        )}

        {uploadingFiles.map((_, index) => (
          <div
            key={`uploading-${index}`}
            className="relative aspect-square rounded-xl overflow-hidden bg-gray-200 shadow-md"
          >
            <div className="absolute inset-0 flex flex-col items-center justify-center">
              <Loader2 className="w-8 h-8 text-cyan-500 animate-spin mb-2" />
              <span className="text-xs text-gray-600 text-center px-2">
                {dict.uploadingPlaceholder}
              </span>
            </div>
            <div className="absolute bottom-0 left-0 right-0 bg-cyan-500 h-1 animate-pulse"></div>
          </div>
        ))}
      </div>

      {images.length === 0 &&
        uploadingFiles.length === 0 &&
        !disabled &&
        !selectionMode && (
          <div className="text-center py-16 mt-6 bg-gradient-to-br from-cyan-50/20 to-pink-50/20 rounded-xl border border-dashed border-gray-300">
            <Camera className="w-12 h-12 mx-auto text-gray-400/80" />
            <p className="mt-4 text-gray-600 font-medium">
              {dict.emptyState.title}
            </p>
            <p className="text-sm text-gray-500 mt-1 px-4">
              {dict.emptyState.description}
            </p>
          </div>
        )}
      {images.length === 0 && disabled && (
        <div className="text-center py-16 mt-6 bg-gray-50/50 rounded-xl border border-gray-200">
          <Camera className="w-12 h-12 mx-auto text-gray-400" />
          <p className="mt-4 text-gray-500 font-medium">
            {dict.emptyStateDisabled.title}
          </p>
        </div>
      )}

      <Dialog open={deleteConfirmOpen} onOpenChange={setDeleteConfirmOpen}>
        <DialogContent
          className="sm:max-w-md bg-white/95 backdrop-blur-md rounded-2xl shadow-2xl border-none p-6"
          dir={direction}
        >
          <DialogHeader>
            <DialogTitle className="text-lg font-semibold text-gray-800">
              {dict.deleteDialog.title}
            </DialogTitle>
            <DialogDescription className="text-sm text-gray-600 mt-2">
              {dict.deleteDialog.description}
            </DialogDescription>
          </DialogHeader>
          <DialogFooter className="mt-6 flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2 sm:space-x-reverse gap-2">
            <Button
              type="button"
              variant="outline"
              onClick={() => setDeleteConfirmOpen(false)}
              disabled={isLoading}
              className="rounded-full px-5"
            >
              {dict.deleteDialog.cancel}
            </Button>
            <Button
              type="button"
              variant="destructive"
              onClick={confirmDelete}
              disabled={isLoading}
              className="rounded-full px-5 flex items-center gap-2"
            >
              {isProcessing ? (
                <Loader2 className="w-4 h-4 animate-spin" />
              ) : (
                <Trash2 className="w-4 h-4" />
              )}
              <span>{dict.deleteDialog.confirm}</span>
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>

      <Dialog open={showImageViewer} onOpenChange={setShowImageViewer}>
        <DialogContent
          className="p-0 m-0 w-screen h-screen max-w-none sm:max-w-full sm:h-full bg-black/90 backdrop-blur-sm border-none rounded-none flex items-center justify-center outline-none"
          aria-describedby={undefined}
          dir={direction}
        >
          <Button
            variant="ghost"
            size="icon"
            className={cn(
              'absolute top-4 z-50 bg-black/40 hover:bg-black/60 text-white rounded-full w-10 h-10 sm:w-12 sm:h-12 transition-colors',
              direction === 'rtl' ? 'right-4' : 'left-4'
            )}
            onClick={closeImageViewer}
            aria-label={dict.imageViewer.closeLabel}
          >
            <X className="w-6 h-6" />
          </Button>
          {selectedViewerIndex !== null && images[selectedViewerIndex] && (
            <div className="relative w-full h-full flex items-center justify-center">
              <div className="relative w-[95%] h-[85%] sm:w-[90%] sm:h-[90%]">
                <Image
                  src={getRelativeCloudinaryPath(
                    images[selectedViewerIndex].url
                  )}
                  alt={dict.imageViewer.altText.replace(
                    '{{index}}',
                    (selectedViewerIndex + 1).toString()
                  )}
                  fill
                  className="object-contain select-none"
                  sizes="90vw"
                  priority
                />
              </div>
              <div className="absolute top-0 left-0 w-full h-full pointer-events-none">
                {images.length > 1 && (
                  <>
                    {/* Previous Button */}
                    <Button
                      variant="ghost"
                      size="icon"
                      className={cn(
                        'absolute top-1/2 transform -translate-y-1/2 z-40 bg-black/40 hover:bg-black/60 text-white rounded-full w-10 h-10 sm:w-12 sm:h-12 transition-colors pointer-events-auto',
                        direction === 'rtl'
                          ? 'right-2 sm:right-4'
                          : 'left-2 sm:left-4'
                      )}
                      onClick={(e) => {
                        e.stopPropagation();
                        handlePreviousImage();
                      }}
                      disabled={selectedViewerIndex === 0}
                      aria-label={dict.imageViewer.prevLabel}
                    >
                      {direction === 'rtl' ? (
                        <ChevronRight className="w-7 h-7" />
                      ) : (
                        <ChevronLeft className="w-7 h-7" />
                      )}
                    </Button>
                    {/* Next Button */}
                    <Button
                      variant="ghost"
                      size="icon"
                      className={cn(
                        'absolute top-1/2 transform -translate-y-1/2 z-40 bg-black/40 hover:bg-black/60 text-white rounded-full w-10 h-10 sm:w-12 sm:h-12 transition-colors pointer-events-auto',
                        direction === 'rtl'
                          ? 'left-2 sm:left-4'
                          : 'right-2 sm:right-4'
                      )}
                      onClick={(e) => {
                        e.stopPropagation();
                        handleNextImage();
                      }}
                      disabled={selectedViewerIndex === images.length - 1}
                      aria-label={dict.imageViewer.nextLabel}
                    >
                      {direction === 'rtl' ? (
                        <ChevronLeft className="w-7 h-7" />
                      ) : (
                        <ChevronRight className="w-7 h-7" />
                      )}
                    </Button>
                  </>
                )}
                {!disabled && (
                  <div
                    className={cn(
                      'absolute top-4 z-50 flex flex-col sm:flex-row gap-2 pointer-events-auto',
                      direction === 'rtl' ? 'left-4' : 'right-4'
                    )}
                  >
                    {!images[selectedViewerIndex].isMain && (
                      <Button
                        variant="secondary"
                        className="rounded-full bg-white/70 backdrop-blur-sm shadow-md hover:bg-white/90 text-gray-800 px-3 py-1.5 text-xs sm:text-sm border border-white/20 flex items-center gap-1.5"
                        onClick={(e) =>
                          handleSetMainImage(
                            images[selectedViewerIndex].id,
                            true,
                            e
                          )
                        }
                        size="sm"
                        disabled={isLoading}
                      >
                        <Star className="w-4 h-4" />
                        <span>{dict.imageViewer.setMainButton}</span>
                      </Button>
                    )}
                    <Button
                      variant="destructive"
                      className="rounded-full bg-red-600/80 hover:bg-red-700 text-white px-3 py-1.5 text-xs sm:text-sm shadow-md border-none flex items-center gap-1.5"
                      onClick={(e) =>
                        requestDelete(images[selectedViewerIndex].id, e)
                      }
                      size="sm"
                      disabled={isLoading}
                    >
                      <Trash2 className="w-4 h-4" />
                      <span>{dict.imageViewer.deleteButton}</span>
                    </Button>
                  </div>
                )}
                {images.length > 0 && (
                  <div className="absolute bottom-4 left-1/2 transform -translate-x-1/2 bg-black/60 text-white px-3 py-1 rounded-full text-xs sm:text-sm font-medium select-none">
                    {dict.imageViewer.counter
                      .replace(
                        '{{current}}',
                        (selectedViewerIndex + 1).toString()
                      )
                      .replace('{{total}}', images.length.toString())}
                  </div>
                )}
              </div>
            </div>
          )}
        </DialogContent>
      </Dialog>
    </div>
  );
};

export default PhotosSection;
--- End of Content for PhotosSection.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\profile\sections\PreferencesSection.tsx
--------------------------------------------------------------------------------
Content:
// src/app/(authenticated)/profile/components/dashboard/PreferencesSection.tsx
'use client';
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from '@/components/ui/tooltip';
import { Info, XCircle } from 'lucide-react';
import React, { useState, useEffect, useMemo } from 'react';
import { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import {
  Pencil,
  Save,
  X,
  FileText,
  SlidersHorizontal,
  MapPin,
  GraduationCap,
  Users,
  Sparkles,
  Heart,
  Briefcase,
  Shield,
  Palette,
  Smile,
} from 'lucide-react';
import { UserProfile } from '@/types/next-auth';
import { cn } from '@/lib/utils';
import {
  Gender,
  ServiceType,
  HeadCoveringType,
  KippahType,
  ReligiousJourney,
} from '@prisma/client';
import Autocomplete from 'react-google-autocomplete';
import { PreferencesSectionDict } from '@/types/dictionary'; // Assuming this is the correct path

// This would typically come from a context or a hook like `useI18n()`
// For this example, we'll pass it as a prop.
interface PreferencesSectionProps {
  profile: UserProfile | null;
  isEditing: boolean;
  viewOnly?: boolean;
  setIsEditing: (value: boolean) => void;
  onChange: (data: Partial<UserProfile>) => void;
  dictionary: PreferencesSectionDict; // Passing the dictionary as a prop
  locale: string; // Added locale for RTL/LTR support
}

const PreferencesSection: React.FC<PreferencesSectionProps> = ({
  profile,
  isEditing,
  viewOnly = false,
  setIsEditing,
  onChange,
  dictionary: t, // Using 't' as a shorthand for the dictionary
  locale, // Destructure locale
}) => {
  const [formData, setFormData] = useState<Partial<UserProfile>>({});
  const [initialData, setInitialData] = useState<Partial<UserProfile>>({});
  const [locationInputValue, setLocationInputValue] = useState('');
  const [originInputValue, setOriginInputValue] = useState('');

  const direction = locale === 'he' ? 'rtl' : 'ltr';

  // --- Map icons to values for dynamic options ---
  const iconMap: { [key: string]: React.ElementType } = {
    empathetic: Heart,
    driven: Briefcase,
    optimistic: Smile,
    family_oriented: Users,
    intellectual: GraduationCap,
    organized: Palette,
    calm: Heart,
    humorous: Smile,
    sociable: Users,
    sensitive: Heart,
    independent: MapPin,
    creative: Palette,
    honest: Shield,
    responsible: Shield,
    easy_going: Smile,
    no_strong_preference: Sparkles,
    travel: MapPin,
    sports: Briefcase,
    reading: GraduationCap,
    cooking_baking: Palette,
    music_playing_instrument: Palette,
    art_crafts: Palette,
    volunteering: Heart,
    learning_courses: GraduationCap,
    board_games_puzzles: Smile,
    movies_theater: Smile,
    dancing: Users,
    writing: GraduationCap,
    nature_hiking: MapPin,
    photography: Palette,
  };

  // --- Generate options from dictionary ---
  const useGenerateOptions = (
    optionsDict: { [key: string]: string },
    withIcon?: boolean
  ) => {
    return useMemo(
      () =>
        Object.entries(optionsDict).map(([value, label]) => ({
          value,
          label,
          ...(withIcon && { icon: iconMap[value] }),
        })),
      [optionsDict, withIcon]
    );
  };

  const religiousLevelOptions = useGenerateOptions(t.options.religiousLevels);
  const preferredReligiousJourneyOptions = useGenerateOptions(
    t.options.religiousJourneys
  );
  const educationPreferenceOptions = useGenerateOptions(t.options.education);
  const occupationPreferenceOptions = useGenerateOptions(t.options.occupation);
  const preferredShomerNegiahOptions = useGenerateOptions(
    t.options.shomerNegiah
  );
  const preferredPartnerHasChildrenOptions = useGenerateOptions(
    t.options.partnerHasChildren
  );
  const preferredOriginOptions = useGenerateOptions(t.options.origins);
  const preferredAliyaStatusOptions = useGenerateOptions(t.options.aliyaStatus);
  const maritalStatusOptions = useGenerateOptions(t.options.maritalStatus);
  const serviceTypeOptions = useGenerateOptions(t.options.serviceTypes);
  const headCoveringOptions = useGenerateOptions(t.options.headCovering);
  const kippahTypeOptions = useGenerateOptions(t.options.kippahType);
  const characterTraitsOptions = useGenerateOptions(t.options.traits, true);
  const hobbiesOptions = useGenerateOptions(t.options.hobbies, true);
  const contactPreferenceOptions = Object.entries(
    t.options.contactPreference
  ).map(([value, label]) => ({ value, label }));

  useEffect(() => {
    if (profile) {
      const nullToUndefined = <T,>(value: T | null): T | undefined =>
        value === null ? undefined : value;

      const newFormData: Partial<UserProfile> = {
        ...profile,
        preferredAgeMin: nullToUndefined(profile.preferredAgeMin),
        preferredAgeMax: nullToUndefined(profile.preferredAgeMax),
        preferredHeightMin: nullToUndefined(profile.preferredHeightMin),
        preferredHeightMax: nullToUndefined(profile.preferredHeightMax),
        matchingNotes: profile.matchingNotes ?? '',
        contactPreference: nullToUndefined(profile.contactPreference),
        preferredShomerNegiah: nullToUndefined(profile.preferredShomerNegiah),
        preferredPartnerHasChildren: nullToUndefined(
          profile.preferredPartnerHasChildren
        ),
        preferredAliyaStatus: nullToUndefined(profile.preferredAliyaStatus),
        preferredLocations: profile.preferredLocations ?? [],
        preferredReligiousLevels: profile.preferredReligiousLevels ?? [],
        preferredEducation: profile.preferredEducation ?? [],
        preferredOccupations: profile.preferredOccupations ?? [],
        preferredMaritalStatuses: profile.preferredMaritalStatuses ?? [],
        preferredOrigins: profile.preferredOrigins ?? [],
        preferredServiceTypes: profile.preferredServiceTypes ?? [],
        preferredHeadCoverings: profile.preferredHeadCoverings ?? [],
        preferredKippahTypes: profile.preferredKippahTypes ?? [],
        preferredCharacterTraits: profile.preferredCharacterTraits ?? [],
        preferredHobbies: profile.preferredHobbies ?? [],
        preferredReligiousJourneys: profile.preferredReligiousJourneys ?? [],
      };
      setFormData(newFormData);
      setInitialData(newFormData);
    }
  }, [profile]);

  useEffect(() => {
    if (!isEditing && initialData) {
      setFormData(initialData);
    }
  }, [isEditing, initialData]);

  const handleInputChange = (
    e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>
  ) => {
    const { name, value, type } = e.target;
    const field = name as keyof UserProfile;

    setFormData((prev) => {
      let processedValue: string | number | undefined;
      if (type === 'number') {
        const num = parseInt(value, 10);
        processedValue = isNaN(num) ? undefined : num;
      } else {
        processedValue = value === '' ? undefined : value;
      }
      return { ...prev, [field]: processedValue };
    });
  };

  const handleSelectChange = (field: keyof UserProfile, value: string) => {
    setFormData((prev) => ({
      ...prev,
      [field]:
        value === '' ||
        value === 'לא_משנה' || // Keep legacy values just in case
        value === 'any' ||
        value === 'no_preference'
          ? undefined
          : (value as UserProfile[typeof field]),
    }));
  };

  const handleMultiSelectChange = (field: keyof UserProfile, value: string) => {
    setFormData((prev) => {
      const currentValues =
        (Array.isArray(prev[field]) ? (prev[field] as string[]) : []) ?? [];
      let newValues;
      const resetValues = [
        'any',
        'no_preference',
        'לא_משנה',
        'no_strong_preference',
      ];

      if (resetValues.includes(value)) {
        newValues = currentValues.includes(value) ? [] : [value];
      } else {
        const filteredValues = currentValues.filter(
          (v) => !resetValues.includes(v)
        );
        newValues = filteredValues.includes(value)
          ? filteredValues.filter((v) => v !== value)
          : [...filteredValues, value];
      }
      return { ...prev, [field]: newValues };
    });
  };

  const handleAddItemToArray = (field: keyof UserProfile, value: string) => {
    if (!value) return;
    setFormData((prev) => {
      const currentValues =
        (Array.isArray(prev[field]) ? (prev[field] as string[]) : []) ?? [];
      if (currentValues.includes(value)) {
        return prev;
      }
      return { ...prev, [field]: [...currentValues, value] };
    });
  };

  const handleRemoveItemFromArray = (
    field: keyof UserProfile,
    value: string
  ) => {
    setFormData((prev) => {
      const currentValues =
        (Array.isArray(prev[field]) ? (prev[field] as string[]) : []) ?? [];
      return {
        ...prev,
        [field]: currentValues.filter((item) => item !== value),
      };
    });
  };

  const handleSave = () => {
    const dataToSave = { ...formData };
    onChange(dataToSave);
    setIsEditing(false);
    setInitialData(dataToSave);
  };

  const handleCancel = () => {
    setFormData(initialData);
    setIsEditing(false);
  };

  const renderMultiSelectBadges = (
    fieldValues: string[] | undefined | null,
    options: { value: string; label: string; icon?: React.ElementType }[],
    badgeClass: string = 'bg-sky-100 text-sky-700',
    emptyPlaceholder: string
  ) => {
    if (!fieldValues || fieldValues.length === 0) {
      return <p className="text-sm text-gray-500 italic">{emptyPlaceholder}</p>;
    }
    return fieldValues.map((value) => {
      const option = options.find((opt) => opt.value === value);
      return option ? (
        <Badge
          key={value}
          variant="secondary"
          className={cn(
            'ltr:mr-1 rtl:ml-1 mb-1 text-xs px-2 py-0.5 rounded-full flex items-center',
            badgeClass
          )}
        >
          {option.icon && <option.icon className="w-3 h-3 ltr:mr-1 rtl:ml-1" />}
          {option.label}
        </Badge>
      ) : null;
    });
  };

  const getSelectDisplayValue = (
    value: string | undefined | null,
    options: { value: string; label: string }[],
    placeholder: string
  ) => {
    if (!value)
      return <span className="text-gray-500 italic">{placeholder}</span>;
    const option = options.find((opt) => opt.value === value);
    return option ? (
      option.label
    ) : (
      <span className="text-gray-500 italic">{placeholder}</span>
    );
  };

  return (
    <div className="relative" dir={direction}>
      <div className="sticky top-0 z-10 bg-gradient-to-b from-white via-white/95 to-white/0 pt-4 pb-3 backdrop-blur-sm">
        <div className="container mx-auto max-w-screen-xl px-4">
          <div className="flex items-center justify-between">
            <div>
              <h1 className="text-xl md:text-2xl font-bold text-slate-800">
                {t.header.title}
              </h1>
              <p className="text-sm text-slate-500">
                {isEditing && !viewOnly
                  ? t.header.subtitleEdit
                  : t.header.subtitleView}
              </p>
            </div>
            {!viewOnly && (
              <div className="flex gap-2">
                {!isEditing ? (
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={() => setIsEditing(true)}
                    className="rounded-full shadow-sm hover:shadow-md transition-all duration-300 border-cyan-400 text-cyan-700 hover:bg-cyan-50"
                  >
                    <Pencil className="w-3.5 h-3.5 ltr:ml-1.5 rtl:mr-1.5" />
                    {t.buttons.edit}
                  </Button>
                ) : (
                  <>
                    <Button
                      variant="outline"
                      size="sm"
                      onClick={handleCancel}
                      className="rounded-full shadow-sm hover:shadow-md transition-all duration-300 border-gray-300 text-gray-700 hover:bg-gray-50"
                    >
                      <X className="w-3.5 h-3.5 ltr:ml-1.5 rtl:mr-1.5" />
                      {t.buttons.cancel}
                    </Button>
                    <Button
                      variant="default"
                      size="sm"
                      onClick={handleSave}
                      className="rounded-full shadow-sm hover:shadow-md transition-all duration-300 bg-cyan-600 hover:bg-cyan-700 text-white"
                    >
                      <Save className="w-3.5 h-3.5 ltr:ml-1.5 rtl:mr-1.5" />
                      {t.buttons.save}
                    </Button>
                  </>
                )}
              </div>
            )}
          </div>
        </div>
      </div>

      <div className="container mx-auto max-w-screen-xl py-6 px-4">
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
          {/* --- Column 1 --- */}
          <div className="space-y-6">
            <Card className="bg-white/80 backdrop-blur-md rounded-2xl shadow-lg border border-gray-200/40 overflow-hidden">
              <CardHeader className="bg-gradient-to-r from-slate-50/40 to-gray-100/40 border-b border-gray-200/50 p-4 flex items-center space-x-2 rtl:space-x-reverse">
                <FileText className="w-5 h-5 text-slate-600" />
                <CardTitle className="text-base font-semibold text-gray-700">
                  {t.cards.general.title}
                </CardTitle>
              </CardHeader>
              <CardContent className="p-4 md:p-6 space-y-5">
                <div>
                  <div className="flex items-center gap-1.5 mb-1.5">
                    <Label
                      htmlFor="matchingNotes"
                      className="text-sm font-medium text-gray-700"
                    >
                      {t.cards.general.notesLabel}
                    </Label>
                    <TooltipProvider delayDuration={100}>
                      <Tooltip>
                        <TooltipTrigger asChild>
                          <button
                            type="button"
                            aria-describedby="matchingNotes-tooltip"
                          >
                            <Info className="w-4 h-4 text-gray-400 hover:text-gray-600" />
                          </button>
                        </TooltipTrigger>
                        <TooltipContent
                          id="matchingNotes-tooltip"
                          side="top"
                          className="max-w-xs text-center"
                        >
                          <p>{t.cards.general.notesTooltip}</p>
                        </TooltipContent>
                      </Tooltip>
                    </TooltipProvider>
                  </div>
                  {isEditing ? (
                    <Textarea
                      id="matchingNotes"
                      name="matchingNotes"
                      value={formData.matchingNotes || ''}
                      onChange={handleInputChange}
                      placeholder={t.cards.general.notesPlaceholder}
                      className="text-sm focus:ring-cyan-500 min-h-[100px] rounded-lg"
                      rows={4}
                    />
                  ) : (
                    <p className="mt-1 text-sm text-gray-700 whitespace-pre-wrap min-h-[60px] bg-slate-50/70 p-3 rounded-lg border border-slate-200/50">
                      {formData.matchingNotes || (
                        <span className="text-gray-500 italic">
                          {t.cards.general.notesEmpty}
                        </span>
                      )}
                    </p>
                  )}
                </div>
                <div>
                  <Label
                    htmlFor="contactPreference"
                    className="block mb-1.5 text-xs font-medium text-gray-600"
                  >
                    {t.cards.general.contactPreferenceLabel}
                  </Label>
                  {isEditing ? (
                    <Select
                      name="contactPreference"
                      value={formData.contactPreference || ''}
                      onValueChange={(value: string) =>
                        handleSelectChange('contactPreference', value)
                      }
                    >
                      <SelectTrigger
                        id="contactPreference"
                        className="h-9 text-sm focus:ring-cyan-500"
                      >
                        <SelectValue
                          placeholder={
                            t.cards.general.contactPreferencePlaceholder
                          }
                        />
                      </SelectTrigger>
                      <SelectContent>
                        {contactPreferenceOptions.map((opt) => (
                          <SelectItem key={opt.value} value={opt.value}>
                            {opt.label}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  ) : (
                    <p className="text-sm text-gray-800 font-medium mt-1">
                      {getSelectDisplayValue(
                        formData.contactPreference,
                        contactPreferenceOptions,
                        t.cards.general.contactPreferenceEmpty
                      )}
                    </p>
                  )}
                </div>
              </CardContent>
            </Card>

            <Card className="bg-white/80 backdrop-blur-md rounded-2xl shadow-lg border border-gray-200/40 overflow-hidden">
              <CardHeader className="bg-gradient-to-r from-indigo-50/40 to-purple-50/40 border-b border-gray-200/50 p-4 flex items-center space-x-2 rtl:space-x-reverse">
                <SlidersHorizontal className="w-5 h-5 text-indigo-700" />
                <CardTitle className="text-base font-semibold text-gray-700">
                  {t.cards.ageAndHeight.title}
                </CardTitle>
              </CardHeader>
              <CardContent className="p-4 md:p-6">
                <div className="grid grid-cols-1 sm:grid-cols-2 gap-x-6 gap-y-5">
                  <fieldset>
                    <legend className="flex items-center gap-1.5 text-xs font-medium text-gray-600 mb-1.5">
                      {t.cards.ageAndHeight.ageLegend}
                      <TooltipProvider delayDuration={100}>
                        <Tooltip>
                          <TooltipTrigger asChild>
                            <button
                              type="button"
                              aria-describedby="age-range-tooltip"
                            >
                              <Info className="w-4 h-4 text-gray-400 hover:text-gray-600" />
                            </button>
                          </TooltipTrigger>
                          <TooltipContent id="age-range-tooltip" side="top">
                            <p>{t.cards.ageAndHeight.ageTooltip}</p>
                          </TooltipContent>
                        </Tooltip>
                      </TooltipProvider>
                    </legend>
                    <div className="flex items-center gap-2">
                      <Label htmlFor="preferredAgeMin" className="sr-only">
                        {t.cards.ageAndHeight.ageMinPlaceholder}
                      </Label>
                      <Input
                        id="preferredAgeMin"
                        type="number"
                        name="preferredAgeMin"
                        placeholder={t.cards.ageAndHeight.ageMinPlaceholder}
                        value={formData.preferredAgeMin ?? ''}
                        onChange={handleInputChange}
                        disabled={!isEditing}
                        className="h-9 text-sm focus:ring-cyan-500 disabled:bg-gray-100/70"
                      />
                      <span aria-hidden="true" className="text-gray-500">
                        -
                      </span>
                      <Label htmlFor="preferredAgeMax" className="sr-only">
                        {t.cards.ageAndHeight.ageMaxPlaceholder}
                      </Label>
                      <Input
                        id="preferredAgeMax"
                        type="number"
                        name="preferredAgeMax"
                        placeholder={t.cards.ageAndHeight.ageMaxPlaceholder}
                        value={formData.preferredAgeMax ?? ''}
                        onChange={handleInputChange}
                        disabled={!isEditing}
                        className="h-9 text-sm focus:ring-cyan-500 disabled:bg-gray-100/70"
                      />
                    </div>
                    {!isEditing &&
                      !formData.preferredAgeMin &&
                      !formData.preferredAgeMax && (
                        <p className="text-xs text-gray-500 italic mt-1">
                          {t.cards.ageAndHeight.ageEmpty}
                        </p>
                      )}
                  </fieldset>
                  <fieldset>
                    <legend className="block mb-1.5 text-xs font-medium text-gray-600">
                      {t.cards.ageAndHeight.heightLegend}
                    </legend>
                    <div className="flex items-center gap-2">
                      <Label htmlFor="preferredHeightMin" className="sr-only">
                        {t.cards.ageAndHeight.heightMinPlaceholder}
                      </Label>
                      <Input
                        id="preferredHeightMin"
                        type="number"
                        name="preferredHeightMin"
                        placeholder={t.cards.ageAndHeight.heightMinPlaceholder}
                        value={formData.preferredHeightMin ?? ''}
                        onChange={handleInputChange}
                        disabled={!isEditing}
                        className="h-9 text-sm focus:ring-cyan-500 disabled:bg-gray-100/70"
                      />
                      <span aria-hidden="true" className="text-gray-500">
                        -
                      </span>
                      <Label htmlFor="preferredHeightMax" className="sr-only">
                        {t.cards.ageAndHeight.heightMaxPlaceholder}
                      </Label>
                      <Input
                        id="preferredHeightMax"
                        type="number"
                        name="preferredHeightMax"
                        placeholder={t.cards.ageAndHeight.heightMaxPlaceholder}
                        value={formData.preferredHeightMax ?? ''}
                        onChange={handleInputChange}
                        disabled={!isEditing}
                        className="h-9 text-sm focus:ring-cyan-500 disabled:bg-gray-100/70"
                      />
                    </div>
                    {!isEditing &&
                      !formData.preferredHeightMin &&
                      !formData.preferredHeightMax && (
                        <p className="text-xs text-gray-500 italic mt-1">
                          {t.cards.ageAndHeight.heightEmpty}
                        </p>
                      )}
                  </fieldset>
                </div>
              </CardContent>
            </Card>
          </div>

          {/* --- Column 2 --- */}
          <div className="space-y-6">
            <Card className="bg-white/80 backdrop-blur-md rounded-2xl shadow-lg border border-gray-200/40 overflow-hidden">
              <CardHeader className="bg-gradient-to-r from-sky-50/40 to-blue-50/40 border-b border-gray-200/50 p-4 flex items-center space-x-2 rtl:space-x-reverse">
                <MapPin className="w-5 h-5 text-sky-700" />
                <CardTitle className="text-base font-semibold text-gray-700">
                  {t.cards.locationAndReligion.title}
                </CardTitle>
              </CardHeader>
              <CardContent className="p-4 md:p-6 space-y-6">
                <div>
                  <Label
                    htmlFor="preferred-locations-input"
                    className="block mb-2 text-xs font-medium text-gray-600"
                  >
                    {t.cards.locationAndReligion.locationsLabel}
                  </Label>
                  {isEditing ? (
                    <div className="space-y-2">
                      <div className="flex flex-wrap gap-1.5">
                        {(formData.preferredLocations || []).map((loc) => (
                          <Badge
                            key={loc}
                            variant="secondary"
                            className="bg-sky-100 text-sky-800 rounded-full px-2 py-1 text-sm font-normal"
                          >
                            <span>{loc}</span>
                            <button
                              type="button"
                              className="ltr:mr-1.5 rtl:ml-1.5 text-sky-600 hover:text-sky-900"
                              onClick={() =>
                                handleRemoveItemFromArray(
                                  'preferredLocations',
                                  loc
                                )
                              }
                              aria-label={t.cards.locationAndReligion.locationsRemoveLabel.replace(
                                '{{loc}}',
                                loc
                              )}
                            >
                              <XCircle className="w-3.5 h-3.5" />
                            </button>
                          </Badge>
                        ))}
                      </div>
                      <Autocomplete
                        id="preferred-locations-input"
                        apiKey={process.env.NEXT_PUBLIC_GOOGLE_MAPS_API_KEY}
                        value={locationInputValue}
                        onChange={(e: React.ChangeEvent<HTMLInputElement>) =>
                          setLocationInputValue(e.target.value)
                        }
                        onPlaceSelected={(place) => {
                          const cityComponent = place.address_components?.find(
                            (component) => component.types.includes('locality')
                          );
                          const selectedCity =
                            cityComponent?.long_name ||
                            place.formatted_address ||
                            '';
                          handleAddItemToArray(
                            'preferredLocations',
                            selectedCity
                          );
                          setLocationInputValue('');
                        }}
                        options={{
                          types: ['(cities)'],
                          componentRestrictions: { country: 'il' },
                        }}
                        className="w-full h-9 text-sm p-2 border border-gray-300 rounded-md focus:ring-cyan-500 focus:border-cyan-500"
                        placeholder={
                          t.cards.locationAndReligion.locationsPlaceholder
                        }
                      />
                    </div>
                  ) : (
                    <div className="mt-1 flex flex-wrap gap-1.5">
                      {!formData.preferredLocations ||
                      formData.preferredLocations.length === 0 ? (
                        <p className="text-sm text-gray-500 italic">
                          {t.cards.locationAndReligion.locationsEmpty}
                        </p>
                      ) : (
                        formData.preferredLocations.map((loc) => (
                          <Badge
                            key={loc}
                            variant="secondary"
                            className="ltr:mr-1 rtl:ml-1 mb-1 bg-sky-100 text-sky-700 text-xs px-2 py-0.5 rounded-full"
                          >
                            {loc}
                          </Badge>
                        ))
                      )}
                    </div>
                  )}
                </div>
                <fieldset>
                  <legend className="flex items-center gap-1.5 text-xs font-medium text-gray-600 mb-2">
                    {t.cards.locationAndReligion.religiousLevelsLegend}
                    <TooltipProvider delayDuration={100}>
                      <Tooltip>
                        <TooltipTrigger asChild>
                          <button
                            type="button"
                            aria-describedby="religious-level-tooltip"
                          >
                            <Info className="w-4 h-4 text-gray-400 hover:text-gray-600" />
                          </button>
                        </TooltipTrigger>
                        <TooltipContent
                          id="religious-level-tooltip"
                          side="top"
                          className="max-w-xs text-center"
                        >
                          <p>
                            {t.cards.locationAndReligion.religiousLevelsTooltip}
                          </p>
                        </TooltipContent>
                      </Tooltip>
                    </TooltipProvider>
                  </legend>
                  {isEditing ? (
                    <div className="flex flex-wrap gap-2">
                      {religiousLevelOptions.map((level) => (
                        <Button
                          key={level.value}
                          type="button"
                          variant={
                            (formData.preferredReligiousLevels || []).includes(
                              level.value
                            )
                              ? 'default'
                              : 'outline'
                          }
                          size="sm"
                          onClick={() =>
                            handleMultiSelectChange(
                              'preferredReligiousLevels',
                              level.value
                            )
                          }
                          className={cn(
                            'rounded-full text-xs px-3 py-1.5 transition-all',
                            (formData.preferredReligiousLevels || []).includes(
                              level.value
                            )
                              ? 'bg-pink-500 hover:bg-pink-600 text-white border-pink-500'
                              : 'border-gray-300 text-gray-600 hover:bg-gray-50 hover:border-gray-400'
                          )}
                        >
                          {level.label}
                        </Button>
                      ))}
                    </div>
                  ) : (
                    <div className="mt-1 flex flex-wrap gap-1.5">
                      {renderMultiSelectBadges(
                        formData.preferredReligiousLevels,
                        religiousLevelOptions,
                        'bg-pink-100 text-pink-700',
                        t.cards.locationAndReligion.religiousLevelsEmpty
                      )}
                    </div>
                  )}
                </fieldset>

                <fieldset>
                  <legend className="block mb-2 text-xs font-medium text-gray-600">
                    {t.cards.locationAndReligion.religiousJourneysLegend}
                  </legend>
                  {isEditing ? (
                    <div className="flex flex-wrap gap-2">
                      {preferredReligiousJourneyOptions.map((opt) => (
                        <Button
                          key={opt.value}
                          type="button"
                          variant={
                            (
                              formData.preferredReligiousJourneys || []
                            ).includes(opt.value as ReligiousJourney)
                              ? 'default'
                              : 'outline'
                          }
                          size="sm"
                          onClick={() =>
                            handleMultiSelectChange(
                              'preferredReligiousJourneys',
                              opt.value
                            )
                          }
                          className={cn(
                            'rounded-full text-xs px-3 py-1.5 transition-all',
                            (
                              formData.preferredReligiousJourneys || []
                            ).includes(opt.value as ReligiousJourney)
                              ? 'bg-cyan-500 hover:bg-cyan-600 text-white border-cyan-500'
                              : 'border-gray-300 text-gray-600 hover:bg-gray-50 hover:border-gray-400'
                          )}
                        >
                          {opt.label}
                        </Button>
                      ))}
                    </div>
                  ) : (
                    <div className="mt-1 flex flex-wrap gap-1.5">
                      {renderMultiSelectBadges(
                        formData.preferredReligiousJourneys as string[],
                        preferredReligiousJourneyOptions,
                        'bg-cyan-100 text-cyan-700',
                        t.cards.locationAndReligion.religiousJourneysEmpty
                      )}
                    </div>
                  )}
                </fieldset>

                <div>
                  <Label
                    htmlFor="preferredShomerNegiah"
                    className="block mb-1.5 text-xs font-medium text-gray-600"
                  >
                    {t.cards.locationAndReligion.shomerNegiahLabel}
                  </Label>
                  {isEditing ? (
                    <Select
                      name="preferredShomerNegiah"
                      value={formData.preferredShomerNegiah || ''}
                      onValueChange={(value) =>
                        handleSelectChange('preferredShomerNegiah', value)
                      }
                    >
                      <SelectTrigger
                        id="preferredShomerNegiah"
                        className="h-9 text-sm focus:ring-cyan-500"
                      >
                        <SelectValue
                          placeholder={
                            t.cards.locationAndReligion.shomerNegiahPlaceholder
                          }
                        />
                      </SelectTrigger>
                      <SelectContent>
                        {preferredShomerNegiahOptions.map((opt) => (
                          <SelectItem key={opt.value} value={opt.value}>
                            {opt.label}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  ) : (
                    <p className="text-sm text-gray-800 font-medium mt-1">
                      {getSelectDisplayValue(
                        formData.preferredShomerNegiah,
                        preferredShomerNegiahOptions,
                        ''
                      )}
                    </p>
                  )}
                </div>
                {profile?.gender === Gender.MALE && (
                  <fieldset>
                    <legend className="block mb-2 text-xs font-medium text-gray-600">
                      {t.cards.locationAndReligion.headCoveringLegend}
                    </legend>
                    {isEditing ? (
                      <div className="flex flex-wrap gap-2">
                        {headCoveringOptions.map((opt) => (
                          <Button
                            key={opt.value}
                            type="button"
                            variant={
                              (formData.preferredHeadCoverings || []).includes(
                                opt.value as HeadCoveringType
                              )
                                ? 'default'
                                : 'outline'
                            }
                            size="sm"
                            onClick={() =>
                              handleMultiSelectChange(
                                'preferredHeadCoverings',
                                opt.value as HeadCoveringType
                              )
                            }
                            className={cn(
                              'rounded-full text-xs px-3 py-1.5 transition-all',
                              (formData.preferredHeadCoverings || []).includes(
                                opt.value as HeadCoveringType
                              )
                                ? 'bg-purple-500 hover:bg-purple-600 text-white border-purple-500'
                                : 'border-gray-300 text-gray-600 hover:bg-gray-50 hover:border-gray-400'
                            )}
                          >
                            {opt.label}
                          </Button>
                        ))}
                      </div>
                    ) : (
                      <div className="mt-1 flex flex-wrap gap-1.5">
                        {renderMultiSelectBadges(
                          formData.preferredHeadCoverings as string[],
                          headCoveringOptions,
                          'bg-purple-100 text-purple-700',
                          t.cards.locationAndReligion.headCoveringEmpty
                        )}
                      </div>
                    )}
                  </fieldset>
                )}
                {profile?.gender === Gender.FEMALE && (
                  <fieldset>
                    <legend className="block mb-2 text-xs font-medium text-gray-600">
                      {t.cards.locationAndReligion.kippahTypeLegend}
                    </legend>
                    {isEditing ? (
                      <div className="flex flex-wrap gap-2">
                        {kippahTypeOptions.map((opt) => (
                          <Button
                            key={opt.value}
                            type="button"
                            variant={
                              (formData.preferredKippahTypes || []).includes(
                                opt.value as KippahType
                              )
                                ? 'default'
                                : 'outline'
                            }
                            size="sm"
                            onClick={() =>
                              handleMultiSelectChange(
                                'preferredKippahTypes',
                                opt.value as KippahType
                              )
                            }
                            className={cn(
                              'rounded-full text-xs px-3 py-1.5 transition-all',
                              (formData.preferredKippahTypes || []).includes(
                                opt.value as KippahType
                              )
                                ? 'bg-orange-500 hover:bg-orange-600 text-white border-orange-500'
                                : 'border-gray-300 text-gray-600 hover:bg-gray-50 hover:border-gray-400'
                            )}
                          >
                            {opt.label}
                          </Button>
                        ))}
                      </div>
                    ) : (
                      <div className="mt-1 flex flex-wrap gap-1.5">
                        {renderMultiSelectBadges(
                          formData.preferredKippahTypes as string[],
                          kippahTypeOptions,
                          'bg-orange-100 text-orange-700',
                          t.cards.locationAndReligion.kippahTypeEmpty
                        )}
                      </div>
                    )}
                  </fieldset>
                )}
              </CardContent>
            </Card>
            <Card className="bg-white/80 backdrop-blur-md rounded-2xl shadow-lg border border-gray-200/40 overflow-hidden">
              <CardHeader className="bg-gradient-to-r from-teal-50/40 to-green-50/40 border-b border-gray-200/50 p-4 flex items-center space-x-2 rtl:space-x-reverse">
                <GraduationCap className="w-5 h-5 text-teal-700" />
                <CardTitle className="text-base font-semibold text-gray-700">
                  {t.cards.educationAndCareer.title}
                </CardTitle>
              </CardHeader>
              <CardContent className="p-4 md:p-6 space-y-6">
                <fieldset>
                  <legend className="block mb-2 text-xs font-medium text-gray-600">
                    {t.cards.educationAndCareer.educationLegend}
                  </legend>
                  {isEditing ? (
                    <div className="flex flex-wrap gap-2">
                      {educationPreferenceOptions.map((edu) => (
                        <Button
                          key={edu.value}
                          type="button"
                          variant={
                            (formData.preferredEducation || []).includes(
                              edu.value
                            )
                              ? 'default'
                              : 'outline'
                          }
                          size="sm"
                          onClick={() =>
                            handleMultiSelectChange(
                              'preferredEducation',
                              edu.value
                            )
                          }
                          className={cn(
                            'rounded-full text-xs px-3 py-1.5 transition-all',
                            (formData.preferredEducation || []).includes(
                              edu.value
                            )
                              ? 'bg-teal-500 hover:bg-teal-600 text-white border-teal-500'
                              : 'border-gray-300 text-gray-600 hover:bg-gray-50 hover:border-gray-400'
                          )}
                        >
                          {edu.label}
                        </Button>
                      ))}
                    </div>
                  ) : (
                    <div className="mt-1 flex flex-wrap gap-1.5">
                      {renderMultiSelectBadges(
                        formData.preferredEducation,
                        educationPreferenceOptions,
                        'bg-teal-100 text-teal-700',
                        t.cards.educationAndCareer.educationEmpty
                      )}
                    </div>
                  )}
                </fieldset>
                <fieldset>
                  <legend className="block mb-2 text-xs font-medium text-gray-600">
                    {t.cards.educationAndCareer.occupationLegend}
                  </legend>
                  {isEditing ? (
                    <div className="flex flex-wrap gap-2">
                      {occupationPreferenceOptions.map((occ) => (
                        <Button
                          key={occ.value}
                          type="button"
                          variant={
                            (formData.preferredOccupations || []).includes(
                              occ.value
                            )
                              ? 'default'
                              : 'outline'
                          }
                          size="sm"
                          onClick={() =>
                            handleMultiSelectChange(
                              'preferredOccupations',
                              occ.value
                            )
                          }
                          className={cn(
                            'rounded-full text-xs px-3 py-1.5 transition-all',
                            (formData.preferredOccupations || []).includes(
                              occ.value
                            )
                              ? 'bg-green-500 hover:bg-green-600 text-white border-green-500'
                              : 'border-gray-300 text-gray-600 hover:bg-gray-50 hover:border-gray-400'
                          )}
                        >
                          {occ.label}
                        </Button>
                      ))}
                    </div>
                  ) : (
                    <div className="mt-1 flex flex-wrap gap-1.5">
                      {renderMultiSelectBadges(
                        formData.preferredOccupations,
                        occupationPreferenceOptions,
                        'bg-green-100 text-green-700',
                        t.cards.educationAndCareer.occupationEmpty
                      )}
                    </div>
                  )}
                </fieldset>
                <fieldset>
                  <legend className="block mb-2 text-xs font-medium text-gray-600">
                    {t.cards.educationAndCareer.serviceTypeLegend}
                  </legend>
                  {isEditing ? (
                    <div className="flex flex-wrap gap-2">
                      {serviceTypeOptions.map((opt) => (
                        <Button
                          key={opt.value}
                          type="button"
                          variant={
                            (formData.preferredServiceTypes || []).includes(
                              opt.value as ServiceType
                            )
                              ? 'default'
                              : 'outline'
                          }
                          size="sm"
                          onClick={() =>
                            handleMultiSelectChange(
                              'preferredServiceTypes',
                              opt.value as ServiceType
                            )
                          }
                          className={cn(
                            'rounded-full text-xs px-3 py-1.5 transition-all',
                            (formData.preferredServiceTypes || []).includes(
                              opt.value as ServiceType
                            )
                              ? 'bg-lime-500 hover:bg-lime-600 text-white border-lime-500'
                              : 'border-gray-300 text-gray-600 hover:bg-gray-50 hover:border-gray-400'
                          )}
                        >
                          {opt.label}
                        </Button>
                      ))}
                    </div>
                  ) : (
                    <div className="mt-1 flex flex-wrap gap-1.5">
                      {renderMultiSelectBadges(
                        formData.preferredServiceTypes as string[],
                        serviceTypeOptions,
                        'bg-lime-100 text-lime-700',
                        t.cards.educationAndCareer.serviceTypeEmpty
                      )}
                    </div>
                  )}
                </fieldset>
              </CardContent>
            </Card>
          </div>

          {/* --- Column 3 --- */}
          <div className="space-y-6">
            <Card className="bg-white/80 backdrop-blur-md rounded-2xl shadow-lg border border-gray-200/40 overflow-hidden">
              <CardHeader className="bg-gradient-to-r from-rose-50/40 to-fuchsia-50/40 border-b border-gray-200/50 p-4 flex items-center space-x-2 rtl:space-x-reverse">
                <Users className="w-5 h-5 text-rose-700" />
                <CardTitle className="text-base font-semibold text-gray-700">
                  {t.cards.personalBackground.title}
                </CardTitle>
              </CardHeader>
              <CardContent className="p-4 md:p-6 space-y-6">
                <fieldset>
                  <legend className="block mb-2 text-xs font-medium text-gray-600">
                    {t.cards.personalBackground.maritalStatusLegend}
                  </legend>
                  {isEditing ? (
                    <div className="flex flex-wrap gap-2">
                      {maritalStatusOptions.map((opt) => (
                        <Button
                          key={opt.value}
                          type="button"
                          variant={
                            (formData.preferredMaritalStatuses || []).includes(
                              opt.value
                            )
                              ? 'default'
                              : 'outline'
                          }
                          size="sm"
                          onClick={() =>
                            handleMultiSelectChange(
                              'preferredMaritalStatuses',
                              opt.value
                            )
                          }
                          className={cn(
                            'rounded-full text-xs px-3 py-1.5 transition-all',
                            (formData.preferredMaritalStatuses || []).includes(
                              opt.value
                            )
                              ? 'bg-rose-500 hover:bg-rose-600 text-white border-rose-500'
                              : 'border-gray-300 text-gray-600 hover:bg-gray-50 hover:border-gray-400'
                          )}
                        >
                          {opt.label}
                        </Button>
                      ))}
                    </div>
                  ) : (
                    <div className="mt-1 flex flex-wrap gap-1.5">
                      {renderMultiSelectBadges(
                        formData.preferredMaritalStatuses,
                        maritalStatusOptions,
                        'bg-rose-100 text-rose-700',
                        t.cards.personalBackground.maritalStatusEmpty
                      )}
                    </div>
                  )}
                </fieldset>
                <div>
                  <Label
                    htmlFor="preferredPartnerHasChildren"
                    className="block mb-1.5 text-xs font-medium text-gray-600"
                  >
                    {t.cards.personalBackground.partnerHasChildrenLabel}
                  </Label>
                  {isEditing ? (
                    <Select
                      name="preferredPartnerHasChildren"
                      value={formData.preferredPartnerHasChildren || ''}
                      onValueChange={(value) =>
                        handleSelectChange('preferredPartnerHasChildren', value)
                      }
                    >
                      <SelectTrigger
                        id="preferredPartnerHasChildren"
                        className="h-9 text-sm focus:ring-cyan-500"
                      >
                        <SelectValue
                          placeholder={
                            t.cards.personalBackground
                              .partnerHasChildrenPlaceholder
                          }
                        />
                      </SelectTrigger>
                      <SelectContent>
                        {preferredPartnerHasChildrenOptions.map((opt) => (
                          <SelectItem key={opt.value} value={opt.value}>
                            {opt.label}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  ) : (
                    <p className="text-sm text-gray-800 font-medium mt-1">
                      {getSelectDisplayValue(
                        formData.preferredPartnerHasChildren,
                        preferredPartnerHasChildrenOptions,
                        ''
                      )}
                    </p>
                  )}
                </div>
                <fieldset>
                  <legend className="block mb-2 text-xs font-medium text-gray-600">
                    {t.cards.personalBackground.originLegend}
                  </legend>
                  {isEditing ? (
                    <div className="space-y-3">
                      <div className="flex flex-wrap gap-2">
                        {preferredOriginOptions.map((opt) => (
                          <Button
                            key={opt.value}
                            type="button"
                            variant={
                              (formData.preferredOrigins || []).includes(
                                opt.value
                              )
                                ? 'default'
                                : 'outline'
                            }
                            size="sm"
                            onClick={() =>
                              handleMultiSelectChange(
                                'preferredOrigins',
                                opt.value
                              )
                            }
                            className={cn(
                              'rounded-full text-xs px-3 py-1.5 transition-all',
                              (formData.preferredOrigins || []).includes(
                                opt.value
                              )
                                ? 'bg-fuchsia-500 hover:bg-fuchsia-600 text-white border-fuchsia-500'
                                : 'border-gray-300 text-gray-600 hover:bg-gray-50 hover:border-gray-400'
                            )}
                          >
                            {opt.label}
                          </Button>
                        ))}
                      </div>
                      <div className="space-y-2">
                        <div className="flex flex-wrap gap-1.5">
                          {(formData.preferredOrigins || [])
                            .filter(
                              (origin) =>
                                !preferredOriginOptions.some(
                                  (opt) => opt.value === origin
                                )
                            )
                            .map((origin) => (
                              <Badge
                                key={origin}
                                variant="secondary"
                                className="bg-fuchsia-100 text-fuchsia-800 rounded-full px-2 py-1 text-sm font-normal"
                              >
                                <span>{origin}</span>
                                <button
                                  type="button"
                                  className="ltr:mr-1.5 rtl:ml-1.5 text-fuchsia-600 hover:text-fuchsia-900"
                                  onClick={() =>
                                    handleRemoveItemFromArray(
                                      'preferredOrigins',
                                      origin
                                    )
                                  }
                                  aria-label={t.cards.personalBackground.originRemoveLabel.replace(
                                    '{{origin}}',
                                    origin
                                  )}
                                >
                                  <XCircle className="w-3.5 h-3.5" />
                                </button>
                              </Badge>
                            ))}
                        </div>
                        <Label
                          htmlFor="preferred-origins-input"
                          className="sr-only"
                        >
                          {t.cards.personalBackground.originPlaceholder}
                        </Label>
                        <Autocomplete
                          id="preferred-origins-input"
                          apiKey={process.env.NEXT_PUBLIC_GOOGLE_MAPS_API_KEY}
                          value={originInputValue}
                          onChange={(e: React.ChangeEvent<HTMLInputElement>) =>
                            setOriginInputValue(e.target.value)
                          }
                          onPlaceSelected={(place) => {
                            const countryComponent =
                              place.address_components?.find((component) =>
                                component.types.includes('country')
                              );
                            const selectedCountry =
                              countryComponent?.long_name ||
                              place.formatted_address ||
                              '';
                            handleAddItemToArray(
                              'preferredOrigins',
                              selectedCountry
                            );
                            setOriginInputValue('');
                          }}
                          options={{ types: ['country'] }}
                          className="w-full h-9 text-sm p-2 border border-gray-300 rounded-md focus:ring-cyan-500 focus:border-cyan-500"
                          placeholder={
                            t.cards.personalBackground.originPlaceholder
                          }
                        />
                      </div>
                    </div>
                  ) : (
                    <div className="mt-1 flex flex-wrap gap-1.5">
                      {!formData.preferredOrigins ||
                      formData.preferredOrigins.length === 0 ? (
                        <p className="text-sm text-gray-500 italic">
                          {t.cards.personalBackground.originEmpty}
                        </p>
                      ) : (
                        formData.preferredOrigins.map((originValue) => {
                          const option = preferredOriginOptions.find(
                            (opt) => opt.value === originValue
                          );
                          const label = option ? option.label : originValue;
                          return (
                            <Badge
                              key={originValue}
                              variant="secondary"
                              className="ltr:mr-1 rtl:ml-1 mb-1 bg-fuchsia-100 text-fuchsia-700 text-xs px-2 py-0.5 rounded-full"
                            >
                              {label}
                            </Badge>
                          );
                        })
                      )}
                    </div>
                  )}
                </fieldset>
                <div>
                  <Label
                    htmlFor="preferredAliyaStatus"
                    className="block mb-1.5 text-xs font-medium text-gray-600"
                  >
                    {t.cards.personalBackground.aliyaStatusLabel}
                  </Label>
                  {isEditing ? (
                    <Select
                      name="preferredAliyaStatus"
                      value={formData.preferredAliyaStatus || ''}
                      onValueChange={(value) =>
                        handleSelectChange('preferredAliyaStatus', value)
                      }
                    >
                      <SelectTrigger
                        id="preferredAliyaStatus"
                        className="h-9 text-sm focus:ring-cyan-500"
                      >
                        <SelectValue
                          placeholder={
                            t.cards.personalBackground.aliyaStatusPlaceholder
                          }
                        />
                      </SelectTrigger>
                      <SelectContent>
                        {preferredAliyaStatusOptions.map((opt) => (
                          <SelectItem key={opt.value} value={opt.value}>
                            {opt.label}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  ) : (
                    <p className="text-sm text-gray-800 font-medium mt-1">
                      {getSelectDisplayValue(
                        formData.preferredAliyaStatus,
                        preferredAliyaStatusOptions,
                        ''
                      )}
                    </p>
                  )}
                </div>
              </CardContent>
            </Card>
            <Card className="bg-white/80 backdrop-blur-md rounded-2xl shadow-lg border border-gray-200/40 overflow-hidden">
              <CardHeader className="bg-gradient-to-r from-amber-50/40 to-yellow-50/40 border-b border-gray-200/50 p-4 flex items-center space-x-2 rtl:space-x-reverse">
                <Sparkles className="w-5 h-5 text-amber-700" />
                <CardTitle className="text-base font-semibold text-gray-700">
                  {t.cards.characterAndInterests.title}
                </CardTitle>
              </CardHeader>
              <CardContent className="p-4 md:p-6 space-y-6">
                <fieldset>
                  <legend className="block mb-2 text-xs font-medium text-gray-600">
                    {t.cards.characterAndInterests.traitsLegend}
                  </legend>
                  {isEditing ? (
                    <div className="flex flex-wrap gap-2">
                      {characterTraitsOptions.map((opt) => (
                        <Button
                          key={opt.value}
                          type="button"
                          variant={
                            (formData.preferredCharacterTraits || []).includes(
                              opt.value
                            )
                              ? 'default'
                              : 'outline'
                          }
                          size="sm"
                          onClick={() =>
                            handleMultiSelectChange(
                              'preferredCharacterTraits',
                              opt.value
                            )
                          }
                          disabled={
                            !viewOnly &&
                            (formData.preferredCharacterTraits || []).length >=
                              3 &&
                            !(formData.preferredCharacterTraits || []).includes(
                              opt.value
                            ) &&
                            opt.value !== 'no_strong_preference'
                          }
                          className={cn(
                            'rounded-full text-xs px-3 py-1.5 transition-all flex items-center',
                            (formData.preferredCharacterTraits || []).includes(
                              opt.value
                            )
                              ? 'bg-yellow-500 hover:bg-yellow-600 text-white border-yellow-500'
                              : 'border-gray-300 text-gray-600 hover:bg-gray-50 hover:border-gray-400'
                          )}
                        >
                          {opt.icon && (
                            <opt.icon className="w-3.5 h-3.5 ltr:mr-1.5 rtl:ml-1.5" />
                          )}
                          {opt.label}
                        </Button>
                      ))}
                    </div>
                  ) : (
                    <div className="mt-1 flex flex-wrap gap-1.5">
                      {renderMultiSelectBadges(
                        formData.preferredCharacterTraits,
                        characterTraitsOptions,
                        'bg-yellow-100 text-yellow-700',
                        t.cards.characterAndInterests.traitsEmpty
                      )}
                    </div>
                  )}
                </fieldset>
                <fieldset>
                  <legend className="block mb-2 text-xs font-medium text-gray-600">
                    {t.cards.characterAndInterests.hobbiesLegend}
                  </legend>
                  {isEditing ? (
                    <div className="flex flex-wrap gap-2">
                      {hobbiesOptions.map((opt) => (
                        <Button
                          key={opt.value}
                          type="button"
                          variant={
                            (formData.preferredHobbies || []).includes(
                              opt.value
                            )
                              ? 'default'
                              : 'outline'
                          }
                          size="sm"
                          onClick={() =>
                            handleMultiSelectChange(
                              'preferredHobbies',
                              opt.value
                            )
                          }
                          disabled={
                            !viewOnly &&
                            (formData.preferredHobbies || []).length >= 3 &&
                            !(formData.preferredHobbies || []).includes(
                              opt.value
                            ) &&
                            opt.value !== 'no_strong_preference'
                          }
                          className={cn(
                            'rounded-full text-xs px-3 py-1.5 transition-all flex items-center',
                            (formData.preferredHobbies || []).includes(
                              opt.value
                            )
                              ? 'bg-amber-500 hover:bg-amber-600 text-white border-amber-500'
                              : 'border-gray-300 text-gray-600 hover:bg-gray-50 hover:border-gray-400'
                          )}
                        >
                          {opt.icon && (
                            <opt.icon className="w-3.5 h-3.5 ltr:mr-1.5 rtl:ml-1.5" />
                          )}
                          {opt.label}
                        </Button>
                      ))}
                    </div>
                  ) : (
                    <div className="mt-1 flex flex-wrap gap-1.5">
                      {renderMultiSelectBadges(
                        formData.preferredHobbies,
                        hobbiesOptions,
                        'bg-amber-100 text-amber-700',
                        t.cards.characterAndInterests.hobbiesEmpty
                      )}
                    </div>
                  )}
                </fieldset>
              </CardContent>
            </Card>
          </div>
        </div>
      </div>
    </div>
  );
};

export default PreferencesSection;
--- End of Content for PreferencesSection.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\profile\sections\ProfileChecklist.tsx
--------------------------------------------------------------------------------
Content:
// src/app/[locale]/(authenticated)/profile/components/dashboard/ProfileChecklist.tsx

import React, { useState, useMemo } from 'react';
import Link from 'next/link';
import { Progress } from '@/components/ui/progress';
import { Button } from '@/components/ui/button';
import {
  CheckCircle,
  User,
  BookOpen,
  Camera,
  Target,
  ChevronUp,
  ChevronDown,
  Sparkles,
  Edit3,
} from 'lucide-react';
import { motion, AnimatePresence } from 'framer-motion';
import { cn } from '@/lib/utils';
import type { User as SessionUserType } from '@/types/next-auth';
import type { QuestionnaireResponse } from '@/types/next-auth';
import { Gender } from '@prisma/client';
import { ProfileChecklistDict } from '@/types/dictionary';

// Helper Types & Constants
const QUESTION_COUNTS: Record<
  'VALUES' | 'PERSONALITY' | 'RELATIONSHIP' | 'PARTNER' | 'RELIGION',
  number
> = {
  VALUES: 19,
  PERSONALITY: 19,
  RELATIONSHIP: 19,
  PARTNER: 17,
  RELIGION: 19,
};

const WORLD_NAMES_MAP = {
  values: 'ערכים',
  personality: 'אישיות',
  relationship: 'זוגיות',
  partner: 'פרטנר',
  religion: 'דת ומסורת',
} as const;

type WorldKey = keyof typeof WORLD_NAMES_MAP;

interface ChecklistItemProps {
  id: string;
  isCompleted: boolean;
  title: string;
  description: string;
  link?: string;
  onClick?: () => void;
  icon: React.ElementType;
  missingItems?: string[];
  worldProgress?: {
    world: string;
    completed: number;
    total: number;
    isDone: boolean;
  }[];
  isActive: boolean;
  setActiveItemId: React.Dispatch<React.SetStateAction<string | null>>;
  dict: ProfileChecklistDict;
}

const ChecklistItem: React.FC<ChecklistItemProps> = ({
  id,
  isCompleted,
  title,
  description,
  link,
  onClick,
  icon: Icon,
  missingItems,
  worldProgress,
  isActive,
  setActiveItemId,
  dict,
}) => {
  const canExpand =
    (missingItems && missingItems.length > 0) ||
    (worldProgress && worldProgress.length > 0);
  const isExpanded = isActive && canExpand;

  const handleInteraction = () => {
    if (isCompleted) return;
    if (onClick) {
      onClick();
    } else if (canExpand && !link) {
      setActiveItemId((prev) => (prev === id ? null : id));
    }
  };

  const cardContent = (
    <>
      <div className="relative w-full flex justify-center mb-3">
        <div
          className={cn(
            'relative flex items-center justify-center w-14 h-14 rounded-2xl transition-all duration-300 transform group-hover:scale-110',
            isCompleted
              ? 'bg-emerald-100 shadow-emerald-500/10'
              : 'bg-cyan-100 shadow-cyan-500/10'
          )}
        >
          <Icon
            className={cn(
              'w-7 h-7 transition-colors duration-300',
              isCompleted ? 'text-emerald-500' : 'text-cyan-600'
            )}
          />
        </div>
        {isCompleted && (
          <motion.div
            initial={{ scale: 0, opacity: 0 }}
            animate={{ scale: 1, opacity: 1 }}
            transition={{
              type: 'spring',
              stiffness: 400,
              damping: 20,
              delay: 0.2,
            }}
            className="absolute -top-1 -end-1" // Updated: from -right-1 to -end-1 for RTL support
          >
            <CheckCircle
              className="w-5 h-5 text-emerald-500 bg-white rounded-full p-0.5"
              fill="white"
            />
          </motion.div>
        )}
      </div>
      <h4
        className={cn(
          'font-bold text-sm text-center transition-colors',
          isCompleted ? 'text-gray-400 line-through' : 'text-gray-800'
        )}
      >
        {title}
      </h4>
      {!isCompleted && (
        <p className="text-xs text-center text-gray-500 mt-1 leading-tight h-8">
          {description}
        </p>
      )}
    </>
  );

  const interactiveContent =
    link && !isCompleted ? (
      <Link href={link} passHref legacyBehavior>
        <a className="block h-full w-full">{cardContent}</a>
      </Link>
    ) : (
      <button
        onClick={handleInteraction}
        className="h-full w-full text-start" // Updated: from text-left to text-start
        disabled={isCompleted}
      >
        {cardContent}
      </button>
    );

  return (
    <motion.div
      layout
      onMouseEnter={() => canExpand && setActiveItemId(id)}
      className={cn(
        'relative flex flex-col rounded-2xl transition-all duration-300 group overflow-hidden',
        isCompleted ? 'bg-white/40' : 'bg-white/70 shadow-md',
        isExpanded && 'shadow-xl bg-white'
      )}
    >
      <div className={cn('p-4', !isCompleted && 'cursor-pointer')}>
        {interactiveContent}
      </div>
      <AnimatePresence>
        {isExpanded && (
          <motion.div
            layout
            initial={{ opacity: 0, height: 0 }}
            animate={{ opacity: 1, height: 'auto' }}
            exit={{ opacity: 0, height: 0 }}
            transition={{ duration: 0.3, ease: 'easeInOut' }}
            className="overflow-hidden"
          >
            <div className="bg-slate-50/70 border-t border-slate-200 px-4 py-3 text-sm">
              <h4 className="font-semibold text-xs mb-2 text-gray-800">
                {dict.missingItemsTitle}
              </h4>
              {missingItems && (
                <ul className="list-disc ps-4 space-y-1.5 text-gray-600 text-xs">
                  {' '}
                  {/* Updated: from pr-4 to ps-4 */}
                  {missingItems.map((item) => (
                    <li key={item}>{item}</li>
                  ))}
                </ul>
              )}
              {worldProgress && (
                <div className="space-y-2">
                  {worldProgress.map((world) => (
                    <div
                      key={world.world}
                      className="flex items-center justify-between text-xs"
                    >
                      <span
                        className={cn(
                          'font-medium',
                          world.isDone ? 'text-emerald-600' : 'text-gray-700'
                        )}
                      >
                        {world.world}
                      </span>
                      <div className="flex items-center gap-2">
                        <span className="font-mono text-xs">
                          {world.completed}/{world.total}
                        </span>
                        {world.isDone && (
                          <CheckCircle className="h-4 w-4 text-emerald-500" />
                        )}
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </div>
          </motion.div>
        )}
      </AnimatePresence>
    </motion.div>
  );
};

interface ProfileChecklistProps {
  user: SessionUserType;
  hasSeenPreview: boolean;
  onPreviewClick: () => void;
  questionnaireResponse: QuestionnaireResponse | null;
  dict: ProfileChecklistDict;
  locale: string; // Added: locale prop for directionality
}

export const ProfileChecklist: React.FC<ProfileChecklistProps> = ({
  user,
  onPreviewClick,
  hasSeenPreview,
  questionnaireResponse,
  dict,
  locale, // Added: destructure locale
}) => {
  const [isMinimized, setIsMinimized] = useState(false);
  const [activeItemId, setActiveItemId] = useState<string | null>(null);
  const missingItemsDict = dict.missingItems;

  // Added: Determine direction based on locale
  const direction = locale === 'he' ? 'rtl' : 'ltr';

  const getMissingItems = useMemo(() => {
    const p = user.profile;
    if (!p) return { personalDetails: [], partnerPreferences: [] };

    const personalDetails = [
      !p.profileHeadline && missingItemsDict.profileHeadline,
      (!p.about || p.about.trim().length < 100) && missingItemsDict.about,
      !p.inspiringCoupleStory && missingItemsDict.inspiringCoupleStory,
      !p.influentialRabbi && missingItemsDict.influentialRabbi,
      (p.hasMedicalInfo === null || p.hasMedicalInfo === undefined) &&
        missingItemsDict.medicalInfoReference,
      p.hasMedicalInfo === true &&
        !p.medicalInfoDetails &&
        missingItemsDict.medicalInfoDetails,
      p.hasMedicalInfo === true &&
        !p.medicalInfoDisclosureTiming &&
        missingItemsDict.medicalInfoDisclosureTiming,
      !p.birthDate && missingItemsDict.birthDate,
      !p.height && missingItemsDict.height,
      !p.city && missingItemsDict.city,
      !p.origin && missingItemsDict.origin,
      !p.nativeLanguage && missingItemsDict.nativeLanguage,
      p.aliyaCountry && !p.aliyaYear && missingItemsDict.aliyaYear,
      !p.maritalStatus && missingItemsDict.maritalStatus,
      p.maritalStatus &&
        ['divorced', 'widowed', 'annulled'].includes(p.maritalStatus) &&
        (p.hasChildrenFromPrevious === null ||
          p.hasChildrenFromPrevious === undefined) &&
        missingItemsDict.childrenFromPreviousReference,
      !p.parentStatus && missingItemsDict.parentStatus,
      !p.fatherOccupation && missingItemsDict.fatherOccupation,
      !p.motherOccupation && missingItemsDict.motherOccupation,
      (p.siblings === null || p.siblings === undefined) &&
        missingItemsDict.siblings,
      (p.position === null || p.position === undefined) &&
        missingItemsDict.position,
      !p.religiousLevel && missingItemsDict.religiousLevel,
      !p.religiousJourney && missingItemsDict.religiousJourney,
      (p.shomerNegiah === null || p.shomerNegiah === undefined) &&
        missingItemsDict.shomerNegiah,
      !p.educationLevel && missingItemsDict.educationLevel,
      !p.education && missingItemsDict.educationDetails,
      !p.occupation && missingItemsDict.occupation,
      !p.serviceType && missingItemsDict.serviceType,
      !p.serviceDetails && missingItemsDict.serviceDetails,
      (!p.profileCharacterTraits || p.profileCharacterTraits.length === 0) &&
        missingItemsDict.characterTraits,
      (!p.profileHobbies || p.profileHobbies.length === 0) &&
        missingItemsDict.hobbies,
    ].filter(Boolean);

    const partnerPreferences = [
      (!p.matchingNotes || p.matchingNotes.trim().length === 0) &&
        missingItemsDict.matchingNotes,
      !p.contactPreference && missingItemsDict.contactPreference,
      (!p.preferredAgeMin || !p.preferredAgeMax) &&
        missingItemsDict.preferredAgeRange,
      (!p.preferredHeightMin || !p.preferredHeightMax) &&
        missingItemsDict.preferredHeightRange,
      (!p.preferredLocations || p.preferredLocations.length === 0) &&
        missingItemsDict.preferredLocations,
      (!p.preferredReligiousLevels ||
        p.preferredReligiousLevels.length === 0) &&
        missingItemsDict.preferredReligiousLevels,
      (!p.preferredReligiousJourneys ||
        p.preferredReligiousJourneys.length === 0) &&
        missingItemsDict.preferredReligiousJourneys,
      (p.preferredShomerNegiah === null ||
        p.preferredShomerNegiah === undefined) &&
        missingItemsDict.preferredShomerNegiah,
      (!p.preferredEducation || p.preferredEducation.length === 0) &&
        missingItemsDict.preferredEducation,
      (!p.preferredOccupations || p.preferredOccupations.length === 0) &&
        missingItemsDict.preferredOccupations,
      (!p.preferredServiceTypes || p.preferredServiceTypes.length === 0) &&
        missingItemsDict.preferredServiceTypes,
      (!p.preferredMaritalStatuses ||
        p.preferredMaritalStatuses.length === 0) &&
        missingItemsDict.preferredMaritalStatuses,
      (p.preferredPartnerHasChildren === null ||
        p.preferredPartnerHasChildren === undefined) &&
        missingItemsDict.preferredPartnerHasChildren,
      (!p.preferredOrigins || p.preferredOrigins.length === 0) &&
        missingItemsDict.preferredOrigins,
      !p.preferredAliyaStatus && missingItemsDict.preferredAliyaStatus,
      (!p.preferredCharacterTraits ||
        p.preferredCharacterTraits.length === 0) &&
        missingItemsDict.preferredCharacterTraits,
      (!p.preferredHobbies || p.preferredHobbies.length === 0) &&
        missingItemsDict.preferredHobbies,
    ].filter(Boolean);

    if (p.gender === Gender.FEMALE) {
      if (!p.headCovering) personalDetails.push(missingItemsDict.headCovering);
      if (!p.preferredKippahTypes || p.preferredKippahTypes.length === 0)
        partnerPreferences.push(missingItemsDict.preferredKippahTypes);
    } else if (p.gender === Gender.MALE) {
      if (!p.kippahType) personalDetails.push(missingItemsDict.kippahType);
      if (!p.preferredHeadCoverings || p.preferredHeadCoverings.length === 0)
        partnerPreferences.push(missingItemsDict.preferredHeadCoverings);
    }

    return {
      personalDetails: personalDetails as string[],
      partnerPreferences: partnerPreferences as string[],
    };
  }, [user.profile, missingItemsDict]);

  const questionnaireProgress = useMemo(() => {
    const getAnswerCountFromJsonArray = (jsonValue: unknown): number => {
      if (Array.isArray(jsonValue)) return jsonValue.length;
      return 0;
    };

    if (!questionnaireResponse) {
      return (Object.keys(WORLD_NAMES_MAP) as WorldKey[]).map((key) => ({
        world: WORLD_NAMES_MAP[key],
        completed: 0,
        total:
          QUESTION_COUNTS[key.toUpperCase() as keyof typeof QUESTION_COUNTS],
        isDone: false,
      }));
    }

    const qr = questionnaireResponse;
    return (Object.keys(WORLD_NAMES_MAP) as WorldKey[]).map((key) => {
      const uppercaseKey = key.toUpperCase() as keyof typeof QUESTION_COUNTS;
      const answersFieldKey = `${key}Answers` as keyof QuestionnaireResponse;
      const completedCount = getAnswerCountFromJsonArray(qr[answersFieldKey]);
      return {
        world: WORLD_NAMES_MAP[key],
        completed: completedCount,
        total: QUESTION_COUNTS[uppercaseKey],
        isDone: qr.worldsCompleted?.includes(uppercaseKey) ?? false,
      };
    });
  }, [questionnaireResponse]);

  const questionnaireCompleted = questionnaireResponse?.completed ?? false;

  const tasks = [
    {
      id: 'photo',
      isCompleted: (user.images?.length ?? 0) >= 3,
      title: dict.tasks.photos.title,
      description: dict.tasks.photos.description,
      link: '/profile?tab=photos',
      icon: Camera,
      missingItems:
        (user.images?.length ?? 0) < 3
          ? [
              dict.tasks.photos.missing.replace(
                '{{count}}',
                (3 - (user.images?.length ?? 0)).toString()
              ),
            ]
          : [],
    },
    {
      id: 'personal_details',
      isCompleted: getMissingItems.personalDetails.length === 0,
      title: dict.tasks.personalDetails.title,
      description: dict.tasks.personalDetails.description,
      link: '/profile?tab=overview',
      icon: User,
      missingItems: getMissingItems.personalDetails,
    },
    {
      id: 'partner_preferences',
      isCompleted: getMissingItems.partnerPreferences.length === 0,
      title: dict.tasks.partnerPreferences.title,
      description: dict.tasks.partnerPreferences.description,
      link: '/profile?tab=preferences',
      icon: Target,
      missingItems: getMissingItems.partnerPreferences,
    },
    {
      id: 'questionnaire',
      isCompleted: questionnaireCompleted,
      title: dict.tasks.questionnaire.title,
      description: dict.tasks.questionnaire.description,
      link: '/questionnaire',
      icon: BookOpen,
      worldProgress: questionnaireProgress ?? undefined,
    },
    {
      id: 'review',
      isCompleted: hasSeenPreview,
      title: dict.tasks.review.title,
      description: dict.tasks.review.description,
      onClick: onPreviewClick,
      icon: Edit3,
      missingItems: !hasSeenPreview ? [dict.tasks.review.missing] : [],
    },
  ];

  const completionPercentage = useMemo(() => {
    const QUESTIONNAIRE_WEIGHT = 20;
    const OTHER_TASKS_WEIGHT = 80;

    const totalQuestions = Object.values(QUESTION_COUNTS).reduce(
      (sum, count) => sum + count,
      0
    );
    const answeredQuestions = questionnaireProgress.reduce(
      (sum, world) => sum + world.completed,
      0
    );
    const questionnaireContribution =
      totalQuestions > 0
        ? (answeredQuestions / totalQuestions) * QUESTIONNAIRE_WEIGHT
        : 0;

    const p = user.profile;
    const otherTasksStatus: boolean[] = [];

    // Task 1: Photos
    otherTasksStatus.push((user.images?.length ?? 0) >= 3);

    if (p) {
      // --- START OF UPDATED LOGIC FOR PROGRESS BAR ---
      // Personal Details Checks
      otherTasksStatus.push(!!p.profileHeadline);
      otherTasksStatus.push(!!(p.about && p.about.trim().length >= 100));
      otherTasksStatus.push(!!p.inspiringCoupleStory);
      otherTasksStatus.push(!!p.influentialRabbi);
      otherTasksStatus.push(
        p.hasMedicalInfo !== null && p.hasMedicalInfo !== undefined
      );
      otherTasksStatus.push(!p.hasMedicalInfo || !!p.medicalInfoDetails);
      otherTasksStatus.push(
        !p.hasMedicalInfo || !!p.medicalInfoDisclosureTiming
      );
      otherTasksStatus.push(!!p.birthDate);
      otherTasksStatus.push(!!p.height);
      otherTasksStatus.push(!!p.city);
      otherTasksStatus.push(!!p.origin);
      otherTasksStatus.push(!!p.nativeLanguage);
      otherTasksStatus.push(!p.aliyaCountry || !!p.aliyaYear);
      otherTasksStatus.push(!!p.maritalStatus);
      otherTasksStatus.push(
        !['divorced', 'widowed', 'annulled'].includes(p.maritalStatus || '') ||
          (p.hasChildrenFromPrevious !== null &&
            p.hasChildrenFromPrevious !== undefined)
      );
      otherTasksStatus.push(!!p.parentStatus);
      otherTasksStatus.push(!!p.fatherOccupation);
      otherTasksStatus.push(!!p.motherOccupation);
      otherTasksStatus.push(p.siblings !== null && p.siblings !== undefined);
      otherTasksStatus.push(p.position !== null && p.position !== undefined);
      otherTasksStatus.push(!!p.religiousLevel);
      otherTasksStatus.push(!!p.religiousJourney);
      otherTasksStatus.push(
        p.shomerNegiah !== null && p.shomerNegiah !== undefined
      );
      otherTasksStatus.push(!!p.educationLevel);
      otherTasksStatus.push(!!p.education);
      otherTasksStatus.push(!!p.occupation);
      otherTasksStatus.push(!!p.serviceType);
      otherTasksStatus.push(!!p.serviceDetails);
      otherTasksStatus.push(
        !!(p.profileCharacterTraits && p.profileCharacterTraits.length > 0)
      );
      otherTasksStatus.push(
        !!(p.profileHobbies && p.profileHobbies.length > 0)
      );

      // Partner Preferences Checks
      otherTasksStatus.push(
        !!(p.matchingNotes && p.matchingNotes.trim().length > 0)
      );
      otherTasksStatus.push(!!p.contactPreference);
      otherTasksStatus.push(!!(p.preferredAgeMin && p.preferredAgeMax));
      otherTasksStatus.push(!!(p.preferredHeightMin && p.preferredHeightMax));
      otherTasksStatus.push(
        !!(p.preferredLocations && p.preferredLocations.length > 0)
      );
      otherTasksStatus.push(
        !!(p.preferredReligiousLevels && p.preferredReligiousLevels.length > 0)
      );
      otherTasksStatus.push(
        !!(
          p.preferredReligiousJourneys &&
          p.preferredReligiousJourneys.length > 0
        )
      );
      otherTasksStatus.push(
        p.preferredShomerNegiah !== null &&
          p.preferredShomerNegiah !== undefined
      );
      otherTasksStatus.push(
        !!(p.preferredEducation && p.preferredEducation.length > 0)
      );
      otherTasksStatus.push(
        !!(p.preferredOccupations && p.preferredOccupations.length > 0)
      );
      otherTasksStatus.push(
        !!(p.preferredServiceTypes && p.preferredServiceTypes.length > 0)
      );
      otherTasksStatus.push(
        !!(p.preferredMaritalStatuses && p.preferredMaritalStatuses.length > 0)
      );
      otherTasksStatus.push(
        p.preferredPartnerHasChildren !== null &&
          p.preferredPartnerHasChildren !== undefined
      );
      otherTasksStatus.push(
        !!(p.preferredOrigins && p.preferredOrigins.length > 0)
      );
      otherTasksStatus.push(!!p.preferredAliyaStatus);
      otherTasksStatus.push(
        !!(p.preferredCharacterTraits && p.preferredCharacterTraits.length > 0)
      );
      otherTasksStatus.push(
        !!(p.preferredHobbies && p.preferredHobbies.length > 0)
      );

      // Gender-specific checks
      if (p.gender === Gender.FEMALE) {
        otherTasksStatus.push(!!p.headCovering); // personal
        otherTasksStatus.push(
          !!(p.preferredKippahTypes && p.preferredKippahTypes.length > 0)
        ); // preference
      } else if (p.gender === Gender.MALE) {
        otherTasksStatus.push(!!p.kippahType); // personal
        otherTasksStatus.push(
          !!(p.preferredHeadCoverings && p.preferredHeadCoverings.length > 0)
        ); // preference
      }
      // --- END OF UPDATED LOGIC FOR PROGRESS BAR ---
    } else {
      // If no profile, add placeholders for all items
      const totalProfileFields = 54; // Calculated number of fields including gender-specific ones
      otherTasksStatus.push(...Array(totalProfileFields).fill(false));
    }

    // Task 5: Review
    otherTasksStatus.push(hasSeenPreview);

    const totalOtherTasks = otherTasksStatus.length;
    const completedOtherTasks = otherTasksStatus.filter(
      (isCompleted) => isCompleted
    ).length;

    const otherTasksContribution =
      totalOtherTasks > 0
        ? (completedOtherTasks / totalOtherTasks) * OTHER_TASKS_WEIGHT
        : 0;

    return Math.round(questionnaireContribution + otherTasksContribution);
  }, [user, questionnaireProgress, hasSeenPreview]);

  const isAllComplete = completionPercentage >= 100;

  return (
    <AnimatePresence>
      <motion.div
        layout
        initial={{ opacity: 0, y: -20 }}
        animate={{ opacity: 1, y: 0 }}
        exit={{ opacity: 0, height: 0, transition: { duration: 0.4 } }}
        transition={{ duration: 0.5, ease: 'easeOut' }}
        className="mb-8 rounded-3xl shadow-xl border border-white/50 bg-white/70 backdrop-blur-md overflow-hidden"
        dir={direction} // Added: set direction for the whole component
      >
        <div className="p-4 sm:p-6">
          <div className="md:flex md:items-center md:justify-between">
            <div className="flex-1 text-center md:text-start">
              {' '}
              {/* Updated: from md:text-right to md:text-start */}
     <h2 className="text-xl font-bold text-slate-800 flex items-center justify-center md:justify-start gap-2">
  {isAllComplete && (
    <Sparkles className="w-6 h-6 text-amber-500" />
  )}
  {(() => {
    const isFemale = user.profile?.gender === 'FEMALE';
    const welcomeText = (isFemale && dict.welcome_female) ? dict.welcome_female : dict.welcome;
    const allCompleteText = (isFemale && dict.allComplete_female) ? dict.allComplete_female : dict.allComplete;
    const textToShow = isAllComplete ? allCompleteText : welcomeText;
    return textToShow.replace('{{firstName}}', user.firstName || '');
  })()}
</h2>
              <AnimatePresence initial={false}>
                {!isMinimized && (
                  <motion.p
                    initial={{ opacity: 0, height: 0, marginTop: 0 }}
                    animate={{
                      opacity: 1,
                      height: 'auto',
                      marginTop: '0.25rem',
                    }}
                    exit={{ opacity: 0, height: 0, marginTop: 0 }}
                    className="text-slate-600 text-sm md:text-base overflow-hidden"
                  >
                    {isAllComplete
                      ? dict.allCompleteSubtitle
                      : dict.welcomeSubtitle}
                  </motion.p>
                )}
              </AnimatePresence>
            </div>
            <div className="mt-4 md:mt-0 md:w-auto lg:w-1/3 flex items-center gap-4">
              <div className="flex-1">
                <div className="flex justify-between items-center text-sm mb-1">
                  <span
                    id="profile-completion-label"
                    className="font-medium text-gray-700"
                  >
                    {dict.completionLabel}
                  </span>
                  <span className="font-bold text-cyan-600">
                    {completionPercentage}%
                  </span>
                </div>
                <Progress
                  value={completionPercentage}
                  aria-labelledby="profile-completion-label"
                  className="h-2 bg-slate-200/70"
                />
              </div>
              <Button
                variant="ghost"
                size="icon"
                className="text-slate-500 hover:bg-slate-200/50 rounded-full flex-shrink-0"
                onClick={() => setIsMinimized(!isMinimized)}
                aria-label={isMinimized ? dict.expandLabel : dict.minimizeLabel}
              >
                {isMinimized ? (
                  <ChevronDown className="h-5 w-5" />
                ) : (
                  <ChevronUp className="h-5 w-5" />
                )}
              </Button>
            </div>
          </div>
          <AnimatePresence initial={false}>
            {!isMinimized && (
              <motion.div
                key="checklist-content"
                initial={{ height: 0, opacity: 0 }}
                animate={{
                  height: 'auto',
                  opacity: 1,
                  transition: { opacity: { delay: 0.1 } },
                }}
                exit={{ height: 0, opacity: 0, transition: { duration: 0.3 } }}
                className="overflow-hidden"
                onMouseLeave={() => setActiveItemId(null)}
              >
                <ul className="mt-6 grid grid-cols-2 sm:grid-cols-3 md:grid-cols-5 gap-3 sm:gap-4">
                  {tasks.map((task) => (
                    <li key={task.id}>
                      <ChecklistItem
                        key={task.id}
                        {...task}
                        isActive={activeItemId === task.id}
                        setActiveItemId={setActiveItemId}
                        dict={dict}
                      />
                    </li>
                  ))}
                </ul>
              </motion.div>
            )}
          </AnimatePresence>
        </div>
      </motion.div>
    </AnimatePresence>
  );
};
--- End of Content for ProfileChecklist.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\profile\sections\ProfileSection.tsx
--------------------------------------------------------------------------------
Content:
// src/app/components/profile/sections/ProfileSection.tsx
'use client';

import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from '@/components/ui/tooltip';
import React, { useState, useEffect, useMemo } from 'react';
import {
  Gender,
  AvailabilityStatus,
  ServiceType,
  HeadCoveringType,
  KippahType,
  ReligiousJourney,
} from '@prisma/client';
import { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select';
import { Checkbox } from '@/components/ui/checkbox';
import {
  Pencil,
  Save,
  X,
  Users,
  BookOpen,
  Briefcase,
  Shield,
  Heart,
  MapPin,
  Languages,
  Palette,
  Smile,
  UserCircle,
  Info,
  HeartPulse,
  Lock,
  Eye,
  EyeOff,
} from 'lucide-react';
import { UserProfile } from '@/types/next-auth';
import { cn } from '@/lib/utils';
import { Badge } from '@/components/ui/badge';
import { languageOptions } from '@/lib/languageOptions';
import { toast } from 'sonner';
import Autocomplete from 'react-google-autocomplete';
import { Switch } from '@/components/ui/switch';
import { ProfileSectionDict } from '@/types/dictionary';

interface ProfileSectionProps {
  profile: UserProfile | null;
  isEditing: boolean;
  setIsEditing: (value: boolean) => void;
  viewOnly?: boolean;
  onSave: (data: Partial<UserProfile>) => void;
  dict: ProfileSectionDict;
  locale: string; // Adicionado para controle de direção
}

const ensureDateObject = (
  value: string | number | Date | null | undefined
): Date | undefined => {
  if (!value) return undefined;
  if (value instanceof Date && !isNaN(value.getTime())) {
    return value;
  }
  if (typeof value === 'string' || typeof value === 'number') {
    const date = new Date(value);
    if (!isNaN(date.getTime())) {
      return date;
    }
  }
  return undefined;
};

const ProfileSection: React.FC<ProfileSectionProps> = ({
  profile: profileProp,
  isEditing,
  setIsEditing,
  viewOnly = false,
  onSave,
  dict,
  locale, // Recebendo o locale
}) => {
  const [formData, setFormData] = useState<Partial<UserProfile>>({});
  const [loading, setLoading] = useState(true);
  const [initialData, setInitialData] = useState<Partial<UserProfile>>({});

  const [cityInputValue, setCityInputValue] = useState('');
  const [aliyaCountryInputValue, setAliyaCountryInputValue] = useState('');

  // Determina a direção com base no locale
  const direction = locale === 'he' ? 'rtl' : 'ltr';

  const characterTraitsOptions = useMemo(
    () =>
      Object.entries(dict.options.traits).map(([value, label]) => ({
        value,
        label,
        icon:
          {
            empathetic: Heart,
            driven: Briefcase,
            optimistic: Smile,
            family_oriented: Users,
            intellectual: BookOpen,
            organized: Palette,
            calm: Heart,
            humorous: Smile,
            sociable: Users,
            sensitive: Heart,
            independent: MapPin,
            creative: Palette,
            honest: Shield,
            responsible: Shield,
            easy_going: Smile,
          }[value] || Smile,
      })),
    [dict.options.traits]
  );

  const hobbiesOptions = useMemo(
    () =>
      Object.entries(dict.options.hobbies).map(([value, label]) => ({
        value,
        label,
        icon:
          {
            travel: MapPin,
            sports: Briefcase,
            reading: BookOpen,
            cooking_baking: Palette,
            music_playing_instrument: Languages,
            art_crafts: Palette,
            volunteering: Heart,
            learning_courses: BookOpen,
            board_games_puzzles: Smile,
            movies_theater: Smile,
            dancing: Users,
            writing: BookOpen,
            nature_hiking: MapPin,
            photography: Palette,
          }[value] || Smile,
      })),
    [dict.options.hobbies]
  );

  const maritalStatusOptions = useMemo(
    () =>
      Object.entries(dict.options.maritalStatus).map(([value, label]) => ({
        value,
        label,
      })),
    [dict.options.maritalStatus]
  );
  const religiousLevelOptions = useMemo(
    () =>
      Object.entries(dict.options.religiousLevel).map(([value, label]) => ({
        value,
        label,
      })),
    [dict.options.religiousLevel]
  );
  const religiousJourneyOptions = useMemo(
    () =>
      Object.entries(dict.options.religiousJourney).map(([value, label]) => ({
        value,
        label,
      })),
    [dict.options.religiousJourney]
  );
  const educationLevelOptions = useMemo(
    () =>
      Object.entries(dict.options.educationLevel).map(([value, label]) => ({
        value,
        label,
      })),
    [dict.options.educationLevel]
  );
  const serviceTypeOptions = useMemo(
    () =>
      Object.entries(dict.options.serviceType).map(([value, label]) => ({
        value,
        label,
      })),
    [dict.options.serviceType]
  );
  const headCoveringOptions = useMemo(
    () =>
      Object.entries(dict.options.headCovering).map(([value, label]) => ({
        value,
        label,
      })),
    [dict.options.headCovering]
  );
  const kippahTypeOptions = useMemo(
    () =>
      Object.entries(dict.options.kippahType).map(([value, label]) => ({
        value,
        label,
      })),
    [dict.options.kippahType]
  );
  const preferredMatchmakerGenderOptions = useMemo(
    () =>
      Object.entries(dict.options.matchmakerGender).map(([value, label]) => ({
        value,
        label,
      })),
    [dict.options.matchmakerGender]
  );

  const initializeFormData = (profileData: UserProfile | null) => {
    let headline = profileData?.profileHeadline || '';
    if (typeof headline === 'object' && headline !== null) {
      headline = '';
    }

    const dataToSet: Partial<UserProfile> = {
      gender: profileData?.gender || undefined,
      birthDate: ensureDateObject(profileData?.birthDate),
      nativeLanguage: profileData?.nativeLanguage || undefined,
      additionalLanguages: profileData?.additionalLanguages || [],
      height: profileData?.height ?? undefined,
      maritalStatus: profileData?.maritalStatus || undefined,
      occupation: profileData?.occupation || '',
      education: profileData?.education || '',
      educationLevel: profileData?.educationLevel || undefined,
      city: profileData?.city || '',
      origin: profileData?.origin || '',
      religiousJourney: profileData?.religiousJourney || undefined,
      religiousLevel: profileData?.religiousLevel || undefined,
      about: profileData?.about || '',
      parentStatus: profileData?.parentStatus || undefined,
      fatherOccupation: profileData?.fatherOccupation || '',
      motherOccupation: profileData?.motherOccupation || '',
      siblings: profileData?.siblings ?? undefined,
      position: profileData?.position ?? undefined,
      isProfileVisible: profileData?.isProfileVisible ?? true,
      preferredMatchmakerGender:
        profileData?.preferredMatchmakerGender || undefined,
      availabilityStatus:
        profileData?.availabilityStatus || AvailabilityStatus.AVAILABLE,
      availabilityNote: profileData?.availabilityNote || '',
      availabilityUpdatedAt: ensureDateObject(
        profileData?.availabilityUpdatedAt
      ),
      matchingNotes: profileData?.matchingNotes || '',
      shomerNegiah: profileData?.shomerNegiah ?? undefined,
      serviceType: profileData?.serviceType || undefined,
      serviceDetails: profileData?.serviceDetails || '',
      headCovering: profileData?.headCovering || undefined,
      kippahType: profileData?.kippahType || undefined,
      hasChildrenFromPrevious:
        profileData?.hasChildrenFromPrevious ?? undefined,
      profileCharacterTraits: profileData?.profileCharacterTraits || [],
      profileHobbies: profileData?.profileHobbies || [],
      aliyaCountry: profileData?.aliyaCountry || '',
      aliyaYear: profileData?.aliyaYear ?? undefined,
      preferredAgeMin: profileData?.preferredAgeMin ?? undefined,
      preferredAgeMax: profileData?.preferredAgeMax ?? undefined,
      preferredHeightMin: profileData?.preferredHeightMin ?? undefined,
      preferredHeightMax: profileData?.preferredHeightMax ?? undefined,
      preferredReligiousLevels: profileData?.preferredReligiousLevels || [],
      preferredLocations: profileData?.preferredLocations || [],
      preferredEducation: profileData?.preferredEducation || [],
      preferredOccupations: profileData?.preferredOccupations || [],
      contactPreference: profileData?.contactPreference || undefined,
      id: profileData?.id,
      userId: profileData?.userId,
      createdAt: ensureDateObject(profileData?.createdAt),
      updatedAt: ensureDateObject(profileData?.updatedAt),
      lastActive: ensureDateObject(profileData?.lastActive),
      hasMedicalInfo: profileData?.hasMedicalInfo ?? false,
      medicalInfoDetails: profileData?.medicalInfoDetails || '',
      medicalInfoDisclosureTiming:
        profileData?.medicalInfoDisclosureTiming || undefined,
      isMedicalInfoVisible: profileData?.isMedicalInfoVisible ?? false,
      profileHeadline: headline,
      inspiringCoupleStory: profileData?.inspiringCoupleStory || '',
      influentialRabbi: profileData?.influentialRabbi || '',
    };
    setFormData(dataToSet);
    setInitialData(dataToSet);

    setCityInputValue(dataToSet.city || '');
    setAliyaCountryInputValue(dataToSet.aliyaCountry || '');
  };

  useEffect(() => {
    setLoading(true);
    if (profileProp) {
      initializeFormData(profileProp);
      setLoading(false);
    }
  }, [profileProp]);

  const handleChange = (
    field: keyof UserProfile,
    value:
      | UserProfile[keyof UserProfile]
      | string
      | number
      | boolean
      | Date
      | string[]
      | null
  ) => {
    setFormData((prev) => {
      let finalValue: UserProfile[keyof UserProfile] | undefined = undefined;

      if (
        [
          'height',
          'siblings',
          'position',
          'aliyaYear',
          'preferredAgeMin',
          'preferredAgeMax',
          'preferredHeightMin',
          'preferredHeightMax',
        ].includes(field)
      ) {
        const rawValue = value as string | number;
        if (rawValue === '' || rawValue === null || rawValue === undefined) {
          finalValue = undefined;
        } else {
          const parsed = parseInt(String(rawValue), 10);
          finalValue = !isNaN(parsed)
            ? (parsed as UserProfile[typeof field])
            : undefined;
        }
      } else if (field === 'birthDate') {
        finalValue = ensureDateObject(
          value as string | Date | null | undefined
        ) as UserProfile[typeof field];
      } else if (
        [
          'shomerNegiah',
          'hasChildrenFromPrevious',
          'isProfileVisible',
          'hasMedicalInfo',
          'isMedicalInfoVisible',
        ].includes(field)
      ) {
        finalValue = value as boolean as UserProfile[typeof field];
      } else {
        finalValue = (
          value === '' || value === null ? undefined : value
        ) as UserProfile[typeof field];
      }

      return {
        ...prev,
        [field]: finalValue,
      };
    });
  };

  const handleMultiSelectToggle = (
    field: keyof UserProfile,
    optionValue: string
  ) => {
    setFormData((prev) => {
      const currentValues = (prev[field] as string[]) || [];
      const newValues = currentValues.includes(optionValue)
        ? currentValues.filter((v) => v !== optionValue)
        : [...currentValues, optionValue];
      return { ...prev, [field]: newValues };
    });
  };

  const handleSave = () => {
    if (formData.about && formData.about.trim().length < 100) {
      toast.error(dict.toasts.validationErrorTitle, {
        description: dict.toasts.aboutMinLength.replace('{{count}}', '100'),
        duration: 5000,
      });
      return;
    }

    const dataToSave = { ...formData };
    onSave(dataToSave);
    setIsEditing(false);
    setInitialData(dataToSave);
  };

  const handleCancel = () => {
    setFormData(initialData);
    setCityInputValue(initialData.city || '');
    setAliyaCountryInputValue(initialData.aliyaCountry || '');
    setIsEditing(false);
  };

  const renderDisplayValue = (
    value: unknown,
    placeholder: string = dict.placeholders.notSpecified
  ): React.ReactNode => {
    if (value === null || value === undefined || value === '') {
      return <span className="italic text-gray-500">{placeholder}</span>;
    }
    if (value instanceof Date && !isNaN(value.getTime())) {
      return new Intl.DateTimeFormat('he-IL').format(value);
    }
    return String(value);
  };

  const renderSelectDisplayValue = (
    value: string | undefined | null,
    options: { value: string; label: string }[],
    placeholder: string = dict.placeholders.notSpecified
  ) => {
    if (!value) {
      return <span className="italic text-gray-500">{placeholder}</span>;
    }
    const option = options.find((opt) => opt.value === value);
    return option ? (
      option.label
    ) : (
      <span className="italic text-gray-500">{placeholder}</span>
    );
  };

  const renderBooleanDisplayValue = (
    value: boolean | undefined | null,
    trueLabel: string = dict.cards.family.hasChildrenYes,
    falseLabel: string = dict.cards.medical.display.no,
    placeholder: string = dict.placeholders.notSpecified
  ) => {
    if (value === undefined || value === null) {
      return <span className="italic text-gray-500">{placeholder}</span>;
    }
    return value ? trueLabel : falseLabel;
  };

  if (loading) {
    return (
      <div role="status" aria-live="polite" className="text-center p-4">
        {dict.loading}
      </div>
    );
  }

  const renderMultiSelectBadges = (
    fieldValues: string[] | undefined,
    options: { value: string; label: string; icon?: React.ElementType }[],
    emptyPlaceholder: string
  ) => {
    if (!fieldValues || fieldValues.length === 0) {
      return <p className="text-sm text-gray-500 italic">{emptyPlaceholder}</p>;
    }
    return fieldValues.map((value) => {
      const option = options.find((opt) => opt.value === value);
      return option ? (
        <Badge
          key={value}
          variant="secondary"
          className="me-1 mb-1 bg-sky-100 text-sky-700 text-xs px-2 py-0.5 rounded-full"
        >
          {option.icon && <option.icon className="w-3 h-3 me-1" />}
          {option.label}
        </Badge>
      ) : null;
    });
  };

  return (
    <div className="relative" dir={direction}>
      <div className="sticky top-0 z-10 bg-gradient-to-b from-white via-white/95 to-white/0 pt-4 pb-3 backdrop-blur-sm">
        <div className="container mx-auto max-w-screen-xl px-4">
          <div className="flex items-center justify-between">
            <div className="text-start">
              <h1 className="text-xl md:text-2xl font-bold text-slate-800">
                {dict.header.title}
              </h1>
              <p className="text-sm text-slate-500">
                {isEditing && !viewOnly
                  ? dict.header.subtitleEdit
                  : dict.header.subtitleView}
              </p>
            </div>
            {!viewOnly && (
              <div className="flex gap-2">
                {!isEditing ? (
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={() => setIsEditing(true)}
                    className="rounded-full shadow-sm hover:shadow-md transition-all duration-300 border-cyan-400 text-cyan-700 hover:bg-cyan-50"
                  >
                    <Pencil className="w-3.5 h-3.5 ms-1.5" />
                    {dict.buttons.edit}
                  </Button>
                ) : (
                  <>
                    <div className="hidden sm:flex gap-2">
                      <Button
                        variant="outline"
                        size="sm"
                        onClick={handleCancel}
                        className="rounded-full shadow-sm hover:shadow-md transition-all duration-300 border-gray-300 text-gray-700 hover:bg-gray-50"
                      >
                        <X className="w-3.5 h-3.5 ms-1.5" />
                        {dict.buttons.cancel}
                      </Button>
                      <Button
                        variant="default"
                        size="sm"
                        onClick={handleSave}
                        className="rounded-full shadow-sm hover:shadow-md transition-all duration-300 bg-cyan-600 hover:bg-cyan-700 text-white"
                      >
                        <Save className="w-3.5 h-3.5 ms-1.5" />
                        {dict.buttons.save}
                      </Button>
                    </div>
                  </>
                )}
              </div>
            )}
          </div>
        </div>
      </div>

      <div className="container mx-auto max-w-screen-xl py-6 px-4">
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
          <div className="space-y-6">
            <Card className="bg-white/80 backdrop-blur-md rounded-2xl shadow-lg border border-gray-200/40 overflow-hidden">
              <CardHeader className="bg-gradient-to-r from-cyan-50/40 to-pink-50/40 border-b border-gray-200/50 p-4 flex items-center space-x-2 rtl:space-x-reverse">
                <UserCircle className="w-5 h-5 text-cyan-700" />
                <CardTitle className="text-base font-semibold text-gray-700">
                  {dict.cards.personal.title}
                </CardTitle>
              </CardHeader>
              <CardContent className="p-4 md:p-6">
                <div className="grid grid-cols-1 sm:grid-cols-2 gap-x-6 gap-y-5">
                  <div>
                    <Label
                      htmlFor="gender"
                      className="block mb-1.5 text-xs font-medium text-gray-600"
                    >
                      {dict.cards.personal.genderLabel}
                    </Label>
                    {isEditing && !viewOnly ? (
                      <Select
                        dir={direction}
                        value={formData.gender || ''}
                        onValueChange={(value) =>
                          handleChange('gender', value as Gender)
                        }
                      >
                        <SelectTrigger
                          id="gender"
                          className="h-9 text-sm focus:ring-cyan-500 text-start"
                        >
                          <SelectValue
                            placeholder={dict.cards.personal.genderPlaceholder}
                          />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="MALE">
                            {dict.options.gender.MALE}
                          </SelectItem>
                          <SelectItem value="FEMALE">
                            {dict.options.gender.FEMALE}
                          </SelectItem>
                        </SelectContent>
                      </Select>
                    ) : (
                      <p className="text-sm text-gray-800 font-medium mt-1">
                        {renderDisplayValue(
                          formData.gender
                            ? dict.options.gender[formData.gender]
                            : undefined
                        )}
                      </p>
                    )}
                  </div>
                  <div>
                    <Label
                      htmlFor="birthDate"
                      className="block mb-1.5 text-xs font-medium text-gray-600"
                    >
                      {dict.cards.personal.birthDateLabel}
                    </Label>
                    {isEditing && !viewOnly ? (
                      <Input
                        id="birthDate"
                        type="date"
                        value={
                          formData.birthDate instanceof Date &&
                          !isNaN(formData.birthDate.getTime())
                            ? formData.birthDate.toISOString().split('T')[0]
                            : ''
                        }
                        onChange={(e) =>
                          handleChange('birthDate', e.target.value || undefined)
                        }
                        className="h-9 text-sm focus:ring-cyan-500"
                        max={new Date().toISOString().split('T')[0]}
                      />
                    ) : (
                      <p className="text-sm text-gray-800 font-medium mt-1">
                        {renderDisplayValue(formData.birthDate)}
                      </p>
                    )}
                  </div>
                  <div>
                    <Label
                      htmlFor="height"
                      className="block mb-1.5 text-xs font-medium text-gray-600"
                    >
                      {dict.cards.personal.heightLabel}
                    </Label>
                    {isEditing && !viewOnly ? (
                      <Input
                        id="height"
                        type="number"
                        value={formData.height ?? ''}
                        onChange={(e) => handleChange('height', e.target.value)}
                        className="h-9 text-sm focus:ring-cyan-500"
                        placeholder={dict.cards.personal.heightPlaceholder}
                        min="100"
                        max="250"
                      />
                    ) : (
                      <p className="text-sm text-gray-800 font-medium mt-1">
                        {renderDisplayValue(
                          formData.height ? `${formData.height} cm` : undefined
                        )}
                      </p>
                    )}
                  </div>
                  <div>
                    <Label
                      htmlFor="city-autocomplete"
                      className="block mb-1.5 text-xs font-medium text-gray-600"
                    >
                      {dict.cards.personal.cityLabel}
                    </Label>
                    {isEditing && !viewOnly ? (
                      <Autocomplete
                        apiKey={process.env.NEXT_PUBLIC_GOOGLE_MAPS_API_KEY}
                        inputProps={{ id: 'city-autocomplete' }}
                        value={cityInputValue}
                        onChange={(e: React.ChangeEvent<HTMLInputElement>) => {
                          setCityInputValue(e.target.value);
                        }}
                        onPlaceSelected={(place) => {
                          const cityComponent = place.address_components?.find(
                            (component) => component.types.includes('locality')
                          );
                          const selectedCity =
                            cityComponent?.long_name ||
                            place.formatted_address ||
                            '';
                          handleChange('city', selectedCity);
                          setCityInputValue(selectedCity);
                        }}
                        onBlur={() => {
                          if (cityInputValue !== formData.city) {
                            setCityInputValue(formData.city || '');
                          }
                        }}
                        options={{
                          types: ['(cities)'],
                          componentRestrictions: { country: 'il' },
                        }}
                        className="w-full h-9 text-sm p-2 border border-gray-300 rounded-md focus:ring-cyan-500 focus:border-cyan-500"
                        placeholder={dict.cards.personal.cityPlaceholder}
                      />
                    ) : (
                      <p className="text-sm text-gray-800 font-medium mt-1">
                        {renderDisplayValue(formData.city)}
                      </p>
                    )}
                  </div>
                  <div>
                    <Label
                      htmlFor="origin"
                      className="block mb-1.5 text-xs font-medium text-gray-600"
                    >
                      {dict.cards.personal.originLabel}
                    </Label>
                    {isEditing && !viewOnly ? (
                      <Input
                        id="origin"
                        value={formData.origin || ''}
                        onChange={(e) => handleChange('origin', e.target.value)}
                        placeholder={dict.cards.personal.originPlaceholder}
                        className="h-9 text-sm focus:ring-cyan-500"
                      />
                    ) : (
                      <p className="text-sm text-gray-800 font-medium mt-1">
                        {renderDisplayValue(formData.origin)}
                      </p>
                    )}
                  </div>
                  <div>
                    <Label
                      htmlFor="aliyaCountry-autocomplete"
                      className="block mb-1.5 text-xs font-medium text-gray-600"
                    >
                      {dict.cards.personal.aliyaCountryLabel}
                    </Label>
                    {isEditing && !viewOnly ? (
                      <Autocomplete
                        apiKey={process.env.NEXT_PUBLIC_GOOGLE_MAPS_API_KEY}
                        inputProps={{ id: 'aliyaCountry-autocomplete' }}
                        value={aliyaCountryInputValue}
                        onChange={(e: React.ChangeEvent<HTMLInputElement>) => {
                          setAliyaCountryInputValue(e.target.value);
                        }}
                        onPlaceSelected={(place) => {
                          const countryComponent =
                            place.address_components?.find((component) =>
                              component.types.includes('country')
                            );
                          const selectedCountry =
                            countryComponent?.long_name ||
                            place.formatted_address ||
                            '';
                          handleChange('aliyaCountry', selectedCountry);
                          setAliyaCountryInputValue(selectedCountry);
                        }}
                        onBlur={() => {
                          if (
                            aliyaCountryInputValue !== formData.aliyaCountry
                          ) {
                            setAliyaCountryInputValue(
                              formData.aliyaCountry || ''
                            );
                          }
                        }}
                        options={{
                          types: ['country'],
                        }}
                        className="w-full h-9 text-sm p-2 border border-gray-300 rounded-md focus:ring-cyan-500 focus:border-cyan-500"
                        placeholder={
                          dict.cards.personal.aliyaCountryPlaceholder
                        }
                      />
                    ) : (
                      <p className="text-sm text-gray-800 font-medium mt-1">
                        {renderDisplayValue(
                          formData.aliyaCountry,
                          dict.placeholders.notRelevant
                        )}
                      </p>
                    )}
                  </div>
                  <div>
                    <Label
                      htmlFor="aliyaYear"
                      className="block mb-1.5 text-xs font-medium text-gray-600"
                    >
                      {dict.cards.personal.aliyaYearLabel}
                    </Label>
                    {isEditing && !viewOnly ? (
                      <Input
                        id="aliyaYear"
                        type="number"
                        value={formData.aliyaYear ?? ''}
                        onChange={(e) =>
                          handleChange('aliyaYear', e.target.value)
                        }
                        disabled={!formData.aliyaCountry}
                        placeholder={dict.cards.personal.aliyaYearPlaceholder}
                        className="h-9 text-sm focus:ring-cyan-500"
                        min="1900"
                        max={new Date().getFullYear()}
                      />
                    ) : (
                      <p className="text-sm text-gray-800 font-medium mt-1">
                        {renderDisplayValue(
                          formData.aliyaYear,
                          formData.aliyaCountry
                            ? dict.placeholders.noYear
                            : dict.placeholders.notRelevant
                        )}
                      </p>
                    )}
                  </div>
                  <div>
                    <Label
                      htmlFor="nativeLanguage"
                      className="block mb-1.5 text-xs font-medium text-gray-600"
                    >
                      {dict.cards.personal.nativeLanguageLabel}
                    </Label>
                    {isEditing && !viewOnly ? (
                      <Select
                        dir={direction}
                        value={formData.nativeLanguage || ''}
                        onValueChange={(value) =>
                          handleChange('nativeLanguage', value || undefined)
                        }
                      >
                        <SelectTrigger
                          id="nativeLanguage"
                          className="h-9 text-sm focus:ring-cyan-500 text-start"
                        >
                          <SelectValue
                            placeholder={
                              dict.cards.personal.nativeLanguagePlaceholder
                            }
                          />
                        </SelectTrigger>
                        <SelectContent>
                          {languageOptions.map((lang) => (
                            <SelectItem key={lang.value} value={lang.value}>
                              {lang.label}
                            </SelectItem>
                          ))}
                        </SelectContent>
                      </Select>
                    ) : (
                      <p className="text-sm text-gray-800 font-medium mt-1">
                        {renderSelectDisplayValue(
                          formData.nativeLanguage,
                          languageOptions
                        )}
                      </p>
                    )}
                  </div>
                  <div className="sm:col-span-2 lg:col-span-1">
                    <Label
                      htmlFor="additionalLanguages"
                      className="block mb-1.5 text-xs font-medium text-gray-600"
                    >
                      {dict.cards.personal.additionalLanguagesLabel}
                    </Label>
                    {isEditing && !viewOnly ? (
                      <Select
                        dir={direction}
                        onValueChange={(value) => {
                          const currentLanguages =
                            formData.additionalLanguages || [];
                          if (!currentLanguages.includes(value)) {
                            handleChange('additionalLanguages', [
                              ...currentLanguages,
                              value,
                            ]);
                          }
                        }}
                      >
                        <SelectTrigger
                          id="additionalLanguages"
                          className="h-9 text-sm focus:ring-cyan-500 text-start"
                        >
                          <SelectValue
                            placeholder={
                              dict.cards.personal.additionalLanguagesPlaceholder
                            }
                          />
                        </SelectTrigger>
                        <SelectContent className="max-h-[200px]">
                          {languageOptions
                            .filter(
                              (lang) =>
                                !(formData.additionalLanguages || []).includes(
                                  lang.value
                                ) && lang.value !== formData.nativeLanguage
                            )
                            .map((lang) => (
                              <SelectItem key={lang.value} value={lang.value}>
                                {lang.label}
                              </SelectItem>
                            ))}
                        </SelectContent>
                      </Select>
                    ) : null}
                    <div className="mt-2 flex flex-wrap gap-1.5">
                      {(formData.additionalLanguages || []).map((langValue) => {
                        const lang = languageOptions.find(
                          (l) => l.value === langValue
                        );
                        return lang ? (
                          <Badge
                            key={lang.value}
                            variant="secondary"
                            className="bg-cyan-100/70 text-cyan-800 px-2 py-0.5 rounded-full text-[11px] font-medium flex items-center"
                          >
                            {lang.label}
                            {isEditing && !viewOnly && (
                              <button
                                type="button"
                                onClick={() =>
                                  handleChange(
                                    'additionalLanguages',
                                    (formData.additionalLanguages || []).filter(
                                      (l) => l !== langValue
                                    )
                                  )
                                }
                                className="ms-1.5 text-cyan-600 hover:text-cyan-800 text-xs"
                                aria-label={dict.cards.personal.removeLanguageLabel.replace(
                                  '{{lang}}',
                                  lang.label
                                )}
                              >
                                ×
                              </button>
                            )}
                          </Badge>
                        ) : null;
                      })}
                      {(!isEditing || viewOnly) &&
                        (!formData.additionalLanguages ||
                          formData.additionalLanguages.length === 0) && (
                          <p className="text-sm text-gray-500 italic">
                            {dict.cards.personal.noAdditionalLanguages}
                          </p>
                        )}
                    </div>
                  </div>
                </div>
              </CardContent>
            </Card>

            <Card className="bg-white/80 backdrop-blur-md rounded-2xl shadow-lg border border-gray-200/40 overflow-hidden">
              <CardHeader className="bg-gradient-to-r from-purple-50/40 to-indigo-50/40 border-b border-gray-200/50 p-4 flex items-center space-x-2 rtl:space-x-reverse">
                <Users className="w-5 h-5 text-purple-700" />
                <CardTitle className="text-base font-semibold text-gray-700">
                  {dict.cards.family.title}
                </CardTitle>
              </CardHeader>
              <CardContent className="p-4 md:p-6">
                <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-x-6 gap-y-5 items-start">
                  <div>
                    <Label
                      htmlFor="maritalStatus"
                      className="block mb-1.5 text-xs font-medium text-gray-600"
                    >
                      {dict.cards.family.maritalStatusLabel}
                    </Label>
                    {isEditing && !viewOnly ? (
                      <Select
                        dir={direction}
                        value={formData.maritalStatus || ''}
                        onValueChange={(value) =>
                          handleChange('maritalStatus', value || undefined)
                        }
                      >
                        <SelectTrigger
                          id="maritalStatus"
                          className="h-9 text-sm focus:ring-cyan-500 text-start"
                        >
                          <SelectValue
                            placeholder={
                              dict.cards.family.maritalStatusPlaceholder
                            }
                          />
                        </SelectTrigger>
                        <SelectContent>
                          {maritalStatusOptions.map((opt) => (
                            <SelectItem key={opt.value} value={opt.value}>
                              {opt.label}
                            </SelectItem>
                          ))}
                        </SelectContent>
                      </Select>
                    ) : (
                      <p className="text-sm text-gray-800 font-medium mt-1">
                        {renderSelectDisplayValue(
                          formData.maritalStatus,
                          maritalStatusOptions
                        )}
                      </p>
                    )}
                  </div>
                  {(formData.maritalStatus === 'divorced' ||
                    formData.maritalStatus === 'widowed' ||
                    formData.maritalStatus === 'annulled') && (
                    <div
                      className={cn(
                        'pt-1 sm:pt-0',
                        isEditing && !viewOnly ? 'sm:pt-5' : 'sm:pt-0'
                      )}
                    >
                      <Label
                        htmlFor="hasChildrenFromPrevious"
                        className="block mb-1.5 text-xs font-medium text-gray-600"
                      >
                        {dict.cards.family.hasChildrenLabel}
                      </Label>
                      {isEditing && !viewOnly ? (
                        <div className="flex items-center space-x-2 rtl:space-x-reverse mt-2">
                          <Checkbox
                            id="hasChildrenFromPrevious"
                            checked={formData.hasChildrenFromPrevious || false}
                            onCheckedChange={(checked) =>
                              handleChange(
                                'hasChildrenFromPrevious',
                                checked as boolean
                              )
                            }
                          />
                          <Label
                            htmlFor="hasChildrenFromPrevious"
                            className="text-sm font-normal text-gray-700"
                          >
                            {dict.cards.family.hasChildrenYes}
                          </Label>
                        </div>
                      ) : (
                        <p className="text-sm text-gray-800 font-medium mt-1">
                          {renderBooleanDisplayValue(
                            formData.hasChildrenFromPrevious
                          )}
                        </p>
                      )}
                    </div>
                  )}
                  <div>
                    <Label
                      htmlFor="parentStatus"
                      className="block mb-1.5 text-xs font-medium text-gray-600"
                    >
                      {dict.cards.family.parentStatusLabel}
                    </Label>
                    {isEditing && !viewOnly ? (
                      <Input
                        id="parentStatus"
                        value={formData.parentStatus || ''}
                        onChange={(e) =>
                          handleChange('parentStatus', e.target.value)
                        }
                        placeholder={dict.cards.family.parentStatusPlaceholder}
                        className="h-9 text-sm focus:ring-cyan-500"
                      />
                    ) : (
                      <p className="text-sm text-gray-800 font-medium mt-1">
                        {renderDisplayValue(formData.parentStatus)}
                      </p>
                    )}
                  </div>

                  <div>
                    <Label
                      htmlFor="fatherOccupation"
                      className="block mb-1.5 text-xs font-medium text-gray-600"
                    >
                      {dict.cards.family.fatherOccupationLabel}
                    </Label>
                    {isEditing && !viewOnly ? (
                      <Input
                        id="fatherOccupation"
                        value={formData.fatherOccupation || ''}
                        onChange={(e) =>
                          handleChange('fatherOccupation', e.target.value)
                        }
                        placeholder={
                          dict.cards.family.fatherOccupationPlaceholder
                        }
                        className="h-9 text-sm focus:ring-cyan-500"
                      />
                    ) : (
                      <p className="text-sm text-gray-800 font-medium mt-1">
                        {renderDisplayValue(formData.fatherOccupation)}
                      </p>
                    )}
                  </div>

                  <div>
                    <Label
                      htmlFor="motherOccupation"
                      className="block mb-1.5 text-xs font-medium text-gray-600"
                    >
                      {dict.cards.family.motherOccupationLabel}
                    </Label>
                    {isEditing && !viewOnly ? (
                      <Input
                        id="motherOccupation"
                        value={formData.motherOccupation || ''}
                        onChange={(e) =>
                          handleChange('motherOccupation', e.target.value)
                        }
                        placeholder={
                          dict.cards.family.motherOccupationPlaceholder
                        }
                        className="h-9 text-sm focus:ring-cyan-500"
                      />
                    ) : (
                      <p className="text-sm text-gray-800 font-medium mt-1">
                        {renderDisplayValue(formData.motherOccupation)}
                      </p>
                    )}
                  </div>

                  <div>
                    <Label
                      htmlFor="siblings"
                      className="block mb-1.5 text-xs font-medium text-gray-600"
                    >
                      {dict.cards.family.siblingsLabel}
                    </Label>
                    {isEditing && !viewOnly ? (
                      <Input
                        id="siblings"
                        type="number"
                        value={formData.siblings ?? ''}
                        onChange={(e) =>
                          handleChange('siblings', e.target.value)
                        }
                        className="h-9 text-sm focus:ring-cyan-500"
                        placeholder={dict.cards.family.siblingsPlaceholder}
                        min="0"
                      />
                    ) : (
                      <p className="text-sm text-gray-800 font-medium mt-1">
                        {renderDisplayValue(formData.siblings)}
                      </p>
                    )}
                  </div>
                  <div>
                    <Label
                      htmlFor="position"
                      className="block mb-1.5 text-xs font-medium text-gray-600"
                    >
                      {dict.cards.family.positionLabel}
                    </Label>
                    {isEditing && !viewOnly ? (
                      <Input
                        id="position"
                        type="number"
                        value={formData.position ?? ''}
                        onChange={(e) =>
                          handleChange('position', e.target.value)
                        }
                        className="h-9 text-sm focus:ring-cyan-500"
                        placeholder={dict.cards.family.positionPlaceholder}
                        min="0"
                      />
                    ) : (
                      <p className="text-sm text-gray-800 font-medium mt-1">
                        {renderDisplayValue(formData.position)}
                      </p>
                    )}
                  </div>
                </div>
              </CardContent>
            </Card>

            <Card className="bg-white/80 backdrop-blur-md rounded-2xl shadow-lg border border-gray-200/40 overflow-hidden">
              <CardHeader className="bg-gradient-to-r from-yellow-50/40 to-amber-50/40 border-b border-gray-200/50 p-4 flex items-center space-x-2 rtl:space-x-reverse">
                <BookOpen className="w-5 h-5 text-amber-700" />
                <CardTitle className="text-base font-semibold text-gray-700">
                  {dict.cards.religion.title}
                </CardTitle>
              </CardHeader>
              <CardContent className="p-4 md:p-6">
                <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-x-6 gap-y-5 items-start">
                  <div>
                    <Label
                      htmlFor="religiousLevel"
                      className="block mb-1.5 text-xs font-medium text-gray-600"
                    >
                      {dict.cards.religion.religiousLevelLabel}
                    </Label>
                    {isEditing && !viewOnly ? (
                      <Select
                        dir={direction}
                        value={formData.religiousLevel || ''}
                        onValueChange={(value) =>
                          handleChange('religiousLevel', value || undefined)
                        }
                      >
                        <SelectTrigger
                          id="religiousLevel"
                          className="h-9 text-sm focus:ring-cyan-500 text-start"
                        >
                          <SelectValue
                            placeholder={
                              dict.cards.religion.religiousLevelPlaceholder
                            }
                          />
                        </SelectTrigger>
                        <SelectContent className="max-h-[250px]">
                          {religiousLevelOptions.map((opt) => (
                            <SelectItem key={opt.value} value={opt.value}>
                              {opt.label}
                            </SelectItem>
                          ))}
                        </SelectContent>
                      </Select>
                    ) : (
                      <p className="text-sm text-gray-800 font-medium mt-1">
                        {renderSelectDisplayValue(
                          formData.religiousLevel,
                          religiousLevelOptions
                        )}
                      </p>
                    )}
                  </div>
                  <div>
                    <Label
                      htmlFor="religiousJourney"
                      className="block mb-1.5 text-xs font-medium text-gray-600"
                    >
                      {dict.cards.religion.religiousJourneyLabel}
                    </Label>
                    {isEditing && !viewOnly ? (
                      <Select
                        dir={direction}
                        value={formData.religiousJourney || ''}
                        onValueChange={(value) =>
                          handleChange(
                            'religiousJourney',
                            (value as ReligiousJourney) || undefined
                          )
                        }
                      >
                        <SelectTrigger
                          id="religiousJourney"
                          className="h-9 text-sm focus:ring-cyan-500 text-start"
                        >
                          <SelectValue
                            placeholder={
                              dict.cards.religion.religiousJourneyPlaceholder
                            }
                          />
                        </SelectTrigger>
                        <SelectContent className="max-h-[250px]">
                          {religiousJourneyOptions.map((opt) => (
                            <SelectItem key={opt.value} value={opt.value}>
                              {opt.label}
                            </SelectItem>
                          ))}
                        </SelectContent>
                      </Select>
                    ) : (
                      <p className="text-sm text-gray-800 font-medium mt-1">
                        {renderSelectDisplayValue(
                          formData.religiousJourney,
                          religiousJourneyOptions
                        )}
                      </p>
                    )}
                  </div>
                  <div
                    className={cn(
                      'pt-1 sm:pt-0',
                      isEditing && !viewOnly ? 'sm:pt-5' : 'sm:pt-0'
                    )}
                  >
                    <Label className="block mb-1.5 text-xs font-medium text-gray-600">
                      {dict.cards.religion.shomerNegiahLabel}
                    </Label>
                    {isEditing && !viewOnly ? (
                      <div className="flex items-center space-x-2 rtl:space-x-reverse mt-2">
                        <Checkbox
                          id="shomerNegiah"
                          checked={formData.shomerNegiah || false}
                          onCheckedChange={(checked) =>
                            handleChange('shomerNegiah', checked as boolean)
                          }
                        />
                        <Label
                          htmlFor="shomerNegiah"
                          className="text-sm font-normal text-gray-700"
                        >
                          {dict.cards.religion.shomerNegiahYes}
                        </Label>
                      </div>
                    ) : (
                      <p className="text-sm text-gray-800 font-medium mt-1">
                        {renderBooleanDisplayValue(
                          formData.shomerNegiah,
                          dict.cards.religion.shomerNegiahYes
                        )}
                      </p>
                    )}
                  </div>
                  {formData.gender === Gender.FEMALE && (
                    <div>
                      <Label
                        htmlFor="headCovering"
                        className="block mb-1.5 text-xs font-medium text-gray-600"
                      >
                        {dict.cards.religion.headCoveringLabel}
                      </Label>
                      {isEditing && !viewOnly ? (
                        <Select
                          dir={direction}
                          value={formData.headCovering || ''}
                          onValueChange={(value) =>
                            handleChange(
                              'headCovering',
                              (value as HeadCoveringType) || undefined
                            )
                          }
                        >
                          <SelectTrigger
                            id="headCovering"
                            className="h-9 text-sm focus:ring-cyan-500 text-start"
                          >
                            <SelectValue
                              placeholder={
                                dict.cards.religion.headCoveringPlaceholder
                              }
                            />
                          </SelectTrigger>
                          <SelectContent>
                            {headCoveringOptions.map((opt) => (
                              <SelectItem key={opt.value} value={opt.value}>
                                {opt.label}
                              </SelectItem>
                            ))}
                          </SelectContent>
                        </Select>
                      ) : (
                        <p className="text-sm text-gray-800 font-medium mt-1">
                          {renderSelectDisplayValue(
                            formData.headCovering,
                            headCoveringOptions,
                            dict.cards.religion.headCoveringDefault
                          )}
                        </p>
                      )}
                    </div>
                  )}
                  {formData.gender === Gender.MALE && (
                    <div>
                      <Label
                        htmlFor="kippahType"
                        className="block mb-1.5 text-xs font-medium text-gray-600"
                      >
                        {dict.cards.religion.kippahTypeLabel}
                      </Label>
                      {isEditing && !viewOnly ? (
                        <Select
                          dir={direction}
                          value={formData.kippahType || ''}
                          onValueChange={(value) =>
                            handleChange(
                              'kippahType',
                              (value as KippahType) || undefined
                            )
                          }
                        >
                          <SelectTrigger
                            id="kippahType"
                            className="h-9 text-sm focus:ring-cyan-500 text-start"
                          >
                            <SelectValue
                              placeholder={
                                dict.cards.religion.kippahTypePlaceholder
                              }
                            />
                          </SelectTrigger>
                          <SelectContent className="max-h-[200px]">
                            {kippahTypeOptions.map((opt) => (
                              <SelectItem key={opt.value} value={opt.value}>
                                {opt.label}
                              </SelectItem>
                            ))}
                          </SelectContent>
                        </Select>
                      ) : (
                        <p className="text-sm text-gray-800 font-medium mt-1">
                          {renderSelectDisplayValue(
                            formData.kippahType,
                            kippahTypeOptions,
                            dict.cards.religion.kippahTypeDefault
                          )}
                        </p>
                      )}
                    </div>
                  )}
                  <div>
                    <Label
                      htmlFor="preferredMatchmakerGender"
                      className="block mb-1.5 text-xs font-medium text-gray-600"
                    >
                      {dict.cards.religion.matchmakerGenderLabel}
                    </Label>
                    {isEditing && !viewOnly ? (
                      <Select
                        dir={direction}
                        value={formData.preferredMatchmakerGender || ''}
                        onValueChange={(value) =>
                          handleChange(
                            'preferredMatchmakerGender',
                            (value as Gender) || undefined
                          )
                        }
                      >
                        <SelectTrigger
                          id="preferredMatchmakerGender"
                          className="h-9 text-sm focus:ring-cyan-500 text-start"
                        >
                          <SelectValue
                            placeholder={
                              dict.cards.religion.matchmakerGenderPlaceholder
                            }
                          />
                        </SelectTrigger>
                        <SelectContent>
                          {preferredMatchmakerGenderOptions.map((opt) => (
                            <SelectItem key={opt.value} value={opt.value}>
                              {opt.label}
                            </SelectItem>
                          ))}
                        </SelectContent>
                      </Select>
                    ) : (
                      <p className="text-sm text-gray-800 font-medium mt-1">
                        {renderSelectDisplayValue(
                          formData.preferredMatchmakerGender,
                          preferredMatchmakerGenderOptions,
                          dict.cards.religion.matchmakerGenderDefault
                        )}
                      </p>
                    )}
                  </div>
                </div>

                <div className="mt-6 pt-6 border-t border-gray-200/70">
                  <div className="flex items-center gap-1.5 mb-2">
                    <Label
                      htmlFor="influentialRabbi"
                      className="text-sm font-medium text-gray-700"
                    >
                      {dict.cards.religion.influentialRabbiLabel}
                    </Label>
                    <TooltipProvider>
                      <Tooltip>
                        <TooltipTrigger asChild>
                          <button
                            type="button"
                            aria-describedby="rabbi-tooltip"
                          >
                            <Info className="w-4 h-4 text-gray-400" />
                          </button>
                        </TooltipTrigger>
                        <TooltipContent
                          id="rabbi-tooltip"
                          side="top"
                          className="max-w-xs text-center"
                        >
                          <p>{dict.tooltips.influentialRabbi}</p>
                        </TooltipContent>
                      </Tooltip>
                    </TooltipProvider>
                  </div>
                  {isEditing && !viewOnly ? (
                    <Textarea
                      id="influentialRabbi"
                      value={formData.influentialRabbi || ''}
                      onChange={(e) =>
                        handleChange('influentialRabbi', e.target.value)
                      }
                      className="text-sm focus:ring-cyan-500 min-h-[90px] rounded-lg"
                      placeholder={
                        dict.cards.religion.influentialRabbiPlaceholder
                      }
                      rows={3}
                    />
                  ) : (
                    <p className="mt-1 text-sm text-gray-700 whitespace-pre-wrap min-h-[50px] bg-slate-50/70 p-3 rounded-lg border border-slate-200/50">
                      {renderDisplayValue(
                        formData.influentialRabbi,
                        dict.cards.religion.influentialRabbiEmpty
                      )}
                    </p>
                  )}
                </div>
              </CardContent>
            </Card>
          </div>

          <div className="space-y-6">
            <Card className="bg-white/80 backdrop-blur-md rounded-2xl shadow-lg border border-gray-200/40 overflow-hidden">
              <CardHeader className="bg-gradient-to-r from-slate-50/40 to-gray-100/40 border-b border-gray-200/50 p-4 flex items-center space-x-2 rtl:space-x-reverse">
                <Info className="w-5 h-5 text-slate-600" />
                <CardTitle className="text-base font-semibold text-gray-700">
                  {dict.cards.about.title}
                </CardTitle>
              </CardHeader>
              <CardContent className="p-4 md:p-6">
                <div className="space-y-6">
                  <div>
                    <div className="flex items-center gap-1.5 mb-2">
                      <Label
                        htmlFor="profileHeadline"
                        className="text-sm font-medium text-gray-700"
                      >
                        {dict.cards.about.headlineLabel}
                      </Label>
                      <TooltipProvider>
                        <Tooltip>
                          <TooltipTrigger asChild>
                            <button
                              type="button"
                              aria-describedby="headline-tooltip"
                            >
                              <Info className="w-4 h-4 text-gray-400" />
                            </button>
                          </TooltipTrigger>
                          <TooltipContent
                            id="headline-tooltip"
                            side="top"
                            className="max-w-xs text-center"
                          >
                            <p>{dict.tooltips.headline}</p>
                          </TooltipContent>
                        </Tooltip>
                      </TooltipProvider>
                    </div>
                    {isEditing && !viewOnly ? (
                      <Input
                        id="profileHeadline"
                        value={formData.profileHeadline || ''}
                        onChange={(e) =>
                          handleChange('profileHeadline', e.target.value)
                        }
                        className="text-sm focus:ring-cyan-500 rounded-lg"
                        placeholder={dict.cards.about.headlinePlaceholder}
                        maxLength={80}
                      />
                    ) : (
                      <div className="mt-1">
                        {formData.profileHeadline &&
                        typeof formData.profileHeadline === 'string' &&
                        formData.profileHeadline.trim() ? (
                          <p className="text-lg font-semibold text-cyan-700 italic">
                            {`"${formData.profileHeadline}"`}
                          </p>
                        ) : (
                          <div className="rounded-lg bg-slate-50 p-3 text-base italic border border-slate-200/80">
                            <p className="font-medium not-italic text-slate-600">
                              {dict.cards.about.headlineEmpty.title}
                            </p>
                            <p className="mt-1.5 text-slate-500">
                              {dict.cards.about.headlineEmpty.subtitle}
                              <span className="block mt-1 font-semibold text-slate-700">
                                {dict.cards.about.headlineEmpty.example}
                              </span>
                            </p>
                          </div>
                        )}
                      </div>
                    )}
                  </div>

                  <div>
                    <div className="flex items-center gap-1.5 mb-2">
                      <Label
                        htmlFor="about"
                        className="text-sm font-medium text-gray-700"
                      >
                        {dict.cards.about.aboutLabel}
                      </Label>
                      <TooltipProvider delayDuration={100}>
                        <Tooltip>
                          <TooltipTrigger asChild>
                            <button
                              type="button"
                              aria-describedby="about-tooltip"
                              className="text-gray-400 hover:text-gray-600"
                            >
                              <Info className="w-4 h-4" />
                            </button>
                          </TooltipTrigger>
                          <TooltipContent
                            id="about-tooltip"
                            side="top"
                            className="max-w-xs text-center"
                          >
                            <p>
                              {dict.tooltips.about.replace('{{count}}', '100')}
                            </p>
                          </TooltipContent>
                        </Tooltip>
                      </TooltipProvider>
                    </div>
                    {isEditing && !viewOnly ? (
                      <div>
                        <Textarea
                          id="about"
                          value={formData.about || ''}
                          onChange={(e) =>
                            handleChange('about', e.target.value)
                          }
                          className={cn(
                            'text-sm focus:ring-cyan-500 min-h-[120px] rounded-lg',
                            formData.about && formData.about.trim().length < 100
                              ? 'border-red-400 focus:ring-red-300'
                              : ''
                          )}
                          placeholder={dict.cards.about.aboutPlaceholder}
                          rows={5}
                          aria-describedby="about-char-count"
                        />
                        {formData.about && (
                          <div
                            id="about-char-count"
                            className={cn(
                              'text-xs mt-1 text-end',
                              formData.about.trim().length < 100
                                ? 'text-red-600'
                                : 'text-gray-500'
                            )}
                          >
                            {formData.about.trim().length}
                            {dict.charCount.replace('{{count}}', '100')}
                          </div>
                        )}
                      </div>
                    ) : (
                      <p className="mt-1 text-sm text-gray-700 whitespace-pre-wrap min-h-[60px] bg-slate-50/70 p-3 rounded-lg border border-slate-200/50">
                        {formData.about || (
                          <span className="text-gray-500 italic">
                            {dict.cards.about.aboutEmpty}
                          </span>
                        )}
                      </p>
                    )}
                  </div>

                  <div>
                    <div className="flex items-center gap-1.5 mb-2">
                      <Label
                        htmlFor="inspiringCoupleStory"
                        className="text-sm font-medium text-gray-700"
                      >
                        {dict.cards.about.inspiringCoupleLabel}
                      </Label>
                      <TooltipProvider>
                        <Tooltip>
                          <TooltipTrigger asChild>
                            <button
                              type="button"
                              aria-describedby="couple-tooltip"
                            >
                              <Info className="w-4 h-4 text-gray-400" />
                            </button>
                          </TooltipTrigger>
                          <TooltipContent
                            id="couple-tooltip"
                            side="top"
                            className="max-w-xs text-center"
                          >
                            <p>{dict.tooltips.inspiringCouple}</p>
                          </TooltipContent>
                        </Tooltip>
                      </TooltipProvider>
                    </div>
                    {isEditing && !viewOnly ? (
                      <Textarea
                        id="inspiringCoupleStory"
                        value={formData.inspiringCoupleStory || ''}
                        onChange={(e) =>
                          handleChange('inspiringCoupleStory', e.target.value)
                        }
                        className="text-sm focus:ring-cyan-500 min-h-[90px] rounded-lg"
                        placeholder={
                          dict.cards.about.inspiringCouplePlaceholder
                        }
                        rows={3}
                      />
                    ) : (
                      <p className="mt-1 text-sm text-gray-700 whitespace-pre-wrap min-h-[50px] bg-slate-50/70 p-3 rounded-lg border border-slate-200/50">
                        {renderDisplayValue(
                          formData.inspiringCoupleStory,
                          dict.cards.about.inspiringCoupleEmpty
                        )}
                      </p>
                    )}
                  </div>

                  <div>
                    <div className="flex items-center gap-1.5 mb-2">
                      <Label
                        htmlFor="matchingNotes-private"
                        className="text-sm font-medium text-gray-700"
                      >
                        {dict.cards.about.privateNotesLabel}
                      </Label>
                      <TooltipProvider delayDuration={100}>
                        <Tooltip>
                          <TooltipTrigger asChild>
                            <button
                              type="button"
                              aria-describedby="private-notes-tooltip"
                              className="text-gray-400 hover:text-gray-600"
                            >
                              <Info className="w-4 h-4" />
                            </button>
                          </TooltipTrigger>
                          <TooltipContent
                            id="private-notes-tooltip"
                            side="top"
                            className="max-w-xs text-center"
                          >
                            <p>{dict.tooltips.privateNotes}</p>
                          </TooltipContent>
                        </Tooltip>
                      </TooltipProvider>
                    </div>
                    {isEditing && !viewOnly ? (
                      <Textarea
                        id="matchingNotes-private"
                        value={formData.matchingNotes || ''}
                        onChange={(e) =>
                          handleChange('matchingNotes', e.target.value)
                        }
                        className="text-sm focus:ring-cyan-500 min-h-[90px] rounded-lg"
                        placeholder={dict.cards.about.privateNotesPlaceholder}
                        rows={3}
                      />
                    ) : (
                      <p className="mt-1 text-sm text-gray-700 whitespace-pre-wrap min-h-[50px] bg-slate-50/70 p-3 rounded-lg border border-slate-200/50">
                        {formData.matchingNotes || (
                          <span className="text-gray-500 italic">
                            {dict.cards.about.privateNotesEmpty}
                          </span>
                        )}
                      </p>
                    )}
                  </div>
                </div>
              </CardContent>
            </Card>

            <Card className="bg-white/80 backdrop-blur-md rounded-2xl shadow-lg border border-gray-200/40 overflow-hidden">
              <CardHeader className="bg-gradient-to-r from-red-50/40 to-pink-50/40 border-b border-gray-200/50 p-4">
                <div className="flex items-center space-x-2 rtl:space-x-reverse">
                  <HeartPulse className="w-5 h-5 text-red-700" />
                  <CardTitle className="text-base font-semibold text-gray-700">
                    {dict.cards.medical.title}
                  </CardTitle>
                  <TooltipProvider delayDuration={100}>
                    <Tooltip>
                      <TooltipTrigger asChild>
                        <button
                          type="button"
                          aria-describedby="medical-tooltip"
                        >
                          <Lock className="w-4 h-4 text-gray-400" />
                        </button>
                      </TooltipTrigger>
                      <TooltipContent id="medical-tooltip">
                        <p>{dict.cards.medical.tooltip}</p>
                      </TooltipContent>
                    </Tooltip>
                  </TooltipProvider>
                </div>
              </CardHeader>
              <CardContent className="p-4 md:p-6 space-y-4">
                <div className="text-sm text-gray-600 bg-gray-50 p-3 rounded-lg border border-gray-200/80">
                  {dict.cards.medical.description}
                </div>

                {isEditing && !viewOnly ? (
                  <div className="space-y-4">
                    <div className="flex items-center space-x-2 rtl:space-x-reverse">
                      <Checkbox
                        id="hasMedicalInfo"
                        checked={formData.hasMedicalInfo || false}
                        onCheckedChange={(checked) =>
                          handleChange('hasMedicalInfo', checked as boolean)
                        }
                      />
                      <Label
                        htmlFor="hasMedicalInfo"
                        className="text-sm font-medium text-gray-700 cursor-pointer"
                      >
                        {dict.cards.medical.hasInfoLabel}
                      </Label>
                    </div>

                    {formData.hasMedicalInfo && (
                      <div className="space-y-4 border-t pt-4 animate-in fade-in-50">
                        <div>
                          <Label
                            htmlFor="medicalInfoDetails"
                            className="block mb-1.5 text-xs font-medium text-gray-600"
                          >
                            {dict.cards.medical.detailsLabel}
                          </Label>
                          <Textarea
                            id="medicalInfoDetails"
                            value={formData.medicalInfoDetails || ''}
                            onChange={(e) =>
                              handleChange('medicalInfoDetails', e.target.value)
                            }
                            className="text-sm focus:ring-cyan-500 min-h-[100px] rounded-lg"
                            placeholder={dict.cards.medical.detailsPlaceholder}
                          />
                        </div>
                        <div>
                          <Label
                            htmlFor="medicalInfoDisclosureTiming"
                            className="block mb-1.5 text-xs font-medium text-gray-600"
                          >
                            {dict.cards.medical.timingLabel}
                          </Label>
                          <Select
                            dir={direction}
                            value={formData.medicalInfoDisclosureTiming || ''}
                            onValueChange={(value) =>
                              handleChange(
                                'medicalInfoDisclosureTiming',
                                value || undefined
                              )
                            }
                          >
                            <SelectTrigger
                              id="medicalInfoDisclosureTiming"
                              className="h-9 text-sm focus:ring-cyan-500 text-start"
                            >
                              <SelectValue
                                placeholder={
                                  dict.cards.medical.timingPlaceholder
                                }
                              />
                            </SelectTrigger>
                            <SelectContent>
                              {Object.entries(dict.options.medicalTiming).map(
                                ([value, label]) => (
                                  <SelectItem key={value} value={value}>
                                    {label}
                                  </SelectItem>
                                )
                              )}
                            </SelectContent>
                          </Select>
                        </div>

                        <div className="border-t pt-4">
                          <Label className="block mb-2 text-xs font-medium text-gray-600">
                            {dict.cards.medical.visibilityLabel}
                          </Label>
                          <div className="flex items-center gap-3 bg-gray-50 p-3 rounded-lg">
                            <Switch
                              id="isMedicalInfoVisible"
                              checked={!!formData.isMedicalInfoVisible}
                              onCheckedChange={(checked) =>
                                handleChange('isMedicalInfoVisible', checked)
                              }
                              className="data-[state=checked]:bg-green-500"
                            />
                            <div className="flex flex-col">
                              <Label
                                htmlFor="isMedicalInfoVisible"
                                className="text-sm font-medium text-gray-800 cursor-pointer"
                              >
                                {formData.isMedicalInfoVisible
                                  ? dict.cards.medical.visibilityToggle.visible
                                  : dict.cards.medical.visibilityToggle.hidden}
                              </Label>
                              <p className="text-xs text-gray-500">
                                {formData.isMedicalInfoVisible
                                  ? dict.cards.medical.visibilityDescription
                                      .visible
                                  : dict.cards.medical.visibilityDescription
                                      .hidden}
                              </p>
                            </div>
                          </div>
                        </div>
                      </div>
                    )}
                  </div>
                ) : (
                  <div className="space-y-4">
                    <div>
                      <p className="block text-xs font-medium text-gray-500">
                        {dict.cards.medical.display.sharedInfo}
                      </p>
                      <p className="text-sm text-gray-800 font-medium mt-1">
                        {renderBooleanDisplayValue(
                          formData.hasMedicalInfo,
                          dict.cards.medical.display.yes,
                          dict.cards.medical.display.no
                        )}
                      </p>
                    </div>
                    {formData.hasMedicalInfo && (
                      <>
                        <div>
                          <p className="block text-xs font-medium text-gray-500">
                            {dict.cards.medical.display.details}
                          </p>
                          <p className="mt-1 text-sm text-gray-700 whitespace-pre-wrap min-h-[40px] bg-slate-50/70 p-3 rounded-lg border border-slate-200/50">
                            {formData.medicalInfoDetails || (
                              <span className="text-gray-500 italic">
                                {dict.cards.medical.display.noDetails}
                              </span>
                            )}
                          </p>
                        </div>
                        <div>
                          <p className="block text-xs font-medium text-gray-500">
                            {dict.cards.medical.display.timing}
                          </p>
                          <p className="text-sm text-gray-800 font-medium mt-1">
                            {renderSelectDisplayValue(
                              formData.medicalInfoDisclosureTiming,
                              Object.entries(dict.options.medicalTiming).map(
                                ([value, label]) => ({ value, label })
                              )
                            )}
                          </p>
                        </div>
                        <div>
                          <p className="block text-xs font-medium text-gray-500">
                            {dict.cards.medical.display.visibility}
                          </p>
                          <div className="flex items-center gap-2 mt-1">
                            {formData.isMedicalInfoVisible ? (
                              <Badge
                                variant="secondary"
                                className="bg-green-100 text-green-800"
                              >
                                <Eye className="w-3.5 h-3.5 ms-1.5" />
                                {dict.cards.medical.display.visibleBadge}
                              </Badge>
                            ) : (
                              <Badge
                                variant="secondary"
                                className="bg-gray-100 text-gray-700"
                              >
                                <Lock className="w-3.5 h-3.5 ms-1.5" />
                                {dict.cards.medical.display.hiddenBadge}
                              </Badge>
                            )}
                          </div>
                        </div>
                      </>
                    )}
                  </div>
                )}
              </CardContent>
            </Card>

            <Card className="bg-white/80 backdrop-blur-md rounded-2xl shadow-lg border border-gray-200/40 overflow-hidden">
              <CardHeader className="bg-gradient-to-r from-teal-50/40 to-green-50/40 border-b border-gray-200/50 p-4 flex items-center space-x-2 rtl:space-x-reverse">
                <Briefcase className="w-5 h-5 text-teal-700" />
                <CardTitle className="text-base font-semibold text-gray-700">
                  {dict.cards.education.title}
                </CardTitle>
              </CardHeader>
              <CardContent className="p-4 md:p-6">
                <div className="grid grid-cols-1 sm:grid-cols-2 gap-x-6 gap-y-5">
                  <div>
                    <Label
                      htmlFor="educationLevel"
                      className="block mb-1.5 text-xs font-medium text-gray-600"
                    >
                      {dict.cards.education.levelLabel}
                    </Label>
                    {isEditing && !viewOnly ? (
                      <Select
                        dir={direction}
                        value={formData.educationLevel || ''}
                        onValueChange={(value) =>
                          handleChange('educationLevel', value || undefined)
                        }
                      >
                        <SelectTrigger
                          id="educationLevel"
                          className="h-9 text-sm focus:ring-cyan-500 text-start"
                        >
                          <SelectValue
                            placeholder={dict.cards.education.levelPlaceholder}
                          />
                        </SelectTrigger>
                        <SelectContent>
                          {educationLevelOptions.map((opt) => (
                            <SelectItem key={opt.value} value={opt.value}>
                              {opt.label}
                            </SelectItem>
                          ))}
                        </SelectContent>
                      </Select>
                    ) : (
                      <p className="text-sm text-gray-800 font-medium mt-1">
                        {renderSelectDisplayValue(
                          formData.educationLevel,
                          educationLevelOptions
                        )}
                      </p>
                    )}
                  </div>
                  <div className="sm:col-span-2">
                    <Label
                      htmlFor="education"
                      className="block mb-1.5 text-xs font-medium text-gray-600"
                    >
                      {dict.cards.education.detailsLabel}
                    </Label>
                    {isEditing && !viewOnly ? (
                      <Input
                        id="education"
                        value={formData.education || ''}
                        onChange={(e) =>
                          handleChange('education', e.target.value)
                        }
                        placeholder={dict.cards.education.detailsPlaceholder}
                        className="h-9 text-sm focus:ring-cyan-500"
                      />
                    ) : (
                      <p className="text-sm text-gray-800 font-medium mt-1">
                        {renderDisplayValue(formData.education)}
                      </p>
                    )}
                  </div>
                  <div className="sm:col-span-2">
                    <Label
                      htmlFor="occupation"
                      className="block mb-1.5 text-xs font-medium text-gray-600"
                    >
                      {dict.cards.education.occupationLabel}
                    </Label>
                    {isEditing && !viewOnly ? (
                      <Input
                        id="occupation"
                        value={formData.occupation || ''}
                        onChange={(e) =>
                          handleChange('occupation', e.target.value)
                        }
                        placeholder={dict.cards.education.occupationPlaceholder}
                        className="h-9 text-sm focus:ring-cyan-500"
                        maxLength={20}
                      />
                    ) : (
                      <p className="text-sm text-gray-800 font-medium mt-1">
                        {renderDisplayValue(formData.occupation)}
                      </p>
                    )}
                  </div>
                  <div>
                    <Label
                      htmlFor="serviceType"
                      className="block mb-1.5 text-xs font-medium text-gray-600"
                    >
                      {dict.cards.education.serviceTypeLabel}
                    </Label>
                    {isEditing && !viewOnly ? (
                      <Select
                        dir={direction}
                        value={formData.serviceType || ''}
                        onValueChange={(value) =>
                          handleChange(
                            'serviceType',
                            (value as ServiceType) || undefined
                          )
                        }
                      >
                        <SelectTrigger
                          id="serviceType"
                          className="h-9 text-sm focus:ring-cyan-500 text-start"
                        >
                          <SelectValue
                            placeholder={
                              dict.cards.education.serviceTypePlaceholder
                            }
                          />
                        </SelectTrigger>
                        <SelectContent className="max-h-[250px]">
                          {serviceTypeOptions.map((opt) => (
                            <SelectItem key={opt.value} value={opt.value}>
                              {opt.label}
                            </SelectItem>
                          ))}
                        </SelectContent>
                      </Select>
                    ) : (
                      <p className="text-sm text-gray-800 font-medium mt-1">
                        {renderSelectDisplayValue(
                          formData.serviceType,
                          serviceTypeOptions
                        )}
                      </p>
                    )}
                  </div>
                  <div className="sm:col-span-2">
                    <Label
                      htmlFor="serviceDetails"
                      className="block mb-1.5 text-xs font-medium text-gray-600"
                    >
                      {dict.cards.education.serviceDetailsLabel}
                    </Label>
                    {isEditing && !viewOnly ? (
                      <Input
                        id="serviceDetails"
                        value={formData.serviceDetails || ''}
                        onChange={(e) =>
                          handleChange('serviceDetails', e.target.value)
                        }
                        placeholder={
                          dict.cards.education.serviceDetailsPlaceholder
                        }
                        className="h-9 text-sm focus:ring-cyan-500"
                      />
                    ) : (
                      <p className="text-sm text-gray-800 font-medium mt-1">
                        {renderDisplayValue(formData.serviceDetails)}
                      </p>
                    )}
                  </div>
                </div>
              </CardContent>
            </Card>

            <Card className="bg-white/80 backdrop-blur-md rounded-2xl shadow-lg border border-gray-200/40 overflow-hidden">
              <CardHeader className="bg-gradient-to-r from-amber-50/40 to-yellow-50/40 border-b border-gray-200/50 p-4 flex items-center space-x-2 rtl:space-x-reverse">
                <Smile className="w-5 h-5 text-amber-600" />
                <CardTitle className="text-base font-semibold text-gray-700">
                  {dict.cards.character.title}
                </CardTitle>
              </CardHeader>
              <CardContent className="p-4 md:p-6 space-y-6">
                <fieldset>
                  <legend className="block mb-2 text-sm font-medium text-gray-700">
                    {dict.cards.character.traitsLabel}
                  </legend>
                  {isEditing && !viewOnly ? (
                    <div className="flex flex-wrap gap-2">
                      {characterTraitsOptions.map((trait) => (
                        <Button
                          key={trait.value}
                          type="button"
                          variant={
                            (formData.profileCharacterTraits || []).includes(
                              trait.value
                            )
                              ? 'default'
                              : 'outline'
                          }
                          size="sm"
                          onClick={() =>
                            handleMultiSelectToggle(
                              'profileCharacterTraits',
                              trait.value
                            )
                          }
                          disabled={
                            !viewOnly &&
                            (formData.profileCharacterTraits || []).length >=
                              3 &&
                            !(formData.profileCharacterTraits || []).includes(
                              trait.value
                            )
                          }
                          className={cn(
                            'rounded-full text-xs px-3 py-1.5 transition-all',
                            (formData.profileCharacterTraits || []).includes(
                              trait.value
                            )
                              ? 'bg-amber-500 hover:bg-amber-600 text-white border-amber-500'
                              : 'border-gray-300 text-gray-600 hover:bg-gray-50 hover:border-gray-400'
                          )}
                        >
                          {trait.icon && (
                            <trait.icon className="w-3.5 h-3.5 ms-1.5" />
                          )}
                          {trait.label}
                        </Button>
                      ))}
                    </div>
                  ) : (
                    <div className="mt-1 flex flex-wrap gap-1.5">
                      {renderMultiSelectBadges(
                        formData.profileCharacterTraits,
                        characterTraitsOptions,
                        dict.cards.character.traitsEmpty
                      )}
                    </div>
                  )}
                </fieldset>
                <fieldset>
                  <legend className="block mb-2 text-sm font-medium text-gray-700">
                    {dict.cards.character.hobbiesLabel}
                  </legend>
                  {isEditing && !viewOnly ? (
                    <div className="flex flex-wrap gap-2">
                      {hobbiesOptions.map((hobby) => (
                        <Button
                          key={hobby.value}
                          type="button"
                          variant={
                            (formData.profileHobbies || []).includes(
                              hobby.value
                            )
                              ? 'default'
                              : 'outline'
                          }
                          size="sm"
                          onClick={() =>
                            handleMultiSelectToggle(
                              'profileHobbies',
                              hobby.value
                            )
                          }
                          disabled={
                            !viewOnly &&
                            (formData.profileHobbies || []).length >= 3 &&
                            !(formData.profileHobbies || []).includes(
                              hobby.value
                            )
                          }
                          className={cn(
                            'rounded-full text-xs px-3 py-1.5 transition-all',
                            (formData.profileHobbies || []).includes(
                              hobby.value
                            )
                              ? 'bg-sky-500 hover:bg-sky-600 text-white border-sky-500'
                              : 'border-gray-300 text-gray-600 hover:bg-gray-50 hover:border-gray-400'
                          )}
                        >
                          {hobby.icon && (
                            <hobby.icon className="w-3.5 h-3.5 ms-1.5" />
                          )}
                          {hobby.label}
                        </Button>
                      ))}
                    </div>
                  ) : (
                    <div className="mt-1 flex flex-wrap gap-1.5">
                      {renderMultiSelectBadges(
                        formData.profileHobbies,
                        hobbiesOptions,
                        dict.cards.character.hobbiesEmpty
                      )}
                    </div>
                  )}
                </fieldset>
              </CardContent>
            </Card>
          </div>
        </div>
      </div>

      {isEditing && !viewOnly && (
        <div className="sticky bottom-0 z-20 mt-4 border-t border-gray-200 bg-white/90 p-4 backdrop-blur-md shadow-[0_-4px_15px_-5px_rgba(0,0,0,0.15)] sm:hidden">
          <div className="flex items-center justify-center gap-3">
            <Button
              variant="outline"
              size="sm"
              onClick={handleCancel}
              className="rounded-full shadow-sm hover:shadow-md transition-all duration-300 border-gray-300 text-gray-700 hover:bg-gray-50 px-6 py-2"
            >
              <X className="w-4 h-4 ms-1.5" />
              {dict.buttons.cancel}
            </Button>
            <Button
              variant="default"
              size="sm"
              onClick={handleSave}
              className="rounded-full shadow-sm hover:shadow-md transition-all duration-300 bg-cyan-600 hover:bg-cyan-700 text-white px-6 py-2"
            >
              <Save className="w-4 h-4 ms-1.5" />
              {dict.buttons.saveChanges}
            </Button>
          </div>
        </div>
      )}
    </div>
  );
};

export default ProfileSection;
--- End of Content for ProfileSection.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\profile\sections\QuestionnaireResponsesSection.tsx
--------------------------------------------------------------------------------
Content:
// src/app/components/profile/sections/QuestionnaireResponsesSection.tsx

import React, { useState, useMemo, useEffect } from 'react';
import Link from 'next/link';
import {
  Card,
  CardHeader,
  CardTitle,
  CardContent,
  CardDescription,
} from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { Textarea } from '@/components/ui/textarea';
import {
  Book,
  CheckCircle,
  Clock,
  Pencil,
  X,
  Save,
  Eye,
  EyeOff,
  Loader2,
  ArrowRight,
  ArrowLeft, // ייבוא אייקון חץ שמאלה
} from 'lucide-react';
import { cn } from '@/lib/utils';
import { toast } from 'sonner';
import {
  Tooltip,
  TooltipProvider,
  TooltipContent,
  TooltipTrigger,
} from '@/components/ui/tooltip';
import BudgetDisplay from './BudgetDisplay';

import type {
  QuestionnaireResponse,
  FormattedAnswer,
  UpdateValue,
} from '@/types/next-auth';
import type { ProfilePageDictionary } from '@/types/dictionary';
import { WORLDS_CONFIG } from '../constants';

const QUESTIONNAIRE_URL = '/questionnaire';

// --- ממשקים מעודכנים ---
interface QuestionnaireResponsesSectionProps {
  questionnaire: QuestionnaireResponse | null;
  onUpdate?: (
    world: string,
    questionId: string,
    value: UpdateValue
  ) => Promise<void>;
  isEditable?: boolean;
  dict: ProfilePageDictionary;
  locale: string; // הוספת Prop לשפה
}

interface QuestionCardProps {
  question: string;
  answer: FormattedAnswer;
  isEditingGlobally: boolean;
  worldKey: string;
  onUpdate: (
    world: string,
    questionId: string,
    value: UpdateValue
  ) => Promise<void>;
  isFirstInList?: boolean;
  dict: ProfilePageDictionary;
  locale: string; // הוספת Prop לשפה
}

interface WorldSectionProps {
  worldKey: keyof typeof WORLDS_CONFIG;
  worldConfig: (typeof WORLDS_CONFIG)[keyof typeof WORLDS_CONFIG];
  answers: FormattedAnswer[];
  isEditingGlobally: boolean;
  onUpdate: (
    world: string,
    questionId: string,
    value: UpdateValue
  ) => Promise<void>;
  isCompleted: boolean;
  className?: string;
  dict: ProfilePageDictionary;
  locale: string; // הוספת Prop לשפה
}

// --- רכיב QuestionCard ---
const QuestionCard: React.FC<QuestionCardProps> = ({
  question,
  answer,
  isEditingGlobally,
  worldKey,
  onUpdate,
  dict,
  locale,
}) => {
  const [isEditingText, setIsEditingText] = useState(false);
  const [editValue, setEditValue] = useState(answer.displayText);
  const [isSavingText, setIsSavingText] = useState(false);
  const [isSavingVisibility, setIsSavingVisibility] = useState(false);
  const [currentIsVisible, setCurrentIsVisible] = useState(
    answer.isVisible ?? true
  );

  const direction = locale === 'he' ? 'rtl' : 'ltr';
  const t = dict.questionnaireSection.questionCard;

  useEffect(() => {
    setCurrentIsVisible(answer.isVisible ?? true);
  }, [answer.isVisible]);

  const isSaving = isSavingText || isSavingVisibility;

  const handleStartEdit = () => {
    if (isSaving) return;
    setIsEditingText(true);
    setEditValue(answer.displayText);
  };

  const handleSaveText = async () => {
    if (!editValue?.trim()) {
      toast.error(t.toasts.emptyAnswer);
      return;
    }
    if (editValue.trim() === answer.displayText) {
      setIsEditingText(false);
      return;
    }

    setIsSavingText(true);
    try {
      await onUpdate(worldKey, answer.questionId, {
        type: 'answer',
        value: editValue.trim(),
      });
      toast.success(t.toasts.updateSuccess);
      setIsEditingText(false);
    } catch (error) {
      console.error('Error updating answer:', error);
      toast.error(t.toasts.updateError);
    } finally {
      setIsSavingText(false);
    }
  };

  const handleCancelEdit = () => {
    setIsEditingText(false);
    setEditValue(answer.displayText);
  };

  const handleVisibilityChange = async (newIsVisibleState: boolean) => {
    setCurrentIsVisible(newIsVisibleState);
    setIsSavingVisibility(true);
    try {
      await onUpdate(worldKey, answer.questionId, {
        type: 'visibility',
        isVisible: newIsVisibleState,
      });
      toast.success(t.toasts.visibilitySuccess);
    } catch (error) {
      console.error('Error updating visibility:', error);
      toast.error(t.toasts.visibilityError);
      setCurrentIsVisible(answer.isVisible ?? true);
    } finally {
      setIsSavingVisibility(false);
    }
  };

  const renderAnswerContent = () => {
    if (
      answer.questionType === 'budgetAllocation' &&
      typeof answer.rawValue === 'object' &&
      answer.rawValue !== null &&
      !Array.isArray(answer.rawValue)
    ) {
      const budgetData = answer.rawValue as Record<string, number>;
      return (
        <BudgetDisplay
          data={budgetData}
          dict={dict.budgetDisplay}
          locale={locale}
        />
      );
    }
    return (
      <p className="text-sm text-gray-800 break-words overflow-wrap-anywhere whitespace-pre-wrap">
        {answer.displayText}
      </p>
    );
  };

  const getVisibilityTooltip = () => {
    if (isEditingGlobally) {
      return currentIsVisible
        ? t.visibilityTooltip.editing.visible
        : t.visibilityTooltip.editing.hidden;
    }
    return currentIsVisible
      ? t.visibilityTooltip.viewing.visible
      : t.visibilityTooltip.viewing.hidden;
  };

  return (
    <div
      className="rounded-lg border bg-card p-4 shadow-sm transition-shadow duration-300 hover:shadow-md"
      dir={direction}
    >
      <div className="flex items-start justify-between gap-4">
        <div className="flex-1 min-w-0">
          <div className="flex flex-col sm:flex-row items-start sm:items-center justify-between mb-3 gap-2">
            <h4 className="font-medium text-sm sm:text-base flex-1 text-start">
              {question}
            </h4>
            <div className="flex items-center gap-2 self-end sm:self-center">
              {isSavingVisibility && (
                <Loader2 className="h-4 w-4 animate-spin text-muted-foreground" />
              )}
              <TooltipProvider delayDuration={200}>
                <Tooltip>
                  <TooltipTrigger asChild>
                    <button
                      type="button"
                      role="switch"
                      aria-checked={currentIsVisible}
                      disabled={!isEditingGlobally || isSaving}
                      onClick={() => handleVisibilityChange(!currentIsVisible)}
                      className={cn(
                        'inline-flex items-center justify-center h-8 px-3 rounded-full gap-2 transition-all duration-200 ease-in-out',
                        'disabled:opacity-100 disabled:cursor-default',
                        currentIsVisible
                          ? 'bg-emerald-100 text-emerald-800'
                          : 'bg-gray-200 text-gray-600',
                        isEditingGlobally &&
                          !isSaving &&
                          'hover:shadow-md active:scale-95',
                        isEditingGlobally &&
                          !isSaving &&
                          currentIsVisible &&
                          'hover:bg-emerald-200',
                        isEditingGlobally &&
                          !isSaving &&
                          !currentIsVisible &&
                          'hover:bg-gray-300'
                      )}
                    >
                      {currentIsVisible ? (
                        <Eye className="h-3.5 w-3.5" />
                      ) : (
                        <EyeOff className="h-3.5 w-3.5" />
                      )}
                      <span className="text-xs font-medium whitespace-nowrap">
                        {currentIsVisible
                          ? t.visibilityButton.visible
                          : t.visibilityButton.hidden}
                      </span>
                    </button>
                  </TooltipTrigger>
                  <TooltipContent side="top" dir={direction}>
                    <p>{getVisibilityTooltip()}</p>
                  </TooltipContent>
                </Tooltip>
              </TooltipProvider>
            </div>
          </div>

          {isEditingText ? (
            <div className="space-y-2 mt-1">
              <Textarea
                value={editValue}
                onChange={(e) => setEditValue(e.target.value)}
                className="min-h-[80px] text-sm focus:ring-cyan-500 focus:border-cyan-500"
                placeholder={t.editTextareaPlaceholder}
                disabled={isSavingText}
                dir={direction}
              />
              <div className="flex justify-end gap-2">
                <Button
                  size="sm"
                  variant="ghost"
                  onClick={handleCancelEdit}
                  disabled={isSavingText}
                  className="text-gray-600 hover:bg-gray-100"
                >
                  <X className="h-4 w-4 ms-1" />
                  {t.editButtons.cancel}
                </Button>
                <Button
                  size="sm"
                  onClick={handleSaveText}
                  disabled={isSavingText || !editValue?.trim()}
                  className="bg-cyan-600 hover:bg-cyan-700 text-white"
                >
                  {isSavingText ? (
                    <Loader2 className="h-4 w-4 animate-spin" />
                  ) : (
                    <CheckCircle className="h-4 w-4 ms-1" />
                  )}
                  {t.editButtons.save}
                </Button>
              </div>
            </div>
          ) : (
            <div className="relative group overflow-hidden mt-1">
              <div className="p-3 bg-gray-50/50 rounded-md border border-gray-200/60 min-h-[40px]">
                {renderAnswerContent()}
                <TooltipProvider delayDuration={200}>
                  <Tooltip>
                    <TooltipTrigger asChild>
                      <span className="text-xs text-gray-400 block mt-2 text-start">
                        {new Date(answer.answeredAt).toLocaleDateString(
                          locale === 'he' ? 'he-IL' : 'en-US',
                          { year: 'numeric', month: '2-digit', day: '2-digit' }
                        )}
                      </span>
                    </TooltipTrigger>
                    <TooltipContent side="top" dir={direction}>
                      <p>{t.dateTooltip}</p>
                    </TooltipContent>
                  </Tooltip>
                </TooltipProvider>
              </div>

              {isEditingGlobally && !isSaving && (
                <TooltipProvider delayDuration={200}>
                  <Tooltip>
                    <TooltipTrigger asChild>
                      {answer.questionType === 'budgetAllocation' ? (
                        <Button
                          asChild
                          variant="ghost"
                          size="icon"
                          className="absolute top-0 end-0 opacity-0 group-hover:opacity-100 transition-opacity duration-200 h-7 w-7 text-cyan-600 hover:bg-cyan-50"
                        >
                          <Link
                            href={`/questionnaire?world=${worldKey}&question=${answer.questionId}`}
                          >
                            <Pencil className="h-4 w-4" />
                            <span className="sr-only">
                              {t.editTooltip.budget}
                            </span>
                          </Link>
                        </Button>
                      ) : (
                        <Button
                          variant="ghost"
                          size="icon"
                          className="absolute top-0 end-0 opacity-0 group-hover:opacity-100 transition-opacity duration-200 h-7 w-7 text-cyan-600 hover:bg-cyan-50"
                          onClick={handleStartEdit}
                        >
                          <Pencil className="h-4 w-4" />
                          <span className="sr-only">{t.editTooltip.text}</span>
                        </Button>
                      )}
                    </TooltipTrigger>
                    <TooltipContent side="top" dir={direction}>
                      <p>
                        {answer.questionType === 'budgetAllocation'
                          ? t.editTooltip.budget
                          : t.editTooltip.text}
                      </p>
                    </TooltipContent>
                  </Tooltip>
                </TooltipProvider>
              )}

              {isSavingText && !isEditingText && (
                <div className="absolute top-1 end-1">
                  <Loader2 className="h-4 w-4 animate-spin text-cyan-500" />
                </div>
              )}
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

// --- רכיב WorldSection ---
const WorldSection: React.FC<WorldSectionProps> = ({
  worldKey,
  worldConfig,
  answers,
  isEditingGlobally,
  onUpdate,
  isCompleted,
  className,
  dict,
  locale,
}) => {
  const { icon: Icon, color, bgColor, borderColor } = worldConfig;
  const t = dict.questionnaireSection.worldSection;
  const direction = locale === 'he' ? 'rtl' : 'ltr';

  const title = dict.questionnaireSection.worlds[worldKey]?.title || worldKey;
  const answerCountText = `${answers.length} ${
    answers.length === 1 ? t.answerSingular : t.answerPlural
  }`;

  return (
    <Card
      className={cn(
        'overflow-hidden shadow-sm border',
        bgColor,
        borderColor,
        className
      )}
      dir={direction}
    >
      <CardHeader
        className="p-4 border-b"
        style={{
          borderColor: `rgba(var(--${color.split('-')[1]}-200-rgb), 0.5)`,
        }}
      >
        <div className="flex items-center justify-between">
          <div className="flex items-center gap-3">
            <div
              className={cn(
                'p-2 rounded-full',
                color.replace('text-', 'bg-') + '/10'
              )}
            >
              <Icon className={cn('h-5 w-5', color)} />
            </div>
            <div>
              <CardTitle className="text-md sm:text-lg text-gray-800">
                {title}
              </CardTitle>
              <CardDescription className="text-xs text-gray-500 mt-0.5">
                {answerCountText}
              </CardDescription>
            </div>
          </div>
          <Badge
            variant={isCompleted ? 'success' : 'secondary'}
            className={cn(
              'gap-1 text-xs px-2 py-0.5 rounded-full',
              isCompleted
                ? 'bg-emerald-100 text-emerald-800'
                : 'bg-blue-100 text-blue-800'
            )}
          >
            {isCompleted ? (
              <CheckCircle className="h-3 w-3" />
            ) : (
              <Clock className="h-3 w-3" />
            )}
            {isCompleted ? t.status.completed : t.status.inProgress}
          </Badge>
        </div>
      </CardHeader>
      <CardContent className="p-4 pt-4">
        <div className="space-y-4">
          {answers.map((answer, index) => (
            <QuestionCard
              key={answer.questionId}
              question={answer.question}
              answer={answer}
              isFirstInList={index === 0}
              isEditingGlobally={isEditingGlobally}
              worldKey={worldKey}
              onUpdate={onUpdate}
              dict={dict}
              locale={locale}
            />
          ))}
        </div>
      </CardContent>
    </Card>
  );
};

// --- רכיב QuestionnaireResponsesSection הראשי ---
const QuestionnaireResponsesSection: React.FC<
  QuestionnaireResponsesSectionProps
> = ({ questionnaire, onUpdate, isEditable = false, dict, locale }) => {
  const [isEditingGlobally, setIsEditingGlobally] = useState(false);

  const direction = locale === 'he' ? 'rtl' : 'ltr';
  const ArrowIcon = direction === 'rtl' ? ArrowLeft : ArrowRight;
  const t = dict.questionnaireSection;

  const worldsWithAnswers = useMemo(() => {
    if (!questionnaire?.formattedAnswers) return [];
    return Object.entries(WORLDS_CONFIG)
      .map(([key, config]) => ({
        key: key as keyof typeof WORLDS_CONFIG,
        config,
        answers:
          questionnaire.formattedAnswers?.[
            key as keyof typeof questionnaire.formattedAnswers
          ] ?? [],
        isCompleted:
          (questionnaire[
            `${key}Completed` as keyof QuestionnaireResponse
          ] as boolean) ?? false,
      }))
      .filter((world) => world.answers.length > 0);
  }, [questionnaire]);

  if (!questionnaire) {
    const emptyStateT = t.emptyState;
    return (
      <Card
        className="text-center py-12 text-gray-500 bg-gray-50 rounded-lg border border-dashed"
        dir={direction}
      >
        <Book className="h-10 w-10 mx-auto mb-3 opacity-50 text-gray-400" />
        <p className="font-medium">{emptyStateT.title}</p>
        <p className="text-sm mt-1">{emptyStateT.subtitle}</p>
        <div className="mt-6">
          <Button
            asChild
            variant="default"
            className="bg-cyan-600 hover:bg-cyan-700"
          >
            <Link
              href={QUESTIONNAIRE_URL}
              className="flex items-center gap-1.5"
            >
              {emptyStateT.button} <ArrowIcon className="h-4 w-4" />
            </Link>
          </Button>
        </div>
      </Card>
    );
  }

  const hasAnyAnswers = worldsWithAnswers.length > 0;
  const headerT = t.header;

  return (
    <div className="space-y-6" dir={direction}>
      <Card className="shadow-sm border">
        <CardHeader className="p-4">
          <div className="flex flex-col sm:flex-row items-start sm:items-center justify-between gap-3">
            <div className="flex items-center gap-3">
              {questionnaire.completed ? (
                <CheckCircle className="h-5 w-5 text-emerald-500 flex-shrink-0" />
              ) : (
                <Clock className="h-5 w-5 text-blue-500 flex-shrink-0" />
              )}
              <div>
                <p className="font-semibold text-base text-gray-800">
                  {questionnaire.completed
                    ? headerT.title.completed
                    : headerT.title.inProgress}
                </p>
                <p className="text-xs text-gray-500 mt-0.5">
                  {hasAnyAnswers
                    ? `${headerT.lastUpdated}: ${new Date(
                        questionnaire.lastSaved
                      ).toLocaleDateString(
                        locale === 'he' ? 'he-IL' : 'en-US'
                      )}`
                    : headerT.notStarted}
                </p>
              </div>
            </div>
            <div className="flex flex-col sm:flex-row items-center gap-2 self-end sm:self-center">
              <Button
                asChild
                variant="outline"
                size="sm"
                className="rounded-full px-4 py-2 text-xs sm:text-sm"
              >
                <Link
                  href={QUESTIONNAIRE_URL}
                  className="flex items-center gap-1.5"
                >
                  {headerT.goToButton} <ArrowIcon className="h-4 w-4" />
                </Link>
              </Button>
              {isEditable && hasAnyAnswers && onUpdate && (
                <Button
                  variant="outline"
                  size="sm"
                  onClick={() => setIsEditingGlobally(!isEditingGlobally)}
                  className="gap-1.5 rounded-full px-4 py-2 text-xs sm:text-sm"
                >
                  {isEditingGlobally ? (
                    <>
                      <Save className="h-4 w-4" />
                      {headerT.editButton.finish}
                    </>
                  ) : (
                    <>
                      <Pencil className="h-4 w-4" />
                      {headerT.editButton.start}
                    </>
                  )}
                </Button>
              )}
            </div>
          </div>
        </CardHeader>
      </Card>

      {hasAnyAnswers ? (
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          {worldsWithAnswers.map(({ key, config, answers, isCompleted }) => (
            <WorldSection
              key={key}
              worldKey={key}
              worldConfig={config}
              answers={answers}
              isEditingGlobally={isEditingGlobally}
              onUpdate={onUpdate!}
              isCompleted={isCompleted}
              dict={dict}
              locale={locale}
            />
          ))}
        </div>
      ) : (
        <div className="text-center py-10 text-gray-500 bg-gray-50/50 rounded-lg border border-gray-200">
          <Book className="h-8 w-8 mx-auto mb-2 opacity-50 text-gray-400" />
          <p className="font-medium text-lg">{t.noAnswersState.title}</p>
          <p className="text-sm mt-1 text-gray-600">
            {t.noAnswersState.subtitle}
          </p>
          <div className="mt-6">
            <Button
              asChild
              variant="default"
              className="bg-cyan-600 hover:bg-cyan-700 text-white"
            >
              <Link
                href={QUESTIONNAIRE_URL}
                className="flex items-center gap-1.5 px-6 py-2"
              >
                {t.noAnswersState.button} <ArrowIcon className="h-4 w-4" />
              </Link>
            </Button>
          </div>
        </div>
      )}
    </div>
  );
};

export default QuestionnaireResponsesSection;
--- End of Content for QuestionnaireResponsesSection.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\profile\sections\UnifiedProfileDashboard.tsx
--------------------------------------------------------------------------------
Content:
// src/app/[locale]/(authenticated)/profile/components/dashboard/UnifiedProfileDashboard.tsx

'use client';

import React, { useState, useEffect, useCallback } from 'react';
import { useSession } from 'next-auth/react';
import Link from 'next/link';
import { useRouter } from 'next/navigation';
import { toast } from 'sonner';
import { cn } from '@/lib/utils';
import type { User as SessionUserType } from '@/types/next-auth';

// Child Components
import { ProfileChecklist } from './ProfileChecklist';
import { AIProfileAdvisorDialog } from './AIProfileAdvisorDialog';

// UI Components
import { Button } from '@/components/ui/button';
import { Dialog, DialogContent, DialogTrigger } from '@/components/ui/dialog';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { ScrollArea, ScrollBar } from '@/components/ui/scroll-area';

// Shared Profile Components
import {
  ProfileCard,
  PhotosSection,
  PreferencesSection,
  ProfileSection,
  QuestionnaireResponsesSection,
} from '@/components/profile';

// Icons
import { Eye, Loader2 } from 'lucide-react';

// Types
import type {
  UserProfile,
  UserImage,
  QuestionnaireResponse,
  UpdateValue, // <-- פתרון בעיית ה-any
} from '@/types/next-auth';
import type { ProfilePageDictionary } from '@/types/dictionary';

// Props interface for the component, now including the dictionary
interface UnifiedProfileDashboardProps {
  viewOnly?: boolean;
  userId?: string;
  initialTab?: string;
  dict: ProfilePageDictionary;
  locale: string; // Added locale prop
}

const UnifiedProfileDashboard: React.FC<UnifiedProfileDashboardProps> = ({
  viewOnly = false,
  userId,
  initialTab = 'overview',
  dict,
  locale, // Destructure locale
}) => {
  const {
    data: session,
    status: sessionStatus,
    update: updateSession,
  } = useSession();
  const router = useRouter();

  // State hooks
  const [profileData, setProfileData] = useState<UserProfile | null>(null);
  const [images, setImages] = useState<UserImage[]>([]);
  const [questionnaireResponse, setQuestionnaireResponse] =
    useState<QuestionnaireResponse | null>(null);
  const [activeTab, setActiveTab] = useState(initialTab);
  const [isEditing, setIsEditing] = useState(false);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState('');
  const [previewOpen, setPreviewOpen] = useState(false);
  const [hasSeenPreview, setHasSeenPreview] = useState(
    session?.user?.profile?.hasViewedProfilePreview || false
  );
  const direction = locale === 'he' ? 'rtl' : 'ltr'; // Define direction based on locale

  useEffect(() => {
    setActiveTab(initialTab);
  }, [initialTab]);

  const handleTabChange = (newTab: string) => {
    setActiveTab(newTab);
    router.push(`/profile?tab=${newTab}`, { scroll: false });
  };

  const isOwnProfile = !userId || session?.user?.id === userId;

  const loadData = useCallback(async () => {
    setIsLoading(true);
    setError('');
    try {
      // Fetch profile data
      const profileUrl = userId
        ? `/api/profile?userId=${userId}`
        : '/api/profile';
      const profileResponse = await fetch(profileUrl);
      const profileJson = await profileResponse.json();

      if (!profileResponse.ok || !profileJson.success) {
        throw new Error(profileJson.message || 'Failed to load profile');
      }
      console.log('---[ CLIENT LOG 1 ]--- Received Profile Data from API:');
      console.log(profileJson.profile);

      setProfileData(profileJson.profile);
      setImages(profileJson.images || []);
      if (profileJson.profile?.hasViewedProfilePreview) {
        setHasSeenPreview(true);
      }

      // Fetch questionnaire data
      const questionnaireUrl = userId
        ? `/api/profile/questionnaire?userId=${userId}`
        : '/api/profile/questionnaire';
      const questionnaireFetchResponse = await fetch(questionnaireUrl);

      if (questionnaireFetchResponse.status === 404) {
        setQuestionnaireResponse(null);
      } else if (questionnaireFetchResponse.ok) {
        const questionnaireJson = await questionnaireFetchResponse.json();
        if (questionnaireJson.success) {
          setQuestionnaireResponse(questionnaireJson.questionnaireResponse);
        } else {
          console.warn(
            'Could not load questionnaire. Reason:',
            questionnaireJson.message
          );
          setQuestionnaireResponse(null);
        }
      } else {
        console.error(
          'Failed to fetch questionnaire data. Status:',
          questionnaireFetchResponse.status
        );
        setQuestionnaireResponse(null);
      }
    } catch (err: unknown) {
      console.error('Failed to load profile data:', err);
      let errorMessage = 'An unexpected error occurred.';
      if (err instanceof Error) {
        errorMessage = err.message || errorMessage;
      }
      const translatedError = dict.dashboard.loadError.replace(
        '{{error}}',
        errorMessage
      );
      setError(translatedError);
      toast.error(translatedError);
    } finally {
      setIsLoading(false);
    }
  }, [userId, dict]);

  useEffect(() => {
    if (sessionStatus === 'authenticated') {
      loadData();
    }
  }, [sessionStatus, loadData]);

  useEffect(() => {
    const handleVisibilityChange = () => {
      if (
        document.visibilityState === 'visible' &&
        sessionStatus === 'authenticated'
      ) {
        loadData();
      }
    };
    document.addEventListener('visibilitychange', handleVisibilityChange);
    return () => {
      document.removeEventListener('visibilitychange', handleVisibilityChange);
    };
  }, [loadData, sessionStatus]);

  const handlePreviewClick = async () => {
    setPreviewOpen(true);
    if (!hasSeenPreview) {
      try {
        const response = await fetch('/api/profile/viewed-preview', {
          method: 'POST',
        });
        if (!response.ok) {
          throw new Error('Failed to update preview status');
        }
        setHasSeenPreview(true);
        toast.success(dict.dashboard.viewedPreviewSuccess);
        await updateSession();
      } catch (error) {
        console.error('Error in handlePreviewClick:', error);
        toast.error(dict.dashboard.viewedPreviewError);
      }
    }
  };

  const handleSave = async (formData: Partial<UserProfile>) => {
    setIsLoading(true);
    try {
      const response = await fetch('/api/profile/update', {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(formData),
      });

      const data = await response.json();
      if (data.success && data.profile) {
        await updateSession();
        setProfileData(data.profile);
        setIsEditing(false);
        toast.success(dict.dashboard.updateSuccess);
        setError('');
      } else {
        const errorMessage = data.message || 'Profile update error';
        const translatedError = dict.dashboard.updateError.replace(
          '{{error}}',
          errorMessage
        );
        setError(translatedError);
        toast.error(translatedError);
      }
    } catch (err) {
      console.error('Save error:', err);
      const errorMessage = 'Profile update error';
      const translatedError = dict.dashboard.updateError.replace(
        '{{error}}',
        errorMessage
      );
      setError(translatedError);
      toast.error(translatedError);
    } finally {
      setIsLoading(false);
    }
  };

  // --- השלמת הפונקציות החסרות עם תרגום ---

  const handleImageUpload = async (files: File[]) => {
    if (!files || files.length === 0) return;

    setIsLoading(true);
    const uploadedImages: UserImage[] = [];
    const failedUploads: string[] = [];
    const toastsDict = dict.photosSection.toasts;

    for (let i = 0; i < files.length; i++) {
      const file = files[i];
      const toastId = `upload-${i}`;
      const loadingMsg = dict.photosSection.uploadingMultiple.replace(
        '{{count}}',
        `${i + 1}/${files.length}`
      );

      try {
        toast.loading(loadingMsg, { id: toastId });

        const formData = new FormData();
        formData.append('file', file);

        const response = await fetch('/api/profile/images', {
          method: 'POST',
          body: formData,
        });

        const data = await response.json();

        if (response.ok && data.success && data.image) {
          uploadedImages.push(data.image);
          toast.success(
            `${file.name} uploaded successfully!`, // This specific string is often kept in English for file names
            { id: toastId }
          );
        } else {
          throw new Error(data.error || 'Upload failed');
        }
      } catch (err) {
        const errorMessage =
          err instanceof Error ? err.message : toastsDict.uploadError;
        failedUploads.push(`${file.name}: ${errorMessage}`);
        toast.error(`${file.name}: ${errorMessage}`, { id: toastId });
      }
    }

    if (uploadedImages.length > 0) {
      setImages((prev) => [...prev, ...uploadedImages].slice(0, 10)); // Assuming max 10 images
      await updateSession();
      toast.success(
        toastsDict.uploadSuccess.replace(
          '{{count}}',
          String(uploadedImages.length)
        )
      );
      setError('');
    }

    if (failedUploads.length > 0 && uploadedImages.length === 0) {
      setError(toastsDict.uploadError);
      toast.error(toastsDict.uploadError);
    }

    setIsLoading(false);
  };

  const handleSetMainImage = async (imageId: string) => {
    setIsLoading(true);
    try {
      const response = await fetch(`/api/profile/images/${imageId}`, {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ isMain: true }),
      });
      const data = await response.json();
      if (data.success) {
        setImages(data.images);
        await updateSession();
        toast.success(dict.photosSection.toasts.setMainSuccess);
        setError('');
      } else {
        const errorMsg = data.message || dict.photosSection.toasts.setMainError;
        setError(errorMsg);
        toast.error(errorMsg);
      }
    } catch (err) {
      const errorMsg = dict.photosSection.toasts.setMainError;
      setError(errorMsg);
      toast.error(errorMsg);
    } finally {
      setIsLoading(false);
    }
  };

  const handleDeleteImage = async (imageIds: string[]) => {
    if (!imageIds || imageIds.length === 0) {
      toast.info(dict.photosSection.toasts.selectOneError);
      return;
    }
    setIsLoading(true);
    try {
      const response = await fetch(`/api/profile/images`, {
        method: 'DELETE',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ imageIds }),
      });

      const data = await response.json();
      if (data.success) {
        setImages(data.images);
        await updateSession();
        const successMsg =
          imageIds.length > 1
            ? dict.photosSection.toasts.bulkDeleteSuccess.replace(
                '{{count}}',
                String(imageIds.length)
              )
            : dict.photosSection.toasts.singleDeleteSuccess;
        toast.success(successMsg);
        setError('');
      } else {
        const errorMsg =
          data.message || dict.photosSection.toasts.bulkDeleteError;
        setError(errorMsg);
        toast.error(errorMsg);
      }
    } catch (err) {
      console.error('Delete image error:', err);
      setError(dict.photosSection.toasts.bulkDeleteError);
      toast.error(dict.photosSection.toasts.bulkDeleteError);
    } finally {
      setIsLoading(false);
    }
  };

  const handleQuestionnaireUpdate = async (
    world: string,
    questionId: string,
    value: UpdateValue // <-- שימוש בטיפוס הנכון במקום any
  ) => {
    setIsLoading(true);
    try {
      const payload = { worldKey: world, questionId: questionId, value };
      const response = await fetch('/api/profile/questionnaire', {
        method: 'PATCH',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(payload),
      });

      const data = await response.json();
      if (data.success) {
        setQuestionnaireResponse(data.data);
        toast.success(dict.dashboard.tabContent.questionnaireUpdateSuccess);
        setError('');
      } else {
        const errorMsg =
          data.message || dict.dashboard.tabContent.questionnaireUpdateError;
        setError(errorMsg);
        toast.error(errorMsg);
      }
    } catch (err) {
      console.error('Failed to update questionnaire:', err);
      setError(dict.dashboard.tabContent.questionnaireUpdateError);
      toast.error(dict.dashboard.tabContent.questionnaireUpdateError);
    } finally {
      setIsLoading(false);
    }
  };

  // --- סוף החלק שהושלם ---

  if (isLoading && !profileData) {
    return (
      <div
        role="status"
        aria-live="polite"
        className="flex items-center justify-center min-h-screen bg-gradient-to-br from-cyan-50 via-white to-pink-50"
        dir={direction} // Changed
      >
        <div className="flex items-center gap-2 text-lg text-cyan-600">
          <Loader2 className="animate-spin h-6 w-6" />
          <span>{dict.dashboard.loadingData}</span>
        </div>
      </div>
    );
  }

  if (error && !profileData) {
    return (
      <div
        className="flex items-center justify-center min-h-screen bg-gradient-to-br from-red-50 via-white to-orange-50 p-4"
        dir={direction} // Changed
      >
        <Alert variant="destructive" className="max-w-md mx-auto">
          <AlertDescription className="text-center">{error}</AlertDescription>
        </Alert>
      </div>
    );
  }

  const user = session?.user as SessionUserType | undefined;

  return (
    <div className="relative min-h-screen w-full" dir={direction}>
      <div
        className="absolute inset-0 bg-gradient-to-br from-cyan-50 via-white to-pink-50 animate-gradient-slow -z-10"
        style={{ backgroundSize: '400% 400%' }}
      />
      <div className="absolute inset-0 opacity-10 bg-[radial-gradient(#06b6d4_1px,transparent_1px)] [background-size:30px_30px] -z-10"></div>
      <div className="relative max-w-7xl mx-auto py-8 sm:py-12 px-4 sm:px-6 lg:px-8 z-10">
        <div className="space-y-6 md:space-y-8">
          {error && (
            <Alert variant="destructive">
              <AlertDescription>{error}</AlertDescription>
            </Alert>
          )}

          {isOwnProfile && user && profileData && (
            <>
              <ProfileChecklist
                user={{
                  ...user,
                  profile: profileData,
                  images: images,
                }}
                hasSeenPreview={hasSeenPreview}
                onPreviewClick={handlePreviewClick}
                questionnaireResponse={questionnaireResponse}
                dict={dict.dashboard.checklist}
                locale={locale} // Added
              />
              <div className="my-6 md:my-8 flex justify-center">
                <AIProfileAdvisorDialog
                  userId={user.id}
                  dict={dict.dashboard.aiAdvisor}
                  analysisDict={dict.dashboard.analysisResult}
                  locale={locale}
                />
              </div>
            </>
          )}

          {!viewOnly && isOwnProfile && (
            <div
              id="onboarding-target-preview-profile"
              className="flex justify-center my-6 md:my-8"
            >
              <Dialog open={previewOpen} onOpenChange={setPreviewOpen}>
                <DialogTrigger asChild>
                  <Button
                    onClick={handlePreviewClick}
                    variant="outline"
                    size="lg"
                    className="px-8 py-3 text-base sm:text-lg gap-2 rounded-full border-2 border-cyan-200 text-cyan-600 hover:bg-cyan-50 hover:border-cyan-400 transition-all duration-300 shadow-sm hover:shadow-md"
                  >
                    {dict.dashboard.previewButton}
                    <Eye className="w-5 h-5 sm:w-6 sm:h-6" />
                  </Button>
                </DialogTrigger>
                <DialogContent className="w-screen h-screen sm:w-[95vw] sm:h-[90vh] sm:max-w-6xl p-0 bg-white/95 backdrop-blur-md sm:rounded-3xl shadow-2xl border-none overflow-hidden">
                  {profileData ? (
                    <ProfileCard
                      profile={profileData}
                      images={images}
                      questionnaire={questionnaireResponse}
                      viewMode="candidate"
                      isProfileComplete={
                        session?.user?.isProfileComplete ?? false
                      }
                      className="h-full"
                      onClose={() => setPreviewOpen(false)}
                      dict={dict.profileCard}
                      locale={locale} // Pass locale to ProfileCard
                    />
                  ) : (
                    <p className="text-center text-gray-500 py-10">
                      {dict.dashboard.previewLoading}
                    </p>
                  )}
                </DialogContent>
              </Dialog>
            </div>
          )}

          <Tabs
            value={activeTab}
            onValueChange={handleTabChange}
            className="w-full"
          >
            <div className="flex justify-center mb-6 md:mb-8">
              <ScrollArea dir={direction} className="w-auto max-w-full">
                <TabsList className="h-auto p-1.5 bg-white/70 backdrop-blur-sm rounded-full shadow-md gap-1 inline-flex flex-nowrap">
                  <TabsTrigger value="overview">
                    {dict.dashboard.tabs.overview}
                  </TabsTrigger>
                  <TabsTrigger value="photos">
                    {dict.dashboard.tabs.photos}
                  </TabsTrigger>
                  <TabsTrigger value="preferences">
                    {dict.dashboard.tabs.preferences}
                  </TabsTrigger>
                  <TabsTrigger value="questionnaire">
                    {dict.dashboard.tabs.questionnaire}
                  </TabsTrigger>
                </TabsList>
                <ScrollBar orientation="horizontal" className="mt-1" />
              </ScrollArea>
            </div>
            <div className="bg-white/80 backdrop-blur-lg rounded-3xl shadow-xl p-6 md:p-8 lg:p-10 transition-all duration-300 ease-in-out">
              <TabsContent value="overview">
                {profileData ? (
                  <ProfileSection
                    profile={profileData}
                    isEditing={isEditing}
                    setIsEditing={setIsEditing}
                    onSave={handleSave}
                    viewOnly={viewOnly || !isOwnProfile}
                    dict={dict.profileSection}
                    locale={locale} // Pass locale
                  />
                ) : (
                  <p className="text-center text-gray-500 py-10">
                    {dict.dashboard.tabContent.loadingOverview}
                  </p>
                )}
              </TabsContent>
              <TabsContent value="photos">
                <PhotosSection
                  images={images}
                  isUploading={isLoading}
                  disabled={viewOnly || !isOwnProfile}
                  onUpload={handleImageUpload}
                  onSetMain={handleSetMainImage}
                  onDelete={handleDeleteImage}
                  dict={dict.photosSection}
                  locale={locale}
                />
              </TabsContent>
              <TabsContent value="preferences">
                {profileData ? (
                  <PreferencesSection
                    profile={profileData}
                    isEditing={isEditing}
                    setIsEditing={setIsEditing}
                    onChange={handleSave}
                    viewOnly={viewOnly || !isOwnProfile}
                    dictionary={dict.preferencesSection}
                    locale={locale} // Pass locale
                  />
                ) : (
                  <p className="text-center text-gray-500 py-10">
                    {dict.dashboard.tabContent.loadingPreferences}
                  </p>
                )}
              </TabsContent>
              <TabsContent value="questionnaire">
                {questionnaireResponse ? (
                  <QuestionnaireResponsesSection
                    questionnaire={questionnaireResponse}
                    onUpdate={handleQuestionnaireUpdate}
                    isEditable={!viewOnly && isOwnProfile}
                    dict={dict}
                    locale={locale} // Pass locale
                  />
                ) : (
                  <div className="text-center py-12 text-gray-500">
                    {isLoading
                      ? dict.dashboard.tabContent.loadingQuestionnaire
                      : dict.dashboard.tabContent.noQuestionnaire}
                    {!isLoading && isOwnProfile && (
                      <Button
                        asChild
                        variant="link"
                        className="mt-2 text-cyan-600"
                      >
                        <Link href="/questionnaire">
                          {dict.dashboard.tabContent.fillQuestionnaireLink}
                        </Link>
                      </Button>
                    )}
                  </div>
                )}
              </TabsContent>
            </div>
          </Tabs>
        </div>
      </div>
    </div>
  );
};

export default UnifiedProfileDashboard;
--- End of Content for UnifiedProfileDashboard.tsx ---

================================================================================
Directory: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\profile\types
================================================================================

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\profile\types\profile.ts
--------------------------------------------------------------------------------
Content:
import type { UserProfile, UserImage, QuestionnaireResponse } from "@/types/next-auth";

// Define specific types for questionnaire updates
export interface QuestionnaireUpdateValue {
  type: 'answer' | 'visibility';
  value?: string;
  isVisible?: boolean;
}

// Interfaces for the main sections
export interface PhotosSectionProps {
  images: UserImage[];
  isUploading: boolean;
  disabled?: boolean;
  onUpload: (file: File) => Promise<void>;
  onSetMain: (imageId: string) => Promise<void>;
  onDelete: (imageId: string) => Promise<void>;
}


export interface PreferencesSectionProps {
  profile: UserProfile | null;
  isEditing: boolean;
  viewOnly?: boolean;
  setIsEditing: (value: boolean) => void;
  onChange: (data: Partial<UserProfile>) => void;
}

export interface QuestionnaireResponsesSectionProps {
  questionnaire: QuestionnaireResponse | null;
  onUpdate?: (world: string, questionId: string, value: QuestionnaireUpdateValue) => Promise<void>;
  isEditable?: boolean;
  viewMode?: "matchmaker" | "candidate";
}

// Types for the extended profile data
export interface ExtendedProfileData {
  personalityTraits?: {
    temperament?: string;
    decisionMaking?: string;
    stressManagement?: string;
    communicationStyle?: string;
  };
  spiritualProfile?: {
    prayerStyle?: string;
    secularStudiesAttitude?: string;
    modestyLevel?: string;
    childrenEducationApproach?: string;
  };
  familyBackground?: {
    parentsSpiritualLevel?: string;
    parentsOccupations?: {
      father?: string;
      mother?: string;
    };
    familyDynamics?: string;
  };
  lifestylePreferences?: {
    careerAspiration?: string;
    futureStudyPlans?: string;
    livingPreferences?: {
      proximity?: string;
    };
    relationshipExpectations?: string;
  };
  healthProfile?: {
    generalHealth?: string;
    dietaryRestrictions?: string[];
    physicalActivity?: string;
  };
  personalValues?: {
    parentalRespect?: number;
    communityInvolvement?: string;
    volunteeringPreferences?: string;
    financialManagement?: string;
  };
  futureGoals?: string[];
  [key: string]: unknown;
}

// Additional utility types
export type ViewMode = "matchmaker" | "candidate";
export type CardSize = "sm" | "md" | "lg";
--- End of Content for profile.ts ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\profile\types\questionnaire.ts
--------------------------------------------------------------------------------
Content:
// src/components/shared/profile/types/questionnaire.ts

export type QuestionnaireAnswerValue = {
  type: 'answer';
  value: string;
} | {
  type: 'visibility';
  isVisible: boolean;
} | string | number | boolean;

export interface FormattedAnswer {
  questionId: string;
  question: string;
  value: QuestionnaireAnswerValue;
  displayText: string;
  answeredAt: string;
  category?: string;
  isVisible: boolean;
}

export interface QuestionnaireResponse {
  id: string;
  userId: string;
  formattedAnswers: {
    values: FormattedAnswer[];
    personality: FormattedAnswer[];
    relationship: FormattedAnswer[];
    partner: FormattedAnswer[];
    religion: FormattedAnswer[];
  };
  valuesCompleted: boolean;
  personalityCompleted: boolean;
  relationshipCompleted: boolean;
  partnerCompleted: boolean;
  religionCompleted: boolean;
  worldsCompleted: string[];
  completed: boolean;
  startedAt: string | Date;
  completedAt?: string | Date;
  lastSaved: string | Date;
}

export interface QuestionnaireWorld {
  key: string;
  title: string;
  icon: React.ElementType;
  color: string;
  bgColor: string;
  borderColor: string;
}

export interface QuestionCardProps {
  question: string;
  answer: FormattedAnswer;
  isEditing: boolean;
  onEdit: (value: string) => void;
  onVisibilityChange: (isVisible: boolean) => void;
}

export interface WorldSectionProps {
  title: string;
  icon: React.ElementType;
  answers: FormattedAnswer[];
  isEditing: boolean;
  onEdit: (questionId: string, value: string) => void;
  onVisibilityChange: (questionId: string, isVisible: boolean) => void;
  isCompleted: boolean;
  className?: string;
}
--- End of Content for questionnaire.ts ---

