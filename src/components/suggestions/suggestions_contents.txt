################################################################################
# Directory Content Map For: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\suggestions
# Generated on: 2025-08-25 16:46:47
################################################################################

================================================================================
Directory: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\suggestions
================================================================================

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\suggestions\MatchSuggestionsContainer.tsx
--------------------------------------------------------------------------------
Content:
// src/app/components/suggestions/MatchSuggestionsContainer.tsx

'use client';

import React, { useState, useEffect, useCallback } from 'react';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card';
import {
  History,
  AlertCircle,
  RefreshCw,
  Bell,
  CheckCircle,
  Target,
  Sparkles,
  Heart,
  Zap,
  XCircle,
  Loader2,
} from 'lucide-react';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { toast } from 'sonner';
import type { MatchSuggestion } from '@prisma/client';

import SuggestionsList from './list/SuggestionsList';
import type { ExtendedMatchSuggestion } from './types';
import { cn } from '@/lib/utils';

import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
} from '@/components/ui/alert-dialog';

// ✅ 1. ייבוא הטיפוסים הנדרשים עבור המילונים
import type { SuggestionsDictionary, ProfileCardDict } from '@/types/dictionary';

const LoadingSkeleton: React.FC<{
  dict: SuggestionsDictionary['container']['loading'];
}> = ({ dict }) => (
  <div className="min-h-screen bg-gradient-to-br from-slate-50 via-cyan-50/20 to-emerald-50/20">
    <div className="container mx-auto px-4 py-8">
      {/* Hero Skeleton */}
      <div className="mb-8">
        <div className="text-center mb-8">
          <div className="inline-flex items-center gap-3 mb-4">
            <div className="p-3 rounded-full bg-gradient-to-r from-purple-100 to-cyan-100 animate-pulse">
              <div className="w-8 h-8 bg-gray-300 rounded-full animate-pulse"></div>
            </div>
          </div>
          <div className="space-y-4">
            <div className="h-12 bg-gradient-to-r from-gray-200 to-gray-300 rounded-2xl mx-auto w-80 animate-pulse"></div>
            <div className="h-6 bg-gray-200 rounded-xl mx-auto w-96 animate-pulse"></div>
          </div>
        </div>
        <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
          {Array.from({ length: 3 }).map((_, index) => (
            <div
              key={index}
              className="border-0 shadow-lg overflow-hidden bg-white rounded-2xl animate-pulse"
            >
              <div className="p-6">
                <div className="flex items-center justify-between mb-4">
                  <div className="p-3 rounded-xl bg-gray-200 w-12 h-12"></div>
                  <div className="text-right">
                    <div className="w-16 h-8 bg-gray-200 rounded-lg mb-2"></div>
                  </div>
                </div>
                <div className="space-y-2">
                  <div className="h-6 bg-gray-200 rounded-lg w-3/4"></div>
                  <div className="h-4 bg-gray-200 rounded-lg w-1/2"></div>
                </div>
              </div>
            </div>
          ))}
        </div>
      </div>

      {/* Main Card Skeleton */}
      <div className="shadow-2xl border-0 bg-white/95 backdrop-blur-sm overflow-hidden rounded-3xl">
        <div className="px-8 py-6 bg-gradient-to-r from-cyan-50/80 via-white to-emerald-50/30 border-b border-gray-100">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-3">
              <div className="w-10 h-10 bg-gray-200 rounded-full animate-pulse"></div>
            </div>
            <div className="h-6 bg-gray-200 rounded-lg w-32 animate-pulse"></div>
            <div className="w-16 h-4"></div>
          </div>
        </div>

        <div className="p-6">
          <div className="flex justify-center mb-6">
            <div className="grid grid-cols-3 bg-purple-50/50 rounded-2xl p-1 h-14 w-fit gap-2">
              {Array.from({ length: 3 }).map((_, index) => (
                <div
                  key={index}
                  className="px-6 py-3 rounded-xl bg-gray-200 animate-pulse w-24 h-10"
                ></div>
              ))}
            </div>
          </div>

          <div className="flex flex-col items-center justify-center min-h-[400px] text-center space-y-6">
            <div className="relative">
              <div className="w-24 h-24 rounded-full bg-gradient-to-br from-purple-100 via-cyan-100 to-emerald-100 animate-pulse border-4 border-white shadow-xl"></div>
              <div className="absolute inset-0 flex items-center justify-center">
                <Loader2 className="w-12 h-12 text-purple-600 animate-spin" />
              </div>
              <div className="absolute inset-0 rounded-full bg-gradient-to-r from-purple-400 via-cyan-400 to-emerald-400 opacity-20 animate-ping"></div>
            </div>

            <div className="space-y-3">
              <h3 className="text-2xl font-bold bg-gradient-to-r from-purple-600 via-cyan-600 to-emerald-600 bg-clip-text text-transparent">
                {dict.title}
              </h3>
              <p className="text-gray-600 max-w-md leading-relaxed">
                {dict.subtitle}
              </p>
            </div>

            <div className="flex items-center gap-2">
              {Array.from({ length: 3 }).map((_, index) => (
                <div
                  key={index}
                  className="w-3 h-3 rounded-full bg-gradient-to-r from-purple-500 to-cyan-500 animate-bounce"
                  style={{ animationDelay: `${index * 0.2}s` }}
                ></div>
              ))}
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
);

const WelcomeStats: React.FC<{
  activeSuggestions: ExtendedMatchSuggestion[];
  historySuggestions: ExtendedMatchSuggestion[];
  userId: string;
  dict: SuggestionsDictionary['container']['stats'];
}> = ({ activeSuggestions, historySuggestions, userId, dict }) => {
  const approvedCount = [...activeSuggestions, ...historySuggestions].filter(
    (s) =>
      s.status === 'FIRST_PARTY_APPROVED' ||
      s.status === 'SECOND_PARTY_APPROVED'
  ).length;

  const myTurnCount = activeSuggestions.filter((s) => {
    const isFirstParty = s.firstPartyId === userId;
    return (
      (s.status === 'PENDING_FIRST_PARTY' && isFirstParty) ||
      (s.status === 'PENDING_SECOND_PARTY' && !isFirstParty)
    );
  }).length;

  const stats = [
    {
      label: dict.new,
      value: activeSuggestions.length,
      icon: <Sparkles className="w-5 h-5" />,
      color: 'from-cyan-500 to-blue-500',
      description: dict.newDesc,
    },
    {
      label: dict.yourTurn,
      value: myTurnCount,
      icon: <Zap className="w-5 h-5" />,
      color: 'from-orange-500 to-amber-500',
      description: dict.yourTurnDesc,
      pulse: myTurnCount > 0,
    },
    {
      label: dict.approved,
      value: approvedCount,
      icon: <CheckCircle className="w-5 h-5" />,
      color: 'from-emerald-500 to-green-500',
      description: dict.approvedDesc,
    },
  ];

  return (
    <div className="mb-8">
      <div className="text-center mb-8">
        <div className="inline-flex items-center gap-3 mb-4">
          <div className="p-3 rounded-full bg-gradient-to-r from-purple-100 to-cyan-100">
            <Heart className="w-8 h-8 text-purple-600" />
          </div>
        </div>
        <h1 className="text-3xl md:text-4xl font-bold bg-gradient-to-r from-purple-600 via-cyan-600 to-emerald-600 bg-clip-text text-transparent mb-3">
          {dict.title}
        </h1>
        <p className="text-lg text-gray-600 max-w-2xl mx-auto">
          {dict.subtitle}
        </p>
      </div>
      <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
        {stats.map((stat, index) => (
          <Card
            key={index}
            className="border-0 shadow-lg overflow-hidden bg-white hover:shadow-xl transition-all duration-300 group"
          >
            <CardContent className="p-6">
              <div className="flex items-center justify-between mb-4">
                <div
                  className={cn(
                    'p-3 rounded-xl bg-gradient-to-r text-white shadow-lg group-hover:scale-110 transition-transform duration-300',
                    stat.color,
                    stat.pulse && 'animate-pulse'
                  )}
                >
                  {stat.icon}
                </div>
                <div className="text-right">
                  <div
                    className={cn(
                      'text-3xl font-bold text-gray-900',
                      stat.pulse && 'animate-bounce'
                    )}
                  >
                    {stat.value}
                  </div>
                </div>
              </div>
              <div className="space-y-1">
                <h3 className="font-bold text-lg text-gray-800">
                  {stat.label}
                </h3>
                <p className="text-sm text-gray-600">{stat.description}</p>
              </div>
            </CardContent>
          </Card>
        ))}
      </div>
    </div>
  );
};

// ✅ 2. עדכון הממשק לקבל props נפרדים
interface MatchSuggestionsContainerProps {
  userId: string;
  className?: string;
  suggestionsDict: SuggestionsDictionary;
  profileCardDict: ProfileCardDict;
}

const MatchSuggestionsContainer: React.FC<MatchSuggestionsContainerProps> = ({
  userId,
  className,
  suggestionsDict,
  profileCardDict,
}) => {
  const [activeSuggestions, setActiveSuggestions] = useState<
    ExtendedMatchSuggestion[]
  >([]);
  const [historySuggestions, setHistorySuggestions] = useState<
    ExtendedMatchSuggestion[]
  >([]);
  const [isLoading, setIsLoading] = useState(true);
  const [isRefreshing, setIsRefreshing] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [activeTab, setActiveTab] = useState('active');
  const [viewMode, setViewMode] = useState<'grid' | 'list'>('grid');
  const [hasNewSuggestions, setHasNewSuggestions] = useState(false);
  const [isUserInActiveProcess, setIsUserInActiveProcess] = useState(false);

  const [showConfirmDialog, setShowConfirmDialog] = useState(false);
  const [suggestionForAction, setSuggestionForAction] =
    useState<ExtendedMatchSuggestion | null>(null);
  const [actionType, setActionType] = useState<'approve' | 'decline' | null>(
    null
  );

  const myTurnCount = activeSuggestions.filter((s) => {
    const isFirstParty = s.firstPartyId === userId;
    return (
      (s.status === 'PENDING_FIRST_PARTY' && isFirstParty) ||
      (s.status === 'PENDING_SECOND_PARTY' && !isFirstParty)
    );
  }).length;

  const fetchSuggestions = useCallback(
    async (showLoadingState = true) => {
      try {
        if (showLoadingState) {
          setIsLoading(true);
        } else {
          setIsRefreshing(true);
        }
        setError(null);

        const [activeResponse, historyResponse] = await Promise.all([
          fetch(`/api/suggestions/active`),
          fetch(`/api/suggestions/history`),
        ]);

        if (!activeResponse.ok || !historyResponse.ok) {
          throw new Error('Failed to fetch suggestions');
        }

        const activeData = await activeResponse.json();
        const historyData = await historyResponse.json();

        if (
          !showLoadingState &&
          activeData.suggestions.length > activeSuggestions.length
        ) {
          setHasNewSuggestions(true);
          // ✅ 3. שימוש ב-suggestionsDict במקום dict
          toast.success(suggestionsDict.container.toasts.newSuggestionsTitle, {
            description: suggestionsDict.container.toasts.newSuggestionsDescription,
            duration: 5000,
          });
        }

        setActiveSuggestions(activeData.suggestions);
        setHistorySuggestions(historyData.suggestions);
      } catch (error) {
        // ✅ 3. שימוש ב-suggestionsDict במקום dict
        const errorMessage =
          error instanceof Error
            ? error.message
            : suggestionsDict.container.main.unknownError;
        setError(
          suggestionsDict.container.main.errorLoading.replace('{error}', errorMessage)
        );
        toast.error(suggestionsDict.container.toasts.errorTitle, {
          description: suggestionsDict.container.toasts.errorDescription,
        });
      } finally {
        setIsLoading(false);
        setIsRefreshing(false);
      }
    },
    // ✅ 3. שימוש ב-suggestionsDict במקום dict
    [activeSuggestions.length, suggestionsDict]
  );

  const handleStatusChange = useCallback(
    async (suggestionId: string, newStatus: string, notes?: string) => {
      try {
        const response = await fetch(
          `/api/suggestions/${suggestionId}/status`,
          {
            method: 'PATCH',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ status: newStatus, notes }),
          }
        );

        if (!response.ok) {
          const errorData = await response.json();
          throw new Error(
            errorData.error || 'Failed to update suggestion status'
          );
        }

        await fetchSuggestions(false);

        // ✅ 3. שימוש ב-suggestionsDict במקום dict
        const statusMessages: Record<string, string> = {
          FIRST_PARTY_APPROVED: suggestionsDict.container.toasts.approvedSuccess,
          SECOND_PARTY_APPROVED: suggestionsDict.container.toasts.approvedSuccess,
          FIRST_PARTY_DECLINED: suggestionsDict.container.toasts.declinedSuccess,
          SECOND_PARTY_DECLINED: suggestionsDict.container.toasts.declinedSuccess,
        };

        let description: string;
        if (newStatus === 'FIRST_PARTY_APPROVED') {
          description = suggestionsDict.container.toasts.approvedFirstPartyDesc;
        } else if (newStatus === 'SECOND_PARTY_APPROVED') {
          description = suggestionsDict.container.toasts.approvedSecondPartyDesc;
        } else if (newStatus.includes('DECLINED')) {
          description = suggestionsDict.container.toasts.declinedDesc;
        } else {
          description = suggestionsDict.container.toasts.matchmakerNotified;
        }

        toast.success(
          statusMessages[newStatus] ||
            suggestionsDict.container.toasts.statusUpdateSuccess,
          { description }
        );
      } catch (error) {
        // ✅ 3. שימוש ב-suggestionsDict במקום dict
        const errorMessage =
          error instanceof Error
            ? error.message
            : suggestionsDict.container.main.unknownError;
        toast.error(
          suggestionsDict.container.toasts.statusUpdateError.replace(
            '{error}',
            errorMessage
          )
        );
      }
    },
    [fetchSuggestions, suggestionsDict]
  );

  const handleRequestAction = useCallback(
    (suggestion: ExtendedMatchSuggestion, action: 'approve' | 'decline') => {
      setSuggestionForAction(suggestion);
      setActionType(action);
      setShowConfirmDialog(true);
    },
    []
  );

  const handleConfirmAction = useCallback(async () => {
    if (!suggestionForAction || !actionType) return;

    const isFirstParty = suggestionForAction.firstPartyId === userId;
    let newStatus = '';
    if (actionType === 'approve') {
      newStatus = isFirstParty
        ? 'FIRST_PARTY_APPROVED'
        : 'SECOND_PARTY_APPROVED';
    } else {
      newStatus = isFirstParty
        ? 'FIRST_PARTY_DECLINED'
        : 'SECOND_PARTY_DECLINED';
    }

    await handleStatusChange(suggestionForAction.id, newStatus);

    setShowConfirmDialog(false);
    setSuggestionForAction(null);
    setActionType(null);
  }, [suggestionForAction, actionType, userId, handleStatusChange]);

  useEffect(() => {
    fetchSuggestions();
    const intervalId = setInterval(
      () => fetchSuggestions(false),
      5 * 60 * 1000
    );
    return () => clearInterval(intervalId);
  }, [userId, fetchSuggestions]);

  useEffect(() => {
    const activeProcessStatuses: MatchSuggestion['status'][] = [
      'FIRST_PARTY_APPROVED',
      'SECOND_PARTY_APPROVED',
      'AWAITING_MATCHMAKER_APPROVAL',
      'CONTACT_DETAILS_SHARED',
      'AWAITING_FIRST_DATE_FEEDBACK',
      'THINKING_AFTER_DATE',
      'PROCEEDING_TO_SECOND_DATE',
      'MEETING_PENDING',
      'MEETING_SCHEDULED',
      'MATCH_APPROVED',
      'DATING',
      'ENGAGED',
    ];
    const hasActiveProcess = activeSuggestions.some((s) =>
      activeProcessStatuses.includes(s.status)
    );
    setIsUserInActiveProcess(hasActiveProcess);
  }, [activeSuggestions]);

  useEffect(() => {
    if (activeTab === 'active') {
      setHasNewSuggestions(false);
    }
  }, [activeTab]);

  const handleRefresh = useCallback(async () => {
    await fetchSuggestions(false);
    // ✅ 3. שימוש ב-suggestionsDict במקום dict
    toast.success(suggestionsDict.container.toasts.refreshSuccessTitle, {
      description: suggestionsDict.container.toasts.refreshSuccessDescription,
    });
  }, [fetchSuggestions, suggestionsDict]);

  if (isLoading) {
    // ✅ 3. שימוש ב-suggestionsDict במקום dict
    return <LoadingSkeleton dict={suggestionsDict.container.loading} />;
  }

  return (
    <div
      className={cn(
        'min-h-screen bg-gradient-to-br from-slate-50 via-cyan-50/20 to-emerald-50/20',
        className
      )}
    >
      <div className="container mx-auto px-4 py-8">
        <WelcomeStats
          activeSuggestions={activeSuggestions}
          historySuggestions={historySuggestions}
          userId={userId}
          // ✅ 3. שימוש ב-suggestionsDict במקום dict
          dict={suggestionsDict.container.stats}
        />
        <Card className="shadow-2xl border-0 bg-white/95 backdrop-blur-sm overflow-hidden">
          <CardHeader className="pb-4 bg-gradient-to-r from-white via-cyan-50/30 to-emerald-50/30 border-b border-gray-100">
            <div className="flex items-center justify-between">
              <div className="flex items-center gap-3">
                <Button
                  variant="ghost"
                  size="icon"
                  onClick={handleRefresh}
                  disabled={isRefreshing}
                  className="rounded-full h-10 w-10 hover:bg-cyan-100 transition-colors"
                  // ✅ 3. שימוש ב-suggestionsDict במקום dict
                  aria-label={suggestionsDict.container.main.refreshAriaLabel}
                >
                  <RefreshCw
                    className={cn(
                      'h-5 w-5 text-cyan-600',
                      isRefreshing && 'animate-spin'
                    )}
                  />
                </Button>
                {hasNewSuggestions && (
                  <Badge className="bg-gradient-to-r from-orange-500 to-amber-500 text-white border-0 shadow-xl animate-pulse">
                    <Bell className="w-3 h-3 ml-1" />
                    {suggestionsDict.container.main.newSuggestions}
                  </Badge>
                )}
              </div>
              <div className="text-center flex-grow">
                <CardTitle className="text-xl font-bold text-gray-800">
                  {suggestionsDict.container.main.title}
                </CardTitle>
              </div>
              <div className="w-16"></div>
            </div>
          </CardHeader>
          <CardContent className="p-6">
            <Tabs
              value={activeTab}
              onValueChange={setActiveTab}
              dir="rtl"
              className="space-y-6"
            >
              <div className="flex justify-center">
                <TabsList className="grid grid-cols-3 bg-purple-50/50 rounded-2xl p-1 h-14 w-fit">
                  <TabsTrigger
                    value="active"
                    className="relative flex items-center gap-3 px-6 py-3 rounded-xl transition-all data-[state=active]:bg-white data-[state=active]:shadow-lg font-semibold text-base"
                  >
                    <Target className="w-5 h-5 text-purple-500" />
                    <span>{suggestionsDict.container.main.tabs.active}</span>
                    {activeSuggestions.length > 0 && (
                      <Badge className="bg-purple-500 text-white border-0 px-2 py-1 text-xs font-bold rounded-full min-w-[24px] h-6">
                        {activeSuggestions.length}
                      </Badge>
                    )}
                  </TabsTrigger>
                  {myTurnCount > 0 && (
                    <TabsTrigger
                      value="urgent"
                      className="flex items-center gap-3 px-6 py-3 rounded-xl transition-all data-[state=active]:bg-white data-[state=active]:shadow-lg font-semibold text-base"
                    >
                      <Zap className="w-5 h-5 text-orange-500" />
                      <span>{suggestionsDict.container.main.tabs.urgent}</span>
                      <Badge className="bg-gradient-to-r from-orange-500 to-amber-500 text-white border-0 px-2 py-1 text-xs font-bold rounded-full min-w-[24px] h-6 animate-pulse shadow-lg">
                        {myTurnCount}
                      </Badge>
                    </TabsTrigger>
                  )}
                  <TabsTrigger
                    value="history"
                    className="flex items-center gap-3 px-6 py-3 rounded-xl transition-all data-[state=active]:bg-white data-[state=active]:shadow-lg font-semibold text-base"
                  >
                    <History className="w-5 h-5 text-gray-500" />
                    <span>{suggestionsDict.container.main.tabs.history}</span>
                    {historySuggestions.length > 0 && (
                      <Badge className="bg-gray-500 text-white border-0 px-2 py-1 text-xs font-bold rounded-full min-w-[24px] h-6">
                        {historySuggestions.length}
                      </Badge>
                    )}
                  </TabsTrigger>
                </TabsList>
              </div>
              {error && (
                <Alert
                  variant="destructive"
                  className="border-red-200 bg-red-50"
                  dir="rtl"
                >
                  <AlertCircle className="h-5 w-5 ml-2" />
                  <AlertDescription className="text-red-800 font-medium">
                    {error}
                  </AlertDescription>
                </Alert>
              )}
              <TabsContent value="active" className="space-y-6">
                <SuggestionsList
                  suggestions={activeSuggestions}
                  userId={userId}
                  viewMode={viewMode}
                  isLoading={isRefreshing}
                  onStatusChange={handleStatusChange}
                  onActionRequest={handleRequestAction}
                  onRefresh={handleRefresh}
                  isUserInActiveProcess={isUserInActiveProcess}
                  // ✅ 4. העברת שני ה-props הלאה
                  suggestionsDict={suggestionsDict}
                  profileCardDict={profileCardDict}
                />
              </TabsContent>
              <TabsContent value="history" className="space-y-6">
                <SuggestionsList
                  suggestions={historySuggestions}
                  userId={userId}
                  viewMode={viewMode}
                  isLoading={isRefreshing}
                  isHistory={true}
                  onStatusChange={handleStatusChange}
                  onActionRequest={handleRequestAction}
                  onRefresh={handleRefresh}
                  isUserInActiveProcess={isUserInActiveProcess}
                  // ✅ 4. העברת שני ה-props הלאה
                  suggestionsDict={suggestionsDict}
                  profileCardDict={profileCardDict}
                />
              </TabsContent>
              <TabsContent value="urgent" className="space-y-6">
                <SuggestionsList
                  suggestions={activeSuggestions.filter((s) => {
                    const isFirstParty = s.firstPartyId === userId;
                    return (
                      (s.status === 'PENDING_FIRST_PARTY' && isFirstParty) ||
                      (s.status === 'PENDING_SECOND_PARTY' && !isFirstParty)
                    );
                  })}
                  userId={userId}
                  viewMode={viewMode}
                  isLoading={isRefreshing}
                  onStatusChange={handleStatusChange}
                  onActionRequest={handleRequestAction}
                  onRefresh={handleRefresh}
                  isUserInActiveProcess={isUserInActiveProcess}
                  // ✅ 4. העברת שני ה-props הלאה
                  suggestionsDict={suggestionsDict}
                  profileCardDict={profileCardDict}
                />
              </TabsContent>
            </Tabs>
          </CardContent>
        </Card>
      </div>
      <AlertDialog open={showConfirmDialog} onOpenChange={setShowConfirmDialog}>
        <AlertDialogContent className="border-0 shadow-2xl rounded-2xl z-[9999]">
          <AlertDialogHeader>
            <AlertDialogTitle className="text-xl font-bold text-center">
              {actionType === 'approve'
                ? suggestionsDict.container.dialogs.approveTitle
                : suggestionsDict.container.dialogs.declineTitle}
            </AlertDialogTitle>
            <AlertDialogDescription className="text-center text-gray-600 leading-relaxed">
              {actionType === 'approve'
                ? suggestionsDict.container.dialogs.approveDescription
                : suggestionsDict.container.dialogs.declineDescription}
            </AlertDialogDescription>
          </AlertDialogHeader>
          <AlertDialogFooter className="gap-3">
            <AlertDialogCancel className="rounded-xl">
              {suggestionsDict.container.dialogs.cancel}
            </AlertDialogCancel>
            <AlertDialogAction
              onClick={handleConfirmAction}
              className={cn(
                'rounded-xl font-medium shadow-lg hover:shadow-xl transition-all duration-300',
                actionType === 'approve'
                  ? 'bg-gradient-to-r from-green-500 to-green-600 hover:from-green-600 hover:to-green-700'
                  : 'bg-gradient-to-r from-red-500 to-red-600 hover:from-red-600 hover:to-red-700'
              )}
            >
              {actionType === 'approve' ? (
                <>
                  <CheckCircle className="w-4 h-4 ml-2" />
                  {suggestionsDict.container.dialogs.confirmApproval}
                </>
              ) : (
                <>
                  <XCircle className="w-4 h-4 ml-2" />
                  {suggestionsDict.container.dialogs.confirmDecline}
                </>
              )}
            </AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>
    </div>
  );
};

export default MatchSuggestionsContainer;
--- End of Content for MatchSuggestionsContainer.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\suggestions\suggestions_contents.txt
--------------------------------------------------------------------------------
[This is the output log file itself. Content not included.]

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\suggestions\types.ts
--------------------------------------------------------------------------------
Content:
// src/app/components/suggestions/types.ts

import type {
  MatchSuggestion,
  Profile,
  User,
  UserImage,
  QuestionnaireResponse as PrismaQuestionnaireResponse,
} from '@prisma/client';

// --- הוספה חדשה ---
// הגדרת טיפוס מרכזי לעולמות השאלון
export type WorldId =
  | 'values'
  | 'personality'
  | 'relationship'
  | 'partner'
  | 'religion';

// This type now accurately reflects the structure of Prisma's Profile model.
export type UserProfile = Profile;

// --- שינוי קל להוספת טיפוס ברור יותר ---
export type QuestionnaireResponse = PrismaQuestionnaireResponse;

// PartyInfo now includes fields from both User and Profile, creating a complete picture.
export interface PartyInfo {
  // Fields from User model
  id: string;
  email: string;
  firstName: string;
  lastName: string;
  isProfileComplete: boolean;

  // Relation to Profile (which can be null)
  profile: UserProfile | null;

  // Relation to Images (which is a full UserImage array)
  images: UserImage[];

  // --- שינוי: שימוש בטיפוס המדויק ---
  questionnaireResponses?: QuestionnaireResponse[];
}

export interface StatusHistoryItem {
  id: string;
  suggestionId: string;
  status: string;
  notes?: string | null;
  createdAt: Date | string;
}

// This now correctly expects PartyInfo which can have a null profile.
export interface ExtendedMatchSuggestion
  extends Omit<MatchSuggestion, 'firstParty' | 'secondParty' | 'matchmaker'> {
  matchmaker: {
    firstName: string;
    lastName: string;
  };
  firstParty: PartyInfo;
  secondParty: PartyInfo;
  statusHistory: StatusHistoryItem[];
}
--- End of Content for types.ts ---

================================================================================
Directory: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\suggestions\cards
================================================================================

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\suggestions\cards\MinimalSuggestionCard.tsx
--------------------------------------------------------------------------------
Content:
// src/app/components/suggestions/cards/MinimalSuggestionCard.tsx

import React from 'react';
import Image from 'next/image';
import { isAfter, subDays } from 'date-fns';
import {
  User,
  MapPin,
  Briefcase,
  Eye,
  XCircle,
  MessageCircle,
  Heart,
  BookOpen,
  Scroll,
  AlertTriangle,
  Sparkles,
  ChevronLeft,
  Quote,
  Zap,
} from 'lucide-react';
import { Card, CardContent, CardFooter } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { Avatar, AvatarFallback } from '@/components/ui/avatar';
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from '@/components/ui/tooltip';
import { toast } from 'sonner';
import { cn } from '@/lib/utils';
import { getRelativeCloudinaryPath, getInitials } from '@/lib/utils';
import {
  getEnhancedStatusInfo,
  getPartyIndicator,
} from '@/lib/utils/suggestionUtils';
import type { ExtendedMatchSuggestion } from '../types';
import type { SuggestionsCardDict } from '@/types/dictionary'; // ✨ Import dictionary type

interface MinimalSuggestionCardProps {
  suggestion: ExtendedMatchSuggestion;
  userId: string;
  onClick: (suggestion: ExtendedMatchSuggestion) => void;
  onApprove?: (suggestion: ExtendedMatchSuggestion) => void;
  onInquiry?: (suggestion: ExtendedMatchSuggestion) => void;
  onDecline?: (suggestion: ExtendedMatchSuggestion) => void;
  className?: string;
  isHistory?: boolean;
  isApprovalDisabled?: boolean;
  dict: SuggestionsCardDict; // ✨ Add dict prop
}

const calculateAge = (birthDate?: Date | string | null): number | null => {
  if (!birthDate) return null;
  const today = new Date();
  const birth = new Date(birthDate);
  if (isNaN(birth.getTime())) return null;
  let age = today.getFullYear() - birth.getFullYear();
  const m = today.getMonth() - birth.getMonth();
  if (m < 0 || (m === 0 && today.getDate() < birth.getDate())) {
    age--;
  }
  return age > 0 ? age : null;
};

const MinimalSuggestionCard: React.FC<MinimalSuggestionCardProps> = ({
  suggestion,
  userId,
  onClick,
  onApprove,
  onInquiry,
  onDecline,
  className,
  isHistory = false,
  isApprovalDisabled = false,
  dict, // ✨ Destructure dict
}) => {
  const targetParty =
    suggestion.firstPartyId === userId
      ? suggestion.secondParty
      : suggestion.firstParty;
  const isFirstParty = suggestion.firstPartyId === userId;

  if (!targetParty || !targetParty.profile) {
    return null;
  }

  const mainImage = targetParty.images?.find((img) => img.isMain);
  const age = calculateAge(targetParty.profile.birthDate);
  const statusInfo = getEnhancedStatusInfo(suggestion.status, isFirstParty);
  const partyIndicator = getPartyIndicator(suggestion.status, isFirstParty);
  const hasDeadline =
    suggestion.decisionDeadline &&
    new Date(suggestion.decisionDeadline) > new Date();
  const isUrgent =
    hasDeadline &&
    subDays(new Date(suggestion.decisionDeadline!), 2) < new Date();

  const reasonTeaser = suggestion.matchingReason
    ? suggestion.matchingReason.length > 100
      ? `${suggestion.matchingReason.substring(0, 100)}...`
      : suggestion.matchingReason
    : dict.reasonTeaserDefault;

  const handleCardClick = () => {
    onClick(suggestion);
  };

  return (
    <Card
      className={cn(
        'group w-full rounded-2xl overflow-hidden shadow-lg border-0 bg-white transition-all duration-500 hover:shadow-xl hover:-translate-y-1',
        isUrgent && 'ring-2 ring-orange-300 ring-opacity-60',
        className
      )}
    >
      <div className="relative p-4 bg-gradient-to-r from-cyan-50/80 via-white to-emerald-50/50 border-b border-cyan-100/50">
        <div className="flex items-center justify-between">
          <div className="flex items-center gap-3">
            <Avatar className="w-10 h-10 border-2 border-white shadow-md">
              <AvatarFallback className="bg-gradient-to-br from-cyan-500 to-emerald-500 text-white font-bold text-sm">
                {getInitials(
                  `${suggestion.matchmaker.firstName} ${suggestion.matchmaker.lastName}`
                )}
              </AvatarFallback>
            </Avatar>
            <div>
              <p className="text-xs text-cyan-600 font-medium">
                {dict.suggestedBy}
              </p>
              <p className="text-sm font-bold text-gray-800">
                {suggestion.matchmaker.firstName}{' '}
                {suggestion.matchmaker.lastName}
              </p>
            </div>
          </div>
          <div className="flex flex-col items-end gap-1">
            <Badge
              className={cn(
                'flex items-center gap-1.5 border shadow-sm font-semibold text-xs',
                statusInfo.className,
                statusInfo.pulse && 'animate-pulse'
              )}
            >
              <statusInfo.icon className="w-3 h-3" aria-hidden="true" />
              <span>{statusInfo.shortLabel}</span>
            </Badge>
            {partyIndicator.show && (
              <Badge
                className={cn(
                  'text-xs px-2 py-0.5 font-bold shadow-sm',
                  partyIndicator.className
                )}
              >
                {partyIndicator.text === dict.yourTurn && (
                  <Zap className="w-2.5 h-2.5 ml-1" aria-hidden="true" />
                )}
                {partyIndicator.text}
              </Badge>
            )}
          </div>
        </div>
        {isUrgent && (
          <div className="absolute top-2 left-2">
            <Badge className="flex items-center gap-1.5 bg-gradient-to-r from-orange-500 to-red-500 text-white border-0 shadow-lg animate-pulse">
              <AlertTriangle className="w-3 h-3" />
              <span className="font-semibold text-xs">{dict.urgent}</span>
            </Badge>
          </div>
        )}
      </div>
      <button
        type="button"
        onClick={handleCardClick}
        aria-label={dict.viewDetailsAria.replace(
          '{{name}}',
          targetParty.firstName
        )}
        className="block w-full text-left cursor-pointer focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-purple-500"
      >
        <div className="relative h-64">
          {mainImage?.url ? (
            <Image
              src={getRelativeCloudinaryPath(mainImage.url)}
              alt={`תמונה של ${targetParty.firstName}`}
              fill
              className="object-cover object-center transition-transform duration-700 group-hover:scale-105"
              sizes="(max-width: 768px) 100vw, (max-width: 1200px) 50vw, 33vw"
            />
          ) : (
            <div className="w-full h-full bg-gradient-to-br from-slate-100 to-slate-200 flex items-center justify-center">
              <User className="w-20 h-20 text-slate-400" />
            </div>
          )}
          <div className="absolute inset-0 bg-gradient-to-t from-black/70 via-black/20 to-transparent" />
          <div className="absolute bottom-4 right-4 left-4 text-white">
            <div className="flex items-end justify-between">
              <div>
                <h3 className="text-2xl font-bold tracking-tight [text-shadow:0_2px_8px_rgba(0,0,0,0.8)]">
                  {targetParty.firstName}
                </h3>
                {age && (
                  <p className="text-lg font-medium text-white/90 [text-shadow:0_1px_4px_rgba(0,0,0,0.8)]">
                    {age}
                  </p>
                )}
              </div>
              <div className="p-2 rounded-full bg-white/20 backdrop-blur-sm">
                <Sparkles className="w-5 h-5 text-white" />
              </div>
            </div>
          </div>
        </div>
      </button>
      <div onClick={handleCardClick} className="cursor-pointer">
        <CardContent className="p-5 space-y-4">
          {statusInfo.description && (
            <div className="p-3 bg-gradient-to-r from-slate-50 to-gray-50 rounded-lg border border-slate-200">
              <div className="flex items-start gap-2">
                <statusInfo.icon className="w-4 h-4 text-slate-600 mt-0.5 flex-shrink-0" />
                <p className="text-sm text-slate-700 font-medium leading-relaxed">
                  {statusInfo.description}
                </p>
              </div>
            </div>
          )}
          <div className="grid grid-cols-2 gap-3">
            {/* Grid content remains the same */}
          </div>
          <div className="relative p-4 bg-gradient-to-r from-cyan-50/50 to-blue-50/50 border border-cyan-100/50 rounded-xl">
            <div className="flex items-start gap-3">
              <Quote className="w-4 h-4 text-cyan-500 mt-1 flex-shrink-0" />
              <div className="flex-1">
                <h4 className="text-sm font-bold text-cyan-800 mb-1">
                  {dict.whySpecial}
                </h4>
                <p className="text-sm text-cyan-700 leading-relaxed">
                  {reasonTeaser}
                </p>
              </div>
            </div>
            <div className="absolute top-0 right-0 w-6 h-6 bg-gradient-to-br from-cyan-200/50 to-blue-200/50 rounded-bl-xl"></div>
          </div>
          <div className="text-center py-2">
            <p className="text-xs text-gray-500 font-medium">
              {dict.clickForDetails}
            </p>
          </div>
        </CardContent>
      </div>
      {!isHistory && (
        <CardFooter className="p-4 bg-gradient-to-r from-gray-50/50 to-slate-50/50 border-t border-gray-100">
          {(suggestion.status === 'PENDING_FIRST_PARTY' && isFirstParty) ||
          (suggestion.status === 'PENDING_SECOND_PARTY' && !isFirstParty) ? (
            <div className="grid grid-cols-2 gap-3 w-full">
              <Button
                size="sm"
                variant="outline"
                className="w-full text-red-600 hover:text-red-700 hover:bg-red-50 border-red-200 rounded-xl font-medium transition-all duration-300"
                onClick={(e) => {
                  e.stopPropagation();
                  onDecline?.(suggestion);
                }}
              >
                <XCircle className="w-4 h-4 ml-2" />
                {dict.buttons.decline}
              </Button>
              <TooltipProvider>
                <Tooltip delayDuration={100}>
                  <TooltipTrigger asChild>
                    <div className="w-full">
                      <Button
                        size="sm"
                        variant="default"
                        className="w-full bg-gradient-to-r from-emerald-500 to-green-500 hover:from-emerald-600 hover:to-green-600 text-white shadow-lg hover:shadow-xl transition-all duration-300 rounded-xl font-medium"
                        disabled={isApprovalDisabled}
                        onClick={(e) => {
                          e.stopPropagation();
                          if (isApprovalDisabled) {
                            toast.info('לא ניתן לאשר הצעה חדשה', {
                              description: 'יש לך כבר הצעה אחרת בתהליך פעיל.',
                            });
                          } else {
                            onApprove?.(suggestion);
                          }
                        }}
                      >
                        <Heart className="w-4 h-4 ml-2" />
                        {dict.buttons.approve}
                      </Button>
                    </div>
                  </TooltipTrigger>
                  {isApprovalDisabled && (
                    <TooltipContent>
                      <p>{dict.buttons.approveDisabledTooltip}</p>
                    </TooltipContent>
                  )}
                </Tooltip>
              </TooltipProvider>
            </div>
          ) : (
            <div className="grid grid-cols-2 gap-3 w-full">
              <Button
                size="sm"
                variant="outline"
                className="w-full border-gray-200 hover:bg-cyan-50 hover:border-cyan-200 rounded-xl font-medium transition-all duration-300"
                onClick={(e) => {
                  e.stopPropagation();
                  onInquiry?.(suggestion);
                }}
              >
                <MessageCircle className="w-4 h-4 ml-2" />
                {dict.buttons.askMatchmaker}
              </Button>
              <Button
                size="sm"
                variant="default"
                className="w-full bg-gradient-to-r from-cyan-500 to-blue-500 hover:from-cyan-600 hover:to-blue-600 text-white shadow-lg hover:shadow-xl transition-all duration-300 rounded-xl font-medium"
                onClick={() => onClick(suggestion)}
              >
                <Eye className="w-4 h-4 ml-2" />
                {dict.buttons.viewDetails}
                <ChevronLeft className="w-3 h-3 mr-1" />
              </Button>
            </div>
          )}
        </CardFooter>
      )}
    </Card>
  );
};

export default MinimalSuggestionCard;
--- End of Content for MinimalSuggestionCard.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\suggestions\cards\SuggestionQuickView.tsx
--------------------------------------------------------------------------------
Content:
// src/app/components/suggestions/cards/SuggestionQuickView.tsx

import React from 'react';
import { Button } from '@/components/ui/button';
import {
  Heart,
  User,
  Clock,
  Eye,
  Scroll,
  GraduationCap,
  Briefcase,
  MapPin,
  MessageCircle,
  CheckCircle,
  XCircle,
} from 'lucide-react';
import type { ExtendedMatchSuggestion } from '../types';
import type { SuggestionsQuickViewDict } from '@/types/dictionary'; // ✨ Import dictionary type

interface SuggestionQuickViewProps {
  suggestion: ExtendedMatchSuggestion;
  userId?: string;
  onAction: (action: 'approve' | 'reject' | 'ask' | 'view') => void;
  dict: SuggestionsQuickViewDict; // ✨ Add dict prop
}

const SuggestionQuickView: React.FC<SuggestionQuickViewProps> = ({
  suggestion,
  userId,
  onAction,
  dict, // ✨ Destructure dict
}) => {
  const handleClick = (e: React.MouseEvent) => {
    e.stopPropagation();
  };

  const profile = userId
    ? suggestion.firstPartyId === userId
      ? suggestion.secondParty.profile
      : suggestion.firstParty.profile
    : suggestion.secondParty.profile;

  if (!profile) {
    return null;
  }

  return (
    <div
      className="bg-white/95 backdrop-blur-sm p-4 rounded-lg shadow-lg flex flex-col"
      onClick={handleClick}
    >
      <div className="flex-1 space-y-4 text-right overflow-y-auto max-h-96">
        <div className="grid grid-cols-2 gap-3">
          {profile.height && (
            <div className="flex items-center justify-end gap-2 text-sm text-gray-600">
              <span>
                {profile.height} {dict.unitCm}
              </span>
              <User className="w-4 h-4" />
            </div>
          )}

          {profile.maritalStatus && (
            <div className="flex items-center justify-end gap-2 text-sm text-gray-600">
              <span>{profile.maritalStatus}</span>
              <Heart className="w-4 h-4" />
            </div>
          )}

          {profile.religiousLevel && (
            <div className="flex items-center justify-end gap-2 text-sm text-gray-600">
              <span>{profile.religiousLevel}</span>
              <Scroll className="w-4 h-4" />
            </div>
          )}

          {profile.education && (
            <div className="flex items-center justify-end gap-2 text-sm text-gray-600">
              <span>{profile.education}</span>
              <GraduationCap className="w-4 h-4" />
            </div>
          )}
        </div>

        {profile.about && (
          <div className="border-t border-gray-100 pt-3">
            <h4 className="text-sm font-medium mb-1">{dict.aboutTitle}</h4>
            <p className="text-sm text-gray-600 leading-relaxed line-clamp-3">
              {profile.about}
            </p>
          </div>
        )}

        {suggestion.matchingReason && (
          <div className="border-t border-gray-100 pt-3">
            <h4 className="text-sm font-medium mb-1">{dict.reasonTitle}</h4>
            <p className="text-sm text-gray-600 leading-relaxed line-clamp-3">
              {suggestion.matchingReason}
            </p>
          </div>
        )}

        <div className="border-t border-gray-100 pt-3 space-y-2">
          {profile.city && (
            <div className="flex items-center justify-end gap-2 text-sm text-gray-600">
              <span>{profile.city}</span>
              <MapPin className="w-4 h-4" />
            </div>
          )}

          {profile.occupation && (
            <div className="flex items-center justify-end gap-2 text-sm text-gray-600">
              <span>{profile.occupation}</span>
              <Briefcase className="w-4 h-4" />
            </div>
          )}
        </div>

        {suggestion.decisionDeadline && (
          <div className="border-t border-gray-100 pt-3">
            <div className="flex items-center justify-end gap-2 text-sm text-yellow-600">
              <span>
                {dict.deadlineText.replace(
                  '{{date}}',
                  new Date(suggestion.decisionDeadline).toLocaleDateString(
                    'he-IL'
                  )
                )}
              </span>
              <Clock className="w-4 h-4" />
            </div>
          </div>
        )}
      </div>

      <div className="grid grid-cols-2 gap-2 mt-4 pt-3 border-t border-gray-100">
        <Button
          variant="default"
          className="w-full"
          onClick={() => onAction('view')}
        >
          <Eye className="w-4 h-4 ml-2" />
          {dict.buttons.viewProfile}
        </Button>

        <Button
          variant="default"
          className="w-full bg-green-600 hover:bg-green-700"
          onClick={() => onAction('approve')}
        >
          <CheckCircle className="w-4 h-4 ml-2" />
          {dict.buttons.approve}
        </Button>

        <Button
          variant="outline"
          className="w-full text-red-600 hover:text-red-700 hover:bg-red-50"
          onClick={() => onAction('reject')}
        >
          <XCircle className="w-4 h-4 ml-2" />
          {dict.buttons.decline}
        </Button>

        <Button
          variant="outline"
          className="w-full"
          onClick={() => onAction('ask')}
        >
          <MessageCircle className="w-4 h-4 ml-2" />
          {dict.buttons.ask}
        </Button>
      </div>
    </div>
  );
};

export default SuggestionQuickView;
--- End of Content for SuggestionQuickView.tsx ---

================================================================================
Directory: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\suggestions\compatibility
================================================================================

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\suggestions\compatibility\MatchCompatibilityView.tsx
--------------------------------------------------------------------------------
Content:
// src/app/components/suggestions/compatibility/MatchCompatibilityView.tsx

import React from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Progress } from '@/components/ui/progress';
import { Badge } from '@/components/ui/badge';
import {
  Heart,
  User,
  Scroll,
  GraduationCap,
  MapPin,
  BookOpen,
  Home,
  Languages,
  Star,
  CheckCircle,
  XCircle,
  AlertTriangle,
  TrendingUp,
  Target,
  Users,
} from 'lucide-react';
import { cn } from '@/lib/utils';
import type { PartyInfo } from '../types';
import type { SuggestionsCompatibilityDict } from '@/types/dictionary';

interface CompatibilityItem {
  criterion: string;
  icon: React.ReactNode;
  compatible: boolean;
  reason: string;
  first?: string | number | null;
  second?: string | number | null;
  importance: 'high' | 'medium' | 'low';
  category: 'basic' | 'lifestyle' | 'values' | 'preferences';
}

interface MatchCompatibilityProps {
  firstParty: PartyInfo;
  secondParty: PartyInfo;
  matchingReason?: string | null;
  className?: string;
  dict: SuggestionsCompatibilityDict;
}

const calculateAge = (birthDate?: Date | string | null): number | null => {
  if (!birthDate) return null;
  try {
    const today = new Date();
    const birth = new Date(birthDate);
    if (isNaN(birth.getTime())) return null;
    let age = today.getFullYear() - birth.getFullYear();
    const monthDiff = today.getMonth() - birth.getMonth();
    if (
      monthDiff < 0 ||
      (monthDiff === 0 && today.getDate() < birth.getDate())
    ) {
      age--;
    }
    return age >= 0 ? age : null;
  } catch (error) {
    console.error('Error calculating age:', error);
    return null;
  }
};

const getImportanceColor = (importance: string) => {
  switch (importance) {
    case 'high':
      return 'from-red-400 to-red-500';
    case 'medium':
      return 'from-amber-400 to-orange-500';
    case 'low':
      return 'from-cyan-400 to-blue-500';
    default:
      return 'from-gray-400 to-gray-500';
  }
};

const getCategoryColor = (category: string) => {
  switch (category) {
    case 'basic':
      return 'from-cyan-50 to-blue-50';
    case 'lifestyle':
      return 'from-emerald-50 to-green-50';
    case 'values':
      return 'from-blue-50 to-cyan-50';
    case 'preferences':
      return 'from-green-50 to-emerald-50';
    default:
      return 'from-gray-50 to-slate-50';
  }
};

const CompatibilityCard: React.FC<{
  item: CompatibilityItem;
  firstParty: PartyInfo;
  secondParty: PartyInfo;
  dict: SuggestionsCompatibilityDict;
}> = ({ item, firstParty, secondParty, dict }) => {
  const importanceColor = getImportanceColor(item.importance);
  const categoryColor = getCategoryColor(item.category);

  return (
    <Card
      className={cn(
        'border-0 shadow-lg transition-all duration-300 hover:shadow-xl hover:-translate-y-1 overflow-hidden bg-gradient-to-br',
        categoryColor
      )}
    >
      <CardContent className="p-5">
        <div className="flex items-start gap-4">
          <div
            className={cn(
              'flex-shrink-0 w-12 h-12 rounded-xl bg-gradient-to-br text-white flex items-center justify-center shadow-md',
              item.compatible
                ? 'from-emerald-500 to-green-500'
                : 'from-red-400 to-rose-500'
            )}
          >
            {item.icon}
          </div>
          <div className="flex-1 space-y-3">
            <div className="flex items-start justify-between gap-2">
              <div className="flex-1">
                <div className="flex items-center gap-2 mb-1">
                  <h4 className="font-bold text-gray-800 text-base">
                    {item.criterion}
                  </h4>
                  <Badge
                    variant="outline"
                    className={cn(
                      'text-xs px-2 py-0.5 font-semibold border-0 text-white',
                      importanceColor
                    )}
                  >
                    {item.importance === 'high'
                      ? dict.importance.high
                      : item.importance === 'medium'
                        ? dict.importance.medium
                        : dict.importance.low}
                  </Badge>
                </div>
                <p
                  className={cn(
                    'text-sm font-medium leading-relaxed',
                    item.compatible ? 'text-emerald-700' : 'text-red-700'
                  )}
                >
                  {item.reason}
                </p>
              </div>
              <div className="flex-shrink-0">
                {item.compatible ? (
                  <CheckCircle className="w-6 h-6 text-emerald-500" />
                ) : (
                  <XCircle className="w-6 h-6 text-red-500" />
                )}
              </div>
            </div>
            {(item.first != null || item.second != null) && (
              <div className="grid grid-cols-2 gap-3 pt-3 border-t border-white/50">
                <div className="text-center bg-white/60 backdrop-blur-sm rounded-lg p-2">
                  <div className="text-xs text-gray-500 font-medium mb-1">
                    {firstParty.firstName}
                  </div>
                  <div className="font-semibold text-gray-800 text-sm">
                    {item.first ?? dict.card.notSpecified}
                  </div>
                </div>
                <div className="text-center bg-white/60 backdrop-blur-sm rounded-lg p-2">
                  <div className="text-xs text-gray-500 font-medium mb-1">
                    {secondParty.firstName}
                  </div>
                  <div className="font-semibold text-gray-800 text-sm">
                    {item.second ?? dict.card.notSpecified}
                  </div>
                </div>
              </div>
            )}
          </div>
        </div>
      </CardContent>
    </Card>
  );
};

const CategorySection: React.FC<{
  title: string;
  icon: React.ElementType;
  items: CompatibilityItem[];
  color: string;
  firstParty: PartyInfo;
  secondParty: PartyInfo;
  dict: SuggestionsCompatibilityDict;
}> = ({ title, icon: Icon, items, color, firstParty, secondParty, dict }) => {
  const compatibleCount = items.filter((item) => item.compatible).length;
  const compatibilityRate =
    items.length > 0 ? (compatibleCount / items.length) * 100 : 0;

  if (items.length === 0) return null;

  return (
    <div className="space-y-4">
      <div className="flex items-center justify-between">
        <div className="flex items-center gap-3">
          <div
            className={cn(
              'p-2 rounded-lg bg-gradient-to-r text-white shadow-md',
              color
            )}
          >
            <Icon className="w-5 h-5" />
          </div>
          <div>
            <h3 className="text-lg font-bold text-gray-800">{title}</h3>
            <p className="text-sm text-gray-600">
              {dict.categorySubtitle
                .replace('{{compatibleCount}}', compatibleCount.toString())
                .replace('{{totalCount}}', items.length.toString())}
            </p>
          </div>
        </div>
        <div className="text-center">
          <div
            className={cn(
              'text-2xl font-bold',
              compatibilityRate >= 70
                ? 'text-emerald-600'
                : compatibilityRate >= 50
                  ? 'text-amber-600'
                  : 'text-red-600'
            )}
          >
            {Math.round(compatibilityRate)}%
          </div>
          <div className="text-xs text-gray-500">{dict.compatibilityLabel}</div>
        </div>
      </div>
      <ul className="grid gap-4">
        {items.map((item, index) => (
          <li key={index}>
            <CompatibilityCard
              item={item}
              firstParty={firstParty}
              secondParty={secondParty}
              dict={dict}
            />
          </li>
        ))}
      </ul>
    </div>
  );
};

const MatchCompatibilityView: React.FC<MatchCompatibilityProps> = ({
  firstParty,
  secondParty,
  matchingReason,
  className,
  dict,
}) => {
  if (!firstParty.profile || !secondParty.profile) {
    return (
      <Card className={cn('shadow-xl border-0 overflow-hidden', className)}>
        <CardHeader className="bg-gradient-to-r from-cyan-50/80 via-white to-emerald-50/50 border-b border-gray-100">
          <CardTitle className="flex items-center gap-3 text-2xl">
            <div className="p-3 rounded-xl bg-gradient-to-r from-cyan-500 to-emerald-500 text-white shadow-lg">
              <Heart className="w-6 h-6" />
            </div>
            <div>
              <span className="font-bold text-gray-800">{dict.mainTitle}</span>
            </div>
          </CardTitle>
        </CardHeader>
        <CardContent className="p-8">
          <div className="text-center py-12">
            <AlertTriangle className="w-16 h-16 mx-auto mb-4 text-gray-400" />
            <h3 className="text-lg font-semibold text-gray-600 mb-2">
              {dict.errorTitle}
            </h3>
            <p className="text-gray-500 max-w-md mx-auto">
              {dict.errorDescription}
            </p>
          </div>
        </CardContent>
      </Card>
    );
  }

  const firstProfile = firstParty.profile;
  const secondProfile = secondParty.profile;

  const firstPartyAge = calculateAge(firstProfile.birthDate);
  const secondPartyAge = calculateAge(secondProfile.birthDate);

  const isWithinRange = (
    value: number | null | undefined,
    min: number | null | undefined,
    max: number | null | undefined
  ): boolean => {
    if (value == null) return false;
    const minOk = min == null || value >= min;
    const maxOk = max == null || value <= max;
    return minOk && maxOk;
  };

  const isInPreferredList = (
    value: string | null | undefined,
    preferredList: string[] | null | undefined
  ): boolean => {
    if (value == null) return false;
    if (preferredList == null || preferredList.length === 0) return true;
    return preferredList.includes(value);
  };

  const calculateCompatibilityItems = (): CompatibilityItem[] => {
    const items: CompatibilityItem[] = [];

    // Age
    if (firstPartyAge != null && secondPartyAge != null) {
      const compatible =
        isWithinRange(
          secondPartyAge,
          firstProfile.preferredAgeMin,
          firstProfile.preferredAgeMax
        ) &&
        isWithinRange(
          firstPartyAge,
          secondProfile.preferredAgeMin,
          secondProfile.preferredAgeMax
        );
      items.push({
        criterion: dict.criteria.age,
        icon: <User className="w-6 h-6" />,
        compatible,
        reason: compatible
          ? dict.reasons.mutualMatch.replace('{{criterion}}', dict.criteria.age)
          : dict.reasons.mismatch.replace('{{criterion}}', dict.criteria.age),
        first: firstPartyAge,
        second: secondPartyAge,
        importance: 'high',
        category: 'basic',
      });
    }

    // Height
    if (firstProfile.height != null && secondProfile.height != null) {
      const compatible =
        isWithinRange(
          secondProfile.height,
          firstProfile.preferredHeightMin,
          firstProfile.preferredHeightMax
        ) &&
        isWithinRange(
          firstProfile.height,
          secondProfile.preferredHeightMin,
          secondProfile.preferredHeightMax
        );
      items.push({
        criterion: dict.criteria.height,
        icon: <TrendingUp className="w-6 h-6" />,
        compatible,
        reason: compatible
          ? dict.reasons.mutualMatch.replace(
              '{{criterion}}',
              dict.criteria.height
            )
          : dict.reasons.mismatch.replace(
              '{{criterion}}',
              dict.criteria.height
            ),
        first: `${firstProfile.height} ${dict.unitCm}`,
        second: `${secondProfile.height} ${dict.unitCm}`,
        importance: 'medium',
        category: 'basic',
      });
    }

    // Location
    if (firstProfile.city != null && secondProfile.city != null) {
      const compatible =
        isInPreferredList(
          secondProfile.city,
          firstProfile.preferredLocations
        ) &&
        isInPreferredList(firstProfile.city, secondProfile.preferredLocations);
      items.push({
        criterion: dict.criteria.location,
        icon: <MapPin className="w-6 h-6" />,
        compatible,
        reason: compatible
          ? dict.reasons.mutualMatch.replace(
              '{{criterion}}',
              dict.criteria.location
            )
          : dict.reasons.mismatch.replace(
              '{{criterion}}',
              dict.criteria.location
            ),
        first: firstProfile.city,
        second: secondProfile.city,
        importance: 'high',
        category: 'lifestyle',
      });
    }

    // Religious Level
    if (
      firstProfile.religiousLevel != null &&
      secondProfile.religiousLevel != null
    ) {
      const compatible =
        isInPreferredList(
          secondProfile.religiousLevel,
          firstProfile.preferredReligiousLevels
        ) &&
        isInPreferredList(
          firstProfile.religiousLevel,
          secondProfile.preferredReligiousLevels
        );
      items.push({
        criterion: dict.criteria.religiousLevel,
        icon: <Scroll className="w-6 h-6" />,
        compatible,
        reason: compatible
          ? dict.reasons.mutualMatch.replace(
              '{{criterion}}',
              dict.criteria.religiousLevel
            )
          : dict.reasons.mismatch.replace(
              '{{criterion}}',
              dict.criteria.religiousLevel
            ),
        first: firstProfile.religiousLevel,
        second: secondProfile.religiousLevel,
        importance: 'high',
        category: 'values',
      });
    }

    // Education
    if (firstProfile.education != null && secondProfile.education != null) {
      const compatible =
        isInPreferredList(
          secondProfile.education,
          firstProfile.preferredEducation
        ) &&
        isInPreferredList(
          firstProfile.education,
          secondProfile.preferredEducation
        );
      items.push({
        criterion: dict.criteria.education,
        icon: <GraduationCap className="w-6 h-6" />,
        compatible,
        reason: compatible
          ? dict.reasons.mutualMatch.replace(
              '{{criterion}}',
              dict.criteria.education
            )
          : dict.reasons.mismatch.replace(
              '{{criterion}}',
              dict.criteria.education
            ),
        first: firstProfile.education,
        second: secondProfile.education,
        importance: 'medium',
        category: 'preferences',
      });
    }

    // Occupation
    if (firstProfile.occupation != null && secondProfile.occupation != null) {
      const compatible =
        isInPreferredList(
          secondProfile.occupation,
          firstProfile.preferredOccupations
        ) &&
        isInPreferredList(
          firstProfile.occupation,
          secondProfile.preferredOccupations
        );
      items.push({
        criterion: dict.criteria.occupation,
        icon: <BookOpen className="w-6 h-6" />,
        compatible,
        reason: compatible
          ? dict.reasons.mutualMatch.replace(
              '{{criterion}}',
              dict.criteria.occupation
            )
          : dict.reasons.mismatch.replace(
              '{{criterion}}',
              dict.criteria.occupation
            ),
        first: firstProfile.occupation,
        second: secondProfile.occupation,
        importance: 'medium',
        category: 'lifestyle',
      });
    }

    // Origin
    if (firstProfile.origin != null && secondProfile.origin != null) {
      items.push({
        criterion: dict.criteria.origin,
        icon: <Home className="w-6 h-6" />,
        compatible: true,
        reason:
          firstProfile.origin === secondProfile.origin
            ? dict.reasons.sameOrigin
            : dict.reasons.differentOrigin,
        first: firstProfile.origin,
        second: secondProfile.origin,
        importance: 'low',
        category: 'values',
      });
    }

    // Language
    if (
      firstProfile.nativeLanguage != null &&
      secondProfile.nativeLanguage != null
    ) {
      const sharedLanguage =
        firstProfile.nativeLanguage === secondProfile.nativeLanguage ||
        (firstProfile.additionalLanguages?.includes(
          secondProfile.nativeLanguage
        ) ??
          false) ||
        (secondProfile.additionalLanguages?.includes(
          firstProfile.nativeLanguage
        ) ??
          false);
      items.push({
        criterion: dict.criteria.language,
        icon: <Languages className="w-6 h-6" />,
        compatible: sharedLanguage,
        reason: sharedLanguage
          ? dict.reasons.sharedLanguage
          : dict.reasons.noSharedLanguage,
        first: firstProfile.nativeLanguage,
        second: secondProfile.nativeLanguage,
        importance: 'medium',
        category: 'lifestyle',
      });
    }

    return items;
  };

  const compatibilityItems = calculateCompatibilityItems();
  const compatibleCount = compatibilityItems.filter(
    (item) => item.compatible
  ).length;
  const compatibilityScore =
    compatibilityItems.length > 0
      ? Math.round((compatibleCount / compatibilityItems.length) * 100)
      : 0;

  const basicItems = compatibilityItems.filter(
    (item) => item.category === 'basic'
  );
  const lifestyleItems = compatibilityItems.filter(
    (item) => item.category === 'lifestyle'
  );
  const valuesItems = compatibilityItems.filter(
    (item) => item.category === 'values'
  );
  const preferencesItems = compatibilityItems.filter(
    (item) => item.category === 'preferences'
  );

  const getScoreColor = (score: number) => {
    if (score >= 80) return 'text-emerald-600';
    if (score >= 60) return 'text-cyan-600';
    if (score >= 40) return 'text-amber-600';
    return 'text-red-600';
  };

  const getScoreDescription = (score: number) => {
    if (score >= 80) return dict.overallScore.descriptionExcellent;
    if (score >= 60) return dict.overallScore.descriptionGood;
    if (score >= 40) return dict.overallScore.descriptionModerate;
    return dict.overallScore.descriptionChallenging;
  };

  return (
    <Card className={cn('shadow-xl border-0 overflow-hidden', className)}>
      <CardHeader className="bg-gradient-to-r from-cyan-50/80 via-white to-emerald-50/50 border-b border-gray-100">
        <CardTitle className="flex items-center gap-3 text-2xl">
          <div className="p-3 rounded-xl bg-gradient-to-r from-cyan-500 to-emerald-500 text-white shadow-lg">
            <Heart className="w-6 h-6" />
          </div>
          <div>
            <span className="font-bold text-gray-800">{dict.mainTitle}</span>
            <p className="text-sm text-gray-600 font-normal mt-1">
              {dict.mainSubtitle}
            </p>
          </div>
        </CardTitle>
      </CardHeader>

      <CardContent className="p-8 space-y-8">
        <Card className="border-0 shadow-lg bg-gradient-to-r from-slate-50 to-gray-50">
          <CardContent className="p-6">
            <div className="text-center space-y-4">
              <div className="flex items-center justify-center gap-3">
                <Star className="w-8 h-8 text-yellow-500 fill-current" />
                <div>
                  <div
                    className={cn(
                      'text-4xl font-bold',
                      getScoreColor(compatibilityScore)
                    )}
                  >
                    {compatibilityScore}%
                  </div>
                  <div className="text-lg font-semibold text-gray-700">
                    {getScoreDescription(compatibilityScore)}
                  </div>
                </div>
              </div>
              <Progress value={compatibilityScore} className="h-3" />
              <div className="flex justify-between text-sm text-gray-600">
                <span>
                  {dict.overallScore.progressText
                    .replace('{{compatibleCount}}', compatibleCount.toString())
                    .replace(
                      '{{totalCount}}',
                      compatibilityItems.length.toString()
                    )}
                </span>
                <span>
                  {dict.overallScore.overallScoreLabel.replace(
                    '{{score}}',
                    compatibilityScore.toString()
                  )}
                </span>
              </div>
            </div>
          </CardContent>
        </Card>

        {compatibilityItems.length > 0 ? (
          <div className="space-y-8">
            <CategorySection
              title={dict.categoryTitles.basic}
              icon={User}
              items={basicItems}
              color="from-cyan-500 to-blue-500"
              firstParty={firstParty}
              secondParty={secondParty}
              dict={dict}
            />
            <CategorySection
              title={dict.categoryTitles.values}
              icon={Heart}
              items={valuesItems}
              color="from-emerald-500 to-green-500"
              firstParty={firstParty}
              secondParty={secondParty}
              dict={dict}
            />
            <CategorySection
              title={dict.categoryTitles.lifestyle}
              icon={Target}
              items={lifestyleItems}
              color="from-blue-500 to-cyan-500"
              firstParty={firstParty}
              secondParty={secondParty}
              dict={dict}
            />
            <CategorySection
              title={dict.categoryTitles.preferences}
              icon={Star}
              items={preferencesItems}
              color="from-green-500 to-emerald-500"
              firstParty={firstParty}
              secondParty={secondParty}
              dict={dict}
            />
          </div>
        ) : (
          <div className="text-center py-12">
            <AlertTriangle className="w-16 h-16 mx-auto mb-4 text-gray-400" />
            <h3 className="text-lg font-semibold text-gray-600 mb-2">
              {dict.noDataTitle}
            </h3>
            <p className="text-gray-500 max-w-md mx-auto">
              {dict.noDataDescription}
            </p>
          </div>
        )}

        {matchingReason && (
          <Card className="border-0 shadow-lg bg-gradient-to-r from-cyan-50 to-emerald-50">
            <CardContent className="p-6">
              <div className="flex items-start gap-4">
                <div className="p-3 rounded-xl bg-gradient-to-r from-cyan-500 to-emerald-500 text-white shadow-md flex-shrink-0">
                  <Users className="w-6 h-6" />
                </div>
                <div className="flex-1">
                  <h3 className="font-bold text-cyan-800 text-lg mb-2">
                    {dict.matchmakerRationaleTitle}
                  </h3>
                  <p className="text-cyan-700 leading-relaxed">
                    {matchingReason}
                  </p>
                </div>
              </div>
            </CardContent>
          </Card>
        )}
      </CardContent>
    </Card>
  );
};

export default MatchCompatibilityView;
--- End of Content for MatchCompatibilityView.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\suggestions\compatibility\UserAiAnalysisDisplay.tsx
--------------------------------------------------------------------------------
Content:
// src/app/components/suggestions/compatibility/UserAiAnalysisDisplay.tsx
'use client';

import React from 'react';
import {
  Card,
  CardContent,
  CardHeader,
  CardTitle,
  CardDescription,
} from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Progress } from '@/components/ui/progress';
import {
  Heart,
  Lightbulb,
  MessageSquareQuote,
  Sparkles,
  TrendingUp,
  Target,
  Brain,
  Users,
  CheckCircle,
  AlertCircle,
  Star,
} from 'lucide-react';
import type { AiSuggestionAnalysisResult } from '@/lib/services/aiService';
import { cn } from '@/lib/utils';

interface UserAiAnalysisDisplayProps {
  analysis: AiSuggestionAnalysisResult;
}

// Score color helper עם הפלטה החדשה
const getScoreColor = (score: number) => {
  if (score >= 85)
    return {
      text: 'text-emerald-600',
      bg: 'from-emerald-50 to-green-50',
      progress: 'bg-gradient-to-r from-emerald-500 to-green-500',
      badge: 'bg-gradient-to-r from-emerald-500 to-green-500',
    };
  if (score >= 70)
    return {
      text: 'text-cyan-600',
      bg: 'from-cyan-50 to-blue-50',
      progress: 'bg-gradient-to-r from-cyan-500 to-blue-500',
      badge: 'bg-gradient-to-r from-cyan-500 to-blue-500',
    };
  if (score >= 55)
    return {
      text: 'text-blue-600',
      bg: 'from-blue-50 to-cyan-50',
      progress: 'bg-gradient-to-r from-blue-500 to-cyan-500',
      badge: 'bg-gradient-to-r from-blue-500 to-cyan-500',
    };
  return {
    text: 'text-amber-600',
    bg: 'from-amber-50 to-orange-50',
    progress: 'bg-gradient-to-r from-amber-500 to-orange-500',
    badge: 'bg-gradient-to-r from-amber-500 to-orange-500',
  };
};

// Score interpretation helper
const getScoreInterpretation = (score: number) => {
  if (score >= 85)
    return {
      level: 'התאמה מעולה',
      description: 'רמת התאמה גבוהה מאוד עם פוטנציאל רב להצלחה',
      icon: <Star className="w-5 h-5" fill="currentColor" />,
    };
  if (score >= 70)
    return {
      level: 'התאמה טובה',
      description: 'בסיס חזק לקשר משמעותי עם אתגרים מינימליים',
      icon: <CheckCircle className="w-5 h-5" />,
    };
  if (score >= 55)
    return {
      level: 'התאמה בינונית',
      description: 'פוטנציאל טוב עם נקודות לעבודה משותפת',
      icon: <Target className="w-5 h-5" />,
    };
  return {
    level: 'התאמה מאתגרת',
    description: 'דורש השקעה ותקשורת מעמיקה יותר',
    icon: <AlertCircle className="w-5 h-5" />,
  };
};

const Section: React.FC<{
  title: string;
  icon: React.ElementType;
  iconColorClass: string;
  bgColorClass: string;
  children: React.ReactNode;
}> = ({ title, icon: Icon, iconColorClass, bgColorClass, children }) => (
  <Card className={cn('overflow-hidden border-0 shadow-lg', bgColorClass)}>
    <CardHeader className="pb-4">
      <CardTitle className="flex items-center gap-3 text-xl">
        <div
          className={cn(
            'p-3 rounded-xl shadow-md',
            iconColorClass.replace('text-', 'bg-').replace('-600', '-100')
          )}
        >
          <Icon className={cn('w-6 h-6', iconColorClass)} />
        </div>
        <span className="font-bold text-gray-800">{title}</span>
      </CardTitle>
    </CardHeader>
    <CardContent className="pt-0">{children}</CardContent>
  </Card>
);

const CompatibilityPoint: React.FC<{
  point: { area: string; explanation: string };
  index: number;
}> = ({ point, index }) => (
  <div className="group p-4 bg-white/70 backdrop-blur-sm rounded-xl border border-emerald-100 shadow-sm hover:shadow-md transition-all duration-300 hover:-translate-y-1">
    <div className="flex items-start gap-3">
      <div className="flex-shrink-0 w-8 h-8 rounded-full bg-gradient-to-r from-emerald-400 to-green-500 text-white flex items-center justify-center text-sm font-bold shadow-md">
        {index + 1}
      </div>
      <div className="flex-1 space-y-2">
        <h4 className="font-semibold text-emerald-800 text-base leading-tight">
          {point.area}
        </h4>
        <p className="text-sm text-emerald-900/80 leading-relaxed">
          {point.explanation}
        </p>
      </div>
    </div>
  </div>
);

const ConsiderationPoint: React.FC<{
  point: { area: string; explanation: string };
  index: number;
}> = ({ point, index }) => (
  <div className="group p-4 bg-white/70 backdrop-blur-sm rounded-xl border border-cyan-100 shadow-sm hover:shadow-md transition-all duration-300 hover:-translate-y-1">
    <div className="flex items-start gap-3">
      <div className="flex-shrink-0 w-8 h-8 rounded-full bg-gradient-to-r from-cyan-400 to-blue-500 text-white flex items-center justify-center text-sm font-bold shadow-md">
        {index + 1}
      </div>
      <div className="flex-1 space-y-2">
        <h4 className="font-semibold text-cyan-800 text-base leading-tight">
          {point.area}
        </h4>
        <p className="text-sm text-cyan-900/80 leading-relaxed">
          {point.explanation}
        </p>
      </div>
    </div>
  </div>
);

const ConversationStarter: React.FC<{
  starter: string;
  index: number;
}> = ({ starter, index }) => (
  <div className="group flex items-start gap-3 p-3 bg-white/60 backdrop-blur-sm rounded-lg border border-blue-100 hover:bg-white/80 transition-all duration-300 hover:shadow-sm">
    <div className="flex-shrink-0 w-6 h-6 rounded-full bg-gradient-to-r from-blue-400 to-cyan-500 text-white flex items-center justify-center text-xs font-bold shadow-sm">
      {index + 1}
    </div>
    <p className="text-sm text-blue-900 leading-relaxed font-medium">
      {starter}
    </p>
  </div>
);

const UserAiAnalysisDisplay: React.FC<UserAiAnalysisDisplayProps> = ({
  analysis,
}) => {
  const scoreColors = getScoreColor(analysis.overallScore);
  const scoreInterpretation = getScoreInterpretation(analysis.overallScore);

  return (
    <div className="space-y-8 p-2">
      {/* Header Summary */}
      <Card
        className={cn(
          'text-center border-0 shadow-xl overflow-hidden bg-gradient-to-br',
          scoreColors.bg
        )}
      >
        <CardContent className="p-8 relative">
          {/* Background decoration */}
          <div className="absolute top-0 right-0 w-32 h-32 bg-white/10 rounded-full blur-2xl"></div>
          <div className="absolute bottom-0 left-0 w-24 h-24 bg-white/10 rounded-full blur-xl"></div>

          <div className="relative z-10 space-y-6">
            <div className="flex justify-center mb-4">
              <div
                className={cn('p-4 rounded-2xl shadow-lg', scoreColors.badge)}
              >
                <Brain className="w-8 h-8 text-white" />
              </div>
            </div>

            <div className="space-y-3">
              <h2 className="text-3xl font-bold text-gray-800 tracking-tight">
                {analysis.matchTitle}
              </h2>
              <p className="text-lg text-gray-700 max-w-2xl mx-auto leading-relaxed">
                {analysis.matchSummary}
              </p>
            </div>

            <div className="space-y-4">
              <div className="flex items-center justify-center gap-3">
                {scoreInterpretation.icon}
                <Badge
                  className={cn(
                    'text-xl font-bold px-6 py-3 rounded-2xl text-white border-0 shadow-lg',
                    scoreColors.badge
                  )}
                >
                  ציון התאמה: {analysis.overallScore}%
                </Badge>
              </div>

              <div className="max-w-md mx-auto space-y-2">
                <Progress
                  value={analysis.overallScore}
                  className="h-3 bg-white/50"
                />
                <div className="flex justify-between text-sm font-medium text-gray-600">
                  <span>{scoreInterpretation.level}</span>
                  <span>{analysis.overallScore}%</span>
                </div>
                <p className="text-sm text-gray-600 text-center">
                  {scoreInterpretation.description}
                </p>
              </div>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Compatibility Points */}
      <Section
        title="נקודות חיבור חזקות"
        icon={Heart}
        iconColorClass="text-emerald-600"
        bgColorClass="bg-gradient-to-br from-emerald-50/80 to-green-50/60"
      >
        <ul className="space-y-4">
          {analysis.compatibilityPoints.length > 0 ? (
            analysis.compatibilityPoints.map((point, index) => (
              // Each item is now a <li>
              <li key={index}>
                <CompatibilityPoint point={point} index={index} />
              </li>
            ))
          ) : (
            <div className="text-center py-8 text-gray-500">
              <Heart className="w-12 h-12 mx-auto mb-3 opacity-50" />
              <p>לא נמצאו נקודות חיבור ספציפיות בניתוח</p>
            </div>
          )}
        </ul>
      </Section>

      {/* Points to Consider */}
      <Section
        title="נקודות למחשבה וצמיחה"
        icon={Lightbulb}
        iconColorClass="text-cyan-600"
        bgColorClass="bg-gradient-to-br from-cyan-50/80 to-blue-50/60"
      >
        <div className="space-y-4">
          {analysis.pointsToConsider.length > 0 ? (
            analysis.pointsToConsider.map((point, index) => (
              <ConsiderationPoint key={index} point={point} index={index} />
            ))
          ) : (
            <div className="text-center py-8 text-gray-500">
              <Lightbulb className="w-12 h-12 mx-auto mb-3 opacity-50" />
              <p>לא נמצאו נקודות מיוחדות לתשומת לב</p>
            </div>
          )}
        </div>
      </Section>

      {/* Conversation Starters */}
      <Section
        title="נושאים מומלצים לפתיחת שיחה"
        icon={MessageSquareQuote}
        iconColorClass="text-blue-600"
        bgColorClass="bg-gradient-to-br from-blue-50/80 to-cyan-50/60"
      >
        <ul className="space-y-3">
          {analysis.suggestedConversationStarters.length > 0 ? (
            analysis.suggestedConversationStarters.map((starter, index) => (
              // Each item is now a <li>
              <li key={index}>
                <ConversationStarter starter={starter} index={index} />
              </li>
            ))
          ) : (
            <div className="text-center py-8 text-gray-500">
              <MessageSquareQuote className="w-12 h-12 mx-auto mb-3 opacity-50" />
              <p>לא נמצאו הצעות ספציפיות לפתיחת שיחה</p>
            </div>
          )}
        </ul>
      </Section>

      {/* Bottom Note */}
      <Card className="border-0 shadow-lg bg-gradient-to-r from-cyan-50 to-emerald-50">
        <CardContent className="p-6 text-center">
          <div className="flex items-center justify-center gap-2 mb-3">
            <Sparkles className="w-5 h-5 text-cyan-600" />
            <span className="font-semibold text-cyan-800">הערה חשובה</span>
          </div>
          <p className="text-sm text-cyan-700 leading-relaxed max-w-2xl mx-auto">
            זכרו, ניתוח זה הוא כלי עזר והמלצה בלבד. הוא נועד להאיר נקודות למחשבה
            ולעורר שיחה. הכימיה האמיתית והחיבור העמוק נוצרים במפגש האנושי.
          </p>
        </CardContent>
      </Card>
    </div>
  );
};

export default UserAiAnalysisDisplay;
--- End of Content for UserAiAnalysisDisplay.tsx ---

================================================================================
Directory: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\suggestions\dialogs
================================================================================

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\suggestions\dialogs\AskMatchmakerDialog.tsx
--------------------------------------------------------------------------------
Content:
// src/app/components/suggestions/dialogs/AskMatchmakerDialog.tsx
import React, { useState, useMemo } from 'react';
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogFooter,
  DialogDescription,
} from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';
import { Textarea } from '@/components/ui/textarea';
import { Label } from '@/components/ui/label';
import { Card, CardContent } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import {
  MessageCircle,
  Send,
  AlertCircle,
  Heart,
  Users,
  BookOpen,
  Calendar,
  Lightbulb,
  Clock,
  Sparkles,
} from 'lucide-react';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { Avatar, AvatarFallback } from '@/components/ui/avatar';
import { cn } from '@/lib/utils';
import type { AskMatchmakerDict } from '@/types/dictionary';
interface AskMatchmakerDialogProps {
  isOpen: boolean;
  onClose: () => void;
  onSubmit: (question: string) => Promise<void>;
  matchmakerName?: string;
  dict: AskMatchmakerDict;
}
const iconMap: { [key: string]: React.ElementType } = {
  values: Heart,
  family: Users,
  career: BookOpen,
  personality: Sparkles,
  future: Calendar,
  other: Lightbulb,
};
const colorMap: { [key: string]: string } = {
  values: 'from-cyan-500 to-blue-500',
  family: 'from-emerald-500 to-green-500',
  career: 'from-blue-500 to-cyan-500',
  personality: 'from-pink-500 to-rose-500',
  future: 'from-amber-500 to-orange-500',
  other: 'from-gray-500 to-slate-500',
};
export const AskMatchmakerDialog: React.FC<AskMatchmakerDialogProps> = ({
  isOpen,
  onClose,
  onSubmit,
  matchmakerName,
  dict,
}) => {
  const [question, setQuestion] = useState('');
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [selectedTopic, setSelectedTopic] = useState<string | null>(null);
  const questionTopics = useMemo(() => {
    return Object.keys(dict.topics).map((key) => ({
      id: key,
      label: dict.topics[key as keyof typeof dict.topics].label,
      description: dict.topics[key as keyof typeof dict.topics].description,
      questions: dict.topics[key as keyof typeof dict.topics].questions,
      icon: iconMap[key],
      color: colorMap[key],
    }));
  }, [dict]);
  const handleSubmit = async () => {
    if (!question.trim()) return;

    try {
      setIsSubmitting(true);
      setError(null);
      await onSubmit(question);
      setQuestion('');
      setSelectedTopic(null);
      onClose();
    } catch (error) {
      console.error('Error submitting question:', error);
      setError(dict.errorSubmitting);
    } finally {
      setIsSubmitting(false);
    }
  };
  const getInitials = (name?: string) => {
    if (!name) return 'שד';
    const parts = name.split(' ');
    if (parts.length === 1) return parts[0].charAt(0);
    return `${parts[0].charAt(0)}${parts[parts.length - 1].charAt(0)}`;
  };
  const selectedTopicData = questionTopics.find((t) => t.id === selectedTopic);
  const dialogTitle = matchmakerName
    ? dict.title.replace('{{name}}', matchmakerName)
    : dict.titleDefault;
  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="max-w-2xl max-h-[90vh] flex flex-col p-0 border-0 shadow-2xl rounded-3xl bg-white overflow-hidden z-[9999]">
        <DialogHeader className="px-8 py-6 bg-gradient-to-r from-cyan-50/80 via-white to-emerald-50/50 border-b border-gray-100">
          <div className="flex items-center gap-4 mb-4">
            <Avatar className="w-16 h-16 border-4 border-white shadow-lg">
              <AvatarFallback className="bg-gradient-to-br from-cyan-500 to-emerald-500 text-white text-xl font-bold">
                {getInitials(matchmakerName)}
              </AvatarFallback>
            </Avatar>
            <div className="flex-1">
              <DialogTitle className="text-2xl font-bold text-gray-800 mb-1">
                {dialogTitle}
              </DialogTitle>
              <DialogDescription className="text-gray-600 text-base">
                {dict.description}
              </DialogDescription>
            </div>
            <Badge className="bg-gradient-to-r from-green-500 to-emerald-500 text-white border-0 shadow-md px-3 py-1">
              <Clock className="w-3 h-3 ml-1" />
              {dict.statusBadge}
            </Badge>
          </div>
        </DialogHeader>
        code Code
        <div className="flex-1 overflow-y-auto p-8 space-y-6">
          {error && (
            <Alert variant="destructive" className="border-red-200 bg-red-50">
              <AlertCircle className="h-5 w-5" />
              <AlertDescription className="text-red-800 font-medium">
                {error}
              </AlertDescription>
            </Alert>
          )}

          <div className="space-y-4">
            <div className="text-center">
              <h3 className="text-lg font-semibold text-gray-800 mb-2">
                {dict.topicSelect.title}
              </h3>
              <p className="text-sm text-gray-600">
                {dict.topicSelect.subtitle}
              </p>
            </div>

            <div className="grid grid-cols-2 lg:grid-cols-3 gap-3">
              {questionTopics.map((topic) => (
                <Card
                  key={topic.id}
                  className={cn(
                    'cursor-pointer transition-all duration-300 border-2 hover:shadow-lg hover:-translate-y-1',
                    selectedTopic === topic.id
                      ? 'border-cyan-300 bg-cyan-50 shadow-md'
                      : 'border-gray-200 hover:border-cyan-200'
                  )}
                  onClick={() => setSelectedTopic(topic.id)}
                >
                  <CardContent className="p-4 text-center">
                    <div
                      className={cn(
                        'w-12 h-12 rounded-xl mx-auto mb-3 flex items-center justify-center bg-gradient-to-r text-white shadow-md',
                        topic.color
                      )}
                    >
                      <topic.icon className="w-6 h-6" />
                    </div>
                    <h4 className="font-semibold text-gray-800 text-sm mb-1">
                      {topic.label}
                    </h4>
                    <p className="text-xs text-gray-600 leading-relaxed">
                      {topic.description}
                    </p>
                  </CardContent>
                </Card>
              ))}
            </div>
          </div>

          {selectedTopicData && (
            <Card className="bg-gradient-to-r from-cyan-50/50 to-emerald-50/50 border-cyan-200/50">
              <CardContent className="p-6">
                <div className="flex items-center gap-2 mb-4">
                  <selectedTopicData.icon className="w-5 h-5 text-cyan-600" />
                  <h4 className="font-semibold text-cyan-800">
                    {dict.sampleQuestions.title.replace(
                      '{{topic}}',
                      selectedTopicData.label
                    )}
                  </h4>
                </div>
                <div className="space-y-2 max-h-32 overflow-y-auto scrollbar-elegant">
                  {selectedTopicData.questions.map((q, index) => (
                    <Button
                      key={index}
                      variant="ghost"
                      className="w-full justify-end text-right hover:bg-cyan-100 hover:text-cyan-800 transition-colors rounded-lg p-3 h-auto"
                      onClick={() => setQuestion(q)}
                    >
                      <span className="text-sm leading-relaxed">{q}</span>
                    </Button>
                  ))}
                </div>
              </CardContent>
            </Card>
          )}

          <div className="space-y-3">
            <Label
              htmlFor="question"
              className="text-base font-semibold text-gray-800"
            >
              {dict.input.label}
            </Label>
            <Textarea
              id="question"
              value={question}
              onChange={(e) => setQuestion(e.target.value)}
              placeholder={dict.input.placeholder}
              className="min-h-[120px] text-right border-gray-200 focus:border-cyan-300 focus:ring-cyan-200 rounded-xl text-base leading-relaxed resize-none"
            />
            <div className="flex justify-between items-center text-xs text-gray-500">
              <span>
                {dict.input.charCount.replace(
                  '{{count}}',
                  question.length.toString()
                )}
              </span>
              <span>{dict.input.info}</span>
            </div>
          </div>
        </div>
        <DialogFooter className="px-8 py-6 border-t border-gray-100 bg-gray-50/50">
          <div className="flex gap-3 w-full">
            <Button
              type="button"
              variant="outline"
              onClick={onClose}
              disabled={isSubmitting}
              className="flex-1 border-gray-200 hover:bg-gray-50 rounded-xl font-medium"
            >
              {dict.buttons.cancel}
            </Button>
            <Button
              type="submit"
              onClick={handleSubmit}
              disabled={!question.trim() || isSubmitting}
              className="flex-1 bg-gradient-to-r from-cyan-500 to-emerald-500 hover:from-cyan-600 hover:to-emerald-600 text-white shadow-lg hover:shadow-xl transition-all duration-300 rounded-xl font-medium"
            >
              {isSubmitting ? (
                <>
                  <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin ml-2" />
                  {dict.buttons.submitting}
                </>
              ) : (
                <>
                  <Send className="w-4 h-4 ml-2" />
                  {dict.buttons.submit}
                </>
              )}
            </Button>
          </div>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
};
export default AskMatchmakerDialog;
--- End of Content for AskMatchmakerDialog.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\suggestions\dialogs\UserAiAnalysisDialog.tsx
--------------------------------------------------------------------------------
Content:
// File: src/app/components/suggestions/dialogs/UserAiAnalysisDialog.tsx
'use client';

import React, { useState, useEffect } from 'react';
import { Button } from '@/components/ui/button';
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription,
  DialogTrigger,
} from '@/components/ui/dialog';
import { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert';
import { Progress } from '@/components/ui/progress';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { ScrollArea } from '@/components/ui/scroll-area';
import { toast } from 'sonner';
import { motion, AnimatePresence } from 'framer-motion';
import {
  Loader2,
  Sparkles,
  AlertTriangle,
  Bot,
  Brain,
  Heart,
  Users,
  Target,
  ArrowLeft,
  CheckCircle,
  Info,
  MessageSquare,
  X,
  XCircle,
} from 'lucide-react';
import { cn } from '@/lib/utils';
import type { AiSuggestionAnalysisResult } from '@/lib/services/aiService';
import type { AiAnalysisDict } from '@/types/dictionary'; // ✨ Import dictionary type

// --- Interfaces ---
interface UserAiAnalysisDialogProps {
  suggestedUserId: string;
  isDemo?: boolean;
  demoAnalysisData?: AiSuggestionAnalysisResult | null;
  currentUserName?: string;
  suggestedUserName?: string;
  dict: AiAnalysisDict; // ✨ Add dict prop
}

// --- Demo Data ---
const mockAnalysisResult: AiSuggestionAnalysisResult = {
  overallScore: 91,
  matchTitle: 'שילוב של שאפתנות ועומק רגשי',
  matchSummary:
    'החיבור בין דניאל לנועה מציג פוטנציאל גבוה ליצירת זוגיות יציבה וצומחת. השילוב בין האופי המעשי והשאפתני של דניאל לבין העומק הרגשי והיצירתיות של נועה יוצר בסיס מעניין לשותפות ארוכת טווח, המבוססת על ערכים משותפים וכבוד הדדי.',
  compatibilityPoints: [
    {
      area: 'ערכים משותפים וראיית עולם',
      explanation:
        'שניכם רואים בזוגיות שותפות אמת ובמשפחה ערך עליון. הרצון של נועה ב"טוב לב" והרצון של דניאל ב"שותפות" מתחברים באופן מושלם לבסיס של קשר בריא.',
    },
    {
      area: 'התאמה אינטלקטואלית ורגשית',
      explanation:
        'הרצון של נועה ב"שיחות עומק" והחיפוש אחר אינטליגנציה וסקרנות תואמים את אופיו האנליטי והלמדני של דניאל. יש פוטנציאל לחיבור אינטלקטואלי מרתק.',
    },
    {
      area: 'יציבות ואמינות',
      explanation:
        'הדגש של דניאל על יושרה ואחריות, והיותו "אדם של עשייה", עונים על הצורך בביטחון ויציבות שחשובים בבניית קשר רציני.',
    },
    {
      area: 'סגנון חיים מאוזן',
      explanation:
        'שניכם מעריכים איזון בין פעילות למנוחה, ובין בילויים בחוץ לזמן איכות שקט. האהבה המשותפת לטיולים בטבע יכולה להוות מקור לחוויות משותפות רבות.',
    },
  ],
  pointsToConsider: [
    {
      area: 'שמירת נגיעה',
      explanation:
        'נועה, חשוב לדעת שדניאל שומר נגיעה. זוהי נקודה מהותית שכדאי לדבר עליה בפתיחות ובכבוד כדי להבין את המשמעויות עבור שניכם.',
    },
    {
      area: 'מיקום גיאוגרפי',
      explanation:
        'דניאל מתגורר בירושלים ואת בתל אביב. זהו פער שיש לתת עליו את הדעת ולדון בגמישות של שניכם לגבי מקום מגורים עתידי.',
    },
    {
      area: 'שאיפות קריירה שונות',
      explanation:
        'המסלול של דניאל בהייטק מאוד תובעני, בעוד את מחפשת איזון עם עולם היצירה. זו הזדמנות לדבר על איך תומכים אחד בשנייה בשאיפות שונות.',
    },
  ],
  suggestedConversationStarters: [
    'מהי "שותפות" אמיתית בעיניך, ואיך היא באה לידי ביטוי ביום-יום?',
    'איך אתם מאזנים בין השאיפות המקצועיות שלכם לבין הרצון לחיים אישיים, רוחניים ויצירתיים מלאים?',
    'ספרו על פרויקט או אתגר שלקחתם על עצמכם ומה למדתם מהתהליך.',
    'מה הדבר הכי חשוב לכם שבן/בת הזוג יבינו עליכם כבר בהתחלה?',
  ],
};

// --- Sub-components for better modularity ---

const AnalysisItem: React.FC<{
  icon: React.ElementType;
  iconColor: string;
  area: string;
  explanation: string;
}> = ({ icon: Icon, iconColor, area, explanation }) => (
  <div className="flex items-start gap-4 p-3 rounded-lg hover:bg-slate-50 transition-colors">
    <div
      className={cn(
        'mt-1 flex-shrink-0 rounded-full p-2 bg-opacity-10',
        iconColor.replace('text-', 'bg-')
      )}
    >
      <Icon className={cn('h-5 w-5', iconColor)} />
    </div>
    <div>
      <h4 className="font-semibold text-gray-800">{area}</h4>
      <p className="text-sm text-gray-600 leading-relaxed">{explanation}</p>
    </div>
  </div>
);

const LoadingScreen: React.FC<{
  progress: number;
  step: number;
  dict: AiAnalysisDict; // ✨ Add dict prop
}> = ({
  progress,
  step,
  dict,
}) => {
  const loadingSteps = [
    { icon: Brain, label: dict.loadingSteps.step1 },
    { icon: Heart, label: dict.loadingSteps.step2 },
    { icon: Users, label: dict.loadingSteps.step3 },
    { icon: Target, label: dict.loadingSteps.step4 },
    { icon: Sparkles, label: dict.loadingSteps.step5 },
  ];

  return (
    <div className="flex flex-col items-center justify-center h-full text-center space-y-8 p-8">
      <div className="relative">
        <div className="w-24 h-24 rounded-full bg-gradient-to-br from-blue-100 via-purple-50 to-pink-100 animate-pulse border-4 border-white shadow-xl" />
        <div className="absolute inset-0 flex items-center justify-center">
          <Loader2 className="w-12 h-12 text-blue-600 animate-spin" />
        </div>
      </div>
      <div className="space-y-3">
        <h3 className="text-2xl font-bold bg-gradient-to-r from-blue-600 via-purple-600 to-pink-600 bg-clip-text text-transparent">
          {dict.loadingTitle}
        </h3>
        <p className="text-gray-600 max-w-md text-lg">
          {dict.loadingDescription}
        </p>
      </div>
      <div className="w-full max-w-md space-y-4">
        <Progress value={progress} className="h-3 bg-gray-200" />
        <p className="text-sm text-gray-500 font-medium">{progress}% הושלם</p>
      </div>
      {step < loadingSteps.length && (
        <motion.div
          key={step}
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5 }}
          className="flex items-center gap-4 p-4 bg-white rounded-xl shadow-lg border border-gray-100"
        >
          <div className="p-3 rounded-full bg-gradient-to-br from-blue-500 to-purple-500 text-white shadow-lg">
            {React.createElement(loadingSteps[step].icon, {
              className: 'w-5 h-5',
            })}
          </div>
          <p className="font-semibold text-gray-800">
            {loadingSteps[step].label}
          </p>
        </motion.div>
      )}
    </div>
  );
};

const ErrorScreen: React.FC<{
  error: string;
  onRetry: () => void;
  dict: AiAnalysisDict; // ✨ Add dict prop
}> = ({
  error,
  onRetry,
  dict,
}) => (
  <div className="flex flex-col items-center justify-center h-full text-center space-y-6 p-8">
    <XCircle className="w-16 h-16 text-red-400" />
    <div className="space-y-4 max-w-md">
      <h3 className="text-2xl font-bold text-gray-800">{dict.errorTitle}</h3>
      <Alert variant="destructive">
        <AlertTriangle className="h-5 w-5" />
        <AlertTitle className="font-semibold">
          {dict.errorAlertTitle}
        </AlertTitle>
        <AlertDescription className="mt-2">
          {error || dict.errorAlertDescription}
        </AlertDescription>
      </Alert>
    </div>
    <Button onClick={onRetry}>
      <Brain className="w-4 h-4 ml-2" />
      {dict.retryButton}
    </Button>
  </div>
);

// --- DialogBody component ---
export const DialogBody: React.FC<
  UserAiAnalysisDialogProps & { onOpenChange: (open: boolean) => void }
> = ({
  suggestedUserId,
  isDemo = false,
  demoAnalysisData = null,
  currentUserName,
  suggestedUserName,
  onOpenChange,
  dict, // ✨ Destructure dict
}) => {
  const [analysis, setAnalysis] = useState<AiSuggestionAnalysisResult | null>(
    null
  );
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [loadingProgress, setLoadingProgress] = useState(0);
  const [currentStep, setCurrentStep] = useState(0);

  const fetchAnalysis = async () => {
    setIsLoading(true);
    setError(null);
    setLoadingProgress(0);
    setCurrentStep(0);

    if (isDemo) {
      const timer = setInterval(() => {
        setLoadingProgress((prev) => {
          const newProgress = Math.min(prev + 2, 100);
          setCurrentStep(Math.floor(newProgress / 20));
          return newProgress;
        });
      }, 80);
      setTimeout(() => {
        clearInterval(timer);
        setAnalysis(demoAnalysisData || mockAnalysisResult);
        setIsLoading(false);
      }, 4000);
      return;
    }

    try {
      const response = await fetch('/api/ai/analyze-suggestion', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ suggestedUserId }),
      });
      const result = await response.json();
      if (!response.ok || !result.success) {
        throw new Error(result.message || 'שגיאה בקבלת ניתוח ההצעה.');
      }
      setAnalysis(result.data);
    } catch (err) {
      const errorMessage =
        err instanceof Error ? err.message : 'אירעה שגיאה לא צפויה.';
      setError(errorMessage);
      toast.error('שגיאה בתהליך הניתוח', { description: errorMessage });
    } finally {
      setIsLoading(false);
    }
  };

  useEffect(() => {
    fetchAnalysis();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [suggestedUserId, isDemo]);

  return (
    <>
      <DialogHeader className="p-6 border-b flex-row justify-between items-center flex-shrink-0">
        <div className="flex items-center gap-4">
          <div className="p-3 rounded-full bg-gradient-to-br from-blue-500 via-purple-500 to-pink-500 text-white shadow-lg">
            <Bot className="w-7 h-7" />
          </div>
          <div>
            <DialogTitle className="text-xl font-bold bg-gradient-to-r from-blue-600 via-purple-600 to-pink-600 bg-clip-text text-transparent">
              {dict.dialogTitle}
            </DialogTitle>
            <DialogDescription className="text-sm">
              {currentUserName} ⟵ {suggestedUserName}
            </DialogDescription>
          </div>
        </div>
        <Button variant="ghost" size="icon" onClick={() => onOpenChange(false)}>
          <X className="h-5 w-5" />
        </Button>
      </DialogHeader>

      <main className="flex-1 flex flex-col min-h-0 bg-white">
        <AnimatePresence mode="wait">
          {isLoading ? (
            <motion.div key="loading" exit={{ opacity: 0 }} className="flex-1">
              <LoadingScreen progress={loadingProgress} step={currentStep} dict={dict} />
            </motion.div>
          ) : error ? (
            <motion.div key="error" exit={{ opacity: 0 }} className="flex-1">
              <ErrorScreen error={error} onRetry={fetchAnalysis} dict={dict} />
            </motion.div>
          ) : analysis ? (
            <motion.div
              key="content"
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              className="flex-1 flex flex-col min-h-0"
            >
              <Tabs
                defaultValue="summary"
                className="flex-1 flex flex-col min-h-0"
              >
                <TabsList className="mx-4 mt-4 bg-slate-100 p-1 rounded-lg flex-shrink-0">
                  <TabsTrigger value="summary">{dict.tabs.summary}</TabsTrigger>
                  <TabsTrigger value="consider">{dict.tabs.consider}</TabsTrigger>
                  <TabsTrigger value="conversation">{dict.tabs.conversation}</TabsTrigger>
                </TabsList>

                <ScrollArea className="flex-1">
                  <div className="p-6">
                    <TabsContent value="summary" className="space-y-6 mt-0">
                      <div className="p-4 bg-slate-50 rounded-lg border border-slate-200">
                        <h3 className="font-semibold text-gray-800 mb-2 flex items-center gap-2 text-blue-600">
                          <Info className="w-5 h-5" />
                          {analysis.matchTitle}
                        </h3>
                        <p className="text-sm text-gray-600 leading-relaxed">
                          {analysis.matchSummary}
                        </p>
                      </div>
                      <div>
                        <h3 className="font-semibold text-gray-800 mb-3 flex items-center gap-2">
                          <CheckCircle className="w-5 h-5 text-green-500" />
                          {dict.summaryTab.strengthTitle}
                        </h3>
                        <div className="space-y-4">
                          {analysis.compatibilityPoints.map((point) => (
                            <AnalysisItem
                              key={point.area}
                              icon={CheckCircle}
                              iconColor="text-green-500"
                              {...point}
                            />
                          ))}
                        </div>
                      </div>
                    </TabsContent>

                    <TabsContent value="consider" className="mt-0">
                      <h3 className="font-semibold text-gray-800 mb-3 flex items-center gap-2">
                        <AlertTriangle className="w-5 h-5 text-amber-500" />
                        {dict.considerTab.title}
                      </h3>
                      <div className="space-y-4">
                        {analysis.pointsToConsider.map((point) => (
                          <AnalysisItem
                            key={point.area}
                            icon={AlertTriangle}
                            iconColor="text-amber-500"
                            {...point}
                          />
                        ))}
                      </div>
                    </TabsContent>

                    <TabsContent value="conversation" className="mt-0">
                      <h3 className="font-semibold text-gray-800 mb-3 flex items-center gap-2">
                        <MessageSquare className="w-5 h-5 text-indigo-500" />
                        {dict.conversationTab.title}
                      </h3>
                      <ul className="space-y-3 list-inside">
                        {analysis.suggestedConversationStarters.map(
                          (starter, index) => (
                            <li
                              key={index}
                              className="flex items-start gap-2 p-2 rounded-md hover:bg-indigo-50/50"
                            >
                              <MessageSquare className="w-4 h-4 text-indigo-400 mt-1 flex-shrink-0" />
                              <span className="text-sm text-gray-700">
                                {starter}
                              </span>
                            </li>
                          )
                        )}
                      </ul>
                    </TabsContent>
                  </div>
                </ScrollArea>
              </Tabs>
            </motion.div>
          ) : null}
        </AnimatePresence>
      </main>
      <div className="p-4 bg-gray-50/80 border-t flex justify-end flex-shrink-0">
        <Button variant="ghost" onClick={() => onOpenChange(false)}>
          <ArrowLeft className="w-4 h-4 ml-2" />
          {dict.backButton}
        </Button>
      </div>
    </>
  );
};

// --- Main exported wrapper component ---
export const UserAiAnalysisDialog: React.FC<UserAiAnalysisDialogProps> = (
  props
) => {
  const [isOpen, setIsOpen] = useState(false);
  const { dict } = props; // ✨ Destructure dict

  const handleOpenChange = (open: boolean) => {
    setIsOpen(open);
  };

  const triggerButton = (
    <Button
      variant="outline"
      size="lg"
      className="relative overflow-hidden group bg-gradient-to-r from-blue-50 via-purple-50 to-pink-50 border-2 border-blue-200 text-blue-700 hover:from-blue-100 hover:to-pink-100 hover:border-blue-300 transition-all duration-300 shadow-lg hover:shadow-xl rounded-xl"
    >
      <div className="absolute inset-0 bg-gradient-to-r from-transparent via-white/40 to-transparent transform -translate-x-full group-hover:animate-shimmer" />
      <div className="relative z-10 flex items-center gap-3">
        <div className="relative">
          <Brain className="w-6 h-6 transition-transform duration-500 group-hover:rotate-12 group-hover:scale-110 text-blue-600" />
          <Sparkles className="w-3 h-3 absolute -top-1 -right-1 text-purple-500 opacity-0 group-hover:opacity-100" />
        </div>
        <span className="text-lg font-bold">{dict.triggerButton}</span>
      </div>
    </Button>
  );

  return (
    <Dialog open={isOpen} onOpenChange={handleOpenChange}>
      <DialogTrigger asChild>{triggerButton}</DialogTrigger>
      <DialogContent
        className="max-w-4xl w-[95vw] h-[90vh] flex flex-col p-0 overflow-hidden shadow-2xl rounded-2xl bg-gray-50"
        dir="rtl"
      >
        {isOpen && <DialogBody {...props} onOpenChange={handleOpenChange} />}
      </DialogContent>
      <style jsx global>{`
        @keyframes shimmer {
          100% {
            transform: translateX(100%);
          }
        }
        .animate-shimmer {
          animation: shimmer 2s infinite;
        }
      `}</style>
    </Dialog>
  );
};
--- End of Content for UserAiAnalysisDialog.tsx ---

================================================================================
Directory: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\suggestions\inquiries
================================================================================

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\suggestions\inquiries\InquiryThreadView.tsx
--------------------------------------------------------------------------------
Content:
// FILENAME: src/app/components/suggestions/inquiries/InquiryThreadView.tsx

import React, { useState, useEffect, useCallback, useRef } from 'react';
import { useSession } from 'next-auth/react';
import { UserRole } from '@prisma/client';
import { format } from 'date-fns';
import { he } from 'date-fns/locale';
import { toast } from 'sonner';

import {
  Card,
  CardContent,
  CardHeader,
  CardTitle,
  CardFooter,
} from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Textarea } from '@/components/ui/textarea';
import { Avatar, AvatarFallback } from '@/components/ui/avatar';
import { Badge } from '@/components/ui/badge';
import { Skeleton } from '@/components/ui/skeleton';
import { Label } from '@/components/ui/label';
import {
  Send,
  MessageCircle,
  Loader2,
  CheckCircle,
  Clock,
  AlertTriangle,
  User,
  MessageSquare,
  Sparkles,
  ArrowDown,
} from 'lucide-react';
import { cn, getInitials } from '@/lib/utils';
import type { InquiryThreadDict } from '@/types/dictionary';

// --- Interfaces ---
interface Inquiry {
  id: string;
  suggestionId: string;
  fromUserId: string;
  toUserId: string;
  question: string;
  answer: string | null;
  status: 'PENDING' | 'ANSWERED' | 'CLOSED';
  createdAt: string | Date;
  answeredAt: string | Date | null;
  fromUser: { id: string; firstName: string; lastName: string };
  toUser: { id: string; firstName: string; lastName: string };
}

interface InquiryThreadViewProps {
  suggestionId: string;
  userId: string;
  showComposer?: boolean;
  className?: string;
  isDemo?: boolean;
  dict: InquiryThreadDict;
}

// --- Sub-components ---

const MatchmakerReplyForm: React.FC<{
  inquiryId: string;
  suggestionId: string;
  onAnswerSent: () => void;
  dict: InquiryThreadDict;
}> = ({ inquiryId, suggestionId, onAnswerSent, dict }) => {
  const [answer, setAnswer] = useState('');
  const [isReplying, setIsReplying] = useState(false);

  const handleSendAnswer = async () => {
    if (!answer.trim()) return;
    setIsReplying(true);
    try {
      const response = await fetch(
        `/api/suggestions/${suggestionId}/inquiries`,
        {
          method: 'PATCH',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ inquiryId, answer }),
        }
      );
      if (!response.ok) throw new Error('Failed to send answer');
      toast.success(dict.toasts.replySuccess);
      setAnswer('');
      onAnswerSent();
    } catch (error) {
      console.error('Error sending answer:', error);
      toast.error(dict.toasts.replyError);
    } finally {
      setIsReplying(false);
    }
  };

  return (
    <div className="mt-4 p-4 bg-emerald-50 border border-emerald-200 rounded-xl space-y-3">
      <h4 className="font-semibold text-emerald-800 text-sm flex items-center gap-2">
        <Sparkles className="w-4 h-4" /> {dict.replyForm.title}
      </h4>
      <Textarea
        value={answer}
        onChange={(e) => setAnswer(e.target.value)}
        placeholder={dict.replyForm.placeholder}
        className="bg-white rounded-lg"
        disabled={isReplying}
      />
      <div className="flex justify-end">
        <Button
          onClick={handleSendAnswer}
          disabled={!answer.trim() || isReplying}
          size="sm"
        >
          {isReplying ? (
            <Loader2 className="w-4 h-4 mr-2 animate-spin" />
          ) : (
            <Send className="w-4 h-4 mr-2" />
          )}
          {isReplying
            ? dict.replyForm.sendingButton
            : dict.replyForm.sendButton}
        </Button>
      </div>
    </div>
  );
};

const MessageBubble: React.FC<{
  inquiry: Inquiry;
  userId: string;
  userRole: UserRole;
  isLatest: boolean;
  suggestionId: string;
  onAnswerSent: () => void;
  dict: InquiryThreadDict;
}> = ({
  inquiry,
  userId,
  userRole,
  isLatest,
  suggestionId,
  onAnswerSent,
  dict,
}) => {
  const isMyQuestion = inquiry.fromUserId === userId;

  const getStatusInfo = (status: Inquiry['status']) => {
    switch (status) {
      case 'PENDING':
        return {
          label: dict.status.pending,
          icon: Clock,
          className: 'bg-amber-100 text-amber-800 border-amber-200',
          pulse: true,
        };
      case 'ANSWERED':
        return {
          label: dict.status.answered,
          icon: CheckCircle,
          className: 'bg-emerald-100 text-emerald-800 border-emerald-200',
          pulse: false,
        };
      case 'CLOSED':
        return {
          label: dict.status.closed,
          icon: MessageCircle,
          className: 'bg-gray-100 text-gray-700 border-gray-200',
          pulse: false,
        };
      default:
        return {
          label: String(status),
          icon: AlertTriangle,
          className: 'bg-gray-100 text-gray-700 border-gray-200',
          pulse: false,
        };
    }
  };

  const formatDate = (date: string | Date | null) => {
    if (!date) return '';
    try {
      return format(new Date(date), 'dd בMMMM yyyy, HH:mm', { locale: he });
    } catch (e) {
      console.error('Error formatting date:', date, e);
      return dict.invalidDate;
    }
  };

  return (
    <div
      className={cn(
        'relative transition-all duration-300',
        isLatest && 'animate-fade-in-up'
      )}
    >
      {/* Question */}
      <div
        className={cn(
          'flex gap-4 mb-4',
          isMyQuestion ? 'flex-row-reverse' : 'flex-row'
        )}
      >
        <Avatar className="w-10 h-10 flex-shrink-0 shadow-md">
          <AvatarFallback
            className={cn(
              'font-bold text-sm',
              isMyQuestion
                ? 'bg-gradient-to-br from-cyan-500 to-blue-500 text-white'
                : 'bg-gradient-to-br from-purple-500 to-pink-500 text-white'
            )}
          >
            {getInitials(
              `${inquiry.fromUser.firstName} ${inquiry.fromUser.lastName}`
            )}
          </AvatarFallback>
        </Avatar>
        <div
          className={cn(
            'flex-1 max-w-[85%]',
            isMyQuestion ? 'ml-auto' : 'mr-auto'
          )}
        >
          <div
            className={cn(
              'flex items-center gap-2 mb-2',
              isMyQuestion
                ? 'flex-row-reverse justify-start'
                : 'flex-row justify-start'
            )}
          >
            <span className="font-semibold text-gray-800 text-sm">
              {inquiry.fromUser.firstName} {inquiry.fromUser.lastName}
            </span>
            <span className="text-xs text-gray-400">
              {formatDate(inquiry.createdAt)}
            </span>
          </div>
          <div
            className={cn(
              'p-4 rounded-2xl shadow-md relative',
              isMyQuestion
                ? 'bg-gradient-to-r from-cyan-500 to-blue-500 text-white rounded-br-md'
                : 'bg-white border border-gray-200 text-gray-800 rounded-bl-md'
            )}
          >
            <p className="text-sm leading-relaxed whitespace-pre-wrap break-words">
              {inquiry.question}
            </p>
            <div
              className={cn(
                'absolute top-4 w-3 h-3 transform rotate-45',
                isMyQuestion
                  ? '-right-1.5 bg-cyan-600'
                  : '-left-1.5 bg-white border-l border-b border-gray-200'
              )}
            />
          </div>
        </div>
      </div>

      {/* Answer */}
      {inquiry.answer && inquiry.answeredAt ? (
        <div className="flex gap-4 mt-6 mb-2">
          <Avatar className="w-10 h-10 flex-shrink-0 shadow-md">
            <AvatarFallback className="bg-gradient-to-br from-emerald-500 to-green-600 text-white font-bold text-sm">
              {getInitials(
                `${inquiry.toUser.firstName} ${inquiry.toUser.lastName}`
              )}
            </AvatarFallback>
          </Avatar>
          <div className="flex-1 max-w-[85%]">
            <div className="flex items-center gap-2 mb-2">
              <span className="font-semibold text-gray-800 text-sm">
                {inquiry.toUser.firstName} {inquiry.toUser.lastName}
              </span>
              <Badge className="bg-gradient-to-r from-emerald-500 to-green-500 text-white border-0 text-xs px-2 py-1 font-medium">
                <CheckCircle className="w-3 h-3 mr-1" /> {dict.answerBadge}
              </Badge>
              <span className="text-xs text-gray-400">
                {formatDate(inquiry.answeredAt)}
              </span>
            </div>
            <div className="p-4 bg-gradient-to-r from-emerald-50 to-green-50 border border-emerald-200 rounded-2xl rounded-bl-md shadow-md relative">
              <p className="text-sm text-emerald-900 leading-relaxed whitespace-pre-wrap break-words">
                {inquiry.answer}
              </p>
              <div className="absolute top-4 -left-1.5 w-3 h-3 bg-emerald-50 border-l border-b border-emerald-200 transform rotate-45" />
            </div>
          </div>
        </div>
      ) : (
        userRole !== 'CANDIDATE' &&
        inquiry.status === 'PENDING' &&
        !isMyQuestion && (
          <MatchmakerReplyForm
            inquiryId={inquiry.id}
            suggestionId={suggestionId}
            onAnswerSent={onAnswerSent}
            dict={dict}
          />
        )
      )}
      {!isLatest && (
        <div className="flex-1 h-px bg-gradient-to-r from-transparent via-gray-200 to-transparent my-6" />
      )}
    </div>
  );
};

// --- Main Component ---
const InquiryThreadView: React.FC<InquiryThreadViewProps> = ({
  suggestionId,
  userId,
  showComposer = true,
  className,
  isDemo = false,
  dict,
}) => {
  const [inquiries, setInquiries] = useState<Inquiry[]>([]);
  const [isLoading, setIsLoading] = useState(!isDemo);
  const [newQuestion, setNewQuestion] = useState('');
  const [isSending, setIsSending] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const { data: session } = useSession();
  const userRole = session?.user?.role as UserRole;
  const scrollAreaRef = useRef<HTMLDivElement>(null);

  const fetchInquiries = useCallback(async () => {
    //... fetch logic remains the same, but error messages will use dict
  }, [suggestionId, isDemo, dict]);

  useEffect(() => {
    fetchInquiries();
  }, [fetchInquiries]);

  useEffect(() => {
    if (scrollAreaRef.current) {
      setTimeout(() => {
        scrollAreaRef.current!.scrollTop = scrollAreaRef.current!.scrollHeight;
      }, 100);
    }
  }, [inquiries]);

  const handleSendQuestion = async () => {
    if (!newQuestion.trim()) return;
    setIsSending(true);
    setError(null);
    try {
      const response = await fetch(
        `/api/suggestions/${suggestionId}/inquiries`,
        {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ question: newQuestion }),
        }
      );
      if (!response.ok)
        throw new Error(`Failed to send inquiry (${response.status})`);
      await fetchInquiries();
      setNewQuestion('');
      toast.success(dict.toasts.sendSuccessTitle, {
        description: dict.toasts.sendSuccessDescription,
      });
    } catch (error) {
      setError(dict.loadingError);
      toast.error(dict.toasts.sendError);
    } finally {
      setIsSending(false);
    }
  };

  return (
    <Card
      className={cn(
        'shadow-xl border-0 bg-white overflow-hidden flex flex-col max-h-[80vh] min-h-[500px]',
        className
      )}
    >
      <CardHeader className="pb-4 bg-gradient-to-r from-cyan-50/80 via-white to-emerald-50/50 border-b border-gray-100">
        <div className="flex items-center gap-3">
          <div className="p-2 rounded-lg bg-gradient-to-r from-cyan-500 to-emerald-500 text-white shadow-md">
            <MessageSquare className="w-5 h-5" />
          </div>
          <div>
            <CardTitle className="text-xl font-bold text-gray-800">
              {dict.title}
            </CardTitle>
            <p className="text-sm text-gray-600 mt-1">{dict.subtitle}</p>
          </div>
        </div>
      </CardHeader>
      <div
        ref={scrollAreaRef}
        className="flex-1 p-6 space-y-6 scrollbar-elegant overflow-y-auto"
        aria-live="polite"
        aria-atomic="false"
      >
        {isLoading ? (
          Array.from({ length: 2 }).map((_, i) => (
            <div key={i} className="flex gap-4">
              <Skeleton className="h-10 w-10 rounded-full" />
              <div className="space-y-2 flex-1">
                <Skeleton className="h-4 w-24" />
                <Skeleton className="h-16 w-full rounded-2xl" />
              </div>
            </div>
          ))
        ) : error ? (
          <div className="text-center py-8">
            <AlertTriangle className="w-8 h-8 text-red-500 mx-auto mb-4" />
            <h3 className="font-semibold text-red-800 mb-2">
              {dict.loadingError}
            </h3>
            <p className="text-red-600 text-sm mb-4">{error}</p>
            <Button variant="outline" size="sm" onClick={fetchInquiries}>
              {dict.retryButton}
            </Button>
          </div>
        ) : inquiries.length === 0 ? (
          <div className="text-center py-12">
            <MessageCircle className="w-10 h-10 text-cyan-500 mx-auto mb-6" />
            <h3 className="text-xl font-semibold text-gray-700 mb-2">
              {dict.emptyState.title}
            </h3>
            <p className="text-gray-500 max-w-md mx-auto leading-relaxed">
              {dict.emptyState.description}
            </p>
          </div>
        ) : (
          inquiries.map((inquiry, index) => (
            <MessageBubble
              key={inquiry.id}
              inquiry={inquiry}
              userId={userId}
              userRole={userRole}
              isLatest={index === inquiries.length - 1}
              suggestionId={suggestionId}
              onAnswerSent={fetchInquiries}
              dict={dict}
            />
          ))
        )}
      </div>
      {showComposer && userRole === 'CANDIDATE' && (
        <CardFooter className="p-6 border-t border-gray-100 bg-gradient-to-r from-gray-50 to-white">
          <div className="w-full space-y-3">
            <Label
              htmlFor="new-question"
              className="flex items-center gap-2 text-sm font-semibold text-gray-600"
            >
              <User className="w-4 h-4 text-cyan-500" />
              {dict.composer.label}
            </Label>
            <Textarea
              id="new-question"
              placeholder={dict.composer.placeholder}
              value={newQuestion}
              onChange={(e) => setNewQuestion(e.target.value)}
              disabled={isSending}
              className="text-right border-gray-200 focus:border-cyan-300 focus:ring-cyan-200 rounded-xl resize-none"
              rows={3}
            />
            <div className="flex justify-between items-center">
              <span className="text-xs text-gray-500">
                {dict.composer.charCount.replace(
                  '{{count}}',
                  newQuestion.length.toString()
                )}
              </span>
              <Button
                onClick={handleSendQuestion}
                disabled={!newQuestion.trim() || isSending}
                className="bg-gradient-to-r from-cyan-500 to-emerald-500 text-white shadow-lg rounded-xl"
              >
                {isSending ? (
                  <>
                    <Loader2 className="h-4 w-4 ml-2 animate-spin" />
                    {dict.composer.sendingButton}
                  </>
                ) : (
                  <>
                    <Send className="h-4 w-4 ml-2" />
                    {dict.composer.sendButton}
                  </>
                )}
              </Button>
            </div>
          </div>
        </CardFooter>
      )}
    </Card>
  );
};

export default InquiryThreadView;
--- End of Content for InquiryThreadView.tsx ---

================================================================================
Directory: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\suggestions\list
================================================================================

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\suggestions\list\SuggestionsList.tsx
--------------------------------------------------------------------------------
Content:
// src/app/components/suggestions/list/SuggestionsList.tsx

'use client';
import React, { useState, useEffect } from 'react';
import {
  Search,
  Filter,
  SortAsc,
  SortDesc,
  Calendar,
  Grid3X3,
  List as ListIcon,
  Check,
  XCircle,
  Sparkles,
  Heart,
  Clock,
  Users,
  TrendingUp,
  BarChart3,
} from 'lucide-react';
import { Skeleton } from '@/components/ui/skeleton';
import { Input } from '@/components/ui/input';
import { Button } from '@/components/ui/button';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select';
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuGroup,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuTrigger,
} from '@/components/ui/dropdown-menu';
import { Badge } from '@/components/ui/badge';
import { Card, CardContent } from '@/components/ui/card';
import { toast } from 'sonner';
import MinimalSuggestionCard from '../cards/MinimalSuggestionCard';
import SuggestionDetailsModal from '../modals/SuggestionDetailsModal';
import AskMatchmakerDialog from '../dialogs/AskMatchmakerDialog';
import { cn } from '@/lib/utils';
import type { ExtendedMatchSuggestion } from '../types';
// ✅ 1. ייבוא הטיפוסים הנדרשים
import type { SuggestionsDictionary, ProfileCardDict } from '@/types/dictionary';

// ✅ 2. עדכון הממשק לקבל props נפרדים
interface SuggestionsListProps {
  suggestions: ExtendedMatchSuggestion[];
  userId: string;
  isHistory?: boolean;
  viewMode: 'grid' | 'list';
  isLoading?: boolean;
  className?: string;
  onStatusChange?: (
    suggestionId: string,
    newStatus: string,
    notes?: string
  ) => Promise<void>;
  onRefresh?: () => void;
  isUserInActiveProcess?: boolean;
  onActionRequest: (
    suggestion: ExtendedMatchSuggestion,
    action: 'approve' | 'decline'
  ) => void;
  suggestionsDict: SuggestionsDictionary;
  profileCardDict: ProfileCardDict;
}

type SortOption = 'newest' | 'oldest' | 'deadline' | 'priority';
type FilterOption =
  | 'all'
  | 'pending'
  | 'accepted'
  | 'declined'
  | 'contact_shared';

const EmptyState: React.FC<{
  isFiltered: boolean;
  isHistory: boolean;
  onClearFilters: () => void;
  dict: SuggestionsDictionary['list']['emptyState'];
}> = ({ isFiltered, isHistory, onClearFilters, dict }) => (
  <div className="flex flex-col items-center justify-center min-h-[400px] text-center p-8">
    <div className="relative mb-8">
      <div className="w-32 h-32 rounded-full bg-gradient-to-br from-purple-100 to-pink-100 flex items-center justify-center shadow-lg">
        {isFiltered ? (
          <Search className="w-16 h-16 text-purple-400" />
        ) : isHistory ? (
          <Clock className="w-16 h-16 text-gray-400" />
        ) : (
          <Heart className="w-16 h-16 text-pink-400" />
        )}
      </div>
      {!isFiltered && !isHistory && (
        <div className="absolute -top-2 -right-2 w-8 h-8 rounded-full bg-gradient-to-r from-cyan-400 to-blue-500 flex items-center justify-center shadow-lg">
          <Sparkles className="w-4 h-4 text-white" />
        </div>
      )}
    </div>
    <h3 className="text-2xl font-bold text-gray-800 mb-3">
      {isFiltered
        ? dict.noResultsTitle
        : isHistory
          ? dict.noHistoryTitle
          : dict.noActiveTitle}
    </h3>
    <p className="text-gray-600 max-w-md mx-auto mb-6 leading-relaxed">
      {isFiltered
        ? dict.noResultsDescription
        : isHistory
          ? dict.noHistoryDescription
          : dict.noActiveDescription}
    </p>
    {isFiltered && (
      <Button
        onClick={onClearFilters}
        className="bg-gradient-to-r from-purple-500 to-pink-500 hover:from-purple-600 hover:to-pink-600 text-white shadow-lg hover:shadow-xl transition-all duration-300 rounded-xl"
      >
        <XCircle className="w-4 h-4 ml-2" />
        {dict.clearFilters}
      </Button>
    )}
  </div>
);

const StatsBar: React.FC<{
  total: number;
  filtered: number;
  pending: number;
  isHistory: boolean;
  dict: SuggestionsDictionary['list']['stats'];
}> = ({ total, filtered, pending, isHistory, dict }) => (
  <Card className="mb-6 border-0 shadow-lg bg-gradient-to-r from-white via-purple-50/50 to-pink-50/50">
    <CardContent className="p-4">
      <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
        <div className="text-center">
          <div className="flex items-center justify-center gap-2 mb-1">
            <BarChart3 className="w-4 h-4 text-blue-500" />
            <span className="text-2xl font-bold text-blue-600">{filtered}</span>
          </div>
          <p className="text-xs text-gray-600 font-medium">{dict.showing}</p>
        </div>
        <div className="text-center">
          <div className="flex items-center justify-center gap-2 mb-1">
            <Users className="w-4 h-4 text-purple-500" />
            <span className="text-2xl font-bold text-purple-600">{total}</span>
          </div>
          <p className="text-xs text-gray-600 font-medium">{dict.total}</p>
        </div>
        {!isHistory && (
          <div className="text-center">
            <div className="flex items-center justify-center gap-2 mb-1">
              <Clock className="w-4 h-4 text-orange-500" />
              <span className="text-2xl font-bold text-orange-600">
                {pending}
              </span>
            </div>
            <p className="text-xs text-gray-600 font-medium">{dict.pending}</p>
          </div>
        )}
        <div className="text-center">
          <div className="flex items-center justify-center gap-2 mb-1">
            <TrendingUp className="w-4 h-4 text-green-500" />
            <span className="text-2xl font-bold text-green-600">
              {total > 0 ? Math.round(((total - pending) / total) * 100) : 0}%
            </span>
          </div>
          <p className="text-xs text-gray-600 font-medium">{dict.progress}</p>
        </div>
      </div>
    </CardContent>
  </Card>
);

const SuggestionsList: React.FC<SuggestionsListProps> = ({
  suggestions: initialSuggestions,
  isHistory = false,
  viewMode: initialViewMode,
  isLoading = false,
  userId,
  className,
  onActionRequest,
  isUserInActiveProcess,
  suggestionsDict, // ✅ 3. קבלת ה-props הנפרדים
  profileCardDict,
}) => {
  const [selectedSuggestion, setSelectedSuggestion] =
    useState<ExtendedMatchSuggestion | null>(null);
  const [showAskDialog, setShowAskDialog] = useState(false);
  const [searchQuery, setSearchQuery] = useState('');
  const [sortOption, setSortOption] = useState<SortOption>('newest');
  const [filterOption, setFilterOption] = useState<FilterOption>('all');
  const [viewMode, setViewMode] = useState<'grid' | 'list'>(initialViewMode);
  const [filteredSuggestions, setFilteredSuggestions] =
    useState<ExtendedMatchSuggestion[]>(initialSuggestions);

  const pendingCount = initialSuggestions.filter(
    (s) =>
      s.status === 'PENDING_FIRST_PARTY' || s.status === 'PENDING_SECOND_PARTY'
  ).length;

  useEffect(() => {
    let result = [...initialSuggestions];

    if (searchQuery) {
      const query = searchQuery.toLowerCase();
      result = result.filter((suggestion) => {
        const targetParty =
          suggestion.firstPartyId === userId
            ? suggestion.secondParty
            : suggestion.firstParty;
        return (
          targetParty.firstName.toLowerCase().includes(query) ||
          targetParty.lastName.toLowerCase().includes(query) ||
          targetParty.profile?.city?.toLowerCase().includes(query) ||
          targetParty.profile?.occupation?.toLowerCase().includes(query) ||
          targetParty.profile?.religiousLevel?.toLowerCase().includes(query)
        );
      });
    }

    if (filterOption !== 'all') {
      switch (filterOption) {
        case 'pending':
          result = result.filter(
            (s) =>
              s.status === 'PENDING_FIRST_PARTY' ||
              s.status === 'PENDING_SECOND_PARTY'
          );
          break;
        case 'accepted':
          result = result.filter(
            (s) =>
              s.status === 'FIRST_PARTY_APPROVED' ||
              s.status === 'SECOND_PARTY_APPROVED'
          );
          break;
        case 'declined':
          result = result.filter(
            (s) =>
              s.status === 'FIRST_PARTY_DECLINED' ||
              s.status === 'SECOND_PARTY_DECLINED'
          );
          break;
        case 'contact_shared':
          result = result.filter((s) => s.status === 'CONTACT_DETAILS_SHARED');
          break;
      }
    }

    switch (sortOption) {
      case 'newest':
        result.sort(
          (a, b) =>
            new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime()
        );
        break;
      case 'oldest':
        result.sort(
          (a, b) =>
            new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime()
        );
        break;
      case 'deadline':
        result.sort((a, b) => {
          if (!a.decisionDeadline) return 1;
          if (!b.decisionDeadline) return -1;
          return (
            new Date(a.decisionDeadline).getTime() -
            new Date(b.decisionDeadline).getTime()
          );
        });
        break;
      case 'priority':
        const priorityOrder = { URGENT: 0, HIGH: 1, MEDIUM: 2, LOW: 3 };
        result.sort(
          (a, b) =>
            (priorityOrder[a.priority as keyof typeof priorityOrder] || 4) -
            (priorityOrder[b.priority as keyof typeof priorityOrder] || 4)
        );
        break;
    }
    setFilteredSuggestions(result);
  }, [initialSuggestions, searchQuery, sortOption, filterOption, userId]);

  const handleOpenDetails = (suggestion: ExtendedMatchSuggestion) => {
    setSelectedSuggestion(suggestion);
  };

  const handleInquiry = (suggestion: ExtendedMatchSuggestion) => {
    setSelectedSuggestion(suggestion);
    setShowAskDialog(true);
  };

  const handleStatusAction = (
    suggestion: ExtendedMatchSuggestion,
    action: 'approve' | 'decline'
  ) => {
    onActionRequest(suggestion, action);
  };

  const handleSendQuestion = async (questionText: string) => {
    if (!selectedSuggestion) return;
    try {
      const response = await fetch(
        `/api/suggestions/${selectedSuggestion.id}/inquiries`,
        {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ question: questionText }),
        }
      );
      if (!response.ok) throw new Error('Failed to send inquiry');
      toast.success('השאלה נשלחה בהצלחה לשדכן', {
        description: 'השדכן יחזור אליך עם תשובה בהקדם',
      });
      setShowAskDialog(false);
    } catch (error) {
      toast.error('אירעה שגיאה בשליחת השאלה');
    }
  };

  const clearFilters = () => {
    setSearchQuery('');
    setFilterOption('all');
  };

  if (isLoading) {
    return (
      <div className={cn('space-y-6', className)}>
        {/* Skeleton content... */}
      </div>
    );
  }

  return (
    <>
      <div className={cn('space-y-6', className)}>
        <StatsBar
          total={initialSuggestions.length}
          filtered={filteredSuggestions.length}
          pending={pendingCount}
          isHistory={isHistory}
          dict={suggestionsDict.list.stats}
        />

        <Card className="border-0 shadow-lg bg-white/80 backdrop-blur-sm">
          <CardContent className="p-6">
            <div className="flex flex-col gap-4">
              <div className="flex items-center gap-3">
                <div className="relative flex-1">
                  <Search className="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5" />
                  <Input
                    type="text"
                    placeholder={suggestionsDict.list.controls.searchPlaceholder}
                    value={searchQuery}
                    onChange={(e) => setSearchQuery(e.target.value)}
                    className="pr-12 text-right border-gray-200 focus:border-purple-300 focus:ring-purple-200 rounded-xl h-12"
                  />
                </div>
                <DropdownMenu>
                  <DropdownMenuTrigger asChild>
                    <Button
                      variant="outline"
                      size="icon"
                      className="h-12 w-12 border-gray-200 hover:border-purple-300 hover:bg-purple-50 rounded-xl transition-colors"
                    >
                      <Filter className="h-5 w-5" />
                    </Button>
                  </DropdownMenuTrigger>
                  <DropdownMenuContent align="end" className="w-56">
                    <DropdownMenuLabel className="text-right">
                      {suggestionsDict.list.controls.filterLabel}
                    </DropdownMenuLabel>
                    <DropdownMenuGroup>
                      <DropdownMenuItem onClick={() => setFilterOption('all')}>
                        <Check className={cn('mr-2 h-4 w-4', filterOption === 'all' ? 'opacity-100' : 'opacity-0')} />
                        {suggestionsDict.list.controls.filterAll}
                      </DropdownMenuItem>
                      <DropdownMenuItem onClick={() => setFilterOption('pending')}>
                        <Check className={cn('mr-2 h-4 w-4', filterOption === 'pending' ? 'opacity-100' : 'opacity-0')} />
                        {suggestionsDict.list.controls.filterPending}
                      </DropdownMenuItem>
                      <DropdownMenuItem onClick={() => setFilterOption('accepted')}>
                        <Check className={cn('mr-2 h-4 w-4', filterOption === 'accepted' ? 'opacity-100' : 'opacity-0')} />
                        {suggestionsDict.list.controls.filterAccepted}
                      </DropdownMenuItem>
                      <DropdownMenuItem onClick={() => setFilterOption('declined')}>
                        <Check className={cn('mr-2 h-4 w-4', filterOption === 'declined' ? 'opacity-100' : 'opacity-0')} />
                        {suggestionsDict.list.controls.filterDeclined}
                      </DropdownMenuItem>
                      <DropdownMenuItem onClick={() => setFilterOption('contact_shared')}>
                        <Check className={cn('mr-2 h-4 w-4', filterOption === 'contact_shared' ? 'opacity-100' : 'opacity-0')} />
                        {suggestionsDict.list.controls.filterContactShared}
                      </DropdownMenuItem>
                    </DropdownMenuGroup>
                  </DropdownMenuContent>
                </DropdownMenu>
                <Select
                  value={sortOption}
                  onValueChange={(value) => setSortOption(value as SortOption)}
                >
                  <SelectTrigger className="w-48 h-12 border-gray-200 focus:border-purple-300 rounded-xl">
                    <SelectValue placeholder={suggestionsDict.list.controls.sortPlaceholder} />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="newest">
                      <div className="flex items-center gap-2">
                        <SortDesc className="h-4 w-4" />
                        {suggestionsDict.list.controls.sortNewest}
                      </div>
                    </SelectItem>
                    <SelectItem value="oldest">
                      <div className="flex items-center gap-2">
                        <SortAsc className="h-4 w-4" />
                        {suggestionsDict.list.controls.sortOldest}
                      </div>
                    </SelectItem>
                    <SelectItem value="deadline">
                      <div className="flex items-center gap-2">
                        <Calendar className="h-4 w-4" />
                        {suggestionsDict.list.controls.sortDeadline}
                      </div>
                    </SelectItem>
                    <SelectItem value="priority">
                      <div className="flex items-center gap-2">
                        <Filter className="h-4 w-4" />
                        {suggestionsDict.list.controls.sortPriority}
                      </div>
                    </SelectItem>
                  </SelectContent>
                </Select>
              </div>
              {(searchQuery || filterOption !== 'all') && (
                <div className="flex items-center gap-2 pt-2 border-t border-gray-100">
                  <span className="text-sm text-gray-500 font-medium">{suggestionsDict.list.activeFilters.title}</span>
                  {searchQuery && (
                    <Badge variant="outline" className="flex items-center gap-1 bg-purple-50 text-purple-700 border-purple-200">
                      {suggestionsDict.list.activeFilters.search} {searchQuery}
                      <Button variant="ghost" size="icon" className="h-4 w-4 p-0 hover:bg-transparent" onClick={() => setSearchQuery('')}>
                        <XCircle className="h-3 w-3" />
                      </Button>
                    </Badge>
                  )}
                  {filterOption !== 'all' && (
                    <Badge variant="outline" className="flex items-center gap-1 bg-pink-50 text-pink-700 border-pink-200">
                      {filterOption === 'pending' && suggestionsDict.list.controls.filterPending}
                      {filterOption === 'accepted' && suggestionsDict.list.controls.filterAccepted}
                      {filterOption === 'declined' && suggestionsDict.list.controls.filterDeclined}
                      {filterOption === 'contact_shared' && suggestionsDict.list.controls.filterContactShared}
                      <Button variant="ghost" size="icon" className="h-4 w-4 p-0 hover:bg-transparent" onClick={() => setFilterOption('all')}>
                        <XCircle className="h-3 w-3" />
                      </Button>
                    </Badge>
                  )}
                  <Button variant="ghost" size="sm" className="text-xs text-gray-500 hover:text-gray-700" onClick={clearFilters}>
                    {suggestionsDict.list.activeFilters.clearAll}
                  </Button>
                </div>
              )}
            </div>
          </CardContent>
        </Card>

        <div className="flex justify-between items-center text-sm text-gray-600">
          <span>
            {filteredSuggestions.length === 1
              ? suggestionsDict.list.resultsCount.showingSingle.replace('{{count}}', '1').replace('{{total}}', initialSuggestions.length.toString())
              : suggestionsDict.list.resultsCount.showingMultiple.replace('{{count}}', filteredSuggestions.length.toString()).replace('{{total}}', initialSuggestions.length.toString())}
          </span>
          {filteredSuggestions.length > 0 && (
            <div className="flex items-center gap-2">
              <Sparkles className="w-4 h-4 text-purple-500" />
              <span className="font-medium">{suggestionsDict.list.resultsCount.qualityMatches}</span>
            </div>
          )}
        </div>

        {filteredSuggestions.length === 0 ? (
          <EmptyState
            isFiltered={searchQuery !== '' || filterOption !== 'all'}
            isHistory={isHistory}
            onClearFilters={clearFilters}
            dict={suggestionsDict.list.emptyState}
          />
        ) : (
          <div
            className={cn(
              viewMode === 'grid'
                ? 'grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6'
                : 'space-y-6',
              'animate-fade-in-up'
            )}
          >
            {filteredSuggestions.map((suggestion, index) => (
              <div
                key={suggestion.id}
                className="animate-scale-in"
                style={{
                  animationDelay: `${index * 100}ms`,
                  animationFillMode: 'both',
                }}
              >
                <MinimalSuggestionCard
                  suggestion={suggestion}
                  userId={userId}
                  onClick={() => handleOpenDetails(suggestion)}
                  onInquiry={() => handleInquiry(suggestion)}
                  onApprove={() => handleStatusAction(suggestion, 'approve')}
                  onDecline={() => handleStatusAction(suggestion, 'decline')}
                  isHistory={isHistory}
                  isApprovalDisabled={isUserInActiveProcess}
                  className={cn(
                    'card-hover-elegant',
                    viewMode === 'list' ? 'flex' : ''
                  )}
                  dict={suggestionsDict.card}
                />
              </div>
            ))}
          </div>
        )}
      </div>

      <SuggestionDetailsModal
        suggestion={selectedSuggestion}
        userId={userId}
        isOpen={!!selectedSuggestion && !showAskDialog}
        onClose={() => setSelectedSuggestion(null)}
        onActionRequest={onActionRequest}
        questionnaire={
          selectedSuggestion?.secondParty?.questionnaireResponses?.[0] || null
        }
        // ✅ 4. העברת שני ה-props ליעד הסופי
       dict={{
          suggestions: suggestionsDict,
          profileCard: profileCardDict,
        }}
      />

      <AskMatchmakerDialog
        isOpen={showAskDialog}
        onClose={() => setShowAskDialog(false)}
        onSubmit={handleSendQuestion}
        matchmakerName={selectedSuggestion?.matchmaker.firstName}
        dict={suggestionsDict.askMatchmaker}
      />
    </>
  );
};

export default SuggestionsList;
--- End of Content for SuggestionsList.tsx ---

================================================================================
Directory: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\suggestions\modals
================================================================================

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\suggestions\modals\SuggestionDetailsModal.tsx
--------------------------------------------------------------------------------
Content:
// src/app/components/suggestions/modals/SuggestionDetailsModal.tsx
'use client';

import React, { useState, useEffect, useCallback, useMemo } from 'react';
import Image from 'next/image';
import { useSearchParams } from 'next/navigation';

import { Dialog, DialogContent } from '@/components/ui/dialog';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Button } from '@/components/ui/button';
import { ScrollArea } from '@/components/ui/scroll-area';
import { Card, CardContent } from '@/components/ui/card';
import { Avatar, AvatarFallback } from '@/components/ui/avatar';
import { Badge } from '@/components/ui/badge';
import {
  CheckCircle,
  XCircle,
  MessageCircle,
  X,
  Loader2,
  Sparkles,
  User,
  Info,
  Heart,
  Brain,
  Quote,
  MapPin,
  Briefcase,
  GraduationCap,
  ChevronUp,
  Scroll as ScrollIcon,
  GitCompareArrows,
  Eye,
  Calendar,
  ArrowRight,
  Users,
  Target,
  Lightbulb,
  Puzzle,
  Telescope,
  ChevronDown,
  Rocket,
  Sunrise,
  Mountain,
  Timer,
  Maximize,
  Minimize,
  AlertTriangle,
  Bot,
  PartyPopper,
  Wand2,
  TrendingUp,
  Network,
  Compass,
} from 'lucide-react';
import { toast } from 'sonner';
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from '@/components/ui/tooltip';
import { getInitials, cn, getRelativeCloudinaryPath } from '@/lib/utils';
import type { QuestionnaireResponse } from '@/types/next-auth';
import type { AiSuggestionAnalysisResult } from '@/lib/services/aiService';

import { ProfileCard } from '@/components/profile';
import SuggestionTimeline from '../timeline/SuggestionTimeline';
import InquiryThreadView from '../inquiries/InquiryThreadView';
import { AskMatchmakerDialog } from '../dialogs/AskMatchmakerDialog';
import { UserAiAnalysisDialog } from '../dialogs/UserAiAnalysisDialog';
import type { ExtendedMatchSuggestion } from '../types';
// =============================    KEY CHANGE #1    =============================
// ייבאנו את שני הטיפוסים הדרושים למילון
import type {
  SuggestionsDictionary,
  ProfileCardDict,
} from '@/types/dictionary';
// ==============================================================================

interface SuggestionDetailsModalProps {
  suggestion: ExtendedMatchSuggestion | null;
  userId: string;
  isOpen: boolean;
  onClose: () => void;
  onActionRequest: (
    suggestion: ExtendedMatchSuggestion,
    action: 'approve' | 'decline'
  ) => void;
  questionnaire: QuestionnaireResponse | null;
  isDemo?: boolean;
  demoAnalysisData?: AiSuggestionAnalysisResult | null;
  // =============================    KEY CHANGE #2    =============================
  // עדכנו את ה-prop כך שיקבל אובייקט המכיל את שני המילונים
  // שהקומפוננטה הזו צריכה כדי לתפקד ולרנדר את ילדיה.
  dict: {
    suggestions: SuggestionsDictionary;
    profileCard: ProfileCardDict;
  };
  // ==============================================================================
}

const useIsMobile = () => {
  const [isMobile, setIsMobile] = useState(false);
  useEffect(() => {
    const checkDevice = () => {
      setIsMobile(window.innerWidth < 768);
    };
    checkDevice();
    window.addEventListener('resize', checkDevice);
    return () => window.removeEventListener('resize', checkDevice);
  }, []);
  return isMobile;
};

const useFullscreenModal = (isOpen: boolean) => {
  const [isFullscreen, setIsFullscreen] = useState(false);
  const [isTransitioning, setIsTransitioning] = useState(false);
  const toggleFullscreen = useCallback(() => {
    setIsTransitioning(true);
    setIsFullscreen((prev) => !prev);
    setTimeout(() => setIsTransitioning(false), 300);
  }, []);
  useEffect(() => {
    if (!isOpen) {
      setIsFullscreen(false);
      setIsTransitioning(false);
    }
  }, [isOpen]);
  return { isFullscreen, isTransitioning, toggleFullscreen };
};

const EnhancedHeroSection: React.FC<{
  matchmaker: { firstName: string; lastName: string };
  targetParty: ExtendedMatchSuggestion['secondParty'];
  personalNote?: string | null;
  matchingReason?: string | null;
  onViewProfile: () => void;
  onStartConversation: () => void;
  dict: SuggestionsDictionary['modal']['header'];
}> = ({
  matchmaker,
  targetParty,
  personalNote,
  matchingReason,
  onViewProfile,
  onStartConversation,
  dict,
}) => {
  const age = targetParty.profile?.birthDate
    ? new Date().getFullYear() -
      new Date(targetParty.profile.birthDate).getFullYear()
    : null;
  const mainImage = targetParty.images?.find((img) => img.isMain)?.url;

  return (
    <div className="relative min-h-screen bg-gradient-to-br from-slate-50 via-white to-blue-50 overflow-hidden">
      {/* Background elements */}
      <div className="absolute inset-0">
        <div className="absolute top-10 right-10 w-72 h-72 bg-gradient-to-br from-purple-200/40 to-pink-200/40 rounded-full blur-3xl animate-float"></div>
        <div
          className="absolute bottom-10 left-10 w-64 h-64 bg-gradient-to-br from-cyan-200/40 to-blue-200/40 rounded-full blur-2xl animate-float"
          style={{ animationDelay: '2s' }}
        ></div>
      </div>

      <div className="relative z-10 p-4 md:p-8 lg:p-12">
        <div className="text-center mb-8 lg:mb-12">
          <div className="inline-flex items-center gap-2 mb-6 p-3 bg-white/90 backdrop-blur-lg rounded-2xl shadow-lg border border-purple-100 animate-fade-in-up">
            <Avatar className="w-12 h-12 border-2 border-white shadow-lg">
              <AvatarFallback className="bg-gradient-to-br from-purple-600 to-pink-600 text-white text-sm font-bold">
                {getInitials(`${matchmaker.firstName} ${matchmaker.lastName}`)}
              </AvatarFallback>
            </Avatar>
            <div className="text-right">
              <p className="text-xs font-medium text-purple-600 mb-1">
                {dict.suggestedBy}
              </p>
              <p className="text-lg font-bold text-gray-800">
                {matchmaker.firstName} {matchmaker.lastName}
              </p>
            </div>
          </div>
          <div className="max-w-4xl mx-auto mb-8">
            <h1
              className="text-4xl md:text-5xl lg:text-6xl font-bold bg-gradient-to-r from-purple-600 via-pink-600 to-blue-600 bg-clip-text text-transparent mb-6 leading-tight animate-fade-in-up"
              style={{ animationDelay: '0.5s' }}
            >
              {dict.title}
            </h1>
            <p
              className="text-xl md:text-2xl text-gray-700 leading-relaxed font-medium animate-fade-in-up"
              style={{ animationDelay: '1s' }}
            >
              {dict.subtitleLine1}
              <br />
              {dict.subtitleLine2}
            </p>
          </div>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-2 gap-8 lg:gap-12 mb-12">
          <div
            className="relative group animate-fade-in-up"
            style={{ animationDelay: '1.5s' }}
          >
            <div className="absolute -inset-4 bg-gradient-to-r from-purple-400/50 via-pink-400/50 to-blue-400/50 rounded-3xl blur-lg opacity-70 group-hover:opacity-100 transition-opacity animate-pulse"></div>
            <Card className="relative overflow-hidden shadow-2xl border-0 bg-white/95 backdrop-blur-sm">
              <div className="relative h-96 lg:h-[600px]">
                {mainImage ? (
                  <Image
                    src={getRelativeCloudinaryPath(mainImage)}
                    alt={`Image of ${targetParty.firstName}`}
                    fill
                    className="object-cover transition-transform duration-700 group-hover:scale-105"
                    sizes="(max-width: 1024px) 100vw, 50vw"
                  />
                ) : (
                  <div className="w-full h-full bg-gradient-to-br from-purple-100 via-pink-100 to-blue-100 flex items-center justify-center">
                    <User className="w-24 h-24 text-purple-400" />
                  </div>
                )}
                <div className="absolute inset-0 bg-gradient-to-t from-black/80 via-black/20 to-transparent" />
                <div className="absolute bottom-0 right-0 left-0 p-6">
                  <div className="bg-white/95 backdrop-blur-lg rounded-2xl p-6 shadow-2xl">
                    <div className="flex items-center justify-between mb-4">
                      <div>
                        <h2 className="text-4xl font-bold text-gray-900 mb-2 tracking-tight">
                          {targetParty.firstName}
                        </h2>
                        {age && (
                          <Badge className="bg-gradient-to-r from-purple-500 to-pink-500 text-white border-0 shadow-lg text-lg px-4 py-2">
                            <Calendar className="w-4 h-4 ml-2" />
                            {dict.ageInYears.replace('{{age}}', age.toString())}
                          </Badge>
                        )}
                      </div>
                      <div className="text-center">
                        <div className="w-16 h-16 rounded-full bg-gradient-to-r from-emerald-400 to-cyan-500 flex items-center justify-center shadow-lg mb-2">
                          <Telescope className="w-8 h-8 text-white" />
                        </div>
                        <Button
                          onClick={onViewProfile}
                          className="bg-gradient-to-r from-emerald-500 to-cyan-500 hover:from-emerald-600 hover:to-cyan-600 text-white shadow-xl rounded-full px-6 py-3 font-bold text-base"
                        >
                          {dict.discoverMore}
                        </Button>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </Card>
          </div>

          <div
            className="space-y-8 animate-fade-in-up"
            style={{ animationDelay: '2s' }}
          >
            <Card className="border-0 shadow-2xl bg-gradient-to-br from-purple-50 via-pink-50 to-white overflow-hidden">
              <CardContent className="p-8 relative">
                {/* Decorative elements */}
                <div className="absolute top-0 right-0 w-32 h-32 bg-gradient-to-br from-purple-200/30 to-pink-200/30 rounded-full blur-2xl"></div>
                <div className="relative z-10">
                  <h2 className="text-3xl md:text-4xl font-bold bg-gradient-to-r from-purple-600 via-pink-600 to-blue-600 bg-clip-text text-transparent mb-4 leading-tight text-center">
                    {dict.matchStoryTitle}
                  </h2>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mt-8">
                    <Button
                      onClick={onViewProfile}
                      size="lg"
                      className="bg-gradient-to-r from-purple-500 to-pink-500 hover:from-purple-600 hover:to-pink-600 text-white shadow-xl rounded-xl h-14 font-bold text-base transform hover:scale-105 transition-all"
                    >
                      <User className="w-5 h-5 ml-2" />
                      {dict.viewFullProfile}
                      <ArrowRight className="w-4 h-4 mr-2" />
                    </Button>
                    <Button
                      onClick={onStartConversation}
                      variant="outline"
                      size="lg"
                      className="border-2 border-purple-300 text-purple-600 hover:bg-purple-50 shadow-lg rounded-xl h-14 font-bold text-base transform hover:scale-105 transition-all"
                    >
                      <MessageCircle className="w-5 h-5 ml-2" />
                      {dict.iHaveQuestions}
                    </Button>
                  </div>
                </div>
              </CardContent>
            </Card>
            {(personalNote || matchingReason) && (
              <Card className="border-0 shadow-xl bg-gradient-to-br from-cyan-50 to-blue-50 overflow-hidden">
                <CardContent className="p-6 relative">
                  <div className="flex items-start gap-4">
                    <div className="p-4 rounded-full bg-gradient-to-r from-cyan-500 to-blue-500 text-white shadow-lg flex-shrink-0">
                      <Lightbulb className="w-7 h-7" />
                    </div>
                    <div className="flex-1">
                      <h3 className="font-bold text-cyan-800 text-xl mb-4">
                        {dict.matchmakerInsight}
                      </h3>
                      {personalNote && (
                        <div className="mb-4 p-4 bg-white/70 rounded-xl shadow-inner border border-cyan-100">
                          <div className="flex items-start gap-2">
                            <Quote className="w-5 h-5 text-cyan-500 mt-1 flex-shrink-0" />
                            <div>
                              <h4 className="font-semibold text-cyan-800 mb-2">
                                {dict.whyYou}
                              </h4>
                              <p className="text-cyan-900 leading-relaxed italic font-medium">
                                “{personalNote}”
                              </p>
                            </div>
                          </div>
                        </div>
                      )}
                      {matchingReason && (
                        <div className="p-4 bg-white/70 rounded-xl shadow-inner border border-blue-100">
                          <div className="flex items-start gap-2">
                            <Puzzle className="w-5 h-5 text-blue-500 mt-1 flex-shrink-0" />
                            <div>
                              <h4 className="font-semibold text-blue-800 mb-2">
                                {dict.ourConnection}
                              </h4>
                              <p className="text-blue-900 leading-relaxed font-medium">
                                “{matchingReason}”
                              </p>
                            </div>
                          </div>
                        </div>
                      )}
                    </div>
                  </div>
                </CardContent>
              </Card>
            )}
          </div>
        </div>
      </div>
    </div>
  );
};

const EnhancedQuickActions: React.FC<{
  isExpanded: boolean;
  onToggleExpand: () => void;
  canAct: boolean;
  isSubmitting: boolean;
  onApprove: () => void;
  onDecline: () => void;
  onAskQuestion: () => void;
  dict: SuggestionsDictionary['modal']['actions'];
}> = ({
  isExpanded,
  onToggleExpand,
  canAct,
  isSubmitting,
  onApprove,
  onDecline,
  onAskQuestion,
  dict,
}) => (
  <div
    className={cn(
      'flex-shrink-0 bg-gradient-to-r from-white via-purple-50/50 to-pink-50/50 backdrop-blur-sm border-t border-purple-100 transition-all duration-500 ease-in-out relative z-10',
      isExpanded ? 'p-4 md:p-6' : 'py-3 px-4 md:px-6'
    )}
  >
    <div className="max-w-4xl mx-auto relative z-10">
      <div
        className="flex justify-between items-center cursor-pointer group"
        onClick={onToggleExpand}
      >
        <div className="flex items-center gap-3">
          <div className="w-10 h-10 rounded-full bg-gradient-to-r from-purple-500 to-pink-500 flex items-center justify-center shadow-lg">
            <PartyPopper className="w-5 h-5 text-white" />
          </div>
          <div>
            <p className="text-base font-bold text-purple-700">
              {isExpanded ? dict.titleExpanded : dict.titleCollapsed}
            </p>
            {isExpanded && (
              <p className="text-sm text-gray-600 mt-1">{dict.subtitle}</p>
            )}
          </div>
        </div>
        <Button
          variant="ghost"
          size="icon"
          className="rounded-full h-10 w-10 text-purple-500 hover:bg-purple-100/50 group-hover:scale-110 transition-all"
        >
          {isExpanded ? (
            <ChevronDown className="w-5 h-5" />
          ) : (
            <ChevronUp className="w-5 h-5" />
          )}
        </Button>
      </div>
      {isExpanded && (
        <div className="mt-6 animate-in fade-in-50 slide-in-from-bottom-4 duration-500">
          <div className="grid grid-cols-1 gap-4 md:flex md:gap-6">
            {canAct && (
              <Button
                className="relative w-full md:flex-1 bg-gradient-to-r from-emerald-500 via-green-500 to-emerald-600 hover:from-emerald-600 hover:via-green-600 hover:to-emerald-700 text-white shadow-2xl hover:shadow-3xl transition-all duration-300 rounded-2xl h-16 font-bold text-lg transform hover:scale-105"
                disabled={isSubmitting}
                onClick={onApprove}
              >
                {isSubmitting ? (
                  <>
                    <Loader2 className="w-6 h-6 animate-spin ml-3" />
                    <span>{dict.sending}</span>
                  </>
                ) : (
                  <>
                    <Heart className="w-6 h-6 animate-pulse ml-3" />
                    <span>{dict.approve}</span>
                    <Sparkles className="w-5 h-5 ml-2" />
                  </>
                )}
              </Button>
            )}
            <Button
              variant="outline"
              onClick={onAskQuestion}
              disabled={isSubmitting}
              className="w-full md:flex-1 border-2 border-purple-200 text-purple-600 hover:bg-purple-50 hover:border-purple-300 transition-all duration-300 rounded-2xl h-16 font-bold text-lg shadow-lg hover:shadow-xl transform hover:scale-105"
            >
              <MessageCircle className="w-6 h-6 ml-3" />
              <span>{dict.ask}</span>
            </Button>
            {canAct && (
              <Button
                variant="ghost"
                className="w-full md:flex-1 text-gray-600 hover:bg-gray-100 hover:text-gray-700 transition-all duration-300 rounded-2xl h-16 font-bold text-lg transform hover:scale-105"
                disabled={isSubmitting}
                onClick={onDecline}
              >
                {isSubmitting ? (
                  <>
                    <Loader2 className="w-5 h-5 animate-spin ml-2" />
                    <span>{dict.updating}</span>
                  </>
                ) : (
                  <>
                    <XCircle className="w-5 h-5 ml-3" />
                    <span>{dict.decline}</span>
                  </>
                )}
              </Button>
            )}
          </div>
          {canAct && (
            <p className="mt-4 text-center text-sm text-gray-600 leading-relaxed">
              <span className="font-semibold text-purple-600">💡</span>{' '}
              {dict.reminder}
            </p>
          )}
        </div>
      )}
    </div>
  </div>
);

const EnhancedTabsSection: React.FC<{
  activeTab: string;
  onTabChange: (tab: string) => void;
  onClose: () => void;
  isFullscreen: boolean;
  onToggleFullscreen: () => void;
  isMobile: boolean;
  isTransitioning?: boolean;
  dict: SuggestionsDictionary['modal']['tabs'];
}> = ({
  activeTab,
  onTabChange,
  onClose,
  isFullscreen,
  onToggleFullscreen,
  isMobile,
  isTransitioning = false,
  dict,
}) => (
  <div className="border-b border-purple-100 px-2 sm:px-6 pt-4 bg-gradient-to-r from-purple-50/80 to-pink-50/80 backdrop-blur-sm sticky top-0 z-20">
    <div className="flex items-center justify-between mb-4">
      <TabsList className="grid w-full grid-cols-4 bg-white/90 backdrop-blur-sm rounded-3xl p-2 h-20 shadow-xl border-2 border-purple-100 overflow-hidden">
        <TabsTrigger
          value="presentation"
          className="flex flex-col items-center justify-center gap-1.5 rounded-2xl text-xs sm:text-sm data-[state=active]:bg-gradient-to-br data-[state=active]:from-purple-500 data-[state=active]:to-pink-500 data-[state=active]:text-white data-[state=active]:shadow-xl font-bold"
        >
          <Sparkles className="w-5 h-5 sm:w-6 sm:h-6" />
          <span className="hidden sm:inline">{dict.presentation}</span>
          <span className="sm:hidden">{dict.presentationShort}</span>
        </TabsTrigger>
        <TabsTrigger
          value="profile"
          className="flex flex-col items-center justify-center gap-1.5 rounded-2xl text-xs sm:text-sm data-[state=active]:bg-gradient-to-br data-[state=active]:from-emerald-500 data-[state=active]:to-green-500 data-[state=active]:text-white data-[state=active]:shadow-xl font-bold"
        >
          <User className="w-5 h-5 sm:w-6 sm:h-6" />
          <span className="hidden sm:inline">{dict.profile}</span>
          <span className="sm:hidden">{dict.profileShort}</span>
        </TabsTrigger>
        <TabsTrigger
          value="compatibility"
          className="flex flex-col items-center justify-center gap-1.5 rounded-2xl text-xs sm:text-sm data-[state=active]:bg-gradient-to-br data-[state=active]:from-blue-500 data-[state=active]:to-cyan-500 data-[state=active]:text-white data-[state=active]:shadow-xl font-bold"
        >
          <GitCompareArrows className="w-5 h-5 sm:w-6 sm:h-6" />
          <span className="hidden sm:inline">{dict.compatibility}</span>
          <span className="sm:hidden">{dict.compatibilityShort}</span>
        </TabsTrigger>
        <TabsTrigger
          value="details"
          className="flex flex-col items-center justify-center gap-1.5 rounded-2xl text-xs sm:text-sm data-[state=active]:bg-gradient-to-br data-[state=active]:from-gray-500 data-[state=active]:to-slate-500 data-[state=active]:text-white data-[state=active]:shadow-xl font-bold"
        >
          <Info className="w-5 h-5 sm:w-6 sm:h-6" />
          <span className="hidden sm:inline">{dict.details}</span>
          <span className="sm:hidden">{dict.detailsShort}</span>
        </TabsTrigger>
      </TabsList>
      <div className="flex items-center gap-2 ml-4">
        {!isMobile && (
          <TooltipProvider>
            <Tooltip>
              <TooltipTrigger asChild>
                <Button
                  variant="ghost"
                  size="icon"
                  onClick={onToggleFullscreen}
                  className="rounded-full h-12 w-12 text-blue-500 hover:text-blue-600 hover:bg-blue-50"
                  disabled={isTransitioning}
                >
                  {isFullscreen ? (
                    <Minimize className="w-6 h-6" />
                  ) : (
                    <Maximize className="w-6 h-6" />
                  )}
                </Button>
              </TooltipTrigger>
              <TooltipContent side="bottom">
                <p>{isFullscreen ? dict.exitFullscreen : dict.fullscreen}</p>
              </TooltipContent>
            </Tooltip>
          </TooltipProvider>
        )}
        <Button
          variant="ghost"
          size="icon"
          onClick={onClose}
          className="rounded-full h-12 w-12 text-gray-400 hover:text-gray-600 hover:bg-gray-100"
        >
          <X className="w-6 h-6" />
        </Button>
      </div>
    </div>
  </div>
);

const SuggestionDetailsModal: React.FC<SuggestionDetailsModalProps> = ({
  suggestion,
  userId,
  isOpen,
  onClose,
  onActionRequest,
  questionnaire,
  isDemo = false,
  demoAnalysisData = null,
  dict,
}) => {
  const [activeTab, setActiveTab] = useState('presentation');
  const [showAskDialog, setShowAskDialog] = useState(false);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [isQuestionnaireLoading, setIsQuestionnaireLoading] = useState(false);
  const [isActionsExpanded, setIsActionsExpanded] = useState(false);

  const isMobile = useIsMobile();
  const { isFullscreen, isTransitioning, toggleFullscreen } =
    useFullscreenModal(isOpen);
  const searchParams = useSearchParams();

  useEffect(() => {
    if (isOpen) {
      const view = searchParams.get('view');
      setActiveTab(view === 'chat' ? 'details' : 'presentation');
      setIsActionsExpanded(false);
    }
  }, [isOpen, searchParams, suggestion?.id]);

  const isFirstParty = suggestion?.firstPartyId === userId;
  const targetParty = suggestion
    ? isFirstParty
      ? suggestion.secondParty
      : suggestion.firstParty
    : null;
  const profileWithUser = useMemo(() => {
    if (!targetParty || !targetParty.profile) {
      return null;
    }
    return {
      ...targetParty.profile,
      user: {
        firstName: targetParty.firstName,
        lastName: targetParty.lastName,
      },
    };
  }, [targetParty]);
  const canActOnSuggestion =
    (isFirstParty && suggestion?.status === 'PENDING_FIRST_PARTY') ||
    (!isFirstParty && suggestion?.status === 'PENDING_SECOND_PARTY');

  const handleSendQuestion = async (question: string) => {
    if (!suggestion) return;
    setIsSubmitting(true);
    try {
      await fetch(`/api/suggestions/${suggestion.id}/inquiries`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ question }),
      });
      toast.success('Question sent!');
      setShowAskDialog(false);
    } catch (error) {
      toast.error('Failed to send question.');
    } finally {
      setIsSubmitting(false);
    }
  };

  if (!suggestion || !targetParty || !profileWithUser) return null;

  const handleApprove = () => {
    onActionRequest(suggestion, 'approve');
    onClose();
  };
  const handleDecline = () => {
    onActionRequest(suggestion, 'decline');
    onClose();
  };

  // src/components/suggestions/modals/SuggestionDetailsModal.tsx

  const getModalClasses = () => {
    const base =
      'p-0 shadow-2xl border-0 bg-white overflow-hidden z-[50] flex flex-col transition-all duration-300 ease-in-out';
    if (isMobile)
      //  <-- כאן התיקון
      return `${base} !w-screen !h-[100dvh] !max-w-none !max-h-none !rounded-none`;
    if (isFullscreen)
      return `${base} !w-screen !h-screen !max-w-none !max-h-none !rounded-none !fixed !inset-0 !m-0`;
    return `${base} md:max-w-7xl md:w-[95vw] md:h-[95vh] md:rounded-3xl`;
  };
  return (
    <>
      <Dialog open={isOpen} onOpenChange={onClose}>
        <DialogContent
          className={cn(getModalClasses())}
          dir="rtl"
          onOpenAutoFocus={(e) => e.preventDefault()}
        >
          <ScrollArea className="flex-grow min-h-0 modal-scroll">
            <Tabs
              value={activeTab}
              onValueChange={setActiveTab}
              className="h-full"
            >
              <EnhancedTabsSection
                activeTab={activeTab}
                onTabChange={setActiveTab}
                onClose={onClose}
                isFullscreen={isFullscreen}
                onToggleFullscreen={toggleFullscreen}
                isMobile={isMobile}
                isTransitioning={isTransitioning}
                // =============================    KEY CHANGE #3 (Usage)    =============================
                // ניגשים למילון דרך המפתח המתאים
                dict={dict.suggestions.modal.tabs}
                // ======================================================================================
              />
              <TabsContent value="presentation" className="mt-0">
                <EnhancedHeroSection
                  matchmaker={suggestion.matchmaker}
                  targetParty={targetParty}
                  personalNote={
                    isFirstParty
                      ? suggestion.firstPartyNotes
                      : suggestion.secondPartyNotes
                  }
                  matchingReason={suggestion.matchingReason}
                  onViewProfile={() => setActiveTab('profile')}
                  onStartConversation={() => setShowAskDialog(true)}
                  // =============================    KEY CHANGE #3 (Usage)    =============================
                  dict={dict.suggestions.modal.header}
                  // ======================================================================================
                />
              </TabsContent>
              <TabsContent
                value="profile"
                className="mt-0 p-4 md:p-6 bg-gradient-to-br from-slate-50 to-blue-50"
              >
                {isQuestionnaireLoading ? (
                  <div className="flex justify-center items-center h-64">
                    <div className="text-center">
                      <Loader2 className="w-12 h-12 animate-spin text-purple-600 mx-auto mb-4" />
                      <p className="text-lg font-semibold text-gray-700">
                        {dict.suggestions.modal.profile.loading}
                      </p>
                      <p className="text-sm text-gray-500 mt-2">
                        {dict.suggestions.modal.profile.loadingDescription}
                      </p>
                    </div>
                  </div>
                ) : profileWithUser ? (
                  <ProfileCard
                    profile={profileWithUser}
                    isProfileComplete={targetParty.isProfileComplete}
                    images={targetParty.images}
                    questionnaire={questionnaire}
                    viewMode="candidate"
                    // =============================    KEY CHANGE #3 (Usage)    =============================
                    // מעבירים לקומפוננטת הפרופיל את המילון שלה
                    dict={dict.profileCard}
                    // ======================================================================================
                  />
                ) : (
                  <div className="text-center p-12">
                    <div className="w-24 h-24 rounded-full bg-red-100 flex items-center justify-center mx-auto mb-6">
                      <AlertTriangle className="w-12 h-12 text-red-500" />
                    </div>
                    <h3 className="text-2xl font-bold text-gray-800 mb-4">
                      {dict.suggestions.modal.profile.errorTitle}
                    </h3>
                    <p className="text-gray-600 max-w-md mx-auto leading-relaxed">
                      {dict.suggestions.modal.profile.errorDescription}
                    </p>
                    <Button
                      onClick={() => setShowAskDialog(true)}
                      className="mt-6 bg-gradient-to-r from-purple-500 to-pink-500 text-white"
                    >
                      <MessageCircle className="w-4 h-4 ml-2" />
                      {dict.suggestions.modal.profile.contactMatchmaker}
                    </Button>
                  </div>
                )}
              </TabsContent>
              <TabsContent
                value="compatibility"
                className="mt-0 p-4 md:p-6 bg-gradient-to-br from-slate-50 to-blue-50"
              >
                <div className="flex flex-col items-center justify-center h-full min-h-[600px] text-center space-y-8 p-6">
                  <div className="relative">
                    <div className="w-32 h-32 rounded-full bg-gradient-to-br from-blue-100 to-cyan-100 flex items-center justify-center mx-auto shadow-2xl">
                      <Bot className="w-16 h-16 text-blue-500" />
                    </div>
                    <div className="absolute -top-4 -right-4 w-12 h-12 bg-gradient-to-r from-yellow-400 to-orange-500 rounded-full flex items-center justify-center shadow-lg animate-bounce">
                      <Wand2 className="w-6 h-6 text-white" />
                    </div>
                  </div>
                  <div className="space-y-4 max-w-2xl">
                    <h3 className="text-3xl font-bold text-gray-800">
                      {dict.suggestions.modal.aiAnalysisCta.title}
                    </h3>
                    <p className="text-xl text-gray-600 leading-relaxed">
                      {dict.suggestions.modal.aiAnalysisCta.description}
                    </p>
                    <div className="flex items-center justify-center gap-4 text-sm text-gray-500 font-medium">
                      <div className="flex items-center gap-2">
                        <TrendingUp className="w-4 h-4" />
                        <span>
                          {dict.suggestions.modal.aiAnalysisCta.feature1}
                        </span>
                      </div>
                      <div className="flex items-center gap-2">
                        <Network className="w-4 h-4" />
                        <span>
                          {dict.suggestions.modal.aiAnalysisCta.feature2}
                        </span>
                      </div>
                      <div className="flex items-center gap-2">
                        <Compass className="w-4 h-4" />
                        <span>
                          {dict.suggestions.modal.aiAnalysisCta.feature3}
                        </span>
                      </div>
                    </div>
                  </div>
                  <UserAiAnalysisDialog
                    suggestedUserId={targetParty.id}
                    dict={dict.suggestions.aiAnalysis}
                    isDemo={isDemo}
                    demoAnalysisData={demoAnalysisData}
                    currentUserName={
                      isFirstParty
                        ? suggestion.firstParty.firstName
                        : suggestion.secondParty.firstName
                    }
                    suggestedUserName={targetParty.firstName}
                  />
                </div>
              </TabsContent>
              <TabsContent
                value="details"
                className="mt-0 p-6 md:p-8 space-y-8 bg-gradient-to-br from-slate-50 to-gray-50"
              >
                <div className="max-w-6xl mx-auto space-y-8">
                  <SuggestionTimeline
                    statusHistory={suggestion.statusHistory}
                    dict={dict.suggestions.timeline}
                  />
                  <InquiryThreadView
                    suggestionId={suggestion.id}
                    userId={userId}
                    showComposer={true}
                    isDemo={isDemo}
                    dict={dict.suggestions.inquiryThread}
                  />
                </div>
              </TabsContent>
            </Tabs>
          </ScrollArea>
          <EnhancedQuickActions
            isExpanded={isActionsExpanded}
            onToggleExpand={() => setIsActionsExpanded((prev) => !prev)}
            canAct={canActOnSuggestion}
            isSubmitting={isSubmitting}
            onApprove={handleApprove}
            onDecline={handleDecline}
            onAskQuestion={() => setShowAskDialog(true)}
            dict={dict.suggestions.modal.actions}
          />
        </DialogContent>
      </Dialog>
      <AskMatchmakerDialog
        isOpen={showAskDialog}
        onClose={() => setShowAskDialog(false)}
        onSubmit={handleSendQuestion}
        matchmakerName={`${suggestion.matchmaker.firstName} ${suggestion.matchmaker.lastName}`}
        dict={dict.suggestions.askMatchmaker}
      />
    </>
  );
};

export default SuggestionDetailsModal;
--- End of Content for SuggestionDetailsModal.tsx ---

================================================================================
Directory: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\suggestions\presentation
================================================================================

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\suggestions\presentation\CompatibilityHighlights.tsx
--------------------------------------------------------------------------------
Content:
// src/app/components/suggestions/presentation/CompatibilityHighlights.tsx
import React from 'react';
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from '@/components/ui/badge';
import { Check, BookOpen, Scroll, MapPin, Briefcase, Heart } from 'lucide-react';

interface ProfileData {
  religiousLevel?: string | null;
  education?: string | null;
  city?: string | null;
  occupation?: string | null;
}

interface CompatibilityHighlightsProps {
  firstPartyProfile: ProfileData;
  secondPartyProfile: ProfileData;
  matchingReason?: string | null;
}

interface Highlight {
  icon: React.ElementType;
  title: string;
  description: string;
  color: 'green' | 'blue' | 'indigo' | 'rose' | 'teal' | 'amber';
}

const CompatibilityHighlights: React.FC<CompatibilityHighlightsProps> = ({ firstPartyProfile, secondPartyProfile, matchingReason }) => {
  const highlights: Highlight[] = [];

  // 1. Religious Level
  if (firstPartyProfile.religiousLevel && firstPartyProfile.religiousLevel === secondPartyProfile.religiousLevel) {
    highlights.push({ icon: Scroll, title: "השקפת עולם דומה", description: `שניכם הגדרתם את עצמכם כ: ${firstPartyProfile.religiousLevel}`, color: 'indigo' });
  }

  // 2. Location (proximity logic would be better, but for now we'll check same city)
  if (firstPartyProfile.city && firstPartyProfile.city === secondPartyProfile.city) {
    highlights.push({ icon: MapPin, title: "קירבה גיאוגרפית", description: `שניכם גרים ב${firstPartyProfile.city}`, color: 'teal' });
  }

  // 3. Education - simple check for existence
  if (firstPartyProfile.education && secondPartyProfile.education) {
     highlights.push({ icon: BookOpen, title: "רקע והשכלה", description: `רקע לימודי ותעסוקתי שמשתלב היטב`, color: 'blue' });
  }
  
  // 4. From matching reason text
  const reasonText = matchingReason?.toLowerCase() || '';
  if (reasonText.includes('אופי') || reasonText.includes('אישיות')) {
     highlights.push({ icon: Heart, title: "התאמה אישיותית", description: 'השדכן/ית זיהו פוטנציאל לחיבור עמוק ברמה האישית.', color: 'rose' });
  }

  if (highlights.length === 0) {
      // Add a default highlight if none were found
      highlights.push({ icon: Check, title: "פוטנציאל להתאמה", description: 'השדכן/ית זיהו כאן הזדמנות שכדאי לבדוק!', color: 'green' });
  }

  return (
    <Card>
      <CardHeader>
        <CardTitle className="text-xl text-center">נקודות החיבור המרכזיות</CardTitle>
      </CardHeader>
      <CardContent>
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
          {highlights.slice(0, 3).map((item, index) => (
            <div key={index} className={`p-4 rounded-lg border-2 border-${item.color}-200 bg-${item.color}-50 text-center transition-transform hover:scale-105`}>
              <div className={`mx-auto w-12 h-12 rounded-full bg-${item.color}-500 text-white flex items-center justify-center mb-3 shadow-lg`}>
                <item.icon className="w-6 h-6" />
              </div>
              <h4 className={`font-bold text-lg text-${item.color}-800`}>{item.title}</h4>
              <p className="text-sm text-gray-600 mt-1">{item.description}</p>
            </div>
          ))}
        </div>
      </CardContent>
    </Card>
  );
};

export default CompatibilityHighlights;
--- End of Content for CompatibilityHighlights.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\suggestions\presentation\MatchPresentationView.tsx
--------------------------------------------------------------------------------
Content:
// src/app/components/suggestions/presentation/MatchPresentationView.tsx
'use client';
import React from 'react';
import Image from 'next/image';
import {
  Heart,
  Sparkles,
  User,
  GraduationCap,
  Scroll,
  MapPin,
  Briefcase,
  Quote,
  ChevronLeft,
} from 'lucide-react';
import { Avatar, AvatarFallback } from '@/components/ui/avatar';
import { Button } from '@/components/ui/button';
import { Card, CardContent } from '@/components/ui/card';
import { UserAiAnalysisDialog } from '../dialogs/UserAiAnalysisDialog';
import { getInitials } from '@/lib/utils';
import { cn } from '@/lib/utils';
import type { ExtendedMatchSuggestion } from '../types';
import type {
  SuggestionsPresentationDict,
  AiAnalysisDict,
} from '@/types/dictionary';

// --- קומפוננטות עזר פנימיות לעיצוב החדש ---

const HeroIntroduction: React.FC<{
  matchmaker: { firstName: string; lastName: string };
  personalNote?: string | null;
  dict: SuggestionsPresentationDict['hero'];
}> = ({ matchmaker, personalNote, dict }) => (
  <div className="text-center p-6 rounded-2xl bg-gradient-to-br from-purple-100/50 via-pink-100/50 to-blue-100/50 border border-purple-200/40 shadow-lg">
    <div className="flex justify-center mb-4">
      <Avatar className="w-16 h-16 border-4 border-white shadow-md">
        <AvatarFallback className="bg-purple-500 text-white text-xl font-bold">
          {getInitials(`${matchmaker.firstName} ${matchmaker.lastName}`)}
        </AvatarFallback>
      </Avatar>
    </div>
    <h2 className="text-2xl md:text-3xl font-bold text-gray-800 tracking-tight">
      {dict.title}
    </h2>
    <p className="text-gray-600 mt-2">
      {dict.matchmakerThoughts.replace('{{name}}', matchmaker.firstName)}
    </p>
    {personalNote && (
      <div className="mt-4 max-w-2xl mx-auto">
        <div className="relative bg-white/60 p-4 rounded-xl shadow-inner border border-purple-100">
          <Quote className="absolute top-2 right-2 w-8 h-8 text-purple-200/80 transform scale-x-[-1]" />
          <p className="text-lg text-purple-800 italic font-medium leading-relaxed">
            {personalNote}
          </p>
          <Quote className="absolute bottom-2 left-2 w-8 h-8 text-purple-200/80" />
        </div>
      </div>
    )}
  </div>
);

const ProfilePeek: React.FC<{
  targetParty: ExtendedMatchSuggestion['secondParty'];
  onViewProfileClick: () => void;
  dict: SuggestionsPresentationDict['peek'];
}> = ({ targetParty, onViewProfileClick, dict }) => {
  const age = targetParty.profile?.birthDate
    ? new Date().getFullYear() -
      new Date(targetParty.profile.birthDate).getFullYear()
    : null;
  const mainImage = targetParty.images?.find((img) => img.isMain)?.url;
  return (
    <Card className="overflow-hidden shadow-xl transition-all hover:shadow-2xl">
      <div className="grid grid-cols-1 md:grid-cols-3">
        <div className="relative h-64 md:h-auto">
          {mainImage ? (
            <Image
              src={mainImage}
              alt={`תמונה של ${targetParty.firstName}`}
              fill
              className="object-cover"
            />
          ) : (
            <div className="w-full h-full bg-slate-200 flex items-center justify-center">
              <User className="w-16 h-16 text-slate-400" />
            </div>
          )}
        </div>
        <div className="md:col-span-2 p-6 flex flex-col justify-between bg-white">
          <div>
            <p className="text-sm font-semibold text-blue-600">
              {dict.opportunity}
            </p>
            <h3 className="text-3xl font-extrabold text-gray-900 mt-1">
              {targetParty.firstName} {targetParty.lastName}
              {age && (
                <span className="text-2xl font-bold text-gray-500 ml-2">
                  {dict.age.replace('{{age}}', age.toString())}
                </span>
              )}
            </h3>
            <div className="mt-4 grid grid-cols-2 gap-4 text-sm">
              <div className="flex items-center gap-2 text-gray-700">
                <MapPin className="w-4 h-4 text-teal-500" />
                <span>{targetParty.profile?.city || dict.notSpecified}</span>
              </div>
              <div className="flex items-center gap-2 text-gray-700">
                <Briefcase className="w-4 h-4 text-emerald-500" />
                <span>
                  {targetParty.profile?.occupation || dict.notSpecified}
                </span>
              </div>
            </div>
          </div>
          <div className="mt-6 text-left">
            <Button
              onClick={onViewProfileClick}
              size="lg"
              className="font-bold"
            >
              {dict.viewProfileButton}
              <ChevronLeft className="w-5 h-5 mr-2" />
            </Button>
          </div>
        </div>
      </div>
    </Card>
  );
};

const KeyIngredients: React.FC<{
  matchingReason?: string | null;
  dict: SuggestionsPresentationDict['ingredients'];
}> = ({ matchingReason, dict }) => {
  const getHighlightsFromReason = () => {
    const highlights: { icon: React.ElementType; text: string }[] = [];
    const reason = matchingReason?.toLowerCase() || '';
    if (
      reason.includes('ערכים') ||
      reason.includes('השקפה') ||
      reason.includes('values')
    ) {
      highlights.push({ icon: Scroll, text: dict.values });
    }
    if (
      reason.includes('אישיות') ||
      reason.includes('אופי') ||
      reason.includes('personality')
    ) {
      highlights.push({ icon: Heart, text: dict.personality });
    }
    if (
      reason.includes('רקע') ||
      reason.includes('השכלה') ||
      reason.includes('background')
    ) {
      highlights.push({ icon: GraduationCap, text: dict.background });
    }
    if (highlights.length === 0 && matchingReason) {
      highlights.push({ icon: Sparkles, text: dict.spark });
    }
    return highlights;
  };

  const highlights = getHighlightsFromReason();

  if (highlights.length === 0) return null;

  return (
    <div className="text-center">
      <h3 className="text-2xl font-bold text-gray-800 mb-6">{dict.title}</h3>
      <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
        {highlights.map((item, index) => (
          <div
            key={index}
            className="bg-white p-6 rounded-xl shadow-lg border-t-4 border-blue-500 transform transition-transform hover:-translate-y-2"
          >
            <div className="mx-auto w-14 h-14 rounded-full bg-blue-100 text-blue-600 flex items-center justify-center mb-4">
              <item.icon className="w-7 h-7" />
            </div>
            <h4 className="font-bold text-xl text-gray-800">{item.text}</h4>
          </div>
        ))}
      </div>
      {matchingReason && (
        <Card className="mt-6 bg-blue-50 border-blue-200">
          <CardContent className="p-4">
            <p className="text-gray-700 text-center">
              <span className="font-semibold">{dict.matchmakerNotes}</span>{' '}
              {matchingReason}
            </p>
          </CardContent>
        </Card>
      )}
    </div>
  );
};

// --- הקומפוננטה הראשית המעודכנת ---
interface MatchPresentationViewProps {
  suggestion: ExtendedMatchSuggestion;
  userId: string;
  onSwitchTab: (tab: 'profile' | 'details' | 'compatibility') => void;
  dict: SuggestionsPresentationDict;
  aiAnalysisDict: AiAnalysisDict;
}

const MatchPresentationView: React.FC<MatchPresentationViewProps> = ({
  suggestion,
  userId,
  onSwitchTab,
  dict,
  aiAnalysisDict,
}) => {
  const isFirstParty = suggestion.firstPartyId === userId;
  const targetParty = isFirstParty
    ? suggestion.secondParty
    : suggestion.firstParty;

  const handleViewProfile = () => {
    onSwitchTab('profile');
  };

  return (
    <div className="p-4 md:p-8 space-y-8 bg-gradient-to-b from-slate-50 to-blue-50">
      <HeroIntroduction
        matchmaker={suggestion.matchmaker}
        personalNote={
          isFirstParty
            ? suggestion.firstPartyNotes
            : suggestion.secondPartyNotes
        }
        dict={dict.hero}
      />

      <ProfilePeek
        targetParty={targetParty}
        onViewProfileClick={handleViewProfile}
        dict={dict.peek}
      />

      <KeyIngredients
        matchingReason={suggestion.matchingReason}
        dict={dict.ingredients}
      />

      <div className="text-center pt-4 border-t border-gray-200">
        <h3 className="text-xl font-semibold text-gray-700 mb-3">
          {dict.aiCta.title}
        </h3>
        <p className="text-gray-600 max-w-xl mx-auto mb-4">
          {dict.aiCta.description}
        </p>
        <UserAiAnalysisDialog
          suggestedUserId={targetParty.id}
          dict={aiAnalysisDict}
        />
      </div>
    </div>
  );
};

export default MatchPresentationView;
--- End of Content for MatchPresentationView.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\suggestions\presentation\MatchmakerRationale.tsx
--------------------------------------------------------------------------------
Content:
// src/app/components/suggestions/presentation/MatchmakerRationale.tsx
import React from 'react';
import {
  Card,
  CardContent,
  CardHeader,
  CardTitle,
  CardDescription,
} from '@/components/ui/card';
import { Avatar, AvatarFallback } from '@/components/ui/avatar';
import { Heart, Sparkles } from 'lucide-react';
import { getInitials } from '@/lib/utils';
import type { SuggestionsPresentationDict } from '@/types/dictionary';

interface MatchmakerRationaleProps {
  matchmaker: { firstName: string; lastName: string };
  generalReason?: string | null;
  personalNote?: string | null;
  dict: SuggestionsPresentationDict['rationale']; // Updated to use the specific dictionary part
}

const MatchmakerRationale: React.FC<MatchmakerRationaleProps> = ({
  matchmaker,
  generalReason,
  personalNote,
  dict,
}) => {
  const fullName = `${matchmaker.firstName} ${matchmaker.lastName}`;

  return (
    <Card className="bg-gradient-to-br from-purple-50 via-pink-50 to-blue-50 shadow-xl border-purple-200/50">
      <CardHeader className="text-center">
        <div className="flex justify-center items-center gap-3 mb-3">
          <Avatar className="w-12 h-12 border-2 border-white shadow-lg">
            <AvatarFallback className="bg-purple-500 text-white font-bold">
              {getInitials(fullName)}
            </AvatarFallback>
          </Avatar>
          <div>
            <CardDescription className="text-sm text-purple-800">
              {dict.description.replace('{{name}}', fullName)}
            </CardDescription>
            <CardTitle className="text-2xl font-bold text-gray-800">
              {dict.title}
            </CardTitle>
          </div>
        </div>
      </CardHeader>
      <CardContent className="space-y-6 text-center">
        {personalNote && (
          <div className="bg-white/70 p-4 rounded-xl shadow-inner border border-purple-100">
            <h3 className="font-semibold text-lg text-purple-700 flex items-center justify-center gap-2 mb-2">
              <Heart className="w-5 h-5" />
              {dict.personalNoteTitle}
            </h3>
            <p className="text-gray-700 text-base leading-relaxed italic">
              {personalNote}
            </p>
          </div>
        )}

        {generalReason && (
          <div className="bg-white/70 p-4 rounded-xl shadow-inner border border-blue-100">
            <h3 className="font-semibold text-lg text-blue-700 flex items-center justify-center gap-2 mb-2">
              <Sparkles className="w-5 h-5" />
              {dict.generalReasonTitle}
            </h3>
            <p className="text-gray-600 text-base leading-relaxed">
              {generalReason}
            </p>
          </div>
        )}

        {!personalNote && !generalReason && (
          <p className="text-gray-500">{dict.noReasonText}</p>
        )}
      </CardContent>
    </Card>
  );
};

export default MatchmakerRationale;
--- End of Content for MatchmakerRationale.tsx ---

================================================================================
Directory: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\suggestions\timeline
================================================================================

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\suggestions\timeline\SuggestionTimeline.tsx
--------------------------------------------------------------------------------
Content:
// src/app/components/suggestions/timeline/SuggestionTimeline.tsx

import React from 'react';
import { format, differenceInCalendarDays } from 'date-fns';
import { he } from 'date-fns/locale';
import {
  Clock,
  MessageCircle,
  User,
  Check,
  Zap,
  XCircle,
  Heart,
  Phone,
  Calendar,
  Users,
  Award,
  Star,
  TimerOff,
  Edit3,
  UserX,
  Archive,
  Ban
} from 'lucide-react';
import { cn } from '@/lib/utils';
import { Badge } from '@/components/ui/badge';
import { Card, CardContent } from '@/components/ui/card';
import type { MatchSuggestionStatus } from '@prisma/client';
import type { SuggestionTimelineDict } from '@/types/dictionary';

interface StatusHistoryItem {
  id: string;
  status: string;
  notes?: string | null;
  createdAt: Date | string;
}

interface SuggestionTimelineProps {
  statusHistory: StatusHistoryItem[];
  className?: string;
  dict: SuggestionTimelineDict;
}

const getStatusVisuals = (status: MatchSuggestionStatus) => {
    const statusMap: { [key in MatchSuggestionStatus]?: { icon: React.ElementType; category: string } } = {
        DRAFT: { icon: Edit3, category: 'pending' },
        PENDING_FIRST_PARTY: { icon: User, category: 'pending' },
        PENDING_SECOND_PARTY: { icon: User, category: 'pending' },
        FIRST_PARTY_APPROVED: { icon: Check, category: 'approved' },
        SECOND_PARTY_APPROVED: { icon: Check, category: 'approved' },
        FIRST_PARTY_DECLINED: { icon: XCircle, category: 'declined' },
        SECOND_PARTY_DECLINED: { icon: XCircle, category: 'declined' },
        AWAITING_MATCHMAKER_APPROVAL: { icon: Zap, category: 'progress' },
        CONTACT_DETAILS_SHARED: { icon: Phone, category: 'progress' },
        AWAITING_FIRST_DATE_FEEDBACK: { icon: MessageCircle, category: 'progress' },
        THINKING_AFTER_DATE: { icon: Clock, category: 'pending' },
        PROCEEDING_TO_SECOND_DATE: { icon: Heart, category: 'approved' },
        ENDED_AFTER_FIRST_DATE: { icon: UserX, category: 'declined' },
        MEETING_PENDING: { icon: Calendar, category: 'progress' },
        MEETING_SCHEDULED: { icon: Calendar, category: 'progress' },
        MATCH_APPROVED: { icon: Award, category: 'completed' },
        MATCH_DECLINED: { icon: XCircle, category: 'declined' },
        DATING: { icon: Heart, category: 'completed' },
        ENGAGED: { icon: Star, category: 'completed' },
        MARRIED: { icon: Star, category: 'completed' },
        EXPIRED: { icon: TimerOff, category: 'declined' },
        CLOSED: { icon: Archive, category: 'declined' },
        CANCELLED: { icon: Ban, category: 'declined' },
    };
    return statusMap[status] || { icon: Clock, category: 'default' };
};

const getCategoryColor = (category: string) => {
  switch (category) {
    case 'pending':
      return 'border-purple-200';
    case 'approved':
      return 'border-emerald-200';
    case 'progress':
      return 'border-blue-200';
    case 'completed':
      return 'border-yellow-200';
    case 'declined':
      return 'border-red-200';
    default:
      return 'border-gray-200';
  }
};

const TimelineNode: React.FC<{
  IconComponent: React.ElementType;
  isLatest: boolean;
  isLast: boolean;
  category: string;
}> = ({ IconComponent, isLatest, isLast, category }) => {
  const gradientMap: { [key: string]: string } = {
    pending: 'bg-gradient-to-br from-purple-400 to-purple-500',
    approved: 'bg-gradient-to-br from-emerald-400 to-green-500',
    progress: 'bg-gradient-to-br from-blue-400 to-cyan-500',
    completed: 'bg-gradient-to-br from-yellow-400 to-amber-500',
    declined: 'bg-gradient-to-br from-red-400 to-rose-500',
    default: 'bg-gradient-to-br from-gray-400 to-gray-500',
  };

  return (
    <div className="relative flex items-center">
      {!isLast && (
        <div
          className={cn(
            'absolute top-12 right-6 w-0.5 h-16 bg-gradient-to-b rounded-full',
            isLatest ? 'from-cyan-300 to-cyan-100' : 'from-gray-300 to-gray-100'
          )}
        />
      )}
      <div
        className={cn(
          'relative z-10 w-12 h-12 rounded-full shadow-lg flex items-center justify-center text-white',
          gradientMap[category],
          isLatest && 'ring-4 ring-cyan-200 animate-pulse-subtle'
        )}
      >
        <IconComponent className="w-6 h-6" />
      </div>
    </div>
  );
};

const SuggestionTimeline: React.FC<SuggestionTimelineProps> = ({
  statusHistory,
  className,
  dict,
}) => {
  const sortedHistory = [...statusHistory].sort(
    (a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime()
  );

  if (sortedHistory.length === 0) {
    return (
      <Card className={cn('border-0 shadow-lg', className)}>
        <CardContent className="p-8 text-center">
          <Clock className="w-12 h-12 mx-auto mb-4 text-gray-400" />
          <h3 className="text-lg font-semibold text-gray-600 mb-2">
            {dict.emptyState.title}
          </h3>
          <p className="text-gray-500">{dict.emptyState.description}</p>
        </CardContent>
      </Card>
    );
  }

  const latestStatusInfo = dict.statuses[
    sortedHistory[0].status as MatchSuggestionStatus
  ] || { label: sortedHistory[0].status, description: '' };
  const latestStatusVisuals = getStatusVisuals(
    sortedHistory[0].status as MatchSuggestionStatus
  );

  return (
    <Card className={cn('border-0 shadow-lg overflow-hidden', className)}>
      <CardContent className="p-6">
        <div className="flex items-center gap-3 mb-6">
          <div className="p-2 rounded-lg bg-gradient-to-r from-cyan-500 to-emerald-500 text-white shadow-md">
            <Clock className="w-5 h-5" />
          </div>
          <div>
            <h3 className="text-xl font-bold text-gray-800">{dict.title}</h3>
            <p className="text-sm text-gray-600">{dict.subtitle}</p>
          </div>
        </div>
        <div className="space-y-6">
          {sortedHistory.map((item, index) => {
            const statusKey = item.status as MatchSuggestionStatus;
            const statusInfo = dict.statuses[statusKey] || {
              label: item.status,
              description: '',
            };
            const statusVisuals = getStatusVisuals(statusKey);
            const isLatest = index === 0;
            const isLast = index === sortedHistory.length - 1;
            const formattedDate = format(
              new Date(item.createdAt),
              'dd בMMMM yyyy',
              { locale: he }
            );
            const formattedTime = format(new Date(item.createdAt), 'HH:mm', {
              locale: he,
            });

            return (
              <div key={item.id} className="flex gap-4">
                <TimelineNode
                  IconComponent={statusVisuals.icon}
                  isLatest={isLatest}
                  isLast={isLast}
                  category={statusVisuals.category}
                />
                <div className="flex-1 pb-4">
                  <Card
                    className={cn(
                      'border-2 transition-all duration-300 hover:shadow-md',
                      getCategoryColor(statusVisuals.category),
                      isLatest && 'shadow-md'
                    )}
                  >
                    <CardContent className="p-4">
                      <div className="flex justify-between items-start mb-3">
                        <div className="flex-1">
                          <div className="flex items-center gap-2 mb-1">
                            <Badge
                              className={cn('border-0 shadow-sm font-semibold')}
                            >
                              {statusInfo.label}
                            </Badge>
                            {isLatest && (
                              <Badge
                                variant="outline"
                                className="bg-white/80 text-cyan-600 border-cyan-200 text-xs"
                              >
                                {dict.latestBadge}
                              </Badge>
                            )}
                          </div>
                          <p className="text-sm font-medium mb-2">
                            {statusInfo.description}
                          </p>
                        </div>
                        <div className="text-left text-xs text-gray-500 space-y-1">
                          <div className="font-medium">{formattedDate}</div>
                          <div className="flex items-center gap-1">
                            <Clock className="w-3 h-3" />
                            {formattedTime}
                          </div>
                        </div>
                      </div>
                      {item.notes && (
                        <div className="mt-3 p-3 bg-white/60 backdrop-blur-sm rounded-lg border border-white/40">
                          <div className="flex items-start gap-2">
                            <MessageCircle className="w-4 h-4 text-gray-500 mt-0.5 flex-shrink-0" />
                            <p className="text-sm text-gray-700 leading-relaxed">
                              {item.notes}
                            </p>
                          </div>
                        </div>
                      )}
                    </CardContent>
                  </Card>
                </div>
              </div>
            );
          })}
        </div>
        <div className="mt-8 pt-6 border-t border-gray-200">
          <div className="grid grid-cols-2 md:grid-cols-4 gap-4 text-center">
            <div className="space-y-1">
              <div className="text-2xl font-bold text-cyan-600">
                {sortedHistory.length}
              </div>
              <div className="text-xs text-gray-500 font-medium">
                {dict.summary.totalSteps}
              </div>
            </div>
            <div className="space-y-1">
              <div className="text-2xl font-bold text-emerald-600">
                {differenceInCalendarDays(
                  new Date(),
                  new Date(sortedHistory[sortedHistory.length - 1].createdAt)
                ) + 1}
              </div>
              <div className="text-xs text-gray-500 font-medium">
                {dict.summary.activeDays}
              </div>
            </div>
            <div className="space-y-1">
              <div className="text-2xl font-bold text-blue-600">
                {
                  sortedHistory.filter((s) => s.status.includes('APPROVED'))
                    .length
                }
              </div>
              <div className="text-xs text-gray-500 font-medium">
                {dict.summary.approvals}
              </div>
            </div>
            <div className="space-y-1">
              <div className="text-2xl font-bold text-amber-600">
                {latestStatusVisuals.category === 'completed'
                  ? '🎉'
                  : latestStatusVisuals.category === 'progress'
                    ? '⏳'
                    : latestStatusVisuals.category === 'approved'
                      ? '✅'
                      : '📋'}
              </div>
              <div className="text-xs text-gray-500 font-medium">
                {dict.summary.currentStatus}
              </div>
            </div>
          </div>
        </div>
      </CardContent>
    </Card>
  );
};

export default SuggestionTimeline;
--- End of Content for SuggestionTimeline.tsx ---

