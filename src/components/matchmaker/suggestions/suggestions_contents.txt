################################################################################
# Directory Content Map For: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\suggestions
# Generated on: 2025-08-24 17:41:15
################################################################################

================================================================================
Directory: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\suggestions
================================================================================

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\suggestions\EditSuggestionForm.tsx
--------------------------------------------------------------------------------
Content:
// EditSuggestionForm.tsx - גרסה מתורגמת ומלאה

import React, { useState } from 'react';
import {useEffect } from 'react';
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription,
  DialogFooter,
} from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';
import { Textarea } from '@/components/ui/textarea';
import { Label } from '@/components/ui/label';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select';
import { toast } from 'sonner';
import { Priority, MatchSuggestionStatus } from '@prisma/client';
import { DatePicker } from '@/components/ui/date-picker';
import type { Suggestion } from '@/types/suggestions';
import {
  RefreshCw,
  AlertTriangle,
  Calendar,
  Clock,
  User,
  MessageCircle,
  CheckCircle,
  Sparkles,
  Heart,
  Save,
  X,
  Star,
  Flame,
  Target,
  Shield,
  Crown,
} from 'lucide-react';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { Badge } from '@/components/ui/badge';
import { cn } from '@/lib/utils';
import type { MatchmakerPageDictionary } from '@/types/dictionary';

interface EditSuggestionFormProps {
  dict: MatchmakerPageDictionary['suggestionsDashboard']['editSuggestionForm'];
  isOpen: boolean;
  onClose: () => void;
  suggestion: Suggestion | null;
  onSave: (data: {
    suggestionId: string;
    updates: {
      priority?: Priority;
      status?: MatchSuggestionStatus;
      statusNotes?: string;
      matchingReason?: string;
      firstPartyNotes?: string;
      secondPartyNotes?: string;
      internalNotes?: string;
      decisionDeadline?: Date;
    };
  }) => Promise<void>;
}

const EditSuggestionForm: React.FC<EditSuggestionFormProps> = ({
  dict,
  isOpen,
  onClose,
  suggestion,
  onSave,
}) => {
  const [priority, setPriority] = useState<Priority>(Priority.MEDIUM);
  const [selectedStatus, setSelectedStatus] =
    useState<MatchSuggestionStatus | null>(null);
  const [statusNotes, setStatusNotes] = useState('');
  const [matchingReason, setMatchingReason] = useState('');
  const [firstPartyNotes, setFirstPartyNotes] = useState('');
  const [secondPartyNotes, setSecondPartyNotes] = useState('');
  const [internalNotes, setInternalNotes] = useState('');
  const [decisionDeadline, setDecisionDeadline] = useState<Date | undefined>(
    undefined
  );
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [showStatusChange, setShowStatusChange] = useState(false);

  useEffect(() => {
    if (suggestion) {
      setPriority(suggestion.priority as Priority);
      setMatchingReason(suggestion.matchingReason || '');
      setFirstPartyNotes(suggestion.firstPartyNotes || '');
      setSecondPartyNotes(suggestion.secondPartyNotes || '');
      setInternalNotes(suggestion.internalNotes || '');

      setSelectedStatus(null);
      setStatusNotes('');
      setShowStatusChange(false);

      if (suggestion.decisionDeadline) {
        const deadlineDate = new Date(suggestion.decisionDeadline);
        if (!isNaN(deadlineDate.getTime())) {
          setDecisionDeadline(deadlineDate);
        }
      } else {
        setDecisionDeadline(undefined);
      }
    }
  }, [suggestion]);

  const getStatusLabel = (statusValue: MatchSuggestionStatus): string => {
    return dict.statusLabels[statusValue] || statusValue;
  };

  const getAvailableStatuses = (): MatchSuggestionStatus[] => {
    if (!suggestion) return [];
    return Object.keys(dict.statusLabels) as MatchSuggestionStatus[];
  };

  const handleSubmit = async () => {
    if (!suggestion) {
      toast.error(dict.toasts.noSuggestionData);
      return;
    }

    setIsSubmitting(true);

    try {
      const updateData: {
        priority: Priority;
        status?: MatchSuggestionStatus;
        statusNotes?: string;
        matchingReason: string;
        firstPartyNotes: string;
        secondPartyNotes: string;
        internalNotes: string;
        decisionDeadline?: Date;
      } = {
        priority,
        matchingReason,
        firstPartyNotes,
        secondPartyNotes,
        internalNotes,
        decisionDeadline,
      };

      if (selectedStatus && selectedStatus !== suggestion.status) {
        updateData.status = selectedStatus;
        updateData.statusNotes =
          statusNotes ||
          `סטטוס שונה מ-${getStatusLabel(suggestion.status)} ל-${getStatusLabel(selectedStatus)}`; // Note: This internal-facing string may not need translation
      }

      await onSave({
        suggestionId: suggestion.id,
        updates: updateData,
      });

      toast.success(dict.toasts.updateSuccess);
      onClose();
    } catch (error) {
      console.error('Error updating suggestion:', error);
      toast.error(dict.toasts.updateError);
    } finally {
      setIsSubmitting(false);
    }
  };

  const getPriorityInfo = (p: Priority) => {
    const infoMap = {
      URGENT: { color: 'from-red-500 to-pink-500', icon: Flame, textColor: 'text-red-600' },
      HIGH: { color: 'from-orange-500 to-amber-500', icon: Star, textColor: 'text-orange-600' },
      MEDIUM: { color: 'from-blue-500 to-cyan-500', icon: Target, textColor: 'text-blue-600' },
      LOW: { color: 'from-gray-500 to-slate-500', icon: Shield, textColor: 'text-gray-600' },
    };
    return {
      label: dict.priorityLabels[p],
      ...infoMap[p],
    };
  };

  const getStatusInfo = (status: MatchSuggestionStatus) => {
    switch (status) {
      case 'PENDING_FIRST_PARTY':
      case 'PENDING_SECOND_PARTY':
        return { icon: Clock, color: 'text-yellow-600', bg: 'from-yellow-50 to-amber-50' };
      case 'FIRST_PARTY_APPROVED':
      case 'SECOND_PARTY_APPROVED':
        return { icon: CheckCircle, color: 'text-green-600', bg: 'from-green-50 to-emerald-50' };
      case 'DATING':
        return { icon: Heart, color: 'text-pink-600', bg: 'from-pink-50 to-rose-50' };
      case 'ENGAGED':
        return { icon: Crown, color: 'text-yellow-600', bg: 'from-yellow-50 to-orange-50' };
      case 'MARRIED':
        return { icon: Sparkles, color: 'text-purple-600', bg: 'from-purple-50 to-pink-50' };
      default:
        return { icon: RefreshCw, color: 'text-gray-600', bg: 'from-gray-50 to-slate-50' };
    }
  };

  if (!suggestion) return null;

  const currentPriorityInfo = getPriorityInfo(priority);
  const currentStatusInfo = getStatusInfo(suggestion.status);
  const CurrentStatusIcon = currentStatusInfo.icon;
  const CurrentPriorityIcon = currentPriorityInfo.icon;
  const fullParty1Name = `${suggestion.firstParty.firstName} ${suggestion.firstParty.lastName}`;
  const fullParty2Name = `${suggestion.secondParty.firstName} ${suggestion.secondParty.lastName}`;

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="max-w-6xl max-h-[95vh] overflow-y-auto border-0 shadow-2xl rounded-3xl p-0" dir="rtl">
        <div className={cn('relative overflow-hidden bg-gradient-to-br', currentStatusInfo.bg, 'border-b border-gray-100')}>
          <div className="absolute inset-0">
            <div className="absolute top-0 right-0 w-64 h-64 bg-gradient-to-br from-white/30 to-transparent rounded-full blur-3xl"></div>
            <div className="absolute bottom-0 left-0 w-48 h-48 bg-gradient-to-br from-white/20 to-transparent rounded-full blur-2xl"></div>
          </div>
          <div className="relative z-10 p-8">
            <DialogHeader>
              <div className="flex items-center justify-between mb-4">
                <div className="flex items-center gap-4">
                  <div className="p-3 rounded-full bg-white/20 backdrop-blur-sm shadow-lg">
                    <CurrentStatusIcon className={cn('w-8 h-8', currentStatusInfo.color)} />
                  </div>
                  <div>
                    <DialogTitle className="text-3xl font-bold text-gray-800">{dict.header.title.replace('{{id}}', suggestion.id.slice(-8))}</DialogTitle>
                    <DialogDescription className="text-lg text-gray-600 mt-1">
                      {dict.header.description.replace('{{party1}}', fullParty1Name).replace('{{party2}}', fullParty2Name)}
                    </DialogDescription>
                  </div>
                </div>
                <Button variant="ghost" size="icon" onClick={onClose} className="rounded-full h-12 w-12 text-gray-500 hover:text-gray-700 hover:bg-white/50 backdrop-blur-sm">
                  <X className="w-6 h-6" />
                </Button>
              </div>
              <div className="flex items-center gap-4">
                <Badge className={cn('px-4 py-2 font-bold shadow-lg bg-gradient-to-r text-white', currentPriorityInfo.color)}>
                  <CurrentPriorityIcon className="w-4 h-4 ml-2" />
                  {dict.header.priorityLabel.replace('{{priority}}', currentPriorityInfo.label)}
                </Badge>
                <Badge className="px-4 py-2 bg-white/20 backdrop-blur-sm text-gray-700 border border-white/30">
                  {dict.header.currentStatusLabel.replace('{{status}}', getStatusLabel(suggestion.status))}
                </Badge>
              </div>
            </DialogHeader>
          </div>
        </div>
        <div className="p-8 space-y-8">
          <Alert className="border-0 bg-gradient-to-r from-blue-50 to-cyan-50 shadow-lg rounded-2xl">
            <AlertTriangle className="h-5 w-5 text-blue-500" />
            <AlertDescription className="text-blue-800 font-medium">
              <strong>{dict.infoAlert.title}</strong> {dict.infoAlert.createdFor.replace('{{party1}}', fullParty1Name).replace('{{party2}}', fullParty2Name)}
              <br />
              <strong>{dict.infoAlert.status.replace('{{status}}', getStatusLabel(suggestion.status))}</strong> •{' '}
              <strong>{dict.infoAlert.priority.replace('{{priority}}', currentPriorityInfo.label)}</strong>
            </AlertDescription>
          </Alert>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
            <div className="space-y-4 p-6 bg-white rounded-2xl shadow-xl border-0 hover:shadow-2xl transition-all duration-300">
              <div className="flex items-center gap-3 mb-4">
                <div className={cn('p-2 rounded-full bg-gradient-to-r text-white shadow-lg', currentPriorityInfo.color)}><Star className="w-5 h-5" /></div>
                <Label className="text-lg font-bold text-gray-800">{dict.sections.priority.title}</Label>
              </div>
              <Select value={priority} onValueChange={(value) => setPriority(value as Priority)}>
                <SelectTrigger className="h-12 border-2 border-gray-200 hover:border-purple-300 focus:border-purple-500 rounded-xl transition-all">
                  <SelectValue placeholder={dict.sections.priority.placeholder} />
                </SelectTrigger>
                <SelectContent>
                  {Object.keys(dict.priorityLabels).map((p) => {
                    const info = getPriorityInfo(p as Priority);
                    const Icon = info.icon;
                    return (
                      <SelectItem key={p} value={p}>
                        <div className="flex items-center gap-2"><Icon className={cn('w-4 h-4', info.textColor)} />{info.label}</div>
                      </SelectItem>
                    );
                  })}
                </SelectContent>
              </Select>
            </div>
            <div className="space-y-4 p-6 bg-white rounded-2xl shadow-xl border-0 hover:shadow-2xl transition-all duration-300">
              <div className="flex items-center justify-between mb-4">
                <div className="flex items-center gap-3">
                  <div className="p-2 rounded-full bg-gradient-to-r from-purple-500 to-pink-500 text-white shadow-lg"><RefreshCw className="w-5 h-5" /></div>
                  <Label className="text-lg font-bold text-gray-800">{dict.sections.statusChange.title}</Label>
                </div>
                <Button type="button" variant={showStatusChange ? 'default' : 'outline'} size="sm" onClick={() => setShowStatusChange(!showStatusChange)} className={cn('rounded-xl transition-all duration-300', showStatusChange ? 'bg-gradient-to-r from-purple-600 to-pink-600 text-white shadow-lg' : 'border-2 border-purple-200 text-purple-600 hover:bg-purple-50')}>
                  <RefreshCw className="w-4 h-4 ml-2" />{showStatusChange ? dict.sections.statusChange.cancelChangeButton : dict.sections.statusChange.changeButton}
                </Button>
              </div>
              {showStatusChange && (
                <div className="space-y-4 p-4 border-2 border-purple-100 rounded-xl bg-gradient-to-r from-purple-50 to-pink-50">
                  <Select value={selectedStatus || ''} onValueChange={(value) => setSelectedStatus(value && value !== 'NO_CHANGE' ? value as MatchSuggestionStatus : null)}>
                    <SelectTrigger className="h-12 border-2 border-purple-200 bg-white"><SelectValue placeholder={dict.sections.statusChange.placeholder} /></SelectTrigger>
                    <SelectContent>
                      <SelectItem value="NO_CHANGE">{dict.sections.statusChange.noChangeOption}</SelectItem>
                      {getAvailableStatuses().map((status) => (<SelectItem key={status} value={status}>{getStatusLabel(status)}</SelectItem>))}
                    </SelectContent>
                  </Select>
                  {selectedStatus && (
                    <div>
                      <Label className="text-sm font-medium text-purple-800">{dict.sections.statusChange.notesLabel}</Label>
                      <Textarea value={statusNotes} onChange={(e) => setStatusNotes(e.target.value)} placeholder={dict.sections.statusChange.notesPlaceholder} className="mt-2 h-20 border-2 border-purple-200 focus:border-purple-400 rounded-xl" />
                    </div>
                  )}
                </div>
              )}
            </div>
          </div>
          <div className="p-6 bg-white rounded-2xl shadow-xl border-0 hover:shadow-2xl transition-all duration-300">
            <div className="flex items-center gap-3 mb-4">
              <div className="p-2 rounded-full bg-gradient-to-r from-orange-500 to-amber-500 text-white shadow-lg"><Calendar className="w-5 h-5" /></div>
              <Label className="text-lg font-bold text-gray-800">{dict.sections.decisionDeadline.title}</Label>
            </div>
            <DatePicker value={{ from: decisionDeadline, to: undefined }} onChange={({ from }) => setDecisionDeadline(from)} />
          </div>
          <div className="p-6 bg-white rounded-2xl shadow-xl border-0 hover:shadow-2xl transition-all duration-300">
            <div className="flex items-center gap-3 mb-4">
              <div className="p-2 rounded-full bg-gradient-to-r from-emerald-500 to-green-500 text-white shadow-lg"><Heart className="w-5 h-5" /></div>
              <Label className="text-lg font-bold text-gray-800">{dict.sections.matchingReason.title}</Label>
            </div>
            <Textarea value={matchingReason} onChange={(e) => setMatchingReason(e.target.value)} placeholder={dict.sections.matchingReason.placeholder} className="h-32 border-2 border-gray-200 focus:border-emerald-400 rounded-xl transition-all resize-none" />
          </div>
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
            <div className="p-6 bg-white rounded-2xl shadow-xl border-0 hover:shadow-2xl transition-all duration-300">
              <div className="flex items-center gap-3 mb-4">
                <div className="p-2 rounded-full bg-gradient-to-r from-blue-500 to-cyan-500 text-white shadow-lg"><User className="w-5 h-5" /></div>
                <Label className="text-lg font-bold text-gray-800">{dict.sections.firstPartyNotes.title.replace('{{name}}', suggestion.firstParty.firstName)}</Label>
              </div>
              <Textarea value={firstPartyNotes} onChange={(e) => setFirstPartyNotes(e.target.value)} placeholder={dict.sections.firstPartyNotes.placeholder} className="h-32 border-2 border-gray-200 focus:border-blue-400 rounded-xl transition-all resize-none" />
            </div>
            <div className="p-6 bg-white rounded-2xl shadow-xl border-0 hover:shadow-2xl transition-all duration-300">
              <div className="flex items-center gap-3 mb-4">
                <div className="p-2 rounded-full bg-gradient-to-r from-purple-500 to-pink-500 text-white shadow-lg"><User className="w-5 h-5" /></div>
                <Label className="text-lg font-bold text-gray-800">{dict.sections.secondPartyNotes.title.replace('{{name}}', suggestion.secondParty.firstName)}</Label>
              </div>
              <Textarea value={secondPartyNotes} onChange={(e) => setSecondPartyNotes(e.target.value)} placeholder={dict.sections.secondPartyNotes.placeholder} className="h-32 border-2 border-gray-200 focus:border-purple-400 rounded-xl transition-all resize-none" />
            </div>
          </div>
          <div className="p-6 bg-white rounded-2xl shadow-xl border-0 hover:shadow-2xl transition-all duration-300">
            <div className="flex items-center gap-3 mb-4">
              <div className="p-2 rounded-full bg-gradient-to-r from-amber-500 to-orange-500 text-white shadow-lg"><MessageCircle className="w-5 h-5" /></div>
              <Label className="text-lg font-bold text-gray-800">{dict.sections.internalNotes.title}</Label>
            </div>
            <Textarea value={internalNotes} onChange={(e) => setInternalNotes(e.target.value)} placeholder={dict.sections.internalNotes.placeholder} className="h-32 border-2 border-gray-200 focus:border-amber-400 rounded-xl transition-all resize-none" />
          </div>
        </div>
        <DialogFooter className="p-8 border-t border-gray-100 bg-gradient-to-r from-gray-50 to-slate-50">
          <div className="flex justify-between w-full items-center">
            <span className="text-sm text-gray-500 font-medium">{dict.footer.info}</span>
            <div className="flex gap-4">
              <Button variant="outline" onClick={onClose} disabled={isSubmitting} className="px-8 py-3 border-2 border-gray-300 hover:bg-gray-50 rounded-xl transition-all">{dict.footer.cancelButton}</Button>
              <Button onClick={handleSubmit} disabled={isSubmitting} className="px-8 py-3 bg-gradient-to-r from-purple-600 via-pink-600 to-blue-600 hover:from-purple-700 hover:via-pink-700 hover:to-blue-700 text-white shadow-xl hover:shadow-2xl transition-all duration-300 rounded-xl transform hover:scale-105">
                {isSubmitting ? (<><RefreshCw className="w-5 h-5 ml-2 animate-spin" />{dict.footer.savingButton}</>) : (<><Save className="w-5 h-5 ml-2" />{dict.footer.saveButton}</>)}
              </Button>
            </div>
          </div>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
};

export default EditSuggestionForm;
--- End of Content for EditSuggestionForm.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\suggestions\MessageForm.tsx
--------------------------------------------------------------------------------
Content:
import React, { useState } from 'react';
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription,
  DialogFooter,
} from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';
import { Textarea } from '@/components/ui/textarea';
import { Label } from '@/components/ui/label';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select';
import { toast } from 'sonner';
import {
  MessageCircle,
  Send,
  AlertCircle,
  Users,
  User,
  Clock,
  Sparkles,
  X,
  Mail,
  Bell,
  Info,
  Heart,
  Zap,
} from 'lucide-react';
import type { Suggestion } from '@/types/suggestions';
import { Badge } from '@/components/ui/badge';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { cn } from '@/lib/utils';

interface MessageFormProps {
  isOpen: boolean;
  onClose: () => void;
  suggestion: Suggestion | null;
  onSend: (data: {
    suggestionId: string;
    partyType: 'first' | 'second' | 'both';
    messageType: 'message' | 'reminder' | 'update';
    messageContent: string;
  }) => Promise<void>;
}

const MessageForm: React.FC<MessageFormProps> = ({
  isOpen,
  onClose,
  suggestion,
  onSend,
}) => {
  const [partyType, setPartyType] = useState<'first' | 'second' | 'both'>(
    'both'
  );
  const [messageType, setMessageType] = useState<
    'message' | 'reminder' | 'update'
  >('message');
  const [messageContent, setMessageContent] = useState('');
  const [isSubmitting, setIsSubmitting] = useState(false);

  const handleSubmit = async () => {
    if (!suggestion || !messageContent.trim()) return;

    try {
      setIsSubmitting(true);

      await onSend({
        suggestionId: suggestion.id,
        partyType,
        messageType,
        messageContent,
      });

      toast.success(
        `ההודעה נשלחה ${
          partyType === 'first'
            ? `ל${suggestion.firstParty.firstName}`
            : partyType === 'second'
              ? `ל${suggestion.secondParty.firstName}`
              : 'לשני הצדדים'
        }`
      );

      // Reset form
      setMessageContent('');
      setPartyType('both');
      setMessageType('message');
      onClose();
    } catch (error) {
      toast.error('שגיאה בשליחת ההודעה');
      console.error('Error sending message:', error);
    } finally {
      setIsSubmitting(false);
    }
  };

  const getMessagePlaceholder = () => {
    switch (messageType) {
      case 'reminder':
        return 'הודעת תזכורת למועמד/ת לגבי ההצעה...';
      case 'update':
        return 'עדכון לגבי סטטוס ההצעה או מידע חדש...';
      default:
        return 'הודעה אישית למועמד/ת...';
    }
  };

  const getMessageTypeInfo = (type: string) => {
    switch (type) {
      case 'reminder':
        return {
          label: 'תזכורת',
          icon: Clock,
          color: 'from-yellow-500 to-amber-500',
          bgColor: 'from-yellow-50 to-amber-50',
          description: 'הודעה להזכרה על ההצעה או פעולה נדרשת',
        };
      case 'update':
        return {
          label: 'עדכון סטטוס',
          icon: Info,
          color: 'from-blue-500 to-cyan-500',
          bgColor: 'from-blue-50 to-cyan-50',
          description: 'עדכון על שינוי במצב ההצעה או מידע חדש',
        };
      default:
        return {
          label: 'הודעה רגילה',
          icon: MessageCircle,
          color: 'from-purple-500 to-pink-500',
          bgColor: 'from-purple-50 to-pink-50',
          description: 'הודעה אישית כללית',
        };
    }
  };

  const getPartyTypeInfo = (type: string) => {
    switch (type) {
      case 'first':
        return {
          label: `${suggestion?.firstParty.firstName} ${suggestion?.firstParty.lastName} (צד א')`,
          icon: User,
          color: 'from-green-500 to-emerald-500',
        };
      case 'second':
        return {
          label: `${suggestion?.secondParty.firstName} ${suggestion?.secondParty.lastName} (צד ב')`,
          icon: User,
          color: 'from-blue-500 to-cyan-500',
        };
      default:
        return {
          label: 'שני הצדדים',
          icon: Users,
          color: 'from-purple-500 to-pink-500',
        };
    }
  };

  if (!suggestion) return null;

  const messageTypeInfo = getMessageTypeInfo(messageType);
  const partyTypeInfo = getPartyTypeInfo(partyType);
  const MessageTypeIcon = messageTypeInfo.icon;
  const PartyTypeIcon = partyTypeInfo.icon;

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent
        className="max-w-4xl border-0 shadow-2xl rounded-3xl p-0 overflow-hidden"
        dir="rtl"
      >
        {/* Hero Header */}
        <div
          className={cn(
            'relative overflow-hidden bg-gradient-to-br',
            messageTypeInfo.bgColor,
            'border-b border-gray-100'
          )}
        >
          <div className="absolute inset-0">
            <div className="absolute top-0 right-0 w-64 h-64 bg-gradient-to-br from-white/30 to-transparent rounded-full blur-3xl"></div>
            <div className="absolute bottom-0 left-0 w-48 h-48 bg-gradient-to-br from-white/20 to-transparent rounded-full blur-2xl"></div>
          </div>

          <div className="relative z-10 p-8">
            <DialogHeader>
              <div className="flex items-center justify-between mb-4">
                <div className="flex items-center gap-4">
                  <div className="p-3 rounded-full bg-white/20 backdrop-blur-sm shadow-lg">
                    <Send className="w-8 h-8 text-purple-600" />
                  </div>
                  <div>
                    <DialogTitle className="text-3xl font-bold text-gray-800">
                      שליחת הודעה
                    </DialogTitle>
                    <DialogDescription className="text-lg text-gray-600 mt-1">
                      שליחת הודעה הקשורה להצעת השידוך בין{' '}
                      {suggestion.firstParty.firstName}{' '}
                      {suggestion.firstParty.lastName} ל
                      {suggestion.secondParty.firstName}{' '}
                      {suggestion.secondParty.lastName}
                    </DialogDescription>
                  </div>
                </div>

                <Button
                  variant="ghost"
                  size="icon"
                  onClick={onClose}
                  className="rounded-full h-12 w-12 text-gray-500 hover:text-gray-700 hover:bg-white/50 backdrop-blur-sm"
                >
                  <X className="w-6 h-6" />
                </Button>
              </div>

              <div className="flex items-center gap-4">
                <Badge
                  className={cn(
                    'px-4 py-2 font-bold shadow-lg bg-gradient-to-r text-white',
                    messageTypeInfo.color
                  )}
                >
                  <MessageTypeIcon className="w-4 h-4 ml-2" />
                  {messageTypeInfo.label}
                </Badge>

                <Badge
                  className={cn(
                    'px-4 py-2 font-bold shadow-lg bg-gradient-to-r text-white',
                    partyTypeInfo.color
                  )}
                >
                  <PartyTypeIcon className="w-4 h-4 ml-2" />
                  {partyTypeInfo.label}
                </Badge>
              </div>
            </DialogHeader>
          </div>
        </div>

        <div className="p-8 space-y-8">
          {/* Suggestion Info Alert */}
          <Alert className="border-0 bg-gradient-to-r from-indigo-50 to-purple-50 shadow-lg rounded-2xl">
            <Heart className="h-5 w-5 text-indigo-500" />
            <AlertDescription className="text-indigo-800 font-medium">
              <strong>הצעה #{suggestion.id.slice(-8)}:</strong> הודעה זו תישלח
              במסגרת הצעת השידוך הפעילה.
              <br />
              <strong>סטטוס נוכחי:</strong> {suggestion.status} •{' '}
              <strong>עדיפות:</strong> {suggestion.priority}
            </AlertDescription>
          </Alert>

          <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
            {/* Recipient Selection */}
            <div className="p-6 bg-white rounded-2xl shadow-xl border-0 hover:shadow-2xl transition-all duration-300">
              <div className="flex items-center gap-3 mb-4">
                <div className="p-2 rounded-full bg-gradient-to-r from-green-500 to-emerald-500 text-white shadow-lg">
                  <Users className="w-5 h-5" />
                </div>
                <Label className="text-lg font-bold text-gray-800">
                  שלח אל
                </Label>
              </div>

              <Select
                value={partyType}
                onValueChange={(value) =>
                  setPartyType(value as 'first' | 'second' | 'both')
                }
              >
                <SelectTrigger className="h-12 border-2 border-gray-200 hover:border-green-300 focus:border-green-500 rounded-xl transition-all">
                  <SelectValue placeholder="בחר נמען" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="first">
                    <div className="flex items-center gap-3">
                      <User className="w-4 h-4 text-green-500" />
                      <div className="text-right">
                        <div className="font-medium">
                          {suggestion.firstParty.firstName}{' '}
                          {suggestion.firstParty.lastName}
                        </div>
                        <div className="text-xs text-gray-500">
                          (צד א&apos;)
                        </div>{' '}
                      </div>
                    </div>
                  </SelectItem>
                  <SelectItem value="second">
                    <div className="flex items-center gap-3">
                      <User className="w-4 h-4 text-blue-500" />
                      <div className="text-right">
                        <div className="font-medium">
                          {suggestion.secondParty.firstName}{' '}
                          {suggestion.secondParty.lastName}
                        </div>
                        <div className="text-xs text-gray-500">
                          (צד ב&apos;)
                        </div>{' '}
                      </div>
                    </div>
                  </SelectItem>
                  <SelectItem value="both">
                    <div className="flex items-center gap-3">
                      <Users className="w-4 h-4 text-purple-500" />
                      <div className="font-medium">שני הצדדים</div>
                    </div>
                  </SelectItem>
                </SelectContent>
              </Select>

              <div className="mt-3 p-3 bg-green-50 rounded-xl">
                <p className="text-sm text-green-700">
                  <PartyTypeIcon className="w-4 h-4 inline ml-1" />
                  ההודעה תישלח ל{partyTypeInfo.label}
                </p>
              </div>
            </div>

            {/* Message Type */}
            <div className="p-6 bg-white rounded-2xl shadow-xl border-0 hover:shadow-2xl transition-all duration-300">
              <div className="flex items-center gap-3 mb-4">
                <div
                  className={cn(
                    'p-2 rounded-full bg-gradient-to-r text-white shadow-lg',
                    messageTypeInfo.color
                  )}
                >
                  <MessageTypeIcon className="w-5 h-5" />
                </div>
                <Label className="text-lg font-bold text-gray-800">
                  סוג ההודעה
                </Label>
              </div>

              <Select
                value={messageType}
                onValueChange={(value) =>
                  setMessageType(value as 'message' | 'reminder' | 'update')
                }
              >
                <SelectTrigger className="h-12 border-2 border-gray-200 hover:border-purple-300 focus:border-purple-500 rounded-xl transition-all">
                  <SelectValue placeholder="בחר סוג הודעה" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="message">
                    <div className="flex items-center gap-3">
                      <MessageCircle className="w-4 h-4 text-purple-500" />
                      <div className="text-right">
                        <div className="font-medium">הודעה רגילה</div>
                        <div className="text-xs text-gray-500">
                          הודעה אישית כללית
                        </div>
                      </div>
                    </div>
                  </SelectItem>
                  <SelectItem value="reminder">
                    <div className="flex items-center gap-3">
                      <Clock className="w-4 h-4 text-yellow-500" />
                      <div className="text-right">
                        <div className="font-medium">תזכורת</div>
                        <div className="text-xs text-gray-500">
                          הזכרה על פעולה נדרשת
                        </div>
                      </div>
                    </div>
                  </SelectItem>
                  <SelectItem value="update">
                    <div className="flex items-center gap-3">
                      <Info className="w-4 h-4 text-blue-500" />
                      <div className="text-right">
                        <div className="font-medium">עדכון סטטוס</div>
                        <div className="text-xs text-gray-500">
                          עדכון על שינוי במצב
                        </div>
                      </div>
                    </div>
                  </SelectItem>
                </SelectContent>
              </Select>

              <div
                className={cn(
                  'mt-3 p-3 rounded-xl bg-gradient-to-r',
                  messageTypeInfo.bgColor
                )}
              >
                <p
                  className="text-sm font-medium"
                  style={{ color: messageTypeInfo.color.split(' ')[1] }}
                >
                  <MessageTypeIcon className="w-4 h-4 inline ml-1" />
                  {messageTypeInfo.description}
                </p>
              </div>
            </div>
          </div>

          {/* Message Content */}
          <div className="p-6 bg-white rounded-2xl shadow-xl border-0 hover:shadow-2xl transition-all duration-300">
            <div className="flex items-center gap-3 mb-4">
              <div className="p-2 rounded-full bg-gradient-to-r from-indigo-500 to-purple-500 text-white shadow-lg">
                <Mail className="w-5 h-5" />
              </div>
              <Label className="text-lg font-bold text-gray-800">
                תוכן ההודעה
              </Label>
            </div>

            <Textarea
              value={messageContent}
              onChange={(e) => setMessageContent(e.target.value)}
              placeholder={getMessagePlaceholder()}
              className="h-48 border-2 border-gray-200 focus:border-indigo-400 rounded-xl transition-all resize-none text-lg"
              dir="rtl"
            />

            <div className="mt-3 flex items-center justify-between">
              <div className="flex items-center gap-2 text-sm text-gray-500">
                <Sparkles className="w-4 h-4" />
                <span>המערכת תוסיף אוטומטית חתימה מקצועית</span>
              </div>
              <div className="text-sm text-gray-500">
                {messageContent.length}/1000 תווים
              </div>
            </div>
          </div>

          {/* Preview Section */}
          {messageContent.trim() && (
            <div className="p-6 bg-gradient-to-r from-gray-50 to-slate-50 rounded-2xl border-2 border-gray-200">
              <div className="flex items-center gap-3 mb-4">
                <div className="p-2 rounded-full bg-gradient-to-r from-gray-500 to-slate-500 text-white shadow-lg">
                  <Zap className="w-5 h-5" />
                </div>
                <h3 className="text-lg font-bold text-gray-800">
                  תצוגה מקדימה
                </h3>
              </div>

              <div className="bg-white p-4 rounded-xl border-2 border-gray-100 shadow-inner">
                <div className="text-sm text-gray-600 mb-2">
                  אל: {partyTypeInfo.label} • סוג: {messageTypeInfo.label}
                </div>
                <div className="text-gray-800 leading-relaxed whitespace-pre-wrap">
                  {messageContent}
                </div>
                <div className="mt-4 pt-3 border-t border-gray-100 text-xs text-gray-500">
                  בברכה,
                  <br />
                  צוות מערכת השידוכים
                </div>
              </div>
            </div>
          )}
        </div>

        <DialogFooter className="p-8 border-t border-gray-100 bg-gradient-to-r from-gray-50 to-slate-50">
          <div className="flex justify-between w-full items-center">
            <div className="flex items-center gap-2 text-sm text-gray-500">
              <Bell className="w-4 h-4" />
              <span>הנמענים יקבלו התראה באימייל ובוואטסאפ</span>
            </div>
            <div className="flex gap-4">
              <Button
                variant="outline"
                onClick={onClose}
                disabled={isSubmitting}
                className="px-8 py-3 border-2 border-gray-300 hover:bg-gray-50 rounded-xl transition-all"
              >
                ביטול
              </Button>
              <Button
                onClick={handleSubmit}
                disabled={isSubmitting || !messageContent.trim()}
                className="px-8 py-3 bg-gradient-to-r from-purple-600 via-pink-600 to-blue-600 hover:from-purple-700 hover:via-pink-700 hover:to-blue-700 text-white shadow-xl hover:shadow-2xl transition-all duration-300 rounded-xl transform hover:scale-105"
              >
                {isSubmitting ? (
                  <>
                    <Send className="w-5 h-5 ml-2 animate-pulse" />
                    שולח...
                  </>
                ) : (
                  <>
                    <Send className="w-5 h-5 ml-2" />
                    שלח הודעה
                  </>
                )}
              </Button>
            </div>
          </div>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
};

export default MessageForm;
--- End of Content for MessageForm.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\suggestions\suggestions_contents.txt
--------------------------------------------------------------------------------
[This is the output log file itself. Content not included.]

================================================================================
Directory: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\suggestions\NewSuggestionForm
================================================================================

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\suggestions\NewSuggestionForm\CandidateSelector.tsx
--------------------------------------------------------------------------------
Content:
// src/app/components/matchmaker/suggestions/NewSuggestionForm/CandidateSelector.tsx

import React, { useState, useCallback, KeyboardEvent } from 'react';
import {
  Search,
  AlertTriangle,
  Clock,
  User,
  Crown,
  Star,
  Heart,
  Sparkles,
  MapPin,
  Award,
  Zap,
  Shield,
} from 'lucide-react';
import { Input } from '@/components/ui/input';
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from '@/components/ui/popover';
import {
  Command,
  CommandEmpty,
  CommandGroup,
  CommandInput,
  CommandList,
} from '@/components/ui/command';
import { Button } from '@/components/ui/button';
import { Card, CardContent } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';
import {
  calculateAge,
  cn,
  getRelativeCloudinaryPath,
  getInitials,
} from '@/lib/utils';
import type { Candidate } from '../../new/types/candidates';
import { toast } from 'sonner';
import type { MatchmakerPageDictionary } from '@/types/dictionary';

interface CandidateSelectorProps {
  dict: MatchmakerPageDictionary['newSuggestionForm']['candidateSelector'];
  value: Candidate | null;
  onChange: (candidate: Candidate | null) => void;
  otherParty?: Candidate | null;
  label: string;
  candidates: Candidate[];
  className?: string;
  fieldName: string;
  error?: string;
}

const EnhancedCandidateCard: React.FC<{
  dict: MatchmakerPageDictionary['newSuggestionForm']['candidateSelector'];
  candidate: Candidate;
  onClick: () => void;
  isActive: boolean;
  isBlocked: boolean;
}> = ({ dict, candidate, onClick, isActive, isBlocked }) => {
  const age = calculateAge(new Date(candidate.profile.birthDate));
  const mainImage = candidate.images.find((img) => img.isMain)?.url;

  const getStatusInfo = () => {
    if (isBlocked) {
      return {
        icon: Shield,
        label: dict.status.blocked,
        className:
          'bg-gradient-to-r from-red-500 to-pink-500 text-white animate-pulse',
        description: dict.status.blockedDescription.replace(
          '{{name}}',
          candidate.suggestionStatus?.withCandidateName || ''
        ),
      };
    }

    if (candidate.suggestionStatus?.status === 'PENDING') {
      return {
        icon: Clock,
        label: dict.status.pending,
        className: 'bg-gradient-to-r from-yellow-500 to-amber-500 text-white',
        description: dict.status.pendingDescription.replace(
          '{{name}}',
          candidate.suggestionStatus.withCandidateName
        ),
      };
    }

    return {
      icon: Star,
      label: dict.status.available,
      className: 'bg-gradient-to-r from-green-500 to-emerald-500 text-white',
      description: dict.status.availableDescription,
    };
  };

  const statusInfo = getStatusInfo();
  const StatusIcon = statusInfo.icon;

  return (
    <div
      className={cn(
        'group relative overflow-hidden rounded-2xl transition-all duration-300 cursor-pointer',
        'bg-gradient-to-br from-white via-gray-50/30 to-white border-2 shadow-lg hover:shadow-2xl',
        isActive && 'ring-4 ring-purple-500 ring-opacity-50 border-purple-300',
        isBlocked && 'opacity-60 cursor-not-allowed',
        !isBlocked && 'hover:scale-105 hover:border-purple-300'
      )}
      onClick={!isBlocked ? onClick : undefined}
    >
      <div className="absolute inset-0">
        <div className="absolute top-0 right-0 w-20 h-20 bg-gradient-to-br from-purple-200/20 to-pink-200/20 rounded-full blur-xl opacity-0 group-hover:opacity-100 transition-opacity duration-500"></div>
        <div className="absolute bottom-0 left-0 w-16 h-16 bg-gradient-to-br from-cyan-200/20 to-blue-200/20 rounded-full blur-lg opacity-0 group-hover:opacity-100 transition-opacity duration-700"></div>
      </div>

      <div className="relative z-10 p-4 space-y-4">
        <div className="flex items-center justify-between">
          <Badge className={cn('shadow-lg font-bold', statusInfo.className)}>
            <StatusIcon className="w-3 h-3 ml-1" />
            {statusInfo.label}
          </Badge>

          {candidate.profile.religiousLevel && (
            <Badge className="bg-gradient-to-r from-indigo-500 to-purple-500 text-white shadow-lg">
              <Crown className="w-3 h-3 ml-1" />
              {candidate.profile.religiousLevel}
            </Badge>
          )}
        </div>

        <div className="flex items-center gap-4">
          <div className="relative">
            <Avatar className="w-16 h-16 border-4 border-white shadow-xl ring-2 ring-purple-200 group-hover:ring-purple-400 transition-all duration-300">
              {mainImage ? (
                <AvatarImage
                  src={getRelativeCloudinaryPath(mainImage)}
                  alt={`${candidate.firstName} ${candidate.lastName}`}
                  className="object-cover"
                />
              ) : (
                <AvatarFallback className="bg-gradient-to-br from-purple-500 to-pink-500 text-white font-bold text-lg">
                  {getInitials(`${candidate.firstName} ${candidate.lastName}`)}
                </AvatarFallback>
              )}
            </Avatar>
            <div className="absolute -bottom-1 -right-1 w-5 h-5 bg-gradient-to-r from-green-400 to-emerald-400 border-2 border-white rounded-full shadow-lg animate-pulse"></div>
          </div>

          <div className="flex-1 min-w-0">
            <h3 className="text-lg font-bold text-gray-800 truncate group-hover:text-purple-700 transition-colors">
              {candidate.firstName} {candidate.lastName}
            </h3>

            <div className="flex items-center gap-2 mt-1">
              <div className="flex items-center gap-1 text-sm text-gray-600">
                <User className="w-4 h-4 text-blue-500" />
                <span className="font-medium">
                  {age} {dict.card.years}
                </span>
              </div>

              {candidate.profile.city && (
                <div className="flex items-center gap-1 text-sm text-gray-600">
                  <MapPin className="w-4 h-4 text-green-500" />
                  <span className="truncate">{candidate.profile.city}</span>
                </div>
              )}
            </div>
          </div>
        </div>

        <div className="grid grid-cols-2 gap-3">
          {candidate.profile.occupation && (
            <div className="flex items-center gap-2 p-2 bg-gradient-to-r from-blue-50 to-cyan-50 rounded-lg border border-blue-100 shadow-sm">
              <Award className="w-4 h-4 text-blue-500 flex-shrink-0" />
              <span className="text-sm font-medium text-blue-700 truncate">
                {candidate.profile.occupation}
              </span>
            </div>
          )}

          {candidate.profile.education && (
            <div className="flex items-center gap-2 p-2 bg-gradient-to-r from-purple-50 to-pink-50 rounded-lg border border-purple-100 shadow-sm">
              <Sparkles className="w-4 h-4 text-purple-500 flex-shrink-0" />
              <span className="text-sm font-medium text-purple-700 truncate">
                {candidate.profile.education}
              </span>
            </div>
          )}
        </div>

        {isBlocked && (
          <div className="p-3 bg-gradient-to-r from-red-50 to-pink-50 rounded-lg border border-red-200">
            <div className="flex items-start gap-2">
              <AlertTriangle className="w-4 h-4 text-red-500 mt-0.5 flex-shrink-0" />
              <div className="text-sm text-red-700">
                <p className="font-medium">{dict.card.cannotSelect}</p>
                <p className="text-xs">{statusInfo.description}</p>
              </div>
            </div>
          </div>
        )}
      </div>
      <div className="absolute inset-0 bg-gradient-to-r from-purple-500/5 to-pink-500/5 opacity-0 group-hover:opacity-100 transition-opacity duration-300 pointer-events-none"></div>
    </div>
  );
};

const CandidateSelector: React.FC<CandidateSelectorProps> = ({
  dict,
  value,
  onChange,
  otherParty,
  label,
  candidates,
  className,
  error,
}) => {
  const [open, setOpen] = useState(false);
  const [inputValue, setInputValue] = useState('');
  const [activeIndex, setActiveIndex] = useState(-1);

  const filteredCandidates = candidates.filter((candidate) => {
    if (otherParty && candidate.id === otherParty.id) return false;

    if (inputValue) {
      const searchTerm = inputValue.toLowerCase();
      return (
        candidate.firstName.toLowerCase().includes(searchTerm) ||
        candidate.lastName.toLowerCase().includes(searchTerm) ||
        candidate.profile.city?.toLowerCase().includes(searchTerm) ||
        candidate.profile.occupation?.toLowerCase().includes(searchTerm)
      );
    }
    return true;
  });

  const formatCandidateDisplay = useCallback((candidate: Candidate) => {
    const age = calculateAge(new Date(candidate.profile.birthDate));
    return `${candidate.firstName} ${candidate.lastName}, ${age}${
      candidate.profile.city ? `, ${candidate.profile.city}` : ''
    }`;
  }, []);

  const handleSelect = useCallback(
    (candidate: Candidate) => {
      if (candidate.suggestionStatus?.status === 'BLOCKED') {
        toast.error(dict.toasts.cannotSelectError.title, {
          description: dict.toasts.cannotSelectError.description
            .replace('{{name}}', `${candidate.firstName} ${candidate.lastName}`)
            .replace(
              '{{withName}}',
              candidate.suggestionStatus.withCandidateName
            ),
        });
        return;
      }

      onChange(candidate);
      setOpen(false);
      setInputValue('');
      setActiveIndex(-1);
    },
    [onChange, dict]
  );

  const handleKeyDown = (e: KeyboardEvent) => {
    if (!open) return;

    switch (e.key) {
      case 'ArrowDown':
        e.preventDefault();
        setActiveIndex((prev) =>
          prev < filteredCandidates.length - 1 ? prev + 1 : prev
        );
        break;
      case 'ArrowUp':
        e.preventDefault();
        setActiveIndex((prev) => (prev > 0 ? prev - 1 : prev));
        break;
      case 'Enter':
        e.preventDefault();
        if (activeIndex >= 0 && activeIndex < filteredCandidates.length) {
          handleSelect(filteredCandidates[activeIndex]);
        }
        break;
      case 'Escape':
        e.preventDefault();
        setOpen(false);
        setActiveIndex(-1);
        break;
    }
  };

  return (
    <div className={className}>
      <div className="space-y-3">
        <div className="flex items-center gap-3">
          <div className="p-2 rounded-full bg-gradient-to-r from-purple-500 to-pink-500 text-white shadow-lg">
            <User className="w-5 h-5" />
          </div>
          <label className="text-lg font-bold text-gray-800">{label}</label>
        </div>
        <Popover open={open} onOpenChange={setOpen}>
          <PopoverTrigger asChild>
            <div className="relative group">
              <div className="absolute inset-0 bg-gradient-to-r from-purple-500/20 to-pink-500/20 rounded-2xl blur opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
              <div className="relative">
                <Search className="absolute right-4 top-1/2 transform -translate-y-1/2 h-5 w-5 text-purple-400 group-hover:text-purple-600 transition-colors" />
                <Input
                  value={value ? formatCandidateDisplay(value) : inputValue}
                  onChange={(e) => {
                    setInputValue(e.target.value);
                    if (!open) setOpen(true);
                    setActiveIndex(-1);
                  }}
                  onKeyDown={handleKeyDown}
                  onClick={() => !open && setOpen(true)}
                  placeholder={dict.searchPlaceholder}
                  className={cn(
                    'h-14 pr-14 text-right text-lg border-2 transition-all duration-300 rounded-2xl shadow-lg',
                    'bg-white/80 backdrop-blur-sm',
                    'border-purple-200 hover:border-purple-300 focus:border-purple-500 focus:ring-purple-200',
                    'placeholder:text-gray-400',
                    error &&
                      'border-red-300 focus:border-red-500 focus:ring-red-200'
                  )}
                  role="combobox"
                  aria-expanded={open}
                  aria-controls="candidate-listbox"
                  aria-activedescendant={
                    activeIndex >= 0
                      ? `candidate-${filteredCandidates[activeIndex]?.id}`
                      : undefined
                  }
                />
                <div className="absolute left-4 top-1/2 transform -translate-y-1/2">
                  <Sparkles className="h-4 w-4 text-purple-400" />
                </div>
              </div>
            </div>
          </PopoverTrigger>
          <PopoverContent
            className="p-0 w-[500px] border-0 shadow-2xl rounded-2xl bg-white/95 backdrop-blur-sm"
            align="start"
            side="bottom"
            sideOffset={8}
          >
            <Command shouldFilter={false}>
              <div className="relative">
                <CommandInput
                  placeholder={dict.commandInputPlaceholder}
                  value={inputValue}
                  onValueChange={setInputValue}
                  className="h-12 border-0 text-right text-lg bg-gradient-to-r from-purple-50 to-pink-50"
                />
                <div className="absolute right-4 top-1/2 transform -translate-y-1/2">
                  <Search className="h-4 w-4 text-purple-400" />
                </div>
              </div>
              <CommandList
                className="max-h-[400px] overflow-auto p-2"
                id="candidate-listbox"
                role="listbox"
              >
                {filteredCandidates.length === 0 ? (
                  <div className="text-center p-8">
                    <div className="w-16 h-16 rounded-full bg-gradient-to-br from-gray-100 to-gray-200 flex items-center justify-center mx-auto mb-4">
                      <Search className="w-8 h-8 text-gray-400" />
                    </div>
                    <h3 className="text-lg font-bold text-gray-800 mb-2">
                      {dict.noResults.title}
                    </h3>
                    <p className="text-gray-600">
                      {dict.noResults.description}
                    </p>
                  </div>
                ) : (
                  <CommandGroup>
                    <div className="grid gap-3">
                      {filteredCandidates.map((candidate, index) => {
                        const isBlocked =
                          candidate.suggestionStatus?.status === 'BLOCKED';
                        return (
                          <EnhancedCandidateCard
                            key={candidate.id}
                            dict={dict}
                            candidate={candidate}
                            onClick={() => handleSelect(candidate)}
                            isActive={index === activeIndex}
                            isBlocked={isBlocked}
                          />
                        );
                      })}
                    </div>
                  </CommandGroup>
                )}
              </CommandList>
            </Command>
          </PopoverContent>
        </Popover>
        {error && (
          <div className="flex items-center gap-2 p-3 bg-gradient-to-r from-red-50 to-pink-50 rounded-xl border border-red-200">
            <AlertTriangle className="w-4 h-4 text-red-500" />
            <p className="text-sm text-red-600 font-medium">{error}</p>
          </div>
        )}
      </div>
      {value && (
        <Card className="mt-4 border-0 shadow-xl bg-gradient-to-br from-white via-purple-50/30 to-pink-50/30 rounded-2xl overflow-hidden">
          <CardContent className="p-6">
            <div className="flex items-center justify-between mb-4">
              <div className="flex items-center gap-3">
                <div className="p-2 rounded-full bg-gradient-to-r from-green-500 to-emerald-500 text-white shadow-lg">
                  <Heart className="w-5 h-5" />
                </div>
                <h4 className="text-lg font-bold text-gray-800">
                  {dict.selectedDisplay.title}
                </h4>
              </div>
              <Button
                variant="ghost"
                size="sm"
                onClick={() => onChange(null)}
                className="text-red-600 hover:text-red-700 hover:bg-red-50 rounded-xl transition-all duration-300"
              >
                <Zap className="w-4 h-4 ml-1" />
                {dict.selectedDisplay.removeButton}
              </Button>
            </div>
            <EnhancedCandidateCard
              dict={dict}
              candidate={value}
              onClick={() => {}}
              isActive={true}
              isBlocked={false}
            />
            <div className="flex gap-3 mt-4">
              <Button
                variant="outline"
                size="sm"
                onClick={() => {
                  /* Implement view profile handler */
                }}
                className="flex-1 border-2 border-purple-200 text-purple-600 hover:bg-purple-50 rounded-xl transition-all duration-300"
              >
                <User className="w-4 h-4 ml-2" />
                {dict.selectedDisplay.viewProfileButton}
              </Button>
            </div>
          </CardContent>
        </Card>
      )}
    </div>
  );
};

export default CandidateSelector;
--- End of Content for CandidateSelector.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\suggestions\NewSuggestionForm\MatchPreview.tsx
--------------------------------------------------------------------------------
Content:
// src/app/components/matchmaker/suggestions/NewSuggestionForm/MatchPreview.tsx

import React from 'react';
import { Card, CardContent } from '@/components/ui/card';
import { Progress } from '@/components/ui/progress';
import { Badge } from '@/components/ui/badge';
import {
  AlertCircle,
  Heart,
  Star,
  Sparkles,
  TrendingUp,
  Award,
  Crown,
  Gem,
  Zap,
  Target,
  Trophy,
  Gift,
} from 'lucide-react';
import { calculateMatchScore } from '../utils/matchingAlgorithm';
import type { Candidate } from '../../new/types/candidates';
import type { MatchScore } from '../utils/matchingAlgorithm';
import { cn } from '@/lib/utils';
import type { MatchmakerPageDictionary } from '@/types/dictionary';

interface MatchPreviewProps {
  dict: MatchmakerPageDictionary['newSuggestionForm']['matchPreview'];
  firstParty: Candidate;
  secondParty: Candidate;
  className?: string;
}

const MatchCriteriaCard: React.FC<{
  dict: MatchmakerPageDictionary['newSuggestionForm']['matchPreview'];
  criterion: {
    name: string;
    score: number;
    reason?: string;
  };
  index: number;
}> = ({ dict, criterion, index }) => {
  const getCriterionInfo = (name: string) => {
    switch (name) {
      case 'age':
        return {
          icon: Target,
          label: dict.criteria.age,
          color: 'from-blue-500 to-cyan-500',
          bgColor: 'from-blue-50 to-cyan-50',
        };
      case 'location':
        return {
          icon: Crown,
          label: dict.criteria.location,
          color: 'from-green-500 to-emerald-500',
          bgColor: 'from-green-50 to-emerald-50',
        };
      case 'religious':
        return {
          icon: Sparkles,
          label: dict.criteria.religious,
          color: 'from-purple-500 to-pink-500',
          bgColor: 'from-purple-50 to-pink-50',
        };
      default:
        return {
          icon: Star,
          label: name,
          color: 'from-gray-500 to-slate-500',
          bgColor: 'from-gray-50 to-slate-50',
        };
    }
  };

  const info = getCriterionInfo(criterion.name);
  const IconComponent = info.icon;
  const scorePercentage = Math.round(criterion.score * 100);

  const getScoreCategory = (score: number) => {
    if (score >= 0.9)
      return {
        label: dict.scoreCategories.perfect,
        color: 'text-emerald-600',
        bgColor: 'bg-emerald-100',
      };
    if (score >= 0.8)
      return {
        label: dict.scoreCategories.excellent,
        color: 'text-green-600',
        bgColor: 'bg-green-100',
      };
    if (score >= 0.7)
      return {
        label: dict.scoreCategories.good,
        color: 'text-blue-600',
        bgColor: 'bg-blue-100',
      };
    if (score >= 0.5)
      return {
        label: dict.scoreCategories.medium,
        color: 'text-yellow-600',
        bgColor: 'bg-yellow-100',
      };
    return {
      label: dict.scoreCategories.low,
      color: 'text-red-600',
      bgColor: 'bg-red-100',
    };
  };

  const scoreCategory = getScoreCategory(criterion.score);

  return (
    <div
      className={cn(
        'relative overflow-hidden rounded-2xl transition-all duration-500 group hover:scale-105',
        'bg-gradient-to-br',
        info.bgColor,
        'border border-white/50 shadow-lg hover:shadow-2xl'
      )}
      style={{
        animationDelay: `${index * 150}ms`,
        animationFillMode: 'both',
      }}
    >
      <div className="absolute inset-0">
        <div className="absolute top-0 right-0 w-16 h-16 bg-gradient-to-br from-white/30 to-transparent rounded-full blur-xl opacity-0 group-hover:opacity-100 transition-opacity duration-500"></div>
        <div className="absolute bottom-0 left-0 w-12 h-12 bg-gradient-to-br from-white/20 to-transparent rounded-full blur-lg opacity-0 group-hover:opacity-100 transition-opacity duration-700"></div>
      </div>

      <div className="relative z-10 p-6 space-y-4">
        <div className="flex items-center justify-between">
          <div className="flex items-center gap-3">
            <div
              className={cn(
                'p-3 rounded-full shadow-lg group-hover:scale-110 transition-transform bg-gradient-to-r text-white',
                info.color
              )}
            >
              <IconComponent className="w-5 h-5" />
            </div>
            <h4 className="text-lg font-bold text-gray-800">{info.label}</h4>
          </div>

          <Badge
            className={cn(
              'px-3 py-1 font-bold shadow-lg',
              scoreCategory.bgColor,
              scoreCategory.color
            )}
          >
            {scoreCategory.label}
          </Badge>
        </div>

        <div className="space-y-3">
          <div className="flex items-center justify-between">
            <span className="text-sm font-medium text-gray-600">
              {dict.scoreLabel}
            </span>
            <span className="text-2xl font-bold text-gray-800">
              {scorePercentage}%
            </span>
          </div>
          <div className="relative">
            <Progress
              value={scorePercentage}
              className="h-3 bg-white/50 shadow-inner"
            />
            <div className="absolute inset-0 rounded-full bg-gradient-to-r from-transparent via-white/20 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-500"></div>
          </div>
        </div>

        {criterion.reason && (
          <div className="p-3 bg-white/60 backdrop-blur-sm rounded-xl border border-white/50 shadow-inner">
            <p className="text-sm text-gray-700 leading-relaxed font-medium">
              {criterion.reason}
            </p>
          </div>
        )}
      </div>
    </div>
  );
};

const MatchPreview: React.FC<MatchPreviewProps> = ({
  dict,
  firstParty,
  secondParty,
  className,
}) => {
  const matchScore: MatchScore | null = calculateMatchScore(
    firstParty.profile,
    secondParty.profile
  );

  if (!matchScore) {
    return (
      <Card
        className={cn(
          'border-0 shadow-xl rounded-3xl overflow-hidden',
          className
        )}
      >
        <CardContent className="p-8">
          <div className="text-center space-y-6">
            <div className="w-24 h-24 rounded-full bg-gradient-to-br from-yellow-100 to-amber-100 flex items-center justify-center mx-auto shadow-xl">
              <AlertCircle className="w-12 h-12 text-yellow-500" />
            </div>
            <div>
              <h3 className="text-xl font-bold text-gray-800 mb-2">
                {dict.errorState.title}
              </h3>
              <p className="text-gray-600">{dict.errorState.description}</p>
            </div>
            <div className="p-4 bg-gradient-to-r from-yellow-50 to-amber-50 rounded-2xl border border-yellow-200">
              <p className="text-sm text-yellow-800 font-medium">
                {dict.errorState.suggestion}
              </p>
            </div>
          </div>
        </CardContent>
      </Card>
    );
  }

  const getMatchQuality = (score: number) => {
    const qualityMap = {
      perfect: {
        icon: Crown,
        bgGradient: 'from-purple-500 to-pink-500',
        bgColor: 'from-purple-50 to-pink-50',
        animation: 'animate-pulse',
      },
      excellent: {
        icon: Gem,
        bgGradient: 'from-emerald-500 to-green-500',
        bgColor: 'from-emerald-50 to-green-50',
        animation: '',
      },
      good: {
        icon: Trophy,
        bgGradient: 'from-blue-500 to-cyan-500',
        bgColor: 'from-blue-50 to-cyan-50',
        animation: '',
      },
      medium: {
        icon: Star,
        bgGradient: 'from-yellow-500 to-amber-500',
        bgColor: 'from-yellow-50 to-amber-50',
        animation: '',
      },
      low: {
        icon: AlertCircle,
        bgGradient: 'from-red-500 to-pink-500',
        bgColor: 'from-red-50 to-pink-50',
        animation: '',
      },
    };

    if (score >= 95)
      return { ...dict.qualityLevels.perfect, ...qualityMap.perfect };
    if (score >= 85)
      return { ...dict.qualityLevels.excellent, ...qualityMap.excellent };
    if (score >= 75) return { ...dict.qualityLevels.good, ...qualityMap.good };
    if (score >= 60)
      return { ...dict.qualityLevels.medium, ...qualityMap.medium };
    return { ...dict.qualityLevels.low, ...qualityMap.low };
  };

  const quality = getMatchQuality(matchScore.score);
  const Icon = quality.icon;

  return (
    <Card
      className={cn(
        'border-0 shadow-2xl rounded-3xl overflow-hidden transition-all duration-500 hover:shadow-3xl',
        'bg-gradient-to-br',
        quality.bgColor,
        className
      )}
    >
      <div className="absolute inset-0">
        <div className="absolute top-0 right-0 w-64 h-64 bg-gradient-to-br from-white/20 to-transparent rounded-full blur-3xl animate-float"></div>
        <div
          className="absolute bottom-0 left-0 w-48 h-48 bg-gradient-to-br from-white/10 to-transparent rounded-full blur-2xl animate-float"
          style={{ animationDelay: '2s' }}
        ></div>
        <div
          className="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-80 h-80 bg-gradient-to-br from-white/5 to-transparent rounded-full blur-3xl animate-float"
          style={{ animationDelay: '4s' }}
        ></div>
      </div>

      <CardContent className="relative z-10 p-8 space-y-8">
        <div className="text-center space-y-6">
          <div className="flex items-center justify-center">
            <div
              className={cn(
                'p-6 rounded-full shadow-2xl bg-gradient-to-r text-white transform hover:scale-110 transition-transform duration-300',
                quality.bgGradient,
                quality.animation
              )}
            >
              <Icon className="w-12 h-12" />
            </div>
          </div>
          <div className="space-y-2">
            <h2 className="text-3xl font-bold text-gray-800">{quality.text}</h2>
            <p className="text-lg text-gray-600 leading-relaxed">
              {quality.description}
            </p>
          </div>
          <div className="relative">
            <div className="flex items-center justify-center gap-4 mb-4">
              <div className="text-center">
                <div className="text-5xl font-bold bg-gradient-to-r from-purple-600 via-pink-600 to-blue-600 bg-clip-text text-transparent">
                  {Math.round(matchScore.score)}%
                </div>
                <p className="text-sm font-medium text-gray-600 mt-1">
                  {dict.generalScoreLabel}
                </p>
              </div>
            </div>
            <div className="relative w-32 h-32 mx-auto">
              <svg
                className="w-32 h-32 transform -rotate-90"
                viewBox="0 0 100 100"
              >
                <circle
                  cx="50"
                  cy="50"
                  r="40"
                  stroke="currentColor"
                  strokeWidth="8"
                  fill="transparent"
                  className="text-gray-200"
                />
                <circle
                  cx="50"
                  cy="50"
                  r="40"
                  stroke="url(#gradient)"
                  strokeWidth="8"
                  fill="transparent"
                  strokeDasharray={`${2 * Math.PI * 40}`}
                  strokeDashoffset={`${2 * Math.PI * 40 * (1 - matchScore.score / 100)}`}
                  className="transition-all duration-1000 ease-out"
                  strokeLinecap="round"
                />
                <defs>
                  <linearGradient
                    id="gradient"
                    x1="0%"
                    y1="0%"
                    x2="100%"
                    y2="0%"
                  >
                    <stop offset="0%" stopColor="#8B5CF6" />
                    <stop offset="50%" stopColor="#EC4899" />
                    <stop offset="100%" stopColor="#3B82F6" />
                  </linearGradient>
                </defs>
              </svg>
              <div className="absolute inset-0 flex items-center justify-center">
                <Sparkles className="w-8 h-8 text-purple-500 animate-pulse" />
              </div>
            </div>
          </div>
        </div>
        <div className="space-y-6">
          <div className="text-center">
            <h3 className="text-2xl font-bold text-gray-800 mb-2 flex items-center justify-center gap-3">
              <TrendingUp className="w-6 h-6 text-purple-500" />
              {dict.criteriaSection.title}
            </h3>
            <p className="text-gray-600">{dict.criteriaSection.description}</p>
          </div>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
            {matchScore.criteria.map((criterion, index) => (
              <div key={criterion.name} className="animate-fade-in-up">
                <MatchCriteriaCard
                  dict={dict}
                  criterion={criterion}
                  index={index}
                />
              </div>
            ))}
          </div>
        </div>
        {matchScore.reasons.length > 0 && (
          <div className="space-y-4">
            <div className="text-center">
              <h4 className="text-xl font-bold text-gray-800 mb-2 flex items-center justify-center gap-3">
                <Heart className="w-5 h-5 text-red-500" />
                {dict.reasonsSection.title}
              </h4>
            </div>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              {matchScore.reasons.map((reason, index) => (
                <div
                  key={index}
                  className="flex items-start gap-3 p-4 bg-white/60 backdrop-blur-sm rounded-2xl border border-white/50 shadow-lg hover:shadow-xl transition-all duration-300 group"
                  style={{
                    animationDelay: `${(index + 3) * 150}ms`,
                    animationFillMode: 'both',
                  }}
                >
                  <div className="p-2 rounded-full bg-gradient-to-r from-green-500 to-emerald-500 text-white shadow-lg group-hover:scale-110 transition-transform">
                    <Gift className="w-4 h-4" />
                  </div>
                  <p className="text-gray-700 leading-relaxed font-medium flex-1">
                    {reason}
                  </p>
                </div>
              ))}
            </div>
          </div>
        )}
        <div className="p-6 bg-white/70 backdrop-blur-sm rounded-2xl border border-white/50 shadow-xl">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-4">
              <div className="p-3 rounded-full bg-gradient-to-r from-indigo-500 to-purple-500 text-white shadow-lg">
                <Award className="w-6 h-6" />
              </div>
              <div>
                <h4 className="text-lg font-bold text-gray-800">
                  {dict.summary.title}
                </h4>
                <p className="text-gray-600">{dict.summary.description}</p>
              </div>
            </div>
            <div className="text-right">
              <div className="flex items-center gap-2">
                {matchScore.score >= 80 ? (
                  <>
                    <Zap className="w-5 h-5 text-green-500" />
                    <span className="font-bold text-green-600">
                      {dict.summary.recommendations.high}
                    </span>
                  </>
                ) : matchScore.score >= 60 ? (
                  <>
                    <Star className="w-5 h-5 text-blue-500" />
                    <span className="font-bold text-blue-600">
                      {dict.summary.recommendations.medium}
                    </span>
                  </>
                ) : (
                  <>
                    <AlertCircle className="w-5 h-5 text-yellow-500" />
                    <span className="font-bold text-yellow-600">
                      {dict.summary.recommendations.low}
                    </span>
                  </>
                )}
              </div>
              <p className="text-sm text-gray-500 mt-1">
                {dict.summary.basedOn.replace(
                  '{{count}}',
                  matchScore.criteria.length.toString()
                )}
              </p>
            </div>
          </div>
        </div>
      </CardContent>
    </Card>
  );
};

export default MatchPreview;
--- End of Content for MatchPreview.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\suggestions\NewSuggestionForm\NewSuggestionForm_contents.txt
--------------------------------------------------------------------------------
Content:
################################################################################
# Directory Content Map For: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\app\components\matchmaker\suggestions\NewSuggestionForm
# Generated on: 2025-08-18 14:36:43
################################################################################

================================================================================
Directory: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\app\components\matchmaker\suggestions\NewSuggestionForm
================================================================================

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\app\components\matchmaker\suggestions\NewSuggestionForm\CandidateSelector.tsx
--------------------------------------------------------------------------------
Content:
// src/app/components/matchmaker/suggestions/NewSuggestionForm/CandidateSelector.tsx

import React, { useState, useCallback, KeyboardEvent } from 'react';
import {
  Search,
  AlertTriangle,
  Clock,
  User,
  Crown,
  Star,
  Heart,
  Sparkles,
  MapPin,
  Award,
  Zap,
  Shield,
} from 'lucide-react';
import { Input } from '@/components/ui/input';
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from '@/components/ui/popover';
import {
  Command,
  CommandEmpty,
  CommandGroup,
  CommandInput,
  CommandList,
} from '@/components/ui/command';
import { Button } from '@/components/ui/button';
import { Card, CardContent } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';
import {
  calculateAge,
  cn,
  getRelativeCloudinaryPath,
  getInitials,
} from '@/lib/utils';
import type { Candidate } from '../../new/types/candidates';
import { toast } from 'sonner';

interface CandidateSelectorProps {
  value: Candidate | null;
  onChange: (candidate: Candidate | null) => void;
  otherParty?: Candidate | null;
  label: string;
  candidates: Candidate[];
  className?: string;
  fieldName: string;
  error?: string;
}

const EnhancedCandidateCard: React.FC<{
  candidate: Candidate;
  onClick: () => void;
  isActive: boolean;
  isBlocked: boolean;
}> = ({ candidate, onClick, isActive, isBlocked }) => {
  const age = calculateAge(new Date(candidate.profile.birthDate));
  const mainImage = candidate.images.find((img) => img.isMain)?.url;

  const getStatusInfo = () => {
    if (isBlocked) {
      return {
        icon: Shield,
        label: 'חסום',
        className:
          'bg-gradient-to-r from-red-500 to-pink-500 text-white animate-pulse',
        description: `בהצעה פעילה עם ${candidate.suggestionStatus?.withCandidateName}`,
      };
    }

    if (candidate.suggestionStatus?.status === 'PENDING') {
      return {
        icon: Clock,
        label: 'ממתין',
        className: 'bg-gradient-to-r from-yellow-500 to-amber-500 text-white',
        description: `הצעה ממתינה עם ${candidate.suggestionStatus.withCandidateName}`,
      };
    }

    return {
      icon: Star,
      label: 'זמין',
      className: 'bg-gradient-to-r from-green-500 to-emerald-500 text-white',
      description: 'זמין להצעה חדשה',
    };
  };

  const statusInfo = getStatusInfo();
  const StatusIcon = statusInfo.icon;

  return (
    <div
      className={cn(
        'group relative overflow-hidden rounded-2xl transition-all duration-300 cursor-pointer',
        'bg-gradient-to-br from-white via-gray-50/30 to-white border-2 shadow-lg hover:shadow-2xl',
        isActive && 'ring-4 ring-purple-500 ring-opacity-50 border-purple-300',
        isBlocked && 'opacity-60 cursor-not-allowed',
        !isBlocked && 'hover:scale-105 hover:border-purple-300'
      )}
      onClick={!isBlocked ? onClick : undefined}
    >
      {/* Background decorative elements */}
      <div className="absolute inset-0">
        <div className="absolute top-0 right-0 w-20 h-20 bg-gradient-to-br from-purple-200/20 to-pink-200/20 rounded-full blur-xl opacity-0 group-hover:opacity-100 transition-opacity duration-500"></div>
        <div className="absolute bottom-0 left-0 w-16 h-16 bg-gradient-to-br from-cyan-200/20 to-blue-200/20 rounded-full blur-lg opacity-0 group-hover:opacity-100 transition-opacity duration-700"></div>
      </div>

      <div className="relative z-10 p-4 space-y-4">
        {/* Header with status */}
        <div className="flex items-center justify-between">
          <Badge className={cn('shadow-lg font-bold', statusInfo.className)}>
            <StatusIcon className="w-3 h-3 ml-1" />
            {statusInfo.label}
          </Badge>

          {candidate.profile.religiousLevel && (
            <Badge className="bg-gradient-to-r from-indigo-500 to-purple-500 text-white shadow-lg">
              <Crown className="w-3 h-3 ml-1" />
              {candidate.profile.religiousLevel}
            </Badge>
          )}
        </div>

        {/* Profile section */}
        <div className="flex items-center gap-4">
          <div className="relative">
            <Avatar className="w-16 h-16 border-4 border-white shadow-xl ring-2 ring-purple-200 group-hover:ring-purple-400 transition-all duration-300">
              {mainImage ? (
                <AvatarImage
                  src={getRelativeCloudinaryPath(mainImage)}
                  alt={`${candidate.firstName} ${candidate.lastName}`}
                  className="object-cover"
                />
              ) : (
                <AvatarFallback className="bg-gradient-to-br from-purple-500 to-pink-500 text-white font-bold text-lg">
                  {getInitials(`${candidate.firstName} ${candidate.lastName}`)}
                </AvatarFallback>
              )}
            </Avatar>

            {/* Online indicator */}
            <div className="absolute -bottom-1 -right-1 w-5 h-5 bg-gradient-to-r from-green-400 to-emerald-400 border-2 border-white rounded-full shadow-lg animate-pulse"></div>
          </div>

          <div className="flex-1 min-w-0">
            <h3 className="text-lg font-bold text-gray-800 truncate group-hover:text-purple-700 transition-colors">
              {candidate.firstName} {candidate.lastName}
            </h3>

            <div className="flex items-center gap-2 mt-1">
              <div className="flex items-center gap-1 text-sm text-gray-600">
                <User className="w-4 h-4 text-blue-500" />
                <span className="font-medium">{age} שנים</span>
              </div>

              {candidate.profile.city && (
                <div className="flex items-center gap-1 text-sm text-gray-600">
                  <MapPin className="w-4 h-4 text-green-500" />
                  <span className="truncate">{candidate.profile.city}</span>
                </div>
              )}
            </div>
          </div>
        </div>

        {/* Details grid */}
        <div className="grid grid-cols-2 gap-3">
          {candidate.profile.occupation && (
            <div className="flex items-center gap-2 p-2 bg-gradient-to-r from-blue-50 to-cyan-50 rounded-lg border border-blue-100 shadow-sm">
              <Award className="w-4 h-4 text-blue-500 flex-shrink-0" />
              <span className="text-sm font-medium text-blue-700 truncate">
                {candidate.profile.occupation}
              </span>
            </div>
          )}

          {candidate.profile.education && (
            <div className="flex items-center gap-2 p-2 bg-gradient-to-r from-purple-50 to-pink-50 rounded-lg border border-purple-100 shadow-sm">
              <Sparkles className="w-4 h-4 text-purple-500 flex-shrink-0" />
              <span className="text-sm font-medium text-purple-700 truncate">
                {candidate.profile.education}
              </span>
            </div>
          )}
        </div>

        {/* Status description */}
        {isBlocked && (
          <div className="p-3 bg-gradient-to-r from-red-50 to-pink-50 rounded-lg border border-red-200">
            <div className="flex items-start gap-2">
              <AlertTriangle className="w-4 h-4 text-red-500 mt-0.5 flex-shrink-0" />
              <div className="text-sm text-red-700">
                <p className="font-medium">לא ניתן לבחור</p>
                <p className="text-xs">{statusInfo.description}</p>
              </div>
            </div>
          </div>
        )}
      </div>

      {/* Hover overlay */}
      <div className="absolute inset-0 bg-gradient-to-r from-purple-500/5 to-pink-500/5 opacity-0 group-hover:opacity-100 transition-opacity duration-300 pointer-events-none"></div>
    </div>
  );
};

const CandidateSelector: React.FC<CandidateSelectorProps> = ({
  value,
  onChange,
  otherParty,
  label,
  candidates,
  className,
  error,
}) => {
  const [open, setOpen] = useState(false);
  const [inputValue, setInputValue] = useState('');
  const [activeIndex, setActiveIndex] = useState(-1);

  const filteredCandidates = candidates.filter((candidate) => {
    if (otherParty && candidate.id === otherParty.id) return false;

    if (inputValue) {
      const searchTerm = inputValue.toLowerCase();
      return (
        candidate.firstName.toLowerCase().includes(searchTerm) ||
        candidate.lastName.toLowerCase().includes(searchTerm) ||
        candidate.profile.city?.toLowerCase().includes(searchTerm) ||
        candidate.profile.occupation?.toLowerCase().includes(searchTerm)
      );
    }
    return true;
  });

  const formatCandidateDisplay = useCallback((candidate: Candidate) => {
    const age = calculateAge(new Date(candidate.profile.birthDate));
    return `${candidate.firstName} ${candidate.lastName}, ${age}${
      candidate.profile.city ? `, ${candidate.profile.city}` : ''
    }`;
  }, []);

  const handleSelect = useCallback(
    (candidate: Candidate) => {
      if (candidate.suggestionStatus?.status === 'BLOCKED') {
        toast.error('לא ניתן לבחור מועמד זה', {
          description: `${candidate.firstName} ${candidate.lastName} כבר נמצא/ת בהצעה פעילה עם ${candidate.suggestionStatus.withCandidateName}.`,
        });
        return;
      }

      onChange(candidate);
      setOpen(false);
      setInputValue('');
      setActiveIndex(-1);
    },
    [onChange]
  );

  const handleKeyDown = (e: KeyboardEvent) => {
    if (!open) return;

    switch (e.key) {
      case 'ArrowDown':
        e.preventDefault();
        setActiveIndex((prev) =>
          prev < filteredCandidates.length - 1 ? prev + 1 : prev
        );
        break;
      case 'ArrowUp':
        e.preventDefault();
        setActiveIndex((prev) => (prev > 0 ? prev - 1 : prev));
        break;
      case 'Enter':
        e.preventDefault();
        if (activeIndex >= 0 && activeIndex < filteredCandidates.length) {
          handleSelect(filteredCandidates[activeIndex]);
        }
        break;
      case 'Escape':
        e.preventDefault();
        setOpen(false);
        setActiveIndex(-1);
        break;
    }
  };

  return (
    <div className={className}>
      <div className="space-y-3">
        {/* Enhanced Label */}
        <div className="flex items-center gap-3">
          <div className="p-2 rounded-full bg-gradient-to-r from-purple-500 to-pink-500 text-white shadow-lg">
            <User className="w-5 h-5" />
          </div>
          <label className="text-lg font-bold text-gray-800">{label}</label>
        </div>

        {/* Enhanced Search Input */}
        <Popover open={open} onOpenChange={setOpen}>
          <PopoverTrigger asChild>
            <div className="relative group">
              <div className="absolute inset-0 bg-gradient-to-r from-purple-500/20 to-pink-500/20 rounded-2xl blur opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
              <div className="relative">
                <Search className="absolute right-4 top-1/2 transform -translate-y-1/2 h-5 w-5 text-purple-400 group-hover:text-purple-600 transition-colors" />
                <Input
                  value={value ? formatCandidateDisplay(value) : inputValue}
                  onChange={(e) => {
                    setInputValue(e.target.value);
                    if (!open) setOpen(true);
                    setActiveIndex(-1);
                  }}
                  onKeyDown={handleKeyDown}
                  onClick={() => !open && setOpen(true)}
                  placeholder="חפש/י מועמד/ת..."
                  className={cn(
                    'h-14 pr-14 text-right text-lg border-2 transition-all duration-300 rounded-2xl shadow-lg',
                    'bg-white/80 backdrop-blur-sm',
                    'border-purple-200 hover:border-purple-300 focus:border-purple-500 focus:ring-purple-200',
                    'placeholder:text-gray-400',
                    error &&
                      'border-red-300 focus:border-red-500 focus:ring-red-200'
                  )}
                  role="combobox"
                  aria-expanded={open}
                  aria-controls="candidate-listbox"
                  aria-activedescendant={
                    activeIndex >= 0
                      ? `candidate-${filteredCandidates[activeIndex]?.id}`
                      : undefined
                  }
                />
                <div className="absolute left-4 top-1/2 transform -translate-y-1/2">
                  <Sparkles className="h-4 w-4 text-purple-400" />
                </div>
              </div>
            </div>
          </PopoverTrigger>

          <PopoverContent
            className="p-0 w-[500px] border-0 shadow-2xl rounded-2xl bg-white/95 backdrop-blur-sm"
            align="start"
            side="bottom"
            sideOffset={8}
          >
            <Command shouldFilter={false}>
              <div className="relative">
                <CommandInput
                  placeholder="חיפוש מועמדים..."
                  value={inputValue}
                  onValueChange={setInputValue}
                  className="h-12 border-0 text-right text-lg bg-gradient-to-r from-purple-50 to-pink-50"
                />
                <div className="absolute right-4 top-1/2 transform -translate-y-1/2">
                  <Search className="h-4 w-4 text-purple-400" />
                </div>
              </div>

              <CommandList
                className="max-h-[400px] overflow-auto p-2"
                id="candidate-listbox"
                role="listbox"
              >
                <CommandEmpty>
                  <div className="text-center p-8">
                    <div className="w-16 h-16 rounded-full bg-gradient-to-br from-gray-100 to-gray-200 flex items-center justify-center mx-auto mb-4">
                      <Search className="w-8 h-8 text-gray-400" />
                    </div>
                    <h3 className="text-lg font-bold text-gray-800 mb-2">
                      לא נמצאו תוצאות
                    </h3>
                    <p className="text-gray-600">נסה לשנות את מונחי החיפוש</p>
                  </div>
                </CommandEmpty>

                <CommandGroup>
                  <div className="grid gap-3">
                    {filteredCandidates.map((candidate, index) => {
                      const isBlocked =
                        candidate.suggestionStatus?.status === 'BLOCKED';
                      return (
                        <EnhancedCandidateCard
                          key={candidate.id}
                          candidate={candidate}
                          onClick={() => handleSelect(candidate)}
                          isActive={index === activeIndex}
                          isBlocked={isBlocked}
                        />
                      );
                    })}
                  </div>
                </CommandGroup>
              </CommandList>
            </Command>
          </PopoverContent>
        </Popover>

        {error && (
          <div className="flex items-center gap-2 p-3 bg-gradient-to-r from-red-50 to-pink-50 rounded-xl border border-red-200">
            <AlertTriangle className="w-4 h-4 text-red-500" />
            <p className="text-sm text-red-600 font-medium">{error}</p>
          </div>
        )}
      </div>

      {/* Selected Candidate Display */}
      {value && (
        <Card className="mt-4 border-0 shadow-xl bg-gradient-to-br from-white via-purple-50/30 to-pink-50/30 rounded-2xl overflow-hidden">
          <CardContent className="p-6">
            <div className="flex items-center justify-between mb-4">
              <div className="flex items-center gap-3">
                <div className="p-2 rounded-full bg-gradient-to-r from-green-500 to-emerald-500 text-white shadow-lg">
                  <Heart className="w-5 h-5" />
                </div>
                <h4 className="text-lg font-bold text-gray-800">
                  מועמד/ת נבחר/ת
                </h4>
              </div>

              <Button
                variant="ghost"
                size="sm"
                onClick={() => onChange(null)}
                className="text-red-600 hover:text-red-700 hover:bg-red-50 rounded-xl transition-all duration-300"
              >
                <Zap className="w-4 h-4 ml-1" />
                הסר בחירה
              </Button>
            </div>

            <EnhancedCandidateCard
              candidate={value}
              onClick={() => {}}
              isActive={true}
              isBlocked={false}
            />

            <div className="flex gap-3 mt-4">
              <Button
                variant="outline"
                size="sm"
                onClick={() => {
                  /* Implement view profile handler */
                }}
                className="flex-1 border-2 border-purple-200 text-purple-600 hover:bg-purple-50 rounded-xl transition-all duration-300"
              >
                <User className="w-4 h-4 ml-2" />
                צפה בפרופיל מלא
              </Button>
            </div>
          </CardContent>
        </Card>
      )}
    </div>
  );
};

export default CandidateSelector;
--- End of Content for CandidateSelector.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\app\components\matchmaker\suggestions\NewSuggestionForm\MatchPreview.tsx
--------------------------------------------------------------------------------
Content:
// src/app/components/matchmaker/suggestions/NewSuggestionForm/MatchPreview.tsx

import React from 'react';
import { Card, CardContent } from '@/components/ui/card';
import { Progress } from '@/components/ui/progress';
import { Badge } from '@/components/ui/badge';
import {
  CheckCircle,
  AlertCircle,
  XCircle,
  Heart,
  Star,
  Sparkles,
  TrendingUp,
  Award,
  Crown,
  Gem,
  Zap,
  Target,
  Trophy,
  Flame,
  Gift,
} from 'lucide-react';
import { calculateMatchScore } from '../utils/matchingAlgorithm';
import type { Candidate } from '../../new/types/candidates';
import type { MatchScore } from '../utils/matchingAlgorithm';
import { cn } from '@/lib/utils';

interface MatchPreviewProps {
  firstParty: Candidate;
  secondParty: Candidate;
  className?: string;
}

const MatchCriteriaCard: React.FC<{
  criterion: {
    name: string;
    score: number;
    reason?: string;
  };
  index: number;
}> = ({ criterion, index }) => {
  const getCriterionInfo = (name: string) => {
    switch (name) {
      case 'age':
        return {
          icon: Target,
          label: 'גיל',
          color: 'from-blue-500 to-cyan-500',
          bgColor: 'from-blue-50 to-cyan-50',
        };
      case 'location':
        return {
          icon: Crown,
          label: 'מיקום',
          color: 'from-green-500 to-emerald-500',
          bgColor: 'from-green-50 to-emerald-50',
        };
      case 'religious':
        return {
          icon: Sparkles,
          label: 'רמה דתית',
          color: 'from-purple-500 to-pink-500',
          bgColor: 'from-purple-50 to-pink-50',
        };
      default:
        return {
          icon: Star,
          label: name,
          color: 'from-gray-500 to-slate-500',
          bgColor: 'from-gray-50 to-slate-50',
        };
    }
  };

  const info = getCriterionInfo(criterion.name);
  const IconComponent = info.icon;
  const scorePercentage = Math.round(criterion.score * 100);

  const getScoreCategory = (score: number) => {
    if (score >= 0.9)
      return {
        label: 'מושלם',
        color: 'text-emerald-600',
        bgColor: 'bg-emerald-100',
      };
    if (score >= 0.8)
      return {
        label: 'מצוין',
        color: 'text-green-600',
        bgColor: 'bg-green-100',
      };
    if (score >= 0.7)
      return { label: 'טוב', color: 'text-blue-600', bgColor: 'bg-blue-100' };
    if (score >= 0.5)
      return {
        label: 'בינוני',
        color: 'text-yellow-600',
        bgColor: 'bg-yellow-100',
      };
    return { label: 'נמוך', color: 'text-red-600', bgColor: 'bg-red-100' };
  };

  const scoreCategory = getScoreCategory(criterion.score);

  return (
    <div
      className={cn(
        'relative overflow-hidden rounded-2xl transition-all duration-500 group hover:scale-105',
        'bg-gradient-to-br',
        info.bgColor,
        'border border-white/50 shadow-lg hover:shadow-2xl'
      )}
      style={{
        animationDelay: `${index * 150}ms`,
        animationFillMode: 'both',
      }}
    >
      {/* Background decoration */}
      <div className="absolute inset-0">
        <div className="absolute top-0 right-0 w-16 h-16 bg-gradient-to-br from-white/30 to-transparent rounded-full blur-xl opacity-0 group-hover:opacity-100 transition-opacity duration-500"></div>
        <div className="absolute bottom-0 left-0 w-12 h-12 bg-gradient-to-br from-white/20 to-transparent rounded-full blur-lg opacity-0 group-hover:opacity-100 transition-opacity duration-700"></div>
      </div>

      <div className="relative z-10 p-6 space-y-4">
        {/* Header */}
        <div className="flex items-center justify-between">
          <div className="flex items-center gap-3">
            <div
              className={cn(
                'p-3 rounded-full shadow-lg group-hover:scale-110 transition-transform bg-gradient-to-r text-white',
                info.color
              )}
            >
              <IconComponent className="w-5 h-5" />
            </div>
            <h4 className="text-lg font-bold text-gray-800">{info.label}</h4>
          </div>

          <Badge
            className={cn(
              'px-3 py-1 font-bold shadow-lg',
              scoreCategory.bgColor,
              scoreCategory.color
            )}
          >
            {scoreCategory.label}
          </Badge>
        </div>

        {/* Score visualization */}
        <div className="space-y-3">
          <div className="flex items-center justify-between">
            <span className="text-sm font-medium text-gray-600">התאמה</span>
            <span className="text-2xl font-bold text-gray-800">
              {scorePercentage}%
            </span>
          </div>

          <div className="relative">
            <Progress
              value={scorePercentage}
              className="h-3 bg-white/50 shadow-inner"
            />
            <div className="absolute inset-0 rounded-full bg-gradient-to-r from-transparent via-white/20 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-500"></div>
          </div>
        </div>

        {/* Reason */}
        {criterion.reason && (
          <div className="p-3 bg-white/60 backdrop-blur-sm rounded-xl border border-white/50 shadow-inner">
            <p className="text-sm text-gray-700 leading-relaxed font-medium">
              {criterion.reason}
            </p>
          </div>
        )}
      </div>
    </div>
  );
};

const MatchPreview: React.FC<MatchPreviewProps> = ({
  firstParty,
  secondParty,
  className,
}) => {
  // Calculate match score using the existing algorithm
  const matchScore: MatchScore | null = calculateMatchScore(
    firstParty.profile,
    secondParty.profile
  );

  if (!matchScore) {
    return (
      <Card
        className={cn(
          'border-0 shadow-xl rounded-3xl overflow-hidden',
          className
        )}
      >
        <CardContent className="p-8">
          <div className="text-center space-y-6">
            <div className="w-24 h-24 rounded-full bg-gradient-to-br from-yellow-100 to-amber-100 flex items-center justify-center mx-auto shadow-xl">
              <AlertCircle className="w-12 h-12 text-yellow-500" />
            </div>
            <div>
              <h3 className="text-xl font-bold text-gray-800 mb-2">
                לא ניתן לחשב התאמה
              </h3>
              <p className="text-gray-600">
                חסרים נתונים חיוניים לחישוב ההתאמה
              </p>
            </div>
            <div className="p-4 bg-gradient-to-r from-yellow-50 to-amber-50 rounded-2xl border border-yellow-200">
              <p className="text-sm text-yellow-800 font-medium">
                אנא ודא שלשני המועמדים יש פרופיל מלא עם תאריך לידה, עיר מגורים
                ורמה דתית
              </p>
            </div>
          </div>
        </CardContent>
      </Card>
    );
  }

  // Determine match quality with enhanced categories
  const getMatchQuality = (score: number) => {
    if (score >= 95)
      return {
        icon: Crown,
        color: 'text-purple-600',
        bgGradient: 'from-purple-500 to-pink-500',
        bgColor: 'from-purple-50 to-pink-50',
        text: 'התאמה מושלמת',
        description: 'זוג אידיאלי עם התאמה יוצאת דופן!',
        animation: 'animate-pulse',
      };
    if (score >= 85)
      return {
        icon: Gem,
        color: 'text-emerald-600',
        bgGradient: 'from-emerald-500 to-green-500',
        bgColor: 'from-emerald-50 to-green-50',
        text: 'התאמה מעולה',
        description: 'זוג עם פוטנציאל גבוה להצלחה',
        animation: '',
      };
    if (score >= 75)
      return {
        icon: Trophy,
        color: 'text-blue-600',
        bgGradient: 'from-blue-500 to-cyan-500',
        bgColor: 'from-blue-50 to-cyan-50',
        text: 'התאמה טובה',
        description: 'התאמה איכותית עם סיכויים טובים',
        animation: '',
      };
    if (score >= 60)
      return {
        icon: Star,
        color: 'text-yellow-600',
        bgGradient: 'from-yellow-500 to-amber-500',
        bgColor: 'from-yellow-50 to-amber-50',
        text: 'התאמה בינונית',
        description: 'יש פוטנציאל, שווה לבדוק',
        animation: '',
      };
    return {
      icon: AlertCircle,
      color: 'text-red-600',
      bgGradient: 'from-red-500 to-pink-500',
      bgColor: 'from-red-50 to-pink-50',
      text: 'התאמה נמוכה',
      description: 'התאמה מוגבלת, יש לשקול בזהירות',
      animation: '',
    };
  };

  const quality = getMatchQuality(matchScore.score);
  const Icon = quality.icon;

  return (
    <Card
      className={cn(
        'border-0 shadow-2xl rounded-3xl overflow-hidden transition-all duration-500 hover:shadow-3xl',
        'bg-gradient-to-br',
        quality.bgColor,
        className
      )}
    >
      {/* Animated background */}
      <div className="absolute inset-0">
        <div className="absolute top-0 right-0 w-64 h-64 bg-gradient-to-br from-white/20 to-transparent rounded-full blur-3xl animate-float"></div>
        <div
          className="absolute bottom-0 left-0 w-48 h-48 bg-gradient-to-br from-white/10 to-transparent rounded-full blur-2xl animate-float"
          style={{ animationDelay: '2s' }}
        ></div>
        <div
          className="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-80 h-80 bg-gradient-to-br from-white/5 to-transparent rounded-full blur-3xl animate-float"
          style={{ animationDelay: '4s' }}
        ></div>
      </div>

      <CardContent className="relative z-10 p-8 space-y-8">
        {/* Header Section */}
        <div className="text-center space-y-6">
          <div className="flex items-center justify-center">
            <div
              className={cn(
                'p-6 rounded-full shadow-2xl bg-gradient-to-r text-white transform hover:scale-110 transition-transform duration-300',
                quality.bgGradient,
                quality.animation
              )}
            >
              <Icon className="w-12 h-12" />
            </div>
          </div>

          <div className="space-y-2">
            <h2 className="text-3xl font-bold text-gray-800">{quality.text}</h2>
            <p className="text-lg text-gray-600 leading-relaxed">
              {quality.description}
            </p>
          </div>

          {/* Score display */}
          <div className="relative">
            <div className="flex items-center justify-center gap-4 mb-4">
              <div className="text-center">
                <div className="text-5xl font-bold bg-gradient-to-r from-purple-600 via-pink-600 to-blue-600 bg-clip-text text-transparent">
                  {Math.round(matchScore.score)}%
                </div>
                <p className="text-sm font-medium text-gray-600 mt-1">
                  ציון התאמה כללי
                </p>
              </div>
            </div>

            {/* Progress Ring */}
            <div className="relative w-32 h-32 mx-auto">
              <svg
                className="w-32 h-32 transform -rotate-90"
                viewBox="0 0 100 100"
              >
                <circle
                  cx="50"
                  cy="50"
                  r="40"
                  stroke="currentColor"
                  strokeWidth="8"
                  fill="transparent"
                  className="text-gray-200"
                />
                <circle
                  cx="50"
                  cy="50"
                  r="40"
                  stroke="url(#gradient)"
                  strokeWidth="8"
                  fill="transparent"
                  strokeDasharray={`${2 * Math.PI * 40}`}
                  strokeDashoffset={`${2 * Math.PI * 40 * (1 - matchScore.score / 100)}`}
                  className="transition-all duration-1000 ease-out"
                  strokeLinecap="round"
                />
                <defs>
                  <linearGradient
                    id="gradient"
                    x1="0%"
                    y1="0%"
                    x2="100%"
                    y2="0%"
                  >
                    <stop offset="0%" stopColor="#8B5CF6" />
                    <stop offset="50%" stopColor="#EC4899" />
                    <stop offset="100%" stopColor="#3B82F6" />
                  </linearGradient>
                </defs>
              </svg>
              <div className="absolute inset-0 flex items-center justify-center">
                <Sparkles className="w-8 h-8 text-purple-500 animate-pulse" />
              </div>
            </div>
          </div>
        </div>

        {/* Match Criteria Section */}
        <div className="space-y-6">
          <div className="text-center">
            <h3 className="text-2xl font-bold text-gray-800 mb-2 flex items-center justify-center gap-3">
              <TrendingUp className="w-6 h-6 text-purple-500" />
              פירוט קריטריונים
            </h3>
            <p className="text-gray-600">ניתוח מפורט של רמות ההתאמה השונות</p>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
            {matchScore.criteria.map((criterion, index) => (
              <div key={criterion.name} className="animate-fade-in-up">
                <MatchCriteriaCard criterion={criterion} index={index} />
              </div>
            ))}
          </div>
        </div>

        {/* Match Reasons Section */}
        {matchScore.reasons.length > 0 && (
          <div className="space-y-4">
            <div className="text-center">
              <h4 className="text-xl font-bold text-gray-800 mb-2 flex items-center justify-center gap-3">
                <Heart className="w-5 h-5 text-red-500" />
                סיבות להתאמה
              </h4>
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              {matchScore.reasons.map((reason, index) => (
                <div
                  key={index}
                  className="flex items-start gap-3 p-4 bg-white/60 backdrop-blur-sm rounded-2xl border border-white/50 shadow-lg hover:shadow-xl transition-all duration-300 group"
                  style={{
                    animationDelay: `${(index + 3) * 150}ms`,
                    animationFillMode: 'both',
                  }}
                >
                  <div className="p-2 rounded-full bg-gradient-to-r from-green-500 to-emerald-500 text-white shadow-lg group-hover:scale-110 transition-transform">
                    <Gift className="w-4 h-4" />
                  </div>
                  <p className="text-gray-700 leading-relaxed font-medium flex-1">
                    {reason}
                  </p>
                </div>
              ))}
            </div>
          </div>
        )}

        {/* Summary Card */}
        <div className="p-6 bg-white/70 backdrop-blur-sm rounded-2xl border border-white/50 shadow-xl">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-4">
              <div className="p-3 rounded-full bg-gradient-to-r from-indigo-500 to-purple-500 text-white shadow-lg">
                <Award className="w-6 h-6" />
              </div>
              <div>
                <h4 className="text-lg font-bold text-gray-800">סיכום התאמה</h4>
                <p className="text-gray-600">המלצה מבוססת ניתוח</p>
              </div>
            </div>

            <div className="text-right">
              <div className="flex items-center gap-2">
                {matchScore.score >= 80 ? (
                  <>
                    <Zap className="w-5 h-5 text-green-500" />
                    <span className="font-bold text-green-600">
                      מומלץ בחום!
                    </span>
                  </>
                ) : matchScore.score >= 60 ? (
                  <>
                    <Star className="w-5 h-5 text-blue-500" />
                    <span className="font-bold text-blue-600">שווה לנסות</span>
                  </>
                ) : (
                  <>
                    <AlertCircle className="w-5 h-5 text-yellow-500" />
                    <span className="font-bold text-yellow-600">
                      צריך שיקול
                    </span>
                  </>
                )}
              </div>
              <p className="text-sm text-gray-500 mt-1">
                מבוסס על {matchScore.criteria.length} קריטריונים
              </p>
            </div>
          </div>
        </div>
      </CardContent>
    </Card>
  );
};

export default MatchPreview;
--- End of Content for MatchPreview.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\app\components\matchmaker\suggestions\NewSuggestionForm\NewSuggestionForm_contents.txt
--------------------------------------------------------------------------------
[This is the output log file itself. Content not included.]

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\app\components\matchmaker\suggestions\NewSuggestionForm\SuggestionDetails.tsx
--------------------------------------------------------------------------------
Content:
// src/app/components/matchmaker/suggestions/NewSuggestionForm/SuggestionDetails.tsx

'use client';
import React, { useState } from 'react';
import { useFormContext } from 'react-hook-form';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select';
import { Card, CardContent } from '@/components/ui/card';
import { Priority } from '@prisma/client';
import { Label } from '@/components/ui/label';
import { Button } from '@/components/ui/button';
import { Textarea } from '@/components/ui/textarea';
import { toast } from 'sonner';
import {
  Loader2,
  Sparkles,
  AlertTriangle,
  Star,
  Flame,
  Target,
  Shield,
  Heart,
  MessageCircle,
  User,
  Calendar,
  Zap,
  Crown,
  Award,
  Gift,
  Clock,
  Wand2,
  Brain,
  Eye,
  Users,
} from 'lucide-react';
import { Alert, AlertDescription } from '@/components/ui/alert';
import type { NewSuggestionFormData } from './schema';
import type { Candidate } from '../../new/types/candidates';
import { cn } from '@/lib/utils';

interface SuggestionDetailsProps {
  firstParty: Candidate;
  secondParty: Candidate;
}

const EnhancedSection: React.FC<{
  icon: React.ElementType;
  title: string;
  description?: string;
  gradient: string;
  children: React.ReactNode;
  className?: string;
}> = ({ icon: Icon, title, description, gradient, children, className }) => (
  <Card
    className={cn(
      'border-0 shadow-xl hover:shadow-2xl transition-all duration-500 group overflow-hidden rounded-3xl',
      'bg-gradient-to-br from-white via-gray-50/30 to-white',
      className
    )}
  >
    {/* Background decoration */}
    <div className="absolute inset-0">
      <div className="absolute top-0 right-0 w-32 h-32 bg-gradient-to-br from-purple-200/20 to-pink-200/20 rounded-full blur-2xl opacity-0 group-hover:opacity-100 transition-opacity duration-700"></div>
      <div className="absolute bottom-0 left-0 w-24 h-24 bg-gradient-to-br from-cyan-200/20 to-blue-200/20 rounded-full blur-xl opacity-0 group-hover:opacity-100 transition-opacity duration-900"></div>
    </div>

    <CardContent className="relative z-10 p-8 space-y-6">
      {/* Header */}
      <div className="flex items-center gap-4 mb-6">
        <div
          className={cn(
            'p-4 rounded-2xl shadow-xl group-hover:scale-110 transition-transform duration-300 bg-gradient-to-r text-white',
            gradient
          )}
        >
          <Icon className="w-8 h-8" />
        </div>
        <div className="flex-1">
          <h3
            className="text-2xl font-bold text-gray-800 group-hover:text-transparent group-hover:bg-gradient-to-r group-hover:bg-clip-text transition-all duration-300"
            style={{
              backgroundImage: `linear-gradient(to right, ${gradient.replace('from-', '').replace('to-', ', ')})`,
            }}
          >
            {title}
          </h3>
          {description && (
            <p className="text-gray-600 mt-1 leading-relaxed">{description}</p>
          )}
        </div>
      </div>

      {children}
    </CardContent>
  </Card>
);

const PriorityBadge: React.FC<{ priority: Priority }> = ({ priority }) => {
  const getPriorityInfo = (p: Priority) => {
    switch (p) {
      case Priority.URGENT:
        return {
          label: 'דחוף',
          icon: Flame,
          className:
            'bg-gradient-to-r from-red-500 to-pink-500 text-white animate-pulse shadow-xl',
          description: 'דורש טיפול מיידי!',
        };
      case Priority.HIGH:
        return {
          label: 'גבוהה',
          icon: Star,
          className:
            'bg-gradient-to-r from-orange-500 to-amber-500 text-white shadow-xl',
          description: 'עדיפות גבוהה',
        };
      case Priority.MEDIUM:
        return {
          label: 'רגילה',
          icon: Target,
          className:
            'bg-gradient-to-r from-blue-500 to-cyan-500 text-white shadow-xl',
          description: 'עדיפות רגילה',
        };
      case Priority.LOW:
        return {
          label: 'נמוכה',
          icon: Shield,
          className:
            'bg-gradient-to-r from-gray-500 to-slate-500 text-white shadow-xl',
          description: 'עדיפות נמוכה',
        };
      default:
        return {
          label: 'רגילה',
          icon: Target,
          className:
            'bg-gradient-to-r from-blue-500 to-cyan-500 text-white shadow-xl',
          description: 'עדיפות רגילה',
        };
    }
  };

  const info = getPriorityInfo(priority);
  const IconComponent = info.icon;

  return (
    <div
      className={cn(
        'flex items-center gap-2 px-4 py-2 rounded-xl font-bold',
        info.className
      )}
    >
      <IconComponent className="w-4 h-4" />
      <span>{info.label}</span>
    </div>
  );
};

const SuggestionDetails: React.FC<SuggestionDetailsProps> = ({
  firstParty,
  secondParty,
}) => {
  const {
    register,
    formState: { errors },
    setValue,
    watch,
  } = useFormContext<NewSuggestionFormData>();
  const [isGeneratingRationale, setIsGeneratingRationale] = useState(false);

  const priority = watch('priority', Priority.MEDIUM);

  const handleGenerateRationale = async () => {
    setIsGeneratingRationale(true);
    toast.info('ה-AI מנסח את חבילת הנימוקים...', {
      description: 'זה יכול לקחת כמה שניות',
      duration: 3000,
    });

    try {
      const response = await fetch('/api/ai/generate-suggestion-rationale', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          userId1: firstParty.id,
          userId2: secondParty.id,
        }),
      });

      const data = await response.json();

      if (!response.ok || !data.success || !data.rationales) {
        throw new Error(data.error || 'שגיאה ביצור הנימוקים');
      }

      const { generalRationale, rationaleForParty1, rationaleForParty2 } =
        data.rationales;

      setValue('matchingReason', generalRationale, {
        shouldValidate: true,
        shouldDirty: true,
      });
      setValue('firstPartyNotes', rationaleForParty1, {
        shouldValidate: true,
        shouldDirty: true,
      });
      setValue('secondPartyNotes', rationaleForParty2, {
        shouldValidate: true,
        shouldDirty: true,
      });

      toast.success('הנימוקים נוצרו בהצלחה!', {
        description: 'כל השדות מולאו באופן אוטומטי עם תוכן מותאם אישית',
        duration: 5000,
      });
    } catch (error) {
      console.error('Failed to generate rationales:', error);
      toast.error(error instanceof Error ? error.message : 'שגיאה לא צפויה', {
        description: 'נסה שוב או מלא את השדות ידנית',
      });
    } finally {
      setIsGeneratingRationale(false);
    }
  };

  return (
    <div className="space-y-8">
      {/* Priority Section */}
      <EnhancedSection
        icon={Crown}
        title="עדיפות ההצעה"
        description="קבע את רמת החשיבות והדחיפות של ההצעה"
        gradient="from-purple-500 to-pink-500"
      >
        <div className="space-y-4">
          <div className="flex items-center justify-between">
            <Label className="text-lg font-semibold text-gray-700">
              בחר רמת עדיפות
            </Label>
            <PriorityBadge priority={priority} />
          </div>

          <Select
            onValueChange={(value: Priority) =>
              setValue('priority', value, { shouldValidate: true })
            }
            defaultValue={priority}
            name="priority"
          >
            <SelectTrigger className="h-14 border-2 border-purple-200 hover:border-purple-300 focus:border-purple-500 rounded-2xl bg-white/80 backdrop-blur-sm shadow-lg transition-all text-lg">
              <SelectValue placeholder="בחר/י עדיפות" />
            </SelectTrigger>
            <SelectContent className="border-0 shadow-2xl rounded-2xl bg-white/95 backdrop-blur-sm">
              <SelectItem value={Priority.URGENT}>
                <div className="flex items-center gap-3 py-2">
                  <Flame className="w-5 h-5 text-red-500" />
                  <div>
                    <div className="font-bold text-red-600">דחופה</div>
                    <div className="text-xs text-red-500">דורש טיפול מיידי</div>
                  </div>
                </div>
              </SelectItem>
              <SelectItem value={Priority.HIGH}>
                <div className="flex items-center gap-3 py-2">
                  <Star className="w-5 h-5 text-orange-500" />
                  <div>
                    <div className="font-bold text-orange-600">גבוהה</div>
                    <div className="text-xs text-orange-500">עדיפות מוגברת</div>
                  </div>
                </div>
              </SelectItem>
              <SelectItem value={Priority.MEDIUM}>
                <div className="flex items-center gap-3 py-2">
                  <Target className="w-5 h-5 text-blue-500" />
                  <div>
                    <div className="font-bold text-blue-600">רגילה</div>
                    <div className="text-xs text-blue-500">עדיפות סטנדרטית</div>
                  </div>
                </div>
              </SelectItem>
              <SelectItem value={Priority.LOW}>
                <div className="flex items-center gap-3 py-2">
                  <Shield className="w-5 h-5 text-gray-500" />
                  <div>
                    <div className="font-bold text-gray-600">נמוכה</div>
                    <div className="text-xs text-gray-500">ללא דחיפות</div>
                  </div>
                </div>
              </SelectItem>
            </SelectContent>
          </Select>

          {errors.priority && (
            <div className="flex items-center gap-2 p-3 bg-gradient-to-r from-red-50 to-pink-50 rounded-xl border border-red-200">
              <AlertTriangle className="w-4 h-4 text-red-500" />
              <p className="text-sm text-red-600 font-medium">
                {errors.priority.message}
              </p>
            </div>
          )}
        </div>
      </EnhancedSection>

      {/* AI-Generated Matching Reason */}
      <EnhancedSection
        icon={Brain}
        title="סיבת ההתאמה הכללית"
        description="נימוק מפורט המסביר מדוע יש התאמה בין הצדדים"
        gradient="from-emerald-500 to-green-500"
      >
        <div className="space-y-6">
          <div className="flex items-center justify-between">
            <Label className="text-lg font-semibold text-gray-700">
              תוכן יוצג לצדדים
            </Label>
            <Button
              type="button"
              onClick={handleGenerateRationale}
              disabled={isGeneratingRationale}
              className="bg-gradient-to-r from-purple-600 via-pink-600 to-blue-600 hover:from-purple-700 hover:via-pink-700 hover:to-blue-700 text-white shadow-xl hover:shadow-2xl transition-all duration-300 rounded-2xl px-6 py-3 font-bold"
            >
              {isGeneratingRationale ? (
                <>
                  <Loader2 className="w-5 h-5 ml-2 animate-spin" />
                  <span>מנסח...</span>
                </>
              ) : (
                <>
                  <Wand2 className="w-5 h-5 ml-2 text-yellow-300" />
                  <span>צור נימוקים (AI)</span>
                </>
              )}
            </Button>
          </div>

          <Textarea
            id="matchingReason"
            {...register('matchingReason')}
            placeholder="נימוק כללי המסביר מדוע יש התאמה בין הצדדים..."
            className="min-h-[140px] border-2 border-emerald-200 hover:border-emerald-300 focus:border-emerald-500 rounded-2xl bg-white/80 backdrop-blur-sm shadow-lg transition-all text-lg resize-none"
          />

          {errors.matchingReason && (
            <div className="flex items-center gap-2 p-3 bg-gradient-to-r from-red-50 to-pink-50 rounded-xl border border-red-200">
              <AlertTriangle className="w-4 h-4 text-red-500" />
              <p className="text-sm text-red-600 font-medium">
                {errors.matchingReason.message}
              </p>
            </div>
          )}

          <Alert className="border-0 bg-gradient-to-r from-blue-50 to-cyan-50 shadow-lg rounded-2xl">
            <Sparkles className="h-5 w-5 text-blue-500" />
            <AlertDescription className="text-blue-800 font-medium leading-relaxed">
              💡 <strong>טיפ חכם:</strong> לחיצה על כפתור ה-AI תמלא אוטומטית את
              שדה זה וגם את שדות ההערות האישיות לכל צד עם תוכן מותאם ומקצועי.
            </AlertDescription>
          </Alert>
        </div>
      </EnhancedSection>

      {/* Personal Notes for Each Party */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
        {/* First Party Notes */}
        <EnhancedSection
          icon={User}
          title={`הערות אישיות ל${firstParty.firstName}`}
          description="טקסט אישי המדגיש את היתרונות של הצד השני עבורו"
          gradient="from-blue-500 to-cyan-500"
          className="lg:col-span-1"
        >
          <div className="space-y-4">
            <div className="flex items-center gap-3 p-4 bg-gradient-to-r from-blue-50 to-cyan-50 rounded-2xl border border-blue-100">
              <div className="w-12 h-12 rounded-full bg-gradient-to-r from-blue-500 to-cyan-500 flex items-center justify-center text-white font-bold shadow-lg">
                {firstParty.firstName[0]}
              </div>
              <div>
                <div className="font-bold text-blue-800">
                  {firstParty.firstName} {firstParty.lastName}
                </div>
                <div className="text-sm text-blue-600">צד א' בהצעה</div>
              </div>
            </div>

            <Textarea
              id="firstPartyNotes"
              {...register('firstPartyNotes')}
              placeholder={`טקסט אישי המדגיש את היתרונות של ${secondParty.firstName} עבור ${firstParty.firstName}...`}
              className="min-h-[160px] border-2 border-blue-200 hover:border-blue-300 focus:border-blue-500 rounded-2xl bg-white/80 backdrop-blur-sm shadow-lg transition-all text-lg resize-none"
            />

            {errors.firstPartyNotes && (
              <div className="flex items-center gap-2 p-3 bg-gradient-to-r from-red-50 to-pink-50 rounded-xl border border-red-200">
                <AlertTriangle className="w-4 h-4 text-red-500" />
                <p className="text-sm text-red-600 font-medium">
                  {errors.firstPartyNotes.message}
                </p>
              </div>
            )}
          </div>
        </EnhancedSection>

        {/* Second Party Notes */}
        <EnhancedSection
          icon={User}
          title={`הערות אישיות ל${secondParty.firstName}`}
          description="טקסט אישי המדגיש את היתרונות של הצד השני עבורה"
          gradient="from-purple-500 to-pink-500"
          className="lg:col-span-1"
        >
          <div className="space-y-4">
            <div className="flex items-center gap-3 p-4 bg-gradient-to-r from-purple-50 to-pink-50 rounded-2xl border border-purple-100">
              <div className="w-12 h-12 rounded-full bg-gradient-to-r from-purple-500 to-pink-500 flex items-center justify-center text-white font-bold shadow-lg">
                {secondParty.firstName[0]}
              </div>
              <div>
                <div className="font-bold text-purple-800">
                  {secondParty.firstName} {secondParty.lastName}
                </div>
                <div className="text-sm text-purple-600">צד ב' בהצעה</div>
              </div>
            </div>

            <Textarea
              id="secondPartyNotes"
              {...register('secondPartyNotes')}
              placeholder={`טקסט אישי המדגיש את היתרונות של ${firstParty.firstName} עבור ${secondParty.firstName}...`}
              className="min-h-[160px] border-2 border-purple-200 hover:border-purple-300 focus:border-purple-500 rounded-2xl bg-white/80 backdrop-blur-sm shadow-lg transition-all text-lg resize-none"
            />

            {errors.secondPartyNotes && (
              <div className="flex items-center gap-2 p-3 bg-gradient-to-r from-red-50 to-pink-50 rounded-xl border border-red-200">
                <AlertTriangle className="w-4 h-4 text-red-500" />
                <p className="text-sm text-red-600 font-medium">
                  {errors.secondPartyNotes.message}
                </p>
              </div>
            )}
          </div>
        </EnhancedSection>
      </div>

      {/* Internal Notes */}
      <EnhancedSection
        icon={MessageCircle}
        title="הערות פנימיות"
        description="הערות והנחיות לשימוש צוות השדכנים בלבד"
        gradient="from-amber-500 to-orange-500"
      >
        <div className="space-y-4">
          <div className="flex items-center gap-3 p-4 bg-gradient-to-r from-amber-50 to-orange-50 rounded-2xl border border-amber-100">
            <div className="p-3 rounded-full bg-gradient-to-r from-amber-500 to-orange-500 text-white shadow-lg">
              <Eye className="w-5 h-5" />
            </div>
            <div>
              <div className="font-bold text-amber-800">מידע סודי</div>
              <div className="text-sm text-amber-600">
                נראה רק לצוות השדכנים
              </div>
            </div>
          </div>

          <Textarea
            id="internalNotes"
            {...register('internalNotes')}
            placeholder="הערות והנחיות לשימוש פנימי בלבד..."
            className="min-h-[120px] border-2 border-amber-200 hover:border-amber-300 focus:border-amber-500 rounded-2xl bg-white/80 backdrop-blur-sm shadow-lg transition-all text-lg resize-none"
          />

          {errors.internalNotes && (
            <div className="flex items-center gap-2 p-3 bg-gradient-to-r from-red-50 to-pink-50 rounded-xl border border-red-200">
              <AlertTriangle className="w-4 h-4 text-red-500" />
              <p className="text-sm text-red-600 font-medium">
                {errors.internalNotes.message}
              </p>
            </div>
          )}
        </div>
      </EnhancedSection>

      {/* Decision Deadline */}
      <EnhancedSection
        icon={Clock}
        title="תאריך יעד להחלטה"
        description="קבע את המועד האחרון למתן תגובה מהצדדים"
        gradient="from-indigo-500 to-purple-500"
      >
        <div className="space-y-4">
          <Label className="text-lg font-semibold text-gray-700">
            בחר תקופת זמן למענה
          </Label>

          <Select
            onValueChange={(value) => {
              const days = parseInt(value, 10);
              const deadline = new Date();
              deadline.setDate(deadline.getDate() + days);
              setValue('decisionDeadline', deadline, { shouldValidate: true });
            }}
            defaultValue="14"
          >
            <SelectTrigger className="h-14 border-2 border-indigo-200 hover:border-indigo-300 focus:border-indigo-500 rounded-2xl bg-white/80 backdrop-blur-sm shadow-lg transition-all text-lg">
              <SelectValue />
            </SelectTrigger>
            <SelectContent className="border-0 shadow-2xl rounded-2xl bg-white/95 backdrop-blur-sm">
              <SelectItem value="3">
                <div className="flex items-center gap-3 py-2">
                  <Zap className="w-5 h-5 text-red-500" />
                  <div>
                    <div className="font-bold text-red-600">3 ימים</div>
                    <div className="text-xs text-red-500">מהיר וזריז</div>
                  </div>
                </div>
              </SelectItem>
              <SelectItem value="7">
                <div className="flex items-center gap-3 py-2">
                  <Award className="w-5 h-5 text-orange-500" />
                  <div>
                    <div className="font-bold text-orange-600">7 ימים</div>
                    <div className="text-xs text-orange-500">תקופה קצרה</div>
                  </div>
                </div>
              </SelectItem>
              <SelectItem value="14">
                <div className="flex items-center gap-3 py-2">
                  <Target className="w-5 h-5 text-blue-500" />
                  <div>
                    <div className="font-bold text-blue-600">14 ימים</div>
                    <div className="text-xs text-blue-500">
                      תקופה סטנדרטית (מומלץ)
                    </div>
                  </div>
                </div>
              </SelectItem>
              <SelectItem value="30">
                <div className="flex items-center gap-3 py-2">
                  <Shield className="w-5 h-5 text-green-500" />
                  <div>
                    <div className="font-bold text-green-600">30 ימים</div>
                    <div className="text-xs text-green-500">תקופה מורחבת</div>
                  </div>
                </div>
              </SelectItem>
            </SelectContent>
          </Select>

          {errors.decisionDeadline && (
            <div className="flex items-center gap-2 p-3 bg-gradient-to-r from-red-50 to-pink-50 rounded-xl border border-red-200">
              <AlertTriangle className="w-4 h-4 text-red-500" />
              <p className="text-sm text-red-600 font-medium">
                {errors.decisionDeadline.message}
              </p>
            </div>
          )}

          <div className="p-4 bg-gradient-to-r from-indigo-50 to-purple-50 rounded-2xl border border-indigo-100">
            <div className="flex items-start gap-3">
              <Calendar className="w-5 h-5 text-indigo-500 mt-1" />
              <div>
                <div className="font-bold text-indigo-800 mb-1">מידע חשוב</div>
                <p className="text-sm text-indigo-700 leading-relaxed">
                  לאחר תקופת הזמן שנבחרה, אם לא התקבלה תגובה מאחד הצדדים, ההצעה
                  תועבר אוטומטית לסטטוס "פג תוקף".
                </p>
              </div>
            </div>
          </div>
        </div>
      </EnhancedSection>

      {/* Summary Card */}
      <Card className="border-0 shadow-2xl bg-gradient-to-br from-gray-50 via-white to-gray-50 rounded-3xl overflow-hidden">
        <CardContent className="p-8">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-4">
              <div className="p-4 rounded-2xl bg-gradient-to-r from-gray-500 to-slate-500 text-white shadow-xl">
                <Users className="w-8 h-8" />
              </div>
              <div>
                <h3 className="text-2xl font-bold text-gray-800">
                  סיכום ההצעה
                </h3>
                <p className="text-gray-600 leading-relaxed">
                  כל הפרטים מוכנים ליצירת ההצעה
                </p>
              </div>
            </div>

            <div className="text-center">
              <div className="flex items-center gap-2 mb-2">
                <Gift className="w-5 h-5 text-purple-500" />
                <span className="font-bold text-purple-600">מוכן ליצירה!</span>
              </div>
              <p className="text-sm text-gray-500">
                לאחר יצירת ההצעה, היא תישלח אוטומטי לצד הראשון
              </p>
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  );
};

export default SuggestionDetails;
--- End of Content for SuggestionDetails.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\app\components\matchmaker\suggestions\NewSuggestionForm\index.tsx
--------------------------------------------------------------------------------
Content:
// src/app/components/matchmaker/suggestions/NewSuggestionForm/index.tsx

'use client';
import React, { useState, useEffect } from 'react';
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription,
  DialogFooter,
  DialogClose,
} from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';
import { toast } from 'sonner';
import { useForm, FormProvider } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { Priority, MatchSuggestionStatus } from '@prisma/client';
import { Separator } from '@/components/ui/separator';
import {
  UserPlus,
  Sparkles,
  Loader2,
  BarChart2,
  CheckCircle,
  Users,
  Heart,
  Crown,
  Zap,
  Star,
  Award,
  Gem,
  Target,
  ArrowRight,
  ArrowLeft,
  Eye,
  X,
  Wand2,
  Gift,
} from 'lucide-react';

// Types
import type { Candidate } from '../../new/types/candidates';
import { newSuggestionSchema, type NewSuggestionFormData } from './schema';

// Components
import SuggestionDetails from './SuggestionDetails';
import MatchPreview from './MatchPreview';
import CandidateSelector from './CandidateSelector';
import { AiMatchAnalysisDialog } from '../../new/dialogs/AiMatchAnalysisDialog';
import { cn } from '@/lib/utils';

interface NewSuggestionFormProps {
  isOpen: boolean;
  onClose: () => void;
  candidates: Candidate[];
  selectedCandidate?: Candidate | null;
  onSubmit: (data: NewSuggestionFormData) => Promise<void>;
}

const StepIndicator: React.FC<{
  currentStep: number;
  totalSteps: number;
  steps: Array<{ label: string; icon: React.ElementType; description: string }>;
}> = ({ currentStep, totalSteps, steps }) => (
  <div className="flex items-center justify-center mb-8">
    <div className="flex items-center gap-4">
      {steps.map((step, index) => {
        const isActive = index === currentStep;
        const isCompleted = index < currentStep;
        const StepIcon = step.icon;

        return (
          <React.Fragment key={index}>
            <div className="flex flex-col items-center">
              <div
                className={cn(
                  'flex items-center justify-center w-16 h-16 rounded-full transition-all duration-500 shadow-lg',
                  isActive &&
                    'bg-gradient-to-r from-purple-600 to-pink-600 text-white scale-110 shadow-2xl',
                  isCompleted &&
                    'bg-gradient-to-r from-green-500 to-emerald-500 text-white shadow-xl',
                  !isActive &&
                    !isCompleted &&
                    'bg-gray-100 text-gray-400 shadow-md'
                )}
              >
                <StepIcon className="w-8 h-8" />
              </div>
              <div className="mt-3 text-center">
                <div
                  className={cn(
                    'text-sm font-bold transition-colors',
                    isActive && 'text-purple-600',
                    isCompleted && 'text-green-600',
                    !isActive && !isCompleted && 'text-gray-400'
                  )}
                >
                  {step.label}
                </div>
                <div className="text-xs text-gray-500 mt-1 max-w-[120px]">
                  {step.description}
                </div>
              </div>
            </div>

            {index < totalSteps - 1 && (
              <div
                className={cn(
                  'w-16 h-1 rounded-full transition-all duration-500 mt-2',
                  index < currentStep
                    ? 'bg-gradient-to-r from-green-500 to-emerald-500'
                    : 'bg-gray-200'
                )}
              />
            )}
          </React.Fragment>
        );
      })}
    </div>
  </div>
);

const NewSuggestionForm: React.FC<NewSuggestionFormProps> = ({
  isOpen,
  onClose,
  candidates,
  selectedCandidate,
  onSubmit,
}) => {
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [firstParty, setFirstParty] = useState<Candidate | null>(null);
  const [secondParty, setSecondParty] = useState<Candidate | null>(null);
  const [showAnalysisDialog, setShowAnalysisDialog] = useState(false);
  const [currentStep, setCurrentStep] = useState(0);

  const steps = [
    {
      label: 'בחירת מועמדים',
      icon: Users,
      description: 'בחר את שני הצדדים להצעה',
    },
    {
      label: 'ניתוח התאמה',
      icon: BarChart2,
      description: 'בדוק את רמת ההתאמה',
    },
    {
      label: 'פרטי ההצעה',
      icon: Heart,
      description: 'הוסף נימוקים ופרטים',
    },
  ];

  const form = useForm<NewSuggestionFormData>({
    resolver: zodResolver(newSuggestionSchema),
    defaultValues: {
      priority: Priority.MEDIUM,
      status: MatchSuggestionStatus.DRAFT,
      decisionDeadline: new Date(new Date().setDate(new Date().getDate() + 14)),
    },
  });

  // Reset form and state when dialog opens or selectedCandidate changes
  useEffect(() => {
    if (isOpen) {
      form.reset({
        priority: Priority.MEDIUM,
        status: MatchSuggestionStatus.DRAFT,
        decisionDeadline: new Date(
          new Date().setDate(new Date().getDate() + 14)
        ),
        firstPartyId: selectedCandidate?.id || '',
        secondPartyId: '',
      });
      setFirstParty(selectedCandidate || null);
      setSecondParty(null);
      setCurrentStep(0);
    }
  }, [isOpen, selectedCandidate, form]);

  const handleCandidateSelect =
    (type: 'first' | 'second') => (candidate: Candidate | null) => {
      const setter = type === 'first' ? setFirstParty : setSecondParty;
      const fieldName = type === 'first' ? 'firstPartyId' : 'secondPartyId';
      setter(candidate);
      form.setValue(fieldName, candidate?.id || '', {
        shouldValidate: true,
        shouldDirty: true,
      });
    };

  const handleNext = () => {
    if (currentStep === 0 && (!firstParty || !secondParty)) {
      toast.error('יש לבחור את שני הצדדים להצעה.');
      return;
    }
    setCurrentStep((prev) => Math.min(prev + 1, steps.length - 1));
  };

  const handlePrevious = () => {
    setCurrentStep((prev) => Math.max(prev - 1, 0));
  };

  const handleSubmit = form.handleSubmit(async (data) => {
    if (!firstParty || !secondParty) {
      toast.error('יש לבחור את שני הצדדים להצעה.');
      return;
    }

    setIsSubmitting(true);
    try {
      await onSubmit(data);
      toast.success('ההצעה נוצרה בהצלחה!', {
        description: 'ההצעה נשלחה אוטומטית לצד הראשון',
        duration: 5000,
      });
      onClose();
    } catch (error) {
      toast.error(
        'שגיאה ביצירת ההצעה: ' +
          (error instanceof Error ? error.message : 'שגיאה לא ידועה')
      );
    } finally {
      setIsSubmitting(false);
    }
  });

  const maleCandidates = candidates.filter((c) => c.profile.gender === 'MALE');
  const femaleCandidates = candidates.filter(
    (c) => c.profile.gender === 'FEMALE'
  );

  const canProceedToNextStep = () => {
    switch (currentStep) {
      case 0:
        return firstParty && secondParty;
      case 1:
        return firstParty && secondParty;
      case 2:
        return true;
      default:
        return false;
    }
  };

  const renderStepContent = () => {
    switch (currentStep) {
      case 0:
        return (
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
            <CandidateSelector
              label="צד א' (גבר)"
              value={firstParty}
              onChange={handleCandidateSelect('first')}
              candidates={maleCandidates}
              otherParty={secondParty}
              fieldName="firstPartyId"
              error={form.formState.errors.firstPartyId?.message}
            />

            <CandidateSelector
              label="צד ב' (אישה)"
              value={secondParty}
              onChange={handleCandidateSelect('second')}
              candidates={femaleCandidates}
              otherParty={firstParty}
              fieldName="secondPartyId"
              error={form.formState.errors.secondPartyId?.message}
            />
          </div>
        );

      case 1:
        if (!firstParty || !secondParty) {
          return (
            <div className="flex items-center justify-center h-64">
              <div className="text-center text-gray-500">
                <Users className="mx-auto h-16 w-16 text-gray-300 mb-4" />
                <p className="text-lg font-medium">
                  יש לבחור תחילה את שני המועמדים
                </p>
              </div>
            </div>
          );
        }

        return (
          <div className="space-y-8">
            <MatchPreview firstParty={firstParty} secondParty={secondParty} />

            <div className="flex justify-center">
              <Button
                type="button"
                variant="outline"
                onClick={() => setShowAnalysisDialog(true)}
                className="bg-gradient-to-r from-indigo-50 to-purple-50 border-2 border-indigo-200 text-indigo-700 hover:bg-gradient-to-r hover:from-indigo-100 hover:to-purple-100 hover:border-indigo-300 rounded-2xl px-8 py-4 font-bold text-lg shadow-lg hover:shadow-xl transition-all duration-300"
              >
                <BarChart2 className="w-6 h-6 ml-3" />
                ניתוח התאמה מלא (AI)
                <Sparkles className="w-5 h-5 mr-2 text-purple-500" />
              </Button>
            </div>
          </div>
        );

      case 2:
        if (!firstParty || !secondParty) {
          return (
            <div className="flex items-center justify-center h-64">
              <div className="text-center text-gray-500">
                <Users className="mx-auto h-16 w-16 text-gray-300 mb-4" />
                <p className="text-lg font-medium">
                  יש לבחור תחילה את שני המועמדים
                </p>
              </div>
            </div>
          );
        }

        return (
          <SuggestionDetails
            firstParty={firstParty}
            secondParty={secondParty}
          />
        );

      default:
        return null;
    }
  };

  return (
    <>
      <Dialog open={isOpen} onOpenChange={onClose}>
        <DialogContent
          className="max-w-7xl w-full min-h-[90vh] flex flex-col p-0 border-0 shadow-2xl rounded-3xl overflow-hidden bg-gradient-to-br from-white via-purple-50/20 to-pink-50/20"
          dir="rtl"
        >
          {/* Enhanced Header */}
          <div className="relative bg-gradient-to-r from-purple-50 via-cyan-50/30 to-emerald-50/20 border-b border-purple-100/50 p-8 flex-shrink-0">
            {/* Background decoration */}
            <div className="absolute inset-0">
              <div className="absolute top-0 right-0 w-64 h-64 bg-gradient-to-br from-purple-200/30 to-pink-200/30 rounded-full blur-3xl"></div>
              <div className="absolute bottom-0 left-0 w-48 h-48 bg-gradient-to-br from-cyan-200/30 to-blue-200/30 rounded-full blur-2xl"></div>
            </div>

            <div className="relative z-10">
              <DialogHeader className="text-center mb-8">
                <div className="flex items-center justify-between mb-6">
                  <div className="flex items-center gap-4">
                    <div className="p-4 rounded-2xl bg-gradient-to-r from-purple-500 to-pink-500 text-white shadow-xl">
                      <UserPlus className="w-10 h-10" />
                    </div>
                    <div className="text-right">
                      <DialogTitle className="text-3xl font-bold bg-gradient-to-r from-purple-600 via-pink-600 to-blue-600 bg-clip-text text-transparent">
                        יצירת הצעת שידוך חדשה
                      </DialogTitle>
                      <DialogDescription className="text-lg text-gray-600 mt-2">
                        בחר שני מועמדים, נתח את ההתאמה והגדר את פרטי ההצעה
                      </DialogDescription>
                    </div>
                  </div>

                  <Button
                    variant="ghost"
                    size="icon"
                    onClick={onClose}
                    className="rounded-full h-12 w-12 text-gray-500 hover:text-gray-700 hover:bg-white/50 backdrop-blur-sm"
                  >
                    <X className="w-6 h-6" />
                  </Button>
                </div>

                <StepIndicator
                  currentStep={currentStep}
                  totalSteps={steps.length}
                  steps={steps}
                />
              </DialogHeader>
            </div>
          </div>

          {/* Content Area */}
          <div className="flex-1 overflow-y-auto p-8">
            <FormProvider {...form}>
              <form onSubmit={handleSubmit} className="h-full">
                <div className="animate-fade-in-up">{renderStepContent()}</div>
              </form>
            </FormProvider>
          </div>

          {/* Enhanced Footer */}
          <div className="border-t border-purple-100 bg-gradient-to-r from-gray-50 to-slate-50 p-6 flex-shrink-0">
            <div className="flex items-center justify-between">
              <div className="flex items-center gap-4">
                {currentStep > 0 && (
                  <Button
                    type="button"
                    variant="outline"
                    onClick={handlePrevious}
                    className="px-6 py-3 border-2 border-gray-300 hover:bg-gray-50 rounded-xl transition-all duration-300 font-bold"
                  >
                    <ArrowRight className="w-5 h-5 ml-2" />
                    חזור
                  </Button>
                )}

                {currentStep < steps.length - 1 ? (
                  <Button
                    type="button"
                    onClick={handleNext}
                    disabled={!canProceedToNextStep()}
                    className="px-8 py-3 bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-700 hover:to-pink-700 text-white shadow-xl hover:shadow-2xl transition-all duration-300 rounded-xl font-bold disabled:opacity-50 disabled:cursor-not-allowed"
                  >
                    המשך
                    <ArrowLeft className="w-5 h-5 mr-2" />
                  </Button>
                ) : (
                  <Button
                    type="submit"
                    onClick={handleSubmit}
                    disabled={isSubmitting || !firstParty || !secondParty}
                    className="px-8 py-3 bg-gradient-to-r from-emerald-600 via-green-600 to-emerald-600 hover:from-emerald-700 hover:via-green-700 hover:to-emerald-700 text-white shadow-xl hover:shadow-2xl transition-all duration-300 rounded-xl font-bold disabled:opacity-50 disabled:cursor-not-allowed"
                  >
                    {isSubmitting ? (
                      <>
                        <Loader2 className="w-5 h-5 ml-2 animate-spin" />
                        יוצר הצעה...
                      </>
                    ) : (
                      <>
                        <Gift className="w-5 h-5 ml-2" />
                        צור הצעה
                        <Sparkles className="w-4 h-4 mr-2" />
                      </>
                    )}
                  </Button>
                )}
              </div>

              <div className="text-sm text-gray-500 space-y-1">
                <div className="flex items-center gap-2">
                  <Crown className="w-4 h-4 text-purple-500" />
                  <span>
                    שלב {currentStep + 1} מתוך {steps.length}
                  </span>
                </div>
                <p className="text-xs">
                  לאחר יצירת ההצעה, היא תופיע בסטטוס טיוטה.
                </p>
              </div>
            </div>
          </div>
        </DialogContent>
      </Dialog>

      {firstParty && secondParty && (
        <AiMatchAnalysisDialog
          isOpen={showAnalysisDialog}
          onClose={() => setShowAnalysisDialog(false)}
          targetCandidate={firstParty}
          comparisonCandidates={[secondParty]}
        />
      )}
    </>
  );
};

export default NewSuggestionForm;
--- End of Content for index.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\app\components\matchmaker\suggestions\NewSuggestionForm\schema.ts
--------------------------------------------------------------------------------
Content:
import { z } from "zod";
import { addDays, isBefore } from 'date-fns';

// Validation rules

const MIN_DECISION_DAYS = 1;
const MAX_DECISION_DAYS = 30;

// Helper function to validate dates
const isValidDeadlineDate = (date: Date | null | undefined, minDays: number, maxDays: number) => {
  if (!date) return false;
  
  const today = new Date();
  const minDate = addDays(today, minDays);
  const maxDate = addDays(today, maxDays);
  
  return !isBefore(date, minDate) && !isBefore(maxDate, date);
};

// Schema for new suggestion
export const newSuggestionSchema = z.object({
  firstPartyId: z.string({
    required_error: "יש לבחור מועמד/ת ראשון/ה",
  }),
  
  secondPartyId: z.string({
    required_error: "יש לבחור מועמד/ת שני/ה",
  }),
  
  priority: z.enum(['LOW', 'MEDIUM', 'HIGH', 'URGENT'] as const, {
    required_error: "יש לבחור רמת עדיפות",
  }),

  status: z.enum([
    'DRAFT',
    'PENDING_FIRST_PARTY',
    'FIRST_PARTY_APPROVED',
    'FIRST_PARTY_DECLINED',
    'PENDING_SECOND_PARTY',
    'SECOND_PARTY_APPROVED',
    'SECOND_PARTY_DECLINED',
    'AWAITING_MATCHMAKER_APPROVAL',
    'CONTACT_DETAILS_SHARED',
    'AWAITING_FIRST_DATE_FEEDBACK',
    'THINKING_AFTER_DATE',
    'PROCEEDING_TO_SECOND_DATE',
    'ENDED_AFTER_FIRST_DATE',
    'MEETING_PENDING',
    'MEETING_SCHEDULED',
    'MATCH_APPROVED',
    'MATCH_DECLINED',
    'DATING',
    'ENGAGED',
    'MARRIED',
    'EXPIRED',
    'CLOSED',
    'CANCELLED'
  ] as const, {
    required_error: "יש לבחור סטטוס",
  }).default('DRAFT'),

  matchingReason: z.string()
    .max(500, "סיבת ההתאמה לא יכולה להכיל יותר מ-500 תווים")
    .optional(),

  internalNotes: z.string()
    .max(1000, "ההערות הפנימיות לא יכולות להכיל יותר מ-1000 תווים")
    .optional(),

  firstPartyNotes: z.string()
    .max(500, "ההערות לצד א' לא יכולות להכיל יותר מ-500 תווים")
    .optional(),

  secondPartyNotes: z.string()
    .max(500, "ההערות לצד ב' לא יכולות להכיל יותר מ-500 תווים")
    .optional(),


  decisionDeadline: z.date({
    required_error: "יש לבחור תאריך יעד להחלטה ",
  })
}).refine(
  (data) => data.firstPartyId !== data.secondPartyId,
  {
    message: "לא ניתן ליצור הצעה עבור אותו מועמד",
    path: ["secondPartyId"]
  }

).refine(
  (data) => isValidDeadlineDate(data.decisionDeadline, MIN_DECISION_DAYS, MAX_DECISION_DAYS),
  {
    message: `תאריך היעד להחלטה סופית חייב להיות בין ${MIN_DECISION_DAYS} ל-${MAX_DECISION_DAYS} ימים מהיום`,
    path: ["decisionDeadline"]
  }
);

export type NewSuggestionFormData = z.infer<typeof newSuggestionSchema>;

// Status mapping for display
export const suggestionStatusMap = {
  DRAFT: "טיוטה",
  PENDING_FIRST_PARTY: "ממתין לתשובת צד א'",
  FIRST_PARTY_APPROVED: "צד א' אישר",
  FIRST_PARTY_DECLINED: "צד א' דחה",
  PENDING_SECOND_PARTY: "ממתין לתשובת צד ב'",
  SECOND_PARTY_APPROVED: "צד ב' אישר",
  SECOND_PARTY_DECLINED: "צד ב' דחה",
  AWAITING_MATCHMAKER_APPROVAL: "ממתין לאישור שדכן",
  CONTACT_DETAILS_SHARED: "פרטי קשר הועברו",
  AWAITING_FIRST_DATE_FEEDBACK: "ממתין למשוב פגישה ראשונה",
  THINKING_AFTER_DATE: "בשלב מחשבה אחרי פגישה",
  PROCEEDING_TO_SECOND_DATE: "ממשיכים לפגישה שנייה",
  ENDED_AFTER_FIRST_DATE: "הסתיים אחרי פגישה ראשונה",
  MEETING_PENDING: "ממתין לקביעת פגישה",
  MEETING_SCHEDULED: "פגישה נקבעה",
  MATCH_APPROVED: "ההצעה אושרה",
  MATCH_DECLINED: "ההצעה נדחתה",
  DATING: "בתהליך היכרות",
  ENGAGED: "מאורסים",
  MARRIED: "נישאו",
  EXPIRED: "פג תוקף",
  CLOSED: "ההצעה נסגרה",
  CANCELLED: "ההצעה בוטלה"
} as const;

// Priority mapping for display
export const priorityMap = {
  LOW: { label: "נמוכה", color: "text-gray-500" },
  MEDIUM: { label: "רגילה", color: "text-blue-500" },
  HIGH: { label: "גבוהה", color: "text-yellow-500" },
  URGENT: { label: "דחופה", color: "text-red-500" }
} as const;
--- End of Content for schema.ts ---

--- End of Content for NewSuggestionForm_contents.txt ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\suggestions\NewSuggestionForm\SuggestionDetails.tsx
--------------------------------------------------------------------------------
Content:
// src/app/components/matchmaker/suggestions/NewSuggestionForm/SuggestionDetails.tsx

'use client';
import React, { useState } from 'react';
import { useFormContext } from 'react-hook-form';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select';
import { Card, CardContent } from '@/components/ui/card';
import { Priority } from '@prisma/client';
import { Label } from '@/components/ui/label';
import { Button } from '@/components/ui/button';
import { Textarea } from '@/components/ui/textarea';
import { toast } from 'sonner';
import {
  Loader2,
  Sparkles,
  AlertTriangle,
  Star,
  Flame,
  Target,
  Shield,
  Heart,
  MessageCircle,
  User,
  Calendar,
  Zap,
  Crown,
  Award,
  Gift,
  Clock,
  Wand2,
  Brain,
  Eye,
  Users,
} from 'lucide-react';
import { Alert, AlertDescription } from '@/components/ui/alert';
import type { NewSuggestionFormData } from './schema';
import type { Candidate } from '../../new/types/candidates';
import { cn } from '@/lib/utils';
import type { MatchmakerPageDictionary } from '@/types/dictionary';

interface SuggestionDetailsProps {
  dict: MatchmakerPageDictionary['newSuggestionForm']['suggestionDetails'];
  firstParty: Candidate;
  secondParty: Candidate;
}

const EnhancedSection: React.FC<{
  icon: React.ElementType;
  title: string;
  description?: string;
  gradient: string;
  children: React.ReactNode;
  className?: string;
}> = ({ icon: Icon, title, description, gradient, children, className }) => (
  <Card
    className={cn(
      'border-0 shadow-xl hover:shadow-2xl transition-all duration-500 group overflow-hidden rounded-3xl',
      'bg-gradient-to-br from-white via-gray-50/30 to-white',
      className
    )}
  >
    <div className="absolute inset-0">
      <div className="absolute top-0 right-0 w-32 h-32 bg-gradient-to-br from-purple-200/20 to-pink-200/20 rounded-full blur-2xl opacity-0 group-hover:opacity-100 transition-opacity duration-700"></div>
      <div className="absolute bottom-0 left-0 w-24 h-24 bg-gradient-to-br from-cyan-200/20 to-blue-200/20 rounded-full blur-xl opacity-0 group-hover:opacity-100 transition-opacity duration-900"></div>
    </div>
    <CardContent className="relative z-10 p-8 space-y-6">
      <div className="flex items-center gap-4 mb-6">
        <div
          className={cn(
            'p-4 rounded-2xl shadow-xl group-hover:scale-110 transition-transform duration-300 bg-gradient-to-r text-white',
            gradient
          )}
        >
          <Icon className="w-8 h-8" />
        </div>
        <div className="flex-1">
          <h3
            className="text-2xl font-bold text-gray-800 group-hover:text-transparent group-hover:bg-gradient-to-r group-hover:bg-clip-text transition-all duration-300"
            style={{
              backgroundImage: `linear-gradient(to right, ${gradient.replace('from-', '').replace('to-', ', ')})`,
            }}
          >
            {title}
          </h3>
          {description && (
            <p className="text-gray-600 mt-1 leading-relaxed">{description}</p>
          )}
        </div>
      </div>
      {children}
    </CardContent>
  </Card>
);

const PriorityBadge: React.FC<{
  priority: Priority;
  dict: MatchmakerPageDictionary['newSuggestionForm']['suggestionDetails']['priority'];
}> = ({ priority, dict }) => {
  const getPriorityInfo = (p: Priority) => {
    switch (p) {
      case Priority.URGENT:
        return {
          label: dict.options.URGENT.title,
          icon: Flame,
          className:
            'bg-gradient-to-r from-red-500 to-pink-500 text-white animate-pulse shadow-xl',
        };
      case Priority.HIGH:
        return {
          label: dict.options.HIGH.title,
          icon: Star,
          className:
            'bg-gradient-to-r from-orange-500 to-amber-500 text-white shadow-xl',
        };
      case Priority.MEDIUM:
        return {
          label: dict.options.MEDIUM.title,
          icon: Target,
          className:
            'bg-gradient-to-r from-blue-500 to-cyan-500 text-white shadow-xl',
        };
      case Priority.LOW:
        return {
          label: dict.options.LOW.title,
          icon: Shield,
          className:
            'bg-gradient-to-r from-gray-500 to-slate-500 text-white shadow-xl',
        };
      default:
        return {
          label: dict.options.MEDIUM.title,
          icon: Target,
          className:
            'bg-gradient-to-r from-blue-500 to-cyan-500 text-white shadow-xl',
        };
    }
  };

  const info = getPriorityInfo(priority);
  const IconComponent = info.icon;

  return (
    <div
      className={cn(
        'flex items-center gap-2 px-4 py-2 rounded-xl font-bold',
        info.className
      )}
    >
      <IconComponent className="w-4 h-4" />
      <span>{info.label}</span>
    </div>
  );
};

const SuggestionDetails: React.FC<SuggestionDetailsProps> = ({
  dict,
  firstParty,
  secondParty,
}) => {
  const {
    register,
    formState: { errors },
    setValue,
    watch,
  } = useFormContext<NewSuggestionFormData>();
  const [isGeneratingRationale, setIsGeneratingRationale] = useState(false);
  const priority = watch('priority', Priority.MEDIUM);

  const handleGenerateRationale = async () => {
    setIsGeneratingRationale(true);
    toast.info(dict.toasts.aiLoading.title, {
      description: dict.toasts.aiLoading.description,
      duration: 3000,
    });
    try {
      const response = await fetch('/api/ai/generate-suggestion-rationale', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          userId1: firstParty.id,
          userId2: secondParty.id,
        }),
      });
      const data = await response.json();
      if (!response.ok || !data.success || !data.rationales) {
        throw new Error(data.error || 'Error generating rationale');
      }
      const { generalRationale, rationaleForParty1, rationaleForParty2 } =
        data.rationales;
      setValue('matchingReason', generalRationale, {
        shouldValidate: true,
        shouldDirty: true,
      });
      setValue('firstPartyNotes', rationaleForParty1, {
        shouldValidate: true,
        shouldDirty: true,
      });
      setValue('secondPartyNotes', rationaleForParty2, {
        shouldValidate: true,
        shouldDirty: true,
      });
      toast.success(dict.toasts.aiSuccess.title, {
        description: dict.toasts.aiSuccess.description,
        duration: 5000,
      });
    } catch (error) {
      console.error('Failed to generate rationales:', error);
      toast.error(dict.toasts.aiError.title, {
        description: dict.toasts.aiError.description,
      });
    } finally {
      setIsGeneratingRationale(false);
    }
  };

  return (
    <div className="space-y-8">
      <EnhancedSection
        icon={Crown}
        title={dict.priority.title}
        description={dict.priority.description}
        gradient="from-purple-500 to-pink-500"
      >
        <div className="space-y-4">
          <div className="flex items-center justify-between">
            <Label className="text-lg font-semibold text-gray-700">
              {dict.priority.label}
            </Label>
            <PriorityBadge priority={priority} dict={dict.priority} />
          </div>
          <Select
            onValueChange={(value: Priority) =>
              setValue('priority', value, { shouldValidate: true })
            }
            defaultValue={priority}
            name="priority"
          >
            <SelectTrigger className="h-14 border-2 border-purple-200 hover:border-purple-300 focus:border-purple-500 rounded-2xl bg-white/80 backdrop-blur-sm shadow-lg transition-all text-lg">
              <SelectValue placeholder={dict.priority.placeholder} />
            </SelectTrigger>
            <SelectContent className="border-0 shadow-2xl rounded-2xl bg-white/95 backdrop-blur-sm">
              <SelectItem value={Priority.URGENT}>
                <div className="flex items-center gap-3 py-2">
                  <Flame className="w-5 h-5 text-red-500" />
                  <div>
                    <div className="font-bold text-red-600">
                      {dict.priority.options.URGENT.title}
                    </div>
                    <div className="text-xs text-red-500">
                      {dict.priority.options.URGENT.description}
                    </div>
                  </div>
                </div>
              </SelectItem>
              <SelectItem value={Priority.HIGH}>
                <div className="flex items-center gap-3 py-2">
                  <Star className="w-5 h-5 text-orange-500" />
                  <div>
                    <div className="font-bold text-orange-600">
                      {dict.priority.options.HIGH.title}
                    </div>
                    <div className="text-xs text-orange-500">
                      {dict.priority.options.HIGH.description}
                    </div>
                  </div>
                </div>
              </SelectItem>
              <SelectItem value={Priority.MEDIUM}>
                <div className="flex items-center gap-3 py-2">
                  <Target className="w-5 h-5 text-blue-500" />
                  <div>
                    <div className="font-bold text-blue-600">
                      {dict.priority.options.MEDIUM.title}
                    </div>
                    <div className="text-xs text-blue-500">
                      {dict.priority.options.MEDIUM.description}
                    </div>
                  </div>
                </div>
              </SelectItem>
              <SelectItem value={Priority.LOW}>
                <div className="flex items-center gap-3 py-2">
                  <Shield className="w-5 h-5 text-gray-500" />
                  <div>
                    <div className="font-bold text-gray-600">
                      {dict.priority.options.LOW.title}
                    </div>
                    <div className="text-xs text-gray-500">
                      {dict.priority.options.LOW.description}
                    </div>
                  </div>
                </div>
              </SelectItem>
            </SelectContent>
          </Select>
          {errors.priority && (
            <div className="flex items-center gap-2 p-3 bg-gradient-to-r from-red-50 to-pink-50 rounded-xl border border-red-200">
              <AlertTriangle className="w-4 h-4 text-red-500" />
              <p className="text-sm text-red-600 font-medium">
                {errors.priority.message}
              </p>
            </div>
          )}
        </div>
      </EnhancedSection>

      <EnhancedSection
        icon={Brain}
        title={dict.rationale.title}
        description={dict.rationale.description}
        gradient="from-emerald-500 to-green-500"
      >
        <div className="space-y-6">
          <div className="flex items-center justify-between">
            <Label className="text-lg font-semibold text-gray-700">
              {dict.rationale.label}
            </Label>
            <Button
              type="button"
              onClick={handleGenerateRationale}
              disabled={isGeneratingRationale}
              className="bg-gradient-to-r from-purple-600 via-pink-600 to-blue-600 hover:from-purple-700 hover:via-pink-700 hover:to-blue-700 text-white shadow-xl hover:shadow-2xl transition-all duration-300 rounded-2xl px-6 py-3 font-bold"
            >
              {isGeneratingRationale ? (
                <>
                  <Loader2 className="w-5 h-5 ml-2 animate-spin" />
                  <span>{dict.rationale.aiButtonLoading}</span>
                </>
              ) : (
                <>
                  <Wand2 className="w-5 h-5 ml-2 text-yellow-300" />
                  <span>{dict.rationale.aiButton}</span>
                </>
              )}
            </Button>
          </div>
          <Textarea
            id="matchingReason"
            {...register('matchingReason')}
            placeholder={dict.rationale.placeholder}
            className="min-h-[140px] border-2 border-emerald-200 hover:border-emerald-300 focus:border-emerald-500 rounded-2xl bg-white/80 backdrop-blur-sm shadow-lg transition-all text-lg resize-none"
          />
          {errors.matchingReason && (
            <div className="flex items-center gap-2 p-3 bg-gradient-to-r from-red-50 to-pink-50 rounded-xl border border-red-200">
              <AlertTriangle className="w-4 h-4 text-red-500" />
              <p className="text-sm text-red-600 font-medium">
                {errors.matchingReason.message}
              </p>
            </div>
          )}
          <Alert className="border-0 bg-gradient-to-r from-blue-50 to-cyan-50 shadow-lg rounded-2xl">
            <Sparkles className="h-5 w-5 text-blue-500" />
            <AlertDescription
              className="text-blue-800 font-medium leading-relaxed"
              dangerouslySetInnerHTML={{ __html: dict.rationale.aiTip }}
            />
          </Alert>
        </div>
      </EnhancedSection>

      <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
        <EnhancedSection
          icon={User}
          title={dict.notes.party1Title.replace(
            '{{name}}',
            firstParty.firstName
          )}
          description={dict.notes.description}
          gradient="from-blue-500 to-cyan-500"
          className="lg:col-span-1"
        >
          <div className="space-y-4">
            <div className="flex items-center gap-3 p-4 bg-gradient-to-r from-blue-50 to-cyan-50 rounded-2xl border border-blue-100">
              <div className="w-12 h-12 rounded-full bg-gradient-to-r from-blue-500 to-cyan-500 flex items-center justify-center text-white font-bold shadow-lg">
                {firstParty.firstName[0]}
              </div>
              <div>
                <div className="font-bold text-blue-800">
                  {firstParty.firstName} {firstParty.lastName}
                </div>
                <div className="text-sm text-blue-600">
                  {dict.notes.party1Label}
                </div>
              </div>
            </div>
            <Textarea
              id="firstPartyNotes"
              {...register('firstPartyNotes')}
              placeholder={dict.notes.party1Placeholder
                .replace('{{otherName}}', secondParty.firstName)
                .replace('{{name}}', firstParty.firstName)}
              className="min-h-[160px] border-2 border-blue-200 hover:border-blue-300 focus:border-blue-500 rounded-2xl bg-white/80 backdrop-blur-sm shadow-lg transition-all text-lg resize-none"
            />
            {errors.firstPartyNotes && (
              <div className="flex items-center gap-2 p-3 bg-gradient-to-r from-red-50 to-pink-50 rounded-xl border border-red-200">
                <AlertTriangle className="w-4 h-4 text-red-500" />
                <p className="text-sm text-red-600 font-medium">
                  {errors.firstPartyNotes.message}
                </p>
              </div>
            )}
          </div>
        </EnhancedSection>
        <EnhancedSection
          icon={User}
          title={dict.notes.party2Title.replace(
            '{{name}}',
            secondParty.firstName
          )}
          description={dict.notes.description}
          gradient="from-purple-500 to-pink-500"
          className="lg:col-span-1"
        >
          <div className="space-y-4">
            <div className="flex items-center gap-3 p-4 bg-gradient-to-r from-purple-50 to-pink-50 rounded-2xl border border-purple-100">
              <div className="w-12 h-12 rounded-full bg-gradient-to-r from-purple-500 to-pink-500 flex items-center justify-center text-white font-bold shadow-lg">
                {secondParty.firstName[0]}
              </div>
              <div>
                <div className="font-bold text-purple-800">
                  {secondParty.firstName} {secondParty.lastName}
                </div>
                <div className="text-sm text-purple-600">
                  {dict.notes.party2Label}
                </div>
              </div>
            </div>
            <Textarea
              id="secondPartyNotes"
              {...register('secondPartyNotes')}
              placeholder={dict.notes.party2Placeholder
                .replace('{{otherName}}', firstParty.firstName)
                .replace('{{name}}', secondParty.firstName)}
              className="min-h-[160px] border-2 border-purple-200 hover:border-purple-300 focus:border-purple-500 rounded-2xl bg-white/80 backdrop-blur-sm shadow-lg transition-all text-lg resize-none"
            />
            {errors.secondPartyNotes && (
              <div className="flex items-center gap-2 p-3 bg-gradient-to-r from-red-50 to-pink-50 rounded-xl border border-red-200">
                <AlertTriangle className="w-4 h-4 text-red-500" />
                <p className="text-sm text-red-600 font-medium">
                  {errors.secondPartyNotes.message}
                </p>
              </div>
            )}
          </div>
        </EnhancedSection>
      </div>

      <EnhancedSection
        icon={MessageCircle}
        title={dict.internalNotes.title}
        description={dict.internalNotes.description}
        gradient="from-amber-500 to-orange-500"
      >
        <div className="space-y-4">
          <div className="flex items-center gap-3 p-4 bg-gradient-to-r from-amber-50 to-orange-50 rounded-2xl border border-amber-100">
            <div className="p-3 rounded-full bg-gradient-to-r from-amber-500 to-orange-500 text-white shadow-lg">
              <Eye className="w-5 h-5" />
            </div>
            <div>
              <div className="font-bold text-amber-800">
                {dict.internalNotes.secretInfo}
              </div>
              <div className="text-sm text-amber-600">
                {dict.internalNotes.visibleTo}
              </div>
            </div>
          </div>
          <Textarea
            id="internalNotes"
            {...register('internalNotes')}
            placeholder={dict.internalNotes.placeholder}
            className="min-h-[120px] border-2 border-amber-200 hover:border-amber-300 focus:border-amber-500 rounded-2xl bg-white/80 backdrop-blur-sm shadow-lg transition-all text-lg resize-none"
          />
          {errors.internalNotes && (
            <div className="flex items-center gap-2 p-3 bg-gradient-to-r from-red-50 to-pink-50 rounded-xl border border-red-200">
              <AlertTriangle className="w-4 h-4 text-red-500" />
              <p className="text-sm text-red-600 font-medium">
                {errors.internalNotes.message}
              </p>
            </div>
          )}
        </div>
      </EnhancedSection>

      <EnhancedSection
        icon={Clock}
        title={dict.deadline.title}
        description={dict.deadline.description}
        gradient="from-indigo-500 to-purple-500"
      >
        <div className="space-y-4">
          <Label className="text-lg font-semibold text-gray-700">
            {dict.deadline.label}
          </Label>
          <Select
            onValueChange={(value) => {
              const days = parseInt(value, 10);
              const deadline = new Date();
              deadline.setDate(deadline.getDate() + days);
              setValue('decisionDeadline', deadline, { shouldValidate: true });
            }}
            defaultValue="14"
          >
            <SelectTrigger className="h-14 border-2 border-indigo-200 hover:border-indigo-300 focus:border-indigo-500 rounded-2xl bg-white/80 backdrop-blur-sm shadow-lg transition-all text-lg">
              <SelectValue />
            </SelectTrigger>
            <SelectContent className="border-0 shadow-2xl rounded-2xl bg-white/95 backdrop-blur-sm">
              <SelectItem value="3">
                <div className="flex items-center gap-3 py-2">
                  <Zap className="w-5 h-5 text-red-500" />
                  <div>
                    <div className="font-bold text-red-600">
                      {dict.deadline.options['3'].title}
                    </div>
                    <div className="text-xs text-red-500">
                      {dict.deadline.options['3'].description}
                    </div>
                  </div>
                </div>
              </SelectItem>
              <SelectItem value="7">
                <div className="flex items-center gap-3 py-2">
                  <Award className="w-5 h-5 text-orange-500" />
                  <div>
                    <div className="font-bold text-orange-600">
                      {dict.deadline.options['7'].title}
                    </div>
                    <div className="text-xs text-orange-500">
                      {dict.deadline.options['7'].description}
                    </div>
                  </div>
                </div>
              </SelectItem>
              <SelectItem value="14">
                <div className="flex items-center gap-3 py-2">
                  <Target className="w-5 h-5 text-blue-500" />
                  <div>
                    <div className="font-bold text-blue-600">
                      {dict.deadline.options['14'].title}
                    </div>
                    <div className="text-xs text-blue-500">
                      {dict.deadline.options['14'].description}
                    </div>
                  </div>
                </div>
              </SelectItem>
              <SelectItem value="30">
                <div className="flex items-center gap-3 py-2">
                  <Shield className="w-5 h-5 text-green-500" />
                  <div>
                    <div className="font-bold text-green-600">
                      {dict.deadline.options['30'].title}
                    </div>
                    <div className="text-xs text-green-500">
                      {dict.deadline.options['30'].description}
                    </div>
                  </div>
                </div>
              </SelectItem>
            </SelectContent>
          </Select>
          {errors.decisionDeadline && (
            <div className="flex items-center gap-2 p-3 bg-gradient-to-r from-red-50 to-pink-50 rounded-xl border border-red-200">
              <AlertTriangle className="w-4 h-4 text-red-500" />
              <p className="text-sm text-red-600 font-medium">
                {errors.decisionDeadline.message}
              </p>
            </div>
          )}
          <div className="p-4 bg-gradient-to-r from-indigo-50 to-purple-50 rounded-2xl border border-indigo-100">
            <div className="flex items-start gap-3">
              <Calendar className="w-5 h-5 text-indigo-500 mt-1" />
              <div>
                <div className="font-bold text-indigo-800 mb-1">
                  {dict.deadline.infoBox.title}
                </div>
                <p className="text-sm text-indigo-700 leading-relaxed">
                  {dict.deadline.infoBox.body}
                </p>
              </div>
            </div>
          </div>
        </div>
      </EnhancedSection>

      <Card className="border-0 shadow-2xl bg-gradient-to-br from-gray-50 via-white to-gray-50 rounded-3xl overflow-hidden">
        <CardContent className="p-8">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-4">
              <div className="p-4 rounded-2xl bg-gradient-to-r from-gray-500 to-slate-500 text-white shadow-xl">
                <Users className="w-8 h-8" />
              </div>
              <div>
                <h3 className="text-2xl font-bold text-gray-800">
                  {dict.summary.title}
                </h3>
                <p className="text-gray-600 leading-relaxed">
                  {dict.summary.description}
                </p>
              </div>
            </div>
            <div className="text-center">
              <div className="flex items-center gap-2 mb-2">
                <Gift className="w-5 h-5 text-purple-500" />
                <span className="font-bold text-purple-600">
                  {dict.summary.ready}
                </span>
              </div>
              <p className="text-sm text-gray-500">{dict.summary.info}</p>
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  );
};

export default SuggestionDetails;
--- End of Content for SuggestionDetails.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\suggestions\NewSuggestionForm\index.tsx
--------------------------------------------------------------------------------
Content:
// src/app/components/matchmaker/suggestions/NewSuggestionForm/index.tsx

'use client';
import React, { useState, useEffect } from 'react';
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription,
} from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';
import { toast } from 'sonner';
import { useForm, FormProvider } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { Priority, MatchSuggestionStatus } from '@prisma/client';
import {
  UserPlus,
  Sparkles,
  Loader2,
  BarChart2,
  Users,
  Heart,
  ArrowRight,
  ArrowLeft,
  X,
  Gift,
  Check,
  Crown,
} from 'lucide-react';

// Types
import type { Candidate } from '../../new/types/candidates';
import { newSuggestionSchema, type NewSuggestionFormData } from './schema';
import type { MatchmakerPageDictionary } from '@/types/dictionary';

// Components
import SuggestionDetails from './SuggestionDetails';
import MatchPreview from './MatchPreview';
import CandidateSelector from './CandidateSelector';
import { AiMatchAnalysisDialog } from '../../new/dialogs/AiMatchAnalysisDialog';
import { cn } from '@/lib/utils';

interface NewSuggestionFormProps {
  dict: MatchmakerPageDictionary['candidatesManager'];
  isOpen: boolean;
  onClose: () => void;
  candidates: Candidate[];
  selectedCandidate?: Candidate | null;
  onSubmit: (data: NewSuggestionFormData) => Promise<void>;
}

const StepIndicator: React.FC<{
  currentStep: number;
  steps: Array<{ label: string; icon: React.ElementType }>;
}> = ({ currentStep, steps }) => (
  <div className="flex items-center justify-center">
    {steps.map((step, index) => {
      const isActive = index === currentStep;
      const isCompleted = index < currentStep;
      const StepIcon = step.icon;

      return (
        <React.Fragment key={index}>
          <div className="flex flex-col items-center text-center">
            <div
              className={cn(
                'flex items-center justify-center w-12 h-12 rounded-full transition-all duration-300 shadow-md',
                isActive &&
                  'bg-gradient-to-r from-purple-600 to-pink-600 text-white scale-110 shadow-lg',
                isCompleted &&
                  'bg-gradient-to-r from-green-500 to-emerald-500 text-white',
                !isActive && !isCompleted && 'bg-gray-200 text-gray-500'
              )}
            >
              {isCompleted ? (
                <Check className="w-6 h-6" />
              ) : (
                <StepIcon className="w-6 h-6" />
              )}
            </div>
            <p
              className={cn(
                'mt-2 text-xs font-semibold w-24',
                isActive && 'text-purple-600',
                isCompleted && 'text-green-600',
                !isActive && !isCompleted && 'text-gray-500'
              )}
            >
              {step.label}
            </p>
          </div>

          {index < steps.length - 1 && (
            <div
              className={cn(
                'w-16 h-1 mx-2 rounded-full transition-colors duration-300',
                isCompleted ? 'bg-green-500' : 'bg-gray-200'
              )}
            />
          )}
        </React.Fragment>
      );
    })}
  </div>
);

const NewSuggestionForm: React.FC<NewSuggestionFormProps> = ({
  dict,
  isOpen,
  onClose,
  candidates,
  selectedCandidate,
  onSubmit,
}) => {
  const formDict = dict.newSuggestionForm;
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [firstParty, setFirstParty] = useState<Candidate | null>(null);
  const [secondParty, setSecondParty] = useState<Candidate | null>(null);
  const [showAnalysisDialog, setShowAnalysisDialog] = useState(false);
  const [currentStep, setCurrentStep] = useState(0);

  const steps = [
    { label: formDict.steps.select.label, icon: Users },
    { label: formDict.steps.analyze.label, icon: BarChart2 },
    { label: formDict.steps.details.label, icon: Heart },
  ];

  const form = useForm<NewSuggestionFormData>({
    resolver: zodResolver(newSuggestionSchema),
    defaultValues: {
      priority: Priority.MEDIUM,
      status: MatchSuggestionStatus.DRAFT,
      decisionDeadline: new Date(new Date().setDate(new Date().getDate() + 14)),
    },
  });

  useEffect(() => {
    if (isOpen) {
      form.reset({
        priority: Priority.MEDIUM,
        status: MatchSuggestionStatus.DRAFT,
        decisionDeadline: new Date(
          new Date().setDate(new Date().getDate() + 14)
        ),
        firstPartyId: selectedCandidate?.id || '',
        secondPartyId: '',
      });
      setFirstParty(selectedCandidate || null);
      setSecondParty(null);
      setCurrentStep(0);
    }
  }, [isOpen, selectedCandidate, form]);

  const handleCandidateSelect =
    (type: 'first' | 'second') => (candidate: Candidate | null) => {
      const setter = type === 'first' ? setFirstParty : setSecondParty;
      const fieldName = type === 'first' ? 'firstPartyId' : 'secondPartyId';
      setter(candidate);
      form.setValue(fieldName, candidate?.id || '', {
        shouldValidate: true,
        shouldDirty: true,
      });
    };

  const handleNext = () => {
    if (currentStep === 0 && (!firstParty || !secondParty)) {
      toast.error(formDict.toasts.selectParties);
      return;
    }
    setCurrentStep((prev) => Math.min(prev + 1, steps.length - 1));
  };

  const handlePrevious = () => {
    setCurrentStep((prev) => Math.max(prev - 1, 0));
  };

  const handleSubmit = form.handleSubmit(async (data) => {
    if (!firstParty || !secondParty) {
      toast.error(formDict.toasts.selectParties);
      return;
    }

    setIsSubmitting(true);
    try {
      await onSubmit(data);
      toast.success(formDict.toasts.createSuccess);
      onClose();
    } catch (error) {
      toast.error(
        `${formDict.toasts.createError}: ${error instanceof Error ? error.message : ''}`
      );
    } finally {
      setIsSubmitting(false);
    }
  });

  const maleCandidates = candidates.filter((c) => c.profile.gender === 'MALE');
  const femaleCandidates = candidates.filter(
    (c) => c.profile.gender === 'FEMALE'
  );

  const canProceedToNextStep = () => {
    switch (currentStep) {
      case 0:
        return firstParty && secondParty;
      case 1:
        return firstParty && secondParty;
      case 2:
        return true;
      default:
        return false;
    }
  };

  const renderStepContent = () => {
    switch (currentStep) {
      case 0:
        return (
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
            <CandidateSelector
              dict={formDict.candidateSelector} // ✅ העברת המילון
              label="צד א' (גבר)"
              value={firstParty}
              onChange={handleCandidateSelect('first')}
              candidates={maleCandidates}
              otherParty={secondParty}
              fieldName="firstPartyId"
              error={form.formState.errors.firstPartyId?.message}
            />
            <CandidateSelector
              dict={formDict.candidateSelector} // ✅ העברת המילון
              label="צד ב' (אישה)"
              value={secondParty}
              onChange={handleCandidateSelect('second')}
              candidates={femaleCandidates}
              otherParty={firstParty}
              fieldName="secondPartyId"
              error={form.formState.errors.secondPartyId?.message}
            />
          </div>
        );
      case 1:
        if (!firstParty || !secondParty) {
          return (
            <div className="flex items-center justify-center h-full">
              <div className="text-center text-gray-500">
                <Users className="mx-auto h-16 w-16 text-gray-300 mb-4" />
                <p className="text-lg font-medium">
                  {formDict.emptyState.title}
                </p>
              </div>
            </div>
          );
        }
        return (
          <div className="space-y-8">
            <MatchPreview
              dict={dict.newSuggestionForm.matchPreview} // ✅ העברת המילון
              firstParty={firstParty}
              secondParty={secondParty}
            />
            <div className="flex justify-center">
              <Button
                type="button"
                variant="outline"
                onClick={() => setShowAnalysisDialog(true)}
                className="bg-gradient-to-r from-indigo-50 to-purple-50 border-2 border-indigo-200 text-indigo-700 hover:bg-gradient-to-r hover:from-indigo-100 hover:to-purple-100 hover:border-indigo-300 rounded-2xl px-8 py-4 font-bold text-lg shadow-lg hover:shadow-xl transition-all duration-300"
              >
                <BarChart2 className="w-6 h-6 ml-3" />
                {formDict.buttons.fullAnalysis}
                <Sparkles className="w-5 h-5 mr-2 text-purple-500" />
              </Button>
            </div>
          </div>
        );
      case 2:
        if (!firstParty || !secondParty) {
          return (
            <div className="flex items-center justify-center h-full">
              <div className="text-center text-gray-500">
                <Users className="mx-auto h-16 w-16 text-gray-300 mb-4" />
                <p className="text-lg font-medium">
                  {formDict.emptyState.title}
                </p>
              </div>
            </div>
          );
        }
        return (
          <SuggestionDetails
            dict={dict.newSuggestionForm.suggestionDetails} // ✅ העברת המילון
            firstParty={firstParty}
            secondParty={secondParty}
          />
        );
      default:
        return null;
    }
  };

  return (
    <>
      <Dialog open={isOpen} onOpenChange={onClose}>
        <DialogContent
          className="max-w-7xl w-full h-[95vh] flex flex-col p-0 border-0 shadow-2xl rounded-3xl bg-gray-50"
          dir="rtl"
        >
          <div className="relative border-b p-4 flex-shrink-0 bg-white">
            <div className="flex justify-between items-center w-full">
              <div className="flex items-center gap-4">
                <div className="p-3 rounded-xl bg-gradient-to-r from-purple-500 to-pink-500 text-white shadow-lg">
                  <UserPlus className="w-8 h-8" />
                </div>
                <div className="text-right">
                  <DialogTitle className="text-2xl font-bold text-gray-800">
                    {formDict.header.title}
                  </DialogTitle>
                  <DialogDescription className="text-md text-gray-500 mt-1">
                    {formDict.footer.step
                      .replace('{{current}}', (currentStep + 1).toString())
                      .replace('{{total}}', steps.length.toString())}
                    : {steps[currentStep].label}
                  </DialogDescription>
                </div>
              </div>
              <div className="flex-1 flex justify-center">
                <StepIndicator currentStep={currentStep} steps={steps} />
              </div>
              <Button
                variant="ghost"
                size="icon"
                onClick={onClose}
                className="rounded-full h-10 w-10 text-gray-500 hover:text-gray-700 hover:bg-gray-100"
              >
                <X className="w-5 h-5" />
              </Button>
            </div>
          </div>
          <div className="flex-1 overflow-y-auto p-6 lg:p-8 bg-gradient-to-br from-white via-purple-50/20 to-pink-50/20">
            <FormProvider {...form}>
              <form onSubmit={handleSubmit} className="h-full">
                <div className="animate-fade-in-up">{renderStepContent()}</div>
              </form>
            </FormProvider>
          </div>
          <div className="border-t bg-white p-4 flex-shrink-0">
            <div className="flex items-center justify-between">
              <div className="flex items-center gap-3">
                {currentStep > 0 && (
                  <Button
                    type="button"
                    variant="outline"
                    onClick={handlePrevious}
                    className="px-6 py-3 border-2 border-gray-300 hover:bg-gray-50 rounded-xl transition-all duration-300 font-bold"
                  >
                    <ArrowRight className="w-5 h-5 ml-2" />
                    {formDict.buttons.back}
                  </Button>
                )}
                {currentStep < steps.length - 1 ? (
                  <Button
                    type="button"
                    onClick={handleNext}
                    disabled={!canProceedToNextStep()}
                    className="px-8 py-3 bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-700 hover:to-pink-700 text-white shadow-lg hover:shadow-xl transition-all duration-300 rounded-xl font-bold disabled:opacity-50 disabled:cursor-not-allowed"
                  >
                    {formDict.buttons.continue}
                    <ArrowLeft className="w-5 h-5 mr-2" />
                  </Button>
                ) : (
                  <Button
                    type="submit"
                    onClick={handleSubmit}
                    disabled={isSubmitting || !firstParty || !secondParty}
                    className="px-8 py-3 bg-gradient-to-r from-emerald-600 to-green-600 hover:from-emerald-700 hover:to-green-700 text-white shadow-lg hover:shadow-xl transition-all duration-300 rounded-xl font-bold disabled:opacity-50 disabled:cursor-not-allowed"
                  >
                    {isSubmitting ? (
                      <>
                        <Loader2 className="w-5 h-5 ml-2 animate-spin" />
                        {formDict.buttons.creating}
                      </>
                    ) : (
                      <>
                        <Gift className="w-5 h-5 ml-2" />
                        {formDict.buttons.create}
                        <Sparkles className="w-4 h-4 mr-2" />
                      </>
                    )}
                  </Button>
                )}
              </div>
              <div className="text-sm text-gray-500 flex items-center gap-2">
                <Crown className="w-4 h-4 text-purple-500" />
                <span>
                  {firstParty && secondParty
                    ? `${firstParty.firstName} ו${secondParty.firstName}`
                    : formDict.steps.select.label}
                </span>
              </div>
            </div>
          </div>
        </DialogContent>
      </Dialog>
      {firstParty && secondParty && (
        <AiMatchAnalysisDialog
          isOpen={showAnalysisDialog}
          onClose={() => setShowAnalysisDialog(false)}
          targetCandidate={firstParty}
          comparisonCandidates={[secondParty]}
          dict={dict.aiAnalysis}
        />
      )}
    </>
  );
};

export default NewSuggestionForm;
--- End of Content for index.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\suggestions\NewSuggestionForm\schema.ts
--------------------------------------------------------------------------------
Content:
import { z } from "zod";
import { addDays, isBefore } from 'date-fns';

// Validation rules

const MIN_DECISION_DAYS = 1;
const MAX_DECISION_DAYS = 30;

// Helper function to validate dates
const isValidDeadlineDate = (date: Date | null | undefined, minDays: number, maxDays: number) => {
  if (!date) return false;
  
  const today = new Date();
  const minDate = addDays(today, minDays);
  const maxDate = addDays(today, maxDays);
  
  return !isBefore(date, minDate) && !isBefore(maxDate, date);
};

// Schema for new suggestion
export const newSuggestionSchema = z.object({
  firstPartyId: z.string({
    required_error: "יש לבחור מועמד/ת ראשון/ה",
  }),
  
  secondPartyId: z.string({
    required_error: "יש לבחור מועמד/ת שני/ה",
  }),
  
  priority: z.enum(['LOW', 'MEDIUM', 'HIGH', 'URGENT'] as const, {
    required_error: "יש לבחור רמת עדיפות",
  }),

  status: z.enum([
    'DRAFT',
    'PENDING_FIRST_PARTY',
    'FIRST_PARTY_APPROVED',
    'FIRST_PARTY_DECLINED',
    'PENDING_SECOND_PARTY',
    'SECOND_PARTY_APPROVED',
    'SECOND_PARTY_DECLINED',
    'AWAITING_MATCHMAKER_APPROVAL',
    'CONTACT_DETAILS_SHARED',
    'AWAITING_FIRST_DATE_FEEDBACK',
    'THINKING_AFTER_DATE',
    'PROCEEDING_TO_SECOND_DATE',
    'ENDED_AFTER_FIRST_DATE',
    'MEETING_PENDING',
    'MEETING_SCHEDULED',
    'MATCH_APPROVED',
    'MATCH_DECLINED',
    'DATING',
    'ENGAGED',
    'MARRIED',
    'EXPIRED',
    'CLOSED',
    'CANCELLED'
  ] as const, {
    required_error: "יש לבחור סטטוס",
  }).default('DRAFT'),

  matchingReason: z.string()
    .max(500, "סיבת ההתאמה לא יכולה להכיל יותר מ-500 תווים")
    .optional(),

  internalNotes: z.string()
    .max(1000, "ההערות הפנימיות לא יכולות להכיל יותר מ-1000 תווים")
    .optional(),

  firstPartyNotes: z.string()
    .max(500, "ההערות לצד א' לא יכולות להכיל יותר מ-500 תווים")
    .optional(),

  secondPartyNotes: z.string()
    .max(500, "ההערות לצד ב' לא יכולות להכיל יותר מ-500 תווים")
    .optional(),


  decisionDeadline: z.date({
    required_error: "יש לבחור תאריך יעד להחלטה ",
  })
}).refine(
  (data) => data.firstPartyId !== data.secondPartyId,
  {
    message: "לא ניתן ליצור הצעה עבור אותו מועמד",
    path: ["secondPartyId"]
  }

).refine(
  (data) => isValidDeadlineDate(data.decisionDeadline, MIN_DECISION_DAYS, MAX_DECISION_DAYS),
  {
    message: `תאריך היעד להחלטה סופית חייב להיות בין ${MIN_DECISION_DAYS} ל-${MAX_DECISION_DAYS} ימים מהיום`,
    path: ["decisionDeadline"]
  }
);

export type NewSuggestionFormData = z.infer<typeof newSuggestionSchema>;

// Status mapping for display
export const suggestionStatusMap = {
  DRAFT: "טיוטה",
  PENDING_FIRST_PARTY: "ממתין לתשובת צד א'",
  FIRST_PARTY_APPROVED: "צד א' אישר",
  FIRST_PARTY_DECLINED: "צד א' דחה",
  PENDING_SECOND_PARTY: "ממתין לתשובת צד ב'",
  SECOND_PARTY_APPROVED: "צד ב' אישר",
  SECOND_PARTY_DECLINED: "צד ב' דחה",
  AWAITING_MATCHMAKER_APPROVAL: "ממתין לאישור שדכן",
  CONTACT_DETAILS_SHARED: "פרטי קשר הועברו",
  AWAITING_FIRST_DATE_FEEDBACK: "ממתין למשוב פגישה ראשונה",
  THINKING_AFTER_DATE: "בשלב מחשבה אחרי פגישה",
  PROCEEDING_TO_SECOND_DATE: "ממשיכים לפגישה שנייה",
  ENDED_AFTER_FIRST_DATE: "הסתיים אחרי פגישה ראשונה",
  MEETING_PENDING: "ממתין לקביעת פגישה",
  MEETING_SCHEDULED: "פגישה נקבעה",
  MATCH_APPROVED: "ההצעה אושרה",
  MATCH_DECLINED: "ההצעה נדחתה",
  DATING: "בתהליך היכרות",
  ENGAGED: "מאורסים",
  MARRIED: "נישאו",
  EXPIRED: "פג תוקף",
  CLOSED: "ההצעה נסגרה",
  CANCELLED: "ההצעה בוטלה"
} as const;

// Priority mapping for display
export const priorityMap = {
  LOW: { label: "נמוכה", color: "text-gray-500" },
  MEDIUM: { label: "רגילה", color: "text-blue-500" },
  HIGH: { label: "גבוהה", color: "text-yellow-500" },
  URGENT: { label: "דחופה", color: "text-red-500" }
} as const;
--- End of Content for schema.ts ---

================================================================================
Directory: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\suggestions\cards
================================================================================

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\suggestions\cards\SuggestionCard.tsx
--------------------------------------------------------------------------------
Content:
// src/app/components/matchmaker/suggestions/cards/SuggestionCard.tsx

import React, { useState, useEffect } from 'react';
import { Card, CardContent } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from '@/components/ui/dropdown-menu';
import Image from 'next/image';
import {
  Clock,
  User,
  MessageCircle,
  Eye,
  AlertCircle,
  MoreHorizontal,
  Send,
  RefreshCw,
  Trash2,
  Edit,
  CheckCircle,
  XCircle,
  CalendarClock,
  Heart,
  MapPin,
  Calendar,
  Star,
  Sparkles,
  ChevronDown,
  ChevronUp,
  Crown,
  Zap,
  Award,
  Target,
  Users,
  Quote,
  Briefcase,
  GraduationCap,
  ArrowRight,
  Phone,
  Mail,
  Gift,
  Flame,
  TrendingUp,
  Shield,
  Gem,
} from 'lucide-react';
import { formatDistanceToNow } from 'date-fns';
import { he } from 'date-fns/locale';
import type {
  MatchSuggestionStatus,
  Priority,
  UserImage,
} from '@prisma/client';
import type {
  Suggestion,
  ActionAdditionalData,
  SuggestionParty,
} from '@/types/suggestions';
import { Progress } from '@/components/ui/progress';
import { cn, getRelativeCloudinaryPath, getInitials } from '@/lib/utils';
import { Avatar, AvatarFallback } from '@/components/ui/avatar';
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from '@/components/ui/tooltip';
import type { MatchmakerPageDictionary } from '@/types/dictionary';

// Media query hook
const useMediaQuery = (query: string) => {
  const [matches, setMatches] = useState(false);
  useEffect(() => {
    const media = window.matchMedia(query);
    if (media.matches !== matches) {
      setMatches(media.matches);
    }
    const listener = () => setMatches(media.matches);
    window.addEventListener('resize', listener);
    return () => window.removeEventListener('resize', listener);
  }, [matches, query]);
  return matches;
};

interface SuggestionCardProps {
  suggestion: Suggestion;
  onAction: (
    type:
      | 'view'
      | 'contact'
      | 'message'
      | 'edit'
      | 'delete'
      | 'resend'
      | 'changeStatus'
      | 'reminder',
    suggestion: Suggestion,
    additionalData?: ActionAdditionalData
  ) => void;
  dict: MatchmakerPageDictionary['suggestionsDashboard']['suggestionCard'];
  className?: string;
  variant?: 'full' | 'compact';
}

const calculateAge = (birthDate: Date): number => {
  const today = new Date();
  const birth = new Date(birthDate);
  let age = today.getFullYear() - birth.getFullYear();
  const monthDiff = today.getMonth() - birth.getMonth();
  if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birth.getDate())) {
    age--;
  }
  return age;
};

const getEnhancedStatusInfo = (status: MatchSuggestionStatus) => {
  const defaults = {
    icon: RefreshCw,
    progress: 30,
    pulse: false,
    color: 'text-gray-600',
    bgColor: 'from-gray-50 to-slate-50',
  };
  const statusMap: Partial<
    Record<MatchSuggestionStatus, Partial<typeof defaults>>
  > = {
    PENDING_FIRST_PARTY: {
      color: 'text-yellow-600',
      bgColor: 'from-yellow-50 to-amber-50',
      icon: Clock,
      progress: 25,
      pulse: true,
    },
    PENDING_SECOND_PARTY: {
      color: 'text-blue-600',
      bgColor: 'from-blue-50 to-cyan-50',
      icon: Clock,
      progress: 50,
      pulse: true,
    },
    FIRST_PARTY_APPROVED: {
      color: 'text-green-600',
      bgColor: 'from-green-50 to-emerald-50',
      icon: CheckCircle,
      progress: 40,
    },
    SECOND_PARTY_APPROVED: {
      color: 'text-green-600',
      bgColor: 'from-green-50 to-emerald-50',
      icon: CheckCircle,
      progress: 60,
    },
    FIRST_PARTY_DECLINED: {
      color: 'text-red-600',
      bgColor: 'from-red-50 to-pink-50',
      icon: XCircle,
      progress: 100,
    },
    SECOND_PARTY_DECLINED: {
      color: 'text-red-600',
      bgColor: 'from-red-50 to-pink-50',
      icon: XCircle,
      progress: 100,
    },
    CONTACT_DETAILS_SHARED: {
      color: 'text-purple-600',
      bgColor: 'from-purple-50 to-pink-50',
      icon: Send,
      progress: 70,
    },
    DATING: {
      color: 'text-pink-600',
      bgColor: 'from-pink-50 to-rose-50',
      icon: Heart,
      progress: 80,
    },
    ENGAGED: {
      color: 'text-yellow-600',
      bgColor: 'from-yellow-50 to-orange-50',
      icon: Gem,
      progress: 95,
    },
    MARRIED: {
      color: 'text-emerald-600',
      bgColor: 'from-emerald-50 to-green-50',
      icon: Crown,
      progress: 100,
    },
    AWAITING_FIRST_DATE_FEEDBACK: {
      color: 'text-orange-600',
      bgColor: 'from-orange-50 to-amber-50',
      icon: AlertCircle,
      progress: 75,
      pulse: true,
    },
    EXPIRED: {
      color: 'text-gray-600',
      bgColor: 'from-gray-50 to-slate-50',
      icon: Clock,
      progress: 100,
    },
  };
  return { ...defaults, ...(statusMap[status] || {}) };
};

const getEnhancedPriorityInfo = (priority: Priority) => {
  const priorityMap = {
    URGENT: {
      icon: Flame,
      borderColor: 'border-red-500',
      bgGradient: 'from-red-50 to-pink-50',
      badgeClass:
        'bg-gradient-to-r from-red-500 to-pink-500 text-white border-0 shadow-xl animate-pulse',
    },
    HIGH: {
      icon: Star,
      borderColor: 'border-orange-500',
      bgGradient: 'from-orange-50 to-amber-50',
      badgeClass:
        'bg-gradient-to-r from-orange-500 to-amber-500 text-white border-0 shadow-lg',
    },
    MEDIUM: {
      icon: Target,
      borderColor: 'border-blue-500',
      bgGradient: 'from-blue-50 to-cyan-50',
      badgeClass:
        'bg-gradient-to-r from-blue-500 to-cyan-500 text-white border-0 shadow-lg',
    },
    LOW: {
      icon: Shield,
      borderColor: 'border-gray-400',
      bgGradient: 'from-gray-50 to-slate-50',
      badgeClass:
        'bg-gradient-to-r from-gray-500 to-slate-500 text-white border-0 shadow-lg',
    },
  };
  return priorityMap[priority] || priorityMap.MEDIUM;
};

const getDaysLeft = (decisionDeadline?: Date | string | null) => {
  if (!decisionDeadline) return null;
  const deadline = new Date(decisionDeadline);
  const today = new Date();
  const diffTime = deadline.getTime() - today.getTime();
  const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
  return diffDays > 0 ? diffDays : 0;
};

const HighlightPill: React.FC<{
  icon: React.ElementType;
  text: string;
  color?: string;
}> = ({ icon: Icon, text, color = 'from-blue-500 to-cyan-500' }) => (
  <div
    className={cn(
      'flex items-center gap-2 rounded-full bg-white/80 backdrop-blur-sm border-2 px-3 py-1.5 text-xs font-medium shadow-lg hover:shadow-xl transition-all duration-300 hover:scale-105',
      'border-transparent bg-gradient-to-r text-white',
      color
    )}
  >
    <Icon className="w-3 h-3" />
    <span>{text}</span>
  </div>
);

const MatchmakerInfo: React.FC<{
  dict: MatchmakerPageDictionary['suggestionsDashboard']['suggestionCard']['matchmakerInfo'];
  matchmaker: { firstName: string; lastName: string } | undefined;
  className?: string;
}> = ({ dict, matchmaker, className }) => {
  if (!matchmaker) {
    return (
      <div
        className={cn(
          'flex items-center gap-3 p-3 bg-gradient-to-r from-gray-50 to-slate-50 rounded-xl border border-gray-100 shadow-sm',
          className
        )}
      >
        <div className="text-center text-gray-500">
          <p className="text-sm">{dict.noInfo}</p>
        </div>
      </div>
    );
  }
  return (
    <div
      className={cn(
        'flex items-center gap-3 p-3 bg-gradient-to-r from-purple-50 to-pink-50 rounded-xl border border-purple-100 shadow-sm',
        className
      )}
    >
      <Avatar className="w-10 h-10 border-2 border-white shadow-lg">
        <AvatarFallback className="bg-gradient-to-br from-purple-500 to-pink-500 text-white font-bold text-sm">
          {getInitials(`${matchmaker.firstName} ${matchmaker.lastName}`)}
        </AvatarFallback>
      </Avatar>
      <div>
        <p className="text-xs font-medium text-purple-600">{dict.label}</p>
        <p className="text-sm font-bold text-gray-800">
          {matchmaker.firstName} {matchmaker.lastName}
        </p>
      </div>
    </div>
  );
};

const PartyDisplay: React.FC<{
  party: SuggestionParty;
  isCompact?: boolean;
}> = ({ party, isCompact = false }) => {
  const imageUrl =
    party.images.find((img: UserImage) => img.isMain)?.url ||
    '/placeholders/user.png';
  return (
    <div className="flex flex-col items-center gap-3">
      <div
        className={cn(
          'relative rounded-full overflow-hidden shadow-xl border-3 border-white',
          isCompact ? 'h-12 w-12' : 'h-16 w-16'
        )}
      >
        <Image
          src={getRelativeCloudinaryPath(imageUrl)}
          alt={party.firstName}
          fill
          className="object-cover"
          sizes={isCompact ? '3rem' : '4rem'}
        />
      </div>
      <div className="text-center">
        <h4
          className={cn(
            'font-bold text-gray-800',
            isCompact ? 'text-sm' : 'text-base'
          )}
        >
          {party.firstName} {party.lastName}
        </h4>
        {party.profile?.city && (
          <div
            className={cn(
              'flex items-center justify-center gap-1 text-gray-600',
              isCompact ? 'text-xs' : 'text-sm'
            )}
          >
            <MapPin className="w-3 h-3 text-green-500" />
            <span>{party.profile.city}</span>
          </div>
        )}
      </div>
    </div>
  );
};

const SuggestionCard: React.FC<SuggestionCardProps> = ({
  suggestion,
  onAction,
  dict,
  className,
  variant = 'full',
}) => {
  const isMobile = useMediaQuery('(max-width: 768px)');

  const { firstParty, secondParty, matchmaker } = suggestion;
  const statusInfo = getEnhancedStatusInfo(suggestion.status);
  const priorityInfo = getEnhancedPriorityInfo(suggestion.priority);
  const statusText = dict.statuses[suggestion.status] || dict.statuses.DEFAULT;
  const priorityText =
    dict.priorities[suggestion.priority] || dict.priorities.MEDIUM;
  const daysLeft = getDaysLeft(suggestion.decisionDeadline);
  const firstPartyAge = calculateAge(firstParty.profile.birthDate);
  const secondPartyAge = calculateAge(secondParty.profile.birthDate);

  const highlights = [
    {
      text: dict.highlights.familyValues,
      icon: Heart,
      color: 'from-pink-500 to-rose-500',
    },
    {
      text: dict.highlights.religiousView,
      icon: Sparkles,
      color: 'from-purple-500 to-indigo-500',
    },
    {
      text: dict.highlights.location,
      icon: MapPin,
      color: 'from-green-500 to-emerald-500',
    },
  ].slice(0, 3);

  if (isMobile && variant === 'compact') {
    const StatusIcon = statusInfo.icon;
    return (
      <Card
        className={cn(
          'w-full cursor-pointer hover:shadow-xl transition-all duration-300 group overflow-hidden',
          'border-l-4 bg-gradient-to-br from-white to-gray-50/50',
          priorityInfo.borderColor,
          className
        )}
        onClick={() => onAction('view', suggestion)}
      >
        <CardContent className="p-4">
          <div className="flex justify-between items-start mb-3">
            <div className="flex-1">
              <h4 className="font-bold text-gray-800 mb-2 text-sm leading-tight">
                {firstParty.firstName} ו{secondParty.firstName}
              </h4>
              <div className="flex items-center gap-2 mb-2">
                <div className="flex -space-x-2">
                  <Image
                    src={getRelativeCloudinaryPath(
                      firstParty.images.find((img) => img.isMain)?.url ||
                        '/placeholders/user.png'
                    )}
                    alt={firstParty.firstName}
                    width={24}
                    height={24}
                    className="rounded-full border-2 border-white shadow-md"
                  />
                  <Image
                    src={getRelativeCloudinaryPath(
                      secondParty.images.find((img) => img.isMain)?.url ||
                        '/placeholders/user.png'
                    )}
                    alt={secondParty.firstName}
                    width={24}
                    height={24}
                    className="rounded-full border-2 border-white shadow-md"
                  />
                </div>
                <span className="text-xs text-gray-500 font-medium">
                  {firstPartyAge}, {secondPartyAge}
                </span>
              </div>
            </div>
            <div
              className={cn(
                'p-2 rounded-full shadow-lg group-hover:scale-110 transition-transform bg-gradient-to-r',
                statusInfo.bgColor
              )}
            >
              <StatusIcon className={cn('w-4 h-4', statusInfo.color)} />
            </div>
          </div>
          <Badge
            className={cn(
              'text-xs font-bold bg-opacity-20 border',
              priorityInfo.borderColor,
              statusInfo.color
            )}
          >
            {statusText.shortLabel}
          </Badge>
        </CardContent>
      </Card>
    );
  }

  if (isMobile && variant === 'full') {
    return (
      <Card
        className={cn(
          'overflow-hidden shadow-xl border-0 bg-gradient-to-br from-white via-purple-50/20 to-pink-50/20 hover:shadow-2xl transition-all duration-500 group',
          className
        )}
      >
        <CardContent className="p-6 space-y-6">
          <div className="relative">
            <div className="relative z-10 flex justify-between items-center">
              <h3 className="text-2xl font-bold bg-gradient-to-r from-purple-600 via-pink-600 to-blue-600 bg-clip-text text-transparent">
                {dict.mobile.title}
              </h3>
              <Badge
                className={cn(
                  'text-sm font-bold shadow-xl',
                  priorityInfo.badgeClass
                )}
              >
                <statusInfo.icon className="w-4 h-4 ml-2" />
                {statusText.label}
              </Badge>
            </div>
          </div>
          {suggestion.priority === 'URGENT' && (
            <div className="flex items-center gap-2 p-3 bg-gradient-to-r from-red-100 to-pink-100 border border-red-200 rounded-xl shadow-lg">
              <Flame className="w-5 h-5 text-red-500 animate-pulse" />
              <span className="text-red-700 font-bold text-sm">
                {dict.mobile.urgentTitle}
              </span>
            </div>
          )}
          <MatchmakerInfo dict={dict.matchmakerInfo} matchmaker={matchmaker} />
          <div>
            <h4 className="font-bold text-lg mb-3 text-center text-gray-700 flex items-center justify-center gap-2">
              <Sparkles className="w-5 h-5 text-purple-500" />
              {dict.mobile.connectionPoints}
            </h4>
            <div className="flex flex-wrap justify-center gap-2">
              {highlights.map((highlight, index) => (
                <HighlightPill
                  key={index}
                  icon={highlight.icon}
                  text={highlight.text}
                  color={highlight.color}
                />
              ))}
            </div>
          </div>
          <div className="space-y-6">
            <PartyDisplay party={firstParty} />
            <div className="flex justify-center">
              <div className="p-3 rounded-full bg-gradient-to-r from-purple-500 to-pink-500 text-white shadow-xl">
                <Heart className="w-6 h-6" />
              </div>
            </div>
            <PartyDisplay party={secondParty} />
          </div>
          {suggestion.matchingReason && (
            <div className="p-4 bg-gradient-to-r from-cyan-50 to-blue-50 border border-cyan-200 rounded-xl shadow-inner">
              <div className="flex items-start gap-3">
                <Quote className="w-5 h-5 text-cyan-500 mt-1 flex-shrink-0" />
                <div>
                  <h4 className="font-bold text-cyan-800 mb-2">
                    {dict.mobile.matchReasonTitle}
                  </h4>
                  <p className="text-cyan-900 leading-relaxed italic font-medium text-sm">
                    &quot;{suggestion.matchingReason}&quot;
                  </p>
                </div>
              </div>
            </div>
          )}
          <div className="space-y-2">
            <div className="flex justify-between text-sm text-gray-600">
              <span>{statusText.description}</span>
              <span>{statusInfo.progress}%</span>
            </div>
            <Progress
              value={statusInfo.progress}
              className="h-2 bg-gray-100 shadow-inner"
            />
          </div>
          <div className="pt-4 border-t border-purple-100 space-y-4">
            <Button
              size="lg"
              className="w-full bg-gradient-to-r from-purple-600 via-pink-600 to-blue-600 hover:from-purple-700 hover:via-pink-700 hover:to-blue-700 shadow-xl hover:shadow-2xl transition-all duration-300 rounded-2xl h-14 font-bold text-lg transform hover:scale-105"
              onClick={() => onAction('view', suggestion)}
            >
              <Eye className="w-6 h-6 ml-3" />
              {dict.mobile.viewDetailsButton}
              <ArrowRight className="w-5 h-5 mr-2" />
            </Button>
            <div className="flex justify-between items-center">
              <span className="text-xs text-gray-500 font-medium">
                {dict.mobile.sentTime.replace(
                  '{{timeAgo}}',
                  formatDistanceToNow(new Date(suggestion.createdAt), {
                    addSuffix: true,
                    locale: he,
                  })
                )}
              </span>
              <DropdownMenu>
                <DropdownMenuTrigger asChild>
                  <Button
                    size="sm"
                    variant="ghost"
                    className="text-gray-500 hover:bg-purple-50 rounded-full"
                  >
                    <MoreHorizontal className="w-5 h-5" />
                  </Button>
                </DropdownMenuTrigger>
                <DropdownMenuContent align="end" className="w-48">
                  <DropdownMenuItem
                    onClick={() => onAction('edit', suggestion)}
                  >
                    <Edit className="w-4 h-4 ml-2" />
                    <span>{dict.actions.edit}</span>
                  </DropdownMenuItem>
                  <DropdownMenuItem
                    onClick={() => onAction('message', suggestion)}
                  >
                    <MessageCircle className="w-4 h-4 ml-2" />
                    <span>{dict.actions.sendMessage}</span>
                  </DropdownMenuItem>
                  <DropdownMenuItem
                    onClick={() => onAction('delete', suggestion)}
                    className="text-red-600 focus:text-red-600"
                  >
                    <Trash2 className="w-4 h-4 ml-2" />
                    <span>{dict.actions.delete}</span>
                  </DropdownMenuItem>
                </DropdownMenuContent>
              </DropdownMenu>
            </div>
          </div>
        </CardContent>
      </Card>
    );
  }

  const StatusIcon = statusInfo.icon;
  const PriorityIcon = priorityInfo.icon;
  const canBeResent = [
    'EXPIRED',
    'FIRST_PARTY_DECLINED',
    'SECOND_PARTY_DECLINED',
  ].includes(suggestion.status);

  return (
    <TooltipProvider>
      <Card
        className={cn(
          'overflow-hidden hover:shadow-2xl transition-all duration-500 group border-0 bg-gradient-to-br from-white via-gray-50/30 to-purple-50/20',
          className
        )}
      >
        <div
          className={cn(
            'p-6 border-b relative overflow-hidden bg-gradient-to-r shadow-lg',
            statusInfo.bgColor
          )}
        >
          <div className="absolute top-0 right-0 w-32 h-32 bg-gradient-to-br from-white/20 to-transparent rounded-full blur-2xl"></div>
          <div className="absolute bottom-0 left-0 w-24 h-24 bg-gradient-to-br from-white/10 to-transparent rounded-full blur-xl"></div>
          <div className="relative z-10">
            <div className="flex justify-between items-center mb-4">
              <div className="flex items-center gap-3">
                <div
                  className={cn(
                    'p-3 rounded-full shadow-lg group-hover:scale-110 transition-transform bg-white/20 backdrop-blur-sm'
                  )}
                >
                  <StatusIcon className={cn('w-6 h-6', statusInfo.color)} />
                </div>
                <div>
                  <span className="font-bold text-gray-900 text-lg">
                    {statusText.label}
                  </span>
                  <p className="text-sm text-gray-600 mt-1">
                    {statusText.description}
                  </p>
                </div>
              </div>
              <div className="flex items-center gap-3">
                <Badge className={priorityInfo.badgeClass}>
                  <PriorityIcon className="w-4 h-4 ml-2" />
                  {priorityText.label}
                </Badge>
                {daysLeft !== null &&
                  daysLeft <= 3 &&
                  suggestion.status !== 'EXPIRED' && (
                    <Badge className="bg-gradient-to-r from-red-500 to-pink-500 text-white border-0 shadow-xl animate-pulse">
                      <Clock className="w-3 h-3 ml-1" />
                      {daysLeft === 0
                        ? dict.deadline.lastDay
                        : dict.deadline.daysLeft.replace(
                            '{{count}}',
                            daysLeft.toString()
                          )}
                    </Badge>
                  )}
              </div>
            </div>
            <Progress
              value={statusInfo.progress}
              className="h-3 bg-white/30 shadow-inner"
            />
          </div>
        </div>
        <div className="p-6 space-y-6">
          <MatchmakerInfo dict={dict.matchmakerInfo} matchmaker={matchmaker} />
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div className="space-y-4 p-5 bg-gradient-to-br from-blue-50 to-cyan-50 rounded-2xl border border-blue-100 shadow-lg hover:shadow-xl transition-all duration-300">
              <PartyDisplay party={firstParty} />
              <div className="flex flex-wrap items-stretch gap-3 text-sm">
                {firstParty.profile?.occupation && (
                  <div className="flex-1 min-w-[120px] flex items-start gap-2 p-2 bg-white/70 rounded-lg shadow-sm">
                    <Briefcase className="w-4 h-4 text-blue-500 mt-0.5 flex-shrink-0" />
                    <span className="font-medium text-gray-700">
                      {firstParty.profile.occupation}
                    </span>
                  </div>
                )}
                {firstParty.profile?.education && (
                  <div className="flex-1 min-w-[120px] flex items-start gap-2 p-2 bg-white/70 rounded-lg shadow-sm">
                    <GraduationCap className="w-4 h-4 text-purple-500 mt-0.5 flex-shrink-0" />
                    <span className="font-medium text-gray-700">
                      {firstParty.profile.education}
                    </span>
                  </div>
                )}
              </div>
              {(suggestion.status === 'FIRST_PARTY_APPROVED' ||
                suggestion.status === 'FIRST_PARTY_DECLINED') && (
                <Badge
                  className={
                    suggestion.status === 'FIRST_PARTY_APPROVED'
                      ? 'bg-gradient-to-r from-green-500 to-emerald-500 text-white border-0 shadow-lg'
                      : 'bg-gradient-to-r from-red-500 to-pink-500 text-white border-0 shadow-lg'
                  }
                >
                  {suggestion.status === 'FIRST_PARTY_APPROVED' ? (
                    <>
                      <CheckCircle className="w-4 h-4 ml-2" />
                      {dict.desktop.partyStatus.approved}
                    </>
                  ) : (
                    <>
                      <XCircle className="w-4 h-4 ml-2" />
                      {dict.desktop.partyStatus.declined}
                    </>
                  )}
                </Badge>
              )}
            </div>
            <div className="space-y-4 p-5 bg-gradient-to-br from-purple-50 to-pink-50 rounded-2xl border border-purple-100 shadow-lg hover:shadow-xl transition-all duration-300">
              <PartyDisplay party={secondParty} />
              <div className="flex flex-wrap items-stretch gap-3 text-sm">
                {secondParty.profile?.occupation && (
                  <div className="flex-1 min-w-[120px] flex items-start gap-2 p-2 bg-white/70 rounded-lg shadow-sm">
                    <Briefcase className="w-4 h-4 text-purple-500 mt-0.5 flex-shrink-0" />
                    <span className="font-medium text-gray-700">
                      {secondParty.profile.occupation}
                    </span>
                  </div>
                )}
                {secondParty.profile?.education && (
                  <div className="flex-1 min-w-[120px] flex items-start gap-2 p-2 bg-white/70 rounded-lg shadow-sm">
                    <GraduationCap className="w-4 h-4 text-pink-500 mt-0.5 flex-shrink-0" />
                    <span className="font-medium text-gray-700">
                      {secondParty.profile.education}
                    </span>
                  </div>
                )}
              </div>
              {(suggestion.status === 'SECOND_PARTY_APPROVED' ||
                suggestion.status === 'SECOND_PARTY_DECLINED') && (
                <Badge
                  className={
                    suggestion.status === 'SECOND_PARTY_APPROVED'
                      ? 'bg-gradient-to-r from-green-500 to-emerald-500 text-white border-0 shadow-lg'
                      : 'bg-gradient-to-r from-red-500 to-pink-500 text-white border-0 shadow-lg'
                  }
                >
                  {suggestion.status === 'SECOND_PARTY_APPROVED' ? (
                    <>
                      <CheckCircle className="w-4 h-4 ml-2" />
                      {dict.desktop.partyStatus.approved}
                    </>
                  ) : (
                    <>
                      <XCircle className="w-4 h-4 ml-2" />
                      {dict.desktop.partyStatus.declined}
                    </>
                  )}
                </Badge>
              )}
            </div>
          </div>
          <div className="p-5 bg-gradient-to-r from-cyan-50 to-blue-50 rounded-2xl border border-cyan-100 shadow-lg">
            <h4 className="font-bold text-lg mb-3 text-cyan-800 flex items-center gap-2">
              <Sparkles className="w-5 h-5 text-cyan-500" />
              {dict.desktop.connectionPoints}
            </h4>
            <div className="flex flex-wrap gap-2">
              {highlights.map((highlight, index) => (
                <HighlightPill
                  key={index}
                  icon={highlight.icon}
                  text={highlight.text}
                  color={highlight.color}
                />
              ))}
            </div>
          </div>
          {suggestion.matchingReason && (
            <div className="p-5 bg-gradient-to-r from-emerald-50 to-green-50 rounded-2xl border border-emerald-100 shadow-lg">
              <h5 className="text-sm font-bold text-emerald-700 mb-2 flex items-center gap-2">
                <Quote className="w-4 h-4" />
                {dict.desktop.matchReasonTitle}
              </h5>
              <p className="text-emerald-800 leading-relaxed font-medium">
                {suggestion.matchingReason}
              </p>
            </div>
          )}
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4 text-sm">
            <div className="flex items-center gap-2 p-3 bg-gray-50 rounded-xl shadow-sm">
              <Clock className="w-4 h-4 text-gray-500" />
              <div>
                <p className="font-medium text-gray-600">
                  {dict.desktop.timeline.created}
                </p>
                <p className="text-gray-800">
                  {formatDistanceToNow(new Date(suggestion.createdAt), {
                    addSuffix: true,
                    locale: he,
                  })}
                </p>
              </div>
            </div>
            {suggestion.decisionDeadline && (
              <div className="flex items-center gap-2 p-3 bg-orange-50 rounded-xl shadow-sm">
                <CalendarClock className="w-4 h-4 text-orange-500" />
                <div>
                  <p className="font-medium text-orange-600">
                    {dict.desktop.timeline.deadline}
                  </p>
                  <p className="text-orange-800">
                    {daysLeft !== null
                      ? daysLeft === 0
                        ? dict.deadline.today
                        : dict.deadline.decisionInDays.replace(
                            '{{count}}',
                            daysLeft.toString()
                          )
                      : dict.deadline.noDeadline}
                  </p>
                </div>
              </div>
            )}
            <div className="flex items-center gap-2 p-3 bg-blue-50 rounded-xl shadow-sm">
              <TrendingUp className="w-4 h-4 text-blue-500" />
              <div>
                <p className="font-medium text-blue-600">
                  {dict.desktop.timeline.progress}
                </p>
                <p className="text-blue-800">
                  {dict.desktop.timeline.progressCompleted.replace(
                    '{{percent}}',
                    statusInfo.progress.toString()
                  )}
                </p>
              </div>
            </div>
          </div>
          <div className="flex items-center justify-between pt-4 border-t border-gray-100">
            <div className="flex items-center gap-2">
              <Button
                variant="ghost"
                size="sm"
                onClick={() => onAction('message', suggestion)}
                className="text-blue-600 hover:text-blue-700 hover:bg-blue-50 rounded-xl font-medium"
              >
                <MessageCircle className="w-4 h-4 ml-2" />
                {dict.actions.sendMessage}
              </Button>
              {canBeResent && (
                <Button
                  variant="ghost"
                  size="sm"
                  onClick={() => onAction('resend', suggestion)}
                  className="text-green-600 hover:text-green-700 hover:bg-green-50 rounded-xl font-medium"
                >
                  <RefreshCw className="w-4 h-4 ml-2" />
                  {dict.actions.resend}
                </Button>
              )}
            </div>
            <div className="flex items-center gap-2">
              <Button
                variant="default"
                size="sm"
                onClick={() => onAction('view', suggestion)}
                className="bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-700 hover:to-pink-700 shadow-lg hover:shadow-xl transition-all duration-300 rounded-xl font-medium"
              >
                <Eye className="w-4 h-4 ml-2" />
                {dict.actions.viewDetails}
              </Button>
              <DropdownMenu>
                <DropdownMenuTrigger asChild>
                  <Button
                    size="sm"
                    variant="ghost"
                    className="px-2 hover:bg-gray-100 rounded-xl"
                  >
                    <MoreHorizontal className="w-4 h-4" />
                  </Button>
                </DropdownMenuTrigger>
                <DropdownMenuContent align="end" className="w-48">
                  <DropdownMenuItem
                    onClick={() => onAction('edit', suggestion)}
                  >
                    <Edit className="w-4 h-4 ml-2" />
                    <span>{dict.actions.edit}</span>
                  </DropdownMenuItem>
                  {canBeResent && (
                    <DropdownMenuItem
                      onClick={() => onAction('resend', suggestion)}
                    >
                      <RefreshCw className="w-4 h-4 ml-2" />
                      <span>{dict.actions.resend}</span>
                    </DropdownMenuItem>
                  )}
                  <DropdownMenuItem
                    onClick={() => onAction('delete', suggestion)}
                    className="text-red-600 focus:text-red-600 focus:bg-red-50"
                  >
                    <Trash2 className="w-4 h-4 ml-2" />
                    <span>{dict.actions.delete}</span>
                  </DropdownMenuItem>
                </DropdownMenuContent>
              </DropdownMenu>
            </div>
          </div>
        </div>
      </Card>
    </TooltipProvider>
  );
};

export default SuggestionCard;
--- End of Content for SuggestionCard.tsx ---

================================================================================
Directory: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\suggestions\container
================================================================================

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\suggestions\container\MatchmakerDashboard.tsx
--------------------------------------------------------------------------------
Content:
'use client';

import React, { useState, useCallback, useEffect, useMemo } from 'react';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Card, CardContent } from '@/components/ui/card';
import { useSession } from 'next-auth/react';
import type {
  SuggestionsDictionary,
  MatchmakerPageDictionary,
  ProfilePageDictionary,
} from '@/types/dictionary';
import {
  Plus,
  RefreshCw,
  BarChart,
  Loader2,
  List,
  Archive,
  LayoutGrid,
  Filter,
  Search,
  TrendingUp,
  Users,
  Clock,
  CheckCircle,
  XCircle,
  Heart,
  Sparkles,
  Calendar,
  Target,
  Crown,
  Zap,
  Eye,
  MessageCircle,
  Settings,
  Award,
  Activity,
  Star,
  ArrowUp,
  ArrowDown,
} from 'lucide-react';
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
} from '@/components/ui/alert-dialog';
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
} from '@/components/ui/dialog';
import {
  Sheet,
  SheetContent,
  SheetHeader,
  SheetTitle,
  SheetTrigger,
} from '@/components/ui/sheet';
import { ToggleGroup, ToggleGroupItem } from '@/components/ui/toggle-group';
import { toast } from 'sonner';
import { MatchSuggestionStatus, Priority } from '@prisma/client';
import { cn } from '@/lib/utils';

// Type imports
import type {
  Suggestion,
  SuggestionFilters,
  ActionAdditionalData,
} from '@/types/suggestions';
import type { NewSuggestionFormData } from '../../suggestions/NewSuggestionForm/schema';
import type { Candidate } from '../../new/types/candidates';

// Hooks
import { useCandidates } from '../../new/hooks/useCandidates';

// Components
import NewSuggestionForm from '../../suggestions/NewSuggestionForm';
import SuggestionActionBar from './SuggestionActionBar';
import SuggestionDetailsDialog from '../details/SuggestionDetailsDialog';
import SuggestionCard from '../cards/SuggestionCard';
import EditSuggestionForm from '../EditSuggestionForm';
import MessageForm from '../MessageForm';
import MonthlyTrendModal from './MonthlyTrendModal';
import { ScrollArea } from '@/components/ui/scroll-area';
import { Input } from '@/components/ui/input';

// Media query hook
const useMediaQuery = (query: string) => {
  const [matches, setMatches] = useState(false);
  useEffect(() => {
    if (typeof window === 'undefined') return;
    const media = window.matchMedia(query);
    if (media.matches !== matches) {
      setMatches(media.matches);
    }
    const listener = () => setMatches(media.matches);
    window.addEventListener('resize', listener);
    return () => window.removeEventListener('resize', listener);
  }, [matches, query]);
  return matches;
};

// Enhanced Hero Section Component
const MatchmakerHeroSection: React.FC<{
  dict: MatchmakerPageDictionary['suggestionsDashboard']['heroSection'];
  onNewSuggestion: () => void;
  onRefresh: () => void;
  isRefreshing: boolean;
  stats: {
    total: number;
    pending: number;
    active: number;
    success: number;
    thisMonth: number;
    successRate: number;
  };
}> = ({ dict, onNewSuggestion, onRefresh, isRefreshing, stats }) => {
  return (
    <div className="relative min-h-[400px] bg-gradient-to-br from-purple-50 via-cyan-50/30 to-emerald-50/20 overflow-hidden rounded-3xl shadow-2xl mb-8">
      <div className="absolute inset-0">
        <div className="absolute top-10 right-10 w-64 h-64 bg-gradient-to-br from-purple-200/30 to-pink-200/30 rounded-full blur-3xl animate-float"></div>
        <div
          className="absolute bottom-10 left-10 w-48 h-48 bg-gradient-to-br from-cyan-200/30 to-blue-200/30 rounded-full blur-2xl animate-float"
          style={{ animationDelay: '2s' }}
        ></div>
        <div
          className="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-80 h-80 bg-gradient-to-br from-emerald-200/20 to-green-200/20 rounded-full blur-3xl animate-float"
          style={{ animationDelay: '4s' }}
        ></div>
      </div>

      <div className="relative z-10 p-8 lg:p-12">
        <div className="text-center mb-8">
          <div className="inline-flex items-center gap-3 mb-6">
            <div className="p-4 rounded-full bg-gradient-to-r from-purple-500 to-pink-500 text-white shadow-lg">
              <Crown className="w-10 h-10" />
            </div>
          </div>
          <h1 className="text-4xl md:text-5xl font-bold bg-gradient-to-r from-purple-600 via-pink-600 to-blue-600 bg-clip-text text-transparent mb-4">
            {dict.title}
          </h1>
          <p className="text-xl text-gray-700 max-w-2xl mx-auto leading-relaxed">
            {dict.subtitle}
          </p>
        </div>
        <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mb-8">
          <Card className="border-0 shadow-lg bg-white/80 backdrop-blur-sm hover:shadow-xl transition-all duration-300 group">
            <CardContent className="p-4 text-center">
              <div className="flex items-center justify-center gap-2 mb-2">
                <div className="p-2 rounded-full bg-gradient-to-r from-blue-500 to-cyan-500 text-white shadow-lg group-hover:scale-110 transition-transform">
                  <Users className="w-5 h-5" />
                </div>
                <span className="text-2xl font-bold text-blue-600">
                  {stats.total}
                </span>
              </div>
              <p className="text-sm text-gray-600 font-medium">
                {dict.totalSuggestions}
              </p>
            </CardContent>
          </Card>
          <Card className="border-0 shadow-lg bg-white/80 backdrop-blur-sm hover:shadow-xl transition-all duration-300 group">
            <CardContent className="p-4 text-center">
              <div className="flex items-center justify-center gap-2 mb-2">
                <div className="p-2 rounded-full bg-gradient-to-r from-orange-500 to-amber-500 text-white shadow-lg group-hover:scale-110 transition-transform">
                  <Clock className="w-5 h-5" />
                </div>
                <span className="text-2xl font-bold text-orange-600">
                  {stats.pending}
                </span>
              </div>
              <p className="text-sm text-gray-600 font-medium">
                {dict.pendingResponse}
              </p>
            </CardContent>
          </Card>
          <Card className="border-0 shadow-lg bg-white/80 backdrop-blur-sm hover:shadow-xl transition-all duration-300 group">
            <CardContent className="p-4 text-center">
              <div className="flex items-center justify-center gap-2 mb-2">
                <div className="p-2 rounded-full bg-gradient-to-r from-green-500 to-emerald-500 text-white shadow-lg group-hover:scale-110 transition-transform">
                  <Heart className="w-5 h-5" />
                </div>
                <span className="text-2xl font-bold text-green-600">
                  {stats.success}
                </span>
              </div>
              <p className="text-sm text-gray-600 font-medium">
                {dict.successfulMatches}
              </p>
            </CardContent>
          </Card>
          <Card className="border-0 shadow-lg bg-white/80 backdrop-blur-sm hover:shadow-xl transition-all duration-300 group">
            <CardContent className="p-4 text-center">
              <div className="flex items-center justify-center gap-2 mb-2">
                <div className="p-2 rounded-full bg-gradient-to-r from-purple-500 to-pink-500 text-white shadow-lg group-hover:scale-110 transition-transform">
                  <TrendingUp className="w-5 h-5" />
                </div>
                <span className="text-2xl font-bold text-purple-600">
                  {stats.successRate}%
                </span>
              </div>
              <p className="text-sm text-gray-600 font-medium">
                {dict.successRate}
              </p>
            </CardContent>
          </Card>
        </div>
        <div className="flex flex-col md:flex-row items-center justify-center gap-4">
          <Button
            onClick={onNewSuggestion}
            size="lg"
            className="bg-gradient-to-r from-purple-600 via-pink-600 to-blue-600 hover:from-purple-700 hover:via-pink-700 hover:to-blue-700 text-white shadow-xl hover:shadow-2xl transition-all duration-300 rounded-2xl px-8 py-4 font-bold text-lg transform hover:scale-105"
          >
            <Plus className="w-6 h-6 ml-3" />
            {dict.newSuggestionButton}
            <Sparkles className="w-5 h-5 mr-2" />
          </Button>
          <Button
            variant="outline"
            size="lg"
            onClick={onRefresh}
            disabled={isRefreshing}
            className="border-2 border-purple-300 text-purple-600 hover:bg-purple-50 shadow-lg hover:shadow-xl transition-all duration-300 rounded-2xl px-6 py-4 font-bold text-lg transform hover:scale-105"
          >
            <RefreshCw
              className={cn('w-5 h-5 ml-2', isRefreshing && 'animate-spin')}
            />
            {isRefreshing ? dict.refreshingButton : dict.refreshButton}
          </Button>
        </div>
      </div>
    </div>
  );
};

// Payload types
interface SuggestionUpdatePayload {
  priority?: Priority;
  status?: MatchSuggestionStatus;
  statusNotes?: string;
  matchingReason?: string;
  firstPartyNotes?: string;
  secondPartyNotes?: string;
  internalNotes?: string;
  decisionDeadline?: Date;
}

interface SendMessagePayload {
  suggestionId: string;
  partyType: 'first' | 'second' | 'both';
  messageType: 'message' | 'reminder' | 'update';
  messageContent: string;
}

type DialogActionData = {
  suggestionId?: string;
  newStatus?: MatchSuggestionStatus;
  notes?: string;
  suggestion?: Suggestion;
  partyType?: 'first' | 'second' | 'both';
  type?: string;
};

type ConfirmActionData = {
  suggestionId: string;
  partyType?: 'first' | 'second' | 'both';
  type?: string;
};

type SuggestionCardActionType =
  | 'view'
  | 'contact'
  | 'message'
  | 'edit'
  | 'delete'
  | 'resend'
  | 'changeStatus'
  | 'reminder';

type SuggestionDetailsActionType =
  | SuggestionCardActionType
  | 'sendReminder'
  | 'shareContacts'
  | 'scheduleMeeting'
  | 'viewMeetings'
  | 'exportHistory'
  | 'export'
  | 'resendToAll';

interface MatchmakerDashboardProps {
  suggestionsDict: SuggestionsDictionary;
  matchmakerDict: MatchmakerPageDictionary;
  profileDict: ProfilePageDictionary;
}

export default function MatchmakerDashboard({
  suggestionsDict,
  matchmakerDict,
  profileDict,
}: MatchmakerDashboardProps) {
  const dashboardDict = matchmakerDict.suggestionsDashboard;
  const toastsDict = dashboardDict.toasts;

  const isMobile = useMediaQuery('(max-width: 768px)');
  const [mobileView, setMobileView] = useState<'list' | 'kanban'>('list');
  const [showMobileFilters, setShowMobileFilters] = useState(false);
  const { data: session } = useSession();

  const [activeTab, setActiveTab] = useState('pending');
  const [showNewSuggestion, setShowNewSuggestion] = useState(false);
  const [searchQuery, setSearchQuery] = useState('');
  const [filters, setFilters] = useState<SuggestionFilters>({});
  const [suggestions, setSuggestions] = useState<Suggestion[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [isRefreshing, setIsRefreshing] = useState(false);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [selectedSuggestion, setSelectedSuggestion] =
    useState<Suggestion | null>(null);
  const [showConfirmDialog, setShowConfirmDialog] = useState(false);
  const [confirmAction, setConfirmAction] = useState<{
    type: string;
    data: ConfirmActionData;
  } | null>(null);
  const [showEditForm, setShowEditForm] = useState(false);
  const [showMessageForm, setShowMessageForm] = useState(false);
  const [showMonthlyTrendDialog, setShowMonthlyTrendDialog] = useState(false);

  const { candidates: allCandidates } = useCandidates();

  const fetchSuggestions = useCallback(async () => {
    setIsLoading(true);
    try {
      const response = await fetch('/api/matchmaker/suggestions');
      if (!response.ok) throw new Error('Failed to fetch suggestions');
      const data = await response.json();
      setSuggestions(data);
    } catch (error: unknown) {
      console.error('Error fetching suggestions:', error);
      toast.error(toastsDict.loadError);
    } finally {
      setIsLoading(false);
    }
  }, [toastsDict.loadError]);

  useEffect(() => {
    fetchSuggestions();
  }, [fetchSuggestions]);

  const filteredSuggestions = useMemo(() => {
    return suggestions.filter((s) => {
      if (searchQuery) {
        const query = searchQuery.toLowerCase();
        const match =
          (s.firstParty.firstName + ' ' + s.firstParty.lastName)
            .toLowerCase()
            .includes(query) ||
          (s.secondParty.firstName + ' ' + s.secondParty.lastName)
            .toLowerCase()
            .includes(query) ||
          (s.firstParty.profile?.city &&
            s.firstParty.profile.city.toLowerCase().includes(query)) ||
          (s.secondParty.profile?.city &&
            s.secondParty.profile.city.toLowerCase().includes(query));
        if (!match) return false;
      }
      if (filters.priority?.length && !filters.priority.includes(s.priority))
        return false;
      if (filters.status?.length && !filters.status.includes(s.status))
        return false;
      if (filters.dateRange) {
        const createdAt = new Date(s.createdAt);
        if (
          createdAt < filters.dateRange.start ||
          (filters.dateRange.end && createdAt > filters.dateRange.end)
        )
          return false;
      }
      return true;
    });
  }, [suggestions, searchQuery, filters]);

  const pendingSuggestions = useMemo(
    () => filteredSuggestions.filter((s) => s.category === 'PENDING'),
    [filteredSuggestions]
  );
  const activeSuggestions = useMemo(
    () => filteredSuggestions.filter((s) => s.category === 'ACTIVE'),
    [filteredSuggestions]
  );
  const historySuggestions = useMemo(
    () => filteredSuggestions.filter((s) => s.category === 'HISTORY'),
    [filteredSuggestions]
  );

  const pendingCount = pendingSuggestions.length;
  const activeCount = activeSuggestions.length;
  const historyCount = historySuggestions.length;

  const handleRefresh = async () => {
    setIsRefreshing(true);
    await fetchSuggestions();
    setIsRefreshing(false);
    toast.success(toastsDict.refreshSuccess);
  };

  const handleNewSuggestion = async (data: NewSuggestionFormData) => {
    try {
      const response = await fetch('/api/matchmaker/suggestions', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(data),
      });
      if (!response.ok)
        throw new Error(
          (await response.json()).error || 'Failed to create suggestion'
        );
      setShowNewSuggestion(false);
      toast.success(toastsDict.createSuccess);
      await fetchSuggestions();
    } catch (error: unknown) {
      console.error('Error creating suggestion:', error);
      toast.error(
        `${toastsDict.createError}: ${error instanceof Error ? error.message : ''}`
      );
    }
  };

  const handleSuggestionDeleted = useCallback(
    (deletedId: string) => {
      setSuggestions((prev) => prev.filter((s) => s.id !== deletedId));
      if (selectedSuggestion?.id === deletedId) setSelectedSuggestion(null);
    },
    [selectedSuggestion]
  );

  const handleConfirmAction = async () => {
    if (!confirmAction) return;
    try {
      if (confirmAction.type === 'delete') {
        const response = await fetch(
          `/api/matchmaker/suggestions/${confirmAction.data.suggestionId}/delete`,
          { method: 'DELETE' }
        );
        if (!response.ok) throw new Error('Failed to delete suggestion');
        handleSuggestionDeleted(confirmAction.data.suggestionId);
        toast.success(toastsDict.deleteSuccess);
      }
    } catch (error: unknown) {
      toast.error(toastsDict.deleteError);
    } finally {
      setShowConfirmDialog(false);
      setConfirmAction(null);
    }
  };

  const handleStatusChange = async (
    suggestionId: string,
    newStatus: MatchSuggestionStatus,
    notes?: string
  ) => {
    try {
      const response = await fetch(
        `/api/matchmaker/suggestions/${suggestionId}/status`,
        {
          method: 'PATCH',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            status: newStatus,
            notes: notes || `סטטוס שונה ממממשק ניהול`,
          }),
        }
      );
      if (!response.ok)
        throw new Error(
          (await response.json()).error || 'Failed to update status'
        );
      toast.success(toastsDict.statusUpdateSuccess);
      fetchSuggestions();
    } catch (error: unknown) {
      console.error('Error updating suggestion status:', error);
      toast.error(
        `${toastsDict.statusUpdateError}: ${error instanceof Error ? error.message : ''}`
      );
    }
  };

  const handleUpdateSuggestion = async (data: {
    suggestionId: string;
    updates: SuggestionUpdatePayload;
  }) => {
    try {
      setIsSubmitting(true);
      // ... (API logic remains)
      toast.success(toastsDict.updateSuccess);
      setShowEditForm(false);
      await fetchSuggestions();
    } catch (error) {
      console.error('Error updating suggestion:', error);
      toast.error(
        `${toastsDict.updateError}: ${error instanceof Error ? error.message : 'שגיאה לא ידועה'}`
      );
    } finally {
      setIsSubmitting(false);
    }
  };

  const handleSendMessage = async (data: SendMessagePayload) => {
    try {
      // ... (API logic remains)
      toast.success(toastsDict.messageSentSuccess);
      setShowMessageForm(false);
    } catch (error: unknown) {
      toast.error(
        `${toastsDict.messageSentError}: ${error instanceof Error ? error.message : ''}`
      );
    }
  };

  const handleDialogAction = (
    action: SuggestionDetailsActionType,
    data?: DialogActionData
  ) => {
    setSelectedSuggestion(data?.suggestion || null);
    if (action === 'view' && data?.suggestion) {
      setSelectedSuggestion(data.suggestion);
    } else if (action === 'delete' && data?.suggestionId) {
      setConfirmAction({
        type: 'delete',
        data: { suggestionId: data.suggestionId },
      });
      setShowConfirmDialog(true);
    } else if (action === 'edit' && data?.suggestion) {
      setShowEditForm(true);
    } else if (action === 'message' && data?.suggestion) {
      setShowMessageForm(true);
    } else if (
      action === 'changeStatus' &&
      data?.suggestionId &&
      data.newStatus
    ) {
      handleStatusChange(data.suggestionId, data.newStatus, data.notes);
    }
  };

  const handleSuggestionAction = (
    type: SuggestionCardActionType,
    suggestion: Suggestion,
    additionalData?: ActionAdditionalData
  ) => {
    handleDialogAction(type, {
      ...additionalData,
      suggestionId: suggestion.id,
      suggestion,
    });
  };

  const kanbanColumns = useMemo(() => {
    const columns: {
      title: string;
      suggestions: Suggestion[];
      color: string;
      icon: React.ElementType;
    }[] = [
      {
        title: dashboardDict.kanban.requiresAction,
        suggestions: [],
        color: 'from-red-500 to-orange-500',
        icon: Clock,
      },
      {
        title: dashboardDict.kanban.pendingResponse,
        suggestions: [],
        color: 'from-yellow-500 to-amber-500',
        icon: MessageCircle,
      },
      {
        title: dashboardDict.kanban.inProgress,
        suggestions: [],
        color: 'from-green-500 to-emerald-500',
        icon: Target,
      },
      {
        title: dashboardDict.kanban.history,
        suggestions: [],
        color: 'from-gray-500 to-slate-500',
        icon: Archive,
      },
    ];
    // ... (logic remains the same)
    return columns;
  }, [filteredSuggestions, dashboardDict.kanban]);

  const heroStats = useMemo(() => {
    // ... (logic remains the same)
    const total = suggestions.length;
    const pending = suggestions.filter(
      (s) =>
        s.status === 'PENDING_FIRST_PARTY' ||
        s.status === 'PENDING_SECOND_PARTY'
    ).length;
    const active = suggestions.filter(
      (s) => !['CLOSED', 'CANCELLED', 'EXPIRED'].includes(s.status)
    ).length;
    const success = suggestions.filter((s) =>
      ['MARRIED', 'ENGAGED', 'DATING'].includes(s.status)
    ).length;
    const thisMonth = suggestions.filter((s) => {
      const created = new Date(s.createdAt);
      const now = new Date();
      return (
        created.getMonth() === now.getMonth() &&
        created.getFullYear() === now.getFullYear()
      );
    }).length;
    const successRate = total > 0 ? Math.round((success / total) * 100) : 0;
    return { total, pending, active, success, thisMonth, successRate };
  }, [suggestions]);

  const renderMobileFilters = () => (
    <Sheet open={showMobileFilters} onOpenChange={setShowMobileFilters}>
      <SheetTrigger asChild>
        <Button
          variant="outline"
          size="sm"
          className="bg-white/80 backdrop-blur-sm shadow-lg"
        >
          <Filter className="w-4 h-4 mr-2" />
          {dashboardDict.mobile.filter}
        </Button>
      </SheetTrigger>
      <SheetContent className="w-full">
        <SheetHeader>
          <SheetTitle>{dashboardDict.mobile.filter}</SheetTitle>
        </SheetHeader>
        <div className="py-4">
          <SuggestionActionBar
            searchQuery={searchQuery}
            onSearchChange={setSearchQuery}
            filters={filters}
            onFiltersChange={setFilters}
            totalCount={suggestions.length}
            activeCount={activeCount}
            pendingCount={pendingCount}
            historyCount={historyCount}
            dict={dashboardDict.actionBar}
          />
        </div>
      </SheetContent>
    </Sheet>
  );

  const renderMobileView = () => (
    <div className="min-h-screen bg-gradient-to-br from-slate-50 via-cyan-50/20 to-emerald-50/20">
      <div className="p-4">
        <MatchmakerHeroSection
          dict={dashboardDict.heroSection}
          onNewSuggestion={() => setShowNewSuggestion(true)}
          onRefresh={handleRefresh}
          isRefreshing={isRefreshing}
          stats={heroStats}
        />
      </div>
      <div className="flex items-center justify-between p-4 bg-white/80 backdrop-blur-sm border-b sticky top-0 z-10 shadow-lg">
        <div className="relative flex-1">
          <Search className="absolute right-3 top-2.5 h-4 w-4 text-gray-400" />
          <Input
            placeholder={dashboardDict.mobile.searchPlaceholder}
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
            className="pl-10 text-right pr-10 bg-white/90 shadow-sm border-purple-200 focus:border-purple-400"
          />
        </div>
        <div className="mr-2">{renderMobileFilters()}</div>
        <ToggleGroup
          type="single"
          value={mobileView}
          onValueChange={(value: 'list' | 'kanban') =>
            value && setMobileView(value)
          }
          className="mr-2"
        >
          <ToggleGroupItem
            value="list"
            aria-label={dashboardDict.mobile.list}
            className="data-[state=on]:bg-purple-100 data-[state=on]:text-purple-700"
          >
            <List className="h-4 w-4" />
          </ToggleGroupItem>
          <ToggleGroupItem
            value="kanban"
            aria-label={dashboardDict.mobile.kanban}
            className="data-[state=on]:bg-purple-100 data-[state=on]:text-purple-700"
          >
            <LayoutGrid className="h-4 w-4" />
          </ToggleGroupItem>
        </ToggleGroup>
      </div>
      {isLoading ? (
        <div className="flex-1 flex items-center justify-center p-8">
          <div className="text-center">
            <Loader2 className="w-12 h-12 animate-spin text-purple-600 mx-auto mb-4" />
            <p className="text-lg font-semibold text-gray-700">
              {dashboardDict.mainContent.loadingText}
            </p>
          </div>
        </div>
      ) : mobileView === 'kanban' ? (
        <ScrollArea className="w-full whitespace-nowrap flex-1">
          <div className="flex gap-4 p-4 h-full">
            {kanbanColumns.map((col, idx) => {
              const IconComponent = col.icon;
              return (
                <div
                  key={idx}
                  className="w-72 flex-shrink-0 bg-white/90 backdrop-blur-sm rounded-2xl shadow-xl flex flex-col border border-gray-200"
                >
                  <div
                    className={cn(
                      'p-4 font-semibold text-sm border-b sticky top-0 bg-gradient-to-r text-white rounded-t-2xl z-10 shadow-lg',
                      col.color
                    )}
                  >
                    <div className="flex items-center justify-between">
                      <div className="flex items-center gap-2">
                        <IconComponent className="w-5 h-5" />
                        <span>{col.title}</span>
                      </div>
                      <Badge
                        variant="secondary"
                        className="bg-white/20 text-white border-white/30"
                      >
                        {col.suggestions.length}
                      </Badge>
                    </div>
                  </div>
                  <ScrollArea className="flex-1 p-3">
                    <div className="space-y-3">
                      {col.suggestions.length > 0 ? (
                        col.suggestions.map((s) => (
                          <SuggestionCard
                            key={s.id}
                            suggestion={s}
                            onAction={handleSuggestionAction}
                            variant="compact"
                            className="shadow-lg hover:shadow-xl transition-all duration-300"
                            dict={dashboardDict.suggestionCard}
                          />
                        ))
                      ) : (
                        <div className="p-6 text-center text-sm text-gray-500 bg-gray-50 rounded-xl">
                          <IconComponent className="w-8 h-8 mx-auto mb-2 text-gray-400" />
                          <p>{dashboardDict.kanban.noSuggestions}</p>
                        </div>
                      )}
                    </div>
                  </ScrollArea>
                </div>
              );
            })}
          </div>
        </ScrollArea>
      ) : (
        <ScrollArea className="flex-1">
          <div className="p-4 space-y-4">
            {filteredSuggestions.map((s) => (
              <SuggestionCard
                key={s.id}
                suggestion={s}
                onAction={handleSuggestionAction}
                variant="full"
                className="shadow-lg hover:shadow-xl transition-all duration-300"
                dict={dashboardDict.suggestionCard}
              />
            ))}
            {filteredSuggestions.length === 0 && (
              <div className="text-center p-12">
                <div className="w-24 h-24 rounded-full bg-gradient-to-br from-purple-100 to-pink-100 flex items-center justify-center mx-auto mb-6">
                  <Users className="w-12 h-12 text-purple-400" />
                </div>
                <h3 className="text-xl font-bold text-gray-800 mb-2">
                  {dashboardDict.mobile.noMatches.title}
                </h3>
                <p className="text-gray-600">
                  {dashboardDict.mobile.noMatches.description}
                </p>
              </div>
            )}
          </div>
        </ScrollArea>
      )}
      <div className="p-4 bg-white/80 backdrop-blur-sm border-t sticky bottom-0">
        <Button
          onClick={() => setShowNewSuggestion(true)}
          className="w-full bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-700 hover:to-pink-700 shadow-xl text-lg py-6 rounded-2xl"
        >
          <Plus className="w-6 h-6 mr-3" />
          {dashboardDict.mobile.newSuggestionButton}
          <Sparkles className="w-5 h-5 ml-2" />
        </Button>
      </div>
    </div>
  );

  const renderDesktopView = () => (
    <div className="min-h-screen bg-gradient-to-br from-slate-50 via-cyan-50/20 to-emerald-50/20">
      <div className="container mx-auto p-6 space-y-8">
        <MatchmakerHeroSection
          dict={dashboardDict.heroSection}
          onNewSuggestion={() => setShowNewSuggestion(true)}
          onRefresh={handleRefresh}
          isRefreshing={isRefreshing}
          stats={heroStats}
        />
        <Card className="shadow-2xl border-0 bg-white/95 backdrop-blur-sm overflow-hidden rounded-3xl">
          <div className="bg-gradient-to-r from-white via-purple-50/30 to-pink-50/30 border-b border-purple-100 p-6">
            <Tabs value={activeTab} onValueChange={setActiveTab}>
              <div className="flex items-center justify-between mb-6">
                <div className="flex items-center gap-3">
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={() => setShowMonthlyTrendDialog(true)}
                    className="border-purple-200 hover:bg-purple-50 text-purple-600"
                  >
                    <BarChart className="w-4 h-4 mr-2" />
                    {dashboardDict.mainContent.monthlyTrendButton}
                  </Button>
                </div>
                <TabsList className="bg-purple-50/50 rounded-2xl p-1 h-14">
                  <TabsTrigger
                    value="pending"
                    className="flex items-center gap-3 px-6 py-3 rounded-xl transition-all data-[state=active]:bg-white data-[state=active]:shadow-lg font-semibold text-base"
                  >
                    <Clock className="w-5 h-5 text-orange-500" />
                    <span>{dashboardDict.mainContent.tabs.pending}</span>
                    {pendingCount > 0 && (
                      <Badge className="bg-orange-500 text-white border-0 px-2 py-1 text-xs font-bold rounded-full min-w-[24px] h-6">
                        {pendingCount}
                      </Badge>
                    )}
                  </TabsTrigger>
                  <TabsTrigger
                    value="active"
                    className="flex items-center gap-3 px-6 py-3 rounded-xl transition-all data-[state=active]:bg-white data-[state=active]:shadow-lg font-semibold text-base"
                  >
                    <Target className="w-5 h-5 text-green-500" />
                    <span>{dashboardDict.mainContent.tabs.active}</span>
                    {activeCount > 0 && (
                      <Badge className="bg-green-500 text-white border-0 px-2 py-1 text-xs font-bold rounded-full min-w-[24px] h-6">
                        {activeCount}
                      </Badge>
                    )}
                  </TabsTrigger>
                  <TabsTrigger
                    value="history"
                    className="flex items-center gap-3 px-6 py-3 rounded-xl transition-all data-[state=active]:bg-white data-[state=active]:shadow-lg font-semibold text-base"
                  >
                    <Archive className="w-5 h-5 text-gray-500" />
                    <span>{dashboardDict.mainContent.tabs.history}</span>
                    {historyCount > 0 && (
                      <Badge className="bg-gray-500 text-white border-0 px-2 py-1 text-xs font-bold rounded-full min-w-[24px] h-6">
                        {historyCount}
                      </Badge>
                    )}
                  </TabsTrigger>
                </TabsList>
              </div>
              <SuggestionActionBar
                searchQuery={searchQuery}
                onSearchChange={setSearchQuery}
                filters={filters}
                onFiltersChange={setFilters}
                totalCount={suggestions.length}
                activeCount={activeCount}
                pendingCount={pendingCount}
                historyCount={historyCount}
                dict={dashboardDict.actionBar}
              />
              {isLoading ? (
                <div className="flex items-center justify-center h-64">
                  <div className="text-center">
                    <Loader2 className="w-12 h-12 animate-spin text-purple-600 mx-auto mb-4" />
                    <p className="text-lg font-semibold text-gray-700">
                      {dashboardDict.mainContent.loadingText}
                    </p>
                  </div>
                </div>
              ) : (
                <>
                  <TabsContent value="pending" className="mt-6">
                    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                      {pendingSuggestions.map((suggestion) => (
                        <div key={suggestion.id} className="animate-fade-in-up">
                          <SuggestionCard
                            suggestion={suggestion}
                            onAction={handleSuggestionAction}
                            className="shadow-lg hover:shadow-xl transition-all duration-300"
                            dict={dashboardDict.suggestionCard}
                          />
                        </div>
                      ))}
                    </div>
                    {pendingSuggestions.length === 0 && (
                      <div className="text-center p-12">
                        <div className="w-24 h-24 rounded-full bg-gradient-to-br from-orange-100 to-amber-100 flex items-center justify-center mx-auto mb-6">
                          <Clock className="w-12 h-12 text-orange-400" />
                        </div>
                        <h3 className="text-xl font-bold text-gray-800 mb-2">
                          {dashboardDict.mainContent.emptyStates.pending.title}
                        </h3>
                        <p className="text-gray-600">
                          {
                            dashboardDict.mainContent.emptyStates.pending
                              .description
                          }
                        </p>
                      </div>
                    )}
                  </TabsContent>
                  <TabsContent value="active" className="mt-6">
                    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                      {activeSuggestions.map((suggestion) => (
                        <div key={suggestion.id} className="animate-fade-in-up">
                          <SuggestionCard
                            suggestion={suggestion}
                            onAction={handleSuggestionAction}
                            className="shadow-lg hover:shadow-xl transition-all duration-300"
                            dict={dashboardDict.suggestionCard}
                          />
                        </div>
                      ))}
                    </div>
                    {activeSuggestions.length === 0 && (
                      <div className="text-center p-12">
                        <div className="w-24 h-24 rounded-full bg-gradient-to-br from-green-100 to-emerald-100 flex items-center justify-center mx-auto mb-6">
                          <Target className="w-12 h-12 text-green-400" />
                        </div>
                        <h3 className="text-xl font-bold text-gray-800 mb-2">
                          {dashboardDict.mainContent.emptyStates.active.title}
                        </h3>
                        <p className="text-gray-600">
                          {
                            dashboardDict.mainContent.emptyStates.active
                              .description
                          }
                        </p>
                      </div>
                    )}
                  </TabsContent>
                  <TabsContent value="history" className="mt-6">
                    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                      {historySuggestions.map((suggestion) => (
                        <div key={suggestion.id} className="animate-fade-in-up">
                          <SuggestionCard
                            suggestion={suggestion}
                            onAction={handleSuggestionAction}
                            className="shadow-lg hover:shadow-xl transition-all duration-300"
                            dict={dashboardDict.suggestionCard}
                          />
                        </div>
                      ))}
                    </div>
                    {historySuggestions.length === 0 && (
                      <div className="text-center p-12">
                        <div className="w-24 h-24 rounded-full bg-gradient-to-br from-gray-100 to-slate-100 flex items-center justify-center mx-auto mb-6">
                          <Archive className="w-12 h-12 text-gray-400" />
                        </div>
                        <h3 className="text-xl font-bold text-gray-800 mb-2">
                          {dashboardDict.mainContent.emptyStates.history.title}
                        </h3>
                        <p className="text-gray-600">
                          {
                            dashboardDict.mainContent.emptyStates.history
                              .description
                          }
                        </p>
                      </div>
                    )}
                  </TabsContent>
                </>
              )}
            </Tabs>
          </div>
        </Card>
      </div>
    </div>
  );

  return (
    <div className={cn('min-h-screen', !isMobile && 'p-0', isMobile && 'p-0')}>
      {isMobile ? renderMobileView() : renderDesktopView()}
      <NewSuggestionForm
        isOpen={showNewSuggestion}
        onClose={() => setShowNewSuggestion(false)}
        candidates={allCandidates}
        onSubmit={handleNewSuggestion}
        dict={matchmakerDict.candidatesManager}
      />
      <SuggestionDetailsDialog
        suggestion={selectedSuggestion}
        isOpen={!!selectedSuggestion}
        onClose={() => setSelectedSuggestion(null)}
        onAction={handleDialogAction}
        userId={session?.user?.id || ''}
        matchmakerDict={matchmakerDict} // ✅ העברת המילון המלא של השדכן
        suggestionsDict={suggestionsDict}
        profileDict={profileDict} // ✅ הוספת השורה הזו
        // ✅ העברת המילון של ההצעות
      />

      <Dialog
        open={showMonthlyTrendDialog}
        onOpenChange={setShowMonthlyTrendDialog}
      >
        <DialogContent className="max-w-4xl">
          <DialogHeader>
            <DialogTitle>
              {dashboardDict.dialogs.monthlyTrend.title}
            </DialogTitle>
          </DialogHeader>
          <MonthlyTrendModal
            dict={dashboardDict.monthlyTrendModal}
            suggestions={suggestions}
          />
        </DialogContent>
      </Dialog>
      <EditSuggestionForm
        isOpen={showEditForm}
        onClose={() => setShowEditForm(false)}
        suggestion={selectedSuggestion}
        onSave={handleUpdateSuggestion}
        dict={dashboardDict.editSuggestionForm}
      />
      <MessageForm
        isOpen={showMessageForm}
        onClose={() => setShowMessageForm(false)}
        suggestion={selectedSuggestion}
        onSend={handleSendMessage}
      />
      {confirmAction && (
        <AlertDialog
          open={showConfirmDialog}
          onOpenChange={setShowConfirmDialog}
        >
          <AlertDialogContent className="border-0 shadow-2xl rounded-2xl">
            <AlertDialogHeader>
              <AlertDialogTitle className="text-xl font-bold text-center">
                {dashboardDict.dialogs.deleteConfirm.title}
              </AlertDialogTitle>
              <AlertDialogDescription className="text-center text-gray-600 leading-relaxed">
                {dashboardDict.dialogs.deleteConfirm.description}
              </AlertDialogDescription>
            </AlertDialogHeader>
            <AlertDialogFooter className="gap-3">
              <AlertDialogCancel className="rounded-xl">
                {dashboardDict.dialogs.deleteConfirm.cancel}
              </AlertDialogCancel>
              <AlertDialogAction
                onClick={handleConfirmAction}
                className="bg-gradient-to-r from-red-500 to-red-600 hover:from-red-600 hover:to-red-700 rounded-xl"
              >
                {dashboardDict.dialogs.deleteConfirm.confirm}
              </AlertDialogAction>
            </AlertDialogFooter>
          </AlertDialogContent>
        </AlertDialog>
      )}
    </div>
  );
}
--- End of Content for MatchmakerDashboard.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\suggestions\container\MonthlyTrendModal.tsx
--------------------------------------------------------------------------------
Content:
import React, { useMemo } from 'react';
import { Card, CardContent } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import {
  BarChart,
  Bar,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip,
  ResponsiveContainer,
  Legend,
  LineChart,
  Line,
  Area,
  AreaChart,
  PieChart,
  Pie,
  Cell,
  RadialBarChart,
  RadialBar,
} from 'recharts';
import {
  TrendingUp,
  TrendingDown,
  Calendar,
  BarChart3,
  LineChart as LineChartIcon,
  PieChart as PieChartIcon,
  Activity,
  Users,
  CheckCircle,
  Clock,
  Heart,
  Award,
  Target,
  ArrowUp,
  ArrowDown,
  Sparkles,
  Star,
  Crown,
  Zap,
  Download,
  RefreshCw,
  Eye,
  XCircle,
} from 'lucide-react';
import type { Suggestion } from '@/types/suggestions';
import { cn } from '@/lib/utils';
import type { MatchmakerPageDictionary } from '@/types/dictionary';

interface MonthlyTrendModalProps {
  dict: MatchmakerPageDictionary['suggestionsDashboard']['monthlyTrendModal'];
  suggestions: Suggestion[];
}

interface MonthlyData {
  month: string;
  year: number;
  count: number;
  active: number;
  pending: number;
  success: number;
  declined: number;
}

interface TrendCardProps {
  title: string;
  value: number;
  trend: number;
  icon: React.ElementType;
  gradient: string;
  description: string;
}

const TrendCard: React.FC<TrendCardProps> = ({
  title,
  value,
  trend,
  icon: Icon,
  gradient,
  description,
}) => (
  <Card className="border-0 shadow-xl hover:shadow-2xl transition-all duration-300 group overflow-hidden rounded-2xl">
    <div
      className={cn('absolute inset-0 opacity-5 bg-gradient-to-br', gradient)}
    />
    <div className="absolute top-0 right-0 w-20 h-20 bg-gradient-to-br from-white/20 to-transparent rounded-full blur-xl" />

    <CardContent className="relative z-10 p-6">
      <div className="flex items-center justify-between mb-4">
        <div
          className={cn(
            'p-3 rounded-full shadow-lg group-hover:scale-110 transition-transform bg-gradient-to-r text-white',
            gradient
          )}
        >
          <Icon className="w-6 h-6" />
        </div>
        <div
          className={cn(
            'flex items-center gap-1 px-3 py-1 rounded-full text-sm font-bold',
            trend >= 0
              ? 'bg-green-100 text-green-700'
              : 'bg-red-100 text-red-700'
          )}
        >
          {trend >= 0 ? (
            <ArrowUp className="w-3 h-3" />
          ) : (
            <ArrowDown className="w-3 h-3" />
          )}
          {Math.abs(trend)}%
        </div>
      </div>

      <div className="space-y-2">
        <h3 className="text-3xl font-bold text-gray-800">{value}</h3>
        <p className="text-sm font-medium text-gray-600">{title}</p>
        <p className="text-xs text-gray-500 leading-relaxed">{description}</p>
      </div>
    </CardContent>
  </Card>
);

const MonthlyTrendModal: React.FC<MonthlyTrendModalProps> = ({
  dict,
  suggestions,
}) => {
  const monthlyData = useMemo(() => {
    const data = suggestions.reduce(
      (acc, s) => {
        const createdDate = new Date(s.createdAt);
        const month = createdDate.getMonth();
        const year = createdDate.getFullYear();
        const key = `${year}-${month + 1}`;

        if (!acc[key]) {
          acc[key] = {
            month: new Date(year, month).toLocaleString('he', {
              month: 'short',
            }),
            year: year,
            count: 0,
            active: 0,
            pending: 0,
            success: 0,
            declined: 0,
          };
        }

        acc[key].count += 1;
        if (s.category === 'ACTIVE') acc[key].active += 1;
        if (s.category === 'PENDING') acc[key].pending += 1;
        if (['MARRIED', 'ENGAGED'].includes(s.status)) acc[key].success += 1;
        if (
          s.status === 'FIRST_PARTY_DECLINED' ||
          s.status === 'SECOND_PARTY_DECLINED'
        ) {
          acc[key].declined += 1;
        }

        return acc;
      },
      {} as Record<string, MonthlyData>
    );

    return Object.values(data).sort((a, b) => {
      if (a.year !== b.year) return a.year - b.year;
      const monthA = new Date(
        a.year,
        a.month === 'ינו' ? 0 : new Date(`1 ${a.month} 2000`).getMonth()
      ).getMonth();
      const monthB = new Date(
        b.year,
        b.month === 'ינו' ? 0 : new Date(`1 ${b.month} 2000`).getMonth()
      ).getMonth();
      return monthA - monthB;
    });
  }, [suggestions]);

  const trends = useMemo(() => {
    if (monthlyData.length < 2)
      return { active: 0, pending: 0, success: 0, total: 0 };
    const current = monthlyData[monthlyData.length - 1];
    const previous = monthlyData[monthlyData.length - 2];
    const calculateTrend = (current: number, previous: number) => {
      if (previous === 0) return current > 0 ? 100 : 0;
      return Math.round(((current - previous) / previous) * 100);
    };
    return {
      active: calculateTrend(current.active, previous.active),
      pending: calculateTrend(current.pending, previous.pending),
      success: calculateTrend(current.success, previous.success),
      total: calculateTrend(current.count, previous.count),
    };
  }, [monthlyData]);

  const chartData = monthlyData.map((month) => ({
    name: `${month.month} ${month.year}`,
    [dict.charts.legend.active]: month.active,
    [dict.charts.legend.pending]: month.pending,
    [dict.charts.legend.success]: month.success,
    [dict.charts.legend.declined]: month.declined,
  }));

  const pieData =
    monthlyData.length > 0
      ? [
          {
            name: dict.charts.legend.active,
            value: monthlyData[monthlyData.length - 1].active,
            color: '#3B82F6',
          },
          {
            name: dict.charts.legend.pending,
            value: monthlyData[monthlyData.length - 1].pending,
            color: '#F59E0B',
          },
          {
            name: dict.charts.legend.success,
            value: monthlyData[monthlyData.length - 1].success,
            color: '#10B981',
          },
          {
            name: dict.charts.legend.declined,
            value: monthlyData[monthlyData.length - 1].declined,
            color: '#EF4444',
          },
        ]
      : [];

  const COLORS = ['#3B82F6', '#F59E0B', '#10B981', '#EF4444'];

  if (monthlyData.length === 0) {
    return (
      <div className="p-12 text-center">
        <div className="w-24 h-24 rounded-full bg-gradient-to-br from-purple-100 to-pink-100 flex items-center justify-center mx-auto mb-6">
          <BarChart3 className="w-12 h-12 text-purple-400" />
        </div>
        <h3 className="text-xl font-bold text-gray-800 mb-2">
          {dict.emptyState.title}
        </h3>
        <p className="text-gray-600">{dict.emptyState.description}</p>
      </div>
    );
  }

  const currentMonth = monthlyData[monthlyData.length - 1];
  const trendLabel =
    trends.total >= 0
      ? dict.trendCards.trendLabel.increase
      : dict.trendCards.trendLabel.decrease;

  return (
    <div className="space-y-8">
      <div className="relative">
        <div className="absolute inset-0 bg-gradient-to-r from-purple-50 via-cyan-50/30 to-emerald-50/20 rounded-3xl"></div>
        <div className="relative z-10 p-8 text-center">
          <div className="flex items-center justify-center gap-3 mb-4">
            <div className="p-3 rounded-full bg-gradient-to-r from-purple-500 to-pink-500 text-white shadow-xl">
              <TrendingUp className="w-8 h-8" />
            </div>
          </div>
          <h2 className="text-3xl font-bold bg-gradient-to-r from-purple-600 via-pink-600 to-blue-600 bg-clip-text text-transparent mb-2">
            {dict.header.title}
          </h2>
          <p className="text-gray-600 text-lg">{dict.header.subtitle}</p>
        </div>
      </div>
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
        <TrendCard
          title={dict.trendCards.total.title}
          value={currentMonth.count}
          trend={trends.total}
          icon={Users}
          gradient="from-blue-500 to-cyan-500"
          description={dict.trendCards.total.description.replace(
            '{{trend}}',
            trendLabel
          )}
        />
        <TrendCard
          title={dict.trendCards.active.title}
          value={currentMonth.active}
          trend={trends.active}
          icon={Target}
          gradient="from-green-500 to-emerald-500"
          description={dict.trendCards.active.description}
        />
        <TrendCard
          title={dict.trendCards.pending.title}
          value={currentMonth.pending}
          trend={trends.pending}
          icon={Clock}
          gradient="from-yellow-500 to-amber-500"
          description={dict.trendCards.pending.description}
        />
        <TrendCard
          title={dict.trendCards.success.title}
          value={currentMonth.success}
          trend={trends.success}
          icon={Crown}
          gradient="from-purple-500 to-pink-500"
          description={dict.trendCards.success.description}
        />
      </div>
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
        <Card className="border-0 shadow-xl hover:shadow-2xl transition-all duration-300 bg-white overflow-hidden rounded-2xl">
          <CardContent className="p-6">
            <div className="flex items-center justify-between mb-6">
              <div className="flex items-center gap-3">
                <div className="p-3 rounded-full bg-gradient-to-r from-blue-500 to-cyan-500 text-white shadow-lg">
                  <BarChart3 className="w-6 h-6" />
                </div>
                <h3 className="text-xl font-bold text-gray-800">
                  {dict.charts.areaChart.title}
                </h3>
              </div>
              <Badge className="bg-gradient-to-r from-blue-500 to-cyan-500 text-white px-3 py-1 rounded-full">
                {dict.charts.areaChart.badge.replace(
                  '{{count}}',
                  monthlyData.length.toString()
                )}
              </Badge>
            </div>
            <div className="h-80">
              <ResponsiveContainer width="100%" height="100%">
                <AreaChart data={chartData}>
                  <defs>
                    <linearGradient
                      id="colorActive"
                      x1="0"
                      y1="0"
                      x2="0"
                      y2="1"
                    >
                      <stop offset="5%" stopColor="#3B82F6" stopOpacity={0.3} />
                      <stop offset="95%" stopColor="#3B82F6" stopOpacity={0} />
                    </linearGradient>
                    <linearGradient
                      id="colorPending"
                      x1="0"
                      y1="0"
                      x2="0"
                      y2="1"
                    >
                      <stop offset="5%" stopColor="#F59E0B" stopOpacity={0.3} />
                      <stop offset="95%" stopColor="#F59E0B" stopOpacity={0} />
                    </linearGradient>
                    <linearGradient
                      id="colorSuccess"
                      x1="0"
                      y1="0"
                      x2="0"
                      y2="1"
                    >
                      <stop offset="5%" stopColor="#10B981" stopOpacity={0.3} />
                      <stop offset="95%" stopColor="#10B981" stopOpacity={0} />
                    </linearGradient>
                  </defs>
                  <CartesianGrid strokeDasharray="3 3" stroke="#e5e7eb" />
                  <XAxis dataKey="name" stroke="#6b7280" fontSize={12} />
                  <YAxis stroke="#6b7280" fontSize={12} />
                  <Tooltip
                    contentStyle={{
                      backgroundColor: 'white',
                      border: 'none',
                      borderRadius: '12px',
                      boxShadow: '0 20px 25px -5px rgba(0, 0, 0, 0.1)',
                    }}
                    formatter={(value, name) => [value, name]}
                    labelFormatter={(label) =>
                      dict.charts.tooltip.monthLabel.replace('{{label}}', label)
                    }
                  />
                  <Area
                    type="monotone"
                    dataKey={dict.charts.legend.active}
                    stroke="#3B82F6"
                    fillOpacity={1}
                    fill="url(#colorActive)"
                    strokeWidth={3}
                  />
                  <Area
                    type="monotone"
                    dataKey={dict.charts.legend.pending}
                    stroke="#F59E0B"
                    fillOpacity={1}
                    fill="url(#colorPending)"
                    strokeWidth={3}
                  />
                  <Area
                    type="monotone"
                    dataKey={dict.charts.legend.success}
                    stroke="#10B981"
                    fillOpacity={1}
                    fill="url(#colorSuccess)"
                    strokeWidth={3}
                  />
                </AreaChart>
              </ResponsiveContainer>
            </div>
          </CardContent>
        </Card>
        <Card className="border-0 shadow-xl hover:shadow-2xl transition-all duration-300 bg-white overflow-hidden rounded-2xl">
          <CardContent className="p-6">
            <div className="flex items-center justify-between mb-6">
              <div className="flex items-center gap-3">
                <div className="p-3 rounded-full bg-gradient-to-r from-purple-500 to-pink-500 text-white shadow-lg">
                  <PieChartIcon className="w-6 h-6" />
                </div>
                <h3 className="text-xl font-bold text-gray-800">
                  {dict.charts.pieChart.title}
                </h3>
              </div>
              <Badge className="bg-gradient-to-r from-purple-500 to-pink-500 text-white px-3 py-1 rounded-full">
                {dict.charts.pieChart.badge
                  .replace('{{month}}', currentMonth.month)
                  .replace('{{year}}', currentMonth.year.toString())}
              </Badge>
            </div>
            <div className="h-80">
              <ResponsiveContainer width="100%" height="100%">
                <PieChart>
                  <Pie
                    data={pieData}
                    cx="50%"
                    cy="50%"
                    labelLine={false}
                    label={({ name, percent }) =>
                      `${name} ${(percent * 100).toFixed(0)}%`
                    }
                    outerRadius={100}
                    fill="#8884d8"
                    dataKey="value"
                  >
                    {pieData.map((entry, index) => (
                      <Cell
                        key={`cell-${index}`}
                        fill={COLORS[index % COLORS.length]}
                      />
                    ))}
                  </Pie>
                  <Tooltip
                    contentStyle={{
                      backgroundColor: 'white',
                      border: 'none',
                      borderRadius: '12px',
                      boxShadow: '0 20px 25px -5px rgba(0, 0, 0, 0.1)',
                    }}
                  />
                </PieChart>
              </ResponsiveContainer>
            </div>
          </CardContent>
        </Card>
      </div>
      <Card className="border-0 shadow-xl bg-white overflow-hidden rounded-2xl">
        <CardContent className="p-6">
          <div className="flex items-center justify-between mb-6">
            <div className="flex items-center gap-3">
              <div className="p-3 rounded-full bg-gradient-to-r from-emerald-500 to-green-500 text-white shadow-lg">
                <Activity className="w-6 h-6" />
              </div>
              <h3 className="text-xl font-bold text-gray-800">
                {dict.table.title}
              </h3>
            </div>
            <div className="flex gap-2">
              <Button
                variant="outline"
                size="sm"
                className="rounded-xl border-emerald-200 text-emerald-600 hover:bg-emerald-50"
              >
                <Download className="w-4 h-4 ml-2" />
                {dict.table.exportButton}
              </Button>
              <Button
                variant="outline"
                size="sm"
                className="rounded-xl border-blue-200 text-blue-600 hover:bg-blue-50"
              >
                <Eye className="w-4 h-4 ml-2" />
                {dict.table.viewAllButton}
              </Button>
            </div>
          </div>
          <div className="overflow-x-auto">
            <table className="w-full">
              <thead>
                <tr className="bg-gradient-to-r from-gray-50 to-slate-50">
                  <th className="p-4 text-right font-bold text-gray-800 border-b border-gray-200 rounded-tr-xl">
                    {dict.table.headers.month}
                  </th>
                  <th className="p-4 text-center font-bold text-gray-800 border-b border-gray-200">
                    {dict.table.headers.total}
                  </th>
                  <th className="p-4 text-center font-bold text-gray-800 border-b border-gray-200">
                    {dict.table.headers.active}
                  </th>
                  <th className="p-4 text-center font-bold text-gray-800 border-b border-gray-200">
                    {dict.table.headers.pending}
                  </th>
                  <th className="p-4 text-center font-bold text-gray-800 border-b border-gray-200">
                    {dict.table.headers.success}
                  </th>
                  <th className="p-4 text-center font-bold text-gray-800 border-b border-gray-200 rounded-tl-xl">
                    {dict.table.headers.declined}
                  </th>
                </tr>
              </thead>
              <tbody>
                {monthlyData
                  .slice()
                  .reverse()
                  .map((month, idx) => (
                    <tr
                      key={idx}
                      className={cn(
                        'hover:bg-gradient-to-r hover:from-blue-50 hover:to-cyan-50 transition-all duration-200',
                        idx % 2 === 0 ? 'bg-white' : 'bg-gray-50/50',
                        idx === 0 &&
                          'bg-gradient-to-r from-blue-50 to-cyan-50 font-semibold'
                      )}
                    >
                      <td className="p-4 border-b border-gray-100">
                        <div className="flex items-center gap-2">
                          <Calendar className="w-4 h-4 text-blue-500" />
                          <span className="font-bold text-gray-800">
                            {month.month} {month.year}
                          </span>
                          {idx === 0 && (
                            <Badge className="bg-gradient-to-r from-blue-500 to-cyan-500 text-white text-xs px-2 py-1">
                              {dict.table.currentMonthBadge}
                            </Badge>
                          )}
                        </div>
                      </td>
                      <td className="p-4 text-center border-b border-gray-100">
                        <div className="flex items-center justify-center gap-2">
                          <Users className="w-4 h-4 text-blue-500" />
                          <span className="font-bold text-blue-600">
                            {month.count}
                          </span>
                        </div>
                      </td>
                      <td className="p-4 text-center border-b border-gray-100">
                        <div className="flex items-center justify-center gap-2">
                          <Target className="w-4 h-4 text-green-500" />
                          <span className="font-bold text-green-600">
                            {month.active}
                          </span>
                        </div>
                      </td>
                      <td className="p-4 text-center border-b border-gray-100">
                        <div className="flex items-center justify-center gap-2">
                          <Clock className="w-4 h-4 text-yellow-500" />
                          <span className="font-bold text-yellow-600">
                            {month.pending}
                          </span>
                        </div>
                      </td>
                      <td className="p-4 text-center border-b border-gray-100">
                        <div className="flex items-center justify-center gap-2">
                          <Crown className="w-4 h-4 text-purple-500" />
                          <span className="font-bold text-purple-600">
                            {month.success}
                          </span>
                        </div>
                      </td>
                      <td className="p-4 text-center border-b border-gray-100">
                        <div className="flex items-center justify-center gap-2">
                          <XCircle className="w-4 h-4 text-red-500" />
                          <span className="font-bold text-red-600">
                            {month.declined}
                          </span>
                        </div>
                      </td>
                    </tr>
                  ))}
              </tbody>
            </table>
          </div>
        </CardContent>
      </Card>
      <Card className="border-0 shadow-xl bg-gradient-to-r from-indigo-50 to-purple-50 overflow-hidden rounded-2xl">
        <CardContent className="p-8">
          <div className="flex items-center gap-4 mb-6">
            <div className="p-4 rounded-full bg-gradient-to-r from-indigo-500 to-purple-500 text-white shadow-xl">
              <Sparkles className="w-8 h-8" />
            </div>
            <div>
              <h3 className="text-2xl font-bold text-indigo-800">
                {dict.insights.title}
              </h3>
              <p className="text-indigo-600">{dict.insights.subtitle}</p>
            </div>
          </div>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            <div className="p-6 bg-white/70 rounded-xl shadow-lg">
              <div className="flex items-center gap-3 mb-3">
                <TrendingUp className="w-6 h-6 text-green-500" />
                <h4 className="font-bold text-gray-800">
                  {dict.insights.growth.title}
                </h4>
              </div>
              <p className="text-sm text-gray-700 leading-relaxed">
                {trends.total >= 0
                  ? dict.insights.growth.increase.replace(
                      '{{trend}}',
                      trends.total.toString()
                    )
                  : dict.insights.growth.decrease.replace(
                      '{{trend}}',
                      Math.abs(trends.total).toString()
                    )}
              </p>
            </div>
            <div className="p-6 bg-white/70 rounded-xl shadow-lg">
              <div className="flex items-center gap-3 mb-3">
                <Award className="w-6 h-6 text-purple-500" />
                <h4 className="font-bold text-gray-800">
                  {dict.insights.successRate.title}
                </h4>
              </div>
              <p className="text-sm text-gray-700 leading-relaxed">
                {currentMonth.count > 0
                  ? dict.insights.successRate.rate.replace(
                      '{{rate}}',
                      Math.round(
                        (currentMonth.success / currentMonth.count) * 100
                      ).toString()
                    )
                  : dict.insights.successRate.noData}
              </p>
            </div>
            <div className="p-6 bg-white/70 rounded-xl shadow-lg">
              <div className="flex items-center gap-3 mb-3">
                <Activity className="w-6 h-6 text-blue-500" />
                <h4 className="font-bold text-gray-800">
                  {dict.insights.currentActivity.title}
                </h4>
              </div>
              <p className="text-sm text-gray-700 leading-relaxed">
                {dict.insights.currentActivity.body.replace(
                  '{{count}}',
                  (currentMonth.active + currentMonth.pending).toString()
                )}
              </p>
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  );
};

export default MonthlyTrendModal;
--- End of Content for MonthlyTrendModal.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\suggestions\container\SuggestionActionBar.tsx
--------------------------------------------------------------------------------
Content:
import React, { useState } from 'react';
import { Input } from '@/components/ui/input';
import { Button } from '@/components/ui/button';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select';
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from '@/components/ui/popover';
import { Badge } from '@/components/ui/badge';
import { DatePicker } from '@/components/ui/date-picker';
import {
  Search,
  Filter,
  X,
  Calendar,
  User,
  Clock,
  ChevronDown,
  AlertCircle,
  CheckCircle,
  XCircle,
  RefreshCw,
  SlidersHorizontal,
  Sparkles,
  Target,
  Zap,
  Settings,
  TrendingUp,
  Star,
  Flame,
  Shield,
} from 'lucide-react';
import { Checkbox } from '@/components/ui/checkbox';
import { Priority, MatchSuggestionStatus } from '@prisma/client';
import type { SuggestionFilters, SortByOption } from '@/types/suggestions';
import { Card, CardContent } from '@/components/ui/card';
import { cn } from '@/lib/utils';
import type { MatchmakerPageDictionary } from '@/types/dictionary';

interface SuggestionActionBarProps {
  dict: MatchmakerPageDictionary['suggestionsDashboard']['actionBar'];
  searchQuery: string;
  onSearchChange: (value: string) => void;
  filters: SuggestionFilters;
  onFiltersChange: (filters: SuggestionFilters) => void;
  totalCount: number;
  activeCount: number;
  pendingCount: number;
  historyCount: number;
}

const SuggestionActionBar: React.FC<SuggestionActionBarProps> = ({
  dict,
  searchQuery,
  onSearchChange,
  filters,
  onFiltersChange,
}) => {
  const [showAdvancedFilters, setShowAdvancedFilters] = useState(false);
  const activeFilters = Object.keys(filters).length;
  const [dateRange, setDateRange] = useState<{
    from: Date | undefined;
    to: Date | undefined;
  }>({
    from: filters.dateRange?.start,
    to: filters.dateRange?.end,
  });

  const handleRemoveFilter = (key: keyof SuggestionFilters) => {
    const newFilters = { ...filters };
    delete newFilters[key];
    onFiltersChange(newFilters);
  };

  const handleDateRangeChange = (range: {
    from: Date | undefined;
    to: Date | undefined;
  }) => {
    setDateRange(range);
    if (range.from) {
      onFiltersChange({
        ...filters,
        dateRange: { start: range.from, end: range.to || new Date() },
      });
    } else {
      const newFilters = { ...filters };
      delete newFilters.dateRange;
      onFiltersChange(newFilters);
    }
  };

  // ✅ תיקון: יצירת אובייקט מיפוי לאייקונים במקום פונקציה חסרה
  const priorityInfoMap: Record<
    string,
    { icon: React.ElementType; color: string }
  > = {
    URGENT: { icon: Flame, color: 'text-red-600' },
    HIGH: { icon: Star, color: 'text-orange-600' },
    MEDIUM: { icon: Target, color: 'text-blue-600' },
    LOW: { icon: Shield, color: 'text-gray-600' },
  };

  const statusOptions: {
    value: MatchSuggestionStatus;
    icon: React.ElementType;
    color: string;
  }[] = [
    { value: 'PENDING_FIRST_PARTY', icon: Clock, color: 'text-yellow-600' },
    { value: 'PENDING_SECOND_PARTY', icon: Clock, color: 'text-blue-600' },
    {
      value: 'FIRST_PARTY_APPROVED',
      icon: CheckCircle,
      color: 'text-green-600',
    },
    {
      value: 'SECOND_PARTY_APPROVED',
      icon: CheckCircle,
      color: 'text-green-600',
    },
    { value: 'DATING', icon: AlertCircle, color: 'text-pink-600' },
  ];

  return (
    <div className="space-y-6">
      <Card className="border-0 shadow-xl bg-gradient-to-r from-white via-purple-50/30 to-pink-50/30 overflow-hidden rounded-2xl">
        <CardContent className="p-6">
          <div className="flex flex-col lg:flex-row gap-4 items-center">
            <div className="relative flex-1 w-full lg:w-auto">
              <div className="absolute inset-0 bg-gradient-to-r from-purple-500/5 to-pink-500/5 rounded-xl"></div>
              <Search className="absolute right-4 top-1/2 transform -translate-y-1/2 h-5 w-5 text-purple-400" />
              <Input
                value={searchQuery}
                onChange={(e) => onSearchChange(e.target.value)}
                placeholder={dict.searchPlaceholder}
                className="relative z-10 h-14 pr-14 text-right border-2 border-purple-200 hover:border-purple-300 focus:border-purple-500 rounded-xl bg-white/80 backdrop-blur-sm shadow-lg transition-all duration-300 text-lg"
              />
              <div className="absolute left-3 top-1/2 transform -translate-y-1/2">
                <Sparkles className="h-4 w-4 text-purple-400" />
              </div>
            </div>
            <div className="w-full lg:w-auto">
              <Select
                value={filters.priority?.[0] || 'all'}
                onValueChange={(value) =>
                  onFiltersChange({
                    ...filters,
                    priority: value === 'all' ? undefined : [value as Priority],
                  })
                }
              >
                <SelectTrigger className="h-14 w-full lg:w-48 border-2 border-purple-200 hover:border-purple-300 focus:border-purple-500 rounded-xl bg-white/80 backdrop-blur-sm shadow-lg transition-all">
                  <div className="flex items-center gap-2">
                    <Star className="w-5 h-5 text-purple-500" />
                    <SelectValue
                      placeholder={dict.priorityFilter.placeholder}
                    />
                  </div>
                </SelectTrigger>
                <SelectContent className="border-0 shadow-2xl rounded-xl">
                  <SelectItem value="all">
                    <div className="flex items-center gap-3">
                      <div className="w-3 h-3 rounded-full bg-gradient-to-r from-purple-500 to-pink-500"></div>
                      {dict.priorityFilter.all}
                    </div>
                  </SelectItem>
                  {/* ✅ תיקון: הלולאה תוקנה להשתמש במפת האייקונים */}
                  {Object.entries(dict.priorityFilter.options).map(
                    ([key, label]: [string, string]) => {
                      const info =
                        priorityInfoMap[key] || priorityInfoMap.MEDIUM;
                      const Icon = info.icon;
                      return (
                        <SelectItem key={key} value={key}>
                          <div className="flex items-center gap-3">
                            <Icon className={cn('w-4 h-4', info.color)} />
                            {label}
                          </div>
                        </SelectItem>
                      );
                    }
                  )}
                </SelectContent>
              </Select>
            </div>
            <Popover>
              <PopoverTrigger asChild>
                <Button
                  variant="outline"
                  className="h-14 px-6 border-2 border-purple-200 hover:border-purple-300 hover:bg-purple-50 rounded-xl bg-white/80 backdrop-blur-sm shadow-lg transition-all duration-300"
                >
                  <Calendar className="h-5 w-5 ml-2 text-purple-500" />
                  <span className="font-medium">{dict.buttons.dateRange}</span>
                  <ChevronDown className="h-4 w-4 mr-2 text-purple-400" />
                </Button>
              </PopoverTrigger>
              <PopoverContent
                className="w-auto p-4 border-0 shadow-2xl rounded-2xl bg-white/95 backdrop-blur-sm"
                align="end"
              >
                <div className="space-y-4">
                  <div className="flex items-center gap-2">
                    <Calendar className="w-5 h-5 text-purple-500" />
                    <h4 className="font-bold text-gray-800">
                      {dict.buttons.dateRange}
                    </h4>
                  </div>
                  <DatePicker
                    onChange={handleDateRangeChange}
                    value={dateRange}
                    isRange={true}
                  />
                  <div className="flex justify-end">
                    <Button
                      size="sm"
                      variant="outline"
                      onClick={() =>
                        handleDateRangeChange({
                          from: undefined,
                          to: undefined,
                        })
                      }
                      className="rounded-xl border-purple-200 text-purple-600 hover:bg-purple-50"
                    >
                      {dict.buttons.clearDate}
                    </Button>
                  </div>
                </div>
              </PopoverContent>
            </Popover>
            <Button
              variant={showAdvancedFilters ? 'default' : 'outline'}
              onClick={() => setShowAdvancedFilters(!showAdvancedFilters)}
              className={cn(
                'h-14 px-6 rounded-xl transition-all duration-300 font-bold',
                showAdvancedFilters
                  ? 'bg-gradient-to-r from-purple-600 to-pink-600 text-white shadow-xl hover:shadow-2xl'
                  : 'border-2 border-purple-200 hover:border-purple-300 hover:bg-purple-50 bg-white/80 backdrop-blur-sm shadow-lg text-purple-600'
              )}
            >
              <SlidersHorizontal className="w-5 h-5 ml-2" />
              {dict.buttons.advancedFilters}
              {activeFilters > 0 && (
                <Badge className="mr-2 bg-white/20 text-current border-white/30 px-2 py-1">
                  {activeFilters}
                </Badge>
              )}
            </Button>
          </div>
        </CardContent>
      </Card>
      {showAdvancedFilters && (
        <Card className="border-0 shadow-xl bg-gradient-to-r from-purple-50 to-pink-50 rounded-2xl overflow-hidden">
          <CardContent className="p-6">
            <div className="flex items-center justify-between mb-6">
              <div className="flex items-center gap-3">
                <div className="p-3 rounded-full bg-gradient-to-r from-purple-500 to-pink-500 text-white shadow-lg">
                  <SlidersHorizontal className="w-6 h-6" />
                </div>
                <h3 className="text-xl font-bold text-gray-800">
                  {dict.advancedFilters.title}
                </h3>
              </div>
              <Button
                variant="ghost"
                size="sm"
                className="h-10 px-3 rounded-xl hover:bg-white/50"
                onClick={() => setShowAdvancedFilters(false)}
              >
                <X className="h-5 w-5" />
              </Button>
            </div>
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
              <div className="space-y-4">
                <div className="flex items-center gap-3">
                  <div className="p-2 rounded-full bg-gradient-to-r from-blue-500 to-cyan-500 text-white shadow-lg">
                    <Zap className="w-4 h-4" />
                  </div>
                  <h4 className="font-bold text-gray-800">
                    {dict.advancedFilters.statusTitle}
                  </h4>
                </div>
                <div className="space-y-3 max-h-60 overflow-y-auto">
                  {statusOptions.map((status) => {
                    const Icon = status.icon;
                    const label =
                      dict.advancedFilters.statusOptions[
                        status.value as keyof typeof dict.advancedFilters.statusOptions
                      ];
                    return (
                      <div
                        key={status.value}
                        className="flex items-center space-x-2 p-3 bg-white/70 rounded-xl hover:bg-white/90 transition-all"
                      >
                        <Checkbox
                          id={`status-${status.value}`}
                          checked={filters.status?.includes(
                            status.value as MatchSuggestionStatus
                          )}
                          onCheckedChange={(checked) => {
                            const newStatus = checked
                              ? [...(filters.status || []), status.value]
                              : filters.status?.filter(
                                  (s) => s !== status.value
                                );
                            onFiltersChange({
                              ...filters,
                              status: newStatus as MatchSuggestionStatus[],
                            });
                          }}
                        />
                        <label
                          htmlFor={`status-${status.value}`}
                          className="text-sm mr-2 flex items-center gap-2 cursor-pointer flex-1"
                        >
                          <Icon className={cn('h-4 w-4', status.color)} />
                          {label}
                        </label>
                      </div>
                    );
                  })}
                </div>
              </div>
              <div className="space-y-4">
                <div className="flex items-center gap-3">
                  <div className="p-2 rounded-full bg-gradient-to-r from-green-500 to-emerald-500 text-white shadow-lg">
                    <User className="w-4 h-4" />
                  </div>
                  <h4 className="font-bold text-gray-800">
                    {dict.advancedFilters.participantsTitle}
                  </h4>
                </div>
                <div className="p-4 bg-white/70 rounded-xl">
                  <Select
                    value={filters.userId || 'all'}
                    onValueChange={(value) =>
                      onFiltersChange({
                        ...filters,
                        userId: value === 'all' ? undefined : value,
                      })
                    }
                  >
                    <SelectTrigger className="border-2 border-green-200 focus:border-green-400 rounded-xl">
                      <div className="flex items-center gap-2">
                        <User className="h-4 w-4 text-green-500" />
                        <SelectValue
                          placeholder={dict.advancedFilters.participantsTitle}
                        />
                      </div>
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="all">
                        {dict.advancedFilters.participantOptions.all}
                      </SelectItem>
                      <SelectItem value="user1">ישראל ישראלי</SelectItem>
                      <SelectItem value="user2">שרה כהן</SelectItem>
                      <SelectItem value="user3">דוד לוי</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
              </div>
              <div className="space-y-4">
                <div className="flex items-center gap-3">
                  <div className="p-2 rounded-full bg-gradient-to-r from-purple-500 to-pink-500 text-white shadow-lg">
                    <TrendingUp className="w-4 h-4" />
                  </div>
                  <h4 className="font-bold text-gray-800">
                    {dict.advancedFilters.sortByTitle}
                  </h4>
                </div>
                <div className="p-4 bg-white/70 rounded-xl">
                  <Select
                    value={filters.sortBy || 'lastActivity'}
                    onValueChange={(value) =>
                      onFiltersChange({
                        ...filters,
                        sortBy: value as SortByOption,
                      })
                    }
                  >
                    <SelectTrigger className="border-2 border-purple-200 focus:border-purple-400 rounded-xl">
                      <div className="flex items-center gap-2">
                        <TrendingUp className="h-4 w-4 text-purple-500" />
                        <SelectValue
                          placeholder={dict.advancedFilters.sortByTitle}
                        />
                      </div>
                    </SelectTrigger>
                    <SelectContent>
                      {Object.entries(dict.advancedFilters.sortOptions).map(
                        ([key, label]) => (
                          <SelectItem key={key} value={key}>
                            {label}
                          </SelectItem>
                        )
                      )}
                    </SelectContent>
                  </Select>
                </div>
              </div>
            </div>
          </CardContent>
        </Card>
      )}
      {activeFilters > 0 && (
        <Card className="border-0 shadow-lg bg-gradient-to-r from-indigo-50 to-purple-50 rounded-2xl">
          <CardContent className="p-4">
            <div className="flex items-center justify-between">
              <div className="flex items-center gap-3">
                <div className="p-2 rounded-full bg-gradient-to-r from-indigo-500 to-purple-500 text-white shadow-lg">
                  <Filter className="w-4 h-4" />
                </div>
                <span className="font-bold text-indigo-800">
                  {dict.activeFilters.title}
                </span>
              </div>
              <div className="flex items-center gap-2 flex-wrap">
                {filters.priority && (
                  <Badge className="bg-gradient-to-r from-orange-500 to-amber-500 text-white border-0 shadow-lg px-3 py-1 rounded-xl">
                    <Star className="w-3 h-3 ml-1" />
                    {dict.activeFilters.priorityLabel}:{' '}
                    {dict.priorityFilter.options[filters.priority[0]]}
                    <button
                      onClick={() => handleRemoveFilter('priority')}
                      className="ml-2 hover:bg-white/20 rounded-full p-0.5 transition-all"
                    >
                      <X className="w-3 h-3" />
                    </button>
                  </Badge>
                )}
                {filters.dateRange && (
                  <Badge className="bg-gradient-to-r from-blue-500 to-cyan-500 text-white border-0 shadow-lg px-3 py-1 rounded-xl">
                    <Calendar className="w-3 h-3 ml-1" />
                    {dict.activeFilters.dateLabel}:{' '}
                    {new Date(filters.dateRange.start).toLocaleDateString(
                      'he-IL'
                    )}
                    {filters.dateRange.end &&
                      ` - ${new Date(filters.dateRange.end).toLocaleDateString('he-IL')}`}
                    <button
                      onClick={() => handleRemoveFilter('dateRange')}
                      className="ml-2 hover:bg-white/20 rounded-full p-0.5 transition-all"
                    >
                      <X className="w-3 h-3" />
                    </button>
                  </Badge>
                )}
                {filters.status && filters.status.length > 0 && (
                  <Badge className="bg-gradient-to-r from-green-500 to-emerald-500 text-white border-0 shadow-lg px-3 py-1 rounded-xl">
                    <AlertCircle className="w-3 h-3 ml-1" />
                    {dict.activeFilters.statusLabel}:{' '}
                    {filters.status.length === 1
                      ? dict.activeFilters.statusValues.single
                      : dict.activeFilters.statusValues.multiple.replace(
                          '{{count}}',
                          filters.status.length.toString()
                        )}
                    <button
                      onClick={() => handleRemoveFilter('status')}
                      className="ml-2 hover:bg-white/20 rounded-full p-0.5 transition-all"
                    >
                      <X className="w-3 h-3" />
                    </button>
                  </Badge>
                )}
                {filters.userId && (
                  <Badge className="bg-gradient-to-r from-purple-500 to-pink-500 text-white border-0 shadow-lg px-3 py-1 rounded-xl">
                    <User className="w-3 h-3 ml-1" />
                    {dict.activeFilters.userLabel}:{' '}
                    {dict.activeFilters.userValue}
                    <button
                      onClick={() => handleRemoveFilter('userId')}
                      className="ml-2 hover:bg-white/20 rounded-full p-0.5 transition-all"
                    >
                      <X className="w-3 h-3" />
                    </button>
                  </Badge>
                )}
                <Button
                  variant="ghost"
                  size="sm"
                  onClick={() => onFiltersChange({})}
                  className="text-indigo-600 hover:text-indigo-700 hover:bg-indigo-100 rounded-xl transition-all font-medium"
                >
                  <RefreshCw className="w-3 h-3 ml-1" />
                  {dict.buttons.clearAll}
                </Button>
              </div>
            </div>
          </CardContent>
        </Card>
      )}
    </div>
  );
};

export default SuggestionActionBar;
--- End of Content for SuggestionActionBar.tsx ---

================================================================================
Directory: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\suggestions\details
================================================================================

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\suggestions\details\SuggestionDetailsDialog.tsx
--------------------------------------------------------------------------------
Content:
// src/app/components/matchmaker/suggestions/details/SuggestionDetailsDialog.tsx
'use client';

import React, { useState, useEffect } from 'react';
import InquiryThreadView from '@/components/suggestions/inquiries/InquiryThreadView';
import { useNotifications } from '@/app/[locale]/contexts/NotificationContext';

import { Dialog, DialogContent } from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select';
import { ProfileCard } from '@/components/profile';
import { Timeline } from '@/components/ui/timeline';
import {
  AlertCircle,
  CheckCircle,
  XCircle,
  MessageCircle,
  Send,
  RefreshCw,
  Edit,
  Calendar,
  Clock,
  Download,
  AlarmClock,
  Trash2,
  MapPin,
  Mail,
  Phone,
  User,
  ExternalLink,
  Crown,
  Heart,
  Gem,
  Eye,
  Settings,
  Briefcase,
  GraduationCap,
  Quote,
  Archive,
  Maximize,
  Minimize,
  X as CloseIcon,
  LucideIcon,
} from 'lucide-react';
import { Textarea } from '@/components/ui/textarea';
import { toast } from 'sonner';

import { MatchSuggestionStatus, UserImage } from '@prisma/client';
import type {
  ExtendedMatchSuggestion,
  ActionAdditionalData,
  SuggestionParty,
} from '@/types/suggestions';
import type { QuestionnaireResponse } from '@/types/next-auth';
import Image from 'next/image';
import { getRelativeCloudinaryPath, cn, getInitials } from '@/lib/utils';
import { Avatar, AvatarFallback } from '@/components/ui/avatar';
import { Progress } from '@/components/ui/progress';
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from '@/components/ui/tooltip';
import type {
  MatchmakerPageDictionary,
  SuggestionsDictionary,
  ProfilePageDictionary,
} from '@/types/dictionary';

type SuggestionDetailsActionType =
  | 'view'
  | 'contact'
  | 'message'
  | 'edit'
  | 'delete'
  | 'resend'
  | 'changeStatus'
  | 'reminder'
  | 'sendReminder'
  | 'shareContacts'
  | 'scheduleMeeting'
  | 'viewMeetings'
  | 'exportHistory'
  | 'export'
  | 'resendToAll';

interface DialogActionData extends ActionAdditionalData {
  suggestionId?: string;
  newStatus?: MatchSuggestionStatus;
  notes?: string;
  suggestion?: ExtendedMatchSuggestion;
  partyId?: string;
  type?: string;
  partyType?: 'first' | 'second' | 'both';
}

interface SuggestionDetailsDialogProps {
  suggestion: ExtendedMatchSuggestion | null;
  isOpen: boolean;
  onClose: () => void;
  onAction: (
    action: SuggestionDetailsActionType,
    data?: DialogActionData
  ) => void;
  userId: string;
  matchmakerDict: MatchmakerPageDictionary;
  suggestionsDict: SuggestionsDictionary;
  profileDict: ProfilePageDictionary; // ✅ הוספת המילון החדש
}

interface StatusInfo {
  icon: LucideIcon;
  color: string;
  bgColor: string;
  badgeColor: string;
  progress: number;
}

const getEnhancedStatusInfo = (status: MatchSuggestionStatus): StatusInfo => {
  const statusInfoMap: Record<
    string,
    Omit<StatusInfo, 'label' | 'description'>
  > = {
    DRAFT: {
      icon: Edit,
      color: 'text-gray-600',
      bgColor: 'from-gray-50 to-slate-50',
      badgeColor: 'bg-gradient-to-r from-gray-500 to-slate-500 text-white',
      progress: 10,
    },
    PENDING_FIRST_PARTY: {
      icon: Clock,
      color: 'text-yellow-600',
      bgColor: 'from-yellow-50 to-amber-50',
      badgeColor: 'bg-gradient-to-r from-yellow-500 to-amber-500 text-white',
      progress: 25,
    },
    FIRST_PARTY_APPROVED: {
      icon: CheckCircle,
      color: 'text-green-600',
      bgColor: 'from-green-50 to-emerald-50',
      badgeColor: 'bg-gradient-to-r from-green-500 to-emerald-500 text-white',
      progress: 40,
    },
    FIRST_PARTY_DECLINED: {
      icon: XCircle,
      color: 'text-red-600',
      bgColor: 'from-red-50 to-pink-50',
      badgeColor: 'bg-gradient-to-r from-red-500 to-pink-500 text-white',
      progress: 0,
    },
    PENDING_SECOND_PARTY: {
      icon: Clock,
      color: 'text-blue-600',
      bgColor: 'from-blue-50 to-cyan-50',
      badgeColor: 'bg-gradient-to-r from-blue-500 to-cyan-500 text-white',
      progress: 50,
    },
    SECOND_PARTY_APPROVED: {
      icon: CheckCircle,
      color: 'text-green-600',
      bgColor: 'from-green-50 to-emerald-50',
      badgeColor: 'bg-gradient-to-r from-green-500 to-emerald-500 text-white',
      progress: 60,
    },
    SECOND_PARTY_DECLINED: {
      icon: XCircle,
      color: 'text-red-600',
      bgColor: 'from-red-50 to-pink-50',
      badgeColor: 'bg-gradient-to-r from-red-500 to-pink-500 text-white',
      progress: 0,
    },
    CONTACT_DETAILS_SHARED: {
      icon: Send,
      color: 'text-purple-600',
      bgColor: 'from-purple-50 to-pink-50',
      badgeColor: 'bg-gradient-to-r from-purple-500 to-pink-500 text-white',
      progress: 70,
    },
    AWAITING_FIRST_DATE_FEEDBACK: {
      icon: MessageCircle,
      color: 'text-orange-600',
      bgColor: 'from-orange-50 to-amber-50',
      badgeColor: 'bg-gradient-to-r from-orange-500 to-amber-500 text-white',
      progress: 75,
    },
    DATING: {
      icon: Heart,
      color: 'text-pink-600',
      bgColor: 'from-pink-50 to-rose-50',
      badgeColor: 'bg-gradient-to-r from-pink-500 to-rose-500 text-white',
      progress: 80,
    },
    ENGAGED: {
      icon: Gem,
      color: 'text-yellow-600',
      bgColor: 'from-yellow-50 to-orange-50',
      badgeColor: 'bg-gradient-to-r from-yellow-500 to-orange-500 text-white',
      progress: 95,
    },
    MARRIED: {
      icon: Crown,
      color: 'text-emerald-600',
      bgColor: 'from-emerald-50 to-green-50',
      badgeColor: 'bg-gradient-to-r from-emerald-500 to-green-500 text-white',
      progress: 100,
    },
    EXPIRED: {
      icon: AlarmClock,
      color: 'text-gray-600',
      bgColor: 'from-gray-50 to-slate-50',
      badgeColor: 'bg-gradient-to-r from-gray-500 to-slate-500 text-white',
      progress: 0,
    },
    CLOSED: {
      icon: Archive,
      color: 'text-gray-600',
      bgColor: 'from-gray-50 to-slate-50',
      badgeColor: 'bg-gradient-to-r from-gray-500 to-slate-500 text-white',
      progress: 0,
    },
    CANCELLED: {
      icon: XCircle,
      color: 'text-red-600',
      bgColor: 'from-red-50 to-pink-50',
      badgeColor: 'bg-gradient-to-r from-red-500 to-pink-500 text-white',
      progress: 0,
    },
    AWAITING_MATCHMAKER_APPROVAL: {
      icon: User,
      color: 'text-blue-600',
      bgColor: 'from-blue-50 to-cyan-50',
      badgeColor: 'bg-blue-500',
      progress: 65,
    },
    THINKING_AFTER_DATE: {
      icon: Clock,
      color: 'text-indigo-600',
      bgColor: 'from-indigo-50 to-violet-50',
      badgeColor: 'bg-indigo-500',
      progress: 77,
    },
    PROCEEDING_TO_SECOND_DATE: {
      icon: CheckCircle,
      color: 'text-teal-600',
      bgColor: 'from-teal-50 to-cyan-50',
      badgeColor: 'bg-teal-500',
      progress: 78,
    },
    ENDED_AFTER_FIRST_DATE: {
      icon: XCircle,
      color: 'text-red-600',
      bgColor: 'from-red-50 to-pink-50',
      badgeColor: 'bg-red-500',
      progress: 0,
    },
    MEETING_PENDING: {
      icon: Calendar,
      color: 'text-purple-600',
      bgColor: 'from-purple-50 to-pink-50',
      badgeColor: 'bg-purple-500',
      progress: 72,
    },
    MEETING_SCHEDULED: {
      icon: Calendar,
      color: 'text-green-600',
      bgColor: 'from-green-50 to-emerald-50',
      badgeColor: 'bg-green-500',
      progress: 74,
    },
    MATCH_APPROVED: {
      icon: CheckCircle,
      color: 'text-green-600',
      bgColor: 'from-green-50 to-emerald-50',
      badgeColor: 'bg-green-500',
      progress: 60,
    },
    MATCH_DECLINED: {
      icon: XCircle,
      color: 'text-red-600',
      bgColor: 'from-red-50 to-pink-50',
      badgeColor: 'bg-red-500',
      progress: 0,
    },
  };
  return (
    statusInfoMap[status] || {
      icon: RefreshCw,
      color: 'text-gray-600',
      bgColor: 'from-gray-50 to-slate-50',
      badgeColor: 'bg-gray-500',
      progress: 10,
    }
  );
};

const formatDateSafely = (
  dateInput: Date | string | null | undefined,
  placeholder: string
): string => {
  if (!dateInput) return placeholder;
  const date = typeof dateInput === 'string' ? new Date(dateInput) : dateInput;
  if (!(date instanceof Date) || isNaN(date.getTime())) return 'Invalid Date';
  return new Intl.DateTimeFormat('he-IL', {
    year: 'numeric',
    month: '2-digit',
    day: '2-digit',
    hour: '2-digit',
    minute: '2-digit',
  }).format(date);
};

const getDaysRemaining = (
  deadline: Date | string | null | undefined
): number | null => {
  if (!deadline) return null;
  const deadlineDate =
    typeof deadline === 'string' ? new Date(deadline) : deadline;
  if (!(deadlineDate instanceof Date) || isNaN(deadlineDate.getTime()))
    return null;
  const today = new Date();
  const diffTime = deadlineDate.getTime() - today.getTime();
  return Math.ceil(diffTime / (1000 * 60 * 60 * 24));
};

// ... Internal Components updated to receive and use dict ...

const SuggestionDetailsDialog: React.FC<SuggestionDetailsDialogProps> = ({
  suggestion,
  isOpen,
  onClose,
  onAction,
  userId,
  matchmakerDict,
  suggestionsDict,
  profileDict,
}) => {
  const dict = matchmakerDict.suggestionDetailsDialog;
  const [activeTab, setActiveTab] = useState('overview');
  const [firstPartyQuestionnaire, setFirstPartyQuestionnaire] =
    useState<QuestionnaireResponse | null>(null);
  const [secondPartyQuestionnaire, setSecondPartyQuestionnaire] =
    useState<QuestionnaireResponse | null>(null);
  const [isLoading, setIsLoading] = useState(false);
  const [isFullscreen, setIsFullscreen] = useState(false);
  const [statusChangeNote, setStatusChangeNote] = useState('');
  const [newStatus, setNewStatus] = useState<MatchSuggestionStatus | null>(
    null
  );
  const [showStatusChange, setShowStatusChange] = useState(false);
  const { refreshNotifications } = useNotifications();

  useEffect(() => {
    if (isOpen && suggestion) {
      setActiveTab('overview');
      setShowStatusChange(false);
      setNewStatus(null);
      setStatusChangeNote('');

      const hasUnread = suggestion.inquiries?.some(
        (inq) => inq.toUserId === userId && inq.status === 'PENDING'
      );
      if (hasUnread) {
        const markAsRead = async () => {
          try {
            await fetch(
              `/api/suggestions/${suggestion.id}/inquiries/mark-as-read`,
              { method: 'POST' }
            );
            refreshNotifications();
          } catch (error) {
            console.error('Failed to mark inquiries as read:', error);
          }
        };
        markAsRead();
      }
    }
  }, [isOpen, suggestion, userId, refreshNotifications]);

  const handleStatusChange = async () => {
    if (!newStatus || !suggestion) return;
    setIsLoading(true);
    try {
      onAction('changeStatus', {
        suggestionId: suggestion.id,
        newStatus,
        notes: statusChangeNote,
      });
      setShowStatusChange(false);
      setStatusChangeNote('');
      setNewStatus(null);
    } catch (error) {
      console.error('Error changing status:', error);
      toast.error(
        `${dict.toasts.statusUpdateError}: ${error instanceof Error ? error.message : ''}`
      );
    } finally {
      setIsLoading(false);
    }
  };

  if (!suggestion) return null;

  const statusInfo = getEnhancedStatusInfo(suggestion.status);
  const statusLabel = dict.statusLabels[suggestion.status] || suggestion.status;
  const statusDescription = dict.statusLabels[suggestion.status] || '';
  const priorityLabel =
    dict.priorityLabels[suggestion.priority] || suggestion.priority;

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent
        className={cn(
          'p-0 shadow-2xl border-0 bg-white overflow-hidden z-[50] flex flex-col transition-all duration-300 ease-in-out',
          isFullscreen
            ? '!w-screen !h-screen !max-w-none !max-h-none !rounded-none !fixed !inset-0 !m-0'
            : 'md:max-w-7xl md:w-[95vw] md:h-[95vh] md:rounded-3xl'
        )}
        dir="rtl"
        onOpenAutoFocus={(e) => e.preventDefault()}
      >
        <Tabs
          value={activeTab}
          onValueChange={setActiveTab}
          className="flex-1 flex flex-col overflow-hidden"
        >
          {/* Header and Tabs Component */}
          <div
            className={cn(
              'relative bg-gradient-to-br',
              statusInfo.bgColor,
              'border-b border-gray-100/80 flex-shrink-0'
            )}
          >
            <div className="absolute inset-0">
              <div className="absolute top-0 right-0 w-64 h-64 bg-gradient-to-br from-white/20 to-transparent rounded-full blur-3xl opacity-50"></div>
              <div className="absolute bottom-0 left-0 w-48 h-48 bg-gradient-to-br from-white/10 to-transparent rounded-full blur-2xl opacity-40"></div>
            </div>
            <div className="relative z-10 p-6 space-y-4">
              <div className="flex items-start justify-between">
                <div className="flex items-center gap-4">
                  <div className="p-3 rounded-full bg-white/20 backdrop-blur-sm shadow-lg">
                    <statusInfo.icon
                      className={cn('w-7 h-7', statusInfo.color)}
                    />
                  </div>
                  <div>
                    <h1 className="text-xl lg:text-2xl font-bold text-gray-800">
                      {dict.header.title.replace(
                        '{{id}}',
                        suggestion.id.toString().split('-')[0]
                      )}
                    </h1>
                    <p className="text-md text-gray-600 mt-1">
                      {dict.header.subtitle
                        .replace('{{party1}}', suggestion.firstParty.firstName)
                        .replace(
                          '{{party2}}',
                          suggestion.secondParty.firstName
                        )}
                    </p>
                  </div>
                </div>
                <div className="flex items-center gap-2">
                  <Badge
                    className={cn(
                      'text-sm font-bold shadow-md',
                      statusInfo.badgeColor
                    )}
                  >
                    <statusInfo.icon className="w-4 h-4 ml-2" />
                    {statusLabel}
                  </Badge>
                  <TooltipProvider>
                    <Tooltip>
                      <TooltipTrigger asChild>
                        <Button
                          variant="ghost"
                          size="icon"
                          onClick={() => setIsFullscreen(!isFullscreen)}
                          className="rounded-full h-10 w-10 text-gray-500 hover:text-gray-700 hover:bg-white/50 backdrop-blur-sm"
                        >
                          {isFullscreen ? (
                            <Minimize className="w-5 h-5" />
                          ) : (
                            <Maximize className="w-5 h-5" />
                          )}
                        </Button>
                      </TooltipTrigger>
                      <TooltipContent>
                        <p>
                          {isFullscreen
                            ? dict.header.minimizeTooltip
                            : dict.header.fullscreenTooltip}
                        </p>
                      </TooltipContent>
                    </Tooltip>
                  </TooltipProvider>
                  <Button
                    variant="ghost"
                    size="icon"
                    onClick={onClose}
                    className="rounded-full h-10 w-10 text-gray-500 hover:text-gray-700 hover:bg-white/50 backdrop-blur-sm"
                  >
                    <CloseIcon className="w-5 h-5" />
                  </Button>
                </div>
              </div>
              <TabsList className="grid w-full grid-cols-3 sm:grid-cols-6 bg-white/60 backdrop-blur-sm rounded-2xl p-1.5 h-auto shadow-lg border border-white/50">
                {Object.entries(dict.tabs).map(([key, label]) => {
                  const IconComponent =
                    {
                      overview: Eye,
                      party1: User,
                      party2: User,
                      timeline: Calendar,
                      communication: MessageCircle,
                      actions: Settings,
                    }[key] || Eye;
                  return (
                    <TabsTrigger
                      key={key}
                      value={key}
                      onClick={() => setActiveTab(key)}
                      className={cn(
                        'flex flex-col items-center justify-center gap-1 rounded-xl text-xs font-bold transition-all duration-300 py-2 hover:scale-105 relative overflow-hidden group',
                        activeTab === key
                          ? 'bg-white text-primary shadow-md'
                          : 'text-gray-600 hover:bg-white/50'
                      )}
                    >
                      <IconComponent className="w-5 h-5 relative z-10" />
                      <span className="relative z-10 hidden sm:inline">
                        {label}
                      </span>
                    </TabsTrigger>
                  );
                })}
              </TabsList>
            </div>
          </div>

          <div className="flex-1 overflow-y-auto bg-slate-50">
            <TabsContent value="overview" className="m-0 h-full">
              {/* OverviewTabContent Component would be here, but we'll inline it */}
            </TabsContent>
            <TabsContent value="firstParty" className="m-0 h-full">
              <div className="p-6">
                <ProfileCard
                  profile={suggestion.firstParty.profile}
                  images={suggestion.firstParty.images}
                  questionnaire={firstPartyQuestionnaire}
                  viewMode="matchmaker"
                  isProfileComplete={suggestion.firstParty.isProfileComplete}
                  dict={profileDict.profileCard}
                />
              </div>
            </TabsContent>
            <TabsContent value="secondParty" className="m-0 h-full">
              <div className="p-6">
                <ProfileCard
                  profile={suggestion.secondParty.profile}
                  images={suggestion.secondParty.images}
                  questionnaire={secondPartyQuestionnaire}
                  viewMode="matchmaker"
                  isProfileComplete={suggestion.secondParty.isProfileComplete}
                  dict={profileDict.profileCard}
                />
              </div>
            </TabsContent>
            <TabsContent value="timeline" className="m-0 h-full">
              <div className="p-6">
                <div className="bg-white rounded-2xl shadow-xl border-0 p-6">
                  <h3 className="text-2xl font-bold mb-6 flex items-center gap-3">
                    <div className="p-3 rounded-full bg-gradient-to-r from-orange-500 to-amber-500 text-white shadow-lg">
                      <Calendar className="w-6 h-6" />
                    </div>
                    {dict.timeline.title}
                  </h3>
                  <Timeline
                    items={(suggestion?.statusHistory || []).map((history) => {
                      const historyStatusInfo = getEnhancedStatusInfo(
                        history.status as MatchSuggestionStatus
                      );
                      return {
                        title:
                          dict.statusLabels[history.status] || history.status,
                        description: history.notes || dict.timeline.noNotes,
                        date:
                          typeof history.createdAt === 'string'
                            ? new Date(history.createdAt)
                            : history.createdAt,
                        icon: historyStatusInfo.icon,
                      };
                    })}
                  />
                </div>
              </div>
            </TabsContent>
            <TabsContent value="communication" className="m-0 h-full">
              <div className="p-6">
                <div className="bg-white rounded-2xl shadow-xl border-0 p-6">
                  <h3 className="text-2xl font-bold mb-6 flex items-center gap-3">
                    <div className="p-3 rounded-full bg-gradient-to-r from-pink-500 to-rose-500 text-white shadow-lg">
                      <MessageCircle className="w-6 h-6" />
                    </div>
                    {dict.communication.title}
                  </h3>
                  <InquiryThreadView
                    suggestionId={suggestion.id}
                    userId={userId}
                    showComposer={true}
                    dict={suggestionsDict.inquiryThread}
                  />
                </div>
              </div>
            </TabsContent>
            <TabsContent value="actions" className="m-0 h-full">
              <div className="p-6">
                <h3 className="text-2xl font-bold mb-6 flex items-center gap-3">
                  <div className="p-3 rounded-full bg-gradient-to-r from-gray-500 to-slate-500 text-white shadow-lg">
                    <Settings className="w-6 h-6" />
                  </div>
                  {dict.actions.title}
                </h3>
                <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                  <div className="bg-white rounded-2xl shadow-xl border-0 p-6 hover:shadow-2xl transition-all duration-300">
                    <div className="p-3 rounded-full bg-gradient-to-r from-blue-500 to-cyan-500 text-white shadow-lg w-fit mb-4">
                      <RefreshCw className="w-6 h-6" />
                    </div>
                    <h4 className="text-lg font-bold mb-3">
                      {dict.actions.statusChange.title}
                    </h4>
                    <p className="text-sm text-gray-600 mb-4">
                      {dict.actions.statusChange.description}
                    </p>
                    <Button
                      className="w-full bg-gradient-to-r from-blue-600 to-cyan-600 hover:from-blue-700 hover:to-cyan-700 shadow-lg"
                      onClick={() => setShowStatusChange(true)}
                    >
                      <RefreshCw className="w-4 h-4 ml-2" />
                      {dict.actions.statusChange.button}
                    </Button>
                  </div>
                  <div className="bg-white rounded-2xl shadow-xl border-0 p-6 hover:shadow-2xl transition-all duration-300">
                    <div className="p-3 rounded-full bg-gradient-to-r from-amber-500 to-orange-500 text-white shadow-lg w-fit mb-4">
                      <Edit className="w-6 h-6" />
                    </div>
                    <h4 className="text-lg font-bold mb-3">
                      {dict.actions.edit.title}
                    </h4>
                    <p className="text-sm text-gray-600 mb-4">
                      {dict.actions.edit.description}
                    </p>
                    <Button
                      variant="outline"
                      className="w-full border-2 border-amber-200 text-amber-700 hover:bg-amber-50"
                      onClick={() => onAction('edit', { suggestion })}
                    >
                      <Edit className="w-4 h-4 ml-2" />
                      {dict.actions.edit.button}
                    </Button>
                  </div>
                  <div className="bg-white rounded-2xl shadow-xl border-0 p-6 hover:shadow-2xl transition-all duration-300">
                    <div className="p-3 rounded-full bg-gradient-to-r from-red-500 to-pink-500 text-white shadow-lg w-fit mb-4">
                      <Trash2 className="w-6 h-6" />
                    </div>
                    <h4 className="text-lg font-bold mb-3">
                      {dict.actions.delete.title}
                    </h4>
                    <p className="text-sm text-gray-600 mb-4">
                      {dict.actions.delete.description}
                    </p>
                    <Button
                      variant="outline"
                      className="w-full border-2 border-red-200 text-red-700 hover:bg-red-50"
                      onClick={() =>
                        onAction('delete', { suggestionId: suggestion.id })
                      }
                    >
                      <Trash2 className="w-4 h-4 ml-2" />
                      {dict.actions.delete.button}
                    </Button>
                  </div>
                </div>
              </div>
            </TabsContent>
          </div>
        </Tabs>
        {showStatusChange && (
          <div
            className="fixed inset-0 bg-black/60 flex items-center justify-center z-[100]"
            dir="rtl"
          >
            <div className="bg-white p-6 rounded-2xl max-w-md w-full shadow-2xl m-4">
              <h3 className="text-xl font-bold mb-4 flex items-center">
                <RefreshCw className="w-5 h-5 ml-2 text-blue-600" />
                {dict.statusChangeModal.title}
              </h3>
              <div className="space-y-4">
                <div>
                  <label className="block text-sm font-medium mb-1 text-gray-600">
                    {dict.statusChangeModal.currentStatusLabel}
                  </label>
                  <div className="flex items-center p-3 bg-gray-100 rounded-lg border">
                    <statusInfo.icon
                      className={`w-5 h-5 ml-3 ${statusInfo.color}`}
                    />
                    <span className="font-bold">{statusLabel}</span>
                  </div>
                </div>
                <div>
                  <label className="block text-sm font-medium mb-1 text-gray-600">
                    {dict.statusChangeModal.newStatusLabel}
                  </label>
                  <Select
                    value={newStatus || undefined}
                    onValueChange={(value) =>
                      setNewStatus(value as MatchSuggestionStatus)
                    }
                  >
                    <SelectTrigger className="w-full">
                      <SelectValue
                        placeholder={
                          dict.statusChangeModal.newStatusPlaceholder
                        }
                      />
                    </SelectTrigger>
                    <SelectContent className="max-h-60 overflow-y-auto">
                      {Object.entries(dict.statusLabels).map(
                        ([status, label]) => (
                          <SelectItem key={status} value={status}>
                            {label}
                          </SelectItem>
                        )
                      )}
                    </SelectContent>
                  </Select>
                </div>
                <div>
                  <label className="block text-sm font-medium mb-1 text-gray-600">
                    {dict.statusChangeModal.notesLabel}
                  </label>
                  <Textarea
                    value={statusChangeNote}
                    onChange={(e) => setStatusChangeNote(e.target.value)}
                    placeholder={dict.statusChangeModal.notesPlaceholder}
                    className="min-h-[100px] resize-none"
                  />
                </div>
                <div className="flex justify-end gap-3 pt-4 border-t">
                  <Button
                    variant="outline"
                    onClick={() => setShowStatusChange(false)}
                  >
                    {dict.statusChangeModal.cancelButton}
                  </Button>
                  <Button
                    onClick={handleStatusChange}
                    disabled={!newStatus || isLoading}
                    className="bg-blue-600 hover:bg-blue-700"
                  >
                    {isLoading ? (
                      <>
                        <RefreshCw className="w-4 h-4 ml-2 animate-spin" />{' '}
                        {dict.statusChangeModal.savingButton}
                      </>
                    ) : (
                      dict.statusChangeModal.saveButton
                    )}
                  </Button>
                </div>
              </div>
            </div>
          </div>
        )}
      </DialogContent>
    </Dialog>
  );
};

export default SuggestionDetailsDialog;
--- End of Content for SuggestionDetailsDialog.tsx ---

================================================================================
Directory: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\suggestions\hooks
================================================================================

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\suggestions\hooks\useMatchmaking.ts
--------------------------------------------------------------------------------
Content:
// /hooks/useMatchmaking.ts
import { useState, useEffect, useMemo, useCallback } from 'react';
import { AvailabilityStatus } from '@prisma/client';
import { calculateMatchScore, MatchScore } from '../utils/matchingAlgorithm';
import { MATCH_THRESHOLDS } from '../../new/constants/matchingCriteria';
import type { User } from '@/types/next-auth';
// Define types and interfaces
interface UseMatchmakingProps {
  candidates?: User[];
  onMatchFound?: (match: PotentialMatch) => void;
  onMatchScoreUpdate?: (scores: MatchScoreMap) => void;
}

export interface PotentialMatch {
  candidateA: User;
  candidateB: User;
  score: MatchScore;
  matchDate?: Date;
  status: 'new' | 'suggested' | 'rejected';
  lastUpdated: Date;
}

type MatchScoreMap = Map<string, Map<string, MatchScore>>;

interface MatchSuggestion {
  candidate: User;
  score: MatchScore;
  matchDate: Date;
}

export const useMatchmaking = ({
  candidates = [],
  onMatchScoreUpdate
}: UseMatchmakingProps = {}) => {
  // State declarations
  const [matchScores, setMatchScores] = useState<MatchScoreMap>(new Map());
  const [suggestedMatches, setSuggestedMatches] = useState<PotentialMatch[]>([]);
  const [isCalculating, setIsCalculating] = useState(false);
  const [lastCalculation, setLastCalculation] = useState<Date | null>(null);

  // Calculate all possible matches
  const calculateAllMatches = useCallback(() => {
    setIsCalculating(true);
    const newScores = new Map<string, Map<string, MatchScore>>();
    const newMatches: PotentialMatch[] = [];

    candidates.forEach((candidateA, indexA) => {
      const candidateAScores = new Map<string, MatchScore>();
      newScores.set(candidateA.id, candidateAScores);

      candidates.slice(indexA + 1).forEach(candidateB => {
        // Check basic compatibility conditions
        if (
          candidateA.profile?.gender === candidateB.profile?.gender ||
          candidateA.profile?.availabilityStatus !== AvailabilityStatus.AVAILABLE ||
          candidateB.profile?.availabilityStatus !== AvailabilityStatus.AVAILABLE
        ) {
          return;
        }

        // Calculate match score
        const matchScore = calculateMatchScore(candidateA.profile, candidateB.profile);
        
        if (matchScore) {
          candidateAScores.set(candidateB.id, matchScore);

          // Add to potential matches if score is good enough
          if (matchScore.score >= MATCH_THRESHOLDS.GOOD) {
            newMatches.push({
              candidateA,
              candidateB,
              score: matchScore,
              matchDate: new Date(),
              status: 'new',
              lastUpdated: new Date()
            });
          }
        }
      });
    });

    setMatchScores(newScores);
    setSuggestedMatches(prev => {
      const existing = new Set(prev.map(m => 
        `${m.candidateA.id}-${m.candidateB.id}`
      ));
      
      return [
        ...prev,
        ...newMatches.filter(m => 
          !existing.has(`${m.candidateA.id}-${m.candidateB.id}`)
        )
      ].sort((a, b) => b.score.score - a.score.score);
    });

    onMatchScoreUpdate?.(newScores);
    setIsCalculating(false);
    setLastCalculation(new Date());
  }, [candidates, onMatchScoreUpdate]);

  // Recalculate matches when candidates list changes
  useEffect(() => {
    if (candidates.length > 0 && !isCalculating) {
      calculateAllMatches();
    }
  }, [candidates, calculateAllMatches, isCalculating]);

  // Get best matches for a specific candidate
  const getBestMatchesForCandidate = useCallback((
    candidateId: string,
    limit: number = 5
  ): MatchSuggestion[] => {
    const candidate = candidates.find(c => c.id === candidateId);
    if (!candidate) return [];

    const matches: MatchSuggestion[] = [];
    const candidateScores = matchScores.get(candidateId);

    if (candidateScores) {
      candidateScores.forEach((score, otherId) => {
        const otherCandidate = candidates.find(c => c.id === otherId);
        if (otherCandidate && score.score >= MATCH_THRESHOLDS.FAIR) {
          matches.push({
            candidate: otherCandidate,
            score,
            matchDate: new Date()
          });
        }
      });
    }

    return matches
      .sort((a, b) => b.score.score - a.score.score)
      .slice(0, limit);
  }, [candidates, matchScores]);

  // Analyze matches by categories
  const matchAnalytics = useMemo(() => {
    const analytics = {
      total: suggestedMatches.length,
      byCategory: {
        excellent: 0,
        good: 0,
        fair: 0,
        poor: 0
      },
      averageScore: 0,
      recentMatches: [] as PotentialMatch[]
    };

    suggestedMatches.forEach(match => {
      if (match.score.score >= MATCH_THRESHOLDS.EXCELLENT) {
        analytics.byCategory.excellent++;
      } else if (match.score.score >= MATCH_THRESHOLDS.GOOD) {
        analytics.byCategory.good++;
      } else if (match.score.score >= MATCH_THRESHOLDS.FAIR) {
        analytics.byCategory.fair++;
      } else {
        analytics.byCategory.poor++;
      }
    });

    analytics.averageScore = suggestedMatches.reduce(
      (sum, match) => sum + match.score.score,
      0
    ) / (suggestedMatches.length || 1);

    // Get recent matches (last week)
    const oneWeekAgo = new Date();
    oneWeekAgo.setDate(oneWeekAgo.getDate() - 7);
    
    analytics.recentMatches = suggestedMatches
      .filter(match => match.matchDate && match.matchDate >= oneWeekAgo)
      .sort((a, b) => 
        (b.matchDate?.getTime() || 0) - (a.matchDate?.getTime() || 0)
      );

    return analytics;
  }, [suggestedMatches]);

  // Update match status
  const updateMatchStatus = useCallback((
    candidateAId: string,
    candidateBId: string,
    status: 'suggested' | 'rejected'
  ) => {
    setSuggestedMatches(prev => prev.map(match => {
      if (
        (match.candidateA.id === candidateAId && match.candidateB.id === candidateBId) ||
        (match.candidateA.id === candidateBId && match.candidateB.id === candidateAId)
      ) {
        return {
          ...match,
          status,
          lastUpdated: new Date()
        };
      }
      return match;
    }));
  }, []);

  // Return hook interface
  return {
    matchScores,
    suggestedMatches,
    isCalculating,
    lastCalculation,
    matchAnalytics,
    getBestMatchesForCandidate,
    calculateAllMatches,
    updateMatchStatus
  };
};

export default useMatchmaking;
--- End of Content for useMatchmaking.ts ---

================================================================================
Directory: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\suggestions\list
================================================================================

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\suggestions\list\ManagerSuggestionsList.tsx
--------------------------------------------------------------------------------
Content:
// FILENAME: src/app/components/matchmaker/suggestions/list/ManagerSuggestionsList.tsx

import React, { useMemo, useState } from 'react';
import { useSession } from 'next-auth/react';
import { Card } from '@/components/ui/card';
import { ScrollArea } from '@/components/ui/scroll-area';
import { Users } from 'lucide-react';
import type {
  Suggestion,
  SuggestionFilters,
  ActionAdditionalData,
} from '@/types/suggestions';
import SuggestionDetailsDialog from '../details/SuggestionDetailsDialog';
import { toast } from 'sonner';
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
} from '@/components/ui/alert-dialog';
import SuggestionCard from '../cards/SuggestionCard'; // Make sure this is imported
import type { SuggestionsDictionary } from '@/types/dictionary';

// Define a more specific action type to avoid 'any'
type SuggestionActionType =
  | 'view'
  | 'contact'
  | 'message'
  | 'edit'
  | 'delete'
  | 'resend'
  | 'changeStatus'
  | 'reminder'
  | 'sendReminder'
  | 'shareContacts'
  | 'scheduleMeeting'
  | 'viewMeetings'
  | 'exportHistory'
  | 'export'
  | 'resendToAll';

interface ManagerSuggestionsListProps {
  suggestions: Suggestion[];
  filters: SuggestionFilters;
  searchQuery: string;
  type: 'active' | 'pending' | 'history';
  onSuggestionDeleted?: (id: string) => void;
  dict: SuggestionsDictionary;
}

const ManagerSuggestionsList: React.FC<ManagerSuggestionsListProps> = ({
  suggestions,
  filters,
  searchQuery,
  type,
  onSuggestionDeleted,
    dict,
}) => {
  const { data: session } = useSession();
  const [selectedSuggestion, setSelectedSuggestion] =
    useState<Suggestion | null>(null);
  const [showDeleteDialog, setShowDeleteDialog] = useState(false);
  const [suggestionToDelete, setSuggestionToDelete] = useState<string | null>(
    null
  );

  const filteredSuggestions = useMemo(() => {
    return suggestions.filter((suggestion) => {
      // Base status filter
      if (
        type === 'active' &&
        [
          'CLOSED',
          'CANCELLED',
          'EXPIRED',
          'FIRST_PARTY_DECLINED',
          'SECOND_PARTY_DECLINED',
        ].includes(suggestion.status)
      ) {
        return false;
      }
      if (type === 'pending' && !suggestion.status.includes('PENDING')) {
        return false;
      }
      if (
        type === 'history' &&
        ![
          'CLOSED',
          'CANCELLED',
          'EXPIRED',
          'FIRST_PARTY_DECLINED',
          'SECOND_PARTY_DECLINED',
          'MARRIED',
          'ENGAGED',
        ].includes(suggestion.status)
      ) {
        return false;
      }

      // Search query
      if (searchQuery && suggestion.firstParty && suggestion.secondParty) {
        const searchTerm = searchQuery.toLowerCase();
        const searchableText =
          `${suggestion.firstParty.firstName} ${suggestion.firstParty.lastName} ${suggestion.secondParty.firstName} ${suggestion.secondParty.lastName} ${suggestion.matchingReason || ''}`.toLowerCase();
        if (!searchableText.includes(searchTerm)) return false;
      }

      // Priority filter
      if (
        filters.priority?.length &&
        !filters.priority.includes(suggestion.priority)
      ) {
        return false;
      }

      // Date range filter
      if (filters.dateRange) {
        const createdAt = new Date(suggestion.createdAt);
        if (
          createdAt < filters.dateRange.start ||
          (filters.dateRange.end && createdAt > filters.dateRange.end)
        ) {
          return false;
        }
      }

      return true;
    });
  }, [suggestions, filters, searchQuery, type]);

  const confirmDelete = async () => {
    if (!suggestionToDelete) return;
    try {
      const response = await fetch(
        `/api/matchmaker/suggestions/${suggestionToDelete}/delete`,
        { method: 'DELETE' }
      );
      if (!response.ok) throw new Error('Failed to delete suggestion');
      toast.success('ההצעה נמחקה בהצלחה');
      if (onSuggestionDeleted) onSuggestionDeleted(suggestionToDelete);
    } catch (error) {
      console.error('Error deleting suggestion:', error);
      toast.error('שגיאה במחיקת ההצעה');
    } finally {
      setShowDeleteDialog(false);
      setSuggestionToDelete(null);
    }
  };

  const handleAction = (
    actionType: SuggestionActionType,
    data?: { suggestion: Suggestion } & ActionAdditionalData
  ) => {
    console.log(
      `Action '${actionType}' triggered for suggestion`,
      data?.suggestion?.id
    );
    if (actionType === 'view' && data?.suggestion) {
      setSelectedSuggestion(data.suggestion);
    }
    // Implement other actions like edit, message etc. here by setting state for their respective dialogs
  };

  if (filteredSuggestions.length === 0) {
    return (
      <div className="flex flex-col items-center justify-center h-64 text-gray-400">
        <Users className="w-12 h-12 mb-4" />
        <p>לא נמצאו הצעות התואמות את הסינון</p>
      </div>
    );
  }

  return (
    <>
      <ScrollArea className="h-[600px] rounded-md border p-4">
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
          {filteredSuggestions.map((suggestion) => {
            if (!suggestion.firstParty || !suggestion.secondParty) {
              return null; // Safety check for corrupted data
            }
            return (
              <SuggestionCard
                key={suggestion.id}
                suggestion={suggestion}
                onAction={(type, suggestionData, additionalData) => {
                  if (type === 'view') {
                    setSelectedSuggestion(suggestionData);
                  } else if (type === 'delete') {
                    setSuggestionToDelete(suggestionData.id);
                    setShowDeleteDialog(true);
                  } else {
                    handleAction(type, {
                      suggestion: suggestionData,
                      ...additionalData,
                    });
                  }
                }}
              />
            );
          })}
        </div>
      </ScrollArea>

      <SuggestionDetailsDialog
        suggestion={selectedSuggestion}
        isOpen={!!selectedSuggestion}
        onClose={() => setSelectedSuggestion(null)}
        onAction={(type, additionalData) =>
          handleAction(type, {
            suggestion: selectedSuggestion!,
            ...additionalData,
          })
        }
        userId={session?.user?.id || ''}
        dict={dict}
      
      />

      <AlertDialog open={showDeleteDialog} onOpenChange={setShowDeleteDialog}>
        <AlertDialogContent>
          <AlertDialogHeader>
            <AlertDialogTitle>האם את/ה בטוח/ה?</AlertDialogTitle>
            <AlertDialogDescription>
              פעולה זו תמחק את ההצעה לצמיתות ולא ניתן יהיה לשחזר אותה.
            </AlertDialogDescription>
          </AlertDialogHeader>
          <AlertDialogFooter>
            <AlertDialogCancel>ביטול</AlertDialogCancel>
            <AlertDialogAction
              onClick={confirmDelete}
              className="bg-red-600 hover:bg-red-700"
            >
              מחיקה
            </AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>
    </>
  );
};

export default ManagerSuggestionsList;
--- End of Content for ManagerSuggestionsList.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\suggestions\list\SuggestionsList.tsx
--------------------------------------------------------------------------------
Content:
import React, { useState, useMemo } from "react";
import { Input } from "@/components/ui/input";
import { Card, CardContent } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Button } from "@/components/ui/button";
import { 
  Search, 
  Filter, 
  SortDesc, 
  LayoutGrid, 
  List, 
  Users, 
  Clock, 
  CheckCircle, 
  XCircle,
  Heart,
  Star,
  TrendingUp,
  Activity,
  BarChart3,
  Eye,
  Sparkles,
  Target,
  Flame,
  Shield,
  Award,
  Crown,
  Zap,
  RefreshCw,
  Calendar,
  MapPin,
} from "lucide-react";
import type { MatchSuggestion } from "@prisma/client";
import type { UserProfile, UserImage } from "@/types/next-auth";
import SuggestionCard from "../cards/SuggestionCard";
import { LoadingContainer } from "../../new/shared/LoadingStates";
import type {
  Suggestion,
  ActionAdditionalData,
  SuggestionStatusHistory,
} from "@/types/suggestions";
import { cn } from "@/lib/utils";
import { ToggleGroup, ToggleGroupItem } from "@/components/ui/toggle-group";

interface PartyInfo {
  id: string;
  firstName: string;
  lastName: string;
  profile: UserProfile;
  images: UserImage[];
}

interface ExtendedMatchSuggestion extends MatchSuggestion {
  firstParty: PartyInfo;
  secondParty: PartyInfo;
  statusHistory: SuggestionStatusHistory[];
}

interface SuggestionsListProps {
  suggestions: ExtendedMatchSuggestion[];
  isLoading?: boolean;
  onAction: (
    type:
      | "view"
      | "contact"
      | "message"
      | "edit"
      | "delete"
      | "resend"
      | "changeStatus"
      | "reminder",
    suggestion: Suggestion,
    additionalData?: ActionAdditionalData
  ) => void;
  className?: string;
}

const SORT_OPTIONS = [
  { value: "latest", label: "החדשים ביותר", icon: TrendingUp },
  { value: "oldest", label: "הישנים ביותר", icon: Calendar },
  { value: "deadline", label: "לפי תאריך יעד", icon: Clock },
  { value: "priority", label: "לפי דחיפות", icon: Flame },
];

const STATUS_OPTIONS = [
  { 
    value: "PENDING_FIRST_PARTY", 
    label: "ממתין לצד א׳", 
    color: "from-yellow-500 to-amber-500",
    icon: Clock
  },
  { 
    value: "PENDING_SECOND_PARTY", 
    label: "ממתין לצד ב׳", 
    color: "from-blue-500 to-cyan-500",
    icon: Clock
  },
  { 
    value: "FIRST_PARTY_APPROVED", 
    label: "צד א׳ אישר", 
    color: "from-green-500 to-emerald-500",
    icon: CheckCircle
  },
  { 
    value: "SECOND_PARTY_APPROVED", 
    label: "צד ב׳ אישר", 
    color: "from-green-500 to-emerald-500",
    icon: CheckCircle
  },
  { 
    value: "CONTACT_DETAILS_SHARED", 
    label: "פרטי קשר שותפו", 
    color: "from-purple-500 to-pink-500",
    icon: Heart
  },
  { 
    value: "DATING", 
    label: "בתהליך היכרות", 
    color: "from-pink-500 to-rose-500",
    icon: Heart
  },
];

// Enhanced Stats Component
const EnhancedListStats: React.FC<{
  total: number;
  pending: number;
  approved: number;
  declined: number;
  urgent: number;
}> = ({ total, pending, approved, declined, urgent }) => (
  <Card className="border-0 shadow-xl bg-gradient-to-r from-white via-purple-50/30 to-pink-50/30 mb-6">
    <CardContent className="p-4">
      <div className="grid grid-cols-2 md:grid-cols-5 gap-4">
        {/* Total */}
        <div className="text-center group">
          <div className="flex items-center justify-center gap-2 mb-1">
            <div className="p-2 rounded-full bg-gradient-to-r from-blue-500 to-cyan-500 text-white shadow-lg group-hover:scale-110 transition-transform">
              <Users className="w-4 h-4" />
            </div>
            <span className="text-2xl font-bold text-blue-600">{total}</span>
          </div>
          <p className="text-xs text-gray-600 font-medium">סך הכל</p>
        </div>

        {/* Pending */}
        <div className="text-center group">
          <div className="flex items-center justify-center gap-2 mb-1">
            <div className="p-2 rounded-full bg-gradient-to-r from-yellow-500 to-amber-500 text-white shadow-lg group-hover:scale-110 transition-transform">
              <Clock className="w-4 h-4" />
            </div>
            <span className="text-2xl font-bold text-yellow-600">{pending}</span>
          </div>
          <p className="text-xs text-gray-600 font-medium">ממתינות</p>
        </div>

        {/* Approved */}
        <div className="text-center group">
          <div className="flex items-center justify-center gap-2 mb-1">
            <div className="p-2 rounded-full bg-gradient-to-r from-green-500 to-emerald-500 text-white shadow-lg group-hover:scale-110 transition-transform">
              <CheckCircle className="w-4 h-4" />
            </div>
            <span className="text-2xl font-bold text-green-600">{approved}</span>
          </div>
          <p className="text-xs text-gray-600 font-medium">מאושרות</p>
        </div>

        {/* Declined */}
        <div className="text-center group">
          <div className="flex items-center justify-center gap-2 mb-1">
            <div className="p-2 rounded-full bg-gradient-to-r from-red-500 to-pink-500 text-white shadow-lg group-hover:scale-110 transition-transform">
              <XCircle className="w-4 h-4" />
            </div>
            <span className="text-2xl font-bold text-red-600">{declined}</span>
          </div>
          <p className="text-xs text-gray-600 font-medium">נדחו</p>
        </div>

        {/* Urgent */}
        <div className="text-center group">
          <div className="flex items-center justify-center gap-2 mb-1">
            <div className="p-2 rounded-full bg-gradient-to-r from-orange-500 to-red-500 text-white shadow-lg group-hover:scale-110 transition-transform animate-pulse">
              <Flame className="w-4 h-4" />
            </div>
            <span className="text-2xl font-bold text-orange-600">{urgent}</span>
          </div>
          <p className="text-xs text-gray-600 font-medium">דחופות</p>
        </div>
      </div>
    </CardContent>
  </Card>
);

// Enhanced Filter Bar
const EnhancedFilterSection: React.FC<{
  searchQuery: string;
  onSearchChange: (query: string) => void;
  sortBy: string;
  onSortChange: (sort: string) => void;
  statusFilter: string[];
  onStatusFilterChange: (status: string[]) => void;
  showFilters: boolean;
  onToggleFilters: () => void;
  viewMode: 'grid' | 'list';
  onViewModeChange: (mode: 'grid' | 'list') => void;
}> = ({
  searchQuery,
  onSearchChange,
  sortBy,
  onSortChange,
  statusFilter,
  onStatusFilterChange,
  showFilters,
  onToggleFilters,
  viewMode,
  onViewModeChange,
}) => (
  <Card className="border-0 shadow-xl bg-gradient-to-r from-white via-cyan-50/30 to-blue-50/30 mb-6">
    <CardContent className="p-6 space-y-4">
      {/* Main Filter Row */}
      <div className="flex flex-col md:flex-row gap-4">
        {/* Search Input */}
        <div className="relative flex-1">
          <Search className="absolute right-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400" />
          <Input
            placeholder="חיפוש לפי שם או עיר..."
            value={searchQuery}
            onChange={(e) => onSearchChange(e.target.value)}
            className="pr-12 text-right bg-white/80 backdrop-blur-sm border-cyan-200 focus:border-cyan-400 focus:ring-cyan-200 rounded-xl h-12 shadow-sm"
          />
        </div>

        {/* Sort Select */}
        <Select value={sortBy} onValueChange={onSortChange}>
          <SelectTrigger className="w-48 h-12 bg-white/80 backdrop-blur-sm border-cyan-200 focus:border-cyan-400 rounded-xl shadow-sm">
            <SortDesc className="w-4 h-4 ml-2" />
            <SelectValue placeholder="מיון לפי..." />
          </SelectTrigger>
          <SelectContent>
            {SORT_OPTIONS.map((option) => {
              const IconComponent = option.icon;
              return (
                <SelectItem key={option.value} value={option.value}>
                  <div className="flex items-center gap-2">
                    <IconComponent className="w-4 h-4" />
                    {option.label}
                  </div>
                </SelectItem>
              );
            })}
          </SelectContent>
        </Select>

        {/* Filter Toggle */}
        <Button
          variant="outline"
          onClick={onToggleFilters}
          className={cn(
            "h-12 border-cyan-200 hover:bg-cyan-50 text-cyan-600 rounded-xl bg-white/80 backdrop-blur-sm shadow-sm",
            showFilters && "bg-cyan-100 border-cyan-300"
          )}
        >
          <Filter className="w-4 h-4 ml-2" />
          סינון
        </Button>

        {/* View Mode Toggle */}
        <ToggleGroup
          type="single"
          value={viewMode}
          onValueChange={(value: 'grid' | 'list') => value && onViewModeChange(value)}
          className="bg-white/80 backdrop-blur-sm shadow-sm rounded-xl border border-cyan-200"
        >
          <ToggleGroupItem 
            value="grid" 
            aria-label="Grid view"
            className="data-[state=on]:bg-cyan-500 data-[state=on]:text-white"
          >
            <LayoutGrid className="h-4 w-4" />
          </ToggleGroupItem>
          <ToggleGroupItem 
            value="list" 
            aria-label="List view"
            className="data-[state=on]:bg-cyan-500 data-[state=on]:text-white"
          >
            <List className="h-4 w-4" />
          </ToggleGroupItem>
        </ToggleGroup>
      </div>

      {/* Advanced Filters */}
      {showFilters && (
        <div className="pt-4 border-t border-cyan-100 space-y-4">
          <div>
            <h4 className="text-sm font-bold text-gray-700 mb-3 flex items-center gap-2">
              <Activity className="w-4 h-4 text-cyan-500" />
              סינון לפי סטטוס
            </h4>
            <div className="flex flex-wrap gap-2">
              {STATUS_OPTIONS.map((status) => {
                const IconComponent = status.icon;
                return (
                  <Button
                    key={status.value}
                    variant={statusFilter.includes(status.value) ? "default" : "outline"}
                    size="sm"
                    onClick={() => {
                      const newFilter = statusFilter.includes(status.value)
                        ? statusFilter.filter((s) => s !== status.value)
                        : [...statusFilter, status.value];
                      onStatusFilterChange(newFilter);
                    }}
                    className={cn(
                      "text-xs rounded-xl transition-all duration-300",
                      statusFilter.includes(status.value)
                        ? `bg-gradient-to-r ${status.color} text-white shadow-lg border-0`
                        : "border-gray-200 hover:bg-gray-50"
                    )}
                  >
                    <IconComponent className="w-3 h-3 ml-1" />
                    {status.label}
                  </Button>
                );
              })}
            </div>
          </div>

          {/* Clear Filters */}
          <div className="flex justify-end">
            <Button
              variant="ghost"
              size="sm"
              onClick={() => onStatusFilterChange([])}
              className="text-gray-500 hover:text-gray-700"
            >
              <RefreshCw className="w-3 h-3 ml-1" />
              נקה סינונים
            </Button>
          </div>
        </div>
      )}
    </CardContent>
  </Card>
);

// Enhanced Empty State
const EnhancedEmptyState: React.FC<{
  isFiltered: boolean;
  onClearFilters: () => void;
}> = ({ isFiltered, onClearFilters }) => (
  <div className="flex flex-col items-center justify-center min-h-[500px] text-center p-12">
    <div className="w-32 h-32 rounded-full bg-gradient-to-br from-purple-100 via-pink-100 to-blue-100 flex items-center justify-center shadow-xl mb-8">
      {isFiltered ? (
        <Search className="w-16 h-16 text-purple-400" />
      ) : (
        <Users className="w-16 h-16 text-purple-400" />
      )}
    </div>
    
    <h3 className="text-2xl font-bold text-gray-800 mb-4">
      {isFiltered ? 'לא נמצאו תוצאות' : 'אין הצעות כרגע'}
    </h3>
    
    <p className="text-gray-600 max-w-md mx-auto mb-6 leading-relaxed">
      {isFiltered 
        ? 'נסה לשנות את קריטריוני החיפוש או הסינון כדי למצוא את מה שאתה מחפש'
        : 'כשיהיו הצעות זמינות, הן יופיעו כאן'
      }
    </p>

    {isFiltered && (
      <Button
        onClick={onClearFilters}
        className="bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-700 hover:to-pink-700 text-white shadow-xl hover:shadow-2xl transition-all duration-300 rounded-xl"
      >
        <RefreshCw className="w-4 h-4 ml-2" />
        נקה סינון
      </Button>
    )}
  </div>
);

const SuggestionsList: React.FC<SuggestionsListProps> = ({
  suggestions,
  isLoading = false,
  onAction,
  className,
}) => {
  // Filter states
  const [searchQuery, setSearchQuery] = useState("");
  const [sortBy, setSortBy] = useState("latest");
  const [statusFilter, setStatusFilter] = useState<string[]>([]);
  const [showFilters, setShowFilters] = useState(false);
  const [viewMode, setViewMode] = useState<'grid' | 'list'>('grid');

  // Calculate stats
  const stats = useMemo(() => {
    const total = suggestions.length;
    const pending = suggestions.filter(s => 
      s.status === 'PENDING_FIRST_PARTY' || s.status === 'PENDING_SECOND_PARTY'
    ).length;
    const approved = suggestions.filter(s => 
      s.status === 'FIRST_PARTY_APPROVED' || s.status === 'SECOND_PARTY_APPROVED'
    ).length;
    const declined = suggestions.filter(s => 
      s.status === 'FIRST_PARTY_DECLINED' || s.status === 'SECOND_PARTY_DECLINED'
    ).length;
    const urgent = suggestions.filter(s => s.priority === 'URGENT').length;

    return { total, pending, approved, declined, urgent };
  }, [suggestions]);

  // Filter and sort suggestions
  const filteredSuggestions = useMemo(() => {
    let result = [...suggestions];

    // Apply status filter
    if (statusFilter.length > 0) {
      result = result.filter((s) => statusFilter.includes(s.status));
    }

    // Apply search filter
    if (searchQuery) {
      const query = searchQuery.toLowerCase();
      result = result.filter((s) => {
        const searchText = `${s.firstParty.firstName} ${s.firstParty.lastName} ${s.secondParty.firstName} ${s.secondParty.lastName} ${s.firstParty.profile?.city || ''} ${s.secondParty.profile?.city || ''}`.toLowerCase();
        return searchText.includes(query);
      });
    }

    // Apply sorting
    switch (sortBy) {
      case "latest":
        result.sort(
          (a, b) =>
            new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime()
        );
        break;
      case "oldest":
        result.sort(
          (a, b) =>
            new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime()
        );
        break;
      case "deadline":
        result.sort((a, b) => {
          if (!a.decisionDeadline) return 1;
          if (!b.decisionDeadline) return -1;
          return (
            new Date(a.decisionDeadline).getTime() -
            new Date(b.decisionDeadline).getTime()
          );
        });
        break;
      case "priority":
        const priorityOrder = { URGENT: 0, HIGH: 1, MEDIUM: 2, LOW: 3 };
        result.sort(
          (a, b) => 
            (priorityOrder[a.priority as keyof typeof priorityOrder] || 4) - 
            (priorityOrder[b.priority as keyof typeof priorityOrder] || 4)
        );
        break;
    }

    return result;
  }, [suggestions, searchQuery, sortBy, statusFilter]);

  const isFiltered = searchQuery !== '' || statusFilter.length > 0;

  const clearAllFilters = () => {
    setSearchQuery('');
    setStatusFilter([]);
  };

  return (
    <div className={cn("space-y-6", className)}>
      {/* Enhanced Stats */}
      <EnhancedListStats {...stats} />

      {/* Enhanced Filter Section */}
      <EnhancedFilterSection
        searchQuery={searchQuery}
        onSearchChange={setSearchQuery}
        sortBy={sortBy}
        onSortChange={setSortBy}
        statusFilter={statusFilter}
        onStatusFilterChange={setStatusFilter}
        showFilters={showFilters}
        onToggleFilters={() => setShowFilters(!showFilters)}
        viewMode={viewMode}
        onViewModeChange={setViewMode}
      />

      {/* Results Summary */}
      <div className="flex justify-between items-center text-sm text-gray-600 px-2">
        <span className="font-medium">
          מציג {filteredSuggestions.length} {filteredSuggestions.length === 1 ? 'הצעה' : 'הצעות'} מתוך {suggestions.length}
        </span>
        {filteredSuggestions.length > 0 && (
          <div className="flex items-center gap-2">
            <Sparkles className="w-4 h-4 text-purple-500" />
            <span className="font-medium text-purple-600">התאמות איכותיות</span>
          </div>
        )}
      </div>

      {/* Suggestions Grid/List */}
      {isLoading ? (
        <LoadingContainer>
          <div className="space-y-6">
            {/* Loading Stats */}
            <Card className="border-0 shadow-xl">
              <CardContent className="p-4">
                <div className="grid grid-cols-2 md:grid-cols-5 gap-4">
                  {Array.from({ length: 5 }).map((_, i) => (
                    <div key={i} className="text-center space-y-2">
                      <div className="w-12 h-12 bg-gray-200 rounded-full mx-auto animate-pulse"></div>
                      <div className="h-4 bg-gray-200 rounded animate-pulse"></div>
                    </div>
                  ))}
                </div>
              </CardContent>
            </Card>

            {/* Loading Cards */}
            <div className={cn(
              viewMode === 'grid'
                ? "grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6"
                : "space-y-4"
            )}>
              {Array.from({ length: 6 }).map((_, i) => (
                <div
                  key={i}
                  className="h-80 bg-gradient-to-br from-gray-100 to-gray-200 rounded-2xl animate-pulse shadow-lg"
                />
              ))}
            </div>
          </div>
        </LoadingContainer>
      ) : filteredSuggestions.length === 0 ? (
        <EnhancedEmptyState
          isFiltered={isFiltered}
          onClearFilters={clearAllFilters}
        />
      ) : (
        <div className={cn(
          "animate-fade-in-up",
          viewMode === 'grid'
            ? "grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6"
            : "space-y-6"
        )}>
          {filteredSuggestions.map((suggestion, index) => (
            <div
              key={suggestion.id}
              className="animate-scale-in"
              style={{
                animationDelay: `${index * 100}ms`,
                animationFillMode: 'both',
              }}
            >
              <SuggestionCard
                suggestion={suggestion as unknown as Suggestion}
                onAction={onAction}
                variant={viewMode === 'list' ? 'full' : 'full'}
                className={cn(
                  "card-hover-elegant shadow-lg hover:shadow-xl transition-all duration-300",
                  viewMode === 'list' && "flex"
                )}
              />
            </div>
          ))}
        </div>
      )}

      {/* Filter Summary */}
      {(searchQuery || statusFilter.length > 0) && (
        <Card className="border-0 shadow-lg bg-gradient-to-r from-purple-50 to-pink-50">
          <CardContent className="p-4">
            <div className="flex items-center justify-between">
              <div className="flex items-center gap-2 text-sm">
                <Filter className="w-4 h-4 text-purple-500" />
                <span className="font-medium text-purple-700">סינון פעיל:</span>
                
                {searchQuery && (
                  <Badge className="bg-gradient-to-r from-blue-500 to-cyan-500 text-white border-0 shadow-sm">
                    חיפוש: {searchQuery}
                  </Badge>
                )}
                
                {statusFilter.map((status) => {
                  const statusOption = STATUS_OPTIONS.find(opt => opt.value === status);
                  if (!statusOption) return null;
                  const IconComponent = statusOption.icon;
                  
                  return (
                    <Badge 
                      key={status}
                      className={cn(
                        `bg-gradient-to-r ${statusOption.color} text-white border-0 shadow-sm`
                      )}
                    >
                      <IconComponent className="w-3 h-3 ml-1" />
                      {statusOption.label}
                    </Badge>
                  );
                })}
              </div>
              
              <Button
                variant="ghost"
                size="sm"
                onClick={clearAllFilters}
                className="text-purple-600 hover:text-purple-700 hover:bg-purple-100 rounded-xl"
              >
                <RefreshCw className="w-3 h-3 ml-1" />
                נקה הכל
              </Button>
            </div>
          </CardContent>
        </Card>
      )}

      {/* Performance Insights */}
      {filteredSuggestions.length > 0 && (
        <Card className="border-0 shadow-lg bg-gradient-to-r from-emerald-50 to-green-50">
          <CardContent className="p-4">
            <div className="flex items-center justify-between">
              <div className="flex items-center gap-3">
                <div className="p-2 rounded-full bg-gradient-to-r from-emerald-500 to-green-500 text-white shadow-lg">
                  <BarChart3 className="w-4 h-4" />
                </div>
                <div>
                  <h4 className="font-bold text-emerald-800">תובנות ביצועים</h4>
                  <p className="text-sm text-emerald-600">
                    {Math.round((stats.approved / stats.total) * 100)}% אחוז אישור •{' '}
                    {stats.urgent > 0 && `${stats.urgent} דחופות •`}{' '}
                    {stats.pending} ממתינות לטיפול
                  </p>
                </div>
              </div>
              
              <div className="flex items-center gap-2">
                <div className="text-right text-xs text-emerald-600">
                  <div className="font-bold">{Math.round((stats.approved / Math.max(stats.total, 1)) * 100)}%</div>
                  <div>הצלחה</div>
                </div>
                <div className="w-16 h-2 bg-emerald-200 rounded-full overflow-hidden">
                  <div 
                    className="h-full bg-gradient-to-r from-emerald-500 to-green-500 transition-all duration-500"
                    style={{ width: `${Math.round((stats.approved / Math.max(stats.total, 1)) * 100)}%` }}
                  />
                </div>
              </div>
            </div>
          </CardContent>
        </Card>
      )}
    </div>
  );
};

export default SuggestionsList;
--- End of Content for SuggestionsList.tsx ---

================================================================================
Directory: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\suggestions\services
================================================================================

(This directory contains subdirectories but no files directly. See subdirectories below.)

================================================================================
Directory: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\suggestions\services\notification
================================================================================

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\suggestions\services\notification\NotificationService.ts
--------------------------------------------------------------------------------
Content:
// src/app/components/matchmaker/suggestions/services/notification/NotificationService.ts

import { MatchSuggestionStatus } from '@prisma/client';
import { SuggestionWithParties } from '../suggestions/StatusTransitionService';

export type RecipientInfo = {
  email: string;
  phone?: string; // Phone number with international prefix, e.g.: +972501234567
  name: string;
};

export type NotificationContent = {
  subject: string;
  body: string;
  htmlBody?: string; // HTML version for email
};

export type NotificationChannel = 'email' | 'whatsapp' | 'sms';

export type NotificationOptions = {
  channels: NotificationChannel[];
  notifyParties?: ('first' | 'second' | 'matchmaker')[];
  priority?: 'high' | 'normal' | 'low';
  attachments?: Array<{
    filename: string;
    content: Buffer | string;
    contentType: string;
  }>;
  customMessage?: string;
  metadata?: Record<string, unknown>;
};

export interface NotificationAdapter {
  canSendTo(recipient: RecipientInfo): boolean;
  send(recipient: RecipientInfo, content: NotificationContent): Promise<boolean>;
  getChannelType(): NotificationChannel;
}

export class NotificationService {
  private static instance: NotificationService;
  private adapters: Map<NotificationChannel, NotificationAdapter> = new Map();

  private constructor() {}

  public static getInstance(): NotificationService {
    if (!NotificationService.instance) {
      NotificationService.instance = new NotificationService();
    }
    return NotificationService.instance;
  }

  public registerAdapter(adapter: NotificationAdapter): void {
    this.adapters.set(adapter.getChannelType(), adapter);
    console.log(`Registered ${adapter.getChannelType()} adapter`);
  }

  public async sendNotification(
    recipient: RecipientInfo,
    content: NotificationContent,
    options: NotificationOptions
  ): Promise<Record<NotificationChannel, boolean>> {
    const results: Record<NotificationChannel, boolean> = {} as Record<NotificationChannel, boolean>;
    console.log(`Attempting to send notification to ${recipient.name} via channels:`, options.channels);

    for (const channel of options.channels) {
      const adapter = this.adapters.get(channel);
      if (!adapter) {
        console.warn(`No adapter registered for channel: ${channel}`);
        results[channel] = false;
        continue;
      }

      if (!adapter.canSendTo(recipient)) {
        console.warn(`Cannot send to recipient via ${channel}: missing required info`);
        results[channel] = false;
        continue;
      }

      try {
        console.log(`Sending ${channel} notification to ${recipient.name}`);
        results[channel] = await adapter.send(recipient, content);
        console.log(`${channel} notification sent successfully: ${results[channel]}`);
      } catch (error) {
        console.error(`Error sending notification via ${channel}:`, error);
        results[channel] = false;
      }
    }

    return results;
  }

  // Dedicated method for handling suggestion-related notifications
  public async handleSuggestionStatusChange(
    suggestion: SuggestionWithParties,
    options: Partial<NotificationOptions> = {}
  ): Promise<void> {
    console.log(`Processing notifications for suggestion ${suggestion.id} with status ${suggestion.status}`);
    
    const templateContent = this.getSuggestionTemplate(suggestion, options.customMessage);
    if (!templateContent) {
      console.log(`No template found for status ${suggestion.status} - skipping notification`);
      return;
    }
  
    const recipientsWithChannels = this.getRecipientsForSuggestion(suggestion);
    console.log(`Found ${recipientsWithChannels.length} potential recipients`);
  
    for (const { recipient, preferredChannels } of recipientsWithChannels) {
      // Filter recipients based on notifyParties if provided
      if (options.notifyParties) {
        const recipientType = this.getRecipientType(recipient, suggestion);
        if (!recipientType || !options.notifyParties.includes(recipientType)) {
          console.log(`Skipping recipient ${recipient.name} (${recipientType}) - not in notifyParties`, options.notifyParties);
          continue;
        }
      }
      
      const channelsToUse = options.channels || preferredChannels || ['email'];
      console.log(`Sending notification to ${recipient.name} via channels:`, channelsToUse);
      
      await this.sendNotification(
        recipient,
        templateContent,
        { ...options, channels: channelsToUse }
      );
    }
    
    console.log(`Finished processing notifications for suggestion ${suggestion.id}`);
  }

  // Helper method to determine recipient type
  private getRecipientType(
    recipient: RecipientInfo, 
    suggestion: SuggestionWithParties
  ): 'first' | 'second' | 'matchmaker' | null {
    if (recipient.email === suggestion.firstParty.email) {
      return 'first';
    } else if (recipient.email === suggestion.secondParty.email) {
      return 'second';
    } else if (recipient.email === suggestion.matchmaker.email) {
      return 'matchmaker';
    }
    return null;
  }

  private getSuggestionTemplate(
    suggestion: SuggestionWithParties,
    customMessage?: string
  ): NotificationContent | null {
    const baseUrl = process.env.NEXT_PUBLIC_BASE_URL || 'http://localhost:3000';
    
    // If there's a custom message, use it instead of the template
    if (customMessage) {
      const reviewUrl = `${baseUrl}/suggestions/${suggestion.id}/review`;
      return {
        subject: "עדכון בהצעת שידוך",
        body: `שלום,\n\n${customMessage}\n\nלצפייה בפרטי ההצעה: ${reviewUrl}\n\nבברכה,\nמערכת השידוכים`,
        htmlBody: `
          <div dir="rtl">
            <h2>שלום,</h2>
            <p>${customMessage}</p>
            <p>לצפייה בפרטי ההצעה: <a href="${reviewUrl}">לחץ כאן</a></p>
            <p>בברכה,<br>מערכת השידוכים</p>
          </div>
        `
      };
    }
    
    // Otherwise use the template based on status
    switch (suggestion.status) {
      case MatchSuggestionStatus.PENDING_FIRST_PARTY:
        return {
          subject: 'הצעת שידוך חדשה עבורך',
          body: `שלום ${suggestion.firstParty.firstName},\n\n${suggestion.matchmaker.firstName} ${suggestion.matchmaker.lastName} הציע/ה עבורך הצעת שידוך.\n\nלצפייה בפרטי ההצעה ומענה: ${baseUrl}/suggestions/${suggestion.id}/review\n\nבברכה,\nצוות המערכת`,
          htmlBody: `<div dir="rtl"><h2>שלום ${suggestion.firstParty.firstName},</h2><p>${suggestion.matchmaker.firstName} ${suggestion.matchmaker.lastName} הציע/ה עבורך הצעת שידוך.</p><p>לצפייה בפרטי ההצעה ומענה, אנא היכנס/י לקישור הבא:</p><p><a href="${baseUrl}/suggestions/${suggestion.id}/review">לצפייה בהצעה</a></p><p>בברכה,<br>צוות המערכת</p></div>`
        };
      
      case MatchSuggestionStatus.FIRST_PARTY_APPROVED:
        return {
          subject: 'עדכון סטטוס - הצעת שידוך אושרה על ידי הצד הראשון',
          body: `שלום ${suggestion.matchmaker.firstName},\n\n${suggestion.firstParty.firstName} ${suggestion.firstParty.lastName} אישר/ה את הצעת השידוך.\n\nההצעה תועבר כעת באופן אוטומטי לצד השני.\n\nלצפייה בפרטים נוספים: ${baseUrl}/dashboard/suggestions/${suggestion.id}\n\nבברכה,\nצוות המערכת`,
          htmlBody: `<div dir="rtl"><h2>שלום ${suggestion.matchmaker.firstName},</h2><p>${suggestion.firstParty.firstName} ${suggestion.firstParty.lastName} אישר/ה את הצעת השידוך.</p><p>ההצעה תועבר כעת באופן אוטומטי לצד השני.</p><p><a href="${baseUrl}/dashboard/suggestions/${suggestion.id}">לצפייה בפרטים נוספים</a></p><p>בברכה,<br>צוות המערכת</p></div>`
        };

      case MatchSuggestionStatus.FIRST_PARTY_DECLINED:
        return {
          subject: 'עדכון סטטוס - הצעת שידוך נדחתה',
          body: `שלום ${suggestion.matchmaker.firstName},\n\n${suggestion.firstParty.firstName} ${suggestion.firstParty.lastName} דחה/תה את הצעת השידוך.\n\nלצפייה בפרטים נוספים: ${baseUrl}/dashboard/suggestions/${suggestion.id}\n\nבברכה,\nצוות המערכת`,
          htmlBody: `<div dir="rtl"><h2>שלום ${suggestion.matchmaker.firstName},</h2><p>${suggestion.firstParty.firstName} ${suggestion.firstParty.lastName} דחה/תה את הצעת השידוך.</p><p><a href="${baseUrl}/dashboard/suggestions/${suggestion.id}">לצפייה בפרטים נוספים</a></p><p>בברכה,<br>צוות המערכת</p></div>`
        };

      case MatchSuggestionStatus.PENDING_SECOND_PARTY:
        return {
          subject: 'הצעת שידוך חדשה עבורך',
          body: `שלום ${suggestion.secondParty.firstName},\n\n${suggestion.matchmaker.firstName} ${suggestion.matchmaker.lastName} הציע/ה עבורך הצעת שידוך.\n\nהצד הראשון כבר אישר את ההצעה.\n\nלצפייה בפרטי ההצעה ומענה: ${baseUrl}/suggestions/${suggestion.id}/review\n\nבברכה,\nצוות המערכת`,
          htmlBody: `<div dir="rtl"><h2>שלום ${suggestion.secondParty.firstName},</h2><p>${suggestion.matchmaker.firstName} ${suggestion.matchmaker.lastName} הציע/ה עבורך הצעת שידוך.</p><p>הצד הראשון כבר אישר את ההצעה.</p><p><a href="${baseUrl}/suggestions/${suggestion.id}/review">לצפייה בפרטי ההצעה ומענה</a></p><p>בברכה,<br>צוות המערכת</p></div>`
        };

      case MatchSuggestionStatus.SECOND_PARTY_APPROVED:
        return {
          subject: 'עדכון סטטוס - הצעת שידוך אושרה על ידי הצד השני',
          body: `שלום ${suggestion.matchmaker.firstName},\n\n${suggestion.secondParty.firstName} ${suggestion.secondParty.lastName} אישר/ה את הצעת השידוך.\n\nשני הצדדים אישרו את ההצעה. ניתן כעת לשתף פרטי קשר.\n\nלצפייה בפרטים נוספים: ${baseUrl}/dashboard/suggestions/${suggestion.id}\n\nבברכה,\nצוות המערכת`,
          htmlBody: `<div dir="rtl"><h2>שלום ${suggestion.matchmaker.firstName},</h2><p>${suggestion.secondParty.firstName} ${suggestion.secondParty.lastName} אישר/ה את הצעת השידוך.</p><p>שני הצדדים אישרו את ההצעה. ניתן כעת לשתף פרטי קשר.</p><p><a href="${baseUrl}/dashboard/suggestions/${suggestion.id}">לצפייה בפרטים נוספים</a></p><p>בברכה,<br>צוות המערכת</p></div>`
        };

      case MatchSuggestionStatus.SECOND_PARTY_DECLINED:
        return {
          subject: 'עדכון סטטוס - הצעת שידוך נדחתה',
          body: `שלום ${suggestion.matchmaker.firstName},\n\n${suggestion.secondParty.firstName} ${suggestion.secondParty.lastName} דחה/תה את הצעת השידוך.\n\nלצפייה בפרטים נוספים: ${baseUrl}/dashboard/suggestions/${suggestion.id}\n\nבברכה,\nצוות המערכת`,
          htmlBody: `<div dir="rtl"><h2>שלום ${suggestion.matchmaker.firstName},</h2><p>${suggestion.secondParty.firstName} ${suggestion.secondParty.lastName} דחה/תה את הצעת השידוך.</p><p><a href="${baseUrl}/dashboard/suggestions/${suggestion.id}">לצפייה בפרטים נוספים</a></p><p>בברכה,<br>צוות המערכת</p></div>`
        };
    
      case MatchSuggestionStatus.CONTACT_DETAILS_SHARED:
        // Prepare contact details with multi-line support
        const firstPartyDetails = this.formatUserDetails(suggestion.firstParty);
        const secondPartyDetails = this.formatUserDetails(suggestion.secondParty);
        
        return {
          subject: 'פרטי קשר להצעת השידוך',
          body: `ברכות! שני הצדדים אישרו את הצעת השידוך.\n\nפרטי הקשר של הצד הראשון:\n${firstPartyDetails}\n\nפרטי הקשר של הצד השני:\n${secondPartyDetails}\n\nאנא צרו קשר בהקדם לתיאום פגישה ראשונה.\n\nבהצלחה!`,
          htmlBody: `<div dir="rtl"><h2>ברכות! שני הצדדים אישרו את הצעת השידוך.</h2><p>פרטי הקשר של הצד הראשון:</p><pre>${firstPartyDetails}</pre><p>פרטי הקשר של הצד השני:</p><pre>${secondPartyDetails}</pre><p>אנא צרו קשר בהקדם לתיאום פגישה ראשונה.</p><p>בהצלחה!</p></div>`
        };
      
      case MatchSuggestionStatus.AWAITING_FIRST_DATE_FEEDBACK:
        return {
          subject: 'בקשה למשוב על הפגישה הראשונה',
          body: `שלום,\n\nנשמח לקבל את המשוב שלך על הפגישה הראשונה.\n\nלשליחת המשוב: ${baseUrl}/suggestions/${suggestion.id}/feedback\n\nבברכה,\nצוות המערכת`,
          htmlBody: `<div dir="rtl"><h2>שלום,</h2><p>נשמח לקבל את המשוב שלך על הפגישה הראשונה.</p><p><a href="${baseUrl}/suggestions/${suggestion.id}/feedback">לשליחת המשוב</a></p><p>בברכה,<br>צוות המערכת</p></div>`
        };

      case MatchSuggestionStatus.THINKING_AFTER_DATE:
        return {
          subject: 'בקשת זמן למחשבה לאחר הפגישה',
          body: `שלום ${suggestion.matchmaker.firstName},\n\nאחד הצדדים ביקש זמן למחשבה לאחר הפגישה.\n\nלצפייה בפרטים נוספים: ${baseUrl}/dashboard/suggestions/${suggestion.id}\n\nבברכה,\nצוות המערכת`,
          htmlBody: `<div dir="rtl"><h2>שלום ${suggestion.matchmaker.firstName},</h2><p>אחד הצדדים ביקש זמן למחשבה לאחר הפגישה.</p><p><a href="${baseUrl}/dashboard/suggestions/${suggestion.id}">לצפייה בפרטים נוספים</a></p><p>בברכה,<br>צוות המערכת</p></div>`
        };

      case MatchSuggestionStatus.DATING:
        return {
          subject: 'עדכון סטטוס - בתהליך היכרות',
          body: `שלום ${suggestion.matchmaker.firstName},\n\nהזוג נמצא בתהליך היכרות.\n\nלצפייה בפרטים: ${baseUrl}/dashboard/suggestions/${suggestion.id}\n\nבברכה,\nצוות המערכת`,
          htmlBody: `<div dir="rtl"><h2>שלום ${suggestion.matchmaker.firstName},</h2><p>הזוג נמצא בתהליך היכרות.</p><p><a href="${baseUrl}/dashboard/suggestions/${suggestion.id}">לצפייה בפרטים</a></p><p>בברכה,<br>צוות המערכת</p></div>`
        };

      case MatchSuggestionStatus.ENGAGED:
        return {
          subject: 'מזל טוב! - אירוסין',
          body: `מזל טוב ${suggestion.firstParty.firstName} ו${suggestion.secondParty.firstName}!\n\nאנו שמחים לשמוע על האירוסין ומאחלים לכם המון הצלחה בהמשך הדרך.\n\nבברכה,\nצוות המערכת`,
          htmlBody: `<div dir="rtl"><h2>מזל טוב ${suggestion.firstParty.firstName} ו${suggestion.secondParty.firstName}!</h2><p>אנו שמחים לשמוע על האירוסין ומאחלים לכם המון הצלחה בהמשך הדרך.</p><p>בברכה,<br>צוות המערכת</p></div>`
        };

      case MatchSuggestionStatus.MARRIED:
        return {
          subject: 'מזל טוב! - חתונה',
          body: `מזל טוב ${suggestion.firstParty.firstName} ו${suggestion.secondParty.firstName}!\n\nאנו שמחים לשמוע על החתונה ומאחלים לכם חיים מאושרים יחד.\n\nבברכה,\nצוות המערכת`,
          htmlBody: `<div dir="rtl"><h2>מזל טוב ${suggestion.firstParty.firstName} ו${suggestion.secondParty.firstName}!</h2><p>אנו שמחים לשמוע על החתונה ומאחלים לכם חיים מאושרים יחד.</p><p>בברכה,<br>צוות המערכת</p></div>`
        };

      case MatchSuggestionStatus.EXPIRED:
        return {
          subject: 'הצעת השידוך פגה',
          body: `שלום ${suggestion.matchmaker.firstName},\n\nהצעת השידוך פגה עקב חוסר מענה במועד.\n\nלצפייה בפרטים: ${baseUrl}/dashboard/suggestions/${suggestion.id}\n\nבברכה,\nצוות המערכת`,
          htmlBody: `<div dir="rtl"><h2>שלום ${suggestion.matchmaker.firstName},</h2><p>הצעת השידוך פגה עקב חוסר מענה במועד.</p><p><a href="${baseUrl}/dashboard/suggestions/${suggestion.id}">לצפייה בפרטים</a></p><p>בברכה,<br>צוות המערכת</p></div>`
        };

      default:
        // For other statuses, return null to skip notification
        console.log(`No template defined for status: ${suggestion.status}`);
        return null;
    }
  }

  private getRecipientsForSuggestion(suggestion: SuggestionWithParties): Array<{
    recipient: RecipientInfo;
    preferredChannels: NotificationChannel[];
  }> {
    const recipients: Array<{
      recipient: RecipientInfo;
      preferredChannels: NotificationChannel[];
    }> = [];
    
    // Logic to determine recipients based on suggestion status
    switch (suggestion.status) {
      case MatchSuggestionStatus.DRAFT:
        recipients.push({
          recipient: {
            email: suggestion.matchmaker.email,
            phone: suggestion.matchmaker.phone || undefined,
            name: `${suggestion.matchmaker.firstName} ${suggestion.matchmaker.lastName}`
          },
          preferredChannels: ['email'] // Email only for drafts
        });
        break;
      
      case MatchSuggestionStatus.PENDING_FIRST_PARTY:
        recipients.push({
          recipient: {
            email: suggestion.firstParty.email,
            phone: suggestion.firstParty.phone || undefined,
            name: `${suggestion.firstParty.firstName} ${suggestion.firstParty.lastName}`
          },
          preferredChannels: ['email', 'whatsapp'] // Email and WhatsApp for candidates
        });
        break;
      
      case MatchSuggestionStatus.FIRST_PARTY_APPROVED:
      case MatchSuggestionStatus.FIRST_PARTY_DECLINED:
        recipients.push({
          recipient: {
            email: suggestion.matchmaker.email,
            phone: suggestion.matchmaker.phone || undefined,
            name: `${suggestion.matchmaker.firstName} ${suggestion.matchmaker.lastName}`
          },
          preferredChannels: ['email', 'whatsapp'] // Email and WhatsApp for matchmaker
        });
        break;
      
      case MatchSuggestionStatus.PENDING_SECOND_PARTY:
        recipients.push({
          recipient: {
            email: suggestion.secondParty.email,
            phone: suggestion.secondParty.phone || undefined,
            name: `${suggestion.secondParty.firstName} ${suggestion.secondParty.lastName}`
          },
          preferredChannels: ['email', 'whatsapp'] // Email and WhatsApp for candidates
        });
        break;
      
      case MatchSuggestionStatus.SECOND_PARTY_APPROVED:
      case MatchSuggestionStatus.SECOND_PARTY_DECLINED:
        recipients.push({
          recipient: {
            email: suggestion.matchmaker.email,
            phone: suggestion.matchmaker.phone || undefined,
            name: `${suggestion.matchmaker.firstName} ${suggestion.matchmaker.lastName}`
          },
          preferredChannels: ['email', 'whatsapp'] // Email and WhatsApp for matchmaker
        });
        break;
      
      case MatchSuggestionStatus.AWAITING_MATCHMAKER_APPROVAL:
        recipients.push({
          recipient: {
            email: suggestion.matchmaker.email,
            phone: suggestion.matchmaker.phone || undefined,
            name: `${suggestion.matchmaker.firstName} ${suggestion.matchmaker.lastName}`
          },
          preferredChannels: ['email', 'whatsapp'] // Email and WhatsApp for matchmaker
        });
        break;
      
      case MatchSuggestionStatus.CONTACT_DETAILS_SHARED:
        // Send to both parties and matchmaker
        recipients.push(
          {
            recipient: {
              email: suggestion.firstParty.email,
              phone: suggestion.firstParty.phone || undefined,
              name: `${suggestion.firstParty.firstName} ${suggestion.firstParty.lastName}`
            },
            preferredChannels: ['email', 'whatsapp']
          },
          {
            recipient: {
              email: suggestion.secondParty.email,
              phone: suggestion.secondParty.phone || undefined,
              name: `${suggestion.secondParty.firstName} ${suggestion.secondParty.lastName}`
            },
            preferredChannels: ['email', 'whatsapp']
          },
          {
            recipient: {
              email: suggestion.matchmaker.email,
              phone: suggestion.matchmaker.phone || undefined,
              name: `${suggestion.matchmaker.firstName} ${suggestion.matchmaker.lastName}`
            },
            preferredChannels: ['email']
          }
        );
        break;
      
      case MatchSuggestionStatus.AWAITING_FIRST_DATE_FEEDBACK:
        // Send to both parties
        recipients.push(
          {
            recipient: {
              email: suggestion.firstParty.email,
              phone: suggestion.firstParty.phone || undefined,
              name: `${suggestion.firstParty.firstName} ${suggestion.firstParty.lastName}`
            },
            preferredChannels: ['email', 'whatsapp']
          },
          {
            recipient: {
              email: suggestion.secondParty.email,
              phone: suggestion.secondParty.phone || undefined,
              name: `${suggestion.secondParty.firstName} ${suggestion.secondParty.lastName}`
            },
            preferredChannels: ['email', 'whatsapp']
          }
        );
        break;
      
      case MatchSuggestionStatus.ENGAGED:
      case MatchSuggestionStatus.MARRIED:
        // Send to both parties and matchmaker
        recipients.push(
          {
            recipient: {
              email: suggestion.firstParty.email,
              phone: suggestion.firstParty.phone || undefined,
              name: `${suggestion.firstParty.firstName} ${suggestion.firstParty.lastName}`
            },
            preferredChannels: ['email', 'whatsapp']
          },
          {
            recipient: {
              email: suggestion.secondParty.email,
              phone: suggestion.secondParty.phone || undefined,
              name: `${suggestion.secondParty.firstName} ${suggestion.secondParty.lastName}`
            },
            preferredChannels: ['email', 'whatsapp']
          },
          {
            recipient: {
              email: suggestion.matchmaker.email,
              phone: suggestion.matchmaker.phone || undefined,
              name: `${suggestion.matchmaker.firstName} ${suggestion.matchmaker.lastName}`
            },
            preferredChannels: ['email', 'whatsapp']
          }
        );
        break;

      default:
        // Default: send to matchmaker only
        recipients.push({
          recipient: {
            email: suggestion.matchmaker.email,
            phone: suggestion.matchmaker.phone || undefined,
            name: `${suggestion.matchmaker.firstName} ${suggestion.matchmaker.lastName}`
          },
          preferredChannels: ['email']
        });
        break;
    }

    return recipients;
  }

  // Helper function to format contact details
  private formatUserDetails(user: { 
    firstName: string; 
    lastName: string; 
    email: string; 
    phone?: string | null 
  }): string {
    const details = [
      `שם: ${user.firstName} ${user.lastName}`,
      `אימייל: ${user.email}`,
    ];

    if (user.phone) {
      details.push(`טלפון: ${user.phone}`);
    }

    return details.join('\n');
  }
}

export const notificationService = NotificationService.getInstance();
--- End of Content for NotificationService.ts ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\suggestions\services\notification\initNotifications.ts
--------------------------------------------------------------------------------
Content:
// src/app/components/matchmaker/suggestions/services/notification/initNotifications.ts

import { notificationService } from './NotificationService';
import { emailAdapter } from './adapters/EmailAdapter';
import { whatsAppAdapter } from './adapters/WhatsAppAdapter';

// Define notification channel type
export type NotificationChannel = 'email' | 'whatsapp' | 'sms';

export type NotificationOptions = {
    channels: NotificationChannel[];
    notifyParties?: ('first' | 'second' | 'matchmaker')[];
    customMessage?: string;
  };

/**
 * Initializes the notification service by registering all available adapters
 * @returns The initialized notification service
 */
export function initNotificationService() {
  // Register adapters
  notificationService.registerAdapter(emailAdapter);
  notificationService.registerAdapter(whatsAppAdapter);
  
  console.log('Notification service initialized with email and WhatsApp adapters');
  
  return notificationService;
}
--- End of Content for initNotifications.ts ---

================================================================================
Directory: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\suggestions\services\notification\adapters
================================================================================

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\suggestions\services\notification\adapters\EmailAdapter.ts
--------------------------------------------------------------------------------
Content:
// src/app/components/matchmaker/suggestions/services/notification/adapters/EmailAdapter.ts

import { NotificationAdapter, NotificationChannel, RecipientInfo, NotificationContent } from '../NotificationService';
import nodemailer from 'nodemailer';

export class EmailAdapter implements NotificationAdapter {
  private static instance: EmailAdapter;
  private transporter: nodemailer.Transporter;

  private constructor() {
    // Configure the transporter exactly like in EmailService
    this.transporter = nodemailer.createTransport({
      service: 'gmail',
      auth: {
        user: process.env.GMAIL_USER || '',
        pass: process.env.GMAIL_APP_PASSWORD || '',
      },
      tls: {
        rejectUnauthorized: false
      }
    });

    // Verify email configuration on initialization
    this.verifyEmailConfig();
  }

  private async verifyEmailConfig(): Promise<void> {
    try {
      await this.transporter.verify();
      console.log('Email configuration verified successfully');
    } catch (error) {
      console.error('Email configuration verification failed:', error);
      // Don't throw, to allow the system to continue even if verification fails
    }
  }

  public static getInstance(): EmailAdapter {
    if (!EmailAdapter.instance) {
      EmailAdapter.instance = new EmailAdapter();
    }
    return EmailAdapter.instance;
  }

  public getChannelType(): NotificationChannel {
    return 'email';
  }

  public canSendTo(recipient: RecipientInfo): boolean {
    return !!recipient.email;
  }

  public async send(recipient: RecipientInfo, content: NotificationContent): Promise<boolean> {
    try {
      const result = await this.transporter.sendMail({
        from: `${process.env.EMAIL_FROM_NAME || 'מערכת השידוכים'} <${process.env.GMAIL_USER || ''}>`,
        to: recipient.email,
        subject: content.subject,
        text: content.body,
        html: content.htmlBody || content.body.replace(/\n/g, '<br>'),
      });

      console.log('Email sent successfully:', {
        messageId: result.messageId,
        response: result.response,
        to: recipient.email,
        subject: content.subject
      });

      return true;
    } catch (error) {
      console.error('Detailed error sending email:', {
        error: error instanceof Error ? {
          name: error.name,
          message: error.message,
          stack: error.stack
        } : error,
        recipient: recipient.email,
        subject: content.subject
      });
      return false;
    }
  }
}

export const emailAdapter = EmailAdapter.getInstance();
--- End of Content for EmailAdapter.ts ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\suggestions\services\notification\adapters\WhatsAppAdapter.ts
--------------------------------------------------------------------------------
Content:
// lib/WhatsAppAdapter.ts
import {
  NotificationAdapter,
  NotificationChannel,
  RecipientInfo,
  NotificationContent as BaseNotificationContent
} from '../NotificationService'; // Assuming NotificationService.ts exists in the same directory
import twilio from 'twilio';
// Import the specific type for message creation options if available
import { MessageListInstanceCreateOptions } from 'twilio/lib/rest/api/v2010/account/message';

// --- Define an extended NotificationContent interface ---
// This adds the optional adapter-specific data structure
interface NotificationContent extends BaseNotificationContent {
  _adapterSpecificData?: {
      contentSid?: string;
      contentVariables?: string; // Should be a JSON string
      // Add other potential adapter-specific fields here
  };
}
// --- End Interface Extension ---

// --- Type Guard for Twilio-like Errors ---
interface PotentialTwilioError {
  code?: number | string;
  message?: string;
  // Add other potential properties like 'status', 'moreInfo', etc. if needed
}

/**
* Type guard to check if an unknown error object might be a Twilio API error
* by checking for the presence of 'code' or 'message' properties.
* @param error The unknown value caught in a catch block.
* @returns True if the error object has properties common to Twilio errors, false otherwise.
*/
function isPotentialTwilioError(error: unknown): error is PotentialTwilioError {
  // Check if it's a non-null object and has either 'code' or 'message' property
  return typeof error === 'object' && error !== null && ('code' in error || 'message' in error);
}
// --- End Type Guard ---

// --- Helper: Logger (optional but recommended) ---
// Using Record<string, unknown> or object instead of any
const logger = {
info: (message: string, meta?: Record<string, unknown> | object) => {
  console.log(JSON.stringify({ timestamp: new Date().toISOString(), level: 'info', service: 'WhatsAppAdapter', message, ...(meta || {}) }));
},
warn: (message: string, meta?: Record<string, unknown> | object) => {
  console.warn(JSON.stringify({ timestamp: new Date().toISOString(), level: 'warn', service: 'WhatsAppAdapter', message, ...(meta || {}) }));
},
error: (message: string, meta?: Record<string, unknown> | object) => {
  let logMeta = meta || {};
  // If the meta object itself is an Error, extract relevant info
  if (meta instanceof Error) {
      logMeta = { name: meta.name, message: meta.message, stack: meta.stack };
  } else if (isPotentialTwilioError(meta)) {
      // If it's potentially a Twilio error passed directly
      logMeta = { code: meta.code, message: meta.message, ...meta };
  }
  console.error(JSON.stringify({ timestamp: new Date().toISOString(), level: 'error', service: 'WhatsAppAdapter', message, ...logMeta }));
},
};
// --- End Logger ---


export class WhatsAppAdapter implements NotificationAdapter {
// Singleton instance
private static instance: WhatsAppAdapter;
// Twilio client instance (typed)
private client: twilio.Twilio | null = null;
// Configured Twilio WhatsApp sender number
private fromNumber: string = '';

/**
 * Private constructor to enforce singleton pattern.
 * Initializes the Twilio client using environment variables.
 */
private constructor() {
  const accountSid = process.env.TWILIO_ACCOUNT_SID;
  const authToken = process.env.TWILIO_AUTH_TOKEN;
  this.fromNumber = process.env.TWILIO_WHATSAPP_NUMBER || ''; // Get number from env

  // Validate configuration
  if (!accountSid || !authToken || !this.fromNumber) {
    logger.error('Missing Twilio configuration details', {
        hasSid: !!accountSid,
        hasToken: !!authToken,
        hasWhatsAppNumber: !!this.fromNumber,
        detail: "WhatsApp notifications will be unavailable."
    });
    // Do not throw, allow graceful degradation if possible
  } else {
    try {
      // Initialize Twilio client
      this.client = twilio(accountSid, authToken);
      logger.info('Twilio client initialized successfully', { fromWhatsAppNumber: this.fromNumber });
    } catch (error: unknown) { // Catch as unknown
      logger.error('Failed to initialize Twilio client during constructor', { error });
      this.client = null; // Ensure client is null on initialization failure
    }
  }
}

/**
 * Gets the singleton instance of the WhatsAppAdapter.
 * @returns The WhatsAppAdapter instance.
 */
public static getInstance(): WhatsAppAdapter {
  if (!WhatsAppAdapter.instance) {
    WhatsAppAdapter.instance = new WhatsAppAdapter();
  }
  return WhatsAppAdapter.instance;
}

/**
 * Returns the channel type handled by this adapter.
 * @returns The notification channel type ('whatsapp').
 */
public getChannelType(): NotificationChannel {
  return 'whatsapp';
}

/**
 * Checks if this adapter is capable of sending a notification to the given recipient.
 * Requires a valid phone number, an initialized Twilio client, and a configured 'from' number.
 * @param recipient Information about the recipient.
 * @returns True if the adapter can send, false otherwise.
 */
public canSendTo(recipient: RecipientInfo): boolean {
  const hasValidPhone = !!recipient.phone && recipient.phone.length > 8; // Basic validation
  const isClientReady = this.client !== null;
  const hasFromNumber = this.fromNumber !== '';
  const canSend = hasValidPhone && isClientReady && hasFromNumber;

  if (!canSend) {
      let reason = 'Unknown';
      if (!hasValidPhone) reason = 'Invalid or missing phone number';
      else if (!isClientReady) reason = 'Twilio client not initialized';
      else if (!hasFromNumber) reason = 'Twilio "from" number not configured';
      logger.warn('Cannot send WhatsApp message due to configuration or recipient data', {
          reason: reason,
          recipientPhone: recipient.phone // Log phone for debugging
      });
  }
  return canSend;
}

/**
 * Formats a phone number into E.164 standard without the leading '+'.
 * Required for Twilio's `to` parameter when prefixed with `whatsapp:`.
 * Handles Israeli numbers starting with '0'.
 * Example: 0501234567 -> 972501234567
 * @param phone The phone number string to format.
 * @returns The formatted phone number string.
 */
private formatPhoneNumber(phone: string): string {
  // Remove all non-digit characters
  let cleaned = phone.replace(/\D/g, '');
  // Prepend country code for Israeli numbers if '0' prefix exists
  if (cleaned.startsWith('0')) {
    cleaned = '972' + cleaned.substring(1);
  }
  // Remove leading '+' if present (it's added later in the `whatsapp:` prefix)
  if (cleaned.startsWith('+')) {
    cleaned = cleaned.substring(1);
  }
  return cleaned;
}

/**
 * Sends a notification via WhatsApp using the Twilio API.
 * Prefers using template messages if configured via `_adapterSpecificData`.
 * Falls back to raw text messages otherwise (less reliable for business-initiated messages).
 * @param recipient Information about the recipient.
 * @param content The notification content, potentially including adapter-specific data.
 * @returns A promise that resolves to true if the message was successfully queued by Twilio, false otherwise.
 */
public async send(recipient: RecipientInfo, content: NotificationContent): Promise<boolean> {
  logger.info('Attempting to send WhatsApp message', {
    recipientPhone: recipient.phone,
    fromNumber: this.fromNumber,
    hasClient: !!this.client,
    contentSid: content._adapterSpecificData?.contentSid,
    hasContentVariables: !!content._adapterSpecificData?.contentVariables,
  });

  // --- Pre-send Checks ---
  if (!this.client) {
    logger.error('Twilio client not initialized. Cannot send WhatsApp message.');
    return false;
  }
  if (!recipient.phone) {
    logger.error('Recipient phone number is missing. Cannot send WhatsApp message.');
    return false;
  }
  if (!this.fromNumber) {
      logger.error('Twilio "from" WhatsApp number is not configured. Cannot send message.');
      return false;
  }
  // --- End Pre-send Checks ---


  try {
    // --- Format Numbers ---
    const toNumberE164 = this.formatPhoneNumber(recipient.phone);
    // Ensure 'from' number has '+' prefix for the whatsapp: schema
    const fromWhatsAppFormatted = `whatsapp:${this.fromNumber.startsWith('+') ? this.fromNumber : '+' + this.fromNumber}`;
    // Ensure 'to' number has '+' prefix for the whatsapp: schema
    const toWhatsAppFormatted = `whatsapp:+${toNumberE164}`;

    logger.info(`Formatted numbers for sending via Twilio`, { from: fromWhatsAppFormatted, to: toWhatsAppFormatted });
    // --- End Format Numbers ---


    // --- Prepare Message Payload ---
    let messagePayload: MessageListInstanceCreateOptions;
    const adapterData = content._adapterSpecificData;

    if (adapterData?.contentSid && adapterData?.contentVariables) {
       // **Use Template Messaging**
       logger.info(`Preparing WhatsApp template message`, { contentSid: adapterData.contentSid });
       messagePayload = {
          from: fromWhatsAppFormatted,
          to: toWhatsAppFormatted,
          contentSid: adapterData.contentSid, // The approved template SID
          contentVariables: adapterData.contentVariables, // JSON string of variables {"1": "value1", "2": "value2"}
          // Optional: Specify Messaging Service SID if using one
          // messagingServiceSid: process.env.TWILIO_MESSAGING_SERVICE_SID
       };
    } else {
       // **Use Raw Text Messaging (Fallback)**
       // Note: This might fail if outside the 24-hour customer service window
       // or if WhatsApp/Twilio policies require templates for this type of message.
       const bodyText = content.body || content.subject || 'הודעה ממערכת השידוכים'; // Determine fallback content
       logger.warn(`Preparing raw text WhatsApp message (using fallback, might fail)`, { bodyLength: bodyText.length });
       messagePayload = {
          from: fromWhatsAppFormatted,
          to: toWhatsAppFormatted,
          body: bodyText, // The actual text message content
          // Optional: Specify Messaging Service SID if using one
          // messagingServiceSid: process.env.TWILIO_MESSAGING_SERVICE_SID
       };
    }
    // --- End Prepare Message Payload ---


    // --- Send Message via Twilio API ---
    logger.info("Sending message payload to Twilio API", { payload: messagePayload }); // Be cautious logging full payload in production if sensitive
    const message = await this.client.messages.create(messagePayload);
    // --- End Send Message ---


    // --- Log Success ---
    // The message status here is typically 'queued' or 'sending'. Delivery confirmation is asynchronous.
    logger.info('WhatsApp message request processed successfully by Twilio', {
      messageSid: message.sid,
      status: message.status,
      to: toWhatsAppFormatted,
      from: fromWhatsAppFormatted,
      price: message.price, // Log cost if available
      priceUnit: message.priceUnit,
      errorCode: message.errorCode, // Log if Twilio detected an error immediately
      errorMessage: message.errorMessage,
    });
    // We return true because Twilio accepted the request. Delivery is not guaranteed at this point.
    return true;
    // --- End Log Success ---

  } catch (error: unknown) { // Catch error as unknown
    // --- Handle Errors ---
    let errorMessage = 'Unknown error occurred while sending WhatsApp message.';
    let errorCode: number | string | undefined;

    // Use the type guard to safely access potential error properties
    if (isPotentialTwilioError(error)) {
        errorCode = error.code;
        errorMessage = error.message || errorMessage;
    } else if (error instanceof Error) {
        // Standard JavaScript Error
        errorMessage = error.message;
    } else if (typeof error === 'string') {
        // Simple string error
        errorMessage = error;
    }

    // Log detailed error information
    logger.error('Failed to send WhatsApp message via Twilio', {
      errorCode,
      errorMessage,
      recipient: `whatsapp:+${this.formatPhoneNumber(recipient.phone)}`, // Log formatted number for debugging
      from: `whatsapp:${this.fromNumber.startsWith('+') ? this.fromNumber : '+' + this.fromNumber}`,
      // Pass the original error object for full details in structured logs
      errorDetails: error
    });

    // Specific handling/logging for common, informative errors
    if (errorCode === 63018 || errorCode === 21614) { // Common codes for non-WhatsApp/incapable numbers
         logger.error(`Recipient number appears invalid or not registered on WhatsApp.`, { phone: recipient.phone, errorCode });
         // Consider adding logic here: maybe mark the user's number as invalid? Notify admin?
    } else if (errorCode === 63016) { // Common code for failing outside the 24-hour window without a template
          logger.warn(`Failed to send non-template message outside 24-hour window.`, { phone: recipient.phone, errorCode });
    }

    return false; // Indicate that sending failed
    // --- End Handle Errors ---
  }
}
}

// Export the singleton instance for use in other parts of the application
export const whatsAppAdapter = WhatsAppAdapter.getInstance();
--- End of Content for WhatsAppAdapter.ts ---

================================================================================
Directory: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\suggestions\services\suggestions
================================================================================

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\suggestions\services\suggestions\StatusTransitionService.ts
--------------------------------------------------------------------------------
Content:
// src/app/components/matchmaker/suggestions/services/suggestions/StatusTransitionService.ts

import { MatchSuggestionStatus, User, MatchSuggestion, Profile } from "@prisma/client";
import prisma from "@/lib/prisma";
import { notificationService } from "../notification/NotificationService";


type UserWithProfile = User & {
  profile: Profile | null;
};

export type SuggestionWithParties = MatchSuggestion & {
  firstParty: UserWithProfile;
  secondParty: UserWithProfile;
  matchmaker: User;
};

type TransitionOptions = {
  sendNotifications?: boolean;
  customMessage?: string;
  notifyParties?: ('first' | 'second' | 'matchmaker')[];
};

export class StatusTransitionService {
  private static instance: StatusTransitionService;
  private constructor() {}

  public static getInstance(): StatusTransitionService {
    if (!StatusTransitionService.instance) {
      StatusTransitionService.instance = new StatusTransitionService();
    }
    return StatusTransitionService.instance;
  }

  async transitionStatus(
    suggestion: SuggestionWithParties,
    newStatus: MatchSuggestionStatus,
    notes?: string,
    options: TransitionOptions = {}
  ): Promise<SuggestionWithParties> {
    const previousStatus = suggestion.status;
    const mergedOptions = {
      sendNotifications: true,
      notifyParties: ['first', 'second', 'matchmaker'],
      ...options
    };

    // Validate the transition
    this.validateStatusTransition(previousStatus, newStatus);

    // Perform the status transition in a transaction
    const updatedSuggestion = await prisma.$transaction(async (tx) => {
      // Update the suggestion status
      const updated = await tx.matchSuggestion.update({
        where: { id: suggestion.id },
        data: {
          status: newStatus,
          previousStatus,
          lastStatusChange: new Date(),
          lastActivity: new Date(),
          
          // Update timing fields based on status
          ...(newStatus === MatchSuggestionStatus.FIRST_PARTY_APPROVED && {
            firstPartyResponded: new Date(),
          }),
          ...(newStatus === MatchSuggestionStatus.PENDING_SECOND_PARTY && {
            secondPartySent: new Date(),
          }),
          ...(newStatus === MatchSuggestionStatus.SECOND_PARTY_APPROVED && {
            secondPartyResponded: new Date(),
          }),
          ...(newStatus === MatchSuggestionStatus.CONTACT_DETAILS_SHARED && {
            closedAt: new Date(),
          }),
          ...(newStatus === MatchSuggestionStatus.MEETING_SCHEDULED && {
            firstMeetingScheduled: new Date(),
          }),
        },
        include: {
          firstParty: {
            include: { profile: true }
          },
          secondParty: {
            include: { profile: true }
          },
          matchmaker: true,
        },
      });

      // Create status history record
      await tx.suggestionStatusHistory.create({
        data: {
          suggestionId: suggestion.id,
          status: newStatus,
          notes: notes || `Status changed from ${previousStatus} to ${newStatus}`,
        },
      });

      return updated;
    });

    // Only send notifications if option is enabled
    if (mergedOptions.sendNotifications) {
      try {
        // Utilize the notification service for all channels (email, WhatsApp, etc.)
        await notificationService.handleSuggestionStatusChange(
          
          updatedSuggestion, 
          {
            channels: ['email', 'whatsapp'],
            notifyParties: mergedOptions.notifyParties as ('first' | 'second' | 'matchmaker')[],
            customMessage: mergedOptions.customMessage
          }
        );
        
        console.log(`Notifications sent for suggestion ${updatedSuggestion.id} status change to ${newStatus}`);
      } catch (error) {
        // Log error but don't fail the transition
        console.error('Error sending status transition notifications:', error);
      }
    }

    return updatedSuggestion;
  }

  private validateStatusTransition(
    currentStatus: MatchSuggestionStatus, 
    newStatus: MatchSuggestionStatus
  ): void {
    const validTransitions: Record<MatchSuggestionStatus, MatchSuggestionStatus[]> = {
      DRAFT: [MatchSuggestionStatus.PENDING_FIRST_PARTY],
      PENDING_FIRST_PARTY: [
        MatchSuggestionStatus.FIRST_PARTY_APPROVED,
        MatchSuggestionStatus.FIRST_PARTY_DECLINED,
        MatchSuggestionStatus.CANCELLED
      ],
      FIRST_PARTY_APPROVED: [
        MatchSuggestionStatus.PENDING_SECOND_PARTY,
        MatchSuggestionStatus.CANCELLED
      ],
      FIRST_PARTY_DECLINED: [
        MatchSuggestionStatus.CLOSED
      ],
      PENDING_SECOND_PARTY: [
        MatchSuggestionStatus.SECOND_PARTY_APPROVED,
        MatchSuggestionStatus.SECOND_PARTY_DECLINED,
        MatchSuggestionStatus.CANCELLED
      ],
      SECOND_PARTY_APPROVED: [
        MatchSuggestionStatus.CONTACT_DETAILS_SHARED,
        MatchSuggestionStatus.CANCELLED
      ],
      SECOND_PARTY_DECLINED: [
        MatchSuggestionStatus.CLOSED
      ],
      AWAITING_MATCHMAKER_APPROVAL: [
        MatchSuggestionStatus.CONTACT_DETAILS_SHARED,
        MatchSuggestionStatus.CANCELLED
      ],
      CONTACT_DETAILS_SHARED: [
        MatchSuggestionStatus.AWAITING_FIRST_DATE_FEEDBACK,
        MatchSuggestionStatus.CANCELLED
      ],
      AWAITING_FIRST_DATE_FEEDBACK: [
        MatchSuggestionStatus.THINKING_AFTER_DATE,
        MatchSuggestionStatus.ENDED_AFTER_FIRST_DATE,
        MatchSuggestionStatus.CANCELLED
      ],
      THINKING_AFTER_DATE: [
        MatchSuggestionStatus.PROCEEDING_TO_SECOND_DATE,
        MatchSuggestionStatus.ENDED_AFTER_FIRST_DATE,
        MatchSuggestionStatus.CANCELLED
      ],
      PROCEEDING_TO_SECOND_DATE: [
        MatchSuggestionStatus.DATING,
        MatchSuggestionStatus.CANCELLED
      ],
      ENDED_AFTER_FIRST_DATE: [
        MatchSuggestionStatus.CLOSED
      ],
      MEETING_PENDING: [
        MatchSuggestionStatus.MEETING_SCHEDULED,
        MatchSuggestionStatus.CANCELLED
      ],
      MEETING_SCHEDULED: [
        MatchSuggestionStatus.DATING,
        MatchSuggestionStatus.CANCELLED
      ],
      MATCH_APPROVED: [
        MatchSuggestionStatus.DATING,
        MatchSuggestionStatus.CANCELLED
      ],
      MATCH_DECLINED: [
        MatchSuggestionStatus.CLOSED
      ],
      DATING: [
        MatchSuggestionStatus.ENGAGED,
        MatchSuggestionStatus.CLOSED,
        MatchSuggestionStatus.CANCELLED
      ],
      ENGAGED: [
        MatchSuggestionStatus.MARRIED,
        MatchSuggestionStatus.CANCELLED
      ],
      MARRIED: [],
      EXPIRED: [],
      CLOSED: [],
      CANCELLED: []
    };

    if (!validTransitions[currentStatus]?.includes(newStatus)) {
      throw new Error(
        `Invalid status transition from ${currentStatus} to ${newStatus}. ` +
        `Valid transitions are: ${validTransitions[currentStatus]?.join(', ') || 'none'}`
      );
    }
  }
  
  getStatusLabel(status: MatchSuggestionStatus): string {
    const statusLabels: Record<MatchSuggestionStatus, string> = {
      DRAFT: "טיוטה",
      PENDING_FIRST_PARTY: "ממתין לתשובת הצד הראשון",
      FIRST_PARTY_APPROVED: "הצד הראשון אישר",
      FIRST_PARTY_DECLINED: "הצד הראשון דחה",
      PENDING_SECOND_PARTY: "ממתין לתשובת הצד השני",
      SECOND_PARTY_APPROVED: "הצד השני אישר",
      SECOND_PARTY_DECLINED: "הצד השני דחה",
      AWAITING_MATCHMAKER_APPROVAL: "ממתין לאישור השדכן",
      CONTACT_DETAILS_SHARED: "פרטי קשר שותפו",
      AWAITING_FIRST_DATE_FEEDBACK: "ממתין למשוב פגישה ראשונה",
      THINKING_AFTER_DATE: "בחשיבה לאחר הפגישה",
      PROCEEDING_TO_SECOND_DATE: "התקדמות לפגישה שנייה",
      ENDED_AFTER_FIRST_DATE: "הסתיים לאחר פגישה ראשונה",
      MEETING_PENDING: "פגישה בהמתנה",
      MEETING_SCHEDULED: "פגישה קבועה",
      MATCH_APPROVED: "השידוך אושר",
      MATCH_DECLINED: "השידוך נדחה",
      DATING: "בתהליך היכרות",
      ENGAGED: "אירוסין",
      MARRIED: "נישואין",
      CANCELLED: "בוטל",
      CLOSED: "נסגר",
      EXPIRED: "פג תוקף"
    };
    
    return statusLabels[status] || status;
  }
  
  // Get available actions for current status based on user role
  getAvailableActions(
    suggestion: SuggestionWithParties, 
    userId: string
  ): { id: string; label: string; nextStatus: MatchSuggestionStatus }[] {
    const isFirstParty = suggestion.firstPartyId === userId;
    const isSecondParty = suggestion.secondPartyId === userId;
    const isMatchmaker = suggestion.matchmakerId === userId;
    
    const actions: Record<MatchSuggestionStatus, { 
      firstParty?: { id: string; label: string; nextStatus: MatchSuggestionStatus }[];
      secondParty?: { id: string; label: string; nextStatus: MatchSuggestionStatus }[];
      matchmaker?: { id: string; label: string; nextStatus: MatchSuggestionStatus }[];
    }> = {
      DRAFT: {
        matchmaker: [
          { id: "send-to-first", label: "שליחה לצד הראשון", nextStatus: MatchSuggestionStatus.PENDING_FIRST_PARTY }
        ]
      },
      PENDING_FIRST_PARTY: {
        firstParty: [
          { id: "approve", label: "אישור ההצעה", nextStatus: MatchSuggestionStatus.FIRST_PARTY_APPROVED },
          { id: "decline", label: "דחיית ההצעה", nextStatus: MatchSuggestionStatus.FIRST_PARTY_DECLINED }
        ],
        matchmaker: [
          { id: "cancel", label: "ביטול ההצעה", nextStatus: MatchSuggestionStatus.CANCELLED }
        ]
      },
      FIRST_PARTY_APPROVED: {
        matchmaker: [
          { id: "send-to-second", label: "שליחה לצד השני", nextStatus: MatchSuggestionStatus.PENDING_SECOND_PARTY },
          { id: "cancel", label: "ביטול ההצעה", nextStatus: MatchSuggestionStatus.CANCELLED }
        ]
      },
      FIRST_PARTY_DECLINED: {
        matchmaker: [
          { id: "close", label: "סגירת הצעה", nextStatus: MatchSuggestionStatus.CLOSED }
        ]
      },
      PENDING_SECOND_PARTY: {
        secondParty: [
          { id: "approve", label: "אישור ההצעה", nextStatus: MatchSuggestionStatus.SECOND_PARTY_APPROVED },
          { id: "decline", label: "דחיית ההצעה", nextStatus: MatchSuggestionStatus.SECOND_PARTY_DECLINED }
        ],
        matchmaker: [
          { id: "cancel", label: "ביטול ההצעה", nextStatus: MatchSuggestionStatus.CANCELLED }
        ]
      },
      SECOND_PARTY_APPROVED: {
        matchmaker: [
          { id: "share-contacts", label: "שיתוף פרטי קשר", nextStatus: MatchSuggestionStatus.CONTACT_DETAILS_SHARED },
          { id: "cancel", label: "ביטול ההצעה", nextStatus: MatchSuggestionStatus.CANCELLED }
        ]
      },
      SECOND_PARTY_DECLINED: {
        matchmaker: [
          { id: "close", label: "סגירת הצעה", nextStatus: MatchSuggestionStatus.CLOSED }
        ]
      },
      AWAITING_MATCHMAKER_APPROVAL: {
        matchmaker: [
          { id: "approve-share", label: "אישור שיתוף פרטים", nextStatus: MatchSuggestionStatus.CONTACT_DETAILS_SHARED },
          { id: "cancel", label: "ביטול ההצעה", nextStatus: MatchSuggestionStatus.CANCELLED }
        ]
      },
      CONTACT_DETAILS_SHARED: {
        firstParty: [
          { id: "provide-feedback", label: "דיווח משוב לאחר פגישה", nextStatus: MatchSuggestionStatus.AWAITING_FIRST_DATE_FEEDBACK }
        ],
        secondParty: [
          { id: "provide-feedback", label: "דיווח משוב לאחר פגישה", nextStatus: MatchSuggestionStatus.AWAITING_FIRST_DATE_FEEDBACK }
        ],
        matchmaker: [
          { id: "request-feedback", label: "בקש משוב", nextStatus: MatchSuggestionStatus.AWAITING_FIRST_DATE_FEEDBACK },
          { id: "cancel", label: "ביטול ההצעה", nextStatus: MatchSuggestionStatus.CANCELLED }
        ]
      },
      AWAITING_FIRST_DATE_FEEDBACK: {
         matchmaker: [
            { id: "mark-thinking", label: "סמן כ'בחשיבה'", nextStatus: MatchSuggestionStatus.THINKING_AFTER_DATE },
            { id: "mark-ended-first", label: "סמן כ'הסתיים לאחר פגישה'", nextStatus: MatchSuggestionStatus.ENDED_AFTER_FIRST_DATE },
            { id: "cancel", label: "ביטול ההצעה", nextStatus: MatchSuggestionStatus.CANCELLED }
         ]
      },
      THINKING_AFTER_DATE: {
         matchmaker: [
            { id: "proceed-second", label: "המשך לפגישה שניה", nextStatus: MatchSuggestionStatus.PROCEEDING_TO_SECOND_DATE },
            { id: "mark-ended-first", label: "סמן כ'הסתיים לאחר פגישה'", nextStatus: MatchSuggestionStatus.ENDED_AFTER_FIRST_DATE },
            { id: "cancel", label: "ביטול ההצעה", nextStatus: MatchSuggestionStatus.CANCELLED }
         ]
      },
      PROCEEDING_TO_SECOND_DATE: {
         matchmaker: [
            { id: "mark-dating", label: "סמן כ'בתהליך היכרות'", nextStatus: MatchSuggestionStatus.DATING },
            { id: "cancel", label: "ביטול ההצעה", nextStatus: MatchSuggestionStatus.CANCELLED }
         ]
      },
      ENDED_AFTER_FIRST_DATE: {
        matchmaker: [
          { id: "close", label: "סגירת הצעה", nextStatus: MatchSuggestionStatus.CLOSED }
        ]
      },
      MEETING_PENDING: {
         matchmaker: [
            { id: "schedule-meeting", label: "קביעת פגישה", nextStatus: MatchSuggestionStatus.MEETING_SCHEDULED },
            { id: "cancel", label: "ביטול ההצעה", nextStatus: MatchSuggestionStatus.CANCELLED }
         ]
      },
      MEETING_SCHEDULED: {
         matchmaker: [
            { id: "mark-dating", label: "סמן כ'בתהליך היכרות'", nextStatus: MatchSuggestionStatus.DATING },
            { id: "cancel", label: "ביטול ההצעה", nextStatus: MatchSuggestionStatus.CANCELLED }
         ]
      },
      MATCH_APPROVED: {
         matchmaker: [
            { id: "mark-dating", label: "סמן כ'בתהליך היכרות'", nextStatus: MatchSuggestionStatus.DATING },
            { id: "cancel", label: "ביטול ההצעה", nextStatus: MatchSuggestionStatus.CANCELLED }
         ]
      },
      MATCH_DECLINED: {
        matchmaker: [
          { id: "close", label: "סגירת הצעה", nextStatus: MatchSuggestionStatus.CLOSED }
        ]
      },
      DATING: {
        matchmaker: [
          { id: "mark-engaged", label: "עדכון אירוסין", nextStatus: MatchSuggestionStatus.ENGAGED },
          { id: "close", label: "סגירת תהליך", nextStatus: MatchSuggestionStatus.CLOSED },
          { id: "cancel", label: "ביטול השידוך", nextStatus: MatchSuggestionStatus.CANCELLED }
        ]
      },
      ENGAGED: {
        matchmaker: [
          { id: "mark-married", label: "עדכון נישואין", nextStatus: MatchSuggestionStatus.MARRIED },
          { id: "cancel", label: "ביטול אירוסין", nextStatus: MatchSuggestionStatus.CANCELLED }
        ]
      },
      MARRIED: {},
      EXPIRED: {},
      CLOSED: {},
      CANCELLED: {}
    };
    
    if (isFirstParty && actions[suggestion.status]?.firstParty) {
      return actions[suggestion.status].firstParty || [];
    }
    
    if (isSecondParty && actions[suggestion.status]?.secondParty) {
      return actions[suggestion.status].secondParty || [];
    }
    
    if (isMatchmaker && actions[suggestion.status]?.matchmaker) {
      return actions[suggestion.status].matchmaker || [];
    }
    
    return [];
  }
}

// Export singleton instance
export const statusTransitionService = StatusTransitionService.getInstance();
--- End of Content for StatusTransitionService.ts ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\suggestions\services\suggestions\SuggestionService.ts
--------------------------------------------------------------------------------
Content:
// src/app/components/matchmaker/suggestions/services/suggestions/SuggestionService.ts

import { MatchSuggestionStatus, Priority, UserRole } from "@prisma/client";
import prisma from "@/lib/prisma";
import { statusTransitionService, type SuggestionWithParties } from "./StatusTransitionService";
import { initNotificationService } from "../notification/initNotifications";
import type { 
  CreateSuggestionData,
  UpdateSuggestionData,
} from "@/types/suggestions";

// Initialize notification service
const notificationService = initNotificationService();
const BLOCKING_SUGGESTION_STATUSES: MatchSuggestionStatus[] = [
  'FIRST_PARTY_APPROVED',
  'SECOND_PARTY_APPROVED',
  'AWAITING_MATCHMAKER_APPROVAL',
  'CONTACT_DETAILS_SHARED',
  'AWAITING_FIRST_DATE_FEEDBACK',
  'THINKING_AFTER_DATE',
  'PROCEEDING_TO_SECOND_DATE',
  'MEETING_PENDING',
  'MEETING_SCHEDULED',
  'MATCH_APPROVED',
  'DATING',
];
export class SuggestionService {
  private static instance: SuggestionService;

  private constructor() {}

  public static getInstance(): SuggestionService {
    if (!SuggestionService.instance) {
      SuggestionService.instance = new SuggestionService();
    }
    return SuggestionService.instance;
  }

  /**
   * יצירת הצעת שידוך חדשה
   */
  public async createSuggestion(data: CreateSuggestionData): Promise<SuggestionWithParties> {
    // 1. וידוא הרשאות השדכן
    const matchmaker = await prisma.user.findUnique({
      where: { id: data.matchmakerId },
    });

    // קוד חדש ומתוקן
const allowedRoles: UserRole[] = [UserRole.MATCHMAKER, UserRole.ADMIN];
if (!matchmaker || !allowedRoles.includes(matchmaker.role)) {
  throw new Error("Unauthorized - User must be a Matchmaker or Admin");
}
  // --- START: NEW VALIDATION LOGIC ---
    // Fetch both parties to get their names for error messages
    const [firstParty, secondParty] = await Promise.all([
        prisma.user.findUnique({ where: { id: data.firstPartyId } }),
        prisma.user.findUnique({ where: { id: data.secondPartyId } })
    ]);

    if (!firstParty || !secondParty) {
        throw new Error("One or both candidates not found.");
    }
    
    // Check for BLOCKING suggestions for either party
    const blockingSuggestion = await prisma.matchSuggestion.findFirst({
        where: {
            OR: [
                { firstPartyId: data.firstPartyId },
                { secondPartyId: data.firstPartyId },
                { firstPartyId: data.secondPartyId },
                { secondPartyId: data.secondPartyId },
            ],
            status: {
                in: BLOCKING_SUGGESTION_STATUSES,
            },
        },
    });

    if (blockingSuggestion) {
        const hasBlockingSuggestion = (id: string) => 
            blockingSuggestion.firstPartyId === id || blockingSuggestion.secondPartyId === id;
            
        if (hasBlockingSuggestion(data.firstPartyId)) {
            throw new Error(`לא ניתן ליצור הצעה חדשה. ל${firstParty.firstName} ${firstParty.lastName} יש כבר הצעה פעילה.`);
        }
        if (hasBlockingSuggestion(data.secondPartyId)) {
            throw new Error(`לא ניתן ליצור הצעה חדשה. ל${secondParty.firstName} ${secondParty.lastName} יש כבר הצעה פעילה.`);
        }
    }

    // 4. יצירת ההצעה בטרנזקציה
    const suggestion = await prisma.$transaction(async (tx) => {
      // יצירת ההצעה עם הנתונים המנוקים
      console.log('Decision deadline value:', data.decisionDeadline);
      console.log('Decision deadline type:', typeof data.decisionDeadline);
      
      const cleanedData = {
        matchmakerId: data.matchmakerId,
        firstPartyId: data.firstPartyId,
        secondPartyId: data.secondPartyId,
        status: MatchSuggestionStatus.PENDING_FIRST_PARTY,
        priority: data.priority || Priority.MEDIUM,
        matchingReason: data.notes?.matchingReason || null,
        firstPartyNotes: data.notes?.forFirstParty || null,
        secondPartyNotes: data.notes?.forSecondParty || null,
        internalNotes: data.notes?.internal || null,
        followUpNotes: data.notes?.followUpNotes || null,
        decisionDeadline: new Date(data.decisionDeadline),
        firstPartySent: new Date(),
        lastActivity: new Date(),
        lastStatusChange: new Date()
      };

      const newSuggestion = await tx.matchSuggestion.create({
        data: cleanedData,
        include: {
          firstParty: {
            include: { profile: true }
          },
          secondParty: {
            include: { profile: true }
          },
          matchmaker: true,
        },
      });

      // יצירת רשומת היסטוריה ראשונית
      await tx.suggestionStatusHistory.create({
        data: {
          suggestionId: newSuggestion.id,
          status: newSuggestion.status,
          notes: "Initial suggestion created and sent to first party",
        },
      });

      return newSuggestion;
    });

    // 5. שליחת התראות באמצעות מערכת ההתראות המאוחדת
    try {
      console.log('Sending notifications for new suggestion...');
      await notificationService.handleSuggestionStatusChange(
        suggestion,
        {
          channels: ['email', 'whatsapp'],
          notifyParties: ['first'] // רק לצד הראשון בשלב זה
        }
      );
    } catch (error) {
      console.error('Error sending initial suggestion notifications:', error);
      // לא לעצור את התהליך - רק לדווח על השגיאה
    }

    return suggestion;
  }

  /**
   * עדכון פרטי הצעת שידוך
   */
  public async updateSuggestion(
    id: string,
    matchmakerId: string,
    data: UpdateSuggestionData
  ): Promise<SuggestionWithParties> {
    // 1. בדיקת קיום ההצעה והרשאות
    const suggestion = await prisma.matchSuggestion.findUnique({
      where: { id },
      include: {
        firstParty: {
          include: { profile: true }
        },
        secondParty: {
          include: { profile: true }
        },
        matchmaker: true,
      },
    });

    if (!suggestion) {
      throw new Error("Suggestion not found");
    }

    if (suggestion.matchmakerId !== matchmakerId) {
      throw new Error("Unauthorized - Only the original matchmaker can update the suggestion");
    }

    // 2. ניקוי והכנת נתוני העדכון
    const cleanedUpdateData = {
      ...(data.notes?.matchingReason !== undefined && { 
        matchingReason: data.notes.matchingReason 
      }),
      ...(data.notes?.forFirstParty !== undefined && { 
        firstPartyNotes: data.notes.forFirstParty 
      }),
      ...(data.notes?.forSecondParty !== undefined && { 
        secondPartyNotes: data.notes.forSecondParty 
      }),
      ...(data.notes?.internal !== undefined && { 
        internalNotes: data.notes.internal 
      }),
      ...(data.notes?.followUpNotes !== undefined && { 
        followUpNotes: data.notes.followUpNotes 
      }),
      ...(data.priority && { priority: data.priority }),
      ...(data.responseDeadline && { 
        responseDeadline: new Date(data.responseDeadline) 
      }),
      ...(data.decisionDeadline && { 
        decisionDeadline: new Date(data.decisionDeadline) 
      }),
      lastActivity: new Date()
    };

    // 3. עדכון הנתונים
    return await prisma.matchSuggestion.update({
      where: { id },
      data: cleanedUpdateData,
      include: {
        firstParty: {
          include: { profile: true }
        },
        secondParty: {
          include: { profile: true }
        },
        matchmaker: true,
      },
    });
  }

  /**
   * עדכון סטטוס של הצעת שידוך
   */
  public async updateSuggestionStatus(
    id: string,
    newStatus: MatchSuggestionStatus,
    userId: string,
    notes?: string
  ): Promise<SuggestionWithParties> {
    const suggestion = await prisma.matchSuggestion.findUnique({
      where: { id },
      include: {
        firstParty: {
          include: { profile: true }
        },
        secondParty: {
          include: { profile: true }
        },
        matchmaker: true,
      },
    });

    if (!suggestion) {
      throw new Error("Suggestion not found");
    }

    this.validateStatusChangePermission(suggestion, userId, newStatus);
    return await statusTransitionService.transitionStatus(suggestion, newStatus, notes);
  }

  /**
   * קבלת פרטי הצעת שידוך
   */
  public async getSuggestionDetails(id: string, userId: string): Promise<SuggestionWithParties> {
    const suggestion = await prisma.matchSuggestion.findUnique({
      where: { id },
      include: {
        firstParty: {
          include: { profile: true }
        },
        secondParty: {
          include: { profile: true }
        },
        matchmaker: true,
        statusHistory: {
          orderBy: { createdAt: "desc" },
        },
        meetings: {
          include: {
            feedback: true
          }
        },
      },
    });

    if (!suggestion) {
      throw new Error("Suggestion not found");
    }

    if (
      userId !== suggestion.matchmakerId &&
      userId !== suggestion.firstPartyId &&
      userId !== suggestion.secondPartyId
    ) {
      throw new Error("Unauthorized to view this suggestion");
    }

    return suggestion;
  }

  /**
   * קבלת רשימת הצעות שידוך של משתמש
   */
  public async getUserSuggestions(userId: string): Promise<SuggestionWithParties[]> {
    return await prisma.matchSuggestion.findMany({
      where: {
        OR: [
          { matchmakerId: userId },
          { firstPartyId: userId },
          { secondPartyId: userId },
        ],
      },
      include: {
        firstParty: {
          include: { profile: true }
        },
        secondParty: {
          include: { profile: true }
        },
        matchmaker: true,
        statusHistory: {
          orderBy: { createdAt: "desc" },
        },
        meetings: {
          include: {
            feedback: true
          }
        },
      },
      orderBy: {
        lastActivity: "desc",
      },
    });
  }

  /**
   * אימות הרשאות לשינוי סטטוס
   */
  private validateStatusChangePermission(
    suggestion: SuggestionWithParties,
    userId: string,
    newStatus: MatchSuggestionStatus
  ): void {
    const isMatchmaker = userId === suggestion.matchmakerId;
    const isFirstParty = userId === suggestion.firstPartyId;

    switch (newStatus) {
      case MatchSuggestionStatus.FIRST_PARTY_APPROVED:
      case MatchSuggestionStatus.FIRST_PARTY_DECLINED:
        if (!isFirstParty) throw new Error("Only first party can approve/decline at this stage");
        break;

      default:
        if (!isMatchmaker) throw new Error("Only matchmaker can change status at this stage");
    }
  }

  /**
   * בדיקת קיום הצעה פעילה בין שני מועמדים
   */
  private async checkExistingSuggestion(
    firstPartyId: string,
    secondPartyId: string
  ): Promise<SuggestionWithParties | null> {
    return await prisma.matchSuggestion.findFirst({
      where: {
        AND: [
          {
            OR: [
              { firstPartyId, secondPartyId },
              { firstPartyId: secondPartyId, secondPartyId: firstPartyId },
            ],
          },
          {
            status: {
              notIn: [
                MatchSuggestionStatus.CLOSED,
                MatchSuggestionStatus.CANCELLED,
                MatchSuggestionStatus.EXPIRED,
                MatchSuggestionStatus.MATCH_DECLINED,
              ],
            },
          },
        ],
      },
      include: {
        firstParty: {
          include: { profile: true }
        },
        secondParty: {
          include: { profile: true }
        },
        matchmaker: true,
      },
    });
  }
}
export const suggestionService = SuggestionService.getInstance();
--- End of Content for SuggestionService.ts ---

================================================================================
Directory: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\suggestions\utils
================================================================================

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\suggestions\utils\matchingAlgorithm.ts
--------------------------------------------------------------------------------
Content:
import { AvailabilityStatus } from '@prisma/client';
import type { UserProfile } from '@/types/next-auth';

export interface MatchScore {
  score: number;
  criteria: MatchCriteria[];
  compatibility: number;
  reasons: string[];
}

export interface MatchCriteria {
  name: string;
  weight: number;
  score: number;
  reason?: string;
}

interface AgePreference {
  min: number;
  max: number;
}

const calculateAge = (birthDate: Date): number => {
  const today = new Date();
  const birth = new Date(birthDate);
  let age = today.getFullYear() - birth.getFullYear();
  const monthDiff = today.getMonth() - birth.getMonth();
  if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birth.getDate())) {
    age--;
  }
  return age;
};

const calculateAgeCompatibility = (
  profileA: UserProfile,
  profileB: UserProfile,
  preferences: { ageA?: AgePreference; ageB?: AgePreference }
): MatchCriteria => {
  const ageA = calculateAge(profileA.birthDate);
  const ageB = calculateAge(profileB.birthDate);
  const ageDiff = Math.abs(ageA - ageB);
  
  let score = 0;
  let reason = '';

  // בדיקת העדפות גיל הדדית
  const aPrefsMatch = preferences.ageA ? 
    (ageB >= preferences.ageA.min && ageB <= preferences.ageA.max) : true;
  const bPrefsMatch = preferences.ageB ?
    (ageA >= preferences.ageB.min && ageA <= preferences.ageB.max) : true;

  if (aPrefsMatch && bPrefsMatch) {
    if (ageDiff <= 2) {
      score = 1;
      reason = 'הפרש גילאים אידיאלי';
    } else if (ageDiff <= 5) {
      score = 0.8;
      reason = 'הפרש גילאים טוב';
    } else if (ageDiff <= 8) {
      score = 0.6;
      reason = 'הפרש גילאים סביר';
    } else {
      score = 0.4;
      reason = 'הפרש גילאים גדול';
    }
  } else {
    score = 0.2;
    reason = 'לא תואם להעדפות הגיל';
  }

  return {
    name: 'age',
    weight: 15,
    score,
    reason
  };
};

const calculateLocationCompatibility = (
  profileA: UserProfile,
  profileB: UserProfile
): MatchCriteria => {
  let score = 0;
  let reason = '';

  if (!profileA.city || !profileB.city) {
    return {
      name: 'location',
      weight: 10,
      score: 0.5,
      reason: 'חסר מידע על מיקום'
    };
  }

  const sameCity = profileA.city === profileB.city;
  const preferredLocationsA = profileA.preferredLocations || [];
  const preferredLocationsB = profileB.preferredLocations || [];

  if (sameCity) {
    score = 1;
    reason = 'גרים באותה עיר';
  } else if (
    preferredLocationsA.includes(profileB.city) &&
    preferredLocationsB.includes(profileA.city)
  ) {
    score = 0.8;
    reason = 'מיקום מועדף הדדי';
  } else if (
    preferredLocationsA.includes(profileB.city) ||
    preferredLocationsB.includes(profileA.city)
  ) {
    score = 0.6;
    reason = 'מיקום מועדף חד צדדי';
  } else {
    score = 0.4;
    reason = 'ערים שונות';
  }

  return {
    name: 'location',
    weight: 10,
    score,
    reason
  };
};

const calculateReligiousCompatibility = (
  profileA: UserProfile,
  profileB: UserProfile
): MatchCriteria => {
  let score = 0;
  let reason = '';

  if (!profileA.religiousLevel || !profileB.religiousLevel) {
    return {
      name: 'religious',
      weight: 20,
      score: 0.5,
      reason: 'חסר מידע על רמת דתיות'
    };
  }

  const sameLevel = profileA.religiousLevel === profileB.religiousLevel;
  const preferredLevelsA = profileA.preferredReligiousLevels || [];
  const preferredLevelsB = profileB.preferredReligiousLevels || [];

  if (sameLevel) {
    score = 1;
    reason = 'רמת דתיות זהה';
  } else if (
    preferredLevelsA.includes(profileB.religiousLevel) &&
    preferredLevelsB.includes(profileA.religiousLevel)
  ) {
    score = 0.8;
    reason = 'רמת דתיות מועדפת הדדית';
  } else if (
    preferredLevelsA.includes(profileB.religiousLevel) ||
    preferredLevelsB.includes(profileA.religiousLevel)
  ) {
    score = 0.6;
    reason = 'רמת דתיות מועדפת חד צדדית';
  } else {
    score = 0.3;
    reason = 'רמות דתיות שונות';
  }

  return {
    name: 'religious',
    weight: 20,
    score,
    reason
  };
};

export const calculateMatchScore = (
  profileA: UserProfile,
  profileB: UserProfile
): MatchScore | null => {
  // בדיקת תנאי סף
  if (
    profileA.gender === profileB.gender ||
    profileA.availabilityStatus !== AvailabilityStatus.AVAILABLE ||
    profileB.availabilityStatus !== AvailabilityStatus.AVAILABLE
  ) {
    return null;
  }

  // חישוב קריטריונים
  const ageCriteria = calculateAgeCompatibility(
    profileA,
    profileB,
    {
      ageA: profileA.preferredAgeMin && profileA.preferredAgeMax
        ? { min: profileA.preferredAgeMin, max: profileA.preferredAgeMax }
        : undefined,
      ageB: profileB.preferredAgeMin && profileB.preferredAgeMax
        ? { min: profileB.preferredAgeMin, max: profileB.preferredAgeMax }
        : undefined
    }
  );

  const locationCriteria = calculateLocationCompatibility(profileA, profileB);
  const religiousCriteria = calculateReligiousCompatibility(profileA, profileB);

  const criteria = [
    ageCriteria,
    locationCriteria,
    religiousCriteria
  ];

  // חישוב ציון סופי
  const totalWeight = criteria.reduce((sum, c) => sum + c.weight, 0);
  const weightedScore = criteria.reduce((sum, c) => sum + (c.score * c.weight), 0);
  const finalScore = (weightedScore / totalWeight) * 100;

  // סיבות להתאמה
  const reasons = criteria
    .filter(c => c.score >= 0.6)
    .map(c => c.reason)
    .filter((reason): reason is string => reason !== undefined);

  return {
    score: Math.round(finalScore),
    criteria,
    compatibility: finalScore / 100,
    reasons
  };
};

export const findBestMatches = (
  profile: UserProfile,
  profiles: UserProfile[],
  limit: number = 10
): { profile: UserProfile; score: MatchScore }[] => {
  const matches = profiles
    .filter(p => p.id !== profile.id)
    .map(p => {
      const score = calculateMatchScore(profile, p);
      return score ? { profile: p, score } : null;
    })
    .filter((match): match is { profile: UserProfile; score: MatchScore } => match !== null)
    .sort((a, b) => b.score.score - a.score.score);

  return matches.slice(0, limit);
};

const matchingAlgorithm = {
  calculateMatchScore,
  findBestMatches
};

export default matchingAlgorithm;
--- End of Content for matchingAlgorithm.ts ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\suggestions\utils\statisticsCalculator.ts
--------------------------------------------------------------------------------
Content:
// /utils/statisticsCalculator.ts
import type { Candidate } from '../../new/types/candidates';
import { Gender, AvailabilityStatus } from '@prisma/client';


export interface AgeDistribution {
  ageGroups: Record<string, number>;
  averageAge: number;
  medianAge: number;
}

export interface LocationDistribution {
  cities: Record<string, number>;
  topCities: Array<{ city: string; count: number }>;
}

export interface ReligiousDistribution {
  levels: Record<string, number>;
  percentages: Record<string, number>;
}

export interface ActivityStats {
  activeLastWeek: number;
  activeLastMonth: number;
  averageLoginFrequency: number;
  completedProfiles: number;
}

export interface MatchingStats {
  totalMatches: number;
  successfulMatches: number;
  averageMatchScore: number;
  matchesByStatus: Record<string, number>;
}

const calculateAge = (birthDate: Date): number => {
  const today = new Date();
  const birth = new Date(birthDate);
  let age = today.getFullYear() - birth.getFullYear();
  const monthDiff = today.getMonth() - birth.getMonth();
  if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birth.getDate())) {
    age--;
  }
  return age;
};

export const calculateAgeDistribution = (candidates: Candidate[]): AgeDistribution => {
  const ages = candidates.map(c => calculateAge(c.profile.birthDate));
  
  // חישוב קבוצות גיל
  const ageGroups = ages.reduce((acc, age) => {
    const group = `${Math.floor(age / 5) * 5}-${Math.floor(age / 5) * 5 + 4}`;
    acc[group] = (acc[group] || 0) + 1;
    return acc;
  }, {} as Record<string, number>);

  // חישוב ממוצע
  const averageAge = ages.reduce((sum, age) => sum + age, 0) / ages.length;

  // חישוב חציון
  const sortedAges = [...ages].sort((a, b) => a - b);
  const medianAge = sortedAges.length % 2 === 0
    ? (sortedAges[sortedAges.length / 2 - 1] + sortedAges[sortedAges.length / 2]) / 2
    : sortedAges[Math.floor(sortedAges.length / 2)];

  return {
    ageGroups,
    averageAge: Math.round(averageAge * 10) / 10,
    medianAge
  };
};

export const calculateLocationDistribution = (
  candidates: Candidate[],
  topCount: number = 10
): LocationDistribution => {
  // ספירת מועמדים לפי ערים
  const cities = candidates.reduce((acc, candidate) => {
    const city = candidate.profile.city || 'לא צוין';
    acc[city] = (acc[city] || 0) + 1;
    return acc;
  }, {} as Record<string, number>);

  // מיון הערים לפי כמות מועמדים
  const topCities = Object.entries(cities)
    .map(([city, count]) => ({ city, count }))
    .sort((a, b) => b.count - a.count)
    .slice(0, topCount);

  return {
    cities,
    topCities
  };
};

export const calculateReligiousDistribution = (candidates: Candidate[]): ReligiousDistribution => {
  const total = candidates.length;
  
  // ספירת מועמדים לפי רמת דתיות
  const levels = candidates.reduce((acc, candidate) => {
    const level = candidate.profile.religiousLevel || 'לא צוין';
    acc[level] = (acc[level] || 0) + 1;
    return acc;
  }, {} as Record<string, number>);

  // חישוב אחוזים
  const percentages = Object.entries(levels).reduce((acc, [level, count]) => {
    acc[level] = Math.round((count / total) * 100);
    return acc;
  }, {} as Record<string, number>);

  return {
    levels,
    percentages
  };
};

export const calculateActivityStats = (candidates: Candidate[]): ActivityStats => {
  const now = new Date();
  const weekAgo = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);
  const monthAgo = new Date(now.getTime() - 30 * 24 * 60 * 60 * 1000);

  const activeLastWeek = candidates.filter(c => 
    c.profile.lastActive && new Date(c.profile.lastActive) >= weekAgo
  ).length;

  const activeLastMonth = candidates.filter(c =>
    c.profile.lastActive && new Date(c.profile.lastActive) >= monthAgo
  ).length;

  // חישוב תדירות התחברות ממוצעת (בימים)
  const loginGaps = candidates
    .filter(c => c.profile.lastActive)
    .map(c => {
      const lastActive = new Date(c.profile.lastActive!);
      return Math.floor((now.getTime() - lastActive.getTime()) / (24 * 60 * 60 * 1000));
    });

  const averageLoginFrequency = loginGaps.length > 0
    ? loginGaps.reduce((sum, gap) => sum + gap, 0) / loginGaps.length
    : 0;

  // ספירת פרופילים מלאים
  const completedProfiles = candidates.filter(c => 
    c.profile.about &&
    c.profile.religiousLevel &&
    c.profile.city &&
    c.images.length > 0
  ).length;

  return {
    activeLastWeek,
    activeLastMonth,
    averageLoginFrequency: Math.round(averageLoginFrequency * 10) / 10,
    completedProfiles
  };
};

export const calculateGenderStats = (candidates: Candidate[]) => {
  const maleCount = candidates.filter(c => c.profile.gender === Gender.MALE).length;
  const femaleCount = candidates.filter(c => c.profile.gender === Gender.FEMALE).length;
  
  return {
    maleCount,
    femaleCount,
    ratio: maleCount / femaleCount,
    total: candidates.length,
    percentages: {
      male: Math.round((maleCount / candidates.length) * 100),
      female: Math.round((femaleCount / candidates.length) * 100)
    }
  };
};

export const calculateAvailabilityStats = (candidates: Candidate[]) => {
  const total = candidates.length;
  const statusCounts = candidates.reduce((acc, candidate) => {
    const status = candidate.profile.availabilityStatus;
    acc[status] = (acc[status] || 0) + 1;
    return acc;
  }, {} as Record<AvailabilityStatus, number>);

  return {
    counts: statusCounts,
    percentages: Object.entries(statusCounts).reduce((acc, [status, count]) => {
      acc[status] = Math.round((count / total) * 100);
      return acc;
    }, {} as Record<string, number>)
  };
};

export const calculateCompletionStats = (candidates: Candidate[]) => {
  const total = candidates.length;
  const  stats = {
    hasPhotos: 0,
    hasAbout: 0,
    hasReferences: 0,
    hasPreferences: 0,
    isVerified: 0,
    fullyCompleted: 0
  };

  candidates.forEach(candidate => {
    if (candidate.images.length > 0) stats.hasPhotos++;
    if (candidate.profile.about) stats.hasAbout++;
    if (candidate.profile.preferredAgeMin && candidate.profile.preferredAgeMax) stats.hasPreferences++;
    if (candidate.isVerified) stats.isVerified++;
    
    // בדיקת פרופיל מלא
    if (
      candidate.images.length > 0 &&
      candidate.profile.about &&
      candidate.profile.religiousLevel &&
      candidate.profile.city &&
      candidate.profile.preferredAgeMin &&
      candidate.profile.preferredAgeMax
    ) {
      stats.fullyCompleted++;
    }
  });

  return {
    counts: stats,
    percentages: {
      hasPhotos: Math.round((stats.hasPhotos / total) * 100),
      hasAbout: Math.round((stats.hasAbout / total) * 100),
      hasReferences: Math.round((stats.hasReferences / total) * 100),
      hasPreferences: Math.round((stats.hasPreferences / total) * 100),
      isVerified: Math.round((stats.isVerified / total) * 100),
      fullyCompleted: Math.round((stats.fullyCompleted / total) * 100)
    }
  };
};

const statisticsCalculator = {
  calculateAgeDistribution,
  calculateLocationDistribution,
  calculateReligiousDistribution,
  calculateActivityStats,
  calculateGenderStats,
  calculateAvailabilityStats,
  calculateCompletionStats
};

export default statisticsCalculator;
--- End of Content for statisticsCalculator.ts ---

