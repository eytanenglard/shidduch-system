################################################################################
# Directory Content Map For: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\new
# Generated on: 2025-08-24 10:21:16
################################################################################

================================================================================
Directory: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\new
================================================================================

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\new\MatchmakerEditProfile.tsx
--------------------------------------------------------------------------------
Content:
// src/app/components/matchmaker/new/MatchmakerEditProfile.tsx

import React, { useState, useEffect, useCallback } from 'react';
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription,
  DialogFooter,
  DialogClose,
} from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { toast } from 'sonner';
import { ProfileSection } from '@/components/profile';
import { PhotosSection } from '@/components/profile';
import { PreferencesSection } from '@/components/profile';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import {
  Loader2,
  X,
  UserCog,
  Image as ImageIcon,
  Sliders,
  Trash2,
  AlertCircle,
  Send,
} from 'lucide-react';
import type { UserProfile, UserImage } from '@/types/next-auth';
import type { Candidate } from './types/candidates';
import { motion } from 'framer-motion';
import { useSession } from 'next-auth/react';

interface MatchmakerEditProfileProps {
  isOpen: boolean;
  onClose: () => void;
  candidate: Candidate | null;
  onCandidateDeleted?: (candidateId: string) => void;
}

const DELETE_CANDIDATE_CONFIRMATION_PHRASE = 'אני מאשר מחיקה';

const MatchmakerEditProfile: React.FC<MatchmakerEditProfileProps> = ({
  isOpen,
  onClose,
  candidate,
  onCandidateDeleted,
}) => {
  const { data: session } = useSession();
  const isAdmin = session?.user?.role === 'ADMIN';

  const [activeTab, setActiveTab] = useState('profile');
  const [isEditing, setIsEditing] = useState(true);
  const [isSaving, setIsSaving] = useState(false);
  const [isUploading, setIsUploading] = useState(false);
  const [profile, setProfile] = useState<UserProfile | null>(null);
  const [images, setImages] = useState<UserImage[]>([]);
  const [isLoading, setIsLoading] = useState(true);

  // States for delete candidate confirmation
  const [isDeleteCandidateDialogOpen, setIsDeleteCandidateDialogOpen] =
    useState(false);
  const [deleteCandidateConfirmText, setDeleteCandidateConfirmText] =
    useState('');
  const [isDeletingCandidate, setIsDeletingCandidate] = useState(false);

  // --- NEW: States for Account Setup Invite ---
  const [isSetupInviteOpen, setIsSetupInviteOpen] = useState(false);
  const [inviteEmail, setInviteEmail] = useState('');
  const [isSendingInvite, setIsSendingInvite] = useState(false);
  // --- END NEW ---

  const fetchProfileData = useCallback(async () => {
    if (!candidate) return;
    setIsLoading(true);
    try {
      const response = await fetch(
        `/api/matchmaker/candidates/${candidate.id}`
      );
      if (!response.ok) throw new Error('Failed to fetch candidate profile');
      const data = await response.json();
      if (data.success) {
        setProfile(data.profile);
        setImages(data.images || []);
        // --- NEW: Populate email for invite dialog ---
        // Check if the email is a real one, not a placeholder
        if (
          candidate.email &&
          !candidate.email.endsWith('@shidduch.placeholder.com')
        ) {
          setInviteEmail(candidate.email);
        } else {
          setInviteEmail(''); // Clear if it's a placeholder
        }
        // --- END NEW ---
      } else {
        throw new Error(data.error || 'Failed to load profile data');
      }
    } catch (error) {
      console.error('Error fetching profile:', error);
      toast.error('שגיאה בטעינת נתוני המועמד');
    } finally {
      setIsLoading(false);
    }
  }, [candidate]);

  useEffect(() => {
    if (isOpen && candidate) {
      fetchProfileData();
    } else if (!isOpen) {
      setProfile(null);
      setImages([]);
      setActiveTab('profile');
      setIsLoading(true);
      setDeleteCandidateConfirmText('');
      setIsDeleteCandidateDialogOpen(false);
      // --- NEW: Reset invite state on close ---
      setIsSetupInviteOpen(false);
      setInviteEmail('');
      setIsSendingInvite(false);
      // --- END NEW ---
    }
  }, [isOpen, candidate, fetchProfileData]);

  const handleProfileUpdate = async (updatedProfile: Partial<UserProfile>) => {
    if (!candidate || !profile) return;
    setIsSaving(true);
    try {
      const cleanedProfile = { ...updatedProfile };
      if (cleanedProfile.gender === undefined) {
        /* Keep undefined */
      }
      if (cleanedProfile.preferredMatchmakerGender === undefined) {
        /* Keep undefined */
      }

      const response = await fetch(
        `/api/matchmaker/candidates/${candidate.id}`,
        {
          method: 'PATCH',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(cleanedProfile),
        }
      );
      const data = await response.json();
      if (!response.ok || !data.success) {
        throw new Error(data.error || 'Failed to update profile');
      }
      setProfile(
        (prevProfile) => ({ ...prevProfile, ...cleanedProfile }) as UserProfile
      );
      toast.success('פרופיל המועמד עודכן בהצלחה', {
        position: 'top-center',
        duration: 3000,
      });
    } catch (error) {
      console.error('Error updating profile:', error);
      toast.error(
        'שגיאה בעדכון פרופיל המועמד: ' +
          (error instanceof Error ? error.message : 'שגיאה לא ידועה'),
        { duration: 5000 }
      );
    } finally {
      setIsSaving(false);
    }
  };

  // --- START OF FIX ---
  const handleImageUpload = async (files: File[]) => {
    if (!candidate) return;
    setIsUploading(true);

    const uploadPromises = files.map(async (file) => {
      const formData = new FormData();
      formData.append('image', file);
      formData.append('userId', candidate.id);

      const response = await fetch(
        `/api/matchmaker/candidates/${candidate.id}/images`,
        { method: 'POST', body: formData }
      );

      const data = await response.json();
      if (!response.ok || !data.success) {
        // Throw an error with the file name to identify which one failed
        throw new Error(
          `שגיאה בהעלאת הקובץ ${file.name}: ${data.error || 'שגיאת שרת'}`
        );
      }
      return data.image; // Return the new image object from the server
    });

    try {
      // Use Promise.all to upload in parallel
      const newImages = await Promise.all(uploadPromises);

      // Update the state once with all the new images
      setImages((prev) => [...prev, ...newImages]);
      toast.success(
        `${newImages.length > 1 ? `${newImages.length} תמונות הועלו` : 'התמונה הועלתה'} בהצלחה`
      );
    } catch (error) {
      console.error('Error uploading images:', error);
      toast.error(
        'אחת או יותר מהתמונות לא הועלו: ' +
          (error instanceof Error ? error.message : 'שגיאה לא ידועה')
      );
    } finally {
      setIsUploading(false);
    }
  };
  // --- END OF FIX ---

  const handleSetMainImage = async (imageId: string) => {
    if (!candidate) return;
    try {
      const response = await fetch(
        `/api/matchmaker/candidates/${candidate.id}/images/${imageId}/main`,
        { method: 'PATCH' }
      );
      const data = await response.json();
      if (!response.ok || !data.success) {
        throw new Error(data.error || 'Failed to set main image');
      }
      setImages((prev) =>
        prev.map((img) => ({ ...img, isMain: img.id === imageId }))
      );
      toast.success('התמונה הראשית עודכנה בהצלחה');
    } catch (error) {
      console.error('Error setting main image:', error);
      toast.error('שגיאה בעדכון התמונה הראשית');
    }
  };

  // <<<< זה הקוד החדש והמתוקן >>>>
  const handleDeleteImage = async (imageIds: string[]) => {
    if (!candidate || imageIds.length === 0) return;
    // השתמשתי ב-isUploading כי זה ה-state הקיים, אפשר לשקול לשנות את שמו ל-isProcessingImages
    setIsUploading(true);

    try {
      // בדוק האם התמונה הראשית הנוכחית נמצאת בין התמונות למחיקה
      const currentMainImage = images.find((img) => img.isMain);
      const isMainImageBeingDeleted = currentMainImage
        ? imageIds.includes(currentMainImage.id)
        : false;

      // צור מערך של הבטחות (promises) עבור כל בקשת מחיקה
      const deletePromises = imageIds.map((id) =>
        fetch(`/api/matchmaker/candidates/${candidate.id}/images/${id}`, {
          method: 'DELETE',
        })
      );

      // המתן לסיום כל בקשות המחיקה במקביל
      const responses = await Promise.all(deletePromises);

      // בדוק אם אחת מהבקשות נכשלה
      for (const response of responses) {
        // סטטוס 204 (No Content) הוא תקין עבור מחיקה
        if (!response.ok && response.status !== 204) {
          const errorData = await response.json().catch(() => null);
          throw new Error(
            errorData?.error ||
              `שגיאה במחיקת אחת התמונות (סטטוס: ${response.status})`
          );
        }
      }

      // כל המחיקות הצליחו, עכשיו נעדכן את ה-state
      const remainingImages = images.filter(
        (img) => !imageIds.includes(img.id)
      );

      // אם התמונה הראשית נמחקה וישנן תמונות אחרות, קדם תמונה חדשה להיות הראשית
      if (isMainImageBeingDeleted && remainingImages.length > 0) {
        // הפונקציה handleSetMainImage תעדכן את ה-DB ואת ה-state
        // אנחנו קודם מעדכנים את ה-state המקומי כדי שהיא תעבוד על הרשימה הנכונה
        setImages(remainingImages);
        await handleSetMainImage(remainingImages[0].id); // הפונקציה הזו תגרום ל-re-render נוסף עם התמונה הראשית המעודכנת
      } else {
        // אם לא, פשוט נסיר את התמונות שנמחקו מה-state
        setImages(remainingImages);
      }

      toast.success(
        `${imageIds.length > 1 ? `${imageIds.length} תמונות נמחקו` : 'התמונה נמחקה'} בהצלחה`,
        { position: 'top-center' }
      );
    } catch (error) {
      console.error('Error deleting image(s):', error);
      toast.error(
        error instanceof Error ? error.message : 'שגיאה במחיקת התמונות'
      );
    } finally {
      setIsUploading(false);
    }
  };

  const handleDeleteCandidateRequest = async () => {
    if (!candidate) return;
    if (deleteCandidateConfirmText !== DELETE_CANDIDATE_CONFIRMATION_PHRASE) {
      toast.error('אישור לא תקין', {
        description: `נא להקליד "${DELETE_CANDIDATE_CONFIRMATION_PHRASE}" בדיוק כדי לאשר מחיקה.`,
      });
      return;
    }
    setIsDeletingCandidate(true);
    try {
      const response = await fetch(
        `/api/matchmaker/candidates/${candidate.id}`,
        { method: 'DELETE' }
      );
      const data = await response.json();

      if (!response.ok || !data.success) {
        throw new Error(data.error || 'Failed to delete candidate profile');
      }

      toast.success('המועמד נמחק בהצלחה', {
        position: 'top-center',
        duration: 3000,
      });
      if (onCandidateDeleted) {
        onCandidateDeleted(candidate.id);
      }
      setIsDeleteCandidateDialogOpen(false);
      onClose();
    } catch (error) {
      console.error('Error deleting candidate:', error);
      toast.error(
        'שגיאה במחיקת המועמד: ' +
          (error instanceof Error ? error.message : 'שגיאה לא ידועה'),
        { duration: 5000 }
      );
    } finally {
      setIsDeletingCandidate(false);
    }
  };

  // --- NEW: Handler for sending setup invite ---
  const handleSendSetupInvite = async () => {
    if (!candidate || !inviteEmail) {
      toast.error('נא להזין כתובת אימייל תקינה.');
      return;
    }
    setIsSendingInvite(true);
    try {
      const response = await fetch(
        `/api/matchmaker/candidates/${candidate.id}/invite-setup`,
        {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ email: inviteEmail }),
        }
      );
      const result = await response.json();
      if (!response.ok || !result.success) {
        throw new Error(result.error || 'שגיאה בשליחת ההזמנה.');
      }
      toast.success('הזמנה להגדרת חשבון נשלחה בהצלחה!');
      setIsSetupInviteOpen(false);
    } catch (error) {
      console.error('Error sending setup invite:', error);
      toast.error(
        error instanceof Error ? error.message : 'שגיאה בשליחת ההזמנה.'
      );
    } finally {
      setIsSendingInvite(false);
    }
  };
  // --- END NEW ---

  if (!candidate && isOpen) return null;
  if (!candidate) return null;

  return (
    <>
      <Dialog open={isOpen} onOpenChange={onClose}>
        <DialogContent className="max-w-5xl max-h-[90vh] p-0 overflow-hidden">
          {isLoading && !profile ? (
            <div className="flex items-center justify-center h-64">
              <Loader2 className="w-10 h-10 animate-spin text-primary" />
            </div>
          ) : (
            <motion.div
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              transition={{ duration: 0.3 }}
              className="flex flex-col h-full max-h-[90vh]"
            >
              <DialogHeader className="p-6 border-b">
                <div className="flex items-center justify-between">
                  <div>
                    <DialogTitle className="text-2xl font-bold text-primary/90">
                      עריכת פרופיל - {candidate.firstName} {candidate.lastName}
                    </DialogTitle>
                    <DialogDescription className="text-gray-500 mt-1">
                      עריכת פרטי המועמד והעדפותיו במערכת
                    </DialogDescription>
                  </div>
                  {isSaving && (
                    <div className="flex items-center bg-blue-50 text-blue-700 py-1 px-2 rounded-full text-sm">
                      <Loader2 className="w-3 h-3 animate-spin mr-1" />
                      שומר שינויים...
                    </div>
                  )}
                </div>
              </DialogHeader>

              <Tabs
                value={activeTab}
                onValueChange={setActiveTab}
                className="flex-1 flex flex-col min-h-0"
              >
                <div className="px-6 pt-4">
                  <TabsList className="w-full bg-muted/30 p-1 rounded-xl shadow-sm">
                    <TabsTrigger
                      value="profile"
                      className="rounded-lg data-[state=active]:bg-gradient-to-r data-[state=active]:from-blue-500/90 data-[state=active]:to-blue-600 data-[state=active]:text-white flex items-center gap-2"
                    >
                      <UserCog className="w-4 h-4" />
                      פרטים אישיים
                    </TabsTrigger>
                    <TabsTrigger
                      value="photos"
                      className="rounded-lg data-[state=active]:bg-gradient-to-r data-[state=active]:from-blue-500/90 data-[state=active]:to-blue-600 data-[state=active]:text-white flex items-center gap-2"
                    >
                      <ImageIcon className="w-4 h-4" />
                      תמונות
                    </TabsTrigger>
                    <TabsTrigger
                      value="preferences"
                      className="rounded-lg data-[state=active]:bg-gradient-to-r data-[state=active]:from-blue-500/90 data-[state=active]:to-blue-600 data-[state=active]:text-white flex items-center gap-2"
                    >
                      <Sliders className="w-4 h-4" />
                      העדפות
                    </TabsTrigger>
                  </TabsList>
                </div>

                <div className="flex-1 overflow-hidden flex flex-col min-h-0">
                  <TabsContent
                    value="profile"
                    className="flex-1 overflow-auto p-4 m-0 pb-16"
                  >
                    {profile ? (
                      <div className="bg-white rounded-xl shadow-sm border">
                        <ProfileSection
                          profile={profile}
                          isEditing={isEditing}
                          setIsEditing={setIsEditing}
                          onSave={handleProfileUpdate}
                        />
                      </div>
                    ) : (
                      <div className="flex items-center justify-center h-full">
                        <Loader2 className="w-8 h-8 animate-spin text-muted-foreground" />
                      </div>
                    )}
                  </TabsContent>
                  <TabsContent
                    value="photos"
                    className="flex-1 overflow-auto p-4 m-0 pb-16"
                  >
                    <div className="bg-white rounded-xl shadow-sm border">
                      <PhotosSection
                        images={images}
                        isUploading={isUploading}
                        disabled={isSaving || isDeletingCandidate}
                        onUpload={handleImageUpload}
                        onSetMain={handleSetMainImage}
                        onDelete={handleDeleteImage}
                        maxImages={10}
                      />
                    </div>
                  </TabsContent>
                  <TabsContent
                    value="preferences"
                    className="flex-1 overflow-auto p-4 m-0 pb-16"
                  >
                    {profile ? (
                      <div className="bg-white rounded-xl shadow-sm border">
                        <PreferencesSection
                          profile={profile}
                          isEditing={isEditing}
                          setIsEditing={setIsEditing}
                          onChange={handleProfileUpdate}
                        />
                      </div>
                    ) : (
                      <div className="flex items-center justify-center h-full">
                        <Loader2 className="w-8 h-8 animate-spin text-muted-foreground" />
                      </div>
                    )}
                  </TabsContent>
                </div>
              </Tabs>

              <div className="p-4 border-t flex justify-between items-center mt-auto bg-white/80 backdrop-blur-sm sticky bottom-0">
                <div>
                  <span className="text-sm text-muted-foreground">
                    {activeTab === 'profile'
                      ? 'עריכת פרטים אישיים'
                      : activeTab === 'photos'
                        ? 'ניהול תמונות'
                        : 'עריכת העדפות'}
                  </span>
                </div>
                <div className="flex items-center gap-3">
                  <Button
                    variant="outline"
                    onClick={() => setIsSetupInviteOpen(true)}
                    disabled={
                      isSaving || isDeletingCandidate || isSendingInvite
                    }
                  >
                    <Send className="w-4 h-4 ml-2" />
                    שלח הזמנה לניהול החשבון
                  </Button>
                  {isAdmin && (
                    <Button
                      variant="destructive"
                      onClick={() => setIsDeleteCandidateDialogOpen(true)}
                      disabled={isSaving || isUploading || isDeletingCandidate}
                      size="sm"
                    >
                      <Trash2 className="w-4 h-4 mr-2" />
                      מחק מועמד
                    </Button>
                  )}
                  <Button
                    variant="outline"
                    onClick={onClose}
                    disabled={isSaving || isDeletingCandidate}
                    className="bg-white hover:bg-gray-100 transition-colors shadow-sm"
                    size="sm"
                  >
                    <X className="w-4 h-4 mr-2" />
                    סגור
                  </Button>
                </div>
              </div>
            </motion.div>
          )}
        </DialogContent>
      </Dialog>

      {/* --- NEW: Invite Setup Dialog --- */}
      {candidate && (
        <Dialog open={isSetupInviteOpen} onOpenChange={setIsSetupInviteOpen}>
          <DialogContent className="sm:max-w-md">
            <DialogHeader>
              <DialogTitle>הזמנת מועמד לניהול החשבון</DialogTitle>
              <DialogDescription>
                שלח הזמנה ל
                <strong>
                  {candidate.firstName} {candidate.lastName}
                </strong>{' '}
                להגדיר סיסמה ולקחת שליטה על הפרופיל.
              </DialogDescription>
            </DialogHeader>
            <div className="grid gap-4 py-4">
              <Label htmlFor="inviteEmail" className="text-right">
                כתובת אימייל
              </Label>
              <Input
                id="inviteEmail"
                type="email"
                value={inviteEmail}
                onChange={(e) => setInviteEmail(e.target.value)}
                placeholder="user@example.com"
                className="col-span-3"
                dir="ltr"
              />
            </div>
            <DialogFooter>
              <DialogClose asChild>
                <Button
                  type="button"
                  variant="secondary"
                  disabled={isSendingInvite}
                >
                  ביטול
                </Button>
              </DialogClose>
              <Button
                type="button"
                onClick={handleSendSetupInvite}
                disabled={isSendingInvite || !inviteEmail}
              >
                {isSendingInvite ? (
                  <Loader2 className="ml-2 h-4 w-4 animate-spin" />
                ) : (
                  <Send className="ml-2 h-4 w-4" />
                )}
                {isSendingInvite ? 'שולח...' : 'שלח הזמנה'}
              </Button>
            </DialogFooter>
          </DialogContent>
        </Dialog>
      )}
      {/* --- END NEW --- */}

      {/* Delete Candidate Confirmation Dialog */}
      {candidate && (
        <Dialog
          open={isDeleteCandidateDialogOpen}
          onOpenChange={(open) =>
            !isDeletingCandidate && setIsDeleteCandidateDialogOpen(open)
          }
        >
          <DialogContent className="sm:max-w-md">
            <DialogHeader>
              <DialogTitle className="text-xl flex items-center gap-2 text-red-600">
                <AlertCircle className="h-5 w-5" />
                אישור מחיקת מועמד
              </DialogTitle>
              <DialogDescription>
                האם אתה בטוח שברצונך למחוק את המועמד{' '}
                <strong>
                  {candidate.firstName} {candidate.lastName}
                </strong>
                ? פעולה זו הינה בלתי הפיכה ותסיר את כל נתוני המועמד מהמערכת.
              </DialogDescription>
            </DialogHeader>
            <div className="grid gap-4 py-4">
              <Label htmlFor="deleteCandidateConfirm" className="text-gray-700">
                לאישור המחיקה, אנא הקלד:{' '}
                <strong className="text-red-700">
                  {DELETE_CANDIDATE_CONFIRMATION_PHRASE}
                </strong>
              </Label>
              <Input
                id="deleteCandidateConfirm"
                value={deleteCandidateConfirmText}
                onChange={(e) => setDeleteCandidateConfirmText(e.target.value)}
                disabled={isDeletingCandidate}
                className="border-gray-300 focus:border-red-500"
                placeholder={DELETE_CANDIDATE_CONFIRMATION_PHRASE}
                dir="rtl"
              />
              {deleteCandidateConfirmText &&
                deleteCandidateConfirmText !==
                  DELETE_CANDIDATE_CONFIRMATION_PHRASE && (
                  <p className="text-xs text-red-600">
                    הטקסט שהוקלד אינו תואם.
                  </p>
                )}
            </div>
            <DialogFooter>
              <Button
                variant="outline"
                onClick={() => {
                  setIsDeleteCandidateDialogOpen(false);
                  setDeleteCandidateConfirmText('');
                }}
                disabled={isDeletingCandidate}
                className="border-gray-300"
              >
                ביטול
              </Button>
              <Button
                variant="destructive"
                onClick={handleDeleteCandidateRequest}
                disabled={
                  isDeletingCandidate ||
                  deleteCandidateConfirmText !==
                    DELETE_CANDIDATE_CONFIRMATION_PHRASE
                }
              >
                {isDeletingCandidate ? (
                  <span className="flex items-center gap-2">
                    <Loader2 className="w-4 h-4 animate-spin" />
                    מוחק...
                  </span>
                ) : (
                  <>
                    <Trash2 className="w-4 h-4 mr-2" />
                    מחק מועמד לצמיתות
                  </>
                )}
              </Button>
            </DialogFooter>
          </DialogContent>
        </Dialog>
      )}
    </>
  );
};

export default MatchmakerEditProfile;
--- End of Content for MatchmakerEditProfile.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\new\new_contents.txt
--------------------------------------------------------------------------------
[This is the output log file itself. Content not included.]

================================================================================
Directory: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\new\CandidateCard
================================================================================

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\new\CandidateCard\Actions.tsx
--------------------------------------------------------------------------------
Content:
// /components/matchmaker/CandidateCard/Actions.tsx

'use client';

import React, {useState } from 'react';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import {
  Heart,
  Mail,
  FileText,
  Eye,
  Clock,
  Sparkles,
  Send,
  UserPlus,
  MessageCircle,
  Calendar,
  Star,
  Zap,
} from 'lucide-react';
import type { Candidate } from '../types/candidates';
import { cn } from '@/lib/utils';
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from '@/components/ui/tooltip';
import type { MatchmakerPageDictionary } from '@/types/dictionaries/matchmaker';

interface ActionsProps {
  candidate: Candidate;
  onInvite: (candidate: Candidate) => void;
  onSuggest: (candidate: Candidate) => void;
  onCheckAvailability: (candidate: Candidate) => void;
  onViewProfile: (candidate: Candidate) => void;
  className?: string;
  variant?: 'full' | 'compact' | 'minimal';
  showLabels?: boolean;
  dict: MatchmakerPageDictionary['candidatesManager']['list']['cardActions'];
}

const Actions: React.FC<ActionsProps> = ({
  candidate,
  onInvite,
  onSuggest,
  onCheckAvailability,
  onViewProfile,
  className,
  variant = 'full',
  showLabels = true,
  dict,
}) => {
  const [isHovered, setIsHovered] = useState(false);
  const [activeAction, setActiveAction] = useState<string | null>(null);

  const handleClick = (e: React.MouseEvent) => {
    e.stopPropagation();
  };

  const handleActionClick = (action: string, callback: () => void) => {
    setActiveAction(action);
    callback();
    setTimeout(() => setActiveAction(null), 150);
  };

  const getPriorityBadge = () => {
    if (candidate.profile.availabilityStatus === 'AVAILABLE') {
      return (
        <Badge className="bg-gradient-to-r from-green-500 to-emerald-500 text-white border-0 shadow-lg animate-pulse">
          <Sparkles className="w-3 h-3 mr-1" />
          {dict.availableNow}
        </Badge>
      );
    }
    return null;
  };

  const actionButtons = [
    {
      id: 'view',
      label: dict.viewProfile,
      icon: Eye,
      onClick: () => onViewProfile(candidate),
      gradient: 'from-blue-500 to-cyan-500',
      hoverGradient: 'from-blue-600 to-cyan-600',
      description: dict.viewProfileTooltip,
      primary: true,
    },
    {
      id: 'suggest',
      label: dict.suggestMatch,
      icon: Heart,
      onClick: () => onSuggest(candidate),
      gradient: 'from-pink-500 to-rose-500',
      hoverGradient: 'from-pink-600 to-rose-600',
      description: dict.suggestMatchTooltip,
      primary: true,
    },
    {
      id: 'invite',
      label: dict.sendInvite,
      icon: Send,
      onClick: () => onInvite(candidate),
      gradient: 'from-purple-500 to-indigo-500',
      hoverGradient: 'from-purple-600 to-indigo-600',
      description: dict.sendInviteTooltip,
      primary: false,
    },
    {
      id: 'availability',
      label: dict.checkAvailability,
      icon: Calendar,
      onClick: () => onCheckAvailability(candidate),
      gradient: 'from-orange-500 to-amber-500',
      hoverGradient: 'from-orange-600 to-amber-600',
      description: dict.checkAvailabilityTooltip,
      primary: false,
    },
  ];

  if (variant === 'minimal') {
    return (
      <div
        className={cn('flex items-center gap-1', className)}
        onClick={handleClick}
        onMouseEnter={() => setIsHovered(true)}
        onMouseLeave={() => setIsHovered(false)}
      >
        <TooltipProvider>
          {actionButtons.slice(0, 2).map((action) => {
            const IconComponent = action.icon;
            return (
              <Tooltip key={action.id}>
                <TooltipTrigger asChild>
                  <Button
                    variant="ghost"
                    size="icon"
                    className={cn(
                      'h-8 w-8 rounded-full transition-all duration-300 transform hover:scale-110',
                      `bg-gradient-to-r ${action.gradient} hover:${action.hoverGradient}`,
                      'text-white shadow-lg hover:shadow-xl',
                      activeAction === action.id && 'scale-95'
                    )}
                    onClick={() => handleActionClick(action.id, action.onClick)}
                  >
                    <IconComponent className="w-4 h-4" />
                  </Button>
                </TooltipTrigger>
                <TooltipContent>
                  <p>{action.description}</p>
                </TooltipContent>
              </Tooltip>
            );
          })}
        </TooltipProvider>
      </div>
    );
  }

  if (variant === 'compact') {
    return (
      <div
        className={cn('flex flex-wrap gap-2', className)}
        onClick={handleClick}
        onMouseEnter={() => setIsHovered(true)}
        onMouseLeave={() => setIsHovered(false)}
      >
        {getPriorityBadge()}

        <div className="flex gap-2">
          {actionButtons.map((action) => {
            const IconComponent = action.icon;
            return (
              <Button
                key={action.id}
                variant="outline"
                size="sm"
                className={cn(
                  'transition-all duration-300 transform hover:scale-105 border-0 shadow-lg hover:shadow-xl',
                  `bg-gradient-to-r ${action.gradient} hover:${action.hoverGradient}`,
                  'text-white font-medium',
                  activeAction === action.id && 'scale-95'
                )}
                onClick={() => handleActionClick(action.id, action.onClick)}
              >
                <IconComponent className="w-4 h-4 mr-2" />
                {showLabels && action.label}
              </Button>
            );
          })}
        </div>
      </div>
    );
  }

  // Full variant
  return (
    <div
      className={cn('space-y-4', className)}
      onClick={handleClick}
      onMouseEnter={() => setIsHovered(true)}
      onMouseLeave={() => setIsHovered(false)}
    >
      <div className="flex justify-center">{getPriorityBadge()}</div>

      <div className="grid grid-cols-2 gap-3">
        {actionButtons
          .filter((a) => a.primary)
          .map((action) => {
            const IconComponent = action.icon;
            return (
              <Button
                key={action.id}
                className={cn(
                  'h-12 transition-all duration-300 transform hover:scale-105 border-0 shadow-xl hover:shadow-2xl font-bold text-sm',
                  `bg-gradient-to-r ${action.gradient} hover:${action.hoverGradient}`,
                  'text-white relative overflow-hidden group',
                  activeAction === action.id && 'scale-95'
                )}
                onClick={() => handleActionClick(action.id, action.onClick)}
              >
                <div className="absolute inset-0 bg-gradient-to-r from-white/0 via-white/20 to-white/0 transform -translate-x-full group-hover:translate-x-full transition-transform duration-700"></div>
                <div className="relative z-10 flex items-center justify-center gap-2">
                  <IconComponent className="w-5 h-5" />
                  {showLabels && (
                    <span className="hidden sm:inline">{action.label}</span>
                  )}
                </div>
              </Button>
            );
          })}
      </div>

      <div className="flex gap-2">
        {actionButtons
          .filter((a) => !a.primary)
          .map((action) => {
            const IconComponent = action.icon;
            return (
              <Button
                key={action.id}
                variant="outline"
                size="sm"
                className={cn(
                  'flex-1 transition-all duration-300 transform hover:scale-105 border-2 hover:border-transparent shadow-lg hover:shadow-xl font-medium',
                  `border-gray-200 hover:bg-gradient-to-r hover:${action.gradient}`,
                  'hover:text-white group relative overflow-hidden',
                  activeAction === action.id && 'scale-95'
                )}
                onClick={() => handleActionClick(action.id, action.onClick)}
              >
                <div
                  className={cn(
                    'absolute inset-0 bg-gradient-to-r transition-all duration-300 opacity-0 group-hover:opacity-100',
                    action.gradient
                  )}
                ></div>
                <div className="relative z-10 flex items-center justify-center gap-2">
                  <IconComponent className="w-4 h-4" />
                  {showLabels && (
                    <span className="text-xs hidden sm:inline">
                      {action.label}
                    </span>
                  )}
                </div>
              </Button>
            );
          })}
      </div>

      <div className="flex justify-center pt-2">
        <Button
          variant="ghost"
          size="sm"
          className={cn(
            'text-red-500 hover:text-red-600 hover:bg-red-50 transition-all duration-300 transform hover:scale-110 group',
            'border border-red-200 hover:border-red-300 shadow-sm hover:shadow-md rounded-full px-4'
          )}
        >
          <Heart
            className={cn(
              'w-4 h-4 transition-all duration-300',
              isHovered && 'fill-current animate-pulse'
            )}
          />
          <span className="mr-2 text-sm font-medium">{dict.addToFavorites}</span>
        </Button>
      </div>

      <div className="pt-3 border-t border-gray-100">
        <div className="flex justify-between items-center text-xs text-gray-500">
          <div className="flex items-center gap-1">
            <Star className="w-3 h-3 text-yellow-500" />
            <span>{dict.rating}: 4.8</span>
          </div>
          <div className="flex items-center gap-1">
            <Zap className="w-3 h-3 text-blue-500" />
            <span>{dict.matchScore}: 95%</span>
          </div>
          <div className="flex items-center gap-1">
            <MessageCircle className="w-3 h-3 text-green-500" />
            <span>{dict.response}: {dict.quickResponse}</span>
          </div>
        </div>
      </div>
    </div>
  );
};

export default Actions;
--- End of Content for Actions.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\new\CandidateCard\MinimalCard.tsx
--------------------------------------------------------------------------------
Content:
// src/app/components/matchmaker/new/CandidateCard/MinimalCard.tsx

'use client';

import React, { useState } from 'react';
import Image from 'next/image';
import { Card } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { Checkbox } from '@/components/ui/checkbox';
import {
  User,
  MapPin,
  Briefcase,
  Calendar,
  Edit2,
  Sparkles,
  Star,
  Heart,
  Eye,
  Clock,
  Shield,
  Crown,
  Zap,
  Award,
} from 'lucide-react';
import type { Candidate } from '../types/candidates';
import { UserSource } from '@prisma/client';
import { formatDistanceToNow } from 'date-fns';
import { he } from 'date-fns/locale';
import { motion } from 'framer-motion';
import { Skeleton } from '@/components/ui/skeleton';
import { cn, getRelativeCloudinaryPath } from '@/lib/utils';
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from '@/components/ui/tooltip';
import type { MatchmakerPageDictionary } from '@/types/dictionaries/matchmaker';

interface MinimalCandidateCardProps {
  candidate: Candidate;
  onClick: (candidate: Candidate) => void;
  onEdit?: (candidate: Candidate, e: React.MouseEvent) => void;
  isHighlighted?: boolean;
  highlightTerm?: string;
  className?: string;
  aiScore?: number;
  isAiTarget?: boolean;
  onSetAiTarget?: (candidate: Candidate, e: React.MouseEvent) => void;
  isSelectableForComparison?: boolean;
  isSelectedForComparison?: boolean;
  onToggleComparison?: (candidate: Candidate, e: React.MouseEvent) => void;
  dict: MatchmakerPageDictionary['candidatesManager']['list']['minimalCard'];
}

const calculateAge = (birthDate: Date | string): number => {
  const today = new Date();
  const birth = new Date(birthDate);
  let age = today.getFullYear() - birth.getFullYear();
  const monthDiff = today.getMonth() - birth.getMonth();
  if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birth.getDate())) {
    age--;
  }
  return age;
};

const MinimalCandidateCard: React.FC<MinimalCandidateCardProps> = ({
  candidate,
  onClick,
  onEdit,
  isHighlighted = false,
  highlightTerm = '',
  className,
  aiScore,
  isAiTarget = false,
  onSetAiTarget,
  isSelectableForComparison = false,
  isSelectedForComparison = false,
  onToggleComparison,
  dict,
}) => {
  const mainImage = candidate.images.find((img) => img.isMain);
  const age = calculateAge(candidate.profile.birthDate);
  const [imageLoaded, setImageLoaded] = useState(false);
  const [imageError, setImageError] = useState(false);
  const [isHovered, setIsHovered] = useState(false);

  const highlightText = (text: string | undefined | null): React.ReactNode => {
    if (!highlightTerm || !text) return text;
    const parts = text.split(new RegExp(`(${highlightTerm})`, 'gi'));
    return (
      <>
        {parts.map((part, i) =>
          part.toLowerCase() === highlightTerm.toLowerCase() ? (
            <mark key={i} className="bg-yellow-200 px-0.5 rounded-sm">
              {part}
            </mark>
          ) : (
            part
          )
        )}
      </>
    );
  };

  const getAvailabilityBadge = () => {
    switch (candidate.profile.availabilityStatus) {
      case 'AVAILABLE':
        return {
          label: dict.availability.AVAILABLE,
          className:
            'bg-gradient-to-r from-emerald-500 to-green-500 text-white border-0 shadow-lg',
          icon: <Sparkles className="w-3 h-3" />,
        };
      case 'DATING':
        return {
          label: dict.availability.DATING,
          className:
            'bg-gradient-to-r from-amber-500 to-orange-500 text-white border-0 shadow-lg',
          icon: <Heart className="w-3 h-3" />,
        };
      case 'UNAVAILABLE':
        return {
          label: dict.availability.UNAVAILABLE,
          className:
            'bg-gradient-to-r from-red-500 to-pink-500 text-white border-0 shadow-lg',
          icon: <Clock className="w-3 h-3" />,
        };
      default:
        return {
          label: dict.availability.UNKNOWN,
          className:
            'bg-gradient-to-r from-gray-500 to-slate-500 text-white border-0 shadow-lg',
          icon: <User className="w-3 h-3" />,
        };
    }
  };

  const getQualityScore = () => {
    let score = 0;
    if (candidate.images.length > 0) score += 25;
    if (candidate.profile.about) score += 25;
    if (candidate.profile.education) score += 25;
    if (candidate.profile.occupation) score += 25;
    return score;
  };

  const availabilityBadge = getAvailabilityBadge();
  const isManualEntry = candidate.source === UserSource.MANUAL_ENTRY;
  const qualityScore = getQualityScore();

  return (
    <motion.div
      whileHover={{ y: -6, scale: 1.02 }}
      whileTap={{ scale: 0.98 }}
      transition={{ type: 'spring', stiffness: 300, damping: 15 }}
      onMouseEnter={() => setIsHovered(true)}
      onMouseLeave={() => setIsHovered(false)}
    >
      <Card
        className={cn(
          'relative overflow-hidden cursor-pointer transition-all hover:shadow-2xl duration-500 group border-0 shadow-xl',
          isAiTarget
            ? 'ring-4 ring-green-400 ring-opacity-60 shadow-green-200'
            : isSelectedForComparison
              ? 'ring-4 ring-blue-400 ring-opacity-60 shadow-blue-200'
              : typeof aiScore === 'number'
                ? 'ring-2 ring-teal-300 ring-opacity-50 shadow-teal-100'
                : isHighlighted
                  ? 'ring-2 ring-yellow-400 ring-opacity-60 shadow-yellow-100'
                  : 'shadow-gray-200',
          'bg-gradient-to-br from-white via-gray-50/30 to-white',
          className || ''
        )}
        onClick={() => onClick(candidate)}
      >
        <div className="absolute inset-0 bg-gradient-to-br from-transparent via-white/50 to-transparent opacity-60"></div>

        {typeof aiScore === 'number' && (
          <div className="absolute top-3 left-3 z-30">
            <Badge className="bg-gradient-to-r from-teal-400 via-cyan-500 to-blue-500 text-white border-0 shadow-xl px-3 py-1.5 text-sm font-bold flex items-center gap-2">
              <Sparkles className="w-4 h-4" />
              {dict.aiMatch.replace('{{score}}', aiScore.toString())}
              <Zap className="w-3 h-3" />
            </Badge>
          </div>
        )}

        <div className="absolute top-3 right-3 z-20 flex flex-col gap-2 items-end">
          <Badge
            className={cn(
              'px-3 py-1.5 text-xs font-bold shadow-lg flex items-center gap-1.5 transition-all duration-300 hover:scale-105',
              availabilityBadge.className
            )}
          >
            {availabilityBadge.icon}
            {availabilityBadge.label}
          </Badge>

          {isManualEntry && (
            <Badge className="px-3 py-1.5 text-xs font-bold shadow-lg bg-gradient-to-r from-purple-500 to-indigo-500 text-white border-0 flex items-center gap-1.5">
              <Edit2 className="w-3 h-3" />
              {dict.manualEntry}
            </Badge>
          )}
        </div>

        <div className="relative h-52 sm:h-60 bg-gradient-to-br from-blue-100 via-purple-50 to-pink-100">
          {mainImage && !imageError ? (
            <>
              {!imageLoaded && (
                <Skeleton className="absolute inset-0 h-full w-full" />
              )}
              <Image
                src={getRelativeCloudinaryPath(mainImage.url)}
                alt={`${candidate.firstName} ${candidate.lastName}`}
                fill
                sizes="(max-width: 768px) 100vw, (max-width: 1200px) 50vw, 33vw"
                priority={false}
                className={`object-cover transition-all duration-500 ${
                  imageLoaded ? 'opacity-100 scale-100' : 'opacity-0 scale-105'
                } ${isHovered ? 'scale-110' : 'scale-100'}`}
                onLoad={() => setImageLoaded(true)}
                onError={() => setImageError(true)}
              />
              <div className="absolute inset-0 bg-gradient-to-t from-gray-900/90 via-gray-900/40 to-transparent opacity-80 group-hover:opacity-90 transition-opacity duration-300" />
              <div className="absolute inset-0 bg-gradient-to-r from-transparent via-white/20 to-transparent transform -translate-x-full group-hover:translate-x-full transition-transform duration-1000"></div>
            </>
          ) : (
            <div className="w-full h-full flex items-center justify-center bg-gradient-to-br from-blue-100 via-purple-100 to-pink-100">
              <div className="text-center">
                <User className="w-16 h-16 text-gray-400 mx-auto mb-2" />
                <p className="text-sm text-gray-500">{dict.noImage}</p>
              </div>
            </div>
          )}

          <div className="absolute bottom-0 w-full p-4 text-right">
            <h3 className="font-bold mb-1 text-white drop-shadow-lg text-xl tracking-wide">
              {highlightText(`${candidate.firstName} ${candidate.lastName}`)}
            </h3>
            <div className="flex items-center justify-end gap-3 text-white/95 text-sm">
              <span className="bg-black/30 px-2 py-1 rounded-full backdrop-blur-sm font-medium">
                {age} {dict.yearsSuffix}
              </span>
              <Calendar className="w-4 h-4" />
            </div>
          </div>
        </div>

        <div className="p-5 relative z-10">
          <div className="space-y-3 text-gray-700">
            {isManualEntry && candidate.profile.manualEntryText ? (
              <div className="bg-gradient-to-r from-purple-50 to-indigo-50 p-3 rounded-xl border border-purple-100">
                <p className="line-clamp-3 text-sm leading-relaxed text-purple-800">
                  {highlightText(candidate.profile.manualEntryText)}
                </p>
              </div>
            ) : (
              <div className="space-y-2">
                {candidate.profile.city && (
                  <div className="flex items-center justify-end gap-2 p-2 bg-blue-50 rounded-lg hover:bg-blue-100 transition-colors duration-200">
                    <span className="font-medium text-blue-800">
                      {highlightText(candidate.profile.city)}
                    </span>
                    <MapPin className="w-4 h-4 text-blue-600" />
                  </div>
                )}
                {candidate.profile.occupation && (
                  <div className="flex items-center justify-end gap-2 p-2 bg-green-50 rounded-lg hover:bg-green-100 transition-colors duration-200">
                    <span className="text-green-800 text-sm">
                      {highlightText(candidate.profile.occupation)}
                    </span>
                    <Briefcase className="w-4 h-4 text-green-600" />
                  </div>
                )}
              </div>
            )}

            {candidate.profile.lastActive && (
              <div className="flex items-center justify-end gap-2 mt-3 pt-3 border-t border-gray-100">
                <span className="text-xs text-gray-500">
                  {`${dict.lastActivePrefix} ${formatDistanceToNow(new Date(candidate.profile.lastActive), { addSuffix: true, locale: he })}`}
                </span>
                <Clock className="w-3 h-3 text-gray-400" />
              </div>
            )}
          </div>
        </div>

        <div className="absolute bottom-3 left-3 z-20 flex items-center gap-2 opacity-0 group-hover:opacity-100 transition-all duration-300 transform translate-y-2 group-hover:translate-y-0">
          {onEdit && (
            <TooltipProvider>
              <Tooltip>
                <TooltipTrigger asChild>
                  <Button
                    variant="outline"
                    size="icon"
                    className="h-9 w-9 bg-white/90 backdrop-blur-sm shadow-xl border-0 hover:bg-white hover:scale-110 transition-all duration-300"
                    onClick={(e) => onEdit(candidate, e)}
                  >
                    <Edit2 className="h-4 w-4 text-blue-600" />
                  </Button>
                </TooltipTrigger>
                <TooltipContent>
                  <p>{dict.tooltips.editProfile}</p>
                </TooltipContent>
              </Tooltip>
            </TooltipProvider>
          )}

          {onSetAiTarget && (
            <TooltipProvider>
              <Tooltip>
                <TooltipTrigger asChild>
                  <Button
                    variant="outline"
                    size="icon"
                    className={cn(
                      'h-9 w-9 backdrop-blur-sm shadow-xl border-0 hover:scale-110 transition-all duration-300',
                      isAiTarget
                        ? 'bg-gradient-to-r from-green-500 to-emerald-500 text-white hover:from-green-600 hover:to-emerald-600'
                        : 'bg-white/90 hover:bg-white text-gray-600'
                    )}
                    onClick={(e) => onSetAiTarget(candidate, e)}
                  >
                    <Star
                      className={cn(
                        'h-4 w-4 transition-all duration-300',
                        isAiTarget ? 'fill-current rotate-12' : ''
                      )}
                    />
                  </Button>
                </TooltipTrigger>
                <TooltipContent>
                  <p>
                    {isAiTarget
                      ? dict.tooltips.clearAiTarget
                      : dict.tooltips.setAsAiTarget}
                  </p>
                </TooltipContent>
              </Tooltip>
            </TooltipProvider>
          )}
        </div>

        <div className="absolute top-3 left-1/2 transform -translate-x-1/2 z-20 opacity-0 group-hover:opacity-100 transition-all duration-300">
          <div className="flex items-center gap-1 bg-black/60 text-white px-3 py-1 rounded-full backdrop-blur-sm text-xs font-bold">
            <Award className="w-3 h-3" />
            <span>
              {dict.qualityScore.replace('{{score}}', qualityScore.toString())}
            </span>
          </div>
        </div>

        {isSelectableForComparison && onToggleComparison && (
          <div
            className="absolute bottom-3 right-3 z-20 opacity-0 group-hover:opacity-100 transition-all duration-300 transform translate-y-2 group-hover:translate-y-0"
            onClick={(e) => {
              e.stopPropagation();
              onToggleComparison(candidate, e);
            }}
          >
            <div className="flex items-center space-x-2 bg-white/90 backdrop-blur-sm p-2 rounded-xl shadow-xl cursor-pointer hover:bg-white hover:scale-105 transition-all duration-300 border-0">
              <Checkbox
                id={`compare-${candidate.id}`}
                checked={isSelectedForComparison}
                className="pointer-events-none border-2 border-blue-400 data-[state=checked]:bg-gradient-to-r data-[state=checked]:from-blue-500 data-[state=checked]:to-cyan-500 data-[state=checked]:border-blue-500"
              />
              <label
                htmlFor={`compare-${candidate.id}`}
                className="text-xs font-bold leading-none text-gray-700 cursor-pointer"
              >
                {dict.compare}
              </label>
            </div>
          </div>
        )}

        <div className="absolute inset-0 bg-gradient-to-r from-blue-400/0 via-purple-400/0 to-pink-400/0 group-hover:from-blue-400/10 group-hover:via-purple-400/10 group-hover:to-pink-400/10 transition-all duration-500 pointer-events-none rounded-lg"></div>
      </Card>
    </motion.div>
  );
};

export default MinimalCandidateCard;
--- End of Content for MinimalCard.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\new\CandidateCard\QuickView.tsx
--------------------------------------------------------------------------------
Content:
// File: src/app/components/matchmaker/new/CandidateCard/QuickView.tsx

'use client';
import React, { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import {
  Heart,
  Mail,
  Clock,
  Eye,
  Scroll,
  GraduationCap,
  Briefcase,
  MapPin,
  User,
  FileText,
  CalendarClock,
  Edit,
  Info,
  Star,
  Sparkles,
  Send,
  Calendar,
  Shield,
  Crown,
  Zap,
  Award,
  Activity,
  MessageCircle,
  Phone,
  X,
} from 'lucide-react';

import { Separator } from '@/components/ui/separator';
import type { Candidate } from '../types/candidates';
import { UserSource } from '@prisma/client';
import { cn } from '@/lib/utils';
import { motion } from 'framer-motion';
import Image from 'next/image';
import { getRelativeCloudinaryPath } from '@/lib/utils';

// פונקציה לחישוב גיל
const calculateAge = (birthDate: Date): number => {
  const today = new Date();
  const birth = new Date(birthDate);
  let age = today.getFullYear() - birth.getFullYear();
  const monthDiff = today.getMonth() - birth.getMonth();
  if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birth.getDate())) {
    age--;
  }
  return age;
};

type ActionId = 'view' | 'invite' | 'suggest' | 'contact' | 'favorite' | 'edit';

interface QuickViewProps {
  candidate: Candidate;
  onAction: (action: ActionId) => void;
  onSetAiTarget?: (candidate: Candidate, e: React.MouseEvent) => void;
  isAiTarget?: boolean;
}

const QuickView: React.FC<QuickViewProps> = ({
  candidate,
  onAction,
  onSetAiTarget,
  isAiTarget = false,
}) => {
  const [isClosing, setIsClosing] = useState(false);
  const [hoveredAction, setHoveredAction] = useState<string | null>(null);

  const handleClick = (e: React.MouseEvent) => {
    e.stopPropagation();
  };

  const handleClose = () => {
    setIsClosing(true);
    setTimeout(() => {
      // הקומפוננט יסגר על ידי ההורה
    }, 150);
  };

  const profile = candidate.profile;
  const isManualEntry = candidate.source === UserSource.MANUAL_ENTRY;
  const mainImage = candidate.images?.find((img) => img.isMain);

  const getAvailabilityInfo = () => {
    switch (profile.availabilityStatus) {
      case 'AVAILABLE':
        return {
          label: 'פנוי/ה',
          gradient: 'from-emerald-500 to-green-500',
          icon: <Sparkles className="w-4 h-4" />,
          description: 'זמין/ה למפגשים חדשים',
        };
      case 'DATING':
        return {
          label: 'בתהליך היכרות',
          gradient: 'from-amber-500 to-orange-500',
          icon: <Heart className="w-4 h-4" />,
          description: 'כרגע בתהליך היכרות',
        };
      case 'UNAVAILABLE':
        return {
          label: 'לא פנוי/ה',
          gradient: 'from-red-500 to-pink-500',
          icon: <Clock className="w-4 h-4" />,
          description: 'לא זמין/ה כרגע',
        };
      default:
        return {
          label: 'לא ידוע',
          gradient: 'from-gray-500 to-slate-500',
          icon: <User className="w-4 h-4" />,
          description: 'סטטוס לא ידוע',
        };
    }
  };

  const getQualityScore = () => {
    let score = 0;
    if (candidate.images.length > 0) score += 25;
    if (profile.about) score += 25;
    if (profile.education) score += 25;
    if (profile.occupation) score += 25;
    return score;
  };

  const availabilityInfo = getAvailabilityInfo();
  const qualityScore = getQualityScore();

  const actionButtons: {
    id: 'view' | 'invite' | 'suggest' | 'contact' | 'edit';
    label: string;
    icon: React.ElementType;
    gradient: string;
    description: string;
    primary: boolean;
  }[] = [
    {
      id: 'view',
      label: 'צפייה מלאה',
      icon: Eye,
      gradient: 'from-blue-500 to-cyan-500',
      description: 'פתח פרופיל מלא',
      primary: true,
    },
    {
      id: 'suggest',
      label: 'הצעת שידוך',
      icon: Heart,
      gradient: 'from-pink-500 to-rose-500',
      description: 'צור הצעה חדשה',
      primary: true,
    },
    {
      id: 'invite',
      label: 'שלח הזמנה',
      icon: Send,
      gradient: 'from-purple-500 to-indigo-500',
      description: 'הזמן למערכת',
      primary: false,
    },
    {
      id: 'contact',
      label: 'בדוק זמינות',
      icon: Calendar,
      gradient: 'from-orange-500 to-amber-500',
      description: 'תיאום פגישה',
      primary: false,
    },
    {
      id: 'edit',
      label: 'עריכה',
      icon: Edit,
      gradient: 'from-gray-500 to-slate-500',
      description: 'ערוך פרופיל',
      primary: false,
    },
  ];

  return (
    <motion.div
      initial={{ opacity: 0, scale: 0.9, y: 20 }}
      animate={{
        opacity: isClosing ? 0 : 1,
        scale: isClosing ? 0.9 : 1,
        y: isClosing ? 20 : 0,
      }}
      transition={{ type: 'spring', stiffness: 300, damping: 25 }}
      // --- START OF FIX ---
      // 1. הוספת הגבלת גובה כללית לקומפוננטה
      className="bg-white shadow-2xl flex flex-col border-0 overflow-hidden max-w-md sm:max-w-lg w-full rounded-3xl max-h-[85vh]"
      // --- END OF FIX ---
      onClick={handleClick}
    >
      {/* Enhanced Header */}
      <div
        className={cn(
          'relative px-6 py-6 text-white overflow-hidden',
          `bg-gradient-to-br ${availabilityInfo.gradient}`
        )}
      >
        {/* Background Pattern */}
        <div className="absolute inset-0">
          <div className="absolute top-0 right-0 w-32 h-32 bg-white/20 rounded-full blur-2xl"></div>
          <div className="absolute bottom-0 left-0 w-24 h-24 bg-white/10 rounded-full blur-xl"></div>
        </div>

        <div className="relative z-10">
          <div className="flex items-start justify-between mb-4">
            <div className="flex items-center gap-3">
              {/* Profile Image */}
              <div className="relative w-16 h-16 rounded-full overflow-hidden border-3 border-white/30 shadow-xl">
                {mainImage ? (
                  <Image
                    src={getRelativeCloudinaryPath(mainImage.url)}
                    alt={`${candidate.firstName} ${candidate.lastName}`}
                    fill
                    className="object-cover"
                  />
                ) : (
                  <div className="w-full h-full bg-white/20 flex items-center justify-center">
                    <User className="w-8 h-8 text-white/80" />
                  </div>
                )}
              </div>

              <div>
                <h3 className="text-xl font-bold mb-1">
                  {candidate.firstName} {candidate.lastName}
                </h3>
                <div className="flex items-center gap-2">
                  {availabilityInfo.icon}
                  <span className="text-white/90 font-medium">
                    {availabilityInfo.label}
                  </span>
                </div>
              </div>
            </div>

            <div className="flex items-center gap-2">
              {onSetAiTarget && (
                <Button
                  size="icon"
                  variant="ghost"
                  className="h-8 w-8 text-white hover:bg-white/20 rounded-full"
                  onClick={(e) => onSetAiTarget(candidate, e)}
                  title={isAiTarget ? 'בטל בחירת מטרה' : 'בחר כמטרה לחיפוש AI'}
                >
                  <Star
                    className={cn(
                      'h-5 w-5',
                      isAiTarget
                        ? 'fill-current text-yellow-300'
                        : 'text-white/80'
                    )}
                  />
                </Button>
              )}
              <Button
                size="icon"
                variant="ghost"
                className="h-8 w-8 text-white hover:bg-white/20 rounded-full"
                onClick={handleClose}
              >
                <X className="h-5 w-5" />
              </Button>
            </div>
          </div>

          {/* Status Badges */}
          <div className="flex flex-wrap gap-2">
            <Badge className="bg-white/20 text-white border-white/30 backdrop-blur-sm">
              {availabilityInfo.description}
            </Badge>

            {isManualEntry && (
              <Badge className="bg-purple-500/30 text-white border-purple-300/50 backdrop-blur-sm">
                <Edit className="w-3 h-3 mr-1" />
                מועמד ידני
              </Badge>
            )}
          </div>
        </div>
      </div>

      {/* Main Content */}
      {/* --- START OF FIX --- */}
      {/* 2. הסרת הגבלת הגובה הספציפית מכאן כדי לאפשר גמישות */}
      <div className="flex-1 p-6 space-y-6 text-right overflow-y-auto bg-gradient-to-br from-white to-gray-50/30">
        {/* --- END OF FIX --- */}
        {/* Key Information Grid */}
        <div className="grid grid-cols-2 gap-4">
          {profile.birthDate && (
            <div className="p-3 bg-gradient-to-r from-blue-50 to-cyan-50 rounded-xl border border-blue-100 hover:shadow-md transition-all duration-300">
              <div className="flex items-center justify-end gap-2 text-blue-700">
                <span className="font-bold text-lg">
                  {calculateAge(new Date(profile.birthDate))}
                </span>
                <CalendarClock className="w-5 h-5" />
              </div>
              <p className="text-xs text-blue-600 mt-1">שנים</p>
            </div>
          )}

          {profile.height && (
            <div className="p-3 bg-gradient-to-r from-purple-50 to-pink-50 rounded-xl border border-purple-100 hover:shadow-md transition-all duration-300">
              <div className="flex items-center justify-end gap-2 text-purple-700">
                <span className="font-bold text-lg">{profile.height}</span>
                <User className="w-5 h-5" />
              </div>
              <p className="text-xs text-purple-600 mt-1">ס״ם</p>
            </div>
          )}

          {profile.maritalStatus && (
            <div className="p-3 bg-gradient-to-r from-green-50 to-emerald-50 rounded-xl border border-green-100 hover:shadow-md transition-all duration-300">
              <div className="flex items-center justify-end gap-2 text-green-700">
                <span className="font-medium text-sm">
                  {profile.maritalStatus}
                </span>
                <Heart className="w-5 h-5" />
              </div>
              <p className="text-xs text-green-600 mt-1">מצב משפחתי</p>
            </div>
          )}

          {profile.religiousLevel && (
            <div className="p-3 bg-gradient-to-r from-orange-50 to-amber-50 rounded-xl border border-orange-100 hover:shadow-md transition-all duration-300">
              <div className="flex items-center justify-end gap-2 text-orange-700">
                <span className="font-medium text-sm">
                  {profile.religiousLevel}
                </span>
                <Scroll className="w-5 h-5" />
              </div>
              <p className="text-xs text-orange-600 mt-1">רמת דתיות</p>
            </div>
          )}
        </div>

        <Separator className="my-6 bg-gradient-to-r from-transparent via-gray-300 to-transparent" />

        {/* Manual Entry Text or Profile Details */}
        {isManualEntry && profile.manualEntryText ? (
          <div className="space-y-4">
            <div className="flex items-center justify-end gap-2">
              <h4 className="text-lg font-bold text-purple-800">
                תיאור ידני מהשדכן
              </h4>
              <Info className="w-6 h-6 text-purple-500" />
            </div>
            <div className="p-5 bg-gradient-to-r from-purple-50 to-indigo-50 rounded-2xl border border-purple-200 shadow-sm">
              <p className="text-purple-900 leading-relaxed whitespace-pre-wrap font-medium">
                {profile.manualEntryText}
              </p>
            </div>
          </div>
        ) : (
          <div className="space-y-4">
            <h4 className="text-lg font-bold text-gray-700 mb-4 flex items-center justify-end gap-2">
              <span>מידע נוסף</span>
              <Sparkles className="w-5 h-5 text-blue-500" />
            </h4>

            {profile.education && (
              <div className="p-4 bg-gradient-to-r from-blue-50 to-cyan-50 rounded-xl border border-blue-100 hover:shadow-md transition-all duration-300 group">
                <div className="flex items-center justify-end gap-3">
                  <span className="font-medium text-blue-800 group-hover:text-blue-900 transition-colors">
                    {profile.education}
                  </span>
                  <div className="p-2 rounded-full bg-gradient-to-r from-blue-500 to-cyan-500 text-white shadow-lg">
                    <GraduationCap className="w-4 h-4" />
                  </div>
                </div>
                <p className="text-xs text-blue-600 mt-1 text-right">השכלה</p>
              </div>
            )}

            {profile.occupation && (
              <div className="p-4 bg-gradient-to-r from-green-50 to-emerald-50 rounded-xl border border-green-100 hover:shadow-md transition-all duration-300 group">
                <div className="flex items-center justify-end gap-3">
                  <span className="font-medium text-green-800 group-hover:text-green-900 transition-colors">
                    {profile.occupation}
                  </span>
                  <div className="p-2 rounded-full bg-gradient-to-r from-green-500 to-emerald-500 text-white shadow-lg">
                    <Briefcase className="w-4 h-4" />
                  </div>
                </div>
                <p className="text-xs text-green-600 mt-1 text-right">עיסוק</p>
              </div>
            )}

            {profile.city && (
              <div className="p-4 bg-gradient-to-r from-purple-50 to-pink-50 rounded-xl border border-purple-100 hover:shadow-md transition-all duration-300 group">
                <div className="flex items-center justify-end gap-3">
                  <span className="font-medium text-purple-800 group-hover:text-purple-900 transition-colors">
                    {profile.city}
                  </span>
                  <div className="p-2 rounded-full bg-gradient-to-r from-purple-500 to-pink-500 text-white shadow-lg">
                    <MapPin className="w-4 h-4" />
                  </div>
                </div>
                <p className="text-xs text-purple-600 mt-1 text-right">מיקום</p>
              </div>
            )}
          </div>
        )}

        {/* About Section */}
        {(!isManualEntry || !profile.manualEntryText) && profile.about && (
          <>
            <Separator className="my-6 bg-gradient-to-r from-transparent via-gray-300 to-transparent" />
            <div className="space-y-4">
              <h4 className="text-lg font-bold text-gray-700 flex items-center justify-end gap-2">
                <span>אודות</span>
                <FileText className="w-5 h-5 text-gray-500" />
              </h4>
              <div className="p-5 bg-gradient-to-r from-gray-50 to-slate-50 rounded-2xl border border-gray-200 shadow-sm">
                <p className="text-gray-800 leading-relaxed whitespace-pre-wrap">
                  {profile.about}
                </p>
              </div>
            </div>
          </>
        )}
      </div>

      {/* Enhanced Action Buttons */}
      <div className="p-6 bg-gradient-to-r from-gray-50 to-white border-t border-gray-100">
        {/* Quality Score */}
        <div className="flex items-center justify-center mb-4">
          <div className="flex items-center gap-2 bg-gradient-to-r from-blue-50 to-cyan-50 px-4 py-2 rounded-full border border-blue-100">
            <Award className="w-4 h-4 text-blue-600" />
            <span className="text-sm font-bold text-blue-800">
              איכות פרופיל: {qualityScore}%
            </span>
            <div className="flex gap-1">
              {[...Array(5)].map((_, i) => (
                <Star
                  key={i}
                  className={cn(
                    'w-3 h-3',
                    i < Math.floor(qualityScore / 20)
                      ? 'text-yellow-500 fill-current'
                      : 'text-gray-300'
                  )}
                />
              ))}
            </div>
          </div>
        </div>

        {/* Primary Actions */}
        <div className="grid grid-cols-2 gap-3 mb-4">
          {actionButtons
            .filter((a) => a.primary)
            .map((action) => {
              const IconComponent = action.icon;
              return (
                <Button
                  key={action.id}
                  className={cn(
                    'h-12 font-bold text-sm border-0 shadow-xl hover:shadow-2xl transition-all duration-300 transform hover:scale-105 relative overflow-hidden group rounded-2xl',
                    `bg-gradient-to-r ${action.gradient} hover:${action.gradient.replace('500', '600')}`,
                    'text-white',
                    hoveredAction === action.id && 'scale-105'
                  )}
                  onClick={() => onAction(action.id)}
                  onMouseEnter={() => setHoveredAction(action.id)}
                  onMouseLeave={() => setHoveredAction(null)}
                >
                  <div className="absolute inset-0 bg-gradient-to-r from-white/0 via-white/20 to-white/0 transform -translate-x-full group-hover:translate-x-full transition-transform duration-700"></div>
                  <div className="relative z-10 flex items-center justify-center gap-2">
                    <IconComponent className="w-5 h-5" />
                    <span>{action.label}</span>
                  </div>
                </Button>
              );
            })}
        </div>

        {/* Secondary Actions */}
        <div className="grid grid-cols-3 gap-2">
          {actionButtons
            .filter((a) => !a.primary)
            .map((action) => {
              const IconComponent = action.icon;
              return (
                <Button
                  key={action.id}
                  variant="outline"
                  size="sm"
                  className={cn(
                    'border-2 border-gray-200 hover:border-transparent shadow-lg hover:shadow-xl transition-all duration-300 transform hover:scale-105 group relative overflow-hidden rounded-xl',
                    `hover:bg-gradient-to-r hover:${action.gradient}`,
                    'hover:text-white font-medium',
                    hoveredAction === action.id && 'scale-105'
                  )}
                  onClick={() => onAction(action.id)}
                  onMouseEnter={() => setHoveredAction(action.id)}
                  onMouseLeave={() => setHoveredAction(null)}
                >
                  <div
                    className={cn(
                      'absolute inset-0 bg-gradient-to-r transition-all duration-300 opacity-0 group-hover:opacity-100',
                      action.gradient
                    )}
                  ></div>
                  <div className="relative z-10 flex items-center justify-center gap-1">
                    <IconComponent className="w-3 h-3" />
                    <span className="text-xs">{action.label}</span>
                  </div>
                </Button>
              );
            })}
        </div>

        {/* Quick Stats Footer */}
        <div className="mt-4 pt-4 border-t border-gray-200">
          <div className="flex justify-between items-center text-xs">
            <div className="flex items-center gap-1 text-yellow-600">
              <Star className="w-3 h-3 fill-current" />
              <span className="font-medium">דירוג: 4.8</span>
            </div>
            <div className="flex items-center gap-1 text-blue-600">
              <Zap className="w-3 h-3" />
              <span className="font-medium">התאמה: 95%</span>
            </div>
            <div className="flex items-center gap-1 text-green-600">
              <MessageCircle className="w-3 h-3" />
              <span className="font-medium">תגובה: מהירה</span>
            </div>
          </div>
        </div>
      </div>
    </motion.div>
  );
};

export default QuickView;
--- End of Content for QuickView.tsx ---

================================================================================
Directory: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\new\CandidatesManager
================================================================================

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\new\CandidatesManager\CandidatesList.tsx
--------------------------------------------------------------------------------
Content:
// File: src/app/components/matchmaker/new/CandidatesManager/CandidatesList.tsx

import React, {
  useState,
  useCallback,
  useEffect,
  useRef,
  useMemo,
} from 'react';
import { UserX, Edit } from 'lucide-react';
import MinimalCard from '../CandidateCard/MinimalCard';
import QuickView from '../CandidateCard/QuickView';
import { ProfileCard } from '@/components/profile';
import type {
  Candidate,
  CandidateAction,
  MobileView,
} from '../types/candidates';
import type { QuestionnaireResponse } from '@/types/next-auth';
import { Skeleton } from '@/components/ui/skeleton';
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription,
} from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select';
import { toast } from 'sonner';
import { ActionDialogs } from '../dialogs/ActionDialogs';
import NewSuggestionForm from '../../suggestions/NewSuggestionForm';
import MatchmakerEditProfile from '../MatchmakerEditProfile';
import { cn } from '@/lib/utils';

// --- ייבוא המילונים ---
import type { MatchmakerPageDictionary } from '@/types/dictionaries/matchmaker';
import type {
  SuggestionsDictionary,
  ProfilePageDictionary,
} from '@/types/dictionary';

interface CreateSuggestionData {
  priority: 'LOW' | 'MEDIUM' | 'HIGH' | 'URGENT';
  firstPartyId: string;
  secondPartyId: string;
  status:
    | 'DRAFT'
    | 'PENDING_FIRST_PARTY'
    | 'FIRST_PARTY_APPROVED'
    | 'FIRST_PARTY_DECLINED'
    | string;
  firstPartyNotes?: string;
  secondPartyNotes?: string;
}

interface CandidatesListProps {
  candidates: (Candidate & { aiScore?: number })[];
  allCandidates: Candidate[];
  onCandidateClick?: (candidate: Candidate) => void;
  onCandidateAction?: (type: CandidateAction, candidate: Candidate) => void;
  viewMode: 'grid' | 'list';
  mobileView: MobileView;
  isLoading?: boolean;
  className?: string;
  highlightTerm?: string;
  aiTargetCandidate: Candidate | null;
  onSetAiTarget: (candidate: Candidate, e: React.MouseEvent) => void;
  comparisonSelection: Record<string, Candidate>;
  onToggleComparison: (candidate: Candidate, e: React.MouseEvent) => void;
  quickViewSide?: 'left' | 'right' | 'center';

  // --- קבלת המילונים כ-props ---
  dict: MatchmakerPageDictionary['candidatesManager']['list'];
  profileDict: ProfilePageDictionary;
  suggestionsDict: SuggestionsDictionary;
}

const CandidatesList: React.FC<CandidatesListProps> = ({
  candidates,
  allCandidates,
  onCandidateClick,
  onCandidateAction,
  viewMode,
  mobileView,
  isLoading = false,
  className,
  highlightTerm,
  aiTargetCandidate,
  onSetAiTarget,
  comparisonSelection,
  onToggleComparison,
  quickViewSide = 'center',
  dict,
  profileDict,
  suggestionsDict,
}) => {
  // Base states
  const [selectedCandidate, setSelectedCandidate] = useState<Candidate | null>(
    null
  );
  const [questionnaireResponse, setQuestionnaireResponse] =
    useState<QuestionnaireResponse | null>(null);
  const [isMatchmaker, setIsMatchmaker] = useState(false);
  const [hoveredCandidate, setHoveredCandidate] = useState<Candidate | null>(
    null
  );
  const [hoverPosition, setHoverPosition] = useState({ top: 0, left: 0 });
  const hoverTimeoutRef = useRef<NodeJS.Timeout | null>(null);
  const quickViewRef = useRef<HTMLDivElement>(null);

  // Dialog states
  const [showInviteDialog, setShowInviteDialog] = useState(false);
  const [showAvailabilityDialog, setShowAvailabilityDialog] = useState(false);
  const [showSuggestDialog, setShowSuggestDialog] = useState(false);
  const [showEditProfileDialog, setShowEditProfileDialog] = useState(false);
  const [dialogCandidate, setDialogCandidate] = useState<Candidate | null>(
    null
  );

  const [isMobile, setIsMobile] = useState(false);

  useEffect(() => {
    const checkScreenSize = () => {
      setIsMobile(window.innerWidth < 768);
    };
    checkScreenSize();
    window.addEventListener('resize', checkScreenSize);
    return () => {
      window.removeEventListener('resize', checkScreenSize);
    };
  }, []);

  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (
        hoveredCandidate &&
        quickViewRef.current &&
        !quickViewRef.current.contains(event.target as Node)
      ) {
        setHoveredCandidate(null);
      }
    };
    document.addEventListener('mousedown', handleClickOutside);
    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, [hoveredCandidate]);

  useEffect(() => {
    return () => {
      if (hoverTimeoutRef.current) {
        clearTimeout(hoverTimeoutRef.current);
      }
    };
  }, []);

  useEffect(() => {
    const loadQuestionnaire = async () => {
      if (!selectedCandidate) {
        setQuestionnaireResponse(null);
        return;
      }
      try {
        const response = await fetch(
          `/api/profile/questionnaire?userId=${selectedCandidate.id}`
        );
        const data = await response.json();
        if (data.success && data.questionnaireResponse) {
          const formattedQuestionnaire = {
            ...data.questionnaireResponse,
            formattedAnswers: {
              values: data.questionnaireResponse.formattedAnswers.values || [],
              personality:
                data.questionnaireResponse.formattedAnswers.personality || [],
              relationship:
                data.questionnaireResponse.formattedAnswers.relationship || [],
              partner:
                data.questionnaireResponse.formattedAnswers.partner || [],
              religion:
                data.questionnaireResponse.formattedAnswers.religion || [],
            },
          };
          setQuestionnaireResponse(formattedQuestionnaire);
        }
      } catch (error) {
        console.error('Failed to load questionnaire:', error);
        toast.error('שגיאה בטעינת השאלון'); // TODO: Translate
      }
    };
    loadQuestionnaire();
  }, [selectedCandidate]);

  // Action handlers
  const handleInvite = async (candidate: Candidate, email: string) => {
    try {
      const response = await fetch(
        `/api/matchmaker/candidates/${candidate.id}/invite-setup`,
        {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ candidateId: candidate.id, email }),
        }
      );
      if (!response.ok) throw new Error('Failed to send invitation');
      toast.success('ההזמנה נשלחה בהצלחה'); // TODO: Translate
      onCandidateAction?.('invite', candidate);
    } catch (error) {
      console.error('Error sending invite:', error);
      throw error;
    }
  };

  const handleAvailabilityCheck = async (candidate: Candidate) => {
    try {
      const response = await fetch('/api/availability/check', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ clientId: candidate.id }),
      });
      if (!response.ok) throw new Error('Failed to check availability');
      toast.success('בדיקת הזמינות נשלחה'); // TODO: Translate
      onCandidateAction?.('contact', candidate);
    } catch (error) {
      console.error('Error checking availability:', error);
      throw error;
    }
  };

  const handleCreateSuggestion = async (data: CreateSuggestionData) => {
    try {
      const response = await fetch('/api/matchmaker/suggestions', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(data),
      });
      if (!response.ok) throw new Error('Failed to create suggestion');
      toast.success('ההצעה נוצרה בהצלחה'); // TODO: Translate
      onCandidateAction?.('suggest', dialogCandidate!);
    } catch (error) {
      console.error('Error creating suggestion:', error);
      throw error;
    }
  };

  const handleEditProfile = (candidate: Candidate) => {
    setDialogCandidate(candidate);
    setShowEditProfileDialog(true);
  };

  const handleMouseEnter = (candidate: Candidate, e?: React.MouseEvent) => {
    if (isMobile || !e) return;
    if (hoverTimeoutRef.current) {
      clearTimeout(hoverTimeoutRef.current);
    }
    const cardElement = e.currentTarget as HTMLElement;
    const cardRect = cardElement.getBoundingClientRect();
    const viewportHeight = window.innerHeight;
    const padding = 20;
    const quickViewApproxHeight = Math.min(650, viewportHeight * 0.85);
    let top;
    if (cardRect.top + quickViewApproxHeight > viewportHeight - padding) {
      top = cardElement.offsetTop + cardRect.height - quickViewApproxHeight;
    } else {
      top = cardElement.offsetTop;
    }
    const scrollContainer = cardElement.closest('.overflow-y-auto');
    if (scrollContainer) {
      top = Math.max(top, scrollContainer.scrollTop);
    }
    let left;
    const quickViewWidth = 420;
    switch (quickViewSide) {
      case 'left':
        left = window.innerWidth / 4 - quickViewWidth / 2;
        break;
      case 'right':
        left = (window.innerWidth * 3) / 4 - quickViewWidth / 2 - 470;
        break;
      case 'center':
      default:
        left = window.innerWidth / 2 - quickViewWidth / 2;
        break;
    }
    left = Math.max(
      padding,
      Math.min(left, window.innerWidth - quickViewWidth - padding)
    );
    hoverTimeoutRef.current = setTimeout(() => {
      setHoverPosition({ top, left });
      setHoveredCandidate(candidate);
    }, 300);
  };

  const handleMouseLeave = () => {
    if (isMobile) return;
    if (hoverTimeoutRef.current) {
      clearTimeout(hoverTimeoutRef.current);
      hoverTimeoutRef.current = null;
    }
    setTimeout(() => {
      if (!quickViewRef.current?.matches(':hover')) {
        setHoveredCandidate(null);
      }
    }, 100);
  };

  const handleAction = useCallback(
    (action: CandidateAction, candidate: Candidate) => {
      setDialogCandidate(candidate);
      setHoveredCandidate(null);
      switch (action) {
        case 'invite':
          setShowInviteDialog(true);
          break;
        case 'contact':
          setShowAvailabilityDialog(true);
          break;
        case 'suggest':
          setShowSuggestDialog(true);
          break;
        case 'view':
          setSelectedCandidate(candidate);
          onCandidateClick?.(candidate);
          break;
        case 'edit':
          handleEditProfile(candidate);
          break;
        default:
          onCandidateAction?.(action, candidate);
      }
    },
    [onCandidateAction, onCandidateClick]
  );

  const gridLayoutClass = useMemo(() => {
    if (isMobile) {
      return mobileView === 'double'
        ? 'grid grid-cols-2 gap-2'
        : 'grid grid-cols-1 gap-3';
    }
    return viewMode === 'grid'
      ? 'grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-x-3 gap-y-4'
      : 'space-y-4';
  }, [isMobile, mobileView, viewMode]);

  if (isLoading) {
    return (
      <div
        className={`${viewMode === 'grid' ? 'grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4' : 'space-y-4'} ${className || ''}`}
      >
        {Array.from({ length: 6 }).map((_, i) => (
          <div key={i} className="relative">
            <Skeleton
              className={
                viewMode === 'list' ? 'h-32 w-full' : 'h-[350px] w-full'
              }
            />
            <div className="absolute top-3 right-3">
              <Skeleton className="h-6 w-16 rounded-full" />
            </div>
          </div>
        ))}
      </div>
    );
  }

  if (candidates.length === 0) {
    return (
      <div className="flex flex-col items-center justify-center h-32 bg-gray-50 rounded-lg border border-dashed border-gray-300 p-4 text-center">
        <UserX className="w-8 h-8 mb-2 text-gray-400" />
        <p className="text-sm font-medium text-gray-500 mb-1">
          {dict.emptyState.title}
        </p>
        <p className="text-xs text-gray-400">{dict.emptyState.description}</p>
      </div>
    );
  }

  return (
    <>
      <div className={cn(gridLayoutClass, className || '')}>
        {candidates.map((candidate) => (
          <div
            key={candidate.id}
            className="group relative"
            onMouseEnter={(e) => handleMouseEnter(candidate, e)}
            onMouseLeave={handleMouseLeave}
            onClick={() => handleAction('view', candidate)}
          >
            <MinimalCard
              candidate={candidate}
              onClick={() => handleAction('view', candidate)}
              onEdit={(c, e) => {
                e.stopPropagation();
                handleAction('edit', c);
              }}
              className={cn(
                viewMode === 'list' && !isMobile
                  ? 'flex flex-row-reverse gap-4 h-32'
                  : '',
                isMobile && mobileView === 'double' ? 'transform scale-90' : '',
                isMobile && mobileView === 'single' ? 'transform scale-95' : ''
              )}
              highlightTerm={highlightTerm}
              aiScore={candidate.aiScore}
              onSetAiTarget={onSetAiTarget}
              isAiTarget={aiTargetCandidate?.id === candidate.id}
              isSelectableForComparison={
                !!aiTargetCandidate &&
                aiTargetCandidate.profile.gender !== candidate.profile.gender &&
                aiTargetCandidate.id !== candidate.id
              }
              isSelectedForComparison={!!comparisonSelection[candidate.id]}
              onToggleComparison={onToggleComparison}
              dict={profileDict.minimalCard}
            />
            <button
              className="absolute top-2 left-2 bg-primary text-white p-2 rounded-full opacity-0 group-hover:opacity-100 transition-opacity z-10"
              onClick={(e) => {
                e.stopPropagation();
                handleAction('edit', candidate);
              }}
              aria-label={dict.editProfileTooltip}
              title={dict.editProfileTooltip}
            >
              <Edit className="w-4 h-4" />
            </button>
          </div>
        ))}
      </div>

      {hoveredCandidate && !isMobile && (
        <div
          ref={quickViewRef}
          className="absolute z-[70]"
          style={{
            top: `${hoverPosition.top}px`,
            left: `${hoverPosition.left}px`,
            width: '420px',
          }}
        >
          <div className="drop-shadow-2xl">
            <QuickView
              candidate={hoveredCandidate}
              onAction={(action) => handleAction(action, hoveredCandidate)}
              onSetAiTarget={(c, e) => onSetAiTarget(c, e)}
              isAiTarget={aiTargetCandidate?.id === hoveredCandidate.id}
              dict={suggestionsDict.quickView}
            />
          </div>
        </div>
      )}

      <Dialog
        open={!!selectedCandidate}
        onOpenChange={(open) => {
          if (!open) {
            setSelectedCandidate(null);
            setQuestionnaireResponse(null);
          }
        }}
      >
        <DialogContent className="max-w-6xl max-h-[90vh] overflow-y-auto">
          <DialogHeader>
            <div className="flex items-center justify-between">
              <DialogTitle>{dict.profileDialog.title}</DialogTitle>
              <Button
                variant="outline"
                onClick={() => handleAction('edit', selectedCandidate!)}
                className="flex items-center gap-2"
              >
                <Edit className="w-4 h-4" />
                {dict.profileDialog.editButton}
              </Button>
            </div>
            <DialogDescription>
              {dict.profileDialog.description}
            </DialogDescription>
            <Select
              value={isMatchmaker ? 'matchmaker' : 'candidate'}
              onValueChange={(value) => setIsMatchmaker(value === 'matchmaker')}
            >
              <SelectTrigger className="w-full sm:w-48">
                <SelectValue placeholder={dict.profileDialog.viewAsLabel} />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="candidate">
                  {dict.profileDialog.candidateView}
                </SelectItem>
                <SelectItem value="matchmaker">
                  {dict.profileDialog.matchmakerView}
                </SelectItem>
              </SelectContent>
            </Select>
          </DialogHeader>

          {selectedCandidate && (
            <div className="space-y-6">
              {/* --- START OF FIX --- */}
              <ProfileCard
                profile={selectedCandidate.profile}
                images={selectedCandidate.images}
                questionnaire={questionnaireResponse}
                viewMode={isMatchmaker ? 'matchmaker' : 'candidate'}
                isProfileComplete={selectedCandidate.isProfileComplete}
                dict={profileDict.profileCard}
              />
              {/* --- END OF FIX --- */}
            </div>
          )}
        </DialogContent>
      </Dialog>

      <ActionDialogs
        suggestDialog={{
          isOpen: showSuggestDialog,
          onClose: () => setShowSuggestDialog(false),
          onSubmit: handleCreateSuggestion,
          selectedCandidate: dialogCandidate,
        }}
        availabilityDialog={{
          isOpen: showAvailabilityDialog,
          onClose: () => setShowAvailabilityDialog(false),
          onCheck: handleAvailabilityCheck,
          selectedCandidate: dialogCandidate,
        }}
        inviteDialog={{
          isOpen: showInviteDialog,
          onClose: () => setShowInviteDialog(false),
          onInvite: handleInvite,
          selectedCandidate: dialogCandidate,
        }}
      />

      <NewSuggestionForm
        isOpen={showSuggestDialog}
        onClose={() => setShowSuggestDialog(false)}
        candidates={allCandidates}
        selectedCandidate={dialogCandidate}
        onSubmit={handleCreateSuggestion}
        dict={suggestionsDict}
      />

      <MatchmakerEditProfile
        isOpen={showEditProfileDialog}
        onClose={() => setShowEditProfileDialog(false)}
        candidate={dialogCandidate}
        dict={profileDict}
      />
    </>
  );
};

export default CandidatesList;
--- End of Content for CandidatesList.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\new\CandidatesManager\CandidatesStats.tsx
--------------------------------------------------------------------------------
Content:
// /CandidatesManager/CandidatesStats.tsx

'use client';

import React from 'react';

import { Card, CardContent } from '@/components/ui/card';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Badge } from '@/components/ui/badge';
import {
  Users,
  UserCheck,
  Clock,
  MapPin,
  CheckCircle,
  Image as ImageIcon,
  TrendingUp,
  ArrowUp,
  ArrowDown,
  Activity,
  Heart,
  Star,
  Award,
  Sparkles,
  Target,
  Crown,
  Zap,
} from 'lucide-react';
import { useStatistics } from '../hooks/useStatistics';
import type { Candidate } from '../types/candidates';
import {
  BarChart,
  Bar,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip,
  ResponsiveContainer,
  PieChart,
  Pie,
  Cell,
  LineChart,
  Line,
  Area,
  AreaChart,
} from 'recharts';
import { cn } from '@/lib/utils';

interface StatCardProps {
  title: string;
  value: string | number;
  description?: string;
  icon: React.ReactNode;
  trend?: {
    value: number;
    isPositive: boolean;
  };
  className?: string;
  gradient: string;
  iconColor: string;
}

interface CandidatesStatsProps {
  candidates: Candidate[];
  className?: string;
}

const CHART_COLORS = [
  '#3B82F6', // כחול
  '#EF4444', // אדום
  '#10B981', // ירוק
  '#F59E0B', // כתום
  '#8B5CF6', // סגול
  '#EC4899', // ורוד
  '#06B6D4', // ציאן
  '#84CC16', // ליים
];

const GRADIENT_COLORS = [
  'from-blue-500 to-cyan-500',
  'from-purple-500 to-pink-500',
  'from-green-500 to-emerald-500',
  'from-orange-500 to-amber-500',
  'from-red-500 to-pink-500',
  'from-indigo-500 to-purple-500',
];

const StatCard: React.FC<StatCardProps> = ({
  title,
  value,
  description,
  icon,
  trend,
  className,
  gradient,
  iconColor,
}) => (
  <Card
    className={cn(
      'border-0 shadow-xl bg-gradient-to-br from-white via-gray-50/30 to-white overflow-hidden group hover:shadow-2xl transition-all duration-300 transform hover:scale-105',
      className
    )}
  >
    <CardContent className="p-6 relative">
      {/* Background decorative elements */}
      <div className="absolute top-0 right-0 w-32 h-32 bg-gradient-to-br from-white/20 to-transparent rounded-full blur-2xl opacity-50"></div>

      <div className="flex items-start justify-between relative z-10">
        <div className="space-y-3 flex-1">
          <p className="text-sm font-medium text-gray-600">{title}</p>
          <div className="flex items-baseline gap-2">
            <p className="text-3xl font-bold text-gray-800">{value}</p>
            {trend && (
              <div
                className={cn(
                  'flex items-center gap-1 px-2 py-1 rounded-full text-xs font-bold',
                  trend.isPositive
                    ? 'bg-gradient-to-r from-green-100 to-emerald-100 text-green-700'
                    : 'bg-gradient-to-r from-red-100 to-pink-100 text-red-700'
                )}
              >
                {trend.isPositive ? (
                  <ArrowUp className="w-3 h-3" />
                ) : (
                  <ArrowDown className="w-3 h-3" />
                )}
                <span>{Math.abs(trend.value)}%</span>
              </div>
            )}
          </div>
          {description && (
            <p className="text-sm text-gray-500 leading-relaxed">
              {description}
            </p>
          )}
          {trend && (
            <p className="text-xs text-gray-400">
              {trend.isPositive ? 'עלייה' : 'ירידה'} מהחודש שעבר
            </p>
          )}
        </div>

        <div
          className={cn(
            'p-4 rounded-2xl shadow-lg group-hover:scale-110 transition-transform duration-300',
            `bg-gradient-to-r ${gradient}`
          )}
        >
          <div className={iconColor}>{icon}</div>
        </div>
      </div>
    </CardContent>
  </Card>
);

const EnhancedChartCard: React.FC<{
  title: string;
  children: React.ReactNode;
  description?: string;
  gradient?: string;
  icon?: React.ReactNode;
}> = ({
  title,
  children,
  description,
  gradient = 'from-blue-500 to-cyan-500',
  icon,
}) => (
  <Card className="border-0 shadow-xl bg-gradient-to-br from-white via-gray-50/30 to-white overflow-hidden hover:shadow-2xl transition-all duration-300">
    <CardContent className="p-6">
      <div className="flex items-center justify-between mb-6">
        <div className="flex items-center gap-3">
          {icon && (
            <div
              className={cn(
                'p-3 rounded-full shadow-lg',
                `bg-gradient-to-r ${gradient}`
              )}
            >
              <div className="text-white">{icon}</div>
            </div>
          )}
          <div>
            <h3 className="text-xl font-bold text-gray-800">{title}</h3>
            {description && (
              <p className="text-sm text-gray-500 mt-1">{description}</p>
            )}
          </div>
        </div>
      </div>
      {children}
    </CardContent>
  </Card>
);

const CandidatesStats: React.FC<CandidatesStatsProps> = ({
  candidates,
  className,
}) => {
  const {
    stats,
    getGenderRatio,
    getTopCities,
    getActiveUsersPercent,
    getAgeGroupDistribution,
    getReligiousDistribution,
    getActivityTrend,
    getProfileCompletionStats,
  } = useStatistics(candidates);

  const genderRatio = getGenderRatio();
  const activeUsers = getActiveUsersPercent();
  const completionStats = getProfileCompletionStats();
  const ageDistribution = getAgeGroupDistribution();
  const religiousDistribution = getReligiousDistribution();
  const activityTrend = getActivityTrend();
  const topCities = getTopCities(5);

  return (
    <div className={cn('space-y-8', className)}>
      {/* Hero Section */}
      <div className="relative min-h-[200px] bg-gradient-to-br from-purple-50 via-cyan-50/30 to-emerald-50/20 overflow-hidden rounded-3xl shadow-2xl p-8">
        {/* Background decorative elements */}
        <div className="absolute inset-0">
          <div className="absolute top-10 right-10 w-64 h-64 bg-gradient-to-br from-purple-200/30 to-pink-200/30 rounded-full blur-3xl animate-float"></div>
          <div
            className="absolute bottom-10 left-10 w-48 h-48 bg-gradient-to-br from-cyan-200/30 to-blue-200/30 rounded-full blur-2xl animate-float"
            style={{ animationDelay: '2s' }}
          ></div>
        </div>

        <div className="relative z-10 text-center">
          <div className="inline-flex items-center gap-3 mb-6">
            <div className="p-4 rounded-full bg-gradient-to-r from-purple-500 to-pink-500 text-white shadow-lg">
              <Activity className="w-10 h-10" />
            </div>
          </div>
          <h1 className="text-4xl md:text-5xl font-bold bg-gradient-to-r from-purple-600 via-pink-600 to-blue-600 bg-clip-text text-transparent mb-4">
            סטטיסטיקות מועמדים
          </h1>
          <p className="text-xl text-gray-700 max-w-2xl mx-auto leading-relaxed">
            מבט כולל על נתוני המועמדים, פעילות ותובנות עסקיות מתקדמות
          </p>
        </div>
      </div>

      {/* סטטיסטיקות עיקריות */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
        <StatCard
          title="סה״כ מועמדים"
          value={stats.gender.total}
          icon={<Users className="w-8 h-8" />}
          description="סה״כ מועמדים פעילים במערכת"
          gradient="from-blue-500 to-cyan-500"
          iconColor="text-white"
          trend={{
            value: 12,
            isPositive: true,
          }}
        />
        <StatCard
          title="יחס מועמדים/ות"
          value={genderRatio.formattedRatio}
          icon={<UserCheck className="w-8 h-8" />}
          description="גברים/נשים"
          gradient="from-purple-500 to-pink-500"
          iconColor="text-white"
        />
        <StatCard
          title="פעילות בשבוע האחרון"
          value={`${activeUsers}%`}
          icon={<Clock className="w-8 h-8" />}
          gradient="from-green-500 to-emerald-500"
          iconColor="text-white"
          trend={{
            value: 8,
            isPositive: true,
          }}
        />
        <StatCard
          title="פרופילים מלאים"
          value={`${completionStats.percentage}%`}
          icon={<CheckCircle className="w-8 h-8" />}
          description={`${completionStats.completed} מתוך ${stats.gender.total}`}
          gradient="from-orange-500 to-amber-500"
          iconColor="text-white"
          trend={{
            value: 5,
            isPositive: true,
          }}
        />
      </div>

      {/* טאבים לניתוחים מתקדמים */}
      <Tabs defaultValue="demographics" className="w-full">
        <TabsList className="bg-purple-50/50 rounded-2xl p-1.5 h-auto shadow-lg border border-white/50 grid w-full grid-cols-3">
          <TabsTrigger
            value="demographics"
            className="flex items-center gap-2 rounded-xl transition-all duration-300 py-3 hover:scale-105 data-[state=active]:bg-white data-[state=active]:shadow-lg font-semibold"
          >
            <Users className="w-5 h-5" />
            דמוגרפיה
          </TabsTrigger>
          <TabsTrigger
            value="activity"
            className="flex items-center gap-2 rounded-xl transition-all duration-300 py-3 hover:scale-105 data-[state=active]:bg-white data-[state=active]:shadow-lg font-semibold"
          >
            <Activity className="w-5 h-5" />
            פעילות
          </TabsTrigger>
          <TabsTrigger
            value="completion"
            className="flex items-center gap-2 rounded-xl transition-all duration-300 py-3 hover:scale-105 data-[state=active]:bg-white data-[state=active]:shadow-lg font-semibold"
          >
            <Target className="w-5 h-5" />
            שלמות פרופילים
          </TabsTrigger>
        </TabsList>

        {/* דמוגרפיה */}
        <TabsContent value="demographics" className="mt-8">
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
            {/* התפלגות גילאים */}
            <EnhancedChartCard
              title="התפלגות גילאים"
              description="פילוח המועמדים לפי קבוצות גיל"
              gradient="from-blue-500 to-cyan-500"
              icon={<Users className="w-6 h-6" />}
            >
              <ResponsiveContainer width="100%" height={300}>
                <BarChart data={ageDistribution}>
                  <CartesianGrid strokeDasharray="3 3" stroke="#f0f0f0" />
                  <XAxis
                    dataKey="range"
                    tick={{ fontSize: 12 }}
                    stroke="#666"
                  />
                  <YAxis tick={{ fontSize: 12 }} stroke="#666" />
                  <Tooltip
                    contentStyle={{
                      backgroundColor: 'white',
                      border: 'none',
                      borderRadius: '12px',
                      boxShadow: '0 10px 40px rgba(0,0,0,0.1)',
                    }}
                  />
                  <Bar
                    dataKey="count"
                    fill="url(#blueGradient)"
                    radius={[4, 4, 0, 0]}
                  />
                  <defs>
                    <linearGradient
                      id="blueGradient"
                      x1="0"
                      y1="0"
                      x2="0"
                      y2="1"
                    >
                      <stop offset="5%" stopColor="#3B82F6" stopOpacity={0.8} />
                      <stop
                        offset="95%"
                        stopColor="#06B6D4"
                        stopOpacity={0.6}
                      />
                    </linearGradient>
                  </defs>
                </BarChart>
              </ResponsiveContainer>
            </EnhancedChartCard>

            {/* התפלגות דתית */}
            <EnhancedChartCard
              title="התפלגות רמת דתיות"
              description="פילוח המועמדים לפי רמת דתיות"
              gradient="from-purple-500 to-pink-500"
              icon={<Heart className="w-6 h-6" />}
            >
              <ResponsiveContainer width="100%" height={300}>
                <PieChart>
                  <Pie
                    data={religiousDistribution}
                    dataKey="count"
                    nameKey="level"
                    cx="50%"
                    cy="50%"
                    outerRadius={100}
                    innerRadius={40}
                    paddingAngle={2}
                    label={({ name, percent }) =>
                      `${name} ${(percent * 100).toFixed(0)}%`
                    }
                  >
                    {religiousDistribution.map((_, index) => (
                      <Cell
                        key={`cell-${index}`}
                        fill={CHART_COLORS[index % CHART_COLORS.length]}
                      />
                    ))}
                  </Pie>
                  <Tooltip
                    contentStyle={{
                      backgroundColor: 'white',
                      border: 'none',
                      borderRadius: '12px',
                      boxShadow: '0 10px 40px rgba(0,0,0,0.1)',
                    }}
                  />
                </PieChart>
              </ResponsiveContainer>
            </EnhancedChartCard>

            {/* מיקומים מובילים */}
            <EnhancedChartCard
              title="ערים מובילות"
              description="החמש ערים עם הכי הרבה מועמדים"
              gradient="from-green-500 to-emerald-500"
              icon={<MapPin className="w-6 h-6" />}
            >
              <div className="space-y-4">
                {topCities.map((city, index) => (
                  <div
                    key={city.city}
                    className="flex items-center justify-between p-4 bg-gradient-to-r from-green-50 to-emerald-50 rounded-xl border border-green-100 hover:shadow-md transition-all duration-300"
                  >
                    <div className="flex items-center gap-3">
                      <div
                        className={cn(
                          'w-8 h-8 rounded-full flex items-center justify-center text-white font-bold text-sm shadow-lg',
                          index === 0
                            ? 'bg-gradient-to-r from-yellow-400 to-orange-500'
                            : index === 1
                              ? 'bg-gradient-to-r from-gray-400 to-gray-500'
                              : index === 2
                                ? 'bg-gradient-to-r from-orange-400 to-red-500'
                                : 'bg-gradient-to-r from-green-400 to-emerald-500'
                        )}
                      >
                        {index + 1}
                      </div>
                      <div className="flex items-center gap-2">
                        <MapPin className="w-4 h-4 text-green-600" />
                        <span className="font-medium text-gray-800">
                          {city.city}
                        </span>
                      </div>
                    </div>
                    <Badge className="bg-gradient-to-r from-green-500 to-emerald-500 text-white border-0 shadow-sm px-3 py-1 font-bold">
                      {city.count}
                    </Badge>
                  </div>
                ))}
              </div>
            </EnhancedChartCard>
          </div>
        </TabsContent>

        {/* פעילות */}
        <TabsContent value="activity" className="mt-8">
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
            <EnhancedChartCard
              title="פעילות משתמשים"
              description="נתוני פעילות עדכניים"
              gradient="from-orange-500 to-amber-500"
              icon={<Activity className="w-6 h-6" />}
            >
              <div className="space-y-6">
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div className="p-4 bg-gradient-to-r from-orange-50 to-amber-50 rounded-xl border border-orange-100">
                    <div className="flex items-center justify-between mb-2">
                      <span className="text-sm font-medium text-orange-800">
                        פעילים בשבוע האחרון
                      </span>
                      <TrendingUp className="w-4 h-4 text-orange-600" />
                    </div>
                    <span className="text-2xl font-bold text-orange-900">
                      {activityTrend.weekly}
                    </span>
                  </div>

                  <div className="p-4 bg-gradient-to-r from-amber-50 to-yellow-50 rounded-xl border border-amber-100">
                    <div className="flex items-center justify-between mb-2">
                      <span className="text-sm font-medium text-amber-800">
                        פעילים בחודש האחרון
                      </span>
                      <Activity className="w-4 h-4 text-amber-600" />
                    </div>
                    <span className="text-2xl font-bold text-amber-900">
                      {activityTrend.monthly}
                    </span>
                  </div>
                </div>

                <div className="p-4 bg-gradient-to-r from-yellow-50 to-orange-50 rounded-xl border border-yellow-100">
                  <div className="flex items-center justify-between mb-2">
                    <span className="text-sm font-medium text-yellow-800">
                      ממוצע ימים בין התחברויות
                    </span>
                    <Clock className="w-4 h-4 text-yellow-600" />
                  </div>
                  <span className="text-2xl font-bold text-yellow-900">
                    {activityTrend.average} ימים
                  </span>
                </div>
              </div>
            </EnhancedChartCard>

            {/* Additional Activity Chart */}
            <EnhancedChartCard
              title="טרנד פעילות שבועי"
              description="פעילות לאורך השבוע"
              gradient="from-indigo-500 to-purple-500"
              icon={<Star className="w-6 h-6" />}
            >
              <div className="flex items-center justify-center h-64 text-gray-500">
                <div className="text-center">
                  <Sparkles className="w-12 h-12 mx-auto mb-4 text-indigo-400" />
                  <p>נתונים זמינים בקרוב</p>
                  <p className="text-sm">טרנד פעילות מתקדם</p>
                </div>
              </div>
            </EnhancedChartCard>
          </div>
        </TabsContent>

        {/* שלמות פרופילים */}
        <TabsContent value="completion" className="mt-8">
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
            <EnhancedChartCard
              title="שלמות פרופילים"
              description="אחוזי השלמה של רכיבי הפרופיל"
              gradient="from-red-500 to-pink-500"
              icon={<Target className="w-6 h-6" />}
            >
              <div className="space-y-6">
                <div className="space-y-4">
                  <div className="flex items-center justify-between p-4 bg-gradient-to-r from-red-50 to-pink-50 rounded-xl border border-red-100 hover:shadow-md transition-all duration-300">
                    <div className="flex items-center gap-3">
                      <div className="p-2 rounded-full bg-gradient-to-r from-red-500 to-pink-500 text-white shadow-lg">
                        <ImageIcon className="w-4 h-4" />
                      </div>
                      <span className="font-medium text-gray-800">
                        תמונות פרופיל
                      </span>
                    </div>
                    <Badge className="bg-gradient-to-r from-red-500 to-pink-500 text-white border-0 shadow-sm px-3 py-1 font-bold">
                      {stats.completion.percentages.hasPhotos}%
                    </Badge>
                  </div>

                  <div className="flex items-center justify-between p-4 bg-gradient-to-r from-pink-50 to-rose-50 rounded-xl border border-pink-100 hover:shadow-md transition-all duration-300">
                    <div className="flex items-center gap-3">
                      <div className="p-2 rounded-full bg-gradient-to-r from-pink-500 to-rose-500 text-white shadow-lg">
                        <CheckCircle className="w-4 h-4" />
                      </div>
                      <span className="font-medium text-gray-800">
                        פרופיל מאומת
                      </span>
                    </div>
                    <Badge className="bg-gradient-to-r from-pink-500 to-rose-500 text-white border-0 shadow-sm px-3 py-1 font-bold">
                      {stats.completion.percentages.isVerified}%
                    </Badge>
                  </div>

                  <div className="flex items-center justify-between p-4 bg-gradient-to-r from-rose-50 to-red-50 rounded-xl border border-rose-100 hover:shadow-md transition-all duration-300">
                    <div className="flex items-center gap-3">
                      <div className="p-2 rounded-full bg-gradient-to-r from-rose-500 to-red-500 text-white shadow-lg">
                        <Users className="w-4 h-4" />
                      </div>
                      <span className="font-medium text-gray-800">המלצות</span>
                    </div>
                    <Badge className="bg-gradient-to-r from-rose-500 to-red-500 text-white border-0 shadow-sm px-3 py-1 font-bold">
                      {stats.completion.percentages.hasReferences}%
                    </Badge>
                  </div>
                </div>
              </div>
            </EnhancedChartCard>

            {/* Performance Insights */}
            <EnhancedChartCard
              title="תובנות ביצועים"
              description="מדדים עסקיים מתקדמים"
              gradient="from-emerald-500 to-green-500"
              icon={<Award className="w-6 h-6" />}
            >
              <div className="space-y-6">
                <div className="grid grid-cols-2 gap-4">
                  <div className="text-center p-4 bg-gradient-to-r from-emerald-50 to-green-50 rounded-xl border border-emerald-100">
                    <Crown className="w-8 h-8 mx-auto mb-2 text-emerald-600" />
                    <div className="text-2xl font-bold text-emerald-800">
                      A+
                    </div>
                    <div className="text-sm text-emerald-600">דירוג איכות</div>
                  </div>

                  <div className="text-center p-4 bg-gradient-to-r from-green-50 to-emerald-50 rounded-xl border border-green-100">
                    <Zap className="w-8 h-8 mx-auto mb-2 text-green-600" />
                    <div className="text-2xl font-bold text-green-800">95%</div>
                    <div className="text-sm text-green-600">שביעות רצון</div>
                  </div>
                </div>

                <div className="p-4 bg-gradient-to-r from-blue-50 to-cyan-50 rounded-xl border border-blue-100">
                  <div className="flex items-center justify-between mb-3">
                    <span className="font-medium text-blue-800">
                      התפתחות החודש
                    </span>
                    <TrendingUp className="w-4 h-4 text-blue-600" />
                  </div>
                  <div className="space-y-2">
                    <div className="flex justify-between text-sm">
                      <span className="text-blue-700">מועמדים חדשים</span>
                      <span className="font-bold text-blue-800">+12%</span>
                    </div>
                    <div className="flex justify-between text-sm">
                      <span className="text-blue-700">פעילות</span>
                      <span className="font-bold text-blue-800">+8%</span>
                    </div>
                    <div className="flex justify-between text-sm">
                      <span className="text-blue-700">השלמות פרופיל</span>
                      <span className="font-bold text-blue-800">+5%</span>
                    </div>
                  </div>
                </div>
              </div>
            </EnhancedChartCard>
          </div>
        </TabsContent>
      </Tabs>
    </div>
  );
};

export default CandidatesStats;
--- End of Content for CandidatesStats.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\new\CandidatesManager\SplitView.tsx
--------------------------------------------------------------------------------
Content:
'use client';

import React, { useMemo, useEffect, useState } from 'react';
import {
  ResizableHandle,
  ResizablePanel,
  ResizablePanelGroup,
} from '@/components/ui/resizable';
import CandidatesList from './CandidatesList';
import { Badge } from '@/components/ui/badge';
import {
  Sparkles,
  XCircle,
  Users,
  User,
  Target,
  Crown,
  Zap,
  Search,
} from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Card, CardContent } from '@/components/ui/card';
import type {
  Candidate,
  CandidateAction,
  MobileView,
} from '../types/candidates';
import type { FilterState } from '../types/filters';
import SearchBar from '../Filters/SearchBar';
import { toast } from 'sonner';
import { cn } from '@/lib/utils';
import { Gender } from '@prisma/client';

// --- ייבוא המילונים ---
import type { MatchmakerPageDictionary } from '@/types/dictionaries/matchmaker';
import type { ProfilePageDictionary } from '@/types/dictionary';

interface AiMatch {
  userId: string;
  score: number;
}

interface SplitViewProps {
  maleCandidates: Candidate[];
  femaleCandidates: Candidate[];
  allCandidates: Candidate[];
  onCandidateAction: (type: CandidateAction, candidate: Candidate) => void;
  onCandidateClick: (candidate: Candidate) => void;
  viewMode: 'grid' | 'list';
  mobileView: MobileView;
  isLoading?: boolean;
  className?: string;

  aiTargetCandidate: Candidate | null;
  aiMatches: AiMatch[];
  isAiLoading: boolean;
  onSetAiTarget: (candidate: Candidate, e: React.MouseEvent) => void;
  onClearAiTarget: (e: React.MouseEvent) => void;
  setAiMatches: React.Dispatch<React.SetStateAction<AiMatch[]>>;
  setIsAiLoading: React.Dispatch<React.SetStateAction<boolean>>;
  comparisonSelection: Record<string, Candidate>;
  onToggleComparison: (candidate: Candidate, e: React.MouseEvent) => void;

  separateFiltering: boolean;
  maleFilters?: Partial<FilterState>;
  femaleFilters?: Partial<FilterState>;
  onMaleFiltersChange: (filters: Partial<FilterState>) => void;
  onFemaleFiltersChange: (filters: Partial<FilterState>) => void;
  onCopyFilters: (source: 'male' | 'female', target: 'male' | 'female') => void;
  maleSearchQuery?: string;
  femaleSearchQuery?: string;
  onMaleSearchChange?: (query: string) => void;
  onFemaleSearchChange?: (query: string) => void;
  
  // --- קבלת המילונים כ-props ---
  dict: MatchmakerPageDictionary['candidatesManager'];
  profileDict: ProfilePageDictionary;
}

// Enhanced Panel Header Component
const PanelHeaderComponent: React.FC<{
  gender: 'male' | 'female';
  count: number;
  aiTargetCandidate: Candidate | null;
  isSearchPanel: boolean;
  isTargetPanel: boolean;
  onClearAiTarget: (e: React.MouseEvent) => void;
  onFindAiMatches: (e: React.MouseEvent) => void;
  isAiLoading: boolean;
  isMobileView?: boolean;
  dict: MatchmakerPageDictionary['candidatesManager']['splitView']['panelHeaders'];
}> = ({
  gender,
  count,
  aiTargetCandidate,
  isSearchPanel,
  isTargetPanel,
  onClearAiTarget,
  onFindAiMatches,
  isAiLoading,
  isMobileView = false,
  dict
}) => {
  const genderConfig = {
    male: {
      title: dict.male.title,
      subtitle: dict.male.subtitle.replace('{{count}}', count.toString()),
      icon: Target,
      colors: { gradient: 'from-blue-500 to-cyan-500', bg: 'from-blue-50 to-cyan-50', text: 'text-blue-800', badge: 'bg-blue-500' },
    },
    female: {
      title: dict.female.title,
      subtitle: dict.female.subtitle.replace('{{count}}', count.toString()),
      icon: Crown,
      colors: { gradient: 'from-purple-500 to-pink-500', bg: 'from-purple-50 to-pink-50', text: 'text-purple-800', badge: 'bg-purple-500' },
    },
  };

  const config = genderConfig[gender];
  const IconComponent = config.icon;

  return (
    <div className={cn('flex justify-between items-center p-4 rounded-t-2xl', !isMobileView && `bg-gradient-to-r ${config.colors.bg} border-b border-gray-100/50`)}>
      <div className="flex items-center gap-3">
        <div className={cn('p-3 rounded-full shadow-lg text-white transition-transform hover:scale-110', `bg-gradient-to-r ${config.colors.gradient}`)}>
          <IconComponent className="w-6 h-6" />
        </div>
        <div>
          <h2 className={cn('text-xl font-bold', config.colors.text)}>{config.title}</h2>
          <p className="text-sm text-gray-600">{config.subtitle}</p>
        </div>
        <Badge className={cn('text-white border-0 shadow-lg px-3 py-1 font-bold', config.colors.badge)}>
          {count}
        </Badge>
      </div>
      <div className="flex items-center gap-2">
        {isTargetPanel && aiTargetCandidate && (
          <div className="flex items-center gap-2 bg-green-100 p-2 rounded-full shadow-lg animate-pulse">
            <div className="w-2 h-2 bg-green-500 rounded-full animate-ping"></div>
            <span className="text-sm font-medium text-green-800 px-2">{dict.targetLabel.replace("{{name}}", aiTargetCandidate.firstName)}</span>
            <Button size="icon" variant="ghost" className="h-6 w-6 text-green-700 hover:bg-green-200 rounded-full" onClick={onClearAiTarget}>
              <XCircle className="h-4 w-4" />
            </Button>
          </div>
        )}
        {isSearchPanel && (
          <Button size="sm" onClick={onFindAiMatches} disabled={isAiLoading} className={cn('shadow-lg font-bold transition-all duration-300 hover:scale-105', `bg-gradient-to-r ${config.colors.gradient} hover:opacity-90 text-white`)}>
            <Sparkles className={cn('ml-2 h-4 w-4', isAiLoading && 'animate-spin')} />
            {isAiLoading ? dict.searchingButton : dict.findMatchesButton}
            <Zap className="w-3 h-3 mr-1" />
          </Button>
        )}
      </div>
    </div>
  );
};

// Enhanced Loading Component
const LoadingComponent: React.FC<{ gender: 'male' | 'female' }> = ({ gender }) => {
    const config = gender === 'male'
      ? { gradient: 'from-blue-200 to-cyan-200', icon: Target, title: 'טוען מועמדים...', subtitle: 'אנא המתן בזמן שאנו מביאים את הנתונים' }
      : { gradient: 'from-purple-200 to-pink-200', icon: Crown, title: 'טוענת מועמדות...', subtitle: 'אנא המתיני בזמן שאנו מביאות את הנתונים' };
  
    const IconComponent = config.icon;
  
    return (
      <div className="flex flex-col items-center justify-center h-64 p-8">
        <div className={cn('p-6 rounded-full mb-4 animate-pulse', `bg-gradient-to-r ${config.gradient}`)}>
          <IconComponent className="w-12 h-12 text-white" />
        </div>
        <div className="text-center">
          <h3 className="text-lg font-bold text-gray-700 mb-2">{config.title}</h3>
          <p className="text-gray-500">{config.subtitle}</p>
        </div>
      </div>
    );
  };
  
// Enhanced Empty State Component
const EmptyStateComponent: React.FC<{
  gender: 'male' | 'female';
  searchQuery?: string;
  onClearSearch?: () => void;
  dict: MatchmakerPageDictionary['candidatesManager']['list']['emptyState'];
}> = ({ gender, searchQuery, onClearSearch, dict }) => {
  const config = gender === 'male'
    ? { gradient: 'from-blue-100 to-cyan-100', icon: Target }
    : { gradient: 'from-purple-100 to-pink-100', icon: Crown };

  const IconComponent = config.icon;

  return (
    <div className="flex flex-col items-center justify-center h-64 p-8">
      <div className={cn('w-24 h-24 rounded-full flex items-center justify-center mb-6 shadow-lg', `bg-gradient-to-br ${config.gradient}`)}>
        <IconComponent className="w-12 h-12 text-gray-400" />
      </div>
      <h3 className="text-xl font-bold text-gray-800 mb-2">{dict.title}</h3>
      <p className="text-gray-600 text-center mb-4 max-w-sm">
        {searchQuery ? `לא נמצאו תוצאות עבור "${searchQuery}"` : dict.description}
      </p>
      {searchQuery && onClearSearch && (
        <Button variant="outline" onClick={onClearSearch} className="border-2 border-gray-300 hover:border-gray-400">
          <Search className="w-4 h-4 ml-2" />
          נקה חיפוש
        </Button>
      )}
    </div>
  );
};


const SplitView: React.FC<SplitViewProps> = ({ dict, profileDict, ...props }) => {
  const {
    maleCandidates, femaleCandidates, allCandidates, onCandidateAction, onCandidateClick, viewMode, mobileView, isLoading = false, className, maleSearchQuery = '', femaleSearchQuery = '', onMaleSearchChange, onFemaleSearchChange, aiTargetCandidate, aiMatches, isAiLoading, onSetAiTarget, onClearAiTarget, setAiMatches, setIsAiLoading, comparisonSelection, onToggleComparison, separateFiltering,
  } = props;

  const [isMobile, setIsMobile] = useState(false);

  useEffect(() => {
    const checkScreenSize = () => setIsMobile(window.innerWidth < 768);
    checkScreenSize();
    window.addEventListener('resize', checkScreenSize);
    return () => window.removeEventListener('resize', checkScreenSize);
  }, []);

  const handleFindAiMatches = async (e: React.MouseEvent) => {
    e.stopPropagation();
    if (!aiTargetCandidate) return;
    setIsAiLoading(true);
    setAiMatches([]);
    const targetGender = aiTargetCandidate.profile.gender;
    const candidatePool = targetGender === Gender.MALE ? femaleCandidates : maleCandidates;
    const candidatePoolIds = candidatePool.map((c) => c.id);
    if (candidatePoolIds.length === 0) {
      toast.error('אין מועמדים במאגר לחיפוש התאמות.', { position: 'top-center' });
      setIsAiLoading(false);
      return;
    }
    try {
      const response = await fetch('/api/ai/find-matches', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ targetUserId: aiTargetCandidate.id, candidatePoolIds }) });
      const data = await response.json();
      if (!response.ok || !data.success) throw new Error(data.error || 'Failed to fetch AI matches');
      setAiMatches(data.matches);
      toast.success(`נמצאו ${data.matches.length} התאמות AI פוטנציאליות.`, { position: 'top-center', description: 'המועמדים המומלצים מסומנים ומויינו לראש הרשימה.' });
    } catch (error) {
      console.error('Error finding AI matches:', error);
      toast.error('שגיאה במציאת התאמות AI.', { description: error instanceof Error ? error.message : 'נסה שוב מאוחר יותר.' });
    } finally {
      setIsAiLoading(false);
    }
  };

  const maleCandidatesWithScores = useMemo(() => {
    if (aiMatches.length === 0) return maleCandidates;
    const scoreMap = new Map(aiMatches.map((m) => [m.userId, m.score]));
    return maleCandidates.map((c) => ({ ...c, aiScore: scoreMap.get(c.id) })).sort((a, b) => (b.aiScore ?? -1) - (a.aiScore ?? -1));
  }, [maleCandidates, aiMatches]);

  const femaleCandidatesWithScores = useMemo(() => {
    if (aiMatches.length === 0) return femaleCandidates;
    const scoreMap = new Map(aiMatches.map((m) => [m.userId, m.score]));
    return femaleCandidates.map((c) => ({ ...c, aiScore: scoreMap.get(c.id) })).sort((a, b) => (b.aiScore ?? -1) - (a.aiScore ?? -1));
  }, [femaleCandidates, aiMatches]);

  const renderPanelHeader = (gender: 'male' | 'female', isMobileView: boolean = false) => {
    const panelGenderEnum = gender === 'male' ? Gender.MALE : Gender.FEMALE;
    const isTargetPanel = aiTargetCandidate?.profile.gender === panelGenderEnum;
    const isSearchPanel = !!(aiTargetCandidate && aiTargetCandidate.profile.gender !== panelGenderEnum);
    const count = gender === 'male' ? maleCandidates.length : femaleCandidates.length;

    return (
      <PanelHeaderComponent
        gender={gender}
        count={count}
        aiTargetCandidate={aiTargetCandidate}
        isSearchPanel={isSearchPanel}
        isTargetPanel={isTargetPanel}
        onClearAiTarget={onClearAiTarget}
        onFindAiMatches={handleFindAiMatches}
        isAiLoading={isAiLoading}
        isMobileView={isMobileView}
        dict={dict.splitView.panelHeaders}
      />
    );
  };
  
  const renderCandidatesListForMobile = (candidates: (Candidate & { aiScore?: number })[], gender: 'male' | 'female', searchQuery: string, onSearchChange?: (query: string) => void) => {
    if (isLoading) { return <LoadingComponent gender={gender} />; }
    if (candidates.length === 0) { return <EmptyStateComponent gender={gender} searchQuery={searchQuery} onClearSearch={() => onSearchChange?.('')} dict={dict.list.emptyState} />; }
    return (
      <CandidatesList
        candidates={candidates}
        allCandidates={allCandidates}
        onCandidateClick={onCandidateClick}
        onCandidateAction={onCandidateAction}
        viewMode={viewMode}
        mobileView={mobileView}
        isLoading={isLoading}
        highlightTerm={searchQuery}
        aiTargetCandidate={aiTargetCandidate}
        onSetAiTarget={onSetAiTarget}
        comparisonSelection={comparisonSelection}
        onToggleComparison={onToggleComparison}
        dict={dict.list}
        profileDict={profileDict}
      />
    );
  };
  
  if (isMobile) {
    if (mobileView === 'split') {
      return (
        <div className="grid grid-cols-2 gap-3 h-full p-3">
          <Card className="flex flex-col h-full shadow-xl border-0 bg-gradient-to-b from-white to-blue-50/30 overflow-hidden rounded-2xl">
            <div className="p-3 text-center bg-gradient-to-r from-blue-500 to-cyan-500 text-white">
              <h2 className="text-sm font-bold flex items-center justify-center gap-1"><Target className="w-4 h-4" />{dict.splitView.mobile.splitLabels.male}<Badge variant="secondary" className="bg-white/20 text-white border-0 ml-1">{maleCandidates.length}</Badge></h2>
            </div>
            <div className="flex-grow min-h-0 overflow-y-auto p-2">{renderCandidatesListForMobile(maleCandidatesWithScores, 'male', maleSearchQuery, onMaleSearchChange)}</div>
          </Card>
          <Card className="flex flex-col h-full shadow-xl border-0 bg-gradient-to-b from-white to-purple-50/30 overflow-hidden rounded-2xl">
            <div className="p-3 text-center bg-gradient-to-r from-purple-500 to-pink-500 text-white">
              <h2 className="text-sm font-bold flex items-center justify-center gap-1"><Crown className="w-4 h-4" />{dict.splitView.mobile.splitLabels.female}<Badge variant="secondary" className="bg-white/20 text-white border-0 ml-1">{femaleCandidates.length}</Badge></h2>
            </div>
            <div className="flex-grow min-h-0 overflow-y-auto p-2">{renderCandidatesListForMobile(femaleCandidatesWithScores, 'female', femaleSearchQuery, onFemaleSearchChange)}</div>
          </Card>
        </div>
      );
    }

    return (
      <div className={cn('w-full h-full', className)}>
        <Tabs defaultValue="male" className="w-full h-full flex flex-col">
          <TabsList className="grid w-full grid-cols-2 flex-shrink-0 bg-gradient-to-r from-indigo-50 to-purple-50 p-1 rounded-2xl shadow-lg">
            <TabsTrigger value="male" className="flex items-center gap-2 rounded-xl data-[state=active]:bg-gradient-to-r data-[state=active]:from-blue-500 data-[state=active]:to-cyan-500 data-[state=active]:text-white data-[state=active]:shadow-lg"><Target className="h-4 w-4" />{dict.splitView.mobile.tabs.male}<Badge variant="secondary" className="bg-blue-100 text-blue-800 border-0">{maleCandidates.length}</Badge></TabsTrigger>
            <TabsTrigger value="female" className="flex items-center gap-2 rounded-xl data-[state=active]:bg-gradient-to-r data-[state=active]:from-purple-500 data-[state=active]:to-pink-500 data-[state=active]:text-white data-[state=active]:shadow-lg"><Crown className="h-4 w-4" />{dict.splitView.mobile.tabs.female}<Badge variant="secondary" className="bg-purple-100 text-purple-800 border-0">{femaleCandidates.length}</Badge></TabsTrigger>
          </TabsList>
          <TabsContent value="male" className="mt-4 flex-1 min-h-0">
            <Card className="p-4 flex flex-col h-full shadow-xl border-0 bg-gradient-to-b from-white to-blue-50/30 rounded-2xl">
              {renderPanelHeader('male', true)}
              {separateFiltering && onMaleSearchChange && (<div className="mb-4 w-full"><SearchBar value={maleSearchQuery} onChange={onMaleSearchChange} placeholder={dict.searchBar.malePlaceholder} genderTarget="male" separateMode={true} dict={dict.searchBar} /></div>)}
              <div className="flex-grow min-h-0 overflow-y-auto">{renderCandidatesListForMobile(maleCandidatesWithScores, 'male', maleSearchQuery, onMaleSearchChange)}</div>
            </Card>
          </TabsContent>
          <TabsContent value="female" className="mt-4 flex-1 min-h-0">
            <Card className="p-4 flex flex-col h-full shadow-xl border-0 bg-gradient-to-b from-white to-purple-50/30 rounded-2xl">
              {renderPanelHeader('female', true)}
              {separateFiltering && onFemaleSearchChange && (<div className="mb-4 w-full"><SearchBar value={femaleSearchQuery} onChange={onFemaleSearchChange} placeholder={dict.searchBar.femalePlaceholder} genderTarget="female" separateMode={true} dict={dict.searchBar} /></div>)}
              <div className="flex-grow min-h-0 overflow-y-auto">{renderCandidatesListForMobile(femaleCandidatesWithScores, 'female', femaleSearchQuery, onFemaleSearchChange)}</div>
            </Card>
          </TabsContent>
        </Tabs>
      </div>
    );
  }

  // --- Desktop View using Resizable Panels ---
  return (
    <div className={cn('h-full', className)}>
      <ResizablePanelGroup direction="horizontal" className="h-full rounded-2xl bg-white shadow-2xl border-0 overflow-hidden">
        <ResizablePanel defaultSize={50} minSize={30}>
          <div className="flex flex-col h-full bg-gradient-to-b from-white to-blue-50/20">
            {renderPanelHeader('male')}
            {separateFiltering && onMaleSearchChange && (<div className="p-4 bg-blue-50/30 w-full"><SearchBar value={maleSearchQuery} onChange={onMaleSearchChange} placeholder={dict.searchBar.malePlaceholder} genderTarget="male" separateMode={true} dict={dict.searchBar} /></div>)}
            <div className="flex-grow min-h-0 overflow-y-auto p-4">
              <CandidatesList
                candidates={maleCandidatesWithScores}
                allCandidates={allCandidates}
                onCandidateClick={onCandidateClick}
                onCandidateAction={onCandidateAction}
                viewMode={viewMode}
                mobileView={mobileView}
                isLoading={isLoading}
                highlightTerm={maleSearchQuery}
                aiTargetCandidate={aiTargetCandidate}
                onSetAiTarget={onSetAiTarget}
                comparisonSelection={comparisonSelection}
                onToggleComparison={onToggleComparison}
                quickViewSide="right"
                dict={dict.list}
                profileDict={profileDict}
              />
            </div>
          </div>
        </ResizablePanel>
        <ResizableHandle withHandle className="bg-gradient-to-b from-indigo-300 to-purple-300 hover:from-indigo-400 hover:to-purple-400 transition-colors w-2" />
        <ResizablePanel defaultSize={50} minSize={30}>
          <div className="flex flex-col h-full bg-gradient-to-b from-white to-purple-50/20">
            {renderPanelHeader('female')}
            {separateFiltering && onFemaleSearchChange && (<div className="p-4 bg-purple-50/30 w-full"><SearchBar value={femaleSearchQuery} onChange={onFemaleSearchChange} placeholder={dict.searchBar.femalePlaceholder} genderTarget="female" separateMode={true} dict={dict.searchBar} /></div>)}
            <div className="flex-grow min-h-0 overflow-y-auto p-4">
              <CandidatesList
                candidates={femaleCandidatesWithScores}
                allCandidates={allCandidates}
                onCandidateClick={onCandidateClick}
                onCandidateAction={onCandidateAction}
                viewMode={viewMode}
                mobileView={mobileView}
                isLoading={isLoading}
                highlightTerm={femaleSearchQuery}
                aiTargetCandidate={aiTargetCandidate}
                onSetAiTarget={onSetAiTarget}
                comparisonSelection={comparisonSelection}
                onToggleComparison={onToggleComparison}
                quickViewSide="left"
                dict={dict.list}
                profileDict={profileDict}
              />
            </div>
          </div>
        </ResizablePanel>
      </ResizablePanelGroup>
    </div>
  );
};

export default SplitView;
--- End of Content for SplitView.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\new\CandidatesManager\StatsCard.tsx
--------------------------------------------------------------------------------
Content:
"use client";

import React from "react";

import { Card } from "@/components/ui/card";
import { cn } from "@/lib/utils";

interface StatsCardProps {
  icon: React.ElementType;
  title: string;
  value: string | number;
  trend?: {
    value: number;
    label: string;
    isPositive?: boolean;
  };
  variant?: "default" | "success" | "warning" | "destructive";
  bgGradient?: string;
  iconColor?: string;
  className?: string;
}

const StatsCard: React.FC<StatsCardProps> = ({
  icon: Icon,
  title,
  value,
  trend,
  variant = "default",
  bgGradient,
  iconColor = "text-primary",
  className,
}) => {
  const getVariantStyles = () => {
    switch (variant) {
      case "success":
        return "border-emerald-200";
      case "warning":
        return "border-amber-200";
      case "destructive":
        return "border-red-200";
      default:
        return "border-gray-200";
    }
  };

  return (
    <Card
      className={cn(
        "hover:shadow-md transition-all duration-300 p-4 overflow-hidden",
        bgGradient ? `bg-gradient-to-br ${bgGradient}` : "bg-card",
        getVariantStyles(),
        className
      )}
    >
      <div className="flex items-start justify-between">
        <div className="mr-4 flex-shrink-0">
          <div className={`p-2.5 rounded-full bg-white/60 backdrop-blur-sm shadow-sm`}>
            <Icon className={`w-4 h-4 ${iconColor}`} />
          </div>
        </div>

        <div className="flex-1 text-right">
          <p className="text-xs text-muted-foreground mb-1">{title}</p>
          <h3 className="text-xl font-bold">{value}</h3>

          {trend && (
            <div className="flex items-center justify-end gap-1 mt-1">
              <span
                className={cn(
                  "text-sm font-medium flex items-center gap-0.5",
                  trend.isPositive ? "text-emerald-600" : "text-red-600"
                )}
              >
                {trend.isPositive ? "+" : "-"}{trend.value}%
                <span className={`${trend.isPositive ? "rotate-0" : "rotate-180"} transition-transform`}>
                  ↑
                </span>
              </span>
              <span className="text-[11px] text-muted-foreground">
                {trend.label}
              </span>
            </div>
          )}
        </div>
      </div>

      {/* Animated background pattern for more visual appeal */}
      <div className="absolute right-0 bottom-0 opacity-10 pointer-events-none">
        <svg width="80" height="80" viewBox="0 0 80 80" fill="none" xmlns="http://www.w3.org/2000/svg">
          <circle cx="60" cy="60" r="40" fill="currentColor" />
        </svg>
      </div>
    </Card>
  );
};

export default StatsCard;
--- End of Content for StatsCard.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\new\CandidatesManager\index.tsx
--------------------------------------------------------------------------------
Content:
// File: src/app/components/matchmaker/new/CandidatesManager/index.tsx

'use client';

// --- React & Next.js Imports ---
import React, { useState, useCallback, useEffect, useMemo } from 'react';
import { useSession } from 'next-auth/react';

// --- Third-party Libraries ---
import {
  UserPlus,
  Filter,
  LayoutGrid,
  List,
  ArrowUpDown,
  RotateCw,
  BarChart2,
  Bot,
  Loader2,
  Columns,
  View,
  Users,
  Split,
  Sparkles,
  Crown,
  Target,
  Zap,
  TrendingUp,
  TrendingDown,
  Star,
  Activity,
} from 'lucide-react';
import { toast } from 'sonner';

// --- UI Components ---
import { Button } from '@/components/ui/button';
import { Sheet, SheetContent, SheetTrigger } from '@/components/ui/sheet';
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuRadioGroup,
  DropdownMenuRadioItem,
} from '@/components/ui/dropdown-menu';
import { Badge } from '@/components/ui/badge';
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
  AlertDialogTrigger,
} from '@/components/ui/alert-dialog';

// --- Custom Hooks ---
import { useCandidates } from '../hooks/useCandidates';
import { useFilterLogic } from '../hooks/useFilterLogic';

// --- Internal Components ---
import SplitView from './SplitView';
import FilterPanel from '../Filters/FilterPanel';
import ActiveFilters from '../Filters/ActiveFilters';
import SearchBar from '../Filters/SearchBar';
import { LoadingContainer } from '../shared/LoadingStates';
import { AddManualCandidateDialog } from '../dialogs/AddManualCandidateDialog';
import { AiMatchAnalysisDialog } from '../dialogs/AiMatchAnalysisDialog';

// --- Types, Constants & Utils ---
import type {
  Candidate,
  ViewMode,
  CandidatesFilter,
  CandidateAction,
  MobileView,
} from '../types/candidates';
import { SORT_OPTIONS, VIEW_OPTIONS } from '../constants/filterOptions';
import { cn } from '@/lib/utils';
import type { MatchmakerPageDictionary } from '@/types/dictionaries/matchmaker';
import type {
  SuggestionsDictionary,
  ProfilePageDictionary,
} from '@/types/dictionary';

// --- Local Types ---
interface AiMatch {
  userId: string;
  score: number;
}

// ============================================================================
// Minimal Compact Header Component
// ============================================================================
const MinimalHeader: React.FC<{
  stats: {
    total: number;
    male: number;
    female: number;
    verified: number;
    activeToday: number;
    profilesComplete: number;
  };
  onAddCandidate: () => void;
  onRefresh: () => void;
  isRefreshing: boolean;
  onBulkUpdate?: () => void;
  isBulkUpdating?: boolean;
  isAdmin?: boolean;
  isCompact: boolean;
  onToggleCompact: () => void;
  dict: MatchmakerPageDictionary['candidatesManager']['header'];
}> = ({
  stats,
  onAddCandidate,
  onRefresh,
  isRefreshing,
  onBulkUpdate,
  isBulkUpdating,
  isAdmin,
  isCompact,
  onToggleCompact,
  dict,
}) => {
  return (
    <header
      className={cn(
        'sticky top-0 z-40 bg-white/95 backdrop-blur-sm border-b border-gray-200 shadow-sm transition-all duration-300',
        isCompact ? 'h-16' : 'h-32'
      )}
    >
      <div className="container mx-auto px-6 h-full">
        {isCompact ? (
          // --- COMPACT MODE ---
          <div className="flex items-center justify-between h-full">
            <div className="flex items-center gap-4">
              <div className="flex items-center gap-2">
                <div className="p-1.5 rounded-lg bg-gradient-to-r from-indigo-500 to-purple-500 text-white">
                  <Users className="w-4 h-4" />
                </div>
                <h1 className="text-lg font-bold text-gray-800">
                  {dict.title}
                </h1>
              </div>
              <div className="hidden md:flex items-center gap-2">
                <Badge
                  variant="outline"
                  className="bg-blue-50 text-blue-700 border-blue-200"
                >
                  {stats.total} {dict.totalLabel}
                </Badge>
                <Badge
                  variant="outline"
                  className="bg-emerald-50 text-emerald-700 border-emerald-200"
                >
                  {stats.verified} {dict.verifiedLabel}
                </Badge>
                <Badge
                  variant="outline"
                  className="bg-orange-50 text-orange-700 border-orange-200"
                >
                  {stats.profilesComplete}
                  {dict.profilesCompleteLabel}
                </Badge>
              </div>
            </div>
            <div className="flex items-center gap-2">
              <Button
                onClick={onAddCandidate}
                size="sm"
                className="bg-gradient-to-r from-indigo-600 to-purple-600 hover:from-indigo-700 hover:to-purple-700 text-white shadow-md"
              >
                <UserPlus className="w-4 h-4 ml-1" />
                {dict.addButton}
              </Button>
              <Button
                onClick={onRefresh}
                variant="outline"
                size="sm"
                disabled={isRefreshing}
                className="border-gray-300 hover:bg-gray-50"
              >
                <RotateCw
                  className={cn('w-4 h-4', isRefreshing && 'animate-spin')}
                />
              </Button>
              {isAdmin && onBulkUpdate && (
                <Button
                  onClick={onBulkUpdate}
                  variant="secondary"
                  size="sm"
                  disabled={isBulkUpdating}
                  className="bg-amber-500 hover:bg-amber-600 text-white"
                >
                  {isBulkUpdating ? (
                    <Loader2 className="w-4 h-4 animate-spin" />
                  ) : (
                    <Bot className="w-4 h-4" />
                  )}
                </Button>
              )}
              <Button
                onClick={onToggleCompact}
                variant="ghost"
                size="sm"
                className="text-gray-500 hover:text-gray-700"
                title={dict.expandTooltip}
              >
                <TrendingUp className="w-4 h-4" />
              </Button>
            </div>
          </div>
        ) : (
          // --- EXPANDED MODE ---
          <div className="flex flex-col justify-center h-full py-3">
            <div className="flex items-center justify-between mb-3">
              <div className="flex items-center gap-3">
                <div className="p-2 rounded-xl bg-gradient-to-r from-indigo-500 to-purple-500 text-white shadow-lg">
                  <Users className="w-5 h-5" />
                </div>
                <div>
                  <h1 className="text-xl font-bold bg-gradient-to-r from-indigo-600 to-purple-600 bg-clip-text text-transparent">
                    {dict.advancedTitle}
                  </h1>
                  <p className="text-sm text-gray-600">
                    {dict.advancedSubtitle}
                  </p>
                </div>
              </div>
              <div className="flex items-center gap-2">
                <Button
                  onClick={onAddCandidate}
                  size="sm"
                  className="bg-gradient-to-r from-indigo-600 to-purple-600 hover:from-indigo-700 hover:to-purple-700 text-white shadow-lg"
                >
                  <UserPlus className="w-4 h-4 ml-2" />
                  {dict.addCandidateButton}
                  <Sparkles className="w-3 h-3 mr-1" />
                </Button>
                <Button
                  onClick={onRefresh}
                  variant="outline"
                  size="sm"
                  disabled={isRefreshing}
                  className="border-indigo-300 text-indigo-600 hover:bg-indigo-50"
                >
                  <RotateCw
                    className={cn('w-4 h-4', isRefreshing && 'animate-spin')}
                  />
                </Button>
                {isAdmin && onBulkUpdate && (
                  <AlertDialog>
                    <AlertDialogTrigger asChild>
                      <Button
                        variant="secondary"
                        size="sm"
                        disabled={isBulkUpdating}
                        className="bg-gradient-to-r from-amber-500 to-orange-500 hover:from-amber-600 hover:to-orange-600 text-white"
                      >
                        {isBulkUpdating ? (
                          <Loader2 className="w-4 h-4 animate-spin" />
                        ) : (
                          <Bot className="w-4 h-4" />
                        )}
                      </Button>
                    </AlertDialogTrigger>
                    <AlertDialogContent dir="rtl">
                      <AlertDialogHeader>
                        <AlertDialogTitle>
                          {dict.bulkUpdateDialog.title}
                        </AlertDialogTitle>
                        <AlertDialogDescription>
                          {dict.bulkUpdateDialog.description}
                        </AlertDialogDescription>
                      </AlertDialogHeader>
                      <AlertDialogFooter>
                        <AlertDialogCancel>
                          {dict.bulkUpdateDialog.cancel}
                        </AlertDialogCancel>
                        <AlertDialogAction onClick={onBulkUpdate}>
                          {dict.bulkUpdateDialog.confirm}
                        </AlertDialogAction>
                      </AlertDialogFooter>
                    </AlertDialogContent>
                  </AlertDialog>
                )}
                <Button
                  onClick={onToggleCompact}
                  variant="ghost"
                  size="sm"
                  className="text-gray-500 hover:text-gray-700"
                  title={dict.collapseTooltip}
                >
                  <TrendingDown className="w-4 h-4" />
                </Button>
              </div>
            </div>
            <div className="grid grid-cols-6 gap-3">
              <div className="text-center bg-gradient-to-br from-blue-50 to-cyan-50 rounded-lg p-2 shadow-sm border border-blue-100">
                <div className="text-lg font-bold text-blue-700">
                  {stats.total}
                </div>
                <div className="text-xs text-blue-600">{dict.stats.total}</div>
              </div>
              <div className="text-center bg-gradient-to-br from-indigo-50 to-blue-50 rounded-lg p-2 shadow-sm border border-indigo-100">
                <div className="text-lg font-bold text-indigo-700">
                  {stats.male}
                </div>
                <div className="text-xs text-indigo-600">{dict.stats.male}</div>
              </div>
              <div className="text-center bg-gradient-to-br from-purple-50 to-pink-50 rounded-lg p-2 shadow-sm border border-purple-100">
                <div className="text-lg font-bold text-purple-700">
                  {stats.female}
                </div>
                <div className="text-xs text-purple-600">
                  {dict.stats.female}
                </div>
              </div>
              <div className="text-center bg-gradient-to-br from-emerald-50 to-green-50 rounded-lg p-2 shadow-sm border border-emerald-100">
                <div className="text-lg font-bold text-emerald-700">
                  {stats.verified}
                </div>
                <div className="text-xs text-emerald-600">
                  {dict.stats.verified}
                </div>
              </div>
              <div className="text-center bg-gradient-to-br from-orange-50 to-amber-50 rounded-lg p-2 shadow-sm border border-orange-100">
                <div className="text-lg font-bold text-orange-700">
                  {stats.activeToday}
                </div>
                <div className="text-xs text-orange-600">
                  {dict.stats.active}
                </div>
              </div>
              <div className="text-center bg-gradient-to-br from-teal-50 to-cyan-50 rounded-lg p-2 shadow-sm border border-teal-100">
                <div className="text-lg font-bold text-teal-700">
                  {stats.profilesComplete}%
                </div>
                <div className="text-xs text-teal-600">
                  {dict.stats.complete}
                </div>
              </div>
            </div>
          </div>
        )}
      </div>
    </header>
  );
};

// ============================================================================
// Main Candidates Manager Component
// ============================================================================
interface CandidatesManagerProps {
  matchmakerDict: MatchmakerPageDictionary;
  suggestionsDict: SuggestionsDictionary;
  profileDict: ProfilePageDictionary;
}

const CandidatesManager: React.FC<CandidatesManagerProps> = ({
  matchmakerDict,
  suggestionsDict,
  profileDict,
}) => {
  // --- State Management ---
  const [viewMode, setViewMode] = useState<ViewMode>('grid');
  const [mobileView, setMobileView] = useState<MobileView>('split');
  const [isMobile, setIsMobile] = useState(false);
  const [showFiltersPanel, setShowFiltersPanel] = useState(false);
  const [showFiltersMobile, setShowFiltersMobile] = useState(false);
  const [showManualAddDialog, setShowManualAddDialog] = useState(false);
  const [isHeaderCompact, setIsHeaderCompact] = useState(true);

  // --- AI State ---
  const [aiTargetCandidate, setAiTargetCandidate] = useState<Candidate | null>(
    null
  );
  const [comparisonSelection, setComparisonSelection] = useState<
    Record<string, Candidate>
  >({});
  const [aiMatches, setAiMatches] = useState<AiMatch[]>([]);
  const [isAiLoading, setIsAiLoading] = useState(false);
  const [isAnalysisDialogOpen, setIsAnalysisDialogOpen] = useState(false);
  const [isBulkUpdating, setIsBulkUpdating] = useState(false);

  // --- Session & Permissions ---
  const { data: session } = useSession();
  const isAdmin = session?.user?.role === 'ADMIN';

  // --- Custom Hooks ---
  const {
    loading,
    candidates,
    maleCandidates,
    femaleCandidates,
    setSorting,
    setFilters: setCandidatesFilters,
    refresh,
  } = useCandidates();
  const {
    filters,
    setFilters,
    savedFilters,
    recentSearches,
    popularFilters,
    activeFilters,
    saveFilter,
    resetFilters,
    clearRecentSearches,
    toggleSeparateFiltering,
    updateMaleFilters,
    updateFemaleFilters,
    copyFilters,
    updateMaleSearchQuery,
    updateFemaleSearchQuery,
    removeFilter,
  } = useFilterLogic({ onFilterChange: setCandidatesFilters });

  // --- Derived State ---
  const activeFilterCount = useMemo(
    () => activeFilters.length,
    [activeFilters]
  );
  const heroStats = useMemo(() => {
    const total = candidates.length;
    const male = candidates.filter((c) => c.profile.gender === 'MALE').length;
    const female = candidates.filter(
      (c) => c.profile.gender === 'FEMALE'
    ).length;
    const verified = candidates.filter((c) => c.isVerified).length;
    const activeToday = candidates.filter((c) => {
      const lastActive = new Date(c.createdAt);
      const today = new Date();
      return (
        (today.getTime() - lastActive.getTime()) / (1000 * 60 * 60 * 24) <= 7
      );
    }).length;
    const profilesComplete =
      total > 0
        ? Math.round(
            (candidates.filter((c) => c.isProfileComplete).length / total) * 100
          )
        : 0;
    return { total, male, female, verified, activeToday, profilesComplete };
  }, [candidates]);

  // --- Effects ---
  useEffect(() => {
    const checkScreen = () => {
      setShowFiltersPanel(window.innerWidth >= 1024);
      setIsMobile(window.innerWidth < 768);
    };
    checkScreen();
    window.addEventListener('resize', checkScreen);
    return () => window.removeEventListener('resize', checkScreen);
  }, []);

  // --- Event Handlers ---
  const handleCandidateAdded = useCallback(() => {
    refresh();
    toast.success('מועמד חדש נוסף בהצלחה!'); // This should also be in the dictionary, but leaving for simplicity
  }, [refresh]);

  const handleSearch = useCallback(
    (value: string) => {
      setFilters({ searchQuery: value });
    },
    [setFilters]
  );
  const handleRemoveFilter = useCallback(
    (key: keyof CandidatesFilter, value?: string) => {
      removeFilter(key, value);
    },
    [removeFilter]
  );
  const handleCandidateAction = useCallback(
    async (type: CandidateAction, candidate: Candidate) => {
      console.log(
        `Action '${type}' triggered for candidate: ${candidate.firstName}`
      );
    },
    []
  );

  const handleFilterSave = useCallback(
    async (name: string) => {
      try {
        await saveFilter(name, filters);
        toast.success('הפילטר נשמר בהצלחה'); // Translate
      } catch {
        toast.error('שגיאה בשמירת הפילטר'); // Translate
      }
    },
    [filters, saveFilter]
  );

  const handleSetAiTarget = useCallback(
    (candidate: Candidate, e: React.MouseEvent) => {
      e.stopPropagation();
      if (aiTargetCandidate?.id === candidate.id) {
        handleClearAiTarget(e);
        return;
      }
      setAiTargetCandidate(candidate);
      setAiMatches([]);
      setComparisonSelection({});
      toast.info(`מועמד מטרה נבחר: ${candidate.firstName}.`, {
        position: 'bottom-center',
      }); // Translate
    },
    [aiTargetCandidate]
  );

  const handleClearAiTarget = (e: React.MouseEvent) => {
    e.stopPropagation();
    setAiTargetCandidate(null);
    setAiMatches([]);
    setComparisonSelection({});
    toast.info('בחירת מועמד מטרה בוטלה.', { position: 'bottom-center' }); // Translate
  };

  const handleToggleComparison = useCallback(
    (candidate: Candidate, e: React.MouseEvent) => {
      e.stopPropagation();
      setComparisonSelection((prev) => {
        const newSelection = { ...prev };
        if (newSelection[candidate.id]) delete newSelection[candidate.id];
        else newSelection[candidate.id] = candidate;
        return newSelection;
      });
    },
    []
  );

  const handleUpdateAllProfiles = async () => {
    setIsBulkUpdating(true);
    toast.info('מתחיל תהליך עדכון פרופילי AI...'); // Translate
    try {
      const response = await fetch('/api/ai/update-all-profiles', {
        method: 'POST',
      });
      const data = await response.json();
      if (!response.ok)
        throw new Error(data.error || 'שגיאה בהפעלת העדכון הכללי.'); // Translate
      toast.success('העדכון הכללי הופעל בהצלחה!'); // Translate
    } catch (error) {
      console.error('Failed to initiate bulk AI profile update:', error);
      toast.error('שגיאה בהפעלת העדכון', {
        description:
          error instanceof Error ? error.message : 'אנא נסה שוב מאוחר יותר.',
      }); // Translate
    } finally {
      setIsBulkUpdating(false);
    }
  };

  // --- Render ---
  return (
    <div className="min-h-screen flex flex-col bg-gradient-to-br from-slate-50 via-indigo-50/10 to-purple-50/5">
      <MinimalHeader
        stats={heroStats}
        onAddCandidate={() => setShowManualAddDialog(true)}
        onRefresh={refresh}
        isRefreshing={loading}
        onBulkUpdate={handleUpdateAllProfiles}
        isBulkUpdating={isBulkUpdating}
        isAdmin={isAdmin}
        isCompact={isHeaderCompact}
        onToggleCompact={() => setIsHeaderCompact(!isHeaderCompact)}
        dict={matchmakerDict.candidatesManager.header}
      />

      {isHeaderCompact && (
        <div className="flex-shrink-0 bg-white/80 backdrop-blur-sm border-b border-gray-100 py-2 px-6">
          <div className="container mx-auto px-6">
            <div className="flex justify-between items-center">
              {!filters.separateFiltering && (
                <div className="flex-1 max-w-md">
                  <SearchBar
                    value={filters.searchQuery || ''}
                    onChange={handleSearch}
                    placeholder={
                      matchmakerDict.candidatesManager.searchBar
                        .generalPlaceholder
                    }
                    recentSearches={recentSearches}
                    onClearRecentSearches={clearRecentSearches}
                    dict={matchmakerDict.candidatesManager.searchBar}
                  />
                </div>
              )}

              <div className="flex items-center gap-2">
                <DropdownMenu>
                  <DropdownMenuTrigger asChild>
                    <Button
                      variant="outline"
                      size="sm"
                      className="bg-white/90 shadow-sm border border-gray-200"
                    >
                      <ArrowUpDown className="w-4 h-4 ml-1" />
                      {matchmakerDict.candidatesManager.controls.sort}
                    </Button>
                  </DropdownMenuTrigger>
                  <DropdownMenuContent align="end">
                    <DropdownMenuLabel>
                      {matchmakerDict.candidatesManager.controls.sortBy}
                    </DropdownMenuLabel>
                    <DropdownMenuSeparator />
                    {SORT_OPTIONS.map((option) => (
                      <DropdownMenuItem
                        key={option.value}
                        onClick={() =>
                          setSorting(
                            option.value,
                            option.defaultOrder as 'asc' | 'desc'
                          )
                        }
                      >
                        {
                          matchmakerDict.candidatesManager.sortOptions[
                            option.value as keyof typeof matchmakerDict.candidatesManager.sortOptions
                          ]
                        }
                      </DropdownMenuItem>
                    ))}
                  </DropdownMenuContent>
                </DropdownMenu>

                <div className="hidden lg:flex">
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={() => setShowFiltersPanel(!showFiltersPanel)}
                    className="bg-white/90 shadow-sm border border-gray-200"
                  >
                    <Filter className="w-4 h-4 ml-1" />
                    {showFiltersPanel
                      ? matchmakerDict.candidatesManager.controls.hideFilters
                      : matchmakerDict.candidatesManager.controls.filters}
                  </Button>
                </div>

                <Sheet
                  open={showFiltersMobile}
                  onOpenChange={setShowFiltersMobile}
                >
                  <SheetTrigger asChild>
                    <Button
                      variant="outline"
                      size="sm"
                      className="lg:hidden relative bg-white/90 shadow-sm border border-gray-200"
                    >
                      <Filter className="w-4 h-4 ml-1" />
                      {matchmakerDict.candidatesManager.controls.filters}
                      {activeFilterCount > 0 && (
                        <Badge className="absolute -top-1 -right-1 h-4 w-4 p-0 flex items-center justify-center bg-indigo-500 border-0 text-xs">
                          {activeFilterCount}
                        </Badge>
                      )}
                    </Button>
                  </SheetTrigger>
                  <SheetContent>
                    <FilterPanel
                      filters={filters}
                      onFiltersChange={setFilters}
                      onSavePreset={handleFilterSave}
                      onReset={resetFilters}
                      savedFilters={savedFilters.map((f) => ({
                        id: f.id,
                        name: f.name,
                        isDefault: f.isDefault,
                      }))}
                      popularFilters={popularFilters}
                      separateFiltering={filters.separateFiltering}
                      onToggleSeparateFiltering={toggleSeparateFiltering}
                      onMaleFiltersChange={updateMaleFilters}
                      onFemaleFiltersChange={updateFemaleFilters}
                      onCopyFilters={copyFilters}
                      dict={matchmakerDict.candidatesManager.filterPanel}
                    />
                  </SheetContent>
                </Sheet>

                <div className="flex gap-1 bg-white/90 p-1 rounded-lg shadow-sm border border-gray-200">
                  {isMobile ? (
                    <DropdownMenu>
                      <DropdownMenuTrigger asChild>
                        <Button
                          variant="outline"
                          size="sm"
                          className="w-24 justify-between px-2 border-0"
                        >
                          {mobileView === 'split' && (
                            <Users className="w-4 h-4" />
                          )}
                          {mobileView === 'single' && (
                            <View className="w-4 h-4" />
                          )}
                          {mobileView === 'double' && (
                            <Columns className="w-4 h-4" />
                          )}
                          <ArrowUpDown className="w-3 h-3 opacity-50 ml-1" />
                        </Button>
                      </DropdownMenuTrigger>
                      <DropdownMenuContent align="end">
                        <DropdownMenuRadioGroup
                          value={mobileView}
                          onValueChange={(value) =>
                            setMobileView(value as MobileView)
                          }
                        >
                          <DropdownMenuRadioItem value="split">
                            <Users className="w-4 h-4 mr-2" />
                            {
                              matchmakerDict.candidatesManager.controls.mobile
                                .split
                            }
                          </DropdownMenuRadioItem>
                          <DropdownMenuRadioItem value="single">
                            <View className="w-4 h-4 mr-2" />
                            {
                              matchmakerDict.candidatesManager.controls.mobile
                                .singleCol
                            }
                          </DropdownMenuRadioItem>
                          <DropdownMenuRadioItem value="double">
                            <Columns className="w-4 h-4 mr-2" />
                            {
                              matchmakerDict.candidatesManager.controls.mobile
                                .doubleCol
                            }
                          </DropdownMenuRadioItem>
                        </DropdownMenuRadioGroup>
                      </DropdownMenuContent>
                    </DropdownMenu>
                  ) : (
                    VIEW_OPTIONS.map((option) => (
                      <Button
                        key={option.value}
                        variant={
                          viewMode === option.value ? 'default' : 'ghost'
                        }
                        size="icon"
                        onClick={() => setViewMode(option.value as ViewMode)}
                        className={cn(
                          'h-8 w-8',
                          viewMode === option.value &&
                            'bg-indigo-500 text-white'
                        )}
                      >
                        {option.value === 'grid' ? (
                          <LayoutGrid className="w-4 h-4" />
                        ) : (
                          <List className="w-4 h-4" />
                        )}
                      </Button>
                    ))
                  )}
                </div>
              </div>
            </div>
            <div className="mt-2">
              <ActiveFilters
                filters={filters}
                onRemoveFilter={handleRemoveFilter}
                onResetAll={resetFilters}
                dict={matchmakerDict.candidatesManager.activeFilters}
              />
            </div>
          </div>
        </div>
      )}

      <main className="flex-1 min-h-0 container mx-auto px-6 pb-4 pt-4">
        <div className="flex gap-4 h-full">
          {showFiltersPanel && (
            <aside className="hidden lg:block w-72 flex-shrink-0">
              <div className="bg-white/90 backdrop-blur-sm rounded-xl shadow-lg border-0 h-full flex flex-col">
                <FilterPanel
                  filters={filters}
                  onFiltersChange={setFilters}
                  onSavePreset={handleFilterSave}
                  onReset={resetFilters}
                  savedFilters={savedFilters.map((f) => ({
                    id: f.id,
                    name: f.name,
                    isDefault: f.isDefault,
                  }))}
                  popularFilters={popularFilters}
                  separateFiltering={filters.separateFiltering}
                  onToggleSeparateFiltering={toggleSeparateFiltering}
                  onMaleFiltersChange={updateMaleFilters}
                  onFemaleFiltersChange={updateFemaleFilters}
                  onCopyFilters={copyFilters}
                  className="flex-1 overflow-y-auto"
                  dict={matchmakerDict.candidatesManager.filterPanel}
                />
              </div>
            </aside>
          )}

          <div className="flex-1 min-w-0 h-full">
            {loading ? (
              <LoadingContainer>
                <div className="h-full bg-gradient-to-br from-gray-100 to-gray-200 rounded-xl animate-pulse shadow-lg"></div>
              </LoadingContainer>
            ) : (
              <div className="bg-white/90 backdrop-blur-sm rounded-xl shadow-lg border-0 overflow-hidden h-full">
                <SplitView
                  maleCandidates={maleCandidates}
                  femaleCandidates={femaleCandidates}
                  allCandidates={candidates}
                  onCandidateAction={handleCandidateAction}
                  onCandidateClick={() => {}}
                  viewMode={viewMode}
                  mobileView={mobileView}
                  isLoading={loading || isAiLoading}
                  className="flex-1 overflow-hidden"
                  aiTargetCandidate={aiTargetCandidate}
                  aiMatches={aiMatches}
                  isAiLoading={isAiLoading}
                  onSetAiTarget={handleSetAiTarget}
                  onClearAiTarget={handleClearAiTarget}
                  setAiMatches={setAiMatches}
                  setIsAiLoading={setIsAiLoading}
                  comparisonSelection={comparisonSelection}
                  onToggleComparison={handleToggleComparison}
                  separateFiltering={filters.separateFiltering ?? false}
                  maleFilters={filters.maleFilters}
                  femaleFilters={filters.femaleFilters}
                  onMaleFiltersChange={updateMaleFilters}
                  onFemaleFiltersChange={updateFemaleFilters}
                  onCopyFilters={copyFilters}
                  maleSearchQuery={filters.maleSearchQuery}
                  femaleSearchQuery={filters.femaleSearchQuery}
                  onMaleSearchChange={updateMaleSearchQuery}
                  onFemaleSearchChange={updateFemaleSearchQuery}
                  dict={matchmakerDict.candidatesManager}
                  profileDict={profileDict}
                />
              </div>
            )}
          </div>
        </div>
      </main>

      {/* --- Dialogs --- */}
      <AddManualCandidateDialog
        isOpen={showManualAddDialog}
        onClose={() => setShowManualAddDialog(false)}
        onCandidateAdded={handleCandidateAdded}
      />
      <AiMatchAnalysisDialog
        isOpen={isAnalysisDialogOpen}
        onClose={() => setIsAnalysisDialogOpen(false)}
        targetCandidate={aiTargetCandidate}
        comparisonCandidates={Object.values(comparisonSelection)}
        dict={suggestionsDict.aiAnalysis}
      />
    </div>
  );
};

export default CandidatesManager;
--- End of Content for index.tsx ---

================================================================================
Directory: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\new\Filters
================================================================================

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\new\Filters\ActiveFilters.tsx
--------------------------------------------------------------------------------
Content:
'use client';

import React from 'react';
import { X, RefreshCw, Sparkles, Filter, Star, Zap, Crown } from 'lucide-react';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import type { CandidatesFilter } from '../types/candidates';
import { motion, AnimatePresence } from 'framer-motion';
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from '@/components/ui/tooltip';
import { cn } from '@/lib/utils';

interface ActiveFiltersProps {
  filters: CandidatesFilter;
  onRemoveFilter: (key: keyof CandidatesFilter, value?: string) => void;
  onResetAll: () => void;
  onSuggestFilter?: () => void;
  className?: string;
}

interface ActiveFilter {
  key: keyof CandidatesFilter;
  label: string;
  value?: string;
  color?: string;
  icon?: React.ReactNode;
  priority?: 'high' | 'medium' | 'low';
}

const ActiveFilters: React.FC<ActiveFiltersProps> = ({
  filters,
  onRemoveFilter,
  onResetAll,
  onSuggestFilter,
  className,
}) => {
  const getActiveFilters = (): ActiveFilter[] => {
    const activeFilters: ActiveFilter[] = [];

    // חיפוש כללי (מופיע רק אם אין סינון נפרד)
    if (!filters.separateFiltering && filters.searchQuery) {
      activeFilters.push({
        key: 'searchQuery',
        label: `חיפוש: ${filters.searchQuery}`,
        color: 'primary',
        icon: <Sparkles className="w-3 h-3" />,
        priority: 'high',
      });
    }

    // חיפוש נפרד לגברים (מופיע רק במצב סינון נפרד)
    if (filters.separateFiltering && filters.maleSearchQuery) {
      activeFilters.push({
        key: 'maleSearchQuery',
        label: `חיפוש מועמדים: ${filters.maleSearchQuery}`,
        color: 'male',
        icon: <Star className="w-3 h-3" />,
        priority: 'high',
      });
    }

    // חיפוש נפרד לנשים (מופיע רק במצב סינון נפרד)
    if (filters.separateFiltering && filters.femaleSearchQuery) {
      activeFilters.push({
        key: 'femaleSearchQuery',
        label: `חיפוש מועמדות: ${filters.femaleSearchQuery}`,
        color: 'female',
        icon: <Crown className="w-3 h-3" />,
        priority: 'high',
      });
    }

    // מצב סינון נפרד
    if (filters.separateFiltering) {
      activeFilters.push({
        key: 'separateFiltering',
        label: `סינון וחיפוש נפרד`,
        color: 'special',
        icon: <Zap className="w-3 h-3" />,
        priority: 'high',
      });
    }

    // Gender
    if (filters.gender) {
      activeFilters.push({
        key: 'gender',
        label: `מגדר: ${filters.gender === 'MALE' ? 'גברים' : 'נשים'}`,
        color: filters.gender === 'MALE' ? 'male' : 'female',
        priority: 'high',
      });
    }

    // Age Range
    if (filters.ageRange) {
      const isDefaultMin = filters.ageRange.min === 18;
      const isDefaultMax = filters.ageRange.max === 99;

      if (!isDefaultMin || !isDefaultMax) {
        let label = `גיל: `;

        if (!isDefaultMin && !isDefaultMax) {
          label += `${filters.ageRange.min}-${filters.ageRange.max}`;
        } else if (!isDefaultMin) {
          label += `מעל ${filters.ageRange.min}`;
        } else if (!isDefaultMax) {
          label += `עד ${filters.ageRange.max}`;
        }

        activeFilters.push({
          key: 'ageRange',
          label,
          color: 'primary',
          priority: 'high',
        });
      }
    }

    // Height Range
    if (filters.heightRange) {
      const isDefaultMin = filters.heightRange.min === 140;
      const isDefaultMax = filters.heightRange.max === 210;

      if (!isDefaultMin || !isDefaultMax) {
        let label = `גובה: `;

        if (!isDefaultMin && !isDefaultMax) {
          label += `${filters.heightRange.min}-${filters.heightRange.max} ס"מ`;
        } else if (!isDefaultMin) {
          label += `מעל ${filters.heightRange.min} ס"מ`;
        } else if (!isDefaultMax) {
          label += `עד ${filters.heightRange.max} ס"מ`;
        }

        activeFilters.push({
          key: 'heightRange',
          label,
          color: 'secondary',
          priority: 'medium',
        });
      }
    }

    // Religious Level
    if (filters.religiousLevel) {
      activeFilters.push({
        key: 'religiousLevel',
        label: `רמת דתיות: ${filters.religiousLevel}`,
        color: 'warning',
        priority: 'medium',
      });
    }

    // Education Level
    if (filters.educationLevel) {
      activeFilters.push({
        key: 'educationLevel',
        label: `השכלה: ${filters.educationLevel}`,
        color: 'secondary',
        priority: 'medium',
      });
    }

    // Cities
    filters.cities?.forEach((city) => {
      activeFilters.push({
        key: 'cities',
        value: city,
        label: `עיר: ${city}`,
        color: 'success',
        priority: 'medium',
      });
    });

    // Occupations
    filters.occupations?.forEach((occupation) => {
      activeFilters.push({
        key: 'occupations',
        value: occupation,
        label: `תחום עיסוק: ${occupation}`,
        color: 'primary',
        priority: 'medium',
      });
    });

    // Availability Status
    if (filters.availabilityStatus) {
      const statusLabel =
        filters.availabilityStatus === 'AVAILABLE'
          ? 'פנוי/ה'
          : filters.availabilityStatus === 'DATING'
            ? 'בתהליך הכרות'
            : filters.availabilityStatus === 'UNAVAILABLE'
              ? 'לא פנוי/ה'
              : filters.availabilityStatus;

      activeFilters.push({
        key: 'availabilityStatus',
        label: `סטטוס: ${statusLabel}`,
        color:
          filters.availabilityStatus === 'AVAILABLE' ? 'success' : 'warning',
        priority: 'high',
      });
    }

    // Marital Status
    if (filters.maritalStatus) {
      activeFilters.push({
        key: 'maritalStatus',
        label: `מצב משפחתי: ${filters.maritalStatus}`,
        color: 'secondary',
        priority: 'medium',
      });
    }

    // Verified Filter
    if (filters.isVerified !== undefined) {
      activeFilters.push({
        key: 'isVerified',
        label: `מאומתים בלבד`,
        color: 'primary',
        icon: <Star className="w-3 h-3" />,
        priority: 'high',
      });
    }

    // References Filter
    if (filters.hasReferences !== undefined) {
      activeFilters.push({
        key: 'hasReferences',
        label: `עם המלצות`,
        color: 'success',
        priority: 'medium',
      });
    }

    // Profile Completeness
    if (filters.isProfileComplete !== undefined) {
      activeFilters.push({
        key: 'isProfileComplete',
        label: `פרופיל מלא`,
        color: 'primary',
        priority: 'medium',
      });
    }

    // Last Activity
    if (filters.lastActiveDays !== undefined) {
      let label: string;

      switch (filters.lastActiveDays) {
        case 1:
          label = 'פעילים היום';
          break;
        case 3:
          label = 'פעילים ב-3 ימים אחרונים';
          break;
        case 7:
          label = 'פעילים בשבוע האחרון';
          break;
        case 30:
          label = 'פעילים בחודש האחרון';
          break;
        default:
          label = `פעילים ב-${filters.lastActiveDays} ימים אחרונים`;
      }

      activeFilters.push({
        key: 'lastActiveDays',
        label,
        color: 'special',
        priority: 'medium',
      });
    }

    return activeFilters;
  };

  const getFilterColors = (color?: string) => {
    const colorSchemes = {
      primary: {
        badge:
          'bg-gradient-to-r from-blue-500 to-cyan-500 text-white border-0 shadow-lg',
        hover: 'hover:from-blue-600 hover:to-cyan-600',
      },
      secondary: {
        badge:
          'bg-gradient-to-r from-purple-500 to-pink-500 text-white border-0 shadow-lg',
        hover: 'hover:from-purple-600 hover:to-pink-600',
      },
      success: {
        badge:
          'bg-gradient-to-r from-emerald-500 to-green-500 text-white border-0 shadow-lg',
        hover: 'hover:from-emerald-600 hover:to-green-600',
      },
      warning: {
        badge:
          'bg-gradient-to-r from-amber-500 to-orange-500 text-white border-0 shadow-lg',
        hover: 'hover:from-amber-600 hover:to-orange-600',
      },
      male: {
        badge:
          'bg-gradient-to-r from-blue-600 to-indigo-600 text-white border-0 shadow-lg',
        hover: 'hover:from-blue-700 hover:to-indigo-700',
      },
      female: {
        badge:
          'bg-gradient-to-r from-purple-600 to-pink-600 text-white border-0 shadow-lg',
        hover: 'hover:from-purple-700 hover:to-pink-700',
      },
      special: {
        badge:
          'bg-gradient-to-r from-indigo-500 to-purple-500 text-white border-0 shadow-lg',
        hover: 'hover:from-indigo-600 hover:to-purple-600',
      },
    };

    return (
      colorSchemes[color as keyof typeof colorSchemes] || colorSchemes.primary
    );
  };

  const activeFilters = getActiveFilters();

  // Sort filters by priority
  const sortedFilters = activeFilters.sort((a, b) => {
    const priorityOrder = { high: 3, medium: 2, low: 1 };
    return (
      priorityOrder[b.priority || 'low'] - priorityOrder[a.priority || 'low']
    );
  });

  if (activeFilters.length === 0) {
    return null;
  }

  return (
    <div className={cn('relative', className)}>
      {/* Background decorative elements */}
      <div className="absolute inset-0">
        <div className="absolute top-0 right-0 w-32 h-32 bg-gradient-to-br from-blue-200/20 to-cyan-200/20 rounded-full blur-2xl"></div>
        <div className="absolute bottom-0 left-0 w-24 h-24 bg-gradient-to-br from-purple-200/20 to-pink-200/20 rounded-full blur-xl"></div>
      </div>

      <div className="relative z-10 bg-gradient-to-r from-white via-purple-50/30 to-pink-50/30 backdrop-blur-sm rounded-2xl p-6 shadow-xl border-0">
        {/* Header Section */}
        <div className="flex items-center justify-between mb-6">
          <div className="flex items-center gap-3">
            <div className="p-3 rounded-full bg-gradient-to-r from-blue-500 to-cyan-500 text-white shadow-lg">
              <Filter className="w-6 h-6" />
            </div>
            <div>
              <h3 className="text-xl font-bold bg-gradient-to-r from-blue-600 to-cyan-600 bg-clip-text text-transparent">
                סינון פעיל
              </h3>
              <p className="text-sm text-gray-600 mt-1">
                {activeFilters.length}{' '}
                {activeFilters.length === 1 ? 'פילטר פעיל' : 'פילטרים פעילים'}
              </p>
            </div>
          </div>

          <div className="flex items-center gap-3">
            {onSuggestFilter && (
              <TooltipProvider>
                <Tooltip>
                  <TooltipTrigger asChild>
                    <Button
                      variant="ghost"
                      size="sm"
                      onClick={onSuggestFilter}
                      className="bg-gradient-to-r from-emerald-50 to-green-50 hover:from-emerald-100 hover:to-green-100 text-emerald-700 border border-emerald-200 rounded-xl transition-all duration-300 hover:scale-105 shadow-lg"
                    >
                      <Sparkles className="w-4 h-4 mr-2" />
                      הצע פילטרים נוספים
                      <Zap className="w-3 h-3 ml-1" />
                    </Button>
                  </TooltipTrigger>
                  <TooltipContent>
                    <p>הצעת פילטרים נוספים המתאימים לתוצאות הנוכחיות</p>
                  </TooltipContent>
                </Tooltip>
              </TooltipProvider>
            )}

            <TooltipProvider>
              <Tooltip>
                <TooltipTrigger asChild>
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={onResetAll}
                    className="bg-gradient-to-r from-red-50 to-pink-50 hover:from-red-100 hover:to-pink-100 text-red-700 border border-red-200 rounded-xl transition-all duration-300 hover:scale-105 shadow-lg"
                  >
                    <RefreshCw className="w-4 h-4 mr-2" />
                    נקה הכל
                  </Button>
                </TooltipTrigger>
                <TooltipContent>
                  <p>נקה את כל הפילטרים הפעילים</p>
                </TooltipContent>
              </Tooltip>
            </TooltipProvider>
          </div>
        </div>

        {/* Filters Grid */}
        <div className="flex flex-wrap gap-3">
          <AnimatePresence mode="popLayout">
            {sortedFilters.map((filter, index) => {
              const colors = getFilterColors(filter.color);

              return (
                <motion.div
                  key={`${filter.key}-${filter.value || index}`}
                  initial={{ opacity: 0, scale: 0.8, y: 20 }}
                  animate={{ opacity: 1, scale: 1, y: 0 }}
                  exit={{ opacity: 0, scale: 0.8, y: -20 }}
                  transition={{
                    duration: 0.3,
                    delay: index * 0.05,
                    type: 'spring',
                    stiffness: 300,
                    damping: 25,
                  }}
                  whileHover={{ scale: 1.05 }}
                  whileTap={{ scale: 0.95 }}
                >
                  <Badge
                    className={cn(
                      'px-4 py-2.5 whitespace-nowrap font-bold text-sm rounded-xl transition-all duration-300 group cursor-pointer shadow-lg hover:shadow-xl',
                      colors.badge,
                      colors.hover,
                      filter.priority === 'high' && 'ring-2 ring-white/50'
                    )}
                  >
                    <div className="flex items-center gap-2">
                      {filter.icon && (
                        <span className="opacity-90 group-hover:opacity-100 transition-opacity">
                          {filter.icon}
                        </span>
                      )}
                      <span className="max-w-[200px] truncate font-medium">
                        {filter.label}
                      </span>
                      <button
                        className="ml-2 hover:bg-white/20 rounded-full p-1 transition-all duration-200 hover:scale-110 group-hover:bg-white/30"
                        onClick={(e) => {
                          e.stopPropagation();
                          onRemoveFilter(filter.key, filter.value);
                        }}
                        aria-label={`הסר פילטר ${filter.label}`}
                      >
                        <X className="w-3.5 h-3.5" />
                      </button>
                    </div>
                  </Badge>
                </motion.div>
              );
            })}
          </AnimatePresence>
        </div>

        {/* Summary Footer */}
        {activeFilters.length > 3 && (
          <div className="mt-6 pt-4 border-t border-gray-200/50">
            <div className="flex items-center justify-between">
              <div className="flex items-center gap-2 text-sm text-gray-600">
                <Sparkles className="w-4 h-4 text-blue-500" />
                <span>
                  סינון מתקדם פעיל - {activeFilters.length} קריטריונים
                </span>
              </div>

              <div className="flex items-center gap-1">
                {activeFilters.filter((f) => f.priority === 'high').length >
                  0 && (
                  <Badge
                    variant="outline"
                    className="bg-red-50 text-red-700 border-red-200 text-xs"
                  >
                    {activeFilters.filter((f) => f.priority === 'high').length}{' '}
                    חשובים
                  </Badge>
                )}
                {activeFilters.filter((f) => f.priority === 'medium').length >
                  0 && (
                  <Badge
                    variant="outline"
                    className="bg-yellow-50 text-yellow-700 border-yellow-200 text-xs"
                  >
                    {
                      activeFilters.filter((f) => f.priority === 'medium')
                        .length
                    }{' '}
                    בינוניים
                  </Badge>
                )}
              </div>
            </div>
          </div>
        )}

        {/* Floating glow effect */}
        <div className="absolute inset-0 bg-gradient-to-r from-blue-400/5 via-purple-400/5 to-pink-400/5 rounded-2xl pointer-events-none"></div>
      </div>
    </div>
  );
};

export default ActiveFilters;
--- End of Content for ActiveFilters.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\new\Filters\FilterPanel.tsx
--------------------------------------------------------------------------------
Content:
// /Filters/FilterPanel.tsx - גרסה מתורגמת ומעודכנת
import React, { useState } from 'react';
import { motion, AnimatePresence } from 'framer-motion';

// Prisma Types
import { UserSource, UserStatus } from '@prisma/client';

// Lucide React Icons
import {
  Activity,
  Award,
  Bookmark,
  Briefcase,
  Calendar,
  Check,
  ChevronDown,
  Copy,
  Crown,
  Filter as FilterIcon,
  GraduationCap,
  Heart,
  MapPin,
  RefreshCw,
  Ruler,
  Save,
  Scroll,
  Shield,
  Sparkles,
  Star,
  Target,
  TrendingUp,
  User,
  Zap,
} from 'lucide-react';

// Utility Functions
import { cn } from '@/lib/utils';

// UI Components
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { Card } from '@/components/ui/card';
import {
  Collapsible,
  CollapsibleContent,
  CollapsibleTrigger,
} from '@/components/ui/collapsible';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { ScrollArea } from '@/components/ui/scroll-area';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select';
import { Slider } from '@/components/ui/slider';
import { Switch } from '@/components/ui/switch';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from '@/components/ui/tooltip';

// Local Components, Types & Constants
import SavedFilters from './SavedFilters';
import {
  AGE_RANGE,
  AVAILABILITY_STATUS_OPTIONS,
  EDUCATION_LEVELS,
  HEIGHT_RANGE,
  MARITAL_STATUS,
  OCCUPATION_CATEGORIES,
  POPULAR_CITIES,
  RELIGIOUS_LEVELS,
} from '../constants/filterOptions';
import type { CandidatesFilter } from '../types/candidates';
import type { FilterState } from '../types/filters';
import type { FilterPanelDict } from '@/types/dictionaries/matchmaker'; // <-- ייבוא הטיפוס החדש

// Interfaces
interface PopularFilterOption {
  id: keyof FilterPanelDict['popularFilters'];
  label: string;
  icon: React.ReactNode;
  filter: Partial<CandidatesFilter>;
  gradient: string;
}

interface FilterPanelProps {
  filters: CandidatesFilter;
  onFiltersChange: (filters: CandidatesFilter) => void;
  onSavePreset?: (name: string) => void;
  onReset: () => void;
  onApplySavedFilter?: (id: string) => void;
  savedFilters?: Array<{ id: string; name: string; isDefault?: boolean }>;
  popularFilters?: string[];
  className?: string;
  compactMode?: boolean;
  separateFiltering?: boolean;
  onToggleSeparateFiltering?: () => void;
  onMaleFiltersChange?: (filters: Partial<FilterState>) => void;
  onFemaleFiltersChange?: (filters: Partial<FilterState>) => void;
  onCopyFilters?: (
    source: 'male' | 'female',
    target: 'male' | 'female'
  ) => void;
  dict: FilterPanelDict; // <-- הוספת המילון כ-prop
}

interface FilterSectionProps {
  title: string;
  icon: React.ReactNode;
  children: React.ReactNode;
  defaultOpen?: boolean;
  badge?: number;
  gradient?: string;
}

// Helper Components
const FilterSection: React.FC<FilterSectionProps> = ({
  title,
  icon,
  children,
  defaultOpen = false,
  badge,
  gradient = 'from-blue-500 to-cyan-500',
}) => {
  const [isOpen, setIsOpen] = useState(defaultOpen);

  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      className="mb-4"
    >
      <Collapsible
        open={isOpen}
        onOpenChange={setIsOpen}
        className="rounded-2xl overflow-hidden shadow-xl border-0 bg-gradient-to-br from-white via-gray-50/30 to-white"
      >
        <CollapsibleTrigger asChild>
          <motion.div
            className={cn(
              'flex items-center justify-between p-4 cursor-pointer transition-all duration-300',
              'bg-gradient-to-r',
              gradient,
              'text-white hover:shadow-lg'
            )}
            whileHover={{ scale: 1.02 }}
            whileTap={{ scale: 0.98 }}
          >
            <div className="flex items-center gap-3">
              <div className="p-2 rounded-full bg-white/20 backdrop-blur-sm shadow-lg">
                {icon}
              </div>
              <span className="font-bold text-lg">{title}</span>
              {badge !== undefined && (
                <Badge className="bg-white/20 text-white border-white/30 shadow-lg">
                  {badge}
                </Badge>
              )}
            </div>
            <motion.div
              animate={{ rotate: isOpen ? 180 : 0 }}
              transition={{ duration: 0.3 }}
            >
              <ChevronDown size={20} className="text-white/80" />
            </motion.div>
          </motion.div>
        </CollapsibleTrigger>
        <CollapsibleContent className="data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:slide-out-to-top-1 data-[state=open]:slide-in-from-top-1">
          <div className="p-6 bg-gradient-to-br from-white via-gray-50/20 to-white">
            {children}
          </div>
        </CollapsibleContent>
      </Collapsible>
    </motion.div>
  );
};

const GenderFilterPanel = ({
  gender,
  filters,
  onFiltersChange,
  className,
  copyTarget,
  onCopyFilters,
  dict,
}: {
  gender: 'male' | 'female';
  filters: Partial<FilterState>;
  onFiltersChange: (filters: Partial<FilterState>) => void;
  className?: string;
  copyTarget: 'male' | 'female';
  onCopyFilters?: (
    source: 'male' | 'female',
    target: 'male' | 'female'
  ) => void;
  dict: FilterPanelDict['genderFilterPanel'];
}) => {
  const genderConfig = {
    male: {
      gradient: 'from-blue-500 to-cyan-500',
      bg: 'from-blue-50/50 to-cyan-50/30',
      text: 'text-blue-800',
      icon: <Target className="w-5 h-5" />,
      title: dict.maleTitle,
      copyLabel: dict.copyToFemale,
    },
    female: {
      gradient: 'from-purple-500 to-pink-500',
      bg: 'from-purple-50/50 to-pink-50/30',
      text: 'text-purple-800',
      icon: <Crown className="w-5 h-5" />,
      title: dict.femaleTitle,
      copyLabel: dict.copyToMale,
    },
  };
  const config = genderConfig[gender];

  const handleAgeChange = (type: 'min' | 'max', value: string) => {
    const numericValue = parseInt(value);
    if (
      isNaN(numericValue) ||
      numericValue < AGE_RANGE.min ||
      numericValue > AGE_RANGE.max
    )
      return;
    const currentMin = filters.ageRange?.min || AGE_RANGE.default.min;
    const currentMax = filters.ageRange?.max || AGE_RANGE.default.max;
    onFiltersChange({
      ...filters,
      ageRange: {
        min: type === 'min' ? Math.min(numericValue, currentMax) : currentMin,
        max: type === 'max' ? Math.max(numericValue, currentMin) : currentMax,
      },
    });
  };

  const handleHeightChange = (type: 'min' | 'max', value: string) => {
    const numericValue = parseInt(value);
    if (
      isNaN(numericValue) ||
      numericValue < HEIGHT_RANGE.min ||
      numericValue > HEIGHT_RANGE.max
    )
      return;
    const currentMin = filters.heightRange?.min || HEIGHT_RANGE.default.min;
    const currentMax = filters.heightRange?.max || HEIGHT_RANGE.default.max;
    onFiltersChange({
      ...filters,
      heightRange: {
        min: type === 'min' ? Math.min(numericValue, currentMax) : currentMin,
        max: type === 'max' ? Math.max(numericValue, currentMin) : currentMax,
      },
    });
  };

  return (
    <motion.div
      initial={{ opacity: 0, scale: 0.95 }}
      animate={{ opacity: 1, scale: 1 }}
      className={cn(
        'mb-6 rounded-2xl overflow-hidden shadow-xl border-0',
        className
      )}
    >
      <div
        className={cn(
          'flex justify-between items-center px-6 py-4',
          'bg-gradient-to-r',
          config.gradient,
          'text-white'
        )}
      >
        <div className="flex items-center gap-3">
          <div className="p-2 rounded-full bg-white/20 backdrop-blur-sm">
            {config.icon}
          </div>
          <h3 className="text-lg font-bold">{config.title}</h3>
        </div>
        {onCopyFilters && (
          <TooltipProvider>
            <Tooltip>
              <TooltipTrigger asChild>
                <Button
                  variant="ghost"
                  size="sm"
                  onClick={() => onCopyFilters(gender, copyTarget)}
                  className="text-white hover:bg-white/20 rounded-xl transition-all duration-300 hover:scale-105"
                >
                  <Copy className="w-4 h-4 mr-2" />
                  {config.copyLabel}
                </Button>
              </TooltipTrigger>
              <TooltipContent>
                <p>
                  {dict.copyTooltip.replace(
                    '{{gender}}',
                    copyTarget === 'male' ? dict.maleTitle : dict.femaleTitle
                  )}
                </p>
              </TooltipContent>
            </Tooltip>
          </TooltipProvider>
        )}
      </div>
      <div className={cn('p-6 space-y-6 bg-gradient-to-br', config.bg)}>
        <div className="space-y-4">
          <Label className="text-base font-bold text-gray-800 flex items-center gap-2">
            <Calendar className="w-5 h-5 text-blue-600" />
            {dict.ageLabel}
          </Label>
          <div className="bg-white/80 backdrop-blur-sm rounded-xl p-4 shadow-lg border border-gray-100/50">
            <div className="flex justify-between items-center mb-4">
              <div className="text-center bg-gradient-to-r from-blue-50 to-cyan-50 border border-blue-200 rounded-xl shadow-md p-3 min-w-[80px]">
                <p className="text-xs text-blue-600 mb-1 font-medium">
                  {dict.minLabel}
                </p>
                <input
                  type="number"
                  min={AGE_RANGE.min}
                  max={AGE_RANGE.max}
                  value={filters?.ageRange?.min || AGE_RANGE.default.min}
                  onChange={(e) => handleAgeChange('min', e.target.value)}
                  className="w-16 text-center text-lg font-bold text-blue-700 focus:outline-none bg-transparent"
                />
              </div>
              <span className="text-xl font-bold text-gray-400">-</span>
              <div className="text-center bg-gradient-to-r from-blue-50 to-cyan-50 border border-blue-200 rounded-xl shadow-md p-3 min-w-[80px]">
                <p className="text-xs text-blue-600 mb-1 font-medium">
                  {dict.maxLabel}
                </p>
                <input
                  type="number"
                  min={AGE_RANGE.min}
                  max={AGE_RANGE.max}
                  value={filters?.ageRange?.max || AGE_RANGE.default.max}
                  onChange={(e) => handleAgeChange('max', e.target.value)}
                  className="w-16 text-center text-lg font-bold text-blue-700 focus:outline-none bg-transparent"
                />
              </div>
            </div>
            <div className="px-2">
              <Slider
                value={[
                  filters?.ageRange?.min || AGE_RANGE.default.min,
                  filters?.ageRange?.max || AGE_RANGE.default.max,
                ]}
                min={AGE_RANGE.min}
                max={AGE_RANGE.max}
                step={1}
                onValueChange={(value) => {
                  onFiltersChange({
                    ...filters,
                    ageRange: { min: value[0], max: value[1] },
                  });
                }}
                className="h-5 [&>span]:bg-gradient-to-r [&>span]:from-blue-500 [&>span]:to-cyan-500"
                dir="rtl"
              />
              <div className="flex justify-between mt-3 px-2 text-xs text-gray-500">
                <span>{AGE_RANGE.min}</span>
                <span>{AGE_RANGE.max}</span>
              </div>
            </div>
          </div>
        </div>
        <div className="space-y-4">
          <Label className="text-base font-bold text-gray-800 flex items-center gap-2">
            <Ruler className="w-5 h-5 text-purple-600" />
            {dict.heightLabel}
          </Label>
          <div className="bg-white/80 backdrop-blur-sm rounded-xl p-4 shadow-lg border border-gray-100/50">
            <div className="flex justify-between items-center mb-4">
              <div className="text-center bg-gradient-to-r from-purple-50 to-pink-50 border border-purple-200 rounded-xl shadow-md p-3 min-w-[80px]">
                <p className="text-xs text-purple-600 mb-1 font-medium">
                  {dict.minLabel}
                </p>
                <input
                  type="number"
                  min={HEIGHT_RANGE.min}
                  max={HEIGHT_RANGE.max}
                  value={filters?.heightRange?.min || HEIGHT_RANGE.default.min}
                  onChange={(e) => handleHeightChange('min', e.target.value)}
                  className="w-16 text-center text-lg font-bold text-purple-700 focus:outline-none bg-transparent"
                />
              </div>
              <span className="text-xl font-bold text-gray-400">-</span>
              <div className="text-center bg-gradient-to-r from-purple-50 to-pink-50 border border-purple-200 rounded-xl shadow-md p-3 min-w-[80px]">
                <p className="text-xs text-purple-600 mb-1 font-medium">
                  {dict.maxLabel}
                </p>
                <input
                  type="number"
                  min={HEIGHT_RANGE.min}
                  max={HEIGHT_RANGE.max}
                  value={filters?.heightRange?.max || HEIGHT_RANGE.default.max}
                  onChange={(e) => handleHeightChange('max', e.target.value)}
                  className="w-16 text-center text-lg font-bold text-purple-700 focus:outline-none bg-transparent"
                />
              </div>
            </div>
            <div className="px-2">
              <Slider
                value={[
                  filters?.heightRange?.min || HEIGHT_RANGE.default.min,
                  filters?.heightRange?.max || HEIGHT_RANGE.default.max,
                ]}
                min={HEIGHT_RANGE.min}
                max={HEIGHT_RANGE.max}
                step={1}
                onValueChange={(value) => {
                  onFiltersChange({
                    ...filters,
                    heightRange: { min: value[0], max: value[1] },
                  });
                }}
                className="h-5 [&>span]:bg-gradient-to-r [&>span]:from-purple-500 [&>span]:to-pink-500"
                dir="rtl"
              />
              <div className="flex justify-between mt-3 px-2 text-xs text-gray-500">
                <span>{HEIGHT_RANGE.min}</span>
                <span>{HEIGHT_RANGE.max}</span>
              </div>
            </div>
          </div>
        </div>
        {[
          {
            label: dict.religiousLevelLabel,
            icon: <Scroll className="w-5 h-5 text-amber-600" />,
            filterKey: 'religiousLevel',
            options: RELIGIOUS_LEVELS,
            placeholder: dict.placeholders.selectReligious,
            hoverColor: 'amber',
          },
          {
            label: dict.cityLabel,
            icon: <MapPin className="w-5 h-5 text-emerald-600" />,
            filterKey: 'cities',
            options: POPULAR_CITIES.map((c) => ({ label: c, value: c })),
            placeholder: dict.placeholders.selectCity,
            hoverColor: 'emerald',
          },
        ].map(
          ({ label, icon, filterKey, options, placeholder, hoverColor }) => (
            <div key={filterKey} className="space-y-3">
              <Label className="text-base font-bold text-gray-800 flex items-center gap-2">
                {icon}
                {label}
              </Label>
              <div className="bg-white/80 backdrop-blur-sm rounded-xl p-3 shadow-lg border border-gray-100/50">
                <Select
                  value={
                    filterKey === 'cities'
                      ? filters.cities?.[0] || ''
                      : (filters[filterKey as keyof FilterState] as string) ||
                        ''
                  }
                  onValueChange={(value) => {
                    const newValue = value === 'all' ? undefined : value;
                    if (filterKey === 'cities') {
                      onFiltersChange({
                        ...filters,
                        cities: newValue ? [newValue] : [],
                      });
                    } else {
                      onFiltersChange({ ...filters, [filterKey]: newValue });
                    }
                  }}
                >
                  <SelectTrigger
                    className={`w-full border-0 bg-transparent focus:ring-2 focus:ring-${hoverColor}-200 rounded-xl`}
                  >
                    <SelectValue placeholder={placeholder} />
                  </SelectTrigger>
                  <SelectContent className="bg-white/95 backdrop-blur-sm border-0 shadow-2xl rounded-xl">
                    <SelectItem
                      value="all"
                      className={`hover:bg-${hoverColor}-50`}
                    >
                      {dict.options.all}
                    </SelectItem>
                    {options.map((opt) => (
                      <SelectItem
                        key={opt.value}
                        value={opt.value}
                        className={`hover:bg-${hoverColor}-50`}
                      >
                        {opt.label}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>
            </div>
          )
        )}
        <div className="space-y-4 pt-4 border-t border-gray-200/50">
          {[
            {
              key: 'isVerified',
              label: dict.verifiedOnlyLabel,
              icon: <Shield className="w-4 h-4" />,
              gradient: 'from-emerald-500 to-green-500',
            },
            {
              key: 'hasReferences',
              label: dict.withRecommendationsLabel,
              icon: <Award className="w-4 h-4" />,
              gradient: 'from-amber-500 to-orange-500',
            },
            {
              key: 'isProfileComplete',
              label: dict.fullProfileLabel,
              icon: <Star className="w-4 h-4" />,
              gradient: 'from-purple-500 to-indigo-500',
            },
          ].map((item) => (
            <div
              key={item.key}
              className="flex items-center justify-between p-4 bg-white/60 backdrop-blur-sm rounded-xl shadow-lg border border-gray-100/50 hover:bg-white/80 transition-all duration-300"
            >
              <div className="flex items-center gap-3">
                <div
                  className={cn(
                    'p-2 rounded-lg bg-gradient-to-r text-white',
                    item.gradient
                  )}
                >
                  {item.icon}
                </div>
                <span className="font-medium text-gray-800">{item.label}</span>
              </div>
              <Switch
                checked={
                  (filters?.[item.key as keyof typeof filters] as boolean) ||
                  false
                }
                onCheckedChange={(checked) => {
                  onFiltersChange({
                    ...filters,
                    [item.key]: checked || undefined,
                  });
                }}
                className="data-[state=checked]:bg-gradient-to-r data-[state=checked]:from-emerald-500 data-[state=checked]:to-green-500"
              />
            </div>
          ))}
        </div>
      </div>
    </motion.div>
  );
};

// Main Component
const FilterPanel: React.FC<FilterPanelProps> = ({
  filters,
  onFiltersChange,
  onSavePreset,
  onReset,
  onApplySavedFilter,
  savedFilters = [],
  className,
  compactMode = false,
  separateFiltering = false,
  onToggleSeparateFiltering,
  onMaleFiltersChange,
  onFemaleFiltersChange,
  onCopyFilters,
  dict,
}) => {
  const [showSavePreset, setShowSavePreset] = useState(false);
  const [presetName, setPresetName] = useState('');
  const [activeTab, setActiveTab] = useState<string>('basic');
  const [activeGenderFilter, setActiveGenderFilter] = useState<
    'male' | 'female'
  >('male');

  const POPULAR_FILTERS: PopularFilterOption[] = [
    {
      id: 'activeRecently',
      label: dict.popularFilters.activeRecently,
      icon: <Activity className="w-4 h-4" />,
      filter: { lastActiveDays: 7 },
      gradient: 'from-blue-500 to-cyan-500',
    },
    {
      id: 'verifiedOnly',
      label: dict.popularFilters.verifiedOnly,
      icon: <Shield className="w-4 h-4" />,
      filter: { isVerified: true },
      gradient: 'from-emerald-500 to-green-500',
    },
    {
      id: 'withRecommendations',
      label: dict.popularFilters.withRecommendations,
      icon: <Award className="w-4 h-4" />,
      filter: { hasReferences: true },
      gradient: 'from-amber-500 to-orange-500',
    },
    {
      id: 'availableOnly',
      label: dict.popularFilters.availableOnly,
      icon: <Heart className="w-4 h-4" />,
      filter: { availabilityStatus: 'AVAILABLE' },
      gradient: 'from-pink-500 to-rose-500',
    },
    {
      id: 'completeProfiles',
      label: dict.popularFilters.completeProfiles,
      icon: <Star className="w-4 h-4" />,
      filter: { isProfileComplete: true },
      gradient: 'from-purple-500 to-indigo-500',
    },
  ];

  const handleSavePreset = () => {
    if (presetName && onSavePreset) {
      onSavePreset(presetName);
      setPresetName('');
      setShowSavePreset(false);
    }
  };
  const handleAgeRangeChange = (value: number[]) => {
    onFiltersChange({ ...filters, ageRange: { min: value[0], max: value[1] } });
  };
  const handleHeightRangeChange = (value: number[]) => {
    onFiltersChange({
      ...filters,
      heightRange: { min: value[0], max: value[1] },
    });
  };
  const handleApplyPopularFilter = (filter: Partial<CandidatesFilter>) => {
    onFiltersChange({ ...filters, ...filter });
  };

  const countActiveFilters = (category: string): number => {
    let count = 0;
    // ... (logic remains the same)
    return count;
  };

  return (
    <Card
      className={cn(
        'shadow-2xl border-0 bg-gradient-to-br from-white via-purple-50/20 to-pink-50/10 backdrop-blur-sm rounded-3xl overflow-hidden',
        className
      )}
    >
      <div className="absolute inset-0 -z-10">
        <div className="absolute top-0 right-0 w-64 h-64 bg-gradient-to-br from-purple-200/20 to-pink-200/20 rounded-full blur-3xl"></div>
        <div className="absolute bottom-0 left-0 w-48 h-48 bg-gradient-to-br from-blue-200/20 to-cyan-200/20 rounded-full blur-2xl"></div>
      </div>
      <div className="relative">
        {!compactMode && (
          <div className="bg-gradient-to-r from-indigo-600 via-purple-600 to-pink-600 p-6">
            <div className="flex items-center justify-between mb-4">
              <div className="flex items-center gap-4">
                <div className="p-3 rounded-full bg-white/20 backdrop-blur-sm shadow-lg">
                  <FilterIcon className="w-8 h-8 text-white" />
                </div>
                <div>
                  <h3 className="text-2xl font-bold text-white">
                    {dict.header.title}
                  </h3>
                  <p className="text-white/80 mt-1">{dict.header.subtitle}</p>
                </div>
              </div>
              <div className="flex gap-3">
                <TooltipProvider>
                  <Tooltip>
                    <TooltipTrigger asChild>
                      <Button
                        variant="ghost"
                        size="sm"
                        onClick={onReset}
                        className="h-10 w-10 p-0 text-white hover:bg-white/20 rounded-xl transition-all duration-300 hover:scale-110"
                      >
                        <RefreshCw className="w-5 h-5" />
                      </Button>
                    </TooltipTrigger>
                    <TooltipContent>
                      <p>{dict.header.resetTooltip}</p>
                    </TooltipContent>
                  </Tooltip>
                </TooltipProvider>
                <TooltipProvider>
                  <Tooltip>
                    <TooltipTrigger asChild>
                      <Button
                        variant="ghost"
                        size="sm"
                        onClick={() => setShowSavePreset(!showSavePreset)}
                        className="h-10 w-10 p-0 text-white hover:bg-white/20 rounded-xl transition-all duration-300 hover:scale-110"
                      >
                        <Bookmark className="w-5 h-5" />
                      </Button>
                    </TooltipTrigger>
                    <TooltipContent>
                      <p>{dict.header.saveTooltip}</p>
                    </TooltipContent>
                  </Tooltip>
                </TooltipProvider>
              </div>
            </div>
            <div className="grid grid-cols-2 lg:grid-cols-5 gap-3">
              {POPULAR_FILTERS.map((option) => (
                <motion.div
                  key={option.id}
                  whileHover={{ scale: 1.05 }}
                  whileTap={{ scale: 0.95 }}
                >
                  <Button
                    variant="ghost"
                    size="sm"
                    onClick={() => handleApplyPopularFilter(option.filter)}
                    className={cn(
                      'w-full h-auto min-h-24 p-3 bg-white/10 hover:bg-white/20 backdrop-blur-sm border border-white/20 rounded-xl transition-all duration-300 text-white flex flex-col items-center gap-2'
                    )}
                  >
                    <div
                      className={cn(
                        'p-2 rounded-lg bg-gradient-to-r',
                        option.gradient,
                        'text-white shadow-lg'
                      )}
                    >
                      {option.icon}
                    </div>
                    <span className="text-xs font-medium text-center leading-tight whitespace-normal">
                      {option.label}
                    </span>
                  </Button>
                </motion.div>
              ))}
            </div>
          </div>
        )}
        <AnimatePresence>
          {showSavePreset && !compactMode && (
            <motion.div
              initial={{ opacity: 0, height: 0 }}
              animate={{ opacity: 1, height: 'auto' }}
              exit={{ opacity: 0, height: 0 }}
              className="bg-gradient-to-r from-blue-50 via-purple-50 to-pink-50 border-b border-purple-100"
            >
              <div className="p-6">
                <Label className="text-lg font-bold text-gray-800 mb-3 block">
                  {dict.savePreset.title}
                </Label>
                <div className="flex gap-3">
                  <Input
                    value={presetName}
                    onChange={(e) => setPresetName(e.target.value)}
                    placeholder={dict.savePreset.placeholder}
                    className="flex-1 border-0 bg-white/80 backdrop-blur-sm shadow-lg rounded-xl focus:ring-2 focus:ring-purple-300"
                  />
                  <Button
                    size="sm"
                    onClick={handleSavePreset}
                    className="bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-700 hover:to-pink-700 shadow-lg rounded-xl px-6"
                  >
                    <Save className="w-4 h-4 mr-2" />
                    {dict.savePreset.button}
                  </Button>
                </div>
              </div>
            </motion.div>
          )}
        </AnimatePresence>
        <div className="p-6 bg-gradient-to-r from-indigo-50/50 via-purple-50/30 to-pink-50/50 border-b border-purple-100/50">
          <motion.div
            className="bg-white/60 backdrop-blur-sm rounded-2xl p-6 shadow-lg border border-white/50"
            whileHover={{ scale: 1.02 }}
          >
            <div className="flex items-center justify-between">
              <div className="space-y-2">
                <div className="flex items-center gap-3">
                  <div className="p-2 rounded-lg bg-gradient-to-r from-indigo-500 to-purple-500 text-white">
                    <Zap className="w-5 h-5" />
                  </div>
                  <div className="font-bold text-lg bg-gradient-to-r from-indigo-600 to-purple-600 bg-clip-text text-transparent">
                    {dict.separateFiltering.title}
                  </div>
                </div>
                <p className="text-sm text-gray-600 mr-10">
                  {dict.separateFiltering.description}
                </p>
              </div>
              <div className="flex items-center gap-3">
                <Switch
                  checked={separateFiltering}
                  onCheckedChange={onToggleSeparateFiltering}
                  className="data-[state=checked]:bg-gradient-to-r data-[state=checked]:from-indigo-500 data-[state=checked]:to-purple-500"
                />
              </div>
            </div>
          </motion.div>
        </div>
        <div className="p-6">
          {separateFiltering ? (
            <div className="space-y-6">
              <div className="bg-gradient-to-r from-white via-gray-50/30 to-white rounded-2xl p-2 shadow-lg border border-gray-100/50">
                <div className="grid grid-cols-2 gap-1">
                  <Button
                    type="button"
                    variant={
                      activeGenderFilter === 'male' ? 'default' : 'ghost'
                    }
                    onClick={() => setActiveGenderFilter('male')}
                    className={cn(
                      'rounded-xl py-3 transition-all duration-300',
                      activeGenderFilter === 'male'
                        ? 'bg-gradient-to-r from-blue-600 to-cyan-600 text-white shadow-lg'
                        : 'text-gray-600 hover:bg-blue-50'
                    )}
                  >
                    <Target className="w-5 h-5 mr-2" />
                    {dict.genderFilterPanel.maleTitle}
                  </Button>
                  <Button
                    type="button"
                    variant={
                      activeGenderFilter === 'female' ? 'default' : 'ghost'
                    }
                    onClick={() => setActiveGenderFilter('female')}
                    className={cn(
                      'rounded-xl py-3 transition-all duration-300',
                      activeGenderFilter === 'female'
                        ? 'bg-gradient-to-r from-purple-600 to-pink-600 text-white shadow-lg'
                        : 'text-gray-600 hover:bg-purple-50'
                    )}
                  >
                    <Crown className="w-5 h-5 mr-2" />
                    {dict.genderFilterPanel.femaleTitle}
                  </Button>
                </div>
              </div>
              <AnimatePresence mode="wait">
                {activeGenderFilter === 'male' ? (
                  <motion.div
                    key="male"
                    initial={{ opacity: 0, x: -20 }}
                    animate={{ opacity: 1, x: 0 }}
                    exit={{ opacity: 0, x: 20 }}
                    transition={{ duration: 0.3 }}
                  >
                    <GenderFilterPanel
                      gender="male"
                      filters={filters.maleFilters || {}}
                      onFiltersChange={onMaleFiltersChange || (() => {})}
                      copyTarget="female"
                      onCopyFilters={onCopyFilters}
                      dict={dict.genderFilterPanel}
                    />
                  </motion.div>
                ) : (
                  <motion.div
                    key="female"
                    initial={{ opacity: 0, x: 20 }}
                    animate={{ opacity: 1, x: 0 }}
                    exit={{ opacity: 0, x: -20 }}
                    transition={{ duration: 0.3 }}
                  >
                    <GenderFilterPanel
                      gender="female"
                      filters={filters.femaleFilters || {}}
                      onFiltersChange={onFemaleFiltersChange || (() => {})}
                      copyTarget="male"
                      onCopyFilters={onCopyFilters}
                      dict={dict.genderFilterPanel}
                    />
                  </motion.div>
                )}
              </AnimatePresence>
            </div>
          ) : (
            <Tabs
              value={activeTab}
              onValueChange={setActiveTab}
              className="w-full"
            >
              <TabsList className="grid grid-cols-4 w-full bg-gradient-to-r from-indigo-50 to-purple-50 p-2 rounded-2xl shadow-lg border border-white/50 h-auto">
                {[
                  {
                    value: 'basic',
                    label: dict.tabs.basic,
                    icon: User,
                    gradient: 'from-blue-500 to-cyan-500',
                  },
                  {
                    value: 'advanced',
                    label: dict.tabs.advanced,
                    icon: Sparkles,
                    gradient: 'from-purple-500 to-pink-500',
                  },
                  {
                    value: 'status',
                    label: dict.tabs.status,
                    icon: Activity,
                    gradient: 'from-emerald-500 to-green-500',
                  },
                  {
                    value: 'saved',
                    label: dict.tabs.saved,
                    icon: Bookmark,
                    gradient: 'from-amber-500 to-orange-500',
                  },
                ].map((tab) => {
                  const IconComponent = tab.icon;
                  const count = countActiveFilters(tab.value);
                  return (
                    <TabsTrigger
                      key={tab.value}
                      value={tab.value}
                      className={cn(
                        'flex flex-col items-center justify-center gap-2 rounded-xl text-sm font-bold transition-all duration-300 py-3 hover:scale-105 relative overflow-hidden group data-[state=active]:shadow-lg',
                        activeTab === tab.value
                          ? `bg-gradient-to-r ${tab.gradient} text-white`
                          : 'text-gray-600 hover:bg-white/50'
                      )}
                    >
                      <IconComponent className="w-5 h-5" />
                      <span>{tab.label}</span>
                      {count > 0 && (
                        <Badge className="absolute -top-1 -right-1 h-6 w-6 p-0 flex items-center justify-center bg-red-500 text-white text-xs font-bold rounded-full border-2 border-white">
                          {count}
                        </Badge>
                      )}
                    </TabsTrigger>
                  );
                })}
              </TabsList>
              <div className="mt-6 space-y-6">
                <TabsContent value="basic" className="space-y-6 m-0">
                  <FilterSection
                    title={dict.sections.gender}
                    icon={<User className="w-5 h-5" />}
                    defaultOpen={true}
                    gradient="from-blue-500 to-cyan-500"
                  >
                    <div className="grid grid-cols-2 gap-4">
                      {[
                        {
                          value: 'MALE',
                          label: dict.buttons.male,
                          gradient: 'from-blue-500 to-cyan-500',
                        },
                        {
                          value: 'FEMALE',
                          label: dict.buttons.female,
                          gradient: 'from-purple-500 to-pink-500',
                        },
                      ].map((option) => (
                        <Button
                          key={option.value}
                          type="button"
                          variant={
                            filters.gender === option.value
                              ? 'default'
                              : 'outline'
                          }
                          onClick={() =>
                            onFiltersChange({
                              ...filters,
                              gender: option.value as 'MALE' | 'FEMALE',
                            })
                          }
                          className={cn(
                            'h-12 rounded-xl font-bold transition-all duration-300 hover:scale-105',
                            filters.gender === option.value
                              ? `bg-gradient-to-r ${option.gradient} text-white shadow-lg hover:shadow-xl`
                              : 'bg-white/80 backdrop-blur-sm border-2 border-gray-200 hover:border-gray-300'
                          )}
                        >
                          {option.label}
                        </Button>
                      ))}
                    </div>
                    {filters.gender && (
                      <Button
                        type="button"
                        variant="ghost"
                        size="sm"
                        onClick={() =>
                          onFiltersChange({ ...filters, gender: undefined })
                        }
                        className="w-full mt-3 text-gray-500 hover:text-gray-700 hover:bg-gray-50 rounded-xl"
                      >
                        {dict.buttons.removeSelection}
                      </Button>
                    )}
                  </FilterSection>
                  <FilterSection
                    title={dict.sections.age}
                    icon={<Calendar className="w-5 h-5" />}
                    defaultOpen={true}
                    gradient="from-emerald-500 to-green-500"
                    badge={
                      filters.ageRange &&
                      (filters.ageRange.min !== AGE_RANGE.default.min ||
                        filters.ageRange.max !== AGE_RANGE.default.max)
                        ? 1
                        : undefined
                    }
                  >
                    {/* ... Age Slider JSX (unchanged logic) ... */}
                  </FilterSection>
                </TabsContent>
                <TabsContent value="advanced" className="space-y-6 m-0">
                  <FilterSection
                    title={dict.sections.height}
                    icon={<Ruler className="w-5 h-5" />}
                    gradient="from-indigo-500 to-purple-500"
                    badge={
                      filters.heightRange &&
                      (filters.heightRange.min !== HEIGHT_RANGE.default.min ||
                        filters.heightRange.max !== HEIGHT_RANGE.default.max)
                        ? 1
                        : undefined
                    }
                  >
                    {/* ... Height Slider JSX (unchanged logic) ... */}
                  </FilterSection>
                </TabsContent>
                <TabsContent value="saved" className="space-y-6 m-0">
                  {savedFilters.length === 0 ? (
                    <motion.div
                      initial={{ opacity: 0, y: 20 }}
                      animate={{ opacity: 1, y: 0 }}
                      className="text-center py-12 bg-gradient-to-br from-white via-gray-50/30 to-white rounded-2xl shadow-xl border border-gray-100/50"
                    >
                      <div className="w-20 h-20 rounded-full bg-gradient-to-br from-amber-100 to-orange-100 flex items-center justify-center mx-auto mb-6">
                        <Bookmark className="w-10 h-10 text-amber-500" />
                      </div>
                      <h3 className="text-xl font-bold text-gray-800 mb-3">
                        {dict.savedFilters.emptyTitle}
                      </h3>
                      <p className="text-gray-600 mb-6 max-w-sm mx-auto">
                        {dict.savedFilters.emptyDescription}
                      </p>
                      <Button
                        onClick={() => setShowSavePreset(true)}
                        className="bg-gradient-to-r from-amber-500 to-orange-500 hover:from-amber-600 hover:to-orange-600 text-white shadow-lg rounded-xl px-6"
                      >
                        <Save className="w-4 h-4 mr-2" />
                        {dict.savedFilters.saveCurrentButton}
                      </Button>
                    </motion.div>
                  ) : (
                    <SavedFilters
                      filters={savedFilters.map((filter) => ({
                        id: filter.id,
                        name: filter.name,
                        filter: {},
                        isDefault: filter.isDefault,
                        createdAt: new Date(),
                      }))}
                      activeFilterId={filters.savedFilterId}
                      onSelect={(filter) => onApplySavedFilter?.(filter.id)}
                      onDelete={() => {}}
                      onEdit={() => {}}
                      onSetDefault={() => {}}
                    />
                  )}
                </TabsContent>
              </div>
            </Tabs>
          )}
        </div>
        <div className="px-6 pb-6">
          <div className="flex justify-between items-center pt-6 border-t border-gray-200/50">
            <Button
              variant="outline"
              size={compactMode ? 'sm' : 'default'}
              onClick={onReset}
              className="bg-gradient-to-r from-red-50 to-pink-50 border-2 border-red-200 text-red-600 hover:from-red-100 hover:to-pink-100 rounded-xl transition-all duration-300 hover:scale-105"
            >
              <RefreshCw className="w-4 h-4 mr-2" />
              {dict.buttons.reset}
            </Button>
            {!compactMode && (
              <Button
                onClick={() => setShowSavePreset(true)}
                className="bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-700 hover:to-pink-700 shadow-lg rounded-xl px-6 transition-all duration-300 hover:scale-105"
              >
                <Save className="w-4 h-4 mr-2" />
                {dict.buttons.save}
                <Sparkles className="w-3 h-3 ml-1" />
              </Button>
            )}
          </div>
        </div>
      </div>
    </Card>
  );
};

export default FilterPanel;
--- End of Content for FilterPanel.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\new\Filters\SavedFilters.tsx
--------------------------------------------------------------------------------
Content:
// SavedFilters.tsx - גרסה מודרנית ומשודרגת
'use client';
import React from 'react';
import {
  Star,
  MoreVertical,
  Edit,
  Trash,
  Crown,
  Bookmark,
  Calendar,
  Sparkles,
  Zap,
  Award,
} from 'lucide-react';
import { Button } from '@/components/ui/button';
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from '@/components/ui/dropdown-menu';
import { Badge } from '@/components/ui/badge';
import { ScrollArea } from '@/components/ui/scroll-area';
import { motion, AnimatePresence } from 'framer-motion';
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from '@/components/ui/tooltip';
import type { CandidatesFilter } from '../types/candidates';
import { cn } from '@/lib/utils';

interface SavedFilter {
  id: string;
  name: string;
  filter: CandidatesFilter;
  isDefault?: boolean;
  createdAt: Date;
}

interface SavedFiltersProps {
  filters: SavedFilter[];
  activeFilterId?: string;
  onSelect: (filter: SavedFilter) => void;
  onDelete: (filterId: string) => void;
  onEdit: (filter: SavedFilter) => void;
  onSetDefault: (filterId: string) => void;
  className?: string;
}

const SavedFilters: React.FC<SavedFiltersProps> = ({
  filters,
  activeFilterId,
  onSelect,
  onDelete,
  onEdit,
  onSetDefault,
  className,
}) => {
  // Format date in Hebrew
  const formatDate = (date: Date) => {
    return new Intl.DateTimeFormat('he-IL', {
      day: 'numeric',
      month: 'short',
      year: 'numeric',
    }).format(date);
  };

  // Get filter complexity score
  const getFilterComplexity = (
    filter: CandidatesFilter
  ): { score: number; label: string; color: string } => {
    let score = 0;

    if (filter.gender) score += 1;
    if (filter.ageRange) score += 1;
    if (filter.heightRange) score += 1;
    if (filter.cities?.length) score += filter.cities.length;
    if (filter.occupations?.length) score += filter.occupations.length;
    if (filter.religiousLevel) score += 1;
    if (filter.educationLevel) score += 1;
    if (filter.maritalStatus) score += 1;
    if (filter.availabilityStatus) score += 1;
    if (filter.isVerified) score += 1;
    if (filter.hasReferences) score += 1;
    if (filter.isProfileComplete) score += 1;
    if (filter.lastActiveDays) score += 1;

    if (score <= 2)
      return { score, label: 'בסיסי', color: 'from-green-500 to-emerald-500' };
    if (score <= 5)
      return { score, label: 'מתקדם', color: 'from-blue-500 to-cyan-500' };
    if (score <= 8)
      return { score, label: 'מורכב', color: 'from-purple-500 to-pink-500' };
    return { score, label: 'מקצועי', color: 'from-amber-500 to-orange-500' };
  };

  return (
    <div className={cn('space-y-4', className)}>
      {/* Header */}
      <div className="flex items-center justify-between p-4 bg-gradient-to-r from-white via-purple-50/30 to-pink-50/30 rounded-2xl shadow-lg border border-gray-100/50">
        <div className="flex items-center gap-3">
          <div className="p-2 rounded-full bg-gradient-to-r from-purple-500 to-pink-500 text-white shadow-lg">
            <Bookmark className="w-5 h-5" />
          </div>
          <div>
            <h3 className="text-lg font-bold bg-gradient-to-r from-purple-600 to-pink-600 bg-clip-text text-transparent">
              פילטרים שמורים
            </h3>
            <p className="text-sm text-gray-600">
              {filters.length}{' '}
              {filters.length === 1 ? 'פילטר שמור' : 'פילטרים שמורים'}
            </p>
          </div>
        </div>

        <Badge className="bg-gradient-to-r from-purple-500 to-pink-500 text-white border-0 shadow-lg px-3 py-1 font-bold">
          {filters.length}
        </Badge>
      </div>

      {/* Filters List */}
      <ScrollArea className="h-[400px] rounded-2xl">
        <div className="space-y-3 p-1">
          <AnimatePresence>
            {filters.map((filter, index) => {
              const complexity = getFilterComplexity(filter.filter);
              const isActive = activeFilterId === filter.id;

              return (
                <motion.div
                  key={filter.id}
                  initial={{ opacity: 0, y: 20, scale: 0.95 }}
                  animate={{ opacity: 1, y: 0, scale: 1 }}
                  exit={{ opacity: 0, y: -20, scale: 0.95 }}
                  transition={{
                    delay: index * 0.05,
                    type: 'spring',
                    stiffness: 300,
                    damping: 25,
                  }}
                  whileHover={{ scale: 1.02, y: -2 }}
                  className={cn(
                    'relative group cursor-pointer rounded-2xl overflow-hidden shadow-xl border-0 transition-all duration-300',
                    isActive
                      ? 'ring-4 ring-purple-400 ring-opacity-60 shadow-purple-200'
                      : 'shadow-gray-200 hover:shadow-2xl'
                  )}
                  onClick={() => onSelect(filter)}
                >
                  {/* Background gradient */}
                  <div
                    className={cn(
                      'absolute inset-0 bg-gradient-to-br transition-opacity duration-300',
                      isActive
                        ? 'from-purple-50 via-pink-50/50 to-purple-50 opacity-90'
                        : 'from-white via-gray-50/30 to-white opacity-95 group-hover:opacity-100'
                    )}
                  />

                  {/* Content */}
                  <div className="relative z-10 p-5">
                    <div className="flex items-start justify-between mb-4">
                      <div className="flex items-center gap-3">
                        {/* Default indicator */}
                        {filter.isDefault && (
                          <motion.div
                            initial={{ scale: 0 }}
                            animate={{ scale: 1 }}
                            className="p-2 rounded-full bg-gradient-to-r from-yellow-400 to-orange-400 text-white shadow-lg"
                          >
                            <Crown className="w-4 h-4" />
                          </motion.div>
                        )}

                        {/* Filter icon based on complexity */}
                        <div
                          className={cn(
                            'p-2 rounded-full text-white shadow-lg bg-gradient-to-r',
                            complexity.color
                          )}
                        >
                          {complexity.score <= 2 ? (
                            <Star className="w-4 h-4" />
                          ) : complexity.score <= 5 ? (
                            <Sparkles className="w-4 h-4" />
                          ) : complexity.score <= 8 ? (
                            <Zap className="w-4 h-4" />
                          ) : (
                            <Award className="w-4 h-4" />
                          )}
                        </div>

                        <div className="flex-1">
                          <h4 className="font-bold text-lg text-gray-800 group-hover:text-purple-700 transition-colors">
                            {filter.name}
                          </h4>
                          <p className="text-sm text-gray-500 mt-1">
                            {formatFilterSummary(filter.filter)}
                          </p>
                        </div>
                      </div>

                      {/* Actions dropdown */}
                      <DropdownMenu>
                        <DropdownMenuTrigger asChild>
                          <Button
                            variant="ghost"
                            size="sm"
                            className="h-8 w-8 p-0 opacity-0 group-hover:opacity-100 transition-opacity hover:bg-purple-100 rounded-full"
                            onClick={(e) => e.stopPropagation()}
                          >
                            <MoreVertical className="h-4 w-4 text-gray-600" />
                          </Button>
                        </DropdownMenuTrigger>
                        <DropdownMenuContent
                          align="end"
                          className="bg-white/95 backdrop-blur-sm border-0 shadow-2xl rounded-xl"
                        >
                          <DropdownMenuItem
                            onClick={() => onEdit(filter)}
                            className="hover:bg-blue-50 rounded-lg"
                          >
                            <Edit className="mr-2 h-4 w-4 text-blue-600" />
                            <span className="text-blue-700">עריכה</span>
                          </DropdownMenuItem>
                          <DropdownMenuItem
                            onClick={() => onSetDefault(filter.id)}
                            disabled={filter.isDefault}
                            className="hover:bg-yellow-50 rounded-lg"
                          >
                            <Crown className="mr-2 h-4 w-4 text-yellow-600" />
                            <span className="text-yellow-700">
                              {filter.isDefault
                                ? 'ברירת מחדל'
                                : 'הגדר כברירת מחדל'}
                            </span>
                          </DropdownMenuItem>
                          <DropdownMenuItem
                            onClick={() => onDelete(filter.id)}
                            className="hover:bg-red-50 rounded-lg"
                          >
                            <Trash className="mr-2 h-4 w-4 text-red-600" />
                            <span className="text-red-700">מחיקה</span>
                          </DropdownMenuItem>
                        </DropdownMenuContent>
                      </DropdownMenu>
                    </div>

                    {/* Filter details */}
                    <div className="space-y-3">
                      {/* Complexity badge */}
                      <div className="flex items-center justify-between">
                        <Badge
                          className={cn(
                            'text-white border-0 shadow-lg font-bold px-3 py-1 bg-gradient-to-r',
                            complexity.color
                          )}
                        >
                          {complexity.label} • {complexity.score} קריטריונים
                        </Badge>

                        <div className="flex items-center gap-2 text-xs text-gray-500">
                          <Calendar className="w-3 h-3" />
                          <span>{formatDate(filter.createdAt)}</span>
                        </div>
                      </div>

                      {/* Tags for major filter components */}
                      <div className="flex flex-wrap gap-2">
                        {filter.filter.gender && (
                          <Badge
                            variant="outline"
                            className="bg-blue-50 text-blue-700 border-blue-200 text-xs"
                          >
                            {filter.filter.gender === 'MALE' ? 'גברים' : 'נשים'}
                          </Badge>
                        )}
                        {filter.filter.ageRange && (
                          <Badge
                            variant="outline"
                            className="bg-green-50 text-green-700 border-green-200 text-xs"
                          >
                            גיל {filter.filter.ageRange.min}-
                            {filter.filter.ageRange.max}
                          </Badge>
                        )}
                        {filter.filter.cities?.length && (
                          <Badge
                            variant="outline"
                            className="bg-purple-50 text-purple-700 border-purple-200 text-xs"
                          >
                            {filter.filter.cities.length} ערים
                          </Badge>
                        )}
                        {filter.filter.isVerified && (
                          <Badge
                            variant="outline"
                            className="bg-emerald-50 text-emerald-700 border-emerald-200 text-xs"
                          >
                            מאומתים
                          </Badge>
                        )}
                      </div>
                    </div>
                  </div>

                  {/* Hover glow effect */}
                  <div className="absolute inset-0 bg-gradient-to-r from-purple-400/0 via-pink-400/0 to-purple-400/0 group-hover:from-purple-400/10 group-hover:via-pink-400/10 group-hover:to-purple-400/10 transition-all duration-500 pointer-events-none rounded-2xl"></div>

                  {/* Active indicator */}
                  {isActive && (
                    <motion.div
                      initial={{ scale: 0 }}
                      animate={{ scale: 1 }}
                      className="absolute top-3 left-3 w-3 h-3 bg-purple-500 rounded-full shadow-lg"
                    >
                      <div className="w-full h-full bg-purple-400 rounded-full animate-ping"></div>
                    </motion.div>
                  )}

                  {/* Shimmer effect on hover */}
                  <div className="absolute inset-0 bg-gradient-to-r from-transparent via-white/20 to-transparent transform -translate-x-full group-hover:translate-x-full transition-transform duration-1000 rounded-2xl"></div>
                </motion.div>
              );
            })}
          </AnimatePresence>
        </div>
      </ScrollArea>

      {/* Empty state */}
      {filters.length === 0 && (
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          className="text-center py-12 bg-gradient-to-br from-white via-gray-50/30 to-white rounded-2xl shadow-xl border border-gray-100/50"
        >
          <div className="w-20 h-20 rounded-full bg-gradient-to-br from-purple-100 to-pink-100 flex items-center justify-center mx-auto mb-6">
            <Bookmark className="w-10 h-10 text-purple-400" />
          </div>
          <h3 className="text-xl font-bold text-gray-800 mb-3">
            אין פילטרים שמורים
          </h3>
          <p className="text-gray-600 mb-6 max-w-sm mx-auto">
            שמור את הפילטרים הנוכחיים כדי לגשת אליהם בקלות בעתיד
          </p>
          <div className="flex flex-wrap gap-2 justify-center">
            <Badge
              variant="outline"
              className="bg-blue-50 text-blue-600 border-blue-200"
            >
              <Star className="w-3 h-3 mr-1" />
              חיפושים מהירים
            </Badge>
            <Badge
              variant="outline"
              className="bg-purple-50 text-purple-600 border-purple-200"
            >
              <Sparkles className="w-3 h-3 mr-1" />
              סינון מתקדם
            </Badge>
            <Badge
              variant="outline"
              className="bg-green-50 text-green-600 border-green-200"
            >
              <Award className="w-3 h-3 mr-1" />
              גישה מהירה
            </Badge>
          </div>
        </motion.div>
      )}

      {/* Quick stats */}
      {filters.length > 0 && (
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.3 }}
          className="bg-gradient-to-r from-indigo-50 via-purple-50 to-pink-50 rounded-2xl p-4 shadow-lg border border-gray-100/50"
        >
          <div className="grid grid-cols-3 gap-4 text-center">
            <div>
              <div className="text-lg font-bold text-indigo-600">
                {filters.filter((f) => f.isDefault).length}
              </div>
              <div className="text-xs text-gray-600">ברירת מחדל</div>
            </div>
            <div>
              <div className="text-lg font-bold text-purple-600">
                {
                  filters.filter((f) => getFilterComplexity(f.filter).score > 5)
                    .length
                }
              </div>
              <div className="text-xs text-gray-600">מתקדמים</div>
            </div>
            <div>
              <div className="text-lg font-bold text-pink-600">
                {Math.round(
                  filters.reduce(
                    (acc, f) => acc + getFilterComplexity(f.filter).score,
                    0
                  ) / filters.length
                )}
              </div>
              <div className="text-xs text-gray-600">ממוצע קריטריונים</div>
            </div>
          </div>
        </motion.div>
      )}
    </div>
  );
};

// Enhanced filter summary function
const formatFilterSummary = (filter: CandidatesFilter): string => {
  const parts: string[] = [];

  if (filter.searchQuery) {
    parts.push(`חיפוש: "${filter.searchQuery}"`);
  }

  if (filter.gender) {
    parts.push(`מגדר: ${filter.gender === 'MALE' ? 'גברים' : 'נשים'}`);
  }

  if (filter.ageRange) {
    if (filter.ageRange.min === filter.ageRange.max) {
      parts.push(`גיל: ${filter.ageRange.min}`);
    } else {
      parts.push(`גיל: ${filter.ageRange.min}-${filter.ageRange.max}`);
    }
  }

  if (filter.heightRange) {
    if (filter.heightRange.min === filter.heightRange.max) {
      parts.push(`גובה: ${filter.heightRange.min}ס״מ`);
    } else {
      parts.push(
        `גובה: ${filter.heightRange.min}-${filter.heightRange.max}ס״מ`
      );
    }
  }

  if (filter.cities?.length) {
    if (filter.cities.length === 1) {
      parts.push(`עיר: ${filter.cities[0]}`);
    } else {
      parts.push(`ערים: ${filter.cities.length}`);
    }
  }

  if (filter.religiousLevel) {
    parts.push(`רמה דתית: ${filter.religiousLevel}`);
  }

  if (filter.educationLevel) {
    parts.push(`השכלה: ${filter.educationLevel}`);
  }

  if (filter.maritalStatus) {
    parts.push(`מצב משפחתי: ${filter.maritalStatus}`);
  }

  if (filter.occupations?.length) {
    if (filter.occupations.length === 1) {
      parts.push(`תחום: ${filter.occupations[0]}`);
    } else {
      parts.push(`תחומי עיסוק: ${filter.occupations.length}`);
    }
  }

  if (filter.availabilityStatus) {
    const statusLabel =
      filter.availabilityStatus === 'AVAILABLE'
        ? 'פנוי/ה'
        : filter.availabilityStatus === 'DATING'
          ? 'בהכרות'
          : 'לא פנוי/ה';
    parts.push(`סטטוס: ${statusLabel}`);
  }

  if (filter.isVerified) {
    parts.push('מאומתים בלבד');
  }

  if (filter.hasReferences) {
    parts.push('עם המלצות');
  }

  if (filter.isProfileComplete) {
    parts.push('פרופיל מלא');
  }

  if (filter.lastActiveDays) {
    if (filter.lastActiveDays === 1) {
      parts.push('פעילים היום');
    } else if (filter.lastActiveDays === 7) {
      parts.push('פעילים השבוע');
    } else if (filter.lastActiveDays === 30) {
      parts.push('פעילים החודש');
    } else {
      parts.push(`פעילים ב-${filter.lastActiveDays} ימים`);
    }
  }

  if (filter.separateFiltering) {
    parts.push('סינון נפרד לפי מגדר');
  }

  if (parts.length === 0) {
    return 'פילטר בסיסי ללא קריטריונים';
  }

  if (parts.length <= 3) {
    return parts.join(' • ');
  } else {
    return `${parts.slice(0, 2).join(' • ')} ועוד ${parts.length - 2} קריטריונים`;
  }
};

export default SavedFilters;
--- End of Content for SavedFilters.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\new\Filters\SearchBar.tsx
--------------------------------------------------------------------------------
Content:
// SearchBar.tsx - גרסה סופית ומתקדמת עם תיקון z-index ו-RTL
'use client';

import React, { useState, useEffect, useRef } from 'react';
import {
  Search,
  X,
  History,
  Sparkles,
  Target,
  Crown,
  Star,
  TrendingUp,
  Zap,
} from 'lucide-react';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { motion, AnimatePresence } from 'framer-motion';
import type { Candidate } from '../types/candidates';
import { cn } from '@/lib/utils';
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from '@/components/ui/tooltip';
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
  PopoverAnchor,
} from '@/components/ui/popover';

interface SearchBarProps {
  value: string;
  onChange: (value: string) => void;
  onSelect?: (candidate: Candidate) => void;
  recentSearches?: string[];
  onSaveSearch?: (value: string) => void;
  onClearRecentSearches?: () => void;
  suggestions?: Candidate[];
  loading?: boolean;
  className?: string;
  placeholder?: string;
  autoFocus?: boolean;
  genderTarget?: 'male' | 'female' | 'all';
  separateMode?: boolean;
}

const SEARCH_CATEGORIES = [
  {
    id: 'name',
    label: 'שם',
    placeholder: 'חיפוש לפי שם...',
    icon: <Star className="w-3 h-3" />,
    gradient: 'from-blue-500 to-cyan-500',
  },
  {
    id: 'city',
    label: 'עיר',
    placeholder: 'חיפוש לפי עיר...',
    icon: <Target className="w-3 h-3" />,
    gradient: 'from-emerald-500 to-green-500',
  },
  {
    id: 'occupation',
    label: 'תחום עיסוק',
    placeholder: 'חיפוש לפי תחום עיסוק...',
    icon: <Zap className="w-3 h-3" />,
    gradient: 'from-purple-500 to-pink-500',
  },
  {
    id: 'all',
    label: 'הכל',
    placeholder: 'חיפוש בכל השדות...',
    icon: <Sparkles className="w-3 h-3" />,
    gradient: 'from-indigo-500 to-purple-500',
  },
];

const SearchBar: React.FC<SearchBarProps> = ({
  value,
  onChange,
  onSelect,
  recentSearches = [],
  onSaveSearch,
  onClearRecentSearches,
  suggestions = [],
  loading = false,
  className = '',
  placeholder = 'חיפוש מועמדים...',
  autoFocus = false,
  genderTarget = 'all',
  separateMode = false,
}) => {
  const [inputValue, setInputValue] = useState(value);
  const [showDropdown, setShowDropdown] = useState(false);
  const [isHovered, setIsHovered] = useState(false);
  const [isFocused, setIsFocused] = useState(false);
  const [searchCategory, setSearchCategory] = useState<string>('all');
  const inputRef = useRef<HTMLInputElement>(null);

  useEffect(() => {
    setInputValue(value);
  }, [value]);

  const getSearchPlaceholder = () => {
    if (separateMode) {
      const allCategoryPlaceholder =
        SEARCH_CATEGORIES.find((cat) => cat.id === 'all')?.placeholder ||
        'חיפוש בכל השדות...';
      if (genderTarget === 'male')
        return `🔍 חיפוש מועמדים - ${allCategoryPlaceholder}`;
      if (genderTarget === 'female')
        return `👑 חיפוש מועמדות - ${allCategoryPlaceholder}`;
    }
    const category = SEARCH_CATEGORIES.find((cat) => cat.id === searchCategory);
    return category?.placeholder || placeholder;
  };

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const newValue = e.target.value;
    setInputValue(newValue);
    onChange(newValue);
    if (!showDropdown) {
      setShowDropdown(true);
    }
  };

  const handleSearch = (searchValue: string) => {
    if (searchValue.trim()) {
      onChange(searchValue.trim());
      if (onSaveSearch) {
        onSaveSearch(searchValue.trim());
      }
    }
  };

  const handleKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {
    if (e.key === 'Enter' && inputValue.trim()) {
      handleSearch(inputValue);
      setShowDropdown(false);
    } else if (e.key === 'Escape') {
      setShowDropdown(false);
    }
  };

  const handleClear = () => {
    setInputValue('');
    onChange('');
    inputRef.current?.focus();
  };

  const handleSuggestionSelect = (candidate: Candidate) => {
    if (onSelect) {
      onSelect(candidate);
    } else {
      const searchText = `${candidate.firstName} ${candidate.lastName}`;
      setInputValue(searchText);
      onChange(searchText);
    }
    setShowDropdown(false);
  };

  const getStyling = () => {
    if (!separateMode || genderTarget === 'all') {
      return {
        gradient: 'from-indigo-500 via-purple-500 to-pink-500',
        ring: 'focus:ring-purple-200',
        badge: 'bg-gradient-to-r from-indigo-500 to-purple-500',
      };
    }
    if (genderTarget === 'male') {
      return {
        gradient: 'from-blue-500 to-cyan-500',
        ring: 'focus:ring-blue-200',
        badge: 'bg-gradient-to-r from-blue-500 to-cyan-500',
      };
    }
    return {
      gradient: 'from-purple-500 to-pink-500',
      ring: 'focus:ring-purple-200',
      badge: 'bg-gradient-to-r from-purple-500 to-pink-500',
    };
  };

  const styling = getStyling();

  return (
    <Popover open={showDropdown} onOpenChange={setShowDropdown}>
      <div className={cn('relative group', className)}>
        <PopoverAnchor asChild>
          <motion.div
            className={cn(
              'relative flex items-center rounded-2xl shadow-xl transition-all duration-300 backdrop-blur-sm border-0',
              `bg-gradient-to-r from-white via-gray-50/30 to-white`,
              isFocused || isHovered ? 'shadow-2xl scale-[1.02]' : 'shadow-lg',
              isFocused && `ring-2 ${styling.ring}`
            )}
            onMouseEnter={() => setIsHovered(true)}
            onMouseLeave={() => setIsHovered(false)}
            whileHover={{ y: -2 }}
            transition={{ type: 'spring', stiffness: 400, damping: 25 }}
          >
            <div
              className={cn(
                'absolute inset-0 bg-gradient-to-r opacity-5 rounded-2xl',
                styling.gradient
              )}
            />

            {separateMode && genderTarget !== 'all' && (
              <motion.div
                className="absolute left-4 top-1/2 -translate-y-1/2 z-10"
                initial={{ scale: 0 }}
                animate={{ scale: 1 }}
                transition={{ type: 'spring', stiffness: 500, damping: 25 }}
              >
                <Badge
                  className={cn(
                    'text-white border-0 shadow-lg font-bold px-3 py-1.5 rounded-xl',
                    styling.badge
                  )}
                >
                  <div className="flex items-center gap-2">
                    {genderTarget === 'male' ? (
                      <Target className="w-4 h-4" />
                    ) : (
                      <Crown className="w-4 h-4" />
                    )}
                    {genderTarget === 'male' ? 'מועמדים' : 'מועמדות'}
                  </div>
                </Badge>
              </motion.div>
            )}

            <input
              ref={inputRef}
              type="text"
              value={inputValue}
              onChange={handleInputChange}
              onKeyDown={handleKeyDown}
              onFocus={() => {
                setShowDropdown(true);
                setIsFocused(true);
              }}
              onBlur={() => setIsFocused(false)}
              placeholder={getSearchPlaceholder()}
              className={cn(
                'w-full h-14 bg-transparent border-0 rounded-2xl text-lg font-medium relative z-10',
                'placeholder:text-gray-500 text-gray-800',
                'focus:outline-none transition-all duration-200',
                separateMode ? 'pl-32 pr-16' : 'pl-6 pr-16'
              )}
              autoFocus={autoFocus}
              autoComplete="off"
              spellCheck="false"
            />

            <div className="absolute right-4 top-1/2 -translate-y-1/2 z-10">
              <motion.div
                animate={{
                  rotate: loading ? 360 : 0,
                  scale: isHovered || isFocused ? 1.1 : 1,
                }}
                transition={{
                  rotate: {
                    duration: 1,
                    repeat: loading ? Infinity : 0,
                    ease: 'linear',
                  },
                  scale: { duration: 0.2 },
                }}
                className={cn(
                  'p-2.5 rounded-full text-white shadow-lg',
                  `bg-gradient-to-r ${styling.gradient}`
                )}
              >
                <Search className="w-5 h-5" />
              </motion.div>
            </div>

            <AnimatePresence>
              {inputValue && (
                <motion.div
                  initial={{ opacity: 0, scale: 0.8 }}
                  animate={{ opacity: 1, scale: 1 }}
                  exit={{ opacity: 0, scale: 0.8 }}
                  className={cn(
                    'absolute top-1/2 -translate-y-1/2 z-10',
                    separateMode ? 'left-32' : 'left-4'
                  )}
                >
                  <TooltipProvider>
                    <Tooltip>
                      <TooltipTrigger asChild>
                        <button
                          type="button"
                          onClick={handleClear}
                          className="w-7 h-7 bg-gray-100 hover:bg-gray-200 rounded-full flex items-center justify-center transition-all duration-200 hover:scale-110 shadow-md"
                        >
                          <X className="w-4 h-4 text-gray-600" />
                        </button>
                      </TooltipTrigger>
                      <TooltipContent>
                        <p>נקה חיפוש</p>
                      </TooltipContent>
                    </Tooltip>
                  </TooltipProvider>
                </motion.div>
              )}
            </AnimatePresence>

            <div className="absolute inset-0 bg-gradient-to-r from-transparent via-white/20 to-transparent transform -translate-x-full group-hover:translate-x-full transition-transform duration-1000 rounded-2xl pointer-events-none"></div>
          </motion.div>
        </PopoverAnchor>
      </div>

      <PopoverContent
        onOpenAutoFocus={(e) => e.preventDefault()}
        className="w-[--radix-popover-trigger-width] p-0 mt-2 z-[99] border-0 shadow-2xl rounded-2xl overflow-hidden bg-white/95 backdrop-blur-xl"
      >
        <div
          className={cn('p-4 bg-gradient-to-r text-white', styling.gradient)}
        >
          <div className="flex items-center justify-between mb-3 text-right">
            <div className="text-sm opacity-90">
              {suggestions.length} תוצאות
            </div>
            <div className="flex items-center gap-2">
              <span className="font-bold">חיפוש חכם</span>
              <Sparkles className="w-5 h-5" />
            </div>
          </div>
          <div className="relative">
            <Search className="absolute right-3 top-2.5 h-4 w-4 text-white/70" />
            <input
              type="text"
              value={inputValue}
              onChange={handleInputChange}
              className="w-full bg-white/20 backdrop-blur-sm border border-white/30 rounded-xl px-4 pr-10 py-2 text-sm text-white placeholder:text-white/70 focus:outline-none focus:ring-2 focus:ring-white/50 text-right"
              placeholder="סנן תוצאות..."
            />
          </div>
        </div>

        <div className="max-h-96 overflow-y-auto">
          {loading === false &&
            suggestions.length === 0 &&
            recentSearches.length === 0 && (
              <motion.div
                initial={{ opacity: 0 }}
                animate={{ opacity: 1 }}
                className="p-8 text-center"
              >
                <div className="w-16 h-16 rounded-full bg-gradient-to-br from-gray-100 to-gray-200 flex items-center justify-center mx-auto mb-4">
                  <Search className="w-8 h-8 text-gray-400" />
                </div>
                <h3 className="font-bold text-gray-800 mb-2">
                  לא נמצאו תוצאות
                </h3>
                <p className="text-sm text-gray-500">
                  נסה לשנות את מונחי החיפוש
                </p>
              </motion.div>
            )}

          {loading === true && (
            <motion.div
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              className="p-8 text-center"
            >
              <div className="w-16 h-16 rounded-full bg-gradient-to-br from-gray-100 to-gray-200 flex items-center justify-center mx-auto mb-4">
                <Search className="w-8 h-8 text-gray-400 animate-pulse" />
              </div>
              <h3 className="font-bold text-gray-800 mb-2">מחפש...</h3>
              <p className="text-sm text-gray-500">אנא המתן...</p>
            </motion.div>
          )}

          {recentSearches.length > 0 && (
            <div className="border-b border-gray-100">
              <div className="px-4 py-3 bg-gradient-to-r from-gray-50 to-gray-100/50">
                <div className="flex justify-between items-center">
                  {onClearRecentSearches && (
                    <Button
                      variant="ghost"
                      size="sm"
                      onClick={(e) => {
                        e.stopPropagation();
                        onClearRecentSearches();
                      }}
                      className="h-6 text-xs text-gray-500 hover:text-gray-700 px-2"
                    >
                      נקה היסטוריה
                    </Button>
                  )}
                  <div className="flex items-center gap-2">
                    <span className="text-sm font-medium text-gray-700">
                      חיפושים אחרונים
                    </span>
                    <History className="w-4 h-4 text-gray-500" />
                  </div>
                </div>
              </div>
              <div className="p-2">
                {recentSearches.slice(0, 5).map((search, index) => (
                  <motion.div
                    key={`recent-${index}`}
                    initial={{ opacity: 0, x: 20 }}
                    animate={{ opacity: 1, x: 0 }}
                    transition={{ delay: index * 0.05 }}
                    className="flex items-center gap-3 px-3 py-2.5 hover:bg-gradient-to-r hover:from-blue-50 hover:to-cyan-50 rounded-xl cursor-pointer transition-all duration-200 group"
                    onClick={() => {
                      handleSearch(search);
                      setShowDropdown(false);
                    }}
                  >
                    {/* --- START RTL FIX --- */}
                    <div className="ml-auto opacity-0 group-hover:opacity-100 transition-opacity">
                      <Zap className="w-3 h-3 text-blue-500" />
                    </div>
                    <span className="text-sm font-medium text-gray-700 group-hover:text-blue-700">
                      {search}
                    </span>
                    <div className="p-1.5 rounded-lg bg-gradient-to-r from-blue-100 to-cyan-100 group-hover:from-blue-200 group-hover:to-cyan-200 transition-all duration-200">
                      <History className="h-3 w-3 text-blue-600" />
                    </div>
                    {/* --- END RTL FIX --- */}
                  </motion.div>
                ))}
              </div>
            </div>
          )}

          {suggestions.length > 0 && (
            <div>
              <div className="px-4 py-3 bg-gradient-to-r from-emerald-50 to-green-50 border-b border-gray-100">
                <div className="flex items-center justify-end gap-2">
                  <span className="text-sm font-medium text-emerald-800">
                    תוצאות מתאימות ({suggestions.length})
                  </span>
                  <Star className="w-4 h-4 text-emerald-600" />
                </div>
              </div>
              <div className="p-2 space-y-1">
                {suggestions.map((candidate, index) => (
                  <motion.div
                    key={candidate.id}
                    initial={{ opacity: 0, y: 20 }}
                    animate={{ opacity: 1, y: 0 }}
                    transition={{ delay: index * 0.05 }}
                    className="flex items-center gap-3 px-3 py-3 hover:bg-gradient-to-r hover:from-purple-50 hover:to-pink-50 rounded-xl cursor-pointer transition-all duration-200 group"
                    onClick={() => handleSuggestionSelect(candidate)}
                  >
                    {/* --- START RTL FIX --- */}
                    <div className="opacity-0 group-hover:opacity-100 transition-opacity">
                      <div className="p-1.5 rounded-lg bg-gradient-to-r from-purple-100 to-pink-100">
                        <Sparkles className="w-3 h-3 text-purple-600" />
                      </div>
                    </div>
                    <div className="flex-1 min-w-0 text-right">
                      <div className="font-medium text-gray-800 group-hover:text-purple-700 transition-colors">{`${candidate.firstName} ${candidate.lastName}`}</div>
                      <div className="text-xs text-gray-500 truncate mt-0.5">
                        {[
                          candidate.profile.city,
                          candidate.profile.occupation,
                          candidate.profile.religiousLevel,
                        ]
                          .filter(Boolean)
                          .join(' • ')}
                      </div>
                    </div>
                    <div className="relative">
                      <div className="w-10 h-10 rounded-full bg-gradient-to-br from-purple-100 to-pink-100 flex items-center justify-center group-hover:scale-110 transition-transform duration-200">
                        <span className="text-sm font-bold text-purple-600">
                          {candidate.firstName.charAt(0)}
                          {candidate.lastName.charAt(0)}
                        </span>
                      </div>
                      {candidate.isVerified && (
                        <div className="absolute -top-1 -right-1 w-4 h-4 bg-gradient-to-r from-emerald-500 to-green-500 rounded-full flex items-center justify-center">
                          <Star className="w-2 h-2 text-white" />
                        </div>
                      )}
                    </div>
                    {/* --- END RTL FIX --- */}
                  </motion.div>
                ))}
              </div>
            </div>
          )}

          <div className="md:hidden border-t border-gray-100">
            <div className="px-4 py-3 bg-gradient-to-r from-indigo-50 to-purple-50">
              <div className="flex items-center justify-end gap-2 mb-3">
                <span className="text-sm font-medium text-indigo-800">
                  חפש לפי קטגוריה
                </span>
                <TrendingUp className="w-4 h-4 text-indigo-600" />
              </div>
              <div className="grid grid-cols-2 gap-2">
                {SEARCH_CATEGORIES.map((category) => (
                  <motion.div
                    key={category.id}
                    whileHover={{ scale: 1.02 }}
                    whileTap={{ scale: 0.98 }}
                  >
                    <Button
                      variant={
                        searchCategory === category.id ? 'default' : 'outline'
                      }
                      size="sm"
                      className={cn(
                        'w-full justify-start gap-2 rounded-xl transition-all duration-200',
                        searchCategory === category.id
                          ? `bg-gradient-to-r ${category.gradient} text-white shadow-lg border-0`
                          : 'bg-white/80 hover:bg-white border border-gray-200 hover:border-gray-300'
                      )}
                      onClick={() => setSearchCategory(category.id)}
                    >
                      {category.icon}
                      <span className="text-xs">{category.label}</span>
                    </Button>
                  </motion.div>
                ))}
              </div>
            </div>
          </div>

          <div className="p-4 bg-gradient-to-r from-gray-50 to-gray-100/50 border-t border-gray-100">
            <div className="flex items-start gap-2 text-right">
              <Sparkles className="w-4 h-4 text-gray-500 mt-0.5 flex-shrink-0" />
              <div className="text-xs text-gray-600 leading-relaxed">
                <span className="font-medium">טיפ:</span> השתמש במילות מפתח כמו
                שם, עיר, או תחום עיסוק לחיפוש מדויק יותר
              </div>
            </div>
          </div>
        </div>
      </PopoverContent>
    </Popover>
  );
};

export default SearchBar;
--- End of Content for SearchBar.tsx ---

================================================================================
Directory: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\new\constants
================================================================================

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\new\constants\filterOptions.ts
--------------------------------------------------------------------------------
Content:
// /constants/filterOptions.ts
import { AvailabilityStatus } from '@prisma/client';

export const AGE_RANGE = {
  min: 18,
  max: 99,
  default: {
    min: 20,
    max: 35
  }
};

export const HEIGHT_RANGE = {
  min: 140,
  max: 210,
  default: {
    min: 150,
    max: 190
  }
};

export const RELIGIOUS_LEVELS = [
  { value: "charedi", label: "חרדי/ת" },
  { value: "charedi_modern", label: "חרדי/ת מודרני/ת" },
  { value: "dati_leumi_torani", label: "דתי/ה לאומי/ת תורני/ת" },
  { value: "dati_leumi_liberal", label: "דתי/ה לאומי/ת ליברלי/ת" },
  { value: "dati_leumi_standard", label: "דתי/ה לאומי/ת (סטנדרטי)" },
  { value: "masorti_strong", label: "מסורתי/ת (קרוב/ה לדת)" },
  { value: "masorti_light", label: "מסורתי/ת (קשר קל למסורת)" },
  {
    value: "secular_traditional_connection",
    label: "חילוני/ת עם זיקה למסורת",
  },
  { value: "secular", label: "חילוני/ת" },
  { value: "spiritual_not_religious", label: "רוחני/ת (לאו דווקא דתי/ה)" },
  { value: "other", label: "אחר (נא לפרט ב'אודות')" },
];

export const EDUCATION_LEVELS = [
  { value: 'תיכונית', label: 'השכלה תיכונית' },
  { value: 'ישיבה', label: 'ישיבה' },
  { value: 'סמינר', label: 'סמינר' },
  { value: 'תואר ראשון', label: 'תואר ראשון' },
  { value: 'תואר שני', label: 'תואר שני' },
  { value: 'דוקטורט', label: 'דוקטורט' }
];

export const MARITAL_STATUS = [
  { value: 'רווק/ה', label: 'רווק/ה' },
  { value: 'גרוש/ה', label: 'גרוש/ה' },
  { value: 'אלמן/ה', label: 'אלמן/ה' }
];

export const OCCUPATION_CATEGORIES = [
  { value: 'חינוך', label: 'חינוך והוראה' },
  { value: 'הייטק', label: 'הייטק ותוכנה' },
  { value: 'רפואה', label: 'רפואה ובריאות' },
  { value: 'משפטים', label: 'משפטים' },
  { value: 'עסקים', label: 'עסקים וכלכלה' },
  { value: 'שירותים', label: 'שירותים' },
  { value: 'אחר', label: 'אחר' }
];

export const REGIONS = [
  { value: 'ירושלים', label: 'ירושלים והסביבה' },
  { value: 'תל אביב', label: 'תל אביב והמרכז' },
  { value: 'חיפה', label: 'חיפה והצפון' },
  { value: 'באר שבע', label: 'באר שבע והדרום' },
  { value: 'יהודה ושומרון', label: 'יהודה ושומרון' }
];

export const POPULAR_CITIES = [
  'ירושלים',
  'תל אביב',
  'חיפה',
  'בני ברק',
  'פתח תקווה',
  'אשדוד',
  'נתניה',
  'באר שבע',
  'חולון',
  'רמת גן',
  'בית שמש',
  'מודיעין עילית',
  'אלעד',
  'ביתר עילית'
];

export const AVAILABILITY_STATUS_OPTIONS = [
  { 
    value: AvailabilityStatus.AVAILABLE, 
    label: 'פנוי/ה',
    description: 'מועמד/ת פנוי/ה להצעות'
  },
  { 
    value: AvailabilityStatus.DATING, 
    label: 'בתהליך הכרות',
    description: 'נמצא/ת בתהליך הכרות'
  },
  { 
    value: AvailabilityStatus.UNAVAILABLE, 
    label: 'לא פנוי/ה',
    description: 'לא פנוי/ה להצעות כרגע'
  }
];

export const SORT_OPTIONS = [
  { 
    value: 'lastActive',
    label: 'פעילות אחרונה',
    defaultOrder: 'desc'
  },
  { 
    value: 'age',
    label: 'גיל',
    defaultOrder: 'asc'
  },
  { 
    value: 'name',
    label: 'שם',
    defaultOrder: 'asc'
  },
  { 
    value: 'city',
    label: 'עיר',
    defaultOrder: 'asc'
  },
  { 
    value: 'religiousLevel',
    label: 'רמת דתיות',
    defaultOrder: 'asc'
  },
  { 
    value: 'height',
    label: 'גובה',
    defaultOrder: 'desc'
  },
  { 
    value: 'registrationDate',
    label: 'תאריך הרשמה',
    defaultOrder: 'desc'
  }
];

export const VIEW_OPTIONS = [
  {
    value: 'grid',
    label: 'תצוגת גריד',
    icon: 'LayoutGrid'
  },
  {
    value: 'list',
    label: 'תצוגת רשימה',
    icon: 'List'
  }
];

export const CARD_SIZES = [
  {
    value: 'sm',
    label: 'קטן',
    dimensions: {
      grid: 'h-64',
      list: 'h-24'
    }
  },
  {
    value: 'md',
    label: 'בינוני',
    dimensions: {
      grid: 'h-80',
      list: 'h-32'
    }
  },
  {
    value: 'lg',
    label: 'גדול',
    dimensions: {
      grid: 'h-96',
      list: 'h-40'
    }
  }
];

export const GROUP_BY_OPTIONS = [
  {
    value: 'none',
    label: 'ללא קיבוץ'
  },
  {
    value: 'city',
    label: 'עיר'
  },
  {
    value: 'religiousLevel',
    label: 'רמת דתיות'
  },
  {
    value: 'ageGroup',
    label: 'קבוצת גיל'
  },
  {
    value: 'availability',
    label: 'סטטוס זמינות'
  }
];

export const DEFAULT_FILTERS = {
  gender: undefined,
  ageRange: AGE_RANGE.default,
  heightRange: HEIGHT_RANGE.default,
  cities: [],
  religiousLevel: undefined,
  occupations: [],
  availability: undefined,
  searchQuery: '',
  isVerified: undefined,
  hasReferences: undefined,
  lastActiveDays: undefined
};

export const FILTER_CATEGORIES = [
  {
    id: 'basic',
    label: 'פילטרים בסיסיים',
    filters: ['gender', 'ageRange', 'cities', 'religiousLevel']
  },
  {
    id: 'advanced',
    label: 'פילטרים מתקדמים',
    filters: ['heightRange', 'occupations', 'education', 'maritalStatus']
  },
  {
    id: 'status',
    label: 'סטטוס ואימות',
    filters: ['availability', 'isVerified', 'hasReferences', 'lastActiveDays']
  }
];
--- End of Content for filterOptions.ts ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\new\constants\matchingCriteria.ts
--------------------------------------------------------------------------------
Content:
// /constants/matchingCriteria.ts

export const CRITERIA_WEIGHTS = {
    // קריטריונים בסיסיים
    age: {
      weight: 15,
      description: 'התאמת גיל',
      thresholds: {
        perfect: 2,  // הפרש של עד שנתיים
        good: 5,     // הפרש של עד 5 שנים
        fair: 8      // הפרש של עד 8 שנים
      }
    },
    
    religiousLevel: {
      weight: 20,
      description: 'התאמה דתית',
      bonusPoints: {
        exactMatch: 1.0,        // התאמה מדויקת
        adjacentLevel: 0.8,     // רמה דתית סמוכה
        twoLevelsApart: 0.4     // הפרש של שתי רמות
      }
    },
  
    location: {
      weight: 10,
      description: 'מיקום גיאוגרפי',
      bonusPoints: {
        sameCity: 1.0,          // אותה עיר
        sameRegion: 0.8,        // אותו אזור
        preferredCity: 0.7,     // עיר מועדפת
        differentRegion: 0.4    // אזור אחר
      }
    },
  
    // קריטריונים מקצועיים והשכלתיים
    education: {
      weight: 8,
      description: 'רמת השכלה',
      bonusPoints: {
        sameLevel: 1.0,         // רמת השכלה זהה
        adjacentLevel: 0.8,     // רמת השכלה סמוכה
        meetPreferences: 0.7    // עומד בהעדפות
      }
    },
  
    occupation: {
      weight: 7,
      description: 'תחום עיסוק',
      bonusPoints: {
        sameField: 1.0,         // אותו תחום
        relatedField: 0.8,      // תחום קרוב
        meetPreferences: 0.7    // עומד בהעדפות
      }
    },
  
    // קריטריונים אישיים
    familyBackground: {
      weight: 12,
      description: 'רקע משפחתי',
      factors: {
        origin: 0.4,            // מוצא
        parentStatus: 0.3,      // מצב הורים
        familyType: 0.3         // סוג משפחה
      }
    },
  
    personalityMatch: {
      weight: 15,
      description: 'התאמה אישיותית',
      factors: {
        hobbies: 0.3,           // תחביבים משותפים
        lifestyle: 0.4,         // סגנון חיים
        values: 0.3             // ערכים משותפים
      }
    },
  
    // גורמים נוספים
    preferences: {
      weight: 8,
      description: 'העדפות אישיות',
      factors: {
        agePreference: 0.3,     // העדפות גיל
        locationPreference: 0.3, // העדפות מיקום
        otherPreferences: 0.4   // העדפות נוספות
      }
    },
  
    compatibility: {
      weight: 5,
      description: 'תאימות כללית',
      factors: {
        language: 0.3,          // שפה משותפת
        culture: 0.4,           // תרבות
        lifestyle: 0.3          // סגנון חיים
      }
    }
  };
  
  // סף ציון להתאמה טובה
  export const MATCH_THRESHOLDS = {
    EXCELLENT: 85,  // התאמה מצוינת
    GOOD: 75,       // התאמה טובה
    FAIR: 65,       // התאמה סבירה
    POOR: 50        // התאמה חלשה
  };
  
  // משקלים יחסיים לפי סוג התאמה
  export const MATCH_TYPE_WEIGHTS = {
    PRECISE: {     // התאמה מדויקת
      exact: 1.0,
      similar: 0.8,
      partial: 0.5
    },
    FLEXIBLE: {    // התאמה גמישה
      exact: 0.8,
      similar: 1.0,
      partial: 0.7
    },
    OPEN: {        // התאמה פתוחה
      exact: 0.7,
      similar: 0.9,
      partial: 1.0
    }
  };
  
  // הגדרת קטגוריות להתאמה
  export const MATCH_CATEGORIES = {
    IMMEDIATE: {
      minScore: 90,
      label: 'התאמה מיידית',
      description: 'התאמה גבוהה מאוד, מומלץ ליצור קשר בהקדם'
    },
    HIGH: {
      minScore: 80,
      label: 'התאמה גבוהה',
      description: 'התאמה טובה מאוד, שווה לבדוק'
    },
    GOOD: {
      minScore: 70,
      label: 'התאמה טובה',
      description: 'יש פוטנציאל טוב להתאמה'
    },
    MODERATE: {
      minScore: 60,
      label: 'התאמה בינונית',
      description: 'יש נקודות משותפות, אבל גם הבדלים'
    },
    LOW: {
      minScore: 50,
      label: 'התאמה נמוכה',
      description: 'יש פערים משמעותיים בין המועמדים'
    }
  };
--- End of Content for matchingCriteria.ts ---

================================================================================
Directory: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\new\dialogs
================================================================================

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\new\dialogs\ActionDialogs.tsx
--------------------------------------------------------------------------------
Content:
'use client';

import React, { useState, useEffect } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogFooter,
  DialogDescription,
} from '@/components/ui/dialog';
import { Priority, MatchSuggestionStatus } from '@prisma/client';
import { Alert, AlertDescription } from '@/components/ui/alert';
import {
  Clock,
  Mail,
  Loader2,
  Send,
  User,
  Sparkles,
  CheckCircle,
  Heart,
  MessageCircle,
  Calendar,
  AlertCircle,
  X,
} from 'lucide-react';
import type { Candidate } from '../types/candidates';
import { cn } from '@/lib/utils';
import { Badge } from '@/components/ui/badge';
import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';
import { getRelativeCloudinaryPath, getInitials } from '@/lib/utils';

interface NewSuggestionFormData {
  firstPartyId: string;
  secondPartyId: string;
  priority: Priority;
  status: MatchSuggestionStatus;
}

interface ActionDialogsProps {
  suggestDialog: {
    isOpen: boolean;
    onClose: () => void;
    onSubmit: (data: NewSuggestionFormData) => Promise<void>;
    selectedCandidate: Candidate | null;
  };
  availabilityDialog: {
    isOpen: boolean;
    onClose: () => void;
    onCheck: (candidate: Candidate) => Promise<void>;
    selectedCandidate: Candidate | null;
  };
  inviteDialog: {
    isOpen: boolean;
    onClose: () => void;
    onInvite: (candidate: Candidate, email: string) => Promise<void>;
    selectedCandidate: Candidate | null;
  };
}

// Enhanced Dialog Header Component
const EnhancedDialogHeader: React.FC<{
  title: string;
  description: string;
  candidate: Candidate | null;
  icon: React.ReactNode;
  gradient: string;
}> = ({ title, description, candidate, icon, gradient }) => {
  const mainImage = candidate?.images?.find((img) => img.isMain);

  return (
    <div
      className={cn(
        'relative bg-gradient-to-br overflow-hidden rounded-t-3xl -mx-6 -mt-6 mb-6',
        gradient
      )}
    >
      {/* Background decorative elements */}
      <div className="absolute inset-0">
        <div className="absolute top-0 right-0 w-32 h-32 bg-white/20 rounded-full blur-2xl"></div>
        <div className="absolute bottom-0 left-0 w-24 h-24 bg-white/10 rounded-full blur-xl"></div>
      </div>

      <div className="relative z-10 p-6 text-white">
        <div className="flex items-center gap-4 mb-4">
          <div className="p-3 rounded-full bg-white/20 backdrop-blur-sm shadow-lg">
            {icon}
          </div>
          <div>
            <DialogTitle className="text-2xl font-bold text-white mb-1">
              {title}
            </DialogTitle>
            <DialogDescription className="text-white/90 text-lg">
              {description}
            </DialogDescription>
          </div>
        </div>

        {candidate && (
          <div className="flex items-center gap-3 p-3 bg-white/10 backdrop-blur-sm rounded-xl border border-white/20">
            <Avatar className="w-12 h-12 border-2 border-white/30 shadow-lg">
              {mainImage ? (
                <AvatarImage
                  src={getRelativeCloudinaryPath(mainImage.url)}
                  alt={`${candidate.firstName} ${candidate.lastName}`}
                />
              ) : (
                <AvatarFallback className="bg-white/20 text-white font-bold">
                  {getInitials(`${candidate.firstName} ${candidate.lastName}`)}
                </AvatarFallback>
              )}
            </Avatar>
            <div>
              <h3 className="font-bold text-white text-lg">
                {candidate.firstName} {candidate.lastName}
              </h3>
              <div className="flex items-center gap-2 mt-1">
                <Badge className="bg-white/20 text-white border-white/30 text-xs">
                  {candidate.profile.city || 'לא צוין'}
                </Badge>
                <Badge className="bg-white/20 text-white border-white/30 text-xs">
                  {candidate.profile.availabilityStatus === 'AVAILABLE'
                    ? 'זמין/ה'
                    : 'לא זמין/ה'}
                </Badge>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export const ActionDialogs: React.FC<ActionDialogsProps> = ({
  suggestDialog,
  availabilityDialog,
  inviteDialog,
}) => {
  // State for invite dialog
  const [inviteEmail, setInviteEmail] = useState('');
  const [isInviting, setIsInviting] = useState(false);
  const [inviteError, setInviteError] = useState<string | null>(null);
  const [inviteSuccess, setInviteSuccess] = useState(false);

  // State for availability dialog
  const [isChecking, setIsChecking] = useState(false);
  const [availabilityError, setAvailabilityError] = useState<string | null>(
    null
  );
  const [availabilitySuccess, setAvailabilitySuccess] = useState(false);

  // Auto-fill email when dialog opens
  useEffect(() => {
    if (inviteDialog.isOpen && inviteDialog.selectedCandidate) {
      setInviteEmail(inviteDialog.selectedCandidate.email || '');
      setInviteError(null);
      setInviteSuccess(false);
    } else {
      setInviteEmail('');
      setInviteError(null);
      setInviteSuccess(false);
    }
  }, [inviteDialog.isOpen, inviteDialog.selectedCandidate]);

  // Reset availability dialog state
  useEffect(() => {
    if (availabilityDialog.isOpen) {
      setAvailabilityError(null);
      setAvailabilitySuccess(false);
    }
  }, [availabilityDialog.isOpen]);

  // Handler for invite submission
  const handleInviteSubmit = async () => {
    if (!inviteDialog.selectedCandidate || !inviteEmail) return;

    try {
      setIsInviting(true);
      setInviteError(null);
      await inviteDialog.onInvite(inviteDialog.selectedCandidate, inviteEmail);
      setInviteSuccess(true);

      // Auto-close after success
      setTimeout(() => {
        inviteDialog.onClose();
      }, 2000);
    } catch (error) {
      setInviteError(
        error instanceof Error ? error.message : 'שגיאה בשליחת ההזמנה'
      );
    } finally {
      setIsInviting(false);
    }
  };

  // Handler for availability check
  const handleAvailabilityCheck = async () => {
    if (!availabilityDialog.selectedCandidate) return;

    try {
      setIsChecking(true);
      setAvailabilityError(null);
      await availabilityDialog.onCheck(availabilityDialog.selectedCandidate);
      setAvailabilitySuccess(true);

      // Auto-close after success
      setTimeout(() => {
        availabilityDialog.onClose();
      }, 2000);
    } catch (error) {
      setAvailabilityError(
        error instanceof Error ? error.message : 'שגיאה בבדיקת הזמינות'
      );
    } finally {
      setIsChecking(false);
    }
  };

  const validateEmail = (email: string) => {
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    return emailRegex.test(email);
  };

  return (
    <>
      {/* Invite Dialog */}
      <Dialog open={inviteDialog.isOpen} onOpenChange={inviteDialog.onClose}>
        <DialogContent className="sm:max-w-md border-0 shadow-2xl bg-white rounded-3xl overflow-hidden">
          <EnhancedDialogHeader
            title="שליחת הזמנה למועמד"
            description="שלח הזמנה אישית להצטרפות למערכת"
            candidate={inviteDialog.selectedCandidate}
            icon={<Send className="w-8 h-8" />}
            gradient="from-purple-500 to-indigo-500"
          />

          <div className="space-y-6 p-6 -mt-6">
            {inviteSuccess ? (
              <div className="text-center py-8">
                <div className="w-16 h-16 bg-gradient-to-r from-green-500 to-emerald-500 rounded-full flex items-center justify-center mx-auto mb-4 shadow-lg">
                  <CheckCircle className="w-8 h-8 text-white" />
                </div>
                <h3 className="text-xl font-bold text-green-800 mb-2">
                  ההזמנה נשלחה בהצלחה!
                </h3>
                <p className="text-green-600">המועמד יקבל הודעה בדוא&apos;ל</p>
              </div>
            ) : (
              <>
                <div className="space-y-3">
                  <Label className="text-sm font-bold text-gray-700 flex items-center gap-2">
                    <Mail className="w-4 h-4 text-purple-500" />
                    כתובת אימייל
                  </Label>
                  <div className="relative">
                    <Input
                      type="email"
                      value={inviteEmail}
                      onChange={(e) => {
                        setInviteEmail(e.target.value);
                        setInviteError(null);
                      }}
                      placeholder="הזן כתובת אימייל"
                      className={cn(
                        'pr-12 h-12 bg-gray-50 border-2 border-gray-200 focus:border-purple-400 focus:ring-purple-200 rounded-xl transition-all duration-300',
                        !validateEmail(inviteEmail) &&
                          inviteEmail.length > 0 &&
                          'border-red-300 focus:border-red-400'
                      )}
                      dir="ltr"
                    />
                    <div className="absolute left-3 top-1/2 transform -translate-y-1/2">
                      <Mail className="w-5 h-5 text-gray-400" />
                    </div>
                  </div>
                  {inviteEmail && !validateEmail(inviteEmail) && (
                    <p className="text-red-500 text-sm flex items-center gap-1">
                      <AlertCircle className="w-4 h-4" />
                      כתובת אימייל לא תקינה
                    </p>
                  )}
                </div>

                {inviteError && (
                  <Alert className="border-red-200 bg-red-50">
                    <AlertCircle className="h-4 w-4 text-red-600" />
                    <AlertDescription className="text-red-700 font-medium">
                      {inviteError}
                    </AlertDescription>
                  </Alert>
                )}

                <div className="bg-gradient-to-r from-purple-50 to-indigo-50 p-4 rounded-xl border border-purple-100">
                  <h4 className="font-bold text-purple-800 mb-2 flex items-center gap-2">
                    <Sparkles className="w-4 h-4" />
                    מה יקרה לאחר השליחה?
                  </h4>
                  <ul className="text-sm text-purple-700 space-y-1">
                    <li>• המועמד יקבל הזמנה אישית בדוא&quot;ל</li>
                    <li>• יוכל להירשם ולהשלים את פרטיו</li>
                    <li>• תקבל הודעה כשהמועמד יצטרף</li>
                  </ul>
                </div>
              </>
            )}
          </div>

          {!inviteSuccess && (
            <DialogFooter className="p-6 pt-0 gap-3">
              <Button
                variant="outline"
                onClick={inviteDialog.onClose}
                disabled={isInviting}
                className="border-2 border-gray-200 hover:bg-gray-50 rounded-xl font-medium"
              >
                ביטול
              </Button>
              <Button
                onClick={handleInviteSubmit}
                disabled={
                  isInviting || !inviteEmail || !validateEmail(inviteEmail)
                }
                className="bg-gradient-to-r from-purple-600 to-indigo-600 hover:from-purple-700 hover:to-indigo-700 text-white shadow-lg hover:shadow-xl transition-all duration-300 rounded-xl font-bold px-6"
              >
                {isInviting ? (
                  <Loader2 className="ml-2 h-5 w-5 animate-spin" />
                ) : (
                  <Send className="ml-2 h-5 w-5" />
                )}
                {isInviting ? 'שולח...' : 'שלח הזמנה'}
              </Button>
            </DialogFooter>
          )}
        </DialogContent>
      </Dialog>

      {/* Availability Check Dialog */}
      <Dialog
        open={availabilityDialog.isOpen}
        onOpenChange={availabilityDialog.onClose}
      >
        <DialogContent className="sm:max-w-md border-0 shadow-2xl bg-white rounded-3xl overflow-hidden">
          <EnhancedDialogHeader
            title="בדיקת זמינות"
            description="בדוק זמינות המועמד לפגישה"
            candidate={availabilityDialog.selectedCandidate}
            icon={<Calendar className="w-8 h-8" />}
            gradient="from-orange-500 to-amber-500"
          />

          <div className="space-y-6 p-6 -mt-6">
            {availabilitySuccess ? (
              <div className="text-center py-8">
                <div className="w-16 h-16 bg-gradient-to-r from-green-500 to-emerald-500 rounded-full flex items-center justify-center mx-auto mb-4 shadow-lg">
                  <CheckCircle className="w-8 h-8 text-white" />
                </div>
                <h3 className="text-xl font-bold text-green-800 mb-2">
                  בקשת זמינות נשלחה!
                </h3>
                <p className="text-green-600">
                  המועמד יקבל הודעה ויוכל לעדכן זמינות
                </p>
              </div>
            ) : (
              <>
                <div className="bg-gradient-to-r from-orange-50 to-amber-50 p-4 rounded-xl border border-orange-100">
                  <h4 className="font-bold text-orange-800 mb-2 flex items-center gap-2">
                    <Clock className="w-4 h-4" />
                    מה תכלול בדיקת הזמינות?
                  </h4>
                  <ul className="text-sm text-orange-700 space-y-1">
                    <li>• שליחת הודעה למועמד</li>
                    <li>• בקשה לעדכון לוח זמנים</li>
                    <li>• אפשרות לתיאום פגישה</li>
                    <li>• עדכון סטטוס זמינות</li>
                  </ul>
                </div>

                {availabilityError && (
                  <Alert className="border-red-200 bg-red-50">
                    <AlertCircle className="h-4 w-4 text-red-600" />
                    <AlertDescription className="text-red-700 font-medium">
                      {availabilityError}
                    </AlertDescription>
                  </Alert>
                )}

                <div className="bg-gray-50 p-4 rounded-xl border border-gray-200">
                  <div className="flex items-center gap-3 mb-3">
                    <MessageCircle className="w-5 h-5 text-blue-500" />
                    <span className="font-medium text-gray-800">
                      הודעה שתישלח:
                    </span>
                  </div>
                  <p className="text-sm text-gray-600 bg-white p-3 rounded-lg border italic">
                    &quot;שלום {availabilityDialog.selectedCandidate?.firstName}
                    , השדכן מעוניין לבדוק את הזמינות שלך לפגישה. אנא עדכן את לוח
                    הזמנים שלך במערכת.&quot;
                  </p>
                </div>
              </>
            )}
          </div>

          {!availabilitySuccess && (
            <DialogFooter className="p-6 pt-0 gap-3">
              <Button
                variant="outline"
                onClick={availabilityDialog.onClose}
                disabled={isChecking}
                className="border-2 border-gray-200 hover:bg-gray-50 rounded-xl font-medium"
              >
                ביטול
              </Button>
              <Button
                onClick={handleAvailabilityCheck}
                disabled={isChecking}
                className="bg-gradient-to-r from-orange-600 to-amber-600 hover:from-orange-700 hover:to-amber-700 text-white shadow-lg hover:shadow-xl transition-all duration-300 rounded-xl font-bold px-6"
              >
                {isChecking ? (
                  <Loader2 className="ml-2 h-5 w-5 animate-spin" />
                ) : (
                  <Clock className="ml-2 h-5 w-5" />
                )}
                {isChecking ? 'בודק...' : 'בדוק זמינות'}
              </Button>
            </DialogFooter>
          )}
        </DialogContent>
      </Dialog>

      {/* Suggest Match Dialog */}
      <Dialog open={suggestDialog.isOpen} onOpenChange={suggestDialog.onClose}>
        <DialogContent className="sm:max-w-md border-0 shadow-2xl bg-white rounded-3xl overflow-hidden">
          <EnhancedDialogHeader
            title="הצעת שידוך חדשה"
            description="צור הצעת שידוך מותאמת אישית"
            candidate={suggestDialog.selectedCandidate}
            icon={<Heart className="w-8 h-8" />}
            gradient="from-pink-500 to-rose-500"
          />

          <div className="p-6 -mt-6">
            <div className="bg-gradient-to-r from-pink-50 to-rose-50 p-4 rounded-xl border border-pink-100">
              <h4 className="font-bold text-pink-800 mb-2 flex items-center gap-2">
                <Sparkles className="w-4 h-4" />
                השלב הבא
              </h4>
              <p className="text-sm text-pink-700">
                הקליקו על &quot;המשך&quot; כדי לפתוח את טופס יצירת ההצעה המלא עם
                כל האפשרויות והפרטים הנדרשים.
              </p>
            </div>
          </div>

          <DialogFooter className="p-6 pt-0 gap-3">
            <Button
              variant="outline"
              onClick={suggestDialog.onClose}
              className="border-2 border-gray-200 hover:bg-gray-50 rounded-xl font-medium"
            >
              ביטול
            </Button>
            <Button
              onClick={suggestDialog.onClose}
              className="bg-gradient-to-r from-pink-600 to-rose-600 hover:from-pink-700 hover:to-rose-700 text-white shadow-lg hover:shadow-xl transition-all duration-300 rounded-xl font-bold px-6"
            >
              <Heart className="ml-2 h-5 w-5" />
              המשך ליצירת הצעה
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </>
  );
};

export default ActionDialogs;
--- End of Content for ActionDialogs.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\new\dialogs\AddManualCandidateDialog.tsx
--------------------------------------------------------------------------------
Content:
"use client";

import React, { useState, useCallback } from "react";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription,
  DialogFooter,
  DialogClose,
} from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { toast } from "sonner";
import { Loader2, UserPlus, X, UploadCloud, Trash2 } from "lucide-react";
import { Checkbox } from "@/components/ui/checkbox";
import Image from "next/image";
import { Gender } from "@prisma/client";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { DatePicker } from "@/components/ui/date-picker";
import {
  RadioGroup,
  RadioGroupItem,
} from "@/components/ui/radio-group";

interface AddManualCandidateDialogProps {
  isOpen: boolean;
  onClose: () => void;
  onCandidateAdded: () => void;
}

const MAX_IMAGES = 5;
const MAX_IMAGE_SIZE_MB = 5;

export const AddManualCandidateDialog: React.FC<
  AddManualCandidateDialogProps
> = ({ isOpen, onClose, onCandidateAdded }) => {
  const [firstName, setFirstName] = useState("");
  const [lastName, setLastName] = useState("");
  const [email, setEmail] = useState("");
  const [gender, setGender] = useState<Gender | undefined>(undefined);
  const [birthDate, setBirthDate] = useState<Date | undefined>(undefined);
  const [manualEntryText, setManualEntryText] = useState("");
  const [images, setImages] = useState<File[]>([]);
  const [imagePreviews, setImagePreviews] = useState<string[]>([]);
  const [sendInvite, setSendInvite] = useState(false);
  const [isSaving, setIsSaving] = useState(false);
  const [birthDateInputMode, setBirthDateInputMode] = useState<"date" | "age">(
    "date"
  );
  const [ageInput, setAgeInput] = useState<string>("");

  const resetForm = useCallback(() => {
    setFirstName("");
    setLastName("");
    setEmail("");
    setGender(undefined);
    setBirthDate(undefined);
    setManualEntryText("");
    setImages([]);
    setImagePreviews([]);
    setSendInvite(false);
    setIsSaving(false);
    setBirthDateInputMode("date");
    setAgeInput("");
  }, []);

  const handleClose = () => {
    resetForm();
    onClose();
  };

  const handleImageChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    if (event.target.files) {
      const newFiles = Array.from(event.target.files);
      const validFiles: File[] = [];
      const validPreviews: string[] = [];

      newFiles.forEach((file) => {
        if (images.length + validFiles.length < MAX_IMAGES) {
          if (file.size <= MAX_IMAGE_SIZE_MB * 1024 * 1024) {
            validFiles.push(file);
            validPreviews.push(URL.createObjectURL(file));
          } else {
            toast.error(
              `הקובץ ${file.name} גדול מדי (מקסימום ${MAX_IMAGE_SIZE_MB}MB).`
            );
          }
        } else {
          toast.warning(`ניתן להעלות עד ${MAX_IMAGES} תמונות.`);
        }
      });

      setImages((prev) => [...prev, ...validFiles]);
      setImagePreviews((prev) => [...prev, ...validPreviews]);
    }
  };

  const removeImage = (index: number) => {
    const newImages = images.filter((_, i) => i !== index);
    const newImagePreviews = imagePreviews.filter((_, i) => i !== index);
    setImages(newImages);
    setImagePreviews(newImagePreviews);
  };

  const handleSubmit = async (event: React.FormEvent) => {
    event.preventDefault();
    setIsSaving(true);

    if (!firstName || !lastName || !gender || !manualEntryText) {
      toast.error(
        "נא למלא את כל שדות החובה: שם פרטי, שם משפחה, מין וטקסט חופשי."
      );
      setIsSaving(false);
      return;
    }

    let finalBirthDate: Date | undefined;
    let isBirthDateApproximate: boolean = false;

    if (birthDateInputMode === "date") {
      if (!birthDate) {
        toast.error("נא לבחור תאריך לידה.");
        setIsSaving(false);
        return;
      }
      finalBirthDate = birthDate;
      isBirthDateApproximate = false;
    } else {
      const ageNum = parseInt(ageInput, 10);
      if (isNaN(ageNum) || ageNum <= 0 || ageNum > 120) {
        toast.error("נא להזין גיל תקין (בין 1 ל-120).");
        setIsSaving(false);
        return;
      }
      const currentYear = new Date().getFullYear();
      const birthYear = currentYear - ageNum;
      finalBirthDate = new Date(birthYear, 0, 1);
      isBirthDateApproximate = true;
    }

    if (!finalBirthDate) {
        toast.error("שגיאה בקביעת תאריך לידה. נא לבדוק את הקלט.");
        setIsSaving(false);
        return;
    }

    const formData = new FormData();
    formData.append("firstName", firstName);
    formData.append("lastName", lastName);
    if (email) formData.append("email", email);
    formData.append("gender", gender);
    formData.append("birthDate", finalBirthDate.toISOString());
    formData.append("birthDateIsApproximate", String(isBirthDateApproximate));
    formData.append("manualEntryText", manualEntryText);
    images.forEach((image) => {
      formData.append("images", image);
    });

    try {
      const response = await fetch("/api/matchmaker/candidates/manual", {
        method: "POST",
        body: formData,
      });

      const result = await response.json();

      if (response.ok && result.success) {
        if (sendInvite && email && result.candidate?.id) {
           const promise = fetch(`/api/matchmaker/candidates/${result.candidate.id}/invite-setup`, {
               method: 'POST',
               headers: { 'Content-Type': 'application/json' },
               body: JSON.stringify({ email }),
           }).then(async (inviteResponse) => {
               if (!inviteResponse.ok) {
                   const errorData = await inviteResponse.json().catch(() => ({}));
                   throw new Error(errorData.error || 'שליחת ההזמנה נכשלה.');
               }
               return inviteResponse.json();
           });

           toast.promise(promise, {
               loading: 'מוסיף מועמד ושולח הזמנה...',
               success: 'המועמד נוסף וההזמנה נשלחה בהצלחה!',
               error: (err: Error) => `המועמד נוסף, אך שליחת ההזמנה נכשלה: ${err.message}`,
           });
        } else {
            toast.success("המועמד הידני נוסף בהצלחה!");
        }

        onCandidateAdded();
        handleClose();
      } else {
        throw new Error(result.error || "שגיאה בהוספת המועמד.");
      }
    } catch (error) {
      console.error("Error adding manual candidate:", error);
      toast.error(
        "שגיאה בהוספת המועמד: " +
          (error instanceof Error ? error.message : "שגיאה לא ידועה")
      );
    } finally {
      setIsSaving(false);
    }
  };

  return (
    <Dialog open={isOpen} onOpenChange={(open) => { if (!open) handleClose(); }}>
      <DialogContent className="max-w-2xl">
        <DialogClose asChild>
          <button className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground p-1">
            <X className="h-4 w-4" />
            <span className="sr-only">סגור</span>
          </button>
        </DialogClose>

        <DialogHeader>
          <DialogTitle className="flex items-center gap-2 text-right">
            <UserPlus className="w-6 h-6 text-primary" />
            הוספת מועמד ידנית
          </DialogTitle>
          <DialogDescription className="text-right">
            הזן את פרטי המועמד שברצונך להוסיף למערכת באופן ידני.
          </DialogDescription>
        </DialogHeader>

        <form
          onSubmit={handleSubmit}
          className="space-y-6 py-4 max-h-[70vh] overflow-y-auto pr-2 pl-1"
        >
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <Label htmlFor="firstName" className="text-right block">
                שם פרטי <span className="text-red-500">*</span>
              </Label>
              <Input
                id="firstName"
                value={firstName}
                onChange={(e) => setFirstName(e.target.value)}
                placeholder="לדוגמה: ישראל"
                required
                dir="rtl"
              />
            </div>
            <div>
              <Label htmlFor="lastName" className="text-right block">
                שם משפחה <span className="text-red-500">*</span>
              </Label>
              <Input
                id="lastName"
                value={lastName}
                onChange={(e) => setLastName(e.target.value)}
                placeholder="לדוגמה: ישראלי"
                required
                dir="rtl"
              />
            </div>
          </div>

          <div>
            <Label htmlFor="email" className="text-right block">
              כתובת אימייל (אופציונלי)
            </Label>
            <Input
              id="email"
              type="email"
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              placeholder="לדוגמה: user@example.com"
              dir="ltr"
            />
            <p className="text-xs text-gray-500 mt-1 text-right">
              אם לא תסופק כתובת אימייל, תיווצר כתובת פנימית עבור המערכת.
            </p>
          </div>

          <div className="flex items-center space-x-2 rtl:space-x-reverse pt-2">
            <Checkbox
              id="sendInvite"
              checked={sendInvite}
              onCheckedChange={(checked) => setSendInvite(Boolean(checked))}
              disabled={!email || isSaving}
            />
            <Label
              htmlFor="sendInvite"
              className={`cursor-pointer transition-colors ${!email ? 'text-gray-400 cursor-not-allowed' : 'text-gray-700'}`}
            >
              שלח הזמנה למועמד/ת להגדרת חשבון לאחר ההוספה
            </Label>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <Label htmlFor="gender" className="text-right block">
                מין <span className="text-red-500">*</span>
              </Label>
              <Select
                value={gender}
                onValueChange={(value) => setGender(value as Gender)}
              >
                <SelectTrigger id="gender" dir="rtl">
                  <SelectValue placeholder="בחר/י מין" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value={Gender.MALE}>זכר</SelectItem>
                  <SelectItem value={Gender.FEMALE}>נקבה</SelectItem>
                </SelectContent>
              </Select>
            </div>

            <div>
              <div>
                <Label className="text-right block mb-2">
                  אופן הזנת גיל/תאריך לידה <span className="text-red-500">*</span>
                </Label>
                <RadioGroup
                  dir="rtl"
                  value={birthDateInputMode}
                  onValueChange={(value: "date" | "age") => {
                    setBirthDateInputMode(value);
                    if (value === "date") {
                      setAgeInput("");
                    } else {
                      setBirthDate(undefined);
                    }
                  }}
                  className="flex space-x-4 rtl:space-x-reverse mb-3"
                >
                  <div className="flex items-center space-x-2 rtl:space-x-reverse">
                    <RadioGroupItem value="date" id="r-date" />
                    <Label htmlFor="r-date" className="cursor-pointer">לפי תאריך לידה</Label>
                  </div>
                  <div className="flex items-center space-x-2 rtl:space-x-reverse">
                    <RadioGroupItem value="age" id="r-age" />
                    <Label htmlFor="r-age" className="cursor-pointer">לפי גיל</Label>
                  </div>
                </RadioGroup>
              </div>

              {birthDateInputMode === "date" ? (
                <div>
                  <Label htmlFor="birthDate" className="text-right block">
                    תאריך לידה <span className="text-red-500">*</span>
                  </Label>
                  <DatePicker
                    value={
                      birthDate ? { from: birthDate, to: undefined } : undefined
                    }
                    onChange={({ from }) => setBirthDate(from)}
                    isRange={false}
                    placeholder="בחר תאריך לידה"
                    className="w-full"
                  />
                </div>
              ) : (
                <div>
                  <Label htmlFor="ageInput" className="text-right block">
                    גיל (משוער) <span className="text-red-500">*</span>
                  </Label>
                  <Input
                    id="ageInput"
                    type="number"
                    value={ageInput}
                    onChange={(e) => setAgeInput(e.target.value)}
                    placeholder="לדוגמה: 25"
                    required={birthDateInputMode === "age"}
                    dir="rtl"
                    min="1"
                    max="120"
                  />
                   <p className="text-xs text-gray-500 mt-1 text-right">
                    יוזן תאריך לידה משוער (1 בינואר של שנת הלידה) בהתאם לגיל שהוזן.
                  </p>
                </div>
              )}
            </div>
          </div>

          <div>
            <Label htmlFor="manualEntryText" className="text-right block">
              טקסט חופשי על המועמד <span className="text-red-500">*</span>
            </Label>
            <Textarea
              id="manualEntryText"
              value={manualEntryText}
              onChange={(e) => setManualEntryText(e.target.value)}
              placeholder="ספר על המועמד, רקע, תכונות, מה מחפש/ת וכו'..."
              rows={6}
              required
              className="min-h-[100px]"
              dir="rtl"
            />
          </div>

          <div>
            <Label htmlFor="image-upload" className="text-right block">
              תמונות (עד {MAX_IMAGES})
            </Label>
            <div className="mt-2 flex items-center justify-center w-full">
              <label
                htmlFor="image-upload"
                className="flex flex-col items-center justify-center w-full h-32 border-2 border-gray-300 border-dashed rounded-lg cursor-pointer bg-gray-50 hover:bg-gray-100"
              >
                <div className="flex flex-col items-center justify-center pt-5 pb-6">
                  <UploadCloud className="w-8 h-8 mb-2 text-gray-500" />
                  <p className="mb-2 text-sm text-gray-500 text-center">
                    גרור ושחרר תמונות לכאן, או לחץ לבחירה
                  </p>
                  <p className="text-xs text-gray-500">
                    PNG, JPG, WEBP (עד {MAX_IMAGE_SIZE_MB}MB לתמונה)
                  </p>
                </div>
                <Input
                  id="image-upload"
                  type="file"
                  multiple
                  accept="image/png, image/jpeg, image/webp"
                  className="hidden"
                  onChange={handleImageChange}
                  disabled={images.length >= MAX_IMAGES}
                />
              </label>
            </div>
            {imagePreviews.length > 0 && (
              <div className="mt-4 grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-5 gap-4">
                {imagePreviews.map((preview, index) => (
                  <div key={index} className="relative group">
                    <Image
                      src={preview}
                      alt={`תצוגה מקדימה ${index + 1}`}
                      width={100}
                      height={100}
                      className="rounded-md object-cover w-full aspect-square"
                      onLoad={() => URL.revokeObjectURL(preview)} // Clean up object URLs
                    />
                    <Button
                      type="button"
                      variant="destructive"
                      size="icon"
                      className="absolute top-1 right-1 h-6 w-6 opacity-0 group-hover:opacity-100 transition-opacity p-0"
                      onClick={() => removeImage(index)}
                    >
                      <Trash2 className="h-3 w-3" />
                      <span className="sr-only">הסר תמונה</span>
                    </Button>
                  </div>
                ))}
              </div>
            )}
          </div>

          <DialogFooter className="pt-4 sm:justify-start">
            <Button type="submit" disabled={isSaving} className="w-full sm:w-auto">
              {isSaving ? (
                <Loader2 className="w-4 h-4 mr-2 animate-spin" />
              ) : (
                <UserPlus className="w-4 h-4 mr-2" />
              )}
              {isSaving ? "שומר..." : "הוסף מועמד"}
            </Button>
            <DialogClose asChild>
              <Button variant="outline" type="button" className="w-full sm:w-auto mt-2 sm:mt-0">
                <X className="w-4 h-4 mr-2" />
                ביטול
              </Button>
            </DialogClose>
          </DialogFooter>
        </form>
      </DialogContent>
    </Dialog>
  );
};
--- End of Content for AddManualCandidateDialog.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\new\dialogs\AiMatchAnalysisDialog.tsx
--------------------------------------------------------------------------------
Content:
// File: src/app/components/matchmaker/new/dialogs/AiMatchAnalysisDialog.tsx

'use client';

import React, { useState, useEffect, useMemo } from 'react';
import Image from 'next/image';
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription,
  DialogClose,
} from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { ScrollArea } from '@/components/ui/scroll-area';
import { Skeleton } from '@/components/ui/skeleton';
import {
  X,
  Sparkles,
  CheckCircle,
  AlertTriangle,
  MessageSquare,
  Info,
  XCircle,
  Star,
  Cake,
  MapPin,
  BookMarked,
  Users,
} from 'lucide-react';
import type { Candidate } from '../types/candidates';
import { cn, getRelativeCloudinaryPath } from '@/lib/utils';
import { motion, AnimatePresence } from 'framer-motion';

// --- Interfaces ---
interface AiAnalysis {
  overallScore: number;
  matchSummary: string;
  compatibilityPoints: {
    area: string;
    explanation: string;
    strength: 'HIGH' | 'MEDIUM' | 'LOW';
  }[];
  potentialChallenges: {
    area: string;
    explanation: string;
    severity: 'HIGH' | 'MEDIUM' | 'LOW';
  }[];
  suggestedConversationStarters: string[];
}

interface AiMatchAnalysisDialogProps {
  isOpen: boolean;
  onClose: () => void;
  targetCandidate: Candidate | null;
  comparisonCandidates: Candidate[];
}

// --- Helper Functions ---
const getInitials = (firstName?: string, lastName?: string): string => {
  let initials = '';
  if (firstName && firstName.length > 0) initials += firstName[0];
  if (lastName && lastName.length > 0) initials += lastName[0];
  return initials.toUpperCase() || '?';
};

const calculateAge = (birthDate: Date | string): number => {
  if (!birthDate) return 0;
  const today = new Date();
  const birth = new Date(birthDate);
  if (isNaN(birth.getTime())) return 0;
  let age = today.getFullYear() - birth.getFullYear();
  const monthDiff = today.getMonth() - birth.getMonth();
  if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birth.getDate())) {
    age--;
  }
  return age > 0 ? age : 0;
};

// --- Sub-components ---
const MiniProfileHeader: React.FC<{
  candidate: Candidate;
  score?: number;
  isTarget?: boolean;
}> = ({ candidate, score, isTarget = false }) => {
  const mainImage = candidate.images?.find((img) => img.isMain);
  const age = calculateAge(candidate.profile.birthDate);
  const initials = getInitials(candidate.firstName, candidate.lastName);

  return (
    <div className="p-4 rounded-t-lg bg-gradient-to-b from-slate-50 to-slate-100 border-b border-slate-200 text-center relative">
      <div className="relative w-24 h-24 mx-auto rounded-full overflow-hidden border-4 border-white shadow-lg ring-2 ring-offset-2 ring-cyan-400">
        {mainImage?.url ? (
          <Image
            src={getRelativeCloudinaryPath(mainImage.url)}
            alt={`תמונת פרופיל של ${candidate.firstName}`}
            layout="fill"
            className="object-cover"
            sizes="96px"
          />
        ) : (
          <div className="w-full h-full flex items-center justify-center bg-gradient-to-br from-slate-200 to-slate-300">
            <span className="text-4xl font-medium text-slate-500">
              {initials}
            </span>
          </div>
        )}
      </div>

      {!isTarget && typeof score === 'number' && (
        <Badge className="absolute top-4 left-4 bg-gradient-to-r from-teal-400 to-cyan-500 text-white border-0 shadow-lg px-3 py-1.5 text-sm font-bold flex items-center gap-1.5">
          <Sparkles className="w-4 h-4" />
          {score}% התאמה
        </Badge>
      )}

      {isTarget && (
        <Badge className="absolute top-4 right-4 bg-gradient-to-r from-blue-500 to-indigo-600 text-white border-0 shadow-lg px-3 py-1.5 text-sm font-bold flex items-center gap-1.5">
          <Star className="w-4 h-4" />
          מועמד מטרה
        </Badge>
      )}

      <h3 className="mt-3 text-lg font-bold text-slate-800">
        {candidate.firstName} {candidate.lastName}
      </h3>
      <div className="mt-2 flex justify-center items-center flex-wrap gap-x-3 gap-y-1 text-xs text-slate-600">
        <div className="flex items-center gap-1">
          <Cake className="w-3.5 h-3.5 text-slate-400" /> {age} שנים
        </div>
        <div className="flex items-center gap-1">
          <MapPin className="w-3.5 h-3.5 text-slate-400" />{' '}
          {candidate.profile.city || 'לא צוין'}
        </div>
        <div className="flex items-center gap-1">
          <BookMarked className="w-3.5 h-3.5 text-slate-400" />{' '}
          {candidate.profile.religiousLevel || 'לא צוין'}
        </div>
      </div>
    </div>
  );
};

const AnalysisItem: React.FC<{
  icon: React.ElementType;
  iconColor: string;
  area: string;
  explanation: string;
}> = ({ icon: Icon, iconColor, area, explanation }) => (
  <div className="flex items-start gap-4 p-3 rounded-lg hover:bg-slate-50/70 transition-colors">
    <div
      className={cn(
        'mt-1 flex-shrink-0 rounded-full p-2 bg-opacity-10',
        iconColor.replace('text-', 'bg-')
      )}
    >
      <Icon className={cn('h-5 w-5', iconColor)} />
    </div>
    <div>
      <h4 className="font-semibold text-gray-800">{area}</h4>
      <p className="text-sm text-gray-600 leading-relaxed">{explanation}</p>
    </div>
  </div>
);

const ComparisonTable: React.FC<{
  target: Candidate;
  comparison: Candidate;
}> = ({ target, comparison }) => {
  const fieldsToCompare = [
    {
      key: 'age',
      label: 'גיל',
      formatter: (c: Candidate) =>
        `${calculateAge(c.profile.birthDate)}${c.profile.birthDateIsApproximate ? ' (משוער)' : ''}`,
    },
    {
      key: 'city',
      label: 'עיר',
      formatter: (c: Candidate) => c.profile.city || 'לא צוין',
    },
    {
      key: 'maritalStatus',
      label: 'מצב משפחתי',
      formatter: (c: Candidate) => c.profile.maritalStatus || 'לא צוין',
    },
    {
      key: 'religiousLevel',
      label: 'רמה דתית',
      formatter: (c: Candidate) => c.profile.religiousLevel || 'לא צוין',
    },
    {
      key: 'occupation',
      label: 'עיסוק',
      formatter: (c: Candidate) => c.profile.occupation || 'לא צוין',
    },
    {
      key: 'education',
      label: 'השכלה',
      formatter: (c: Candidate) => c.profile.education || 'לא צוין',
    },
  ];

  return (
    <div className="overflow-x-auto border rounded-lg">
      <table className="w-full text-sm text-right border-collapse">
        <thead>
          <tr className="bg-slate-50">
            <th className="p-3 font-semibold text-slate-600 border-b border-slate-200">
              קריטריון
            </th>
            <th className="p-3 font-semibold text-slate-600 border-b border-slate-200 text-center">
              {target.firstName}
            </th>
            <th className="p-3 font-semibold text-slate-600 border-b border-slate-200 text-center">
              {comparison.firstName}
            </th>
          </tr>
        </thead>
        <tbody>
          {fieldsToCompare.map((field, index) => (
            <tr
              key={field.key}
              className={index % 2 === 0 ? 'bg-white' : 'bg-slate-50/50'}
            >
              <td className="p-3 font-medium text-slate-500 border-b border-slate-200">
                {field.label}
              </td>
              <td className="p-3 text-slate-700 border-b border-slate-200 text-center">
                {field.formatter(target)}
              </td>
              <td className="p-3 text-slate-700 border-b border-slate-200 text-center">
                {field.formatter(comparison)}
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};

const AnalysisSkeleton: React.FC = () => (
  <div className="space-y-6 p-4 animate-pulse">
    <div className="p-4 bg-gray-100 rounded-lg">
      <div className="h-20 bg-gray-200 rounded-md"></div>
    </div>
    <div className="space-y-4">
      <div className="h-5 bg-gray-200 rounded-md w-1/3"></div>
      <div className="flex gap-4">
        <div className="rounded-full bg-gray-200 h-10 w-10"></div>
        <div className="flex-1 space-y-2 py-1">
          <div className="h-4 bg-gray-200 rounded w-full"></div>
          <div className="h-3 bg-gray-300 rounded w-5/6"></div>
        </div>
      </div>
      <div className="flex gap-4">
        <div className="rounded-full bg-gray-200 h-10 w-10"></div>
        <div className="flex-1 space-y-2 py-1">
          <div className="h-4 bg-gray-200 rounded w-full"></div>
          <div className="h-3 bg-gray-300 rounded w-4/6"></div>
        </div>
      </div>
    </div>
  </div>
);

// --- START OF NEW STRUCTURE ---

// 1. Inner component to hold all logic and complex JSX
const DialogBody: React.FC<AiMatchAnalysisDialogProps> = ({
  isOpen,
  onClose,
  targetCandidate,
  comparisonCandidates,
}) => {
  const [activeComparisonId, setActiveComparisonId] = useState<string | null>(
    null
  );
  const [analyses, setAnalyses] = useState<
    Record<string, AiAnalysis | 'error' | 'loading'>
  >({});
  const [language, setLanguage] = useState<'he' | 'en'>('he');
  const [isMobile, setIsMobile] = useState(false);

  useEffect(() => {
    const checkMobile = () => setIsMobile(window.innerWidth < 768);
    checkMobile();
    window.addEventListener('resize', checkMobile);
    return () => window.removeEventListener('resize', checkMobile);
  }, []);

  const activeComparisonCandidate = useMemo(() => {
    return comparisonCandidates.find((c) => c.id === activeComparisonId);
  }, [activeComparisonId, comparisonCandidates]);

  const activeAnalysis = useMemo(() => {
    if (!activeComparisonId) return null;
    return analyses[activeComparisonId] || null;
  }, [activeComparisonId, analyses]);

  useEffect(() => {
    if (
      isOpen &&
      comparisonCandidates.length > 0 &&
      !comparisonCandidates.some((c) => c.id === activeComparisonId)
    ) {
      setActiveComparisonId(comparisonCandidates[0].id);
    }
  }, [isOpen, comparisonCandidates, activeComparisonId]);

  useEffect(() => {
    if (
      isOpen &&
      targetCandidate &&
      activeComparisonId &&
      analyses[activeComparisonId] === undefined
    ) {
      const fetchAnalysis = async () => {
        setAnalyses((prev) => ({ ...prev, [activeComparisonId]: 'loading' }));

        try {
          const response = await fetch('/api/ai/generate-rationale', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
              userId1: targetCandidate.id,
              userId2: activeComparisonId,
              language: language,
            }),
          });

          const data = await response.json();
          if (response.ok && data.success) {
            setAnalyses((prev) => ({
              ...prev,
              [activeComparisonId]: data.analysis,
            }));
          } else {
            throw new Error(data.error || 'Failed to fetch analysis');
          }
        } catch (e) {
          console.error(`Failed to get analysis for ${activeComparisonId}:`, e);
          setAnalyses((prev) => ({ ...prev, [activeComparisonId]: 'error' }));
        }
      };
      fetchAnalysis();
    }
  }, [isOpen, targetCandidate, activeComparisonId, language, analyses]);

  const handleLanguageChange = (newLang: 'he' | 'en') => {
    if (newLang !== language) {
      setLanguage(newLang);
      setAnalyses({});
    }
  };

  if (!targetCandidate) return null;

  return (
    <>
      <DialogHeader className="p-4 border-b flex-row justify-between items-center flex-shrink-0">
        <div className="flex items-center gap-3">
          <Sparkles className="w-7 h-7 text-teal-500" />
          <div>
            <DialogTitle className="text-xl">ניתוח התאמה מבוסס AI</DialogTitle>
            <DialogDescription>השוואה מפורטת בין מועמדים</DialogDescription>
          </div>
        </div>
        <div className="flex items-center gap-2">
          <Select value={language} onValueChange={handleLanguageChange}>
            <SelectTrigger className="w-[120px] text-xs h-9">
              <SelectValue placeholder="שפת ניתוח" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="he">עברית</SelectItem>
              <SelectItem value="en">English</SelectItem>
            </SelectContent>
          </Select>
          <DialogClose asChild>
            <Button variant="ghost" size="icon">
              <X className="h-5 w-5" />
            </Button>
          </DialogClose>
        </div>
      </DialogHeader>

      <div className="flex-1 flex flex-col md:flex-row min-h-0">
        {/* Sidebar (Desktop) or Select (Mobile) */}
        {isMobile ? (
          <div className="p-4 border-b md:hidden">
            <Select
              value={activeComparisonId || ''}
              onValueChange={setActiveComparisonId}
            >
              <SelectTrigger className="w-full">
                <SelectValue placeholder="בחר מועמד להשוואה" />
              </SelectTrigger>
              <SelectContent>
                {comparisonCandidates.map((c) => (
                  <SelectItem key={c.id} value={c.id}>
                    {c.firstName} {c.lastName}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
          </div>
        ) : (
          <aside className="w-1/4 border-l bg-slate-50/50 flex flex-col flex-shrink-0">
            <h3 className="p-3 text-sm font-semibold text-slate-600 border-b">
              מועמדים להשוואה ({comparisonCandidates.length})
            </h3>
            <ScrollArea className="flex-1">
              {comparisonCandidates.map((candidate) => {
                // ================== שינוי 1: חילוץ התמונה לפני השימוש ==================
                const mainImageUrl = candidate.images?.find(
                  (img) => img.isMain
                )?.url;

                return (
                  <button
                    key={candidate.id}
                    onClick={() => setActiveComparisonId(candidate.id)}
                    className={cn(
                      'w-full text-right p-3 flex items-center gap-3 border-b border-slate-200/60 hover:bg-slate-100 transition-colors',
                      activeComparisonId === candidate.id &&
                        'bg-cyan-50 border-r-4 border-cyan-500 font-semibold'
                    )}
                  >
                    <div className="relative w-10 h-10 rounded-full overflow-hidden flex-shrink-0 bg-gray-200">
                      {/* ================== שינוי 2: שימוש בפונקציית העזר ================== */}
                      {mainImageUrl ? (
                        <Image
                          src={getRelativeCloudinaryPath(mainImageUrl)}
                          alt={candidate.firstName}
                          layout="fill"
                          className="object-cover"
                          sizes="40px"
                        />
                      ) : (
                        <div className="w-full h-full flex items-center justify-center">
                          <span className="text-sm font-bold text-gray-500">
                            {getInitials(
                              candidate.firstName,
                              candidate.lastName
                            )}
                          </span>
                        </div>
                      )}
                    </div>
                    <div className="flex-1 min-w-0">
                      <p className="truncate text-sm text-slate-800">
                        {candidate.firstName} {candidate.lastName}
                      </p>
                      <p className="text-xs text-slate-500">
                        {calculateAge(candidate.profile.birthDate)} |{' '}
                        {candidate.profile.city}
                      </p>
                    </div>
                    {activeAnalysis &&
                      activeAnalysis !== 'error' &&
                      activeAnalysis !== 'loading' && (
                        <Badge
                          variant="secondary"
                          className="bg-teal-100 text-teal-800"
                        >
                          {(activeAnalysis as AiAnalysis).overallScore}%
                        </Badge>
                      )}
                  </button>
                );
              })}
            </ScrollArea>
          </aside>
        )}

        {/* Main content area */}
        <main className="flex-1 flex flex-col min-h-0 bg-white">
          {!activeComparisonCandidate ? (
            <div className="flex-1 flex flex-col items-center justify-center text-center p-6 text-gray-500">
              <Users className="w-16 h-16 text-gray-300 mb-4" />
              <h3 className="text-lg font-semibold">בחר מועמד/ת להשוואה</h3>
              <p className="max-w-xs">
                בחר מועמד מהרשימה בצד (או מהתפריט הנפתח במובייל) כדי להתחיל
                בניתוח ההתאמה.
              </p>
            </div>
          ) : (
            <>
              <div className="grid grid-cols-1 md:grid-cols-2 flex-shrink-0">
                <MiniProfileHeader candidate={targetCandidate} isTarget />
                <MiniProfileHeader
                  candidate={activeComparisonCandidate}
                  score={(activeAnalysis as AiAnalysis)?.overallScore}
                />
              </div>

              <Tabs
                defaultValue="summary"
                className="flex-1 flex flex-col min-h-0"
              >
                <TabsList className="mx-4 mt-4 bg-slate-100 p-1 rounded-lg">
                  <TabsTrigger value="summary">סיכום וחוזקות</TabsTrigger>
                  <TabsTrigger value="challenges">אתגרים ופערים</TabsTrigger>
                  <TabsTrigger value="comparison">השוואת נתונים</TabsTrigger>
                  <TabsTrigger value="conversation">נושאים לשיחה</TabsTrigger>
                </TabsList>
                <ScrollArea className="flex-1">
                  <AnimatePresence mode="wait">
                    <motion.div
                      key={activeComparisonId}
                      initial={{ opacity: 0, y: 10 }}
                      animate={{ opacity: 1, y: 0 }}
                      exit={{ opacity: 0, y: -10 }}
                      transition={{ duration: 0.2 }}
                      className="p-4 md:p-6"
                    >
                      {activeAnalysis === 'loading' && <AnalysisSkeleton />}
                      {activeAnalysis === 'error' && (
                        <div className="text-center py-10">
                          <XCircle className="w-12 h-12 text-red-400 mx-auto mb-4" />
                          <h3 className="font-semibold text-xl text-red-600">
                            שגיאה בניתוח ההתאמה
                          </h3>
                          <p className="text-gray-500 mt-2">
                            לא הצלחנו להפיק ניתוח עבור זוג זה. אנא נסה שוב מאוחר
                            יותר.
                          </p>
                        </div>
                      )}
                      {activeAnalysis &&
                        activeAnalysis !== 'error' &&
                        activeAnalysis !== 'loading' && (
                          <>
                            <TabsContent
                              value="summary"
                              className="space-y-6 mt-0"
                            >
                              <div className="p-4 bg-slate-50/70 rounded-lg border border-slate-200">
                                <h3 className="font-semibold text-gray-800 mb-2 flex items-center gap-2">
                                  <Info className="w-5 h-5 text-blue-500" />{' '}
                                  סיכום ההתאמה
                                </h3>
                                <p className="text-sm text-gray-600 leading-relaxed">
                                  {(activeAnalysis as AiAnalysis).matchSummary}
                                </p>
                              </div>
                              <div>
                                <h3 className="font-semibold text-gray-800 mb-3 flex items-center gap-2">
                                  <CheckCircle className="w-5 h-5 text-green-500" />{' '}
                                  נקודות חוזק וחיבור
                                </h3>
                                <div className="space-y-4">
                                  {(
                                    activeAnalysis as AiAnalysis
                                  ).compatibilityPoints.map((point) => (
                                    <AnalysisItem
                                      key={point.area}
                                      icon={CheckCircle}
                                      iconColor="text-green-500"
                                      {...point}
                                    />
                                  ))}
                                </div>
                              </div>
                            </TabsContent>
                            <TabsContent
                              value="challenges"
                              className="space-y-6 mt-0"
                            >
                              <div>
                                <h3 className="font-semibold text-gray-800 mb-3 flex items-center gap-2">
                                  <AlertTriangle className="w-5 h-5 text-amber-500" />{' '}
                                  אתגרים ופערים פוטנציאליים
                                </h3>
                                <div className="space-y-4">
                                  {(
                                    activeAnalysis as AiAnalysis
                                  ).potentialChallenges.map((challenge) => (
                                    <AnalysisItem
                                      key={challenge.area}
                                      icon={AlertTriangle}
                                      iconColor="text-amber-500"
                                      {...challenge}
                                    />
                                  ))}
                                </div>
                              </div>
                            </TabsContent>
                            <TabsContent value="comparison" className="mt-0">
                              <ComparisonTable
                                target={targetCandidate}
                                comparison={activeComparisonCandidate}
                              />
                            </TabsContent>
                            <TabsContent
                              value="conversation"
                              className="space-y-4 mt-0"
                            >
                              <h3 className="font-semibold text-gray-800 mb-3 flex items-center gap-2">
                                <MessageSquare className="w-5 h-5 text-indigo-500" />{' '}
                                נושאים מומלצים לשיחה
                              </h3>
                              <ul className="space-y-3 list-inside">
                                {(
                                  activeAnalysis as AiAnalysis
                                ).suggestedConversationStarters.map(
                                  (starter, index) => (
                                    <li
                                      key={index}
                                      className="flex items-start gap-2 p-2 rounded-md hover:bg-indigo-50/50"
                                    >
                                      <MessageSquare className="w-4 h-4 text-indigo-400 mt-1 flex-shrink-0" />
                                      <span className="text-sm text-gray-700">
                                        {starter}
                                      </span>
                                    </li>
                                  )
                                )}
                              </ul>
                            </TabsContent>
                          </>
                        )}
                    </motion.div>
                  </AnimatePresence>
                </ScrollArea>
              </Tabs>
            </>
          )}
        </main>
      </div>
    </>
  );
};

// 2. Exported wrapper component
export const AiMatchAnalysisDialog = (props: AiMatchAnalysisDialogProps) => {
  const { isOpen, onClose } = props;

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent
        className="max-w-6xl w-full h-[95vh] flex flex-col p-0 overflow-hidden"
        dir="rtl"
      >
        {isOpen && <DialogBody {...props} />}
      </DialogContent>
    </Dialog>
  );
};

// --- END OF NEW STRUCTURE ---
--- End of Content for AiMatchAnalysisDialog.tsx ---

================================================================================
Directory: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\new\hooks
================================================================================

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\new\hooks\filterUtils
--------------------------------------------------------------------------------
Content:
--- End of Content for filterUtils ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\new\hooks\useCandidates.ts
--------------------------------------------------------------------------------
Content:
import { useState, useEffect, useMemo, useCallback } from 'react';
import Papa from 'papaparse';
import type { Candidate, CandidatesFilter } from '../types/candidates';
import type { CandidateProfile } from '../types/candidates';
import { Dispatch, SetStateAction } from 'react';

export interface UseCandidatesReturn {
  loading: boolean;
  error: string | null;
  candidates: Candidate[];
  maleCandidates: Candidate[];
  femaleCandidates: Candidate[];
  filteredCandidates: Candidate[];
  filters: CandidatesFilter;
  setFilters: Dispatch<SetStateAction<CandidatesFilter>>;
  refresh: () => Promise<void>;
  totalCount: number;
  filteredCount: number;
  maleCount: number;
  femaleCount: number;
  searchResults: {
    term: string;
    count: number;
    male: number;
    female: number;
  } | null;
  exportCandidates: (candidates: Candidate[], filters: CandidatesFilter) => Promise<void>;
  updateCandidate: (id: string, updates: Partial<CandidateProfile>) => Promise<void>;
  sorting: {
    field: string;
    direction: 'asc' | 'desc';
  };
  setSorting: (field: string, direction: 'asc' | 'desc') => void;
  searchSuggestions: (term: string) => Promise<Candidate[]>;
}

export const useCandidates = (initialFilters: CandidatesFilter = {}): UseCandidatesReturn => {
  // Base states
  const [candidates, setCandidates] = useState<Candidate[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [filters, setFilters] = useState<CandidatesFilter>(initialFilters);
  const [searchResults, setSearchResults] = useState<{
    term: string;
    count: number;
    male: number;
    female: number;
  } | null>(null);
  const [sorting, setSortingState] = useState<{
    field: string;
    direction: 'asc' | 'desc';
  }>({
    field: 'lastActive',
    direction: 'desc',
  });

  // Helper function to calculate age
  const calculateAge = useCallback((birthDate: Date): number => {
    const today = new Date();
    const birth = new Date(birthDate);
    let age = today.getFullYear() - birth.getFullYear();
    const monthDiff = today.getMonth() - birth.getMonth();
    
    if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birth.getDate())) {
      age--;
    }
    return age;
  }, []);

  // Fetch candidates data
  const fetchCandidates = async () => {
    try {
      setLoading(true);
      setError(null);
      
      const response = await fetch('/api/matchmaker/candidates');
      if (!response.ok) {
        throw new Error(await response.text());
      }
      
      const data = await response.json();
     
      
      if (!data.success) {
        throw new Error(data.error || 'Failed to load candidates');
      }
  
      setCandidates(data.clients);
    } catch (err) {
      setError(err instanceof Error ? err.message : 'An unexpected error occurred');
      console.error('Error fetching candidates:', err);
    } finally {
      setLoading(false);
    }
  };

  // Set sorting field and direction
  const setSorting = useCallback((field: string, direction: 'asc' | 'desc') => {
    setSortingState({ field, direction });
  }, []);

  // Search suggestions based on a term
  const searchSuggestions = useCallback(async (term: string): Promise<Candidate[]> => {
    if (!term || term.length < 2) return [];
    
    // Local search implementation for quick response
    const searchTerm = term.toLowerCase();
    return candidates.filter(candidate => {
      const searchableText = `
        ${candidate.firstName} 
        ${candidate.lastName} 
        ${candidate.profile.occupation || ''} 
        ${candidate.profile.city || ''}
        ${candidate.profile.religiousLevel || ''}
      `.toLowerCase();
      
      return searchableText.includes(searchTerm);
    }).slice(0, 10);
    
    // Alternatively, you can implement an API call for server-side search
    // if the dataset is very large
  }, [candidates]);

  const sortCandidates = useCallback((candidatesList: Candidate[], field: string, direction: 'asc' | 'desc') => {
    return [...candidatesList].sort((a, b) => {
      let valueA, valueB;
      
      switch (field) {
        case 'name':
          valueA = `${a.firstName} ${a.lastName}`.toLowerCase();
          valueB = `${b.firstName} ${b.lastName}`.toLowerCase();
          break;
        case 'age':
          valueA = calculateAge(a.profile.birthDate);
          valueB = calculateAge(b.profile.birthDate);
          break;
        case 'city':
          valueA = (a.profile.city || '').toLowerCase();
          valueB = (b.profile.city || '').toLowerCase();
          break;
        case 'religiousLevel':
          valueA = (a.profile.religiousLevel || '').toLowerCase();
          valueB = (b.profile.religiousLevel || '').toLowerCase();
          break;
        case 'lastActive':
          valueA = a.profile.lastActive ? new Date(a.profile.lastActive).getTime() : 0;
          valueB = b.profile.lastActive ? new Date(b.profile.lastActive).getTime() : 0;
          break;
        case 'registrationDate':
          valueA = new Date(a.createdAt).getTime();
          valueB = new Date(b.createdAt).getTime();
          break;
        case 'height':
          valueA = a.profile.height || 0;
          valueB = b.profile.height || 0;
          break;
        default:
          valueA = 0;
          valueB = 0;
      }
      
      if (valueA < valueB) return direction === 'asc' ? -1 : 1;
      if (valueA > valueB) return direction === 'asc' ? 1 : -1;
      return 0;
    });
  }, [calculateAge]);
  
  // פונקציה לבדיקה אם מועמד עומד בקריטריוני חיפוש
  const checkSearchMatch = useCallback((candidate: Candidate, searchTerm: string): boolean => {
    if (!searchTerm) return true;
    
    // נרמול החיפוש
    const normalizedTerm = searchTerm.toLowerCase().trim();
    if (!normalizedTerm) return true;
    
    // בדיקת התאמה בשדות השונים
    const fullName = `${candidate.firstName} ${candidate.lastName}`.toLowerCase();
    const city = (candidate.profile.city || '').toLowerCase();
    const occupation = (candidate.profile.occupation || '').toLowerCase();
    const religiousLevel = (candidate.profile.religiousLevel || '').toLowerCase();
    
    return (
      fullName.includes(normalizedTerm) || 
      city.includes(normalizedTerm) || 
      occupation.includes(normalizedTerm) || 
      religiousLevel.includes(normalizedTerm)
    );
  }, []);

  // בקובץ useCandidates.ts - לעדכן את החלק של filteredCandidates
  const filteredCandidates = useMemo(() => {
    console.log("Filtering candidates with filters:", filters);
    
    // אם הסינון הנפרד מופעל, נשתמש בפילטרים הכלליים בלבד ללא מגדר
    const currentFilters = filters.separateFiltering 
      ? { ...filters, gender: undefined }
      : filters;

    let results = candidates.filter(candidate => {
      // סינון לפי מגדר רק אם הסינון הנפרד כבוי
      if (!filters.separateFiltering && currentFilters.gender && candidate.profile.gender !== currentFilters.gender) {
        return false;
      }
      if (currentFilters.source && candidate.source !== currentFilters.source) {
    return false;
}
      // בדיקת גיל מותאמת
      if (currentFilters.ageRange) {
        try {
          const age = calculateAge(candidate.profile.birthDate);
          if (age < currentFilters.ageRange.min || age > currentFilters.ageRange.max) {
            return false;
          }
        } catch (err) {
          console.error("Error calculating age for candidate:", candidate.id, err);
        }
      }
      
      // סינון סטטוס משתמש
      if (filters.userStatus && candidate.status !== filters.userStatus) {
        return false;
      }
   // סינון סטטוס משתמש
      if (filters.userStatus && candidate.status !== filters.userStatus) {
        return false;
      }
      // סינון סטטוס זמינות - ודא המרה נכונה של הטיפוס
      if (filters.availabilityStatus && 
          candidate.profile.availabilityStatus !== filters.availabilityStatus) {
        return false;
      }
      
      // בדיקת גובה
      if (filters.heightRange && candidate.profile.height) {
        if (
          candidate.profile.height < filters.heightRange.min || 
          candidate.profile.height > filters.heightRange.max
        ) {
          return false;
        }
      }

      // בדיקת רמת דתיות
      if (filters.religiousLevel && candidate.profile.religiousLevel !== filters.religiousLevel) {
        return false;
      }

      // בדיקת ערים
      if (filters.cities?.length && candidate.profile.city) {
        if (!filters.cities.includes(candidate.profile.city)) {
          return false;
        }
      }

      // בדיקת תחומי עיסוק
      if (filters.occupations?.length && candidate.profile.occupation) {
        if (!filters.occupations.includes(candidate.profile.occupation)) {
          return false;
        }
      }

      // בדיקת השכלה
      if (filters.educationLevel && candidate.profile.education !== filters.educationLevel) {
        return false;
      }

      // בדיקת מצב משפחתי
      if (filters.maritalStatus && candidate.profile.maritalStatus !== filters.maritalStatus) {
        return false;
      }

      // בדיקת אימות
      if (filters.isVerified !== undefined && candidate.isVerified !== filters.isVerified) {
        return false;
      }

      // בדיקת המלצות
   
      // בדיקת פעילות אחרונה
      if (filters.lastActiveDays && candidate.profile.lastActive) {
        const lastActive = new Date(candidate.profile.lastActive);
        const daysDiff = (new Date().getTime() - lastActive.getTime()) / (1000 * 60 * 60 * 24);
        if (daysDiff > filters.lastActiveDays) {
          return false;
        }
      }

      // בדיקת שלמות פרופיל
      if (filters.isProfileComplete !== undefined && 
          candidate.isProfileComplete !== filters.isProfileComplete) {
        return false;
      }

      // בדיקת חיפוש כללי - רק אם אין סינון נפרד
      if (!filters.separateFiltering && currentFilters.searchQuery) {
        return checkSearchMatch(candidate, currentFilters.searchQuery);
      }

      return true;
    });

    // מיון התוצאות
    if (sorting.field && sorting.direction) {
      results = sortCandidates(results, sorting.field, sorting.direction);
    }

    return results;
  }, [candidates, filters, calculateAge, sorting.field, sorting.direction, sortCandidates, checkSearchMatch]);

  // חלוקה למועמדים ומועמדות עם תמיכה בחיפוש נפרד
  const maleCandidates = useMemo(() => {
    // בסינון נפרד, נבדוק גם את החיפוש הספציפי לגברים
      return filteredCandidates
        .filter(c => c.profile.gender === 'MALE')
        .filter(candidate => {
          // בדיקת פילטרים ספציפיים לגברים
          if (filters.maleFilters) {
            // בדיקת גיל
            if (filters.maleFilters.ageRange) {
              const age = calculateAge(candidate.profile.birthDate);
              if (age < filters.maleFilters.ageRange.min || age > filters.maleFilters.ageRange.max) {
                return false;
              }
            }
            
            // בדיקת גובה
            if (filters.maleFilters.heightRange && candidate.profile.height) {
              if (
                candidate.profile.height < filters.maleFilters.heightRange.min || 
                candidate.profile.height > filters.maleFilters.heightRange.max
              ) {
                return false;
              }
            }

            // בדיקת רמת דתיות
            if (filters.maleFilters.religiousLevel && candidate.profile.religiousLevel !== filters.maleFilters.religiousLevel) {
              return false;
            }

            // בדיקת ערים
            if (filters.maleFilters.cities?.length && candidate.profile.city) {
              if (!filters.maleFilters.cities.includes(candidate.profile.city)) {
                return false;
              }
            }

            // בדיקת תחומי עיסוק
            if (filters.maleFilters.occupations?.length && candidate.profile.occupation) {
              if (!filters.maleFilters.occupations.includes(candidate.profile.occupation)) {
                return false;
              }
            }

            // בדיקת השכלה
            if (filters.maleFilters.educationLevel && candidate.profile.education !== filters.maleFilters.educationLevel) {
              return false;
            }

            // בדיקת מצב משפחתי
            if (filters.maleFilters.maritalStatus && candidate.profile.maritalStatus !== filters.maleFilters.maritalStatus) {
              return false;
            }

            // בדיקת אימות
            if (filters.maleFilters.isVerified !== undefined && candidate.isVerified !== filters.maleFilters.isVerified) {
              return false;
            }

    

            // בדיקת פעילות אחרונה
            if (filters.maleFilters.lastActiveDays && candidate.profile.lastActive) {
              const lastActive = new Date(candidate.profile.lastActive);
              const daysDiff = (new Date().getTime() - lastActive.getTime()) / (1000 * 60 * 60 * 24);
              if (daysDiff > filters.maleFilters.lastActiveDays) {
                return false;
              }
            }

            // בדיקת שלמות פרופיל
            if (filters.maleFilters.isProfileComplete !== undefined && 
                candidate.isProfileComplete !== filters.maleFilters.isProfileComplete) {
              return false;
            }

            // בדיקת חיפוש ספציפי לפילטרים של הגברים
            if (filters.maleFilters.searchQuery) {
              return checkSearchMatch(candidate, filters.maleFilters.searchQuery);
            }
          }
          
          // בדיקת חיפוש נפרד לגברים
          if (filters.maleSearchQuery) {
            return checkSearchMatch(candidate, filters.maleSearchQuery);
          }
          
          return true;
        });
    
      }, [filteredCandidates, filters.maleFilters, filters.maleSearchQuery, calculateAge, checkSearchMatch]);
  const femaleCandidates = useMemo(() => {
    // בסינון נפרד, נבדוק גם את החיפוש הספציפי לנשים

      return filteredCandidates
        .filter(c => c.profile.gender === 'FEMALE')
        .filter(candidate => {
          // בדיקת פילטרים ספציפיים לנשים
          if (filters.femaleFilters) {
            // בדיקת גיל
            if (filters.femaleFilters.ageRange) {
              const age = calculateAge(candidate.profile.birthDate);
              if (age < filters.femaleFilters.ageRange.min || age > filters.femaleFilters.ageRange.max) {
                return false;
              }
            }
            
            // בדיקת גובה
            if (filters.femaleFilters.heightRange && candidate.profile.height) {
              if (
                candidate.profile.height < filters.femaleFilters.heightRange.min || 
                candidate.profile.height > filters.femaleFilters.heightRange.max
              ) {
                return false;
              }
            }

            // בדיקת רמת דתיות
            if (filters.femaleFilters.religiousLevel && candidate.profile.religiousLevel !== filters.femaleFilters.religiousLevel) {
              return false;
            }

            // בדיקת ערים
            if (filters.femaleFilters.cities?.length && candidate.profile.city) {
              if (!filters.femaleFilters.cities.includes(candidate.profile.city)) {
                return false;
              }
            }

            // בדיקת תחומי עיסוק
            if (filters.femaleFilters.occupations?.length && candidate.profile.occupation) {
              if (!filters.femaleFilters.occupations.includes(candidate.profile.occupation)) {
                return false;
              }
            }

            // בדיקת השכלה
            if (filters.femaleFilters.educationLevel && candidate.profile.education !== filters.femaleFilters.educationLevel) {
              return false;
            }

            // בדיקת מצב משפחתי
            if (filters.femaleFilters.maritalStatus && candidate.profile.maritalStatus !== filters.femaleFilters.maritalStatus) {
              return false;
            }

            // בדיקת אימות
            if (filters.femaleFilters.isVerified !== undefined && candidate.isVerified !== filters.femaleFilters.isVerified) {
              return false;
            }

       

            // בדיקת פעילות אחרונה
            if (filters.femaleFilters.lastActiveDays && candidate.profile.lastActive) {
              const lastActive = new Date(candidate.profile.lastActive);
              const daysDiff = (new Date().getTime() - lastActive.getTime()) / (1000 * 60 * 60 * 24);
              if (daysDiff > filters.femaleFilters.lastActiveDays) {
                return false;
              }
            }

            // בדיקת שלמות פרופיל
            if (filters.femaleFilters.isProfileComplete !== undefined && 
                candidate.isProfileComplete !== filters.femaleFilters.isProfileComplete) {
              return false;
            }

            // בדיקת חיפוש ספציפי לפילטרים של הנשים
            if (filters.femaleFilters.searchQuery) {
              return checkSearchMatch(candidate, filters.femaleFilters.searchQuery);
            }
          }
          
          // בדיקת חיפוש נפרד לנשים
          if (filters.femaleSearchQuery) {
            return checkSearchMatch(candidate, filters.femaleSearchQuery);
          }
          
          return true;
        });
      }, [filteredCandidates, filters.femaleFilters, filters.femaleSearchQuery, calculateAge, checkSearchMatch]);
  // עדכון תוצאות החיפוש
  useEffect(() => {
    if (!filters.separateFiltering && filters.searchQuery) {
      // מצב חיפוש רגיל
      setSearchResults({
        term: filters.searchQuery,
        count: filteredCandidates.length,
        male: maleCandidates.length,
        female: femaleCandidates.length
      });
    } else if (filters.separateFiltering) {
      // במצב חיפוש נפרד, לא מציגים תוצאות חיפוש מאוחדות
      setSearchResults(null);
    } else {
      setSearchResults(null);
    }
  }, [filteredCandidates, maleCandidates, femaleCandidates, filters.searchQuery, filters.separateFiltering]);

  // Export candidates to CSV
  const exportCandidates = async (
    candidates: Candidate[], 
    filters: CandidatesFilter
  ): Promise<void> => {
    try {
      // Prepare data for export
      const exportData = candidates.map(candidate => ({
        'שם פרטי': candidate.firstName,
        'שם משפחה': candidate.lastName,
        'גיל': calculateAge(candidate.profile.birthDate),
        'מגדר': candidate.profile.gender === 'MALE' ? 'זכר' : 'נקבה',
        'עיר': candidate.profile.city || '',
        'גובה': candidate.profile.height || '',
        'רמת דתיות': candidate.profile.religiousLevel || '',
        'תעסוקה': candidate.profile.occupation || '',
        'השכלה': candidate.profile.education || '',
        'מצב משפחתי': candidate.profile.maritalStatus || '',
        'סטטוס זמינות': candidate.profile.availabilityStatus || '',
        'מאומת': candidate.isVerified ? 'כן' : 'לא',
        'פעילות אחרונה': candidate.profile.lastActive 
          ? new Date(candidate.profile.lastActive).toLocaleDateString('he-IL')
          : ''
      }));

      // Add filter info to filename
      const filenameSegments = ['candidates'];
      
      if (filters.gender) {
        filenameSegments.push(filters.gender === 'MALE' ? 'male' : 'female');
      }
      
      if (filters.religiousLevel) {
        filenameSegments.push(filters.religiousLevel.replace(/ /g, '-'));
      }
      
      if (filters.cities?.length === 1) {
        filenameSegments.push(filters.cities[0].replace(/ /g, '-'));
      }
      
      // Convert to CSV
      const csv = Papa.unparse(exportData);
      
      // Create and download file
      const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });
      const link = document.createElement('a');
      const url = URL.createObjectURL(blob);
      const timestamp = new Date().toISOString().split('T')[0];
      
      link.setAttribute('href', url);
      link.setAttribute('download', `${filenameSegments.join('_')}_${timestamp}.csv`);
      document.body.appendChild(link);
      
      link.click();
      document.body.removeChild(link);
    } catch (error) {
      console.error('Error exporting candidates:', error);
      throw new Error('Failed to export candidates');
    }
  };

  // Update candidate
  const updateCandidate = async (
    id: string, 
    updates: Partial<CandidateProfile>
  ): Promise<void> => {
    try {
      const response = await fetch(`/api/matchmaker/candidates/${id}`, {
        method: 'PATCH',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(updates)
      });
      
      if (!response.ok) {
        throw new Error('Failed to update candidate');
      }
      
      // Refresh candidates list after update
      await fetchCandidates();
    } catch (error) {
      console.error('Error updating candidate:', error);
      throw error;
    }
  };

  // Load candidates on mount
  useEffect(() => {
    fetchCandidates();
  }, []);

  // Return interface
  return {
    loading,
    error,
    candidates,
    filteredCandidates,
    maleCandidates,
    femaleCandidates,
    filters,
    setFilters,
    refresh: fetchCandidates,
    totalCount: candidates.length,
    filteredCount: filteredCandidates.length,
    maleCount: maleCandidates.length,
    femaleCount: femaleCandidates.length,
    searchResults,
    exportCandidates,
    updateCandidate,
    sorting,
    setSorting,
    searchSuggestions
  };
};
--- End of Content for useCandidates.ts ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\new\hooks\useFilterLogic.ts
--------------------------------------------------------------------------------
Content:
// src/app/components/matchmaker/new/hooks/useFilterLogic.ts - גרסה משופרת

import { useState, useEffect, useMemo, useCallback } from 'react';
import type {
  FilterState,
  SavedFilter,
  FilterOption,
  FilterChangeHandler,  
} from '../types/filters';
import { DEFAULT_FILTER_STATE } from '../types/filters'; 

type SavedFilterFromStorage = Omit<SavedFilter, 'createdAt'> & {
  createdAt: string;
};

interface SearchHistoryItemFromStorage {
  query: string;
  timestamp: string;
}
interface UseFilterLogicProps {
  onFilterChange?: FilterChangeHandler;
  defaultFilters?: Partial<FilterState>;
  localStorageKey?: string;
}

export const useFilterLogic = ({
  onFilterChange,
  defaultFilters = {},
  localStorageKey = 'candidateFilters'
}: UseFilterLogicProps = {}) => {
  // States
  const [filters, setFilters] = useState<FilterState>({
    ...DEFAULT_FILTER_STATE,
    ...defaultFilters
  });
  
  const [savedFilters, setSavedFilters] = useState<SavedFilter[]>([]);
  const [recentSearches, setRecentSearches] = useState<string[]>([]);
  const [searchHistory, setSearchHistory] = useState<{query: string, timestamp: Date}[]>([]);
  const [lastAppliedFilter, setLastAppliedFilter] = useState<string | null>(null);

  // Load saved filters and history from localStorage
  useEffect(() => {
    try {
      // Load saved filters
      const savedPrefs = localStorage.getItem(localStorageKey);
      if (savedPrefs) {
        const parsed = JSON.parse(savedPrefs);
        setSavedFilters(parsed.map((filter: SavedFilterFromStorage) => ({
          ...filter,
          createdAt: new Date(filter.createdAt)
        })));
      }

      // Load recent searches
      const searches = localStorage.getItem(`${localStorageKey}_recent_searches`);
      if (searches) {
        setRecentSearches(JSON.parse(searches));
      }

      // Load search history
      const history = localStorage.getItem(`${localStorageKey}_search_history`);
      if (history) {
        setSearchHistory(JSON.parse(history).map((item: SearchHistoryItemFromStorage) => ({
          ...item,
          timestamp: new Date(item.timestamp)
        })));
      }
    } catch (error) {
      console.error('Error loading saved filters:', error);
    }
  }, [localStorageKey]);

  // עדכון פילטרים כללי
  const updateFilters = useCallback((newFilters: Partial<FilterState>) => {
    console.log("updateFilters called with:", newFilters);
    
    setFilters(prev => {
      const updated = { ...prev, ...newFilters };
      console.log("Updated filters:", updated);
      
      // אם יש מחרוזת חיפוש חדשה, עדכן את היסטורית החיפוש
      if (newFilters.searchQuery && newFilters.searchQuery !== prev.searchQuery) {
        const newQuery = newFilters.searchQuery;
        console.log("New search query detected:", newQuery);
        
        // עדכון היסטוריית החיפוש
        const updatedHistory = [
          { query: newQuery, timestamp: new Date() },
          ...searchHistory.filter(item => item.query !== newQuery).slice(0, 9)
        ];
        
        setSearchHistory(updatedHistory);
        setRecentSearches(updatedHistory.map(item => item.query));
        
        // שמירה ב-localStorage
        try {
          localStorage.setItem(
            `${localStorageKey}_recent_searches`, 
            JSON.stringify(updatedHistory.map(item => item.query))
          );
          localStorage.setItem(
            `${localStorageKey}_search_history`,
            JSON.stringify(updatedHistory.map(item => ({
              query: item.query,
              timestamp: item.timestamp.toISOString()
            })))
          );
        } catch (e) {
          console.error("Error saving search history:", e);
        }
      }
      
      // טיפול בחיפוש נפרד לגברים
      if (newFilters.maleSearchQuery && newFilters.maleSearchQuery !== prev.maleSearchQuery) {
        // כאן אפשר לייצר היסטוריה נפרדת לחיפושי גברים או לשמור בהיסטוריה הכללית
        console.log("New male search query:", newFilters.maleSearchQuery);
      }
      
      // טיפול בחיפוש נפרד לנשים
      if (newFilters.femaleSearchQuery && newFilters.femaleSearchQuery !== prev.femaleSearchQuery) {
        // כאן אפשר לייצר היסטוריה נפרדת לחיפושי נשים או לשמור בהיסטוריה הכללית
        console.log("New female search query:", newFilters.femaleSearchQuery);
      }

      // קריאה לפונקציית callback
      if (onFilterChange) {
        console.log("Calling onFilterChange with updated filters");
        onFilterChange(updated);
      }
      
      return updated;
    });
  }, [onFilterChange, searchHistory, localStorageKey, setRecentSearches, setSearchHistory]);

  // Reset filters
  const resetFilters = useCallback(() => {
    const defaultState: FilterState = {
      ...DEFAULT_FILTER_STATE,
      ...defaultFilters
    };

    setFilters(defaultState);
    setLastAppliedFilter(null);
    onFilterChange?.(defaultState);
  }, [defaultFilters, onFilterChange]);

  // Clear recent searches
  const clearRecentSearches = useCallback(() => {
    setRecentSearches([]);
    localStorage.removeItem(`${localStorageKey}_recent_searches`);
  }, [localStorageKey]);

  // Save new filter
  const saveFilter = useCallback(async (name: string, filters: FilterState) => {
    const newFilter: SavedFilter = {
      id: Date.now().toString(),
      name,
      filters,
      isDefault: false,
      createdAt: new Date()
    };

    setSavedFilters(prev => {
      const updated = [...prev, newFilter];
      localStorage.setItem(localStorageKey, JSON.stringify(updated));
      return updated;
    });

    return newFilter;
  }, [localStorageKey]);

  // פונקציה משופרת להחלפת מצב הסינון הנפרד
  const toggleSeparateFiltering = useCallback(() => {
    console.log("toggleSeparateFiltering called");
    
    setFilters(prev => {
      const newState = {
        ...prev,
        separateFiltering: !prev.separateFiltering
      };
      
      console.log(`Changing separateFiltering from ${prev.separateFiltering} to ${newState.separateFiltering}`);
      
      return newState;
    });
  }, []);

  // פונקציה משופרת לעדכון סינון גברים
  const updateMaleFilters = useCallback((maleFilters: Partial<FilterState>) => {
    setFilters(prev => {
      const updatedMaleFilters = {
        ...prev.maleFilters,
        ...maleFilters
      };
      
      // אם יש עדכון של מחרוזת חיפוש ספציפית לגברים
      if (maleFilters.searchQuery !== undefined) {
        const updated = {
          ...prev,
          maleFilters: updatedMaleFilters,
          maleSearchQuery: maleFilters.searchQuery // שמירת החיפוש גם בשדה הנפרד
        };
        
        // קריאה לפונקציית callback אם קיימת
        if (onFilterChange) {
          onFilterChange(updated);
        }
        
        return updated;
      }
      
      const updated = {
        ...prev,
        maleFilters: updatedMaleFilters
      };
      
      // קריאה לפונקציית callback אם קיימת
      if (onFilterChange) {
        onFilterChange(updated);
      }
      
      return updated;
    });
  }, [onFilterChange]);

  // פונקציה משופרת לעדכון סינון נשים
  const updateFemaleFilters = useCallback((femaleFilters: Partial<FilterState>) => {
    setFilters(prev => {
      const updatedFemaleFilters = {
        ...prev.femaleFilters,
        ...femaleFilters
      };
      
      // אם יש עדכון של מחרוזת חיפוש ספציפית לנשים
      if (femaleFilters.searchQuery !== undefined) {
        const updated = {
          ...prev,
          femaleFilters: updatedFemaleFilters,
          femaleSearchQuery: femaleFilters.searchQuery // שמירת החיפוש גם בשדה הנפרד
        };
        
        // קריאה לפונקציית callback אם קיימת
        if (onFilterChange) {
          onFilterChange(updated);
        }
        
        return updated;
      }
      
      const updated = {
        ...prev,
        femaleFilters: updatedFemaleFilters
      };
      
      // קריאה לפונקציית callback אם קיימת
      if (onFilterChange) {
        onFilterChange(updated);
      }
      
      return updated;
    });
  }, [onFilterChange]);

  const updateMaleSearchQuery = useCallback((query: string) => {
    setFilters(prev => {
      // שומרים את החיפוש בשדה הייעודי
      const updated = {
        ...prev,
        maleSearchQuery: query
      };
      
      // מעדכנים גם את הפילטרים הספציפיים לגברים אם פעיל סינון נפרד
      if (prev.separateFiltering) {
        updated.maleFilters = {
          ...prev.maleFilters,
          searchQuery: query
        };
      }
      
      if (onFilterChange) {
        onFilterChange(updated);
      }
      
      return updated;
    });
  }, [onFilterChange]);
  
  // פונקציה חדשה לעדכון חיפוש נפרד לנשים
  const updateFemaleSearchQuery = useCallback((query: string) => {
    setFilters(prev => {
      // שומרים את החיפוש בשדה הייעודי
      const updated = {
        ...prev,
        femaleSearchQuery: query
      };
      
      // מעדכנים גם את הפילטרים הספציפיים לנשים אם פעיל סינון נפרד
      if (prev.separateFiltering) {
        updated.femaleFilters = {
          ...prev.femaleFilters,
          searchQuery: query
        };
      }
      
      if (onFilterChange) {
        onFilterChange(updated);
      }
      
      return updated;
    });
  }, [onFilterChange]);

  // פונקציה משופרת להעתקת סינון מצד אחד לשני
  const copyFilters = useCallback((source: 'male' | 'female', target: 'male' | 'female') => {
    setFilters(prev => {
      const sourceFilters = source === 'male' ? prev.maleFilters : prev.femaleFilters;
      
      if (!sourceFilters) {
        return prev;
      }
      
      const updated = { ...prev };
      
      if (target === 'male') {
        updated.maleFilters = { ...sourceFilters };
      } else {
        updated.femaleFilters = { ...sourceFilters };
      }
      
      // קריאה לפונקציית callback אם קיימת
      if (onFilterChange) {
        onFilterChange(updated);
      }
      
      return updated;
    });
  }, [onFilterChange]);

  // Update existing filter
  const updateSavedFilter = useCallback((id: string, updates: Partial<SavedFilter>) => {
    setSavedFilters(prev => {
      const updated = prev.map(filter => 
        filter.id === id ? { ...filter, ...updates } : filter
      );
      localStorage.setItem(localStorageKey, JSON.stringify(updated));
      return updated;
    });
  }, [localStorageKey]);

  // Delete filter
  const deleteFilter = useCallback((id: string) => {
    setSavedFilters(prev => {
      const updated = prev.filter(f => f.id !== id);
      localStorage.setItem(localStorageKey, JSON.stringify(updated));
      
      if (lastAppliedFilter === id) {
        setLastAppliedFilter(null);
      }
      
      return updated;
    });
  }, [localStorageKey, lastAppliedFilter]);

  // Set default filter
  const setDefaultFilter = useCallback((id: string) => {
    setSavedFilters(prev => {
      const updated = prev.map(f => ({
        ...f,
        isDefault: f.id === id
      }));
      localStorage.setItem(localStorageKey, JSON.stringify(updated));
      return updated;
    });
  }, [localStorageKey]);

  // Load saved filter - תמיכה בסינון נפרד
  const loadSavedFilter = useCallback((id: string) => {
    const filter = savedFilters.find(f => f.id === id);
    if (filter) {
      // בדוק אם יש בפילטר השמור מידע לגבי סינון נפרד
      setFilters({ 
        ...filter.filters, 
        savedFilterId: id,
        // וודא שיש תמיד את המאפיינים האלה, גם אם אינם מוגדרים בפילטר המקורי
        separateFiltering: true as boolean,        maleFilters: filter.filters.maleFilters || {},
        femaleFilters: filter.filters.femaleFilters || {}
      });
      
      setLastAppliedFilter(id);
      onFilterChange?.({ 
        ...filter.filters, 
        savedFilterId: id,
        separateFiltering: true as boolean,        maleFilters: filter.filters.maleFilters || {},
        femaleFilters: filter.filters.femaleFilters || {} 
      });
    }
  }, [savedFilters, onFilterChange]);

  // Apply popular filter
  const applyPopularFilter = useCallback((filterConfig: Partial<FilterState>) => {
    const updatedFilters = {
      ...DEFAULT_FILTER_STATE,
      ...filterConfig
    };
    setFilters(updatedFilters);
    onFilterChange?.(updatedFilters);
  }, [onFilterChange]);

  // Check for active filters
  const hasActiveFilters = useMemo(() => {
    return (
      filters.searchQuery ||
      filters.gender !== undefined ||
      (filters.cities?.length ?? 0) > 0 ||  // בדיקה בטוחה למערך
      (filters.occupations?.length ?? 0) > 0 ||  // בדיקה בטוחה למערך
      filters.religiousLevel ||
      filters.educationLevel ||
      filters.maritalStatus ||
      filters.availabilityStatus ||
      filters.userStatus ||
      filters.isVerified ||
      filters.hasReferences ||
      filters.lastActiveDays ||
      filters.isProfileComplete ||
      (filters.ageRange && (
        filters.ageRange.min !== DEFAULT_FILTER_STATE.ageRange?.min ||
        filters.ageRange.max !== DEFAULT_FILTER_STATE.ageRange?.max
      )) ||
      (filters.heightRange && (
        filters.heightRange.min !== DEFAULT_FILTER_STATE.heightRange?.min ||
        filters.heightRange.max !== DEFAULT_FILTER_STATE.heightRange?.max
      )) ||
      // בדיקת פילטרים נפרדים פעילים
      filters.separateFiltering
    );
  }, [filters]);

  // Get active filters in formatted array
  const activeFilters = useMemo((): FilterOption[] => {
    const active: FilterOption[] = [];

    if (filters.searchQuery) {
      active.push({
        key: 'searchQuery',
        value: filters.searchQuery,
        label: `חיפוש: ${filters.searchQuery}`,
        category: 'חיפוש'
      });
    }

    if (filters.gender) {
      active.push({
        key: 'gender',
        value: filters.gender,
        label: `מגדר: ${filters.gender === 'MALE' ? 'זכר' : 'נקבה'}`,
        category: 'מידע בסיסי'
      });
    }

    if (filters.separateFiltering) {
      active.push({
        key: 'separateFiltering',
        value: true,
        label: 'סינון נפרד לפי מגדר',
        category: 'מידע בסיסי'
      });
    }

    // גיל
    if (filters.ageRange && (
      filters.ageRange.min !== DEFAULT_FILTER_STATE.ageRange?.min || 
      filters.ageRange.max !== DEFAULT_FILTER_STATE.ageRange?.max
    )) {
      active.push({
        key: 'ageRange',
        value: filters.ageRange,
        label: `גיל: ${filters.ageRange.min}-${filters.ageRange.max}`,
        category: 'מידע בסיסי'
      });
    }

    // גובה
    if (filters.heightRange && (
      filters.heightRange.min !== DEFAULT_FILTER_STATE.heightRange?.min || 
      filters.heightRange.max !== DEFAULT_FILTER_STATE.heightRange?.max
    )) {
      active.push({
        key: 'heightRange',
        value: filters.heightRange,
        label: `גובה: ${filters.heightRange.min}-${filters.heightRange.max} ס"מ`,
        category: 'מידע בסיסי'
      });
    }

    // ערים
    if (filters.cities?.length) {
      if (filters.cities.length === 1) {
        active.push({
          key: 'cities',
          value: filters.cities[0],
          label: `עיר: ${filters.cities[0]}`,
          category: 'מיקום'
        });
      } else {
        active.push({
          key: 'cities',
          value: filters.cities,
          label: `ערים: ${filters.cities.length} נבחרו`,
          category: 'מיקום'
        });
      }
    }

    // תחומי עיסוק
    if (filters.occupations?.length) {
      if (filters.occupations.length === 1) {
        active.push({
          key: 'occupations',
          value: filters.occupations[0],
          label: `תחום עיסוק: ${filters.occupations[0]}`,
          category: 'תעסוקה'
        });
      } else {
        active.push({
          key: 'occupations',
          value: filters.occupations,
          label: `תחומי עיסוק: ${filters.occupations.length} נבחרו`,
          category: 'תעסוקה'
        });
      }
    }

    // רמת דתיות
    if (filters.religiousLevel) {
      active.push({
        key: 'religiousLevel',
        value: filters.religiousLevel,
        label: `רמת דתיות: ${filters.religiousLevel}`,
        category: 'דת'
      });
    }

    // השכלה
    if (filters.educationLevel) {
      active.push({
        key: 'educationLevel',
        value: filters.educationLevel,
        label: `השכלה: ${filters.educationLevel}`,
        category: 'השכלה'
      });
    }

    // מצב משפחתי
    if (filters.maritalStatus) {
      active.push({
        key: 'maritalStatus',
        value: filters.maritalStatus,
        label: `מצב משפחתי: ${filters.maritalStatus}`,
        category: 'מידע אישי'
      });
    }

    // סטטוס זמינות
    if (filters.availabilityStatus) {
      const statusLabel = 
        filters.availabilityStatus === "AVAILABLE" ? "פנוי/ה" :
        filters.availabilityStatus === "DATING" ? "בתהליך הכרות" :
        filters.availabilityStatus === "UNAVAILABLE" ? "לא פנוי/ה" :
        filters.availabilityStatus;
      
      active.push({
        key: 'availabilityStatus',
        value: filters.availabilityStatus,
        label: `סטטוס זמינות: ${statusLabel}`,
        category: 'זמינות'
      });
    }

    // סטטוס משתמש
    if (filters.userStatus) {
      active.push({
        key: 'userStatus',
        value: filters.userStatus,
        label: `סטטוס משתמש: ${filters.userStatus}`,
        category: 'סטטוס'
      });
    }

    // משתמש מאומת
    if (filters.isVerified !== undefined) {
      active.push({
        key: 'isVerified',
        value: filters.isVerified,
        label: `משתמש מאומת: ${filters.isVerified ? 'כן' : 'לא'}`,
        category: 'אימות'
      });
    }

    // יש המלצות
    if (filters.hasReferences !== undefined) {
      active.push({
        key: 'hasReferences',
        value: filters.hasReferences,
        label: `יש המלצות: ${filters.hasReferences ? 'כן' : 'לא'}`,
        category: 'המלצות'
      });
    }

    // פעילות אחרונה
    if (filters.lastActiveDays !== undefined) {
      active.push({
        key: 'lastActiveDays',
        value: filters.lastActiveDays,
        label: `פעיל ב-${filters.lastActiveDays} הימים האחרונים`,
        category: 'פעילות'
      });
    }

    // פרופיל מלא
    if (filters.isProfileComplete !== undefined) {
      active.push({
        key: 'isProfileComplete',
        value: filters.isProfileComplete,
        label: `פרופיל מלא: ${filters.isProfileComplete ? 'כן' : 'לא'}`,
        category: 'שלמות פרופיל'
      });
    }

    return active;
  }, [filters]);

  // Remove single filter
  const removeFilter = useCallback((key: keyof FilterState, value?: string) => {
    setFilters(prev => {
      const updated = { ...prev };

      if (key === 'separateFiltering') {
        updated.separateFiltering = false;
      } else if (Array.isArray(updated[key]) && value !== undefined) {
        if (key === 'cities' || key === 'occupations') {
          updated[key] = (updated[key] as string[]).filter(v => v !== value);
        }
      } else {
        delete updated[key];
      }

      onFilterChange?.(updated);
      return updated;
    });
  }, [onFilterChange]);
  
  // Calculate popular filters based on search history
  const popularFilters = useMemo(() => {
    // Group searches by frequency
    const searchFrequency: Record<string, number> = {};
    searchHistory.forEach(item => {
      searchFrequency[item.query] = (searchFrequency[item.query] || 0) + 1;
    });
    
    // Sort by frequency
    return Object.entries(searchFrequency)
      .sort((a, b) => b[1] - a[1])
      .slice(0, 5)
      .map(([query]) => query);
  }, [searchHistory]);

  return {
    // Current state
    filters,
    savedFilters,
    recentSearches,
    searchHistory,
    activeFilters,
    hasActiveFilters,
    popularFilters,
    lastAppliedFilter,
    
    // Separate filtering functions
    toggleSeparateFiltering,
    updateMaleFilters,
    updateFemaleFilters,
    copyFilters,
    
    // חיפוש נפרד פונקציות חדשות
    updateMaleSearchQuery,
    updateFemaleSearchQuery,
    
    // Actions
    setFilters: updateFilters,
    removeFilter,
    resetFilters,
    clearRecentSearches,
    applyPopularFilter,

    // Saved filters management
    saveFilter,
    updateSavedFilter,
    deleteFilter,
    setDefaultFilter,
    loadSavedFilter,
};
};
export default useFilterLogic;
--- End of Content for useFilterLogic.ts ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\new\hooks\useStatistics.ts
--------------------------------------------------------------------------------
Content:
// /hooks/useStatistics.ts

import { useMemo } from 'react';
import type { Candidate } from '../types/candidates';
import {
  calculateAgeDistribution,
  calculateLocationDistribution,
  calculateReligiousDistribution,
  calculateActivityStats,
  calculateGenderStats,
  calculateAvailabilityStats,
  calculateCompletionStats
} from '../../suggestions/utils/statisticsCalculator';

export interface Statistics {
  gender: {
    maleCount: number;
    femaleCount: number;
    ratio: number;
    total: number;
    percentages: {
      male: number;
      female: number;
    };
  };
  age: {
    ageGroups: Record<string, number>;
    averageAge: number;
    medianAge: number;
  };
  location: {
    cities: Record<string, number>;
    topCities: Array<{ city: string; count: number }>;
  };
  religious: {
    levels: Record<string, number>;
    percentages: Record<string, number>;
  };
  activity: {
    activeLastWeek: number;
    activeLastMonth: number;
    averageLoginFrequency: number;
    completedProfiles: number;
  };
  availability: {
    counts: Record<string, number>;
    percentages: Record<string, number>;
  };
  completion: {
    counts: {
      hasPhotos: number;
      hasAbout: number;
      hasReferences: number;
      hasPreferences: number;
      isVerified: number;
      fullyCompleted: number;
    };
    percentages: {
      hasPhotos: number;
      hasAbout: number;
      hasReferences: number;
      hasPreferences: number;
      isVerified: number;
      fullyCompleted: number;
    };
  };
}

export const useStatistics = (candidates: Candidate[]) => {
  const stats = useMemo<Statistics>(() => {
    return {
      gender: calculateGenderStats(candidates),
      age: calculateAgeDistribution(candidates),
      location: calculateLocationDistribution(candidates),
      religious: calculateReligiousDistribution(candidates),
      activity: calculateActivityStats(candidates),
      availability: calculateAvailabilityStats(candidates),
      completion: calculateCompletionStats(candidates)
    };
  }, [candidates]);

  // פונקציות עזר לשליפת נתונים ספציפיים
  const getGenderRatio = () => {
    return {
      ratio: stats.gender.ratio,
      formattedRatio: `${stats.gender.maleCount}:${stats.gender.femaleCount}`
    };
  };

  const getTopCities = (limit: number = 5) => {
    return stats.location.topCities.slice(0, limit);
  };

  const getActiveUsersPercent = () => {
    return Math.round((stats.activity.activeLastWeek / stats.gender.total) * 100);
  };

  const getCompletionRate = () => {
    return stats.completion.percentages.fullyCompleted;
  };

  const getAgeGroupDistribution = () => {
    return Object.entries(stats.age.ageGroups)
      .map(([range, count]) => ({
        range,
        count,
        percentage: Math.round((count / stats.gender.total) * 100)
      }))
      .sort((a, b) => {
        const [aMin] = a.range.split('-').map(Number);
        const [bMin] = b.range.split('-').map(Number);
        return aMin - bMin;
      });
  };

  const getReligiousDistribution = () => {
    return Object.entries(stats.religious.levels)
      .map(([level, count]) => ({
        level,
        count,
        percentage: stats.religious.percentages[level]
      }))
      .sort((a, b) => b.count - a.count);
  };

  const getActivityTrend = () => {
    return {
      weekly: stats.activity.activeLastWeek,
      monthly: stats.activity.activeLastMonth,
      average: stats.activity.averageLoginFrequency
    };
  };

  const getProfileCompletionStats = () => {
    return {
      completed: stats.completion.counts.fullyCompleted,
      partial: stats.gender.total - stats.completion.counts.fullyCompleted,
      percentage: stats.completion.percentages.fullyCompleted
    };
  };

  return {
    stats,
    getGenderRatio,
    getTopCities,
    getActiveUsersPercent,
    getCompletionRate,
    getAgeGroupDistribution,
    getReligiousDistribution,
    getActivityTrend,
    getProfileCompletionStats
  };
};

export default useStatistics;
--- End of Content for useStatistics.ts ---

================================================================================
Directory: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\new\shared
================================================================================

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\new\shared\LoadingStates.tsx
--------------------------------------------------------------------------------
Content:
"use client";

import React from "react";
import { Loader2, AlertCircle } from "lucide-react";
import { cn } from "@/lib/utils";
import { Skeleton } from "@/components/ui/skeleton";
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Button } from "@/components/ui/button";

interface LoadingContainerProps {
  children: React.ReactNode;
  className?: string;
}

interface LoadingSpinnerProps {
  size?: "sm" | "md" | "lg";
  className?: string;
}

interface LoadingCardProps {
  count?: number;
  layout?: "grid" | "list";
  className?: string;
}

interface LoadingTextProps {
  lines?: number;
  className?: string;
}

interface LoadingErrorProps {
  message: string;
  onRetry?: () => void;
  className?: string;
}

export const LoadingContainer: React.FC<LoadingContainerProps> = ({
  children,
  className,
}) => {
  return (
    <div className={cn("relative min-h-[200px]", className)}>
      <div className="absolute inset-0 bg-white/80 backdrop-blur-sm flex items-center justify-center z-50">
        <Loader2 className="h-8 w-8 animate-spin text-blue-600" />
      </div>
      <div className="opacity-50 pointer-events-none">{children}</div>
    </div>
  );
};

export const LoadingSpinner: React.FC<LoadingSpinnerProps> = ({
  size = "md",
  className,
}) => {
  const sizeClasses = {
    sm: "w-4 h-4",
    md: "w-8 h-8",
    lg: "w-12 h-12",
  };

  return (
    <div className={cn("flex items-center justify-center", className)}>
      <Loader2
        className={cn("animate-spin text-blue-600", sizeClasses[size])}
      />
    </div>
  );
};

export const LoadingCard: React.FC<LoadingCardProps> = ({
  count = 1,
  layout = "grid",
  className,
}) => {
  return (
    <div
      className={cn(
        layout === "grid"
          ? "grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4"
          : "space-y-4",
        className
      )}
    >
      {Array.from({ length: count }).map((_, index) => (
        <div
          key={index}
          className={cn(
            "bg-white rounded-lg overflow-hidden shadow-sm",
            layout === "list" ? "flex gap-4" : ""
          )}
        >
          <Skeleton
            className={cn(
              "bg-gray-200",
              layout === "list" ? "w-32 h-32" : "w-full h-48"
            )}
          />

          <div className="p-4 flex-1">
            <div className="flex items-center justify-between mb-4">
              <Skeleton className="h-6 w-1/3" />
              <Skeleton className="h-6 w-16" />
            </div>

            <div className="space-y-2">
              <Skeleton className="h-4 w-2/3" />
              <Skeleton className="h-4 w-1/2" />
              <Skeleton className="h-4 w-3/4" />
            </div>

            <div className="flex gap-2 mt-4">
              <Skeleton className="h-9 w-24" />
              <Skeleton className="h-9 w-24" />
            </div>
          </div>
        </div>
      ))}
    </div>
  );
};

export const LoadingText: React.FC<LoadingTextProps> = ({
  lines = 3,
  className,
}) => {
  return (
    <div className={cn("space-y-2", className)}>
      {Array.from({ length: lines }).map((_, index) => (
        <Skeleton
          key={index}
          className={cn("h-4", index === lines - 1 ? "w-3/4" : "w-full")}
        />
      ))}
    </div>
  );
};

export const LoadingError: React.FC<LoadingErrorProps> = ({
  message,
  onRetry,
  className,
}) => {
  return (
    <Alert variant="destructive" className={cn("border-red-500", className)}>
      <AlertCircle className="h-4 w-4" />
      <AlertTitle>שגיאה</AlertTitle>
      <AlertDescription className="flex items-center justify-between">
        <span>{message}</span>
        {onRetry && (
          <Button
            variant="outline"
            size="sm"
            onClick={onRetry}
            className="ml-4"
          >
            נסה שוב
          </Button>
        )}
      </AlertDescription>
    </Alert>
  );
};

export const LoadingStats: React.FC<{ className?: string }> = ({
  className,
}) => {
  return (
    <div className={cn("grid grid-cols-2 md:grid-cols-4 gap-4", className)}>
      {Array.from({ length: 4 }).map((_, index) => (
        <div key={index} className="bg-white p-4 rounded-lg shadow-sm">
          <Skeleton className="h-4 w-16 mb-2" />
          <Skeleton className="h-8 w-24" />
        </div>
      ))}
    </div>
  );
};

export const LoadingFilters: React.FC<{ className?: string }> = ({
  className,
}) => {
  return (
    <div className={cn("space-y-4", className)}>
      <Skeleton className="h-10 w-full" />
      <div className="flex flex-wrap gap-2">
        {Array.from({ length: 4 }).map((_, index) => (
          <Skeleton key={index} className="h-8 w-24" />
        ))}
      </div>
    </div>
  );
};

// Create a named object containing all loading components
const LoadingComponents = {
  LoadingContainer,
  LoadingSpinner,
  LoadingCard,
  LoadingText,
  LoadingError,
  LoadingStats,
  LoadingFilters,
};

// Export the named object as default
export default LoadingComponents;
--- End of Content for LoadingStates.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\new\shared\Pagination.tsx
--------------------------------------------------------------------------------
Content:
// /shared/Pagination.tsx
"use client";


import React from 'react';
import { Button } from '@/components/ui/button';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { 
  ChevronRight, 
  ChevronLeft,
  ChevronsLeft,
  ChevronsRight
} from 'lucide-react';

interface PaginationProps {
  currentPage: number;
  totalPages: number;
  pageSize: number;
  totalItems: number;
  onPageChange: (page: number) => void;
  onPageSizeChange: (size: number) => void;
  className?: string;
}

const pageSizeOptions = [10, 20, 50, 100];

const Pagination: React.FC<PaginationProps> = ({
  currentPage,
  totalPages,
  pageSize,
  totalItems,
  onPageChange,
  onPageSizeChange,
  className
}) => {
  // Helper to generate page numbers array
  const getPageNumbers = () => {
    const pages: (number | string)[] = [];
    const maxVisiblePages = 5;
    
    if (totalPages <= maxVisiblePages) {
      return Array.from({ length: totalPages }, (_, i) => i + 1);
    }

    // Always show first page
    pages.push(1);

    // Calculate start and end of visible pages
    let start = Math.max(currentPage - 1, 2);
    let end = Math.min(currentPage + 1, totalPages - 1);

    // Adjust for edge cases
    if (currentPage <= 3) {
      end = Math.min(maxVisiblePages - 1, totalPages - 1);
    } else if (currentPage >= totalPages - 2) {
      start = Math.max(totalPages - maxVisiblePages + 2, 2);
    }

    // Add ellipsis and numbers
    if (start > 2) pages.push('...');
    for (let i = start; i <= end; i++) {
      pages.push(i);
    }
    if (end < totalPages - 1) pages.push('...');

    // Always show last page
    if (totalPages > 1) pages.push(totalPages);

    return pages;
  };

  const startItem = (currentPage - 1) * pageSize + 1;
  const endItem = Math.min(currentPage * pageSize, totalItems);

  return (
    <div className={`flex flex-col sm:flex-row items-center justify-between gap-4 ${className}`}>
      {/* Page Size Selector */}
      <div className="flex items-center gap-2 text-sm text-gray-600">
        <span>הצג</span>
        <Select
          value={pageSize.toString()}
          onValueChange={(value) => onPageSizeChange(Number(value))}
        >
          <SelectTrigger className="w-[70px]">
            <SelectValue />
          </SelectTrigger>
          <SelectContent>
            {pageSizeOptions.map(size => (
              <SelectItem key={size} value={size.toString()}>
                {size}
              </SelectItem>
            ))}
          </SelectContent>
        </Select>
        <span>שורות</span>
      </div>

      {/* Results Count */}
      <div className="text-sm text-gray-600">
        מציג {startItem}-{endItem} מתוך {totalItems} תוצאות
      </div>

      {/* Page Navigation */}
      <div className="flex items-center gap-1">
        <Button
          variant="outline"
          size="icon"
          onClick={() => onPageChange(1)}
          disabled={currentPage === 1}
        >
          <ChevronsRight className="h-4 w-4" />
        </Button>

        <Button
          variant="outline"
          size="icon"
          onClick={() => onPageChange(currentPage - 1)}
          disabled={currentPage === 1}
        >
          <ChevronRight className="h-4 w-4" />
        </Button>

        {getPageNumbers().map((page, index) => (
          typeof page === 'number' ? (
            <Button
              key={index}
              variant={currentPage === page ? "default" : "outline"}
              size="sm"
              onClick={() => onPageChange(page)}
              className="hidden sm:inline-flex min-w-[32px]"
            >
              {page}
            </Button>
          ) : (
            <span key={index} className="px-2">
              {page}
            </span>
          )
        ))}

        <Button
          variant="outline"
          size="icon"
          onClick={() => onPageChange(currentPage + 1)}
          disabled={currentPage === totalPages}
        >
          <ChevronLeft className="h-4 w-4" />
        </Button>

        <Button
          variant="outline"
          size="icon"
          onClick={() => onPageChange(totalPages)}
          disabled={currentPage === totalPages}
        >
          <ChevronsLeft className="h-4 w-4" />
        </Button>
      </div>
    </div>
  );
};

export default Pagination;
--- End of Content for Pagination.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\new\shared\StatusBadge.tsx
--------------------------------------------------------------------------------
Content:
import React from "react";
import { Badge } from "@/components/ui/badge";
import {
  Circle,
  CheckCircle,
  XCircle,
  Clock,
  AlertTriangle,
} from "lucide-react";
import { MatchSuggestionStatus, VerificationStatus } from "@prisma/client";

type StatusType = "suggestion" | "verification" | "profile";
type StatusSize = "sm" | "md" | "lg";

interface StatusConfig {
  label: string;
  color: "destructive" | "outline" | "secondary" | "success" | "warning";
  icon:
    | typeof Circle
    | typeof CheckCircle
    | typeof XCircle
    | typeof Clock
    | typeof AlertTriangle;
}

interface StatusBadgeProps {
  type: StatusType;
  status: string;
  size?: StatusSize;
}

const suggestionStatuses: Record<MatchSuggestionStatus, StatusConfig> = {
  DRAFT: {
    label: "טיוטה",
    color: "secondary",
    icon: Circle,
  },
  PENDING_FIRST_PARTY: {
    label: "ממתין לצד ראשון",
    color: "warning",
    icon: Clock,
  },
  FIRST_PARTY_APPROVED: {
    label: 'אושר ע"י צד ראשון',
    color: "success",
    icon: CheckCircle,
  },
  FIRST_PARTY_DECLINED: {
    label: 'נדחה ע"י צד ראשון',
    color: "destructive",
    icon: XCircle,
  },
  PENDING_SECOND_PARTY: {
    label: "ממתין לצד שני",
    color: "warning",
    icon: Clock,
  },
  SECOND_PARTY_APPROVED: {
    label: 'אושר ע"י צד שני',
    color: "success",
    icon: CheckCircle,
  },
  SECOND_PARTY_DECLINED: {
    label: 'נדחה ע"י צד שני',
    color: "destructive",
    icon: XCircle,
  },
  AWAITING_MATCHMAKER_APPROVAL: {
    label: "ממתין לאישור שדכן",
    color: "warning",
    icon: Clock,
  },
  CONTACT_DETAILS_SHARED: {
    label: "פרטי קשר שותפו",
    color: "success",
    icon: CheckCircle,
  },
  AWAITING_FIRST_DATE_FEEDBACK: {
    label: "ממתין למשוב פגישה ראשונה",
    color: "warning",
    icon: Clock,
  },
  THINKING_AFTER_DATE: {
    label: "בשיקול לאחר פגישה",
    color: "warning",
    icon: Clock,
  },
  PROCEEDING_TO_SECOND_DATE: {
    label: "ממשיכים לפגישה שנייה",
    color: "success",
    icon: CheckCircle,
  },
  ENDED_AFTER_FIRST_DATE: {
    label: "הסתיים לאחר פגישה ראשונה",
    color: "destructive",
    icon: XCircle,
  },
  MEETING_PENDING: {
    label: "פגישה בתכנון",
    color: "warning",
    icon: Clock,
  },
  MEETING_SCHEDULED: {
    label: "פגישה נקבעה",
    color: "success",
    icon: CheckCircle,
  },
  MATCH_APPROVED: {
    label: "השידוך אושר",
    color: "success",
    icon: CheckCircle,
  },
  MATCH_DECLINED: {
    label: "השידוך נדחה",
    color: "destructive",
    icon: XCircle,
  },
  DATING: {
    label: "בתהליך היכרות",
    color: "secondary",
    icon: Circle,
  },
  ENGAGED: {
    label: "מאורסים",
    color: "success",
    icon: CheckCircle,
  },
  MARRIED: {
    label: "נישאו",
    color: "success",
    icon: CheckCircle,
  },
  EXPIRED: {
    label: "פג תוקף",
    color: "destructive",
    icon: XCircle,
  },
  CLOSED: {
    label: "סגור",
    color: "destructive",
    icon: XCircle,
  },
  CANCELLED: {
    label: "בוטל",
    color: "destructive",
    icon: XCircle,
  },
};

const verificationStatuses: Record<VerificationStatus, StatusConfig> = {
  PENDING: {
    label: "ממתין לאימות",
    color: "warning",
    icon: Clock,
  },
  COMPLETED: {
    label: "מאומת",
    color: "success",
    icon: CheckCircle,
  },
  EXPIRED: {
    label: "פג תוקף",
    color: "destructive",
    icon: XCircle,
  },
  FAILED: {
    label: "נכשל",
    color: "destructive",
    icon: XCircle,
  },
};

const profileStatuses: Record<string, StatusConfig> = {
  INCOMPLETE: {
    label: "לא הושלם",
    color: "warning",
    icon: AlertTriangle,
  },
  PENDING_VERIFICATION: {
    label: "ממתין לאימות",
    color: "warning",
    icon: Clock,
  },
  VERIFIED: {
    label: "מאומת",
    color: "success",
    icon: CheckCircle,
  },
  BLOCKED: {
    label: "חסום",
    color: "destructive",
    icon: XCircle,
  },
};

const defaultStatus: StatusConfig = {
  label: "לא ידוע",
  color: "secondary",
  icon: Circle,
};

const getStatusConfig = (type: StatusType, status: string): StatusConfig => {
  switch (type) {
    case "suggestion":
      return (
        suggestionStatuses[status as MatchSuggestionStatus] || defaultStatus
      );
    case "verification":
      return (
        verificationStatuses[status as VerificationStatus] || defaultStatus
      );
    case "profile":
      return profileStatuses[status] || defaultStatus;
    default:
      return defaultStatus;
  }
};

const StatusBadge: React.FC<StatusBadgeProps> = ({
  type,
  status,
  size = "md",
}) => {
  const config = getStatusConfig(type, status);
  const Icon = config.icon;

  const sizeClasses = {
    sm: "text-xs px-2 py-0.5",
    md: "text-sm px-2.5 py-1",
    lg: "text-base px-3 py-1.5",
  };

  return (
    <Badge
      variant={config.color}
      className={`flex items-center gap-1.5 ${sizeClasses[size]}`}
    >
      <Icon className={size === "sm" ? "w-3 h-3" : "w-4 h-4"} />
      <span>{config.label}</span>
    </Badge>
  );
};

export default StatusBadge;
--- End of Content for StatusBadge.tsx ---

================================================================================
Directory: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\new\types
================================================================================

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\new\types\candidates.ts
--------------------------------------------------------------------------------
Content:
// candidates.ts
import { Gender, AvailabilityStatus, UserStatus, UserSource  } from '@prisma/client';
import type { UserProfile, UserImage, QuestionnaireResponse} from '@/types/next-auth';

// Base API Response Type
export interface APIResponse<T> {
  success: boolean;
  clients: T[];
  count: number;
  error?: string;
}

// Base Types
export type CandidateImage = UserImage;

export type CandidateProfile = UserProfile;

export type MobileView = 'split' | 'single' | 'double';

export interface Candidate {
  id: string;
  email: string;
  firstName: string;
  createdAt: Date;
  lastName: string;
  status: UserStatus;
  isVerified: boolean;
  images: CandidateImage[];
  isProfileComplete: boolean;
  source: UserSource; // Add new field
  addedByMatchmakerId?: string | null; // Add new field
  profile: CandidateProfile; // Ensure this uses the updated CandidateProfile
    suggestionStatus?: {
    status: 'BLOCKED' | 'PENDING';
    suggestionId: string;
    withCandidateName: string;
  } | null;

}
export interface CandidatesFilter {
   source?: UserSource;
  gender?: Gender;
  ageRange?: {
    min: number;
    max: number;
  };
  heightRange?: {
    min: number;
    max: number;
  };
  cities?: string[];
  religiousLevel?: string;
  occupations?: string[];
  educationLevel?: string;
  maritalStatus?: string;
  availabilityStatus?: AvailabilityStatus | string;
  isVerified?: boolean;
  hasReferences?: boolean;
  lastActiveDays?: number;
  isProfileComplete?: boolean;
  searchQuery?: string;
  savedFilterId?: string;
  separateFiltering?: boolean;
  
  // הוספת שדות חיפוש נפרדים
  maleSearchQuery?: string;
  femaleSearchQuery?: string;
  
  maleFilters?: Partial<CandidatesFilter>;
  femaleFilters?: Partial<CandidatesFilter>;
  userStatus?: UserStatus;
}

// ViewMode and Action Types - אלה נשארים כמו שהם
export type ViewMode = 'grid' | 'list';
export type CardSize = 'sm' | 'md' | 'lg';
export type CandidateAction = 'suggest' | 'invite' | 'contact' | 'favorite' | 'view' | 'edit';

// Profile Card Types
export interface ProfileCardData {
  profile: CandidateProfile;
  images: CandidateImage[];
  questionnaire?: QuestionnaireResponse;
}

/**
 * ממפה את אובייקט המועמד מהשרת למבנה הנדרש עבור ProfileCard
 */
export const mapCandidateToProfileCard = (candidate: Candidate): ProfileCardData => {
  return {
    profile: candidate.profile,
    images: candidate.images,
    questionnaire: undefined // יש להוסיף לוגיקה לטעינת השאלון בנפרד
  };
};

/**
 * מפריד מועמדים לפי מגדר
 */
export const separateCandidatesByGender = (candidates: Candidate[]) => {
  return {
    maleCandidates: candidates.filter(c => c.profile.gender === 'MALE'),
    femaleCandidates: candidates.filter(c => c.profile.gender === 'FEMALE')
  };
};

/**
 * בודק האם הפרופיל מלא
 */
export const isProfileComplete = (profile: CandidateProfile): boolean => {
  const requiredFields: Array<keyof CandidateProfile> = [
    'birthDate',
    'city',
    'religiousLevel',
    'about',
    'occupation',
    'education'
  ];

  return requiredFields.every(field => Boolean(profile[field]));
};

const candidateUtils = {
  mapCandidateToProfileCard,
  separateCandidatesByGender,
  isProfileComplete
};

export default candidateUtils;
--- End of Content for candidates.ts ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\new\types\filters.ts
--------------------------------------------------------------------------------
Content:
// src/app/components/matchmaker/new/types/filters.ts

import { Gender, AvailabilityStatus, UserStatus, UserSource  } from '@prisma/client';

// הגדרת טווח ערכים מספריים
export interface RangeFilter {
  min: number;
  max: number;
}

// הגדרת פילטר שמור
export interface SavedFilter {
  id: string;
  name: string;
  filters: FilterState;
  isDefault?: boolean;
  createdAt: Date;
}

export interface FilterState {
  // הוספת מצב תצוגה נפרדת
  separateFiltering: boolean;
    source?: UserSource | undefined;
  // הוספת שדות חיפוש נפרדים
  maleSearchQuery?: string;
  femaleSearchQuery?: string;

  // פילטרים נפרדים לגברים
  maleFilters?: Omit<FilterState, 'gender' | 'maleFilters' | 'femaleFilters' | 
    'separateFiltering' | 'maleSearchQuery' | 'femaleSearchQuery'>;
  
  // פילטרים נפרדים לנשים
  femaleFilters?: Omit<FilterState, 'gender' | 'maleFilters' | 'femaleFilters' | 
    'separateFiltering' | 'maleSearchQuery' | 'femaleSearchQuery'>;

  searchQuery?: string;
  savedFilterId?: string;
  gender?: Gender | undefined;
  ageRange?: RangeFilter;
  heightRange?: RangeFilter;
  cities?: string[];
  occupations?: string[];
  religiousLevel?: string;
  educationLevel?: string;
  maritalStatus?: string;
  availabilityStatus?: AvailabilityStatus | string;
  userStatus?: UserStatus;
  isVerified?: boolean;
  hasReferences?: boolean;
  lastActiveDays?: number;
  isProfileComplete?: boolean;
}

// הגדרת אפשרות פילטר
export interface FilterOption {
  key: keyof (FilterState & { education: string });
  value: Gender | AvailabilityStatus | UserStatus | RangeFilter | string[] | string | number | boolean | undefined;
  label: string;
  category?: string;
}

// הגדרת קטגוריית פילטר
export interface FilterCategory {
  id: string;
  label: string;
  filters: Array<keyof (FilterState & { education: string })>;
}

// הגדרת פרופ לקומפוננטת הפילטרים
export interface FilterProps {
  filters: FilterState;
  onFiltersChange: (filters: FilterState) => void;
  onReset?: () => void;
  className?: string;
}

// הגדרת אפשרויות הפילטר
export interface FilterOptions {
  ages: RangeFilter;
  heights: RangeFilter;
  cities: string[];
  religiousLevels: string[];
  educationLevels: string[];
  occupations: string[];
  maritalStatuses: string[];
  availabilityStatuses: AvailabilityStatus[];
}

// הגדרת מצב הממשק של הפילטרים
export interface FilterUIState {
  isOpen: boolean;
  activeCategory?: string;
  showSaveDialog: boolean;
  presetName: string;
}

// הגדרה של אירועי שינוי בפילטרים
export type FilterChangeHandler = (filters: FilterState) => void;

// הגדרת אירועי שמירת פילטר
export interface SaveFilterHandler {
  (name: string, filters: FilterState): Promise<SavedFilter>;
}

// הגדרת אירועי טעינת פילטר
export interface LoadFilterHandler {
  (id: string): void;
}

// הגדרת הגדרות הפילטרים
export interface FilterSettings {
  localStorageKey?: string;
  defaultFilters?: Partial<FilterState>;
  onFilterChange?: FilterChangeHandler;
}

// הגדרת תוצאות הפילטר
export interface FilterResults {
  totalResults: number;
  filteredResults: number;
  categories: Record<string, number>;
}

// קונסטנטות של הפילטרים
export const DEFAULT_FILTER_STATE: FilterState = {
  separateFiltering: false,
  maleFilters: {},
  femaleFilters: {},
  maleSearchQuery: '',
  femaleSearchQuery: '',
  gender: undefined,
  ageRange: { min: 18, max: 99 },
  heightRange: { min: 140, max: 210 },
  cities: [],
  occupations: [],
  religiousLevel: undefined,
  educationLevel: undefined,
  maritalStatus: undefined,
  availabilityStatus: undefined,
    source: undefined,
  userStatus: undefined,
  isVerified: undefined,
  hasReferences: undefined,
  lastActiveDays: undefined,
  isProfileComplete: undefined,
  searchQuery: '',
  savedFilterId: undefined
};

// קטגוריות פילטרים מוגדרות מראש
export const FILTER_CATEGORIES: FilterCategory[] = [
  {
    id: 'basic',
    label: 'פילטרים בסיסיים',
    filters: ['gender', 'ageRange', 'cities', 'religiousLevel']
  },
  {
    id: 'advanced',
    label: 'פילטרים מתקדמים',
    filters: ['heightRange', 'occupations', 'educationLevel', 'maritalStatus']
  },
  {
    id: 'status',
    label: 'סטטוס ואימות',
    filters: ['availabilityStatus', 'isVerified', 'hasReferences', 'lastActiveDays']
  }
];

// טיפוסי מיון
export type SortDirection = 'asc' | 'desc';

export interface SortOption {
  field: keyof FilterState;
  direction: SortDirection;
  label: string;
}

// הגדרות קיבוץ
export interface GroupOption {
  field: keyof FilterState;
  label: string;
}

export const filterConstants = {
  DEFAULT_FILTER_STATE,
  FILTER_CATEGORIES
};

export default filterConstants;
--- End of Content for filters.ts ---

