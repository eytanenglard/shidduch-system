################################################################################
# Directory Content Map For: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker
# Generated on: 2025-08-27 15:45:16
################################################################################

================================================================================
Directory: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker
================================================================================

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\matchmaker_contents.txt
--------------------------------------------------------------------------------
[This is the output log file itself. Content not included.]

================================================================================
Directory: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\new
================================================================================

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\new\MatchmakerEditProfile.tsx
--------------------------------------------------------------------------------
Content:
// src/app/components/matchmaker/new/MatchmakerEditProfile.tsx

import React, { useState, useEffect, useCallback } from 'react';
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription,
  DialogFooter,
  DialogClose,
} from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { toast } from 'sonner';
import { ProfileSection } from '@/components/profile';
import { PhotosSection } from '@/components/profile';
import { PreferencesSection } from '@/components/profile';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import {
  Loader2,
  X,
  UserCog,
  Image as ImageIcon,
  Sliders,
  Trash2,
  AlertCircle,
  Send,
} from 'lucide-react';
import type { UserProfile, UserImage } from '@/types/next-auth';
import type { Candidate } from './types/candidates';
import { motion } from 'framer-motion';
import { useSession } from 'next-auth/react';
import type { MatchmakerPageDictionary } from '@/types/dictionaries/matchmaker';
import type { ProfilePageDictionary } from '@/types/dictionary';

interface MatchmakerEditProfileProps {
  isOpen: boolean;
  onClose: () => void;
  candidate: Candidate | null;
  onCandidateDeleted?: (candidateId: string) => void;
  dict: MatchmakerPageDictionary['candidatesManager']['editProfile'];
  profileDict: ProfilePageDictionary;
}

const MatchmakerEditProfile: React.FC<MatchmakerEditProfileProps> = ({
  isOpen,
  onClose,
  candidate,
  onCandidateDeleted,
  dict,
  profileDict,
}) => {
  const { data: session } = useSession();
  const isAdmin = session?.user?.role === 'ADMIN';

  const [activeTab, setActiveTab] = useState('profile');
  const [isEditing, setIsEditing] = useState(true);
  const [isSaving, setIsSaving] = useState(false);
  const [isUploading, setIsUploading] = useState(false);
  const [profile, setProfile] = useState<UserProfile | null>(null);
  const [images, setImages] = useState<UserImage[]>([]);
  const [isLoading, setIsLoading] = useState(true);

  const [isDeleteCandidateDialogOpen, setIsDeleteCandidateDialogOpen] =
    useState(false);
  const [deleteCandidateConfirmText, setDeleteCandidateConfirmText] =
    useState('');
  const [isDeletingCandidate, setIsDeletingCandidate] = useState(false);

  const [isSetupInviteOpen, setIsSetupInviteOpen] = useState(false);
  const [inviteEmail, setInviteEmail] = useState('');
  const [isSendingInvite, setIsSendingInvite] = useState(false);

  const DELETE_CANDIDATE_CONFIRMATION_PHRASE = dict.deleteConfirmationPhrase;

  const fetchProfileData = useCallback(async () => {
    if (!candidate) return;
    setIsLoading(true);
    try {
      const response = await fetch(
        `/api/matchmaker/candidates/${candidate.id}`
      );
      if (!response.ok) throw new Error('Failed to fetch candidate profile');
      const data = await response.json();
      if (data.success) {
        setProfile(data.profile);
        setImages(data.images || []);
        if (
          candidate.email &&
          !candidate.email.endsWith('@shidduch.placeholder.com')
        ) {
          setInviteEmail(candidate.email);
        } else {
          setInviteEmail('');
        }
      } else {
        throw new Error(data.error || 'Failed to load profile data');
      }
    } catch (error) {
      console.error('Error fetching profile:', error);
      toast.error(dict.toasts.loadError);
    } finally {
      setIsLoading(false);
    }
  }, [candidate, dict.toasts.loadError]);

  useEffect(() => {
    if (isOpen && candidate) {
      fetchProfileData();
    } else if (!isOpen) {
      // Reset state on close
      setProfile(null);
      setImages([]);
      setActiveTab('profile');
      setIsLoading(true);
      setDeleteCandidateConfirmText('');
      setIsDeleteCandidateDialogOpen(false);
      setIsSetupInviteOpen(false);
      setInviteEmail('');
      setIsSendingInvite(false);
    }
  }, [isOpen, candidate, fetchProfileData]);

  const handleProfileUpdate = async (updatedProfile: Partial<UserProfile>) => {
    if (!candidate || !profile) return;
    setIsSaving(true);
    try {
      const response = await fetch(
        `/api/matchmaker/candidates/${candidate.id}`,
        {
          method: 'PATCH',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(updatedProfile),
        }
      );
      const data = await response.json();
      if (!response.ok || !data.success) {
        throw new Error(data.error || 'Failed to update profile');
      }
      setProfile(
        (prevProfile) => ({ ...prevProfile, ...updatedProfile }) as UserProfile
      );
      toast.success(dict.toasts.updateSuccess, {
        position: 'top-center',
        duration: 3000,
      });
    } catch (error) {
      console.error('Error updating profile:', error);
      toast.error(
        `${dict.toasts.updateError}: ${error instanceof Error ? error.message : 'Unknown error'}`,
        { duration: 5000 }
      );
    } finally {
      setIsSaving(false);
    }
  };

  const handleImageUpload = async (files: File[]) => {
    if (!candidate) return;
    setIsUploading(true);
    const uploadPromises = files.map(async (file) => {
      const formData = new FormData();
      formData.append('image', file);
      formData.append('userId', candidate.id);
      const response = await fetch(
        `/api/matchmaker/candidates/${candidate.id}/images`,
        { method: 'POST', body: formData }
      );
      const data = await response.json();
      if (!response.ok || !data.success) {
        throw new Error(
          `שגיאה בהעלאת הקובץ ${file.name}: ${data.error || 'שגיאת שרת'}`
        );
      }
      return data.image;
    });
    try {
      const newImages = await Promise.all(uploadPromises);
      setImages((prev) => [...prev, ...newImages]);
      toast.success(
        newImages.length > 1
          ? dict.toasts.uploadSuccessMultiple.replace(
              '{{count}}',
              String(newImages.length)
            )
          : dict.toasts.uploadSuccessSingle
      );
    } catch (error) {
      console.error('Error uploading images:', error);
      toast.error(
        `${dict.toasts.uploadError}: ${error instanceof Error ? error.message : 'Unknown error'}`
      );
    } finally {
      setIsUploading(false);
    }
  };

  const handleSetMainImage = async (imageId: string) => {
    if (!candidate) return;
    try {
      const response = await fetch(
        `/api/matchmaker/candidates/${candidate.id}/images/${imageId}/main`,
        { method: 'PATCH' }
      );
      const data = await response.json();
      if (!response.ok || !data.success)
        throw new Error(data.error || 'Failed to set main image');
      setImages((prev) =>
        prev.map((img) => ({ ...img, isMain: img.id === imageId }))
      );
      toast.success(dict.toasts.setMainSuccess);
    } catch (error) {
      console.error('Error setting main image:', error);
      toast.error(dict.toasts.setMainError);
    }
  };

  const handleDeleteImage = async (imageIds: string[]) => {
    if (!candidate || imageIds.length === 0) return;
    setIsUploading(true);
    try {
      const currentMainImage = images.find((img) => img.isMain);
      const isMainImageBeingDeleted = currentMainImage
        ? imageIds.includes(currentMainImage.id)
        : false;
      const deletePromises = imageIds.map((id) =>
        fetch(`/api/matchmaker/candidates/${candidate.id}/images/${id}`, {
          method: 'DELETE',
        })
      );
      const responses = await Promise.all(deletePromises);
      for (const response of responses) {
        if (!response.ok && response.status !== 204) {
          const errorData = await response.json().catch(() => null);
          throw new Error(
            errorData?.error ||
              `Error deleting one of the images (status: ${response.status})`
          );
        }
      }
      const remainingImages = images.filter(
        (img) => !imageIds.includes(img.id)
      );
      if (isMainImageBeingDeleted && remainingImages.length > 0) {
        setImages(remainingImages);
        await handleSetMainImage(remainingImages[0].id);
      } else {
        setImages(remainingImages);
      }
      toast.success(
        imageIds.length > 1
          ? dict.toasts.deleteImageSuccessMultiple.replace(
              '{{count}}',
              String(imageIds.length)
            )
          : dict.toasts.deleteImageSuccessSingle,
        { position: 'top-center' }
      );
    } catch (error) {
      console.error('Error deleting image(s):', error);
      toast.error(
        error instanceof Error ? error.message : dict.toasts.deleteImageError
      );
    } finally {
      setIsUploading(false);
    }
  };

  const handleDeleteCandidateRequest = async () => {
    if (!candidate) return;
    if (deleteCandidateConfirmText !== DELETE_CANDIDATE_CONFIRMATION_PHRASE) {
      toast.error(dict.toasts.deleteCandidateErrorConfirmation, {
        description: dict.toasts.deleteCandidateErrorDescription.replace(
          '{{phrase}}',
          DELETE_CANDIDATE_CONFIRMATION_PHRASE
        ),
      });
      return;
    }
    setIsDeletingCandidate(true);
    try {
      const response = await fetch(
        `/api/matchmaker/candidates/${candidate.id}`,
        { method: 'DELETE' }
      );
      const data = await response.json();
      if (!response.ok || !data.success)
        throw new Error(data.error || 'Failed to delete candidate profile');
      toast.success(dict.toasts.deleteCandidateSuccess, {
        position: 'top-center',
        duration: 3000,
      });
      if (onCandidateDeleted) onCandidateDeleted(candidate.id);
      setIsDeleteCandidateDialogOpen(false);
      onClose();
    } catch (error) {
      console.error('Error deleting candidate:', error);
      toast.error(
        `${dict.toasts.deleteCandidateError}: ${error instanceof Error ? error.message : 'Unknown error'}`,
        { duration: 5000 }
      );
    } finally {
      setIsDeletingCandidate(false);
    }
  };

  const handleSendSetupInvite = async () => {
    if (!candidate || !inviteEmail) {
      toast.error(dict.toasts.sendInviteErrorEmail);
      return;
    }
    setIsSendingInvite(true);
    try {
      const response = await fetch(
        `/api/matchmaker/candidates/${candidate.id}/invite-setup`,
        {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ email: inviteEmail }),
        }
      );
      const result = await response.json();
      if (!response.ok || !result.success)
        throw new Error(result.error || dict.toasts.sendInviteErrorGeneral);
      toast.success(dict.toasts.sendInviteSuccess);
      setIsSetupInviteOpen(false);
    } catch (error) {
      console.error('Error sending setup invite:', error);
      toast.error(
        error instanceof Error
          ? error.message
          : dict.toasts.sendInviteErrorGeneral
      );
    } finally {
      setIsSendingInvite(false);
    }
  };

  if (!candidate && isOpen) return null;
  if (!candidate) return null;

  return (
    <>
      <Dialog open={isOpen} onOpenChange={onClose}>
        <DialogContent className="max-w-5xl max-h-[90vh] p-0 overflow-hidden">
          {isLoading && !profile ? (
            <div className="flex items-center justify-center h-64">
              <Loader2 className="w-10 h-10 animate-spin text-primary" />
            </div>
          ) : (
            <motion.div
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              transition={{ duration: 0.3 }}
              className="flex flex-col h-full max-h-[90vh]"
            >
              <DialogHeader className="p-6 border-b">
                <div className="flex items-center justify-between">
                  <div>
                    <DialogTitle className="text-2xl font-bold text-primary/90">
                      {dict.header.title
                        .replace('{{firstName}}', candidate.firstName)
                        .replace('{{lastName}}', candidate.lastName)}
                    </DialogTitle>
                    <DialogDescription className="text-gray-500 mt-1">
                      {dict.header.description}
                    </DialogDescription>
                  </div>
                  {isSaving && (
                    <div className="flex items-center bg-blue-50 text-blue-700 py-1 px-2 rounded-full text-sm">
                      <Loader2 className="w-3 h-3 animate-spin mr-1" />
                      {dict.header.saving}
                    </div>
                  )}
                </div>
              </DialogHeader>
              <Tabs
                value={activeTab}
                onValueChange={setActiveTab}
                className="flex-1 flex flex-col min-h-0"
              >
                <div className="px-6 pt-4">
                  <TabsList className="w-full bg-muted/30 p-1 rounded-xl shadow-sm">
                    <TabsTrigger
                      value="profile"
                      className="rounded-lg data-[state=active]:bg-gradient-to-r data-[state=active]:from-blue-500/90 data-[state=active]:to-blue-600 data-[state=active]:text-white flex items-center gap-2"
                    >
                      <UserCog className="w-4 h-4" />
                      {dict.tabs.profile}
                    </TabsTrigger>
                    <TabsTrigger
                      value="photos"
                      className="rounded-lg data-[state=active]:bg-gradient-to-r data-[state=active]:from-blue-500/90 data-[state=active]:to-blue-600 data-[state=active]:text-white flex items-center gap-2"
                    >
                      <ImageIcon className="w-4 h-4" />
                      {dict.tabs.photos}
                    </TabsTrigger>
                    <TabsTrigger
                      value="preferences"
                      className="rounded-lg data-[state=active]:bg-gradient-to-r data-[state=active]:from-blue-500/90 data-[state=active]:to-blue-600 data-[state=active]:text-white flex items-center gap-2"
                    >
                      <Sliders className="w-4 h-4" />
                      {dict.tabs.preferences}
                    </TabsTrigger>
                  </TabsList>
                </div>
                <div className="flex-1 overflow-hidden flex flex-col min-h-0">
                  <TabsContent
                    value="profile"
                    className="flex-1 overflow-auto p-4 m-0 pb-16"
                  >
                    {profile ? (
                      <div className="bg-white rounded-xl shadow-sm border">
                        <ProfileSection
                          profile={profile}
                          isEditing={isEditing}
                          setIsEditing={setIsEditing}
                          onSave={handleProfileUpdate}
                          dict={profileDict.profileSection}
                        />
                      </div>
                    ) : (
                      <div className="flex items-center justify-center h-full">
                        <Loader2 className="w-8 h-8 animate-spin text-muted-foreground" />
                      </div>
                    )}
                  </TabsContent>
                  <TabsContent
                    value="photos"
                    className="flex-1 overflow-auto p-4 m-0 pb-16"
                  >
                    <div className="bg-white rounded-xl shadow-sm border">
                      <PhotosSection
                        images={images}
                        isUploading={isUploading}
                        disabled={isSaving || isDeletingCandidate}
                        onUpload={handleImageUpload}
                        onSetMain={handleSetMainImage}
                        onDelete={handleDeleteImage}
                        maxImages={10}
                        dict={profileDict.photosSection}
                      />
                    </div>
                  </TabsContent>
                  <TabsContent
                    value="preferences"
                    className="flex-1 overflow-auto p-4 m-0 pb-16"
                  >
                    {profile ? (
                      <div className="bg-white rounded-xl shadow-sm border">
                        <PreferencesSection
                          profile={profile}
                          isEditing={isEditing}
                          setIsEditing={setIsEditing}
                          onChange={handleProfileUpdate}
                          dictionary={profileDict.preferencesSection}
                        />
                      </div>
                    ) : (
                      <div className="flex items-center justify-center h-full">
                        <Loader2 className="w-8 h-8 animate-spin text-muted-foreground" />
                      </div>
                    )}
                  </TabsContent>
                </div>
              </Tabs>
              <div className="p-4 border-t flex justify-between items-center mt-auto bg-white/80 backdrop-blur-sm sticky bottom-0">
                <div>
                  <span className="text-sm text-muted-foreground">
                    {activeTab === 'profile'
                      ? dict.footer.tabInfo.profile
                      : activeTab === 'photos'
                        ? dict.footer.tabInfo.photos
                        : dict.footer.tabInfo.preferences}
                  </span>
                </div>
                <div className="flex items-center gap-3">
                  <Button
                    variant="outline"
                    onClick={() => setIsSetupInviteOpen(true)}
                    disabled={
                      isSaving || isDeletingCandidate || isSendingInvite
                    }
                  >
                    <Send className="w-4 h-4 ml-2" />
                    {dict.footer.buttons.sendInvite}
                  </Button>
                  {isAdmin && (
                    <Button
                      variant="destructive"
                      onClick={() => setIsDeleteCandidateDialogOpen(true)}
                      disabled={isSaving || isUploading || isDeletingCandidate}
                      size="sm"
                    >
                      <Trash2 className="w-4 h-4 mr-2" />
                      {dict.footer.buttons.deleteCandidate}
                    </Button>
                  )}
                  <Button
                    variant="outline"
                    onClick={onClose}
                    disabled={isSaving || isDeletingCandidate}
                    className="bg-white hover:bg-gray-100 transition-colors shadow-sm"
                    size="sm"
                  >
                    <X className="w-4 h-4 mr-2" />
                    {dict.footer.buttons.close}
                  </Button>
                </div>
              </div>
            </motion.div>
          )}
        </DialogContent>
      </Dialog>

      {candidate && (
        <Dialog open={isSetupInviteOpen} onOpenChange={setIsSetupInviteOpen}>
          <DialogContent className="sm:max-w-md">
            <DialogHeader>
              <DialogTitle>{dict.inviteDialog.title}</DialogTitle>
              <DialogDescription>
                {dict.inviteDialog.description.replace(
                  '{{fullName}}',
                  `${candidate.firstName} ${candidate.lastName}`
                )}
              </DialogDescription>
            </DialogHeader>
            <div className="grid gap-4 py-4">
              <Label htmlFor="inviteEmail" className="text-right">
                {dict.inviteDialog.emailLabel}
              </Label>
              <Input
                id="inviteEmail"
                type="email"
                value={inviteEmail}
                onChange={(e) => setInviteEmail(e.target.value)}
                placeholder={dict.inviteDialog.emailPlaceholder}
                className="col-span-3"
                dir="ltr"
              />
            </div>
            <DialogFooter>
              <DialogClose asChild>
                <Button
                  type="button"
                  variant="secondary"
                  disabled={isSendingInvite}
                >
                  {dict.inviteDialog.buttons.cancel}
                </Button>
              </DialogClose>
              <Button
                type="button"
                onClick={handleSendSetupInvite}
                disabled={isSendingInvite || !inviteEmail}
              >
                {isSendingInvite ? (
                  <Loader2 className="ml-2 h-4 w-4 animate-spin" />
                ) : (
                  <Send className="ml-2 h-4 w-4" />
                )}
                {isSendingInvite
                  ? dict.inviteDialog.buttons.sending
                  : dict.inviteDialog.buttons.send}
              </Button>
            </DialogFooter>
          </DialogContent>
        </Dialog>
      )}

      {candidate && (
        <Dialog
          open={isDeleteCandidateDialogOpen}
          onOpenChange={(open) =>
            !isDeletingCandidate && setIsDeleteCandidateDialogOpen(open)
          }
        >
          <DialogContent className="sm:max-w-md">
            <DialogHeader>
              <DialogTitle className="text-xl flex items-center gap-2 text-red-600">
                <AlertCircle className="h-5 w-5" />
                {dict.deleteDialog.title}
              </DialogTitle>
              <DialogDescription>
                {dict.deleteDialog.description.replace(
                  '{{fullName}}',
                  `${candidate.firstName} ${candidate.lastName}`
                )}{' '}
                {dict.deleteDialog.irreversible}
              </DialogDescription>
            </DialogHeader>
            <div className="grid gap-4 py-4">
              <Label htmlFor="deleteCandidateConfirm" className="text-gray-700">
                {dict.deleteDialog.confirmationLabel.replace(
                  '{{phrase}}',
                  DELETE_CANDIDATE_CONFIRMATION_PHRASE
                )}
              </Label>
              <Input
                id="deleteCandidateConfirm"
                value={deleteCandidateConfirmText}
                onChange={(e) => setDeleteCandidateConfirmText(e.target.value)}
                disabled={isDeletingCandidate}
                className="border-gray-300 focus:border-red-500"
                placeholder={dict.deleteDialog.inputPlaceholder}
                dir="rtl"
              />
              {deleteCandidateConfirmText &&
                deleteCandidateConfirmText !==
                  DELETE_CANDIDATE_CONFIRMATION_PHRASE && (
                  <p className="text-xs text-red-600">
                    {dict.deleteDialog.mismatchError}
                  </p>
                )}
            </div>
            <DialogFooter>
              <Button
                variant="outline"
                onClick={() => {
                  setIsDeleteCandidateDialogOpen(false);
                  setDeleteCandidateConfirmText('');
                }}
                disabled={isDeletingCandidate}
                className="border-gray-300"
              >
                {dict.deleteDialog.buttons.cancel}
              </Button>
              <Button
                variant="destructive"
                onClick={handleDeleteCandidateRequest}
                disabled={
                  isDeletingCandidate ||
                  deleteCandidateConfirmText !==
                    DELETE_CANDIDATE_CONFIRMATION_PHRASE
                }
              >
                {isDeletingCandidate ? (
                  <span className="flex items-center gap-2">
                    <Loader2 className="w-4 h-4 animate-spin" />
                    {dict.deleteDialog.buttons.deleting}
                  </span>
                ) : (
                  <>
                    <Trash2 className="w-4 h-4 mr-2" />
                    {dict.deleteDialog.buttons.delete}
                  </>
                )}
              </Button>
            </DialogFooter>
          </DialogContent>
        </Dialog>
      )}
    </>
  );
};

export default MatchmakerEditProfile;
--- End of Content for MatchmakerEditProfile.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\new\new_contents.txt
--------------------------------------------------------------------------------
Content:
################################################################################
# Directory Content Map For: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\new
# Generated on: 2025-08-26 19:12:01
################################################################################

================================================================================
Directory: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\new
================================================================================

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\new\MatchmakerEditProfile.tsx
--------------------------------------------------------------------------------
Content:
// src/app/components/matchmaker/new/MatchmakerEditProfile.tsx

import React, { useState, useEffect, useCallback } from 'react';
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription,
  DialogFooter,
  DialogClose,
} from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { toast } from 'sonner';
import { ProfileSection } from '@/components/profile';
import { PhotosSection } from '@/components/profile';
import { PreferencesSection } from '@/components/profile';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import {
  Loader2,
  X,
  UserCog,
  Image as ImageIcon,
  Sliders,
  Trash2,
  AlertCircle,
  Send,
} from 'lucide-react';
import type { UserProfile, UserImage } from '@/types/next-auth';
import type { Candidate } from './types/candidates';
import { motion } from 'framer-motion';
import { useSession } from 'next-auth/react';
import type { MatchmakerPageDictionary } from '@/types/dictionaries/matchmaker';
import type { ProfilePageDictionary } from '@/types/dictionary';

interface MatchmakerEditProfileProps {
  isOpen: boolean;
  onClose: () => void;
  candidate: Candidate | null;
  onCandidateDeleted?: (candidateId: string) => void;
  dict: MatchmakerPageDictionary['candidatesManager']['editProfile'];
  profileDict: ProfilePageDictionary;
}

const MatchmakerEditProfile: React.FC<MatchmakerEditProfileProps> = ({
  isOpen,
  onClose,
  candidate,
  onCandidateDeleted,
  dict,
  profileDict,
}) => {
  const { data: session } = useSession();
  const isAdmin = session?.user?.role === 'ADMIN';

  const [activeTab, setActiveTab] = useState('profile');
  const [isEditing, setIsEditing] = useState(true);
  const [isSaving, setIsSaving] = useState(false);
  const [isUploading, setIsUploading] = useState(false);
  const [profile, setProfile] = useState<UserProfile | null>(null);
  const [images, setImages] = useState<UserImage[]>([]);
  const [isLoading, setIsLoading] = useState(true);

  const [isDeleteCandidateDialogOpen, setIsDeleteCandidateDialogOpen] =
    useState(false);
  const [deleteCandidateConfirmText, setDeleteCandidateConfirmText] =
    useState('');
  const [isDeletingCandidate, setIsDeletingCandidate] = useState(false);

  const [isSetupInviteOpen, setIsSetupInviteOpen] = useState(false);
  const [inviteEmail, setInviteEmail] = useState('');
  const [isSendingInvite, setIsSendingInvite] = useState(false);

  const DELETE_CANDIDATE_CONFIRMATION_PHRASE = dict.deleteConfirmationPhrase;

  const fetchProfileData = useCallback(async () => {
    if (!candidate) return;
    setIsLoading(true);
    try {
      const response = await fetch(
        `/api/matchmaker/candidates/${candidate.id}`
      );
      if (!response.ok) throw new Error('Failed to fetch candidate profile');
      const data = await response.json();
      if (data.success) {
        setProfile(data.profile);
        setImages(data.images || []);
        if (
          candidate.email &&
          !candidate.email.endsWith('@shidduch.placeholder.com')
        ) {
          setInviteEmail(candidate.email);
        } else {
          setInviteEmail('');
        }
      } else {
        throw new Error(data.error || 'Failed to load profile data');
      }
    } catch (error) {
      console.error('Error fetching profile:', error);
      toast.error(dict.toasts.loadError);
    } finally {
      setIsLoading(false);
    }
  }, [candidate, dict.toasts.loadError]);

  useEffect(() => {
    if (isOpen && candidate) {
      fetchProfileData();
    } else if (!isOpen) {
      // Reset state on close
      setProfile(null);
      setImages([]);
      setActiveTab('profile');
      setIsLoading(true);
      setDeleteCandidateConfirmText('');
      setIsDeleteCandidateDialogOpen(false);
      setIsSetupInviteOpen(false);
      setInviteEmail('');
      setIsSendingInvite(false);
    }
  }, [isOpen, candidate, fetchProfileData]);

  const handleProfileUpdate = async (updatedProfile: Partial<UserProfile>) => {
    if (!candidate || !profile) return;
    setIsSaving(true);
    try {
      const response = await fetch(
        `/api/matchmaker/candidates/${candidate.id}`,
        {
          method: 'PATCH',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(updatedProfile),
        }
      );
      const data = await response.json();
      if (!response.ok || !data.success) {
        throw new Error(data.error || 'Failed to update profile');
      }
      setProfile(
        (prevProfile) => ({ ...prevProfile, ...updatedProfile }) as UserProfile
      );
      toast.success(dict.toasts.updateSuccess, {
        position: 'top-center',
        duration: 3000,
      });
    } catch (error) {
      console.error('Error updating profile:', error);
      toast.error(
        `${dict.toasts.updateError}: ${error instanceof Error ? error.message : 'Unknown error'}`,
        { duration: 5000 }
      );
    } finally {
      setIsSaving(false);
    }
  };

  const handleImageUpload = async (files: File[]) => {
    if (!candidate) return;
    setIsUploading(true);
    const uploadPromises = files.map(async (file) => {
      const formData = new FormData();
      formData.append('image', file);
      formData.append('userId', candidate.id);
      const response = await fetch(
        `/api/matchmaker/candidates/${candidate.id}/images`,
        { method: 'POST', body: formData }
      );
      const data = await response.json();
      if (!response.ok || !data.success) {
        throw new Error(
          `שגיאה בהעלאת הקובץ ${file.name}: ${data.error || 'שגיאת שרת'}`
        );
      }
      return data.image;
    });
    try {
      const newImages = await Promise.all(uploadPromises);
      setImages((prev) => [...prev, ...newImages]);
      toast.success(
        newImages.length > 1
          ? dict.toasts.uploadSuccessMultiple.replace(
              '{{count}}',
              String(newImages.length)
            )
          : dict.toasts.uploadSuccessSingle
      );
    } catch (error) {
      console.error('Error uploading images:', error);
      toast.error(
        `${dict.toasts.uploadError}: ${error instanceof Error ? error.message : 'Unknown error'}`
      );
    } finally {
      setIsUploading(false);
    }
  };

  const handleSetMainImage = async (imageId: string) => {
    if (!candidate) return;
    try {
      const response = await fetch(
        `/api/matchmaker/candidates/${candidate.id}/images/${imageId}/main`,
        { method: 'PATCH' }
      );
      const data = await response.json();
      if (!response.ok || !data.success)
        throw new Error(data.error || 'Failed to set main image');
      setImages((prev) =>
        prev.map((img) => ({ ...img, isMain: img.id === imageId }))
      );
      toast.success(dict.toasts.setMainSuccess);
    } catch (error) {
      console.error('Error setting main image:', error);
      toast.error(dict.toasts.setMainError);
    }
  };

  const handleDeleteImage = async (imageIds: string[]) => {
    if (!candidate || imageIds.length === 0) return;
    setIsUploading(true);
    try {
      const currentMainImage = images.find((img) => img.isMain);
      const isMainImageBeingDeleted = currentMainImage
        ? imageIds.includes(currentMainImage.id)
        : false;
      const deletePromises = imageIds.map((id) =>
        fetch(`/api/matchmaker/candidates/${candidate.id}/images/${id}`, {
          method: 'DELETE',
        })
      );
      const responses = await Promise.all(deletePromises);
      for (const response of responses) {
        if (!response.ok && response.status !== 204) {
          const errorData = await response.json().catch(() => null);
          throw new Error(
            errorData?.error ||
              `Error deleting one of the images (status: ${response.status})`
          );
        }
      }
      const remainingImages = images.filter(
        (img) => !imageIds.includes(img.id)
      );
      if (isMainImageBeingDeleted && remainingImages.length > 0) {
        setImages(remainingImages);
        await handleSetMainImage(remainingImages[0].id);
      } else {
        setImages(remainingImages);
      }
      toast.success(
        imageIds.length > 1
          ? dict.toasts.deleteImageSuccessMultiple.replace(
              '{{count}}',
              String(imageIds.length)
            )
          : dict.toasts.deleteImageSuccessSingle,
        { position: 'top-center' }
      );
    } catch (error) {
      console.error('Error deleting image(s):', error);
      toast.error(
        error instanceof Error ? error.message : dict.toasts.deleteImageError
      );
    } finally {
      setIsUploading(false);
    }
  };

  const handleDeleteCandidateRequest = async () => {
    if (!candidate) return;
    if (deleteCandidateConfirmText !== DELETE_CANDIDATE_CONFIRMATION_PHRASE) {
      toast.error(dict.toasts.deleteCandidateErrorConfirmation, {
        description: dict.toasts.deleteCandidateErrorDescription.replace(
          '{{phrase}}',
          DELETE_CANDIDATE_CONFIRMATION_PHRASE
        ),
      });
      return;
    }
    setIsDeletingCandidate(true);
    try {
      const response = await fetch(
        `/api/matchmaker/candidates/${candidate.id}`,
        { method: 'DELETE' }
      );
      const data = await response.json();
      if (!response.ok || !data.success)
        throw new Error(data.error || 'Failed to delete candidate profile');
      toast.success(dict.toasts.deleteCandidateSuccess, {
        position: 'top-center',
        duration: 3000,
      });
      if (onCandidateDeleted) onCandidateDeleted(candidate.id);
      setIsDeleteCandidateDialogOpen(false);
      onClose();
    } catch (error) {
      console.error('Error deleting candidate:', error);
      toast.error(
        `${dict.toasts.deleteCandidateError}: ${error instanceof Error ? error.message : 'Unknown error'}`,
        { duration: 5000 }
      );
    } finally {
      setIsDeletingCandidate(false);
    }
  };

  const handleSendSetupInvite = async () => {
    if (!candidate || !inviteEmail) {
      toast.error(dict.toasts.sendInviteErrorEmail);
      return;
    }
    setIsSendingInvite(true);
    try {
      const response = await fetch(
        `/api/matchmaker/candidates/${candidate.id}/invite-setup`,
        {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ email: inviteEmail }),
        }
      );
      const result = await response.json();
      if (!response.ok || !result.success)
        throw new Error(result.error || dict.toasts.sendInviteErrorGeneral);
      toast.success(dict.toasts.sendInviteSuccess);
      setIsSetupInviteOpen(false);
    } catch (error) {
      console.error('Error sending setup invite:', error);
      toast.error(
        error instanceof Error
          ? error.message
          : dict.toasts.sendInviteErrorGeneral
      );
    } finally {
      setIsSendingInvite(false);
    }
  };

  if (!candidate && isOpen) return null;
  if (!candidate) return null;

  return (
    <>
      <Dialog open={isOpen} onOpenChange={onClose}>
        <DialogContent className="max-w-5xl max-h-[90vh] p-0 overflow-hidden">
          {isLoading && !profile ? (
            <div className="flex items-center justify-center h-64">
              <Loader2 className="w-10 h-10 animate-spin text-primary" />
            </div>
          ) : (
            <motion.div
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              transition={{ duration: 0.3 }}
              className="flex flex-col h-full max-h-[90vh]"
            >
              <DialogHeader className="p-6 border-b">
                <div className="flex items-center justify-between">
                  <div>
                    <DialogTitle className="text-2xl font-bold text-primary/90">
                      {dict.header.title
                        .replace('{{firstName}}', candidate.firstName)
                        .replace('{{lastName}}', candidate.lastName)}
                    </DialogTitle>
                    <DialogDescription className="text-gray-500 mt-1">
                      {dict.header.description}
                    </DialogDescription>
                  </div>
                  {isSaving && (
                    <div className="flex items-center bg-blue-50 text-blue-700 py-1 px-2 rounded-full text-sm">
                      <Loader2 className="w-3 h-3 animate-spin mr-1" />
                      {dict.header.saving}
                    </div>
                  )}
                </div>
              </DialogHeader>
              <Tabs
                value={activeTab}
                onValueChange={setActiveTab}
                className="flex-1 flex flex-col min-h-0"
              >
                <div className="px-6 pt-4">
                  <TabsList className="w-full bg-muted/30 p-1 rounded-xl shadow-sm">
                    <TabsTrigger
                      value="profile"
                      className="rounded-lg data-[state=active]:bg-gradient-to-r data-[state=active]:from-blue-500/90 data-[state=active]:to-blue-600 data-[state=active]:text-white flex items-center gap-2"
                    >
                      <UserCog className="w-4 h-4" />
                      {dict.tabs.profile}
                    </TabsTrigger>
                    <TabsTrigger
                      value="photos"
                      className="rounded-lg data-[state=active]:bg-gradient-to-r data-[state=active]:from-blue-500/90 data-[state=active]:to-blue-600 data-[state=active]:text-white flex items-center gap-2"
                    >
                      <ImageIcon className="w-4 h-4" />
                      {dict.tabs.photos}
                    </TabsTrigger>
                    <TabsTrigger
                      value="preferences"
                      className="rounded-lg data-[state=active]:bg-gradient-to-r data-[state=active]:from-blue-500/90 data-[state=active]:to-blue-600 data-[state=active]:text-white flex items-center gap-2"
                    >
                      <Sliders className="w-4 h-4" />
                      {dict.tabs.preferences}
                    </TabsTrigger>
                  </TabsList>
                </div>
                <div className="flex-1 overflow-hidden flex flex-col min-h-0">
                  <TabsContent
                    value="profile"
                    className="flex-1 overflow-auto p-4 m-0 pb-16"
                  >
                    {profile ? (
                      <div className="bg-white rounded-xl shadow-sm border">
                        <ProfileSection
                          profile={profile}
                          isEditing={isEditing}
                          setIsEditing={setIsEditing}
                          onSave={handleProfileUpdate}
                          dict={profileDict.profileSection}
                        />
                      </div>
                    ) : (
                      <div className="flex items-center justify-center h-full">
                        <Loader2 className="w-8 h-8 animate-spin text-muted-foreground" />
                      </div>
                    )}
                  </TabsContent>
                  <TabsContent
                    value="photos"
                    className="flex-1 overflow-auto p-4 m-0 pb-16"
                  >
                    <div className="bg-white rounded-xl shadow-sm border">
                      <PhotosSection
                        images={images}
                        isUploading={isUploading}
                        disabled={isSaving || isDeletingCandidate}
                        onUpload={handleImageUpload}
                        onSetMain={handleSetMainImage}
                        onDelete={handleDeleteImage}
                        maxImages={10}
                        dict={profileDict.photosSection}
                      />
                    </div>
                  </TabsContent>
                  <TabsContent
                    value="preferences"
                    className="flex-1 overflow-auto p-4 m-0 pb-16"
                  >
                    {profile ? (
                      <div className="bg-white rounded-xl shadow-sm border">
                        <PreferencesSection
                          profile={profile}
                          isEditing={isEditing}
                          setIsEditing={setIsEditing}
                          onChange={handleProfileUpdate}
                          dictionary={profileDict.preferencesSection}
                        />
                      </div>
                    ) : (
                      <div className="flex items-center justify-center h-full">
                        <Loader2 className="w-8 h-8 animate-spin text-muted-foreground" />
                      </div>
                    )}
                  </TabsContent>
                </div>
              </Tabs>
              <div className="p-4 border-t flex justify-between items-center mt-auto bg-white/80 backdrop-blur-sm sticky bottom-0">
                <div>
                  <span className="text-sm text-muted-foreground">
                    {activeTab === 'profile'
                      ? dict.footer.tabInfo.profile
                      : activeTab === 'photos'
                        ? dict.footer.tabInfo.photos
                        : dict.footer.tabInfo.preferences}
                  </span>
                </div>
                <div className="flex items-center gap-3">
                  <Button
                    variant="outline"
                    onClick={() => setIsSetupInviteOpen(true)}
                    disabled={
                      isSaving || isDeletingCandidate || isSendingInvite
                    }
                  >
                    <Send className="w-4 h-4 ml-2" />
                    {dict.footer.buttons.sendInvite}
                  </Button>
                  {isAdmin && (
                    <Button
                      variant="destructive"
                      onClick={() => setIsDeleteCandidateDialogOpen(true)}
                      disabled={isSaving || isUploading || isDeletingCandidate}
                      size="sm"
                    >
                      <Trash2 className="w-4 h-4 mr-2" />
                      {dict.footer.buttons.deleteCandidate}
                    </Button>
                  )}
                  <Button
                    variant="outline"
                    onClick={onClose}
                    disabled={isSaving || isDeletingCandidate}
                    className="bg-white hover:bg-gray-100 transition-colors shadow-sm"
                    size="sm"
                  >
                    <X className="w-4 h-4 mr-2" />
                    {dict.footer.buttons.close}
                  </Button>
                </div>
              </div>
            </motion.div>
          )}
        </DialogContent>
      </Dialog>

      {candidate && (
        <Dialog open={isSetupInviteOpen} onOpenChange={setIsSetupInviteOpen}>
          <DialogContent className="sm:max-w-md">
            <DialogHeader>
              <DialogTitle>{dict.inviteDialog.title}</DialogTitle>
              <DialogDescription>
                {dict.inviteDialog.description.replace(
                  '{{fullName}}',
                  `${candidate.firstName} ${candidate.lastName}`
                )}
              </DialogDescription>
            </DialogHeader>
            <div className="grid gap-4 py-4">
              <Label htmlFor="inviteEmail" className="text-right">
                {dict.inviteDialog.emailLabel}
              </Label>
              <Input
                id="inviteEmail"
                type="email"
                value={inviteEmail}
                onChange={(e) => setInviteEmail(e.target.value)}
                placeholder={dict.inviteDialog.emailPlaceholder}
                className="col-span-3"
                dir="ltr"
              />
            </div>
            <DialogFooter>
              <DialogClose asChild>
                <Button
                  type="button"
                  variant="secondary"
                  disabled={isSendingInvite}
                >
                  {dict.inviteDialog.buttons.cancel}
                </Button>
              </DialogClose>
              <Button
                type="button"
                onClick={handleSendSetupInvite}
                disabled={isSendingInvite || !inviteEmail}
              >
                {isSendingInvite ? (
                  <Loader2 className="ml-2 h-4 w-4 animate-spin" />
                ) : (
                  <Send className="ml-2 h-4 w-4" />
                )}
                {isSendingInvite
                  ? dict.inviteDialog.buttons.sending
                  : dict.inviteDialog.buttons.send}
              </Button>
            </DialogFooter>
          </DialogContent>
        </Dialog>
      )}

      {candidate && (
        <Dialog
          open={isDeleteCandidateDialogOpen}
          onOpenChange={(open) =>
            !isDeletingCandidate && setIsDeleteCandidateDialogOpen(open)
          }
        >
          <DialogContent className="sm:max-w-md">
            <DialogHeader>
              <DialogTitle className="text-xl flex items-center gap-2 text-red-600">
                <AlertCircle className="h-5 w-5" />
                {dict.deleteDialog.title}
              </DialogTitle>
              <DialogDescription>
                {dict.deleteDialog.description.replace(
                  '{{fullName}}',
                  `${candidate.firstName} ${candidate.lastName}`
                )}{' '}
                {dict.deleteDialog.irreversible}
              </DialogDescription>
            </DialogHeader>
            <div className="grid gap-4 py-4">
              <Label htmlFor="deleteCandidateConfirm" className="text-gray-700">
                {dict.deleteDialog.confirmationLabel.replace(
                  '{{phrase}}',
                  DELETE_CANDIDATE_CONFIRMATION_PHRASE
                )}
              </Label>
              <Input
                id="deleteCandidateConfirm"
                value={deleteCandidateConfirmText}
                onChange={(e) => setDeleteCandidateConfirmText(e.target.value)}
                disabled={isDeletingCandidate}
                className="border-gray-300 focus:border-red-500"
                placeholder={dict.deleteDialog.inputPlaceholder}
                dir="rtl"
              />
              {deleteCandidateConfirmText &&
                deleteCandidateConfirmText !==
                  DELETE_CANDIDATE_CONFIRMATION_PHRASE && (
                  <p className="text-xs text-red-600">
                    {dict.deleteDialog.mismatchError}
                  </p>
                )}
            </div>
            <DialogFooter>
              <Button
                variant="outline"
                onClick={() => {
                  setIsDeleteCandidateDialogOpen(false);
                  setDeleteCandidateConfirmText('');
                }}
                disabled={isDeletingCandidate}
                className="border-gray-300"
              >
                {dict.deleteDialog.buttons.cancel}
              </Button>
              <Button
                variant="destructive"
                onClick={handleDeleteCandidateRequest}
                disabled={
                  isDeletingCandidate ||
                  deleteCandidateConfirmText !==
                    DELETE_CANDIDATE_CONFIRMATION_PHRASE
                }
              >
                {isDeletingCandidate ? (
                  <span className="flex items-center gap-2">
                    <Loader2 className="w-4 h-4 animate-spin" />
                    {dict.deleteDialog.buttons.deleting}
                  </span>
                ) : (
                  <>
                    <Trash2 className="w-4 h-4 mr-2" />
                    {dict.deleteDialog.buttons.delete}
                  </>
                )}
              </Button>
            </DialogFooter>
          </DialogContent>
        </Dialog>
      )}
    </>
  );
};

export default MatchmakerEditProfile;
--- End of Content for MatchmakerEditProfile.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\new\new_contents.txt
--------------------------------------------------------------------------------
[This is the output log file itself. Content not included.]

================================================================================
Directory: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\new\CandidateCard
================================================================================

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\new\CandidateCard\Actions.tsx
--------------------------------------------------------------------------------
Content:
// /components/matchmaker/CandidateCard/Actions.tsx

'use client';

import React, {useState } from 'react';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import {
  Heart,
  Mail,
  FileText,
  Eye,
  Clock,
  Sparkles,
  Send,
  UserPlus,
  MessageCircle,
  Calendar,
  Star,
  Zap,
} from 'lucide-react';
import type { Candidate } from '../types/candidates';
import { cn } from '@/lib/utils';
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from '@/components/ui/tooltip';
import type { MatchmakerPageDictionary } from '@/types/dictionaries/matchmaker';

interface ActionsProps {
  candidate: Candidate;
  onInvite: (candidate: Candidate) => void;
  onSuggest: (candidate: Candidate) => void;
  onCheckAvailability: (candidate: Candidate) => void;
  onViewProfile: (candidate: Candidate) => void;
  className?: string;
  variant?: 'full' | 'compact' | 'minimal';
  showLabels?: boolean;
  dict: MatchmakerPageDictionary['candidatesManager']['list']['cardActions'];
}

const Actions: React.FC<ActionsProps> = ({
  candidate,
  onInvite,
  onSuggest,
  onCheckAvailability,
  onViewProfile,
  className,
  variant = 'full',
  showLabels = true,
  dict,
}) => {
  const [isHovered, setIsHovered] = useState(false);
  const [activeAction, setActiveAction] = useState<string | null>(null);

  const handleClick = (e: React.MouseEvent) => {
    e.stopPropagation();
  };

  const handleActionClick = (action: string, callback: () => void) => {
    setActiveAction(action);
    callback();
    setTimeout(() => setActiveAction(null), 150);
  };

  const getPriorityBadge = () => {
    if (candidate.profile.availabilityStatus === 'AVAILABLE') {
      return (
        <Badge className="bg-gradient-to-r from-green-500 to-emerald-500 text-white border-0 shadow-lg animate-pulse">
          <Sparkles className="w-3 h-3 mr-1" />
          {dict.availableNow}
        </Badge>
      );
    }
    return null;
  };

  const actionButtons = [
    {
      id: 'view',
      label: dict.viewProfile,
      icon: Eye,
      onClick: () => onViewProfile(candidate),
      gradient: 'from-blue-500 to-cyan-500',
      hoverGradient: 'from-blue-600 to-cyan-600',
      description: dict.viewProfileTooltip,
      primary: true,
    },
    {
      id: 'suggest',
      label: dict.suggestMatch,
      icon: Heart,
      onClick: () => onSuggest(candidate),
      gradient: 'from-pink-500 to-rose-500',
      hoverGradient: 'from-pink-600 to-rose-600',
      description: dict.suggestMatchTooltip,
      primary: true,
    },
    {
      id: 'invite',
      label: dict.sendInvite,
      icon: Send,
      onClick: () => onInvite(candidate),
      gradient: 'from-purple-500 to-indigo-500',
      hoverGradient: 'from-purple-600 to-indigo-600',
      description: dict.sendInviteTooltip,
      primary: false,
    },
    {
      id: 'availability',
      label: dict.checkAvailability,
      icon: Calendar,
      onClick: () => onCheckAvailability(candidate),
      gradient: 'from-orange-500 to-amber-500',
      hoverGradient: 'from-orange-600 to-amber-600',
      description: dict.checkAvailabilityTooltip,
      primary: false,
    },
  ];

  if (variant === 'minimal') {
    return (
      <div
        className={cn('flex items-center gap-1', className)}
        onClick={handleClick}
        onMouseEnter={() => setIsHovered(true)}
        onMouseLeave={() => setIsHovered(false)}
      >
        <TooltipProvider>
          {actionButtons.slice(0, 2).map((action) => {
            const IconComponent = action.icon;
            return (
              <Tooltip key={action.id}>
                <TooltipTrigger asChild>
                  <Button
                    variant="ghost"
                    size="icon"
                    className={cn(
                      'h-8 w-8 rounded-full transition-all duration-300 transform hover:scale-110',
                      `bg-gradient-to-r ${action.gradient} hover:${action.hoverGradient}`,
                      'text-white shadow-lg hover:shadow-xl',
                      activeAction === action.id && 'scale-95'
                    )}
                    onClick={() => handleActionClick(action.id, action.onClick)}
                  >
                    <IconComponent className="w-4 h-4" />
                  </Button>
                </TooltipTrigger>
                <TooltipContent>
                  <p>{action.description}</p>
                </TooltipContent>
              </Tooltip>
            );
          })}
        </TooltipProvider>
      </div>
    );
  }

  if (variant === 'compact') {
    return (
      <div
        className={cn('flex flex-wrap gap-2', className)}
        onClick={handleClick}
        onMouseEnter={() => setIsHovered(true)}
        onMouseLeave={() => setIsHovered(false)}
      >
        {getPriorityBadge()}

        <div className="flex gap-2">
          {actionButtons.map((action) => {
            const IconComponent = action.icon;
            return (
              <Button
                key={action.id}
                variant="outline"
                size="sm"
                className={cn(
                  'transition-all duration-300 transform hover:scale-105 border-0 shadow-lg hover:shadow-xl',
                  `bg-gradient-to-r ${action.gradient} hover:${action.hoverGradient}`,
                  'text-white font-medium',
                  activeAction === action.id && 'scale-95'
                )}
                onClick={() => handleActionClick(action.id, action.onClick)}
              >
                <IconComponent className="w-4 h-4 mr-2" />
                {showLabels && action.label}
              </Button>
            );
          })}
        </div>
      </div>
    );
  }

  // Full variant
  return (
    <div
      className={cn('space-y-4', className)}
      onClick={handleClick}
      onMouseEnter={() => setIsHovered(true)}
      onMouseLeave={() => setIsHovered(false)}
    >
      <div className="flex justify-center">{getPriorityBadge()}</div>

      <div className="grid grid-cols-2 gap-3">
        {actionButtons
          .filter((a) => a.primary)
          .map((action) => {
            const IconComponent = action.icon;
            return (
              <Button
                key={action.id}
                className={cn(
                  'h-12 transition-all duration-300 transform hover:scale-105 border-0 shadow-xl hover:shadow-2xl font-bold text-sm',
                  `bg-gradient-to-r ${action.gradient} hover:${action.hoverGradient}`,
                  'text-white relative overflow-hidden group',
                  activeAction === action.id && 'scale-95'
                )}
                onClick={() => handleActionClick(action.id, action.onClick)}
              >
                <div className="absolute inset-0 bg-gradient-to-r from-white/0 via-white/20 to-white/0 transform -translate-x-full group-hover:translate-x-full transition-transform duration-700"></div>
                <div className="relative z-10 flex items-center justify-center gap-2">
                  <IconComponent className="w-5 h-5" />
                  {showLabels && (
                    <span className="hidden sm:inline">{action.label}</span>
                  )}
                </div>
              </Button>
            );
          })}
      </div>

      <div className="flex gap-2">
        {actionButtons
          .filter((a) => !a.primary)
          .map((action) => {
            const IconComponent = action.icon;
            return (
              <Button
                key={action.id}
                variant="outline"
                size="sm"
                className={cn(
                  'flex-1 transition-all duration-300 transform hover:scale-105 border-2 hover:border-transparent shadow-lg hover:shadow-xl font-medium',
                  `border-gray-200 hover:bg-gradient-to-r hover:${action.gradient}`,
                  'hover:text-white group relative overflow-hidden',
                  activeAction === action.id && 'scale-95'
                )}
                onClick={() => handleActionClick(action.id, action.onClick)}
              >
                <div
                  className={cn(
                    'absolute inset-0 bg-gradient-to-r transition-all duration-300 opacity-0 group-hover:opacity-100',
                    action.gradient
                  )}
                ></div>
                <div className="relative z-10 flex items-center justify-center gap-2">
                  <IconComponent className="w-4 h-4" />
                  {showLabels && (
                    <span className="text-xs hidden sm:inline">
                      {action.label}
                    </span>
                  )}
                </div>
              </Button>
            );
          })}
      </div>

      <div className="flex justify-center pt-2">
        <Button
          variant="ghost"
          size="sm"
          className={cn(
            'text-red-500 hover:text-red-600 hover:bg-red-50 transition-all duration-300 transform hover:scale-110 group',
            'border border-red-200 hover:border-red-300 shadow-sm hover:shadow-md rounded-full px-4'
          )}
        >
          <Heart
            className={cn(
              'w-4 h-4 transition-all duration-300',
              isHovered && 'fill-current animate-pulse'
            )}
          />
          <span className="mr-2 text-sm font-medium">{dict.addToFavorites}</span>
        </Button>
      </div>

      <div className="pt-3 border-t border-gray-100">
        <div className="flex justify-between items-center text-xs text-gray-500">
          <div className="flex items-center gap-1">
            <Star className="w-3 h-3 text-yellow-500" />
            <span>{dict.rating}: 4.8</span>
          </div>
          <div className="flex items-center gap-1">
            <Zap className="w-3 h-3 text-blue-500" />
            <span>{dict.matchScore}: 95%</span>
          </div>
          <div className="flex items-center gap-1">
            <MessageCircle className="w-3 h-3 text-green-500" />
            <span>{dict.response}: {dict.quickResponse}</span>
          </div>
        </div>
      </div>
    </div>
  );
};

export default Actions;
--- End of Content for Actions.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\new\CandidateCard\MinimalCard.tsx
--------------------------------------------------------------------------------
Content:
// src/app/components/matchmaker/new/CandidateCard/MinimalCard.tsx

'use client';

import React, { useState } from 'react';
import Image from 'next/image';
import { Card } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { Checkbox } from '@/components/ui/checkbox';
import { format } from 'date-fns';
import {
  User,
  MapPin,
  Briefcase,
  Calendar,
  Edit2,
  Sparkles,
  Star,
  Heart,
  Eye,
  Clock,
  Shield,
  Crown,
  Zap,
  Award,
} from 'lucide-react';
import type { Candidate } from '../types/candidates';
import { UserSource } from '@prisma/client';
import { formatDistanceToNow } from 'date-fns';
import { he } from 'date-fns/locale';
import { motion } from 'framer-motion';
import { Skeleton } from '@/components/ui/skeleton';
import { cn, getRelativeCloudinaryPath } from '@/lib/utils';
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from '@/components/ui/tooltip';
import type { MatchmakerPageDictionary } from '@/types/dictionaries/matchmaker';

interface MinimalCandidateCardProps {
  candidate: Candidate;
  onClick: (candidate: Candidate) => void;
  onEdit?: (candidate: Candidate, e: React.MouseEvent) => void;
  isHighlighted?: boolean;
  highlightTerm?: string;
  className?: string;
  aiScore?: number;
  isAiTarget?: boolean;
  onSetAiTarget?: (candidate: Candidate, e: React.MouseEvent) => void;
  isSelectableForComparison?: boolean;
  isSelectedForComparison?: boolean;
  onToggleComparison?: (candidate: Candidate, e: React.MouseEvent) => void;
  dict: MatchmakerPageDictionary['candidatesManager']['list']['minimalCard'];
}

const calculateAge = (birthDate: Date | string): number => {
  const today = new Date();
  const birth = new Date(birthDate);
  let age = today.getFullYear() - birth.getFullYear();
  const monthDiff = today.getMonth() - birth.getMonth();
  if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birth.getDate())) {
    age--;
  }
  return age;
};

const MinimalCandidateCard: React.FC<MinimalCandidateCardProps> = ({
  candidate,
  onClick,
  onEdit,
  isHighlighted = false,
  highlightTerm = '',
  className,
  aiScore,
  isAiTarget = false,
  onSetAiTarget,
  isSelectableForComparison = false,
  isSelectedForComparison = false,
  onToggleComparison,
  dict,
}) => {
  const mainImage = candidate.images.find((img) => img.isMain);
  const age = calculateAge(candidate.profile.birthDate);
  const [imageLoaded, setImageLoaded] = useState(false);
  const [imageError, setImageError] = useState(false);
  const [isHovered, setIsHovered] = useState(false);

  const highlightText = (text: string | undefined | null): React.ReactNode => {
    if (!highlightTerm || !text) return text;
    const parts = text.split(new RegExp(`(${highlightTerm})`, 'gi'));
    return (
      <>
        {parts.map((part, i) =>
          part.toLowerCase() === highlightTerm.toLowerCase() ? (
            <mark key={i} className="bg-yellow-200 px-0.5 rounded-sm">
              {part}
            </mark>
          ) : (
            part
          )
        )}
      </>
    );
  };

  const getAvailabilityBadge = () => {
    switch (candidate.profile.availabilityStatus) {
      case 'AVAILABLE':
        return {
          label: dict.availability.AVAILABLE,
          className:
            'bg-gradient-to-r from-emerald-500 to-green-500 text-white border-0 shadow-lg',
          icon: <Sparkles className="w-3 h-3" />,
        };
      case 'DATING':
        return {
          label: dict.availability.DATING,
          className:
            'bg-gradient-to-r from-amber-500 to-orange-500 text-white border-0 shadow-lg',
          icon: <Heart className="w-3 h-3" />,
        };
      case 'UNAVAILABLE':
        return {
          label: dict.availability.UNAVAILABLE,
          className:
            'bg-gradient-to-r from-red-500 to-pink-500 text-white border-0 shadow-lg',
          icon: <Clock className="w-3 h-3" />,
        };
      default:
        return {
          label: dict.availability.UNKNOWN,
          className:
            'bg-gradient-to-r from-gray-500 to-slate-500 text-white border-0 shadow-lg',
          icon: <User className="w-3 h-3" />,
        };
    }
  };

  const getQualityScore = () => {
    let score = 0;
    if (candidate.images.length > 0) score += 25;
    if (candidate.profile.about) score += 25;
    if (candidate.profile.education) score += 25;
    if (candidate.profile.occupation) score += 25;
    return score;
  };

  const availabilityBadge = getAvailabilityBadge();
  const isManualEntry = candidate.source === UserSource.MANUAL_ENTRY;
  const qualityScore = getQualityScore();

  return (
    <motion.div
      whileHover={{ y: -6, scale: 1.02 }}
      whileTap={{ scale: 0.98 }}
      transition={{ type: 'spring', stiffness: 300, damping: 15 }}
      onMouseEnter={() => setIsHovered(true)}
      onMouseLeave={() => setIsHovered(false)}
    >
      <Card
        className={cn(
          'relative overflow-hidden cursor-pointer transition-all hover:shadow-2xl duration-500 group border-0 shadow-xl',
          isAiTarget
            ? 'ring-4 ring-green-400 ring-opacity-60 shadow-green-200'
            : isSelectedForComparison
              ? 'ring-4 ring-blue-400 ring-opacity-60 shadow-blue-200'
              : typeof aiScore === 'number'
                ? 'ring-2 ring-teal-300 ring-opacity-50 shadow-teal-100'
                : isHighlighted
                  ? 'ring-2 ring-yellow-400 ring-opacity-60 shadow-yellow-100'
                  : 'shadow-gray-200',
          'bg-gradient-to-br from-white via-gray-50/30 to-white',
          className || ''
        )}
        onClick={() => onClick(candidate)}
      >
        <div className="absolute inset-0 bg-gradient-to-br from-transparent via-white/50 to-transparent opacity-60"></div>

        {typeof aiScore === 'number' && (
          <div className="absolute top-3 left-3 z-30">
            <Badge className="bg-gradient-to-r from-teal-400 via-cyan-500 to-blue-500 text-white border-0 shadow-xl px-3 py-1.5 text-sm font-bold flex items-center gap-2">
              <Sparkles className="w-4 h-4" />
              {dict.aiMatch.replace('{{score}}', aiScore.toString())}
              <Zap className="w-3 h-3" />
            </Badge>
          </div>
        )}

        <div className="absolute top-3 right-3 z-20 flex flex-col gap-2 items-end">
          <Badge
            className={cn(
              'px-3 py-1.5 text-xs font-bold shadow-lg flex items-center gap-1.5 transition-all duration-300 hover:scale-105',
              availabilityBadge.className
            )}
          >
            {availabilityBadge.icon}
            {availabilityBadge.label}
          </Badge>

          {isManualEntry && (
            <Badge className="px-3 py-1.5 text-xs font-bold shadow-lg bg-gradient-to-r from-purple-500 to-indigo-500 text-white border-0 flex items-center gap-1.5">
              <Edit2 className="w-3 h-3" />
              {dict.manualEntry}
            </Badge>
          )}
        </div>

        <div className="relative h-52 sm:h-60 bg-gradient-to-br from-blue-100 via-purple-50 to-pink-100">
          {mainImage && !imageError ? (
            <>
              {!imageLoaded && (
                <Skeleton className="absolute inset-0 h-full w-full" />
              )}
              <Image
                src={getRelativeCloudinaryPath(mainImage.url)}
                alt={`${candidate.firstName} ${candidate.lastName}`}
                fill
                sizes="(max-width: 768px) 100vw, (max-width: 1200px) 50vw, 33vw"
                priority={false}
                className={`object-cover transition-all duration-500 ${
                  imageLoaded ? 'opacity-100 scale-100' : 'opacity-0 scale-105'
                } ${isHovered ? 'scale-110' : 'scale-100'}`}
                onLoad={() => setImageLoaded(true)}
                onError={() => setImageError(true)}
              />
              <div className="absolute inset-0 bg-gradient-to-t from-gray-900/90 via-gray-900/40 to-transparent opacity-80 group-hover:opacity-90 transition-opacity duration-300" />
              <div className="absolute inset-0 bg-gradient-to-r from-transparent via-white/20 to-transparent transform -translate-x-full group-hover:translate-x-full transition-transform duration-1000"></div>
            </>
          ) : (
            <div className="w-full h-full flex items-center justify-center bg-gradient-to-br from-blue-100 via-purple-100 to-pink-100">
              <div className="text-center">
                <User className="w-16 h-16 text-gray-400 mx-auto mb-2" />
                <p className="text-sm text-gray-500">{dict.noImage}</p>
              </div>
            </div>
          )}

          <div className="absolute bottom-0 w-full p-4 text-right">
            <h3 className="font-bold mb-1 text-white drop-shadow-lg text-xl tracking-wide">
              {highlightText(`${candidate.firstName} ${candidate.lastName}`)}
            </h3>
            <div className="flex items-center justify-end gap-3 text-white/95 text-sm">
              <span className="bg-black/30 px-2 py-1 rounded-full backdrop-blur-sm font-medium">
                {age} {dict.yearsSuffix}
              </span>
              <Calendar className="w-4 h-4" />
            </div>
          </div>
        </div>

        <div className="p-5 relative z-10">
          <div className="space-y-3 text-gray-700">
            {isManualEntry && candidate.profile.manualEntryText ? (
              <div className="bg-gradient-to-r from-purple-50 to-indigo-50 p-3 rounded-xl border border-purple-100">
                <p className="line-clamp-3 text-sm leading-relaxed text-purple-800">
                  {highlightText(candidate.profile.manualEntryText)}
                </p>
              </div>
            ) : (
              <div className="space-y-2">
                {candidate.profile.city && (
                  <div className="flex items-center justify-end gap-2 p-2 bg-blue-50 rounded-lg hover:bg-blue-100 transition-colors duration-200">
                    <span className="font-medium text-blue-800">
                      {highlightText(candidate.profile.city)}
                    </span>
                    <MapPin className="w-4 h-4 text-blue-600" />
                  </div>
                )}
                {candidate.profile.occupation && (
                  <div className="flex items-center justify-end gap-2 p-2 bg-green-50 rounded-lg hover:bg-green-100 transition-colors duration-200">
                    <span className="text-green-800 text-sm">
                      {highlightText(candidate.profile.occupation)}
                    </span>
                    <Briefcase className="w-4 h-4 text-green-600" />
                  </div>
                )}
              </div>
            )}

            {candidate.profile.lastActive && (
              <div className="flex items-center justify-end gap-2 mt-3 pt-3 border-t border-gray-100">
                <span className="text-xs text-gray-500">
                  {`${dict.lastActivePrefix} ${format(new Date(candidate.profile.lastActive), 'dd/MM/yyyy')}`}
                </span>
                <Clock className="w-3 h-3 text-gray-400" />
              </div>
            )}
          </div>
        </div>

        <div className="absolute bottom-3 left-3 z-20 flex items-center gap-2 opacity-100 lg:opacity-0 group-hover:opacity-100 transition-all duration-300 transform lg:translate-y-2 group-hover:translate-y-0">
          {onEdit && (
            <TooltipProvider>
              <Tooltip>
                <TooltipTrigger asChild>
                  <Button
                    variant="outline"
                    size="icon"
                    className="h-9 w-9 bg-white/90 backdrop-blur-sm shadow-xl border-0 hover:bg-white hover:scale-110 transition-all duration-300"
                    onClick={(e) => onEdit(candidate, e)}
                  >
                    <Edit2 className="h-4 w-4 text-blue-600" />
                  </Button>
                </TooltipTrigger>
                <TooltipContent>
                  <p>{dict.tooltips.editProfile}</p>
                </TooltipContent>
              </Tooltip>
            </TooltipProvider>
          )}

          {onSetAiTarget && (
            <TooltipProvider>
              <Tooltip>
                <TooltipTrigger asChild>
                  <Button
                    variant="outline"
                    size="icon"
                    className={cn(
                      'h-9 w-9 backdrop-blur-sm shadow-xl border-0 hover:scale-110 transition-all duration-300',
                      isAiTarget
                        ? 'bg-gradient-to-r from-green-500 to-emerald-500 text-white hover:from-green-600 hover:to-emerald-600'
                        : 'bg-white/90 hover:bg-white text-gray-600'
                    )}
                    onClick={(e) => onSetAiTarget(candidate, e)}
                  >
                    <Star
                      className={cn(
                        'h-4 w-4 transition-all duration-300',
                        isAiTarget ? 'fill-current rotate-12' : ''
                      )}
                    />
                  </Button>
                </TooltipTrigger>
                <TooltipContent>
                  <p>
                    {isAiTarget
                      ? dict.tooltips.clearAiTarget
                      : dict.tooltips.setAsAiTarget}
                  </p>
                </TooltipContent>
              </Tooltip>
            </TooltipProvider>
          )}
        </div>

        <div className="absolute top-3 left-1/2 transform -translate-x-1/2 z-20 opacity-0 group-hover:opacity-100 transition-all duration-300">
          <div className="flex items-center gap-1 bg-black/60 text-white px-3 py-1 rounded-full backdrop-blur-sm text-xs font-bold">
            <Award className="w-3 h-3" />
            <span>
              {dict.qualityScore.replace('{{score}}', qualityScore.toString())}
            </span>
          </div>
        </div>

        {isSelectableForComparison && onToggleComparison && (
          <div
            className="absolute bottom-3 right-3 z-20 opacity-100 lg:opacity-0 group-hover:opacity-100 transition-all duration-300 transform lg:translate-y-2 group-hover:translate-y-0"
            onClick={(e) => {
              e.stopPropagation();
              onToggleComparison(candidate, e);
            }}
          >
            <div className="flex items-center space-x-2 bg-white/90 backdrop-blur-sm p-2 rounded-xl shadow-xl cursor-pointer hover:bg-white hover:scale-105 transition-all duration-300 border-0">
              <Checkbox
                id={`compare-${candidate.id}`}
                checked={isSelectedForComparison}
                className="pointer-events-none border-2 border-blue-400 data-[state=checked]:bg-gradient-to-r data-[state=checked]:from-blue-500 data-[state=checked]:to-cyan-500 data-[state=checked]:border-blue-500"
              />
              <label
                htmlFor={`compare-${candidate.id}`}
                className="text-xs font-bold leading-none text-gray-700 cursor-pointer"
              >
                {dict.compare}
              </label>
            </div>
          </div>
        )}

        <div className="absolute inset-0 bg-gradient-to-r from-blue-400/0 via-purple-400/0 to-pink-400/0 group-hover:from-blue-400/10 group-hover:via-purple-400/10 group-hover:to-pink-400/10 transition-all duration-500 pointer-events-none rounded-lg"></div>
      </Card>
    </motion.div>
  );
};

export default MinimalCandidateCard;
--- End of Content for MinimalCard.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\new\CandidateCard\QuickView.tsx
--------------------------------------------------------------------------------
Content:
// File: src/app/components/matchmaker/new/CandidateCard/QuickView.tsx

'use client';
import React, { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import {
  Heart,
  Mail,
  Clock,
  Eye,
  Scroll,
  GraduationCap,
  Briefcase,
  MapPin,
  User,
  FileText,
  CalendarClock,
  Edit,
  Info,
  Star,
  Sparkles,
  Send,
  Calendar,
  Shield,
  Crown,
  Zap,
  Award,
  Activity,
  MessageCircle,
  Phone,
  X,
} from 'lucide-react';

import { Separator } from '@/components/ui/separator';
import type { Candidate } from '../types/candidates';
import { UserSource } from '@prisma/client';
import { cn } from '@/lib/utils';
import { motion } from 'framer-motion';
import Image from 'next/image';
import { getRelativeCloudinaryPath } from '@/lib/utils';
import type { MatchmakerPageDictionary } from '@/types/dictionaries/matchmaker';

// פונקציה לחישוב גיל
const calculateAge = (birthDate: Date): number => {
  const today = new Date();
  const birth = new Date(birthDate);
  let age = today.getFullYear() - birth.getFullYear();
  const monthDiff = today.getMonth() - birth.getMonth();
  if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birth.getDate())) {
    age--;
  }
  return age;
};

type ActionId = 'view' | 'invite' | 'suggest' | 'contact' | 'favorite' | 'edit';

interface QuickViewProps {
  candidate: Candidate;
  onAction: (action: ActionId) => void;
  onSetAiTarget?: (candidate: Candidate, e: React.MouseEvent) => void;
  isAiTarget?: boolean;
  dict: MatchmakerPageDictionary['candidatesManager']['list']['quickView'];
}

const QuickView: React.FC<QuickViewProps> = ({
  candidate,
  onAction,
  onSetAiTarget,
  isAiTarget = false,
  dict,
}) => {
  const [isClosing, setIsClosing] = useState(false);
  const [hoveredAction, setHoveredAction] = useState<string | null>(null);

  const handleClick = (e: React.MouseEvent) => {
    e.stopPropagation();
  };

  const handleClose = () => {
    setIsClosing(true);
    setTimeout(() => {
      // The parent component will handle the actual closing
    }, 150);
  };

  const profile = candidate.profile;
  const isManualEntry = candidate.source === UserSource.MANUAL_ENTRY;
  const mainImage = candidate.images?.find((img) => img.isMain);

  const getAvailabilityInfo = () => {
    switch (profile.availabilityStatus) {
      case 'AVAILABLE':
        return {
          label: dict.availability.AVAILABLE,
          gradient: 'from-emerald-500 to-green-500',
          icon: <Sparkles className="w-4 h-4" />,
          description: dict.availabilityDescription.AVAILABLE,
        };
      case 'DATING':
        return {
          label: dict.availability.DATING,
          gradient: 'from-amber-500 to-orange-500',
          icon: <Heart className="w-4 h-4" />,
          description: dict.availabilityDescription.DATING,
        };
      case 'UNAVAILABLE':
        return {
          label: dict.availability.UNAVAILABLE,
          gradient: 'from-red-500 to-pink-500',
          icon: <Clock className="w-4 h-4" />,
          description: dict.availabilityDescription.UNAVAILABLE,
        };
      default:
        return {
          label: dict.availability.UNKNOWN,
          gradient: 'from-gray-500 to-slate-500',
          icon: <User className="w-4 h-4" />,
          description: dict.availabilityDescription.UNKNOWN,
        };
    }
  };

  const getQualityScore = () => {
    let score = 0;
    if (candidate.images.length > 0) score += 25;
    if (profile.about) score += 25;
    if (profile.education) score += 25;
    if (profile.occupation) score += 25;
    return score;
  };

  const availabilityInfo = getAvailabilityInfo();
  const qualityScore = getQualityScore();

  const actionButtons: {
    id: 'view' | 'invite' | 'suggest' | 'contact' | 'edit';
    label: string;
    icon: React.ElementType;
    gradient: string;
    description: string;
    primary: boolean;
  }[] = [
    {
      id: 'view',
      label: dict.actions.view,
      icon: Eye,
      gradient: 'from-blue-500 to-cyan-500',
      description: dict.actionsDescription.view,
      primary: true,
    },
    {
      id: 'suggest',
      label: dict.actions.suggest,
      icon: Heart,
      gradient: 'from-pink-500 to-rose-500',
      description: dict.actionsDescription.suggest,
      primary: true,
    },
    {
      id: 'invite',
      label: dict.actions.invite,
      icon: Send,
      gradient: 'from-purple-500 to-indigo-500',
      description: dict.actionsDescription.invite,
      primary: false,
    },
    {
      id: 'contact',
      label: dict.actions.contact,
      icon: Calendar,
      gradient: 'from-orange-500 to-amber-500',
      description: dict.actionsDescription.contact,
      primary: false,
    },
    {
      id: 'edit',
      label: dict.actions.edit,
      icon: Edit,
      gradient: 'from-gray-500 to-slate-500',
      description: dict.actionsDescription.edit,
      primary: false,
    },
  ];

  return (
    <motion.div
      initial={{ opacity: 0, scale: 0.9, y: 20 }}
      animate={{
        opacity: isClosing ? 0 : 1,
        scale: isClosing ? 0.9 : 1,
        y: isClosing ? 20 : 0,
      }}
      transition={{ type: 'spring', stiffness: 300, damping: 25 }}
      className="bg-white shadow-2xl flex flex-col border-0 overflow-hidden max-w-md sm:max-w-lg w-full rounded-3xl max-h-[85vh]"
      onClick={handleClick}
    >
      <div
        className={cn(
          'relative px-6 py-6 text-white overflow-hidden',
          `bg-gradient-to-br ${availabilityInfo.gradient}`
        )}
      >
        <div className="absolute inset-0">
          <div className="absolute top-0 right-0 w-32 h-32 bg-white/20 rounded-full blur-2xl"></div>
          <div className="absolute bottom-0 left-0 w-24 h-24 bg-white/10 rounded-full blur-xl"></div>
        </div>
        <div className="relative z-10">
          <div className="flex items-start justify-between mb-4">
            <div className="flex items-center gap-3">
              <div className="relative w-16 h-16 rounded-full overflow-hidden border-3 border-white/30 shadow-xl">
                {mainImage ? (
                  <Image src={getRelativeCloudinaryPath(mainImage.url)} alt={`${candidate.firstName} ${candidate.lastName}`} fill className="object-cover" />
                ) : (
                  <div className="w-full h-full bg-white/20 flex items-center justify-center"><User className="w-8 h-8 text-white/80" /></div>
                )}
              </div>
              <div>
                <h3 className="text-xl font-bold mb-1">{candidate.firstName} {candidate.lastName}</h3>
                <div className="flex items-center gap-2">{availabilityInfo.icon}<span className="text-white/90 font-medium">{availabilityInfo.label}</span></div>
              </div>
            </div>
            <div className="flex items-center gap-2">
              {onSetAiTarget && (
                <Button size="icon" variant="ghost" className="h-8 w-8 text-white hover:bg-white/20 rounded-full" onClick={(e) => onSetAiTarget(candidate, e)} title={isAiTarget ? dict.tooltips.clearAiTarget : dict.tooltips.setAsAiTarget}>
                  <Star className={cn('h-5 w-5', isAiTarget ? 'fill-current text-yellow-300' : 'text-white/80')} />
                </Button>
              )}
              <Button size="icon" variant="ghost" className="h-8 w-8 text-white hover:bg-white/20 rounded-full" onClick={handleClose}><X className="h-5 w-5" /></Button>
            </div>
          </div>
          <div className="flex flex-wrap gap-2">
            <Badge className="bg-white/20 text-white border-white/30 backdrop-blur-sm">{availabilityInfo.description}</Badge>
            {isManualEntry && (<Badge className="bg-purple-500/30 text-white border-purple-300/50 backdrop-blur-sm"><Edit className="w-3 h-3 mr-1" />{dict.manualEntry}</Badge>)}
          </div>
        </div>
      </div>
      <div className="flex-1 p-6 space-y-6 text-right overflow-y-auto bg-gradient-to-br from-white to-gray-50/30">
        <div className="grid grid-cols-2 gap-4">
          {profile.birthDate && (
            <div className="p-3 bg-gradient-to-r from-blue-50 to-cyan-50 rounded-xl border border-blue-100 hover:shadow-md transition-all duration-300">
              <div className="flex items-center justify-end gap-2 text-blue-700"><span className="font-bold text-lg">{calculateAge(new Date(profile.birthDate))}</span><CalendarClock className="w-5 h-5" /></div>
              <p className="text-xs text-blue-600 mt-1">{dict.details.years}</p>
            </div>
          )}
          {profile.height && (
            <div className="p-3 bg-gradient-to-r from-purple-50 to-pink-50 rounded-xl border border-purple-100 hover:shadow-md transition-all duration-300">
              <div className="flex items-center justify-end gap-2 text-purple-700"><span className="font-bold text-lg">{profile.height}</span><User className="w-5 h-5" /></div>
              <p className="text-xs text-purple-600 mt-1">{dict.details.heightUnit}</p>
            </div>
          )}
          {profile.maritalStatus && (
            <div className="p-3 bg-gradient-to-r from-green-50 to-emerald-50 rounded-xl border border-green-100 hover:shadow-md transition-all duration-300">
              <div className="flex items-center justify-end gap-2 text-green-700"><span className="font-medium text-sm">{profile.maritalStatus}</span><Heart className="w-5 h-5" /></div>
              <p className="text-xs text-green-600 mt-1">{dict.details.maritalStatus}</p>
            </div>
          )}
          {profile.religiousLevel && (
            <div className="p-3 bg-gradient-to-r from-orange-50 to-amber-50 rounded-xl border border-orange-100 hover:shadow-md transition-all duration-300">
              <div className="flex items-center justify-end gap-2 text-orange-700"><span className="font-medium text-sm">{profile.religiousLevel}</span><Scroll className="w-5 h-5" /></div>
              <p className="text-xs text-orange-600 mt-1">{dict.details.religiousLevel}</p>
            </div>
          )}
        </div>
        <Separator className="my-6 bg-gradient-to-r from-transparent via-gray-300 to-transparent" />
        {isManualEntry && profile.manualEntryText ? (
          <div className="space-y-4">
            <div className="flex items-center justify-end gap-2"><h4 className="text-lg font-bold text-purple-800">{dict.details.manualDescription}</h4><Info className="w-6 h-6 text-purple-500" /></div>
            <div className="p-5 bg-gradient-to-r from-purple-50 to-indigo-50 rounded-2xl border border-purple-200 shadow-sm"><p className="text-purple-900 leading-relaxed whitespace-pre-wrap font-medium">{profile.manualEntryText}</p></div>
          </div>
        ) : (
          <div className="space-y-4">
            <h4 className="text-lg font-bold text-gray-700 mb-4 flex items-center justify-end gap-2"><span>{dict.details.moreInfo}</span><Sparkles className="w-5 h-5 text-blue-500" /></h4>
            {profile.education && (<div className="p-4 bg-gradient-to-r from-blue-50 to-cyan-50 rounded-xl border border-blue-100 hover:shadow-md transition-all duration-300 group"><div className="flex items-center justify-end gap-3"><span className="font-medium text-blue-800 group-hover:text-blue-900 transition-colors">{profile.education}</span><div className="p-2 rounded-full bg-gradient-to-r from-blue-500 to-cyan-500 text-white shadow-lg"><GraduationCap className="w-4 h-4" /></div></div><p className="text-xs text-blue-600 mt-1 text-right">{dict.details.education}</p></div>)}
            {profile.occupation && (<div className="p-4 bg-gradient-to-r from-green-50 to-emerald-50 rounded-xl border border-green-100 hover:shadow-md transition-all duration-300 group"><div className="flex items-center justify-end gap-3"><span className="font-medium text-green-800 group-hover:text-green-900 transition-colors">{profile.occupation}</span><div className="p-2 rounded-full bg-gradient-to-r from-green-500 to-emerald-500 text-white shadow-lg"><Briefcase className="w-4 h-4" /></div></div><p className="text-xs text-green-600 mt-1 text-right">{dict.details.occupation}</p></div>)}
            {profile.city && (<div className="p-4 bg-gradient-to-r from-purple-50 to-pink-50 rounded-xl border border-purple-100 hover:shadow-md transition-all duration-300 group"><div className="flex items-center justify-end gap-3"><span className="font-medium text-purple-800 group-hover:text-purple-900 transition-colors">{profile.city}</span><div className="p-2 rounded-full bg-gradient-to-r from-purple-500 to-pink-500 text-white shadow-lg"><MapPin className="w-4 h-4" /></div></div><p className="text-xs text-purple-600 mt-1 text-right">{dict.details.location}</p></div>)}
          </div>
        )}
        {(!isManualEntry || !profile.manualEntryText) && profile.about && (
          <>
            <Separator className="my-6 bg-gradient-to-r from-transparent via-gray-300 to-transparent" />
            <div className="space-y-4">
              <h4 className="text-lg font-bold text-gray-700 flex items-center justify-end gap-2"><span>{dict.details.about}</span><FileText className="w-5 h-5 text-gray-500" /></h4>
              <div className="p-5 bg-gradient-to-r from-gray-50 to-slate-50 rounded-2xl border border-gray-200 shadow-sm"><p className="text-gray-800 leading-relaxed whitespace-pre-wrap">{profile.about}</p></div>
            </div>
          </>
        )}
      </div>
      <div className="p-6 bg-gradient-to-r from-gray-50 to-white border-t border-gray-100">
        <div className="flex items-center justify-center mb-4">
          <div className="flex items-center gap-2 bg-gradient-to-r from-blue-50 to-cyan-50 px-4 py-2 rounded-full border border-blue-100">
            <Award className="w-4 h-4 text-blue-600" />
            <span className="text-sm font-bold text-blue-800">{dict.qualityScore.replace('{{score}}', String(qualityScore))}</span>
            <div className="flex gap-1">{[...Array(5)].map((_, i) => (<Star key={i} className={cn('w-3 h-3', i < Math.floor(qualityScore / 20) ? 'text-yellow-500 fill-current' : 'text-gray-300')} />))}</div>
          </div>
        </div>
        <div className="grid grid-cols-2 gap-3 mb-4">
          {actionButtons.filter((a) => a.primary).map((action) => {
            const IconComponent = action.icon;
            return (<Button key={action.id} className={cn('h-12 font-bold text-sm border-0 shadow-xl hover:shadow-2xl transition-all duration-300 transform hover:scale-105 relative overflow-hidden group rounded-2xl', `bg-gradient-to-r ${action.gradient} hover:${action.gradient.replace('500', '600')}`, 'text-white', hoveredAction === action.id && 'scale-105')} onClick={() => onAction(action.id)} onMouseEnter={() => setHoveredAction(action.id)} onMouseLeave={() => setHoveredAction(null)}>
              <div className="absolute inset-0 bg-gradient-to-r from-white/0 via-white/20 to-white/0 transform -translate-x-full group-hover:translate-x-full transition-transform duration-700"></div>
              <div className="relative z-10 flex items-center justify-center gap-2"><IconComponent className="w-5 h-5" /><span>{action.label}</span></div>
            </Button>);
          })}
        </div>
        <div className="grid grid-cols-3 gap-2">
          {actionButtons.filter((a) => !a.primary).map((action) => {
            const IconComponent = action.icon;
            return (<Button key={action.id} variant="outline" size="sm" className={cn('border-2 border-gray-200 hover:border-transparent shadow-lg hover:shadow-xl transition-all duration-300 transform hover:scale-105 group relative overflow-hidden rounded-xl', `hover:bg-gradient-to-r hover:${action.gradient}`, 'hover:text-white font-medium', hoveredAction === action.id && 'scale-105')} onClick={() => onAction(action.id)} onMouseEnter={() => setHoveredAction(action.id)} onMouseLeave={() => setHoveredAction(null)}>
              <div className={cn('absolute inset-0 bg-gradient-to-r transition-all duration-300 opacity-0 group-hover:opacity-100', action.gradient)}></div>
              <div className="relative z-10 flex items-center justify-center gap-1"><IconComponent className="w-3 h-3" /><span className="text-xs">{action.label}</span></div>
            </Button>);
          })}
        </div>
        <div className="mt-4 pt-4 border-t border-gray-200">
          <div className="flex justify-between items-center text-xs">
            <div className="flex items-center gap-1 text-yellow-600"><Star className="w-3 h-3 fill-current" /><span className="font-medium">{dict.stats.rating}: 4.8</span></div>
            <div className="flex items-center gap-1 text-blue-600"><Zap className="w-3 h-3" /><span className="font-medium">{dict.stats.match}: 95%</span></div>
            <div className="flex items-center gap-1 text-green-600"><MessageCircle className="w-3 h-3" /><span className="font-medium">{dict.stats.response}: {dict.stats.quick}</span></div>
          </div>
        </div>
      </div>
    </motion.div>
  );
};

export default QuickView;
--- End of Content for QuickView.tsx ---

================================================================================
Directory: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\new\CandidatesManager
================================================================================

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\new\CandidatesManager\CandidatesList.tsx
--------------------------------------------------------------------------------
Content:
// File: src/app/components/matchmaker/new/CandidatesManager/CandidatesList.tsx

import React, {
  useState,
  useCallback,
  useEffect,
  useRef,
  useMemo,
} from 'react';
import { UserX, Edit } from 'lucide-react';
import MinimalCard from '../CandidateCard/MinimalCard';
import QuickView from '../CandidateCard/QuickView';
import { ProfileCard } from '@/components/profile';
import type {
  Candidate,
  CandidateAction,
  MobileView,
} from '../types/candidates';
import type { QuestionnaireResponse } from '@/types/next-auth';
import { Skeleton } from '@/components/ui/skeleton';
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription,
} from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select';
import { toast } from 'sonner';
import { ActionDialogs } from '../dialogs/ActionDialogs';
import NewSuggestionForm from '../../suggestions/NewSuggestionForm';
import MatchmakerEditProfile from '../MatchmakerEditProfile';
import { cn } from '@/lib/utils';
import type { MatchmakerPageDictionary } from '@/types/dictionaries/matchmaker';
import type { ProfilePageDictionary } from '@/types/dictionary';

interface CreateSuggestionData {
  priority: 'LOW' | 'MEDIUM' | 'HIGH' | 'URGENT';
  firstPartyId: string;
  secondPartyId: string;
  status:
    | 'DRAFT'
    | 'PENDING_FIRST_PARTY'
    | 'FIRST_PARTY_APPROVED'
    | 'FIRST_PARTY_DECLINED'
    | string;
  firstPartyNotes?: string;
  secondPartyNotes?: string;
}

interface CandidatesListProps {
  candidates: (Candidate & { aiScore?: number })[];
  allCandidates: Candidate[];
  onCandidateClick?: (candidate: Candidate) => void;
  onCandidateAction?: (type: CandidateAction, candidate: Candidate) => void;
  viewMode: 'grid' | 'list';
  mobileView: MobileView;
  isLoading?: boolean;
  className?: string;
  highlightTerm?: string;
  aiTargetCandidate: Candidate | null;
  onSetAiTarget: (candidate: Candidate, e: React.MouseEvent) => void;
  comparisonSelection: Record<string, Candidate>;
  onToggleComparison: (candidate: Candidate, e: React.MouseEvent) => void;
  quickViewSide?: 'left' | 'right' | 'center';
  isQuickViewEnabled: boolean; // <-- קבלת prop חדש
  locale: string;
  dict: MatchmakerPageDictionary;
  profileDict: ProfilePageDictionary;
}

const CandidatesList: React.FC<CandidatesListProps> = ({
  candidates,
  allCandidates,
  locale,
  onCandidateClick,
  onCandidateAction,
  isQuickViewEnabled, // <-- שימוש ב-prop החדש

  viewMode,
  mobileView,
  isLoading = false,
  className,
  highlightTerm,
  aiTargetCandidate,
  onSetAiTarget,
  comparisonSelection,
  onToggleComparison,
  quickViewSide = 'center',
  dict,
  profileDict,
}) => {
  // ... (כל הלוגיקה הפנימית נשארת זהה) ...
  // Base states
  const [selectedCandidate, setSelectedCandidate] = useState<Candidate | null>(
    null
  );
  const [questionnaireResponse, setQuestionnaireResponse] =
    useState<QuestionnaireResponse | null>(null);
  const [isMatchmaker, setIsMatchmaker] = useState(false);
  const [hoveredCandidate, setHoveredCandidate] = useState<Candidate | null>(
    null
  );
  const [hoverPosition, setHoverPosition] = useState({ top: 0, left: 0 });
  const hoverTimeoutRef = useRef<NodeJS.Timeout | null>(null);
  const quickViewRef = useRef<HTMLDivElement>(null);

  // Dialog states
  const [showInviteDialog, setShowInviteDialog] = useState(false);
  const [showAvailabilityDialog, setShowAvailabilityDialog] = useState(false);
  const [showSuggestDialog, setShowSuggestDialog] = useState(false);
  const [showEditProfileDialog, setShowEditProfileDialog] = useState(false);
  const [dialogCandidate, setDialogCandidate] = useState<Candidate | null>(
    null
  );

  const [isMobile, setIsMobile] = useState(false);

  useEffect(() => {
    const checkScreenSize = () => {
      setIsMobile(window.innerWidth < 768);
    };
    checkScreenSize();
    window.addEventListener('resize', checkScreenSize);
    return () => {
      window.removeEventListener('resize', checkScreenSize);
    };
  }, []);

  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (
        hoveredCandidate &&
        quickViewRef.current &&
        !quickViewRef.current.contains(event.target as Node)
      ) {
        setHoveredCandidate(null);
      }
    };
    document.addEventListener('mousedown', handleClickOutside);
    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, [hoveredCandidate]);

  useEffect(() => {
    return () => {
      if (hoverTimeoutRef.current) {
        clearTimeout(hoverTimeoutRef.current);
      }
    };
  }, []);

  useEffect(() => {
    const loadQuestionnaire = async () => {
      if (!selectedCandidate) {
        setQuestionnaireResponse(null);
        return;
      }
      try {
        const response = await fetch(
          `/api/profile/questionnaire?userId=${selectedCandidate.id}`
        );
        const data = await response.json();
        if (data.success && data.questionnaireResponse) {
          const formattedQuestionnaire = {
            ...data.questionnaireResponse,
            formattedAnswers: {
              values: data.questionnaireResponse.formattedAnswers.values || [],
              personality:
                data.questionnaireResponse.formattedAnswers.personality || [],
              relationship:
                data.questionnaireResponse.formattedAnswers.relationship || [],
              partner:
                data.questionnaireResponse.formattedAnswers.partner || [],
              religion:
                data.questionnaireResponse.formattedAnswers.religion || [],
            },
          };
          setQuestionnaireResponse(formattedQuestionnaire);
        }
      } catch (error) {
        console.error('Failed to load questionnaire:', error);
        toast.error('שגיאה בטעינת השאלון');
      }
    };
    loadQuestionnaire();
  }, [selectedCandidate]);

  // Action handlers
  const handleInvite = async (candidate: Candidate, email: string) => {
    try {
      const response = await fetch(
        `/api/matchmaker/candidates/${candidate.id}/invite-setup`,
        {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ candidateId: candidate.id, email }),
        }
      );
      if (!response.ok) throw new Error('Failed to send invitation');
      toast.success('ההזמנה נשלחה בהצלחה');
      onCandidateAction?.('invite', candidate);
    } catch (error) {
      console.error('Error sending invite:', error);
      throw error;
    }
  };

  const handleAvailabilityCheck = async (candidate: Candidate) => {
    try {
      const response = await fetch('/api/availability/check', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ clientId: candidate.id }),
      });
      if (!response.ok) throw new Error('Failed to check availability');
      toast.success('בדיקת הזמינות נשלחה');
      onCandidateAction?.('contact', candidate);
    } catch (error) {
      console.error('Error checking availability:', error);
      throw error;
    }
  };

  const handleCreateSuggestion = async (data: CreateSuggestionData) => {
    try {
      const response = await fetch('/api/matchmaker/suggestions', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(data),
      });
      if (!response.ok) throw new Error('Failed to create suggestion');
      toast.success('ההצעה נוצרה בהצלחה');
      onCandidateAction?.('suggest', dialogCandidate!);
    } catch (error) {
      console.error('Error creating suggestion:', error);
      throw error;
    }
  };

  const handleEditProfile = (candidate: Candidate) => {
    setDialogCandidate(candidate);
    setShowEditProfileDialog(true);
  };

  const handleMouseEnter = (candidate: Candidate, e?: React.MouseEvent) => {
    if (isMobile || !e || !isQuickViewEnabled) return; // <-- תנאי חדש

    if (isMobile || !e) return;
    if (hoverTimeoutRef.current) {
      clearTimeout(hoverTimeoutRef.current);
    }
    const cardElement = e.currentTarget as HTMLElement;
    const cardRect = cardElement.getBoundingClientRect();
    const viewportHeight = window.innerHeight;
    const padding = 20;
    const quickViewApproxHeight = Math.min(650, viewportHeight * 0.85);
    let top;
    if (cardRect.top + quickViewApproxHeight > viewportHeight - padding) {
      top = cardElement.offsetTop + cardRect.height - quickViewApproxHeight;
    } else {
      top = cardElement.offsetTop;
    }
    const scrollContainer = cardElement.closest('.overflow-y-auto');
    if (scrollContainer) {
      top = Math.max(top, scrollContainer.scrollTop);
    }
    let left;
    const quickViewWidth = 420;
    switch (quickViewSide) {
      case 'left':
        left = window.innerWidth / 4 - quickViewWidth / 2;
        break;
      case 'right':
        left = (window.innerWidth * 3) / 4 - quickViewWidth / 2 - 470;
        break;
      case 'center':
      default:
        left = window.innerWidth / 2 - quickViewWidth / 2;
        break;
    }
    left = Math.max(
      padding,
      Math.min(left, window.innerWidth - quickViewWidth - padding)
    );
    hoverTimeoutRef.current = setTimeout(() => {
      setHoverPosition({ top, left });
      setHoveredCandidate(candidate);
    }, 300);
  };

  const handleMouseLeave = () => {
    if (isMobile) return;
    if (hoverTimeoutRef.current) {
      clearTimeout(hoverTimeoutRef.current);
      hoverTimeoutRef.current = null;
    }
    setTimeout(() => {
      if (!quickViewRef.current?.matches(':hover')) {
        setHoveredCandidate(null);
      }
    }, 100);
  };

  const handleAction = useCallback(
    (action: CandidateAction, candidate: Candidate) => {
      setDialogCandidate(candidate);
      setHoveredCandidate(null);
      switch (action) {
        case 'invite':
          setShowInviteDialog(true);
          break;
        case 'contact':
          setShowAvailabilityDialog(true);
          break;
        case 'suggest':
          setShowSuggestDialog(true);
          break;
        case 'view':
          setSelectedCandidate(candidate);
          onCandidateClick?.(candidate);
          break;
        case 'edit':
          handleEditProfile(candidate);
          break;
        default:
          onCandidateAction?.(action, candidate);
      }
    },
    [onCandidateAction, onCandidateClick]
  );

  const gridLayoutClass = useMemo(() => {
    if (isMobile) {
      return mobileView === 'double'
        ? 'grid grid-cols-2 gap-2'
        : 'grid grid-cols-1 gap-3';
    }
    return viewMode === 'grid'
      ? 'grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-x-3 gap-y-4'
      : 'space-y-4';
  }, [isMobile, mobileView, viewMode]);

  // ... (החלק של isLoading ו-candidates.length === 0 נשאר זהה) ...
  if (isLoading) {
    return (
      <div
        className={`${viewMode === 'grid' ? 'grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4' : 'space-y-4'} ${className || ''}`}
      >
        {Array.from({ length: 6 }).map((_, i) => (
          <div key={i} className="relative">
            <Skeleton
              className={
                viewMode === 'list' ? 'h-32 w-full' : 'h-[350px] w-full'
              }
            />
            <div className="absolute top-3 right-3">
              <Skeleton className="h-6 w-16 rounded-full" />
            </div>
          </div>
        ))}
      </div>
    );
  }

  if (candidates.length === 0) {
    return (
      <div className="flex flex-col items-center justify-center h-32 bg-gray-50 rounded-lg border border-dashed border-gray-300 p-4 text-center">
        <UserX className="w-8 h-8 mb-2 text-gray-400" />
        <p className="text-sm font-medium text-gray-500 mb-1">
          {dict.candidatesManager.list.emptyState.title}
        </p>
        <p className="text-xs text-gray-400">
          {dict.candidatesManager.list.emptyState.description}
        </p>
      </div>
    );
  }

  return (
    <>
      <div className={cn(gridLayoutClass, className || '')}>
        {candidates.map((candidate) => (
          <div
            key={candidate.id}
            className="group relative"
            onMouseEnter={(e) => handleMouseEnter(candidate, e)}
            onMouseLeave={handleMouseLeave}
            onClick={() => handleAction('view', candidate)}
          >
            {/********** תיקון #1: העברת המילון הנכון ל-MinimalCard **********/}
            <MinimalCard
              candidate={candidate}
              onClick={() => handleAction('view', candidate)}
              onEdit={(c, e) => {
                e.stopPropagation();
                handleAction('edit', c);
              }}
              className={cn(
                viewMode === 'list' && !isMobile
                  ? 'flex flex-row-reverse gap-4 h-32'
                  : '',
                isMobile && mobileView === 'double' ? 'transform scale-90' : '',
                isMobile && mobileView === 'single' ? 'transform scale-95' : ''
              )}
              highlightTerm={highlightTerm}
              aiScore={candidate.aiScore}
              onSetAiTarget={onSetAiTarget}
              isAiTarget={aiTargetCandidate?.id === candidate.id}
              isSelectableForComparison={
                !!aiTargetCandidate &&
                aiTargetCandidate.profile.gender !== candidate.profile.gender &&
                aiTargetCandidate.id !== candidate.id
              }
              isSelectedForComparison={!!comparisonSelection[candidate.id]}
              onToggleComparison={onToggleComparison}
              dict={dict.candidatesManager.list.minimalCard} // <--- התיקון כאן
            />
            <button
              className="absolute top-2 left-2 bg-primary text-white p-2 rounded-full opacity-0 group-hover:opacity-100 transition-opacity z-10"
              onClick={(e) => {
                e.stopPropagation();
                handleAction('edit', candidate);
              }}
              aria-label={dict.candidatesManager.list.editProfileTooltip}
              title={dict.candidatesManager.list.editProfileTooltip}
            >
              <Edit className="w-4 h-4" />
            </button>
          </div>
        ))}
      </div>

      {isQuickViewEnabled &&
        hoveredCandidate &&
        !isMobile && ( // <-- תנאי חדש
          <div
            ref={quickViewRef}
            className="absolute z-[70]"
            style={{
              top: `${hoverPosition.top}px`,
              left: `${hoverPosition.left}px`,
              width: '420px',
            }}
          >
            <div className="drop-shadow-2xl">
              {/********** תיקון #2: העברת המילון הנכון ל-QuickView **********/}
              <QuickView
                candidate={hoveredCandidate}
                // שורה מעודכנת
                onAction={(action) => handleAction(action, hoveredCandidate)}
                onSetAiTarget={(c, e) => onSetAiTarget(c, e)}
                isAiTarget={aiTargetCandidate?.id === hoveredCandidate.id}
                dict={dict.candidatesManager.list.quickView} // <--- התיקון כאן
              />
            </div>
          </div>
        )}

      <Dialog
        open={!!selectedCandidate}
        onOpenChange={(open) => {
          if (!open) {
            setSelectedCandidate(null);
            setQuestionnaireResponse(null);
          }
        }}
      >
        <DialogContent className="max-w-6xl max-h-[90vh] overflow-y-auto">
          <DialogHeader>
            <div className="flex items-center justify-between">
              <DialogTitle>
                {dict.candidatesManager.list.profileDialog.title}
              </DialogTitle>
              <Button
                variant="outline"
                onClick={() => handleAction('edit', selectedCandidate!)}
                className="flex items-center gap-2"
              >
                <Edit className="w-4 h-4" />
                {dict.candidatesManager.list.profileDialog.editButton}
              </Button>
            </div>
            <DialogDescription>
              {dict.candidatesManager.list.profileDialog.description}
            </DialogDescription>
            <Select
              value={isMatchmaker ? 'matchmaker' : 'candidate'}
              onValueChange={(value) => setIsMatchmaker(value === 'matchmaker')}
            >
              <SelectTrigger className="w-full sm:w-48">
                <SelectValue
                  placeholder={
                    dict.candidatesManager.list.profileDialog.viewAsLabel
                  }
                />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="candidate">
                  {dict.candidatesManager.list.profileDialog.candidateView}
                </SelectItem>
                <SelectItem value="matchmaker">
                  {dict.candidatesManager.list.profileDialog.matchmakerView}
                </SelectItem>
              </SelectContent>
            </Select>
          </DialogHeader>
          {selectedCandidate && (
            <div className="space-y-6">
              <ProfileCard
                profile={selectedCandidate.profile}
                images={selectedCandidate.images}
                questionnaire={questionnaireResponse}
                viewMode={isMatchmaker ? 'matchmaker' : 'candidate'}
                isProfileComplete={selectedCandidate.isProfileComplete}
                dict={profileDict.profileCard}
              />
            </div>
          )}
        </DialogContent>
      </Dialog>

      {/********** תיקון #3: העברת המילון הנכון ל-ActionDialogs **********/}
      <ActionDialogs
        suggestDialog={{
          isOpen: showSuggestDialog,
          onClose: () => setShowSuggestDialog(false),
          onSubmit: handleCreateSuggestion,
          selectedCandidate: dialogCandidate,
        }}
        availabilityDialog={{
          isOpen: showAvailabilityDialog,
          onClose: () => setShowAvailabilityDialog(false),
          onCheck: handleAvailabilityCheck,
          selectedCandidate: dialogCandidate,
        }}
        inviteDialog={{
          isOpen: showInviteDialog,
          onClose: () => setShowInviteDialog(false),
          onInvite: handleInvite,
          selectedCandidate: dialogCandidate,
        }}
        dict={dict.candidatesManager.actionDialogs} // <--- התיקון כאן
      />

      {/********** תיקון #4: העברת המילון הנכון ל-NewSuggestionForm **********/}
      <NewSuggestionForm
        isOpen={showSuggestDialog}
        onClose={() => setShowSuggestDialog(false)}
        candidates={allCandidates}
        selectedCandidate={dialogCandidate}
        onSubmit={handleCreateSuggestion}
        dict={dict} // <--- התיקון כאן
        locale={locale}
      />

      {/********** תיקון #5: העברת המילונים הנכונים ל-MatchmakerEditProfile **********/}
      <MatchmakerEditProfile
        isOpen={showEditProfileDialog}
        onClose={() => setShowEditProfileDialog(false)}
        candidate={dialogCandidate}
        dict={dict.candidatesManager.editProfile} // <--- התיקון כאן
        profileDict={profileDict} // <--- התיקון כאן (הוספנו את המילון השני)
      />
    </>
  );
};

export default CandidatesList;
--- End of Content for CandidatesList.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\new\CandidatesManager\CandidatesStats.tsx
--------------------------------------------------------------------------------
Content:
// /CandidatesManager/CandidatesStats.tsx

'use client';

import React from 'react';

import { Card, CardContent } from '@/components/ui/card';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Badge } from '@/components/ui/badge';
import {
  Users,
  UserCheck,
  Clock,
  MapPin,
  CheckCircle,
  Image as ImageIcon,
  TrendingUp,
  ArrowUp,
  ArrowDown,
  Activity,
  Heart,
  Star,
  Award,
  Sparkles,
  Target,
  Crown,
  Zap,
} from 'lucide-react';
import { useStatistics } from '../hooks/useStatistics';
import type { Candidate } from '../types/candidates';
import {
  BarChart,
  Bar,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip,
  ResponsiveContainer,
  PieChart,
  Pie,
  Cell,
} from 'recharts';
import { cn } from '@/lib/utils';
import type { MatchmakerPageDictionary } from '@/types/dictionaries/matchmaker';

interface StatCardProps {
  title: string;
  value: string | number;
  description?: string;
  icon: React.ReactNode;
  trend?: {
    value: number;
    isPositive: boolean;
  };
  className?: string;
  gradient: string;
  iconColor: string;
  dict: MatchmakerPageDictionary['candidatesManager']['stats']['mainStats']['trend'];
}

interface CandidatesStatsProps {
  candidates: Candidate[];
  className?: string;
  dict: MatchmakerPageDictionary['candidatesManager']['stats'];
}

const CHART_COLORS = [
  '#3B82F6', // כחול
  '#EF4444', // אדום
  '#10B981', // ירוק
  '#F59E0B', // כתום
  '#8B5CF6', // סגול
  '#EC4899', // ורוד
  '#06B6D4', // ציאן
  '#84CC16', // ליים
];

const StatCard: React.FC<StatCardProps> = ({
  title,
  value,
  description,
  icon,
  trend,
  className,
  gradient,
  iconColor,
  dict,
}) => (
  <Card
    className={cn(
      'border-0 shadow-xl bg-gradient-to-br from-white via-gray-50/30 to-white overflow-hidden group hover:shadow-2xl transition-all duration-300 transform hover:scale-105',
      className
    )}
  >
    <CardContent className="p-6 relative">
      <div className="absolute top-0 right-0 w-32 h-32 bg-gradient-to-br from-white/20 to-transparent rounded-full blur-2xl opacity-50"></div>

      <div className="flex items-start justify-between relative z-10">
        <div className="space-y-3 flex-1">
          <p className="text-sm font-medium text-gray-600">{title}</p>
          <div className="flex items-baseline gap-2">
            <p className="text-3xl font-bold text-gray-800">{value}</p>
            {trend && (
              <div
                className={cn(
                  'flex items-center gap-1 px-2 py-1 rounded-full text-xs font-bold',
                  trend.isPositive
                    ? 'bg-gradient-to-r from-green-100 to-emerald-100 text-green-700'
                    : 'bg-gradient-to-r from-red-100 to-pink-100 text-red-700'
                )}
              >
                {trend.isPositive ? (
                  <ArrowUp className="w-3 h-3" />
                ) : (
                  <ArrowDown className="w-3 h-3" />
                )}
                <span>{Math.abs(trend.value)}%</span>
              </div>
            )}
          </div>
          {description && (
            <p className="text-sm text-gray-500 leading-relaxed">
              {description}
            </p>
          )}
          {trend && (
            <p className="text-xs text-gray-400">
              {trend.isPositive ? dict.increase : dict.decrease} {dict.period}
            </p>
          )}
        </div>

        <div
          className={cn(
            'p-4 rounded-2xl shadow-lg group-hover:scale-110 transition-transform duration-300',
            `bg-gradient-to-r ${gradient}`
          )}
        >
          <div className={iconColor}>{icon}</div>
        </div>
      </div>
    </CardContent>
  </Card>
);

const EnhancedChartCard: React.FC<{
  title: string;
  children: React.ReactNode;
  description?: string;
  gradient?: string;
  icon?: React.ReactNode;
}> = ({
  title,
  children,
  description,
  gradient = 'from-blue-500 to-cyan-500',
  icon,
}) => (
  <Card className="border-0 shadow-xl bg-gradient-to-br from-white via-gray-50/30 to-white overflow-hidden hover:shadow-2xl transition-all duration-300">
    <CardContent className="p-6">
      <div className="flex items-center justify-between mb-6">
        <div className="flex items-center gap-3">
          {icon && (
            <div
              className={cn(
                'p-3 rounded-full shadow-lg',
                `bg-gradient-to-r ${gradient}`
              )}
            >
              <div className="text-white">{icon}</div>
            </div>
          )}
          <div>
            <h3 className="text-xl font-bold text-gray-800">{title}</h3>
            {description && (
              <p className="text-sm text-gray-500 mt-1">{description}</p>
            )}
          </div>
        </div>
      </div>
      {children}
    </CardContent>
  </Card>
);

const CandidatesStats: React.FC<CandidatesStatsProps> = ({
  candidates,
  className,
  dict,
}) => {
  const {
    stats,
    getGenderRatio,
    getTopCities,
    getActiveUsersPercent,
    getAgeGroupDistribution,
    getReligiousDistribution,
    getActivityTrend,
    getProfileCompletionStats,
  } = useStatistics(candidates);

  const genderRatio = getGenderRatio();
  const activeUsers = getActiveUsersPercent();
  const completionStats = getProfileCompletionStats();
  const ageDistribution = getAgeGroupDistribution();
  const religiousDistribution = getReligiousDistribution();
  const activityTrend = getActivityTrend();
  const topCities = getTopCities(5);

  return (
    <div className={cn('space-y-8', className)}>
      <div className="relative min-h-[200px] bg-gradient-to-br from-purple-50 via-cyan-50/30 to-emerald-50/20 overflow-hidden rounded-3xl shadow-2xl p-8">
        <div className="absolute inset-0">
          <div className="absolute top-10 right-10 w-64 h-64 bg-gradient-to-br from-purple-200/30 to-pink-200/30 rounded-full blur-3xl animate-float"></div>
          <div
            className="absolute bottom-10 left-10 w-48 h-48 bg-gradient-to-br from-cyan-200/30 to-blue-200/30 rounded-full blur-2xl animate-float"
            style={{ animationDelay: '2s' }}
          ></div>
        </div>

        <div className="relative z-10 text-center">
          <div className="inline-flex items-center gap-3 mb-6">
            <div className="p-4 rounded-full bg-gradient-to-r from-purple-500 to-pink-500 text-white shadow-lg">
              <Activity className="w-10 h-10" />
            </div>
          </div>
          <h1 className="text-4xl md:text-5xl font-bold bg-gradient-to-r from-purple-600 via-pink-600 to-blue-600 bg-clip-text text-transparent mb-4">
            {dict.hero.title}
          </h1>
          <p className="text-xl text-gray-700 max-w-2xl mx-auto leading-relaxed">
            {dict.hero.subtitle}
          </p>
        </div>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
        <StatCard
          title={dict.mainStats.total.title}
          value={stats.gender.total}
          icon={<Users className="w-8 h-8" />}
          description={dict.mainStats.total.description}
          gradient="from-blue-500 to-cyan-500"
          iconColor="text-white"
          trend={{ value: 12, isPositive: true }}
          dict={dict.mainStats.trend}
        />
        <StatCard
          title={dict.mainStats.ratio.title}
          value={genderRatio.formattedRatio}
          icon={<UserCheck className="w-8 h-8" />}
          description={dict.mainStats.ratio.description}
          gradient="from-purple-500 to-pink-500"
          iconColor="text-white"
          dict={dict.mainStats.trend}
        />
        <StatCard
          title={dict.mainStats.activity.title}
          value={`${activeUsers}%`}
          icon={<Clock className="w-8 h-8" />}
          gradient="from-green-500 to-emerald-500"
          iconColor="text-white"
          trend={{ value: 8, isPositive: true }}
          dict={dict.mainStats.trend}
        />
        <StatCard
          title={dict.mainStats.completion.title}
          value={`${completionStats.percentage}%`}
          icon={<CheckCircle className="w-8 h-8" />}
          description={dict.mainStats.completion.description
            .replace('{{completed}}', completionStats.completed.toString())
            .replace('{{total}}', stats.gender.total.toString())}
          gradient="from-orange-500 to-amber-500"
          iconColor="text-white"
          trend={{ value: 5, isPositive: true }}
          dict={dict.mainStats.trend}
        />
      </div>

      <Tabs defaultValue="demographics" className="w-full">
        <TabsList className="bg-purple-50/50 rounded-2xl p-1.5 h-auto shadow-lg border border-white/50 grid w-full grid-cols-3">
          <TabsTrigger
            value="demographics"
            className="flex items-center gap-2 rounded-xl transition-all duration-300 py-3 hover:scale-105 data-[state=active]:bg-white data-[state=active]:shadow-lg font-semibold"
          >
            <Users className="w-5 h-5" />
            {dict.tabs.demographics}
          </TabsTrigger>
          <TabsTrigger
            value="activity"
            className="flex items-center gap-2 rounded-xl transition-all duration-300 py-3 hover:scale-105 data-[state=active]:bg-white data-[state=active]:shadow-lg font-semibold"
          >
            <Activity className="w-5 h-5" />
            {dict.tabs.activity}
          </TabsTrigger>
          <TabsTrigger
            value="completion"
            className="flex items-center gap-2 rounded-xl transition-all duration-300 py-3 hover:scale-105 data-[state=active]:bg-white data-[state=active]:shadow-lg font-semibold"
          >
            <Target className="w-5 h-5" />
            {dict.tabs.completion}
          </TabsTrigger>
        </TabsList>

        <TabsContent value="demographics" className="mt-8">
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
            <EnhancedChartCard
              title={dict.charts.ageDistribution.title}
              description={dict.charts.ageDistribution.description}
              gradient="from-blue-500 to-cyan-500"
              icon={<Users className="w-6 h-6" />}
            >
              <ResponsiveContainer width="100%" height={300}>
                <BarChart data={ageDistribution}>
                  <CartesianGrid strokeDasharray="3 3" stroke="#f0f0f0" />
                  <XAxis
                    dataKey="range"
                    tick={{ fontSize: 12 }}
                    stroke="#666"
                  />
                  <YAxis tick={{ fontSize: 12 }} stroke="#666" />
                  <Tooltip
                    contentStyle={{
                      backgroundColor: 'white',
                      border: 'none',
                      borderRadius: '12px',
                      boxShadow: '0 10px 40px rgba(0,0,0,0.1)',
                    }}
                  />
                  <Bar
                    dataKey="count"
                    fill="url(#blueGradient)"
                    radius={[4, 4, 0, 0]}
                  />
                  <defs>
                    <linearGradient
                      id="blueGradient"
                      x1="0"
                      y1="0"
                      x2="0"
                      y2="1"
                    >
                      <stop offset="5%" stopColor="#3B82F6" stopOpacity={0.8} />
                      <stop
                        offset="95%"
                        stopColor="#06B6D4"
                        stopOpacity={0.6}
                      />
                    </linearGradient>
                  </defs>
                </BarChart>
              </ResponsiveContainer>
            </EnhancedChartCard>

            <EnhancedChartCard
              title={dict.charts.religiousDistribution.title}
              description={dict.charts.religiousDistribution.description}
              gradient="from-purple-500 to-pink-500"
              icon={<Heart className="w-6 h-6" />}
            >
              <ResponsiveContainer width="100%" height={300}>
                <PieChart>
                  <Pie
                    data={religiousDistribution}
                    dataKey="count"
                    nameKey="level"
                    cx="50%"
                    cy="50%"
                    outerRadius={100}
                    innerRadius={40}
                    paddingAngle={2}
                    label={({ name, percent }) =>
                      `${name} ${(percent * 100).toFixed(0)}%`
                    }
                  >
                    {religiousDistribution.map((_, index) => (
                      <Cell
                        key={`cell-${index}`}
                        fill={CHART_COLORS[index % CHART_COLORS.length]}
                      />
                    ))}
                  </Pie>
                  <Tooltip
                    contentStyle={{
                      backgroundColor: 'white',
                      border: 'none',
                      borderRadius: '12px',
                      boxShadow: '0 10px 40px rgba(0,0,0,0.1)',
                    }}
                  />
                </PieChart>
              </ResponsiveContainer>
            </EnhancedChartCard>

            <EnhancedChartCard
              title={dict.charts.topCities.title}
              description={dict.charts.topCities.description}
              gradient="from-green-500 to-emerald-500"
              icon={<MapPin className="w-6 h-6" />}
            >
              <div className="space-y-4">
                {topCities.map((city, index) => (
                  <div
                    key={city.city}
                    className="flex items-center justify-between p-4 bg-gradient-to-r from-green-50 to-emerald-50 rounded-xl border border-green-100 hover:shadow-md transition-all duration-300"
                  >
                    <div className="flex items-center gap-3">
                      <div
                        className={cn(
                          'w-8 h-8 rounded-full flex items-center justify-center text-white font-bold text-sm shadow-lg',
                          index === 0
                            ? 'bg-gradient-to-r from-yellow-400 to-orange-500'
                            : index === 1
                              ? 'bg-gradient-to-r from-gray-400 to-gray-500'
                              : index === 2
                                ? 'bg-gradient-to-r from-orange-400 to-red-500'
                                : 'bg-gradient-to-r from-green-400 to-emerald-500'
                        )}
                      >
                        {index + 1}
                      </div>
                      <div className="flex items-center gap-2">
                        <MapPin className="w-4 h-4 text-green-600" />
                        <span className="font-medium text-gray-800">
                          {city.city}
                        </span>
                      </div>
                    </div>
                    <Badge className="bg-gradient-to-r from-green-500 to-emerald-500 text-white border-0 shadow-sm px-3 py-1 font-bold">
                      {city.count}
                    </Badge>
                  </div>
                ))}
              </div>
            </EnhancedChartCard>
          </div>
        </TabsContent>

        <TabsContent value="activity" className="mt-8">
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
            <EnhancedChartCard
              title={dict.charts.userActivity.title}
              description={dict.charts.userActivity.description}
              gradient="from-orange-500 to-amber-500"
              icon={<Activity className="w-6 h-6" />}
            >
              <div className="space-y-6">
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div className="p-4 bg-gradient-to-r from-orange-50 to-amber-50 rounded-xl border border-orange-100">
                    <div className="flex items-center justify-between mb-2">
                      <span className="text-sm font-medium text-orange-800">
                        {dict.charts.userActivity.weeklyActive}
                      </span>
                      <TrendingUp className="w-4 h-4 text-orange-600" />
                    </div>
                    <span className="text-2xl font-bold text-orange-900">
                      {activityTrend.weekly}
                    </span>
                  </div>
                  <div className="p-4 bg-gradient-to-r from-amber-50 to-yellow-50 rounded-xl border border-amber-100">
                    <div className="flex items-center justify-between mb-2">
                      <span className="text-sm font-medium text-amber-800">
                        {dict.charts.userActivity.monthlyActive}
                      </span>
                      <Activity className="w-4 h-4 text-amber-600" />
                    </div>
                    <span className="text-2xl font-bold text-amber-900">
                      {activityTrend.monthly}
                    </span>
                  </div>
                </div>
                <div className="p-4 bg-gradient-to-r from-yellow-50 to-orange-50 rounded-xl border border-yellow-100">
                  <div className="flex items-center justify-between mb-2">
                    <span className="text-sm font-medium text-yellow-800">
                      {dict.charts.userActivity.avgLogin}
                    </span>
                    <Clock className="w-4 h-4 text-yellow-600" />
                  </div>
                  <span className="text-2xl font-bold text-yellow-900">
                    {activityTrend.average} {dict.charts.userActivity.days}
                  </span>
                </div>
              </div>
            </EnhancedChartCard>

            <EnhancedChartCard
              title={dict.charts.activityTrend.title}
              description={dict.charts.activityTrend.description}
              gradient="from-indigo-500 to-purple-500"
              icon={<Star className="w-6 h-6" />}
            >
              <div className="flex items-center justify-center h-64 text-gray-500">
                <div className="text-center">
                  <Sparkles className="w-12 h-12 mx-auto mb-4 text-indigo-400" />
                  <p>{dict.charts.activityTrend.comingSoon}</p>
                  <p className="text-sm">
                    {dict.charts.activityTrend.subtitle}
                  </p>
                </div>
              </div>
            </EnhancedChartCard>
          </div>
        </TabsContent>

        <TabsContent value="completion" className="mt-8">
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
            <EnhancedChartCard
              title={dict.charts.profileCompletion.title}
              description={dict.charts.profileCompletion.description}
              gradient="from-red-500 to-pink-500"
              icon={<Target className="w-6 h-6" />}
            >
              <div className="space-y-6">
                <div className="space-y-4">
                  <div className="flex items-center justify-between p-4 bg-gradient-to-r from-red-50 to-pink-50 rounded-xl border border-red-100 hover:shadow-md transition-all duration-300">
                    <div className="flex items-center gap-3">
                      <div className="p-2 rounded-full bg-gradient-to-r from-red-500 to-pink-500 text-white shadow-lg">
                        <ImageIcon className="w-4 h-4" />
                      </div>
                      <span className="font-medium text-gray-800">
                        {dict.charts.profileCompletion.hasPhotos}
                      </span>
                    </div>
                    <Badge className="bg-gradient-to-r from-red-500 to-pink-500 text-white border-0 shadow-sm px-3 py-1 font-bold">
                      {stats.completion.percentages.hasPhotos}%
                    </Badge>
                  </div>
                  <div className="flex items-center justify-between p-4 bg-gradient-to-r from-pink-50 to-rose-50 rounded-xl border border-pink-100 hover:shadow-md transition-all duration-300">
                    <div className="flex items-center gap-3">
                      <div className="p-2 rounded-full bg-gradient-to-r from-pink-500 to-rose-500 text-white shadow-lg">
                        <CheckCircle className="w-4 h-4" />
                      </div>
                      <span className="font-medium text-gray-800">
                        {dict.charts.profileCompletion.isVerified}
                      </span>
                    </div>
                    <Badge className="bg-gradient-to-r from-pink-500 to-rose-500 text-white border-0 shadow-sm px-3 py-1 font-bold">
                      {stats.completion.percentages.isVerified}%
                    </Badge>
                  </div>
                  <div className="flex items-center justify-between p-4 bg-gradient-to-r from-rose-50 to-red-50 rounded-xl border border-rose-100 hover:shadow-md transition-all duration-300">
                    <div className="flex items-center gap-3">
                      <div className="p-2 rounded-full bg-gradient-to-r from-rose-500 to-red-500 text-white shadow-lg">
                        <Users className="w-4 h-4" />
                      </div>
                      <span className="font-medium text-gray-800">
                        {dict.charts.profileCompletion.hasReferences}
                      </span>
                    </div>
                    <Badge className="bg-gradient-to-r from-rose-500 to-red-500 text-white border-0 shadow-sm px-3 py-1 font-bold">
                      {stats.completion.percentages.hasReferences}%
                    </Badge>
                  </div>
                </div>
              </div>
            </EnhancedChartCard>

            <EnhancedChartCard
              title={dict.charts.performance.title}
              description={dict.charts.performance.description}
              gradient="from-emerald-500 to-green-500"
              icon={<Award className="w-6 h-6" />}
            >
              <div className="space-y-6">
                <div className="grid grid-cols-2 gap-4">
                  <div className="text-center p-4 bg-gradient-to-r from-emerald-50 to-green-50 rounded-xl border border-emerald-100">
                    <Crown className="w-8 h-8 mx-auto mb-2 text-emerald-600" />
                    <div className="text-2xl font-bold text-emerald-800">
                      A+
                    </div>
                    <div className="text-sm text-emerald-600">
                      {dict.charts.performance.qualityRating}
                    </div>
                  </div>
                  <div className="text-center p-4 bg-gradient-to-r from-green-50 to-emerald-50 rounded-xl border border-green-100">
                    <Zap className="w-8 h-8 mx-auto mb-2 text-green-600" />
                    <div className="text-2xl font-bold text-green-800">95%</div>
                    <div className="text-sm text-green-600">
                      {dict.charts.performance.satisfaction}
                    </div>
                  </div>
                </div>
                <div className="p-4 bg-gradient-to-r from-blue-50 to-cyan-50 rounded-xl border border-blue-100">
                  <div className="flex items-center justify-between mb-3">
                    <span className="font-medium text-blue-800">
                      {dict.charts.performance.monthlyProgress}
                    </span>
                    <TrendingUp className="w-4 h-4 text-blue-600" />
                  </div>
                  <div className="space-y-2">
                    <div className="flex justify-between text-sm">
                      <span className="text-blue-700">
                        {dict.charts.performance.newCandidates}
                      </span>
                      <span className="font-bold text-blue-800">+12%</span>
                    </div>
                    <div className="flex justify-between text-sm">
                      <span className="text-blue-700">
                        {dict.charts.performance.activity}
                      </span>
                      <span className="font-bold text-blue-800">+8%</span>
                    </div>
                    <div className="flex justify-between text-sm">
                      <span className="text-blue-700">
                        {dict.charts.performance.profileCompletion}
                      </span>
                      <span className="font-bold text-blue-800">+5%</span>
                    </div>
                  </div>
                </div>
              </div>
            </EnhancedChartCard>
          </div>
        </TabsContent>
      </Tabs>
    </div>
  );
};

export default CandidatesStats;
--- End of Content for CandidatesStats.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\new\CandidatesManager\SplitView.tsx
--------------------------------------------------------------------------------
Content:
// File: src/app/components/matchmaker/new/CandidatesManager/SplitView.tsx

'use client';

import React, { useMemo, useEffect, useState } from 'react';
import {
  ResizableHandle,
  ResizablePanel,
  ResizablePanelGroup,
} from '@/components/ui/resizable';
import CandidatesList from './CandidatesList';
import { Badge } from '@/components/ui/badge';
import {
  Sparkles,
  XCircle,
  Users,
  User,
  Target,
  Crown,
  Zap,
  Search,
} from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Card, CardContent } from '@/components/ui/card';
import type {
  Candidate,
  CandidateAction,
  MobileView,
} from '../types/candidates';
import type { FilterState } from '../types/filters';
import SearchBar from '../Filters/SearchBar';
import { toast } from 'sonner';
import { cn } from '@/lib/utils';
import { Gender } from '@prisma/client';
import type { MatchmakerPageDictionary } from '@/types/dictionaries/matchmaker';
import type { ProfilePageDictionary } from '@/types/dictionary';

interface AiMatch {
  userId: string;
  score: number;
}

interface SplitViewProps {
  isQuickViewEnabled: boolean;
  maleCandidates: Candidate[];
  femaleCandidates: Candidate[];
  allCandidates: Candidate[];
  onCandidateAction: (type: CandidateAction, candidate: Candidate) => void;
  onCandidateClick: (candidate: Candidate) => void;
  viewMode: 'grid' | 'list';
  mobileView: MobileView;
  isLoading?: boolean;
  className?: string;
  locale: string;
  aiTargetCandidate: Candidate | null;
  aiMatches: AiMatch[];
  isAiLoading: boolean;
  onSetAiTarget: (candidate: Candidate, e: React.MouseEvent) => void;
  onClearAiTarget: (e: React.MouseEvent) => void;
  setAiMatches: React.Dispatch<React.SetStateAction<AiMatch[]>>;
  setIsAiLoading: React.Dispatch<React.SetStateAction<boolean>>;
  comparisonSelection: Record<string, Candidate>;
  onToggleComparison: (candidate: Candidate, e: React.MouseEvent) => void;

  separateFiltering: boolean;
  maleFilters?: Partial<FilterState>;
  femaleFilters?: Partial<FilterState>;
  onMaleFiltersChange: (filters: Partial<FilterState>) => void;
  onFemaleFiltersChange: (filters: Partial<FilterState>) => void;
  onCopyFilters: (source: 'male' | 'female', target: 'male' | 'female') => void;
  maleSearchQuery?: string;
  femaleSearchQuery?: string;
  onMaleSearchChange?: (query: string) => void;
  onFemaleSearchChange?: (query: string) => void;

  dict: MatchmakerPageDictionary;
  profileDict: ProfilePageDictionary;
}

// Enhanced Panel Header Component
const PanelHeaderComponent: React.FC<{
  gender: 'male' | 'female';
  count: number;
  aiTargetCandidate: Candidate | null;
  isSearchPanel: boolean;
  isTargetPanel: boolean;
  onClearAiTarget: (e: React.MouseEvent) => void;
  onFindAiMatches: (e: React.MouseEvent) => void;
  isAiLoading: boolean;
  isMobileView?: boolean;
  dict: MatchmakerPageDictionary['candidatesManager']['splitView']['panelHeaders'];
}> = ({
  gender,
  count,
  aiTargetCandidate,
  isSearchPanel,
  isTargetPanel,
  onClearAiTarget,
  onFindAiMatches,
  isAiLoading,
  isMobileView = false,
  dict,
}) => {
  const genderConfig = {
    male: {
      title: dict.male.title,
      subtitle: dict.male.subtitle.replace('{{count}}', count.toString()),
      icon: Target,
      colors: {
        gradient: 'from-blue-500 to-cyan-500',
        bg: 'from-blue-50 to-cyan-50',
        text: 'text-blue-800',
        badge: 'bg-blue-500',
      },
    },
    female: {
      title: dict.female.title,
      subtitle: dict.female.subtitle.replace('{{count}}', count.toString()),
      icon: Crown,
      colors: {
        gradient: 'from-purple-500 to-pink-500',
        bg: 'from-purple-50 to-pink-50',
        text: 'text-purple-800',
        badge: 'bg-purple-500',
      },
    },
  };

  const config = genderConfig[gender];
  const IconComponent = config.icon;

  return (
    <div
      className={cn(
        'flex justify-between items-center p-4 rounded-t-2xl',
        !isMobileView &&
          `bg-gradient-to-r ${config.colors.bg} border-b border-gray-100/50`
      )}
    >
      <div className="flex items-center gap-3">
        <div
          className={cn(
            'p-3 rounded-full shadow-lg text-white transition-transform hover:scale-110',
            `bg-gradient-to-r ${config.colors.gradient}`
          )}
        >
          <IconComponent className="w-6 h-6" />
        </div>
        <div>
          <h2 className={cn('text-xl font-bold', config.colors.text)}>
            {config.title}
          </h2>
          <p className="text-sm text-gray-600">{config.subtitle}</p>
        </div>
        <Badge
          className={cn(
            'text-white border-0 shadow-lg px-3 py-1 font-bold',
            config.colors.badge
          )}
        >
          {count}
        </Badge>
      </div>
      <div className="flex items-center gap-2">
        {isTargetPanel && aiTargetCandidate && (
          <div className="flex items-center gap-2 bg-green-100 p-2 rounded-full shadow-lg animate-pulse">
            <div className="w-2 h-2 bg-green-500 rounded-full animate-ping"></div>
            <span className="text-sm font-medium text-green-800 px-2">
              {dict.targetLabel.replace(
                '{{name}}',
                aiTargetCandidate.firstName
              )}
            </span>
            <Button
              size="icon"
              variant="ghost"
              className="h-6 w-6 text-green-700 hover:bg-green-200 rounded-full"
              onClick={onClearAiTarget}
            >
              <XCircle className="h-4 w-4" />
            </Button>
          </div>
        )}
        {isSearchPanel && (
          <Button
            size="sm"
            onClick={onFindAiMatches}
            disabled={isAiLoading}
            className={cn(
              'shadow-lg font-bold transition-all duration-300 hover:scale-105',
              `bg-gradient-to-r ${config.colors.gradient} hover:opacity-90 text-white`
            )}
          >
            <Sparkles
              className={cn('ml-2 h-4 w-4', isAiLoading && 'animate-spin')}
            />
            {isAiLoading ? dict.searchingButton : dict.findMatchesButton}
            <Zap className="w-3 h-3 mr-1" />
          </Button>
        )}
      </div>
    </div>
  );
};

// Enhanced Loading Component
const LoadingComponent: React.FC<{ gender: 'male' | 'female' }> = ({
  gender,
}) => {
  const config =
    gender === 'male'
      ? {
          gradient: 'from-blue-200 to-cyan-200',
          icon: Target,
          title: 'טוען מועמדים...',
          subtitle: 'אנא המתן בזמן שאנו מביאים את הנתונים',
        }
      : {
          gradient: 'from-purple-200 to-pink-200',
          icon: Crown,
          title: 'טוענת מועמדות...',
          subtitle: 'אנא המתיני בזמן שאנו מביאות את הנתונים',
        };

  const IconComponent = config.icon;

  return (
    <div className="flex flex-col items-center justify-center h-64 p-8">
      <div
        className={cn(
          'p-6 rounded-full mb-4 animate-pulse',
          `bg-gradient-to-r ${config.gradient}`
        )}
      >
        <IconComponent className="w-12 h-12 text-white" />
      </div>
      <div className="text-center">
        <h3 className="text-lg font-bold text-gray-700 mb-2">{config.title}</h3>
        <p className="text-gray-500">{config.subtitle}</p>
      </div>
    </div>
  );
};

// Enhanced Empty State Component
const EmptyStateComponent: React.FC<{
  gender: 'male' | 'female';
  searchQuery?: string;
  onClearSearch?: () => void;
  dict: MatchmakerPageDictionary['candidatesManager']['list']['emptyState'];
}> = ({ gender, searchQuery, onClearSearch, dict }) => {
  const config =
    gender === 'male'
      ? { gradient: 'from-blue-100 to-cyan-100', icon: Target }
      : { gradient: 'from-purple-100 to-pink-100', icon: Crown };

  const IconComponent = config.icon;

  return (
    <div className="flex flex-col items-center justify-center h-64 p-8">
      <div
        className={cn(
          'w-24 h-24 rounded-full flex items-center justify-center mb-6 shadow-lg',
          `bg-gradient-to-br ${config.gradient}`
        )}
      >
        <IconComponent className="w-12 h-12 text-gray-400" />
      </div>
      <h3 className="text-xl font-bold text-gray-800 mb-2">{dict.title}</h3>
      <p className="text-gray-600 text-center mb-4 max-w-sm">
        {searchQuery
          ? `לא נמצאו תוצאות עבור "${searchQuery}"`
          : dict.description}
      </p>
      {searchQuery && onClearSearch && (
        <Button
          variant="outline"
          onClick={onClearSearch}
          className="border-2 border-gray-300 hover:border-gray-400"
        >
          <Search className="w-4 h-4 ml-2" />
          נקה חיפוש
        </Button>
      )}
    </div>
  );
};

const SplitView: React.FC<SplitViewProps> = ({
  dict,
  profileDict,
  isQuickViewEnabled,
  locale,
  ...props
}) => {
  const {
    maleCandidates,
    femaleCandidates,
    allCandidates,
    onCandidateAction,
    onCandidateClick,
    viewMode,
    mobileView,
    isLoading = false,
    className,
    maleSearchQuery = '',
    femaleSearchQuery = '',
    onMaleSearchChange,
    onFemaleSearchChange,
    aiTargetCandidate,
    aiMatches,
    isAiLoading,
    onSetAiTarget,
    onClearAiTarget,
    setAiMatches,
    setIsAiLoading,
    comparisonSelection,
    onToggleComparison,
    separateFiltering,
  } = props;

  const [isMobile, setIsMobile] = useState(false);

  useEffect(() => {
    const checkScreenSize = () => setIsMobile(window.innerWidth < 768);
    checkScreenSize();
    window.addEventListener('resize', checkScreenSize);
    return () => window.removeEventListener('resize', checkScreenSize);
  }, []);

  const handleFindAiMatches = async (e: React.MouseEvent) => {
    e.stopPropagation();
    if (!aiTargetCandidate) return;
    setIsAiLoading(true);
    setAiMatches([]);
    const targetGender = aiTargetCandidate.profile.gender;
    const candidatePool =
      targetGender === Gender.MALE ? femaleCandidates : maleCandidates;
    const candidatePoolIds = candidatePool.map((c) => c.id);
    if (candidatePoolIds.length === 0) {
      toast.error('אין מועמדים במאגר לחיפוש התאמות.', {
        position: 'top-center',
      });
      setIsAiLoading(false);
      return;
    }
    try {
      const response = await fetch('/api/ai/find-matches', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          targetUserId: aiTargetCandidate.id,
          candidatePoolIds,
        }),
      });
      const data = await response.json();
      if (!response.ok || !data.success)
        throw new Error(data.error || 'Failed to fetch AI matches');
      setAiMatches(data.matches);
      toast.success(`נמצאו ${data.matches.length} התאמות AI פוטנציאליות.`, {
        position: 'top-center',
        description: 'המועמדים המומלצים מסומנים ומויינו לראש הרשימה.',
      });
    } catch (error) {
      console.error('Error finding AI matches:', error);
      toast.error('שגיאה במציאת התאמות AI.', {
        description:
          error instanceof Error ? error.message : 'נסה שוב מאוחר יותר.',
      });
    } finally {
      setIsAiLoading(false);
    }
  };

  const maleCandidatesWithScores = useMemo(() => {
    if (aiMatches.length === 0) return maleCandidates;
    const scoreMap = new Map(aiMatches.map((m) => [m.userId, m.score]));
    return maleCandidates
      .map((c) => ({ ...c, aiScore: scoreMap.get(c.id) }))
      .sort((a, b) => (b.aiScore ?? -1) - (a.aiScore ?? -1));
  }, [maleCandidates, aiMatches]);

  const femaleCandidatesWithScores = useMemo(() => {
    if (aiMatches.length === 0) return femaleCandidates;
    const scoreMap = new Map(aiMatches.map((m) => [m.userId, m.score]));
    return femaleCandidates
      .map((c) => ({ ...c, aiScore: scoreMap.get(c.id) }))
      .sort((a, b) => (b.aiScore ?? -1) - (a.aiScore ?? -1));
  }, [femaleCandidates, aiMatches]);

  const renderPanelHeader = (
    gender: 'male' | 'female',
    isMobileView: boolean = false
  ) => {
    const panelGenderEnum = gender === 'male' ? Gender.MALE : Gender.FEMALE;
    const isTargetPanel = aiTargetCandidate?.profile.gender === panelGenderEnum;
    const isSearchPanel = !!(
      aiTargetCandidate && aiTargetCandidate.profile.gender !== panelGenderEnum
    );
    const count =
      gender === 'male' ? maleCandidates.length : femaleCandidates.length;

    return (
      <PanelHeaderComponent
        gender={gender}
        count={count}
        aiTargetCandidate={aiTargetCandidate}
        isSearchPanel={isSearchPanel}
        isTargetPanel={isTargetPanel}
        onClearAiTarget={onClearAiTarget}
        onFindAiMatches={handleFindAiMatches}
        isAiLoading={isAiLoading}
        isMobileView={isMobileView}
        dict={dict.candidatesManager.splitView.panelHeaders}
      />
    );
  };

  const renderCandidatesListForMobile = (
    candidates: (Candidate & { aiScore?: number })[],
    gender: 'male' | 'female',
    searchQuery: string,
    onSearchChange?: (query: string) => void
  ) => {
    if (isLoading) {
      return <LoadingComponent gender={gender} />;
    }
    if (candidates.length === 0) {
      return (
        <EmptyStateComponent
          gender={gender}
          searchQuery={searchQuery}
          onClearSearch={() => onSearchChange?.('')}
          dict={dict.candidatesManager.list.emptyState}
        />
      );
    }
    return (
      <CandidatesList
        candidates={candidates}
        allCandidates={allCandidates}
        onCandidateClick={onCandidateClick}
        onCandidateAction={onCandidateAction}
        viewMode={viewMode}
        mobileView={mobileView}
        isLoading={isLoading}
        highlightTerm={searchQuery}
        aiTargetCandidate={aiTargetCandidate}
        onSetAiTarget={onSetAiTarget}
        comparisonSelection={comparisonSelection}
        onToggleComparison={onToggleComparison}
        isQuickViewEnabled={isQuickViewEnabled} // <-- העברה הלאה
        dict={dict}
        profileDict={profileDict}
        locale={locale}
      />
    );
  };

  if (isMobile) {
    if (mobileView === 'split') {
      return (
        <div className="grid grid-cols-2 gap-3 h-full p-3">
          <Card className="flex flex-col h-full shadow-xl border-0 bg-gradient-to-b from-white to-blue-50/30 overflow-hidden rounded-2xl">
            <div className="p-3 text-center bg-gradient-to-r from-blue-500 to-cyan-500 text-white">
              <h2 className="text-sm font-bold flex items-center justify-center gap-1">
                <Target className="w-4 h-4" />
                {dict.candidatesManager.splitView.mobile.splitLabels.male}
                <Badge
                  variant="secondary"
                  className="bg-white/20 text-white border-0 ml-1"
                >
                  {maleCandidates.length}
                </Badge>
              </h2>
            </div>
            <div className="flex-grow min-h-0 overflow-y-auto p-2">
              {renderCandidatesListForMobile(
                maleCandidatesWithScores,
                'male',
                maleSearchQuery,
                onMaleSearchChange
              )}
            </div>
          </Card>
          <Card className="flex flex-col h-full shadow-xl border-0 bg-gradient-to-b from-white to-purple-50/30 overflow-hidden rounded-2xl">
            <div className="p-3 text-center bg-gradient-to-r from-purple-500 to-pink-500 text-white">
              <h2 className="text-sm font-bold flex items-center justify-center gap-1">
                <Crown className="w-4 h-4" />
                {dict.candidatesManager.splitView.mobile.splitLabels.female}
                <Badge
                  variant="secondary"
                  className="bg-white/20 text-white border-0 ml-1"
                >
                  {femaleCandidates.length}
                </Badge>
              </h2>
            </div>
            <div className="flex-grow min-h-0 overflow-y-auto p-2">
              {renderCandidatesListForMobile(
                femaleCandidatesWithScores,
                'female',
                femaleSearchQuery,
                onFemaleSearchChange
              )}
            </div>
          </Card>
        </div>
      );
    }

    return (
      <div className={cn('w-full h-full', className)}>
        <Tabs defaultValue="male" className="w-full h-full flex flex-col">
          <TabsList className="grid w-full grid-cols-2 flex-shrink-0 bg-gradient-to-r from-indigo-50 to-purple-50 p-1 rounded-2xl shadow-lg">
            <TabsTrigger
              value="male"
              className="flex items-center gap-2 rounded-xl data-[state=active]:bg-gradient-to-r data-[state=active]:from-blue-500 data-[state=active]:to-cyan-500 data-[state=active]:text-white data-[state=active]:shadow-lg"
            >
              <Target className="h-4 w-4" />
              {dict.candidatesManager.splitView.mobile.tabs.male}
              <Badge
                variant="secondary"
                className="bg-blue-100 text-blue-800 border-0"
              >
                {maleCandidates.length}
              </Badge>
            </TabsTrigger>
            <TabsTrigger
              value="female"
              className="flex items-center gap-2 rounded-xl data-[state=active]:bg-gradient-to-r data-[state=active]:from-purple-500 data-[state=active]:to-pink-500 data-[state=active]:text-white data-[state=active]:shadow-lg"
            >
              <Crown className="h-4 w-4" />
              {dict.candidatesManager.splitView.mobile.tabs.female}
              <Badge
                variant="secondary"
                className="bg-purple-100 text-purple-800 border-0"
              >
                {femaleCandidates.length}
              </Badge>
            </TabsTrigger>
          </TabsList>
          <TabsContent value="male" className="mt-4 flex-1 min-h-0">
            <Card className="p-4 flex flex-col h-full shadow-xl border-0 bg-gradient-to-b from-white to-blue-50/30 rounded-2xl">
              {renderPanelHeader('male', true)}
              {aiTargetCandidate &&
                aiTargetCandidate.profile.gender === 'FEMALE' && (
                  <div className="mt-2">
                    <Button
                      size="sm"
                      onClick={handleFindAiMatches}
                      disabled={isAiLoading}
                      className="w-full shadow-lg font-bold transition-all duration-300 hover:scale-105 bg-gradient-to-r from-blue-500 to-cyan-500 hover:opacity-90 text-white"
                    >
                      <Sparkles
                        className={cn(
                          'ml-2 h-4 w-4',
                          isAiLoading && 'animate-spin'
                        )}
                      />
                      {isAiLoading
                        ? dict.candidatesManager.splitView.panelHeaders
                            .searchingButton
                        : dict.candidatesManager.splitView.panelHeaders
                            .findMatchesButton}
                      <Zap className="w-3 h-3 mr-1" />
                    </Button>
                  </div>
                )}

              {separateFiltering && onMaleSearchChange && (
                <div className="mb-4 w-full">
                  <SearchBar
                    value={maleSearchQuery}
                    onChange={onMaleSearchChange}
                    placeholder={
                      dict.candidatesManager.searchBar.malePlaceholder
                    }
                    genderTarget="male"
                    separateMode={true}
                    dict={dict.candidatesManager.searchBar}
                  />
                </div>
              )}
              <div className="flex-grow min-h-0 overflow-y-auto">
                {renderCandidatesListForMobile(
                  maleCandidatesWithScores,
                  'male',
                  maleSearchQuery,
                  onMaleSearchChange
                )}
              </div>
            </Card>
          </TabsContent>
          <TabsContent value="female" className="mt-4 flex-1 min-h-0">
            <Card className="p-4 flex flex-col h-full shadow-xl border-0 bg-gradient-to-b from-white to-purple-50/30 rounded-2xl">
              {renderPanelHeader('female', true)}
              {aiTargetCandidate &&
                aiTargetCandidate.profile.gender === 'MALE' && (
                  <div className="mt-2">
                    <Button
                      size="sm"
                      onClick={handleFindAiMatches}
                      disabled={isAiLoading}
                      className="w-full shadow-lg font-bold transition-all duration-300 hover:scale-105 bg-gradient-to-r from-purple-500 to-pink-500 hover:opacity-90 text-white"
                    >
                      <Sparkles
                        className={cn(
                          'ml-2 h-4 w-4',
                          isAiLoading && 'animate-spin'
                        )}
                      />
                      {isAiLoading
                        ? dict.candidatesManager.splitView.panelHeaders
                            .searchingButton
                        : dict.candidatesManager.splitView.panelHeaders
                            .findMatchesButton}
                      <Zap className="w-3 h-3 mr-1" />
                    </Button>
                  </div>
                )}

              {separateFiltering && onFemaleSearchChange && (
                <div className="mb-4 w-full">
                  <SearchBar
                    value={femaleSearchQuery}
                    onChange={onFemaleSearchChange}
                    placeholder={
                      dict.candidatesManager.searchBar.femalePlaceholder
                    }
                    genderTarget="female"
                    separateMode={true}
                    dict={dict.candidatesManager.searchBar}
                  />
                </div>
              )}
              <div className="flex-grow min-h-0 overflow-y-auto">
                {renderCandidatesListForMobile(
                  femaleCandidatesWithScores,
                  'female',
                  femaleSearchQuery,
                  onFemaleSearchChange
                )}
              </div>
            </Card>
          </TabsContent>
        </Tabs>
      </div>
    );
  }

  // --- Desktop View using Resizable Panels ---
  return (
    <div className={cn('h-full', className)}>
      <ResizablePanelGroup
        direction="horizontal"
        className="h-full rounded-2xl bg-white shadow-2xl border-0 overflow-hidden"
      >
        <ResizablePanel defaultSize={50} minSize={30}>
          <div className="flex flex-col h-full bg-gradient-to-b from-white to-blue-50/20">
            {renderPanelHeader('male')}
            {separateFiltering && onMaleSearchChange && (
              <div className="p-4 bg-blue-50/30 w-full">
                <SearchBar
                  value={maleSearchQuery}
                  onChange={onMaleSearchChange}
                  placeholder={dict.candidatesManager.searchBar.malePlaceholder}
                  genderTarget="male"
                  separateMode={true}
                  dict={dict.candidatesManager.searchBar}
                />
              </div>
            )}
            <div className="flex-grow min-h-0 overflow-y-auto p-4">
              <CandidatesList
                candidates={maleCandidatesWithScores}
                allCandidates={allCandidates}
                onCandidateClick={onCandidateClick}
                onCandidateAction={onCandidateAction}
                viewMode={viewMode}
                mobileView={mobileView}
                isLoading={isLoading}
                highlightTerm={maleSearchQuery}
                aiTargetCandidate={aiTargetCandidate}
                onSetAiTarget={onSetAiTarget}
                comparisonSelection={comparisonSelection}
                onToggleComparison={onToggleComparison}
                quickViewSide="right"
                isQuickViewEnabled={isQuickViewEnabled} // <-- העברה הלאה
                dict={dict}
                profileDict={profileDict}
                locale={locale}
              />
            </div>
          </div>
        </ResizablePanel>
        <ResizableHandle
          withHandle
          className="bg-gradient-to-b from-indigo-300 to-purple-300 hover:from-indigo-400 hover:to-purple-400 transition-colors w-2"
        />
        <ResizablePanel defaultSize={50} minSize={30}>
          <div className="flex flex-col h-full bg-gradient-to-b from-white to-purple-50/20">
            {renderPanelHeader('female')}
            {separateFiltering && onFemaleSearchChange && (
              <div className="p-4 bg-purple-50/30 w-full">
                <SearchBar
                  value={femaleSearchQuery}
                  onChange={onFemaleSearchChange}
                  placeholder={
                    dict.candidatesManager.searchBar.femalePlaceholder
                  }
                  genderTarget="female"
                  separateMode={true}
                  dict={dict.candidatesManager.searchBar}
                />
              </div>
            )}
            <div className="flex-grow min-h-0 overflow-y-auto p-4">
              <CandidatesList
                candidates={femaleCandidatesWithScores}
                allCandidates={allCandidates}
                onCandidateClick={onCandidateClick}
                onCandidateAction={onCandidateAction}
                viewMode={viewMode}
                mobileView={mobileView}
                isLoading={isLoading}
                highlightTerm={femaleSearchQuery}
                aiTargetCandidate={aiTargetCandidate}
                onSetAiTarget={onSetAiTarget}
                comparisonSelection={comparisonSelection}
                onToggleComparison={onToggleComparison}
                quickViewSide="left"
                isQuickViewEnabled={isQuickViewEnabled} // <-- העברה הלאה
                dict={dict}
                profileDict={profileDict}
                locale={locale}
              />
            </div>
          </div>
        </ResizablePanel>
      </ResizablePanelGroup>
    </div>
  );
};

export default SplitView;
--- End of Content for SplitView.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\new\CandidatesManager\StatsCard.tsx
--------------------------------------------------------------------------------
Content:
"use client";

import React from "react";

import { Card } from "@/components/ui/card";
import { cn } from "@/lib/utils";

interface StatsCardProps {
  icon: React.ElementType;
  title: string;
  value: string | number;
  trend?: {
    value: number;
    label: string;
    isPositive?: boolean;
  };
  variant?: "default" | "success" | "warning" | "destructive";
  bgGradient?: string;
  iconColor?: string;
  className?: string;
}

const StatsCard: React.FC<StatsCardProps> = ({
  icon: Icon,
  title,
  value,
  trend,
  variant = "default",
  bgGradient,
  iconColor = "text-primary",
  className,
}) => {
  const getVariantStyles = () => {
    switch (variant) {
      case "success":
        return "border-emerald-200";
      case "warning":
        return "border-amber-200";
      case "destructive":
        return "border-red-200";
      default:
        return "border-gray-200";
    }
  };

  return (
    <Card
      className={cn(
        "hover:shadow-md transition-all duration-300 p-4 overflow-hidden",
        bgGradient ? `bg-gradient-to-br ${bgGradient}` : "bg-card",
        getVariantStyles(),
        className
      )}
    >
      <div className="flex items-start justify-between">
        <div className="mr-4 flex-shrink-0">
          <div className={`p-2.5 rounded-full bg-white/60 backdrop-blur-sm shadow-sm`}>
            <Icon className={`w-4 h-4 ${iconColor}`} />
          </div>
        </div>

        <div className="flex-1 text-right">
          <p className="text-xs text-muted-foreground mb-1">{title}</p>
          <h3 className="text-xl font-bold">{value}</h3>

          {trend && (
            <div className="flex items-center justify-end gap-1 mt-1">
              <span
                className={cn(
                  "text-sm font-medium flex items-center gap-0.5",
                  trend.isPositive ? "text-emerald-600" : "text-red-600"
                )}
              >
                {trend.isPositive ? "+" : "-"}{trend.value}%
                <span className={`${trend.isPositive ? "rotate-0" : "rotate-180"} transition-transform`}>
                  ↑
                </span>
              </span>
              <span className="text-[11px] text-muted-foreground">
                {trend.label}
              </span>
            </div>
          )}
        </div>
      </div>

      {/* Animated background pattern for more visual appeal */}
      <div className="absolute right-0 bottom-0 opacity-10 pointer-events-none">
        <svg width="80" height="80" viewBox="0 0 80 80" fill="none" xmlns="http://www.w3.org/2000/svg">
          <circle cx="60" cy="60" r="40" fill="currentColor" />
        </svg>
      </div>
    </Card>
  );
};

export default StatsCard;
--- End of Content for StatsCard.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\new\CandidatesManager\index.tsx
--------------------------------------------------------------------------------
Content:
// File: src/app/components/matchmaker/new/CandidatesManager/index.tsx

'use client';

// --- React & Next.js Imports ---
import React, { useState, useCallback, useEffect, useMemo } from 'react';
import { useSession } from 'next-auth/react';
import { cn, getRelativeCloudinaryPath } from '@/lib/utils';
// --- Third-party Libraries ---
import {
  UserPlus,
  Filter,
  LayoutGrid,
  List,
  ArrowUpDown,
  RotateCw,
  BarChart2,
  Bot,
  Loader2,
  Columns,
  View,
  Users,
  Split,
  Sparkles,
  Crown,
  Target,
  Zap,
  TrendingUp,
  TrendingDown,
  Star,
  Activity,
  Eye, // הוספת אייקון
  EyeOff, // הוספת אייקון
  GitCompare, // <--- הוסף את זה
  X,
} from 'lucide-react';
import { toast } from 'sonner';
import { useParams } from 'next/navigation';

import Image from 'next/image'; // <--- הוסף את השורה הזו
import { motion, AnimatePresence } from 'framer-motion'; // <--- הוסף את השורה הזו

// --- UI Components ---
import { Button } from '@/components/ui/button';
import { Sheet, SheetContent, SheetTrigger } from '@/components/ui/sheet';
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuRadioGroup,
  DropdownMenuRadioItem,
} from '@/components/ui/dropdown-menu';
import { Badge } from '@/components/ui/badge';
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
  AlertDialogTrigger,
} from '@/components/ui/alert-dialog';

// --- Custom Hooks ---
import { useCandidates } from '../hooks/useCandidates';
import { useFilterLogic } from '../hooks/useFilterLogic';

// --- Internal Components ---
import SplitView from './SplitView';
import FilterPanel from '../Filters/FilterPanel';
import ActiveFilters from '../Filters/ActiveFilters';
import SearchBar from '../Filters/SearchBar';
import { LoadingContainer } from '../shared/LoadingStates';
import { AddManualCandidateDialog } from '../dialogs/AddManualCandidateDialog';
import { AiMatchAnalysisDialog } from '../dialogs/AiMatchAnalysisDialog';

// --- Types, Constants & Utils ---
import type {
  Candidate,
  ViewMode,
  CandidatesFilter,
  CandidateAction,
  MobileView,
} from '../types/candidates';
import { SORT_OPTIONS, VIEW_OPTIONS } from '../constants/filterOptions';
import type { MatchmakerPageDictionary } from '@/types/dictionaries/matchmaker';
import type { ProfilePageDictionary } from '@/types/dictionary';

// --- Local Types ---
interface AiMatch {
  userId: string;
  score: number;
}

// ============================================================================
// Minimal Compact Header Component
// ============================================================================
const MinimalHeader: React.FC<{
  stats: {
    total: number;
    male: number;
    female: number;
    verified: number;
    activeToday: number;
    profilesComplete: number;
  };
  onAddCandidate: () => void;
  onRefresh: () => void;
  isRefreshing: boolean;
  onBulkUpdate?: () => void;
  isBulkUpdating?: boolean;
  isAdmin?: boolean;
  isCompact: boolean;
  onToggleCompact: () => void;
  dict: MatchmakerPageDictionary['candidatesManager']['header'];
}> = ({
  stats,
  onAddCandidate,
  onRefresh,
  isRefreshing,
  onBulkUpdate,
  isBulkUpdating,
  isAdmin,
  isCompact,
  onToggleCompact,
  dict,
}) => {
  return (
    <header
      className={cn(
        'sticky top-0 z-40 bg-white/95 backdrop-blur-sm border-b border-gray-200 shadow-sm transition-all duration-300',
        isCompact ? 'h-16' : 'h-32'
      )}
    >
      <div className="container mx-auto px-6 h-full">
        {isCompact ? (
          // --- COMPACT MODE ---
          <div className="flex items-center justify-between h-full">
            <div className="flex items-center gap-4">
              <div className="flex items-center gap-2">
                <div className="p-1.5 rounded-lg bg-gradient-to-r from-indigo-500 to-purple-500 text-white">
                  <Users className="w-4 h-4" />
                </div>
                <h1 className="text-lg font-bold text-gray-800">
                  {dict.title}
                </h1>
              </div>
              <div className="hidden md:flex items-center gap-2">
                <Badge
                  variant="outline"
                  className="bg-blue-50 text-blue-700 border-blue-200"
                >
                  {stats.total} {dict.totalLabel}
                </Badge>
                <Badge
                  variant="outline"
                  className="bg-emerald-50 text-emerald-700 border-emerald-200"
                >
                  {stats.verified} {dict.verifiedLabel}
                </Badge>
                <Badge
                  variant="outline"
                  className="bg-orange-50 text-orange-700 border-orange-200"
                >
                  {stats.profilesComplete}
                  {dict.profilesCompleteLabel}
                </Badge>
              </div>
            </div>
            <div className="flex items-center gap-2">
              <Button
                onClick={onAddCandidate}
                size="sm"
                className="bg-gradient-to-r from-indigo-600 to-purple-600 hover:from-indigo-700 hover:to-purple-700 text-white shadow-md"
              >
                <UserPlus className="w-4 h-4 ml-1" />
                {dict.addButton}
              </Button>
              <Button
                onClick={onRefresh}
                variant="outline"
                size="sm"
                disabled={isRefreshing}
                className="border-gray-300 hover:bg-gray-50"
              >
                <RotateCw
                  className={cn('w-4 h-4', isRefreshing && 'animate-spin')}
                />
              </Button>
              {isAdmin && onBulkUpdate && (
                <Button
                  onClick={onBulkUpdate}
                  variant="secondary"
                  size="sm"
                  disabled={isBulkUpdating}
                  className="bg-amber-500 hover:bg-amber-600 text-white"
                >
                  {isBulkUpdating ? (
                    <Loader2 className="w-4 h-4 animate-spin" />
                  ) : (
                    <Bot className="w-4 h-4" />
                  )}
                </Button>
              )}
              <Button
                onClick={onToggleCompact}
                variant="ghost"
                size="sm"
                className="text-gray-500 hover:text-gray-700"
                title={dict.expandTooltip}
              >
                <TrendingUp className="w-4 h-4" />
              </Button>
            </div>
          </div>
        ) : (
          // --- EXPANDED MODE ---
          <div className="flex flex-col justify-center h-full py-3">
            <div className="flex items-center justify-between mb-3">
              <div className="flex items-center gap-3">
                <div className="p-2 rounded-xl bg-gradient-to-r from-indigo-500 to-purple-500 text-white shadow-lg">
                  <Users className="w-5 h-5" />
                </div>
                <div>
                  <h1 className="text-xl font-bold bg-gradient-to-r from-indigo-600 to-purple-600 bg-clip-text text-transparent">
                    {dict.advancedTitle}
                  </h1>
                  <p className="text-sm text-gray-600">
                    {dict.advancedSubtitle}
                  </p>
                </div>
              </div>
              <div className="flex items-center gap-2">
                <Button
                  onClick={onAddCandidate}
                  size="sm"
                  className="bg-gradient-to-r from-indigo-600 to-purple-600 hover:from-indigo-700 hover:to-purple-700 text-white shadow-lg"
                >
                  <UserPlus className="w-4 h-4 ml-2" />
                  {dict.addCandidateButton}
                  <Sparkles className="w-3 h-3 mr-1" />
                </Button>
                <Button
                  onClick={onRefresh}
                  variant="outline"
                  size="sm"
                  disabled={isRefreshing}
                  className="border-indigo-300 text-indigo-600 hover:bg-indigo-50"
                >
                  <RotateCw
                    className={cn('w-4 h-4', isRefreshing && 'animate-spin')}
                  />
                </Button>
                {isAdmin && onBulkUpdate && (
                  <AlertDialog>
                    <AlertDialogTrigger asChild>
                      <Button
                        variant="secondary"
                        size="sm"
                        disabled={isBulkUpdating}
                        className="bg-gradient-to-r from-amber-500 to-orange-500 hover:from-amber-600 hover:to-orange-600 text-white"
                      >
                        {isBulkUpdating ? (
                          <Loader2 className="w-4 h-4 animate-spin" />
                        ) : (
                          <Bot className="w-4 h-4" />
                        )}
                      </Button>
                    </AlertDialogTrigger>
                    <AlertDialogContent dir="rtl">
                      <AlertDialogHeader>
                        <AlertDialogTitle>
                          {dict.bulkUpdateDialog.title}
                        </AlertDialogTitle>
                        <AlertDialogDescription>
                          {dict.bulkUpdateDialog.description}
                        </AlertDialogDescription>
                      </AlertDialogHeader>
                      <AlertDialogFooter>
                        <AlertDialogCancel>
                          {dict.bulkUpdateDialog.cancel}
                        </AlertDialogCancel>
                        <AlertDialogAction onClick={onBulkUpdate}>
                          {dict.bulkUpdateDialog.confirm}
                        </AlertDialogAction>
                      </AlertDialogFooter>
                    </AlertDialogContent>
                  </AlertDialog>
                )}
                <Button
                  onClick={onToggleCompact}
                  variant="ghost"
                  size="sm"
                  className="text-gray-500 hover:text-gray-700"
                  title={dict.collapseTooltip}
                >
                  <TrendingDown className="w-4 h-4" />
                </Button>
              </div>
            </div>
            <div className="grid grid-cols-6 gap-3">
              <div className="text-center bg-gradient-to-br from-blue-50 to-cyan-50 rounded-lg p-2 shadow-sm border border-blue-100">
                <div className="text-lg font-bold text-blue-700">
                  {stats.total}
                </div>
                <div className="text-xs text-blue-600">{dict.stats.total}</div>
              </div>
              <div className="text-center bg-gradient-to-br from-indigo-50 to-blue-50 rounded-lg p-2 shadow-sm border border-indigo-100">
                <div className="text-lg font-bold text-indigo-700">
                  {stats.male}
                </div>
                <div className="text-xs text-indigo-600">{dict.stats.male}</div>
              </div>
              <div className="text-center bg-gradient-to-br from-purple-50 to-pink-50 rounded-lg p-2 shadow-sm border border-purple-100">
                <div className="text-lg font-bold text-purple-700">
                  {stats.female}
                </div>
                <div className="text-xs text-purple-600">
                  {dict.stats.female}
                </div>
              </div>
              <div className="text-center bg-gradient-to-br from-emerald-50 to-green-50 rounded-lg p-2 shadow-sm border border-emerald-100">
                <div className="text-lg font-bold text-emerald-700">
                  {stats.verified}
                </div>
                <div className="text-xs text-emerald-600">
                  {dict.stats.verified}
                </div>
              </div>
              <div className="text-center bg-gradient-to-br from-orange-50 to-amber-50 rounded-lg p-2 shadow-sm border border-orange-100">
                <div className="text-lg font-bold text-orange-700">
                  {stats.activeToday}
                </div>
                <div className="text-xs text-orange-600">
                  {dict.stats.active}
                </div>
              </div>
              <div className="text-center bg-gradient-to-br from-teal-50 to-cyan-50 rounded-lg p-2 shadow-sm border border-teal-100">
                <div className="text-lg font-bold text-teal-700">
                  {stats.profilesComplete}%
                </div>
                <div className="text-xs text-teal-600">
                  {dict.stats.complete}
                </div>
              </div>
            </div>
          </div>
        )}
      </div>
    </header>
  );
};

// ============================================================================
// Main Candidates Manager Component
// ============================================================================
interface CandidatesManagerProps {
  matchmakerDict: MatchmakerPageDictionary;
  profileDict: ProfilePageDictionary;
}

const CandidatesManager: React.FC<CandidatesManagerProps> = ({
  matchmakerDict,
  profileDict,
}) => {
  // --- State Management ---
  const [viewMode, setViewMode] = useState<ViewMode>('grid');
  const [mobileView, setMobileView] = useState<MobileView>('split');
  const [isMobile, setIsMobile] = useState(false);
  const [showFiltersPanel, setShowFiltersPanel] = useState(false);
  const [showFiltersMobile, setShowFiltersMobile] = useState(false);
  const [showManualAddDialog, setShowManualAddDialog] = useState(false);
  const [isHeaderCompact, setIsHeaderCompact] = useState(true);
  const [isQuickViewEnabled, setIsQuickViewEnabled] = useState(true); // <-- הוספת state חדש
  const params = useParams();
  const locale = Array.isArray(params.lang)
    ? params.lang[0]
    : params.lang || 'en';

  // --- AI State ---
  const [aiTargetCandidate, setAiTargetCandidate] = useState<Candidate | null>(
    null
  );
  const [comparisonSelection, setComparisonSelection] = useState<
    Record<string, Candidate>
  >({});
  const [aiMatches, setAiMatches] = useState<AiMatch[]>([]);
  const [isAiLoading, setIsAiLoading] = useState(false);
  const [isAnalysisDialogOpen, setIsAnalysisDialogOpen] = useState(false);
  const [isBulkUpdating, setIsBulkUpdating] = useState(false);

  // --- Session & Permissions ---
  const { data: session } = useSession();
  const isAdmin = session?.user?.role === 'ADMIN';

  // --- Custom Hooks ---
  const {
    loading,
    candidates,
    maleCandidates,
    femaleCandidates,
    setSorting,
    setFilters: setCandidatesFilters,
    refresh,
  } = useCandidates();
  const {
    filters,
    setFilters,
    savedFilters,
    recentSearches,
    popularFilters,
    activeFilters,
    saveFilter,
    resetFilters,
    clearRecentSearches,
    toggleSeparateFiltering,
    updateMaleFilters,
    updateFemaleFilters,
    copyFilters,
    updateMaleSearchQuery,
    updateFemaleSearchQuery,
    removeFilter,
  } = useFilterLogic({ onFilterChange: setCandidatesFilters });

  // --- Derived State ---
  const activeFilterCount = useMemo(
    () => activeFilters.length,
    [activeFilters]
  );
  const heroStats = useMemo(() => {
    const total = candidates.length;
    const male = candidates.filter((c) => c.profile.gender === 'MALE').length;
    const female = candidates.filter(
      (c) => c.profile.gender === 'FEMALE'
    ).length;
    const verified = candidates.filter((c) => c.isVerified).length;
    const activeToday = candidates.filter((c) => {
      const lastActive = new Date(c.createdAt);
      const today = new Date();
      return (
        (today.getTime() - lastActive.getTime()) / (1000 * 60 * 60 * 24) <= 7
      );
    }).length;
    const profilesComplete =
      total > 0
        ? Math.round(
            (candidates.filter((c) => c.isProfileComplete).length / total) * 100
          )
        : 0;
    return { total, male, female, verified, activeToday, profilesComplete };
  }, [candidates]);

  // --- Effects ---
  useEffect(() => {
    const checkScreen = () => {
      setShowFiltersPanel(window.innerWidth >= 1024);
      setIsMobile(window.innerWidth < 768);
    };
    checkScreen();
    window.addEventListener('resize', checkScreen);
    return () => window.removeEventListener('resize', checkScreen);
  }, []);

  // --- Event Handlers ---
  const handleCandidateAdded = useCallback(() => {
    refresh();
    toast.success('מועמד חדש נוסף בהצלחה!');
  }, [refresh]);

  const handleSearch = useCallback(
    (value: string) => {
      setFilters({ searchQuery: value });
    },
    [setFilters]
  );
  const handleRemoveFilter = useCallback(
    (key: keyof CandidatesFilter, value?: string) => {
      removeFilter(key, value);
    },
    [removeFilter]
  );
  const handleCandidateAction = useCallback(
    async (type: CandidateAction, candidate: Candidate) => {
      console.log(
        `Action '${type}' triggered for candidate: ${candidate.firstName}`
      );
    },
    []
  );

  const handleFilterSave = useCallback(
    async (name: string) => {
      try {
        await saveFilter(name, filters);
        toast.success('הפילטר נשמר בהצלחה');
      } catch {
        toast.error('שגיאה בשמירת הפילטר');
      }
    },
    [filters, saveFilter]
  );

  const handleSetAiTarget = useCallback(
    (candidate: Candidate, e: React.MouseEvent) => {
      e.stopPropagation();
      if (aiTargetCandidate?.id === candidate.id) {
        handleClearAiTarget(e);
        return;
      }
      setAiTargetCandidate(candidate);
      setAiMatches([]);
      setComparisonSelection({});
      toast.info(`מועמד מטרה נבחר: ${candidate.firstName}.`, {
        position: 'bottom-center',
      });
    },
    [aiTargetCandidate]
  );

  const handleClearAiTarget = (e: React.MouseEvent) => {
    e.stopPropagation();
    setAiTargetCandidate(null);
    setAiMatches([]);
    setComparisonSelection({});
    toast.info('בחירת מועמד מטרה בוטלה.', { position: 'bottom-center' });
  };

  const handleToggleComparison = useCallback(
    (candidate: Candidate, e: React.MouseEvent) => {
      e.stopPropagation();
      setComparisonSelection((prev) => {
        const newSelection = { ...prev };
        if (newSelection[candidate.id]) delete newSelection[candidate.id];
        else newSelection[candidate.id] = candidate;
        return newSelection;
      });
    },
    []
  );

  const handleUpdateAllProfiles = async () => {
    setIsBulkUpdating(true);
    toast.info('מתחיל תהליך עדכון פרופילי AI...');
    try {
      const response = await fetch('/api/ai/update-all-profiles', {
        method: 'POST',
      });
      const data = await response.json();
      if (!response.ok)
        throw new Error(data.error || 'שגיאה בהפעלת העדכון הכללי.');
      toast.success('העדכון הכללי הופעל בהצלחה!');
    } catch (error) {
      console.error('Failed to initiate bulk AI profile update:', error);
      toast.error('שגיאה בהפעלת העדכון', {
        description:
          error instanceof Error ? error.message : 'אנא נסה שוב מאוחר יותר.',
      });
    } finally {
      setIsBulkUpdating(false);
    }
  };

  // --- Render ---
  return (
    <div className="min-h-screen flex flex-col bg-gradient-to-br from-slate-50 via-indigo-50/10 to-purple-50/5">
      <MinimalHeader
        stats={heroStats}
        onAddCandidate={() => setShowManualAddDialog(true)}
        onRefresh={refresh}
        isRefreshing={loading}
        onBulkUpdate={handleUpdateAllProfiles}
        isBulkUpdating={isBulkUpdating}
        isAdmin={isAdmin}
        isCompact={isHeaderCompact}
        onToggleCompact={() => setIsHeaderCompact(!isHeaderCompact)}
        dict={matchmakerDict.candidatesManager.header}
      />

      {isHeaderCompact && (
        <div className="flex-shrink-0 bg-white/80 backdrop-blur-sm border-b border-gray-100 py-2 px-6 mt-16">
          <div className="container mx-auto px-6">
            <div className="flex justify-between items-center">
              {!filters.separateFiltering && (
                <div className="flex-1 max-w-md">
                  <SearchBar
                    value={filters.searchQuery || ''}
                    onChange={handleSearch}
                    placeholder={
                      matchmakerDict.candidatesManager.searchBar
                        .generalPlaceholder
                    }
                    recentSearches={recentSearches}
                    onClearRecentSearches={clearRecentSearches}
                    dict={matchmakerDict.candidatesManager.searchBar}
                  />
                </div>
              )}

              <div className="flex items-center gap-2">
                <DropdownMenu>
                  <DropdownMenuTrigger asChild>
                    <Button
                      variant="outline"
                      size="sm"
                      className="bg-white/90 shadow-sm border border-gray-200"
                    >
                      <ArrowUpDown className="w-4 h-4 ml-1" />
                      {matchmakerDict.candidatesManager.controls.sort}
                    </Button>
                  </DropdownMenuTrigger>
                  <DropdownMenuContent align="end">
                    <DropdownMenuLabel>
                      {matchmakerDict.candidatesManager.controls.sortBy}
                    </DropdownMenuLabel>
                    <DropdownMenuSeparator />
                    {SORT_OPTIONS.map((option) => (
                      <DropdownMenuItem
                        key={option.value}
                        onClick={() =>
                          setSorting(
                            option.value,
                            option.defaultOrder as 'asc' | 'desc'
                          )
                        }
                      >
                        {
                          matchmakerDict.candidatesManager.sortOptions[
                            option.value as keyof typeof matchmakerDict.candidatesManager.sortOptions
                          ]
                        }
                      </DropdownMenuItem>
                    ))}
                  </DropdownMenuContent>
                </DropdownMenu>
                <Button
                  variant="outline"
                  size="sm"
                  onClick={() => setIsQuickViewEnabled(!isQuickViewEnabled)}
                  className="bg-white/90 shadow-sm border border-gray-200"
                >
                  {isQuickViewEnabled ? (
                    <EyeOff className="w-4 h-4 ml-1" />
                  ) : (
                    <Eye className="w-4 h-4 ml-1" />
                  )}
                  {isQuickViewEnabled
                    ? matchmakerDict.candidatesManager.controls.disableQuickView
                    : matchmakerDict.candidatesManager.controls.enableQuickView}
                </Button>

                <div className="hidden lg:flex">
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={() => setShowFiltersPanel(!showFiltersPanel)}
                    className="bg-white/90 shadow-sm border border-gray-200"
                  >
                    <Filter className="w-4 h-4 ml-1" />
                    {showFiltersPanel
                      ? matchmakerDict.candidatesManager.controls.hideFilters
                      : matchmakerDict.candidatesManager.controls.filters}
                  </Button>
                </div>

                <Sheet
                  open={showFiltersMobile}
                  onOpenChange={setShowFiltersMobile}
                >
                  <SheetTrigger asChild>
                    <Button
                      variant="outline"
                      size="sm"
                      className="lg:hidden relative bg-white/90 shadow-sm border border-gray-200"
                    >
                      <Filter className="w-4 h-4 ml-1" />
                      {matchmakerDict.candidatesManager.controls.filters}
                      {activeFilterCount > 0 && (
                        <Badge className="absolute -top-1 -right-1 h-4 w-4 p-0 flex items-center justify-center bg-indigo-500 border-0 text-xs">
                          {activeFilterCount}
                        </Badge>
                      )}
                    </Button>
                  </SheetTrigger>
                  <SheetContent>
                    <FilterPanel
                      filters={filters}
                      onFiltersChange={setFilters}
                      onSavePreset={handleFilterSave}
                      onReset={resetFilters}
                      savedFilters={savedFilters.map((f) => ({
                        id: f.id,
                        name: f.name,
                        isDefault: f.isDefault,
                      }))}
                      popularFilters={popularFilters}
                      separateFiltering={filters.separateFiltering}
                      onToggleSeparateFiltering={toggleSeparateFiltering}
                      onMaleFiltersChange={updateMaleFilters}
                      onFemaleFiltersChange={updateFemaleFilters}
                      onCopyFilters={copyFilters}
                      dict={matchmakerDict.candidatesManager.filterPanel}
                    />
                  </SheetContent>
                </Sheet>

                <div className="flex gap-1 bg-white/90 p-1 rounded-lg shadow-sm border border-gray-200">
                  {isMobile ? (
                    <DropdownMenu>
                      <DropdownMenuTrigger asChild>
                        <Button
                          variant="outline"
                          size="sm"
                          className="w-24 justify-between px-2 border-0"
                        >
                          {mobileView === 'split' && (
                            <Users className="w-4 h-4" />
                          )}
                          {mobileView === 'single' && (
                            <View className="w-4 h-4" />
                          )}
                          {mobileView === 'double' && (
                            <Columns className="w-4 h-4" />
                          )}
                          <ArrowUpDown className="w-3 h-3 opacity-50 ml-1" />
                        </Button>
                      </DropdownMenuTrigger>
                      <DropdownMenuContent align="end">
                        <DropdownMenuRadioGroup
                          value={mobileView}
                          onValueChange={(value) =>
                            setMobileView(value as MobileView)
                          }
                        >
                          <DropdownMenuRadioItem value="split">
                            <Users className="w-4 h-4 mr-2" />
                            {
                              matchmakerDict.candidatesManager.controls.mobile
                                .split
                            }
                          </DropdownMenuRadioItem>
                          <DropdownMenuRadioItem value="single">
                            <View className="w-4 h-4 mr-2" />
                            {
                              matchmakerDict.candidatesManager.controls.mobile
                                .singleCol
                            }
                          </DropdownMenuRadioItem>
                          <DropdownMenuRadioItem value="double">
                            <Columns className="w-4 h-4 mr-2" />
                            {
                              matchmakerDict.candidatesManager.controls.mobile
                                .doubleCol
                            }
                          </DropdownMenuRadioItem>
                        </DropdownMenuRadioGroup>
                      </DropdownMenuContent>
                    </DropdownMenu>
                  ) : (
                    VIEW_OPTIONS.map((option) => (
                      <Button
                        key={option.value}
                        variant={
                          viewMode === option.value ? 'default' : 'ghost'
                        }
                        size="icon"
                        onClick={() => setViewMode(option.value as ViewMode)}
                        className={cn(
                          'h-8 w-8',
                          viewMode === option.value &&
                            'bg-indigo-500 text-white'
                        )}
                      >
                        {option.value === 'grid' ? (
                          <LayoutGrid className="w-4 h-4" />
                        ) : (
                          <List className="w-4 h-4" />
                        )}
                      </Button>
                    ))
                  )}
                </div>
              </div>
            </div>
            <div className="mt-2">
              <ActiveFilters
                filters={filters}
                onRemoveFilter={handleRemoveFilter}
                onResetAll={resetFilters}
                dict={matchmakerDict.candidatesManager.activeFilters}
              />
            </div>
          </div>
        </div>
      )}

      <main
        className={cn(
          'flex-1 min-h-0 container mx-auto px-6 pb-4 pt-4',
          !isHeaderCompact && 'mt-32'
        )}
      >
        <div className="flex gap-4 h-full">
          {showFiltersPanel && (
            <aside className="hidden lg:block w-72 flex-shrink-0">
              <div className="bg-white/90 backdrop-blur-sm rounded-xl shadow-lg border-0 h-full flex flex-col">
                <FilterPanel
                  filters={filters}
                  onFiltersChange={setFilters}
                  onSavePreset={handleFilterSave}
                  onReset={resetFilters}
                  savedFilters={savedFilters.map((f) => ({
                    id: f.id,
                    name: f.name,
                    isDefault: f.isDefault,
                  }))}
                  popularFilters={popularFilters}
                  separateFiltering={filters.separateFiltering}
                  onToggleSeparateFiltering={toggleSeparateFiltering}
                  onMaleFiltersChange={updateMaleFilters}
                  onFemaleFiltersChange={updateFemaleFilters}
                  onCopyFilters={copyFilters}
                  className="flex-1 overflow-y-auto"
                  dict={matchmakerDict.candidatesManager.filterPanel}
                />
              </div>
            </aside>
          )}

          <div className="flex-1 min-w-0 h-full">
            {loading ? (
              <LoadingContainer>
                <div className="h-full bg-gradient-to-br from-gray-100 to-gray-200 rounded-xl animate-pulse shadow-lg"></div>
              </LoadingContainer>
            ) : (
              <div className="bg-white/90 backdrop-blur-sm rounded-xl shadow-lg border-0 overflow-hidden h-full">
                <SplitView
                  maleCandidates={maleCandidates}
                  femaleCandidates={femaleCandidates}
                  allCandidates={candidates}
                  onCandidateAction={handleCandidateAction}
                  onCandidateClick={() => {}}
                  viewMode={viewMode}
                  mobileView={mobileView}
                  isLoading={loading || isAiLoading}
                  className="flex-1 overflow-hidden"
                  aiTargetCandidate={aiTargetCandidate}
                  aiMatches={aiMatches}
                  isAiLoading={isAiLoading}
                  onSetAiTarget={handleSetAiTarget}
                  onClearAiTarget={handleClearAiTarget}
                  setAiMatches={setAiMatches}
                  setIsAiLoading={setIsAiLoading}
                  comparisonSelection={comparisonSelection}
                  onToggleComparison={handleToggleComparison}
                  separateFiltering={filters.separateFiltering ?? false}
                  maleFilters={filters.maleFilters}
                  femaleFilters={filters.femaleFilters}
                  onMaleFiltersChange={updateMaleFilters}
                  onFemaleFiltersChange={updateFemaleFilters}
                  onCopyFilters={copyFilters}
                  maleSearchQuery={filters.maleSearchQuery}
                  femaleSearchQuery={filters.femaleSearchQuery}
                  onMaleSearchChange={updateMaleSearchQuery}
                  onFemaleSearchChange={updateFemaleSearchQuery}
                  dict={matchmakerDict}
                  profileDict={profileDict}
                  isQuickViewEnabled={isQuickViewEnabled} // <-- העברת prop חדש
                  locale={locale} // <--- הוסף את השורה הזו
                />
              </div>
            )}
          </div>
        </div>
      </main>
      <AnimatePresence>
        {aiTargetCandidate && Object.keys(comparisonSelection).length > 0 && (
          <motion.div
            initial={{ y: 100, opacity: 0 }}
            animate={{ y: 0, opacity: 1 }}
            exit={{ y: 100, opacity: 0 }}
            className="fixed bottom-6 left-1/2 -translate-x-1/2 z-50"
          >
            <div className="bg-white/80 backdrop-blur-sm p-3 rounded-2xl shadow-2xl border flex items-center gap-4">
              <div className="flex items-center -space-x-4">
                {Object.values(comparisonSelection)
                  .slice(0, 3)
                  .map((c) => (
                    <div
                      key={c.id}
                      className="w-10 h-10 rounded-full overflow-hidden border-2 border-white bg-gray-200 flex items-center justify-center text-gray-500 font-bold"
                    >
                      {c.images?.find((img) => img.isMain) ? (
                        <Image
                          src={getRelativeCloudinaryPath(
                            c.images.find((img) => img.isMain)!.url
                          )}
                          alt={c.firstName}
                          width={40}
                          height={40}
                          className="object-cover"
                        />
                      ) : (
                        <span>
                          {c.firstName.charAt(0)}
                          {c.lastName.charAt(0)}
                        </span>
                      )}
                    </div>
                  ))}
                {Object.keys(comparisonSelection).length > 3 && (
                  <div className="w-10 h-10 rounded-full bg-gray-300 flex items-center justify-center text-sm font-bold text-gray-600 border-2 border-white">
                    +{Object.keys(comparisonSelection).length - 3}
                  </div>
                )}
              </div>
              <Button
                onClick={() => setIsAnalysisDialogOpen(true)}
                className="bg-gradient-to-r from-teal-500 to-cyan-500 text-white font-bold shadow-lg"
              >
                <GitCompare className="w-4 h-4 ml-2" />
                {matchmakerDict.candidatesManager.controls.compareButton.replace(
                  '{{count}}',
                  String(Object.keys(comparisonSelection).length)
                )}
              </Button>
              <Button
                variant="ghost"
                size="icon"
                className="h-8 w-8 rounded-full"
                onClick={() => setComparisonSelection({})}
              >
                <X className="w-4 h-4" />
              </Button>
            </div>
          </motion.div>
        )}
      </AnimatePresence>

      {/* --- Dialogs --- */}
      <AddManualCandidateDialog
        isOpen={showManualAddDialog}
        onClose={() => setShowManualAddDialog(false)}
        onCandidateAdded={handleCandidateAdded}
        dict={matchmakerDict.candidatesManager.addManualCandidateDialog} // <--- הוספת השורה הזו
      />
      <AiMatchAnalysisDialog
        isOpen={isAnalysisDialogOpen}
        onClose={() => setIsAnalysisDialogOpen(false)}
        targetCandidate={aiTargetCandidate}
        comparisonCandidates={Object.values(comparisonSelection)}
        dict={matchmakerDict.candidatesManager.aiAnalysis}
        locale={locale as string} // <--- הוסף את השורה הזו
      />
    </div>
  );
};

export default CandidatesManager;
--- End of Content for index.tsx ---

================================================================================
Directory: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\new\Filters
================================================================================

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\new\Filters\ActiveFilters.tsx
--------------------------------------------------------------------------------
Content:
'use client';

import React from 'react';
import { X, RefreshCw, Sparkles, Filter, Star, Zap, Crown } from 'lucide-react';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import type { CandidatesFilter } from '../types/candidates';
import { motion, AnimatePresence } from 'framer-motion';
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from '@/components/ui/tooltip';
import { cn } from '@/lib/utils';
import type { MatchmakerPageDictionary } from '@/types/dictionaries/matchmaker';

interface ActiveFiltersProps {
  filters: CandidatesFilter;
  onRemoveFilter: (key: keyof CandidatesFilter, value?: string) => void;
  onResetAll: () => void;
  onSuggestFilter?: () => void;
  className?: string;
  dict: MatchmakerPageDictionary['candidatesManager']['activeFilters'];
}

interface ActiveFilter {
  key: keyof CandidatesFilter;
  label: string;
  value?: string;
  color?: string;
  icon?: React.ReactNode;
  priority?: 'high' | 'medium' | 'low';
}

const ActiveFilters: React.FC<ActiveFiltersProps> = ({
  filters,
  onRemoveFilter,
  onResetAll,
  onSuggestFilter,
  className,
  dict,
}) => {
  const getActiveFilters = (): ActiveFilter[] => {
    const activeFilters: ActiveFilter[] = [];

    if (!filters.separateFiltering && filters.searchQuery) {
      activeFilters.push({
        key: 'searchQuery',
        label: dict.labels.search.replace('{{query}}', filters.searchQuery),
        color: 'primary',
        icon: <Sparkles className="w-3 h-3" />,
        priority: 'high',
      });
    }

    if (filters.separateFiltering && filters.maleSearchQuery) {
      activeFilters.push({
        key: 'maleSearchQuery',
        label: dict.labels.maleSearch.replace(
          '{{query}}',
          filters.maleSearchQuery
        ),
        color: 'male',
        icon: <Star className="w-3 h-3" />,
        priority: 'high',
      });
    }

    if (filters.separateFiltering && filters.femaleSearchQuery) {
      activeFilters.push({
        key: 'femaleSearchQuery',
        label: dict.labels.femaleSearch.replace(
          '{{query}}',
          filters.femaleSearchQuery
        ),
        color: 'female',
        icon: <Crown className="w-3 h-3" />,
        priority: 'high',
      });
    }

    if (filters.separateFiltering) {
      activeFilters.push({
        key: 'separateFiltering',
        label: dict.labels.separateFiltering,
        color: 'special',
        icon: <Zap className="w-3 h-3" />,
        priority: 'high',
      });
    }

    if (filters.gender) {
      const genderLabel =
        filters.gender === 'MALE'
          ? dict.labels.genders.MALE
          : dict.labels.genders.FEMALE;
      activeFilters.push({
        key: 'gender',
        label: dict.labels.gender.replace('{{gender}}', genderLabel),
        color: filters.gender === 'MALE' ? 'male' : 'female',
        priority: 'high',
      });
    }

    if (filters.ageRange) {
      const isDefaultMin = filters.ageRange.min === 18;
      const isDefaultMax = filters.ageRange.max === 99;

      if (!isDefaultMin || !isDefaultMax) {
        let label = '';
        if (!isDefaultMin && !isDefaultMax) {
          label = dict.labels.age
            .replace('{{min}}', String(filters.ageRange.min))
            .replace('{{max}}', String(filters.ageRange.max));
        } else if (!isDefaultMin) {
          label = dict.labels.ageAbove.replace(
            '{{min}}',
            String(filters.ageRange.min)
          );
        } else if (!isDefaultMax) {
          label = dict.labels.ageBelow.replace(
            '{{max}}',
            String(filters.ageRange.max)
          );
        }
        activeFilters.push({
          key: 'ageRange',
          label,
          color: 'primary',
          priority: 'high',
        });
      }
    }

    if (filters.heightRange) {
      const isDefaultMin = filters.heightRange.min === 140;
      const isDefaultMax = filters.heightRange.max === 210;

      if (!isDefaultMin || !isDefaultMax) {
        let label = '';
        if (!isDefaultMin && !isDefaultMax) {
          label = dict.labels.height
            .replace('{{min}}', String(filters.heightRange.min))
            .replace('{{max}}', String(filters.heightRange.max));
        } else if (!isDefaultMin) {
          label = dict.labels.heightAbove.replace(
            '{{min}}',
            String(filters.heightRange.min)
          );
        } else if (!isDefaultMax) {
          label = dict.labels.heightBelow.replace(
            '{{max}}',
            String(filters.heightRange.max)
          );
        }
        activeFilters.push({
          key: 'heightRange',
          label,
          color: 'secondary',
          priority: 'medium',
        });
      }
    }

    if (filters.religiousLevel) {
      activeFilters.push({
        key: 'religiousLevel',
        label: dict.labels.religiousLevel.replace(
          '{{level}}',
          filters.religiousLevel
        ),
        color: 'warning',
        priority: 'medium',
      });
    }

    if (filters.educationLevel) {
      activeFilters.push({
        key: 'educationLevel',
        label: dict.labels.educationLevel.replace(
          '{{level}}',
          filters.educationLevel
        ),
        color: 'secondary',
        priority: 'medium',
      });
    }

    filters.cities?.forEach((city) => {
      activeFilters.push({
        key: 'cities',
        value: city,
        label: dict.labels.city.replace('{{city}}', city),
        color: 'success',
        priority: 'medium',
      });
    });

    filters.occupations?.forEach((occupation) => {
      activeFilters.push({
        key: 'occupations',
        value: occupation,
        label: dict.labels.occupation.replace('{{occupation}}', occupation),
        color: 'primary',
        priority: 'medium',
      });
    });

    if (filters.availabilityStatus) {
      const status =
        filters.availabilityStatus as keyof typeof dict.labels.availability;
      const statusLabel =
        dict.labels.availability[status] || filters.availabilityStatus;
      activeFilters.push({
        key: 'availabilityStatus',
        label: dict.labels.status.replace('{{status}}', statusLabel),
        color:
          filters.availabilityStatus === 'AVAILABLE' ? 'success' : 'warning',
        priority: 'high',
      });
    }

    if (filters.maritalStatus) {
      activeFilters.push({
        key: 'maritalStatus',
        label: dict.labels.maritalStatus.replace(
          '{{status}}',
          filters.maritalStatus
        ),
        color: 'secondary',
        priority: 'medium',
      });
    }

    if (filters.isVerified) {
      activeFilters.push({
        key: 'isVerified',
        label: dict.labels.verifiedOnly,
        color: 'primary',
        icon: <Star className="w-3 h-3" />,
        priority: 'high',
      });
    }

    if (filters.hasReferences) {
      activeFilters.push({
        key: 'hasReferences',
        label: dict.labels.withRecommendations,
        color: 'success',
        priority: 'medium',
      });
    }

    if (filters.isProfileComplete) {
      activeFilters.push({
        key: 'isProfileComplete',
        label: dict.labels.fullProfile,
        color: 'primary',
        priority: 'medium',
      });
    }

    if (filters.lastActiveDays) {
      let label: string;
      switch (filters.lastActiveDays) {
        case 1:
          label = dict.labels.activeToday;
          break;
        case 3:
          label = dict.labels.activeLast3Days;
          break;
        case 7:
          label = dict.labels.activeLast7Days;
          break;
        case 30:
          label = dict.labels.activeLast30Days;
          break;
        default:
          label = dict.labels.activeInDays.replace(
            '{{days}}',
            String(filters.lastActiveDays)
          );
      }
      activeFilters.push({
        key: 'lastActiveDays',
        label,
        color: 'special',
        priority: 'medium',
      });
    }

    return activeFilters;
  };

  const getFilterColors = (color?: string) => {
    const colorSchemes = {
      primary: {
        badge:
          'bg-gradient-to-r from-blue-500 to-cyan-500 text-white border-0 shadow-lg',
        hover: 'hover:from-blue-600 hover:to-cyan-600',
      },
      secondary: {
        badge:
          'bg-gradient-to-r from-purple-500 to-pink-500 text-white border-0 shadow-lg',
        hover: 'hover:from-purple-600 hover:to-pink-600',
      },
      success: {
        badge:
          'bg-gradient-to-r from-emerald-500 to-green-500 text-white border-0 shadow-lg',
        hover: 'hover:from-emerald-600 hover:to-green-600',
      },
      warning: {
        badge:
          'bg-gradient-to-r from-amber-500 to-orange-500 text-white border-0 shadow-lg',
        hover: 'hover:from-amber-600 hover:to-orange-600',
      },
      male: {
        badge:
          'bg-gradient-to-r from-blue-600 to-indigo-600 text-white border-0 shadow-lg',
        hover: 'hover:from-blue-700 hover:to-indigo-700',
      },
      female: {
        badge:
          'bg-gradient-to-r from-purple-600 to-pink-600 text-white border-0 shadow-lg',
        hover: 'hover:from-purple-700 hover:to-pink-700',
      },
      special: {
        badge:
          'bg-gradient-to-r from-indigo-500 to-purple-500 text-white border-0 shadow-lg',
        hover: 'hover:from-indigo-600 hover:to-purple-600',
      },
    };
    return (
      colorSchemes[color as keyof typeof colorSchemes] || colorSchemes.primary
    );
  };

  const activeFilters = getActiveFilters();
  const sortedFilters = activeFilters.sort((a, b) => {
    const priorityOrder = { high: 3, medium: 2, low: 1 };
    return (
      priorityOrder[b.priority || 'low'] - priorityOrder[a.priority || 'low']
    );
  });

  if (activeFilters.length === 0) {
    return null;
  }

  return (
    <div className={cn('relative', className)}>
      <div className="absolute inset-0">
        <div className="absolute top-0 right-0 w-32 h-32 bg-gradient-to-br from-blue-200/20 to-cyan-200/20 rounded-full blur-2xl"></div>
        <div className="absolute bottom-0 left-0 w-24 h-24 bg-gradient-to-br from-purple-200/20 to-pink-200/20 rounded-full blur-xl"></div>
      </div>
      <div className="relative z-10 bg-gradient-to-r from-white via-purple-50/30 to-pink-50/30 backdrop-blur-sm rounded-2xl p-6 shadow-xl border-0">
        <div className="flex items-center justify-between mb-6">
          <div className="flex items-center gap-3">
            <div className="p-3 rounded-full bg-gradient-to-r from-blue-500 to-cyan-500 text-white shadow-lg">
              <Filter className="w-6 h-6" />
            </div>
            <div>
              <h3 className="text-xl font-bold bg-gradient-to-r from-blue-600 to-cyan-600 bg-clip-text text-transparent">
                {dict.title}
              </h3>
              <p className="text-sm text-gray-600 mt-1">
                {activeFilters.length === 1
                  ? dict.filterActive
                  : dict.filtersActive.replace(
                      '{{count}}',
                      String(activeFilters.length)
                    )}
              </p>
            </div>
          </div>
          <div className="flex items-center gap-3">
            {onSuggestFilter && (
              <TooltipProvider>
                <Tooltip>
                  <TooltipTrigger asChild>
                    <Button
                      variant="ghost"
                      size="sm"
                      onClick={onSuggestFilter}
                      className="bg-gradient-to-r from-emerald-50 to-green-50 hover:from-emerald-100 hover:to-green-100 text-emerald-700 border border-emerald-200 rounded-xl transition-all duration-300 hover:scale-105 shadow-lg"
                    >
                      <Sparkles className="w-4 h-4 mr-2" />
                      {dict.suggestButton}
                      <Zap className="w-3 h-3 ml-1" />
                    </Button>
                  </TooltipTrigger>
                  <TooltipContent>
                    <p>{dict.suggestTooltip}</p>
                  </TooltipContent>
                </Tooltip>
              </TooltipProvider>
            )}
            <TooltipProvider>
              <Tooltip>
                <TooltipTrigger asChild>
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={onResetAll}
                    className="bg-gradient-to-r from-red-50 to-pink-50 hover:from-red-100 hover:to-pink-100 text-red-700 border border-red-200 rounded-xl transition-all duration-300 hover:scale-105 shadow-lg"
                  >
                    <RefreshCw className="w-4 h-4 mr-2" />
                    {dict.clearAllButton}
                  </Button>
                </TooltipTrigger>
                <TooltipContent>
                  <p>{dict.clearAllTooltip}</p>
                </TooltipContent>
              </Tooltip>
            </TooltipProvider>
          </div>
        </div>
        <div className="flex flex-wrap gap-3">
          <AnimatePresence mode="popLayout">
            {sortedFilters.map((filter, index) => {
              const colors = getFilterColors(filter.color);
              return (
                <motion.div
                  key={`${filter.key}-${filter.value || index}`}
                  initial={{ opacity: 0, scale: 0.8, y: 20 }}
                  animate={{ opacity: 1, scale: 1, y: 0 }}
                  exit={{ opacity: 0, scale: 0.8, y: -20 }}
                  transition={{
                    duration: 0.3,
                    delay: index * 0.05,
                    type: 'spring',
                    stiffness: 300,
                    damping: 25,
                  }}
                  whileHover={{ scale: 1.05 }}
                  whileTap={{ scale: 0.95 }}
                >
                  <Badge
                    className={cn(
                      'px-4 py-2.5 whitespace-nowrap font-bold text-sm rounded-xl transition-all duration-300 group cursor-pointer shadow-lg hover:shadow-xl',
                      colors.badge,
                      colors.hover,
                      filter.priority === 'high' && 'ring-2 ring-white/50'
                    )}
                  >
                    <div className="flex items-center gap-2">
                      {filter.icon && (
                        <span className="opacity-90 group-hover:opacity-100 transition-opacity">
                          {filter.icon}
                        </span>
                      )}
                      <span className="max-w-[200px] truncate font-medium">
                        {filter.label}
                      </span>
                      <button
                        className="ml-2 hover:bg-white/20 rounded-full p-1 transition-all duration-200 hover:scale-110 group-hover:bg-white/30"
                        onClick={(e) => {
                          e.stopPropagation();
                          onRemoveFilter(filter.key, filter.value);
                        }}
                        aria-label={`הסר פילטר ${filter.label}`}
                      >
                        <X className="w-3.5 h-3.5" />
                      </button>
                    </div>
                  </Badge>
                </motion.div>
              );
            })}
          </AnimatePresence>
        </div>
        {activeFilters.length > 3 && (
          <div className="mt-6 pt-4 border-t border-gray-200/50">
            <div className="flex items-center justify-between">
              <div className="flex items-center gap-2 text-sm text-gray-600">
                <Sparkles className="w-4 h-4 text-blue-500" />
                <span>
                  {dict.summary.title.replace(
                    '{{count}}',
                    String(activeFilters.length)
                  )}
                </span>
              </div>
              <div className="flex items-center gap-1">
                {activeFilters.filter((f) => f.priority === 'high').length >
                  0 && (
                  <Badge
                    variant="outline"
                    className="bg-red-50 text-red-700 border-red-200 text-xs"
                  >
                    {dict.summary.highPriority.replace(
                      '{{count}}',
                      String(
                        activeFilters.filter((f) => f.priority === 'high')
                          .length
                      )
                    )}
                  </Badge>
                )}
                {activeFilters.filter((f) => f.priority === 'medium').length >
                  0 && (
                  <Badge
                    variant="outline"
                    className="bg-yellow-50 text-yellow-700 border-yellow-200 text-xs"
                  >
                    {dict.summary.mediumPriority.replace(
                      '{{count}}',
                      String(
                        activeFilters.filter((f) => f.priority === 'medium')
                          .length
                      )
                    )}
                  </Badge>
                )}
              </div>
            </div>
          </div>
        )}
        <div className="absolute inset-0 bg-gradient-to-r from-blue-400/5 via-purple-400/5 to-pink-400/5 rounded-2xl pointer-events-none"></div>
      </div>
    </div>
  );
};

export default ActiveFilters;
--- End of Content for ActiveFilters.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\new\Filters\FilterPanel.tsx
--------------------------------------------------------------------------------
Content:
// /Filters/FilterPanel.tsx - גרסה מתורגמת, מלאה ומעודכנת
import React, { useState } from 'react';
import { motion, AnimatePresence } from 'framer-motion';

// Prisma Types
import { UserSource, UserStatus } from '@prisma/client';

// Lucide React Icons
import {
  Activity,
  Award,
  Bookmark,
  Briefcase,
  Calendar,
  Check,
  ChevronDown,
  Copy,
  Crown,
  Filter as FilterIcon,
  GraduationCap,
  Heart,
  MapPin,
  RefreshCw,
  Ruler,
  Save,
  Scroll,
  Shield,
  Sparkles,
  Star,
  Target,
  TrendingUp,
  User,
  Zap,
} from 'lucide-react';

// Utility Functions
import { cn } from '@/lib/utils';

// UI Components
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { Card } from '@/components/ui/card';
import {
  Collapsible,
  CollapsibleContent,
  CollapsibleTrigger,
} from '@/components/ui/collapsible';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { ScrollArea } from '@/components/ui/scroll-area';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select';
import { Slider } from '@/components/ui/slider';
import { Switch } from '@/components/ui/switch';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from '@/components/ui/tooltip';

// Local Components, Types & Constants
import SavedFilters from './SavedFilters';
import {
  AGE_RANGE,
  AVAILABILITY_STATUS_OPTIONS,
  EDUCATION_LEVELS,
  HEIGHT_RANGE,
  MARITAL_STATUS,
  OCCUPATION_CATEGORIES,
  POPULAR_CITIES,
  RELIGIOUS_LEVELS,
} from '../constants/filterOptions';
import type { CandidatesFilter } from '../types/candidates';
import type { FilterState } from '../types/filters';
import type { FilterPanelDict } from '@/types/dictionaries/matchmaker';

// Interfaces
interface PopularFilterOption {
  id: keyof FilterPanelDict['popularFilters'];
  label: string;
  icon: React.ReactNode;
  filter: Partial<CandidatesFilter>;
  gradient: string;
}

interface FilterPanelProps {
  filters: CandidatesFilter;
  onFiltersChange: (filters: CandidatesFilter) => void;
  onSavePreset?: (name: string) => void;
  onReset: () => void;
  onApplySavedFilter?: (id: string) => void;
  savedFilters?: Array<{ id: string; name: string; isDefault?: boolean }>;
  popularFilters?: string[];
  className?: string;
  compactMode?: boolean;
  separateFiltering?: boolean;
  onToggleSeparateFiltering?: () => void;
  onMaleFiltersChange?: (filters: Partial<FilterState>) => void;
  onFemaleFiltersChange?: (filters: Partial<FilterState>) => void;
  onCopyFilters?: (
    source: 'male' | 'female',
    target: 'male' | 'female'
  ) => void;
  dict: FilterPanelDict;
}

interface FilterSectionProps {
  title: string;
  icon: React.ReactNode;
  children: React.ReactNode;
  defaultOpen?: boolean;
  badge?: number;
  gradient?: string;
}

// Helper Components
const FilterSection: React.FC<FilterSectionProps> = ({
  title,
  icon,
  children,
  defaultOpen = false,
  badge,
  gradient = 'from-blue-500 to-cyan-500',
}) => {
  const [isOpen, setIsOpen] = useState(defaultOpen);

  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      className="mb-4"
    >
      <Collapsible
        open={isOpen}
        onOpenChange={setIsOpen}
        className="rounded-2xl overflow-hidden shadow-xl border-0 bg-gradient-to-br from-white via-gray-50/30 to-white"
      >
        <CollapsibleTrigger asChild>
          <motion.div
            className={cn(
              'flex items-center justify-between p-4 cursor-pointer transition-all duration-300',
              'bg-gradient-to-r',
              gradient,
              'text-white hover:shadow-lg'
            )}
            whileHover={{ scale: 1.02 }}
            whileTap={{ scale: 0.98 }}
          >
            <div className="flex items-center gap-3">
              <div className="p-2 rounded-full bg-white/20 backdrop-blur-sm shadow-lg">
                {icon}
              </div>
              <span className="font-bold text-lg">{title}</span>
              {badge !== undefined && (
                <Badge className="bg-white/20 text-white border-white/30 shadow-lg">
                  {badge}
                </Badge>
              )}
            </div>
            <motion.div
              animate={{ rotate: isOpen ? 180 : 0 }}
              transition={{ duration: 0.3 }}
            >
              <ChevronDown size={20} className="text-white/80" />
            </motion.div>
          </motion.div>
        </CollapsibleTrigger>
        <CollapsibleContent className="data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:slide-out-to-top-1 data-[state=open]:slide-in-from-top-1">
          <div className="p-6 bg-gradient-to-br from-white via-gray-50/20 to-white">
            {children}
          </div>
        </CollapsibleContent>
      </Collapsible>
    </motion.div>
  );
};

const GenderFilterPanel = ({
  gender,
  filters,
  onFiltersChange,
  className,
  copyTarget,
  onCopyFilters,
  dict,
}: {
  gender: 'male' | 'female';
  filters: Partial<FilterState>;
  onFiltersChange: (filters: Partial<FilterState>) => void;
  className?: string;
  copyTarget: 'male' | 'female';
  onCopyFilters?: (
    source: 'male' | 'female',
    target: 'male' | 'female'
  ) => void;
  dict: FilterPanelDict['genderFilterPanel'];
}) => {
  const genderConfig = {
    male: {
      gradient: 'from-blue-500 to-cyan-500',
      bg: 'from-blue-50/50 to-cyan-50/30',
      text: 'text-blue-800',
      icon: <Target className="w-5 h-5" />,
      title: dict.maleTitle,
      copyLabel: dict.copyToFemale,
    },
    female: {
      gradient: 'from-purple-500 to-pink-500',
      bg: 'from-purple-50/50 to-pink-50/30',
      text: 'text-purple-800',
      icon: <Crown className="w-5 h-5" />,
      title: dict.femaleTitle,
      copyLabel: dict.copyToMale,
    },
  };
  const config = genderConfig[gender];

  const handleAgeChange = (type: 'min' | 'max', value: string) => {
    const numericValue = parseInt(value);
    if (
      isNaN(numericValue) ||
      numericValue < AGE_RANGE.min ||
      numericValue > AGE_RANGE.max
    )
      return;
    const currentMin = filters.ageRange?.min || AGE_RANGE.default.min;
    const currentMax = filters.ageRange?.max || AGE_RANGE.default.max;
    onFiltersChange({
      ...filters,
      ageRange: {
        min: type === 'min' ? Math.min(numericValue, currentMax) : currentMin,
        max: type === 'max' ? Math.max(numericValue, currentMin) : currentMax,
      },
    });
  };

  const handleHeightChange = (type: 'min' | 'max', value: string) => {
    const numericValue = parseInt(value);
    if (
      isNaN(numericValue) ||
      numericValue < HEIGHT_RANGE.min ||
      numericValue > HEIGHT_RANGE.max
    )
      return;
    const currentMin = filters.heightRange?.min || HEIGHT_RANGE.default.min;
    const currentMax = filters.heightRange?.max || HEIGHT_RANGE.default.max;
    onFiltersChange({
      ...filters,
      heightRange: {
        min: type === 'min' ? Math.min(numericValue, currentMax) : currentMin,
        max: type === 'max' ? Math.max(numericValue, currentMin) : currentMax,
      },
    });
  };

  return (
    <motion.div
      initial={{ opacity: 0, scale: 0.95 }}
      animate={{ opacity: 1, scale: 1 }}
      className={cn(
        'mb-6 rounded-2xl overflow-hidden shadow-xl border-0',
        className
      )}
    >
      <div
        className={cn(
          'flex justify-between items-center px-6 py-4',
          'bg-gradient-to-r',
          config.gradient,
          'text-white'
        )}
      >
        <div className="flex items-center gap-3">
          <div className="p-2 rounded-full bg-white/20 backdrop-blur-sm">
            {config.icon}
          </div>
          <h3 className="text-lg font-bold">{config.title}</h3>
        </div>
        {onCopyFilters && (
          <TooltipProvider>
            <Tooltip>
              <TooltipTrigger asChild>
                <Button
                  variant="ghost"
                  size="sm"
                  onClick={() => onCopyFilters(gender, copyTarget)}
                  className="text-white hover:bg-white/20 rounded-xl transition-all duration-300 hover:scale-105"
                >
                  <Copy className="w-4 h-4 mr-2" />
                  {config.copyLabel}
                </Button>
              </TooltipTrigger>
              <TooltipContent>
                <p>
                  {dict.copyTooltip.replace(
                    '{{gender}}',
                    copyTarget === 'male' ? dict.maleTitle : dict.femaleTitle
                  )}
                </p>
              </TooltipContent>
            </Tooltip>
          </TooltipProvider>
        )}
      </div>
      <div className={cn('p-6 space-y-6 bg-gradient-to-br', config.bg)}>
        <div className="space-y-4">
          <Label className="text-base font-bold text-gray-800 flex items-center gap-2">
            <Calendar className="w-5 h-5 text-blue-600" />
            {dict.ageLabel}
          </Label>
          <div className="bg-white/80 backdrop-blur-sm rounded-xl p-4 shadow-lg border border-gray-100/50">
            <div className="flex justify-between items-center mb-4">
              <div className="text-center bg-gradient-to-r from-blue-50 to-cyan-50 border border-blue-200 rounded-xl shadow-md p-3 min-w-[80px]">
                <p className="text-xs text-blue-600 mb-1 font-medium">
                  {dict.minLabel}
                </p>
                <input
                  type="number"
                  min={AGE_RANGE.min}
                  max={AGE_RANGE.max}
                  value={filters?.ageRange?.min || AGE_RANGE.default.min}
                  onChange={(e) => handleAgeChange('min', e.target.value)}
                  className="w-16 text-center text-lg font-bold text-blue-700 focus:outline-none bg-transparent"
                />
              </div>
              <span className="text-xl font-bold text-gray-400">-</span>
              <div className="text-center bg-gradient-to-r from-blue-50 to-cyan-50 border border-blue-200 rounded-xl shadow-md p-3 min-w-[80px]">
                <p className="text-xs text-blue-600 mb-1 font-medium">
                  {dict.maxLabel}
                </p>
                <input
                  type="number"
                  min={AGE_RANGE.min}
                  max={AGE_RANGE.max}
                  value={filters?.ageRange?.max || AGE_RANGE.default.max}
                  onChange={(e) => handleAgeChange('max', e.target.value)}
                  className="w-16 text-center text-lg font-bold text-blue-700 focus:outline-none bg-transparent"
                />
              </div>
            </div>
            <div className="px-2">
              <Slider
                value={[
                  filters?.ageRange?.min || AGE_RANGE.default.min,
                  filters?.ageRange?.max || AGE_RANGE.default.max,
                ]}
                min={AGE_RANGE.min}
                max={AGE_RANGE.max}
                step={1}
                onValueChange={(value) =>
                  onFiltersChange({
                    ...filters,
                    ageRange: { min: value[0], max: value[1] },
                  })
                }
                className="h-5 [&>span]:bg-gradient-to-r [&>span]:from-blue-500 [&>span]:to-cyan-500"
                dir="rtl"
              />
              <div className="flex justify-between mt-3 px-2 text-xs text-gray-500">
                <span>{AGE_RANGE.min}</span>
                <span>{AGE_RANGE.max}</span>
              </div>
            </div>
          </div>
        </div>
        <div className="space-y-4">
          <Label className="text-base font-bold text-gray-800 flex items-center gap-2">
            <Ruler className="w-5 h-5 text-purple-600" />
            {dict.heightLabel}
          </Label>
          <div className="bg-white/80 backdrop-blur-sm rounded-xl p-4 shadow-lg border border-gray-100/50">
            <div className="flex justify-between items-center mb-4">
              <div className="text-center bg-gradient-to-r from-purple-50 to-pink-50 border border-purple-200 rounded-xl shadow-md p-3 min-w-[80px]">
                <p className="text-xs text-purple-600 mb-1 font-medium">
                  {dict.minLabel}
                </p>
                <input
                  type="number"
                  min={HEIGHT_RANGE.min}
                  max={HEIGHT_RANGE.max}
                  value={filters?.heightRange?.min || HEIGHT_RANGE.default.min}
                  onChange={(e) => handleHeightChange('min', e.target.value)}
                  className="w-16 text-center text-lg font-bold text-purple-700 focus:outline-none bg-transparent"
                />
              </div>
              <span className="text-xl font-bold text-gray-400">-</span>
              <div className="text-center bg-gradient-to-r from-purple-50 to-pink-50 border border-purple-200 rounded-xl shadow-md p-3 min-w-[80px]">
                <p className="text-xs text-purple-600 mb-1 font-medium">
                  {dict.maxLabel}
                </p>
                <input
                  type="number"
                  min={HEIGHT_RANGE.min}
                  max={HEIGHT_RANGE.max}
                  value={filters?.heightRange?.max || HEIGHT_RANGE.default.max}
                  onChange={(e) => handleHeightChange('max', e.target.value)}
                  className="w-16 text-center text-lg font-bold text-purple-700 focus:outline-none bg-transparent"
                />
              </div>
            </div>
            <div className="px-2">
              <Slider
                value={[
                  filters?.heightRange?.min || HEIGHT_RANGE.default.min,
                  filters?.heightRange?.max || HEIGHT_RANGE.default.max,
                ]}
                min={HEIGHT_RANGE.min}
                max={HEIGHT_RANGE.max}
                step={1}
                onValueChange={(value) =>
                  onFiltersChange({
                    ...filters,
                    heightRange: { min: value[0], max: value[1] },
                  })
                }
                className="h-5 [&>span]:bg-gradient-to-r [&>span]:from-purple-500 [&>span]:to-pink-500"
                dir="rtl"
              />
              <div className="flex justify-between mt-3 px-2 text-xs text-gray-500">
                <span>{HEIGHT_RANGE.min}</span>
                <span>{HEIGHT_RANGE.max}</span>
              </div>
            </div>
          </div>
        </div>
        {[
          {
            label: dict.religiousLevelLabel,
            icon: <Scroll className="w-5 h-5 text-amber-600" />,
            filterKey: 'religiousLevel',
            options: RELIGIOUS_LEVELS,
            placeholder: dict.placeholders.selectReligious,
            hoverColor: 'amber',
          },
          {
            label: dict.cityLabel,
            icon: <MapPin className="w-5 h-5 text-emerald-600" />,
            filterKey: 'cities',
            options: POPULAR_CITIES.map((c) => ({ label: c, value: c })),
            placeholder: dict.placeholders.selectCity,
            hoverColor: 'emerald',
          },
        ].map(
          ({ label, icon, filterKey, options, placeholder, hoverColor }) => (
            <div key={filterKey} className="space-y-3">
              <Label className="text-base font-bold text-gray-800 flex items-center gap-2">
                {icon}
                {label}
              </Label>
              <div className="bg-white/80 backdrop-blur-sm rounded-xl p-3 shadow-lg border border-gray-100/50">
                <Select
                  value={
                    filterKey === 'cities'
                      ? filters.cities?.[0] || ''
                      : (filters[filterKey as keyof FilterState] as string) ||
                        ''
                  }
                  onValueChange={(value) => {
                    const newValue = value === 'all' ? undefined : value;
                    if (filterKey === 'cities') {
                      onFiltersChange({
                        ...filters,
                        cities: newValue ? [newValue] : [],
                      });
                    } else {
                      onFiltersChange({ ...filters, [filterKey]: newValue });
                    }
                  }}
                >
                  <SelectTrigger
                    className={`w-full border-0 bg-transparent focus:ring-2 focus:ring-${hoverColor}-200 rounded-xl`}
                  >
                    <SelectValue placeholder={placeholder} />
                  </SelectTrigger>
                  <SelectContent className="bg-white/95 backdrop-blur-sm border-0 shadow-2xl rounded-xl">
                    <SelectItem
                      value="all"
                      className={`hover:bg-${hoverColor}-50`}
                    >
                      {dict.options.all}
                    </SelectItem>
                    {options.map((opt) => (
                      <SelectItem
                        key={opt.value}
                        value={opt.value}
                        className={`hover:bg-${hoverColor}-50`}
                      >
                        {opt.label}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>
            </div>
          )
        )}
        <div className="space-y-4 pt-4 border-t border-gray-200/50">
          {[
            {
              key: 'isVerified',
              label: dict.verifiedOnlyLabel,
              icon: <Shield className="w-4 h-4" />,
              gradient: 'from-emerald-500 to-green-500',
            },
            {
              key: 'hasReferences',
              label: dict.withRecommendationsLabel,
              icon: <Award className="w-4 h-4" />,
              gradient: 'from-amber-500 to-orange-500',
            },
            {
              key: 'isProfileComplete',
              label: dict.fullProfileLabel,
              icon: <Star className="w-4 h-4" />,
              gradient: 'from-purple-500 to-indigo-500',
            },
          ].map((item) => (
            <div
              key={item.key}
              className="flex items-center justify-between p-4 bg-white/60 backdrop-blur-sm rounded-xl shadow-lg border border-gray-100/50 hover:bg-white/80 transition-all duration-300"
            >
              <div className="flex items-center gap-3">
                <div
                  className={cn(
                    'p-2 rounded-lg bg-gradient-to-r text-white',
                    item.gradient
                  )}
                >
                  {item.icon}
                </div>
                <span className="font-medium text-gray-800">{item.label}</span>
              </div>
              <Switch
                checked={
                  (filters?.[item.key as keyof typeof filters] as boolean) ||
                  false
                }
                onCheckedChange={(checked) =>
                  onFiltersChange({
                    ...filters,
                    [item.key]: checked || undefined,
                  })
                }
                className="data-[state=checked]:bg-gradient-to-r data-[state=checked]:from-emerald-500 data-[state=checked]:to-green-500"
              />
            </div>
          ))}
        </div>
      </div>
    </motion.div>
  );
};

// Main Component
const FilterPanel: React.FC<FilterPanelProps> = ({
  filters,
  onFiltersChange,
  onSavePreset,
  onReset,
  onApplySavedFilter,
  savedFilters = [],
  className,
  compactMode = false,
  separateFiltering = false,
  onToggleSeparateFiltering,
  onMaleFiltersChange,
  onFemaleFiltersChange,
  onCopyFilters,
  dict,
}) => {
  const [showSavePreset, setShowSavePreset] = useState(false);
  const [presetName, setPresetName] = useState('');
  const [activeTab, setActiveTab] = useState<string>('basic');
  const [activeGenderFilter, setActiveGenderFilter] = useState<
    'male' | 'female'
  >('male');

  const POPULAR_FILTERS: PopularFilterOption[] = [
    {
      id: 'activeRecently',
      label: dict.popularFilters.activeRecently,
      icon: <Activity className="w-4 h-4" />,
      filter: { lastActiveDays: 7 },
      gradient: 'from-blue-500 to-cyan-500',
    },
    {
      id: 'verifiedOnly',
      label: dict.popularFilters.verifiedOnly,
      icon: <Shield className="w-4 h-4" />,
      filter: { isVerified: true },
      gradient: 'from-emerald-500 to-green-500',
    },
    {
      id: 'withRecommendations',
      label: dict.popularFilters.withRecommendations,
      icon: <Award className="w-4 h-4" />,
      filter: { hasReferences: true },
      gradient: 'from-amber-500 to-orange-500',
    },
    {
      id: 'availableOnly',
      label: dict.popularFilters.availableOnly,
      icon: <Heart className="w-4 h-4" />,
      filter: { availabilityStatus: 'AVAILABLE' },
      gradient: 'from-pink-500 to-rose-500',
    },
    {
      id: 'completeProfiles',
      label: dict.popularFilters.completeProfiles,
      icon: <Star className="w-4 h-4" />,
      filter: { isProfileComplete: true },
      gradient: 'from-purple-500 to-indigo-500',
    },
  ];

  const handleSavePreset = () => {
    if (presetName && onSavePreset) {
      onSavePreset(presetName);
      setPresetName('');
      setShowSavePreset(false);
    }
  };
  const handleAgeRangeChange = (value: number[]) => {
    onFiltersChange({ ...filters, ageRange: { min: value[0], max: value[1] } });
  };
  const handleHeightRangeChange = (value: number[]) => {
    onFiltersChange({
      ...filters,
      heightRange: { min: value[0], max: value[1] },
    });
  };
  const handleApplyPopularFilter = (filter: Partial<CandidatesFilter>) => {
    onFiltersChange({ ...filters, ...filter });
  };

  const countActiveFilters = (category: string): number => {
    let count = 0;
    // ... logic remains the same ...
    return count;
  };

  return (
    <Card
      className={cn(
        'shadow-2xl border-0 bg-gradient-to-br from-white via-purple-50/20 to-pink-50/10 backdrop-blur-sm rounded-3xl overflow-hidden',
        className
      )}
    >
      <div className="absolute inset-0 -z-10">
        <div className="absolute top-0 right-0 w-64 h-64 bg-gradient-to-br from-purple-200/20 to-pink-200/20 rounded-full blur-3xl"></div>
        <div className="absolute bottom-0 left-0 w-48 h-48 bg-gradient-to-br from-blue-200/20 to-cyan-200/20 rounded-full blur-2xl"></div>
      </div>
      <div className="relative">
        {!compactMode && (
          <div className="bg-gradient-to-r from-indigo-600 via-purple-600 to-pink-600 p-6">
            <div className="flex items-center justify-between mb-4">
              <div className="flex items-center gap-4">
                <div className="p-3 rounded-full bg-white/20 backdrop-blur-sm shadow-lg">
                  <FilterIcon className="w-8 h-8 text-white" />
                </div>
                <div>
                  <h3 className="text-2xl font-bold text-white">
                    {dict.header.title}
                  </h3>
                  <p className="text-white/80 mt-1">{dict.header.subtitle}</p>
                </div>
              </div>
              <div className="flex gap-3">
                <TooltipProvider>
                  <Tooltip>
                    <TooltipTrigger asChild>
                      <Button
                        variant="ghost"
                        size="sm"
                        onClick={onReset}
                        className="h-10 w-10 p-0 text-white hover:bg-white/20 rounded-xl transition-all duration-300 hover:scale-110"
                      >
                        <RefreshCw className="w-5 h-5" />
                      </Button>
                    </TooltipTrigger>
                    <TooltipContent>
                      <p>{dict.header.resetTooltip}</p>
                    </TooltipContent>
                  </Tooltip>
                </TooltipProvider>
                <TooltipProvider>
                  <Tooltip>
                    <TooltipTrigger asChild>
                      <Button
                        variant="ghost"
                        size="sm"
                        onClick={() => setShowSavePreset(!showSavePreset)}
                        className="h-10 w-10 p-0 text-white hover:bg-white/20 rounded-xl transition-all duration-300 hover:scale-110"
                      >
                        <Bookmark className="w-5 h-5" />
                      </Button>
                    </TooltipTrigger>
                    <TooltipContent>
                      <p>{dict.header.saveTooltip}</p>
                    </TooltipContent>
                  </Tooltip>
                </TooltipProvider>
              </div>
            </div>
            <div className="grid grid-cols-2 lg:grid-cols-5 gap-3">
              {POPULAR_FILTERS.map((option) => (
                <motion.div
                  key={option.id}
                  whileHover={{ scale: 1.05 }}
                  whileTap={{ scale: 0.95 }}
                >
                  <Button
                    variant="ghost"
                    size="sm"
                    onClick={() => handleApplyPopularFilter(option.filter)}
                    className={cn(
                      'w-full h-auto min-h-24 p-3 bg-white/10 hover:bg-white/20 backdrop-blur-sm border border-white/20 rounded-xl transition-all duration-300 text-white flex flex-col items-center gap-2'
                    )}
                  >
                    <div
                      className={cn(
                        'p-2 rounded-lg bg-gradient-to-r',
                        option.gradient,
                        'text-white shadow-lg'
                      )}
                    >
                      {option.icon}
                    </div>
                    <span className="text-xs font-medium text-center leading-tight whitespace-normal">
                      {option.label}
                    </span>
                  </Button>
                </motion.div>
              ))}
            </div>
          </div>
        )}
        <AnimatePresence>
          {showSavePreset && !compactMode && (
            <motion.div
              initial={{ opacity: 0, height: 0 }}
              animate={{ opacity: 1, height: 'auto' }}
              exit={{ opacity: 0, height: 0 }}
              className="bg-gradient-to-r from-blue-50 via-purple-50 to-pink-50 border-b border-purple-100"
            >
              <div className="p-6">
                <Label className="text-lg font-bold text-gray-800 mb-3 block">
                  {dict.savePreset.title}
                </Label>
                <div className="flex gap-3">
                  <Input
                    value={presetName}
                    onChange={(e) => setPresetName(e.target.value)}
                    placeholder={dict.savePreset.placeholder}
                    className="flex-1 border-0 bg-white/80 backdrop-blur-sm shadow-lg rounded-xl focus:ring-2 focus:ring-purple-300"
                  />
                  <Button
                    size="sm"
                    onClick={handleSavePreset}
                    className="bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-700 hover:to-pink-700 shadow-lg rounded-xl px-6"
                  >
                    <Save className="w-4 h-4 mr-2" />
                    {dict.savePreset.button}
                  </Button>
                </div>
              </div>
            </motion.div>
          )}
        </AnimatePresence>
        <div className="p-6 bg-gradient-to-r from-indigo-50/50 via-purple-50/30 to-pink-50/50 border-b border-purple-100/50">
          <motion.div
            className="bg-white/60 backdrop-blur-sm rounded-2xl p-6 shadow-lg border border-white/50"
            whileHover={{ scale: 1.02 }}
          >
            <div className="flex items-center justify-between">
              <div className="space-y-2">
                <div className="flex items-center gap-3">
                  <div className="p-2 rounded-lg bg-gradient-to-r from-indigo-500 to-purple-500 text-white">
                    <Zap className="w-5 h-5" />
                  </div>
                  <div className="font-bold text-lg bg-gradient-to-r from-indigo-600 to-purple-600 bg-clip-text text-transparent">
                    {dict.separateFiltering.title}
                  </div>
                </div>
                <p className="text-sm text-gray-600 mr-10">
                  {dict.separateFiltering.description}
                </p>
              </div>
              <div className="flex items-center gap-3">
                <Switch
                  checked={separateFiltering}
                  onCheckedChange={onToggleSeparateFiltering}
                  className="data-[state=checked]:bg-gradient-to-r data-[state=checked]:from-indigo-500 data-[state=checked]:to-purple-500"
                />
              </div>
            </div>
          </motion.div>
        </div>
        <div className="p-6">
          {separateFiltering ? (
            <div className="space-y-6">
              <div className="bg-gradient-to-r from-white via-gray-50/30 to-white rounded-2xl p-2 shadow-lg border border-gray-100/50">
                <div className="grid grid-cols-2 gap-1">
                  <Button
                    type="button"
                    variant={
                      activeGenderFilter === 'male' ? 'default' : 'ghost'
                    }
                    onClick={() => setActiveGenderFilter('male')}
                    className={cn(
                      'rounded-xl py-3 transition-all duration-300',
                      activeGenderFilter === 'male'
                        ? 'bg-gradient-to-r from-blue-600 to-cyan-600 text-white shadow-lg'
                        : 'text-gray-600 hover:bg-blue-50'
                    )}
                  >
                    <Target className="w-5 h-5 mr-2" />
                    {dict.genderFilterPanel.maleTitle}
                  </Button>
                  <Button
                    type="button"
                    variant={
                      activeGenderFilter === 'female' ? 'default' : 'ghost'
                    }
                    onClick={() => setActiveGenderFilter('female')}
                    className={cn(
                      'rounded-xl py-3 transition-all duration-300',
                      activeGenderFilter === 'female'
                        ? 'bg-gradient-to-r from-purple-600 to-pink-600 text-white shadow-lg'
                        : 'text-gray-600 hover:bg-purple-50'
                    )}
                  >
                    <Crown className="w-5 h-5 mr-2" />
                    {dict.genderFilterPanel.femaleTitle}
                  </Button>
                </div>
              </div>
              <AnimatePresence mode="wait">
                {activeGenderFilter === 'male' ? (
                  <motion.div
                    key="male"
                    initial={{ opacity: 0, x: -20 }}
                    animate={{ opacity: 1, x: 0 }}
                    exit={{ opacity: 0, x: 20 }}
                    transition={{ duration: 0.3 }}
                  >
                    <GenderFilterPanel
                      gender="male"
                      filters={filters.maleFilters || {}}
                      onFiltersChange={onMaleFiltersChange || (() => {})}
                      copyTarget="female"
                      onCopyFilters={onCopyFilters}
                      dict={dict.genderFilterPanel}
                    />
                  </motion.div>
                ) : (
                  <motion.div
                    key="female"
                    initial={{ opacity: 0, x: 20 }}
                    animate={{ opacity: 1, x: 0 }}
                    exit={{ opacity: 0, x: -20 }}
                    transition={{ duration: 0.3 }}
                  >
                    <GenderFilterPanel
                      gender="female"
                      filters={filters.femaleFilters || {}}
                      onFiltersChange={onFemaleFiltersChange || (() => {})}
                      copyTarget="male"
                      onCopyFilters={onCopyFilters}
                      dict={dict.genderFilterPanel}
                    />
                  </motion.div>
                )}
              </AnimatePresence>
            </div>
          ) : (
            <Tabs
              value={activeTab}
              onValueChange={setActiveTab}
              className="w-full"
            >
              <TabsList className="grid grid-cols-4 w-full bg-gradient-to-r from-indigo-50 to-purple-50 p-2 rounded-2xl shadow-lg border border-white/50 h-auto">
                {[
                  {
                    value: 'basic',
                    label: dict.tabs.basic,
                    icon: User,
                    gradient: 'from-blue-500 to-cyan-500',
                  },
                  {
                    value: 'advanced',
                    label: dict.tabs.advanced,
                    icon: Sparkles,
                    gradient: 'from-purple-500 to-pink-500',
                  },
                  {
                    value: 'status',
                    label: dict.tabs.status,
                    icon: Activity,
                    gradient: 'from-emerald-500 to-green-500',
                  },
                  {
                    value: 'saved',
                    label: dict.tabs.saved,
                    icon: Bookmark,
                    gradient: 'from-amber-500 to-orange-500',
                  },
                ].map((tab) => {
                  const IconComponent = tab.icon;
                  const count = countActiveFilters(tab.value);
                  return (
                    <TabsTrigger
                      key={tab.value}
                      value={tab.value}
                      className={cn(
                        'flex flex-col items-center justify-center gap-2 rounded-xl text-sm font-bold transition-all duration-300 py-3 hover:scale-105 relative overflow-hidden group data-[state=active]:shadow-lg',
                        activeTab === tab.value
                          ? `bg-gradient-to-r ${tab.gradient} text-white`
                          : 'text-gray-600 hover:bg-white/50'
                      )}
                    >
                      <IconComponent className="w-5 h-5" />
                      <span>{tab.label}</span>
                      {count > 0 && (
                        <Badge className="absolute -top-1 -right-1 h-6 w-6 p-0 flex items-center justify-center bg-red-500 text-white text-xs font-bold rounded-full border-2 border-white">
                          {count}
                        </Badge>
                      )}
                    </TabsTrigger>
                  );
                })}
              </TabsList>
              <div className="mt-6 space-y-6">
                <TabsContent value="basic" className="space-y-6 m-0">
                  <FilterSection
                    title={dict.sections.gender}
                    icon={<User className="w-5 h-5" />}
                    defaultOpen={true}
                    gradient="from-blue-500 to-cyan-500"
                  >
                    <div className="grid grid-cols-2 gap-4">
                      {[
                        {
                          value: 'MALE',
                          label: dict.buttons.male,
                          gradient: 'from-blue-500 to-cyan-500',
                        },
                        {
                          value: 'FEMALE',
                          label: dict.buttons.female,
                          gradient: 'from-purple-500 to-pink-500',
                        },
                      ].map((option) => (
                        <Button
                          key={option.value}
                          type="button"
                          variant={
                            filters.gender === option.value
                              ? 'default'
                              : 'outline'
                          }
                          onClick={() =>
                            onFiltersChange({
                              ...filters,
                              gender: option.value as 'MALE' | 'FEMALE',
                            })
                          }
                          className={cn(
                            'h-12 rounded-xl font-bold transition-all duration-300 hover:scale-105',
                            filters.gender === option.value
                              ? `bg-gradient-to-r ${option.gradient} text-white shadow-lg hover:shadow-xl`
                              : 'bg-white/80 backdrop-blur-sm border-2 border-gray-200 hover:border-gray-300'
                          )}
                        >
                          {option.label}
                        </Button>
                      ))}
                    </div>
                    {filters.gender && (
                      <Button
                        type="button"
                        variant="ghost"
                        size="sm"
                        onClick={() =>
                          onFiltersChange({ ...filters, gender: undefined })
                        }
                        className="w-full mt-3 text-gray-500 hover:text-gray-700 hover:bg-gray-50 rounded-xl"
                      >
                        {dict.buttons.removeSelection}
                      </Button>
                    )}
                  </FilterSection>
                  <FilterSection
                    title={dict.sections.age}
                    icon={<Calendar className="w-5 h-5" />}
                    defaultOpen={true}
                    gradient="from-emerald-500 to-green-500"
                    badge={
                      filters.ageRange &&
                      (filters.ageRange.min !== AGE_RANGE.default.min ||
                        filters.ageRange.max !== AGE_RANGE.default.max)
                        ? 1
                        : undefined
                    }
                  >
                    <div className="space-y-6">
                      <div className="flex justify-between items-center">
                        <div className="text-center bg-gradient-to-r from-emerald-50 to-green-50 border border-emerald-200 rounded-xl shadow-md p-3 min-w-[80px]">
                          <p className="text-xs text-emerald-600 mb-1 font-medium">
                            {dict.genderFilterPanel.minLabel}
                          </p>
                          <input
                            type="number"
                            min={AGE_RANGE.min}
                            max={AGE_RANGE.max}
                            value={
                              filters.ageRange?.min || AGE_RANGE.default.min
                            }
                            onChange={(e) => {
                              const newMin = parseInt(e.target.value);
                              if (
                                !isNaN(newMin) &&
                                newMin >= AGE_RANGE.min &&
                                newMin <= AGE_RANGE.max
                              ) {
                                const currentMax =
                                  filters.ageRange?.max ||
                                  AGE_RANGE.default.max;
                                onFiltersChange({
                                  ...filters,
                                  ageRange: {
                                    min: Math.min(newMin, currentMax),
                                    max: currentMax,
                                  },
                                });
                              }
                            }}
                            className="w-16 text-center text-lg font-bold text-emerald-700 focus:outline-none bg-transparent"
                          />
                        </div>
                        <span className="text-xl font-bold text-gray-400">
                          -
                        </span>
                        <div className="text-center bg-gradient-to-r from-emerald-50 to-green-50 border border-emerald-200 rounded-xl shadow-md p-3 min-w-[80px]">
                          <p className="text-xs text-emerald-600 mb-1 font-medium">
                            {dict.genderFilterPanel.maxLabel}
                          </p>
                          <input
                            type="number"
                            min={AGE_RANGE.min}
                            max={AGE_RANGE.max}
                            value={
                              filters.ageRange?.max || AGE_RANGE.default.max
                            }
                            onChange={(e) => {
                              const newMax = parseInt(e.target.value);
                              if (
                                !isNaN(newMax) &&
                                newMax >= AGE_RANGE.min &&
                                newMax <= AGE_RANGE.max
                              ) {
                                const currentMin =
                                  filters.ageRange?.min ||
                                  AGE_RANGE.default.min;
                                onFiltersChange({
                                  ...filters,
                                  ageRange: {
                                    min: currentMin,
                                    max: Math.max(currentMin, newMax),
                                  },
                                });
                              }
                            }}
                            className="w-16 text-center text-lg font-bold text-emerald-700 focus:outline-none bg-transparent"
                          />
                        </div>
                      </div>
                      <div className="px-3">
                        <Slider
                          value={[
                            filters.ageRange?.min || AGE_RANGE.default.min,
                            filters.ageRange?.max || AGE_RANGE.default.max,
                          ]}
                          min={AGE_RANGE.min}
                          max={AGE_RANGE.max}
                          step={1}
                          onValueChange={handleAgeRangeChange}
                          className="h-6 [&>span]:bg-gradient-to-r [&>span]:from-emerald-500 [&>span]:to-green-500"
                          dir="rtl"
                        />
                        <div className="flex justify-between mt-2 px-1 text-xs text-gray-500">
                          <span>{AGE_RANGE.min}</span>
                          <span>{AGE_RANGE.max}</span>
                        </div>
                      </div>
                    </div>
                  </FilterSection>
                </TabsContent>
                <TabsContent value="advanced" className="space-y-6 m-0">
                  <FilterSection
                    title={dict.sections.height}
                    icon={<Ruler className="w-5 h-5" />}
                    gradient="from-indigo-500 to-purple-500"
                    badge={
                      filters.heightRange &&
                      (filters.heightRange.min !== HEIGHT_RANGE.default.min ||
                        filters.heightRange.max !== HEIGHT_RANGE.default.max)
                        ? 1
                        : undefined
                    }
                  >
                    <div className="space-y-6">
                      <div className="flex justify-between items-center">
                        <div className="text-center bg-gradient-to-r from-indigo-50 to-purple-50 border border-indigo-200 rounded-xl shadow-md p-3 min-w-[80px]">
                          <p className="text-xs text-indigo-600 mb-1 font-medium">
                            {dict.genderFilterPanel.minLabel}
                          </p>
                          <input
                            type="number"
                            min={HEIGHT_RANGE.min}
                            max={HEIGHT_RANGE.max}
                            value={
                              filters.heightRange?.min ||
                              HEIGHT_RANGE.default.min
                            }
                            onChange={(e) => {
                              const newMin = parseInt(e.target.value);
                              if (
                                !isNaN(newMin) &&
                                newMin >= HEIGHT_RANGE.min &&
                                newMin <= HEIGHT_RANGE.max
                              ) {
                                const currentMax =
                                  filters.heightRange?.max ||
                                  HEIGHT_RANGE.default.max;
                                onFiltersChange({
                                  ...filters,
                                  heightRange: {
                                    min: Math.min(newMin, currentMax),
                                    max: currentMax,
                                  },
                                });
                              }
                            }}
                            className="w-16 text-center text-lg font-bold text-indigo-700 focus:outline-none bg-transparent"
                          />
                        </div>
                        <span className="text-xl font-bold text-gray-400">
                          -
                        </span>
                        <div className="text-center bg-gradient-to-r from-indigo-50 to-purple-50 border border-indigo-200 rounded-xl shadow-md p-3 min-w-[80px]">
                          <p className="text-xs text-indigo-600 mb-1 font-medium">
                            {dict.genderFilterPanel.maxLabel}
                          </p>
                          <input
                            type="number"
                            min={HEIGHT_RANGE.min}
                            max={HEIGHT_RANGE.max}
                            value={
                              filters.heightRange?.max ||
                              HEIGHT_RANGE.default.max
                            }
                            onChange={(e) => {
                              const newMax = parseInt(e.target.value);
                              if (
                                !isNaN(newMax) &&
                                newMax >= HEIGHT_RANGE.min &&
                                newMax <= HEIGHT_RANGE.max
                              ) {
                                const currentMin =
                                  filters.heightRange?.min ||
                                  HEIGHT_RANGE.default.min;
                                onFiltersChange({
                                  ...filters,
                                  heightRange: {
                                    min: currentMin,
                                    max: Math.max(currentMin, newMax),
                                  },
                                });
                              }
                            }}
                            className="w-16 text-center text-lg font-bold text-indigo-700 focus:outline-none bg-transparent"
                          />
                        </div>
                      </div>
                      <div className="px-3">
                        <Slider
                          value={[
                            filters.heightRange?.min ||
                              HEIGHT_RANGE.default.min,
                            filters.heightRange?.max ||
                              HEIGHT_RANGE.default.max,
                          ]}
                          min={HEIGHT_RANGE.min}
                          max={HEIGHT_RANGE.max}
                          step={1}
                          onValueChange={handleHeightRangeChange}
                          className="h-6 [&>span]:bg-gradient-to-r [&>span]:from-indigo-500 [&>span]:to-purple-500"
                          dir="rtl"
                        />
                    <div className="flex justify-between mt-2 px-1 text-xs text-gray-500">
  <span>{HEIGHT_RANGE.min} ס&quot;מ</span>
  <span>{HEIGHT_RANGE.max} ס&quot;מ</span>
</div>
                      </div>
                    </div>
                  </FilterSection>
                </TabsContent>
                <TabsContent value="saved" className="space-y-6 m-0">
                  {savedFilters.length === 0 ? (
                    <motion.div
                      initial={{ opacity: 0, y: 20 }}
                      animate={{ opacity: 1, y: 0 }}
                      className="text-center py-12 bg-gradient-to-br from-white via-gray-50/30 to-white rounded-2xl shadow-xl border border-gray-100/50"
                    >
                      <div className="w-20 h-20 rounded-full bg-gradient-to-br from-amber-100 to-orange-100 flex items-center justify-center mx-auto mb-6">
                        <Bookmark className="w-10 h-10 text-amber-500" />
                      </div>
                      <h3 className="text-xl font-bold text-gray-800 mb-3">
                        {dict.savedFilters.emptyState.title}
                      </h3>
                      <p className="text-gray-600 mb-6 max-w-sm mx-auto">
                        {dict.savedFilters.emptyState.description}
                      </p>
                      <Button
                        onClick={() => setShowSavePreset(true)}
                        className="bg-gradient-to-r from-amber-500 to-orange-500 hover:from-amber-600 hover:to-orange-600 text-white shadow-lg rounded-xl px-6"
                      >
                        <Save className="w-4 h-4 mr-2" />
                        {dict.savedFilters.emptyState.saveCurrentButton}
                      </Button>
                    </motion.div>
                  ) : (
                    <SavedFilters
                      filters={savedFilters.map((filter) => ({
                        id: filter.id,
                        name: filter.name,
                        filter: {},
                        isDefault: filter.isDefault,
                        createdAt: new Date(),
                      }))}
                      activeFilterId={filters.savedFilterId}
                      onSelect={(filter) => onApplySavedFilter?.(filter.id)}
                      onDelete={() => {}}
                      onEdit={() => {}}
                      onSetDefault={() => {}}
                      dict={dict.savedFilters}
                    />
                  )}
                </TabsContent>
              </div>
            </Tabs>
          )}
        </div>
        <div className="px-6 pb-6">
          <div className="flex justify-between items-center pt-6 border-t border-gray-200/50">
            <Button
              variant="outline"
              size={compactMode ? 'sm' : 'default'}
              onClick={onReset}
              className="bg-gradient-to-r from-red-50 to-pink-50 border-2 border-red-200 text-red-600 hover:from-red-100 hover:to-pink-100 rounded-xl transition-all duration-300 hover:scale-105"
            >
              <RefreshCw className="w-4 h-4 mr-2" />
              {dict.buttons.reset}
            </Button>
            {!compactMode && (
              <Button
                onClick={() => setShowSavePreset(true)}
                className="bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-700 hover:to-pink-700 shadow-lg rounded-xl px-6 transition-all duration-300 hover:scale-105"
              >
                <Save className="w-4 h-4 mr-2" />
                {dict.buttons.save}
                <Sparkles className="w-3 h-3 ml-1" />
              </Button>
            )}
          </div>
        </div>
      </div>
    </Card>
  );
};
export default FilterPanel;
--- End of Content for FilterPanel.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\new\Filters\SavedFilters.tsx
--------------------------------------------------------------------------------
Content:
// SavedFilters.tsx - גרסה מודרנית ומשודרגת
'use client';
import React from 'react';
import {
  Star,
  MoreVertical,
  Edit,
  Trash,
  Crown,
  Bookmark,
  Calendar,
  Sparkles,
  Zap,
  Award,
} from 'lucide-react';
import { Button } from '@/components/ui/button';
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from '@/components/ui/dropdown-menu';
import { Badge } from '@/components/ui/badge';
import { ScrollArea } from '@/components/ui/scroll-area';
import { motion, AnimatePresence } from 'framer-motion';
import type { CandidatesFilter } from '../types/candidates';
import { cn } from '@/lib/utils';
import type { MatchmakerPageDictionary } from '@/types/dictionaries/matchmaker';

interface SavedFilter {
  id: string;
  name: string;
  filter: CandidatesFilter;
  isDefault?: boolean;
  createdAt: Date;
}

interface SavedFiltersProps {
  filters: SavedFilter[];
  activeFilterId?: string;
  onSelect: (filter: SavedFilter) => void;
  onDelete: (filterId: string) => void;
  onEdit: (filter: SavedFilter) => void;
  onSetDefault: (filterId: string) => void;
  className?: string;
  dict: MatchmakerPageDictionary['candidatesManager']['filterPanel']['savedFilters'];
}

// Enhanced filter summary function outside component for performance
const formatFilterSummary = (
  filter: CandidatesFilter,
  dict: SavedFiltersProps['dict']['filterCard']['summary']
): string => {
  const parts: string[] = [];

  if (filter.searchQuery) {
    parts.push(dict.search.replace('{{query}}', filter.searchQuery));
  }
  if (filter.gender) {
    parts.push(dict.gender.replace('{{gender}}', filter.gender));
  }
  if (filter.ageRange) {
    parts.push(
      `${dict.age} ${dict.ageValue.replace('{{min}}', String(filter.ageRange.min)).replace('{{max}}', String(filter.ageRange.max))}`
    );
  }
  if (filter.heightRange) {
    parts.push(
      `${dict.height} ${dict.heightValue.replace('{{min}}', String(filter.heightRange.min)).replace('{{max}}', String(filter.heightRange.max))}`
    );
  }
  if (filter.cities?.length) {
    if (filter.cities.length === 1) {
      parts.push(dict.city.replace('{{city}}', filter.cities[0]));
    } else {
      parts.push(
        dict.cities.replace('{{count}}', String(filter.cities.length))
      );
    }
  }
  if (filter.religiousLevel) {
    parts.push(dict.religiousLevel.replace('{{level}}', filter.religiousLevel));
  }
  if (filter.educationLevel) {
    parts.push(dict.educationLevel.replace('{{level}}', filter.educationLevel));
  }
  if (filter.maritalStatus) {
    parts.push(dict.maritalStatus.replace('{{status}}', filter.maritalStatus));
  }
  if (filter.occupations?.length) {
    if (filter.occupations.length === 1) {
      parts.push(
        dict.occupation.replace('{{occupation}}', filter.occupations[0])
      );
    } else {
      parts.push(
        dict.occupations.replace('{{count}}', String(filter.occupations.length))
      );
    }
  }
  if (filter.availabilityStatus) {
    const statusKey = filter.availabilityStatus as keyof typeof dict.statuses;
    parts.push(dict.status.replace('{{status}}', dict.statuses[statusKey]));
  }
  if (filter.isVerified) {
    parts.push(dict.verifiedOnly);
  }
  if (filter.hasReferences) {
    parts.push(dict.withRecommendations);
  }
  if (filter.isProfileComplete) {
    parts.push(dict.fullProfile);
  }
  if (filter.lastActiveDays) {
    let label;
    switch (filter.lastActiveDays) {
      case 1:
        label = dict.activeToday;
        break;
      case 7:
        label = dict.activeLastWeek;
        break;
      case 30:
        label = dict.activeLastMonth;
        break;
      default:
        label = dict.activeInDays.replace(
          '{{days}}',
          String(filter.lastActiveDays)
        );
    }
    parts.push(label);
  }
  if (filter.separateFiltering) {
    parts.push(dict.separateFiltering);
  }

  if (parts.length === 0) {
    return dict.noCriteria;
  }
  if (parts.length <= 3) {
    return parts.join(' • ');
  } else {
    return `${parts.slice(0, 2).join(' • ')} ${dict.andMore.replace('{{count}}', String(parts.length - 2))}`;
  }
};

const SavedFilters: React.FC<SavedFiltersProps> = ({
  filters,
  activeFilterId,
  onSelect,
  onDelete,
  onEdit,
  onSetDefault,
  className,
  dict,
}) => {
  const formatDate = (date: Date) => {
    return new Intl.DateTimeFormat('he-IL', {
      day: 'numeric',
      month: 'short',
      year: 'numeric',
    }).format(date);
  };

  const getFilterComplexity = (
    filter: CandidatesFilter
  ): { score: number; label: string; color: string } => {
    let score = Object.keys(filter).filter(
      (key) => filter[key as keyof CandidatesFilter] !== undefined
    ).length;

    if (score <= 2)
      return {
        score,
        label: dict.filterCard.complexity.basic,
        color: 'from-green-500 to-emerald-500',
      };
    if (score <= 5)
      return {
        score,
        label: dict.filterCard.complexity.advanced,
        color: 'from-blue-500 to-cyan-500',
      };
    if (score <= 8)
      return {
        score,
        label: dict.filterCard.complexity.complex,
        color: 'from-purple-500 to-pink-500',
      };
    return {
      score,
      label: dict.filterCard.complexity.expert,
      color: 'from-amber-500 to-orange-500',
    };
  };

  return (
    <div className={cn('space-y-4', className)}>
      <div className="flex items-center justify-between p-4 bg-gradient-to-r from-white via-purple-50/30 to-pink-50/30 rounded-2xl shadow-lg border border-gray-100/50">
        <div className="flex items-center gap-3">
          <div className="p-2 rounded-full bg-gradient-to-r from-purple-500 to-pink-500 text-white shadow-lg">
            <Bookmark className="w-5 h-5" />
          </div>
          <div>
            <h3 className="text-lg font-bold bg-gradient-to-r from-purple-600 to-pink-600 bg-clip-text text-transparent">
              {dict.header.title}
            </h3>
            <p className="text-sm text-gray-600">
              {dict.header.subtitle
                .replace('{{count}}', String(filters.length))
                .replace(
                  '{{label}}',
                  filters.length === 1
                    ? dict.header.singleFilter
                    : dict.header.multipleFilters
                )}
            </p>
          </div>
        </div>
        <Badge className="bg-gradient-to-r from-purple-500 to-pink-500 text-white border-0 shadow-lg px-3 py-1 font-bold">
          {filters.length}
        </Badge>
      </div>

      <ScrollArea className="h-[400px] rounded-2xl">
        <div className="space-y-3 p-1">
          <AnimatePresence>
            {filters.map((filter, index) => {
              const complexity = getFilterComplexity(filter.filter);
              const isActive = activeFilterId === filter.id;
              return (
                <motion.div
                  key={filter.id}
                  initial={{ opacity: 0, y: 20, scale: 0.95 }}
                  animate={{ opacity: 1, y: 0, scale: 1 }}
                  exit={{ opacity: 0, y: -20, scale: 0.95 }}
                  transition={{
                    delay: index * 0.05,
                    type: 'spring',
                    stiffness: 300,
                    damping: 25,
                  }}
                  whileHover={{ scale: 1.02, y: -2 }}
                  className={cn(
                    'relative group cursor-pointer rounded-2xl overflow-hidden shadow-xl border-0 transition-all duration-300',
                    isActive
                      ? 'ring-4 ring-purple-400 ring-opacity-60 shadow-purple-200'
                      : 'shadow-gray-200 hover:shadow-2xl'
                  )}
                  onClick={() => onSelect(filter)}
                >
                  <div
                    className={cn(
                      'absolute inset-0 bg-gradient-to-br transition-opacity duration-300',
                      isActive
                        ? 'from-purple-50 via-pink-50/50 to-purple-50 opacity-90'
                        : 'from-white via-gray-50/30 to-white opacity-95 group-hover:opacity-100'
                    )}
                  />
                  <div className="relative z-10 p-5">
                    <div className="flex items-start justify-between mb-4">
                      <div className="flex items-center gap-3">
                        {filter.isDefault && (
                          <motion.div
                            initial={{ scale: 0 }}
                            animate={{ scale: 1 }}
                            className="p-2 rounded-full bg-gradient-to-r from-yellow-400 to-orange-400 text-white shadow-lg"
                          >
                            <Crown className="w-4 h-4" />
                          </motion.div>
                        )}
                        <div
                          className={cn(
                            'p-2 rounded-full text-white shadow-lg bg-gradient-to-r',
                            complexity.color
                          )}
                        >
                          {complexity.score <= 2 ? (
                            <Star className="w-4 h-4" />
                          ) : complexity.score <= 5 ? (
                            <Sparkles className="w-4 h-4" />
                          ) : complexity.score <= 8 ? (
                            <Zap className="w-4 h-4" />
                          ) : (
                            <Award className="w-4 h-4" />
                          )}
                        </div>
                        <div className="flex-1">
                          <h4 className="font-bold text-lg text-gray-800 group-hover:text-purple-700 transition-colors">
                            {filter.name}
                          </h4>
                          <p className="text-sm text-gray-500 mt-1">
                            {formatFilterSummary(
                              filter.filter,
                              dict.filterCard.summary
                            )}
                          </p>
                        </div>
                      </div>
                      <DropdownMenu>
                        <DropdownMenuTrigger asChild>
                          <Button
                            variant="ghost"
                            size="sm"
                            className="h-8 w-8 p-0 opacity-0 group-hover:opacity-100 transition-opacity hover:bg-purple-100 rounded-full"
                            onClick={(e) => e.stopPropagation()}
                          >
                            <MoreVertical className="h-4 w-4 text-gray-600" />
                          </Button>
                        </DropdownMenuTrigger>
                        <DropdownMenuContent
                          align="end"
                          className="bg-white/95 backdrop-blur-sm border-0 shadow-2xl rounded-xl"
                        >
                          <DropdownMenuItem
                            onClick={() => onEdit(filter)}
                            className="hover:bg-blue-50 rounded-lg"
                          >
                            <Edit className="mr-2 h-4 w-4 text-blue-600" />
                            <span className="text-blue-700">
                              {dict.filterCard.actions.edit}
                            </span>
                          </DropdownMenuItem>
                          <DropdownMenuItem
                            onClick={() => onSetDefault(filter.id)}
                            disabled={filter.isDefault}
                            className="hover:bg-yellow-50 rounded-lg"
                          >
                            <Crown className="mr-2 h-4 w-4 text-yellow-600" />
                            <span className="text-yellow-700">
                              {filter.isDefault
                                ? dict.filterCard.actions.isDefault
                                : dict.filterCard.actions.setDefault}
                            </span>
                          </DropdownMenuItem>
                          <DropdownMenuItem
                            onClick={() => onDelete(filter.id)}
                            className="hover:bg-red-50 rounded-lg"
                          >
                            <Trash className="mr-2 h-4 w-4 text-red-600" />
                            <span className="text-red-700">
                              {dict.filterCard.actions.delete}
                            </span>
                          </DropdownMenuItem>
                        </DropdownMenuContent>
                      </DropdownMenu>
                    </div>
                    <div className="space-y-3">
                      <div className="flex items-center justify-between">
                        <Badge
                          className={cn(
                            'text-white border-0 shadow-lg font-bold px-3 py-1 bg-gradient-to-r',
                            complexity.color
                          )}
                        >
                          {complexity.label} •{' '}
                          {dict.filterCard.criteria.replace(
                            '{{count}}',
                            String(complexity.score)
                          )}
                        </Badge>
                        <div className="flex items-center gap-2 text-xs text-gray-500">
                          <Calendar className="w-3 h-3" />
                          <span>{formatDate(filter.createdAt)}</span>
                        </div>
                      </div>
                    </div>
                  </div>
                  <div className="absolute inset-0 bg-gradient-to-r from-purple-400/0 via-pink-400/0 to-purple-400/0 group-hover:from-purple-400/10 group-hover:via-pink-400/10 group-hover:to-purple-400/10 transition-all duration-500 pointer-events-none rounded-2xl"></div>
                  {isActive && (
                    <motion.div
                      initial={{ scale: 0 }}
                      animate={{ scale: 1 }}
                      className="absolute top-3 left-3 w-3 h-3 bg-purple-500 rounded-full shadow-lg"
                    >
                      <div className="w-full h-full bg-purple-400 rounded-full animate-ping"></div>
                    </motion.div>
                  )}
                  <div className="absolute inset-0 bg-gradient-to-r from-transparent via-white/20 to-transparent transform -translate-x-full group-hover:translate-x-full transition-transform duration-1000 rounded-2xl"></div>
                </motion.div>
              );
            })}
          </AnimatePresence>
        </div>
      </ScrollArea>

      {filters.length === 0 && (
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          className="text-center py-12 bg-gradient-to-br from-white via-gray-50/30 to-white rounded-2xl shadow-xl border border-gray-100/50"
        >
          <div className="w-20 h-20 rounded-full bg-gradient-to-br from-purple-100 to-pink-100 flex items-center justify-center mx-auto mb-6">
            <Bookmark className="w-10 h-10 text-purple-400" />
          </div>
          <h3 className="text-xl font-bold text-gray-800 mb-3">
            {dict.emptyState.title}
          </h3>
          <p className="text-gray-600 mb-6 max-w-sm mx-auto">
            {dict.emptyState.description}
          </p>
          <div className="flex flex-wrap gap-2 justify-center">
            <Badge
              variant="outline"
              className="bg-blue-50 text-blue-600 border-blue-200"
            >
              <Star className="w-3 h-3 mr-1" />
              {dict.emptyState.fastSearches}
            </Badge>
            <Badge
              variant="outline"
              className="bg-purple-50 text-purple-600 border-purple-200"
            >
              <Sparkles className="w-3 h-3 mr-1" />
              {dict.emptyState.advancedFiltering}
            </Badge>
            <Badge
              variant="outline"
              className="bg-green-50 text-green-600 border-green-200"
            >
              <Award className="w-3 h-3 mr-1" />
              {dict.emptyState.quickAccess}
            </Badge>
          </div>
        </motion.div>
      )}

      {filters.length > 0 && (
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.3 }}
          className="bg-gradient-to-r from-indigo-50 via-purple-50 to-pink-50 rounded-2xl p-4 shadow-lg border border-gray-100/50"
        >
          <div className="grid grid-cols-3 gap-4 text-center">
            <div>
              <div className="text-lg font-bold text-indigo-600">
                {filters.filter((f) => f.isDefault).length}
              </div>
              <div className="text-xs text-gray-600">{dict.stats.default}</div>
            </div>
            <div>
              <div className="text-lg font-bold text-purple-600">
                {
                  filters.filter((f) => getFilterComplexity(f.filter).score > 5)
                    .length
                }
              </div>
              <div className="text-xs text-gray-600">{dict.stats.advanced}</div>
            </div>
            <div>
              <div className="text-lg font-bold text-pink-600">
                {Math.round(
                  filters.reduce(
                    (acc, f) => acc + getFilterComplexity(f.filter).score,
                    0
                  ) / (filters.length || 1)
                )}
              </div>
              <div className="text-xs text-gray-600">
                {dict.stats.avgCriteria}
              </div>
            </div>
          </div>
        </motion.div>
      )}
    </div>
  );
};

export default SavedFilters;
--- End of Content for SavedFilters.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\new\Filters\SearchBar.tsx
--------------------------------------------------------------------------------
Content:
// SearchBar.tsx - גרסה סופית ומתקדמת עם תיקון z-index ו-RTL
'use client';

import React, { useState, useEffect, useRef } from 'react';
import {
  Search,
  X,
  History,
  Sparkles,
  Target,
  Crown,
  Star,
  TrendingUp,
  Zap,
} from 'lucide-react';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { motion, AnimatePresence } from 'framer-motion';
import type { Candidate } from '../types/candidates';
import { cn } from '@/lib/utils';
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from '@/components/ui/tooltip';
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
  PopoverAnchor,
} from '@/components/ui/popover';
import type { MatchmakerPageDictionary } from '@/types/dictionaries/matchmaker';

interface SearchBarProps {
  value: string;
  onChange: (value: string) => void;
  onSelect?: (candidate: Candidate) => void;
  recentSearches?: string[];
  onSaveSearch?: (value: string) => void;
  onClearRecentSearches?: () => void;
  suggestions?: Candidate[];
  loading?: boolean;
  className?: string;
  placeholder?: string;
  autoFocus?: boolean;
  genderTarget?: 'male' | 'female' | 'all';
  separateMode?: boolean;
  dict: MatchmakerPageDictionary['candidatesManager']['searchBar'];
}

const SearchBar: React.FC<SearchBarProps> = ({
  value,
  onChange,
  onSelect,
  recentSearches = [],
  onSaveSearch,
  onClearRecentSearches,
  suggestions = [],
  loading = false,
  className = '',
  placeholder, // We will now primarily use the placeholder from dict
  autoFocus = false,
  genderTarget = 'all',
  separateMode = false,
  dict,
}) => {
  const [inputValue, setInputValue] = useState(value);
  const [showDropdown, setShowDropdown] = useState(false);
  const [isHovered, setIsHovered] = useState(false);
  const [isFocused, setIsFocused] = useState(false);
  const inputRef = useRef<HTMLInputElement>(null);

  useEffect(() => {
    setInputValue(value);
  }, [value]);
  
  const searchCategories = [
    { id: 'name', label: dict.categories.name, icon: <Star className="w-3 h-3" />, gradient: 'from-blue-500 to-cyan-500' },
    { id: 'city', label: dict.categories.city, icon: <Target className="w-3 h-3" />, gradient: 'from-emerald-500 to-green-500' },
    { id: 'occupation', label: dict.categories.occupation, icon: <Zap className="w-3 h-3" />, gradient: 'from-purple-500 to-pink-500' },
    { id: 'all', label: dict.categories.all, icon: <Sparkles className="w-3 h-3" />, gradient: 'from-indigo-500 to-purple-500' },
  ];
  const [searchCategory, setSearchCategory] = useState<string>('all');


  const getSearchPlaceholder = () => {
    if (placeholder) return placeholder; // Allow override
    if (separateMode) {
      if (genderTarget === 'male') return dict.malePlaceholder;
      if (genderTarget === 'female') return dict.femalePlaceholder;
    }
    return dict.generalPlaceholder;
  };

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const newValue = e.target.value;
    setInputValue(newValue);
    onChange(newValue);
    if (!showDropdown) {
      setShowDropdown(true);
    }
  };

  const handleSearch = (searchValue: string) => {
    if (searchValue.trim()) {
      onChange(searchValue.trim());
      if (onSaveSearch) {
        onSaveSearch(searchValue.trim());
      }
    }
  };

  const handleKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {
    if (e.key === 'Enter' && inputValue.trim()) {
      handleSearch(inputValue);
      setShowDropdown(false);
    } else if (e.key === 'Escape') {
      setShowDropdown(false);
    }
  };

  const handleClear = () => {
    setInputValue('');
    onChange('');
    inputRef.current?.focus();
  };

  const handleSuggestionSelect = (candidate: Candidate) => {
    if (onSelect) {
      onSelect(candidate);
    } else {
      const searchText = `${candidate.firstName} ${candidate.lastName}`;
      setInputValue(searchText);
      onChange(searchText);
    }
    setShowDropdown(false);
  };

  const getStyling = () => {
    if (!separateMode || genderTarget === 'all') {
      return { gradient: 'from-indigo-500 via-purple-500 to-pink-500', ring: 'focus:ring-purple-200', badge: 'bg-gradient-to-r from-indigo-500 to-purple-500' };
    }
    if (genderTarget === 'male') {
      return { gradient: 'from-blue-500 to-cyan-500', ring: 'focus:ring-blue-200', badge: 'bg-gradient-to-r from-blue-500 to-cyan-500' };
    }
    return { gradient: 'from-purple-500 to-pink-500', ring: 'focus:ring-purple-200', badge: 'bg-gradient-to-r from-purple-500 to-pink-500' };
  };

  const styling = getStyling();

  return (
    <Popover open={showDropdown} onOpenChange={setShowDropdown}>
      <div className={cn('relative group', className)}>
        <PopoverAnchor asChild>
          <motion.div
            className={cn('relative flex items-center rounded-2xl shadow-xl transition-all duration-300 backdrop-blur-sm border-0', `bg-gradient-to-r from-white via-gray-50/30 to-white`, isFocused || isHovered ? 'shadow-2xl scale-[1.02]' : 'shadow-lg', isFocused && `ring-2 ${styling.ring}`)}
            onMouseEnter={() => setIsHovered(true)}
            onMouseLeave={() => setIsHovered(false)}
            whileHover={{ y: -2 }}
            transition={{ type: 'spring', stiffness: 400, damping: 25 }}
          >
            <div className={cn('absolute inset-0 bg-gradient-to-r opacity-5 rounded-2xl', styling.gradient)} />

            {separateMode && genderTarget !== 'all' && (
              <motion.div className="absolute left-4 top-1/2 -translate-y-1/2 z-10" initial={{ scale: 0 }} animate={{ scale: 1 }} transition={{ type: 'spring', stiffness: 500, damping: 25 }}>
                <Badge className={cn('text-white border-0 shadow-lg font-bold px-3 py-1.5 rounded-xl', styling.badge)}>
                  <div className="flex items-center gap-2">
                    {genderTarget === 'male' ? <Target className="w-4 h-4" /> : <Crown className="w-4 h-4" />}
                    {genderTarget === 'male' ? dict.tooltips.maleTarget : dict.tooltips.femaleTarget}
                  </div>
                </Badge>
              </motion.div>
            )}

            <input
              ref={inputRef}
              type="text"
              value={inputValue}
              onChange={handleInputChange}
              onKeyDown={handleKeyDown}
              onFocus={() => { setShowDropdown(true); setIsFocused(true); }}
              onBlur={() => setIsFocused(false)}
              placeholder={getSearchPlaceholder()}
              className={cn('w-full h-14 bg-transparent border-0 rounded-2xl text-lg font-medium relative z-10', 'placeholder:text-gray-500 text-gray-800', 'focus:outline-none transition-all duration-200', separateMode ? 'pl-32 pr-16' : 'pl-6 pr-16')}
              autoFocus={autoFocus}
              autoComplete="off"
              spellCheck="false"
            />

            <div className="absolute right-4 top-1/2 -translate-y-1/2 z-10">
              <motion.div
                animate={{ rotate: loading ? 360 : 0, scale: isHovered || isFocused ? 1.1 : 1 }}
                transition={{ rotate: { duration: 1, repeat: loading ? Infinity : 0, ease: 'linear' }, scale: { duration: 0.2 } }}
                className={cn('p-2.5 rounded-full text-white shadow-lg', `bg-gradient-to-r ${styling.gradient}`)}
              >
                <Search className="w-5 h-5" />
              </motion.div>
            </div>

            <AnimatePresence>
              {inputValue && (
                <motion.div initial={{ opacity: 0, scale: 0.8 }} animate={{ opacity: 1, scale: 1 }} exit={{ opacity: 0, scale: 0.8 }} className={cn('absolute top-1/2 -translate-y-1/2 z-10', separateMode ? 'left-32' : 'left-4')}>
                  <TooltipProvider>
                    <Tooltip>
                      <TooltipTrigger asChild>
                        <button type="button" onClick={handleClear} className="w-7 h-7 bg-gray-100 hover:bg-gray-200 rounded-full flex items-center justify-center transition-all duration-200 hover:scale-110 shadow-md">
                          <X className="w-4 h-4 text-gray-600" />
                        </button>
                      </TooltipTrigger>
                      <TooltipContent><p>{dict.clearTooltip}</p></TooltipContent>
                    </Tooltip>
                  </TooltipProvider>
                </motion.div>
              )}
            </AnimatePresence>

            <div className="absolute inset-0 bg-gradient-to-r from-transparent via-white/20 to-transparent transform -translate-x-full group-hover:translate-x-full transition-transform duration-1000 rounded-2xl pointer-events-none"></div>
          </motion.div>
        </PopoverAnchor>
      </div>

      <PopoverContent onOpenAutoFocus={(e) => e.preventDefault()} className="w-[--radix-popover-trigger-width] p-0 mt-2 z-[99] border-0 shadow-2xl rounded-2xl overflow-hidden bg-white/95 backdrop-blur-xl">
        <div className={cn('p-4 bg-gradient-to-r text-white', styling.gradient)}>
          <div className="flex items-center justify-between mb-3 text-right">
            <div className="text-sm opacity-90">{dict.resultsCount.replace('{{count}}', String(suggestions.length))}</div>
            <div className="flex items-center gap-2">
              <span className="font-bold">{dict.smartSearch}</span>
              <Sparkles className="w-5 h-5" />
            </div>
          </div>
          <div className="relative">
            <Search className="absolute right-3 top-2.5 h-4 w-4 text-white/70" />
            <input
              type="text"
              value={inputValue}
              onChange={handleInputChange}
              className="w-full bg-white/20 backdrop-blur-sm border border-white/30 rounded-xl px-4 pr-10 py-2 text-sm text-white placeholder:text-white/70 focus:outline-none focus:ring-2 focus:ring-white/50 text-right"
              placeholder={dict.filterResultsPlaceholder}
            />
          </div>
        </div>

        <div className="max-h-96 overflow-y-auto">
          {loading === false && suggestions.length === 0 && recentSearches.length === 0 && (
            <motion.div initial={{ opacity: 0 }} animate={{ opacity: 1 }} className="p-8 text-center">
              <div className="w-16 h-16 rounded-full bg-gradient-to-br from-gray-100 to-gray-200 flex items-center justify-center mx-auto mb-4"><Search className="w-8 h-8 text-gray-400" /></div>
              <h3 className="font-bold text-gray-800 mb-2">{dict.noResultsTitle}</h3>
              <p className="text-sm text-gray-500">{dict.noResultsDescription}</p>
            </motion.div>
          )}

          {loading === true && (
            <motion.div initial={{ opacity: 0 }} animate={{ opacity: 1 }} className="p-8 text-center">
              <div className="w-16 h-16 rounded-full bg-gradient-to-br from-gray-100 to-gray-200 flex items-center justify-center mx-auto mb-4"><Search className="w-8 h-8 text-gray-400 animate-pulse" /></div>
              <h3 className="font-bold text-gray-800 mb-2">מחפש...</h3>
              <p className="text-sm text-gray-500">אנא המתן...</p>
            </motion.div>
          )}

          {recentSearches.length > 0 && (
            <div className="border-b border-gray-100">
              <div className="px-4 py-3 bg-gradient-to-r from-gray-50 to-gray-100/50">
                <div className="flex justify-between items-center">
                  {onClearRecentSearches && (<Button variant="ghost" size="sm" onClick={(e) => { e.stopPropagation(); onClearRecentSearches(); }} className="h-6 text-xs text-gray-500 hover:text-gray-700 px-2">{dict.clearHistory}</Button>)}
                  <div className="flex items-center gap-2">
                    <span className="text-sm font-medium text-gray-700">{dict.recentSearches}</span>
                    <History className="w-4 h-4 text-gray-500" />
                  </div>
                </div>
              </div>
              <div className="p-2">
                {recentSearches.slice(0, 5).map((search, index) => (
                  <motion.div key={`recent-${index}`} initial={{ opacity: 0, x: 20 }} animate={{ opacity: 1, x: 0 }} transition={{ delay: index * 0.05 }} className="flex items-center gap-3 px-3 py-2.5 hover:bg-gradient-to-r hover:from-blue-50 hover:to-cyan-50 rounded-xl cursor-pointer transition-all duration-200 group" onClick={() => { handleSearch(search); setShowDropdown(false); }}>
                    <div className="ml-auto opacity-0 group-hover:opacity-100 transition-opacity"><Zap className="w-3 h-3 text-blue-500" /></div>
                    <span className="text-sm font-medium text-gray-700 group-hover:text-blue-700">{search}</span>
                    <div className="p-1.5 rounded-lg bg-gradient-to-r from-blue-100 to-cyan-100 group-hover:from-blue-200 group-hover:to-cyan-200 transition-all duration-200"><History className="h-3 w-3 text-blue-600" /></div>
                  </motion.div>
                ))}
              </div>
            </div>
          )}

          {suggestions.length > 0 && (
            <div>
              <div className="px-4 py-3 bg-gradient-to-r from-emerald-50 to-green-50 border-b border-gray-100">
                <div className="flex items-center justify-end gap-2">
                  <span className="text-sm font-medium text-emerald-800">{dict.matchingResults.replace('{{count}}', String(suggestions.length))}</span>
                  <Star className="w-4 h-4 text-emerald-600" />
                </div>
              </div>
              <div className="p-2 space-y-1">
                {suggestions.map((candidate, index) => (
                  <motion.div key={candidate.id} initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} transition={{ delay: index * 0.05 }} className="flex items-center gap-3 px-3 py-3 hover:bg-gradient-to-r hover:from-purple-50 hover:to-pink-50 rounded-xl cursor-pointer transition-all duration-200 group" onClick={() => handleSuggestionSelect(candidate)}>
                    <div className="opacity-0 group-hover:opacity-100 transition-opacity"><div className="p-1.5 rounded-lg bg-gradient-to-r from-purple-100 to-pink-100"><Sparkles className="w-3 h-3 text-purple-600" /></div></div>
                    <div className="flex-1 min-w-0 text-right">
                      <div className="font-medium text-gray-800 group-hover:text-purple-700 transition-colors">{`${candidate.firstName} ${candidate.lastName}`}</div>
                      <div className="text-xs text-gray-500 truncate mt-0.5">{[candidate.profile.city, candidate.profile.occupation, candidate.profile.religiousLevel].filter(Boolean).join(' • ')}</div>
                    </div>
                    <div className="relative">
                      <div className="w-10 h-10 rounded-full bg-gradient-to-br from-purple-100 to-pink-100 flex items-center justify-center group-hover:scale-110 transition-transform duration-200">
                        <span className="text-sm font-bold text-purple-600">{candidate.firstName.charAt(0)}{candidate.lastName.charAt(0)}</span>
                      </div>
                      {candidate.isVerified && (<div className="absolute -top-1 -right-1 w-4 h-4 bg-gradient-to-r from-emerald-500 to-green-500 rounded-full flex items-center justify-center"><Star className="w-2 h-2 text-white" /></div>)}
                    </div>
                  </motion.div>
                ))}
              </div>
            </div>
          )}

          <div className="md:hidden border-t border-gray-100">
            <div className="px-4 py-3 bg-gradient-to-r from-indigo-50 to-purple-50">
              <div className="flex items-center justify-end gap-2 mb-3">
                <span className="text-sm font-medium text-indigo-800">חפש לפי קטגוריה</span>
                <TrendingUp className="w-4 h-4 text-indigo-600" />
              </div>
              <div className="grid grid-cols-2 gap-2">
                {searchCategories.map((category) => (
                  <motion.div key={category.id} whileHover={{ scale: 1.02 }} whileTap={{ scale: 0.98 }}>
                    <Button variant={searchCategory === category.id ? 'default' : 'outline'} size="sm" className={cn('w-full justify-start gap-2 rounded-xl transition-all duration-200', searchCategory === category.id ? `bg-gradient-to-r ${category.gradient} text-white shadow-lg border-0` : 'bg-white/80 hover:bg-white border border-gray-200 hover:border-gray-300')} onClick={() => setSearchCategory(category.id)}>
                      {category.icon}
                      <span className="text-xs">{category.label}</span>
                    </Button>
                  </motion.div>
                ))}
              </div>
            </div>
          </div>

          <div className="p-4 bg-gradient-to-r from-gray-50 to-gray-100/50 border-t border-gray-100">
            <div className="flex items-start gap-2 text-right">
              <Sparkles className="w-4 h-4 text-gray-500 mt-0.5 flex-shrink-0" />
              <div className="text-xs text-gray-600 leading-relaxed"><span className="font-medium">{dict.tip}</span> {dict.tipContent}</div>
            </div>
          </div>
        </div>
      </PopoverContent>
    </Popover>
  );
};

export default SearchBar;
--- End of Content for SearchBar.tsx ---

================================================================================
Directory: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\new\constants
================================================================================

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\new\constants\filterOptions.ts
--------------------------------------------------------------------------------
Content:
// /constants/filterOptions.ts
import { AvailabilityStatus } from '@prisma/client';

export const AGE_RANGE = {
  min: 18,
  max: 99,
  default: {
    min: 20,
    max: 35
  }
};

export const HEIGHT_RANGE = {
  min: 140,
  max: 210,
  default: {
    min: 150,
    max: 190
  }
};

export const RELIGIOUS_LEVELS = [
  { value: "charedi", label: "חרדי/ת" },
  { value: "charedi_modern", label: "חרדי/ת מודרני/ת" },
  { value: "dati_leumi_torani", label: "דתי/ה לאומי/ת תורני/ת" },
  { value: "dati_leumi_liberal", label: "דתי/ה לאומי/ת ליברלי/ת" },
  { value: "dati_leumi_standard", label: "דתי/ה לאומי/ת (סטנדרטי)" },
  { value: "masorti_strong", label: "מסורתי/ת (קרוב/ה לדת)" },
  { value: "masorti_light", label: "מסורתי/ת (קשר קל למסורת)" },
  {
    value: "secular_traditional_connection",
    label: "חילוני/ת עם זיקה למסורת",
  },
  { value: "secular", label: "חילוני/ת" },
  { value: "spiritual_not_religious", label: "רוחני/ת (לאו דווקא דתי/ה)" },
  { value: "other", label: "אחר (נא לפרט ב'אודות')" },
];

export const EDUCATION_LEVELS = [
  { value: 'תיכונית', label: 'השכלה תיכונית' },
  { value: 'ישיבה', label: 'ישיבה' },
  { value: 'סמינר', label: 'סמינר' },
  { value: 'תואר ראשון', label: 'תואר ראשון' },
  { value: 'תואר שני', label: 'תואר שני' },
  { value: 'דוקטורט', label: 'דוקטורט' }
];

export const MARITAL_STATUS = [
  { value: 'רווק/ה', label: 'רווק/ה' },
  { value: 'גרוש/ה', label: 'גרוש/ה' },
  { value: 'אלמן/ה', label: 'אלמן/ה' }
];

export const OCCUPATION_CATEGORIES = [
  { value: 'חינוך', label: 'חינוך והוראה' },
  { value: 'הייטק', label: 'הייטק ותוכנה' },
  { value: 'רפואה', label: 'רפואה ובריאות' },
  { value: 'משפטים', label: 'משפטים' },
  { value: 'עסקים', label: 'עסקים וכלכלה' },
  { value: 'שירותים', label: 'שירותים' },
  { value: 'אחר', label: 'אחר' }
];

export const REGIONS = [
  { value: 'ירושלים', label: 'ירושלים והסביבה' },
  { value: 'תל אביב', label: 'תל אביב והמרכז' },
  { value: 'חיפה', label: 'חיפה והצפון' },
  { value: 'באר שבע', label: 'באר שבע והדרום' },
  { value: 'יהודה ושומרון', label: 'יהודה ושומרון' }
];

export const POPULAR_CITIES = [
  'ירושלים',
  'תל אביב',
  'חיפה',
  'בני ברק',
  'פתח תקווה',
  'אשדוד',
  'נתניה',
  'באר שבע',
  'חולון',
  'רמת גן',
  'בית שמש',
  'מודיעין עילית',
  'אלעד',
  'ביתר עילית'
];

export const AVAILABILITY_STATUS_OPTIONS = [
  { 
    value: AvailabilityStatus.AVAILABLE, 
    label: 'פנוי/ה',
    description: 'מועמד/ת פנוי/ה להצעות'
  },
  { 
    value: AvailabilityStatus.DATING, 
    label: 'בתהליך הכרות',
    description: 'נמצא/ת בתהליך הכרות'
  },
  { 
    value: AvailabilityStatus.UNAVAILABLE, 
    label: 'לא פנוי/ה',
    description: 'לא פנוי/ה להצעות כרגע'
  }
];

export const SORT_OPTIONS = [
  { 
    value: 'lastActive',
    label: 'פעילות אחרונה',
    defaultOrder: 'desc'
  },
  { 
    value: 'age',
    label: 'גיל',
    defaultOrder: 'asc'
  },
  { 
    value: 'name',
    label: 'שם',
    defaultOrder: 'asc'
  },
  { 
    value: 'city',
    label: 'עיר',
    defaultOrder: 'asc'
  },
  { 
    value: 'religiousLevel',
    label: 'רמת דתיות',
    defaultOrder: 'asc'
  },
  { 
    value: 'height',
    label: 'גובה',
    defaultOrder: 'desc'
  },
  { 
    value: 'registrationDate',
    label: 'תאריך הרשמה',
    defaultOrder: 'desc'
  }
];

export const VIEW_OPTIONS = [
  {
    value: 'grid',
    label: 'תצוגת גריד',
    icon: 'LayoutGrid'
  },
  {
    value: 'list',
    label: 'תצוגת רשימה',
    icon: 'List'
  }
];

export const CARD_SIZES = [
  {
    value: 'sm',
    label: 'קטן',
    dimensions: {
      grid: 'h-64',
      list: 'h-24'
    }
  },
  {
    value: 'md',
    label: 'בינוני',
    dimensions: {
      grid: 'h-80',
      list: 'h-32'
    }
  },
  {
    value: 'lg',
    label: 'גדול',
    dimensions: {
      grid: 'h-96',
      list: 'h-40'
    }
  }
];

export const GROUP_BY_OPTIONS = [
  {
    value: 'none',
    label: 'ללא קיבוץ'
  },
  {
    value: 'city',
    label: 'עיר'
  },
  {
    value: 'religiousLevel',
    label: 'רמת דתיות'
  },
  {
    value: 'ageGroup',
    label: 'קבוצת גיל'
  },
  {
    value: 'availability',
    label: 'סטטוס זמינות'
  }
];

export const DEFAULT_FILTERS = {
  gender: undefined,
  ageRange: AGE_RANGE.default,
  heightRange: HEIGHT_RANGE.default,
  cities: [],
  religiousLevel: undefined,
  occupations: [],
  availability: undefined,
  searchQuery: '',
  isVerified: undefined,
  hasReferences: undefined,
  lastActiveDays: undefined
};

export const FILTER_CATEGORIES = [
  {
    id: 'basic',
    label: 'פילטרים בסיסיים',
    filters: ['gender', 'ageRange', 'cities', 'religiousLevel']
  },
  {
    id: 'advanced',
    label: 'פילטרים מתקדמים',
    filters: ['heightRange', 'occupations', 'education', 'maritalStatus']
  },
  {
    id: 'status',
    label: 'סטטוס ואימות',
    filters: ['availability', 'isVerified', 'hasReferences', 'lastActiveDays']
  }
];
--- End of Content for filterOptions.ts ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\new\constants\matchingCriteria.ts
--------------------------------------------------------------------------------
Content:
// /constants/matchingCriteria.ts

export const CRITERIA_WEIGHTS = {
    // קריטריונים בסיסיים
    age: {
      weight: 15,
      description: 'התאמת גיל',
      thresholds: {
        perfect: 2,  // הפרש של עד שנתיים
        good: 5,     // הפרש של עד 5 שנים
        fair: 8      // הפרש של עד 8 שנים
      }
    },
    
    religiousLevel: {
      weight: 20,
      description: 'התאמה דתית',
      bonusPoints: {
        exactMatch: 1.0,        // התאמה מדויקת
        adjacentLevel: 0.8,     // רמה דתית סמוכה
        twoLevelsApart: 0.4     // הפרש של שתי רמות
      }
    },
  
    location: {
      weight: 10,
      description: 'מיקום גיאוגרפי',
      bonusPoints: {
        sameCity: 1.0,          // אותה עיר
        sameRegion: 0.8,        // אותו אזור
        preferredCity: 0.7,     // עיר מועדפת
        differentRegion: 0.4    // אזור אחר
      }
    },
  
    // קריטריונים מקצועיים והשכלתיים
    education: {
      weight: 8,
      description: 'רמת השכלה',
      bonusPoints: {
        sameLevel: 1.0,         // רמת השכלה זהה
        adjacentLevel: 0.8,     // רמת השכלה סמוכה
        meetPreferences: 0.7    // עומד בהעדפות
      }
    },
  
    occupation: {
      weight: 7,
      description: 'תחום עיסוק',
      bonusPoints: {
        sameField: 1.0,         // אותו תחום
        relatedField: 0.8,      // תחום קרוב
        meetPreferences: 0.7    // עומד בהעדפות
      }
    },
  
    // קריטריונים אישיים
    familyBackground: {
      weight: 12,
      description: 'רקע משפחתי',
      factors: {
        origin: 0.4,            // מוצא
        parentStatus: 0.3,      // מצב הורים
        familyType: 0.3         // סוג משפחה
      }
    },
  
    personalityMatch: {
      weight: 15,
      description: 'התאמה אישיותית',
      factors: {
        hobbies: 0.3,           // תחביבים משותפים
        lifestyle: 0.4,         // סגנון חיים
        values: 0.3             // ערכים משותפים
      }
    },
  
    // גורמים נוספים
    preferences: {
      weight: 8,
      description: 'העדפות אישיות',
      factors: {
        agePreference: 0.3,     // העדפות גיל
        locationPreference: 0.3, // העדפות מיקום
        otherPreferences: 0.4   // העדפות נוספות
      }
    },
  
    compatibility: {
      weight: 5,
      description: 'תאימות כללית',
      factors: {
        language: 0.3,          // שפה משותפת
        culture: 0.4,           // תרבות
        lifestyle: 0.3          // סגנון חיים
      }
    }
  };
  
  // סף ציון להתאמה טובה
  export const MATCH_THRESHOLDS = {
    EXCELLENT: 85,  // התאמה מצוינת
    GOOD: 75,       // התאמה טובה
    FAIR: 65,       // התאמה סבירה
    POOR: 50        // התאמה חלשה
  };
  
  // משקלים יחסיים לפי סוג התאמה
  export const MATCH_TYPE_WEIGHTS = {
    PRECISE: {     // התאמה מדויקת
      exact: 1.0,
      similar: 0.8,
      partial: 0.5
    },
    FLEXIBLE: {    // התאמה גמישה
      exact: 0.8,
      similar: 1.0,
      partial: 0.7
    },
    OPEN: {        // התאמה פתוחה
      exact: 0.7,
      similar: 0.9,
      partial: 1.0
    }
  };
  
  // הגדרת קטגוריות להתאמה
  export const MATCH_CATEGORIES = {
    IMMEDIATE: {
      minScore: 90,
      label: 'התאמה מיידית',
      description: 'התאמה גבוהה מאוד, מומלץ ליצור קשר בהקדם'
    },
    HIGH: {
      minScore: 80,
      label: 'התאמה גבוהה',
      description: 'התאמה טובה מאוד, שווה לבדוק'
    },
    GOOD: {
      minScore: 70,
      label: 'התאמה טובה',
      description: 'יש פוטנציאל טוב להתאמה'
    },
    MODERATE: {
      minScore: 60,
      label: 'התאמה בינונית',
      description: 'יש נקודות משותפות, אבל גם הבדלים'
    },
    LOW: {
      minScore: 50,
      label: 'התאמה נמוכה',
      description: 'יש פערים משמעותיים בין המועמדים'
    }
  };
--- End of Content for matchingCriteria.ts ---

================================================================================
Directory: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\new\dialogs
================================================================================

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\new\dialogs\ActionDialogs.tsx
--------------------------------------------------------------------------------
Content:
'use client';

import React, { useState, useEffect } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogFooter,
  DialogDescription,
} from '@/components/ui/dialog';
import { Priority, MatchSuggestionStatus } from '@prisma/client';
import { Alert, AlertDescription } from '@/components/ui/alert';
import {
  Clock,
  Mail,
  Loader2,
  Send,
  User,
  Sparkles,
  CheckCircle,
  Heart,
  MessageCircle,
  Calendar,
  AlertCircle,
  X,
} from 'lucide-react';
import type { Candidate } from '../types/candidates';
import { cn } from '@/lib/utils';
import { Badge } from '@/components/ui/badge';
import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';
import { getRelativeCloudinaryPath, getInitials } from '@/lib/utils';
import type { MatchmakerPageDictionary } from '@/types/dictionaries/matchmaker';

interface NewSuggestionFormData {
  firstPartyId: string;
  secondPartyId: string;
  priority: Priority;
  status: MatchSuggestionStatus;
}

interface ActionDialogsProps {
  suggestDialog: {
    isOpen: boolean;
    onClose: () => void;
    onSubmit: (data: NewSuggestionFormData) => Promise<void>;
    selectedCandidate: Candidate | null;
  };
  availabilityDialog: {
    isOpen: boolean;
    onClose: () => void;
    onCheck: (candidate: Candidate) => Promise<void>;
    selectedCandidate: Candidate | null;
  };
  inviteDialog: {
    isOpen: boolean;
    onClose: () => void;
    onInvite: (candidate: Candidate, email: string) => Promise<void>;
    selectedCandidate: Candidate | null;
  };
  dict: MatchmakerPageDictionary['candidatesManager']['actionDialogs'];
}

// Enhanced Dialog Header Component
const EnhancedDialogHeader: React.FC<{
  title: string;
  description: string;
  candidate: Candidate | null;
  icon: React.ReactNode;
  gradient: string;
}> = ({ title, description, candidate, icon, gradient }) => {
  const mainImage = candidate?.images?.find((img) => img.isMain);

  return (
    <div
      className={cn(
        'relative bg-gradient-to-br overflow-hidden rounded-t-3xl -mx-6 -mt-6 mb-6',
        gradient
      )}
    >
      <div className="absolute inset-0">
        <div className="absolute top-0 right-0 w-32 h-32 bg-white/20 rounded-full blur-2xl"></div>
        <div className="absolute bottom-0 left-0 w-24 h-24 bg-white/10 rounded-full blur-xl"></div>
      </div>
      <div className="relative z-10 p-6 text-white">
        <div className="flex items-center gap-4 mb-4">
          <div className="p-3 rounded-full bg-white/20 backdrop-blur-sm shadow-lg">
            {icon}
          </div>
          <div>
            <DialogTitle className="text-2xl font-bold text-white mb-1">
              {title}
            </DialogTitle>
            <DialogDescription className="text-white/90 text-lg">
              {description}
            </DialogDescription>
          </div>
        </div>
        {candidate && (
          <div className="flex items-center gap-3 p-3 bg-white/10 backdrop-blur-sm rounded-xl border border-white/20">
            <Avatar className="w-12 h-12 border-2 border-white/30 shadow-lg">
              {mainImage ? (
                <AvatarImage
                  src={getRelativeCloudinaryPath(mainImage.url)}
                  alt={`${candidate.firstName} ${candidate.lastName}`}
                />
              ) : (
                <AvatarFallback className="bg-white/20 text-white font-bold">
                  {getInitials(`${candidate.firstName} ${candidate.lastName}`)}
                </AvatarFallback>
              )}
            </Avatar>
            <div>
              <h3 className="font-bold text-white text-lg">
                {candidate.firstName} {candidate.lastName}
              </h3>
              <div className="flex items-center gap-2 mt-1">
                <Badge className="bg-white/20 text-white border-white/30 text-xs">
                  {candidate.profile.city || 'לא צוין'}
                </Badge>
                <Badge className="bg-white/20 text-white border-white/30 text-xs">
                  {candidate.profile.availabilityStatus === 'AVAILABLE'
                    ? 'זמין/ה'
                    : 'לא זמין/ה'}
                </Badge>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export const ActionDialogs: React.FC<ActionDialogsProps> = ({
  suggestDialog,
  availabilityDialog,
  inviteDialog,
  dict,
}) => {
  const [inviteEmail, setInviteEmail] = useState('');
  const [isInviting, setIsInviting] = useState(false);
  const [inviteError, setInviteError] = useState<string | null>(null);
  const [inviteSuccess, setInviteSuccess] = useState(false);

  const [isChecking, setIsChecking] = useState(false);
  const [availabilityError, setAvailabilityError] = useState<string | null>(
    null
  );
  const [availabilitySuccess, setAvailabilitySuccess] = useState(false);

  useEffect(() => {
    if (inviteDialog.isOpen && inviteDialog.selectedCandidate) {
      setInviteEmail(inviteDialog.selectedCandidate.email || '');
      setInviteError(null);
      setInviteSuccess(false);
    }
  }, [inviteDialog.isOpen, inviteDialog.selectedCandidate]);

  useEffect(() => {
    if (availabilityDialog.isOpen) {
      setAvailabilityError(null);
      setAvailabilitySuccess(false);
    }
  }, [availabilityDialog.isOpen]);

  const handleInviteSubmit = async () => {
    if (!inviteDialog.selectedCandidate || !inviteEmail) return;
    try {
      setIsInviting(true);
      setInviteError(null);
      await inviteDialog.onInvite(inviteDialog.selectedCandidate, inviteEmail);
      setInviteSuccess(true);
      setTimeout(() => inviteDialog.onClose(), 2000);
    } catch (error) {
      setInviteError(
        error instanceof Error ? error.message : dict.invite.submissionError
      );
    } finally {
      setIsInviting(false);
    }
  };

  const handleAvailabilityCheck = async () => {
    if (!availabilityDialog.selectedCandidate) return;
    try {
      setIsChecking(true);
      setAvailabilityError(null);
      await availabilityDialog.onCheck(availabilityDialog.selectedCandidate);
      setAvailabilitySuccess(true);
      setTimeout(() => availabilityDialog.onClose(), 2000);
    } catch (error) {
      setAvailabilityError(
        error instanceof Error
          ? error.message
          : dict.availability.submissionError
      );
    } finally {
      setIsChecking(false);
    }
  };

  const validateEmail = (email: string) =>
    /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email);

  return (
    <>
      <Dialog open={inviteDialog.isOpen} onOpenChange={inviteDialog.onClose}>
        <DialogContent className="sm:max-w-md border-0 shadow-2xl bg-white rounded-3xl overflow-hidden">
          <EnhancedDialogHeader
            title={dict.invite.title}
            description={dict.invite.description}
            candidate={inviteDialog.selectedCandidate}
            icon={<Send className="w-8 h-8" />}
            gradient="from-purple-500 to-indigo-500"
          />
          <div className="space-y-6 p-6 -mt-6">
            {inviteSuccess ? (
              <div className="text-center py-8">
                <div className="w-16 h-16 bg-gradient-to-r from-green-500 to-emerald-500 rounded-full flex items-center justify-center mx-auto mb-4 shadow-lg">
                  <CheckCircle className="w-8 h-8 text-white" />
                </div>
                <h3 className="text-xl font-bold text-green-800 mb-2">
                  {dict.invite.successMessage}
                </h3>
                <p className="text-green-600">
                  {dict.invite.successDescription}
                </p>
              </div>
            ) : (
              <>
                <div className="space-y-3">
                  <Label className="text-sm font-bold text-gray-700 flex items-center gap-2">
                    <Mail className="w-4 h-4 text-purple-500" />
                    {dict.invite.emailLabel}
                  </Label>
                  <div className="relative">
                    <Input
                      type="email"
                      value={inviteEmail}
                      onChange={(e) => {
                        setInviteEmail(e.target.value);
                        setInviteError(null);
                      }}
                      placeholder={dict.invite.emailPlaceholder}
                      className={cn(
                        'pr-12 h-12 bg-gray-50 border-2 border-gray-200 focus:border-purple-400 focus:ring-purple-200 rounded-xl transition-all duration-300',
                        !validateEmail(inviteEmail) &&
                          inviteEmail.length > 0 &&
                          'border-red-300 focus:border-red-400'
                      )}
                      dir="ltr"
                    />
                    <div className="absolute left-3 top-1/2 transform -translate-y-1/2">
                      <Mail className="w-5 h-5 text-gray-400" />
                    </div>
                  </div>
                  {inviteEmail && !validateEmail(inviteEmail) && (
                    <p className="text-red-500 text-sm flex items-center gap-1">
                      <AlertCircle className="w-4 h-4" />
                      {dict.invite.invalidEmailError}
                    </p>
                  )}
                </div>
                {inviteError && (
                  <Alert className="border-red-200 bg-red-50">
                    <AlertCircle className="h-4 w-4 text-red-600" />
                    <AlertDescription className="text-red-700 font-medium">
                      {inviteError}
                    </AlertDescription>
                  </Alert>
                )}
                <div className="bg-gradient-to-r from-purple-50 to-indigo-50 p-4 rounded-xl border border-purple-100">
                  <h4 className="font-bold text-purple-800 mb-2 flex items-center gap-2">
                    <Sparkles className="w-4 h-4" />
                    {dict.invite.whatsNextTitle}
                  </h4>
                  <ul className="text-sm text-purple-700 space-y-1">
                    {dict.invite.whatsNextItems.map((item, i) => (
                      <li key={i}>• {item}</li>
                    ))}
                  </ul>
                </div>
              </>
            )}
          </div>
          {!inviteSuccess && (
            <DialogFooter className="p-6 pt-0 gap-3">
              <Button
                variant="outline"
                onClick={inviteDialog.onClose}
                disabled={isInviting}
                className="border-2 border-gray-200 hover:bg-gray-50 rounded-xl font-medium"
              >
                {dict.invite.buttons.cancel}
              </Button>
              <Button
                onClick={handleInviteSubmit}
                disabled={
                  isInviting || !inviteEmail || !validateEmail(inviteEmail)
                }
                className="bg-gradient-to-r from-purple-600 to-indigo-600 hover:from-purple-700 hover:to-indigo-700 text-white shadow-lg hover:shadow-xl transition-all duration-300 rounded-xl font-bold px-6"
              >
                {isInviting ? (
                  <Loader2 className="ml-2 h-5 w-5 animate-spin" />
                ) : (
                  <Send className="ml-2 h-5 w-5" />
                )}
                {isInviting
                  ? dict.invite.buttons.sending
                  : dict.invite.buttons.send}
              </Button>
            </DialogFooter>
          )}
        </DialogContent>
      </Dialog>

      <Dialog
        open={availabilityDialog.isOpen}
        onOpenChange={availabilityDialog.onClose}
      >
        <DialogContent className="sm:max-w-md border-0 shadow-2xl bg-white rounded-3xl overflow-hidden">
          <EnhancedDialogHeader
            title={dict.availability.title}
            description={dict.availability.description}
            candidate={availabilityDialog.selectedCandidate}
            icon={<Calendar className="w-8 h-8" />}
            gradient="from-orange-500 to-amber-500"
          />
          <div className="space-y-6 p-6 -mt-6">
            {availabilitySuccess ? (
              <div className="text-center py-8">
                <div className="w-16 h-16 bg-gradient-to-r from-green-500 to-emerald-500 rounded-full flex items-center justify-center mx-auto mb-4 shadow-lg">
                  <CheckCircle className="w-8 h-8 text-white" />
                </div>
                <h3 className="text-xl font-bold text-green-800 mb-2">
                  {dict.availability.successMessage}
                </h3>
                <p className="text-green-600">
                  {dict.availability.successDescription}
                </p>
              </div>
            ) : (
              <>
                <div className="bg-gradient-to-r from-orange-50 to-amber-50 p-4 rounded-xl border border-orange-100">
                  <h4 className="font-bold text-orange-800 mb-2 flex items-center gap-2">
                    <Clock className="w-4 h-4" />
                    {dict.availability.whatsNextTitle}
                  </h4>
                  <ul className="text-sm text-orange-700 space-y-1">
                    {dict.availability.whatsNextItems.map((item, i) => (
                      <li key={i}>• {item}</li>
                    ))}
                  </ul>
                </div>
                {availabilityError && (
                  <Alert className="border-red-200 bg-red-50">
                    <AlertCircle className="h-4 w-4 text-red-600" />
                    <AlertDescription className="text-red-700 font-medium">
                      {availabilityError}
                    </AlertDescription>
                  </Alert>
                )}
                <div className="bg-gray-50 p-4 rounded-xl border border-gray-200">
                  <div className="flex items-center gap-3 mb-3">
                    <MessageCircle className="w-5 h-5 text-blue-500" />
                    <span className="font-medium text-gray-800">
                      {dict.availability.messageToSendTitle}
                    </span>
                  </div>
                  <p className="text-sm text-gray-600 bg-white p-3 rounded-lg border italic">
                    {dict.availability.messageContent.replace(
                      '{{firstName}}',
                      availabilityDialog.selectedCandidate?.firstName || ''
                    )}
                  </p>
                </div>
              </>
            )}
          </div>
          {!availabilitySuccess && (
            <DialogFooter className="p-6 pt-0 gap-3">
              <Button
                variant="outline"
                onClick={availabilityDialog.onClose}
                disabled={isChecking}
                className="border-2 border-gray-200 hover:bg-gray-50 rounded-xl font-medium"
              >
                {dict.availability.buttons.cancel}
              </Button>
              <Button
                onClick={handleAvailabilityCheck}
                disabled={isChecking}
                className="bg-gradient-to-r from-orange-600 to-amber-600 hover:from-orange-700 hover:to-amber-700 text-white shadow-lg hover:shadow-xl transition-all duration-300 rounded-xl font-bold px-6"
              >
                {isChecking ? (
                  <Loader2 className="ml-2 h-5 w-5 animate-spin" />
                ) : (
                  <Clock className="ml-2 h-5 w-5" />
                )}
                {isChecking
                  ? dict.availability.buttons.checking
                  : dict.availability.buttons.check}
              </Button>
            </DialogFooter>
          )}
        </DialogContent>
      </Dialog>

      <Dialog open={suggestDialog.isOpen} onOpenChange={suggestDialog.onClose}>
        <DialogContent className="sm:max-w-md border-0 shadow-2xl bg-white rounded-3xl overflow-hidden">
          <EnhancedDialogHeader
            title={dict.suggest.title}
            description={dict.suggest.description}
            candidate={suggestDialog.selectedCandidate}
            icon={<Heart className="w-8 h-8" />}
            gradient="from-pink-500 to-rose-500"
          />
          <div className="p-6 -mt-6">
            <div className="bg-gradient-to-r from-pink-50 to-rose-50 p-4 rounded-xl border border-pink-100">
              <h4 className="font-bold text-pink-800 mb-2 flex items-center gap-2">
                <Sparkles className="w-4 h-4" />
                {dict.suggest.whatsNextTitle}
              </h4>
              <p className="text-sm text-pink-700">
                {dict.suggest.whatsNextDescription}
              </p>
            </div>
          </div>
          <DialogFooter className="p-6 pt-0 gap-3">
            <Button
              variant="outline"
              onClick={suggestDialog.onClose}
              className="border-2 border-gray-200 hover:bg-gray-50 rounded-xl font-medium"
            >
              {dict.suggest.buttons.cancel}
            </Button>
            <Button
              onClick={suggestDialog.onClose}
              className="bg-gradient-to-r from-pink-600 to-rose-600 hover:from-pink-700 hover:to-rose-700 text-white shadow-lg hover:shadow-xl transition-all duration-300 rounded-xl font-bold px-6"
            >
              <Heart className="ml-2 h-5 w-5" />
              {dict.suggest.buttons.continue}
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </>
  );
};

export default ActionDialogs;
--- End of Content for ActionDialogs.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\new\dialogs\AddManualCandidateDialog.tsx
--------------------------------------------------------------------------------
Content:
'use client';

import React, { useState, useCallback } from 'react';
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription,
  DialogFooter,
  DialogClose,
} from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { toast } from 'sonner';
import { Loader2, UserPlus, X, UploadCloud, Trash2 } from 'lucide-react';
import { Checkbox } from '@/components/ui/checkbox';
import Image from 'next/image';
import { Gender } from '@prisma/client';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select';
import { DatePicker } from '@/components/ui/date-picker';
import { RadioGroup, RadioGroupItem } from '@/components/ui/radio-group';
import type { MatchmakerPageDictionary } from '@/types/dictionaries/matchmaker';

interface AddManualCandidateDialogProps {
  isOpen: boolean;
  onClose: () => void;
  onCandidateAdded: () => void;
  dict: MatchmakerPageDictionary['candidatesManager']['addManualCandidateDialog'];
}

const MAX_IMAGES = 5;
const MAX_IMAGE_SIZE_MB = 5;

export const AddManualCandidateDialog: React.FC<
  AddManualCandidateDialogProps
> = ({ isOpen, onClose, onCandidateAdded, dict }) => {
  const [firstName, setFirstName] = useState('');
  const [lastName, setLastName] = useState('');
  const [email, setEmail] = useState('');
  const [gender, setGender] = useState<Gender | undefined>(undefined);
  const [birthDate, setBirthDate] = useState<Date | undefined>(undefined);
  const [manualEntryText, setManualEntryText] = useState('');
  const [images, setImages] = useState<File[]>([]);
  const [imagePreviews, setImagePreviews] = useState<string[]>([]);
  const [sendInvite, setSendInvite] = useState(false);
  const [isSaving, setIsSaving] = useState(false);
  const [birthDateInputMode, setBirthDateInputMode] = useState<'date' | 'age'>(
    'date'
  );
  const [ageInput, setAgeInput] = useState<string>('');

  const resetForm = useCallback(() => {
    setFirstName('');
    setLastName('');
    setEmail('');
    setGender(undefined);
    setBirthDate(undefined);
    setManualEntryText('');
    setImages([]);
    setImagePreviews([]);
    setSendInvite(false);
    setIsSaving(false);
    setBirthDateInputMode('date');
    setAgeInput('');
  }, []);

  const handleClose = () => {
    resetForm();
    onClose();
  };

  const handleImageChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    if (event.target.files) {
      const newFiles = Array.from(event.target.files);
      const validFiles: File[] = [];
      const validPreviews: string[] = [];

      newFiles.forEach((file) => {
        if (images.length + validFiles.length < MAX_IMAGES) {
          if (file.size <= MAX_IMAGE_SIZE_MB * 1024 * 1024) {
            validFiles.push(file);
            validPreviews.push(URL.createObjectURL(file));
          } else {
            toast.error(
              dict.fields.photos.fileTooLargeError
                .replace('{{fileName}}', file.name)
                .replace('{{maxSize}}', String(MAX_IMAGE_SIZE_MB))
            );
          }
        } else {
          toast.warning(
            dict.fields.photos.maxFilesWarning.replace(
              '{{max}}',
              String(MAX_IMAGES)
            )
          );
        }
      });

      setImages((prev) => [...prev, ...validFiles]);
      setImagePreviews((prev) => [...prev, ...validPreviews]);
    }
  };

  const removeImage = (index: number) => {
    setImages(images.filter((_, i) => i !== index));
    setImagePreviews(imagePreviews.filter((_, i) => i !== index));
  };

  const handleSubmit = async (event: React.FormEvent) => {
    event.preventDefault();
    setIsSaving(true);

    if (!firstName || !lastName || !gender || !manualEntryText) {
      toast.error(dict.toasts.error.missingFields);
      setIsSaving(false);
      return;
    }

    let finalBirthDate: Date | undefined;
    let isBirthDateApproximate = false;

    if (birthDateInputMode === 'date') {
      if (!birthDate) {
        toast.error(dict.toasts.error.invalidBirthDate);
        setIsSaving(false);
        return;
      }
      finalBirthDate = birthDate;
    } else {
      const ageNum = parseInt(ageInput, 10);
      if (isNaN(ageNum) || ageNum <= 0 || ageNum > 120) {
        toast.error(dict.toasts.error.invalidAge);
        setIsSaving(false);
        return;
      }
      const birthYear = new Date().getFullYear() - ageNum;
      finalBirthDate = new Date(birthYear, 0, 1);
      isBirthDateApproximate = true;
    }

    const formData = new FormData();
    formData.append('firstName', firstName);
    formData.append('lastName', lastName);
    if (email) formData.append('email', email);
    formData.append('gender', gender);
    formData.append('birthDate', finalBirthDate.toISOString());
    formData.append('birthDateIsApproximate', String(isBirthDateApproximate));
    formData.append('manualEntryText', manualEntryText);
    images.forEach((image) => formData.append('images', image));

    try {
      const response = await fetch('/api/matchmaker/candidates/manual', {
        method: 'POST',
        body: formData,
      });
      const result = await response.json();
      if (!response.ok || !result.success)
        throw new Error(result.error || dict.toasts.error.general);

      if (sendInvite && email && result.candidate?.id) {
        const promise = fetch(
          `/api/matchmaker/candidates/${result.candidate.id}/invite-setup`,
          {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ email }),
          }
        ).then(async (inviteResponse) => {
          if (!inviteResponse.ok) {
            const errorData = await inviteResponse.json().catch(() => ({}));
            throw new Error(errorData.error || 'Invitation failed');
          }
          return inviteResponse.json();
        });
        toast.promise(promise, {
          loading: dict.toasts.success.inviteLoading,
          success: dict.toasts.success.inviteSent,
          error: (err: Error) =>
            dict.toasts.success.inviteError.replace('{{error}}', err.message),
        });
      } else {
        toast.success(dict.toasts.success.candidateAdded);
      }
      onCandidateAdded();
      handleClose();
    } catch (error) {
      console.error('Error adding manual candidate:', error);
      toast.error(
        `${dict.toasts.error.general}: ${error instanceof Error ? error.message : 'Unknown error'}`
      );
    } finally {
      setIsSaving(false);
    }
  };

  return (
    <Dialog
      open={isOpen}
      onOpenChange={(open) => {
        if (!open) handleClose();
      }}
    >
      <DialogContent className="max-w-2xl">
        <DialogClose asChild>
          <button className="absolute right-4 top-4 p-1 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2">
            <X className="h-4 w-4" />
            <span className="sr-only">{dict.close}</span>
          </button>
        </DialogClose>
        <DialogHeader>
          <DialogTitle className="flex items-center gap-2 text-right">
            <UserPlus className="w-6 h-6 text-primary" />
            {dict.title}
          </DialogTitle>
          <DialogDescription className="text-right">
            {dict.description}
          </DialogDescription>
        </DialogHeader>
        <form
          onSubmit={handleSubmit}
          className="space-y-6 py-4 max-h-[70vh] overflow-y-auto pr-2 pl-1"
        >
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <Label htmlFor="firstName" className="text-right block">
                {dict.fields.firstName.label}{' '}
                <span className="text-red-500">*</span>
              </Label>
              <Input
                id="firstName"
                value={firstName}
                onChange={(e) => setFirstName(e.target.value)}
                placeholder={dict.fields.firstName.placeholder}
                required
                dir="rtl"
              />
            </div>
            <div>
              <Label htmlFor="lastName" className="text-right block">
                {dict.fields.lastName.label}{' '}
                <span className="text-red-500">*</span>
              </Label>
              <Input
                id="lastName"
                value={lastName}
                onChange={(e) => setLastName(e.target.value)}
                placeholder={dict.fields.lastName.placeholder}
                required
                dir="rtl"
              />
            </div>
          </div>
          <div>
            <Label htmlFor="email" className="text-right block">
              {dict.fields.email.label}
            </Label>
            <Input
              id="email"
              type="email"
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              placeholder={dict.fields.email.placeholder}
              dir="ltr"
            />
            <p className="text-xs text-gray-500 mt-1 text-right">
              {dict.fields.email.description}
            </p>
          </div>
          <div className="flex items-center space-x-2 rtl:space-x-reverse pt-2">
            <Checkbox
              id="sendInvite"
              checked={sendInvite}
              onCheckedChange={(checked) => setSendInvite(Boolean(checked))}
              disabled={!email || isSaving}
            />
            <Label
              htmlFor="sendInvite"
              className={`cursor-pointer transition-colors ${!email ? 'text-gray-400 cursor-not-allowed' : 'text-gray-700'}`}
            >
              {dict.fields.sendInvite.label}
            </Label>
          </div>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <Label htmlFor="gender" className="text-right block">
                {dict.fields.gender.label}{' '}
                <span className="text-red-500">*</span>
              </Label>
              <Select
                value={gender}
                onValueChange={(value) => setGender(value as Gender)}
              >
                <SelectTrigger id="gender" dir="rtl">
                  <SelectValue placeholder={dict.fields.gender.placeholder} />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value={Gender.MALE}>
                    {dict.fields.gender.male}
                  </SelectItem>
                  <SelectItem value={Gender.FEMALE}>
                    {dict.fields.gender.female}
                  </SelectItem>
                </SelectContent>
              </Select>
            </div>
            <div>
              <div>
                <Label className="text-right block mb-2">
                  {dict.fields.birthDate.modeLabel}{' '}
                  <span className="text-red-500">*</span>
                </Label>
                <RadioGroup
                  dir="rtl"
                  value={birthDateInputMode}
                  onValueChange={(value: 'date' | 'age') =>
                    setBirthDateInputMode(value)
                  }
                  className="flex space-x-4 rtl:space-x-reverse mb-3"
                >
                  <div className="flex items-center space-x-2 rtl:space-x-reverse">
                    <RadioGroupItem value="date" id="r-date" />
                    <Label htmlFor="r-date" className="cursor-pointer">
                      {dict.fields.birthDate.dateMode}
                    </Label>
                  </div>
                  <div className="flex items-center space-x-2 rtl:space-x-reverse">
                    <RadioGroupItem value="age" id="r-age" />
                    <Label htmlFor="r-age" className="cursor-pointer">
                      {dict.fields.birthDate.ageMode}
                    </Label>
                  </div>
                </RadioGroup>
              </div>
              {birthDateInputMode === 'date' ? (
                <div>
                  <Label htmlFor="birthDate" className="text-right block">
                    {dict.fields.birthDate.dateLabel}{' '}
                    <span className="text-red-500">*</span>
                  </Label>
                  <DatePicker
                    value={birthDate ? { from: birthDate } : undefined}
                    onChange={({ from }) => setBirthDate(from)}
                    isRange={false}
                    placeholder={dict.fields.birthDate.datePlaceholder}
                    className="w-full"
                  />
                </div>
              ) : (
                <div>
                  <Label htmlFor="ageInput" className="text-right block">
                    {dict.fields.birthDate.ageLabel}{' '}
                    <span className="text-red-500">*</span>
                  </Label>
                  <Input
                    id="ageInput"
                    type="number"
                    value={ageInput}
                    onChange={(e) => setAgeInput(e.target.value)}
                    placeholder={dict.fields.birthDate.agePlaceholder}
                    required={birthDateInputMode === 'age'}
                    dir="rtl"
                    min="1"
                    max="120"
                  />
                  <p className="text-xs text-gray-500 mt-1 text-right">
                    {dict.fields.birthDate.ageDescription}
                  </p>
                </div>
              )}
            </div>
          </div>
          <div>
            <Label htmlFor="manualEntryText" className="text-right block">
              {dict.fields.notes.label} <span className="text-red-500">*</span>
            </Label>
            <Textarea
              id="manualEntryText"
              value={manualEntryText}
              onChange={(e) => setManualEntryText(e.target.value)}
              placeholder={dict.fields.notes.placeholder}
              rows={6}
              required
              className="min-h-[100px]"
              dir="rtl"
            />
          </div>
          <div>
            <Label htmlFor="image-upload" className="text-right block">
              {dict.fields.photos.label.replace('{{max}}', String(MAX_IMAGES))}
            </Label>
            <div className="mt-2 flex items-center justify-center w-full">
              <label
                htmlFor="image-upload"
                className="flex flex-col items-center justify-center w-full h-32 border-2 border-gray-300 border-dashed rounded-lg cursor-pointer bg-gray-50 hover:bg-gray-100"
              >
                <div className="flex flex-col items-center justify-center pt-5 pb-6">
                  <UploadCloud className="w-8 h-8 mb-2 text-gray-500" />
                  <p className="mb-2 text-sm text-gray-500 text-center">
                    {dict.fields.photos.cta}
                  </p>
                  <p className="text-xs text-gray-500">
                    {dict.fields.photos.description.replace(
                      '{{maxSize}}',
                      String(MAX_IMAGE_SIZE_MB)
                    )}
                  </p>
                </div>
                <Input
                  id="image-upload"
                  type="file"
                  multiple
                  accept="image/png, image/jpeg, image/webp"
                  className="hidden"
                  onChange={handleImageChange}
                  disabled={images.length >= MAX_IMAGES}
                />
              </label>
            </div>
            {imagePreviews.length > 0 && (
              <div className="mt-4 grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-5 gap-4">
                {imagePreviews.map((preview, index) => (
                  <div key={index} className="relative group">
                    <Image
                      src={preview}
                      alt={dict.fields.photos.previewAlt.replace(
                        '{{index}}',
                        String(index + 1)
                      )}
                      width={100}
                      height={100}
                      className="rounded-md object-cover w-full aspect-square"
                      onLoad={() => URL.revokeObjectURL(preview)}
                    />
                    <Button
                      type="button"
                      variant="destructive"
                      size="icon"
                      className="absolute top-1 right-1 h-6 w-6 opacity-0 group-hover:opacity-100 transition-opacity p-0"
                      onClick={() => removeImage(index)}
                    >
                      <Trash2 className="h-3 w-3" />
                      <span className="sr-only">
                        {dict.fields.photos.removeLabel}
                      </span>
                    </Button>
                  </div>
                ))}
              </div>
            )}
          </div>
          <DialogFooter className="pt-4 sm:justify-start">
            <Button
              type="submit"
              disabled={isSaving}
              className="w-full sm:w-auto"
            >
              {isSaving ? (
                <Loader2 className="w-4 h-4 mr-2 animate-spin" />
              ) : (
                <UserPlus className="w-4 h-4 mr-2" />
              )}
              {isSaving ? dict.buttons.adding : dict.buttons.add}
            </Button>
            <DialogClose asChild>
              <Button
                variant="outline"
                type="button"
                className="w-full sm:w-auto mt-2 sm:mt-0"
              >
                <X className="w-4 h-4 mr-2" />
                {dict.buttons.cancel}
              </Button>
            </DialogClose>
          </DialogFooter>
        </form>
      </DialogContent>
    </Dialog>
  );
};
--- End of Content for AddManualCandidateDialog.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\new\dialogs\AiMatchAnalysisDialog.tsx
--------------------------------------------------------------------------------
Content:
// File: src/app/components/matchmaker/new/dialogs/AiMatchAnalysisDialog.tsx
'use client';
import React, { useState, useEffect, useMemo } from 'react';
import Image from 'next/image';
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription,
  DialogClose,
} from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { ScrollArea } from '@/components/ui/scroll-area';
import {
  X,
  Sparkles,
  CheckCircle,
  AlertTriangle,
  MessageSquare,
  Info,
  XCircle,
  Star,
  Cake,
  MapPin,
  BookMarked,
  Users,
} from 'lucide-react';
import type { Candidate } from '../types/candidates';
import { cn, getRelativeCloudinaryPath } from '@/lib/utils';
import { motion, AnimatePresence } from 'framer-motion';
import type { MatchmakerPageDictionary } from '@/types/dictionaries/matchmaker';

// --- Interfaces ---
interface AiAnalysis {
  overallScore: number;
  matchSummary: string;
  compatibilityPoints: {
    area: string;
    explanation: string;
    strength: 'HIGH' | 'MEDIUM' | 'LOW';
  }[];
  potentialChallenges: {
    area: string;
    explanation: string;
    severity: 'HIGH' | 'MEDIUM' | 'LOW';
  }[];
  suggestedConversationStarters: string[];
}
interface AiMatchAnalysisDialogProps {
  isOpen: boolean;
  onClose: () => void;
  targetCandidate: Candidate | null;
  comparisonCandidates: Candidate[];
  dict: MatchmakerPageDictionary['candidatesManager']['aiAnalysis'];
  locale: string; // <--- הוסף את השורה הזו
}

// --- Helper Functions ---
const getInitials = (firstName?: string, lastName?: string): string => {
  let initials = '';
  if (firstName && firstName.length > 0) initials += firstName[0];
  if (lastName && lastName.length > 0) initials += lastName[0];
  return initials.toUpperCase() || '?';
};
const calculateAge = (birthDate: Date | string): number => {
  if (!birthDate) return 0;
  const today = new Date();
  const birth = new Date(birthDate);
  if (isNaN(birth.getTime())) return 0;
  let age = today.getFullYear() - birth.getFullYear();
  const monthDiff = today.getMonth() - birth.getMonth();
  if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birth.getDate()))
    age--;
  return age > 0 ? age : 0;
};

// --- Sub-components ---
const MiniProfileHeader: React.FC<{
  candidate: Candidate;
  score?: number;
  isTarget?: boolean;
  dict: MatchmakerPageDictionary['candidatesManager']['aiAnalysis']['miniProfile'];
}> = ({ candidate, score, isTarget = false, dict }) => {
  const mainImage = candidate.images?.find((img) => img.isMain);
  const age = calculateAge(candidate.profile.birthDate);
  const initials = getInitials(candidate.firstName, candidate.lastName);
  return (
    <div className="p-4 rounded-t-lg bg-gradient-to-b from-slate-50 to-slate-100 border-b border-slate-200 text-center relative">
      <div className="relative w-24 h-24 mx-auto rounded-full overflow-hidden border-4 border-white shadow-lg ring-2 ring-offset-2 ring-cyan-400">
        {mainImage?.url ? (
          <Image
            src={getRelativeCloudinaryPath(mainImage.url)}
            alt={`Profile picture of ${candidate.firstName}`}
            layout="fill"
            className="object-cover"
            sizes="96px"
          />
        ) : (
          <div className="w-full h-full flex items-center justify-center bg-gradient-to-br from-slate-200 to-slate-300">
            <span className="text-4xl font-medium text-slate-500">
              {initials}
            </span>
          </div>
        )}
      </div>
      {!isTarget && typeof score === 'number' && (
        <Badge className="absolute top-4 left-4 bg-gradient-to-r from-teal-400 to-cyan-500 text-white border-0 shadow-lg px-3 py-1.5 text-sm font-bold flex items-center gap-1.5">
          <Sparkles className="w-4 h-4" />
          {dict.matchBadge.replace('{{score}}', String(score))}
        </Badge>
      )}
      {isTarget && (
        <Badge className="absolute top-4 right-4 bg-gradient-to-r from-blue-500 to-indigo-600 text-white border-0 shadow-lg px-3 py-1.5 text-sm font-bold flex items-center gap-1.5">
          <Star className="w-4 h-4" />
          {dict.targetBadge}
        </Badge>
      )}
      <h3 className="mt-3 text-lg font-bold text-slate-800">
        {candidate.firstName} {candidate.lastName}
      </h3>
      <div className="mt-2 flex justify-center items-center flex-wrap gap-x-3 gap-y-1 text-xs text-slate-600">
        <div className="flex items-center gap-1">
          <Cake className="w-3.5 h-3.5 text-slate-400" /> {age} {dict.years}
        </div>
        <div className="flex items-center gap-1">
          <MapPin className="w-3.5 h-3.5 text-slate-400" />{' '}
          {candidate.profile.city || dict.notSpecified}
        </div>
        <div className="flex items-center gap-1">
          <BookMarked className="w-3.5 h-3.5 text-slate-400" />{' '}
          {candidate.profile.religiousLevel || dict.notSpecified}
        </div>
      </div>
    </div>
  );
};
const AnalysisItem: React.FC<{
  icon: React.ElementType;
  iconColor: string;
  area: string;
  explanation: string;
}> = ({ icon: Icon, iconColor, area, explanation }) => (
  <div className="flex items-start gap-4 p-3 rounded-lg hover:bg-slate-50/70 transition-colors">
    <div
      className={cn(
        'mt-1 flex-shrink-0 rounded-full p-2 bg-opacity-10',
        iconColor.replace('text-', 'bg-')
      )}
    >
      <Icon className={cn('h-5 w-5', iconColor)} />
    </div>
    <div>
      <h4 className="font-semibold text-gray-800">{area}</h4>
      <p className="text-sm text-gray-600 leading-relaxed">{explanation}</p>
    </div>
  </div>
);
const ComparisonTable: React.FC<{
  target: Candidate;
  comparison: Candidate;
  dict: MatchmakerPageDictionary['candidatesManager']['aiAnalysis']['comparisonTable'];
  language: 'he' | 'en';
}> = ({ target, comparison, dict, language }) => {
  const fieldsToCompare = [
    {
      key: 'age',
      label: dict.fields.age,
      formatter: (c: Candidate) =>
        `${calculateAge(c.profile.birthDate)}${
          c.profile.birthDateIsApproximate ? ` ${dict.fields.ageApprox}` : ''
        }`,
    },
    {
      key: 'city',
      label: dict.fields.city,
      formatter: (c: Candidate) => c.profile.city || 'לא צוין',
    },
    {
      key: 'maritalStatus',
      label: dict.fields.maritalStatus,
      formatter: (c: Candidate) => c.profile.maritalStatus || 'לא צוין',
    },
    {
      key: 'religiousLevel',
      label: dict.fields.religiousLevel,
      formatter: (c: Candidate) => c.profile.religiousLevel || 'לא צוין',
    },
    {
      key: 'occupation',
      label: dict.fields.occupation,
      formatter: (c: Candidate) => c.profile.occupation || 'לא צוין',
    },
    {
      key: 'education',
      label: dict.fields.education,
      formatter: (c: Candidate) => c.profile.education || 'לא צוין',
    },
  ];
  return (
    <div className="overflow-x-auto border rounded-lg">
      <table
        className={cn(
          'w-full text-sm border-collapse',
          language === 'he' ? 'text-right' : 'text-left'
        )}
      >
        <thead>
          <tr className="bg-slate-50">
            <th className="p-3 font-semibold text-slate-600 border-b border-slate-200">
              {dict.criterion}
            </th>
            <th className="p-3 font-semibold text-slate-600 border-b border-slate-200 text-center">
              {target.firstName}
            </th>
            <th className="p-3 font-semibold text-slate-600 border-b border-slate-200 text-center">
              {comparison.firstName}
            </th>
          </tr>
        </thead>
        <tbody>
          {fieldsToCompare.map((field, index) => (
            <tr
              key={field.key}
              className={index % 2 === 0 ? 'bg-white' : 'bg-slate-50/50'}
            >
              <td className="p-3 font-medium text-slate-500 border-b border-slate-200">
                {field.label}
              </td>
              <td className="p-3 text-slate-700 border-b border-slate-200 text-center">
                {field.formatter(target)}
              </td>
              <td className="p-3 text-slate-700 border-b border-slate-200 text-center">
                {field.formatter(comparison)}
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};
const AnalysisSkeleton: React.FC = () => (
  <div className="space-y-6 p-4 animate-pulse">
    <div className="p-4 bg-gray-100 rounded-lg">
      <div className="h-20 bg-gray-200 rounded-md"></div>
    </div>
    <div className="space-y-4">
      <div className="h-5 bg-gray-200 rounded-md w-1/3"></div>
      <div className="flex gap-4">
        <div className="rounded-full bg-gray-200 h-10 w-10"></div>
        <div className="flex-1 space-y-2 py-1">
          <div className="h-4 bg-gray-200 rounded w-full"></div>
          <div className="h-3 bg-gray-300 rounded w-5/6"></div>
        </div>
      </div>
      <div className="flex gap-4">
        <div className="rounded-full bg-gray-200 h-10 w-10"></div>
        <div className="flex-1 space-y-2 py-1">
          <div className="h-4 bg-gray-200 rounded w-full"></div>
          <div className="h-3 bg-gray-300 rounded w-4/6"></div>
        </div>
      </div>
    </div>
  </div>
);
const DialogBody: React.FC<AiMatchAnalysisDialogProps> = ({
  isOpen,
  locale,
  onClose,
  targetCandidate,
  comparisonCandidates,
  dict,
}) => {
  const [activeComparisonId, setActiveComparisonId] = useState<string | null>(
    null
  );
  const [analyses, setAnalyses] = useState<
    Record<string, AiAnalysis | 'error' | 'loading'>
  >({});
  const [language, setLanguage] = useState<'he' | 'en'>(
    locale === 'he' ? 'he' : 'en'
  );
  const [isMobile, setIsMobile] = useState(false);
  useEffect(() => {
    const checkMobile = () => setIsMobile(window.innerWidth < 768);
    checkMobile();
    window.addEventListener('resize', checkMobile);
    return () => window.removeEventListener('resize', checkMobile);
  }, []);
  const activeComparisonCandidate = useMemo(
    () => comparisonCandidates.find((c) => c.id === activeComparisonId),
    [activeComparisonId, comparisonCandidates]
  );
  const activeAnalysis = useMemo(
    () => (activeComparisonId ? analyses[activeComparisonId] || null : null),
    [activeComparisonId, analyses]
  );
  useEffect(() => {
    if (
      isOpen &&
      comparisonCandidates.length > 0 &&
      !comparisonCandidates.some((c) => c.id === activeComparisonId)
    ) {
      setActiveComparisonId(comparisonCandidates[0].id);
    }
  }, [isOpen, comparisonCandidates, activeComparisonId]);
  useEffect(() => {
    if (
      isOpen &&
      targetCandidate &&
      activeComparisonId &&
      analyses[activeComparisonId] === undefined
    ) {
      const fetchAnalysis = async () => {
        setAnalyses((prev) => ({ ...prev, [activeComparisonId]: 'loading' }));
        try {
          const response = await fetch('/api/ai/generate-rationale', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
              userId1: targetCandidate.id,
              userId2: activeComparisonId,
              language: language,
            }),
          });
          const data = await response.json();
          if (response.ok && data.success) {
            setAnalyses((prev) => ({
              ...prev,
              [activeComparisonId]: data.analysis,
            }));
          } else {
            throw new Error(data.error || 'Failed to fetch analysis');
          }
        } catch (e) {
          console.error(`Failed to get analysis for ${activeComparisonId}:`, e);
          setAnalyses((prev) => ({ ...prev, [activeComparisonId]: 'error' }));
        }
      };
      fetchAnalysis();
    }
  }, [isOpen, targetCandidate, activeComparisonId, language, analyses]);
  const handleLanguageChange = (newLang: 'he' | 'en') => {
    if (newLang !== language) {
      setLanguage(newLang);
      setAnalyses({});
    }
  };
  if (!targetCandidate) return null;
  return (
    <DialogContent
      className="max-w-6xl w-full h-[95vh] flex flex-col p-0 overflow-hidden"
      dir={language === 'he' ? 'rtl' : 'ltr'}
    >
      <DialogClose
        asChild
        className={cn(
          'absolute top-3 z-50',
          language === 'he' ? 'left-3' : 'right-3'
        )}
      >
        <Button variant="ghost" size="icon" className="rounded-full">
          <X className="h-5 w-5" />
        </Button>
      </DialogClose>
      <div className="flex-1 flex flex-col md:flex-row min-h-0">
        {isMobile ? (
          <div className="p-4 border-b md:hidden">
            <Select
              value={activeComparisonId || ''}
              onValueChange={setActiveComparisonId}
            >
              <SelectTrigger className="w-full">
                <SelectValue
                  placeholder={dict.header.languageSelectPlaceholder}
                />
              </SelectTrigger>
              <SelectContent>
                {comparisonCandidates.map((c) => (
                  <SelectItem key={c.id} value={c.id}>
                    {c.firstName} {c.lastName}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
          </div>
        ) : (
          <aside
            className={cn(
              'w-1/4 bg-slate-50/50 flex flex-col flex-shrink-0',
              language === 'he' ? 'border-l' : 'border-r'
            )}
          >
            <h3 className="p-3 text-sm font-semibold text-slate-600 border-b">
              {dict.sidebar.title.replace(
                '{{count}}',
                String(comparisonCandidates.length)
              )}
            </h3>
            <ScrollArea className="flex-1">
              {comparisonCandidates.map((candidate) => {
                const mainImageUrl = candidate.images?.find(
                  (img) => img.isMain
                )?.url;
                return (
                  <button
                    key={candidate.id}
                    onClick={() => setActiveComparisonId(candidate.id)}
                    className={cn(
                      'w-full p-3 flex items-center gap-3 border-b border-slate-200/60 hover:bg-slate-100 transition-colors',
                      language === 'he' ? 'text-right' : 'text-left',
                      activeComparisonId === candidate.id &&
                        'bg-cyan-50 border-cyan-500 font-semibold',
                      activeComparisonId === candidate.id &&
                        (language === 'he' ? 'border-r-4' : 'border-l-4')
                    )}
                  >
                    <div className="relative w-10 h-10 rounded-full overflow-hidden flex-shrink-0 bg-gray-200">
                      {mainImageUrl ? (
                        <Image
                          src={getRelativeCloudinaryPath(mainImageUrl)}
                          alt={candidate.firstName}
                          layout="fill"
                          className="object-cover"
                          sizes="40px"
                        />
                      ) : (
                        <div className="w-full h-full flex items-center justify-center">
                          <span className="text-sm font-bold text-gray-500">
                            {getInitials(
                              candidate.firstName,
                              candidate.lastName
                            )}
                          </span>
                        </div>
                      )}
                    </div>
                    <div className="flex-1 min-w-0">
                      <p className="truncate text-sm text-slate-800">
                        {candidate.firstName} {candidate.lastName}
                      </p>
                      <p className="text-xs text-slate-500">
                        {calculateAge(candidate.profile.birthDate)} |{' '}
                        {candidate.profile.city}
                      </p>
                    </div>
                    {analyses[candidate.id] &&
                      analyses[candidate.id] !== 'error' &&
                      analyses[candidate.id] !== 'loading' && (
                        <Badge
                          variant="secondary"
                          className="bg-teal-100 text-teal-800"
                        >
                          {(analyses[candidate.id] as AiAnalysis).overallScore}%
                        </Badge>
                      )}
                  </button>
                );
              })}
            </ScrollArea>
          </aside>
        )}
        <main className="flex-1 flex flex-col min-h-0 bg-white">
          {!activeComparisonCandidate ? (
            <div className="flex-1 flex flex-col items-center justify-center text-center p-6 text-gray-500">
              <Users className="w-16 h-16 text-gray-300 mb-4" />
              <h3 className="text-lg font-semibold">
                {dict.main.selectCandidate.title}
              </h3>
              <p className="max-w-xs">
                {dict.main.selectCandidate.description}
              </p>
            </div>
          ) : (
            <>
              <div className="grid grid-cols-1 md:grid-cols-2 flex-shrink-0">
                <MiniProfileHeader
                  candidate={targetCandidate}
                  isTarget
                  dict={dict.miniProfile}
                />
                <MiniProfileHeader
                  candidate={activeComparisonCandidate}
                  score={(activeAnalysis as AiAnalysis)?.overallScore}
                  dict={dict.miniProfile}
                />
              </div>
              <Tabs
                defaultValue="summary"
                className="flex-1 flex flex-col min-h-0"
              >
                <TabsList className="mx-4 mt-4 bg-slate-100 p-1 rounded-lg">
                  <TabsTrigger value="summary">{dict.tabs.summary}</TabsTrigger>
                  <TabsTrigger value="challenges">
                    {dict.tabs.challenges}
                  </TabsTrigger>
                  <TabsTrigger value="comparison">
                    {dict.tabs.comparison}
                  </TabsTrigger>
                  <TabsTrigger value="conversation">
                    {dict.tabs.conversation}
                  </TabsTrigger>
                </TabsList>
                <ScrollArea className="flex-1">
                  <AnimatePresence mode="wait">
                    <motion.div
                      key={activeComparisonId}
                      initial={{ opacity: 0, y: 10 }}
                      animate={{ opacity: 1, y: 0 }}
                      exit={{ opacity: 0, y: -10 }}
                      transition={{ duration: 0.2 }}
                      className="p-4 md:p-6"
                    >
                      {activeAnalysis === 'loading' && <AnalysisSkeleton />}
                      {activeAnalysis === 'error' && (
                        <div className="text-center py-10">
                          <XCircle className="w-12 h-12 text-red-400 mx-auto mb-4" />
                          <h3 className="font-semibold text-xl text-red-600">
                            {dict.main.error.title}
                          </h3>
                          <p className="text-gray-500 mt-2">
                            {dict.main.error.description}
                          </p>
                        </div>
                      )}
                      {activeAnalysis &&
                        activeAnalysis !== 'error' &&
                        activeAnalysis !== 'loading' && (
                          <>
                            <TabsContent
                              value="summary"
                              className="space-y-6 mt-0"
                            >
                              <div className="p-4 bg-slate-50/70 rounded-lg border border-slate-200">
                                <h3 className="font-semibold text-gray-800 mb-2 flex items-center gap-2">
                                  <Info className="w-5 h-5 text-blue-500" />
                                  {dict.analysis.summaryTitle}
                                </h3>
                                <p className="text-sm text-gray-600 leading-relaxed">
                                  {(activeAnalysis as AiAnalysis).matchSummary}
                                </p>
                              </div>
                              <div>
                                <h3 className="font-semibold text-gray-800 mb-3 flex items-center gap-2">
                                  <CheckCircle className="w-5 h-5 text-green-500" />
                                  {dict.analysis.strengthsTitle}
                                </h3>
                                <div className="space-y-4">
                                  {(
                                    activeAnalysis as AiAnalysis
                                  ).compatibilityPoints.map((point) => (
                                    <AnalysisItem
                                      key={point.area}
                                      icon={CheckCircle}
                                      iconColor="text-green-500"
                                      {...point}
                                    />
                                  ))}
                                </div>
                              </div>
                            </TabsContent>
                            <TabsContent
                              value="challenges"
                              className="space-y-6 mt-0"
                            >
                              <div>
                                <h3 className="font-semibold text-gray-800 mb-3 flex items-center gap-2">
                                  <AlertTriangle className="w-5 h-5 text-amber-500" />
                                  {dict.analysis.challengesTitle}
                                </h3>
                                <div className="space-y-4">
                                  {(
                                    activeAnalysis as AiAnalysis
                                  ).potentialChallenges.map((challenge) => (
                                    <AnalysisItem
                                      key={challenge.area}
                                      icon={AlertTriangle}
                                      iconColor="text-amber-500"
                                      {...challenge}
                                    />
                                  ))}
                                </div>
                              </div>
                            </TabsContent>
                            <TabsContent value="comparison" className="mt-0">
                              <ComparisonTable
                                target={targetCandidate}
                                comparison={activeComparisonCandidate}
                                dict={dict.comparisonTable}
                                language={language}
                              />
                            </TabsContent>
                            <TabsContent
                              value="conversation"
                              className="space-y-4 mt-0"
                            >
                              <h3 className="font-semibold text-gray-800 mb-3 flex items-center gap-2">
                                <MessageSquare className="w-5 h-5 text-indigo-500" />
                                {dict.analysis.conversationStartersTitle}
                              </h3>
                              <ul className="space-y-3 list-inside">
                                {(
                                  activeAnalysis as AiAnalysis
                                ).suggestedConversationStarters.map(
                                  (starter, index) => (
                                    <li
                                      key={index}
                                      className="flex items-start gap-2 p-2 rounded-md hover:bg-indigo-50/50"
                                    >
                                      <MessageSquare className="w-4 h-4 text-indigo-400 mt-1 flex-shrink-0" />
                                      <span className="text-sm text-gray-700">
                                        {starter}
                                      </span>
                                    </li>
                                  )
                                )}
                              </ul>
                            </TabsContent>
                          </>
                        )}
                    </motion.div>
                  </AnimatePresence>
                </ScrollArea>
              </Tabs>
            </>
          )}
        </main>
      </div>
    </DialogContent>
  );
};
export const AiMatchAnalysisDialog = (props: AiMatchAnalysisDialogProps) => {
  const { isOpen, onClose } = props;
  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      {isOpen && <DialogBody {...props} />}
    </Dialog>
  );
};
--- End of Content for AiMatchAnalysisDialog.tsx ---

================================================================================
Directory: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\new\hooks
================================================================================

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\new\hooks\filterUtils
--------------------------------------------------------------------------------
Content:
--- End of Content for filterUtils ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\new\hooks\useCandidates.ts
--------------------------------------------------------------------------------
Content:
import { useState, useEffect, useMemo, useCallback } from 'react';
import Papa from 'papaparse';
import type { Candidate, CandidatesFilter } from '../types/candidates';
import type { CandidateProfile } from '../types/candidates';
import { Dispatch, SetStateAction } from 'react';

export interface UseCandidatesReturn {
  loading: boolean;
  error: string | null;
  candidates: Candidate[];
  maleCandidates: Candidate[];
  femaleCandidates: Candidate[];
  filteredCandidates: Candidate[];
  filters: CandidatesFilter;
  setFilters: Dispatch<SetStateAction<CandidatesFilter>>;
  refresh: () => Promise<void>;
  totalCount: number;
  filteredCount: number;
  maleCount: number;
  femaleCount: number;
  searchResults: {
    term: string;
    count: number;
    male: number;
    female: number;
  } | null;
  exportCandidates: (candidates: Candidate[], filters: CandidatesFilter) => Promise<void>;
  updateCandidate: (id: string, updates: Partial<CandidateProfile>) => Promise<void>;
  sorting: {
    field: string;
    direction: 'asc' | 'desc';
  };
  setSorting: (field: string, direction: 'asc' | 'desc') => void;
  searchSuggestions: (term: string) => Promise<Candidate[]>;
}

export const useCandidates = (initialFilters: CandidatesFilter = {}): UseCandidatesReturn => {
  // Base states
  const [candidates, setCandidates] = useState<Candidate[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [filters, setFilters] = useState<CandidatesFilter>(initialFilters);
  const [searchResults, setSearchResults] = useState<{
    term: string;
    count: number;
    male: number;
    female: number;
  } | null>(null);
  const [sorting, setSortingState] = useState<{
    field: string;
    direction: 'asc' | 'desc';
  }>({
    field: 'lastActive',
    direction: 'desc',
  });

  // Helper function to calculate age
  const calculateAge = useCallback((birthDate: Date): number => {
    const today = new Date();
    const birth = new Date(birthDate);
    let age = today.getFullYear() - birth.getFullYear();
    const monthDiff = today.getMonth() - birth.getMonth();
    
    if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birth.getDate())) {
      age--;
    }
    return age;
  }, []);

  // Fetch candidates data
  const fetchCandidates = async () => {
    try {
      setLoading(true);
      setError(null);
      
      const response = await fetch('/api/matchmaker/candidates');
      if (!response.ok) {
        throw new Error(await response.text());
      }
      
      const data = await response.json();
     
      
      if (!data.success) {
        throw new Error(data.error || 'Failed to load candidates');
      }
  
      setCandidates(data.clients);
    } catch (err) {
      setError(err instanceof Error ? err.message : 'An unexpected error occurred');
      console.error('Error fetching candidates:', err);
    } finally {
      setLoading(false);
    }
  };

  // Set sorting field and direction
  const setSorting = useCallback((field: string, direction: 'asc' | 'desc') => {
    setSortingState({ field, direction });
  }, []);

  // Search suggestions based on a term
  const searchSuggestions = useCallback(async (term: string): Promise<Candidate[]> => {
    if (!term || term.length < 2) return [];
    
    // Local search implementation for quick response
    const searchTerm = term.toLowerCase();
    return candidates.filter(candidate => {
      const searchableText = `
        ${candidate.firstName} 
        ${candidate.lastName} 
        ${candidate.profile.occupation || ''} 
        ${candidate.profile.city || ''}
        ${candidate.profile.religiousLevel || ''}
      `.toLowerCase();
      
      return searchableText.includes(searchTerm);
    }).slice(0, 10);
    
    // Alternatively, you can implement an API call for server-side search
    // if the dataset is very large
  }, [candidates]);

  const sortCandidates = useCallback((candidatesList: Candidate[], field: string, direction: 'asc' | 'desc') => {
    return [...candidatesList].sort((a, b) => {
      let valueA, valueB;
      
      switch (field) {
        case 'name':
          valueA = `${a.firstName} ${a.lastName}`.toLowerCase();
          valueB = `${b.firstName} ${b.lastName}`.toLowerCase();
          break;
        case 'age':
          valueA = calculateAge(a.profile.birthDate);
          valueB = calculateAge(b.profile.birthDate);
          break;
        case 'city':
          valueA = (a.profile.city || '').toLowerCase();
          valueB = (b.profile.city || '').toLowerCase();
          break;
        case 'religiousLevel':
          valueA = (a.profile.religiousLevel || '').toLowerCase();
          valueB = (b.profile.religiousLevel || '').toLowerCase();
          break;
        case 'lastActive':
          valueA = a.profile.lastActive ? new Date(a.profile.lastActive).getTime() : 0;
          valueB = b.profile.lastActive ? new Date(b.profile.lastActive).getTime() : 0;
          break;
        case 'registrationDate':
          valueA = new Date(a.createdAt).getTime();
          valueB = new Date(b.createdAt).getTime();
          break;
        case 'height':
          valueA = a.profile.height || 0;
          valueB = b.profile.height || 0;
          break;
        default:
          valueA = 0;
          valueB = 0;
      }
      
      if (valueA < valueB) return direction === 'asc' ? -1 : 1;
      if (valueA > valueB) return direction === 'asc' ? 1 : -1;
      return 0;
    });
  }, [calculateAge]);
  
  // פונקציה לבדיקה אם מועמד עומד בקריטריוני חיפוש
  const checkSearchMatch = useCallback((candidate: Candidate, searchTerm: string): boolean => {
    if (!searchTerm) return true;
    
    // נרמול החיפוש
    const normalizedTerm = searchTerm.toLowerCase().trim();
    if (!normalizedTerm) return true;
    
    // בדיקת התאמה בשדות השונים
    const fullName = `${candidate.firstName} ${candidate.lastName}`.toLowerCase();
    const city = (candidate.profile.city || '').toLowerCase();
    const occupation = (candidate.profile.occupation || '').toLowerCase();
    const religiousLevel = (candidate.profile.religiousLevel || '').toLowerCase();
    
    return (
      fullName.includes(normalizedTerm) || 
      city.includes(normalizedTerm) || 
      occupation.includes(normalizedTerm) || 
      religiousLevel.includes(normalizedTerm)
    );
  }, []);

  // בקובץ useCandidates.ts - לעדכן את החלק של filteredCandidates
  const filteredCandidates = useMemo(() => {
    console.log("Filtering candidates with filters:", filters);
    
    // אם הסינון הנפרד מופעל, נשתמש בפילטרים הכלליים בלבד ללא מגדר
    const currentFilters = filters.separateFiltering 
      ? { ...filters, gender: undefined }
      : filters;

    let results = candidates.filter(candidate => {
      // סינון לפי מגדר רק אם הסינון הנפרד כבוי
      if (!filters.separateFiltering && currentFilters.gender && candidate.profile.gender !== currentFilters.gender) {
        return false;
      }
      if (currentFilters.source && candidate.source !== currentFilters.source) {
    return false;
}
      // בדיקת גיל מותאמת
      if (currentFilters.ageRange) {
        try {
          const age = calculateAge(candidate.profile.birthDate);
          if (age < currentFilters.ageRange.min || age > currentFilters.ageRange.max) {
            return false;
          }
        } catch (err) {
          console.error("Error calculating age for candidate:", candidate.id, err);
        }
      }
      
      // סינון סטטוס משתמש
      if (filters.userStatus && candidate.status !== filters.userStatus) {
        return false;
      }
   // סינון סטטוס משתמש
      if (filters.userStatus && candidate.status !== filters.userStatus) {
        return false;
      }
      // סינון סטטוס זמינות - ודא המרה נכונה של הטיפוס
      if (filters.availabilityStatus && 
          candidate.profile.availabilityStatus !== filters.availabilityStatus) {
        return false;
      }
      
      // בדיקת גובה
      if (filters.heightRange && candidate.profile.height) {
        if (
          candidate.profile.height < filters.heightRange.min || 
          candidate.profile.height > filters.heightRange.max
        ) {
          return false;
        }
      }

      // בדיקת רמת דתיות
      if (filters.religiousLevel && candidate.profile.religiousLevel !== filters.religiousLevel) {
        return false;
      }

      // בדיקת ערים
      if (filters.cities?.length && candidate.profile.city) {
        if (!filters.cities.includes(candidate.profile.city)) {
          return false;
        }
      }

      // בדיקת תחומי עיסוק
      if (filters.occupations?.length && candidate.profile.occupation) {
        if (!filters.occupations.includes(candidate.profile.occupation)) {
          return false;
        }
      }

      // בדיקת השכלה
      if (filters.educationLevel && candidate.profile.education !== filters.educationLevel) {
        return false;
      }

      // בדיקת מצב משפחתי
      if (filters.maritalStatus && candidate.profile.maritalStatus !== filters.maritalStatus) {
        return false;
      }

      // בדיקת אימות
      if (filters.isVerified !== undefined && candidate.isVerified !== filters.isVerified) {
        return false;
      }

      // בדיקת המלצות
   
      // בדיקת פעילות אחרונה
      if (filters.lastActiveDays && candidate.profile.lastActive) {
        const lastActive = new Date(candidate.profile.lastActive);
        const daysDiff = (new Date().getTime() - lastActive.getTime()) / (1000 * 60 * 60 * 24);
        if (daysDiff > filters.lastActiveDays) {
          return false;
        }
      }

      // בדיקת שלמות פרופיל
      if (filters.isProfileComplete !== undefined && 
          candidate.isProfileComplete !== filters.isProfileComplete) {
        return false;
      }

      // בדיקת חיפוש כללי - רק אם אין סינון נפרד
      if (!filters.separateFiltering && currentFilters.searchQuery) {
        return checkSearchMatch(candidate, currentFilters.searchQuery);
      }

      return true;
    });

    // מיון התוצאות
    if (sorting.field && sorting.direction) {
      results = sortCandidates(results, sorting.field, sorting.direction);
    }

    return results;
  }, [candidates, filters, calculateAge, sorting.field, sorting.direction, sortCandidates, checkSearchMatch]);

  // חלוקה למועמדים ומועמדות עם תמיכה בחיפוש נפרד
  const maleCandidates = useMemo(() => {
    // בסינון נפרד, נבדוק גם את החיפוש הספציפי לגברים
      return filteredCandidates
        .filter(c => c.profile.gender === 'MALE')
        .filter(candidate => {
          // בדיקת פילטרים ספציפיים לגברים
          if (filters.maleFilters) {
            // בדיקת גיל
            if (filters.maleFilters.ageRange) {
              const age = calculateAge(candidate.profile.birthDate);
              if (age < filters.maleFilters.ageRange.min || age > filters.maleFilters.ageRange.max) {
                return false;
              }
            }
            
            // בדיקת גובה
            if (filters.maleFilters.heightRange && candidate.profile.height) {
              if (
                candidate.profile.height < filters.maleFilters.heightRange.min || 
                candidate.profile.height > filters.maleFilters.heightRange.max
              ) {
                return false;
              }
            }

            // בדיקת רמת דתיות
            if (filters.maleFilters.religiousLevel && candidate.profile.religiousLevel !== filters.maleFilters.religiousLevel) {
              return false;
            }

            // בדיקת ערים
            if (filters.maleFilters.cities?.length && candidate.profile.city) {
              if (!filters.maleFilters.cities.includes(candidate.profile.city)) {
                return false;
              }
            }

            // בדיקת תחומי עיסוק
            if (filters.maleFilters.occupations?.length && candidate.profile.occupation) {
              if (!filters.maleFilters.occupations.includes(candidate.profile.occupation)) {
                return false;
              }
            }

            // בדיקת השכלה
            if (filters.maleFilters.educationLevel && candidate.profile.education !== filters.maleFilters.educationLevel) {
              return false;
            }

            // בדיקת מצב משפחתי
            if (filters.maleFilters.maritalStatus && candidate.profile.maritalStatus !== filters.maleFilters.maritalStatus) {
              return false;
            }

            // בדיקת אימות
            if (filters.maleFilters.isVerified !== undefined && candidate.isVerified !== filters.maleFilters.isVerified) {
              return false;
            }

    

            // בדיקת פעילות אחרונה
            if (filters.maleFilters.lastActiveDays && candidate.profile.lastActive) {
              const lastActive = new Date(candidate.profile.lastActive);
              const daysDiff = (new Date().getTime() - lastActive.getTime()) / (1000 * 60 * 60 * 24);
              if (daysDiff > filters.maleFilters.lastActiveDays) {
                return false;
              }
            }

            // בדיקת שלמות פרופיל
            if (filters.maleFilters.isProfileComplete !== undefined && 
                candidate.isProfileComplete !== filters.maleFilters.isProfileComplete) {
              return false;
            }

            // בדיקת חיפוש ספציפי לפילטרים של הגברים
            if (filters.maleFilters.searchQuery) {
              return checkSearchMatch(candidate, filters.maleFilters.searchQuery);
            }
          }
          
          // בדיקת חיפוש נפרד לגברים
          if (filters.maleSearchQuery) {
            return checkSearchMatch(candidate, filters.maleSearchQuery);
          }
          
          return true;
        });
    
      }, [filteredCandidates, filters.maleFilters, filters.maleSearchQuery, calculateAge, checkSearchMatch]);
  const femaleCandidates = useMemo(() => {
    // בסינון נפרד, נבדוק גם את החיפוש הספציפי לנשים

      return filteredCandidates
        .filter(c => c.profile.gender === 'FEMALE')
        .filter(candidate => {
          // בדיקת פילטרים ספציפיים לנשים
          if (filters.femaleFilters) {
            // בדיקת גיל
            if (filters.femaleFilters.ageRange) {
              const age = calculateAge(candidate.profile.birthDate);
              if (age < filters.femaleFilters.ageRange.min || age > filters.femaleFilters.ageRange.max) {
                return false;
              }
            }
            
            // בדיקת גובה
            if (filters.femaleFilters.heightRange && candidate.profile.height) {
              if (
                candidate.profile.height < filters.femaleFilters.heightRange.min || 
                candidate.profile.height > filters.femaleFilters.heightRange.max
              ) {
                return false;
              }
            }

            // בדיקת רמת דתיות
            if (filters.femaleFilters.religiousLevel && candidate.profile.religiousLevel !== filters.femaleFilters.religiousLevel) {
              return false;
            }

            // בדיקת ערים
            if (filters.femaleFilters.cities?.length && candidate.profile.city) {
              if (!filters.femaleFilters.cities.includes(candidate.profile.city)) {
                return false;
              }
            }

            // בדיקת תחומי עיסוק
            if (filters.femaleFilters.occupations?.length && candidate.profile.occupation) {
              if (!filters.femaleFilters.occupations.includes(candidate.profile.occupation)) {
                return false;
              }
            }

            // בדיקת השכלה
            if (filters.femaleFilters.educationLevel && candidate.profile.education !== filters.femaleFilters.educationLevel) {
              return false;
            }

            // בדיקת מצב משפחתי
            if (filters.femaleFilters.maritalStatus && candidate.profile.maritalStatus !== filters.femaleFilters.maritalStatus) {
              return false;
            }

            // בדיקת אימות
            if (filters.femaleFilters.isVerified !== undefined && candidate.isVerified !== filters.femaleFilters.isVerified) {
              return false;
            }

       

            // בדיקת פעילות אחרונה
            if (filters.femaleFilters.lastActiveDays && candidate.profile.lastActive) {
              const lastActive = new Date(candidate.profile.lastActive);
              const daysDiff = (new Date().getTime() - lastActive.getTime()) / (1000 * 60 * 60 * 24);
              if (daysDiff > filters.femaleFilters.lastActiveDays) {
                return false;
              }
            }

            // בדיקת שלמות פרופיל
            if (filters.femaleFilters.isProfileComplete !== undefined && 
                candidate.isProfileComplete !== filters.femaleFilters.isProfileComplete) {
              return false;
            }

            // בדיקת חיפוש ספציפי לפילטרים של הנשים
            if (filters.femaleFilters.searchQuery) {
              return checkSearchMatch(candidate, filters.femaleFilters.searchQuery);
            }
          }
          
          // בדיקת חיפוש נפרד לנשים
          if (filters.femaleSearchQuery) {
            return checkSearchMatch(candidate, filters.femaleSearchQuery);
          }
          
          return true;
        });
      }, [filteredCandidates, filters.femaleFilters, filters.femaleSearchQuery, calculateAge, checkSearchMatch]);
  // עדכון תוצאות החיפוש
  useEffect(() => {
    if (!filters.separateFiltering && filters.searchQuery) {
      // מצב חיפוש רגיל
      setSearchResults({
        term: filters.searchQuery,
        count: filteredCandidates.length,
        male: maleCandidates.length,
        female: femaleCandidates.length
      });
    } else if (filters.separateFiltering) {
      // במצב חיפוש נפרד, לא מציגים תוצאות חיפוש מאוחדות
      setSearchResults(null);
    } else {
      setSearchResults(null);
    }
  }, [filteredCandidates, maleCandidates, femaleCandidates, filters.searchQuery, filters.separateFiltering]);

  // Export candidates to CSV
  const exportCandidates = async (
    candidates: Candidate[], 
    filters: CandidatesFilter
  ): Promise<void> => {
    try {
      // Prepare data for export
      const exportData = candidates.map(candidate => ({
        'שם פרטי': candidate.firstName,
        'שם משפחה': candidate.lastName,
        'גיל': calculateAge(candidate.profile.birthDate),
        'מגדר': candidate.profile.gender === 'MALE' ? 'זכר' : 'נקבה',
        'עיר': candidate.profile.city || '',
        'גובה': candidate.profile.height || '',
        'רמת דתיות': candidate.profile.religiousLevel || '',
        'תעסוקה': candidate.profile.occupation || '',
        'השכלה': candidate.profile.education || '',
        'מצב משפחתי': candidate.profile.maritalStatus || '',
        'סטטוס זמינות': candidate.profile.availabilityStatus || '',
        'מאומת': candidate.isVerified ? 'כן' : 'לא',
        'פעילות אחרונה': candidate.profile.lastActive 
          ? new Date(candidate.profile.lastActive).toLocaleDateString('he-IL')
          : ''
      }));

      // Add filter info to filename
      const filenameSegments = ['candidates'];
      
      if (filters.gender) {
        filenameSegments.push(filters.gender === 'MALE' ? 'male' : 'female');
      }
      
      if (filters.religiousLevel) {
        filenameSegments.push(filters.religiousLevel.replace(/ /g, '-'));
      }
      
      if (filters.cities?.length === 1) {
        filenameSegments.push(filters.cities[0].replace(/ /g, '-'));
      }
      
      // Convert to CSV
      const csv = Papa.unparse(exportData);
      
      // Create and download file
      const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });
      const link = document.createElement('a');
      const url = URL.createObjectURL(blob);
      const timestamp = new Date().toISOString().split('T')[0];
      
      link.setAttribute('href', url);
      link.setAttribute('download', `${filenameSegments.join('_')}_${timestamp}.csv`);
      document.body.appendChild(link);
      
      link.click();
      document.body.removeChild(link);
    } catch (error) {
      console.error('Error exporting candidates:', error);
      throw new Error('Failed to export candidates');
    }
  };

  // Update candidate
  const updateCandidate = async (
    id: string, 
    updates: Partial<CandidateProfile>
  ): Promise<void> => {
    try {
      const response = await fetch(`/api/matchmaker/candidates/${id}`, {
        method: 'PATCH',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(updates)
      });
      
      if (!response.ok) {
        throw new Error('Failed to update candidate');
      }
      
      // Refresh candidates list after update
      await fetchCandidates();
    } catch (error) {
      console.error('Error updating candidate:', error);
      throw error;
    }
  };

  // Load candidates on mount
  useEffect(() => {
    fetchCandidates();
  }, []);

  // Return interface
  return {
    loading,
    error,
    candidates,
    filteredCandidates,
    maleCandidates,
    femaleCandidates,
    filters,
    setFilters,
    refresh: fetchCandidates,
    totalCount: candidates.length,
    filteredCount: filteredCandidates.length,
    maleCount: maleCandidates.length,
    femaleCount: femaleCandidates.length,
    searchResults,
    exportCandidates,
    updateCandidate,
    sorting,
    setSorting,
    searchSuggestions
  };
};
--- End of Content for useCandidates.ts ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\new\hooks\useFilterLogic.ts
--------------------------------------------------------------------------------
Content:
// src/app/components/matchmaker/new/hooks/useFilterLogic.ts - גרסה משופרת

import { useState, useEffect, useMemo, useCallback } from 'react';
import type {
  FilterState,
  SavedFilter,
  FilterOption,
  FilterChangeHandler,  
} from '../types/filters';
import { DEFAULT_FILTER_STATE } from '../types/filters'; 

type SavedFilterFromStorage = Omit<SavedFilter, 'createdAt'> & {
  createdAt: string;
};

interface SearchHistoryItemFromStorage {
  query: string;
  timestamp: string;
}
interface UseFilterLogicProps {
  onFilterChange?: FilterChangeHandler;
  defaultFilters?: Partial<FilterState>;
  localStorageKey?: string;
}

export const useFilterLogic = ({
  onFilterChange,
  defaultFilters = {},
  localStorageKey = 'candidateFilters'
}: UseFilterLogicProps = {}) => {
  // States
  const [filters, setFilters] = useState<FilterState>({
    ...DEFAULT_FILTER_STATE,
    ...defaultFilters
  });
  
  const [savedFilters, setSavedFilters] = useState<SavedFilter[]>([]);
  const [recentSearches, setRecentSearches] = useState<string[]>([]);
  const [searchHistory, setSearchHistory] = useState<{query: string, timestamp: Date}[]>([]);
  const [lastAppliedFilter, setLastAppliedFilter] = useState<string | null>(null);

  // Load saved filters and history from localStorage
  useEffect(() => {
    try {
      // Load saved filters
      const savedPrefs = localStorage.getItem(localStorageKey);
      if (savedPrefs) {
        const parsed = JSON.parse(savedPrefs);
        setSavedFilters(parsed.map((filter: SavedFilterFromStorage) => ({
          ...filter,
          createdAt: new Date(filter.createdAt)
        })));
      }

      // Load recent searches
      const searches = localStorage.getItem(`${localStorageKey}_recent_searches`);
      if (searches) {
        setRecentSearches(JSON.parse(searches));
      }

      // Load search history
      const history = localStorage.getItem(`${localStorageKey}_search_history`);
      if (history) {
        setSearchHistory(JSON.parse(history).map((item: SearchHistoryItemFromStorage) => ({
          ...item,
          timestamp: new Date(item.timestamp)
        })));
      }
    } catch (error) {
      console.error('Error loading saved filters:', error);
    }
  }, [localStorageKey]);

  // עדכון פילטרים כללי
  const updateFilters = useCallback((newFilters: Partial<FilterState>) => {
    console.log("updateFilters called with:", newFilters);
    
    setFilters(prev => {
      const updated = { ...prev, ...newFilters };
      console.log("Updated filters:", updated);
      
      // אם יש מחרוזת חיפוש חדשה, עדכן את היסטורית החיפוש
      if (newFilters.searchQuery && newFilters.searchQuery !== prev.searchQuery) {
        const newQuery = newFilters.searchQuery;
        console.log("New search query detected:", newQuery);
        
        // עדכון היסטוריית החיפוש
        const updatedHistory = [
          { query: newQuery, timestamp: new Date() },
          ...searchHistory.filter(item => item.query !== newQuery).slice(0, 9)
        ];
        
        setSearchHistory(updatedHistory);
        setRecentSearches(updatedHistory.map(item => item.query));
        
        // שמירה ב-localStorage
        try {
          localStorage.setItem(
            `${localStorageKey}_recent_searches`, 
            JSON.stringify(updatedHistory.map(item => item.query))
          );
          localStorage.setItem(
            `${localStorageKey}_search_history`,
            JSON.stringify(updatedHistory.map(item => ({
              query: item.query,
              timestamp: item.timestamp.toISOString()
            })))
          );
        } catch (e) {
          console.error("Error saving search history:", e);
        }
      }
      
      // טיפול בחיפוש נפרד לגברים
      if (newFilters.maleSearchQuery && newFilters.maleSearchQuery !== prev.maleSearchQuery) {
        // כאן אפשר לייצר היסטוריה נפרדת לחיפושי גברים או לשמור בהיסטוריה הכללית
        console.log("New male search query:", newFilters.maleSearchQuery);
      }
      
      // טיפול בחיפוש נפרד לנשים
      if (newFilters.femaleSearchQuery && newFilters.femaleSearchQuery !== prev.femaleSearchQuery) {
        // כאן אפשר לייצר היסטוריה נפרדת לחיפושי נשים או לשמור בהיסטוריה הכללית
        console.log("New female search query:", newFilters.femaleSearchQuery);
      }

      // קריאה לפונקציית callback
      if (onFilterChange) {
        console.log("Calling onFilterChange with updated filters");
        onFilterChange(updated);
      }
      
      return updated;
    });
  }, [onFilterChange, searchHistory, localStorageKey, setRecentSearches, setSearchHistory]);

  // Reset filters
  const resetFilters = useCallback(() => {
    const defaultState: FilterState = {
      ...DEFAULT_FILTER_STATE,
      ...defaultFilters
    };

    setFilters(defaultState);
    setLastAppliedFilter(null);
    onFilterChange?.(defaultState);
  }, [defaultFilters, onFilterChange]);

  // Clear recent searches
  const clearRecentSearches = useCallback(() => {
    setRecentSearches([]);
    localStorage.removeItem(`${localStorageKey}_recent_searches`);
  }, [localStorageKey]);

  // Save new filter
  const saveFilter = useCallback(async (name: string, filters: FilterState) => {
    const newFilter: SavedFilter = {
      id: Date.now().toString(),
      name,
      filters,
      isDefault: false,
      createdAt: new Date()
    };

    setSavedFilters(prev => {
      const updated = [...prev, newFilter];
      localStorage.setItem(localStorageKey, JSON.stringify(updated));
      return updated;
    });

    return newFilter;
  }, [localStorageKey]);

  // פונקציה משופרת להחלפת מצב הסינון הנפרד
  const toggleSeparateFiltering = useCallback(() => {
    console.log("toggleSeparateFiltering called");
    
    setFilters(prev => {
      const newState = {
        ...prev,
        separateFiltering: !prev.separateFiltering
      };
      
      console.log(`Changing separateFiltering from ${prev.separateFiltering} to ${newState.separateFiltering}`);
      
      return newState;
    });
  }, []);

  // פונקציה משופרת לעדכון סינון גברים
  const updateMaleFilters = useCallback((maleFilters: Partial<FilterState>) => {
    setFilters(prev => {
      const updatedMaleFilters = {
        ...prev.maleFilters,
        ...maleFilters
      };
      
      // אם יש עדכון של מחרוזת חיפוש ספציפית לגברים
      if (maleFilters.searchQuery !== undefined) {
        const updated = {
          ...prev,
          maleFilters: updatedMaleFilters,
          maleSearchQuery: maleFilters.searchQuery // שמירת החיפוש גם בשדה הנפרד
        };
        
        // קריאה לפונקציית callback אם קיימת
        if (onFilterChange) {
          onFilterChange(updated);
        }
        
        return updated;
      }
      
      const updated = {
        ...prev,
        maleFilters: updatedMaleFilters
      };
      
      // קריאה לפונקציית callback אם קיימת
      if (onFilterChange) {
        onFilterChange(updated);
      }
      
      return updated;
    });
  }, [onFilterChange]);

  // פונקציה משופרת לעדכון סינון נשים
  const updateFemaleFilters = useCallback((femaleFilters: Partial<FilterState>) => {
    setFilters(prev => {
      const updatedFemaleFilters = {
        ...prev.femaleFilters,
        ...femaleFilters
      };
      
      // אם יש עדכון של מחרוזת חיפוש ספציפית לנשים
      if (femaleFilters.searchQuery !== undefined) {
        const updated = {
          ...prev,
          femaleFilters: updatedFemaleFilters,
          femaleSearchQuery: femaleFilters.searchQuery // שמירת החיפוש גם בשדה הנפרד
        };
        
        // קריאה לפונקציית callback אם קיימת
        if (onFilterChange) {
          onFilterChange(updated);
        }
        
        return updated;
      }
      
      const updated = {
        ...prev,
        femaleFilters: updatedFemaleFilters
      };
      
      // קריאה לפונקציית callback אם קיימת
      if (onFilterChange) {
        onFilterChange(updated);
      }
      
      return updated;
    });
  }, [onFilterChange]);

  const updateMaleSearchQuery = useCallback((query: string) => {
    setFilters(prev => {
      // שומרים את החיפוש בשדה הייעודי
      const updated = {
        ...prev,
        maleSearchQuery: query
      };
      
      // מעדכנים גם את הפילטרים הספציפיים לגברים אם פעיל סינון נפרד
      if (prev.separateFiltering) {
        updated.maleFilters = {
          ...prev.maleFilters,
          searchQuery: query
        };
      }
      
      if (onFilterChange) {
        onFilterChange(updated);
      }
      
      return updated;
    });
  }, [onFilterChange]);
  
  // פונקציה חדשה לעדכון חיפוש נפרד לנשים
  const updateFemaleSearchQuery = useCallback((query: string) => {
    setFilters(prev => {
      // שומרים את החיפוש בשדה הייעודי
      const updated = {
        ...prev,
        femaleSearchQuery: query
      };
      
      // מעדכנים גם את הפילטרים הספציפיים לנשים אם פעיל סינון נפרד
      if (prev.separateFiltering) {
        updated.femaleFilters = {
          ...prev.femaleFilters,
          searchQuery: query
        };
      }
      
      if (onFilterChange) {
        onFilterChange(updated);
      }
      
      return updated;
    });
  }, [onFilterChange]);

  // פונקציה משופרת להעתקת סינון מצד אחד לשני
  const copyFilters = useCallback((source: 'male' | 'female', target: 'male' | 'female') => {
    setFilters(prev => {
      const sourceFilters = source === 'male' ? prev.maleFilters : prev.femaleFilters;
      
      if (!sourceFilters) {
        return prev;
      }
      
      const updated = { ...prev };
      
      if (target === 'male') {
        updated.maleFilters = { ...sourceFilters };
      } else {
        updated.femaleFilters = { ...sourceFilters };
      }
      
      // קריאה לפונקציית callback אם קיימת
      if (onFilterChange) {
        onFilterChange(updated);
      }
      
      return updated;
    });
  }, [onFilterChange]);

  // Update existing filter
  const updateSavedFilter = useCallback((id: string, updates: Partial<SavedFilter>) => {
    setSavedFilters(prev => {
      const updated = prev.map(filter => 
        filter.id === id ? { ...filter, ...updates } : filter
      );
      localStorage.setItem(localStorageKey, JSON.stringify(updated));
      return updated;
    });
  }, [localStorageKey]);

  // Delete filter
  const deleteFilter = useCallback((id: string) => {
    setSavedFilters(prev => {
      const updated = prev.filter(f => f.id !== id);
      localStorage.setItem(localStorageKey, JSON.stringify(updated));
      
      if (lastAppliedFilter === id) {
        setLastAppliedFilter(null);
      }
      
      return updated;
    });
  }, [localStorageKey, lastAppliedFilter]);

  // Set default filter
  const setDefaultFilter = useCallback((id: string) => {
    setSavedFilters(prev => {
      const updated = prev.map(f => ({
        ...f,
        isDefault: f.id === id
      }));
      localStorage.setItem(localStorageKey, JSON.stringify(updated));
      return updated;
    });
  }, [localStorageKey]);

  // Load saved filter - תמיכה בסינון נפרד
  const loadSavedFilter = useCallback((id: string) => {
    const filter = savedFilters.find(f => f.id === id);
    if (filter) {
      // בדוק אם יש בפילטר השמור מידע לגבי סינון נפרד
      setFilters({ 
        ...filter.filters, 
        savedFilterId: id,
        // וודא שיש תמיד את המאפיינים האלה, גם אם אינם מוגדרים בפילטר המקורי
        separateFiltering: true as boolean,        maleFilters: filter.filters.maleFilters || {},
        femaleFilters: filter.filters.femaleFilters || {}
      });
      
      setLastAppliedFilter(id);
      onFilterChange?.({ 
        ...filter.filters, 
        savedFilterId: id,
        separateFiltering: true as boolean,        maleFilters: filter.filters.maleFilters || {},
        femaleFilters: filter.filters.femaleFilters || {} 
      });
    }
  }, [savedFilters, onFilterChange]);

  // Apply popular filter
  const applyPopularFilter = useCallback((filterConfig: Partial<FilterState>) => {
    const updatedFilters = {
      ...DEFAULT_FILTER_STATE,
      ...filterConfig
    };
    setFilters(updatedFilters);
    onFilterChange?.(updatedFilters);
  }, [onFilterChange]);

  // Check for active filters
  const hasActiveFilters = useMemo(() => {
    return (
      filters.searchQuery ||
      filters.gender !== undefined ||
      (filters.cities?.length ?? 0) > 0 ||  // בדיקה בטוחה למערך
      (filters.occupations?.length ?? 0) > 0 ||  // בדיקה בטוחה למערך
      filters.religiousLevel ||
      filters.educationLevel ||
      filters.maritalStatus ||
      filters.availabilityStatus ||
      filters.userStatus ||
      filters.isVerified ||
      filters.hasReferences ||
      filters.lastActiveDays ||
      filters.isProfileComplete ||
      (filters.ageRange && (
        filters.ageRange.min !== DEFAULT_FILTER_STATE.ageRange?.min ||
        filters.ageRange.max !== DEFAULT_FILTER_STATE.ageRange?.max
      )) ||
      (filters.heightRange && (
        filters.heightRange.min !== DEFAULT_FILTER_STATE.heightRange?.min ||
        filters.heightRange.max !== DEFAULT_FILTER_STATE.heightRange?.max
      )) ||
      // בדיקת פילטרים נפרדים פעילים
      filters.separateFiltering
    );
  }, [filters]);

  // Get active filters in formatted array
  const activeFilters = useMemo((): FilterOption[] => {
    const active: FilterOption[] = [];

    if (filters.searchQuery) {
      active.push({
        key: 'searchQuery',
        value: filters.searchQuery,
        label: `חיפוש: ${filters.searchQuery}`,
        category: 'חיפוש'
      });
    }

    if (filters.gender) {
      active.push({
        key: 'gender',
        value: filters.gender,
        label: `מגדר: ${filters.gender === 'MALE' ? 'זכר' : 'נקבה'}`,
        category: 'מידע בסיסי'
      });
    }

    if (filters.separateFiltering) {
      active.push({
        key: 'separateFiltering',
        value: true,
        label: 'סינון נפרד לפי מגדר',
        category: 'מידע בסיסי'
      });
    }

    // גיל
    if (filters.ageRange && (
      filters.ageRange.min !== DEFAULT_FILTER_STATE.ageRange?.min || 
      filters.ageRange.max !== DEFAULT_FILTER_STATE.ageRange?.max
    )) {
      active.push({
        key: 'ageRange',
        value: filters.ageRange,
        label: `גיל: ${filters.ageRange.min}-${filters.ageRange.max}`,
        category: 'מידע בסיסי'
      });
    }

    // גובה
    if (filters.heightRange && (
      filters.heightRange.min !== DEFAULT_FILTER_STATE.heightRange?.min || 
      filters.heightRange.max !== DEFAULT_FILTER_STATE.heightRange?.max
    )) {
      active.push({
        key: 'heightRange',
        value: filters.heightRange,
        label: `גובה: ${filters.heightRange.min}-${filters.heightRange.max} ס"מ`,
        category: 'מידע בסיסי'
      });
    }

    // ערים
    if (filters.cities?.length) {
      if (filters.cities.length === 1) {
        active.push({
          key: 'cities',
          value: filters.cities[0],
          label: `עיר: ${filters.cities[0]}`,
          category: 'מיקום'
        });
      } else {
        active.push({
          key: 'cities',
          value: filters.cities,
          label: `ערים: ${filters.cities.length} נבחרו`,
          category: 'מיקום'
        });
      }
    }

    // תחומי עיסוק
    if (filters.occupations?.length) {
      if (filters.occupations.length === 1) {
        active.push({
          key: 'occupations',
          value: filters.occupations[0],
          label: `תחום עיסוק: ${filters.occupations[0]}`,
          category: 'תעסוקה'
        });
      } else {
        active.push({
          key: 'occupations',
          value: filters.occupations,
          label: `תחומי עיסוק: ${filters.occupations.length} נבחרו`,
          category: 'תעסוקה'
        });
      }
    }

    // רמת דתיות
    if (filters.religiousLevel) {
      active.push({
        key: 'religiousLevel',
        value: filters.religiousLevel,
        label: `רמת דתיות: ${filters.religiousLevel}`,
        category: 'דת'
      });
    }

    // השכלה
    if (filters.educationLevel) {
      active.push({
        key: 'educationLevel',
        value: filters.educationLevel,
        label: `השכלה: ${filters.educationLevel}`,
        category: 'השכלה'
      });
    }

    // מצב משפחתי
    if (filters.maritalStatus) {
      active.push({
        key: 'maritalStatus',
        value: filters.maritalStatus,
        label: `מצב משפחתי: ${filters.maritalStatus}`,
        category: 'מידע אישי'
      });
    }

    // סטטוס זמינות
    if (filters.availabilityStatus) {
      const statusLabel = 
        filters.availabilityStatus === "AVAILABLE" ? "פנוי/ה" :
        filters.availabilityStatus === "DATING" ? "בתהליך הכרות" :
        filters.availabilityStatus === "UNAVAILABLE" ? "לא פנוי/ה" :
        filters.availabilityStatus;
      
      active.push({
        key: 'availabilityStatus',
        value: filters.availabilityStatus,
        label: `סטטוס זמינות: ${statusLabel}`,
        category: 'זמינות'
      });
    }

    // סטטוס משתמש
    if (filters.userStatus) {
      active.push({
        key: 'userStatus',
        value: filters.userStatus,
        label: `סטטוס משתמש: ${filters.userStatus}`,
        category: 'סטטוס'
      });
    }

    // משתמש מאומת
    if (filters.isVerified !== undefined) {
      active.push({
        key: 'isVerified',
        value: filters.isVerified,
        label: `משתמש מאומת: ${filters.isVerified ? 'כן' : 'לא'}`,
        category: 'אימות'
      });
    }

    // יש המלצות
    if (filters.hasReferences !== undefined) {
      active.push({
        key: 'hasReferences',
        value: filters.hasReferences,
        label: `יש המלצות: ${filters.hasReferences ? 'כן' : 'לא'}`,
        category: 'המלצות'
      });
    }

    // פעילות אחרונה
    if (filters.lastActiveDays !== undefined) {
      active.push({
        key: 'lastActiveDays',
        value: filters.lastActiveDays,
        label: `פעיל ב-${filters.lastActiveDays} הימים האחרונים`,
        category: 'פעילות'
      });
    }

    // פרופיל מלא
    if (filters.isProfileComplete !== undefined) {
      active.push({
        key: 'isProfileComplete',
        value: filters.isProfileComplete,
        label: `פרופיל מלא: ${filters.isProfileComplete ? 'כן' : 'לא'}`,
        category: 'שלמות פרופיל'
      });
    }

    return active;
  }, [filters]);

  // Remove single filter
  const removeFilter = useCallback((key: keyof FilterState, value?: string) => {
    setFilters(prev => {
      const updated = { ...prev };

      if (key === 'separateFiltering') {
        updated.separateFiltering = false;
      } else if (Array.isArray(updated[key]) && value !== undefined) {
        if (key === 'cities' || key === 'occupations') {
          updated[key] = (updated[key] as string[]).filter(v => v !== value);
        }
      } else {
        delete updated[key];
      }

      onFilterChange?.(updated);
      return updated;
    });
  }, [onFilterChange]);
  
  // Calculate popular filters based on search history
  const popularFilters = useMemo(() => {
    // Group searches by frequency
    const searchFrequency: Record<string, number> = {};
    searchHistory.forEach(item => {
      searchFrequency[item.query] = (searchFrequency[item.query] || 0) + 1;
    });
    
    // Sort by frequency
    return Object.entries(searchFrequency)
      .sort((a, b) => b[1] - a[1])
      .slice(0, 5)
      .map(([query]) => query);
  }, [searchHistory]);

  return {
    // Current state
    filters,
    savedFilters,
    recentSearches,
    searchHistory,
    activeFilters,
    hasActiveFilters,
    popularFilters,
    lastAppliedFilter,
    
    // Separate filtering functions
    toggleSeparateFiltering,
    updateMaleFilters,
    updateFemaleFilters,
    copyFilters,
    
    // חיפוש נפרד פונקציות חדשות
    updateMaleSearchQuery,
    updateFemaleSearchQuery,
    
    // Actions
    setFilters: updateFilters,
    removeFilter,
    resetFilters,
    clearRecentSearches,
    applyPopularFilter,

    // Saved filters management
    saveFilter,
    updateSavedFilter,
    deleteFilter,
    setDefaultFilter,
    loadSavedFilter,
};
};
export default useFilterLogic;
--- End of Content for useFilterLogic.ts ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\new\hooks\useStatistics.ts
--------------------------------------------------------------------------------
Content:
// /hooks/useStatistics.ts

import { useMemo } from 'react';
import type { Candidate } from '../types/candidates';
import {
  calculateAgeDistribution,
  calculateLocationDistribution,
  calculateReligiousDistribution,
  calculateActivityStats,
  calculateGenderStats,
  calculateAvailabilityStats,
  calculateCompletionStats
} from '../../suggestions/utils/statisticsCalculator';

export interface Statistics {
  gender: {
    maleCount: number;
    femaleCount: number;
    ratio: number;
    total: number;
    percentages: {
      male: number;
      female: number;
    };
  };
  age: {
    ageGroups: Record<string, number>;
    averageAge: number;
    medianAge: number;
  };
  location: {
    cities: Record<string, number>;
    topCities: Array<{ city: string; count: number }>;
  };
  religious: {
    levels: Record<string, number>;
    percentages: Record<string, number>;
  };
  activity: {
    activeLastWeek: number;
    activeLastMonth: number;
    averageLoginFrequency: number;
    completedProfiles: number;
  };
  availability: {
    counts: Record<string, number>;
    percentages: Record<string, number>;
  };
  completion: {
    counts: {
      hasPhotos: number;
      hasAbout: number;
      hasReferences: number;
      hasPreferences: number;
      isVerified: number;
      fullyCompleted: number;
    };
    percentages: {
      hasPhotos: number;
      hasAbout: number;
      hasReferences: number;
      hasPreferences: number;
      isVerified: number;
      fullyCompleted: number;
    };
  };
}

export const useStatistics = (candidates: Candidate[]) => {
  const stats = useMemo<Statistics>(() => {
    return {
      gender: calculateGenderStats(candidates),
      age: calculateAgeDistribution(candidates),
      location: calculateLocationDistribution(candidates),
      religious: calculateReligiousDistribution(candidates),
      activity: calculateActivityStats(candidates),
      availability: calculateAvailabilityStats(candidates),
      completion: calculateCompletionStats(candidates)
    };
  }, [candidates]);

  // פונקציות עזר לשליפת נתונים ספציפיים
  const getGenderRatio = () => {
    return {
      ratio: stats.gender.ratio,
      formattedRatio: `${stats.gender.maleCount}:${stats.gender.femaleCount}`
    };
  };

  const getTopCities = (limit: number = 5) => {
    return stats.location.topCities.slice(0, limit);
  };

  const getActiveUsersPercent = () => {
    return Math.round((stats.activity.activeLastWeek / stats.gender.total) * 100);
  };

  const getCompletionRate = () => {
    return stats.completion.percentages.fullyCompleted;
  };

  const getAgeGroupDistribution = () => {
    return Object.entries(stats.age.ageGroups)
      .map(([range, count]) => ({
        range,
        count,
        percentage: Math.round((count / stats.gender.total) * 100)
      }))
      .sort((a, b) => {
        const [aMin] = a.range.split('-').map(Number);
        const [bMin] = b.range.split('-').map(Number);
        return aMin - bMin;
      });
  };

  const getReligiousDistribution = () => {
    return Object.entries(stats.religious.levels)
      .map(([level, count]) => ({
        level,
        count,
        percentage: stats.religious.percentages[level]
      }))
      .sort((a, b) => b.count - a.count);
  };

  const getActivityTrend = () => {
    return {
      weekly: stats.activity.activeLastWeek,
      monthly: stats.activity.activeLastMonth,
      average: stats.activity.averageLoginFrequency
    };
  };

  const getProfileCompletionStats = () => {
    return {
      completed: stats.completion.counts.fullyCompleted,
      partial: stats.gender.total - stats.completion.counts.fullyCompleted,
      percentage: stats.completion.percentages.fullyCompleted
    };
  };

  return {
    stats,
    getGenderRatio,
    getTopCities,
    getActiveUsersPercent,
    getCompletionRate,
    getAgeGroupDistribution,
    getReligiousDistribution,
    getActivityTrend,
    getProfileCompletionStats
  };
};

export default useStatistics;
--- End of Content for useStatistics.ts ---

================================================================================
Directory: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\new\shared
================================================================================

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\new\shared\LoadingStates.tsx
--------------------------------------------------------------------------------
Content:
'use client';

import React from 'react';
import { Loader2, AlertCircle } from 'lucide-react';
import { cn } from '@/lib/utils';
import { Skeleton } from '@/components/ui/skeleton';
import { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert';
import { Button } from '@/components/ui/button';
import type { MatchmakerPageDictionary } from '@/types/dictionaries/matchmaker';

interface LoadingContainerProps {
  children: React.ReactNode;
  className?: string;
}

interface LoadingSpinnerProps {
  size?: 'sm' | 'md' | 'lg';
  className?: string;
}

interface LoadingCardProps {
  count?: number;
  layout?: 'grid' | 'list';
  className?: string;
}

interface LoadingTextProps {
  lines?: number;
  className?: string;
}

interface LoadingErrorProps {
  message: string;
  onRetry?: () => void;
  className?: string;
  dict: MatchmakerPageDictionary['loadingStates'];
}

export const LoadingContainer: React.FC<LoadingContainerProps> = ({
  children,
  className,
}) => {
  return (
    <div className={cn('relative min-h-[200px]', className)}>
      <div className="absolute inset-0 bg-white/80 backdrop-blur-sm flex items-center justify-center z-50">
        <Loader2 className="h-8 w-8 animate-spin text-blue-600" />
      </div>
      <div className="opacity-50 pointer-events-none">{children}</div>
    </div>
  );
};

export const LoadingSpinner: React.FC<LoadingSpinnerProps> = ({
  size = 'md',
  className,
}) => {
  const sizeClasses = { sm: 'w-4 h-4', md: 'w-8 h-8', lg: 'w-12 h-12' };
  return (
    <div className={cn('flex items-center justify-center', className)}>
      <Loader2
        className={cn('animate-spin text-blue-600', sizeClasses[size])}
      />
    </div>
  );
};

export const LoadingCard: React.FC<LoadingCardProps> = ({
  count = 1,
  layout = 'grid',
  className,
}) => {
  return (
    <div
      className={cn(
        layout === 'grid'
          ? 'grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4'
          : 'space-y-4',
        className
      )}
    >
      {Array.from({ length: count }).map((_, index) => (
        <div
          key={index}
          className={cn(
            'bg-white rounded-lg overflow-hidden shadow-sm',
            layout === 'list' ? 'flex gap-4' : ''
          )}
        >
          <Skeleton
            className={cn(
              'bg-gray-200',
              layout === 'list' ? 'w-32 h-32' : 'w-full h-48'
            )}
          />
          <div className="p-4 flex-1">
            <div className="flex items-center justify-between mb-4">
              <Skeleton className="h-6 w-1/3" />
              <Skeleton className="h-6 w-16" />
            </div>
            <div className="space-y-2">
              <Skeleton className="h-4 w-2/3" />
              <Skeleton className="h-4 w-1/2" />
              <Skeleton className="h-4 w-3/4" />
            </div>
            <div className="flex gap-2 mt-4">
              <Skeleton className="h-9 w-24" />
              <Skeleton className="h-9 w-24" />
            </div>
          </div>
        </div>
      ))}
    </div>
  );
};

export const LoadingText: React.FC<LoadingTextProps> = ({
  lines = 3,
  className,
}) => {
  return (
    <div className={cn('space-y-2', className)}>
      {Array.from({ length: lines }).map((_, index) => (
        <Skeleton
          key={index}
          className={cn('h-4', index === lines - 1 ? 'w-3/4' : 'w-full')}
        />
      ))}
    </div>
  );
};

export const LoadingError: React.FC<LoadingErrorProps> = ({
  message,
  onRetry,
  className,
  dict,
}) => {
  return (
    <Alert variant="destructive" className={cn('border-red-500', className)}>
      <AlertCircle className="h-4 w-4" />
      <AlertTitle>{dict.errorTitle}</AlertTitle>
      <AlertDescription className="flex items-center justify-between">
        <span>{message}</span>
        {onRetry && (
          <Button
            variant="outline"
            size="sm"
            onClick={onRetry}
            className="ml-4"
          >
            {dict.retryButton}
          </Button>
        )}
      </AlertDescription>
    </Alert>
  );
};

export const LoadingStats: React.FC<{ className?: string }> = ({
  className,
}) => {
  return (
    <div className={cn('grid grid-cols-2 md:grid-cols-4 gap-4', className)}>
      {Array.from({ length: 4 }).map((_, index) => (
        <div key={index} className="bg-white p-4 rounded-lg shadow-sm">
          <Skeleton className="h-4 w-16 mb-2" />
          <Skeleton className="h-8 w-24" />
        </div>
      ))}
    </div>
  );
};

export const LoadingFilters: React.FC<{ className?: string }> = ({
  className,
}) => {
  return (
    <div className={cn('space-y-4', className)}>
      <Skeleton className="h-10 w-full" />
      <div className="flex flex-wrap gap-2">
        {Array.from({ length: 4 }).map((_, index) => (
          <Skeleton key={index} className="h-8 w-24" />
        ))}
      </div>
    </div>
  );
};

const LoadingComponents = {
  LoadingContainer,
  LoadingSpinner,
  LoadingCard,
  LoadingText,
  LoadingError,
  LoadingStats,
  LoadingFilters,
};

export default LoadingComponents;
--- End of Content for LoadingStates.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\new\shared\Pagination.tsx
--------------------------------------------------------------------------------
Content:
// /shared/Pagination.tsx
'use client';

import React from 'react';
import { Button } from '@/components/ui/button';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select';
import {
  ChevronRight,
  ChevronLeft,
  ChevronsLeft,
  ChevronsRight,
} from 'lucide-react';
import type { MatchmakerPageDictionary } from '@/types/dictionaries/matchmaker';

interface PaginationProps {
  currentPage: number;
  totalPages: number;
  pageSize: number;
  totalItems: number;
  onPageChange: (page: number) => void;
  onPageSizeChange: (size: number) => void;
  className?: string;
  dict: MatchmakerPageDictionary['pagination'];
}

const pageSizeOptions = [10, 20, 50, 100];

const Pagination: React.FC<PaginationProps> = ({
  currentPage,
  totalPages,
  pageSize,
  totalItems,
  onPageChange,
  onPageSizeChange,
  className,
  dict,
}) => {
  // Helper to generate page numbers array
  const getPageNumbers = () => {
    const pages: (number | string)[] = [];
    const maxVisiblePages = 5;

    if (totalPages <= maxVisiblePages) {
      return Array.from({ length: totalPages }, (_, i) => i + 1);
    }

    // Always show first page
    pages.push(1);

    // Calculate start and end of visible pages
    let start = Math.max(currentPage - 1, 2);
    let end = Math.min(currentPage + 1, totalPages - 1);

    // Adjust for edge cases
    if (currentPage <= 3) {
      end = Math.min(maxVisiblePages - 1, totalPages - 1);
    } else if (currentPage >= totalPages - 2) {
      start = Math.max(totalPages - maxVisiblePages + 2, 2);
    }

    // Add ellipsis and numbers
    if (start > 2) pages.push('...');
    for (let i = start; i <= end; i++) {
      pages.push(i);
    }
    if (end < totalPages - 1) pages.push('...');

    // Always show last page
    if (totalPages > 1) pages.push(totalPages);

    // --- התיקון כאן ---
    return pages;
  };

  const startItem = (currentPage - 1) * pageSize + 1;
  const endItem = Math.min(currentPage * pageSize, totalItems);
  const resultsText = dict.results
    .replace('{{start}}', String(startItem))
    .replace('{{end}}', String(endItem))
    .replace('{{total}}', String(totalItems));

  return (
    <div
      className={`flex flex-col sm:flex-row items-center justify-between gap-4 ${className}`}
    >
      <div className="flex items-center gap-2 text-sm text-gray-600">
        <span>{dict.show}</span>
        <Select
          value={pageSize.toString()}
          onValueChange={(value) => onPageSizeChange(Number(value))}
        >
          <SelectTrigger className="w-[70px]">
            <SelectValue />
          </SelectTrigger>
          <SelectContent>
            {pageSizeOptions.map((size) => (
              <SelectItem key={size} value={size.toString()}>
                {size}
              </SelectItem>
            ))}
          </SelectContent>
        </Select>
        <span>{dict.rows}</span>
      </div>

      <div className="text-sm text-gray-600">{resultsText}</div>

      <div className="flex items-center gap-1">
        <Button
          variant="outline"
          size="icon"
          onClick={() => onPageChange(1)}
          disabled={currentPage === 1}
        >
          <ChevronsRight className="h-4 w-4" />
        </Button>
        <Button
          variant="outline"
          size="icon"
          onClick={() => onPageChange(currentPage - 1)}
          disabled={currentPage === 1}
        >
          <ChevronRight className="h-4 w-4" />
        </Button>
        {getPageNumbers().map((page, index) =>
          typeof page === 'number' ? (
            <Button
              key={index}
              variant={currentPage === page ? 'default' : 'outline'}
              size="sm"
              onClick={() => onPageChange(page)}
              className="hidden sm:inline-flex min-w-[32px]"
            >
              {page}
            </Button>
          ) : (
            <span key={index} className="px-2">
              {page}
            </span>
          )
        )}
        <Button
          variant="outline"
          size="icon"
          onClick={() => onPageChange(currentPage + 1)}
          disabled={currentPage === totalPages}
        >
          <ChevronLeft className="h-4 w-4" />
        </Button>
        <Button
          variant="outline"
          size="icon"
          onClick={() => onPageChange(totalPages)}
          disabled={currentPage === totalPages}
        >
          <ChevronsLeft className="h-4 w-4" />
        </Button>
      </div>
    </div>
  );
};

export default Pagination;
--- End of Content for Pagination.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\new\shared\StatusBadge.tsx
--------------------------------------------------------------------------------
Content:
import React from 'react';
import { Badge } from '@/components/ui/badge';
import {
  Circle,
  CheckCircle,
  XCircle,
  Clock,
  AlertTriangle,
} from 'lucide-react';
import { MatchSuggestionStatus, VerificationStatus } from '@prisma/client';
import type { MatchmakerPageDictionary } from '@/types/dictionaries/matchmaker';

type StatusType = 'suggestion' | 'verification' | 'profile';
type StatusSize = 'sm' | 'md' | 'lg';

interface StatusConfig {
  label: string;
  color: 'destructive' | 'outline' | 'secondary' | 'success' | 'warning';
  icon:
    | typeof Circle
    | typeof CheckCircle
    | typeof XCircle
    | typeof Clock
    | typeof AlertTriangle;
}

interface StatusBadgeProps {
  type: StatusType;
  status: string;
  size?: StatusSize;
  dict: MatchmakerPageDictionary['statusBadges'];
}

// Presentation logic remains in the component
const statusStyling = {
  // Suggestion Statuses Styling
  DRAFT: { color: 'secondary', icon: Circle },
  PENDING_FIRST_PARTY: { color: 'warning', icon: Clock },
  FIRST_PARTY_APPROVED: { color: 'success', icon: CheckCircle },
  FIRST_PARTY_DECLINED: { color: 'destructive', icon: XCircle },
  PENDING_SECOND_PARTY: { color: 'warning', icon: Clock },
  SECOND_PARTY_APPROVED: { color: 'success', icon: CheckCircle },
  SECOND_PARTY_DECLINED: { color: 'destructive', icon: XCircle },
  AWAITING_MATCHMAKER_APPROVAL: { color: 'warning', icon: Clock },
  CONTACT_DETAILS_SHARED: { color: 'success', icon: CheckCircle },
  AWAITING_FIRST_DATE_FEEDBACK: { color: 'warning', icon: Clock },
  THINKING_AFTER_DATE: { color: 'warning', icon: Clock },
  PROCEEDING_TO_SECOND_DATE: { color: 'success', icon: CheckCircle },
  ENDED_AFTER_FIRST_DATE: { color: 'destructive', icon: XCircle },
  MEETING_PENDING: { color: 'warning', icon: Clock },
  MEETING_SCHEDULED: { color: 'success', icon: CheckCircle },
  MATCH_APPROVED: { color: 'success', icon: CheckCircle },
  MATCH_DECLINED: { color: 'destructive', icon: XCircle },
  DATING: { color: 'secondary', icon: Circle },
  ENGAGED: { color: 'success', icon: CheckCircle },
  MARRIED: { color: 'success', icon: CheckCircle },
  EXPIRED: { color: 'destructive', icon: XCircle },
  CLOSED: { color: 'destructive', icon: XCircle },
  CANCELLED: { color: 'destructive', icon: XCircle },

  // Verification Statuses Styling
  PENDING: { color: 'warning', icon: Clock },
  COMPLETED: { color: 'success', icon: CheckCircle },
  FAILED: { color: 'destructive', icon: XCircle },

  // Profile Statuses Styling
  INCOMPLETE: { color: 'warning', icon: AlertTriangle },
  PENDING_VERIFICATION: { color: 'warning', icon: Clock },
  VERIFIED: { color: 'success', icon: CheckCircle },
  BLOCKED: { color: 'destructive', icon: XCircle },
};

const defaultStyling = {
  color: 'secondary' as const,
  icon: Circle,
};

const getStatusConfig = (
  type: StatusType,
  status: string,
  dict: StatusBadgeProps['dict']
): StatusConfig => {
  let label: string;
  let style;

  switch (type) {
    case 'suggestion':
      label = dict.suggestion[status as MatchSuggestionStatus] || dict.unknown;
      style =
        statusStyling[status as keyof typeof statusStyling] || defaultStyling;
      break;
    case 'verification':
      label = dict.verification[status as VerificationStatus] || dict.unknown;
      style =
        statusStyling[status as keyof typeof statusStyling] || defaultStyling;
      break;
    case 'profile':
      label = dict.profile[status as keyof typeof dict.profile] || dict.unknown;
      style =
        statusStyling[status as keyof typeof statusStyling] || defaultStyling;
      break;
    default:
      label = dict.unknown;
      style = defaultStyling;
  }

  return { label, ...style };
};

const StatusBadge: React.FC<StatusBadgeProps> = ({
  type,
  status,
  size = 'md',
  dict,
}) => {
  const config = getStatusConfig(type, status, dict);
  const Icon = config.icon;

  const sizeClasses = {
    sm: 'text-xs px-2 py-0.5',
    md: 'text-sm px-2.5 py-1',
    lg: 'text-base px-3 py-1.5',
  };

  return (
    <Badge
      variant={config.color}
      className={`flex items-center gap-1.5 ${sizeClasses[size]}`}
    >
      <Icon className={size === 'sm' ? 'w-3 h-3' : 'w-4 h-4'} />
      <span>{config.label}</span>
    </Badge>
  );
};

export default StatusBadge;
--- End of Content for StatusBadge.tsx ---

================================================================================
Directory: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\new\types
================================================================================

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\new\types\candidates.ts
--------------------------------------------------------------------------------
Content:
// candidates.ts
import { Gender, AvailabilityStatus, UserStatus, UserSource  } from '@prisma/client';
import type { UserProfile, UserImage, QuestionnaireResponse} from '@/types/next-auth';

// Base API Response Type
export interface APIResponse<T> {
  success: boolean;
  clients: T[];
  count: number;
  error?: string;
}

// Base Types
export type CandidateImage = UserImage;

export type CandidateProfile = UserProfile;

export type MobileView = 'split' | 'single' | 'double';

export interface Candidate {
  id: string;
  email: string;
  firstName: string;
  createdAt: Date;
  lastName: string;
  status: UserStatus;
  isVerified: boolean;
  images: CandidateImage[];
  isProfileComplete: boolean;
  source: UserSource; // Add new field
  addedByMatchmakerId?: string | null; // Add new field
  profile: CandidateProfile; // Ensure this uses the updated CandidateProfile
    suggestionStatus?: {
    status: 'BLOCKED' | 'PENDING';
    suggestionId: string;
    withCandidateName: string;
  } | null;

}
export interface CandidatesFilter {
   source?: UserSource;
  gender?: Gender;
  ageRange?: {
    min: number;
    max: number;
  };
  heightRange?: {
    min: number;
    max: number;
  };
  cities?: string[];
  religiousLevel?: string;
  occupations?: string[];
  educationLevel?: string;
  maritalStatus?: string;
  availabilityStatus?: AvailabilityStatus | string;
  isVerified?: boolean;
  hasReferences?: boolean;
  lastActiveDays?: number;
  isProfileComplete?: boolean;
  searchQuery?: string;
  savedFilterId?: string;
  separateFiltering?: boolean;
  
  // הוספת שדות חיפוש נפרדים
  maleSearchQuery?: string;
  femaleSearchQuery?: string;
  
  maleFilters?: Partial<CandidatesFilter>;
  femaleFilters?: Partial<CandidatesFilter>;
  userStatus?: UserStatus;
}

// ViewMode and Action Types - אלה נשארים כמו שהם
export type ViewMode = 'grid' | 'list';
export type CardSize = 'sm' | 'md' | 'lg';
export type CandidateAction = 'suggest' | 'invite' | 'contact' | 'favorite' | 'view' | 'edit';

// Profile Card Types
export interface ProfileCardData {
  profile: CandidateProfile;
  images: CandidateImage[];
  questionnaire?: QuestionnaireResponse;
}

/**
 * ממפה את אובייקט המועמד מהשרת למבנה הנדרש עבור ProfileCard
 */
export const mapCandidateToProfileCard = (candidate: Candidate): ProfileCardData => {
  return {
    profile: candidate.profile,
    images: candidate.images,
    questionnaire: undefined // יש להוסיף לוגיקה לטעינת השאלון בנפרד
  };
};

/**
 * מפריד מועמדים לפי מגדר
 */
export const separateCandidatesByGender = (candidates: Candidate[]) => {
  return {
    maleCandidates: candidates.filter(c => c.profile.gender === 'MALE'),
    femaleCandidates: candidates.filter(c => c.profile.gender === 'FEMALE')
  };
};

/**
 * בודק האם הפרופיל מלא
 */
export const isProfileComplete = (profile: CandidateProfile): boolean => {
  const requiredFields: Array<keyof CandidateProfile> = [
    'birthDate',
    'city',
    'religiousLevel',
    'about',
    'occupation',
    'education'
  ];

  return requiredFields.every(field => Boolean(profile[field]));
};

const candidateUtils = {
  mapCandidateToProfileCard,
  separateCandidatesByGender,
  isProfileComplete
};

export default candidateUtils;
--- End of Content for candidates.ts ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\new\types\filters.ts
--------------------------------------------------------------------------------
Content:
// src/app/components/matchmaker/new/types/filters.ts

import { Gender, AvailabilityStatus, UserStatus, UserSource  } from '@prisma/client';

// הגדרת טווח ערכים מספריים
export interface RangeFilter {
  min: number;
  max: number;
}

// הגדרת פילטר שמור
export interface SavedFilter {
  id: string;
  name: string;
  filters: FilterState;
  isDefault?: boolean;
  createdAt: Date;
}

export interface FilterState {
  // הוספת מצב תצוגה נפרדת
  separateFiltering: boolean;
    source?: UserSource | undefined;
  // הוספת שדות חיפוש נפרדים
  maleSearchQuery?: string;
  femaleSearchQuery?: string;

  // פילטרים נפרדים לגברים
  maleFilters?: Omit<FilterState, 'gender' | 'maleFilters' | 'femaleFilters' | 
    'separateFiltering' | 'maleSearchQuery' | 'femaleSearchQuery'>;
  
  // פילטרים נפרדים לנשים
  femaleFilters?: Omit<FilterState, 'gender' | 'maleFilters' | 'femaleFilters' | 
    'separateFiltering' | 'maleSearchQuery' | 'femaleSearchQuery'>;

  searchQuery?: string;
  savedFilterId?: string;
  gender?: Gender | undefined;
  ageRange?: RangeFilter;
  heightRange?: RangeFilter;
  cities?: string[];
  occupations?: string[];
  religiousLevel?: string;
  educationLevel?: string;
  maritalStatus?: string;
  availabilityStatus?: AvailabilityStatus | string;
  userStatus?: UserStatus;
  isVerified?: boolean;
  hasReferences?: boolean;
  lastActiveDays?: number;
  isProfileComplete?: boolean;
}

// הגדרת אפשרות פילטר
export interface FilterOption {
  key: keyof (FilterState & { education: string });
  value: Gender | AvailabilityStatus | UserStatus | RangeFilter | string[] | string | number | boolean | undefined;
  label: string;
  category?: string;
}

// הגדרת קטגוריית פילטר
export interface FilterCategory {
  id: string;
  label: string;
  filters: Array<keyof (FilterState & { education: string })>;
}

// הגדרת פרופ לקומפוננטת הפילטרים
export interface FilterProps {
  filters: FilterState;
  onFiltersChange: (filters: FilterState) => void;
  onReset?: () => void;
  className?: string;
}

// הגדרת אפשרויות הפילטר
export interface FilterOptions {
  ages: RangeFilter;
  heights: RangeFilter;
  cities: string[];
  religiousLevels: string[];
  educationLevels: string[];
  occupations: string[];
  maritalStatuses: string[];
  availabilityStatuses: AvailabilityStatus[];
}

// הגדרת מצב הממשק של הפילטרים
export interface FilterUIState {
  isOpen: boolean;
  activeCategory?: string;
  showSaveDialog: boolean;
  presetName: string;
}

// הגדרה של אירועי שינוי בפילטרים
export type FilterChangeHandler = (filters: FilterState) => void;

// הגדרת אירועי שמירת פילטר
export interface SaveFilterHandler {
  (name: string, filters: FilterState): Promise<SavedFilter>;
}

// הגדרת אירועי טעינת פילטר
export interface LoadFilterHandler {
  (id: string): void;
}

// הגדרת הגדרות הפילטרים
export interface FilterSettings {
  localStorageKey?: string;
  defaultFilters?: Partial<FilterState>;
  onFilterChange?: FilterChangeHandler;
}

// הגדרת תוצאות הפילטר
export interface FilterResults {
  totalResults: number;
  filteredResults: number;
  categories: Record<string, number>;
}

// קונסטנטות של הפילטרים
export const DEFAULT_FILTER_STATE: FilterState = {
  separateFiltering: false,
  maleFilters: {},
  femaleFilters: {},
  maleSearchQuery: '',
  femaleSearchQuery: '',
  gender: undefined,
  ageRange: { min: 18, max: 99 },
  heightRange: { min: 140, max: 210 },
  cities: [],
  occupations: [],
  religiousLevel: undefined,
  educationLevel: undefined,
  maritalStatus: undefined,
  availabilityStatus: undefined,
    source: undefined,
  userStatus: undefined,
  isVerified: undefined,
  hasReferences: undefined,
  lastActiveDays: undefined,
  isProfileComplete: undefined,
  searchQuery: '',
  savedFilterId: undefined
};

// קטגוריות פילטרים מוגדרות מראש
export const FILTER_CATEGORIES: FilterCategory[] = [
  {
    id: 'basic',
    label: 'פילטרים בסיסיים',
    filters: ['gender', 'ageRange', 'cities', 'religiousLevel']
  },
  {
    id: 'advanced',
    label: 'פילטרים מתקדמים',
    filters: ['heightRange', 'occupations', 'educationLevel', 'maritalStatus']
  },
  {
    id: 'status',
    label: 'סטטוס ואימות',
    filters: ['availabilityStatus', 'isVerified', 'hasReferences', 'lastActiveDays']
  }
];

// טיפוסי מיון
export type SortDirection = 'asc' | 'desc';

export interface SortOption {
  field: keyof FilterState;
  direction: SortDirection;
  label: string;
}

// הגדרות קיבוץ
export interface GroupOption {
  field: keyof FilterState;
  label: string;
}

export const filterConstants = {
  DEFAULT_FILTER_STATE,
  FILTER_CATEGORIES
};

export default filterConstants;
--- End of Content for filters.ts ---

--- End of Content for new_contents.txt ---

================================================================================
Directory: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\new\CandidateCard
================================================================================

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\new\CandidateCard\Actions.tsx
--------------------------------------------------------------------------------
Content:
// /components/matchmaker/CandidateCard/Actions.tsx

'use client';

import React, {useState } from 'react';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import {
  Heart,
  Mail,
  FileText,
  Eye,
  Clock,
  Sparkles,
  Send,
  UserPlus,
  MessageCircle,
  Calendar,
  Star,
  Zap,
} from 'lucide-react';
import type { Candidate } from '../types/candidates';
import { cn } from '@/lib/utils';
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from '@/components/ui/tooltip';
import type { MatchmakerPageDictionary } from '@/types/dictionaries/matchmaker';

interface ActionsProps {
  candidate: Candidate;
  onInvite: (candidate: Candidate) => void;
  onSuggest: (candidate: Candidate) => void;
  onCheckAvailability: (candidate: Candidate) => void;
  onViewProfile: (candidate: Candidate) => void;
  className?: string;
  variant?: 'full' | 'compact' | 'minimal';
  showLabels?: boolean;
  dict: MatchmakerPageDictionary['candidatesManager']['list']['cardActions'];
}

const Actions: React.FC<ActionsProps> = ({
  candidate,
  onInvite,
  onSuggest,
  onCheckAvailability,
  onViewProfile,
  className,
  variant = 'full',
  showLabels = true,
  dict,
}) => {
  const [isHovered, setIsHovered] = useState(false);
  const [activeAction, setActiveAction] = useState<string | null>(null);

  const handleClick = (e: React.MouseEvent) => {
    e.stopPropagation();
  };

  const handleActionClick = (action: string, callback: () => void) => {
    setActiveAction(action);
    callback();
    setTimeout(() => setActiveAction(null), 150);
  };

  const getPriorityBadge = () => {
    if (candidate.profile.availabilityStatus === 'AVAILABLE') {
      return (
        <Badge className="bg-gradient-to-r from-green-500 to-emerald-500 text-white border-0 shadow-lg animate-pulse">
          <Sparkles className="w-3 h-3 mr-1" />
          {dict.availableNow}
        </Badge>
      );
    }
    return null;
  };

  const actionButtons = [
    {
      id: 'view',
      label: dict.viewProfile,
      icon: Eye,
      onClick: () => onViewProfile(candidate),
      gradient: 'from-blue-500 to-cyan-500',
      hoverGradient: 'from-blue-600 to-cyan-600',
      description: dict.viewProfileTooltip,
      primary: true,
    },
    {
      id: 'suggest',
      label: dict.suggestMatch,
      icon: Heart,
      onClick: () => onSuggest(candidate),
      gradient: 'from-pink-500 to-rose-500',
      hoverGradient: 'from-pink-600 to-rose-600',
      description: dict.suggestMatchTooltip,
      primary: true,
    },
    {
      id: 'invite',
      label: dict.sendInvite,
      icon: Send,
      onClick: () => onInvite(candidate),
      gradient: 'from-purple-500 to-indigo-500',
      hoverGradient: 'from-purple-600 to-indigo-600',
      description: dict.sendInviteTooltip,
      primary: false,
    },
    {
      id: 'availability',
      label: dict.checkAvailability,
      icon: Calendar,
      onClick: () => onCheckAvailability(candidate),
      gradient: 'from-orange-500 to-amber-500',
      hoverGradient: 'from-orange-600 to-amber-600',
      description: dict.checkAvailabilityTooltip,
      primary: false,
    },
  ];

  if (variant === 'minimal') {
    return (
      <div
        className={cn('flex items-center gap-1', className)}
        onClick={handleClick}
        onMouseEnter={() => setIsHovered(true)}
        onMouseLeave={() => setIsHovered(false)}
      >
        <TooltipProvider>
          {actionButtons.slice(0, 2).map((action) => {
            const IconComponent = action.icon;
            return (
              <Tooltip key={action.id}>
                <TooltipTrigger asChild>
                  <Button
                    variant="ghost"
                    size="icon"
                    className={cn(
                      'h-8 w-8 rounded-full transition-all duration-300 transform hover:scale-110',
                      `bg-gradient-to-r ${action.gradient} hover:${action.hoverGradient}`,
                      'text-white shadow-lg hover:shadow-xl',
                      activeAction === action.id && 'scale-95'
                    )}
                    onClick={() => handleActionClick(action.id, action.onClick)}
                  >
                    <IconComponent className="w-4 h-4" />
                  </Button>
                </TooltipTrigger>
                <TooltipContent>
                  <p>{action.description}</p>
                </TooltipContent>
              </Tooltip>
            );
          })}
        </TooltipProvider>
      </div>
    );
  }

  if (variant === 'compact') {
    return (
      <div
        className={cn('flex flex-wrap gap-2', className)}
        onClick={handleClick}
        onMouseEnter={() => setIsHovered(true)}
        onMouseLeave={() => setIsHovered(false)}
      >
        {getPriorityBadge()}

        <div className="flex gap-2">
          {actionButtons.map((action) => {
            const IconComponent = action.icon;
            return (
              <Button
                key={action.id}
                variant="outline"
                size="sm"
                className={cn(
                  'transition-all duration-300 transform hover:scale-105 border-0 shadow-lg hover:shadow-xl',
                  `bg-gradient-to-r ${action.gradient} hover:${action.hoverGradient}`,
                  'text-white font-medium',
                  activeAction === action.id && 'scale-95'
                )}
                onClick={() => handleActionClick(action.id, action.onClick)}
              >
                <IconComponent className="w-4 h-4 mr-2" />
                {showLabels && action.label}
              </Button>
            );
          })}
        </div>
      </div>
    );
  }

  // Full variant
  return (
    <div
      className={cn('space-y-4', className)}
      onClick={handleClick}
      onMouseEnter={() => setIsHovered(true)}
      onMouseLeave={() => setIsHovered(false)}
    >
      <div className="flex justify-center">{getPriorityBadge()}</div>

      <div className="grid grid-cols-2 gap-3">
        {actionButtons
          .filter((a) => a.primary)
          .map((action) => {
            const IconComponent = action.icon;
            return (
              <Button
                key={action.id}
                className={cn(
                  'h-12 transition-all duration-300 transform hover:scale-105 border-0 shadow-xl hover:shadow-2xl font-bold text-sm',
                  `bg-gradient-to-r ${action.gradient} hover:${action.hoverGradient}`,
                  'text-white relative overflow-hidden group',
                  activeAction === action.id && 'scale-95'
                )}
                onClick={() => handleActionClick(action.id, action.onClick)}
              >
                <div className="absolute inset-0 bg-gradient-to-r from-white/0 via-white/20 to-white/0 transform -translate-x-full group-hover:translate-x-full transition-transform duration-700"></div>
                <div className="relative z-10 flex items-center justify-center gap-2">
                  <IconComponent className="w-5 h-5" />
                  {showLabels && (
                    <span className="hidden sm:inline">{action.label}</span>
                  )}
                </div>
              </Button>
            );
          })}
      </div>

      <div className="flex gap-2">
        {actionButtons
          .filter((a) => !a.primary)
          .map((action) => {
            const IconComponent = action.icon;
            return (
              <Button
                key={action.id}
                variant="outline"
                size="sm"
                className={cn(
                  'flex-1 transition-all duration-300 transform hover:scale-105 border-2 hover:border-transparent shadow-lg hover:shadow-xl font-medium',
                  `border-gray-200 hover:bg-gradient-to-r hover:${action.gradient}`,
                  'hover:text-white group relative overflow-hidden',
                  activeAction === action.id && 'scale-95'
                )}
                onClick={() => handleActionClick(action.id, action.onClick)}
              >
                <div
                  className={cn(
                    'absolute inset-0 bg-gradient-to-r transition-all duration-300 opacity-0 group-hover:opacity-100',
                    action.gradient
                  )}
                ></div>
                <div className="relative z-10 flex items-center justify-center gap-2">
                  <IconComponent className="w-4 h-4" />
                  {showLabels && (
                    <span className="text-xs hidden sm:inline">
                      {action.label}
                    </span>
                  )}
                </div>
              </Button>
            );
          })}
      </div>

      <div className="flex justify-center pt-2">
        <Button
          variant="ghost"
          size="sm"
          className={cn(
            'text-red-500 hover:text-red-600 hover:bg-red-50 transition-all duration-300 transform hover:scale-110 group',
            'border border-red-200 hover:border-red-300 shadow-sm hover:shadow-md rounded-full px-4'
          )}
        >
          <Heart
            className={cn(
              'w-4 h-4 transition-all duration-300',
              isHovered && 'fill-current animate-pulse'
            )}
          />
          <span className="mr-2 text-sm font-medium">{dict.addToFavorites}</span>
        </Button>
      </div>

      <div className="pt-3 border-t border-gray-100">
        <div className="flex justify-between items-center text-xs text-gray-500">
          <div className="flex items-center gap-1">
            <Star className="w-3 h-3 text-yellow-500" />
            <span>{dict.rating}: 4.8</span>
          </div>
          <div className="flex items-center gap-1">
            <Zap className="w-3 h-3 text-blue-500" />
            <span>{dict.matchScore}: 95%</span>
          </div>
          <div className="flex items-center gap-1">
            <MessageCircle className="w-3 h-3 text-green-500" />
            <span>{dict.response}: {dict.quickResponse}</span>
          </div>
        </div>
      </div>
    </div>
  );
};

export default Actions;
--- End of Content for Actions.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\new\CandidateCard\MinimalCard.tsx
--------------------------------------------------------------------------------
Content:
// src/app/components/matchmaker/new/CandidateCard/MinimalCard.tsx

'use client';

import React, { useState } from 'react';
import Image from 'next/image';
import { Card } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { Checkbox } from '@/components/ui/checkbox';
import { format } from 'date-fns';
import {
  User,
  MapPin,
  Briefcase,
  Calendar,
  Edit2,
  Sparkles,
  Star,
  Heart,
  Eye,
  Clock,
  Shield,
  Crown,
  Zap,
  Award,
} from 'lucide-react';
import type { Candidate } from '../types/candidates';
import { UserSource } from '@prisma/client';
import { formatDistanceToNow } from 'date-fns';
import { he } from 'date-fns/locale';
import { motion } from 'framer-motion';
import { Skeleton } from '@/components/ui/skeleton';
import { cn, getRelativeCloudinaryPath } from '@/lib/utils';
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from '@/components/ui/tooltip';
import type { MatchmakerPageDictionary } from '@/types/dictionaries/matchmaker';

interface MinimalCandidateCardProps {
  candidate: Candidate;
  onClick: (candidate: Candidate) => void;
  onEdit?: (candidate: Candidate, e: React.MouseEvent) => void;
  isHighlighted?: boolean;
  highlightTerm?: string;
  className?: string;
  aiScore?: number;
  isAiTarget?: boolean;
  onSetAiTarget?: (candidate: Candidate, e: React.MouseEvent) => void;
  isSelectableForComparison?: boolean;
  isSelectedForComparison?: boolean;
  onToggleComparison?: (candidate: Candidate, e: React.MouseEvent) => void;
  dict: MatchmakerPageDictionary['candidatesManager']['list']['minimalCard'];
}

const calculateAge = (birthDate: Date | string): number => {
  const today = new Date();
  const birth = new Date(birthDate);
  let age = today.getFullYear() - birth.getFullYear();
  const monthDiff = today.getMonth() - birth.getMonth();
  if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birth.getDate())) {
    age--;
  }
  return age;
};

const MinimalCandidateCard: React.FC<MinimalCandidateCardProps> = ({
  candidate,
  onClick,
  onEdit,
  isHighlighted = false,
  highlightTerm = '',
  className,
  aiScore,
  isAiTarget = false,
  onSetAiTarget,
  isSelectableForComparison = false,
  isSelectedForComparison = false,
  onToggleComparison,
  dict,
}) => {
  const mainImage = candidate.images.find((img) => img.isMain);
  const age = calculateAge(candidate.profile.birthDate);
  const [imageLoaded, setImageLoaded] = useState(false);
  const [imageError, setImageError] = useState(false);
  const [isHovered, setIsHovered] = useState(false);

  const highlightText = (text: string | undefined | null): React.ReactNode => {
    if (!highlightTerm || !text) return text;
    const parts = text.split(new RegExp(`(${highlightTerm})`, 'gi'));
    return (
      <>
        {parts.map((part, i) =>
          part.toLowerCase() === highlightTerm.toLowerCase() ? (
            <mark key={i} className="bg-yellow-200 px-0.5 rounded-sm">
              {part}
            </mark>
          ) : (
            part
          )
        )}
      </>
    );
  };

  const getAvailabilityBadge = () => {
    switch (candidate.profile.availabilityStatus) {
      case 'AVAILABLE':
        return {
          label: dict.availability.AVAILABLE,
          className:
            'bg-gradient-to-r from-emerald-500 to-green-500 text-white border-0 shadow-lg',
          icon: <Sparkles className="w-3 h-3" />,
        };
      case 'DATING':
        return {
          label: dict.availability.DATING,
          className:
            'bg-gradient-to-r from-amber-500 to-orange-500 text-white border-0 shadow-lg',
          icon: <Heart className="w-3 h-3" />,
        };
      case 'UNAVAILABLE':
        return {
          label: dict.availability.UNAVAILABLE,
          className:
            'bg-gradient-to-r from-red-500 to-pink-500 text-white border-0 shadow-lg',
          icon: <Clock className="w-3 h-3" />,
        };
      default:
        return {
          label: dict.availability.UNKNOWN,
          className:
            'bg-gradient-to-r from-gray-500 to-slate-500 text-white border-0 shadow-lg',
          icon: <User className="w-3 h-3" />,
        };
    }
  };

  const getQualityScore = () => {
    let score = 0;
    if (candidate.images.length > 0) score += 25;
    if (candidate.profile.about) score += 25;
    if (candidate.profile.education) score += 25;
    if (candidate.profile.occupation) score += 25;
    return score;
  };

  const availabilityBadge = getAvailabilityBadge();
  const isManualEntry = candidate.source === UserSource.MANUAL_ENTRY;
  const qualityScore = getQualityScore();

  return (
    <motion.div
      whileHover={{ y: -6, scale: 1.02 }}
      whileTap={{ scale: 0.98 }}
      transition={{ type: 'spring', stiffness: 300, damping: 15 }}
      onMouseEnter={() => setIsHovered(true)}
      onMouseLeave={() => setIsHovered(false)}
    >
      <Card
        className={cn(
          'relative overflow-hidden cursor-pointer transition-all hover:shadow-2xl duration-500 group border-0 shadow-xl',
          isAiTarget
            ? 'ring-4 ring-green-400 ring-opacity-60 shadow-green-200'
            : isSelectedForComparison
              ? 'ring-4 ring-blue-400 ring-opacity-60 shadow-blue-200'
              : typeof aiScore === 'number'
                ? 'ring-2 ring-teal-300 ring-opacity-50 shadow-teal-100'
                : isHighlighted
                  ? 'ring-2 ring-yellow-400 ring-opacity-60 shadow-yellow-100'
                  : 'shadow-gray-200',
          'bg-gradient-to-br from-white via-gray-50/30 to-white',
          className || ''
        )}
        onClick={() => onClick(candidate)}
      >
        <div className="absolute inset-0 bg-gradient-to-br from-transparent via-white/50 to-transparent opacity-60"></div>

        {typeof aiScore === 'number' && (
          <div className="absolute top-3 left-3 z-30">
            <Badge className="bg-gradient-to-r from-teal-400 via-cyan-500 to-blue-500 text-white border-0 shadow-xl px-3 py-1.5 text-sm font-bold flex items-center gap-2">
              <Sparkles className="w-4 h-4" />
              {dict.aiMatch.replace('{{score}}', aiScore.toString())}
              <Zap className="w-3 h-3" />
            </Badge>
          </div>
        )}

        <div className="absolute top-3 right-3 z-20 flex flex-col gap-2 items-end">
          <Badge
            className={cn(
              'px-3 py-1.5 text-xs font-bold shadow-lg flex items-center gap-1.5 transition-all duration-300 hover:scale-105',
              availabilityBadge.className
            )}
          >
            {availabilityBadge.icon}
            {availabilityBadge.label}
          </Badge>

          {isManualEntry && (
            <Badge className="px-3 py-1.5 text-xs font-bold shadow-lg bg-gradient-to-r from-purple-500 to-indigo-500 text-white border-0 flex items-center gap-1.5">
              <Edit2 className="w-3 h-3" />
              {dict.manualEntry}
            </Badge>
          )}
        </div>

        <div className="relative h-52 sm:h-60 bg-gradient-to-br from-blue-100 via-purple-50 to-pink-100">
          {mainImage && !imageError ? (
            <>
              {!imageLoaded && (
                <Skeleton className="absolute inset-0 h-full w-full" />
              )}
              <Image
                src={getRelativeCloudinaryPath(mainImage.url)}
                alt={`${candidate.firstName} ${candidate.lastName}`}
                fill
                sizes="(max-width: 768px) 100vw, (max-width: 1200px) 50vw, 33vw"
                priority={false}
                className={`object-cover transition-all duration-500 ${
                  imageLoaded ? 'opacity-100 scale-100' : 'opacity-0 scale-105'
                } ${isHovered ? 'scale-110' : 'scale-100'}`}
                onLoad={() => setImageLoaded(true)}
                onError={() => setImageError(true)}
              />
              <div className="absolute inset-0 bg-gradient-to-t from-gray-900/90 via-gray-900/40 to-transparent opacity-80 group-hover:opacity-90 transition-opacity duration-300" />
              <div className="absolute inset-0 bg-gradient-to-r from-transparent via-white/20 to-transparent transform -translate-x-full group-hover:translate-x-full transition-transform duration-1000"></div>
            </>
          ) : (
            <div className="w-full h-full flex items-center justify-center bg-gradient-to-br from-blue-100 via-purple-100 to-pink-100">
              <div className="text-center">
                <User className="w-16 h-16 text-gray-400 mx-auto mb-2" />
                <p className="text-sm text-gray-500">{dict.noImage}</p>
              </div>
            </div>
          )}

          <div className="absolute bottom-0 w-full p-4 text-right">
            <h3 className="font-bold mb-1 text-white drop-shadow-lg text-xl tracking-wide">
              {highlightText(`${candidate.firstName} ${candidate.lastName}`)}
            </h3>
            <div className="flex items-center justify-end gap-3 text-white/95 text-sm">
              <span className="bg-black/30 px-2 py-1 rounded-full backdrop-blur-sm font-medium">
                {age} {dict.yearsSuffix}
              </span>
              <Calendar className="w-4 h-4" />
            </div>
          </div>
        </div>

        <div className="p-5 relative z-10">
          <div className="space-y-3 text-gray-700">
            {isManualEntry && candidate.profile.manualEntryText ? (
              <div className="bg-gradient-to-r from-purple-50 to-indigo-50 p-3 rounded-xl border border-purple-100">
                <p className="line-clamp-3 text-sm leading-relaxed text-purple-800">
                  {highlightText(candidate.profile.manualEntryText)}
                </p>
              </div>
            ) : (
              <div className="space-y-2">
                {candidate.profile.city && (
                  <div className="flex items-center justify-end gap-2 p-2 bg-blue-50 rounded-lg hover:bg-blue-100 transition-colors duration-200">
                    <span className="font-medium text-blue-800">
                      {highlightText(candidate.profile.city)}
                    </span>
                    <MapPin className="w-4 h-4 text-blue-600" />
                  </div>
                )}
                {candidate.profile.occupation && (
                  <div className="flex items-center justify-end gap-2 p-2 bg-green-50 rounded-lg hover:bg-green-100 transition-colors duration-200">
                    <span className="text-green-800 text-sm">
                      {highlightText(candidate.profile.occupation)}
                    </span>
                    <Briefcase className="w-4 h-4 text-green-600" />
                  </div>
                )}
              </div>
            )}

            {candidate.profile.lastActive && (
              <div className="flex items-center justify-end gap-2 mt-3 pt-3 border-t border-gray-100">
                <span className="text-xs text-gray-500">
                  {`${dict.lastActivePrefix} ${format(new Date(candidate.profile.lastActive), 'dd/MM/yyyy')}`}
                </span>
                <Clock className="w-3 h-3 text-gray-400" />
              </div>
            )}
          </div>
        </div>

        <div className="absolute bottom-3 left-3 z-20 flex items-center gap-2 opacity-100 lg:opacity-0 group-hover:opacity-100 transition-all duration-300 transform lg:translate-y-2 group-hover:translate-y-0">
          {onEdit && (
            <TooltipProvider>
              <Tooltip>
                <TooltipTrigger asChild>
                  <Button
                    variant="outline"
                    size="icon"
                    className="h-9 w-9 bg-white/90 backdrop-blur-sm shadow-xl border-0 hover:bg-white hover:scale-110 transition-all duration-300"
                    onClick={(e) => onEdit(candidate, e)}
                  >
                    <Edit2 className="h-4 w-4 text-blue-600" />
                  </Button>
                </TooltipTrigger>
                <TooltipContent>
                  <p>{dict.tooltips.editProfile}</p>
                </TooltipContent>
              </Tooltip>
            </TooltipProvider>
          )}

          {onSetAiTarget && (
            <TooltipProvider>
              <Tooltip>
                <TooltipTrigger asChild>
                  <Button
                    variant="outline"
                    size="icon"
                    className={cn(
                      'h-9 w-9 backdrop-blur-sm shadow-xl border-0 hover:scale-110 transition-all duration-300',
                      isAiTarget
                        ? 'bg-gradient-to-r from-green-500 to-emerald-500 text-white hover:from-green-600 hover:to-emerald-600'
                        : 'bg-white/90 hover:bg-white text-gray-600'
                    )}
                    onClick={(e) => onSetAiTarget(candidate, e)}
                  >
                    <Star
                      className={cn(
                        'h-4 w-4 transition-all duration-300',
                        isAiTarget ? 'fill-current rotate-12' : ''
                      )}
                    />
                  </Button>
                </TooltipTrigger>
                <TooltipContent>
                  <p>
                    {isAiTarget
                      ? dict.tooltips.clearAiTarget
                      : dict.tooltips.setAsAiTarget}
                  </p>
                </TooltipContent>
              </Tooltip>
            </TooltipProvider>
          )}
        </div>

        <div className="absolute top-3 left-1/2 transform -translate-x-1/2 z-20 opacity-0 group-hover:opacity-100 transition-all duration-300">
          <div className="flex items-center gap-1 bg-black/60 text-white px-3 py-1 rounded-full backdrop-blur-sm text-xs font-bold">
            <Award className="w-3 h-3" />
            <span>
              {dict.qualityScore.replace('{{score}}', qualityScore.toString())}
            </span>
          </div>
        </div>

        {isSelectableForComparison && onToggleComparison && (
          <div
            className="absolute bottom-3 right-3 z-20 opacity-100 lg:opacity-0 group-hover:opacity-100 transition-all duration-300 transform lg:translate-y-2 group-hover:translate-y-0"
            onClick={(e) => {
              e.stopPropagation();
              onToggleComparison(candidate, e);
            }}
          >
            <div className="flex items-center space-x-2 bg-white/90 backdrop-blur-sm p-2 rounded-xl shadow-xl cursor-pointer hover:bg-white hover:scale-105 transition-all duration-300 border-0">
              <Checkbox
                id={`compare-${candidate.id}`}
                checked={isSelectedForComparison}
                className="pointer-events-none border-2 border-blue-400 data-[state=checked]:bg-gradient-to-r data-[state=checked]:from-blue-500 data-[state=checked]:to-cyan-500 data-[state=checked]:border-blue-500"
              />
              <label
                htmlFor={`compare-${candidate.id}`}
                className="text-xs font-bold leading-none text-gray-700 cursor-pointer"
              >
                {dict.compare}
              </label>
            </div>
          </div>
        )}

        <div className="absolute inset-0 bg-gradient-to-r from-blue-400/0 via-purple-400/0 to-pink-400/0 group-hover:from-blue-400/10 group-hover:via-purple-400/10 group-hover:to-pink-400/10 transition-all duration-500 pointer-events-none rounded-lg"></div>
      </Card>
    </motion.div>
  );
};

export default MinimalCandidateCard;
--- End of Content for MinimalCard.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\new\CandidateCard\QuickView.tsx
--------------------------------------------------------------------------------
Content:
// File: src/app/components/matchmaker/new/CandidateCard/QuickView.tsx

'use client';
import React, { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import {
  Heart,
  Mail,
  Clock,
  Eye,
  Scroll,
  GraduationCap,
  Briefcase,
  MapPin,
  User,
  FileText,
  CalendarClock,
  Edit,
  Info,
  Star,
  Sparkles,
  Send,
  Calendar,
  Shield,
  Crown,
  Zap,
  Award,
  Activity,
  MessageCircle,
  Phone,
  X,
} from 'lucide-react';

import { Separator } from '@/components/ui/separator';
import type { Candidate } from '../types/candidates';
import { UserSource } from '@prisma/client';
import { cn } from '@/lib/utils';
import { motion } from 'framer-motion';
import Image from 'next/image';
import { getRelativeCloudinaryPath } from '@/lib/utils';
import type { MatchmakerPageDictionary } from '@/types/dictionaries/matchmaker';

// פונקציה לחישוב גיל
const calculateAge = (birthDate: Date): number => {
  const today = new Date();
  const birth = new Date(birthDate);
  let age = today.getFullYear() - birth.getFullYear();
  const monthDiff = today.getMonth() - birth.getMonth();
  if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birth.getDate())) {
    age--;
  }
  return age;
};

type ActionId = 'view' | 'invite' | 'suggest' | 'contact' | 'favorite' | 'edit';

interface QuickViewProps {
  candidate: Candidate;
  onAction: (action: ActionId) => void;
  onSetAiTarget?: (candidate: Candidate, e: React.MouseEvent) => void;
  isAiTarget?: boolean;
  dict: MatchmakerPageDictionary['candidatesManager']['list']['quickView'];
}

const QuickView: React.FC<QuickViewProps> = ({
  candidate,
  onAction,
  onSetAiTarget,
  isAiTarget = false,
  dict,
}) => {
  const [isClosing, setIsClosing] = useState(false);
  const [hoveredAction, setHoveredAction] = useState<string | null>(null);

  const handleClick = (e: React.MouseEvent) => {
    e.stopPropagation();
  };

  const handleClose = () => {
    setIsClosing(true);
    setTimeout(() => {
      // The parent component will handle the actual closing
    }, 150);
  };

  const profile = candidate.profile;
  const isManualEntry = candidate.source === UserSource.MANUAL_ENTRY;
  const mainImage = candidate.images?.find((img) => img.isMain);

  const getAvailabilityInfo = () => {
    switch (profile.availabilityStatus) {
      case 'AVAILABLE':
        return {
          label: dict.availability.AVAILABLE,
          gradient: 'from-emerald-500 to-green-500',
          icon: <Sparkles className="w-4 h-4" />,
          description: dict.availabilityDescription.AVAILABLE,
        };
      case 'DATING':
        return {
          label: dict.availability.DATING,
          gradient: 'from-amber-500 to-orange-500',
          icon: <Heart className="w-4 h-4" />,
          description: dict.availabilityDescription.DATING,
        };
      case 'UNAVAILABLE':
        return {
          label: dict.availability.UNAVAILABLE,
          gradient: 'from-red-500 to-pink-500',
          icon: <Clock className="w-4 h-4" />,
          description: dict.availabilityDescription.UNAVAILABLE,
        };
      default:
        return {
          label: dict.availability.UNKNOWN,
          gradient: 'from-gray-500 to-slate-500',
          icon: <User className="w-4 h-4" />,
          description: dict.availabilityDescription.UNKNOWN,
        };
    }
  };

  const getQualityScore = () => {
    let score = 0;
    if (candidate.images.length > 0) score += 25;
    if (profile.about) score += 25;
    if (profile.education) score += 25;
    if (profile.occupation) score += 25;
    return score;
  };

  const availabilityInfo = getAvailabilityInfo();
  const qualityScore = getQualityScore();

  const actionButtons: {
    id: 'view' | 'invite' | 'suggest' | 'contact' | 'edit';
    label: string;
    icon: React.ElementType;
    gradient: string;
    description: string;
    primary: boolean;
  }[] = [
    {
      id: 'view',
      label: dict.actions.view,
      icon: Eye,
      gradient: 'from-blue-500 to-cyan-500',
      description: dict.actionsDescription.view,
      primary: true,
    },
    {
      id: 'suggest',
      label: dict.actions.suggest,
      icon: Heart,
      gradient: 'from-pink-500 to-rose-500',
      description: dict.actionsDescription.suggest,
      primary: true,
    },
    {
      id: 'invite',
      label: dict.actions.invite,
      icon: Send,
      gradient: 'from-purple-500 to-indigo-500',
      description: dict.actionsDescription.invite,
      primary: false,
    },
    {
      id: 'contact',
      label: dict.actions.contact,
      icon: Calendar,
      gradient: 'from-orange-500 to-amber-500',
      description: dict.actionsDescription.contact,
      primary: false,
    },
    {
      id: 'edit',
      label: dict.actions.edit,
      icon: Edit,
      gradient: 'from-gray-500 to-slate-500',
      description: dict.actionsDescription.edit,
      primary: false,
    },
  ];

  return (
    <motion.div
      initial={{ opacity: 0, scale: 0.9, y: 20 }}
      animate={{
        opacity: isClosing ? 0 : 1,
        scale: isClosing ? 0.9 : 1,
        y: isClosing ? 20 : 0,
      }}
      transition={{ type: 'spring', stiffness: 300, damping: 25 }}
      className="bg-white shadow-2xl flex flex-col border-0 overflow-hidden max-w-md sm:max-w-lg w-full rounded-3xl max-h-[85vh]"
      onClick={handleClick}
    >
      <div
        className={cn(
          'relative px-6 py-6 text-white overflow-hidden',
          `bg-gradient-to-br ${availabilityInfo.gradient}`
        )}
      >
        <div className="absolute inset-0">
          <div className="absolute top-0 right-0 w-32 h-32 bg-white/20 rounded-full blur-2xl"></div>
          <div className="absolute bottom-0 left-0 w-24 h-24 bg-white/10 rounded-full blur-xl"></div>
        </div>
        <div className="relative z-10">
          <div className="flex items-start justify-between mb-4">
            <div className="flex items-center gap-3">
              <div className="relative w-16 h-16 rounded-full overflow-hidden border-3 border-white/30 shadow-xl">
                {mainImage ? (
                  <Image src={getRelativeCloudinaryPath(mainImage.url)} alt={`${candidate.firstName} ${candidate.lastName}`} fill className="object-cover" />
                ) : (
                  <div className="w-full h-full bg-white/20 flex items-center justify-center"><User className="w-8 h-8 text-white/80" /></div>
                )}
              </div>
              <div>
                <h3 className="text-xl font-bold mb-1">{candidate.firstName} {candidate.lastName}</h3>
                <div className="flex items-center gap-2">{availabilityInfo.icon}<span className="text-white/90 font-medium">{availabilityInfo.label}</span></div>
              </div>
            </div>
            <div className="flex items-center gap-2">
              {onSetAiTarget && (
                <Button size="icon" variant="ghost" className="h-8 w-8 text-white hover:bg-white/20 rounded-full" onClick={(e) => onSetAiTarget(candidate, e)} title={isAiTarget ? dict.tooltips.clearAiTarget : dict.tooltips.setAsAiTarget}>
                  <Star className={cn('h-5 w-5', isAiTarget ? 'fill-current text-yellow-300' : 'text-white/80')} />
                </Button>
              )}
              <Button size="icon" variant="ghost" className="h-8 w-8 text-white hover:bg-white/20 rounded-full" onClick={handleClose}><X className="h-5 w-5" /></Button>
            </div>
          </div>
          <div className="flex flex-wrap gap-2">
            <Badge className="bg-white/20 text-white border-white/30 backdrop-blur-sm">{availabilityInfo.description}</Badge>
            {isManualEntry && (<Badge className="bg-purple-500/30 text-white border-purple-300/50 backdrop-blur-sm"><Edit className="w-3 h-3 mr-1" />{dict.manualEntry}</Badge>)}
          </div>
        </div>
      </div>
      <div className="flex-1 p-6 space-y-6 text-right overflow-y-auto bg-gradient-to-br from-white to-gray-50/30">
        <div className="grid grid-cols-2 gap-4">
          {profile.birthDate && (
            <div className="p-3 bg-gradient-to-r from-blue-50 to-cyan-50 rounded-xl border border-blue-100 hover:shadow-md transition-all duration-300">
              <div className="flex items-center justify-end gap-2 text-blue-700"><span className="font-bold text-lg">{calculateAge(new Date(profile.birthDate))}</span><CalendarClock className="w-5 h-5" /></div>
              <p className="text-xs text-blue-600 mt-1">{dict.details.years}</p>
            </div>
          )}
          {profile.height && (
            <div className="p-3 bg-gradient-to-r from-purple-50 to-pink-50 rounded-xl border border-purple-100 hover:shadow-md transition-all duration-300">
              <div className="flex items-center justify-end gap-2 text-purple-700"><span className="font-bold text-lg">{profile.height}</span><User className="w-5 h-5" /></div>
              <p className="text-xs text-purple-600 mt-1">{dict.details.heightUnit}</p>
            </div>
          )}
          {profile.maritalStatus && (
            <div className="p-3 bg-gradient-to-r from-green-50 to-emerald-50 rounded-xl border border-green-100 hover:shadow-md transition-all duration-300">
              <div className="flex items-center justify-end gap-2 text-green-700"><span className="font-medium text-sm">{profile.maritalStatus}</span><Heart className="w-5 h-5" /></div>
              <p className="text-xs text-green-600 mt-1">{dict.details.maritalStatus}</p>
            </div>
          )}
          {profile.religiousLevel && (
            <div className="p-3 bg-gradient-to-r from-orange-50 to-amber-50 rounded-xl border border-orange-100 hover:shadow-md transition-all duration-300">
              <div className="flex items-center justify-end gap-2 text-orange-700"><span className="font-medium text-sm">{profile.religiousLevel}</span><Scroll className="w-5 h-5" /></div>
              <p className="text-xs text-orange-600 mt-1">{dict.details.religiousLevel}</p>
            </div>
          )}
        </div>
        <Separator className="my-6 bg-gradient-to-r from-transparent via-gray-300 to-transparent" />
        {isManualEntry && profile.manualEntryText ? (
          <div className="space-y-4">
            <div className="flex items-center justify-end gap-2"><h4 className="text-lg font-bold text-purple-800">{dict.details.manualDescription}</h4><Info className="w-6 h-6 text-purple-500" /></div>
            <div className="p-5 bg-gradient-to-r from-purple-50 to-indigo-50 rounded-2xl border border-purple-200 shadow-sm"><p className="text-purple-900 leading-relaxed whitespace-pre-wrap font-medium">{profile.manualEntryText}</p></div>
          </div>
        ) : (
          <div className="space-y-4">
            <h4 className="text-lg font-bold text-gray-700 mb-4 flex items-center justify-end gap-2"><span>{dict.details.moreInfo}</span><Sparkles className="w-5 h-5 text-blue-500" /></h4>
            {profile.education && (<div className="p-4 bg-gradient-to-r from-blue-50 to-cyan-50 rounded-xl border border-blue-100 hover:shadow-md transition-all duration-300 group"><div className="flex items-center justify-end gap-3"><span className="font-medium text-blue-800 group-hover:text-blue-900 transition-colors">{profile.education}</span><div className="p-2 rounded-full bg-gradient-to-r from-blue-500 to-cyan-500 text-white shadow-lg"><GraduationCap className="w-4 h-4" /></div></div><p className="text-xs text-blue-600 mt-1 text-right">{dict.details.education}</p></div>)}
            {profile.occupation && (<div className="p-4 bg-gradient-to-r from-green-50 to-emerald-50 rounded-xl border border-green-100 hover:shadow-md transition-all duration-300 group"><div className="flex items-center justify-end gap-3"><span className="font-medium text-green-800 group-hover:text-green-900 transition-colors">{profile.occupation}</span><div className="p-2 rounded-full bg-gradient-to-r from-green-500 to-emerald-500 text-white shadow-lg"><Briefcase className="w-4 h-4" /></div></div><p className="text-xs text-green-600 mt-1 text-right">{dict.details.occupation}</p></div>)}
            {profile.city && (<div className="p-4 bg-gradient-to-r from-purple-50 to-pink-50 rounded-xl border border-purple-100 hover:shadow-md transition-all duration-300 group"><div className="flex items-center justify-end gap-3"><span className="font-medium text-purple-800 group-hover:text-purple-900 transition-colors">{profile.city}</span><div className="p-2 rounded-full bg-gradient-to-r from-purple-500 to-pink-500 text-white shadow-lg"><MapPin className="w-4 h-4" /></div></div><p className="text-xs text-purple-600 mt-1 text-right">{dict.details.location}</p></div>)}
          </div>
        )}
        {(!isManualEntry || !profile.manualEntryText) && profile.about && (
          <>
            <Separator className="my-6 bg-gradient-to-r from-transparent via-gray-300 to-transparent" />
            <div className="space-y-4">
              <h4 className="text-lg font-bold text-gray-700 flex items-center justify-end gap-2"><span>{dict.details.about}</span><FileText className="w-5 h-5 text-gray-500" /></h4>
              <div className="p-5 bg-gradient-to-r from-gray-50 to-slate-50 rounded-2xl border border-gray-200 shadow-sm"><p className="text-gray-800 leading-relaxed whitespace-pre-wrap">{profile.about}</p></div>
            </div>
          </>
        )}
      </div>
      <div className="p-6 bg-gradient-to-r from-gray-50 to-white border-t border-gray-100">
        <div className="flex items-center justify-center mb-4">
          <div className="flex items-center gap-2 bg-gradient-to-r from-blue-50 to-cyan-50 px-4 py-2 rounded-full border border-blue-100">
            <Award className="w-4 h-4 text-blue-600" />
            <span className="text-sm font-bold text-blue-800">{dict.qualityScore.replace('{{score}}', String(qualityScore))}</span>
            <div className="flex gap-1">{[...Array(5)].map((_, i) => (<Star key={i} className={cn('w-3 h-3', i < Math.floor(qualityScore / 20) ? 'text-yellow-500 fill-current' : 'text-gray-300')} />))}</div>
          </div>
        </div>
        <div className="grid grid-cols-2 gap-3 mb-4">
          {actionButtons.filter((a) => a.primary).map((action) => {
            const IconComponent = action.icon;
            return (<Button key={action.id} className={cn('h-12 font-bold text-sm border-0 shadow-xl hover:shadow-2xl transition-all duration-300 transform hover:scale-105 relative overflow-hidden group rounded-2xl', `bg-gradient-to-r ${action.gradient} hover:${action.gradient.replace('500', '600')}`, 'text-white', hoveredAction === action.id && 'scale-105')} onClick={() => onAction(action.id)} onMouseEnter={() => setHoveredAction(action.id)} onMouseLeave={() => setHoveredAction(null)}>
              <div className="absolute inset-0 bg-gradient-to-r from-white/0 via-white/20 to-white/0 transform -translate-x-full group-hover:translate-x-full transition-transform duration-700"></div>
              <div className="relative z-10 flex items-center justify-center gap-2"><IconComponent className="w-5 h-5" /><span>{action.label}</span></div>
            </Button>);
          })}
        </div>
        <div className="grid grid-cols-3 gap-2">
          {actionButtons.filter((a) => !a.primary).map((action) => {
            const IconComponent = action.icon;
            return (<Button key={action.id} variant="outline" size="sm" className={cn('border-2 border-gray-200 hover:border-transparent shadow-lg hover:shadow-xl transition-all duration-300 transform hover:scale-105 group relative overflow-hidden rounded-xl', `hover:bg-gradient-to-r hover:${action.gradient}`, 'hover:text-white font-medium', hoveredAction === action.id && 'scale-105')} onClick={() => onAction(action.id)} onMouseEnter={() => setHoveredAction(action.id)} onMouseLeave={() => setHoveredAction(null)}>
              <div className={cn('absolute inset-0 bg-gradient-to-r transition-all duration-300 opacity-0 group-hover:opacity-100', action.gradient)}></div>
              <div className="relative z-10 flex items-center justify-center gap-1"><IconComponent className="w-3 h-3" /><span className="text-xs">{action.label}</span></div>
            </Button>);
          })}
        </div>
        <div className="mt-4 pt-4 border-t border-gray-200">
          <div className="flex justify-between items-center text-xs">
            <div className="flex items-center gap-1 text-yellow-600"><Star className="w-3 h-3 fill-current" /><span className="font-medium">{dict.stats.rating}: 4.8</span></div>
            <div className="flex items-center gap-1 text-blue-600"><Zap className="w-3 h-3" /><span className="font-medium">{dict.stats.match}: 95%</span></div>
            <div className="flex items-center gap-1 text-green-600"><MessageCircle className="w-3 h-3" /><span className="font-medium">{dict.stats.response}: {dict.stats.quick}</span></div>
          </div>
        </div>
      </div>
    </motion.div>
  );
};

export default QuickView;
--- End of Content for QuickView.tsx ---

================================================================================
Directory: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\new\CandidatesManager
================================================================================

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\new\CandidatesManager\CandidatesList.tsx
--------------------------------------------------------------------------------
Content:
// File: src/app/components/matchmaker/new/CandidatesManager/CandidatesList.tsx

import React, {
  useState,
  useCallback,
  useEffect,
  useRef,
  useMemo,
} from 'react';
import { UserX, Edit } from 'lucide-react';
import MinimalCard from '../CandidateCard/MinimalCard';
import QuickView from '../CandidateCard/QuickView';
import { ProfileCard } from '@/components/profile';
import type {
  Candidate,
  CandidateAction,
  MobileView,
} from '../types/candidates';
import type { QuestionnaireResponse } from '@/types/next-auth';
import { Skeleton } from '@/components/ui/skeleton';
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription,
} from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select';
import { toast } from 'sonner';
import { ActionDialogs } from '../dialogs/ActionDialogs';
import NewSuggestionForm from '../../suggestions/NewSuggestionForm';
import MatchmakerEditProfile from '../MatchmakerEditProfile';
import { cn } from '@/lib/utils';
import type { MatchmakerPageDictionary } from '@/types/dictionaries/matchmaker';
import type { ProfilePageDictionary } from '@/types/dictionary';

interface CreateSuggestionData {
  priority: 'LOW' | 'MEDIUM' | 'HIGH' | 'URGENT';
  firstPartyId: string;
  secondPartyId: string;
  status:
    | 'DRAFT'
    | 'PENDING_FIRST_PARTY'
    | 'FIRST_PARTY_APPROVED'
    | 'FIRST_PARTY_DECLINED'
    | string;
  firstPartyNotes?: string;
  secondPartyNotes?: string;
}

interface CandidatesListProps {
  candidates: (Candidate & { aiScore?: number })[];
  allCandidates: Candidate[];
  onCandidateClick?: (candidate: Candidate) => void;
  onCandidateAction?: (type: CandidateAction, candidate: Candidate) => void;
  viewMode: 'grid' | 'list';
  mobileView: MobileView;
  isLoading?: boolean;
  className?: string;
  highlightTerm?: string;
  aiTargetCandidate: Candidate | null;
  onSetAiTarget: (candidate: Candidate, e: React.MouseEvent) => void;
  comparisonSelection: Record<string, Candidate>;
  onToggleComparison: (candidate: Candidate, e: React.MouseEvent) => void;
  quickViewSide?: 'left' | 'right' | 'center';
  isQuickViewEnabled: boolean; // <-- קבלת prop חדש
  locale: string;
  dict: MatchmakerPageDictionary;
  profileDict: ProfilePageDictionary;
}

const CandidatesList: React.FC<CandidatesListProps> = ({
  candidates,
  allCandidates,
  locale,
  onCandidateClick,
  onCandidateAction,
  isQuickViewEnabled, // <-- שימוש ב-prop החדש

  viewMode,
  mobileView,
  isLoading = false,
  className,
  highlightTerm,
  aiTargetCandidate,
  onSetAiTarget,
  comparisonSelection,
  onToggleComparison,
  quickViewSide = 'center',
  dict,
  profileDict,
}) => {
  // ... (כל הלוגיקה הפנימית נשארת זהה) ...
  // Base states
  const [selectedCandidate, setSelectedCandidate] = useState<Candidate | null>(
    null
  );
  const [questionnaireResponse, setQuestionnaireResponse] =
    useState<QuestionnaireResponse | null>(null);
  const [isMatchmaker, setIsMatchmaker] = useState(false);
  const [hoveredCandidate, setHoveredCandidate] = useState<Candidate | null>(
    null
  );
  const [hoverPosition, setHoverPosition] = useState({ top: 0, left: 0 });
  const hoverTimeoutRef = useRef<NodeJS.Timeout | null>(null);
  const quickViewRef = useRef<HTMLDivElement>(null);

  // Dialog states
  const [showInviteDialog, setShowInviteDialog] = useState(false);
  const [showAvailabilityDialog, setShowAvailabilityDialog] = useState(false);
  const [showSuggestDialog, setShowSuggestDialog] = useState(false);
  const [showEditProfileDialog, setShowEditProfileDialog] = useState(false);
  const [dialogCandidate, setDialogCandidate] = useState<Candidate | null>(
    null
  );

  const [isMobile, setIsMobile] = useState(false);

  useEffect(() => {
    const checkScreenSize = () => {
      setIsMobile(window.innerWidth < 768);
    };
    checkScreenSize();
    window.addEventListener('resize', checkScreenSize);
    return () => {
      window.removeEventListener('resize', checkScreenSize);
    };
  }, []);

  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (
        hoveredCandidate &&
        quickViewRef.current &&
        !quickViewRef.current.contains(event.target as Node)
      ) {
        setHoveredCandidate(null);
      }
    };
    document.addEventListener('mousedown', handleClickOutside);
    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, [hoveredCandidate]);

  useEffect(() => {
    return () => {
      if (hoverTimeoutRef.current) {
        clearTimeout(hoverTimeoutRef.current);
      }
    };
  }, []);

  useEffect(() => {
    const loadQuestionnaire = async () => {
      if (!selectedCandidate) {
        setQuestionnaireResponse(null);
        return;
      }
      try {
        const response = await fetch(
          `/api/profile/questionnaire?userId=${selectedCandidate.id}`
        );
        const data = await response.json();
        if (data.success && data.questionnaireResponse) {
          const formattedQuestionnaire = {
            ...data.questionnaireResponse,
            formattedAnswers: {
              values: data.questionnaireResponse.formattedAnswers.values || [],
              personality:
                data.questionnaireResponse.formattedAnswers.personality || [],
              relationship:
                data.questionnaireResponse.formattedAnswers.relationship || [],
              partner:
                data.questionnaireResponse.formattedAnswers.partner || [],
              religion:
                data.questionnaireResponse.formattedAnswers.religion || [],
            },
          };
          setQuestionnaireResponse(formattedQuestionnaire);
        }
      } catch (error) {
        console.error('Failed to load questionnaire:', error);
        toast.error('שגיאה בטעינת השאלון');
      }
    };
    loadQuestionnaire();
  }, [selectedCandidate]);

  // Action handlers
  const handleInvite = async (candidate: Candidate, email: string) => {
    try {
      const response = await fetch(
        `/api/matchmaker/candidates/${candidate.id}/invite-setup`,
        {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ candidateId: candidate.id, email }),
        }
      );
      if (!response.ok) throw new Error('Failed to send invitation');
      toast.success('ההזמנה נשלחה בהצלחה');
      onCandidateAction?.('invite', candidate);
    } catch (error) {
      console.error('Error sending invite:', error);
      throw error;
    }
  };

  const handleAvailabilityCheck = async (candidate: Candidate) => {
    try {
      const response = await fetch('/api/availability/check', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ clientId: candidate.id }),
      });
      if (!response.ok) throw new Error('Failed to check availability');
      toast.success('בדיקת הזמינות נשלחה');
      onCandidateAction?.('contact', candidate);
    } catch (error) {
      console.error('Error checking availability:', error);
      throw error;
    }
  };

  const handleCreateSuggestion = async (data: CreateSuggestionData) => {
    try {
      const response = await fetch('/api/matchmaker/suggestions', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(data),
      });
      if (!response.ok) throw new Error('Failed to create suggestion');
      toast.success('ההצעה נוצרה בהצלחה');
      onCandidateAction?.('suggest', dialogCandidate!);
    } catch (error) {
      console.error('Error creating suggestion:', error);
      throw error;
    }
  };

  const handleEditProfile = (candidate: Candidate) => {
    setDialogCandidate(candidate);
    setShowEditProfileDialog(true);
  };

  const handleMouseEnter = (candidate: Candidate, e?: React.MouseEvent) => {
    if (isMobile || !e || !isQuickViewEnabled) return; // <-- תנאי חדש

    if (isMobile || !e) return;
    if (hoverTimeoutRef.current) {
      clearTimeout(hoverTimeoutRef.current);
    }
    const cardElement = e.currentTarget as HTMLElement;
    const cardRect = cardElement.getBoundingClientRect();
    const viewportHeight = window.innerHeight;
    const padding = 20;
    const quickViewApproxHeight = Math.min(650, viewportHeight * 0.85);
    let top;
    if (cardRect.top + quickViewApproxHeight > viewportHeight - padding) {
      top = cardElement.offsetTop + cardRect.height - quickViewApproxHeight;
    } else {
      top = cardElement.offsetTop;
    }
    const scrollContainer = cardElement.closest('.overflow-y-auto');
    if (scrollContainer) {
      top = Math.max(top, scrollContainer.scrollTop);
    }
    let left;
    const quickViewWidth = 420;
    switch (quickViewSide) {
      case 'left':
        left = window.innerWidth / 4 - quickViewWidth / 2;
        break;
      case 'right':
        left = (window.innerWidth * 3) / 4 - quickViewWidth / 2 - 470;
        break;
      case 'center':
      default:
        left = window.innerWidth / 2 - quickViewWidth / 2;
        break;
    }
    left = Math.max(
      padding,
      Math.min(left, window.innerWidth - quickViewWidth - padding)
    );
    hoverTimeoutRef.current = setTimeout(() => {
      setHoverPosition({ top, left });
      setHoveredCandidate(candidate);
    }, 300);
  };

  const handleMouseLeave = () => {
    if (isMobile) return;
    if (hoverTimeoutRef.current) {
      clearTimeout(hoverTimeoutRef.current);
      hoverTimeoutRef.current = null;
    }
    setTimeout(() => {
      if (!quickViewRef.current?.matches(':hover')) {
        setHoveredCandidate(null);
      }
    }, 100);
  };

  const handleAction = useCallback(
    (action: CandidateAction, candidate: Candidate) => {
      setDialogCandidate(candidate);
      setHoveredCandidate(null);
      switch (action) {
        case 'invite':
          setShowInviteDialog(true);
          break;
        case 'contact':
          setShowAvailabilityDialog(true);
          break;
        case 'suggest':
          setShowSuggestDialog(true);
          break;
        case 'view':
          setSelectedCandidate(candidate);
          onCandidateClick?.(candidate);
          break;
        case 'edit':
          handleEditProfile(candidate);
          break;
        default:
          onCandidateAction?.(action, candidate);
      }
    },
    [onCandidateAction, onCandidateClick]
  );

  const gridLayoutClass = useMemo(() => {
    if (isMobile) {
      return mobileView === 'double'
        ? 'grid grid-cols-2 gap-2'
        : 'grid grid-cols-1 gap-3';
    }
    return viewMode === 'grid'
      ? 'grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-x-3 gap-y-4'
      : 'space-y-4';
  }, [isMobile, mobileView, viewMode]);

  // ... (החלק של isLoading ו-candidates.length === 0 נשאר זהה) ...
  if (isLoading) {
    return (
      <div
        className={`${viewMode === 'grid' ? 'grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4' : 'space-y-4'} ${className || ''}`}
      >
        {Array.from({ length: 6 }).map((_, i) => (
          <div key={i} className="relative">
            <Skeleton
              className={
                viewMode === 'list' ? 'h-32 w-full' : 'h-[350px] w-full'
              }
            />
            <div className="absolute top-3 right-3">
              <Skeleton className="h-6 w-16 rounded-full" />
            </div>
          </div>
        ))}
      </div>
    );
  }

  if (candidates.length === 0) {
    return (
      <div className="flex flex-col items-center justify-center h-32 bg-gray-50 rounded-lg border border-dashed border-gray-300 p-4 text-center">
        <UserX className="w-8 h-8 mb-2 text-gray-400" />
        <p className="text-sm font-medium text-gray-500 mb-1">
          {dict.candidatesManager.list.emptyState.title}
        </p>
        <p className="text-xs text-gray-400">
          {dict.candidatesManager.list.emptyState.description}
        </p>
      </div>
    );
  }

  return (
    <>
      <div className={cn(gridLayoutClass, className || '')}>
        {candidates.map((candidate) => (
          <div
            key={candidate.id}
            className="group relative"
            onMouseEnter={(e) => handleMouseEnter(candidate, e)}
            onMouseLeave={handleMouseLeave}
            onClick={() => handleAction('view', candidate)}
          >
            {/********** תיקון #1: העברת המילון הנכון ל-MinimalCard **********/}
            <MinimalCard
              candidate={candidate}
              onClick={() => handleAction('view', candidate)}
              onEdit={(c, e) => {
                e.stopPropagation();
                handleAction('edit', c);
              }}
              className={cn(
                viewMode === 'list' && !isMobile
                  ? 'flex flex-row-reverse gap-4 h-32'
                  : '',
                isMobile && mobileView === 'double' ? 'transform scale-90' : '',
                isMobile && mobileView === 'single' ? 'transform scale-95' : ''
              )}
              highlightTerm={highlightTerm}
              aiScore={candidate.aiScore}
              onSetAiTarget={onSetAiTarget}
              isAiTarget={aiTargetCandidate?.id === candidate.id}
              isSelectableForComparison={
                !!aiTargetCandidate &&
                aiTargetCandidate.profile.gender !== candidate.profile.gender &&
                aiTargetCandidate.id !== candidate.id
              }
              isSelectedForComparison={!!comparisonSelection[candidate.id]}
              onToggleComparison={onToggleComparison}
              dict={dict.candidatesManager.list.minimalCard} // <--- התיקון כאן
            />
            <button
              className="absolute top-2 left-2 bg-primary text-white p-2 rounded-full opacity-0 group-hover:opacity-100 transition-opacity z-10"
              onClick={(e) => {
                e.stopPropagation();
                handleAction('edit', candidate);
              }}
              aria-label={dict.candidatesManager.list.editProfileTooltip}
              title={dict.candidatesManager.list.editProfileTooltip}
            >
              <Edit className="w-4 h-4" />
            </button>
          </div>
        ))}
      </div>

      {isQuickViewEnabled &&
        hoveredCandidate &&
        !isMobile && ( // <-- תנאי חדש
          <div
            ref={quickViewRef}
            className="absolute z-[70]"
            style={{
              top: `${hoverPosition.top}px`,
              left: `${hoverPosition.left}px`,
              width: '420px',
            }}
          >
            <div className="drop-shadow-2xl">
              {/********** תיקון #2: העברת המילון הנכון ל-QuickView **********/}
              <QuickView
                candidate={hoveredCandidate}
                // שורה מעודכנת
                onAction={(action) => handleAction(action, hoveredCandidate)}
                onSetAiTarget={(c, e) => onSetAiTarget(c, e)}
                isAiTarget={aiTargetCandidate?.id === hoveredCandidate.id}
                dict={dict.candidatesManager.list.quickView} // <--- התיקון כאן
              />
            </div>
          </div>
        )}

      <Dialog
        open={!!selectedCandidate}
        onOpenChange={(open) => {
          if (!open) {
            setSelectedCandidate(null);
            setQuestionnaireResponse(null);
          }
        }}
      >
        <DialogContent className="max-w-6xl max-h-[90vh] overflow-y-auto">
          <DialogHeader>
            <div className="flex items-center justify-between">
              <DialogTitle>
                {dict.candidatesManager.list.profileDialog.title}
              </DialogTitle>
              <Button
                variant="outline"
                onClick={() => handleAction('edit', selectedCandidate!)}
                className="flex items-center gap-2"
              >
                <Edit className="w-4 h-4" />
                {dict.candidatesManager.list.profileDialog.editButton}
              </Button>
            </div>
            <DialogDescription>
              {dict.candidatesManager.list.profileDialog.description}
            </DialogDescription>
            <Select
              value={isMatchmaker ? 'matchmaker' : 'candidate'}
              onValueChange={(value) => setIsMatchmaker(value === 'matchmaker')}
            >
              <SelectTrigger className="w-full sm:w-48">
                <SelectValue
                  placeholder={
                    dict.candidatesManager.list.profileDialog.viewAsLabel
                  }
                />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="candidate">
                  {dict.candidatesManager.list.profileDialog.candidateView}
                </SelectItem>
                <SelectItem value="matchmaker">
                  {dict.candidatesManager.list.profileDialog.matchmakerView}
                </SelectItem>
              </SelectContent>
            </Select>
          </DialogHeader>
          {selectedCandidate && (
            <div className="space-y-6">
              <ProfileCard
                profile={selectedCandidate.profile}
                images={selectedCandidate.images}
                questionnaire={questionnaireResponse}
                viewMode={isMatchmaker ? 'matchmaker' : 'candidate'}
                isProfileComplete={selectedCandidate.isProfileComplete}
                dict={profileDict.profileCard}
              />
            </div>
          )}
        </DialogContent>
      </Dialog>

      {/********** תיקון #3: העברת המילון הנכון ל-ActionDialogs **********/}
      <ActionDialogs
        suggestDialog={{
          isOpen: showSuggestDialog,
          onClose: () => setShowSuggestDialog(false),
          onSubmit: handleCreateSuggestion,
          selectedCandidate: dialogCandidate,
        }}
        availabilityDialog={{
          isOpen: showAvailabilityDialog,
          onClose: () => setShowAvailabilityDialog(false),
          onCheck: handleAvailabilityCheck,
          selectedCandidate: dialogCandidate,
        }}
        inviteDialog={{
          isOpen: showInviteDialog,
          onClose: () => setShowInviteDialog(false),
          onInvite: handleInvite,
          selectedCandidate: dialogCandidate,
        }}
        dict={dict.candidatesManager.actionDialogs} // <--- התיקון כאן
      />

      {/********** תיקון #4: העברת המילון הנכון ל-NewSuggestionForm **********/}
      <NewSuggestionForm
        isOpen={showSuggestDialog}
        onClose={() => setShowSuggestDialog(false)}
        candidates={allCandidates}
        selectedCandidate={dialogCandidate}
        onSubmit={handleCreateSuggestion}
        dict={dict} // <--- התיקון כאן
        locale={locale}
      />

      {/********** תיקון #5: העברת המילונים הנכונים ל-MatchmakerEditProfile **********/}
      <MatchmakerEditProfile
        isOpen={showEditProfileDialog}
        onClose={() => setShowEditProfileDialog(false)}
        candidate={dialogCandidate}
        dict={dict.candidatesManager.editProfile} // <--- התיקון כאן
        profileDict={profileDict} // <--- התיקון כאן (הוספנו את המילון השני)
      />
    </>
  );
};

export default CandidatesList;
--- End of Content for CandidatesList.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\new\CandidatesManager\CandidatesStats.tsx
--------------------------------------------------------------------------------
Content:
// /CandidatesManager/CandidatesStats.tsx

'use client';

import React from 'react';

import { Card, CardContent } from '@/components/ui/card';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Badge } from '@/components/ui/badge';
import {
  Users,
  UserCheck,
  Clock,
  MapPin,
  CheckCircle,
  Image as ImageIcon,
  TrendingUp,
  ArrowUp,
  ArrowDown,
  Activity,
  Heart,
  Star,
  Award,
  Sparkles,
  Target,
  Crown,
  Zap,
} from 'lucide-react';
import { useStatistics } from '../hooks/useStatistics';
import type { Candidate } from '../types/candidates';
import {
  BarChart,
  Bar,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip,
  ResponsiveContainer,
  PieChart,
  Pie,
  Cell,
} from 'recharts';
import { cn } from '@/lib/utils';
import type { MatchmakerPageDictionary } from '@/types/dictionaries/matchmaker';

interface StatCardProps {
  title: string;
  value: string | number;
  description?: string;
  icon: React.ReactNode;
  trend?: {
    value: number;
    isPositive: boolean;
  };
  className?: string;
  gradient: string;
  iconColor: string;
  dict: MatchmakerPageDictionary['candidatesManager']['stats']['mainStats']['trend'];
}

interface CandidatesStatsProps {
  candidates: Candidate[];
  className?: string;
  dict: MatchmakerPageDictionary['candidatesManager']['stats'];
}

const CHART_COLORS = [
  '#3B82F6', // כחול
  '#EF4444', // אדום
  '#10B981', // ירוק
  '#F59E0B', // כתום
  '#8B5CF6', // סגול
  '#EC4899', // ורוד
  '#06B6D4', // ציאן
  '#84CC16', // ליים
];

const StatCard: React.FC<StatCardProps> = ({
  title,
  value,
  description,
  icon,
  trend,
  className,
  gradient,
  iconColor,
  dict,
}) => (
  <Card
    className={cn(
      'border-0 shadow-xl bg-gradient-to-br from-white via-gray-50/30 to-white overflow-hidden group hover:shadow-2xl transition-all duration-300 transform hover:scale-105',
      className
    )}
  >
    <CardContent className="p-6 relative">
      <div className="absolute top-0 right-0 w-32 h-32 bg-gradient-to-br from-white/20 to-transparent rounded-full blur-2xl opacity-50"></div>

      <div className="flex items-start justify-between relative z-10">
        <div className="space-y-3 flex-1">
          <p className="text-sm font-medium text-gray-600">{title}</p>
          <div className="flex items-baseline gap-2">
            <p className="text-3xl font-bold text-gray-800">{value}</p>
            {trend && (
              <div
                className={cn(
                  'flex items-center gap-1 px-2 py-1 rounded-full text-xs font-bold',
                  trend.isPositive
                    ? 'bg-gradient-to-r from-green-100 to-emerald-100 text-green-700'
                    : 'bg-gradient-to-r from-red-100 to-pink-100 text-red-700'
                )}
              >
                {trend.isPositive ? (
                  <ArrowUp className="w-3 h-3" />
                ) : (
                  <ArrowDown className="w-3 h-3" />
                )}
                <span>{Math.abs(trend.value)}%</span>
              </div>
            )}
          </div>
          {description && (
            <p className="text-sm text-gray-500 leading-relaxed">
              {description}
            </p>
          )}
          {trend && (
            <p className="text-xs text-gray-400">
              {trend.isPositive ? dict.increase : dict.decrease} {dict.period}
            </p>
          )}
        </div>

        <div
          className={cn(
            'p-4 rounded-2xl shadow-lg group-hover:scale-110 transition-transform duration-300',
            `bg-gradient-to-r ${gradient}`
          )}
        >
          <div className={iconColor}>{icon}</div>
        </div>
      </div>
    </CardContent>
  </Card>
);

const EnhancedChartCard: React.FC<{
  title: string;
  children: React.ReactNode;
  description?: string;
  gradient?: string;
  icon?: React.ReactNode;
}> = ({
  title,
  children,
  description,
  gradient = 'from-blue-500 to-cyan-500',
  icon,
}) => (
  <Card className="border-0 shadow-xl bg-gradient-to-br from-white via-gray-50/30 to-white overflow-hidden hover:shadow-2xl transition-all duration-300">
    <CardContent className="p-6">
      <div className="flex items-center justify-between mb-6">
        <div className="flex items-center gap-3">
          {icon && (
            <div
              className={cn(
                'p-3 rounded-full shadow-lg',
                `bg-gradient-to-r ${gradient}`
              )}
            >
              <div className="text-white">{icon}</div>
            </div>
          )}
          <div>
            <h3 className="text-xl font-bold text-gray-800">{title}</h3>
            {description && (
              <p className="text-sm text-gray-500 mt-1">{description}</p>
            )}
          </div>
        </div>
      </div>
      {children}
    </CardContent>
  </Card>
);

const CandidatesStats: React.FC<CandidatesStatsProps> = ({
  candidates,
  className,
  dict,
}) => {
  const {
    stats,
    getGenderRatio,
    getTopCities,
    getActiveUsersPercent,
    getAgeGroupDistribution,
    getReligiousDistribution,
    getActivityTrend,
    getProfileCompletionStats,
  } = useStatistics(candidates);

  const genderRatio = getGenderRatio();
  const activeUsers = getActiveUsersPercent();
  const completionStats = getProfileCompletionStats();
  const ageDistribution = getAgeGroupDistribution();
  const religiousDistribution = getReligiousDistribution();
  const activityTrend = getActivityTrend();
  const topCities = getTopCities(5);

  return (
    <div className={cn('space-y-8', className)}>
      <div className="relative min-h-[200px] bg-gradient-to-br from-purple-50 via-cyan-50/30 to-emerald-50/20 overflow-hidden rounded-3xl shadow-2xl p-8">
        <div className="absolute inset-0">
          <div className="absolute top-10 right-10 w-64 h-64 bg-gradient-to-br from-purple-200/30 to-pink-200/30 rounded-full blur-3xl animate-float"></div>
          <div
            className="absolute bottom-10 left-10 w-48 h-48 bg-gradient-to-br from-cyan-200/30 to-blue-200/30 rounded-full blur-2xl animate-float"
            style={{ animationDelay: '2s' }}
          ></div>
        </div>

        <div className="relative z-10 text-center">
          <div className="inline-flex items-center gap-3 mb-6">
            <div className="p-4 rounded-full bg-gradient-to-r from-purple-500 to-pink-500 text-white shadow-lg">
              <Activity className="w-10 h-10" />
            </div>
          </div>
          <h1 className="text-4xl md:text-5xl font-bold bg-gradient-to-r from-purple-600 via-pink-600 to-blue-600 bg-clip-text text-transparent mb-4">
            {dict.hero.title}
          </h1>
          <p className="text-xl text-gray-700 max-w-2xl mx-auto leading-relaxed">
            {dict.hero.subtitle}
          </p>
        </div>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
        <StatCard
          title={dict.mainStats.total.title}
          value={stats.gender.total}
          icon={<Users className="w-8 h-8" />}
          description={dict.mainStats.total.description}
          gradient="from-blue-500 to-cyan-500"
          iconColor="text-white"
          trend={{ value: 12, isPositive: true }}
          dict={dict.mainStats.trend}
        />
        <StatCard
          title={dict.mainStats.ratio.title}
          value={genderRatio.formattedRatio}
          icon={<UserCheck className="w-8 h-8" />}
          description={dict.mainStats.ratio.description}
          gradient="from-purple-500 to-pink-500"
          iconColor="text-white"
          dict={dict.mainStats.trend}
        />
        <StatCard
          title={dict.mainStats.activity.title}
          value={`${activeUsers}%`}
          icon={<Clock className="w-8 h-8" />}
          gradient="from-green-500 to-emerald-500"
          iconColor="text-white"
          trend={{ value: 8, isPositive: true }}
          dict={dict.mainStats.trend}
        />
        <StatCard
          title={dict.mainStats.completion.title}
          value={`${completionStats.percentage}%`}
          icon={<CheckCircle className="w-8 h-8" />}
          description={dict.mainStats.completion.description
            .replace('{{completed}}', completionStats.completed.toString())
            .replace('{{total}}', stats.gender.total.toString())}
          gradient="from-orange-500 to-amber-500"
          iconColor="text-white"
          trend={{ value: 5, isPositive: true }}
          dict={dict.mainStats.trend}
        />
      </div>

      <Tabs defaultValue="demographics" className="w-full">
        <TabsList className="bg-purple-50/50 rounded-2xl p-1.5 h-auto shadow-lg border border-white/50 grid w-full grid-cols-3">
          <TabsTrigger
            value="demographics"
            className="flex items-center gap-2 rounded-xl transition-all duration-300 py-3 hover:scale-105 data-[state=active]:bg-white data-[state=active]:shadow-lg font-semibold"
          >
            <Users className="w-5 h-5" />
            {dict.tabs.demographics}
          </TabsTrigger>
          <TabsTrigger
            value="activity"
            className="flex items-center gap-2 rounded-xl transition-all duration-300 py-3 hover:scale-105 data-[state=active]:bg-white data-[state=active]:shadow-lg font-semibold"
          >
            <Activity className="w-5 h-5" />
            {dict.tabs.activity}
          </TabsTrigger>
          <TabsTrigger
            value="completion"
            className="flex items-center gap-2 rounded-xl transition-all duration-300 py-3 hover:scale-105 data-[state=active]:bg-white data-[state=active]:shadow-lg font-semibold"
          >
            <Target className="w-5 h-5" />
            {dict.tabs.completion}
          </TabsTrigger>
        </TabsList>

        <TabsContent value="demographics" className="mt-8">
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
            <EnhancedChartCard
              title={dict.charts.ageDistribution.title}
              description={dict.charts.ageDistribution.description}
              gradient="from-blue-500 to-cyan-500"
              icon={<Users className="w-6 h-6" />}
            >
              <ResponsiveContainer width="100%" height={300}>
                <BarChart data={ageDistribution}>
                  <CartesianGrid strokeDasharray="3 3" stroke="#f0f0f0" />
                  <XAxis
                    dataKey="range"
                    tick={{ fontSize: 12 }}
                    stroke="#666"
                  />
                  <YAxis tick={{ fontSize: 12 }} stroke="#666" />
                  <Tooltip
                    contentStyle={{
                      backgroundColor: 'white',
                      border: 'none',
                      borderRadius: '12px',
                      boxShadow: '0 10px 40px rgba(0,0,0,0.1)',
                    }}
                  />
                  <Bar
                    dataKey="count"
                    fill="url(#blueGradient)"
                    radius={[4, 4, 0, 0]}
                  />
                  <defs>
                    <linearGradient
                      id="blueGradient"
                      x1="0"
                      y1="0"
                      x2="0"
                      y2="1"
                    >
                      <stop offset="5%" stopColor="#3B82F6" stopOpacity={0.8} />
                      <stop
                        offset="95%"
                        stopColor="#06B6D4"
                        stopOpacity={0.6}
                      />
                    </linearGradient>
                  </defs>
                </BarChart>
              </ResponsiveContainer>
            </EnhancedChartCard>

            <EnhancedChartCard
              title={dict.charts.religiousDistribution.title}
              description={dict.charts.religiousDistribution.description}
              gradient="from-purple-500 to-pink-500"
              icon={<Heart className="w-6 h-6" />}
            >
              <ResponsiveContainer width="100%" height={300}>
                <PieChart>
                  <Pie
                    data={religiousDistribution}
                    dataKey="count"
                    nameKey="level"
                    cx="50%"
                    cy="50%"
                    outerRadius={100}
                    innerRadius={40}
                    paddingAngle={2}
                    label={({ name, percent }) =>
                      `${name} ${(percent * 100).toFixed(0)}%`
                    }
                  >
                    {religiousDistribution.map((_, index) => (
                      <Cell
                        key={`cell-${index}`}
                        fill={CHART_COLORS[index % CHART_COLORS.length]}
                      />
                    ))}
                  </Pie>
                  <Tooltip
                    contentStyle={{
                      backgroundColor: 'white',
                      border: 'none',
                      borderRadius: '12px',
                      boxShadow: '0 10px 40px rgba(0,0,0,0.1)',
                    }}
                  />
                </PieChart>
              </ResponsiveContainer>
            </EnhancedChartCard>

            <EnhancedChartCard
              title={dict.charts.topCities.title}
              description={dict.charts.topCities.description}
              gradient="from-green-500 to-emerald-500"
              icon={<MapPin className="w-6 h-6" />}
            >
              <div className="space-y-4">
                {topCities.map((city, index) => (
                  <div
                    key={city.city}
                    className="flex items-center justify-between p-4 bg-gradient-to-r from-green-50 to-emerald-50 rounded-xl border border-green-100 hover:shadow-md transition-all duration-300"
                  >
                    <div className="flex items-center gap-3">
                      <div
                        className={cn(
                          'w-8 h-8 rounded-full flex items-center justify-center text-white font-bold text-sm shadow-lg',
                          index === 0
                            ? 'bg-gradient-to-r from-yellow-400 to-orange-500'
                            : index === 1
                              ? 'bg-gradient-to-r from-gray-400 to-gray-500'
                              : index === 2
                                ? 'bg-gradient-to-r from-orange-400 to-red-500'
                                : 'bg-gradient-to-r from-green-400 to-emerald-500'
                        )}
                      >
                        {index + 1}
                      </div>
                      <div className="flex items-center gap-2">
                        <MapPin className="w-4 h-4 text-green-600" />
                        <span className="font-medium text-gray-800">
                          {city.city}
                        </span>
                      </div>
                    </div>
                    <Badge className="bg-gradient-to-r from-green-500 to-emerald-500 text-white border-0 shadow-sm px-3 py-1 font-bold">
                      {city.count}
                    </Badge>
                  </div>
                ))}
              </div>
            </EnhancedChartCard>
          </div>
        </TabsContent>

        <TabsContent value="activity" className="mt-8">
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
            <EnhancedChartCard
              title={dict.charts.userActivity.title}
              description={dict.charts.userActivity.description}
              gradient="from-orange-500 to-amber-500"
              icon={<Activity className="w-6 h-6" />}
            >
              <div className="space-y-6">
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div className="p-4 bg-gradient-to-r from-orange-50 to-amber-50 rounded-xl border border-orange-100">
                    <div className="flex items-center justify-between mb-2">
                      <span className="text-sm font-medium text-orange-800">
                        {dict.charts.userActivity.weeklyActive}
                      </span>
                      <TrendingUp className="w-4 h-4 text-orange-600" />
                    </div>
                    <span className="text-2xl font-bold text-orange-900">
                      {activityTrend.weekly}
                    </span>
                  </div>
                  <div className="p-4 bg-gradient-to-r from-amber-50 to-yellow-50 rounded-xl border border-amber-100">
                    <div className="flex items-center justify-between mb-2">
                      <span className="text-sm font-medium text-amber-800">
                        {dict.charts.userActivity.monthlyActive}
                      </span>
                      <Activity className="w-4 h-4 text-amber-600" />
                    </div>
                    <span className="text-2xl font-bold text-amber-900">
                      {activityTrend.monthly}
                    </span>
                  </div>
                </div>
                <div className="p-4 bg-gradient-to-r from-yellow-50 to-orange-50 rounded-xl border border-yellow-100">
                  <div className="flex items-center justify-between mb-2">
                    <span className="text-sm font-medium text-yellow-800">
                      {dict.charts.userActivity.avgLogin}
                    </span>
                    <Clock className="w-4 h-4 text-yellow-600" />
                  </div>
                  <span className="text-2xl font-bold text-yellow-900">
                    {activityTrend.average} {dict.charts.userActivity.days}
                  </span>
                </div>
              </div>
            </EnhancedChartCard>

            <EnhancedChartCard
              title={dict.charts.activityTrend.title}
              description={dict.charts.activityTrend.description}
              gradient="from-indigo-500 to-purple-500"
              icon={<Star className="w-6 h-6" />}
            >
              <div className="flex items-center justify-center h-64 text-gray-500">
                <div className="text-center">
                  <Sparkles className="w-12 h-12 mx-auto mb-4 text-indigo-400" />
                  <p>{dict.charts.activityTrend.comingSoon}</p>
                  <p className="text-sm">
                    {dict.charts.activityTrend.subtitle}
                  </p>
                </div>
              </div>
            </EnhancedChartCard>
          </div>
        </TabsContent>

        <TabsContent value="completion" className="mt-8">
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
            <EnhancedChartCard
              title={dict.charts.profileCompletion.title}
              description={dict.charts.profileCompletion.description}
              gradient="from-red-500 to-pink-500"
              icon={<Target className="w-6 h-6" />}
            >
              <div className="space-y-6">
                <div className="space-y-4">
                  <div className="flex items-center justify-between p-4 bg-gradient-to-r from-red-50 to-pink-50 rounded-xl border border-red-100 hover:shadow-md transition-all duration-300">
                    <div className="flex items-center gap-3">
                      <div className="p-2 rounded-full bg-gradient-to-r from-red-500 to-pink-500 text-white shadow-lg">
                        <ImageIcon className="w-4 h-4" />
                      </div>
                      <span className="font-medium text-gray-800">
                        {dict.charts.profileCompletion.hasPhotos}
                      </span>
                    </div>
                    <Badge className="bg-gradient-to-r from-red-500 to-pink-500 text-white border-0 shadow-sm px-3 py-1 font-bold">
                      {stats.completion.percentages.hasPhotos}%
                    </Badge>
                  </div>
                  <div className="flex items-center justify-between p-4 bg-gradient-to-r from-pink-50 to-rose-50 rounded-xl border border-pink-100 hover:shadow-md transition-all duration-300">
                    <div className="flex items-center gap-3">
                      <div className="p-2 rounded-full bg-gradient-to-r from-pink-500 to-rose-500 text-white shadow-lg">
                        <CheckCircle className="w-4 h-4" />
                      </div>
                      <span className="font-medium text-gray-800">
                        {dict.charts.profileCompletion.isVerified}
                      </span>
                    </div>
                    <Badge className="bg-gradient-to-r from-pink-500 to-rose-500 text-white border-0 shadow-sm px-3 py-1 font-bold">
                      {stats.completion.percentages.isVerified}%
                    </Badge>
                  </div>
                  <div className="flex items-center justify-between p-4 bg-gradient-to-r from-rose-50 to-red-50 rounded-xl border border-rose-100 hover:shadow-md transition-all duration-300">
                    <div className="flex items-center gap-3">
                      <div className="p-2 rounded-full bg-gradient-to-r from-rose-500 to-red-500 text-white shadow-lg">
                        <Users className="w-4 h-4" />
                      </div>
                      <span className="font-medium text-gray-800">
                        {dict.charts.profileCompletion.hasReferences}
                      </span>
                    </div>
                    <Badge className="bg-gradient-to-r from-rose-500 to-red-500 text-white border-0 shadow-sm px-3 py-1 font-bold">
                      {stats.completion.percentages.hasReferences}%
                    </Badge>
                  </div>
                </div>
              </div>
            </EnhancedChartCard>

            <EnhancedChartCard
              title={dict.charts.performance.title}
              description={dict.charts.performance.description}
              gradient="from-emerald-500 to-green-500"
              icon={<Award className="w-6 h-6" />}
            >
              <div className="space-y-6">
                <div className="grid grid-cols-2 gap-4">
                  <div className="text-center p-4 bg-gradient-to-r from-emerald-50 to-green-50 rounded-xl border border-emerald-100">
                    <Crown className="w-8 h-8 mx-auto mb-2 text-emerald-600" />
                    <div className="text-2xl font-bold text-emerald-800">
                      A+
                    </div>
                    <div className="text-sm text-emerald-600">
                      {dict.charts.performance.qualityRating}
                    </div>
                  </div>
                  <div className="text-center p-4 bg-gradient-to-r from-green-50 to-emerald-50 rounded-xl border border-green-100">
                    <Zap className="w-8 h-8 mx-auto mb-2 text-green-600" />
                    <div className="text-2xl font-bold text-green-800">95%</div>
                    <div className="text-sm text-green-600">
                      {dict.charts.performance.satisfaction}
                    </div>
                  </div>
                </div>
                <div className="p-4 bg-gradient-to-r from-blue-50 to-cyan-50 rounded-xl border border-blue-100">
                  <div className="flex items-center justify-between mb-3">
                    <span className="font-medium text-blue-800">
                      {dict.charts.performance.monthlyProgress}
                    </span>
                    <TrendingUp className="w-4 h-4 text-blue-600" />
                  </div>
                  <div className="space-y-2">
                    <div className="flex justify-between text-sm">
                      <span className="text-blue-700">
                        {dict.charts.performance.newCandidates}
                      </span>
                      <span className="font-bold text-blue-800">+12%</span>
                    </div>
                    <div className="flex justify-between text-sm">
                      <span className="text-blue-700">
                        {dict.charts.performance.activity}
                      </span>
                      <span className="font-bold text-blue-800">+8%</span>
                    </div>
                    <div className="flex justify-between text-sm">
                      <span className="text-blue-700">
                        {dict.charts.performance.profileCompletion}
                      </span>
                      <span className="font-bold text-blue-800">+5%</span>
                    </div>
                  </div>
                </div>
              </div>
            </EnhancedChartCard>
          </div>
        </TabsContent>
      </Tabs>
    </div>
  );
};

export default CandidatesStats;
--- End of Content for CandidatesStats.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\new\CandidatesManager\SplitView.tsx
--------------------------------------------------------------------------------
Content:
// File: src/app/components/matchmaker/new/CandidatesManager/SplitView.tsx

'use client';

import React, { useMemo, useEffect, useState } from 'react';
import {
  ResizableHandle,
  ResizablePanel,
  ResizablePanelGroup,
} from '@/components/ui/resizable';
import CandidatesList from './CandidatesList';
import { Badge } from '@/components/ui/badge';
import {
  Sparkles,
  XCircle,
  Users,
  User,
  Target,
  Crown,
  Zap,
  Search,
} from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Card, CardContent } from '@/components/ui/card';
import type {
  Candidate,
  CandidateAction,
  MobileView,
} from '../types/candidates';
import type { FilterState } from '../types/filters';
import SearchBar from '../Filters/SearchBar';
import { toast } from 'sonner';
import { cn } from '@/lib/utils';
import { Gender } from '@prisma/client';
import type { MatchmakerPageDictionary } from '@/types/dictionaries/matchmaker';
import type { ProfilePageDictionary } from '@/types/dictionary';

interface AiMatch {
  userId: string;
  score: number;
}

interface SplitViewProps {
  isQuickViewEnabled: boolean;
  maleCandidates: Candidate[];
  femaleCandidates: Candidate[];
  allCandidates: Candidate[];
  onCandidateAction: (type: CandidateAction, candidate: Candidate) => void;
  onCandidateClick: (candidate: Candidate) => void;
  viewMode: 'grid' | 'list';
  mobileView: MobileView;
  isLoading?: boolean;
  className?: string;
  locale: string;
  aiTargetCandidate: Candidate | null;
  aiMatches: AiMatch[];
  isAiLoading: boolean;
  onSetAiTarget: (candidate: Candidate, e: React.MouseEvent) => void;
  onClearAiTarget: (e: React.MouseEvent) => void;
  setAiMatches: React.Dispatch<React.SetStateAction<AiMatch[]>>;
  setIsAiLoading: React.Dispatch<React.SetStateAction<boolean>>;
  comparisonSelection: Record<string, Candidate>;
  onToggleComparison: (candidate: Candidate, e: React.MouseEvent) => void;

  separateFiltering: boolean;
  maleFilters?: Partial<FilterState>;
  femaleFilters?: Partial<FilterState>;
  onMaleFiltersChange: (filters: Partial<FilterState>) => void;
  onFemaleFiltersChange: (filters: Partial<FilterState>) => void;
  onCopyFilters: (source: 'male' | 'female', target: 'male' | 'female') => void;
  maleSearchQuery?: string;
  femaleSearchQuery?: string;
  onMaleSearchChange?: (query: string) => void;
  onFemaleSearchChange?: (query: string) => void;

  dict: MatchmakerPageDictionary;
  profileDict: ProfilePageDictionary;
}

// Enhanced Panel Header Component
const PanelHeaderComponent: React.FC<{
  gender: 'male' | 'female';
  count: number;
  aiTargetCandidate: Candidate | null;
  isSearchPanel: boolean;
  isTargetPanel: boolean;
  onClearAiTarget: (e: React.MouseEvent) => void;
  onFindAiMatches: (e: React.MouseEvent) => void;
  isAiLoading: boolean;
  isMobileView?: boolean;
  dict: MatchmakerPageDictionary['candidatesManager']['splitView']['panelHeaders'];
}> = ({
  gender,
  count,
  aiTargetCandidate,
  isSearchPanel,
  isTargetPanel,
  onClearAiTarget,
  onFindAiMatches,
  isAiLoading,
  isMobileView = false,
  dict,
}) => {
  const genderConfig = {
    male: {
      title: dict.male.title,
      subtitle: dict.male.subtitle.replace('{{count}}', count.toString()),
      icon: Target,
      colors: {
        gradient: 'from-blue-500 to-cyan-500',
        bg: 'from-blue-50 to-cyan-50',
        text: 'text-blue-800',
        badge: 'bg-blue-500',
      },
    },
    female: {
      title: dict.female.title,
      subtitle: dict.female.subtitle.replace('{{count}}', count.toString()),
      icon: Crown,
      colors: {
        gradient: 'from-purple-500 to-pink-500',
        bg: 'from-purple-50 to-pink-50',
        text: 'text-purple-800',
        badge: 'bg-purple-500',
      },
    },
  };

  const config = genderConfig[gender];
  const IconComponent = config.icon;

  return (
    <div
      className={cn(
        'flex justify-between items-center p-4 rounded-t-2xl',
        !isMobileView &&
          `bg-gradient-to-r ${config.colors.bg} border-b border-gray-100/50`
      )}
    >
      <div className="flex items-center gap-3">
        <div
          className={cn(
            'p-3 rounded-full shadow-lg text-white transition-transform hover:scale-110',
            `bg-gradient-to-r ${config.colors.gradient}`
          )}
        >
          <IconComponent className="w-6 h-6" />
        </div>
        <div>
          <h2 className={cn('text-xl font-bold', config.colors.text)}>
            {config.title}
          </h2>
          <p className="text-sm text-gray-600">{config.subtitle}</p>
        </div>
        <Badge
          className={cn(
            'text-white border-0 shadow-lg px-3 py-1 font-bold',
            config.colors.badge
          )}
        >
          {count}
        </Badge>
      </div>
      <div className="flex items-center gap-2">
        {isTargetPanel && aiTargetCandidate && (
          <div className="flex items-center gap-2 bg-green-100 p-2 rounded-full shadow-lg animate-pulse">
            <div className="w-2 h-2 bg-green-500 rounded-full animate-ping"></div>
            <span className="text-sm font-medium text-green-800 px-2">
              {dict.targetLabel.replace(
                '{{name}}',
                aiTargetCandidate.firstName
              )}
            </span>
            <Button
              size="icon"
              variant="ghost"
              className="h-6 w-6 text-green-700 hover:bg-green-200 rounded-full"
              onClick={onClearAiTarget}
            >
              <XCircle className="h-4 w-4" />
            </Button>
          </div>
        )}
        {isSearchPanel && (
          <Button
            size="sm"
            onClick={onFindAiMatches}
            disabled={isAiLoading}
            className={cn(
              'shadow-lg font-bold transition-all duration-300 hover:scale-105',
              `bg-gradient-to-r ${config.colors.gradient} hover:opacity-90 text-white`
            )}
          >
            <Sparkles
              className={cn('ml-2 h-4 w-4', isAiLoading && 'animate-spin')}
            />
            {isAiLoading ? dict.searchingButton : dict.findMatchesButton}
            <Zap className="w-3 h-3 mr-1" />
          </Button>
        )}
      </div>
    </div>
  );
};

// Enhanced Loading Component
const LoadingComponent: React.FC<{ gender: 'male' | 'female' }> = ({
  gender,
}) => {
  const config =
    gender === 'male'
      ? {
          gradient: 'from-blue-200 to-cyan-200',
          icon: Target,
          title: 'טוען מועמדים...',
          subtitle: 'אנא המתן בזמן שאנו מביאים את הנתונים',
        }
      : {
          gradient: 'from-purple-200 to-pink-200',
          icon: Crown,
          title: 'טוענת מועמדות...',
          subtitle: 'אנא המתיני בזמן שאנו מביאות את הנתונים',
        };

  const IconComponent = config.icon;

  return (
    <div className="flex flex-col items-center justify-center h-64 p-8">
      <div
        className={cn(
          'p-6 rounded-full mb-4 animate-pulse',
          `bg-gradient-to-r ${config.gradient}`
        )}
      >
        <IconComponent className="w-12 h-12 text-white" />
      </div>
      <div className="text-center">
        <h3 className="text-lg font-bold text-gray-700 mb-2">{config.title}</h3>
        <p className="text-gray-500">{config.subtitle}</p>
      </div>
    </div>
  );
};

// Enhanced Empty State Component
const EmptyStateComponent: React.FC<{
  gender: 'male' | 'female';
  searchQuery?: string;
  onClearSearch?: () => void;
  dict: MatchmakerPageDictionary['candidatesManager']['list']['emptyState'];
}> = ({ gender, searchQuery, onClearSearch, dict }) => {
  const config =
    gender === 'male'
      ? { gradient: 'from-blue-100 to-cyan-100', icon: Target }
      : { gradient: 'from-purple-100 to-pink-100', icon: Crown };

  const IconComponent = config.icon;

  return (
    <div className="flex flex-col items-center justify-center h-64 p-8">
      <div
        className={cn(
          'w-24 h-24 rounded-full flex items-center justify-center mb-6 shadow-lg',
          `bg-gradient-to-br ${config.gradient}`
        )}
      >
        <IconComponent className="w-12 h-12 text-gray-400" />
      </div>
      <h3 className="text-xl font-bold text-gray-800 mb-2">{dict.title}</h3>
      <p className="text-gray-600 text-center mb-4 max-w-sm">
        {searchQuery
          ? `לא נמצאו תוצאות עבור "${searchQuery}"`
          : dict.description}
      </p>
      {searchQuery && onClearSearch && (
        <Button
          variant="outline"
          onClick={onClearSearch}
          className="border-2 border-gray-300 hover:border-gray-400"
        >
          <Search className="w-4 h-4 ml-2" />
          נקה חיפוש
        </Button>
      )}
    </div>
  );
};

const SplitView: React.FC<SplitViewProps> = ({
  dict,
  profileDict,
  isQuickViewEnabled,
  locale,
  ...props
}) => {
  const {
    maleCandidates,
    femaleCandidates,
    allCandidates,
    onCandidateAction,
    onCandidateClick,
    viewMode,
    mobileView,
    isLoading = false,
    className,
    maleSearchQuery = '',
    femaleSearchQuery = '',
    onMaleSearchChange,
    onFemaleSearchChange,
    aiTargetCandidate,
    aiMatches,
    isAiLoading,
    onSetAiTarget,
    onClearAiTarget,
    setAiMatches,
    setIsAiLoading,
    comparisonSelection,
    onToggleComparison,
    separateFiltering,
  } = props;

  const [isMobile, setIsMobile] = useState(false);

  useEffect(() => {
    const checkScreenSize = () => setIsMobile(window.innerWidth < 768);
    checkScreenSize();
    window.addEventListener('resize', checkScreenSize);
    return () => window.removeEventListener('resize', checkScreenSize);
  }, []);

  const handleFindAiMatches = async (e: React.MouseEvent) => {
    e.stopPropagation();
    if (!aiTargetCandidate) return;
    setIsAiLoading(true);
    setAiMatches([]);
    const targetGender = aiTargetCandidate.profile.gender;
    const candidatePool =
      targetGender === Gender.MALE ? femaleCandidates : maleCandidates;
    const candidatePoolIds = candidatePool.map((c) => c.id);
    if (candidatePoolIds.length === 0) {
      toast.error('אין מועמדים במאגר לחיפוש התאמות.', {
        position: 'top-center',
      });
      setIsAiLoading(false);
      return;
    }
    try {
      const response = await fetch('/api/ai/find-matches', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          targetUserId: aiTargetCandidate.id,
          candidatePoolIds,
        }),
      });
      const data = await response.json();
      if (!response.ok || !data.success)
        throw new Error(data.error || 'Failed to fetch AI matches');
      setAiMatches(data.matches);
      toast.success(`נמצאו ${data.matches.length} התאמות AI פוטנציאליות.`, {
        position: 'top-center',
        description: 'המועמדים המומלצים מסומנים ומויינו לראש הרשימה.',
      });
    } catch (error) {
      console.error('Error finding AI matches:', error);
      toast.error('שגיאה במציאת התאמות AI.', {
        description:
          error instanceof Error ? error.message : 'נסה שוב מאוחר יותר.',
      });
    } finally {
      setIsAiLoading(false);
    }
  };

  const maleCandidatesWithScores = useMemo(() => {
    if (aiMatches.length === 0) return maleCandidates;
    const scoreMap = new Map(aiMatches.map((m) => [m.userId, m.score]));
    return maleCandidates
      .map((c) => ({ ...c, aiScore: scoreMap.get(c.id) }))
      .sort((a, b) => (b.aiScore ?? -1) - (a.aiScore ?? -1));
  }, [maleCandidates, aiMatches]);

  const femaleCandidatesWithScores = useMemo(() => {
    if (aiMatches.length === 0) return femaleCandidates;
    const scoreMap = new Map(aiMatches.map((m) => [m.userId, m.score]));
    return femaleCandidates
      .map((c) => ({ ...c, aiScore: scoreMap.get(c.id) }))
      .sort((a, b) => (b.aiScore ?? -1) - (a.aiScore ?? -1));
  }, [femaleCandidates, aiMatches]);

  const renderPanelHeader = (
    gender: 'male' | 'female',
    isMobileView: boolean = false
  ) => {
    const panelGenderEnum = gender === 'male' ? Gender.MALE : Gender.FEMALE;
    const isTargetPanel = aiTargetCandidate?.profile.gender === panelGenderEnum;
    const isSearchPanel = !!(
      aiTargetCandidate && aiTargetCandidate.profile.gender !== panelGenderEnum
    );
    const count =
      gender === 'male' ? maleCandidates.length : femaleCandidates.length;

    return (
      <PanelHeaderComponent
        gender={gender}
        count={count}
        aiTargetCandidate={aiTargetCandidate}
        isSearchPanel={isSearchPanel}
        isTargetPanel={isTargetPanel}
        onClearAiTarget={onClearAiTarget}
        onFindAiMatches={handleFindAiMatches}
        isAiLoading={isAiLoading}
        isMobileView={isMobileView}
        dict={dict.candidatesManager.splitView.panelHeaders}
      />
    );
  };

  const renderCandidatesListForMobile = (
    candidates: (Candidate & { aiScore?: number })[],
    gender: 'male' | 'female',
    searchQuery: string,
    onSearchChange?: (query: string) => void
  ) => {
    if (isLoading) {
      return <LoadingComponent gender={gender} />;
    }
    if (candidates.length === 0) {
      return (
        <EmptyStateComponent
          gender={gender}
          searchQuery={searchQuery}
          onClearSearch={() => onSearchChange?.('')}
          dict={dict.candidatesManager.list.emptyState}
        />
      );
    }
    return (
      <CandidatesList
        candidates={candidates}
        allCandidates={allCandidates}
        onCandidateClick={onCandidateClick}
        onCandidateAction={onCandidateAction}
        viewMode={viewMode}
        mobileView={mobileView}
        isLoading={isLoading}
        highlightTerm={searchQuery}
        aiTargetCandidate={aiTargetCandidate}
        onSetAiTarget={onSetAiTarget}
        comparisonSelection={comparisonSelection}
        onToggleComparison={onToggleComparison}
        isQuickViewEnabled={isQuickViewEnabled} // <-- העברה הלאה
        dict={dict}
        profileDict={profileDict}
        locale={locale}
      />
    );
  };

  if (isMobile) {
    if (mobileView === 'split') {
      return (
        <div className="grid grid-cols-2 gap-3 h-full p-3">
          <Card className="flex flex-col h-full shadow-xl border-0 bg-gradient-to-b from-white to-blue-50/30 overflow-hidden rounded-2xl">
            <div className="p-3 text-center bg-gradient-to-r from-blue-500 to-cyan-500 text-white">
              <h2 className="text-sm font-bold flex items-center justify-center gap-1">
                <Target className="w-4 h-4" />
                {dict.candidatesManager.splitView.mobile.splitLabels.male}
                <Badge
                  variant="secondary"
                  className="bg-white/20 text-white border-0 ml-1"
                >
                  {maleCandidates.length}
                </Badge>
              </h2>
            </div>
            <div className="flex-grow min-h-0 overflow-y-auto p-2">
              {renderCandidatesListForMobile(
                maleCandidatesWithScores,
                'male',
                maleSearchQuery,
                onMaleSearchChange
              )}
            </div>
          </Card>
          <Card className="flex flex-col h-full shadow-xl border-0 bg-gradient-to-b from-white to-purple-50/30 overflow-hidden rounded-2xl">
            <div className="p-3 text-center bg-gradient-to-r from-purple-500 to-pink-500 text-white">
              <h2 className="text-sm font-bold flex items-center justify-center gap-1">
                <Crown className="w-4 h-4" />
                {dict.candidatesManager.splitView.mobile.splitLabels.female}
                <Badge
                  variant="secondary"
                  className="bg-white/20 text-white border-0 ml-1"
                >
                  {femaleCandidates.length}
                </Badge>
              </h2>
            </div>
            <div className="flex-grow min-h-0 overflow-y-auto p-2">
              {renderCandidatesListForMobile(
                femaleCandidatesWithScores,
                'female',
                femaleSearchQuery,
                onFemaleSearchChange
              )}
            </div>
          </Card>
        </div>
      );
    }

    return (
      <div className={cn('w-full h-full', className)}>
        <Tabs defaultValue="male" className="w-full h-full flex flex-col">
          <TabsList className="grid w-full grid-cols-2 flex-shrink-0 bg-gradient-to-r from-indigo-50 to-purple-50 p-1 rounded-2xl shadow-lg">
            <TabsTrigger
              value="male"
              className="flex items-center gap-2 rounded-xl data-[state=active]:bg-gradient-to-r data-[state=active]:from-blue-500 data-[state=active]:to-cyan-500 data-[state=active]:text-white data-[state=active]:shadow-lg"
            >
              <Target className="h-4 w-4" />
              {dict.candidatesManager.splitView.mobile.tabs.male}
              <Badge
                variant="secondary"
                className="bg-blue-100 text-blue-800 border-0"
              >
                {maleCandidates.length}
              </Badge>
            </TabsTrigger>
            <TabsTrigger
              value="female"
              className="flex items-center gap-2 rounded-xl data-[state=active]:bg-gradient-to-r data-[state=active]:from-purple-500 data-[state=active]:to-pink-500 data-[state=active]:text-white data-[state=active]:shadow-lg"
            >
              <Crown className="h-4 w-4" />
              {dict.candidatesManager.splitView.mobile.tabs.female}
              <Badge
                variant="secondary"
                className="bg-purple-100 text-purple-800 border-0"
              >
                {femaleCandidates.length}
              </Badge>
            </TabsTrigger>
          </TabsList>
          <TabsContent value="male" className="mt-4 flex-1 min-h-0">
            <Card className="p-4 flex flex-col h-full shadow-xl border-0 bg-gradient-to-b from-white to-blue-50/30 rounded-2xl">
              {renderPanelHeader('male', true)}
              {aiTargetCandidate &&
                aiTargetCandidate.profile.gender === 'FEMALE' && (
                  <div className="mt-2">
                    <Button
                      size="sm"
                      onClick={handleFindAiMatches}
                      disabled={isAiLoading}
                      className="w-full shadow-lg font-bold transition-all duration-300 hover:scale-105 bg-gradient-to-r from-blue-500 to-cyan-500 hover:opacity-90 text-white"
                    >
                      <Sparkles
                        className={cn(
                          'ml-2 h-4 w-4',
                          isAiLoading && 'animate-spin'
                        )}
                      />
                      {isAiLoading
                        ? dict.candidatesManager.splitView.panelHeaders
                            .searchingButton
                        : dict.candidatesManager.splitView.panelHeaders
                            .findMatchesButton}
                      <Zap className="w-3 h-3 mr-1" />
                    </Button>
                  </div>
                )}

              {separateFiltering && onMaleSearchChange && (
                <div className="mb-4 w-full">
                  <SearchBar
                    value={maleSearchQuery}
                    onChange={onMaleSearchChange}
                    placeholder={
                      dict.candidatesManager.searchBar.malePlaceholder
                    }
                    genderTarget="male"
                    separateMode={true}
                    dict={dict.candidatesManager.searchBar}
                  />
                </div>
              )}
              <div className="flex-grow min-h-0 overflow-y-auto">
                {renderCandidatesListForMobile(
                  maleCandidatesWithScores,
                  'male',
                  maleSearchQuery,
                  onMaleSearchChange
                )}
              </div>
            </Card>
          </TabsContent>
          <TabsContent value="female" className="mt-4 flex-1 min-h-0">
            <Card className="p-4 flex flex-col h-full shadow-xl border-0 bg-gradient-to-b from-white to-purple-50/30 rounded-2xl">
              {renderPanelHeader('female', true)}
              {aiTargetCandidate &&
                aiTargetCandidate.profile.gender === 'MALE' && (
                  <div className="mt-2">
                    <Button
                      size="sm"
                      onClick={handleFindAiMatches}
                      disabled={isAiLoading}
                      className="w-full shadow-lg font-bold transition-all duration-300 hover:scale-105 bg-gradient-to-r from-purple-500 to-pink-500 hover:opacity-90 text-white"
                    >
                      <Sparkles
                        className={cn(
                          'ml-2 h-4 w-4',
                          isAiLoading && 'animate-spin'
                        )}
                      />
                      {isAiLoading
                        ? dict.candidatesManager.splitView.panelHeaders
                            .searchingButton
                        : dict.candidatesManager.splitView.panelHeaders
                            .findMatchesButton}
                      <Zap className="w-3 h-3 mr-1" />
                    </Button>
                  </div>
                )}

              {separateFiltering && onFemaleSearchChange && (
                <div className="mb-4 w-full">
                  <SearchBar
                    value={femaleSearchQuery}
                    onChange={onFemaleSearchChange}
                    placeholder={
                      dict.candidatesManager.searchBar.femalePlaceholder
                    }
                    genderTarget="female"
                    separateMode={true}
                    dict={dict.candidatesManager.searchBar}
                  />
                </div>
              )}
              <div className="flex-grow min-h-0 overflow-y-auto">
                {renderCandidatesListForMobile(
                  femaleCandidatesWithScores,
                  'female',
                  femaleSearchQuery,
                  onFemaleSearchChange
                )}
              </div>
            </Card>
          </TabsContent>
        </Tabs>
      </div>
    );
  }

  // --- Desktop View using Resizable Panels ---
  return (
    <div className={cn('h-full', className)}>
      <ResizablePanelGroup
        direction="horizontal"
        className="h-full rounded-2xl bg-white shadow-2xl border-0 overflow-hidden"
      >
        <ResizablePanel defaultSize={50} minSize={30}>
          <div className="flex flex-col h-full bg-gradient-to-b from-white to-blue-50/20">
            {renderPanelHeader('male')}
            {separateFiltering && onMaleSearchChange && (
              <div className="p-4 bg-blue-50/30 w-full">
                <SearchBar
                  value={maleSearchQuery}
                  onChange={onMaleSearchChange}
                  placeholder={dict.candidatesManager.searchBar.malePlaceholder}
                  genderTarget="male"
                  separateMode={true}
                  dict={dict.candidatesManager.searchBar}
                />
              </div>
            )}
            <div className="flex-grow min-h-0 overflow-y-auto p-4">
              <CandidatesList
                candidates={maleCandidatesWithScores}
                allCandidates={allCandidates}
                onCandidateClick={onCandidateClick}
                onCandidateAction={onCandidateAction}
                viewMode={viewMode}
                mobileView={mobileView}
                isLoading={isLoading}
                highlightTerm={maleSearchQuery}
                aiTargetCandidate={aiTargetCandidate}
                onSetAiTarget={onSetAiTarget}
                comparisonSelection={comparisonSelection}
                onToggleComparison={onToggleComparison}
                quickViewSide="right"
                isQuickViewEnabled={isQuickViewEnabled} // <-- העברה הלאה
                dict={dict}
                profileDict={profileDict}
                locale={locale}
              />
            </div>
          </div>
        </ResizablePanel>
        <ResizableHandle
          withHandle
          className="bg-gradient-to-b from-indigo-300 to-purple-300 hover:from-indigo-400 hover:to-purple-400 transition-colors w-2"
        />
        <ResizablePanel defaultSize={50} minSize={30}>
          <div className="flex flex-col h-full bg-gradient-to-b from-white to-purple-50/20">
            {renderPanelHeader('female')}
            {separateFiltering && onFemaleSearchChange && (
              <div className="p-4 bg-purple-50/30 w-full">
                <SearchBar
                  value={femaleSearchQuery}
                  onChange={onFemaleSearchChange}
                  placeholder={
                    dict.candidatesManager.searchBar.femalePlaceholder
                  }
                  genderTarget="female"
                  separateMode={true}
                  dict={dict.candidatesManager.searchBar}
                />
              </div>
            )}
            <div className="flex-grow min-h-0 overflow-y-auto p-4">
              <CandidatesList
                candidates={femaleCandidatesWithScores}
                allCandidates={allCandidates}
                onCandidateClick={onCandidateClick}
                onCandidateAction={onCandidateAction}
                viewMode={viewMode}
                mobileView={mobileView}
                isLoading={isLoading}
                highlightTerm={femaleSearchQuery}
                aiTargetCandidate={aiTargetCandidate}
                onSetAiTarget={onSetAiTarget}
                comparisonSelection={comparisonSelection}
                onToggleComparison={onToggleComparison}
                quickViewSide="left"
                isQuickViewEnabled={isQuickViewEnabled} // <-- העברה הלאה
                dict={dict}
                profileDict={profileDict}
                locale={locale}
              />
            </div>
          </div>
        </ResizablePanel>
      </ResizablePanelGroup>
    </div>
  );
};

export default SplitView;
--- End of Content for SplitView.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\new\CandidatesManager\StatsCard.tsx
--------------------------------------------------------------------------------
Content:
"use client";

import React from "react";

import { Card } from "@/components/ui/card";
import { cn } from "@/lib/utils";

interface StatsCardProps {
  icon: React.ElementType;
  title: string;
  value: string | number;
  trend?: {
    value: number;
    label: string;
    isPositive?: boolean;
  };
  variant?: "default" | "success" | "warning" | "destructive";
  bgGradient?: string;
  iconColor?: string;
  className?: string;
}

const StatsCard: React.FC<StatsCardProps> = ({
  icon: Icon,
  title,
  value,
  trend,
  variant = "default",
  bgGradient,
  iconColor = "text-primary",
  className,
}) => {
  const getVariantStyles = () => {
    switch (variant) {
      case "success":
        return "border-emerald-200";
      case "warning":
        return "border-amber-200";
      case "destructive":
        return "border-red-200";
      default:
        return "border-gray-200";
    }
  };

  return (
    <Card
      className={cn(
        "hover:shadow-md transition-all duration-300 p-4 overflow-hidden",
        bgGradient ? `bg-gradient-to-br ${bgGradient}` : "bg-card",
        getVariantStyles(),
        className
      )}
    >
      <div className="flex items-start justify-between">
        <div className="mr-4 flex-shrink-0">
          <div className={`p-2.5 rounded-full bg-white/60 backdrop-blur-sm shadow-sm`}>
            <Icon className={`w-4 h-4 ${iconColor}`} />
          </div>
        </div>

        <div className="flex-1 text-right">
          <p className="text-xs text-muted-foreground mb-1">{title}</p>
          <h3 className="text-xl font-bold">{value}</h3>

          {trend && (
            <div className="flex items-center justify-end gap-1 mt-1">
              <span
                className={cn(
                  "text-sm font-medium flex items-center gap-0.5",
                  trend.isPositive ? "text-emerald-600" : "text-red-600"
                )}
              >
                {trend.isPositive ? "+" : "-"}{trend.value}%
                <span className={`${trend.isPositive ? "rotate-0" : "rotate-180"} transition-transform`}>
                  ↑
                </span>
              </span>
              <span className="text-[11px] text-muted-foreground">
                {trend.label}
              </span>
            </div>
          )}
        </div>
      </div>

      {/* Animated background pattern for more visual appeal */}
      <div className="absolute right-0 bottom-0 opacity-10 pointer-events-none">
        <svg width="80" height="80" viewBox="0 0 80 80" fill="none" xmlns="http://www.w3.org/2000/svg">
          <circle cx="60" cy="60" r="40" fill="currentColor" />
        </svg>
      </div>
    </Card>
  );
};

export default StatsCard;
--- End of Content for StatsCard.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\new\CandidatesManager\index.tsx
--------------------------------------------------------------------------------
Content:
// File: src/app/components/matchmaker/new/CandidatesManager/index.tsx

'use client';

// --- React & Next.js Imports ---
import React, { useState, useCallback, useEffect, useMemo } from 'react';
import { useSession } from 'next-auth/react';
import { cn, getRelativeCloudinaryPath } from '@/lib/utils';
// --- Third-party Libraries ---
import {
  UserPlus,
  Filter,
  LayoutGrid,
  List,
  ArrowUpDown,
  RotateCw,
  BarChart2,
  Bot,
  Loader2,
  Columns,
  View,
  Users,
  Split,
  Sparkles,
  Crown,
  Target,
  Zap,
  TrendingUp,
  TrendingDown,
  Star,
  Activity,
  Eye, // הוספת אייקון
  EyeOff, // הוספת אייקון
  GitCompare, // <--- הוסף את זה
  X,
} from 'lucide-react';
import { toast } from 'sonner';
import { useParams } from 'next/navigation';

import Image from 'next/image'; // <--- הוסף את השורה הזו
import { motion, AnimatePresence } from 'framer-motion'; // <--- הוסף את השורה הזו

// --- UI Components ---
import { Button } from '@/components/ui/button';
import { Sheet, SheetContent, SheetTrigger } from '@/components/ui/sheet';
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuRadioGroup,
  DropdownMenuRadioItem,
} from '@/components/ui/dropdown-menu';
import { Badge } from '@/components/ui/badge';
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
  AlertDialogTrigger,
} from '@/components/ui/alert-dialog';

// --- Custom Hooks ---
import { useCandidates } from '../hooks/useCandidates';
import { useFilterLogic } from '../hooks/useFilterLogic';

// --- Internal Components ---
import SplitView from './SplitView';
import FilterPanel from '../Filters/FilterPanel';
import ActiveFilters from '../Filters/ActiveFilters';
import SearchBar from '../Filters/SearchBar';
import { LoadingContainer } from '../shared/LoadingStates';
import { AddManualCandidateDialog } from '../dialogs/AddManualCandidateDialog';
import { AiMatchAnalysisDialog } from '../dialogs/AiMatchAnalysisDialog';

// --- Types, Constants & Utils ---
import type {
  Candidate,
  ViewMode,
  CandidatesFilter,
  CandidateAction,
  MobileView,
} from '../types/candidates';
import { SORT_OPTIONS, VIEW_OPTIONS } from '../constants/filterOptions';
import type { MatchmakerPageDictionary } from '@/types/dictionaries/matchmaker';
import type { ProfilePageDictionary } from '@/types/dictionary';

// --- Local Types ---
interface AiMatch {
  userId: string;
  score: number;
}

// ============================================================================
// Minimal Compact Header Component
// ============================================================================
const MinimalHeader: React.FC<{
  stats: {
    total: number;
    male: number;
    female: number;
    verified: number;
    activeToday: number;
    profilesComplete: number;
  };
  onAddCandidate: () => void;
  onRefresh: () => void;
  isRefreshing: boolean;
  onBulkUpdate?: () => void;
  isBulkUpdating?: boolean;
  isAdmin?: boolean;
  isCompact: boolean;
  onToggleCompact: () => void;
  dict: MatchmakerPageDictionary['candidatesManager']['header'];
}> = ({
  stats,
  onAddCandidate,
  onRefresh,
  isRefreshing,
  onBulkUpdate,
  isBulkUpdating,
  isAdmin,
  isCompact,
  onToggleCompact,
  dict,
}) => {
  return (
    <header
      className={cn(
        'sticky top-0 z-40 bg-white/95 backdrop-blur-sm border-b border-gray-200 shadow-sm transition-all duration-300',
        isCompact ? 'h-16' : 'h-32'
      )}
    >
      <div className="container mx-auto px-6 h-full">
        {isCompact ? (
          // --- COMPACT MODE ---
          <div className="flex items-center justify-between h-full">
            <div className="flex items-center gap-4">
              <div className="flex items-center gap-2">
                <div className="p-1.5 rounded-lg bg-gradient-to-r from-indigo-500 to-purple-500 text-white">
                  <Users className="w-4 h-4" />
                </div>
                <h1 className="text-lg font-bold text-gray-800">
                  {dict.title}
                </h1>
              </div>
              <div className="hidden md:flex items-center gap-2">
                <Badge
                  variant="outline"
                  className="bg-blue-50 text-blue-700 border-blue-200"
                >
                  {stats.total} {dict.totalLabel}
                </Badge>
                <Badge
                  variant="outline"
                  className="bg-emerald-50 text-emerald-700 border-emerald-200"
                >
                  {stats.verified} {dict.verifiedLabel}
                </Badge>
                <Badge
                  variant="outline"
                  className="bg-orange-50 text-orange-700 border-orange-200"
                >
                  {stats.profilesComplete}
                  {dict.profilesCompleteLabel}
                </Badge>
              </div>
            </div>
            <div className="flex items-center gap-2">
              <Button
                onClick={onAddCandidate}
                size="sm"
                className="bg-gradient-to-r from-indigo-600 to-purple-600 hover:from-indigo-700 hover:to-purple-700 text-white shadow-md"
              >
                <UserPlus className="w-4 h-4 ml-1" />
                {dict.addButton}
              </Button>
              <Button
                onClick={onRefresh}
                variant="outline"
                size="sm"
                disabled={isRefreshing}
                className="border-gray-300 hover:bg-gray-50"
              >
                <RotateCw
                  className={cn('w-4 h-4', isRefreshing && 'animate-spin')}
                />
              </Button>
              {isAdmin && onBulkUpdate && (
                <Button
                  onClick={onBulkUpdate}
                  variant="secondary"
                  size="sm"
                  disabled={isBulkUpdating}
                  className="bg-amber-500 hover:bg-amber-600 text-white"
                >
                  {isBulkUpdating ? (
                    <Loader2 className="w-4 h-4 animate-spin" />
                  ) : (
                    <Bot className="w-4 h-4" />
                  )}
                </Button>
              )}
              <Button
                onClick={onToggleCompact}
                variant="ghost"
                size="sm"
                className="text-gray-500 hover:text-gray-700"
                title={dict.expandTooltip}
              >
                <TrendingUp className="w-4 h-4" />
              </Button>
            </div>
          </div>
        ) : (
          // --- EXPANDED MODE ---
          <div className="flex flex-col justify-center h-full py-3">
            <div className="flex items-center justify-between mb-3">
              <div className="flex items-center gap-3">
                <div className="p-2 rounded-xl bg-gradient-to-r from-indigo-500 to-purple-500 text-white shadow-lg">
                  <Users className="w-5 h-5" />
                </div>
                <div>
                  <h1 className="text-xl font-bold bg-gradient-to-r from-indigo-600 to-purple-600 bg-clip-text text-transparent">
                    {dict.advancedTitle}
                  </h1>
                  <p className="text-sm text-gray-600">
                    {dict.advancedSubtitle}
                  </p>
                </div>
              </div>
              <div className="flex items-center gap-2">
                <Button
                  onClick={onAddCandidate}
                  size="sm"
                  className="bg-gradient-to-r from-indigo-600 to-purple-600 hover:from-indigo-700 hover:to-purple-700 text-white shadow-lg"
                >
                  <UserPlus className="w-4 h-4 ml-2" />
                  {dict.addCandidateButton}
                  <Sparkles className="w-3 h-3 mr-1" />
                </Button>
                <Button
                  onClick={onRefresh}
                  variant="outline"
                  size="sm"
                  disabled={isRefreshing}
                  className="border-indigo-300 text-indigo-600 hover:bg-indigo-50"
                >
                  <RotateCw
                    className={cn('w-4 h-4', isRefreshing && 'animate-spin')}
                  />
                </Button>
                {isAdmin && onBulkUpdate && (
                  <AlertDialog>
                    <AlertDialogTrigger asChild>
                      <Button
                        variant="secondary"
                        size="sm"
                        disabled={isBulkUpdating}
                        className="bg-gradient-to-r from-amber-500 to-orange-500 hover:from-amber-600 hover:to-orange-600 text-white"
                      >
                        {isBulkUpdating ? (
                          <Loader2 className="w-4 h-4 animate-spin" />
                        ) : (
                          <Bot className="w-4 h-4" />
                        )}
                      </Button>
                    </AlertDialogTrigger>
                    <AlertDialogContent dir="rtl">
                      <AlertDialogHeader>
                        <AlertDialogTitle>
                          {dict.bulkUpdateDialog.title}
                        </AlertDialogTitle>
                        <AlertDialogDescription>
                          {dict.bulkUpdateDialog.description}
                        </AlertDialogDescription>
                      </AlertDialogHeader>
                      <AlertDialogFooter>
                        <AlertDialogCancel>
                          {dict.bulkUpdateDialog.cancel}
                        </AlertDialogCancel>
                        <AlertDialogAction onClick={onBulkUpdate}>
                          {dict.bulkUpdateDialog.confirm}
                        </AlertDialogAction>
                      </AlertDialogFooter>
                    </AlertDialogContent>
                  </AlertDialog>
                )}
                <Button
                  onClick={onToggleCompact}
                  variant="ghost"
                  size="sm"
                  className="text-gray-500 hover:text-gray-700"
                  title={dict.collapseTooltip}
                >
                  <TrendingDown className="w-4 h-4" />
                </Button>
              </div>
            </div>
            <div className="grid grid-cols-6 gap-3">
              <div className="text-center bg-gradient-to-br from-blue-50 to-cyan-50 rounded-lg p-2 shadow-sm border border-blue-100">
                <div className="text-lg font-bold text-blue-700">
                  {stats.total}
                </div>
                <div className="text-xs text-blue-600">{dict.stats.total}</div>
              </div>
              <div className="text-center bg-gradient-to-br from-indigo-50 to-blue-50 rounded-lg p-2 shadow-sm border border-indigo-100">
                <div className="text-lg font-bold text-indigo-700">
                  {stats.male}
                </div>
                <div className="text-xs text-indigo-600">{dict.stats.male}</div>
              </div>
              <div className="text-center bg-gradient-to-br from-purple-50 to-pink-50 rounded-lg p-2 shadow-sm border border-purple-100">
                <div className="text-lg font-bold text-purple-700">
                  {stats.female}
                </div>
                <div className="text-xs text-purple-600">
                  {dict.stats.female}
                </div>
              </div>
              <div className="text-center bg-gradient-to-br from-emerald-50 to-green-50 rounded-lg p-2 shadow-sm border border-emerald-100">
                <div className="text-lg font-bold text-emerald-700">
                  {stats.verified}
                </div>
                <div className="text-xs text-emerald-600">
                  {dict.stats.verified}
                </div>
              </div>
              <div className="text-center bg-gradient-to-br from-orange-50 to-amber-50 rounded-lg p-2 shadow-sm border border-orange-100">
                <div className="text-lg font-bold text-orange-700">
                  {stats.activeToday}
                </div>
                <div className="text-xs text-orange-600">
                  {dict.stats.active}
                </div>
              </div>
              <div className="text-center bg-gradient-to-br from-teal-50 to-cyan-50 rounded-lg p-2 shadow-sm border border-teal-100">
                <div className="text-lg font-bold text-teal-700">
                  {stats.profilesComplete}%
                </div>
                <div className="text-xs text-teal-600">
                  {dict.stats.complete}
                </div>
              </div>
            </div>
          </div>
        )}
      </div>
    </header>
  );
};

// ============================================================================
// Main Candidates Manager Component
// ============================================================================
interface CandidatesManagerProps {
  matchmakerDict: MatchmakerPageDictionary;
  profileDict: ProfilePageDictionary;
}

const CandidatesManager: React.FC<CandidatesManagerProps> = ({
  matchmakerDict,
  profileDict,
}) => {
  // --- State Management ---
  const [viewMode, setViewMode] = useState<ViewMode>('grid');
  const [mobileView, setMobileView] = useState<MobileView>('split');
  const [isMobile, setIsMobile] = useState(false);
  const [showFiltersPanel, setShowFiltersPanel] = useState(false);
  const [showFiltersMobile, setShowFiltersMobile] = useState(false);
  const [showManualAddDialog, setShowManualAddDialog] = useState(false);
  const [isHeaderCompact, setIsHeaderCompact] = useState(true);
  const [isQuickViewEnabled, setIsQuickViewEnabled] = useState(true); // <-- הוספת state חדש
  const params = useParams();
  const locale = Array.isArray(params.lang)
    ? params.lang[0]
    : params.lang || 'en';

  // --- AI State ---
  const [aiTargetCandidate, setAiTargetCandidate] = useState<Candidate | null>(
    null
  );
  const [comparisonSelection, setComparisonSelection] = useState<
    Record<string, Candidate>
  >({});
  const [aiMatches, setAiMatches] = useState<AiMatch[]>([]);
  const [isAiLoading, setIsAiLoading] = useState(false);
  const [isAnalysisDialogOpen, setIsAnalysisDialogOpen] = useState(false);
  const [isBulkUpdating, setIsBulkUpdating] = useState(false);

  // --- Session & Permissions ---
  const { data: session } = useSession();
  const isAdmin = session?.user?.role === 'ADMIN';

  // --- Custom Hooks ---
  const {
    loading,
    candidates,
    maleCandidates,
    femaleCandidates,
    setSorting,
    setFilters: setCandidatesFilters,
    refresh,
  } = useCandidates();
  const {
    filters,
    setFilters,
    savedFilters,
    recentSearches,
    popularFilters,
    activeFilters,
    saveFilter,
    resetFilters,
    clearRecentSearches,
    toggleSeparateFiltering,
    updateMaleFilters,
    updateFemaleFilters,
    copyFilters,
    updateMaleSearchQuery,
    updateFemaleSearchQuery,
    removeFilter,
  } = useFilterLogic({ onFilterChange: setCandidatesFilters });

  // --- Derived State ---
  const activeFilterCount = useMemo(
    () => activeFilters.length,
    [activeFilters]
  );
  const heroStats = useMemo(() => {
    const total = candidates.length;
    const male = candidates.filter((c) => c.profile.gender === 'MALE').length;
    const female = candidates.filter(
      (c) => c.profile.gender === 'FEMALE'
    ).length;
    const verified = candidates.filter((c) => c.isVerified).length;
    const activeToday = candidates.filter((c) => {
      const lastActive = new Date(c.createdAt);
      const today = new Date();
      return (
        (today.getTime() - lastActive.getTime()) / (1000 * 60 * 60 * 24) <= 7
      );
    }).length;
    const profilesComplete =
      total > 0
        ? Math.round(
            (candidates.filter((c) => c.isProfileComplete).length / total) * 100
          )
        : 0;
    return { total, male, female, verified, activeToday, profilesComplete };
  }, [candidates]);

  // --- Effects ---
  useEffect(() => {
    const checkScreen = () => {
      setShowFiltersPanel(window.innerWidth >= 1024);
      setIsMobile(window.innerWidth < 768);
    };
    checkScreen();
    window.addEventListener('resize', checkScreen);
    return () => window.removeEventListener('resize', checkScreen);
  }, []);

  // --- Event Handlers ---
  const handleCandidateAdded = useCallback(() => {
    refresh();
    toast.success('מועמד חדש נוסף בהצלחה!');
  }, [refresh]);

  const handleSearch = useCallback(
    (value: string) => {
      setFilters({ searchQuery: value });
    },
    [setFilters]
  );
  const handleRemoveFilter = useCallback(
    (key: keyof CandidatesFilter, value?: string) => {
      removeFilter(key, value);
    },
    [removeFilter]
  );
  const handleCandidateAction = useCallback(
    async (type: CandidateAction, candidate: Candidate) => {
      console.log(
        `Action '${type}' triggered for candidate: ${candidate.firstName}`
      );
    },
    []
  );

  const handleFilterSave = useCallback(
    async (name: string) => {
      try {
        await saveFilter(name, filters);
        toast.success('הפילטר נשמר בהצלחה');
      } catch {
        toast.error('שגיאה בשמירת הפילטר');
      }
    },
    [filters, saveFilter]
  );

  const handleSetAiTarget = useCallback(
    (candidate: Candidate, e: React.MouseEvent) => {
      e.stopPropagation();
      if (aiTargetCandidate?.id === candidate.id) {
        handleClearAiTarget(e);
        return;
      }
      setAiTargetCandidate(candidate);
      setAiMatches([]);
      setComparisonSelection({});
      toast.info(`מועמד מטרה נבחר: ${candidate.firstName}.`, {
        position: 'bottom-center',
      });
    },
    [aiTargetCandidate]
  );

  const handleClearAiTarget = (e: React.MouseEvent) => {
    e.stopPropagation();
    setAiTargetCandidate(null);
    setAiMatches([]);
    setComparisonSelection({});
    toast.info('בחירת מועמד מטרה בוטלה.', { position: 'bottom-center' });
  };

  const handleToggleComparison = useCallback(
    (candidate: Candidate, e: React.MouseEvent) => {
      e.stopPropagation();
      setComparisonSelection((prev) => {
        const newSelection = { ...prev };
        if (newSelection[candidate.id]) delete newSelection[candidate.id];
        else newSelection[candidate.id] = candidate;
        return newSelection;
      });
    },
    []
  );

  const handleUpdateAllProfiles = async () => {
    setIsBulkUpdating(true);
    toast.info('מתחיל תהליך עדכון פרופילי AI...');
    try {
      const response = await fetch('/api/ai/update-all-profiles', {
        method: 'POST',
      });
      const data = await response.json();
      if (!response.ok)
        throw new Error(data.error || 'שגיאה בהפעלת העדכון הכללי.');
      toast.success('העדכון הכללי הופעל בהצלחה!');
    } catch (error) {
      console.error('Failed to initiate bulk AI profile update:', error);
      toast.error('שגיאה בהפעלת העדכון', {
        description:
          error instanceof Error ? error.message : 'אנא נסה שוב מאוחר יותר.',
      });
    } finally {
      setIsBulkUpdating(false);
    }
  };

  // --- Render ---
  return (
    <div className="min-h-screen flex flex-col bg-gradient-to-br from-slate-50 via-indigo-50/10 to-purple-50/5">
      <MinimalHeader
        stats={heroStats}
        onAddCandidate={() => setShowManualAddDialog(true)}
        onRefresh={refresh}
        isRefreshing={loading}
        onBulkUpdate={handleUpdateAllProfiles}
        isBulkUpdating={isBulkUpdating}
        isAdmin={isAdmin}
        isCompact={isHeaderCompact}
        onToggleCompact={() => setIsHeaderCompact(!isHeaderCompact)}
        dict={matchmakerDict.candidatesManager.header}
      />

      {isHeaderCompact && (
        <div className="flex-shrink-0 bg-white/80 backdrop-blur-sm border-b border-gray-100 py-2 px-6 mt-16">
          <div className="container mx-auto px-6">
            <div className="flex justify-between items-center">
              {!filters.separateFiltering && (
                <div className="flex-1 max-w-md">
                  <SearchBar
                    value={filters.searchQuery || ''}
                    onChange={handleSearch}
                    placeholder={
                      matchmakerDict.candidatesManager.searchBar
                        .generalPlaceholder
                    }
                    recentSearches={recentSearches}
                    onClearRecentSearches={clearRecentSearches}
                    dict={matchmakerDict.candidatesManager.searchBar}
                  />
                </div>
              )}

              <div className="flex items-center gap-2">
                <DropdownMenu>
                  <DropdownMenuTrigger asChild>
                    <Button
                      variant="outline"
                      size="sm"
                      className="bg-white/90 shadow-sm border border-gray-200"
                    >
                      <ArrowUpDown className="w-4 h-4 ml-1" />
                      {matchmakerDict.candidatesManager.controls.sort}
                    </Button>
                  </DropdownMenuTrigger>
                  <DropdownMenuContent align="end">
                    <DropdownMenuLabel>
                      {matchmakerDict.candidatesManager.controls.sortBy}
                    </DropdownMenuLabel>
                    <DropdownMenuSeparator />
                    {SORT_OPTIONS.map((option) => (
                      <DropdownMenuItem
                        key={option.value}
                        onClick={() =>
                          setSorting(
                            option.value,
                            option.defaultOrder as 'asc' | 'desc'
                          )
                        }
                      >
                        {
                          matchmakerDict.candidatesManager.sortOptions[
                            option.value as keyof typeof matchmakerDict.candidatesManager.sortOptions
                          ]
                        }
                      </DropdownMenuItem>
                    ))}
                  </DropdownMenuContent>
                </DropdownMenu>
                <Button
                  variant="outline"
                  size="sm"
                  onClick={() => setIsQuickViewEnabled(!isQuickViewEnabled)}
                  className="bg-white/90 shadow-sm border border-gray-200"
                >
                  {isQuickViewEnabled ? (
                    <EyeOff className="w-4 h-4 ml-1" />
                  ) : (
                    <Eye className="w-4 h-4 ml-1" />
                  )}
                  {isQuickViewEnabled
                    ? matchmakerDict.candidatesManager.controls.disableQuickView
                    : matchmakerDict.candidatesManager.controls.enableQuickView}
                </Button>

                <div className="hidden lg:flex">
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={() => setShowFiltersPanel(!showFiltersPanel)}
                    className="bg-white/90 shadow-sm border border-gray-200"
                  >
                    <Filter className="w-4 h-4 ml-1" />
                    {showFiltersPanel
                      ? matchmakerDict.candidatesManager.controls.hideFilters
                      : matchmakerDict.candidatesManager.controls.filters}
                  </Button>
                </div>

                <Sheet
                  open={showFiltersMobile}
                  onOpenChange={setShowFiltersMobile}
                >
                  <SheetTrigger asChild>
                    <Button
                      variant="outline"
                      size="sm"
                      className="lg:hidden relative bg-white/90 shadow-sm border border-gray-200"
                    >
                      <Filter className="w-4 h-4 ml-1" />
                      {matchmakerDict.candidatesManager.controls.filters}
                      {activeFilterCount > 0 && (
                        <Badge className="absolute -top-1 -right-1 h-4 w-4 p-0 flex items-center justify-center bg-indigo-500 border-0 text-xs">
                          {activeFilterCount}
                        </Badge>
                      )}
                    </Button>
                  </SheetTrigger>
                  <SheetContent>
                    <FilterPanel
                      filters={filters}
                      onFiltersChange={setFilters}
                      onSavePreset={handleFilterSave}
                      onReset={resetFilters}
                      savedFilters={savedFilters.map((f) => ({
                        id: f.id,
                        name: f.name,
                        isDefault: f.isDefault,
                      }))}
                      popularFilters={popularFilters}
                      separateFiltering={filters.separateFiltering}
                      onToggleSeparateFiltering={toggleSeparateFiltering}
                      onMaleFiltersChange={updateMaleFilters}
                      onFemaleFiltersChange={updateFemaleFilters}
                      onCopyFilters={copyFilters}
                      dict={matchmakerDict.candidatesManager.filterPanel}
                    />
                  </SheetContent>
                </Sheet>

                <div className="flex gap-1 bg-white/90 p-1 rounded-lg shadow-sm border border-gray-200">
                  {isMobile ? (
                    <DropdownMenu>
                      <DropdownMenuTrigger asChild>
                        <Button
                          variant="outline"
                          size="sm"
                          className="w-24 justify-between px-2 border-0"
                        >
                          {mobileView === 'split' && (
                            <Users className="w-4 h-4" />
                          )}
                          {mobileView === 'single' && (
                            <View className="w-4 h-4" />
                          )}
                          {mobileView === 'double' && (
                            <Columns className="w-4 h-4" />
                          )}
                          <ArrowUpDown className="w-3 h-3 opacity-50 ml-1" />
                        </Button>
                      </DropdownMenuTrigger>
                      <DropdownMenuContent align="end">
                        <DropdownMenuRadioGroup
                          value={mobileView}
                          onValueChange={(value) =>
                            setMobileView(value as MobileView)
                          }
                        >
                          <DropdownMenuRadioItem value="split">
                            <Users className="w-4 h-4 mr-2" />
                            {
                              matchmakerDict.candidatesManager.controls.mobile
                                .split
                            }
                          </DropdownMenuRadioItem>
                          <DropdownMenuRadioItem value="single">
                            <View className="w-4 h-4 mr-2" />
                            {
                              matchmakerDict.candidatesManager.controls.mobile
                                .singleCol
                            }
                          </DropdownMenuRadioItem>
                          <DropdownMenuRadioItem value="double">
                            <Columns className="w-4 h-4 mr-2" />
                            {
                              matchmakerDict.candidatesManager.controls.mobile
                                .doubleCol
                            }
                          </DropdownMenuRadioItem>
                        </DropdownMenuRadioGroup>
                      </DropdownMenuContent>
                    </DropdownMenu>
                  ) : (
                    VIEW_OPTIONS.map((option) => (
                      <Button
                        key={option.value}
                        variant={
                          viewMode === option.value ? 'default' : 'ghost'
                        }
                        size="icon"
                        onClick={() => setViewMode(option.value as ViewMode)}
                        className={cn(
                          'h-8 w-8',
                          viewMode === option.value &&
                            'bg-indigo-500 text-white'
                        )}
                      >
                        {option.value === 'grid' ? (
                          <LayoutGrid className="w-4 h-4" />
                        ) : (
                          <List className="w-4 h-4" />
                        )}
                      </Button>
                    ))
                  )}
                </div>
              </div>
            </div>
            <div className="mt-2">
              <ActiveFilters
                filters={filters}
                onRemoveFilter={handleRemoveFilter}
                onResetAll={resetFilters}
                dict={matchmakerDict.candidatesManager.activeFilters}
              />
            </div>
          </div>
        </div>
      )}

      <main
        className={cn(
          'flex-1 min-h-0 container mx-auto px-6 pb-4 pt-4',
          !isHeaderCompact && 'mt-32'
        )}
      >
        <div className="flex gap-4 h-full">
          {showFiltersPanel && (
            <aside className="hidden lg:block w-72 flex-shrink-0">
              <div className="bg-white/90 backdrop-blur-sm rounded-xl shadow-lg border-0 h-full flex flex-col">
                <FilterPanel
                  filters={filters}
                  onFiltersChange={setFilters}
                  onSavePreset={handleFilterSave}
                  onReset={resetFilters}
                  savedFilters={savedFilters.map((f) => ({
                    id: f.id,
                    name: f.name,
                    isDefault: f.isDefault,
                  }))}
                  popularFilters={popularFilters}
                  separateFiltering={filters.separateFiltering}
                  onToggleSeparateFiltering={toggleSeparateFiltering}
                  onMaleFiltersChange={updateMaleFilters}
                  onFemaleFiltersChange={updateFemaleFilters}
                  onCopyFilters={copyFilters}
                  className="flex-1 overflow-y-auto"
                  dict={matchmakerDict.candidatesManager.filterPanel}
                />
              </div>
            </aside>
          )}

          <div className="flex-1 min-w-0 h-full">
            {loading ? (
              <LoadingContainer>
                <div className="h-full bg-gradient-to-br from-gray-100 to-gray-200 rounded-xl animate-pulse shadow-lg"></div>
              </LoadingContainer>
            ) : (
              <div className="bg-white/90 backdrop-blur-sm rounded-xl shadow-lg border-0 overflow-hidden h-full">
                <SplitView
                  maleCandidates={maleCandidates}
                  femaleCandidates={femaleCandidates}
                  allCandidates={candidates}
                  onCandidateAction={handleCandidateAction}
                  onCandidateClick={() => {}}
                  viewMode={viewMode}
                  mobileView={mobileView}
                  isLoading={loading || isAiLoading}
                  className="flex-1 overflow-hidden"
                  aiTargetCandidate={aiTargetCandidate}
                  aiMatches={aiMatches}
                  isAiLoading={isAiLoading}
                  onSetAiTarget={handleSetAiTarget}
                  onClearAiTarget={handleClearAiTarget}
                  setAiMatches={setAiMatches}
                  setIsAiLoading={setIsAiLoading}
                  comparisonSelection={comparisonSelection}
                  onToggleComparison={handleToggleComparison}
                  separateFiltering={filters.separateFiltering ?? false}
                  maleFilters={filters.maleFilters}
                  femaleFilters={filters.femaleFilters}
                  onMaleFiltersChange={updateMaleFilters}
                  onFemaleFiltersChange={updateFemaleFilters}
                  onCopyFilters={copyFilters}
                  maleSearchQuery={filters.maleSearchQuery}
                  femaleSearchQuery={filters.femaleSearchQuery}
                  onMaleSearchChange={updateMaleSearchQuery}
                  onFemaleSearchChange={updateFemaleSearchQuery}
                  dict={matchmakerDict}
                  profileDict={profileDict}
                  isQuickViewEnabled={isQuickViewEnabled} // <-- העברת prop חדש
                  locale={locale} // <--- הוסף את השורה הזו
                />
              </div>
            )}
          </div>
        </div>
      </main>
      <AnimatePresence>
        {aiTargetCandidate && Object.keys(comparisonSelection).length > 0 && (
          <motion.div
            initial={{ y: 100, opacity: 0 }}
            animate={{ y: 0, opacity: 1 }}
            exit={{ y: 100, opacity: 0 }}
            className="fixed bottom-6 left-1/2 -translate-x-1/2 z-50"
          >
            <div className="bg-white/80 backdrop-blur-sm p-3 rounded-2xl shadow-2xl border flex items-center gap-4">
              <div className="flex items-center -space-x-4">
                {Object.values(comparisonSelection)
                  .slice(0, 3)
                  .map((c) => (
                    <div
                      key={c.id}
                      className="w-10 h-10 rounded-full overflow-hidden border-2 border-white bg-gray-200 flex items-center justify-center text-gray-500 font-bold"
                    >
                      {c.images?.find((img) => img.isMain) ? (
                        <Image
                          src={getRelativeCloudinaryPath(
                            c.images.find((img) => img.isMain)!.url
                          )}
                          alt={c.firstName}
                          width={40}
                          height={40}
                          className="object-cover"
                        />
                      ) : (
                        <span>
                          {c.firstName.charAt(0)}
                          {c.lastName.charAt(0)}
                        </span>
                      )}
                    </div>
                  ))}
                {Object.keys(comparisonSelection).length > 3 && (
                  <div className="w-10 h-10 rounded-full bg-gray-300 flex items-center justify-center text-sm font-bold text-gray-600 border-2 border-white">
                    +{Object.keys(comparisonSelection).length - 3}
                  </div>
                )}
              </div>
              <Button
                onClick={() => setIsAnalysisDialogOpen(true)}
                className="bg-gradient-to-r from-teal-500 to-cyan-500 text-white font-bold shadow-lg"
              >
                <GitCompare className="w-4 h-4 ml-2" />
                {matchmakerDict.candidatesManager.controls.compareButton.replace(
                  '{{count}}',
                  String(Object.keys(comparisonSelection).length)
                )}
              </Button>
              <Button
                variant="ghost"
                size="icon"
                className="h-8 w-8 rounded-full"
                onClick={() => setComparisonSelection({})}
              >
                <X className="w-4 h-4" />
              </Button>
            </div>
          </motion.div>
        )}
      </AnimatePresence>

      {/* --- Dialogs --- */}
      <AddManualCandidateDialog
        isOpen={showManualAddDialog}
        onClose={() => setShowManualAddDialog(false)}
        onCandidateAdded={handleCandidateAdded}
        dict={matchmakerDict.candidatesManager.addManualCandidateDialog} // <--- הוספת השורה הזו
      />
      <AiMatchAnalysisDialog
        isOpen={isAnalysisDialogOpen}
        onClose={() => setIsAnalysisDialogOpen(false)}
        targetCandidate={aiTargetCandidate}
        comparisonCandidates={Object.values(comparisonSelection)}
        dict={matchmakerDict.candidatesManager.aiAnalysis}
        locale={locale as string} // <--- הוסף את השורה הזו
      />
    </div>
  );
};

export default CandidatesManager;
--- End of Content for index.tsx ---

================================================================================
Directory: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\new\Filters
================================================================================

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\new\Filters\ActiveFilters.tsx
--------------------------------------------------------------------------------
Content:
'use client';

import React from 'react';
import { X, RefreshCw, Sparkles, Filter, Star, Zap, Crown } from 'lucide-react';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import type { CandidatesFilter } from '../types/candidates';
import { motion, AnimatePresence } from 'framer-motion';
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from '@/components/ui/tooltip';
import { cn } from '@/lib/utils';
import type { MatchmakerPageDictionary } from '@/types/dictionaries/matchmaker';

interface ActiveFiltersProps {
  filters: CandidatesFilter;
  onRemoveFilter: (key: keyof CandidatesFilter, value?: string) => void;
  onResetAll: () => void;
  onSuggestFilter?: () => void;
  className?: string;
  dict: MatchmakerPageDictionary['candidatesManager']['activeFilters'];
}

interface ActiveFilter {
  key: keyof CandidatesFilter;
  label: string;
  value?: string;
  color?: string;
  icon?: React.ReactNode;
  priority?: 'high' | 'medium' | 'low';
}

const ActiveFilters: React.FC<ActiveFiltersProps> = ({
  filters,
  onRemoveFilter,
  onResetAll,
  onSuggestFilter,
  className,
  dict,
}) => {
  const getActiveFilters = (): ActiveFilter[] => {
    const activeFilters: ActiveFilter[] = [];

    if (!filters.separateFiltering && filters.searchQuery) {
      activeFilters.push({
        key: 'searchQuery',
        label: dict.labels.search.replace('{{query}}', filters.searchQuery),
        color: 'primary',
        icon: <Sparkles className="w-3 h-3" />,
        priority: 'high',
      });
    }

    if (filters.separateFiltering && filters.maleSearchQuery) {
      activeFilters.push({
        key: 'maleSearchQuery',
        label: dict.labels.maleSearch.replace(
          '{{query}}',
          filters.maleSearchQuery
        ),
        color: 'male',
        icon: <Star className="w-3 h-3" />,
        priority: 'high',
      });
    }

    if (filters.separateFiltering && filters.femaleSearchQuery) {
      activeFilters.push({
        key: 'femaleSearchQuery',
        label: dict.labels.femaleSearch.replace(
          '{{query}}',
          filters.femaleSearchQuery
        ),
        color: 'female',
        icon: <Crown className="w-3 h-3" />,
        priority: 'high',
      });
    }

    if (filters.separateFiltering) {
      activeFilters.push({
        key: 'separateFiltering',
        label: dict.labels.separateFiltering,
        color: 'special',
        icon: <Zap className="w-3 h-3" />,
        priority: 'high',
      });
    }

    if (filters.gender) {
      const genderLabel =
        filters.gender === 'MALE'
          ? dict.labels.genders.MALE
          : dict.labels.genders.FEMALE;
      activeFilters.push({
        key: 'gender',
        label: dict.labels.gender.replace('{{gender}}', genderLabel),
        color: filters.gender === 'MALE' ? 'male' : 'female',
        priority: 'high',
      });
    }

    if (filters.ageRange) {
      const isDefaultMin = filters.ageRange.min === 18;
      const isDefaultMax = filters.ageRange.max === 99;

      if (!isDefaultMin || !isDefaultMax) {
        let label = '';
        if (!isDefaultMin && !isDefaultMax) {
          label = dict.labels.age
            .replace('{{min}}', String(filters.ageRange.min))
            .replace('{{max}}', String(filters.ageRange.max));
        } else if (!isDefaultMin) {
          label = dict.labels.ageAbove.replace(
            '{{min}}',
            String(filters.ageRange.min)
          );
        } else if (!isDefaultMax) {
          label = dict.labels.ageBelow.replace(
            '{{max}}',
            String(filters.ageRange.max)
          );
        }
        activeFilters.push({
          key: 'ageRange',
          label,
          color: 'primary',
          priority: 'high',
        });
      }
    }

    if (filters.heightRange) {
      const isDefaultMin = filters.heightRange.min === 140;
      const isDefaultMax = filters.heightRange.max === 210;

      if (!isDefaultMin || !isDefaultMax) {
        let label = '';
        if (!isDefaultMin && !isDefaultMax) {
          label = dict.labels.height
            .replace('{{min}}', String(filters.heightRange.min))
            .replace('{{max}}', String(filters.heightRange.max));
        } else if (!isDefaultMin) {
          label = dict.labels.heightAbove.replace(
            '{{min}}',
            String(filters.heightRange.min)
          );
        } else if (!isDefaultMax) {
          label = dict.labels.heightBelow.replace(
            '{{max}}',
            String(filters.heightRange.max)
          );
        }
        activeFilters.push({
          key: 'heightRange',
          label,
          color: 'secondary',
          priority: 'medium',
        });
      }
    }

    if (filters.religiousLevel) {
      activeFilters.push({
        key: 'religiousLevel',
        label: dict.labels.religiousLevel.replace(
          '{{level}}',
          filters.religiousLevel
        ),
        color: 'warning',
        priority: 'medium',
      });
    }

    if (filters.educationLevel) {
      activeFilters.push({
        key: 'educationLevel',
        label: dict.labels.educationLevel.replace(
          '{{level}}',
          filters.educationLevel
        ),
        color: 'secondary',
        priority: 'medium',
      });
    }

    filters.cities?.forEach((city) => {
      activeFilters.push({
        key: 'cities',
        value: city,
        label: dict.labels.city.replace('{{city}}', city),
        color: 'success',
        priority: 'medium',
      });
    });

    filters.occupations?.forEach((occupation) => {
      activeFilters.push({
        key: 'occupations',
        value: occupation,
        label: dict.labels.occupation.replace('{{occupation}}', occupation),
        color: 'primary',
        priority: 'medium',
      });
    });

    if (filters.availabilityStatus) {
      const status =
        filters.availabilityStatus as keyof typeof dict.labels.availability;
      const statusLabel =
        dict.labels.availability[status] || filters.availabilityStatus;
      activeFilters.push({
        key: 'availabilityStatus',
        label: dict.labels.status.replace('{{status}}', statusLabel),
        color:
          filters.availabilityStatus === 'AVAILABLE' ? 'success' : 'warning',
        priority: 'high',
      });
    }

    if (filters.maritalStatus) {
      activeFilters.push({
        key: 'maritalStatus',
        label: dict.labels.maritalStatus.replace(
          '{{status}}',
          filters.maritalStatus
        ),
        color: 'secondary',
        priority: 'medium',
      });
    }

    if (filters.isVerified) {
      activeFilters.push({
        key: 'isVerified',
        label: dict.labels.verifiedOnly,
        color: 'primary',
        icon: <Star className="w-3 h-3" />,
        priority: 'high',
      });
    }

    if (filters.hasReferences) {
      activeFilters.push({
        key: 'hasReferences',
        label: dict.labels.withRecommendations,
        color: 'success',
        priority: 'medium',
      });
    }

    if (filters.isProfileComplete) {
      activeFilters.push({
        key: 'isProfileComplete',
        label: dict.labels.fullProfile,
        color: 'primary',
        priority: 'medium',
      });
    }

    if (filters.lastActiveDays) {
      let label: string;
      switch (filters.lastActiveDays) {
        case 1:
          label = dict.labels.activeToday;
          break;
        case 3:
          label = dict.labels.activeLast3Days;
          break;
        case 7:
          label = dict.labels.activeLast7Days;
          break;
        case 30:
          label = dict.labels.activeLast30Days;
          break;
        default:
          label = dict.labels.activeInDays.replace(
            '{{days}}',
            String(filters.lastActiveDays)
          );
      }
      activeFilters.push({
        key: 'lastActiveDays',
        label,
        color: 'special',
        priority: 'medium',
      });
    }

    return activeFilters;
  };

  const getFilterColors = (color?: string) => {
    const colorSchemes = {
      primary: {
        badge:
          'bg-gradient-to-r from-blue-500 to-cyan-500 text-white border-0 shadow-lg',
        hover: 'hover:from-blue-600 hover:to-cyan-600',
      },
      secondary: {
        badge:
          'bg-gradient-to-r from-purple-500 to-pink-500 text-white border-0 shadow-lg',
        hover: 'hover:from-purple-600 hover:to-pink-600',
      },
      success: {
        badge:
          'bg-gradient-to-r from-emerald-500 to-green-500 text-white border-0 shadow-lg',
        hover: 'hover:from-emerald-600 hover:to-green-600',
      },
      warning: {
        badge:
          'bg-gradient-to-r from-amber-500 to-orange-500 text-white border-0 shadow-lg',
        hover: 'hover:from-amber-600 hover:to-orange-600',
      },
      male: {
        badge:
          'bg-gradient-to-r from-blue-600 to-indigo-600 text-white border-0 shadow-lg',
        hover: 'hover:from-blue-700 hover:to-indigo-700',
      },
      female: {
        badge:
          'bg-gradient-to-r from-purple-600 to-pink-600 text-white border-0 shadow-lg',
        hover: 'hover:from-purple-700 hover:to-pink-700',
      },
      special: {
        badge:
          'bg-gradient-to-r from-indigo-500 to-purple-500 text-white border-0 shadow-lg',
        hover: 'hover:from-indigo-600 hover:to-purple-600',
      },
    };
    return (
      colorSchemes[color as keyof typeof colorSchemes] || colorSchemes.primary
    );
  };

  const activeFilters = getActiveFilters();
  const sortedFilters = activeFilters.sort((a, b) => {
    const priorityOrder = { high: 3, medium: 2, low: 1 };
    return (
      priorityOrder[b.priority || 'low'] - priorityOrder[a.priority || 'low']
    );
  });

  if (activeFilters.length === 0) {
    return null;
  }

  return (
    <div className={cn('relative', className)}>
      <div className="absolute inset-0">
        <div className="absolute top-0 right-0 w-32 h-32 bg-gradient-to-br from-blue-200/20 to-cyan-200/20 rounded-full blur-2xl"></div>
        <div className="absolute bottom-0 left-0 w-24 h-24 bg-gradient-to-br from-purple-200/20 to-pink-200/20 rounded-full blur-xl"></div>
      </div>
      <div className="relative z-10 bg-gradient-to-r from-white via-purple-50/30 to-pink-50/30 backdrop-blur-sm rounded-2xl p-6 shadow-xl border-0">
        <div className="flex items-center justify-between mb-6">
          <div className="flex items-center gap-3">
            <div className="p-3 rounded-full bg-gradient-to-r from-blue-500 to-cyan-500 text-white shadow-lg">
              <Filter className="w-6 h-6" />
            </div>
            <div>
              <h3 className="text-xl font-bold bg-gradient-to-r from-blue-600 to-cyan-600 bg-clip-text text-transparent">
                {dict.title}
              </h3>
              <p className="text-sm text-gray-600 mt-1">
                {activeFilters.length === 1
                  ? dict.filterActive
                  : dict.filtersActive.replace(
                      '{{count}}',
                      String(activeFilters.length)
                    )}
              </p>
            </div>
          </div>
          <div className="flex items-center gap-3">
            {onSuggestFilter && (
              <TooltipProvider>
                <Tooltip>
                  <TooltipTrigger asChild>
                    <Button
                      variant="ghost"
                      size="sm"
                      onClick={onSuggestFilter}
                      className="bg-gradient-to-r from-emerald-50 to-green-50 hover:from-emerald-100 hover:to-green-100 text-emerald-700 border border-emerald-200 rounded-xl transition-all duration-300 hover:scale-105 shadow-lg"
                    >
                      <Sparkles className="w-4 h-4 mr-2" />
                      {dict.suggestButton}
                      <Zap className="w-3 h-3 ml-1" />
                    </Button>
                  </TooltipTrigger>
                  <TooltipContent>
                    <p>{dict.suggestTooltip}</p>
                  </TooltipContent>
                </Tooltip>
              </TooltipProvider>
            )}
            <TooltipProvider>
              <Tooltip>
                <TooltipTrigger asChild>
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={onResetAll}
                    className="bg-gradient-to-r from-red-50 to-pink-50 hover:from-red-100 hover:to-pink-100 text-red-700 border border-red-200 rounded-xl transition-all duration-300 hover:scale-105 shadow-lg"
                  >
                    <RefreshCw className="w-4 h-4 mr-2" />
                    {dict.clearAllButton}
                  </Button>
                </TooltipTrigger>
                <TooltipContent>
                  <p>{dict.clearAllTooltip}</p>
                </TooltipContent>
              </Tooltip>
            </TooltipProvider>
          </div>
        </div>
        <div className="flex flex-wrap gap-3">
          <AnimatePresence mode="popLayout">
            {sortedFilters.map((filter, index) => {
              const colors = getFilterColors(filter.color);
              return (
                <motion.div
                  key={`${filter.key}-${filter.value || index}`}
                  initial={{ opacity: 0, scale: 0.8, y: 20 }}
                  animate={{ opacity: 1, scale: 1, y: 0 }}
                  exit={{ opacity: 0, scale: 0.8, y: -20 }}
                  transition={{
                    duration: 0.3,
                    delay: index * 0.05,
                    type: 'spring',
                    stiffness: 300,
                    damping: 25,
                  }}
                  whileHover={{ scale: 1.05 }}
                  whileTap={{ scale: 0.95 }}
                >
                  <Badge
                    className={cn(
                      'px-4 py-2.5 whitespace-nowrap font-bold text-sm rounded-xl transition-all duration-300 group cursor-pointer shadow-lg hover:shadow-xl',
                      colors.badge,
                      colors.hover,
                      filter.priority === 'high' && 'ring-2 ring-white/50'
                    )}
                  >
                    <div className="flex items-center gap-2">
                      {filter.icon && (
                        <span className="opacity-90 group-hover:opacity-100 transition-opacity">
                          {filter.icon}
                        </span>
                      )}
                      <span className="max-w-[200px] truncate font-medium">
                        {filter.label}
                      </span>
                      <button
                        className="ml-2 hover:bg-white/20 rounded-full p-1 transition-all duration-200 hover:scale-110 group-hover:bg-white/30"
                        onClick={(e) => {
                          e.stopPropagation();
                          onRemoveFilter(filter.key, filter.value);
                        }}
                        aria-label={`הסר פילטר ${filter.label}`}
                      >
                        <X className="w-3.5 h-3.5" />
                      </button>
                    </div>
                  </Badge>
                </motion.div>
              );
            })}
          </AnimatePresence>
        </div>
        {activeFilters.length > 3 && (
          <div className="mt-6 pt-4 border-t border-gray-200/50">
            <div className="flex items-center justify-between">
              <div className="flex items-center gap-2 text-sm text-gray-600">
                <Sparkles className="w-4 h-4 text-blue-500" />
                <span>
                  {dict.summary.title.replace(
                    '{{count}}',
                    String(activeFilters.length)
                  )}
                </span>
              </div>
              <div className="flex items-center gap-1">
                {activeFilters.filter((f) => f.priority === 'high').length >
                  0 && (
                  <Badge
                    variant="outline"
                    className="bg-red-50 text-red-700 border-red-200 text-xs"
                  >
                    {dict.summary.highPriority.replace(
                      '{{count}}',
                      String(
                        activeFilters.filter((f) => f.priority === 'high')
                          .length
                      )
                    )}
                  </Badge>
                )}
                {activeFilters.filter((f) => f.priority === 'medium').length >
                  0 && (
                  <Badge
                    variant="outline"
                    className="bg-yellow-50 text-yellow-700 border-yellow-200 text-xs"
                  >
                    {dict.summary.mediumPriority.replace(
                      '{{count}}',
                      String(
                        activeFilters.filter((f) => f.priority === 'medium')
                          .length
                      )
                    )}
                  </Badge>
                )}
              </div>
            </div>
          </div>
        )}
        <div className="absolute inset-0 bg-gradient-to-r from-blue-400/5 via-purple-400/5 to-pink-400/5 rounded-2xl pointer-events-none"></div>
      </div>
    </div>
  );
};

export default ActiveFilters;
--- End of Content for ActiveFilters.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\new\Filters\FilterPanel.tsx
--------------------------------------------------------------------------------
Content:
// /Filters/FilterPanel.tsx - גרסה מתורגמת, מלאה ומעודכנת
import React, { useState } from 'react';
import { motion, AnimatePresence } from 'framer-motion';

// Prisma Types
import { UserSource, UserStatus } from '@prisma/client';

// Lucide React Icons
import {
  Activity,
  Award,
  Bookmark,
  Briefcase,
  Calendar,
  Check,
  ChevronDown,
  Copy,
  Crown,
  Filter as FilterIcon,
  GraduationCap,
  Heart,
  MapPin,
  RefreshCw,
  Ruler,
  Save,
  Scroll,
  Shield,
  Sparkles,
  Star,
  Target,
  TrendingUp,
  User,
  Zap,
} from 'lucide-react';

// Utility Functions
import { cn } from '@/lib/utils';

// UI Components
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { Card } from '@/components/ui/card';
import {
  Collapsible,
  CollapsibleContent,
  CollapsibleTrigger,
} from '@/components/ui/collapsible';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { ScrollArea } from '@/components/ui/scroll-area';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select';
import { Slider } from '@/components/ui/slider';
import { Switch } from '@/components/ui/switch';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from '@/components/ui/tooltip';

// Local Components, Types & Constants
import SavedFilters from './SavedFilters';
import {
  AGE_RANGE,
  AVAILABILITY_STATUS_OPTIONS,
  EDUCATION_LEVELS,
  HEIGHT_RANGE,
  MARITAL_STATUS,
  OCCUPATION_CATEGORIES,
  POPULAR_CITIES,
  RELIGIOUS_LEVELS,
} from '../constants/filterOptions';
import type { CandidatesFilter } from '../types/candidates';
import type { FilterState } from '../types/filters';
import type { FilterPanelDict } from '@/types/dictionaries/matchmaker';

// Interfaces
interface PopularFilterOption {
  id: keyof FilterPanelDict['popularFilters'];
  label: string;
  icon: React.ReactNode;
  filter: Partial<CandidatesFilter>;
  gradient: string;
}

interface FilterPanelProps {
  filters: CandidatesFilter;
  onFiltersChange: (filters: CandidatesFilter) => void;
  onSavePreset?: (name: string) => void;
  onReset: () => void;
  onApplySavedFilter?: (id: string) => void;
  savedFilters?: Array<{ id: string; name: string; isDefault?: boolean }>;
  popularFilters?: string[];
  className?: string;
  compactMode?: boolean;
  separateFiltering?: boolean;
  onToggleSeparateFiltering?: () => void;
  onMaleFiltersChange?: (filters: Partial<FilterState>) => void;
  onFemaleFiltersChange?: (filters: Partial<FilterState>) => void;
  onCopyFilters?: (
    source: 'male' | 'female',
    target: 'male' | 'female'
  ) => void;
  dict: FilterPanelDict;
}

interface FilterSectionProps {
  title: string;
  icon: React.ReactNode;
  children: React.ReactNode;
  defaultOpen?: boolean;
  badge?: number;
  gradient?: string;
}

// Helper Components
const FilterSection: React.FC<FilterSectionProps> = ({
  title,
  icon,
  children,
  defaultOpen = false,
  badge,
  gradient = 'from-blue-500 to-cyan-500',
}) => {
  const [isOpen, setIsOpen] = useState(defaultOpen);

  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      className="mb-4"
    >
      <Collapsible
        open={isOpen}
        onOpenChange={setIsOpen}
        className="rounded-2xl overflow-hidden shadow-xl border-0 bg-gradient-to-br from-white via-gray-50/30 to-white"
      >
        <CollapsibleTrigger asChild>
          <motion.div
            className={cn(
              'flex items-center justify-between p-4 cursor-pointer transition-all duration-300',
              'bg-gradient-to-r',
              gradient,
              'text-white hover:shadow-lg'
            )}
            whileHover={{ scale: 1.02 }}
            whileTap={{ scale: 0.98 }}
          >
            <div className="flex items-center gap-3">
              <div className="p-2 rounded-full bg-white/20 backdrop-blur-sm shadow-lg">
                {icon}
              </div>
              <span className="font-bold text-lg">{title}</span>
              {badge !== undefined && (
                <Badge className="bg-white/20 text-white border-white/30 shadow-lg">
                  {badge}
                </Badge>
              )}
            </div>
            <motion.div
              animate={{ rotate: isOpen ? 180 : 0 }}
              transition={{ duration: 0.3 }}
            >
              <ChevronDown size={20} className="text-white/80" />
            </motion.div>
          </motion.div>
        </CollapsibleTrigger>
        <CollapsibleContent className="data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:slide-out-to-top-1 data-[state=open]:slide-in-from-top-1">
          <div className="p-6 bg-gradient-to-br from-white via-gray-50/20 to-white">
            {children}
          </div>
        </CollapsibleContent>
      </Collapsible>
    </motion.div>
  );
};

const GenderFilterPanel = ({
  gender,
  filters,
  onFiltersChange,
  className,
  copyTarget,
  onCopyFilters,
  dict,
}: {
  gender: 'male' | 'female';
  filters: Partial<FilterState>;
  onFiltersChange: (filters: Partial<FilterState>) => void;
  className?: string;
  copyTarget: 'male' | 'female';
  onCopyFilters?: (
    source: 'male' | 'female',
    target: 'male' | 'female'
  ) => void;
  dict: FilterPanelDict['genderFilterPanel'];
}) => {
  const genderConfig = {
    male: {
      gradient: 'from-blue-500 to-cyan-500',
      bg: 'from-blue-50/50 to-cyan-50/30',
      text: 'text-blue-800',
      icon: <Target className="w-5 h-5" />,
      title: dict.maleTitle,
      copyLabel: dict.copyToFemale,
    },
    female: {
      gradient: 'from-purple-500 to-pink-500',
      bg: 'from-purple-50/50 to-pink-50/30',
      text: 'text-purple-800',
      icon: <Crown className="w-5 h-5" />,
      title: dict.femaleTitle,
      copyLabel: dict.copyToMale,
    },
  };
  const config = genderConfig[gender];

  const handleAgeChange = (type: 'min' | 'max', value: string) => {
    const numericValue = parseInt(value);
    if (
      isNaN(numericValue) ||
      numericValue < AGE_RANGE.min ||
      numericValue > AGE_RANGE.max
    )
      return;
    const currentMin = filters.ageRange?.min || AGE_RANGE.default.min;
    const currentMax = filters.ageRange?.max || AGE_RANGE.default.max;
    onFiltersChange({
      ...filters,
      ageRange: {
        min: type === 'min' ? Math.min(numericValue, currentMax) : currentMin,
        max: type === 'max' ? Math.max(numericValue, currentMin) : currentMax,
      },
    });
  };

  const handleHeightChange = (type: 'min' | 'max', value: string) => {
    const numericValue = parseInt(value);
    if (
      isNaN(numericValue) ||
      numericValue < HEIGHT_RANGE.min ||
      numericValue > HEIGHT_RANGE.max
    )
      return;
    const currentMin = filters.heightRange?.min || HEIGHT_RANGE.default.min;
    const currentMax = filters.heightRange?.max || HEIGHT_RANGE.default.max;
    onFiltersChange({
      ...filters,
      heightRange: {
        min: type === 'min' ? Math.min(numericValue, currentMax) : currentMin,
        max: type === 'max' ? Math.max(numericValue, currentMin) : currentMax,
      },
    });
  };

  return (
    <motion.div
      initial={{ opacity: 0, scale: 0.95 }}
      animate={{ opacity: 1, scale: 1 }}
      className={cn(
        'mb-6 rounded-2xl overflow-hidden shadow-xl border-0',
        className
      )}
    >
      <div
        className={cn(
          'flex justify-between items-center px-6 py-4',
          'bg-gradient-to-r',
          config.gradient,
          'text-white'
        )}
      >
        <div className="flex items-center gap-3">
          <div className="p-2 rounded-full bg-white/20 backdrop-blur-sm">
            {config.icon}
          </div>
          <h3 className="text-lg font-bold">{config.title}</h3>
        </div>
        {onCopyFilters && (
          <TooltipProvider>
            <Tooltip>
              <TooltipTrigger asChild>
                <Button
                  variant="ghost"
                  size="sm"
                  onClick={() => onCopyFilters(gender, copyTarget)}
                  className="text-white hover:bg-white/20 rounded-xl transition-all duration-300 hover:scale-105"
                >
                  <Copy className="w-4 h-4 mr-2" />
                  {config.copyLabel}
                </Button>
              </TooltipTrigger>
              <TooltipContent>
                <p>
                  {dict.copyTooltip.replace(
                    '{{gender}}',
                    copyTarget === 'male' ? dict.maleTitle : dict.femaleTitle
                  )}
                </p>
              </TooltipContent>
            </Tooltip>
          </TooltipProvider>
        )}
      </div>
      <div className={cn('p-6 space-y-6 bg-gradient-to-br', config.bg)}>
        <div className="space-y-4">
          <Label className="text-base font-bold text-gray-800 flex items-center gap-2">
            <Calendar className="w-5 h-5 text-blue-600" />
            {dict.ageLabel}
          </Label>
          <div className="bg-white/80 backdrop-blur-sm rounded-xl p-4 shadow-lg border border-gray-100/50">
            <div className="flex justify-between items-center mb-4">
              <div className="text-center bg-gradient-to-r from-blue-50 to-cyan-50 border border-blue-200 rounded-xl shadow-md p-3 min-w-[80px]">
                <p className="text-xs text-blue-600 mb-1 font-medium">
                  {dict.minLabel}
                </p>
                <input
                  type="number"
                  min={AGE_RANGE.min}
                  max={AGE_RANGE.max}
                  value={filters?.ageRange?.min || AGE_RANGE.default.min}
                  onChange={(e) => handleAgeChange('min', e.target.value)}
                  className="w-16 text-center text-lg font-bold text-blue-700 focus:outline-none bg-transparent"
                />
              </div>
              <span className="text-xl font-bold text-gray-400">-</span>
              <div className="text-center bg-gradient-to-r from-blue-50 to-cyan-50 border border-blue-200 rounded-xl shadow-md p-3 min-w-[80px]">
                <p className="text-xs text-blue-600 mb-1 font-medium">
                  {dict.maxLabel}
                </p>
                <input
                  type="number"
                  min={AGE_RANGE.min}
                  max={AGE_RANGE.max}
                  value={filters?.ageRange?.max || AGE_RANGE.default.max}
                  onChange={(e) => handleAgeChange('max', e.target.value)}
                  className="w-16 text-center text-lg font-bold text-blue-700 focus:outline-none bg-transparent"
                />
              </div>
            </div>
            <div className="px-2">
              <Slider
                value={[
                  filters?.ageRange?.min || AGE_RANGE.default.min,
                  filters?.ageRange?.max || AGE_RANGE.default.max,
                ]}
                min={AGE_RANGE.min}
                max={AGE_RANGE.max}
                step={1}
                onValueChange={(value) =>
                  onFiltersChange({
                    ...filters,
                    ageRange: { min: value[0], max: value[1] },
                  })
                }
                className="h-5 [&>span]:bg-gradient-to-r [&>span]:from-blue-500 [&>span]:to-cyan-500"
                dir="rtl"
              />
              <div className="flex justify-between mt-3 px-2 text-xs text-gray-500">
                <span>{AGE_RANGE.min}</span>
                <span>{AGE_RANGE.max}</span>
              </div>
            </div>
          </div>
        </div>
        <div className="space-y-4">
          <Label className="text-base font-bold text-gray-800 flex items-center gap-2">
            <Ruler className="w-5 h-5 text-purple-600" />
            {dict.heightLabel}
          </Label>
          <div className="bg-white/80 backdrop-blur-sm rounded-xl p-4 shadow-lg border border-gray-100/50">
            <div className="flex justify-between items-center mb-4">
              <div className="text-center bg-gradient-to-r from-purple-50 to-pink-50 border border-purple-200 rounded-xl shadow-md p-3 min-w-[80px]">
                <p className="text-xs text-purple-600 mb-1 font-medium">
                  {dict.minLabel}
                </p>
                <input
                  type="number"
                  min={HEIGHT_RANGE.min}
                  max={HEIGHT_RANGE.max}
                  value={filters?.heightRange?.min || HEIGHT_RANGE.default.min}
                  onChange={(e) => handleHeightChange('min', e.target.value)}
                  className="w-16 text-center text-lg font-bold text-purple-700 focus:outline-none bg-transparent"
                />
              </div>
              <span className="text-xl font-bold text-gray-400">-</span>
              <div className="text-center bg-gradient-to-r from-purple-50 to-pink-50 border border-purple-200 rounded-xl shadow-md p-3 min-w-[80px]">
                <p className="text-xs text-purple-600 mb-1 font-medium">
                  {dict.maxLabel}
                </p>
                <input
                  type="number"
                  min={HEIGHT_RANGE.min}
                  max={HEIGHT_RANGE.max}
                  value={filters?.heightRange?.max || HEIGHT_RANGE.default.max}
                  onChange={(e) => handleHeightChange('max', e.target.value)}
                  className="w-16 text-center text-lg font-bold text-purple-700 focus:outline-none bg-transparent"
                />
              </div>
            </div>
            <div className="px-2">
              <Slider
                value={[
                  filters?.heightRange?.min || HEIGHT_RANGE.default.min,
                  filters?.heightRange?.max || HEIGHT_RANGE.default.max,
                ]}
                min={HEIGHT_RANGE.min}
                max={HEIGHT_RANGE.max}
                step={1}
                onValueChange={(value) =>
                  onFiltersChange({
                    ...filters,
                    heightRange: { min: value[0], max: value[1] },
                  })
                }
                className="h-5 [&>span]:bg-gradient-to-r [&>span]:from-purple-500 [&>span]:to-pink-500"
                dir="rtl"
              />
              <div className="flex justify-between mt-3 px-2 text-xs text-gray-500">
                <span>{HEIGHT_RANGE.min}</span>
                <span>{HEIGHT_RANGE.max}</span>
              </div>
            </div>
          </div>
        </div>
        {[
          {
            label: dict.religiousLevelLabel,
            icon: <Scroll className="w-5 h-5 text-amber-600" />,
            filterKey: 'religiousLevel',
            options: RELIGIOUS_LEVELS,
            placeholder: dict.placeholders.selectReligious,
            hoverColor: 'amber',
          },
          {
            label: dict.cityLabel,
            icon: <MapPin className="w-5 h-5 text-emerald-600" />,
            filterKey: 'cities',
            options: POPULAR_CITIES.map((c) => ({ label: c, value: c })),
            placeholder: dict.placeholders.selectCity,
            hoverColor: 'emerald',
          },
        ].map(
          ({ label, icon, filterKey, options, placeholder, hoverColor }) => (
            <div key={filterKey} className="space-y-3">
              <Label className="text-base font-bold text-gray-800 flex items-center gap-2">
                {icon}
                {label}
              </Label>
              <div className="bg-white/80 backdrop-blur-sm rounded-xl p-3 shadow-lg border border-gray-100/50">
                <Select
                  value={
                    filterKey === 'cities'
                      ? filters.cities?.[0] || ''
                      : (filters[filterKey as keyof FilterState] as string) ||
                        ''
                  }
                  onValueChange={(value) => {
                    const newValue = value === 'all' ? undefined : value;
                    if (filterKey === 'cities') {
                      onFiltersChange({
                        ...filters,
                        cities: newValue ? [newValue] : [],
                      });
                    } else {
                      onFiltersChange({ ...filters, [filterKey]: newValue });
                    }
                  }}
                >
                  <SelectTrigger
                    className={`w-full border-0 bg-transparent focus:ring-2 focus:ring-${hoverColor}-200 rounded-xl`}
                  >
                    <SelectValue placeholder={placeholder} />
                  </SelectTrigger>
                  <SelectContent className="bg-white/95 backdrop-blur-sm border-0 shadow-2xl rounded-xl">
                    <SelectItem
                      value="all"
                      className={`hover:bg-${hoverColor}-50`}
                    >
                      {dict.options.all}
                    </SelectItem>
                    {options.map((opt) => (
                      <SelectItem
                        key={opt.value}
                        value={opt.value}
                        className={`hover:bg-${hoverColor}-50`}
                      >
                        {opt.label}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>
            </div>
          )
        )}
        <div className="space-y-4 pt-4 border-t border-gray-200/50">
          {[
            {
              key: 'isVerified',
              label: dict.verifiedOnlyLabel,
              icon: <Shield className="w-4 h-4" />,
              gradient: 'from-emerald-500 to-green-500',
            },
            {
              key: 'hasReferences',
              label: dict.withRecommendationsLabel,
              icon: <Award className="w-4 h-4" />,
              gradient: 'from-amber-500 to-orange-500',
            },
            {
              key: 'isProfileComplete',
              label: dict.fullProfileLabel,
              icon: <Star className="w-4 h-4" />,
              gradient: 'from-purple-500 to-indigo-500',
            },
          ].map((item) => (
            <div
              key={item.key}
              className="flex items-center justify-between p-4 bg-white/60 backdrop-blur-sm rounded-xl shadow-lg border border-gray-100/50 hover:bg-white/80 transition-all duration-300"
            >
              <div className="flex items-center gap-3">
                <div
                  className={cn(
                    'p-2 rounded-lg bg-gradient-to-r text-white',
                    item.gradient
                  )}
                >
                  {item.icon}
                </div>
                <span className="font-medium text-gray-800">{item.label}</span>
              </div>
              <Switch
                checked={
                  (filters?.[item.key as keyof typeof filters] as boolean) ||
                  false
                }
                onCheckedChange={(checked) =>
                  onFiltersChange({
                    ...filters,
                    [item.key]: checked || undefined,
                  })
                }
                className="data-[state=checked]:bg-gradient-to-r data-[state=checked]:from-emerald-500 data-[state=checked]:to-green-500"
              />
            </div>
          ))}
        </div>
      </div>
    </motion.div>
  );
};

// Main Component
const FilterPanel: React.FC<FilterPanelProps> = ({
  filters,
  onFiltersChange,
  onSavePreset,
  onReset,
  onApplySavedFilter,
  savedFilters = [],
  className,
  compactMode = false,
  separateFiltering = false,
  onToggleSeparateFiltering,
  onMaleFiltersChange,
  onFemaleFiltersChange,
  onCopyFilters,
  dict,
}) => {
  const [showSavePreset, setShowSavePreset] = useState(false);
  const [presetName, setPresetName] = useState('');
  const [activeTab, setActiveTab] = useState<string>('basic');
  const [activeGenderFilter, setActiveGenderFilter] = useState<
    'male' | 'female'
  >('male');

  const POPULAR_FILTERS: PopularFilterOption[] = [
    {
      id: 'activeRecently',
      label: dict.popularFilters.activeRecently,
      icon: <Activity className="w-4 h-4" />,
      filter: { lastActiveDays: 7 },
      gradient: 'from-blue-500 to-cyan-500',
    },
    {
      id: 'verifiedOnly',
      label: dict.popularFilters.verifiedOnly,
      icon: <Shield className="w-4 h-4" />,
      filter: { isVerified: true },
      gradient: 'from-emerald-500 to-green-500',
    },
    {
      id: 'withRecommendations',
      label: dict.popularFilters.withRecommendations,
      icon: <Award className="w-4 h-4" />,
      filter: { hasReferences: true },
      gradient: 'from-amber-500 to-orange-500',
    },
    {
      id: 'availableOnly',
      label: dict.popularFilters.availableOnly,
      icon: <Heart className="w-4 h-4" />,
      filter: { availabilityStatus: 'AVAILABLE' },
      gradient: 'from-pink-500 to-rose-500',
    },
    {
      id: 'completeProfiles',
      label: dict.popularFilters.completeProfiles,
      icon: <Star className="w-4 h-4" />,
      filter: { isProfileComplete: true },
      gradient: 'from-purple-500 to-indigo-500',
    },
  ];

  const handleSavePreset = () => {
    if (presetName && onSavePreset) {
      onSavePreset(presetName);
      setPresetName('');
      setShowSavePreset(false);
    }
  };
  const handleAgeRangeChange = (value: number[]) => {
    onFiltersChange({ ...filters, ageRange: { min: value[0], max: value[1] } });
  };
  const handleHeightRangeChange = (value: number[]) => {
    onFiltersChange({
      ...filters,
      heightRange: { min: value[0], max: value[1] },
    });
  };
  const handleApplyPopularFilter = (filter: Partial<CandidatesFilter>) => {
    onFiltersChange({ ...filters, ...filter });
  };

  const countActiveFilters = (category: string): number => {
    let count = 0;
    // ... logic remains the same ...
    return count;
  };

  return (
    <Card
      className={cn(
        'shadow-2xl border-0 bg-gradient-to-br from-white via-purple-50/20 to-pink-50/10 backdrop-blur-sm rounded-3xl overflow-hidden',
        className
      )}
    >
      <div className="absolute inset-0 -z-10">
        <div className="absolute top-0 right-0 w-64 h-64 bg-gradient-to-br from-purple-200/20 to-pink-200/20 rounded-full blur-3xl"></div>
        <div className="absolute bottom-0 left-0 w-48 h-48 bg-gradient-to-br from-blue-200/20 to-cyan-200/20 rounded-full blur-2xl"></div>
      </div>
      <div className="relative">
        {!compactMode && (
          <div className="bg-gradient-to-r from-indigo-600 via-purple-600 to-pink-600 p-6">
            <div className="flex items-center justify-between mb-4">
              <div className="flex items-center gap-4">
                <div className="p-3 rounded-full bg-white/20 backdrop-blur-sm shadow-lg">
                  <FilterIcon className="w-8 h-8 text-white" />
                </div>
                <div>
                  <h3 className="text-2xl font-bold text-white">
                    {dict.header.title}
                  </h3>
                  <p className="text-white/80 mt-1">{dict.header.subtitle}</p>
                </div>
              </div>
              <div className="flex gap-3">
                <TooltipProvider>
                  <Tooltip>
                    <TooltipTrigger asChild>
                      <Button
                        variant="ghost"
                        size="sm"
                        onClick={onReset}
                        className="h-10 w-10 p-0 text-white hover:bg-white/20 rounded-xl transition-all duration-300 hover:scale-110"
                      >
                        <RefreshCw className="w-5 h-5" />
                      </Button>
                    </TooltipTrigger>
                    <TooltipContent>
                      <p>{dict.header.resetTooltip}</p>
                    </TooltipContent>
                  </Tooltip>
                </TooltipProvider>
                <TooltipProvider>
                  <Tooltip>
                    <TooltipTrigger asChild>
                      <Button
                        variant="ghost"
                        size="sm"
                        onClick={() => setShowSavePreset(!showSavePreset)}
                        className="h-10 w-10 p-0 text-white hover:bg-white/20 rounded-xl transition-all duration-300 hover:scale-110"
                      >
                        <Bookmark className="w-5 h-5" />
                      </Button>
                    </TooltipTrigger>
                    <TooltipContent>
                      <p>{dict.header.saveTooltip}</p>
                    </TooltipContent>
                  </Tooltip>
                </TooltipProvider>
              </div>
            </div>
            <div className="grid grid-cols-2 lg:grid-cols-5 gap-3">
              {POPULAR_FILTERS.map((option) => (
                <motion.div
                  key={option.id}
                  whileHover={{ scale: 1.05 }}
                  whileTap={{ scale: 0.95 }}
                >
                  <Button
                    variant="ghost"
                    size="sm"
                    onClick={() => handleApplyPopularFilter(option.filter)}
                    className={cn(
                      'w-full h-auto min-h-24 p-3 bg-white/10 hover:bg-white/20 backdrop-blur-sm border border-white/20 rounded-xl transition-all duration-300 text-white flex flex-col items-center gap-2'
                    )}
                  >
                    <div
                      className={cn(
                        'p-2 rounded-lg bg-gradient-to-r',
                        option.gradient,
                        'text-white shadow-lg'
                      )}
                    >
                      {option.icon}
                    </div>
                    <span className="text-xs font-medium text-center leading-tight whitespace-normal">
                      {option.label}
                    </span>
                  </Button>
                </motion.div>
              ))}
            </div>
          </div>
        )}
        <AnimatePresence>
          {showSavePreset && !compactMode && (
            <motion.div
              initial={{ opacity: 0, height: 0 }}
              animate={{ opacity: 1, height: 'auto' }}
              exit={{ opacity: 0, height: 0 }}
              className="bg-gradient-to-r from-blue-50 via-purple-50 to-pink-50 border-b border-purple-100"
            >
              <div className="p-6">
                <Label className="text-lg font-bold text-gray-800 mb-3 block">
                  {dict.savePreset.title}
                </Label>
                <div className="flex gap-3">
                  <Input
                    value={presetName}
                    onChange={(e) => setPresetName(e.target.value)}
                    placeholder={dict.savePreset.placeholder}
                    className="flex-1 border-0 bg-white/80 backdrop-blur-sm shadow-lg rounded-xl focus:ring-2 focus:ring-purple-300"
                  />
                  <Button
                    size="sm"
                    onClick={handleSavePreset}
                    className="bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-700 hover:to-pink-700 shadow-lg rounded-xl px-6"
                  >
                    <Save className="w-4 h-4 mr-2" />
                    {dict.savePreset.button}
                  </Button>
                </div>
              </div>
            </motion.div>
          )}
        </AnimatePresence>
        <div className="p-6 bg-gradient-to-r from-indigo-50/50 via-purple-50/30 to-pink-50/50 border-b border-purple-100/50">
          <motion.div
            className="bg-white/60 backdrop-blur-sm rounded-2xl p-6 shadow-lg border border-white/50"
            whileHover={{ scale: 1.02 }}
          >
            <div className="flex items-center justify-between">
              <div className="space-y-2">
                <div className="flex items-center gap-3">
                  <div className="p-2 rounded-lg bg-gradient-to-r from-indigo-500 to-purple-500 text-white">
                    <Zap className="w-5 h-5" />
                  </div>
                  <div className="font-bold text-lg bg-gradient-to-r from-indigo-600 to-purple-600 bg-clip-text text-transparent">
                    {dict.separateFiltering.title}
                  </div>
                </div>
                <p className="text-sm text-gray-600 mr-10">
                  {dict.separateFiltering.description}
                </p>
              </div>
              <div className="flex items-center gap-3">
                <Switch
                  checked={separateFiltering}
                  onCheckedChange={onToggleSeparateFiltering}
                  className="data-[state=checked]:bg-gradient-to-r data-[state=checked]:from-indigo-500 data-[state=checked]:to-purple-500"
                />
              </div>
            </div>
          </motion.div>
        </div>
        <div className="p-6">
          {separateFiltering ? (
            <div className="space-y-6">
              <div className="bg-gradient-to-r from-white via-gray-50/30 to-white rounded-2xl p-2 shadow-lg border border-gray-100/50">
                <div className="grid grid-cols-2 gap-1">
                  <Button
                    type="button"
                    variant={
                      activeGenderFilter === 'male' ? 'default' : 'ghost'
                    }
                    onClick={() => setActiveGenderFilter('male')}
                    className={cn(
                      'rounded-xl py-3 transition-all duration-300',
                      activeGenderFilter === 'male'
                        ? 'bg-gradient-to-r from-blue-600 to-cyan-600 text-white shadow-lg'
                        : 'text-gray-600 hover:bg-blue-50'
                    )}
                  >
                    <Target className="w-5 h-5 mr-2" />
                    {dict.genderFilterPanel.maleTitle}
                  </Button>
                  <Button
                    type="button"
                    variant={
                      activeGenderFilter === 'female' ? 'default' : 'ghost'
                    }
                    onClick={() => setActiveGenderFilter('female')}
                    className={cn(
                      'rounded-xl py-3 transition-all duration-300',
                      activeGenderFilter === 'female'
                        ? 'bg-gradient-to-r from-purple-600 to-pink-600 text-white shadow-lg'
                        : 'text-gray-600 hover:bg-purple-50'
                    )}
                  >
                    <Crown className="w-5 h-5 mr-2" />
                    {dict.genderFilterPanel.femaleTitle}
                  </Button>
                </div>
              </div>
              <AnimatePresence mode="wait">
                {activeGenderFilter === 'male' ? (
                  <motion.div
                    key="male"
                    initial={{ opacity: 0, x: -20 }}
                    animate={{ opacity: 1, x: 0 }}
                    exit={{ opacity: 0, x: 20 }}
                    transition={{ duration: 0.3 }}
                  >
                    <GenderFilterPanel
                      gender="male"
                      filters={filters.maleFilters || {}}
                      onFiltersChange={onMaleFiltersChange || (() => {})}
                      copyTarget="female"
                      onCopyFilters={onCopyFilters}
                      dict={dict.genderFilterPanel}
                    />
                  </motion.div>
                ) : (
                  <motion.div
                    key="female"
                    initial={{ opacity: 0, x: 20 }}
                    animate={{ opacity: 1, x: 0 }}
                    exit={{ opacity: 0, x: -20 }}
                    transition={{ duration: 0.3 }}
                  >
                    <GenderFilterPanel
                      gender="female"
                      filters={filters.femaleFilters || {}}
                      onFiltersChange={onFemaleFiltersChange || (() => {})}
                      copyTarget="male"
                      onCopyFilters={onCopyFilters}
                      dict={dict.genderFilterPanel}
                    />
                  </motion.div>
                )}
              </AnimatePresence>
            </div>
          ) : (
            <Tabs
              value={activeTab}
              onValueChange={setActiveTab}
              className="w-full"
            >
              <TabsList className="grid grid-cols-4 w-full bg-gradient-to-r from-indigo-50 to-purple-50 p-2 rounded-2xl shadow-lg border border-white/50 h-auto">
                {[
                  {
                    value: 'basic',
                    label: dict.tabs.basic,
                    icon: User,
                    gradient: 'from-blue-500 to-cyan-500',
                  },
                  {
                    value: 'advanced',
                    label: dict.tabs.advanced,
                    icon: Sparkles,
                    gradient: 'from-purple-500 to-pink-500',
                  },
                  {
                    value: 'status',
                    label: dict.tabs.status,
                    icon: Activity,
                    gradient: 'from-emerald-500 to-green-500',
                  },
                  {
                    value: 'saved',
                    label: dict.tabs.saved,
                    icon: Bookmark,
                    gradient: 'from-amber-500 to-orange-500',
                  },
                ].map((tab) => {
                  const IconComponent = tab.icon;
                  const count = countActiveFilters(tab.value);
                  return (
                    <TabsTrigger
                      key={tab.value}
                      value={tab.value}
                      className={cn(
                        'flex flex-col items-center justify-center gap-2 rounded-xl text-sm font-bold transition-all duration-300 py-3 hover:scale-105 relative overflow-hidden group data-[state=active]:shadow-lg',
                        activeTab === tab.value
                          ? `bg-gradient-to-r ${tab.gradient} text-white`
                          : 'text-gray-600 hover:bg-white/50'
                      )}
                    >
                      <IconComponent className="w-5 h-5" />
                      <span>{tab.label}</span>
                      {count > 0 && (
                        <Badge className="absolute -top-1 -right-1 h-6 w-6 p-0 flex items-center justify-center bg-red-500 text-white text-xs font-bold rounded-full border-2 border-white">
                          {count}
                        </Badge>
                      )}
                    </TabsTrigger>
                  );
                })}
              </TabsList>
              <div className="mt-6 space-y-6">
                <TabsContent value="basic" className="space-y-6 m-0">
                  <FilterSection
                    title={dict.sections.gender}
                    icon={<User className="w-5 h-5" />}
                    defaultOpen={true}
                    gradient="from-blue-500 to-cyan-500"
                  >
                    <div className="grid grid-cols-2 gap-4">
                      {[
                        {
                          value: 'MALE',
                          label: dict.buttons.male,
                          gradient: 'from-blue-500 to-cyan-500',
                        },
                        {
                          value: 'FEMALE',
                          label: dict.buttons.female,
                          gradient: 'from-purple-500 to-pink-500',
                        },
                      ].map((option) => (
                        <Button
                          key={option.value}
                          type="button"
                          variant={
                            filters.gender === option.value
                              ? 'default'
                              : 'outline'
                          }
                          onClick={() =>
                            onFiltersChange({
                              ...filters,
                              gender: option.value as 'MALE' | 'FEMALE',
                            })
                          }
                          className={cn(
                            'h-12 rounded-xl font-bold transition-all duration-300 hover:scale-105',
                            filters.gender === option.value
                              ? `bg-gradient-to-r ${option.gradient} text-white shadow-lg hover:shadow-xl`
                              : 'bg-white/80 backdrop-blur-sm border-2 border-gray-200 hover:border-gray-300'
                          )}
                        >
                          {option.label}
                        </Button>
                      ))}
                    </div>
                    {filters.gender && (
                      <Button
                        type="button"
                        variant="ghost"
                        size="sm"
                        onClick={() =>
                          onFiltersChange({ ...filters, gender: undefined })
                        }
                        className="w-full mt-3 text-gray-500 hover:text-gray-700 hover:bg-gray-50 rounded-xl"
                      >
                        {dict.buttons.removeSelection}
                      </Button>
                    )}
                  </FilterSection>
                  <FilterSection
                    title={dict.sections.age}
                    icon={<Calendar className="w-5 h-5" />}
                    defaultOpen={true}
                    gradient="from-emerald-500 to-green-500"
                    badge={
                      filters.ageRange &&
                      (filters.ageRange.min !== AGE_RANGE.default.min ||
                        filters.ageRange.max !== AGE_RANGE.default.max)
                        ? 1
                        : undefined
                    }
                  >
                    <div className="space-y-6">
                      <div className="flex justify-between items-center">
                        <div className="text-center bg-gradient-to-r from-emerald-50 to-green-50 border border-emerald-200 rounded-xl shadow-md p-3 min-w-[80px]">
                          <p className="text-xs text-emerald-600 mb-1 font-medium">
                            {dict.genderFilterPanel.minLabel}
                          </p>
                          <input
                            type="number"
                            min={AGE_RANGE.min}
                            max={AGE_RANGE.max}
                            value={
                              filters.ageRange?.min || AGE_RANGE.default.min
                            }
                            onChange={(e) => {
                              const newMin = parseInt(e.target.value);
                              if (
                                !isNaN(newMin) &&
                                newMin >= AGE_RANGE.min &&
                                newMin <= AGE_RANGE.max
                              ) {
                                const currentMax =
                                  filters.ageRange?.max ||
                                  AGE_RANGE.default.max;
                                onFiltersChange({
                                  ...filters,
                                  ageRange: {
                                    min: Math.min(newMin, currentMax),
                                    max: currentMax,
                                  },
                                });
                              }
                            }}
                            className="w-16 text-center text-lg font-bold text-emerald-700 focus:outline-none bg-transparent"
                          />
                        </div>
                        <span className="text-xl font-bold text-gray-400">
                          -
                        </span>
                        <div className="text-center bg-gradient-to-r from-emerald-50 to-green-50 border border-emerald-200 rounded-xl shadow-md p-3 min-w-[80px]">
                          <p className="text-xs text-emerald-600 mb-1 font-medium">
                            {dict.genderFilterPanel.maxLabel}
                          </p>
                          <input
                            type="number"
                            min={AGE_RANGE.min}
                            max={AGE_RANGE.max}
                            value={
                              filters.ageRange?.max || AGE_RANGE.default.max
                            }
                            onChange={(e) => {
                              const newMax = parseInt(e.target.value);
                              if (
                                !isNaN(newMax) &&
                                newMax >= AGE_RANGE.min &&
                                newMax <= AGE_RANGE.max
                              ) {
                                const currentMin =
                                  filters.ageRange?.min ||
                                  AGE_RANGE.default.min;
                                onFiltersChange({
                                  ...filters,
                                  ageRange: {
                                    min: currentMin,
                                    max: Math.max(currentMin, newMax),
                                  },
                                });
                              }
                            }}
                            className="w-16 text-center text-lg font-bold text-emerald-700 focus:outline-none bg-transparent"
                          />
                        </div>
                      </div>
                      <div className="px-3">
                        <Slider
                          value={[
                            filters.ageRange?.min || AGE_RANGE.default.min,
                            filters.ageRange?.max || AGE_RANGE.default.max,
                          ]}
                          min={AGE_RANGE.min}
                          max={AGE_RANGE.max}
                          step={1}
                          onValueChange={handleAgeRangeChange}
                          className="h-6 [&>span]:bg-gradient-to-r [&>span]:from-emerald-500 [&>span]:to-green-500"
                          dir="rtl"
                        />
                        <div className="flex justify-between mt-2 px-1 text-xs text-gray-500">
                          <span>{AGE_RANGE.min}</span>
                          <span>{AGE_RANGE.max}</span>
                        </div>
                      </div>
                    </div>
                  </FilterSection>
                </TabsContent>
                <TabsContent value="advanced" className="space-y-6 m-0">
                  <FilterSection
                    title={dict.sections.height}
                    icon={<Ruler className="w-5 h-5" />}
                    gradient="from-indigo-500 to-purple-500"
                    badge={
                      filters.heightRange &&
                      (filters.heightRange.min !== HEIGHT_RANGE.default.min ||
                        filters.heightRange.max !== HEIGHT_RANGE.default.max)
                        ? 1
                        : undefined
                    }
                  >
                    <div className="space-y-6">
                      <div className="flex justify-between items-center">
                        <div className="text-center bg-gradient-to-r from-indigo-50 to-purple-50 border border-indigo-200 rounded-xl shadow-md p-3 min-w-[80px]">
                          <p className="text-xs text-indigo-600 mb-1 font-medium">
                            {dict.genderFilterPanel.minLabel}
                          </p>
                          <input
                            type="number"
                            min={HEIGHT_RANGE.min}
                            max={HEIGHT_RANGE.max}
                            value={
                              filters.heightRange?.min ||
                              HEIGHT_RANGE.default.min
                            }
                            onChange={(e) => {
                              const newMin = parseInt(e.target.value);
                              if (
                                !isNaN(newMin) &&
                                newMin >= HEIGHT_RANGE.min &&
                                newMin <= HEIGHT_RANGE.max
                              ) {
                                const currentMax =
                                  filters.heightRange?.max ||
                                  HEIGHT_RANGE.default.max;
                                onFiltersChange({
                                  ...filters,
                                  heightRange: {
                                    min: Math.min(newMin, currentMax),
                                    max: currentMax,
                                  },
                                });
                              }
                            }}
                            className="w-16 text-center text-lg font-bold text-indigo-700 focus:outline-none bg-transparent"
                          />
                        </div>
                        <span className="text-xl font-bold text-gray-400">
                          -
                        </span>
                        <div className="text-center bg-gradient-to-r from-indigo-50 to-purple-50 border border-indigo-200 rounded-xl shadow-md p-3 min-w-[80px]">
                          <p className="text-xs text-indigo-600 mb-1 font-medium">
                            {dict.genderFilterPanel.maxLabel}
                          </p>
                          <input
                            type="number"
                            min={HEIGHT_RANGE.min}
                            max={HEIGHT_RANGE.max}
                            value={
                              filters.heightRange?.max ||
                              HEIGHT_RANGE.default.max
                            }
                            onChange={(e) => {
                              const newMax = parseInt(e.target.value);
                              if (
                                !isNaN(newMax) &&
                                newMax >= HEIGHT_RANGE.min &&
                                newMax <= HEIGHT_RANGE.max
                              ) {
                                const currentMin =
                                  filters.heightRange?.min ||
                                  HEIGHT_RANGE.default.min;
                                onFiltersChange({
                                  ...filters,
                                  heightRange: {
                                    min: currentMin,
                                    max: Math.max(currentMin, newMax),
                                  },
                                });
                              }
                            }}
                            className="w-16 text-center text-lg font-bold text-indigo-700 focus:outline-none bg-transparent"
                          />
                        </div>
                      </div>
                      <div className="px-3">
                        <Slider
                          value={[
                            filters.heightRange?.min ||
                              HEIGHT_RANGE.default.min,
                            filters.heightRange?.max ||
                              HEIGHT_RANGE.default.max,
                          ]}
                          min={HEIGHT_RANGE.min}
                          max={HEIGHT_RANGE.max}
                          step={1}
                          onValueChange={handleHeightRangeChange}
                          className="h-6 [&>span]:bg-gradient-to-r [&>span]:from-indigo-500 [&>span]:to-purple-500"
                          dir="rtl"
                        />
                    <div className="flex justify-between mt-2 px-1 text-xs text-gray-500">
  <span>{HEIGHT_RANGE.min} ס&quot;מ</span>
  <span>{HEIGHT_RANGE.max} ס&quot;מ</span>
</div>
                      </div>
                    </div>
                  </FilterSection>
                </TabsContent>
                <TabsContent value="saved" className="space-y-6 m-0">
                  {savedFilters.length === 0 ? (
                    <motion.div
                      initial={{ opacity: 0, y: 20 }}
                      animate={{ opacity: 1, y: 0 }}
                      className="text-center py-12 bg-gradient-to-br from-white via-gray-50/30 to-white rounded-2xl shadow-xl border border-gray-100/50"
                    >
                      <div className="w-20 h-20 rounded-full bg-gradient-to-br from-amber-100 to-orange-100 flex items-center justify-center mx-auto mb-6">
                        <Bookmark className="w-10 h-10 text-amber-500" />
                      </div>
                      <h3 className="text-xl font-bold text-gray-800 mb-3">
                        {dict.savedFilters.emptyState.title}
                      </h3>
                      <p className="text-gray-600 mb-6 max-w-sm mx-auto">
                        {dict.savedFilters.emptyState.description}
                      </p>
                      <Button
                        onClick={() => setShowSavePreset(true)}
                        className="bg-gradient-to-r from-amber-500 to-orange-500 hover:from-amber-600 hover:to-orange-600 text-white shadow-lg rounded-xl px-6"
                      >
                        <Save className="w-4 h-4 mr-2" />
                        {dict.savedFilters.emptyState.saveCurrentButton}
                      </Button>
                    </motion.div>
                  ) : (
                    <SavedFilters
                      filters={savedFilters.map((filter) => ({
                        id: filter.id,
                        name: filter.name,
                        filter: {},
                        isDefault: filter.isDefault,
                        createdAt: new Date(),
                      }))}
                      activeFilterId={filters.savedFilterId}
                      onSelect={(filter) => onApplySavedFilter?.(filter.id)}
                      onDelete={() => {}}
                      onEdit={() => {}}
                      onSetDefault={() => {}}
                      dict={dict.savedFilters}
                    />
                  )}
                </TabsContent>
              </div>
            </Tabs>
          )}
        </div>
        <div className="px-6 pb-6">
          <div className="flex justify-between items-center pt-6 border-t border-gray-200/50">
            <Button
              variant="outline"
              size={compactMode ? 'sm' : 'default'}
              onClick={onReset}
              className="bg-gradient-to-r from-red-50 to-pink-50 border-2 border-red-200 text-red-600 hover:from-red-100 hover:to-pink-100 rounded-xl transition-all duration-300 hover:scale-105"
            >
              <RefreshCw className="w-4 h-4 mr-2" />
              {dict.buttons.reset}
            </Button>
            {!compactMode && (
              <Button
                onClick={() => setShowSavePreset(true)}
                className="bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-700 hover:to-pink-700 shadow-lg rounded-xl px-6 transition-all duration-300 hover:scale-105"
              >
                <Save className="w-4 h-4 mr-2" />
                {dict.buttons.save}
                <Sparkles className="w-3 h-3 ml-1" />
              </Button>
            )}
          </div>
        </div>
      </div>
    </Card>
  );
};
export default FilterPanel;
--- End of Content for FilterPanel.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\new\Filters\SavedFilters.tsx
--------------------------------------------------------------------------------
Content:
// SavedFilters.tsx - גרסה מודרנית ומשודרגת
'use client';
import React from 'react';
import {
  Star,
  MoreVertical,
  Edit,
  Trash,
  Crown,
  Bookmark,
  Calendar,
  Sparkles,
  Zap,
  Award,
} from 'lucide-react';
import { Button } from '@/components/ui/button';
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from '@/components/ui/dropdown-menu';
import { Badge } from '@/components/ui/badge';
import { ScrollArea } from '@/components/ui/scroll-area';
import { motion, AnimatePresence } from 'framer-motion';
import type { CandidatesFilter } from '../types/candidates';
import { cn } from '@/lib/utils';
import type { MatchmakerPageDictionary } from '@/types/dictionaries/matchmaker';

interface SavedFilter {
  id: string;
  name: string;
  filter: CandidatesFilter;
  isDefault?: boolean;
  createdAt: Date;
}

interface SavedFiltersProps {
  filters: SavedFilter[];
  activeFilterId?: string;
  onSelect: (filter: SavedFilter) => void;
  onDelete: (filterId: string) => void;
  onEdit: (filter: SavedFilter) => void;
  onSetDefault: (filterId: string) => void;
  className?: string;
  dict: MatchmakerPageDictionary['candidatesManager']['filterPanel']['savedFilters'];
}

// Enhanced filter summary function outside component for performance
const formatFilterSummary = (
  filter: CandidatesFilter,
  dict: SavedFiltersProps['dict']['filterCard']['summary']
): string => {
  const parts: string[] = [];

  if (filter.searchQuery) {
    parts.push(dict.search.replace('{{query}}', filter.searchQuery));
  }
  if (filter.gender) {
    parts.push(dict.gender.replace('{{gender}}', filter.gender));
  }
  if (filter.ageRange) {
    parts.push(
      `${dict.age} ${dict.ageValue.replace('{{min}}', String(filter.ageRange.min)).replace('{{max}}', String(filter.ageRange.max))}`
    );
  }
  if (filter.heightRange) {
    parts.push(
      `${dict.height} ${dict.heightValue.replace('{{min}}', String(filter.heightRange.min)).replace('{{max}}', String(filter.heightRange.max))}`
    );
  }
  if (filter.cities?.length) {
    if (filter.cities.length === 1) {
      parts.push(dict.city.replace('{{city}}', filter.cities[0]));
    } else {
      parts.push(
        dict.cities.replace('{{count}}', String(filter.cities.length))
      );
    }
  }
  if (filter.religiousLevel) {
    parts.push(dict.religiousLevel.replace('{{level}}', filter.religiousLevel));
  }
  if (filter.educationLevel) {
    parts.push(dict.educationLevel.replace('{{level}}', filter.educationLevel));
  }
  if (filter.maritalStatus) {
    parts.push(dict.maritalStatus.replace('{{status}}', filter.maritalStatus));
  }
  if (filter.occupations?.length) {
    if (filter.occupations.length === 1) {
      parts.push(
        dict.occupation.replace('{{occupation}}', filter.occupations[0])
      );
    } else {
      parts.push(
        dict.occupations.replace('{{count}}', String(filter.occupations.length))
      );
    }
  }
  if (filter.availabilityStatus) {
    const statusKey = filter.availabilityStatus as keyof typeof dict.statuses;
    parts.push(dict.status.replace('{{status}}', dict.statuses[statusKey]));
  }
  if (filter.isVerified) {
    parts.push(dict.verifiedOnly);
  }
  if (filter.hasReferences) {
    parts.push(dict.withRecommendations);
  }
  if (filter.isProfileComplete) {
    parts.push(dict.fullProfile);
  }
  if (filter.lastActiveDays) {
    let label;
    switch (filter.lastActiveDays) {
      case 1:
        label = dict.activeToday;
        break;
      case 7:
        label = dict.activeLastWeek;
        break;
      case 30:
        label = dict.activeLastMonth;
        break;
      default:
        label = dict.activeInDays.replace(
          '{{days}}',
          String(filter.lastActiveDays)
        );
    }
    parts.push(label);
  }
  if (filter.separateFiltering) {
    parts.push(dict.separateFiltering);
  }

  if (parts.length === 0) {
    return dict.noCriteria;
  }
  if (parts.length <= 3) {
    return parts.join(' • ');
  } else {
    return `${parts.slice(0, 2).join(' • ')} ${dict.andMore.replace('{{count}}', String(parts.length - 2))}`;
  }
};

const SavedFilters: React.FC<SavedFiltersProps> = ({
  filters,
  activeFilterId,
  onSelect,
  onDelete,
  onEdit,
  onSetDefault,
  className,
  dict,
}) => {
  const formatDate = (date: Date) => {
    return new Intl.DateTimeFormat('he-IL', {
      day: 'numeric',
      month: 'short',
      year: 'numeric',
    }).format(date);
  };

  const getFilterComplexity = (
    filter: CandidatesFilter
  ): { score: number; label: string; color: string } => {
    let score = Object.keys(filter).filter(
      (key) => filter[key as keyof CandidatesFilter] !== undefined
    ).length;

    if (score <= 2)
      return {
        score,
        label: dict.filterCard.complexity.basic,
        color: 'from-green-500 to-emerald-500',
      };
    if (score <= 5)
      return {
        score,
        label: dict.filterCard.complexity.advanced,
        color: 'from-blue-500 to-cyan-500',
      };
    if (score <= 8)
      return {
        score,
        label: dict.filterCard.complexity.complex,
        color: 'from-purple-500 to-pink-500',
      };
    return {
      score,
      label: dict.filterCard.complexity.expert,
      color: 'from-amber-500 to-orange-500',
    };
  };

  return (
    <div className={cn('space-y-4', className)}>
      <div className="flex items-center justify-between p-4 bg-gradient-to-r from-white via-purple-50/30 to-pink-50/30 rounded-2xl shadow-lg border border-gray-100/50">
        <div className="flex items-center gap-3">
          <div className="p-2 rounded-full bg-gradient-to-r from-purple-500 to-pink-500 text-white shadow-lg">
            <Bookmark className="w-5 h-5" />
          </div>
          <div>
            <h3 className="text-lg font-bold bg-gradient-to-r from-purple-600 to-pink-600 bg-clip-text text-transparent">
              {dict.header.title}
            </h3>
            <p className="text-sm text-gray-600">
              {dict.header.subtitle
                .replace('{{count}}', String(filters.length))
                .replace(
                  '{{label}}',
                  filters.length === 1
                    ? dict.header.singleFilter
                    : dict.header.multipleFilters
                )}
            </p>
          </div>
        </div>
        <Badge className="bg-gradient-to-r from-purple-500 to-pink-500 text-white border-0 shadow-lg px-3 py-1 font-bold">
          {filters.length}
        </Badge>
      </div>

      <ScrollArea className="h-[400px] rounded-2xl">
        <div className="space-y-3 p-1">
          <AnimatePresence>
            {filters.map((filter, index) => {
              const complexity = getFilterComplexity(filter.filter);
              const isActive = activeFilterId === filter.id;
              return (
                <motion.div
                  key={filter.id}
                  initial={{ opacity: 0, y: 20, scale: 0.95 }}
                  animate={{ opacity: 1, y: 0, scale: 1 }}
                  exit={{ opacity: 0, y: -20, scale: 0.95 }}
                  transition={{
                    delay: index * 0.05,
                    type: 'spring',
                    stiffness: 300,
                    damping: 25,
                  }}
                  whileHover={{ scale: 1.02, y: -2 }}
                  className={cn(
                    'relative group cursor-pointer rounded-2xl overflow-hidden shadow-xl border-0 transition-all duration-300',
                    isActive
                      ? 'ring-4 ring-purple-400 ring-opacity-60 shadow-purple-200'
                      : 'shadow-gray-200 hover:shadow-2xl'
                  )}
                  onClick={() => onSelect(filter)}
                >
                  <div
                    className={cn(
                      'absolute inset-0 bg-gradient-to-br transition-opacity duration-300',
                      isActive
                        ? 'from-purple-50 via-pink-50/50 to-purple-50 opacity-90'
                        : 'from-white via-gray-50/30 to-white opacity-95 group-hover:opacity-100'
                    )}
                  />
                  <div className="relative z-10 p-5">
                    <div className="flex items-start justify-between mb-4">
                      <div className="flex items-center gap-3">
                        {filter.isDefault && (
                          <motion.div
                            initial={{ scale: 0 }}
                            animate={{ scale: 1 }}
                            className="p-2 rounded-full bg-gradient-to-r from-yellow-400 to-orange-400 text-white shadow-lg"
                          >
                            <Crown className="w-4 h-4" />
                          </motion.div>
                        )}
                        <div
                          className={cn(
                            'p-2 rounded-full text-white shadow-lg bg-gradient-to-r',
                            complexity.color
                          )}
                        >
                          {complexity.score <= 2 ? (
                            <Star className="w-4 h-4" />
                          ) : complexity.score <= 5 ? (
                            <Sparkles className="w-4 h-4" />
                          ) : complexity.score <= 8 ? (
                            <Zap className="w-4 h-4" />
                          ) : (
                            <Award className="w-4 h-4" />
                          )}
                        </div>
                        <div className="flex-1">
                          <h4 className="font-bold text-lg text-gray-800 group-hover:text-purple-700 transition-colors">
                            {filter.name}
                          </h4>
                          <p className="text-sm text-gray-500 mt-1">
                            {formatFilterSummary(
                              filter.filter,
                              dict.filterCard.summary
                            )}
                          </p>
                        </div>
                      </div>
                      <DropdownMenu>
                        <DropdownMenuTrigger asChild>
                          <Button
                            variant="ghost"
                            size="sm"
                            className="h-8 w-8 p-0 opacity-0 group-hover:opacity-100 transition-opacity hover:bg-purple-100 rounded-full"
                            onClick={(e) => e.stopPropagation()}
                          >
                            <MoreVertical className="h-4 w-4 text-gray-600" />
                          </Button>
                        </DropdownMenuTrigger>
                        <DropdownMenuContent
                          align="end"
                          className="bg-white/95 backdrop-blur-sm border-0 shadow-2xl rounded-xl"
                        >
                          <DropdownMenuItem
                            onClick={() => onEdit(filter)}
                            className="hover:bg-blue-50 rounded-lg"
                          >
                            <Edit className="mr-2 h-4 w-4 text-blue-600" />
                            <span className="text-blue-700">
                              {dict.filterCard.actions.edit}
                            </span>
                          </DropdownMenuItem>
                          <DropdownMenuItem
                            onClick={() => onSetDefault(filter.id)}
                            disabled={filter.isDefault}
                            className="hover:bg-yellow-50 rounded-lg"
                          >
                            <Crown className="mr-2 h-4 w-4 text-yellow-600" />
                            <span className="text-yellow-700">
                              {filter.isDefault
                                ? dict.filterCard.actions.isDefault
                                : dict.filterCard.actions.setDefault}
                            </span>
                          </DropdownMenuItem>
                          <DropdownMenuItem
                            onClick={() => onDelete(filter.id)}
                            className="hover:bg-red-50 rounded-lg"
                          >
                            <Trash className="mr-2 h-4 w-4 text-red-600" />
                            <span className="text-red-700">
                              {dict.filterCard.actions.delete}
                            </span>
                          </DropdownMenuItem>
                        </DropdownMenuContent>
                      </DropdownMenu>
                    </div>
                    <div className="space-y-3">
                      <div className="flex items-center justify-between">
                        <Badge
                          className={cn(
                            'text-white border-0 shadow-lg font-bold px-3 py-1 bg-gradient-to-r',
                            complexity.color
                          )}
                        >
                          {complexity.label} •{' '}
                          {dict.filterCard.criteria.replace(
                            '{{count}}',
                            String(complexity.score)
                          )}
                        </Badge>
                        <div className="flex items-center gap-2 text-xs text-gray-500">
                          <Calendar className="w-3 h-3" />
                          <span>{formatDate(filter.createdAt)}</span>
                        </div>
                      </div>
                    </div>
                  </div>
                  <div className="absolute inset-0 bg-gradient-to-r from-purple-400/0 via-pink-400/0 to-purple-400/0 group-hover:from-purple-400/10 group-hover:via-pink-400/10 group-hover:to-purple-400/10 transition-all duration-500 pointer-events-none rounded-2xl"></div>
                  {isActive && (
                    <motion.div
                      initial={{ scale: 0 }}
                      animate={{ scale: 1 }}
                      className="absolute top-3 left-3 w-3 h-3 bg-purple-500 rounded-full shadow-lg"
                    >
                      <div className="w-full h-full bg-purple-400 rounded-full animate-ping"></div>
                    </motion.div>
                  )}
                  <div className="absolute inset-0 bg-gradient-to-r from-transparent via-white/20 to-transparent transform -translate-x-full group-hover:translate-x-full transition-transform duration-1000 rounded-2xl"></div>
                </motion.div>
              );
            })}
          </AnimatePresence>
        </div>
      </ScrollArea>

      {filters.length === 0 && (
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          className="text-center py-12 bg-gradient-to-br from-white via-gray-50/30 to-white rounded-2xl shadow-xl border border-gray-100/50"
        >
          <div className="w-20 h-20 rounded-full bg-gradient-to-br from-purple-100 to-pink-100 flex items-center justify-center mx-auto mb-6">
            <Bookmark className="w-10 h-10 text-purple-400" />
          </div>
          <h3 className="text-xl font-bold text-gray-800 mb-3">
            {dict.emptyState.title}
          </h3>
          <p className="text-gray-600 mb-6 max-w-sm mx-auto">
            {dict.emptyState.description}
          </p>
          <div className="flex flex-wrap gap-2 justify-center">
            <Badge
              variant="outline"
              className="bg-blue-50 text-blue-600 border-blue-200"
            >
              <Star className="w-3 h-3 mr-1" />
              {dict.emptyState.fastSearches}
            </Badge>
            <Badge
              variant="outline"
              className="bg-purple-50 text-purple-600 border-purple-200"
            >
              <Sparkles className="w-3 h-3 mr-1" />
              {dict.emptyState.advancedFiltering}
            </Badge>
            <Badge
              variant="outline"
              className="bg-green-50 text-green-600 border-green-200"
            >
              <Award className="w-3 h-3 mr-1" />
              {dict.emptyState.quickAccess}
            </Badge>
          </div>
        </motion.div>
      )}

      {filters.length > 0 && (
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.3 }}
          className="bg-gradient-to-r from-indigo-50 via-purple-50 to-pink-50 rounded-2xl p-4 shadow-lg border border-gray-100/50"
        >
          <div className="grid grid-cols-3 gap-4 text-center">
            <div>
              <div className="text-lg font-bold text-indigo-600">
                {filters.filter((f) => f.isDefault).length}
              </div>
              <div className="text-xs text-gray-600">{dict.stats.default}</div>
            </div>
            <div>
              <div className="text-lg font-bold text-purple-600">
                {
                  filters.filter((f) => getFilterComplexity(f.filter).score > 5)
                    .length
                }
              </div>
              <div className="text-xs text-gray-600">{dict.stats.advanced}</div>
            </div>
            <div>
              <div className="text-lg font-bold text-pink-600">
                {Math.round(
                  filters.reduce(
                    (acc, f) => acc + getFilterComplexity(f.filter).score,
                    0
                  ) / (filters.length || 1)
                )}
              </div>
              <div className="text-xs text-gray-600">
                {dict.stats.avgCriteria}
              </div>
            </div>
          </div>
        </motion.div>
      )}
    </div>
  );
};

export default SavedFilters;
--- End of Content for SavedFilters.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\new\Filters\SearchBar.tsx
--------------------------------------------------------------------------------
Content:
// SearchBar.tsx - גרסה סופית ומתקדמת עם תיקון z-index ו-RTL
'use client';

import React, { useState, useEffect, useRef } from 'react';
import {
  Search,
  X,
  History,
  Sparkles,
  Target,
  Crown,
  Star,
  TrendingUp,
  Zap,
} from 'lucide-react';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { motion, AnimatePresence } from 'framer-motion';
import type { Candidate } from '../types/candidates';
import { cn } from '@/lib/utils';
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from '@/components/ui/tooltip';
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
  PopoverAnchor,
} from '@/components/ui/popover';
import type { MatchmakerPageDictionary } from '@/types/dictionaries/matchmaker';

interface SearchBarProps {
  value: string;
  onChange: (value: string) => void;
  onSelect?: (candidate: Candidate) => void;
  recentSearches?: string[];
  onSaveSearch?: (value: string) => void;
  onClearRecentSearches?: () => void;
  suggestions?: Candidate[];
  loading?: boolean;
  className?: string;
  placeholder?: string;
  autoFocus?: boolean;
  genderTarget?: 'male' | 'female' | 'all';
  separateMode?: boolean;
  dict: MatchmakerPageDictionary['candidatesManager']['searchBar'];
}

const SearchBar: React.FC<SearchBarProps> = ({
  value,
  onChange,
  onSelect,
  recentSearches = [],
  onSaveSearch,
  onClearRecentSearches,
  suggestions = [],
  loading = false,
  className = '',
  placeholder, // We will now primarily use the placeholder from dict
  autoFocus = false,
  genderTarget = 'all',
  separateMode = false,
  dict,
}) => {
  const [inputValue, setInputValue] = useState(value);
  const [showDropdown, setShowDropdown] = useState(false);
  const [isHovered, setIsHovered] = useState(false);
  const [isFocused, setIsFocused] = useState(false);
  const inputRef = useRef<HTMLInputElement>(null);

  useEffect(() => {
    setInputValue(value);
  }, [value]);
  
  const searchCategories = [
    { id: 'name', label: dict.categories.name, icon: <Star className="w-3 h-3" />, gradient: 'from-blue-500 to-cyan-500' },
    { id: 'city', label: dict.categories.city, icon: <Target className="w-3 h-3" />, gradient: 'from-emerald-500 to-green-500' },
    { id: 'occupation', label: dict.categories.occupation, icon: <Zap className="w-3 h-3" />, gradient: 'from-purple-500 to-pink-500' },
    { id: 'all', label: dict.categories.all, icon: <Sparkles className="w-3 h-3" />, gradient: 'from-indigo-500 to-purple-500' },
  ];
  const [searchCategory, setSearchCategory] = useState<string>('all');


  const getSearchPlaceholder = () => {
    if (placeholder) return placeholder; // Allow override
    if (separateMode) {
      if (genderTarget === 'male') return dict.malePlaceholder;
      if (genderTarget === 'female') return dict.femalePlaceholder;
    }
    return dict.generalPlaceholder;
  };

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const newValue = e.target.value;
    setInputValue(newValue);
    onChange(newValue);
    if (!showDropdown) {
      setShowDropdown(true);
    }
  };

  const handleSearch = (searchValue: string) => {
    if (searchValue.trim()) {
      onChange(searchValue.trim());
      if (onSaveSearch) {
        onSaveSearch(searchValue.trim());
      }
    }
  };

  const handleKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {
    if (e.key === 'Enter' && inputValue.trim()) {
      handleSearch(inputValue);
      setShowDropdown(false);
    } else if (e.key === 'Escape') {
      setShowDropdown(false);
    }
  };

  const handleClear = () => {
    setInputValue('');
    onChange('');
    inputRef.current?.focus();
  };

  const handleSuggestionSelect = (candidate: Candidate) => {
    if (onSelect) {
      onSelect(candidate);
    } else {
      const searchText = `${candidate.firstName} ${candidate.lastName}`;
      setInputValue(searchText);
      onChange(searchText);
    }
    setShowDropdown(false);
  };

  const getStyling = () => {
    if (!separateMode || genderTarget === 'all') {
      return { gradient: 'from-indigo-500 via-purple-500 to-pink-500', ring: 'focus:ring-purple-200', badge: 'bg-gradient-to-r from-indigo-500 to-purple-500' };
    }
    if (genderTarget === 'male') {
      return { gradient: 'from-blue-500 to-cyan-500', ring: 'focus:ring-blue-200', badge: 'bg-gradient-to-r from-blue-500 to-cyan-500' };
    }
    return { gradient: 'from-purple-500 to-pink-500', ring: 'focus:ring-purple-200', badge: 'bg-gradient-to-r from-purple-500 to-pink-500' };
  };

  const styling = getStyling();

  return (
    <Popover open={showDropdown} onOpenChange={setShowDropdown}>
      <div className={cn('relative group', className)}>
        <PopoverAnchor asChild>
          <motion.div
            className={cn('relative flex items-center rounded-2xl shadow-xl transition-all duration-300 backdrop-blur-sm border-0', `bg-gradient-to-r from-white via-gray-50/30 to-white`, isFocused || isHovered ? 'shadow-2xl scale-[1.02]' : 'shadow-lg', isFocused && `ring-2 ${styling.ring}`)}
            onMouseEnter={() => setIsHovered(true)}
            onMouseLeave={() => setIsHovered(false)}
            whileHover={{ y: -2 }}
            transition={{ type: 'spring', stiffness: 400, damping: 25 }}
          >
            <div className={cn('absolute inset-0 bg-gradient-to-r opacity-5 rounded-2xl', styling.gradient)} />

            {separateMode && genderTarget !== 'all' && (
              <motion.div className="absolute left-4 top-1/2 -translate-y-1/2 z-10" initial={{ scale: 0 }} animate={{ scale: 1 }} transition={{ type: 'spring', stiffness: 500, damping: 25 }}>
                <Badge className={cn('text-white border-0 shadow-lg font-bold px-3 py-1.5 rounded-xl', styling.badge)}>
                  <div className="flex items-center gap-2">
                    {genderTarget === 'male' ? <Target className="w-4 h-4" /> : <Crown className="w-4 h-4" />}
                    {genderTarget === 'male' ? dict.tooltips.maleTarget : dict.tooltips.femaleTarget}
                  </div>
                </Badge>
              </motion.div>
            )}

            <input
              ref={inputRef}
              type="text"
              value={inputValue}
              onChange={handleInputChange}
              onKeyDown={handleKeyDown}
              onFocus={() => { setShowDropdown(true); setIsFocused(true); }}
              onBlur={() => setIsFocused(false)}
              placeholder={getSearchPlaceholder()}
              className={cn('w-full h-14 bg-transparent border-0 rounded-2xl text-lg font-medium relative z-10', 'placeholder:text-gray-500 text-gray-800', 'focus:outline-none transition-all duration-200', separateMode ? 'pl-32 pr-16' : 'pl-6 pr-16')}
              autoFocus={autoFocus}
              autoComplete="off"
              spellCheck="false"
            />

            <div className="absolute right-4 top-1/2 -translate-y-1/2 z-10">
              <motion.div
                animate={{ rotate: loading ? 360 : 0, scale: isHovered || isFocused ? 1.1 : 1 }}
                transition={{ rotate: { duration: 1, repeat: loading ? Infinity : 0, ease: 'linear' }, scale: { duration: 0.2 } }}
                className={cn('p-2.5 rounded-full text-white shadow-lg', `bg-gradient-to-r ${styling.gradient}`)}
              >
                <Search className="w-5 h-5" />
              </motion.div>
            </div>

            <AnimatePresence>
              {inputValue && (
                <motion.div initial={{ opacity: 0, scale: 0.8 }} animate={{ opacity: 1, scale: 1 }} exit={{ opacity: 0, scale: 0.8 }} className={cn('absolute top-1/2 -translate-y-1/2 z-10', separateMode ? 'left-32' : 'left-4')}>
                  <TooltipProvider>
                    <Tooltip>
                      <TooltipTrigger asChild>
                        <button type="button" onClick={handleClear} className="w-7 h-7 bg-gray-100 hover:bg-gray-200 rounded-full flex items-center justify-center transition-all duration-200 hover:scale-110 shadow-md">
                          <X className="w-4 h-4 text-gray-600" />
                        </button>
                      </TooltipTrigger>
                      <TooltipContent><p>{dict.clearTooltip}</p></TooltipContent>
                    </Tooltip>
                  </TooltipProvider>
                </motion.div>
              )}
            </AnimatePresence>

            <div className="absolute inset-0 bg-gradient-to-r from-transparent via-white/20 to-transparent transform -translate-x-full group-hover:translate-x-full transition-transform duration-1000 rounded-2xl pointer-events-none"></div>
          </motion.div>
        </PopoverAnchor>
      </div>

      <PopoverContent onOpenAutoFocus={(e) => e.preventDefault()} className="w-[--radix-popover-trigger-width] p-0 mt-2 z-[99] border-0 shadow-2xl rounded-2xl overflow-hidden bg-white/95 backdrop-blur-xl">
        <div className={cn('p-4 bg-gradient-to-r text-white', styling.gradient)}>
          <div className="flex items-center justify-between mb-3 text-right">
            <div className="text-sm opacity-90">{dict.resultsCount.replace('{{count}}', String(suggestions.length))}</div>
            <div className="flex items-center gap-2">
              <span className="font-bold">{dict.smartSearch}</span>
              <Sparkles className="w-5 h-5" />
            </div>
          </div>
          <div className="relative">
            <Search className="absolute right-3 top-2.5 h-4 w-4 text-white/70" />
            <input
              type="text"
              value={inputValue}
              onChange={handleInputChange}
              className="w-full bg-white/20 backdrop-blur-sm border border-white/30 rounded-xl px-4 pr-10 py-2 text-sm text-white placeholder:text-white/70 focus:outline-none focus:ring-2 focus:ring-white/50 text-right"
              placeholder={dict.filterResultsPlaceholder}
            />
          </div>
        </div>

        <div className="max-h-96 overflow-y-auto">
          {loading === false && suggestions.length === 0 && recentSearches.length === 0 && (
            <motion.div initial={{ opacity: 0 }} animate={{ opacity: 1 }} className="p-8 text-center">
              <div className="w-16 h-16 rounded-full bg-gradient-to-br from-gray-100 to-gray-200 flex items-center justify-center mx-auto mb-4"><Search className="w-8 h-8 text-gray-400" /></div>
              <h3 className="font-bold text-gray-800 mb-2">{dict.noResultsTitle}</h3>
              <p className="text-sm text-gray-500">{dict.noResultsDescription}</p>
            </motion.div>
          )}

          {loading === true && (
            <motion.div initial={{ opacity: 0 }} animate={{ opacity: 1 }} className="p-8 text-center">
              <div className="w-16 h-16 rounded-full bg-gradient-to-br from-gray-100 to-gray-200 flex items-center justify-center mx-auto mb-4"><Search className="w-8 h-8 text-gray-400 animate-pulse" /></div>
              <h3 className="font-bold text-gray-800 mb-2">מחפש...</h3>
              <p className="text-sm text-gray-500">אנא המתן...</p>
            </motion.div>
          )}

          {recentSearches.length > 0 && (
            <div className="border-b border-gray-100">
              <div className="px-4 py-3 bg-gradient-to-r from-gray-50 to-gray-100/50">
                <div className="flex justify-between items-center">
                  {onClearRecentSearches && (<Button variant="ghost" size="sm" onClick={(e) => { e.stopPropagation(); onClearRecentSearches(); }} className="h-6 text-xs text-gray-500 hover:text-gray-700 px-2">{dict.clearHistory}</Button>)}
                  <div className="flex items-center gap-2">
                    <span className="text-sm font-medium text-gray-700">{dict.recentSearches}</span>
                    <History className="w-4 h-4 text-gray-500" />
                  </div>
                </div>
              </div>
              <div className="p-2">
                {recentSearches.slice(0, 5).map((search, index) => (
                  <motion.div key={`recent-${index}`} initial={{ opacity: 0, x: 20 }} animate={{ opacity: 1, x: 0 }} transition={{ delay: index * 0.05 }} className="flex items-center gap-3 px-3 py-2.5 hover:bg-gradient-to-r hover:from-blue-50 hover:to-cyan-50 rounded-xl cursor-pointer transition-all duration-200 group" onClick={() => { handleSearch(search); setShowDropdown(false); }}>
                    <div className="ml-auto opacity-0 group-hover:opacity-100 transition-opacity"><Zap className="w-3 h-3 text-blue-500" /></div>
                    <span className="text-sm font-medium text-gray-700 group-hover:text-blue-700">{search}</span>
                    <div className="p-1.5 rounded-lg bg-gradient-to-r from-blue-100 to-cyan-100 group-hover:from-blue-200 group-hover:to-cyan-200 transition-all duration-200"><History className="h-3 w-3 text-blue-600" /></div>
                  </motion.div>
                ))}
              </div>
            </div>
          )}

          {suggestions.length > 0 && (
            <div>
              <div className="px-4 py-3 bg-gradient-to-r from-emerald-50 to-green-50 border-b border-gray-100">
                <div className="flex items-center justify-end gap-2">
                  <span className="text-sm font-medium text-emerald-800">{dict.matchingResults.replace('{{count}}', String(suggestions.length))}</span>
                  <Star className="w-4 h-4 text-emerald-600" />
                </div>
              </div>
              <div className="p-2 space-y-1">
                {suggestions.map((candidate, index) => (
                  <motion.div key={candidate.id} initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} transition={{ delay: index * 0.05 }} className="flex items-center gap-3 px-3 py-3 hover:bg-gradient-to-r hover:from-purple-50 hover:to-pink-50 rounded-xl cursor-pointer transition-all duration-200 group" onClick={() => handleSuggestionSelect(candidate)}>
                    <div className="opacity-0 group-hover:opacity-100 transition-opacity"><div className="p-1.5 rounded-lg bg-gradient-to-r from-purple-100 to-pink-100"><Sparkles className="w-3 h-3 text-purple-600" /></div></div>
                    <div className="flex-1 min-w-0 text-right">
                      <div className="font-medium text-gray-800 group-hover:text-purple-700 transition-colors">{`${candidate.firstName} ${candidate.lastName}`}</div>
                      <div className="text-xs text-gray-500 truncate mt-0.5">{[candidate.profile.city, candidate.profile.occupation, candidate.profile.religiousLevel].filter(Boolean).join(' • ')}</div>
                    </div>
                    <div className="relative">
                      <div className="w-10 h-10 rounded-full bg-gradient-to-br from-purple-100 to-pink-100 flex items-center justify-center group-hover:scale-110 transition-transform duration-200">
                        <span className="text-sm font-bold text-purple-600">{candidate.firstName.charAt(0)}{candidate.lastName.charAt(0)}</span>
                      </div>
                      {candidate.isVerified && (<div className="absolute -top-1 -right-1 w-4 h-4 bg-gradient-to-r from-emerald-500 to-green-500 rounded-full flex items-center justify-center"><Star className="w-2 h-2 text-white" /></div>)}
                    </div>
                  </motion.div>
                ))}
              </div>
            </div>
          )}

          <div className="md:hidden border-t border-gray-100">
            <div className="px-4 py-3 bg-gradient-to-r from-indigo-50 to-purple-50">
              <div className="flex items-center justify-end gap-2 mb-3">
                <span className="text-sm font-medium text-indigo-800">חפש לפי קטגוריה</span>
                <TrendingUp className="w-4 h-4 text-indigo-600" />
              </div>
              <div className="grid grid-cols-2 gap-2">
                {searchCategories.map((category) => (
                  <motion.div key={category.id} whileHover={{ scale: 1.02 }} whileTap={{ scale: 0.98 }}>
                    <Button variant={searchCategory === category.id ? 'default' : 'outline'} size="sm" className={cn('w-full justify-start gap-2 rounded-xl transition-all duration-200', searchCategory === category.id ? `bg-gradient-to-r ${category.gradient} text-white shadow-lg border-0` : 'bg-white/80 hover:bg-white border border-gray-200 hover:border-gray-300')} onClick={() => setSearchCategory(category.id)}>
                      {category.icon}
                      <span className="text-xs">{category.label}</span>
                    </Button>
                  </motion.div>
                ))}
              </div>
            </div>
          </div>

          <div className="p-4 bg-gradient-to-r from-gray-50 to-gray-100/50 border-t border-gray-100">
            <div className="flex items-start gap-2 text-right">
              <Sparkles className="w-4 h-4 text-gray-500 mt-0.5 flex-shrink-0" />
              <div className="text-xs text-gray-600 leading-relaxed"><span className="font-medium">{dict.tip}</span> {dict.tipContent}</div>
            </div>
          </div>
        </div>
      </PopoverContent>
    </Popover>
  );
};

export default SearchBar;
--- End of Content for SearchBar.tsx ---

================================================================================
Directory: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\new\constants
================================================================================

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\new\constants\filterOptions.ts
--------------------------------------------------------------------------------
Content:
// /constants/filterOptions.ts
import { AvailabilityStatus } from '@prisma/client';

export const AGE_RANGE = {
  min: 18,
  max: 99,
  default: {
    min: 20,
    max: 35
  }
};

export const HEIGHT_RANGE = {
  min: 140,
  max: 210,
  default: {
    min: 150,
    max: 190
  }
};

export const RELIGIOUS_LEVELS = [
  { value: "charedi", label: "חרדי/ת" },
  { value: "charedi_modern", label: "חרדי/ת מודרני/ת" },
  { value: "dati_leumi_torani", label: "דתי/ה לאומי/ת תורני/ת" },
  { value: "dati_leumi_liberal", label: "דתי/ה לאומי/ת ליברלי/ת" },
  { value: "dati_leumi_standard", label: "דתי/ה לאומי/ת (סטנדרטי)" },
  { value: "masorti_strong", label: "מסורתי/ת (קרוב/ה לדת)" },
  { value: "masorti_light", label: "מסורתי/ת (קשר קל למסורת)" },
  {
    value: "secular_traditional_connection",
    label: "חילוני/ת עם זיקה למסורת",
  },
  { value: "secular", label: "חילוני/ת" },
  { value: "spiritual_not_religious", label: "רוחני/ת (לאו דווקא דתי/ה)" },
  { value: "other", label: "אחר (נא לפרט ב'אודות')" },
];

export const EDUCATION_LEVELS = [
  { value: 'תיכונית', label: 'השכלה תיכונית' },
  { value: 'ישיבה', label: 'ישיבה' },
  { value: 'סמינר', label: 'סמינר' },
  { value: 'תואר ראשון', label: 'תואר ראשון' },
  { value: 'תואר שני', label: 'תואר שני' },
  { value: 'דוקטורט', label: 'דוקטורט' }
];

export const MARITAL_STATUS = [
  { value: 'רווק/ה', label: 'רווק/ה' },
  { value: 'גרוש/ה', label: 'גרוש/ה' },
  { value: 'אלמן/ה', label: 'אלמן/ה' }
];

export const OCCUPATION_CATEGORIES = [
  { value: 'חינוך', label: 'חינוך והוראה' },
  { value: 'הייטק', label: 'הייטק ותוכנה' },
  { value: 'רפואה', label: 'רפואה ובריאות' },
  { value: 'משפטים', label: 'משפטים' },
  { value: 'עסקים', label: 'עסקים וכלכלה' },
  { value: 'שירותים', label: 'שירותים' },
  { value: 'אחר', label: 'אחר' }
];

export const REGIONS = [
  { value: 'ירושלים', label: 'ירושלים והסביבה' },
  { value: 'תל אביב', label: 'תל אביב והמרכז' },
  { value: 'חיפה', label: 'חיפה והצפון' },
  { value: 'באר שבע', label: 'באר שבע והדרום' },
  { value: 'יהודה ושומרון', label: 'יהודה ושומרון' }
];

export const POPULAR_CITIES = [
  'ירושלים',
  'תל אביב',
  'חיפה',
  'בני ברק',
  'פתח תקווה',
  'אשדוד',
  'נתניה',
  'באר שבע',
  'חולון',
  'רמת גן',
  'בית שמש',
  'מודיעין עילית',
  'אלעד',
  'ביתר עילית'
];

export const AVAILABILITY_STATUS_OPTIONS = [
  { 
    value: AvailabilityStatus.AVAILABLE, 
    label: 'פנוי/ה',
    description: 'מועמד/ת פנוי/ה להצעות'
  },
  { 
    value: AvailabilityStatus.DATING, 
    label: 'בתהליך הכרות',
    description: 'נמצא/ת בתהליך הכרות'
  },
  { 
    value: AvailabilityStatus.UNAVAILABLE, 
    label: 'לא פנוי/ה',
    description: 'לא פנוי/ה להצעות כרגע'
  }
];

export const SORT_OPTIONS = [
  { 
    value: 'lastActive',
    label: 'פעילות אחרונה',
    defaultOrder: 'desc'
  },
  { 
    value: 'age',
    label: 'גיל',
    defaultOrder: 'asc'
  },
  { 
    value: 'name',
    label: 'שם',
    defaultOrder: 'asc'
  },
  { 
    value: 'city',
    label: 'עיר',
    defaultOrder: 'asc'
  },
  { 
    value: 'religiousLevel',
    label: 'רמת דתיות',
    defaultOrder: 'asc'
  },
  { 
    value: 'height',
    label: 'גובה',
    defaultOrder: 'desc'
  },
  { 
    value: 'registrationDate',
    label: 'תאריך הרשמה',
    defaultOrder: 'desc'
  }
];

export const VIEW_OPTIONS = [
  {
    value: 'grid',
    label: 'תצוגת גריד',
    icon: 'LayoutGrid'
  },
  {
    value: 'list',
    label: 'תצוגת רשימה',
    icon: 'List'
  }
];

export const CARD_SIZES = [
  {
    value: 'sm',
    label: 'קטן',
    dimensions: {
      grid: 'h-64',
      list: 'h-24'
    }
  },
  {
    value: 'md',
    label: 'בינוני',
    dimensions: {
      grid: 'h-80',
      list: 'h-32'
    }
  },
  {
    value: 'lg',
    label: 'גדול',
    dimensions: {
      grid: 'h-96',
      list: 'h-40'
    }
  }
];

export const GROUP_BY_OPTIONS = [
  {
    value: 'none',
    label: 'ללא קיבוץ'
  },
  {
    value: 'city',
    label: 'עיר'
  },
  {
    value: 'religiousLevel',
    label: 'רמת דתיות'
  },
  {
    value: 'ageGroup',
    label: 'קבוצת גיל'
  },
  {
    value: 'availability',
    label: 'סטטוס זמינות'
  }
];

export const DEFAULT_FILTERS = {
  gender: undefined,
  ageRange: AGE_RANGE.default,
  heightRange: HEIGHT_RANGE.default,
  cities: [],
  religiousLevel: undefined,
  occupations: [],
  availability: undefined,
  searchQuery: '',
  isVerified: undefined,
  hasReferences: undefined,
  lastActiveDays: undefined
};

export const FILTER_CATEGORIES = [
  {
    id: 'basic',
    label: 'פילטרים בסיסיים',
    filters: ['gender', 'ageRange', 'cities', 'religiousLevel']
  },
  {
    id: 'advanced',
    label: 'פילטרים מתקדמים',
    filters: ['heightRange', 'occupations', 'education', 'maritalStatus']
  },
  {
    id: 'status',
    label: 'סטטוס ואימות',
    filters: ['availability', 'isVerified', 'hasReferences', 'lastActiveDays']
  }
];
--- End of Content for filterOptions.ts ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\new\constants\matchingCriteria.ts
--------------------------------------------------------------------------------
Content:
// /constants/matchingCriteria.ts

export const CRITERIA_WEIGHTS = {
    // קריטריונים בסיסיים
    age: {
      weight: 15,
      description: 'התאמת גיל',
      thresholds: {
        perfect: 2,  // הפרש של עד שנתיים
        good: 5,     // הפרש של עד 5 שנים
        fair: 8      // הפרש של עד 8 שנים
      }
    },
    
    religiousLevel: {
      weight: 20,
      description: 'התאמה דתית',
      bonusPoints: {
        exactMatch: 1.0,        // התאמה מדויקת
        adjacentLevel: 0.8,     // רמה דתית סמוכה
        twoLevelsApart: 0.4     // הפרש של שתי רמות
      }
    },
  
    location: {
      weight: 10,
      description: 'מיקום גיאוגרפי',
      bonusPoints: {
        sameCity: 1.0,          // אותה עיר
        sameRegion: 0.8,        // אותו אזור
        preferredCity: 0.7,     // עיר מועדפת
        differentRegion: 0.4    // אזור אחר
      }
    },
  
    // קריטריונים מקצועיים והשכלתיים
    education: {
      weight: 8,
      description: 'רמת השכלה',
      bonusPoints: {
        sameLevel: 1.0,         // רמת השכלה זהה
        adjacentLevel: 0.8,     // רמת השכלה סמוכה
        meetPreferences: 0.7    // עומד בהעדפות
      }
    },
  
    occupation: {
      weight: 7,
      description: 'תחום עיסוק',
      bonusPoints: {
        sameField: 1.0,         // אותו תחום
        relatedField: 0.8,      // תחום קרוב
        meetPreferences: 0.7    // עומד בהעדפות
      }
    },
  
    // קריטריונים אישיים
    familyBackground: {
      weight: 12,
      description: 'רקע משפחתי',
      factors: {
        origin: 0.4,            // מוצא
        parentStatus: 0.3,      // מצב הורים
        familyType: 0.3         // סוג משפחה
      }
    },
  
    personalityMatch: {
      weight: 15,
      description: 'התאמה אישיותית',
      factors: {
        hobbies: 0.3,           // תחביבים משותפים
        lifestyle: 0.4,         // סגנון חיים
        values: 0.3             // ערכים משותפים
      }
    },
  
    // גורמים נוספים
    preferences: {
      weight: 8,
      description: 'העדפות אישיות',
      factors: {
        agePreference: 0.3,     // העדפות גיל
        locationPreference: 0.3, // העדפות מיקום
        otherPreferences: 0.4   // העדפות נוספות
      }
    },
  
    compatibility: {
      weight: 5,
      description: 'תאימות כללית',
      factors: {
        language: 0.3,          // שפה משותפת
        culture: 0.4,           // תרבות
        lifestyle: 0.3          // סגנון חיים
      }
    }
  };
  
  // סף ציון להתאמה טובה
  export const MATCH_THRESHOLDS = {
    EXCELLENT: 85,  // התאמה מצוינת
    GOOD: 75,       // התאמה טובה
    FAIR: 65,       // התאמה סבירה
    POOR: 50        // התאמה חלשה
  };
  
  // משקלים יחסיים לפי סוג התאמה
  export const MATCH_TYPE_WEIGHTS = {
    PRECISE: {     // התאמה מדויקת
      exact: 1.0,
      similar: 0.8,
      partial: 0.5
    },
    FLEXIBLE: {    // התאמה גמישה
      exact: 0.8,
      similar: 1.0,
      partial: 0.7
    },
    OPEN: {        // התאמה פתוחה
      exact: 0.7,
      similar: 0.9,
      partial: 1.0
    }
  };
  
  // הגדרת קטגוריות להתאמה
  export const MATCH_CATEGORIES = {
    IMMEDIATE: {
      minScore: 90,
      label: 'התאמה מיידית',
      description: 'התאמה גבוהה מאוד, מומלץ ליצור קשר בהקדם'
    },
    HIGH: {
      minScore: 80,
      label: 'התאמה גבוהה',
      description: 'התאמה טובה מאוד, שווה לבדוק'
    },
    GOOD: {
      minScore: 70,
      label: 'התאמה טובה',
      description: 'יש פוטנציאל טוב להתאמה'
    },
    MODERATE: {
      minScore: 60,
      label: 'התאמה בינונית',
      description: 'יש נקודות משותפות, אבל גם הבדלים'
    },
    LOW: {
      minScore: 50,
      label: 'התאמה נמוכה',
      description: 'יש פערים משמעותיים בין המועמדים'
    }
  };
--- End of Content for matchingCriteria.ts ---

================================================================================
Directory: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\new\dialogs
================================================================================

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\new\dialogs\ActionDialogs.tsx
--------------------------------------------------------------------------------
Content:
'use client';

import React, { useState, useEffect } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogFooter,
  DialogDescription,
} from '@/components/ui/dialog';
import { Priority, MatchSuggestionStatus } from '@prisma/client';
import { Alert, AlertDescription } from '@/components/ui/alert';
import {
  Clock,
  Mail,
  Loader2,
  Send,
  User,
  Sparkles,
  CheckCircle,
  Heart,
  MessageCircle,
  Calendar,
  AlertCircle,
  X,
} from 'lucide-react';
import type { Candidate } from '../types/candidates';
import { cn } from '@/lib/utils';
import { Badge } from '@/components/ui/badge';
import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';
import { getRelativeCloudinaryPath, getInitials } from '@/lib/utils';
import type { MatchmakerPageDictionary } from '@/types/dictionaries/matchmaker';

interface NewSuggestionFormData {
  firstPartyId: string;
  secondPartyId: string;
  priority: Priority;
  status: MatchSuggestionStatus;
}

interface ActionDialogsProps {
  suggestDialog: {
    isOpen: boolean;
    onClose: () => void;
    onSubmit: (data: NewSuggestionFormData) => Promise<void>;
    selectedCandidate: Candidate | null;
  };
  availabilityDialog: {
    isOpen: boolean;
    onClose: () => void;
    onCheck: (candidate: Candidate) => Promise<void>;
    selectedCandidate: Candidate | null;
  };
  inviteDialog: {
    isOpen: boolean;
    onClose: () => void;
    onInvite: (candidate: Candidate, email: string) => Promise<void>;
    selectedCandidate: Candidate | null;
  };
  dict: MatchmakerPageDictionary['candidatesManager']['actionDialogs'];
}

// Enhanced Dialog Header Component
const EnhancedDialogHeader: React.FC<{
  title: string;
  description: string;
  candidate: Candidate | null;
  icon: React.ReactNode;
  gradient: string;
}> = ({ title, description, candidate, icon, gradient }) => {
  const mainImage = candidate?.images?.find((img) => img.isMain);

  return (
    <div
      className={cn(
        'relative bg-gradient-to-br overflow-hidden rounded-t-3xl -mx-6 -mt-6 mb-6',
        gradient
      )}
    >
      <div className="absolute inset-0">
        <div className="absolute top-0 right-0 w-32 h-32 bg-white/20 rounded-full blur-2xl"></div>
        <div className="absolute bottom-0 left-0 w-24 h-24 bg-white/10 rounded-full blur-xl"></div>
      </div>
      <div className="relative z-10 p-6 text-white">
        <div className="flex items-center gap-4 mb-4">
          <div className="p-3 rounded-full bg-white/20 backdrop-blur-sm shadow-lg">
            {icon}
          </div>
          <div>
            <DialogTitle className="text-2xl font-bold text-white mb-1">
              {title}
            </DialogTitle>
            <DialogDescription className="text-white/90 text-lg">
              {description}
            </DialogDescription>
          </div>
        </div>
        {candidate && (
          <div className="flex items-center gap-3 p-3 bg-white/10 backdrop-blur-sm rounded-xl border border-white/20">
            <Avatar className="w-12 h-12 border-2 border-white/30 shadow-lg">
              {mainImage ? (
                <AvatarImage
                  src={getRelativeCloudinaryPath(mainImage.url)}
                  alt={`${candidate.firstName} ${candidate.lastName}`}
                />
              ) : (
                <AvatarFallback className="bg-white/20 text-white font-bold">
                  {getInitials(`${candidate.firstName} ${candidate.lastName}`)}
                </AvatarFallback>
              )}
            </Avatar>
            <div>
              <h3 className="font-bold text-white text-lg">
                {candidate.firstName} {candidate.lastName}
              </h3>
              <div className="flex items-center gap-2 mt-1">
                <Badge className="bg-white/20 text-white border-white/30 text-xs">
                  {candidate.profile.city || 'לא צוין'}
                </Badge>
                <Badge className="bg-white/20 text-white border-white/30 text-xs">
                  {candidate.profile.availabilityStatus === 'AVAILABLE'
                    ? 'זמין/ה'
                    : 'לא זמין/ה'}
                </Badge>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export const ActionDialogs: React.FC<ActionDialogsProps> = ({
  suggestDialog,
  availabilityDialog,
  inviteDialog,
  dict,
}) => {
  const [inviteEmail, setInviteEmail] = useState('');
  const [isInviting, setIsInviting] = useState(false);
  const [inviteError, setInviteError] = useState<string | null>(null);
  const [inviteSuccess, setInviteSuccess] = useState(false);

  const [isChecking, setIsChecking] = useState(false);
  const [availabilityError, setAvailabilityError] = useState<string | null>(
    null
  );
  const [availabilitySuccess, setAvailabilitySuccess] = useState(false);

  useEffect(() => {
    if (inviteDialog.isOpen && inviteDialog.selectedCandidate) {
      setInviteEmail(inviteDialog.selectedCandidate.email || '');
      setInviteError(null);
      setInviteSuccess(false);
    }
  }, [inviteDialog.isOpen, inviteDialog.selectedCandidate]);

  useEffect(() => {
    if (availabilityDialog.isOpen) {
      setAvailabilityError(null);
      setAvailabilitySuccess(false);
    }
  }, [availabilityDialog.isOpen]);

  const handleInviteSubmit = async () => {
    if (!inviteDialog.selectedCandidate || !inviteEmail) return;
    try {
      setIsInviting(true);
      setInviteError(null);
      await inviteDialog.onInvite(inviteDialog.selectedCandidate, inviteEmail);
      setInviteSuccess(true);
      setTimeout(() => inviteDialog.onClose(), 2000);
    } catch (error) {
      setInviteError(
        error instanceof Error ? error.message : dict.invite.submissionError
      );
    } finally {
      setIsInviting(false);
    }
  };

  const handleAvailabilityCheck = async () => {
    if (!availabilityDialog.selectedCandidate) return;
    try {
      setIsChecking(true);
      setAvailabilityError(null);
      await availabilityDialog.onCheck(availabilityDialog.selectedCandidate);
      setAvailabilitySuccess(true);
      setTimeout(() => availabilityDialog.onClose(), 2000);
    } catch (error) {
      setAvailabilityError(
        error instanceof Error
          ? error.message
          : dict.availability.submissionError
      );
    } finally {
      setIsChecking(false);
    }
  };

  const validateEmail = (email: string) =>
    /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email);

  return (
    <>
      <Dialog open={inviteDialog.isOpen} onOpenChange={inviteDialog.onClose}>
        <DialogContent className="sm:max-w-md border-0 shadow-2xl bg-white rounded-3xl overflow-hidden">
          <EnhancedDialogHeader
            title={dict.invite.title}
            description={dict.invite.description}
            candidate={inviteDialog.selectedCandidate}
            icon={<Send className="w-8 h-8" />}
            gradient="from-purple-500 to-indigo-500"
          />
          <div className="space-y-6 p-6 -mt-6">
            {inviteSuccess ? (
              <div className="text-center py-8">
                <div className="w-16 h-16 bg-gradient-to-r from-green-500 to-emerald-500 rounded-full flex items-center justify-center mx-auto mb-4 shadow-lg">
                  <CheckCircle className="w-8 h-8 text-white" />
                </div>
                <h3 className="text-xl font-bold text-green-800 mb-2">
                  {dict.invite.successMessage}
                </h3>
                <p className="text-green-600">
                  {dict.invite.successDescription}
                </p>
              </div>
            ) : (
              <>
                <div className="space-y-3">
                  <Label className="text-sm font-bold text-gray-700 flex items-center gap-2">
                    <Mail className="w-4 h-4 text-purple-500" />
                    {dict.invite.emailLabel}
                  </Label>
                  <div className="relative">
                    <Input
                      type="email"
                      value={inviteEmail}
                      onChange={(e) => {
                        setInviteEmail(e.target.value);
                        setInviteError(null);
                      }}
                      placeholder={dict.invite.emailPlaceholder}
                      className={cn(
                        'pr-12 h-12 bg-gray-50 border-2 border-gray-200 focus:border-purple-400 focus:ring-purple-200 rounded-xl transition-all duration-300',
                        !validateEmail(inviteEmail) &&
                          inviteEmail.length > 0 &&
                          'border-red-300 focus:border-red-400'
                      )}
                      dir="ltr"
                    />
                    <div className="absolute left-3 top-1/2 transform -translate-y-1/2">
                      <Mail className="w-5 h-5 text-gray-400" />
                    </div>
                  </div>
                  {inviteEmail && !validateEmail(inviteEmail) && (
                    <p className="text-red-500 text-sm flex items-center gap-1">
                      <AlertCircle className="w-4 h-4" />
                      {dict.invite.invalidEmailError}
                    </p>
                  )}
                </div>
                {inviteError && (
                  <Alert className="border-red-200 bg-red-50">
                    <AlertCircle className="h-4 w-4 text-red-600" />
                    <AlertDescription className="text-red-700 font-medium">
                      {inviteError}
                    </AlertDescription>
                  </Alert>
                )}
                <div className="bg-gradient-to-r from-purple-50 to-indigo-50 p-4 rounded-xl border border-purple-100">
                  <h4 className="font-bold text-purple-800 mb-2 flex items-center gap-2">
                    <Sparkles className="w-4 h-4" />
                    {dict.invite.whatsNextTitle}
                  </h4>
                  <ul className="text-sm text-purple-700 space-y-1">
                    {dict.invite.whatsNextItems.map((item, i) => (
                      <li key={i}>• {item}</li>
                    ))}
                  </ul>
                </div>
              </>
            )}
          </div>
          {!inviteSuccess && (
            <DialogFooter className="p-6 pt-0 gap-3">
              <Button
                variant="outline"
                onClick={inviteDialog.onClose}
                disabled={isInviting}
                className="border-2 border-gray-200 hover:bg-gray-50 rounded-xl font-medium"
              >
                {dict.invite.buttons.cancel}
              </Button>
              <Button
                onClick={handleInviteSubmit}
                disabled={
                  isInviting || !inviteEmail || !validateEmail(inviteEmail)
                }
                className="bg-gradient-to-r from-purple-600 to-indigo-600 hover:from-purple-700 hover:to-indigo-700 text-white shadow-lg hover:shadow-xl transition-all duration-300 rounded-xl font-bold px-6"
              >
                {isInviting ? (
                  <Loader2 className="ml-2 h-5 w-5 animate-spin" />
                ) : (
                  <Send className="ml-2 h-5 w-5" />
                )}
                {isInviting
                  ? dict.invite.buttons.sending
                  : dict.invite.buttons.send}
              </Button>
            </DialogFooter>
          )}
        </DialogContent>
      </Dialog>

      <Dialog
        open={availabilityDialog.isOpen}
        onOpenChange={availabilityDialog.onClose}
      >
        <DialogContent className="sm:max-w-md border-0 shadow-2xl bg-white rounded-3xl overflow-hidden">
          <EnhancedDialogHeader
            title={dict.availability.title}
            description={dict.availability.description}
            candidate={availabilityDialog.selectedCandidate}
            icon={<Calendar className="w-8 h-8" />}
            gradient="from-orange-500 to-amber-500"
          />
          <div className="space-y-6 p-6 -mt-6">
            {availabilitySuccess ? (
              <div className="text-center py-8">
                <div className="w-16 h-16 bg-gradient-to-r from-green-500 to-emerald-500 rounded-full flex items-center justify-center mx-auto mb-4 shadow-lg">
                  <CheckCircle className="w-8 h-8 text-white" />
                </div>
                <h3 className="text-xl font-bold text-green-800 mb-2">
                  {dict.availability.successMessage}
                </h3>
                <p className="text-green-600">
                  {dict.availability.successDescription}
                </p>
              </div>
            ) : (
              <>
                <div className="bg-gradient-to-r from-orange-50 to-amber-50 p-4 rounded-xl border border-orange-100">
                  <h4 className="font-bold text-orange-800 mb-2 flex items-center gap-2">
                    <Clock className="w-4 h-4" />
                    {dict.availability.whatsNextTitle}
                  </h4>
                  <ul className="text-sm text-orange-700 space-y-1">
                    {dict.availability.whatsNextItems.map((item, i) => (
                      <li key={i}>• {item}</li>
                    ))}
                  </ul>
                </div>
                {availabilityError && (
                  <Alert className="border-red-200 bg-red-50">
                    <AlertCircle className="h-4 w-4 text-red-600" />
                    <AlertDescription className="text-red-700 font-medium">
                      {availabilityError}
                    </AlertDescription>
                  </Alert>
                )}
                <div className="bg-gray-50 p-4 rounded-xl border border-gray-200">
                  <div className="flex items-center gap-3 mb-3">
                    <MessageCircle className="w-5 h-5 text-blue-500" />
                    <span className="font-medium text-gray-800">
                      {dict.availability.messageToSendTitle}
                    </span>
                  </div>
                  <p className="text-sm text-gray-600 bg-white p-3 rounded-lg border italic">
                    {dict.availability.messageContent.replace(
                      '{{firstName}}',
                      availabilityDialog.selectedCandidate?.firstName || ''
                    )}
                  </p>
                </div>
              </>
            )}
          </div>
          {!availabilitySuccess && (
            <DialogFooter className="p-6 pt-0 gap-3">
              <Button
                variant="outline"
                onClick={availabilityDialog.onClose}
                disabled={isChecking}
                className="border-2 border-gray-200 hover:bg-gray-50 rounded-xl font-medium"
              >
                {dict.availability.buttons.cancel}
              </Button>
              <Button
                onClick={handleAvailabilityCheck}
                disabled={isChecking}
                className="bg-gradient-to-r from-orange-600 to-amber-600 hover:from-orange-700 hover:to-amber-700 text-white shadow-lg hover:shadow-xl transition-all duration-300 rounded-xl font-bold px-6"
              >
                {isChecking ? (
                  <Loader2 className="ml-2 h-5 w-5 animate-spin" />
                ) : (
                  <Clock className="ml-2 h-5 w-5" />
                )}
                {isChecking
                  ? dict.availability.buttons.checking
                  : dict.availability.buttons.check}
              </Button>
            </DialogFooter>
          )}
        </DialogContent>
      </Dialog>

      <Dialog open={suggestDialog.isOpen} onOpenChange={suggestDialog.onClose}>
        <DialogContent className="sm:max-w-md border-0 shadow-2xl bg-white rounded-3xl overflow-hidden">
          <EnhancedDialogHeader
            title={dict.suggest.title}
            description={dict.suggest.description}
            candidate={suggestDialog.selectedCandidate}
            icon={<Heart className="w-8 h-8" />}
            gradient="from-pink-500 to-rose-500"
          />
          <div className="p-6 -mt-6">
            <div className="bg-gradient-to-r from-pink-50 to-rose-50 p-4 rounded-xl border border-pink-100">
              <h4 className="font-bold text-pink-800 mb-2 flex items-center gap-2">
                <Sparkles className="w-4 h-4" />
                {dict.suggest.whatsNextTitle}
              </h4>
              <p className="text-sm text-pink-700">
                {dict.suggest.whatsNextDescription}
              </p>
            </div>
          </div>
          <DialogFooter className="p-6 pt-0 gap-3">
            <Button
              variant="outline"
              onClick={suggestDialog.onClose}
              className="border-2 border-gray-200 hover:bg-gray-50 rounded-xl font-medium"
            >
              {dict.suggest.buttons.cancel}
            </Button>
            <Button
              onClick={suggestDialog.onClose}
              className="bg-gradient-to-r from-pink-600 to-rose-600 hover:from-pink-700 hover:to-rose-700 text-white shadow-lg hover:shadow-xl transition-all duration-300 rounded-xl font-bold px-6"
            >
              <Heart className="ml-2 h-5 w-5" />
              {dict.suggest.buttons.continue}
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </>
  );
};

export default ActionDialogs;
--- End of Content for ActionDialogs.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\new\dialogs\AddManualCandidateDialog.tsx
--------------------------------------------------------------------------------
Content:
'use client';

import React, { useState, useCallback } from 'react';
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription,
  DialogFooter,
  DialogClose,
} from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { toast } from 'sonner';
import { Loader2, UserPlus, X, UploadCloud, Trash2 } from 'lucide-react';
import { Checkbox } from '@/components/ui/checkbox';
import Image from 'next/image';
import { Gender } from '@prisma/client';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select';
import { DatePicker } from '@/components/ui/date-picker';
import { RadioGroup, RadioGroupItem } from '@/components/ui/radio-group';
import type { MatchmakerPageDictionary } from '@/types/dictionaries/matchmaker';

interface AddManualCandidateDialogProps {
  isOpen: boolean;
  onClose: () => void;
  onCandidateAdded: () => void;
  dict: MatchmakerPageDictionary['candidatesManager']['addManualCandidateDialog'];
}

const MAX_IMAGES = 5;
const MAX_IMAGE_SIZE_MB = 5;

export const AddManualCandidateDialog: React.FC<
  AddManualCandidateDialogProps
> = ({ isOpen, onClose, onCandidateAdded, dict }) => {
  const [firstName, setFirstName] = useState('');
  const [lastName, setLastName] = useState('');
  const [email, setEmail] = useState('');
  const [gender, setGender] = useState<Gender | undefined>(undefined);
  const [birthDate, setBirthDate] = useState<Date | undefined>(undefined);
  const [manualEntryText, setManualEntryText] = useState('');
  const [images, setImages] = useState<File[]>([]);
  const [imagePreviews, setImagePreviews] = useState<string[]>([]);
  const [sendInvite, setSendInvite] = useState(false);
  const [isSaving, setIsSaving] = useState(false);
  const [birthDateInputMode, setBirthDateInputMode] = useState<'date' | 'age'>(
    'date'
  );
  const [ageInput, setAgeInput] = useState<string>('');

  const resetForm = useCallback(() => {
    setFirstName('');
    setLastName('');
    setEmail('');
    setGender(undefined);
    setBirthDate(undefined);
    setManualEntryText('');
    setImages([]);
    setImagePreviews([]);
    setSendInvite(false);
    setIsSaving(false);
    setBirthDateInputMode('date');
    setAgeInput('');
  }, []);

  const handleClose = () => {
    resetForm();
    onClose();
  };

  const handleImageChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    if (event.target.files) {
      const newFiles = Array.from(event.target.files);
      const validFiles: File[] = [];
      const validPreviews: string[] = [];

      newFiles.forEach((file) => {
        if (images.length + validFiles.length < MAX_IMAGES) {
          if (file.size <= MAX_IMAGE_SIZE_MB * 1024 * 1024) {
            validFiles.push(file);
            validPreviews.push(URL.createObjectURL(file));
          } else {
            toast.error(
              dict.fields.photos.fileTooLargeError
                .replace('{{fileName}}', file.name)
                .replace('{{maxSize}}', String(MAX_IMAGE_SIZE_MB))
            );
          }
        } else {
          toast.warning(
            dict.fields.photos.maxFilesWarning.replace(
              '{{max}}',
              String(MAX_IMAGES)
            )
          );
        }
      });

      setImages((prev) => [...prev, ...validFiles]);
      setImagePreviews((prev) => [...prev, ...validPreviews]);
    }
  };

  const removeImage = (index: number) => {
    setImages(images.filter((_, i) => i !== index));
    setImagePreviews(imagePreviews.filter((_, i) => i !== index));
  };

  const handleSubmit = async (event: React.FormEvent) => {
    event.preventDefault();
    setIsSaving(true);

    if (!firstName || !lastName || !gender || !manualEntryText) {
      toast.error(dict.toasts.error.missingFields);
      setIsSaving(false);
      return;
    }

    let finalBirthDate: Date | undefined;
    let isBirthDateApproximate = false;

    if (birthDateInputMode === 'date') {
      if (!birthDate) {
        toast.error(dict.toasts.error.invalidBirthDate);
        setIsSaving(false);
        return;
      }
      finalBirthDate = birthDate;
    } else {
      const ageNum = parseInt(ageInput, 10);
      if (isNaN(ageNum) || ageNum <= 0 || ageNum > 120) {
        toast.error(dict.toasts.error.invalidAge);
        setIsSaving(false);
        return;
      }
      const birthYear = new Date().getFullYear() - ageNum;
      finalBirthDate = new Date(birthYear, 0, 1);
      isBirthDateApproximate = true;
    }

    const formData = new FormData();
    formData.append('firstName', firstName);
    formData.append('lastName', lastName);
    if (email) formData.append('email', email);
    formData.append('gender', gender);
    formData.append('birthDate', finalBirthDate.toISOString());
    formData.append('birthDateIsApproximate', String(isBirthDateApproximate));
    formData.append('manualEntryText', manualEntryText);
    images.forEach((image) => formData.append('images', image));

    try {
      const response = await fetch('/api/matchmaker/candidates/manual', {
        method: 'POST',
        body: formData,
      });
      const result = await response.json();
      if (!response.ok || !result.success)
        throw new Error(result.error || dict.toasts.error.general);

      if (sendInvite && email && result.candidate?.id) {
        const promise = fetch(
          `/api/matchmaker/candidates/${result.candidate.id}/invite-setup`,
          {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ email }),
          }
        ).then(async (inviteResponse) => {
          if (!inviteResponse.ok) {
            const errorData = await inviteResponse.json().catch(() => ({}));
            throw new Error(errorData.error || 'Invitation failed');
          }
          return inviteResponse.json();
        });
        toast.promise(promise, {
          loading: dict.toasts.success.inviteLoading,
          success: dict.toasts.success.inviteSent,
          error: (err: Error) =>
            dict.toasts.success.inviteError.replace('{{error}}', err.message),
        });
      } else {
        toast.success(dict.toasts.success.candidateAdded);
      }
      onCandidateAdded();
      handleClose();
    } catch (error) {
      console.error('Error adding manual candidate:', error);
      toast.error(
        `${dict.toasts.error.general}: ${error instanceof Error ? error.message : 'Unknown error'}`
      );
    } finally {
      setIsSaving(false);
    }
  };

  return (
    <Dialog
      open={isOpen}
      onOpenChange={(open) => {
        if (!open) handleClose();
      }}
    >
      <DialogContent className="max-w-2xl">
        <DialogClose asChild>
          <button className="absolute right-4 top-4 p-1 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2">
            <X className="h-4 w-4" />
            <span className="sr-only">{dict.close}</span>
          </button>
        </DialogClose>
        <DialogHeader>
          <DialogTitle className="flex items-center gap-2 text-right">
            <UserPlus className="w-6 h-6 text-primary" />
            {dict.title}
          </DialogTitle>
          <DialogDescription className="text-right">
            {dict.description}
          </DialogDescription>
        </DialogHeader>
        <form
          onSubmit={handleSubmit}
          className="space-y-6 py-4 max-h-[70vh] overflow-y-auto pr-2 pl-1"
        >
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <Label htmlFor="firstName" className="text-right block">
                {dict.fields.firstName.label}{' '}
                <span className="text-red-500">*</span>
              </Label>
              <Input
                id="firstName"
                value={firstName}
                onChange={(e) => setFirstName(e.target.value)}
                placeholder={dict.fields.firstName.placeholder}
                required
                dir="rtl"
              />
            </div>
            <div>
              <Label htmlFor="lastName" className="text-right block">
                {dict.fields.lastName.label}{' '}
                <span className="text-red-500">*</span>
              </Label>
              <Input
                id="lastName"
                value={lastName}
                onChange={(e) => setLastName(e.target.value)}
                placeholder={dict.fields.lastName.placeholder}
                required
                dir="rtl"
              />
            </div>
          </div>
          <div>
            <Label htmlFor="email" className="text-right block">
              {dict.fields.email.label}
            </Label>
            <Input
              id="email"
              type="email"
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              placeholder={dict.fields.email.placeholder}
              dir="ltr"
            />
            <p className="text-xs text-gray-500 mt-1 text-right">
              {dict.fields.email.description}
            </p>
          </div>
          <div className="flex items-center space-x-2 rtl:space-x-reverse pt-2">
            <Checkbox
              id="sendInvite"
              checked={sendInvite}
              onCheckedChange={(checked) => setSendInvite(Boolean(checked))}
              disabled={!email || isSaving}
            />
            <Label
              htmlFor="sendInvite"
              className={`cursor-pointer transition-colors ${!email ? 'text-gray-400 cursor-not-allowed' : 'text-gray-700'}`}
            >
              {dict.fields.sendInvite.label}
            </Label>
          </div>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <Label htmlFor="gender" className="text-right block">
                {dict.fields.gender.label}{' '}
                <span className="text-red-500">*</span>
              </Label>
              <Select
                value={gender}
                onValueChange={(value) => setGender(value as Gender)}
              >
                <SelectTrigger id="gender" dir="rtl">
                  <SelectValue placeholder={dict.fields.gender.placeholder} />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value={Gender.MALE}>
                    {dict.fields.gender.male}
                  </SelectItem>
                  <SelectItem value={Gender.FEMALE}>
                    {dict.fields.gender.female}
                  </SelectItem>
                </SelectContent>
              </Select>
            </div>
            <div>
              <div>
                <Label className="text-right block mb-2">
                  {dict.fields.birthDate.modeLabel}{' '}
                  <span className="text-red-500">*</span>
                </Label>
                <RadioGroup
                  dir="rtl"
                  value={birthDateInputMode}
                  onValueChange={(value: 'date' | 'age') =>
                    setBirthDateInputMode(value)
                  }
                  className="flex space-x-4 rtl:space-x-reverse mb-3"
                >
                  <div className="flex items-center space-x-2 rtl:space-x-reverse">
                    <RadioGroupItem value="date" id="r-date" />
                    <Label htmlFor="r-date" className="cursor-pointer">
                      {dict.fields.birthDate.dateMode}
                    </Label>
                  </div>
                  <div className="flex items-center space-x-2 rtl:space-x-reverse">
                    <RadioGroupItem value="age" id="r-age" />
                    <Label htmlFor="r-age" className="cursor-pointer">
                      {dict.fields.birthDate.ageMode}
                    </Label>
                  </div>
                </RadioGroup>
              </div>
              {birthDateInputMode === 'date' ? (
                <div>
                  <Label htmlFor="birthDate" className="text-right block">
                    {dict.fields.birthDate.dateLabel}{' '}
                    <span className="text-red-500">*</span>
                  </Label>
                  <DatePicker
                    value={birthDate ? { from: birthDate } : undefined}
                    onChange={({ from }) => setBirthDate(from)}
                    isRange={false}
                    placeholder={dict.fields.birthDate.datePlaceholder}
                    className="w-full"
                  />
                </div>
              ) : (
                <div>
                  <Label htmlFor="ageInput" className="text-right block">
                    {dict.fields.birthDate.ageLabel}{' '}
                    <span className="text-red-500">*</span>
                  </Label>
                  <Input
                    id="ageInput"
                    type="number"
                    value={ageInput}
                    onChange={(e) => setAgeInput(e.target.value)}
                    placeholder={dict.fields.birthDate.agePlaceholder}
                    required={birthDateInputMode === 'age'}
                    dir="rtl"
                    min="1"
                    max="120"
                  />
                  <p className="text-xs text-gray-500 mt-1 text-right">
                    {dict.fields.birthDate.ageDescription}
                  </p>
                </div>
              )}
            </div>
          </div>
          <div>
            <Label htmlFor="manualEntryText" className="text-right block">
              {dict.fields.notes.label} <span className="text-red-500">*</span>
            </Label>
            <Textarea
              id="manualEntryText"
              value={manualEntryText}
              onChange={(e) => setManualEntryText(e.target.value)}
              placeholder={dict.fields.notes.placeholder}
              rows={6}
              required
              className="min-h-[100px]"
              dir="rtl"
            />
          </div>
          <div>
            <Label htmlFor="image-upload" className="text-right block">
              {dict.fields.photos.label.replace('{{max}}', String(MAX_IMAGES))}
            </Label>
            <div className="mt-2 flex items-center justify-center w-full">
              <label
                htmlFor="image-upload"
                className="flex flex-col items-center justify-center w-full h-32 border-2 border-gray-300 border-dashed rounded-lg cursor-pointer bg-gray-50 hover:bg-gray-100"
              >
                <div className="flex flex-col items-center justify-center pt-5 pb-6">
                  <UploadCloud className="w-8 h-8 mb-2 text-gray-500" />
                  <p className="mb-2 text-sm text-gray-500 text-center">
                    {dict.fields.photos.cta}
                  </p>
                  <p className="text-xs text-gray-500">
                    {dict.fields.photos.description.replace(
                      '{{maxSize}}',
                      String(MAX_IMAGE_SIZE_MB)
                    )}
                  </p>
                </div>
                <Input
                  id="image-upload"
                  type="file"
                  multiple
                  accept="image/png, image/jpeg, image/webp"
                  className="hidden"
                  onChange={handleImageChange}
                  disabled={images.length >= MAX_IMAGES}
                />
              </label>
            </div>
            {imagePreviews.length > 0 && (
              <div className="mt-4 grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-5 gap-4">
                {imagePreviews.map((preview, index) => (
                  <div key={index} className="relative group">
                    <Image
                      src={preview}
                      alt={dict.fields.photos.previewAlt.replace(
                        '{{index}}',
                        String(index + 1)
                      )}
                      width={100}
                      height={100}
                      className="rounded-md object-cover w-full aspect-square"
                      onLoad={() => URL.revokeObjectURL(preview)}
                    />
                    <Button
                      type="button"
                      variant="destructive"
                      size="icon"
                      className="absolute top-1 right-1 h-6 w-6 opacity-0 group-hover:opacity-100 transition-opacity p-0"
                      onClick={() => removeImage(index)}
                    >
                      <Trash2 className="h-3 w-3" />
                      <span className="sr-only">
                        {dict.fields.photos.removeLabel}
                      </span>
                    </Button>
                  </div>
                ))}
              </div>
            )}
          </div>
          <DialogFooter className="pt-4 sm:justify-start">
            <Button
              type="submit"
              disabled={isSaving}
              className="w-full sm:w-auto"
            >
              {isSaving ? (
                <Loader2 className="w-4 h-4 mr-2 animate-spin" />
              ) : (
                <UserPlus className="w-4 h-4 mr-2" />
              )}
              {isSaving ? dict.buttons.adding : dict.buttons.add}
            </Button>
            <DialogClose asChild>
              <Button
                variant="outline"
                type="button"
                className="w-full sm:w-auto mt-2 sm:mt-0"
              >
                <X className="w-4 h-4 mr-2" />
                {dict.buttons.cancel}
              </Button>
            </DialogClose>
          </DialogFooter>
        </form>
      </DialogContent>
    </Dialog>
  );
};
--- End of Content for AddManualCandidateDialog.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\new\dialogs\AiMatchAnalysisDialog.tsx
--------------------------------------------------------------------------------
Content:
// File: src/app/components/matchmaker/new/dialogs/AiMatchAnalysisDialog.tsx
'use client';
import React, { useState, useEffect, useMemo } from 'react';
import Image from 'next/image';
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription,
  DialogClose,
} from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { ScrollArea } from '@/components/ui/scroll-area';
import {
  X,
  Sparkles,
  CheckCircle,
  AlertTriangle,
  MessageSquare,
  Info,
  XCircle,
  Star,
  Cake,
  MapPin,
  BookMarked,
  Users,
} from 'lucide-react';
import type { Candidate } from '../types/candidates';
import { cn, getRelativeCloudinaryPath } from '@/lib/utils';
import { motion, AnimatePresence } from 'framer-motion';
import type { MatchmakerPageDictionary } from '@/types/dictionaries/matchmaker';

// --- Interfaces ---
interface AiAnalysis {
  overallScore: number;
  matchSummary: string;
  compatibilityPoints: {
    area: string;
    explanation: string;
    strength: 'HIGH' | 'MEDIUM' | 'LOW';
  }[];
  potentialChallenges: {
    area: string;
    explanation: string;
    severity: 'HIGH' | 'MEDIUM' | 'LOW';
  }[];
  suggestedConversationStarters: string[];
}
interface AiMatchAnalysisDialogProps {
  isOpen: boolean;
  onClose: () => void;
  targetCandidate: Candidate | null;
  comparisonCandidates: Candidate[];
  dict: MatchmakerPageDictionary['candidatesManager']['aiAnalysis'];
  locale: string; // <--- הוסף את השורה הזו
}

// --- Helper Functions ---
const getInitials = (firstName?: string, lastName?: string): string => {
  let initials = '';
  if (firstName && firstName.length > 0) initials += firstName[0];
  if (lastName && lastName.length > 0) initials += lastName[0];
  return initials.toUpperCase() || '?';
};
const calculateAge = (birthDate: Date | string): number => {
  if (!birthDate) return 0;
  const today = new Date();
  const birth = new Date(birthDate);
  if (isNaN(birth.getTime())) return 0;
  let age = today.getFullYear() - birth.getFullYear();
  const monthDiff = today.getMonth() - birth.getMonth();
  if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birth.getDate()))
    age--;
  return age > 0 ? age : 0;
};

// --- Sub-components ---
const MiniProfileHeader: React.FC<{
  candidate: Candidate;
  score?: number;
  isTarget?: boolean;
  dict: MatchmakerPageDictionary['candidatesManager']['aiAnalysis']['miniProfile'];
}> = ({ candidate, score, isTarget = false, dict }) => {
  const mainImage = candidate.images?.find((img) => img.isMain);
  const age = calculateAge(candidate.profile.birthDate);
  const initials = getInitials(candidate.firstName, candidate.lastName);
  return (
    <div className="p-4 rounded-t-lg bg-gradient-to-b from-slate-50 to-slate-100 border-b border-slate-200 text-center relative">
      <div className="relative w-24 h-24 mx-auto rounded-full overflow-hidden border-4 border-white shadow-lg ring-2 ring-offset-2 ring-cyan-400">
        {mainImage?.url ? (
          <Image
            src={getRelativeCloudinaryPath(mainImage.url)}
            alt={`Profile picture of ${candidate.firstName}`}
            layout="fill"
            className="object-cover"
            sizes="96px"
          />
        ) : (
          <div className="w-full h-full flex items-center justify-center bg-gradient-to-br from-slate-200 to-slate-300">
            <span className="text-4xl font-medium text-slate-500">
              {initials}
            </span>
          </div>
        )}
      </div>
      {!isTarget && typeof score === 'number' && (
        <Badge className="absolute top-4 left-4 bg-gradient-to-r from-teal-400 to-cyan-500 text-white border-0 shadow-lg px-3 py-1.5 text-sm font-bold flex items-center gap-1.5">
          <Sparkles className="w-4 h-4" />
          {dict.matchBadge.replace('{{score}}', String(score))}
        </Badge>
      )}
      {isTarget && (
        <Badge className="absolute top-4 right-4 bg-gradient-to-r from-blue-500 to-indigo-600 text-white border-0 shadow-lg px-3 py-1.5 text-sm font-bold flex items-center gap-1.5">
          <Star className="w-4 h-4" />
          {dict.targetBadge}
        </Badge>
      )}
      <h3 className="mt-3 text-lg font-bold text-slate-800">
        {candidate.firstName} {candidate.lastName}
      </h3>
      <div className="mt-2 flex justify-center items-center flex-wrap gap-x-3 gap-y-1 text-xs text-slate-600">
        <div className="flex items-center gap-1">
          <Cake className="w-3.5 h-3.5 text-slate-400" /> {age} {dict.years}
        </div>
        <div className="flex items-center gap-1">
          <MapPin className="w-3.5 h-3.5 text-slate-400" />{' '}
          {candidate.profile.city || dict.notSpecified}
        </div>
        <div className="flex items-center gap-1">
          <BookMarked className="w-3.5 h-3.5 text-slate-400" />{' '}
          {candidate.profile.religiousLevel || dict.notSpecified}
        </div>
      </div>
    </div>
  );
};
const AnalysisItem: React.FC<{
  icon: React.ElementType;
  iconColor: string;
  area: string;
  explanation: string;
}> = ({ icon: Icon, iconColor, area, explanation }) => (
  <div className="flex items-start gap-4 p-3 rounded-lg hover:bg-slate-50/70 transition-colors">
    <div
      className={cn(
        'mt-1 flex-shrink-0 rounded-full p-2 bg-opacity-10',
        iconColor.replace('text-', 'bg-')
      )}
    >
      <Icon className={cn('h-5 w-5', iconColor)} />
    </div>
    <div>
      <h4 className="font-semibold text-gray-800">{area}</h4>
      <p className="text-sm text-gray-600 leading-relaxed">{explanation}</p>
    </div>
  </div>
);
const ComparisonTable: React.FC<{
  target: Candidate;
  comparison: Candidate;
  dict: MatchmakerPageDictionary['candidatesManager']['aiAnalysis']['comparisonTable'];
  language: 'he' | 'en';
}> = ({ target, comparison, dict, language }) => {
  const fieldsToCompare = [
    {
      key: 'age',
      label: dict.fields.age,
      formatter: (c: Candidate) =>
        `${calculateAge(c.profile.birthDate)}${
          c.profile.birthDateIsApproximate ? ` ${dict.fields.ageApprox}` : ''
        }`,
    },
    {
      key: 'city',
      label: dict.fields.city,
      formatter: (c: Candidate) => c.profile.city || 'לא צוין',
    },
    {
      key: 'maritalStatus',
      label: dict.fields.maritalStatus,
      formatter: (c: Candidate) => c.profile.maritalStatus || 'לא צוין',
    },
    {
      key: 'religiousLevel',
      label: dict.fields.religiousLevel,
      formatter: (c: Candidate) => c.profile.religiousLevel || 'לא צוין',
    },
    {
      key: 'occupation',
      label: dict.fields.occupation,
      formatter: (c: Candidate) => c.profile.occupation || 'לא צוין',
    },
    {
      key: 'education',
      label: dict.fields.education,
      formatter: (c: Candidate) => c.profile.education || 'לא צוין',
    },
  ];
  return (
    <div className="overflow-x-auto border rounded-lg">
      <table
        className={cn(
          'w-full text-sm border-collapse',
          language === 'he' ? 'text-right' : 'text-left'
        )}
      >
        <thead>
          <tr className="bg-slate-50">
            <th className="p-3 font-semibold text-slate-600 border-b border-slate-200">
              {dict.criterion}
            </th>
            <th className="p-3 font-semibold text-slate-600 border-b border-slate-200 text-center">
              {target.firstName}
            </th>
            <th className="p-3 font-semibold text-slate-600 border-b border-slate-200 text-center">
              {comparison.firstName}
            </th>
          </tr>
        </thead>
        <tbody>
          {fieldsToCompare.map((field, index) => (
            <tr
              key={field.key}
              className={index % 2 === 0 ? 'bg-white' : 'bg-slate-50/50'}
            >
              <td className="p-3 font-medium text-slate-500 border-b border-slate-200">
                {field.label}
              </td>
              <td className="p-3 text-slate-700 border-b border-slate-200 text-center">
                {field.formatter(target)}
              </td>
              <td className="p-3 text-slate-700 border-b border-slate-200 text-center">
                {field.formatter(comparison)}
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};
const AnalysisSkeleton: React.FC = () => (
  <div className="space-y-6 p-4 animate-pulse">
    <div className="p-4 bg-gray-100 rounded-lg">
      <div className="h-20 bg-gray-200 rounded-md"></div>
    </div>
    <div className="space-y-4">
      <div className="h-5 bg-gray-200 rounded-md w-1/3"></div>
      <div className="flex gap-4">
        <div className="rounded-full bg-gray-200 h-10 w-10"></div>
        <div className="flex-1 space-y-2 py-1">
          <div className="h-4 bg-gray-200 rounded w-full"></div>
          <div className="h-3 bg-gray-300 rounded w-5/6"></div>
        </div>
      </div>
      <div className="flex gap-4">
        <div className="rounded-full bg-gray-200 h-10 w-10"></div>
        <div className="flex-1 space-y-2 py-1">
          <div className="h-4 bg-gray-200 rounded w-full"></div>
          <div className="h-3 bg-gray-300 rounded w-4/6"></div>
        </div>
      </div>
    </div>
  </div>
);
const DialogBody: React.FC<AiMatchAnalysisDialogProps> = ({
  isOpen,
  locale,
  onClose,
  targetCandidate,
  comparisonCandidates,
  dict,
}) => {
  const [activeComparisonId, setActiveComparisonId] = useState<string | null>(
    null
  );
  const [analyses, setAnalyses] = useState<
    Record<string, AiAnalysis | 'error' | 'loading'>
  >({});
  const [language, setLanguage] = useState<'he' | 'en'>(
    locale === 'he' ? 'he' : 'en'
  );
  const [isMobile, setIsMobile] = useState(false);
  useEffect(() => {
    const checkMobile = () => setIsMobile(window.innerWidth < 768);
    checkMobile();
    window.addEventListener('resize', checkMobile);
    return () => window.removeEventListener('resize', checkMobile);
  }, []);
  const activeComparisonCandidate = useMemo(
    () => comparisonCandidates.find((c) => c.id === activeComparisonId),
    [activeComparisonId, comparisonCandidates]
  );
  const activeAnalysis = useMemo(
    () => (activeComparisonId ? analyses[activeComparisonId] || null : null),
    [activeComparisonId, analyses]
  );
  useEffect(() => {
    if (
      isOpen &&
      comparisonCandidates.length > 0 &&
      !comparisonCandidates.some((c) => c.id === activeComparisonId)
    ) {
      setActiveComparisonId(comparisonCandidates[0].id);
    }
  }, [isOpen, comparisonCandidates, activeComparisonId]);
  useEffect(() => {
    if (
      isOpen &&
      targetCandidate &&
      activeComparisonId &&
      analyses[activeComparisonId] === undefined
    ) {
      const fetchAnalysis = async () => {
        setAnalyses((prev) => ({ ...prev, [activeComparisonId]: 'loading' }));
        try {
          const response = await fetch('/api/ai/generate-rationale', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
              userId1: targetCandidate.id,
              userId2: activeComparisonId,
              language: language,
            }),
          });
          const data = await response.json();
          if (response.ok && data.success) {
            setAnalyses((prev) => ({
              ...prev,
              [activeComparisonId]: data.analysis,
            }));
          } else {
            throw new Error(data.error || 'Failed to fetch analysis');
          }
        } catch (e) {
          console.error(`Failed to get analysis for ${activeComparisonId}:`, e);
          setAnalyses((prev) => ({ ...prev, [activeComparisonId]: 'error' }));
        }
      };
      fetchAnalysis();
    }
  }, [isOpen, targetCandidate, activeComparisonId, language, analyses]);
  const handleLanguageChange = (newLang: 'he' | 'en') => {
    if (newLang !== language) {
      setLanguage(newLang);
      setAnalyses({});
    }
  };
  if (!targetCandidate) return null;
  return (
    <DialogContent
      className="max-w-6xl w-full h-[95vh] flex flex-col p-0 overflow-hidden"
      dir={language === 'he' ? 'rtl' : 'ltr'}
    >
      <DialogClose
        asChild
        className={cn(
          'absolute top-3 z-50',
          language === 'he' ? 'left-3' : 'right-3'
        )}
      >
        <Button variant="ghost" size="icon" className="rounded-full">
          <X className="h-5 w-5" />
        </Button>
      </DialogClose>
      <div className="flex-1 flex flex-col md:flex-row min-h-0">
        {isMobile ? (
          <div className="p-4 border-b md:hidden">
            <Select
              value={activeComparisonId || ''}
              onValueChange={setActiveComparisonId}
            >
              <SelectTrigger className="w-full">
                <SelectValue
                  placeholder={dict.header.languageSelectPlaceholder}
                />
              </SelectTrigger>
              <SelectContent>
                {comparisonCandidates.map((c) => (
                  <SelectItem key={c.id} value={c.id}>
                    {c.firstName} {c.lastName}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
          </div>
        ) : (
          <aside
            className={cn(
              'w-1/4 bg-slate-50/50 flex flex-col flex-shrink-0',
              language === 'he' ? 'border-l' : 'border-r'
            )}
          >
            <h3 className="p-3 text-sm font-semibold text-slate-600 border-b">
              {dict.sidebar.title.replace(
                '{{count}}',
                String(comparisonCandidates.length)
              )}
            </h3>
            <ScrollArea className="flex-1">
              {comparisonCandidates.map((candidate) => {
                const mainImageUrl = candidate.images?.find(
                  (img) => img.isMain
                )?.url;
                return (
                  <button
                    key={candidate.id}
                    onClick={() => setActiveComparisonId(candidate.id)}
                    className={cn(
                      'w-full p-3 flex items-center gap-3 border-b border-slate-200/60 hover:bg-slate-100 transition-colors',
                      language === 'he' ? 'text-right' : 'text-left',
                      activeComparisonId === candidate.id &&
                        'bg-cyan-50 border-cyan-500 font-semibold',
                      activeComparisonId === candidate.id &&
                        (language === 'he' ? 'border-r-4' : 'border-l-4')
                    )}
                  >
                    <div className="relative w-10 h-10 rounded-full overflow-hidden flex-shrink-0 bg-gray-200">
                      {mainImageUrl ? (
                        <Image
                          src={getRelativeCloudinaryPath(mainImageUrl)}
                          alt={candidate.firstName}
                          layout="fill"
                          className="object-cover"
                          sizes="40px"
                        />
                      ) : (
                        <div className="w-full h-full flex items-center justify-center">
                          <span className="text-sm font-bold text-gray-500">
                            {getInitials(
                              candidate.firstName,
                              candidate.lastName
                            )}
                          </span>
                        </div>
                      )}
                    </div>
                    <div className="flex-1 min-w-0">
                      <p className="truncate text-sm text-slate-800">
                        {candidate.firstName} {candidate.lastName}
                      </p>
                      <p className="text-xs text-slate-500">
                        {calculateAge(candidate.profile.birthDate)} |{' '}
                        {candidate.profile.city}
                      </p>
                    </div>
                    {analyses[candidate.id] &&
                      analyses[candidate.id] !== 'error' &&
                      analyses[candidate.id] !== 'loading' && (
                        <Badge
                          variant="secondary"
                          className="bg-teal-100 text-teal-800"
                        >
                          {(analyses[candidate.id] as AiAnalysis).overallScore}%
                        </Badge>
                      )}
                  </button>
                );
              })}
            </ScrollArea>
          </aside>
        )}
        <main className="flex-1 flex flex-col min-h-0 bg-white">
          {!activeComparisonCandidate ? (
            <div className="flex-1 flex flex-col items-center justify-center text-center p-6 text-gray-500">
              <Users className="w-16 h-16 text-gray-300 mb-4" />
              <h3 className="text-lg font-semibold">
                {dict.main.selectCandidate.title}
              </h3>
              <p className="max-w-xs">
                {dict.main.selectCandidate.description}
              </p>
            </div>
          ) : (
            <>
              <div className="grid grid-cols-1 md:grid-cols-2 flex-shrink-0">
                <MiniProfileHeader
                  candidate={targetCandidate}
                  isTarget
                  dict={dict.miniProfile}
                />
                <MiniProfileHeader
                  candidate={activeComparisonCandidate}
                  score={(activeAnalysis as AiAnalysis)?.overallScore}
                  dict={dict.miniProfile}
                />
              </div>
              <Tabs
                defaultValue="summary"
                className="flex-1 flex flex-col min-h-0"
              >
                <TabsList className="mx-4 mt-4 bg-slate-100 p-1 rounded-lg">
                  <TabsTrigger value="summary">{dict.tabs.summary}</TabsTrigger>
                  <TabsTrigger value="challenges">
                    {dict.tabs.challenges}
                  </TabsTrigger>
                  <TabsTrigger value="comparison">
                    {dict.tabs.comparison}
                  </TabsTrigger>
                  <TabsTrigger value="conversation">
                    {dict.tabs.conversation}
                  </TabsTrigger>
                </TabsList>
                <ScrollArea className="flex-1">
                  <AnimatePresence mode="wait">
                    <motion.div
                      key={activeComparisonId}
                      initial={{ opacity: 0, y: 10 }}
                      animate={{ opacity: 1, y: 0 }}
                      exit={{ opacity: 0, y: -10 }}
                      transition={{ duration: 0.2 }}
                      className="p-4 md:p-6"
                    >
                      {activeAnalysis === 'loading' && <AnalysisSkeleton />}
                      {activeAnalysis === 'error' && (
                        <div className="text-center py-10">
                          <XCircle className="w-12 h-12 text-red-400 mx-auto mb-4" />
                          <h3 className="font-semibold text-xl text-red-600">
                            {dict.main.error.title}
                          </h3>
                          <p className="text-gray-500 mt-2">
                            {dict.main.error.description}
                          </p>
                        </div>
                      )}
                      {activeAnalysis &&
                        activeAnalysis !== 'error' &&
                        activeAnalysis !== 'loading' && (
                          <>
                            <TabsContent
                              value="summary"
                              className="space-y-6 mt-0"
                            >
                              <div className="p-4 bg-slate-50/70 rounded-lg border border-slate-200">
                                <h3 className="font-semibold text-gray-800 mb-2 flex items-center gap-2">
                                  <Info className="w-5 h-5 text-blue-500" />
                                  {dict.analysis.summaryTitle}
                                </h3>
                                <p className="text-sm text-gray-600 leading-relaxed">
                                  {(activeAnalysis as AiAnalysis).matchSummary}
                                </p>
                              </div>
                              <div>
                                <h3 className="font-semibold text-gray-800 mb-3 flex items-center gap-2">
                                  <CheckCircle className="w-5 h-5 text-green-500" />
                                  {dict.analysis.strengthsTitle}
                                </h3>
                                <div className="space-y-4">
                                  {(
                                    activeAnalysis as AiAnalysis
                                  ).compatibilityPoints.map((point) => (
                                    <AnalysisItem
                                      key={point.area}
                                      icon={CheckCircle}
                                      iconColor="text-green-500"
                                      {...point}
                                    />
                                  ))}
                                </div>
                              </div>
                            </TabsContent>
                            <TabsContent
                              value="challenges"
                              className="space-y-6 mt-0"
                            >
                              <div>
                                <h3 className="font-semibold text-gray-800 mb-3 flex items-center gap-2">
                                  <AlertTriangle className="w-5 h-5 text-amber-500" />
                                  {dict.analysis.challengesTitle}
                                </h3>
                                <div className="space-y-4">
                                  {(
                                    activeAnalysis as AiAnalysis
                                  ).potentialChallenges.map((challenge) => (
                                    <AnalysisItem
                                      key={challenge.area}
                                      icon={AlertTriangle}
                                      iconColor="text-amber-500"
                                      {...challenge}
                                    />
                                  ))}
                                </div>
                              </div>
                            </TabsContent>
                            <TabsContent value="comparison" className="mt-0">
                              <ComparisonTable
                                target={targetCandidate}
                                comparison={activeComparisonCandidate}
                                dict={dict.comparisonTable}
                                language={language}
                              />
                            </TabsContent>
                            <TabsContent
                              value="conversation"
                              className="space-y-4 mt-0"
                            >
                              <h3 className="font-semibold text-gray-800 mb-3 flex items-center gap-2">
                                <MessageSquare className="w-5 h-5 text-indigo-500" />
                                {dict.analysis.conversationStartersTitle}
                              </h3>
                              <ul className="space-y-3 list-inside">
                                {(
                                  activeAnalysis as AiAnalysis
                                ).suggestedConversationStarters.map(
                                  (starter, index) => (
                                    <li
                                      key={index}
                                      className="flex items-start gap-2 p-2 rounded-md hover:bg-indigo-50/50"
                                    >
                                      <MessageSquare className="w-4 h-4 text-indigo-400 mt-1 flex-shrink-0" />
                                      <span className="text-sm text-gray-700">
                                        {starter}
                                      </span>
                                    </li>
                                  )
                                )}
                              </ul>
                            </TabsContent>
                          </>
                        )}
                    </motion.div>
                  </AnimatePresence>
                </ScrollArea>
              </Tabs>
            </>
          )}
        </main>
      </div>
    </DialogContent>
  );
};
export const AiMatchAnalysisDialog = (props: AiMatchAnalysisDialogProps) => {
  const { isOpen, onClose } = props;
  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      {isOpen && <DialogBody {...props} />}
    </Dialog>
  );
};
--- End of Content for AiMatchAnalysisDialog.tsx ---

================================================================================
Directory: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\new\hooks
================================================================================

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\new\hooks\filterUtils
--------------------------------------------------------------------------------
Content:
--- End of Content for filterUtils ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\new\hooks\useCandidates.ts
--------------------------------------------------------------------------------
Content:
import { useState, useEffect, useMemo, useCallback } from 'react';
import Papa from 'papaparse';
import type { Candidate, CandidatesFilter } from '../types/candidates';
import type { CandidateProfile } from '../types/candidates';
import { Dispatch, SetStateAction } from 'react';

export interface UseCandidatesReturn {
  loading: boolean;
  error: string | null;
  candidates: Candidate[];
  maleCandidates: Candidate[];
  femaleCandidates: Candidate[];
  filteredCandidates: Candidate[];
  filters: CandidatesFilter;
  setFilters: Dispatch<SetStateAction<CandidatesFilter>>;
  refresh: () => Promise<void>;
  totalCount: number;
  filteredCount: number;
  maleCount: number;
  femaleCount: number;
  searchResults: {
    term: string;
    count: number;
    male: number;
    female: number;
  } | null;
  exportCandidates: (candidates: Candidate[], filters: CandidatesFilter) => Promise<void>;
  updateCandidate: (id: string, updates: Partial<CandidateProfile>) => Promise<void>;
  sorting: {
    field: string;
    direction: 'asc' | 'desc';
  };
  setSorting: (field: string, direction: 'asc' | 'desc') => void;
  searchSuggestions: (term: string) => Promise<Candidate[]>;
}

export const useCandidates = (initialFilters: CandidatesFilter = {}): UseCandidatesReturn => {
  // Base states
  const [candidates, setCandidates] = useState<Candidate[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [filters, setFilters] = useState<CandidatesFilter>(initialFilters);
  const [searchResults, setSearchResults] = useState<{
    term: string;
    count: number;
    male: number;
    female: number;
  } | null>(null);
  const [sorting, setSortingState] = useState<{
    field: string;
    direction: 'asc' | 'desc';
  }>({
    field: 'lastActive',
    direction: 'desc',
  });

  // Helper function to calculate age
  const calculateAge = useCallback((birthDate: Date): number => {
    const today = new Date();
    const birth = new Date(birthDate);
    let age = today.getFullYear() - birth.getFullYear();
    const monthDiff = today.getMonth() - birth.getMonth();
    
    if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birth.getDate())) {
      age--;
    }
    return age;
  }, []);

  // Fetch candidates data
  const fetchCandidates = async () => {
    try {
      setLoading(true);
      setError(null);
      
      const response = await fetch('/api/matchmaker/candidates');
      if (!response.ok) {
        throw new Error(await response.text());
      }
      
      const data = await response.json();
     
      
      if (!data.success) {
        throw new Error(data.error || 'Failed to load candidates');
      }
  
      setCandidates(data.clients);
    } catch (err) {
      setError(err instanceof Error ? err.message : 'An unexpected error occurred');
      console.error('Error fetching candidates:', err);
    } finally {
      setLoading(false);
    }
  };

  // Set sorting field and direction
  const setSorting = useCallback((field: string, direction: 'asc' | 'desc') => {
    setSortingState({ field, direction });
  }, []);

  // Search suggestions based on a term
  const searchSuggestions = useCallback(async (term: string): Promise<Candidate[]> => {
    if (!term || term.length < 2) return [];
    
    // Local search implementation for quick response
    const searchTerm = term.toLowerCase();
    return candidates.filter(candidate => {
      const searchableText = `
        ${candidate.firstName} 
        ${candidate.lastName} 
        ${candidate.profile.occupation || ''} 
        ${candidate.profile.city || ''}
        ${candidate.profile.religiousLevel || ''}
      `.toLowerCase();
      
      return searchableText.includes(searchTerm);
    }).slice(0, 10);
    
    // Alternatively, you can implement an API call for server-side search
    // if the dataset is very large
  }, [candidates]);

  const sortCandidates = useCallback((candidatesList: Candidate[], field: string, direction: 'asc' | 'desc') => {
    return [...candidatesList].sort((a, b) => {
      let valueA, valueB;
      
      switch (field) {
        case 'name':
          valueA = `${a.firstName} ${a.lastName}`.toLowerCase();
          valueB = `${b.firstName} ${b.lastName}`.toLowerCase();
          break;
        case 'age':
          valueA = calculateAge(a.profile.birthDate);
          valueB = calculateAge(b.profile.birthDate);
          break;
        case 'city':
          valueA = (a.profile.city || '').toLowerCase();
          valueB = (b.profile.city || '').toLowerCase();
          break;
        case 'religiousLevel':
          valueA = (a.profile.religiousLevel || '').toLowerCase();
          valueB = (b.profile.religiousLevel || '').toLowerCase();
          break;
        case 'lastActive':
          valueA = a.profile.lastActive ? new Date(a.profile.lastActive).getTime() : 0;
          valueB = b.profile.lastActive ? new Date(b.profile.lastActive).getTime() : 0;
          break;
        case 'registrationDate':
          valueA = new Date(a.createdAt).getTime();
          valueB = new Date(b.createdAt).getTime();
          break;
        case 'height':
          valueA = a.profile.height || 0;
          valueB = b.profile.height || 0;
          break;
        default:
          valueA = 0;
          valueB = 0;
      }
      
      if (valueA < valueB) return direction === 'asc' ? -1 : 1;
      if (valueA > valueB) return direction === 'asc' ? 1 : -1;
      return 0;
    });
  }, [calculateAge]);
  
  // פונקציה לבדיקה אם מועמד עומד בקריטריוני חיפוש
  const checkSearchMatch = useCallback((candidate: Candidate, searchTerm: string): boolean => {
    if (!searchTerm) return true;
    
    // נרמול החיפוש
    const normalizedTerm = searchTerm.toLowerCase().trim();
    if (!normalizedTerm) return true;
    
    // בדיקת התאמה בשדות השונים
    const fullName = `${candidate.firstName} ${candidate.lastName}`.toLowerCase();
    const city = (candidate.profile.city || '').toLowerCase();
    const occupation = (candidate.profile.occupation || '').toLowerCase();
    const religiousLevel = (candidate.profile.religiousLevel || '').toLowerCase();
    
    return (
      fullName.includes(normalizedTerm) || 
      city.includes(normalizedTerm) || 
      occupation.includes(normalizedTerm) || 
      religiousLevel.includes(normalizedTerm)
    );
  }, []);

  // בקובץ useCandidates.ts - לעדכן את החלק של filteredCandidates
  const filteredCandidates = useMemo(() => {
    console.log("Filtering candidates with filters:", filters);
    
    // אם הסינון הנפרד מופעל, נשתמש בפילטרים הכלליים בלבד ללא מגדר
    const currentFilters = filters.separateFiltering 
      ? { ...filters, gender: undefined }
      : filters;

    let results = candidates.filter(candidate => {
      // סינון לפי מגדר רק אם הסינון הנפרד כבוי
      if (!filters.separateFiltering && currentFilters.gender && candidate.profile.gender !== currentFilters.gender) {
        return false;
      }
      if (currentFilters.source && candidate.source !== currentFilters.source) {
    return false;
}
      // בדיקת גיל מותאמת
      if (currentFilters.ageRange) {
        try {
          const age = calculateAge(candidate.profile.birthDate);
          if (age < currentFilters.ageRange.min || age > currentFilters.ageRange.max) {
            return false;
          }
        } catch (err) {
          console.error("Error calculating age for candidate:", candidate.id, err);
        }
      }
      
      // סינון סטטוס משתמש
      if (filters.userStatus && candidate.status !== filters.userStatus) {
        return false;
      }
   // סינון סטטוס משתמש
      if (filters.userStatus && candidate.status !== filters.userStatus) {
        return false;
      }
      // סינון סטטוס זמינות - ודא המרה נכונה של הטיפוס
      if (filters.availabilityStatus && 
          candidate.profile.availabilityStatus !== filters.availabilityStatus) {
        return false;
      }
      
      // בדיקת גובה
      if (filters.heightRange && candidate.profile.height) {
        if (
          candidate.profile.height < filters.heightRange.min || 
          candidate.profile.height > filters.heightRange.max
        ) {
          return false;
        }
      }

      // בדיקת רמת דתיות
      if (filters.religiousLevel && candidate.profile.religiousLevel !== filters.religiousLevel) {
        return false;
      }

      // בדיקת ערים
      if (filters.cities?.length && candidate.profile.city) {
        if (!filters.cities.includes(candidate.profile.city)) {
          return false;
        }
      }

      // בדיקת תחומי עיסוק
      if (filters.occupations?.length && candidate.profile.occupation) {
        if (!filters.occupations.includes(candidate.profile.occupation)) {
          return false;
        }
      }

      // בדיקת השכלה
      if (filters.educationLevel && candidate.profile.education !== filters.educationLevel) {
        return false;
      }

      // בדיקת מצב משפחתי
      if (filters.maritalStatus && candidate.profile.maritalStatus !== filters.maritalStatus) {
        return false;
      }

      // בדיקת אימות
      if (filters.isVerified !== undefined && candidate.isVerified !== filters.isVerified) {
        return false;
      }

      // בדיקת המלצות
   
      // בדיקת פעילות אחרונה
      if (filters.lastActiveDays && candidate.profile.lastActive) {
        const lastActive = new Date(candidate.profile.lastActive);
        const daysDiff = (new Date().getTime() - lastActive.getTime()) / (1000 * 60 * 60 * 24);
        if (daysDiff > filters.lastActiveDays) {
          return false;
        }
      }

      // בדיקת שלמות פרופיל
      if (filters.isProfileComplete !== undefined && 
          candidate.isProfileComplete !== filters.isProfileComplete) {
        return false;
      }

      // בדיקת חיפוש כללי - רק אם אין סינון נפרד
      if (!filters.separateFiltering && currentFilters.searchQuery) {
        return checkSearchMatch(candidate, currentFilters.searchQuery);
      }

      return true;
    });

    // מיון התוצאות
    if (sorting.field && sorting.direction) {
      results = sortCandidates(results, sorting.field, sorting.direction);
    }

    return results;
  }, [candidates, filters, calculateAge, sorting.field, sorting.direction, sortCandidates, checkSearchMatch]);

  // חלוקה למועמדים ומועמדות עם תמיכה בחיפוש נפרד
  const maleCandidates = useMemo(() => {
    // בסינון נפרד, נבדוק גם את החיפוש הספציפי לגברים
      return filteredCandidates
        .filter(c => c.profile.gender === 'MALE')
        .filter(candidate => {
          // בדיקת פילטרים ספציפיים לגברים
          if (filters.maleFilters) {
            // בדיקת גיל
            if (filters.maleFilters.ageRange) {
              const age = calculateAge(candidate.profile.birthDate);
              if (age < filters.maleFilters.ageRange.min || age > filters.maleFilters.ageRange.max) {
                return false;
              }
            }
            
            // בדיקת גובה
            if (filters.maleFilters.heightRange && candidate.profile.height) {
              if (
                candidate.profile.height < filters.maleFilters.heightRange.min || 
                candidate.profile.height > filters.maleFilters.heightRange.max
              ) {
                return false;
              }
            }

            // בדיקת רמת דתיות
            if (filters.maleFilters.religiousLevel && candidate.profile.religiousLevel !== filters.maleFilters.religiousLevel) {
              return false;
            }

            // בדיקת ערים
            if (filters.maleFilters.cities?.length && candidate.profile.city) {
              if (!filters.maleFilters.cities.includes(candidate.profile.city)) {
                return false;
              }
            }

            // בדיקת תחומי עיסוק
            if (filters.maleFilters.occupations?.length && candidate.profile.occupation) {
              if (!filters.maleFilters.occupations.includes(candidate.profile.occupation)) {
                return false;
              }
            }

            // בדיקת השכלה
            if (filters.maleFilters.educationLevel && candidate.profile.education !== filters.maleFilters.educationLevel) {
              return false;
            }

            // בדיקת מצב משפחתי
            if (filters.maleFilters.maritalStatus && candidate.profile.maritalStatus !== filters.maleFilters.maritalStatus) {
              return false;
            }

            // בדיקת אימות
            if (filters.maleFilters.isVerified !== undefined && candidate.isVerified !== filters.maleFilters.isVerified) {
              return false;
            }

    

            // בדיקת פעילות אחרונה
            if (filters.maleFilters.lastActiveDays && candidate.profile.lastActive) {
              const lastActive = new Date(candidate.profile.lastActive);
              const daysDiff = (new Date().getTime() - lastActive.getTime()) / (1000 * 60 * 60 * 24);
              if (daysDiff > filters.maleFilters.lastActiveDays) {
                return false;
              }
            }

            // בדיקת שלמות פרופיל
            if (filters.maleFilters.isProfileComplete !== undefined && 
                candidate.isProfileComplete !== filters.maleFilters.isProfileComplete) {
              return false;
            }

            // בדיקת חיפוש ספציפי לפילטרים של הגברים
            if (filters.maleFilters.searchQuery) {
              return checkSearchMatch(candidate, filters.maleFilters.searchQuery);
            }
          }
          
          // בדיקת חיפוש נפרד לגברים
          if (filters.maleSearchQuery) {
            return checkSearchMatch(candidate, filters.maleSearchQuery);
          }
          
          return true;
        });
    
      }, [filteredCandidates, filters.maleFilters, filters.maleSearchQuery, calculateAge, checkSearchMatch]);
  const femaleCandidates = useMemo(() => {
    // בסינון נפרד, נבדוק גם את החיפוש הספציפי לנשים

      return filteredCandidates
        .filter(c => c.profile.gender === 'FEMALE')
        .filter(candidate => {
          // בדיקת פילטרים ספציפיים לנשים
          if (filters.femaleFilters) {
            // בדיקת גיל
            if (filters.femaleFilters.ageRange) {
              const age = calculateAge(candidate.profile.birthDate);
              if (age < filters.femaleFilters.ageRange.min || age > filters.femaleFilters.ageRange.max) {
                return false;
              }
            }
            
            // בדיקת גובה
            if (filters.femaleFilters.heightRange && candidate.profile.height) {
              if (
                candidate.profile.height < filters.femaleFilters.heightRange.min || 
                candidate.profile.height > filters.femaleFilters.heightRange.max
              ) {
                return false;
              }
            }

            // בדיקת רמת דתיות
            if (filters.femaleFilters.religiousLevel && candidate.profile.religiousLevel !== filters.femaleFilters.religiousLevel) {
              return false;
            }

            // בדיקת ערים
            if (filters.femaleFilters.cities?.length && candidate.profile.city) {
              if (!filters.femaleFilters.cities.includes(candidate.profile.city)) {
                return false;
              }
            }

            // בדיקת תחומי עיסוק
            if (filters.femaleFilters.occupations?.length && candidate.profile.occupation) {
              if (!filters.femaleFilters.occupations.includes(candidate.profile.occupation)) {
                return false;
              }
            }

            // בדיקת השכלה
            if (filters.femaleFilters.educationLevel && candidate.profile.education !== filters.femaleFilters.educationLevel) {
              return false;
            }

            // בדיקת מצב משפחתי
            if (filters.femaleFilters.maritalStatus && candidate.profile.maritalStatus !== filters.femaleFilters.maritalStatus) {
              return false;
            }

            // בדיקת אימות
            if (filters.femaleFilters.isVerified !== undefined && candidate.isVerified !== filters.femaleFilters.isVerified) {
              return false;
            }

       

            // בדיקת פעילות אחרונה
            if (filters.femaleFilters.lastActiveDays && candidate.profile.lastActive) {
              const lastActive = new Date(candidate.profile.lastActive);
              const daysDiff = (new Date().getTime() - lastActive.getTime()) / (1000 * 60 * 60 * 24);
              if (daysDiff > filters.femaleFilters.lastActiveDays) {
                return false;
              }
            }

            // בדיקת שלמות פרופיל
            if (filters.femaleFilters.isProfileComplete !== undefined && 
                candidate.isProfileComplete !== filters.femaleFilters.isProfileComplete) {
              return false;
            }

            // בדיקת חיפוש ספציפי לפילטרים של הנשים
            if (filters.femaleFilters.searchQuery) {
              return checkSearchMatch(candidate, filters.femaleFilters.searchQuery);
            }
          }
          
          // בדיקת חיפוש נפרד לנשים
          if (filters.femaleSearchQuery) {
            return checkSearchMatch(candidate, filters.femaleSearchQuery);
          }
          
          return true;
        });
      }, [filteredCandidates, filters.femaleFilters, filters.femaleSearchQuery, calculateAge, checkSearchMatch]);
  // עדכון תוצאות החיפוש
  useEffect(() => {
    if (!filters.separateFiltering && filters.searchQuery) {
      // מצב חיפוש רגיל
      setSearchResults({
        term: filters.searchQuery,
        count: filteredCandidates.length,
        male: maleCandidates.length,
        female: femaleCandidates.length
      });
    } else if (filters.separateFiltering) {
      // במצב חיפוש נפרד, לא מציגים תוצאות חיפוש מאוחדות
      setSearchResults(null);
    } else {
      setSearchResults(null);
    }
  }, [filteredCandidates, maleCandidates, femaleCandidates, filters.searchQuery, filters.separateFiltering]);

  // Export candidates to CSV
  const exportCandidates = async (
    candidates: Candidate[], 
    filters: CandidatesFilter
  ): Promise<void> => {
    try {
      // Prepare data for export
      const exportData = candidates.map(candidate => ({
        'שם פרטי': candidate.firstName,
        'שם משפחה': candidate.lastName,
        'גיל': calculateAge(candidate.profile.birthDate),
        'מגדר': candidate.profile.gender === 'MALE' ? 'זכר' : 'נקבה',
        'עיר': candidate.profile.city || '',
        'גובה': candidate.profile.height || '',
        'רמת דתיות': candidate.profile.religiousLevel || '',
        'תעסוקה': candidate.profile.occupation || '',
        'השכלה': candidate.profile.education || '',
        'מצב משפחתי': candidate.profile.maritalStatus || '',
        'סטטוס זמינות': candidate.profile.availabilityStatus || '',
        'מאומת': candidate.isVerified ? 'כן' : 'לא',
        'פעילות אחרונה': candidate.profile.lastActive 
          ? new Date(candidate.profile.lastActive).toLocaleDateString('he-IL')
          : ''
      }));

      // Add filter info to filename
      const filenameSegments = ['candidates'];
      
      if (filters.gender) {
        filenameSegments.push(filters.gender === 'MALE' ? 'male' : 'female');
      }
      
      if (filters.religiousLevel) {
        filenameSegments.push(filters.religiousLevel.replace(/ /g, '-'));
      }
      
      if (filters.cities?.length === 1) {
        filenameSegments.push(filters.cities[0].replace(/ /g, '-'));
      }
      
      // Convert to CSV
      const csv = Papa.unparse(exportData);
      
      // Create and download file
      const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });
      const link = document.createElement('a');
      const url = URL.createObjectURL(blob);
      const timestamp = new Date().toISOString().split('T')[0];
      
      link.setAttribute('href', url);
      link.setAttribute('download', `${filenameSegments.join('_')}_${timestamp}.csv`);
      document.body.appendChild(link);
      
      link.click();
      document.body.removeChild(link);
    } catch (error) {
      console.error('Error exporting candidates:', error);
      throw new Error('Failed to export candidates');
    }
  };

  // Update candidate
  const updateCandidate = async (
    id: string, 
    updates: Partial<CandidateProfile>
  ): Promise<void> => {
    try {
      const response = await fetch(`/api/matchmaker/candidates/${id}`, {
        method: 'PATCH',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(updates)
      });
      
      if (!response.ok) {
        throw new Error('Failed to update candidate');
      }
      
      // Refresh candidates list after update
      await fetchCandidates();
    } catch (error) {
      console.error('Error updating candidate:', error);
      throw error;
    }
  };

  // Load candidates on mount
  useEffect(() => {
    fetchCandidates();
  }, []);

  // Return interface
  return {
    loading,
    error,
    candidates,
    filteredCandidates,
    maleCandidates,
    femaleCandidates,
    filters,
    setFilters,
    refresh: fetchCandidates,
    totalCount: candidates.length,
    filteredCount: filteredCandidates.length,
    maleCount: maleCandidates.length,
    femaleCount: femaleCandidates.length,
    searchResults,
    exportCandidates,
    updateCandidate,
    sorting,
    setSorting,
    searchSuggestions
  };
};
--- End of Content for useCandidates.ts ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\new\hooks\useFilterLogic.ts
--------------------------------------------------------------------------------
Content:
// src/app/components/matchmaker/new/hooks/useFilterLogic.ts - גרסה משופרת

import { useState, useEffect, useMemo, useCallback } from 'react';
import type {
  FilterState,
  SavedFilter,
  FilterOption,
  FilterChangeHandler,  
} from '../types/filters';
import { DEFAULT_FILTER_STATE } from '../types/filters'; 

type SavedFilterFromStorage = Omit<SavedFilter, 'createdAt'> & {
  createdAt: string;
};

interface SearchHistoryItemFromStorage {
  query: string;
  timestamp: string;
}
interface UseFilterLogicProps {
  onFilterChange?: FilterChangeHandler;
  defaultFilters?: Partial<FilterState>;
  localStorageKey?: string;
}

export const useFilterLogic = ({
  onFilterChange,
  defaultFilters = {},
  localStorageKey = 'candidateFilters'
}: UseFilterLogicProps = {}) => {
  // States
  const [filters, setFilters] = useState<FilterState>({
    ...DEFAULT_FILTER_STATE,
    ...defaultFilters
  });
  
  const [savedFilters, setSavedFilters] = useState<SavedFilter[]>([]);
  const [recentSearches, setRecentSearches] = useState<string[]>([]);
  const [searchHistory, setSearchHistory] = useState<{query: string, timestamp: Date}[]>([]);
  const [lastAppliedFilter, setLastAppliedFilter] = useState<string | null>(null);

  // Load saved filters and history from localStorage
  useEffect(() => {
    try {
      // Load saved filters
      const savedPrefs = localStorage.getItem(localStorageKey);
      if (savedPrefs) {
        const parsed = JSON.parse(savedPrefs);
        setSavedFilters(parsed.map((filter: SavedFilterFromStorage) => ({
          ...filter,
          createdAt: new Date(filter.createdAt)
        })));
      }

      // Load recent searches
      const searches = localStorage.getItem(`${localStorageKey}_recent_searches`);
      if (searches) {
        setRecentSearches(JSON.parse(searches));
      }

      // Load search history
      const history = localStorage.getItem(`${localStorageKey}_search_history`);
      if (history) {
        setSearchHistory(JSON.parse(history).map((item: SearchHistoryItemFromStorage) => ({
          ...item,
          timestamp: new Date(item.timestamp)
        })));
      }
    } catch (error) {
      console.error('Error loading saved filters:', error);
    }
  }, [localStorageKey]);

  // עדכון פילטרים כללי
  const updateFilters = useCallback((newFilters: Partial<FilterState>) => {
    console.log("updateFilters called with:", newFilters);
    
    setFilters(prev => {
      const updated = { ...prev, ...newFilters };
      console.log("Updated filters:", updated);
      
      // אם יש מחרוזת חיפוש חדשה, עדכן את היסטורית החיפוש
      if (newFilters.searchQuery && newFilters.searchQuery !== prev.searchQuery) {
        const newQuery = newFilters.searchQuery;
        console.log("New search query detected:", newQuery);
        
        // עדכון היסטוריית החיפוש
        const updatedHistory = [
          { query: newQuery, timestamp: new Date() },
          ...searchHistory.filter(item => item.query !== newQuery).slice(0, 9)
        ];
        
        setSearchHistory(updatedHistory);
        setRecentSearches(updatedHistory.map(item => item.query));
        
        // שמירה ב-localStorage
        try {
          localStorage.setItem(
            `${localStorageKey}_recent_searches`, 
            JSON.stringify(updatedHistory.map(item => item.query))
          );
          localStorage.setItem(
            `${localStorageKey}_search_history`,
            JSON.stringify(updatedHistory.map(item => ({
              query: item.query,
              timestamp: item.timestamp.toISOString()
            })))
          );
        } catch (e) {
          console.error("Error saving search history:", e);
        }
      }
      
      // טיפול בחיפוש נפרד לגברים
      if (newFilters.maleSearchQuery && newFilters.maleSearchQuery !== prev.maleSearchQuery) {
        // כאן אפשר לייצר היסטוריה נפרדת לחיפושי גברים או לשמור בהיסטוריה הכללית
        console.log("New male search query:", newFilters.maleSearchQuery);
      }
      
      // טיפול בחיפוש נפרד לנשים
      if (newFilters.femaleSearchQuery && newFilters.femaleSearchQuery !== prev.femaleSearchQuery) {
        // כאן אפשר לייצר היסטוריה נפרדת לחיפושי נשים או לשמור בהיסטוריה הכללית
        console.log("New female search query:", newFilters.femaleSearchQuery);
      }

      // קריאה לפונקציית callback
      if (onFilterChange) {
        console.log("Calling onFilterChange with updated filters");
        onFilterChange(updated);
      }
      
      return updated;
    });
  }, [onFilterChange, searchHistory, localStorageKey, setRecentSearches, setSearchHistory]);

  // Reset filters
  const resetFilters = useCallback(() => {
    const defaultState: FilterState = {
      ...DEFAULT_FILTER_STATE,
      ...defaultFilters
    };

    setFilters(defaultState);
    setLastAppliedFilter(null);
    onFilterChange?.(defaultState);
  }, [defaultFilters, onFilterChange]);

  // Clear recent searches
  const clearRecentSearches = useCallback(() => {
    setRecentSearches([]);
    localStorage.removeItem(`${localStorageKey}_recent_searches`);
  }, [localStorageKey]);

  // Save new filter
  const saveFilter = useCallback(async (name: string, filters: FilterState) => {
    const newFilter: SavedFilter = {
      id: Date.now().toString(),
      name,
      filters,
      isDefault: false,
      createdAt: new Date()
    };

    setSavedFilters(prev => {
      const updated = [...prev, newFilter];
      localStorage.setItem(localStorageKey, JSON.stringify(updated));
      return updated;
    });

    return newFilter;
  }, [localStorageKey]);

  // פונקציה משופרת להחלפת מצב הסינון הנפרד
  const toggleSeparateFiltering = useCallback(() => {
    console.log("toggleSeparateFiltering called");
    
    setFilters(prev => {
      const newState = {
        ...prev,
        separateFiltering: !prev.separateFiltering
      };
      
      console.log(`Changing separateFiltering from ${prev.separateFiltering} to ${newState.separateFiltering}`);
      
      return newState;
    });
  }, []);

  // פונקציה משופרת לעדכון סינון גברים
  const updateMaleFilters = useCallback((maleFilters: Partial<FilterState>) => {
    setFilters(prev => {
      const updatedMaleFilters = {
        ...prev.maleFilters,
        ...maleFilters
      };
      
      // אם יש עדכון של מחרוזת חיפוש ספציפית לגברים
      if (maleFilters.searchQuery !== undefined) {
        const updated = {
          ...prev,
          maleFilters: updatedMaleFilters,
          maleSearchQuery: maleFilters.searchQuery // שמירת החיפוש גם בשדה הנפרד
        };
        
        // קריאה לפונקציית callback אם קיימת
        if (onFilterChange) {
          onFilterChange(updated);
        }
        
        return updated;
      }
      
      const updated = {
        ...prev,
        maleFilters: updatedMaleFilters
      };
      
      // קריאה לפונקציית callback אם קיימת
      if (onFilterChange) {
        onFilterChange(updated);
      }
      
      return updated;
    });
  }, [onFilterChange]);

  // פונקציה משופרת לעדכון סינון נשים
  const updateFemaleFilters = useCallback((femaleFilters: Partial<FilterState>) => {
    setFilters(prev => {
      const updatedFemaleFilters = {
        ...prev.femaleFilters,
        ...femaleFilters
      };
      
      // אם יש עדכון של מחרוזת חיפוש ספציפית לנשים
      if (femaleFilters.searchQuery !== undefined) {
        const updated = {
          ...prev,
          femaleFilters: updatedFemaleFilters,
          femaleSearchQuery: femaleFilters.searchQuery // שמירת החיפוש גם בשדה הנפרד
        };
        
        // קריאה לפונקציית callback אם קיימת
        if (onFilterChange) {
          onFilterChange(updated);
        }
        
        return updated;
      }
      
      const updated = {
        ...prev,
        femaleFilters: updatedFemaleFilters
      };
      
      // קריאה לפונקציית callback אם קיימת
      if (onFilterChange) {
        onFilterChange(updated);
      }
      
      return updated;
    });
  }, [onFilterChange]);

  const updateMaleSearchQuery = useCallback((query: string) => {
    setFilters(prev => {
      // שומרים את החיפוש בשדה הייעודי
      const updated = {
        ...prev,
        maleSearchQuery: query
      };
      
      // מעדכנים גם את הפילטרים הספציפיים לגברים אם פעיל סינון נפרד
      if (prev.separateFiltering) {
        updated.maleFilters = {
          ...prev.maleFilters,
          searchQuery: query
        };
      }
      
      if (onFilterChange) {
        onFilterChange(updated);
      }
      
      return updated;
    });
  }, [onFilterChange]);
  
  // פונקציה חדשה לעדכון חיפוש נפרד לנשים
  const updateFemaleSearchQuery = useCallback((query: string) => {
    setFilters(prev => {
      // שומרים את החיפוש בשדה הייעודי
      const updated = {
        ...prev,
        femaleSearchQuery: query
      };
      
      // מעדכנים גם את הפילטרים הספציפיים לנשים אם פעיל סינון נפרד
      if (prev.separateFiltering) {
        updated.femaleFilters = {
          ...prev.femaleFilters,
          searchQuery: query
        };
      }
      
      if (onFilterChange) {
        onFilterChange(updated);
      }
      
      return updated;
    });
  }, [onFilterChange]);

  // פונקציה משופרת להעתקת סינון מצד אחד לשני
  const copyFilters = useCallback((source: 'male' | 'female', target: 'male' | 'female') => {
    setFilters(prev => {
      const sourceFilters = source === 'male' ? prev.maleFilters : prev.femaleFilters;
      
      if (!sourceFilters) {
        return prev;
      }
      
      const updated = { ...prev };
      
      if (target === 'male') {
        updated.maleFilters = { ...sourceFilters };
      } else {
        updated.femaleFilters = { ...sourceFilters };
      }
      
      // קריאה לפונקציית callback אם קיימת
      if (onFilterChange) {
        onFilterChange(updated);
      }
      
      return updated;
    });
  }, [onFilterChange]);

  // Update existing filter
  const updateSavedFilter = useCallback((id: string, updates: Partial<SavedFilter>) => {
    setSavedFilters(prev => {
      const updated = prev.map(filter => 
        filter.id === id ? { ...filter, ...updates } : filter
      );
      localStorage.setItem(localStorageKey, JSON.stringify(updated));
      return updated;
    });
  }, [localStorageKey]);

  // Delete filter
  const deleteFilter = useCallback((id: string) => {
    setSavedFilters(prev => {
      const updated = prev.filter(f => f.id !== id);
      localStorage.setItem(localStorageKey, JSON.stringify(updated));
      
      if (lastAppliedFilter === id) {
        setLastAppliedFilter(null);
      }
      
      return updated;
    });
  }, [localStorageKey, lastAppliedFilter]);

  // Set default filter
  const setDefaultFilter = useCallback((id: string) => {
    setSavedFilters(prev => {
      const updated = prev.map(f => ({
        ...f,
        isDefault: f.id === id
      }));
      localStorage.setItem(localStorageKey, JSON.stringify(updated));
      return updated;
    });
  }, [localStorageKey]);

  // Load saved filter - תמיכה בסינון נפרד
  const loadSavedFilter = useCallback((id: string) => {
    const filter = savedFilters.find(f => f.id === id);
    if (filter) {
      // בדוק אם יש בפילטר השמור מידע לגבי סינון נפרד
      setFilters({ 
        ...filter.filters, 
        savedFilterId: id,
        // וודא שיש תמיד את המאפיינים האלה, גם אם אינם מוגדרים בפילטר המקורי
        separateFiltering: true as boolean,        maleFilters: filter.filters.maleFilters || {},
        femaleFilters: filter.filters.femaleFilters || {}
      });
      
      setLastAppliedFilter(id);
      onFilterChange?.({ 
        ...filter.filters, 
        savedFilterId: id,
        separateFiltering: true as boolean,        maleFilters: filter.filters.maleFilters || {},
        femaleFilters: filter.filters.femaleFilters || {} 
      });
    }
  }, [savedFilters, onFilterChange]);

  // Apply popular filter
  const applyPopularFilter = useCallback((filterConfig: Partial<FilterState>) => {
    const updatedFilters = {
      ...DEFAULT_FILTER_STATE,
      ...filterConfig
    };
    setFilters(updatedFilters);
    onFilterChange?.(updatedFilters);
  }, [onFilterChange]);

  // Check for active filters
  const hasActiveFilters = useMemo(() => {
    return (
      filters.searchQuery ||
      filters.gender !== undefined ||
      (filters.cities?.length ?? 0) > 0 ||  // בדיקה בטוחה למערך
      (filters.occupations?.length ?? 0) > 0 ||  // בדיקה בטוחה למערך
      filters.religiousLevel ||
      filters.educationLevel ||
      filters.maritalStatus ||
      filters.availabilityStatus ||
      filters.userStatus ||
      filters.isVerified ||
      filters.hasReferences ||
      filters.lastActiveDays ||
      filters.isProfileComplete ||
      (filters.ageRange && (
        filters.ageRange.min !== DEFAULT_FILTER_STATE.ageRange?.min ||
        filters.ageRange.max !== DEFAULT_FILTER_STATE.ageRange?.max
      )) ||
      (filters.heightRange && (
        filters.heightRange.min !== DEFAULT_FILTER_STATE.heightRange?.min ||
        filters.heightRange.max !== DEFAULT_FILTER_STATE.heightRange?.max
      )) ||
      // בדיקת פילטרים נפרדים פעילים
      filters.separateFiltering
    );
  }, [filters]);

  // Get active filters in formatted array
  const activeFilters = useMemo((): FilterOption[] => {
    const active: FilterOption[] = [];

    if (filters.searchQuery) {
      active.push({
        key: 'searchQuery',
        value: filters.searchQuery,
        label: `חיפוש: ${filters.searchQuery}`,
        category: 'חיפוש'
      });
    }

    if (filters.gender) {
      active.push({
        key: 'gender',
        value: filters.gender,
        label: `מגדר: ${filters.gender === 'MALE' ? 'זכר' : 'נקבה'}`,
        category: 'מידע בסיסי'
      });
    }

    if (filters.separateFiltering) {
      active.push({
        key: 'separateFiltering',
        value: true,
        label: 'סינון נפרד לפי מגדר',
        category: 'מידע בסיסי'
      });
    }

    // גיל
    if (filters.ageRange && (
      filters.ageRange.min !== DEFAULT_FILTER_STATE.ageRange?.min || 
      filters.ageRange.max !== DEFAULT_FILTER_STATE.ageRange?.max
    )) {
      active.push({
        key: 'ageRange',
        value: filters.ageRange,
        label: `גיל: ${filters.ageRange.min}-${filters.ageRange.max}`,
        category: 'מידע בסיסי'
      });
    }

    // גובה
    if (filters.heightRange && (
      filters.heightRange.min !== DEFAULT_FILTER_STATE.heightRange?.min || 
      filters.heightRange.max !== DEFAULT_FILTER_STATE.heightRange?.max
    )) {
      active.push({
        key: 'heightRange',
        value: filters.heightRange,
        label: `גובה: ${filters.heightRange.min}-${filters.heightRange.max} ס"מ`,
        category: 'מידע בסיסי'
      });
    }

    // ערים
    if (filters.cities?.length) {
      if (filters.cities.length === 1) {
        active.push({
          key: 'cities',
          value: filters.cities[0],
          label: `עיר: ${filters.cities[0]}`,
          category: 'מיקום'
        });
      } else {
        active.push({
          key: 'cities',
          value: filters.cities,
          label: `ערים: ${filters.cities.length} נבחרו`,
          category: 'מיקום'
        });
      }
    }

    // תחומי עיסוק
    if (filters.occupations?.length) {
      if (filters.occupations.length === 1) {
        active.push({
          key: 'occupations',
          value: filters.occupations[0],
          label: `תחום עיסוק: ${filters.occupations[0]}`,
          category: 'תעסוקה'
        });
      } else {
        active.push({
          key: 'occupations',
          value: filters.occupations,
          label: `תחומי עיסוק: ${filters.occupations.length} נבחרו`,
          category: 'תעסוקה'
        });
      }
    }

    // רמת דתיות
    if (filters.religiousLevel) {
      active.push({
        key: 'religiousLevel',
        value: filters.religiousLevel,
        label: `רמת דתיות: ${filters.religiousLevel}`,
        category: 'דת'
      });
    }

    // השכלה
    if (filters.educationLevel) {
      active.push({
        key: 'educationLevel',
        value: filters.educationLevel,
        label: `השכלה: ${filters.educationLevel}`,
        category: 'השכלה'
      });
    }

    // מצב משפחתי
    if (filters.maritalStatus) {
      active.push({
        key: 'maritalStatus',
        value: filters.maritalStatus,
        label: `מצב משפחתי: ${filters.maritalStatus}`,
        category: 'מידע אישי'
      });
    }

    // סטטוס זמינות
    if (filters.availabilityStatus) {
      const statusLabel = 
        filters.availabilityStatus === "AVAILABLE" ? "פנוי/ה" :
        filters.availabilityStatus === "DATING" ? "בתהליך הכרות" :
        filters.availabilityStatus === "UNAVAILABLE" ? "לא פנוי/ה" :
        filters.availabilityStatus;
      
      active.push({
        key: 'availabilityStatus',
        value: filters.availabilityStatus,
        label: `סטטוס זמינות: ${statusLabel}`,
        category: 'זמינות'
      });
    }

    // סטטוס משתמש
    if (filters.userStatus) {
      active.push({
        key: 'userStatus',
        value: filters.userStatus,
        label: `סטטוס משתמש: ${filters.userStatus}`,
        category: 'סטטוס'
      });
    }

    // משתמש מאומת
    if (filters.isVerified !== undefined) {
      active.push({
        key: 'isVerified',
        value: filters.isVerified,
        label: `משתמש מאומת: ${filters.isVerified ? 'כן' : 'לא'}`,
        category: 'אימות'
      });
    }

    // יש המלצות
    if (filters.hasReferences !== undefined) {
      active.push({
        key: 'hasReferences',
        value: filters.hasReferences,
        label: `יש המלצות: ${filters.hasReferences ? 'כן' : 'לא'}`,
        category: 'המלצות'
      });
    }

    // פעילות אחרונה
    if (filters.lastActiveDays !== undefined) {
      active.push({
        key: 'lastActiveDays',
        value: filters.lastActiveDays,
        label: `פעיל ב-${filters.lastActiveDays} הימים האחרונים`,
        category: 'פעילות'
      });
    }

    // פרופיל מלא
    if (filters.isProfileComplete !== undefined) {
      active.push({
        key: 'isProfileComplete',
        value: filters.isProfileComplete,
        label: `פרופיל מלא: ${filters.isProfileComplete ? 'כן' : 'לא'}`,
        category: 'שלמות פרופיל'
      });
    }

    return active;
  }, [filters]);

  // Remove single filter
  const removeFilter = useCallback((key: keyof FilterState, value?: string) => {
    setFilters(prev => {
      const updated = { ...prev };

      if (key === 'separateFiltering') {
        updated.separateFiltering = false;
      } else if (Array.isArray(updated[key]) && value !== undefined) {
        if (key === 'cities' || key === 'occupations') {
          updated[key] = (updated[key] as string[]).filter(v => v !== value);
        }
      } else {
        delete updated[key];
      }

      onFilterChange?.(updated);
      return updated;
    });
  }, [onFilterChange]);
  
  // Calculate popular filters based on search history
  const popularFilters = useMemo(() => {
    // Group searches by frequency
    const searchFrequency: Record<string, number> = {};
    searchHistory.forEach(item => {
      searchFrequency[item.query] = (searchFrequency[item.query] || 0) + 1;
    });
    
    // Sort by frequency
    return Object.entries(searchFrequency)
      .sort((a, b) => b[1] - a[1])
      .slice(0, 5)
      .map(([query]) => query);
  }, [searchHistory]);

  return {
    // Current state
    filters,
    savedFilters,
    recentSearches,
    searchHistory,
    activeFilters,
    hasActiveFilters,
    popularFilters,
    lastAppliedFilter,
    
    // Separate filtering functions
    toggleSeparateFiltering,
    updateMaleFilters,
    updateFemaleFilters,
    copyFilters,
    
    // חיפוש נפרד פונקציות חדשות
    updateMaleSearchQuery,
    updateFemaleSearchQuery,
    
    // Actions
    setFilters: updateFilters,
    removeFilter,
    resetFilters,
    clearRecentSearches,
    applyPopularFilter,

    // Saved filters management
    saveFilter,
    updateSavedFilter,
    deleteFilter,
    setDefaultFilter,
    loadSavedFilter,
};
};
export default useFilterLogic;
--- End of Content for useFilterLogic.ts ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\new\hooks\useStatistics.ts
--------------------------------------------------------------------------------
Content:
// /hooks/useStatistics.ts

import { useMemo } from 'react';
import type { Candidate } from '../types/candidates';
import {
  calculateAgeDistribution,
  calculateLocationDistribution,
  calculateReligiousDistribution,
  calculateActivityStats,
  calculateGenderStats,
  calculateAvailabilityStats,
  calculateCompletionStats
} from '../../suggestions/utils/statisticsCalculator';

export interface Statistics {
  gender: {
    maleCount: number;
    femaleCount: number;
    ratio: number;
    total: number;
    percentages: {
      male: number;
      female: number;
    };
  };
  age: {
    ageGroups: Record<string, number>;
    averageAge: number;
    medianAge: number;
  };
  location: {
    cities: Record<string, number>;
    topCities: Array<{ city: string; count: number }>;
  };
  religious: {
    levels: Record<string, number>;
    percentages: Record<string, number>;
  };
  activity: {
    activeLastWeek: number;
    activeLastMonth: number;
    averageLoginFrequency: number;
    completedProfiles: number;
  };
  availability: {
    counts: Record<string, number>;
    percentages: Record<string, number>;
  };
  completion: {
    counts: {
      hasPhotos: number;
      hasAbout: number;
      hasReferences: number;
      hasPreferences: number;
      isVerified: number;
      fullyCompleted: number;
    };
    percentages: {
      hasPhotos: number;
      hasAbout: number;
      hasReferences: number;
      hasPreferences: number;
      isVerified: number;
      fullyCompleted: number;
    };
  };
}

export const useStatistics = (candidates: Candidate[]) => {
  const stats = useMemo<Statistics>(() => {
    return {
      gender: calculateGenderStats(candidates),
      age: calculateAgeDistribution(candidates),
      location: calculateLocationDistribution(candidates),
      religious: calculateReligiousDistribution(candidates),
      activity: calculateActivityStats(candidates),
      availability: calculateAvailabilityStats(candidates),
      completion: calculateCompletionStats(candidates)
    };
  }, [candidates]);

  // פונקציות עזר לשליפת נתונים ספציפיים
  const getGenderRatio = () => {
    return {
      ratio: stats.gender.ratio,
      formattedRatio: `${stats.gender.maleCount}:${stats.gender.femaleCount}`
    };
  };

  const getTopCities = (limit: number = 5) => {
    return stats.location.topCities.slice(0, limit);
  };

  const getActiveUsersPercent = () => {
    return Math.round((stats.activity.activeLastWeek / stats.gender.total) * 100);
  };

  const getCompletionRate = () => {
    return stats.completion.percentages.fullyCompleted;
  };

  const getAgeGroupDistribution = () => {
    return Object.entries(stats.age.ageGroups)
      .map(([range, count]) => ({
        range,
        count,
        percentage: Math.round((count / stats.gender.total) * 100)
      }))
      .sort((a, b) => {
        const [aMin] = a.range.split('-').map(Number);
        const [bMin] = b.range.split('-').map(Number);
        return aMin - bMin;
      });
  };

  const getReligiousDistribution = () => {
    return Object.entries(stats.religious.levels)
      .map(([level, count]) => ({
        level,
        count,
        percentage: stats.religious.percentages[level]
      }))
      .sort((a, b) => b.count - a.count);
  };

  const getActivityTrend = () => {
    return {
      weekly: stats.activity.activeLastWeek,
      monthly: stats.activity.activeLastMonth,
      average: stats.activity.averageLoginFrequency
    };
  };

  const getProfileCompletionStats = () => {
    return {
      completed: stats.completion.counts.fullyCompleted,
      partial: stats.gender.total - stats.completion.counts.fullyCompleted,
      percentage: stats.completion.percentages.fullyCompleted
    };
  };

  return {
    stats,
    getGenderRatio,
    getTopCities,
    getActiveUsersPercent,
    getCompletionRate,
    getAgeGroupDistribution,
    getReligiousDistribution,
    getActivityTrend,
    getProfileCompletionStats
  };
};

export default useStatistics;
--- End of Content for useStatistics.ts ---

================================================================================
Directory: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\new\shared
================================================================================

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\new\shared\LoadingStates.tsx
--------------------------------------------------------------------------------
Content:
'use client';

import React from 'react';
import { Loader2, AlertCircle } from 'lucide-react';
import { cn } from '@/lib/utils';
import { Skeleton } from '@/components/ui/skeleton';
import { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert';
import { Button } from '@/components/ui/button';
import type { MatchmakerPageDictionary } from '@/types/dictionaries/matchmaker';

interface LoadingContainerProps {
  children: React.ReactNode;
  className?: string;
}

interface LoadingSpinnerProps {
  size?: 'sm' | 'md' | 'lg';
  className?: string;
}

interface LoadingCardProps {
  count?: number;
  layout?: 'grid' | 'list';
  className?: string;
}

interface LoadingTextProps {
  lines?: number;
  className?: string;
}

interface LoadingErrorProps {
  message: string;
  onRetry?: () => void;
  className?: string;
  dict: MatchmakerPageDictionary['loadingStates'];
}

export const LoadingContainer: React.FC<LoadingContainerProps> = ({
  children,
  className,
}) => {
  return (
    <div className={cn('relative min-h-[200px]', className)}>
      <div className="absolute inset-0 bg-white/80 backdrop-blur-sm flex items-center justify-center z-50">
        <Loader2 className="h-8 w-8 animate-spin text-blue-600" />
      </div>
      <div className="opacity-50 pointer-events-none">{children}</div>
    </div>
  );
};

export const LoadingSpinner: React.FC<LoadingSpinnerProps> = ({
  size = 'md',
  className,
}) => {
  const sizeClasses = { sm: 'w-4 h-4', md: 'w-8 h-8', lg: 'w-12 h-12' };
  return (
    <div className={cn('flex items-center justify-center', className)}>
      <Loader2
        className={cn('animate-spin text-blue-600', sizeClasses[size])}
      />
    </div>
  );
};

export const LoadingCard: React.FC<LoadingCardProps> = ({
  count = 1,
  layout = 'grid',
  className,
}) => {
  return (
    <div
      className={cn(
        layout === 'grid'
          ? 'grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4'
          : 'space-y-4',
        className
      )}
    >
      {Array.from({ length: count }).map((_, index) => (
        <div
          key={index}
          className={cn(
            'bg-white rounded-lg overflow-hidden shadow-sm',
            layout === 'list' ? 'flex gap-4' : ''
          )}
        >
          <Skeleton
            className={cn(
              'bg-gray-200',
              layout === 'list' ? 'w-32 h-32' : 'w-full h-48'
            )}
          />
          <div className="p-4 flex-1">
            <div className="flex items-center justify-between mb-4">
              <Skeleton className="h-6 w-1/3" />
              <Skeleton className="h-6 w-16" />
            </div>
            <div className="space-y-2">
              <Skeleton className="h-4 w-2/3" />
              <Skeleton className="h-4 w-1/2" />
              <Skeleton className="h-4 w-3/4" />
            </div>
            <div className="flex gap-2 mt-4">
              <Skeleton className="h-9 w-24" />
              <Skeleton className="h-9 w-24" />
            </div>
          </div>
        </div>
      ))}
    </div>
  );
};

export const LoadingText: React.FC<LoadingTextProps> = ({
  lines = 3,
  className,
}) => {
  return (
    <div className={cn('space-y-2', className)}>
      {Array.from({ length: lines }).map((_, index) => (
        <Skeleton
          key={index}
          className={cn('h-4', index === lines - 1 ? 'w-3/4' : 'w-full')}
        />
      ))}
    </div>
  );
};

export const LoadingError: React.FC<LoadingErrorProps> = ({
  message,
  onRetry,
  className,
  dict,
}) => {
  return (
    <Alert variant="destructive" className={cn('border-red-500', className)}>
      <AlertCircle className="h-4 w-4" />
      <AlertTitle>{dict.errorTitle}</AlertTitle>
      <AlertDescription className="flex items-center justify-between">
        <span>{message}</span>
        {onRetry && (
          <Button
            variant="outline"
            size="sm"
            onClick={onRetry}
            className="ml-4"
          >
            {dict.retryButton}
          </Button>
        )}
      </AlertDescription>
    </Alert>
  );
};

export const LoadingStats: React.FC<{ className?: string }> = ({
  className,
}) => {
  return (
    <div className={cn('grid grid-cols-2 md:grid-cols-4 gap-4', className)}>
      {Array.from({ length: 4 }).map((_, index) => (
        <div key={index} className="bg-white p-4 rounded-lg shadow-sm">
          <Skeleton className="h-4 w-16 mb-2" />
          <Skeleton className="h-8 w-24" />
        </div>
      ))}
    </div>
  );
};

export const LoadingFilters: React.FC<{ className?: string }> = ({
  className,
}) => {
  return (
    <div className={cn('space-y-4', className)}>
      <Skeleton className="h-10 w-full" />
      <div className="flex flex-wrap gap-2">
        {Array.from({ length: 4 }).map((_, index) => (
          <Skeleton key={index} className="h-8 w-24" />
        ))}
      </div>
    </div>
  );
};

const LoadingComponents = {
  LoadingContainer,
  LoadingSpinner,
  LoadingCard,
  LoadingText,
  LoadingError,
  LoadingStats,
  LoadingFilters,
};

export default LoadingComponents;
--- End of Content for LoadingStates.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\new\shared\Pagination.tsx
--------------------------------------------------------------------------------
Content:
// /shared/Pagination.tsx
'use client';

import React from 'react';
import { Button } from '@/components/ui/button';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select';
import {
  ChevronRight,
  ChevronLeft,
  ChevronsLeft,
  ChevronsRight,
} from 'lucide-react';
import type { MatchmakerPageDictionary } from '@/types/dictionaries/matchmaker';

interface PaginationProps {
  currentPage: number;
  totalPages: number;
  pageSize: number;
  totalItems: number;
  onPageChange: (page: number) => void;
  onPageSizeChange: (size: number) => void;
  className?: string;
  dict: MatchmakerPageDictionary['pagination'];
}

const pageSizeOptions = [10, 20, 50, 100];

const Pagination: React.FC<PaginationProps> = ({
  currentPage,
  totalPages,
  pageSize,
  totalItems,
  onPageChange,
  onPageSizeChange,
  className,
  dict,
}) => {
  // Helper to generate page numbers array
  const getPageNumbers = () => {
    const pages: (number | string)[] = [];
    const maxVisiblePages = 5;

    if (totalPages <= maxVisiblePages) {
      return Array.from({ length: totalPages }, (_, i) => i + 1);
    }

    // Always show first page
    pages.push(1);

    // Calculate start and end of visible pages
    let start = Math.max(currentPage - 1, 2);
    let end = Math.min(currentPage + 1, totalPages - 1);

    // Adjust for edge cases
    if (currentPage <= 3) {
      end = Math.min(maxVisiblePages - 1, totalPages - 1);
    } else if (currentPage >= totalPages - 2) {
      start = Math.max(totalPages - maxVisiblePages + 2, 2);
    }

    // Add ellipsis and numbers
    if (start > 2) pages.push('...');
    for (let i = start; i <= end; i++) {
      pages.push(i);
    }
    if (end < totalPages - 1) pages.push('...');

    // Always show last page
    if (totalPages > 1) pages.push(totalPages);

    // --- התיקון כאן ---
    return pages;
  };

  const startItem = (currentPage - 1) * pageSize + 1;
  const endItem = Math.min(currentPage * pageSize, totalItems);
  const resultsText = dict.results
    .replace('{{start}}', String(startItem))
    .replace('{{end}}', String(endItem))
    .replace('{{total}}', String(totalItems));

  return (
    <div
      className={`flex flex-col sm:flex-row items-center justify-between gap-4 ${className}`}
    >
      <div className="flex items-center gap-2 text-sm text-gray-600">
        <span>{dict.show}</span>
        <Select
          value={pageSize.toString()}
          onValueChange={(value) => onPageSizeChange(Number(value))}
        >
          <SelectTrigger className="w-[70px]">
            <SelectValue />
          </SelectTrigger>
          <SelectContent>
            {pageSizeOptions.map((size) => (
              <SelectItem key={size} value={size.toString()}>
                {size}
              </SelectItem>
            ))}
          </SelectContent>
        </Select>
        <span>{dict.rows}</span>
      </div>

      <div className="text-sm text-gray-600">{resultsText}</div>

      <div className="flex items-center gap-1">
        <Button
          variant="outline"
          size="icon"
          onClick={() => onPageChange(1)}
          disabled={currentPage === 1}
        >
          <ChevronsRight className="h-4 w-4" />
        </Button>
        <Button
          variant="outline"
          size="icon"
          onClick={() => onPageChange(currentPage - 1)}
          disabled={currentPage === 1}
        >
          <ChevronRight className="h-4 w-4" />
        </Button>
        {getPageNumbers().map((page, index) =>
          typeof page === 'number' ? (
            <Button
              key={index}
              variant={currentPage === page ? 'default' : 'outline'}
              size="sm"
              onClick={() => onPageChange(page)}
              className="hidden sm:inline-flex min-w-[32px]"
            >
              {page}
            </Button>
          ) : (
            <span key={index} className="px-2">
              {page}
            </span>
          )
        )}
        <Button
          variant="outline"
          size="icon"
          onClick={() => onPageChange(currentPage + 1)}
          disabled={currentPage === totalPages}
        >
          <ChevronLeft className="h-4 w-4" />
        </Button>
        <Button
          variant="outline"
          size="icon"
          onClick={() => onPageChange(totalPages)}
          disabled={currentPage === totalPages}
        >
          <ChevronsLeft className="h-4 w-4" />
        </Button>
      </div>
    </div>
  );
};

export default Pagination;
--- End of Content for Pagination.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\new\shared\StatusBadge.tsx
--------------------------------------------------------------------------------
Content:
import React from 'react';
import { Badge } from '@/components/ui/badge';
import {
  Circle,
  CheckCircle,
  XCircle,
  Clock,
  AlertTriangle,
} from 'lucide-react';
import { MatchSuggestionStatus, VerificationStatus } from '@prisma/client';
import type { MatchmakerPageDictionary } from '@/types/dictionaries/matchmaker';

type StatusType = 'suggestion' | 'verification' | 'profile';
type StatusSize = 'sm' | 'md' | 'lg';

interface StatusConfig {
  label: string;
  color: 'destructive' | 'outline' | 'secondary' | 'success' | 'warning';
  icon:
    | typeof Circle
    | typeof CheckCircle
    | typeof XCircle
    | typeof Clock
    | typeof AlertTriangle;
}

interface StatusBadgeProps {
  type: StatusType;
  status: string;
  size?: StatusSize;
  dict: MatchmakerPageDictionary['statusBadges'];
}

// Presentation logic remains in the component
const statusStyling = {
  // Suggestion Statuses Styling
  DRAFT: { color: 'secondary', icon: Circle },
  PENDING_FIRST_PARTY: { color: 'warning', icon: Clock },
  FIRST_PARTY_APPROVED: { color: 'success', icon: CheckCircle },
  FIRST_PARTY_DECLINED: { color: 'destructive', icon: XCircle },
  PENDING_SECOND_PARTY: { color: 'warning', icon: Clock },
  SECOND_PARTY_APPROVED: { color: 'success', icon: CheckCircle },
  SECOND_PARTY_DECLINED: { color: 'destructive', icon: XCircle },
  AWAITING_MATCHMAKER_APPROVAL: { color: 'warning', icon: Clock },
  CONTACT_DETAILS_SHARED: { color: 'success', icon: CheckCircle },
  AWAITING_FIRST_DATE_FEEDBACK: { color: 'warning', icon: Clock },
  THINKING_AFTER_DATE: { color: 'warning', icon: Clock },
  PROCEEDING_TO_SECOND_DATE: { color: 'success', icon: CheckCircle },
  ENDED_AFTER_FIRST_DATE: { color: 'destructive', icon: XCircle },
  MEETING_PENDING: { color: 'warning', icon: Clock },
  MEETING_SCHEDULED: { color: 'success', icon: CheckCircle },
  MATCH_APPROVED: { color: 'success', icon: CheckCircle },
  MATCH_DECLINED: { color: 'destructive', icon: XCircle },
  DATING: { color: 'secondary', icon: Circle },
  ENGAGED: { color: 'success', icon: CheckCircle },
  MARRIED: { color: 'success', icon: CheckCircle },
  EXPIRED: { color: 'destructive', icon: XCircle },
  CLOSED: { color: 'destructive', icon: XCircle },
  CANCELLED: { color: 'destructive', icon: XCircle },

  // Verification Statuses Styling
  PENDING: { color: 'warning', icon: Clock },
  COMPLETED: { color: 'success', icon: CheckCircle },
  FAILED: { color: 'destructive', icon: XCircle },

  // Profile Statuses Styling
  INCOMPLETE: { color: 'warning', icon: AlertTriangle },
  PENDING_VERIFICATION: { color: 'warning', icon: Clock },
  VERIFIED: { color: 'success', icon: CheckCircle },
  BLOCKED: { color: 'destructive', icon: XCircle },
};

const defaultStyling = {
  color: 'secondary' as const,
  icon: Circle,
};

const getStatusConfig = (
  type: StatusType,
  status: string,
  dict: StatusBadgeProps['dict']
): StatusConfig => {
  let label: string;
  let style;

  switch (type) {
    case 'suggestion':
      label = dict.suggestion[status as MatchSuggestionStatus] || dict.unknown;
      style =
        statusStyling[status as keyof typeof statusStyling] || defaultStyling;
      break;
    case 'verification':
      label = dict.verification[status as VerificationStatus] || dict.unknown;
      style =
        statusStyling[status as keyof typeof statusStyling] || defaultStyling;
      break;
    case 'profile':
      label = dict.profile[status as keyof typeof dict.profile] || dict.unknown;
      style =
        statusStyling[status as keyof typeof statusStyling] || defaultStyling;
      break;
    default:
      label = dict.unknown;
      style = defaultStyling;
  }

  return { label, ...style };
};

const StatusBadge: React.FC<StatusBadgeProps> = ({
  type,
  status,
  size = 'md',
  dict,
}) => {
  const config = getStatusConfig(type, status, dict);
  const Icon = config.icon;

  const sizeClasses = {
    sm: 'text-xs px-2 py-0.5',
    md: 'text-sm px-2.5 py-1',
    lg: 'text-base px-3 py-1.5',
  };

  return (
    <Badge
      variant={config.color}
      className={`flex items-center gap-1.5 ${sizeClasses[size]}`}
    >
      <Icon className={size === 'sm' ? 'w-3 h-3' : 'w-4 h-4'} />
      <span>{config.label}</span>
    </Badge>
  );
};

export default StatusBadge;
--- End of Content for StatusBadge.tsx ---

================================================================================
Directory: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\new\types
================================================================================

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\new\types\candidates.ts
--------------------------------------------------------------------------------
Content:
// candidates.ts
import { Gender, AvailabilityStatus, UserStatus, UserSource  } from '@prisma/client';
import type { UserProfile, UserImage, QuestionnaireResponse} from '@/types/next-auth';

// Base API Response Type
export interface APIResponse<T> {
  success: boolean;
  clients: T[];
  count: number;
  error?: string;
}

// Base Types
export type CandidateImage = UserImage;

export type CandidateProfile = UserProfile;

export type MobileView = 'split' | 'single' | 'double';

export interface Candidate {
  id: string;
  email: string;
  firstName: string;
  createdAt: Date;
  lastName: string;
  status: UserStatus;
  isVerified: boolean;
  images: CandidateImage[];
  isProfileComplete: boolean;
  source: UserSource; // Add new field
  addedByMatchmakerId?: string | null; // Add new field
  profile: CandidateProfile; // Ensure this uses the updated CandidateProfile
    suggestionStatus?: {
    status: 'BLOCKED' | 'PENDING';
    suggestionId: string;
    withCandidateName: string;
  } | null;

}
export interface CandidatesFilter {
   source?: UserSource;
  gender?: Gender;
  ageRange?: {
    min: number;
    max: number;
  };
  heightRange?: {
    min: number;
    max: number;
  };
  cities?: string[];
  religiousLevel?: string;
  occupations?: string[];
  educationLevel?: string;
  maritalStatus?: string;
  availabilityStatus?: AvailabilityStatus | string;
  isVerified?: boolean;
  hasReferences?: boolean;
  lastActiveDays?: number;
  isProfileComplete?: boolean;
  searchQuery?: string;
  savedFilterId?: string;
  separateFiltering?: boolean;
  
  // הוספת שדות חיפוש נפרדים
  maleSearchQuery?: string;
  femaleSearchQuery?: string;
  
  maleFilters?: Partial<CandidatesFilter>;
  femaleFilters?: Partial<CandidatesFilter>;
  userStatus?: UserStatus;
}

// ViewMode and Action Types - אלה נשארים כמו שהם
export type ViewMode = 'grid' | 'list';
export type CardSize = 'sm' | 'md' | 'lg';
export type CandidateAction = 'suggest' | 'invite' | 'contact' | 'favorite' | 'view' | 'edit';

// Profile Card Types
export interface ProfileCardData {
  profile: CandidateProfile;
  images: CandidateImage[];
  questionnaire?: QuestionnaireResponse;
}

/**
 * ממפה את אובייקט המועמד מהשרת למבנה הנדרש עבור ProfileCard
 */
export const mapCandidateToProfileCard = (candidate: Candidate): ProfileCardData => {
  return {
    profile: candidate.profile,
    images: candidate.images,
    questionnaire: undefined // יש להוסיף לוגיקה לטעינת השאלון בנפרד
  };
};

/**
 * מפריד מועמדים לפי מגדר
 */
export const separateCandidatesByGender = (candidates: Candidate[]) => {
  return {
    maleCandidates: candidates.filter(c => c.profile.gender === 'MALE'),
    femaleCandidates: candidates.filter(c => c.profile.gender === 'FEMALE')
  };
};

/**
 * בודק האם הפרופיל מלא
 */
export const isProfileComplete = (profile: CandidateProfile): boolean => {
  const requiredFields: Array<keyof CandidateProfile> = [
    'birthDate',
    'city',
    'religiousLevel',
    'about',
    'occupation',
    'education'
  ];

  return requiredFields.every(field => Boolean(profile[field]));
};

const candidateUtils = {
  mapCandidateToProfileCard,
  separateCandidatesByGender,
  isProfileComplete
};

export default candidateUtils;
--- End of Content for candidates.ts ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\new\types\filters.ts
--------------------------------------------------------------------------------
Content:
// src/app/components/matchmaker/new/types/filters.ts

import { Gender, AvailabilityStatus, UserStatus, UserSource  } from '@prisma/client';

// הגדרת טווח ערכים מספריים
export interface RangeFilter {
  min: number;
  max: number;
}

// הגדרת פילטר שמור
export interface SavedFilter {
  id: string;
  name: string;
  filters: FilterState;
  isDefault?: boolean;
  createdAt: Date;
}

export interface FilterState {
  // הוספת מצב תצוגה נפרדת
  separateFiltering: boolean;
    source?: UserSource | undefined;
  // הוספת שדות חיפוש נפרדים
  maleSearchQuery?: string;
  femaleSearchQuery?: string;

  // פילטרים נפרדים לגברים
  maleFilters?: Omit<FilterState, 'gender' | 'maleFilters' | 'femaleFilters' | 
    'separateFiltering' | 'maleSearchQuery' | 'femaleSearchQuery'>;
  
  // פילטרים נפרדים לנשים
  femaleFilters?: Omit<FilterState, 'gender' | 'maleFilters' | 'femaleFilters' | 
    'separateFiltering' | 'maleSearchQuery' | 'femaleSearchQuery'>;

  searchQuery?: string;
  savedFilterId?: string;
  gender?: Gender | undefined;
  ageRange?: RangeFilter;
  heightRange?: RangeFilter;
  cities?: string[];
  occupations?: string[];
  religiousLevel?: string;
  educationLevel?: string;
  maritalStatus?: string;
  availabilityStatus?: AvailabilityStatus | string;
  userStatus?: UserStatus;
  isVerified?: boolean;
  hasReferences?: boolean;
  lastActiveDays?: number;
  isProfileComplete?: boolean;
}

// הגדרת אפשרות פילטר
export interface FilterOption {
  key: keyof (FilterState & { education: string });
  value: Gender | AvailabilityStatus | UserStatus | RangeFilter | string[] | string | number | boolean | undefined;
  label: string;
  category?: string;
}

// הגדרת קטגוריית פילטר
export interface FilterCategory {
  id: string;
  label: string;
  filters: Array<keyof (FilterState & { education: string })>;
}

// הגדרת פרופ לקומפוננטת הפילטרים
export interface FilterProps {
  filters: FilterState;
  onFiltersChange: (filters: FilterState) => void;
  onReset?: () => void;
  className?: string;
}

// הגדרת אפשרויות הפילטר
export interface FilterOptions {
  ages: RangeFilter;
  heights: RangeFilter;
  cities: string[];
  religiousLevels: string[];
  educationLevels: string[];
  occupations: string[];
  maritalStatuses: string[];
  availabilityStatuses: AvailabilityStatus[];
}

// הגדרת מצב הממשק של הפילטרים
export interface FilterUIState {
  isOpen: boolean;
  activeCategory?: string;
  showSaveDialog: boolean;
  presetName: string;
}

// הגדרה של אירועי שינוי בפילטרים
export type FilterChangeHandler = (filters: FilterState) => void;

// הגדרת אירועי שמירת פילטר
export interface SaveFilterHandler {
  (name: string, filters: FilterState): Promise<SavedFilter>;
}

// הגדרת אירועי טעינת פילטר
export interface LoadFilterHandler {
  (id: string): void;
}

// הגדרת הגדרות הפילטרים
export interface FilterSettings {
  localStorageKey?: string;
  defaultFilters?: Partial<FilterState>;
  onFilterChange?: FilterChangeHandler;
}

// הגדרת תוצאות הפילטר
export interface FilterResults {
  totalResults: number;
  filteredResults: number;
  categories: Record<string, number>;
}

// קונסטנטות של הפילטרים
export const DEFAULT_FILTER_STATE: FilterState = {
  separateFiltering: false,
  maleFilters: {},
  femaleFilters: {},
  maleSearchQuery: '',
  femaleSearchQuery: '',
  gender: undefined,
  ageRange: { min: 18, max: 99 },
  heightRange: { min: 140, max: 210 },
  cities: [],
  occupations: [],
  religiousLevel: undefined,
  educationLevel: undefined,
  maritalStatus: undefined,
  availabilityStatus: undefined,
    source: undefined,
  userStatus: undefined,
  isVerified: undefined,
  hasReferences: undefined,
  lastActiveDays: undefined,
  isProfileComplete: undefined,
  searchQuery: '',
  savedFilterId: undefined
};

// קטגוריות פילטרים מוגדרות מראש
export const FILTER_CATEGORIES: FilterCategory[] = [
  {
    id: 'basic',
    label: 'פילטרים בסיסיים',
    filters: ['gender', 'ageRange', 'cities', 'religiousLevel']
  },
  {
    id: 'advanced',
    label: 'פילטרים מתקדמים',
    filters: ['heightRange', 'occupations', 'educationLevel', 'maritalStatus']
  },
  {
    id: 'status',
    label: 'סטטוס ואימות',
    filters: ['availabilityStatus', 'isVerified', 'hasReferences', 'lastActiveDays']
  }
];

// טיפוסי מיון
export type SortDirection = 'asc' | 'desc';

export interface SortOption {
  field: keyof FilterState;
  direction: SortDirection;
  label: string;
}

// הגדרות קיבוץ
export interface GroupOption {
  field: keyof FilterState;
  label: string;
}

export const filterConstants = {
  DEFAULT_FILTER_STATE,
  FILTER_CATEGORIES
};

export default filterConstants;
--- End of Content for filters.ts ---

================================================================================
Directory: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\suggestions
================================================================================

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\suggestions\EditSuggestionForm.tsx
--------------------------------------------------------------------------------
Content:
// EditSuggestionForm.tsx - גרסה מתורגמת ומלאה

import React, { useState } from 'react';
import {useEffect } from 'react';
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription,
  DialogFooter,
} from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';
import { Textarea } from '@/components/ui/textarea';
import { Label } from '@/components/ui/label';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select';
import { toast } from 'sonner';
import { Priority, MatchSuggestionStatus } from '@prisma/client';
import { DatePicker } from '@/components/ui/date-picker';
import type { Suggestion } from '@/types/suggestions';
import {
  RefreshCw,
  AlertTriangle,
  Calendar,
  Clock,
  User,
  MessageCircle,
  CheckCircle,
  Sparkles,
  Heart,
  Save,
  X,
  Star,
  Flame,
  Target,
  Shield,
  Crown,
} from 'lucide-react';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { Badge } from '@/components/ui/badge';
import { cn } from '@/lib/utils';
import type { MatchmakerPageDictionary } from '@/types/dictionary';

interface EditSuggestionFormProps {
  dict: MatchmakerPageDictionary['suggestionsDashboard']['editSuggestionForm'];
  isOpen: boolean;
  onClose: () => void;
  suggestion: Suggestion | null;
  onSave: (data: {
    suggestionId: string;
    updates: {
      priority?: Priority;
      status?: MatchSuggestionStatus;
      statusNotes?: string;
      matchingReason?: string;
      firstPartyNotes?: string;
      secondPartyNotes?: string;
      internalNotes?: string;
      decisionDeadline?: Date;
    };
  }) => Promise<void>;
}

const EditSuggestionForm: React.FC<EditSuggestionFormProps> = ({
  dict,
  isOpen,
  onClose,
  suggestion,
  onSave,
}) => {
  const [priority, setPriority] = useState<Priority>(Priority.MEDIUM);
  const [selectedStatus, setSelectedStatus] =
    useState<MatchSuggestionStatus | null>(null);
  const [statusNotes, setStatusNotes] = useState('');
  const [matchingReason, setMatchingReason] = useState('');
  const [firstPartyNotes, setFirstPartyNotes] = useState('');
  const [secondPartyNotes, setSecondPartyNotes] = useState('');
  const [internalNotes, setInternalNotes] = useState('');
  const [decisionDeadline, setDecisionDeadline] = useState<Date | undefined>(
    undefined
  );
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [showStatusChange, setShowStatusChange] = useState(false);

  useEffect(() => {
    if (suggestion) {
      setPriority(suggestion.priority as Priority);
      setMatchingReason(suggestion.matchingReason || '');
      setFirstPartyNotes(suggestion.firstPartyNotes || '');
      setSecondPartyNotes(suggestion.secondPartyNotes || '');
      setInternalNotes(suggestion.internalNotes || '');

      setSelectedStatus(null);
      setStatusNotes('');
      setShowStatusChange(false);

      if (suggestion.decisionDeadline) {
        const deadlineDate = new Date(suggestion.decisionDeadline);
        if (!isNaN(deadlineDate.getTime())) {
          setDecisionDeadline(deadlineDate);
        }
      } else {
        setDecisionDeadline(undefined);
      }
    }
  }, [suggestion]);

  const getStatusLabel = (statusValue: MatchSuggestionStatus): string => {
    return dict.statusLabels[statusValue] || statusValue;
  };

  const getAvailableStatuses = (): MatchSuggestionStatus[] => {
    if (!suggestion) return [];
    return Object.keys(dict.statusLabels) as MatchSuggestionStatus[];
  };

  const handleSubmit = async () => {
    if (!suggestion) {
      toast.error(dict.toasts.noSuggestionData);
      return;
    }

    setIsSubmitting(true);

    try {
      const updateData: {
        priority: Priority;
        status?: MatchSuggestionStatus;
        statusNotes?: string;
        matchingReason: string;
        firstPartyNotes: string;
        secondPartyNotes: string;
        internalNotes: string;
        decisionDeadline?: Date;
      } = {
        priority,
        matchingReason,
        firstPartyNotes,
        secondPartyNotes,
        internalNotes,
        decisionDeadline,
      };

      if (selectedStatus && selectedStatus !== suggestion.status) {
        updateData.status = selectedStatus;
        updateData.statusNotes =
          statusNotes ||
          `סטטוס שונה מ-${getStatusLabel(suggestion.status)} ל-${getStatusLabel(selectedStatus)}`; // Note: This internal-facing string may not need translation
      }

      await onSave({
        suggestionId: suggestion.id,
        updates: updateData,
      });

      toast.success(dict.toasts.updateSuccess);
      onClose();
    } catch (error) {
      console.error('Error updating suggestion:', error);
      toast.error(dict.toasts.updateError);
    } finally {
      setIsSubmitting(false);
    }
  };

  const getPriorityInfo = (p: Priority) => {
    const infoMap = {
      URGENT: { color: 'from-red-500 to-pink-500', icon: Flame, textColor: 'text-red-600' },
      HIGH: { color: 'from-orange-500 to-amber-500', icon: Star, textColor: 'text-orange-600' },
      MEDIUM: { color: 'from-blue-500 to-cyan-500', icon: Target, textColor: 'text-blue-600' },
      LOW: { color: 'from-gray-500 to-slate-500', icon: Shield, textColor: 'text-gray-600' },
    };
    return {
      label: dict.priorityLabels[p],
      ...infoMap[p],
    };
  };

  const getStatusInfo = (status: MatchSuggestionStatus) => {
    switch (status) {
      case 'PENDING_FIRST_PARTY':
      case 'PENDING_SECOND_PARTY':
        return { icon: Clock, color: 'text-yellow-600', bg: 'from-yellow-50 to-amber-50' };
      case 'FIRST_PARTY_APPROVED':
      case 'SECOND_PARTY_APPROVED':
        return { icon: CheckCircle, color: 'text-green-600', bg: 'from-green-50 to-emerald-50' };
      case 'DATING':
        return { icon: Heart, color: 'text-pink-600', bg: 'from-pink-50 to-rose-50' };
      case 'ENGAGED':
        return { icon: Crown, color: 'text-yellow-600', bg: 'from-yellow-50 to-orange-50' };
      case 'MARRIED':
        return { icon: Sparkles, color: 'text-purple-600', bg: 'from-purple-50 to-pink-50' };
      default:
        return { icon: RefreshCw, color: 'text-gray-600', bg: 'from-gray-50 to-slate-50' };
    }
  };

  if (!suggestion) return null;

  const currentPriorityInfo = getPriorityInfo(priority);
  const currentStatusInfo = getStatusInfo(suggestion.status);
  const CurrentStatusIcon = currentStatusInfo.icon;
  const CurrentPriorityIcon = currentPriorityInfo.icon;
  const fullParty1Name = `${suggestion.firstParty.firstName} ${suggestion.firstParty.lastName}`;
  const fullParty2Name = `${suggestion.secondParty.firstName} ${suggestion.secondParty.lastName}`;

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="max-w-6xl max-h-[95vh] overflow-y-auto border-0 shadow-2xl rounded-3xl p-0" dir="rtl">
        <div className={cn('relative overflow-hidden bg-gradient-to-br', currentStatusInfo.bg, 'border-b border-gray-100')}>
          <div className="absolute inset-0">
            <div className="absolute top-0 right-0 w-64 h-64 bg-gradient-to-br from-white/30 to-transparent rounded-full blur-3xl"></div>
            <div className="absolute bottom-0 left-0 w-48 h-48 bg-gradient-to-br from-white/20 to-transparent rounded-full blur-2xl"></div>
          </div>
          <div className="relative z-10 p-8">
            <DialogHeader>
              <div className="flex items-center justify-between mb-4">
                <div className="flex items-center gap-4">
                  <div className="p-3 rounded-full bg-white/20 backdrop-blur-sm shadow-lg">
                    <CurrentStatusIcon className={cn('w-8 h-8', currentStatusInfo.color)} />
                  </div>
                  <div>
                    <DialogTitle className="text-3xl font-bold text-gray-800">{dict.header.title.replace('{{id}}', suggestion.id.slice(-8))}</DialogTitle>
                    <DialogDescription className="text-lg text-gray-600 mt-1">
                      {dict.header.description.replace('{{party1}}', fullParty1Name).replace('{{party2}}', fullParty2Name)}
                    </DialogDescription>
                  </div>
                </div>
                <Button variant="ghost" size="icon" onClick={onClose} className="rounded-full h-12 w-12 text-gray-500 hover:text-gray-700 hover:bg-white/50 backdrop-blur-sm">
                  <X className="w-6 h-6" />
                </Button>
              </div>
              <div className="flex items-center gap-4">
                <Badge className={cn('px-4 py-2 font-bold shadow-lg bg-gradient-to-r text-white', currentPriorityInfo.color)}>
                  <CurrentPriorityIcon className="w-4 h-4 ml-2" />
                  {dict.header.priorityLabel.replace('{{priority}}', currentPriorityInfo.label)}
                </Badge>
                <Badge className="px-4 py-2 bg-white/20 backdrop-blur-sm text-gray-700 border border-white/30">
                  {dict.header.currentStatusLabel.replace('{{status}}', getStatusLabel(suggestion.status))}
                </Badge>
              </div>
            </DialogHeader>
          </div>
        </div>
        <div className="p-8 space-y-8">
          <Alert className="border-0 bg-gradient-to-r from-blue-50 to-cyan-50 shadow-lg rounded-2xl">
            <AlertTriangle className="h-5 w-5 text-blue-500" />
            <AlertDescription className="text-blue-800 font-medium">
              <strong>{dict.infoAlert.title}</strong> {dict.infoAlert.createdFor.replace('{{party1}}', fullParty1Name).replace('{{party2}}', fullParty2Name)}
              <br />
              <strong>{dict.infoAlert.status.replace('{{status}}', getStatusLabel(suggestion.status))}</strong> •{' '}
              <strong>{dict.infoAlert.priority.replace('{{priority}}', currentPriorityInfo.label)}</strong>
            </AlertDescription>
          </Alert>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
            <div className="space-y-4 p-6 bg-white rounded-2xl shadow-xl border-0 hover:shadow-2xl transition-all duration-300">
              <div className="flex items-center gap-3 mb-4">
                <div className={cn('p-2 rounded-full bg-gradient-to-r text-white shadow-lg', currentPriorityInfo.color)}><Star className="w-5 h-5" /></div>
                <Label className="text-lg font-bold text-gray-800">{dict.sections.priority.title}</Label>
              </div>
              <Select value={priority} onValueChange={(value) => setPriority(value as Priority)}>
                <SelectTrigger className="h-12 border-2 border-gray-200 hover:border-purple-300 focus:border-purple-500 rounded-xl transition-all">
                  <SelectValue placeholder={dict.sections.priority.placeholder} />
                </SelectTrigger>
                <SelectContent>
                  {Object.keys(dict.priorityLabels).map((p) => {
                    const info = getPriorityInfo(p as Priority);
                    const Icon = info.icon;
                    return (
                      <SelectItem key={p} value={p}>
                        <div className="flex items-center gap-2"><Icon className={cn('w-4 h-4', info.textColor)} />{info.label}</div>
                      </SelectItem>
                    );
                  })}
                </SelectContent>
              </Select>
            </div>
            <div className="space-y-4 p-6 bg-white rounded-2xl shadow-xl border-0 hover:shadow-2xl transition-all duration-300">
              <div className="flex items-center justify-between mb-4">
                <div className="flex items-center gap-3">
                  <div className="p-2 rounded-full bg-gradient-to-r from-purple-500 to-pink-500 text-white shadow-lg"><RefreshCw className="w-5 h-5" /></div>
                  <Label className="text-lg font-bold text-gray-800">{dict.sections.statusChange.title}</Label>
                </div>
                <Button type="button" variant={showStatusChange ? 'default' : 'outline'} size="sm" onClick={() => setShowStatusChange(!showStatusChange)} className={cn('rounded-xl transition-all duration-300', showStatusChange ? 'bg-gradient-to-r from-purple-600 to-pink-600 text-white shadow-lg' : 'border-2 border-purple-200 text-purple-600 hover:bg-purple-50')}>
                  <RefreshCw className="w-4 h-4 ml-2" />{showStatusChange ? dict.sections.statusChange.cancelChangeButton : dict.sections.statusChange.changeButton}
                </Button>
              </div>
              {showStatusChange && (
                <div className="space-y-4 p-4 border-2 border-purple-100 rounded-xl bg-gradient-to-r from-purple-50 to-pink-50">
                  <Select value={selectedStatus || ''} onValueChange={(value) => setSelectedStatus(value && value !== 'NO_CHANGE' ? value as MatchSuggestionStatus : null)}>
                    <SelectTrigger className="h-12 border-2 border-purple-200 bg-white"><SelectValue placeholder={dict.sections.statusChange.placeholder} /></SelectTrigger>
                    <SelectContent>
                      <SelectItem value="NO_CHANGE">{dict.sections.statusChange.noChangeOption}</SelectItem>
                      {getAvailableStatuses().map((status) => (<SelectItem key={status} value={status}>{getStatusLabel(status)}</SelectItem>))}
                    </SelectContent>
                  </Select>
                  {selectedStatus && (
                    <div>
                      <Label className="text-sm font-medium text-purple-800">{dict.sections.statusChange.notesLabel}</Label>
                      <Textarea value={statusNotes} onChange={(e) => setStatusNotes(e.target.value)} placeholder={dict.sections.statusChange.notesPlaceholder} className="mt-2 h-20 border-2 border-purple-200 focus:border-purple-400 rounded-xl" />
                    </div>
                  )}
                </div>
              )}
            </div>
          </div>
          <div className="p-6 bg-white rounded-2xl shadow-xl border-0 hover:shadow-2xl transition-all duration-300">
            <div className="flex items-center gap-3 mb-4">
              <div className="p-2 rounded-full bg-gradient-to-r from-orange-500 to-amber-500 text-white shadow-lg"><Calendar className="w-5 h-5" /></div>
              <Label className="text-lg font-bold text-gray-800">{dict.sections.decisionDeadline.title}</Label>
            </div>
            <DatePicker value={{ from: decisionDeadline, to: undefined }} onChange={({ from }) => setDecisionDeadline(from)} />
          </div>
          <div className="p-6 bg-white rounded-2xl shadow-xl border-0 hover:shadow-2xl transition-all duration-300">
            <div className="flex items-center gap-3 mb-4">
              <div className="p-2 rounded-full bg-gradient-to-r from-emerald-500 to-green-500 text-white shadow-lg"><Heart className="w-5 h-5" /></div>
              <Label className="text-lg font-bold text-gray-800">{dict.sections.matchingReason.title}</Label>
            </div>
            <Textarea value={matchingReason} onChange={(e) => setMatchingReason(e.target.value)} placeholder={dict.sections.matchingReason.placeholder} className="h-32 border-2 border-gray-200 focus:border-emerald-400 rounded-xl transition-all resize-none" />
          </div>
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
            <div className="p-6 bg-white rounded-2xl shadow-xl border-0 hover:shadow-2xl transition-all duration-300">
              <div className="flex items-center gap-3 mb-4">
                <div className="p-2 rounded-full bg-gradient-to-r from-blue-500 to-cyan-500 text-white shadow-lg"><User className="w-5 h-5" /></div>
                <Label className="text-lg font-bold text-gray-800">{dict.sections.firstPartyNotes.title.replace('{{name}}', suggestion.firstParty.firstName)}</Label>
              </div>
              <Textarea value={firstPartyNotes} onChange={(e) => setFirstPartyNotes(e.target.value)} placeholder={dict.sections.firstPartyNotes.placeholder} className="h-32 border-2 border-gray-200 focus:border-blue-400 rounded-xl transition-all resize-none" />
            </div>
            <div className="p-6 bg-white rounded-2xl shadow-xl border-0 hover:shadow-2xl transition-all duration-300">
              <div className="flex items-center gap-3 mb-4">
                <div className="p-2 rounded-full bg-gradient-to-r from-purple-500 to-pink-500 text-white shadow-lg"><User className="w-5 h-5" /></div>
                <Label className="text-lg font-bold text-gray-800">{dict.sections.secondPartyNotes.title.replace('{{name}}', suggestion.secondParty.firstName)}</Label>
              </div>
              <Textarea value={secondPartyNotes} onChange={(e) => setSecondPartyNotes(e.target.value)} placeholder={dict.sections.secondPartyNotes.placeholder} className="h-32 border-2 border-gray-200 focus:border-purple-400 rounded-xl transition-all resize-none" />
            </div>
          </div>
          <div className="p-6 bg-white rounded-2xl shadow-xl border-0 hover:shadow-2xl transition-all duration-300">
            <div className="flex items-center gap-3 mb-4">
              <div className="p-2 rounded-full bg-gradient-to-r from-amber-500 to-orange-500 text-white shadow-lg"><MessageCircle className="w-5 h-5" /></div>
              <Label className="text-lg font-bold text-gray-800">{dict.sections.internalNotes.title}</Label>
            </div>
            <Textarea value={internalNotes} onChange={(e) => setInternalNotes(e.target.value)} placeholder={dict.sections.internalNotes.placeholder} className="h-32 border-2 border-gray-200 focus:border-amber-400 rounded-xl transition-all resize-none" />
          </div>
        </div>
        <DialogFooter className="p-8 border-t border-gray-100 bg-gradient-to-r from-gray-50 to-slate-50">
          <div className="flex justify-between w-full items-center">
            <span className="text-sm text-gray-500 font-medium">{dict.footer.info}</span>
            <div className="flex gap-4">
              <Button variant="outline" onClick={onClose} disabled={isSubmitting} className="px-8 py-3 border-2 border-gray-300 hover:bg-gray-50 rounded-xl transition-all">{dict.footer.cancelButton}</Button>
              <Button onClick={handleSubmit} disabled={isSubmitting} className="px-8 py-3 bg-gradient-to-r from-purple-600 via-pink-600 to-blue-600 hover:from-purple-700 hover:via-pink-700 hover:to-blue-700 text-white shadow-xl hover:shadow-2xl transition-all duration-300 rounded-xl transform hover:scale-105">
                {isSubmitting ? (<><RefreshCw className="w-5 h-5 ml-2 animate-spin" />{dict.footer.savingButton}</>) : (<><Save className="w-5 h-5 ml-2" />{dict.footer.saveButton}</>)}
              </Button>
            </div>
          </div>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
};

export default EditSuggestionForm;
--- End of Content for EditSuggestionForm.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\suggestions\MessageForm.tsx
--------------------------------------------------------------------------------
Content:
// src/components/matchmaker/suggestions/MessageForm.tsx

import React, { useState } from 'react';
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription,
  DialogFooter,
} from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';
import { Textarea } from '@/components/ui/textarea';
import { Label } from '@/components/ui/label';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select';
import { toast } from 'sonner';
import {
  MessageCircle,
  Send,
  Users,
  User,
  Clock,
  Sparkles,
  X,
  Mail,
  Bell,
  Info,
  Heart,
  Zap,
} from 'lucide-react';
import type { Suggestion } from '@/types/suggestions';
import { Badge } from '@/components/ui/badge';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { cn } from '@/lib/utils';
import type { MatchmakerPageDictionary } from '@/types/dictionary';

interface MessageFormProps {
  isOpen: boolean;
  onClose: () => void;
  suggestion: Suggestion | null;
  onSend: (data: {
    suggestionId: string;
    partyType: 'first' | 'second' | 'both';
    messageType: 'message' | 'reminder' | 'update';
    messageContent: string;
  }) => Promise<void>;
  dict: MatchmakerPageDictionary['suggestionsDashboard']['messageForm'];
}

const MessageForm: React.FC<MessageFormProps> = ({
  isOpen,
  onClose,
  suggestion,
  onSend,
  dict,
}) => {
  const [partyType, setPartyType] = useState<'first' | 'second' | 'both'>(
    'both'
  );
  const [messageType, setMessageType] = useState<
    'message' | 'reminder' | 'update'
  >('message');
  const [messageContent, setMessageContent] = useState('');
  const [isSubmitting, setIsSubmitting] = useState(false);

  const handleSubmit = async () => {
    if (!suggestion || !messageContent.trim()) return;

    try {
      setIsSubmitting(true);
      await onSend({
        suggestionId: suggestion.id,
        partyType,
        messageType,
        messageContent,
      });

      let recipientText = '';
      if (partyType === 'first') {
        recipientText = dict.toasts.successRecipients.first.replace(
          '{{name}}',
          suggestion.firstParty.firstName
        );
      } else if (partyType === 'second') {
        recipientText = dict.toasts.successRecipients.second.replace(
          '{{name}}',
          suggestion.secondParty.firstName
        );
      } else {
        recipientText = dict.toasts.successRecipients.both;
      }
      toast.success(
        dict.toasts.success.replace('{{recipient}}', recipientText)
      );

      setMessageContent('');
      setPartyType('both');
      setMessageType('message');
      onClose();
    } catch (error) {
      toast.error(dict.toasts.error);
      console.error('Error sending message:', error);
    } finally {
      setIsSubmitting(false);
    }
  };

  const getMessageTypeInfo = (type: 'message' | 'reminder' | 'update') => {
    const infoMap = {
      message: {
        icon: MessageCircle,
        color: 'from-purple-500 to-pink-500',
        bgColor: 'from-purple-50 to-pink-50',
      },
      reminder: {
        icon: Clock,
        color: 'from-yellow-500 to-amber-500',
        bgColor: 'from-yellow-50 to-amber-50',
      },
      update: {
        icon: Info,
        color: 'from-blue-500 to-cyan-500',
        bgColor: 'from-blue-50 to-cyan-50',
      },
    };
    return {
      label: dict.messageTypes[type].label,
      description: dict.messageTypes[type].description,
      placeholder: dict.messageTypes[type].placeholder,
      ...infoMap[type],
    };
  };

  const getPartyTypeInfo = (type: 'first' | 'second' | 'both') => {
    const infoMap = {
      first: { icon: User, color: 'from-green-500 to-emerald-500' },
      second: { icon: User, color: 'from-blue-500 to-cyan-500' },
      both: { icon: Users, color: 'from-purple-500 to-pink-500' },
    };
    const labels = {
      first: dict.partyTypes.first
        .replace('{{firstName}}', suggestion?.firstParty.firstName || '')
        .replace('{{lastName}}', suggestion?.firstParty.lastName || ''),
      second: dict.partyTypes.second
        .replace('{{firstName}}', suggestion?.secondParty.firstName || '')
        .replace('{{lastName}}', suggestion?.secondParty.lastName || ''),
      both: dict.partyTypes.both,
    };
    return {
      label: labels[type],
      ...infoMap[type],
    };
  };

  if (!suggestion) return null;

  const currentMessageTypeInfo = getMessageTypeInfo(messageType);
  const currentPartyTypeInfo = getPartyTypeInfo(partyType);
  const MessageTypeIcon = currentMessageTypeInfo.icon;
  const PartyTypeIcon = currentPartyTypeInfo.icon;
  const fullParty1Name = `${suggestion.firstParty.firstName} ${suggestion.firstParty.lastName}`;
  const fullParty2Name = `${suggestion.secondParty.firstName} ${suggestion.secondParty.lastName}`;

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent
        className="max-w-4xl border-0 shadow-2xl rounded-3xl p-0 overflow-hidden"
        dir="rtl"
      >
        <div
          className={cn(
            'relative overflow-hidden bg-gradient-to-br',
            currentMessageTypeInfo.bgColor,
            'border-b border-gray-100'
          )}
        >
          <div className="absolute inset-0">
            <div className="absolute top-0 right-0 w-64 h-64 bg-gradient-to-br from-white/30 to-transparent rounded-full blur-3xl"></div>
            <div className="absolute bottom-0 left-0 w-48 h-48 bg-gradient-to-br from-white/20 to-transparent rounded-full blur-2xl"></div>
          </div>
          <div className="relative z-10 p-8">
            <DialogHeader>
              <div className="flex items-center justify-between mb-4">
                <div className="flex items-center gap-4">
                  <div className="p-3 rounded-full bg-white/20 backdrop-blur-sm shadow-lg">
                    <Send className="w-8 h-8 text-purple-600" />
                  </div>
                  <div>
                    <DialogTitle className="text-3xl font-bold text-gray-800">
                      {dict.header.title}
                    </DialogTitle>
                    <DialogDescription className="text-lg text-gray-600 mt-1">
                      {dict.header.description
                        .replace('{{party1}}', fullParty1Name)
                        .replace('{{party2}}', fullParty2Name)}
                    </DialogDescription>
                  </div>
                </div>
                <Button
                  variant="ghost"
                  size="icon"
                  onClick={onClose}
                  className="rounded-full h-12 w-12 text-gray-500 hover:text-gray-700 hover:bg-white/50 backdrop-blur-sm"
                >
                  <X className="w-6 h-6" />
                </Button>
              </div>
              <div className="flex items-center gap-4">
                <Badge
                  className={cn(
                    'px-4 py-2 font-bold shadow-lg bg-gradient-to-r text-white',
                    currentMessageTypeInfo.color
                  )}
                >
                  <MessageTypeIcon className="w-4 h-4 ml-2" />
                  {currentMessageTypeInfo.label}
                </Badge>
                <Badge
                  className={cn(
                    'px-4 py-2 font-bold shadow-lg bg-gradient-to-r text-white',
                    currentPartyTypeInfo.color
                  )}
                >
                  <PartyTypeIcon className="w-4 h-4 ml-2" />
                  {currentPartyTypeInfo.label}
                </Badge>
              </div>
            </DialogHeader>
          </div>
        </div>
        <div className="p-8 space-y-8">
          <Alert className="border-0 bg-gradient-to-r from-indigo-50 to-purple-50 shadow-lg rounded-2xl">
            <Heart className="h-5 w-5 text-indigo-500" />
            <AlertDescription className="text-indigo-800 font-medium">
              <strong>
                {dict.infoAlert.suggestionPrefix}
                {suggestion.id.slice(-8)}:
              </strong>{' '}
              {dict.infoAlert.body}
              <br />
              <strong>{dict.infoAlert.statusLabel}</strong> {suggestion.status}{' '}
              • <strong>{dict.infoAlert.priorityLabel}</strong>{' '}
              {suggestion.priority}
            </AlertDescription>
          </Alert>
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
            <div className="p-6 bg-white rounded-2xl shadow-xl border-0 hover:shadow-2xl transition-all duration-300">
              <div className="flex items-center gap-3 mb-4">
                <div className="p-2 rounded-full bg-gradient-to-r from-green-500 to-emerald-500 text-white shadow-lg">
                  <Users className="w-5 h-5" />
                </div>
                <Label className="text-lg font-bold text-gray-800">
                  {dict.form.recipientLabel}
                </Label>
              </div>
              <Select
                value={partyType}
                onValueChange={(value) =>
                  setPartyType(value as 'first' | 'second' | 'both')
                }
              >
                <SelectTrigger className="h-12 border-2 border-gray-200 hover:border-green-300 focus:border-green-500 rounded-xl transition-all">
                  <SelectValue placeholder={dict.form.recipientPlaceholder} />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="first">
                    <div className="flex items-center gap-3">
                      <User className="w-4 h-4 text-green-500" />
                      {getPartyTypeInfo('first').label}
                    </div>
                  </SelectItem>
                  <SelectItem value="second">
                    <div className="flex items-center gap-3">
                      <User className="w-4 h-4 text-blue-500" />
                      {getPartyTypeInfo('second').label}
                    </div>
                  </SelectItem>
                  <SelectItem value="both">
                    <div className="flex items-center gap-3">
                      <Users className="w-4 h-4 text-purple-500" />
                      {getPartyTypeInfo('both').label}
                    </div>
                  </SelectItem>
                </SelectContent>
              </Select>
              <div className="mt-3 p-3 bg-green-50 rounded-xl">
                <p className="text-sm text-green-700">
                  <PartyTypeIcon className="w-4 h-4 inline ml-1" />
                  {dict.form.recipientSelectedPrefix}{' '}
                  {currentPartyTypeInfo.label}
                </p>
              </div>
            </div>
            <div className="p-6 bg-white rounded-2xl shadow-xl border-0 hover:shadow-2xl transition-all duration-300">
              <div className="flex items-center gap-3 mb-4">
                <div
                  className={cn(
                    'p-2 rounded-full bg-gradient-to-r text-white shadow-lg',
                    currentMessageTypeInfo.color
                  )}
                >
                  <MessageTypeIcon className="w-5 h-5" />
                </div>
                <Label className="text-lg font-bold text-gray-800">
                  {dict.form.messageTypeLabel}
                </Label>
              </div>
              <Select
                value={messageType}
                onValueChange={(value) =>
                  setMessageType(value as 'message' | 'reminder' | 'update')
                }
              >
                <SelectTrigger className="h-12 border-2 border-gray-200 hover:border-purple-300 focus:border-purple-500 rounded-xl transition-all">
                  <SelectValue placeholder={dict.form.messageTypePlaceholder} />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="message">
                    <div className="flex items-center gap-3">
                      <MessageCircle className="w-4 h-4 text-purple-500" />
                      {dict.messageTypes.message.label}
                    </div>
                  </SelectItem>
                  <SelectItem value="reminder">
                    <div className="flex items-center gap-3">
                      <Clock className="w-4 h-4 text-yellow-500" />
                      {dict.messageTypes.reminder.label}
                    </div>
                  </SelectItem>
                  <SelectItem value="update">
                    <div className="flex items-center gap-3">
                      <Info className="w-4 h-4 text-blue-500" />
                      {dict.messageTypes.update.label}
                    </div>
                  </SelectItem>
                </SelectContent>
              </Select>
              <div
                className={cn(
                  'mt-3 p-3 rounded-xl bg-gradient-to-r',
                  currentMessageTypeInfo.bgColor
                )}
              >
                <p
                  className="text-sm font-medium"
                  style={{ color: currentMessageTypeInfo.color.split(' ')[1] }}
                >
                  <MessageTypeIcon className="w-4 h-4 inline ml-1" />
                  {currentMessageTypeInfo.description}
                </p>
              </div>
            </div>
          </div>
          <div className="p-6 bg-white rounded-2xl shadow-xl border-0 hover:shadow-2xl transition-all duration-300">
            <div className="flex items-center gap-3 mb-4">
              <div className="p-2 rounded-full bg-gradient-to-r from-indigo-500 to-purple-500 text-white shadow-lg">
                <Mail className="w-5 h-5" />
              </div>
              <Label className="text-lg font-bold text-gray-800">
                {dict.form.messageContentLabel}
              </Label>
            </div>
            <Textarea
              value={messageContent}
              onChange={(e) => setMessageContent(e.target.value)}
              placeholder={currentMessageTypeInfo.placeholder}
              className="h-48 border-2 border-gray-200 focus:border-indigo-400 rounded-xl transition-all resize-none text-lg"
              dir="rtl"
            />
            <div className="mt-3 flex items-center justify-between">
              <div className="flex items-center gap-2 text-sm text-gray-500">
                <Sparkles className="w-4 h-4" />
                <span>{dict.form.signatureNotice}</span>
              </div>
              <div className="text-sm text-gray-500">
                {dict.form.charsCount.replace(
                  '{{count}}',
                  messageContent.length.toString()
                )}
              </div>
            </div>
          </div>
          {messageContent.trim() && (
            <div className="p-6 bg-gradient-to-r from-gray-50 to-slate-50 rounded-2xl border-2 border-gray-200">
              <div className="flex items-center gap-3 mb-4">
                <div className="p-2 rounded-full bg-gradient-to-r from-gray-500 to-slate-500 text-white shadow-lg">
                  <Zap className="w-5 h-5" />
                </div>
                <h3 className="text-lg font-bold text-gray-800">
                  {dict.preview.title}
                </h3>
              </div>
              <div className="bg-white p-4 rounded-xl border-2 border-gray-100 shadow-inner">
                <div className="text-sm text-gray-600 mb-2">
                  {dict.preview.recipientLabel} {currentPartyTypeInfo.label} •{' '}
                  {dict.preview.typeLabel} {currentMessageTypeInfo.label}
                </div>
                <div className="text-gray-800 leading-relaxed whitespace-pre-wrap">
                  {messageContent}
                </div>
                <div className="mt-4 pt-3 border-t border-gray-100 text-xs text-gray-500">
                  {dict.preview.signature.greeting}
                  <br />
                  {dict.preview.signature.team}
                </div>
              </div>
            </div>
          )}
        </div>
        <DialogFooter className="p-8 border-t border-gray-100 bg-gradient-to-r from-gray-50 to-slate-50">
          <div className="flex justify-between w-full items-center">
            <div className="flex items-center gap-2 text-sm text-gray-500">
              <Bell className="w-4 h-4" />
              <span>{dict.footer.notificationNotice}</span>
            </div>
            <div className="flex gap-4">
              <Button
                variant="outline"
                onClick={onClose}
                disabled={isSubmitting}
                className="px-8 py-3 border-2 border-gray-300 hover:bg-gray-50 rounded-xl transition-all"
              >
                {dict.footer.cancelButton}
              </Button>
              <Button
                onClick={handleSubmit}
                disabled={isSubmitting || !messageContent.trim()}
                className="px-8 py-3 bg-gradient-to-r from-purple-600 via-pink-600 to-blue-600 hover:from-purple-700 hover:via-pink-700 hover:to-blue-700 text-white shadow-xl hover:shadow-2xl transition-all duration-300 rounded-xl transform hover:scale-105"
              >
                {isSubmitting ? (
                  <>
                    <Send className="w-5 h-5 ml-2 animate-pulse" />
                    {dict.footer.sendingButton}
                  </>
                ) : (
                  <>
                    <Send className="w-5 h-5 ml-2" />
                    {dict.footer.sendButton}
                  </>
                )}
              </Button>
            </div>
          </div>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
};

export default MessageForm;
--- End of Content for MessageForm.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\suggestions\suggestions_contents.txt
--------------------------------------------------------------------------------
Content:
################################################################################
# Directory Content Map For: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\suggestions
# Generated on: 2025-08-24 17:41:15
################################################################################

================================================================================
Directory: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\suggestions
================================================================================

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\suggestions\EditSuggestionForm.tsx
--------------------------------------------------------------------------------
Content:
// EditSuggestionForm.tsx - גרסה מתורגמת ומלאה

import React, { useState } from 'react';
import {useEffect } from 'react';
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription,
  DialogFooter,
} from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';
import { Textarea } from '@/components/ui/textarea';
import { Label } from '@/components/ui/label';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select';
import { toast } from 'sonner';
import { Priority, MatchSuggestionStatus } from '@prisma/client';
import { DatePicker } from '@/components/ui/date-picker';
import type { Suggestion } from '@/types/suggestions';
import {
  RefreshCw,
  AlertTriangle,
  Calendar,
  Clock,
  User,
  MessageCircle,
  CheckCircle,
  Sparkles,
  Heart,
  Save,
  X,
  Star,
  Flame,
  Target,
  Shield,
  Crown,
} from 'lucide-react';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { Badge } from '@/components/ui/badge';
import { cn } from '@/lib/utils';
import type { MatchmakerPageDictionary } from '@/types/dictionary';

interface EditSuggestionFormProps {
  dict: MatchmakerPageDictionary['suggestionsDashboard']['editSuggestionForm'];
  isOpen: boolean;
  onClose: () => void;
  suggestion: Suggestion | null;
  onSave: (data: {
    suggestionId: string;
    updates: {
      priority?: Priority;
      status?: MatchSuggestionStatus;
      statusNotes?: string;
      matchingReason?: string;
      firstPartyNotes?: string;
      secondPartyNotes?: string;
      internalNotes?: string;
      decisionDeadline?: Date;
    };
  }) => Promise<void>;
}

const EditSuggestionForm: React.FC<EditSuggestionFormProps> = ({
  dict,
  isOpen,
  onClose,
  suggestion,
  onSave,
}) => {
  const [priority, setPriority] = useState<Priority>(Priority.MEDIUM);
  const [selectedStatus, setSelectedStatus] =
    useState<MatchSuggestionStatus | null>(null);
  const [statusNotes, setStatusNotes] = useState('');
  const [matchingReason, setMatchingReason] = useState('');
  const [firstPartyNotes, setFirstPartyNotes] = useState('');
  const [secondPartyNotes, setSecondPartyNotes] = useState('');
  const [internalNotes, setInternalNotes] = useState('');
  const [decisionDeadline, setDecisionDeadline] = useState<Date | undefined>(
    undefined
  );
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [showStatusChange, setShowStatusChange] = useState(false);

  useEffect(() => {
    if (suggestion) {
      setPriority(suggestion.priority as Priority);
      setMatchingReason(suggestion.matchingReason || '');
      setFirstPartyNotes(suggestion.firstPartyNotes || '');
      setSecondPartyNotes(suggestion.secondPartyNotes || '');
      setInternalNotes(suggestion.internalNotes || '');

      setSelectedStatus(null);
      setStatusNotes('');
      setShowStatusChange(false);

      if (suggestion.decisionDeadline) {
        const deadlineDate = new Date(suggestion.decisionDeadline);
        if (!isNaN(deadlineDate.getTime())) {
          setDecisionDeadline(deadlineDate);
        }
      } else {
        setDecisionDeadline(undefined);
      }
    }
  }, [suggestion]);

  const getStatusLabel = (statusValue: MatchSuggestionStatus): string => {
    return dict.statusLabels[statusValue] || statusValue;
  };

  const getAvailableStatuses = (): MatchSuggestionStatus[] => {
    if (!suggestion) return [];
    return Object.keys(dict.statusLabels) as MatchSuggestionStatus[];
  };

  const handleSubmit = async () => {
    if (!suggestion) {
      toast.error(dict.toasts.noSuggestionData);
      return;
    }

    setIsSubmitting(true);

    try {
      const updateData: {
        priority: Priority;
        status?: MatchSuggestionStatus;
        statusNotes?: string;
        matchingReason: string;
        firstPartyNotes: string;
        secondPartyNotes: string;
        internalNotes: string;
        decisionDeadline?: Date;
      } = {
        priority,
        matchingReason,
        firstPartyNotes,
        secondPartyNotes,
        internalNotes,
        decisionDeadline,
      };

      if (selectedStatus && selectedStatus !== suggestion.status) {
        updateData.status = selectedStatus;
        updateData.statusNotes =
          statusNotes ||
          `סטטוס שונה מ-${getStatusLabel(suggestion.status)} ל-${getStatusLabel(selectedStatus)}`; // Note: This internal-facing string may not need translation
      }

      await onSave({
        suggestionId: suggestion.id,
        updates: updateData,
      });

      toast.success(dict.toasts.updateSuccess);
      onClose();
    } catch (error) {
      console.error('Error updating suggestion:', error);
      toast.error(dict.toasts.updateError);
    } finally {
      setIsSubmitting(false);
    }
  };

  const getPriorityInfo = (p: Priority) => {
    const infoMap = {
      URGENT: { color: 'from-red-500 to-pink-500', icon: Flame, textColor: 'text-red-600' },
      HIGH: { color: 'from-orange-500 to-amber-500', icon: Star, textColor: 'text-orange-600' },
      MEDIUM: { color: 'from-blue-500 to-cyan-500', icon: Target, textColor: 'text-blue-600' },
      LOW: { color: 'from-gray-500 to-slate-500', icon: Shield, textColor: 'text-gray-600' },
    };
    return {
      label: dict.priorityLabels[p],
      ...infoMap[p],
    };
  };

  const getStatusInfo = (status: MatchSuggestionStatus) => {
    switch (status) {
      case 'PENDING_FIRST_PARTY':
      case 'PENDING_SECOND_PARTY':
        return { icon: Clock, color: 'text-yellow-600', bg: 'from-yellow-50 to-amber-50' };
      case 'FIRST_PARTY_APPROVED':
      case 'SECOND_PARTY_APPROVED':
        return { icon: CheckCircle, color: 'text-green-600', bg: 'from-green-50 to-emerald-50' };
      case 'DATING':
        return { icon: Heart, color: 'text-pink-600', bg: 'from-pink-50 to-rose-50' };
      case 'ENGAGED':
        return { icon: Crown, color: 'text-yellow-600', bg: 'from-yellow-50 to-orange-50' };
      case 'MARRIED':
        return { icon: Sparkles, color: 'text-purple-600', bg: 'from-purple-50 to-pink-50' };
      default:
        return { icon: RefreshCw, color: 'text-gray-600', bg: 'from-gray-50 to-slate-50' };
    }
  };

  if (!suggestion) return null;

  const currentPriorityInfo = getPriorityInfo(priority);
  const currentStatusInfo = getStatusInfo(suggestion.status);
  const CurrentStatusIcon = currentStatusInfo.icon;
  const CurrentPriorityIcon = currentPriorityInfo.icon;
  const fullParty1Name = `${suggestion.firstParty.firstName} ${suggestion.firstParty.lastName}`;
  const fullParty2Name = `${suggestion.secondParty.firstName} ${suggestion.secondParty.lastName}`;

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="max-w-6xl max-h-[95vh] overflow-y-auto border-0 shadow-2xl rounded-3xl p-0" dir="rtl">
        <div className={cn('relative overflow-hidden bg-gradient-to-br', currentStatusInfo.bg, 'border-b border-gray-100')}>
          <div className="absolute inset-0">
            <div className="absolute top-0 right-0 w-64 h-64 bg-gradient-to-br from-white/30 to-transparent rounded-full blur-3xl"></div>
            <div className="absolute bottom-0 left-0 w-48 h-48 bg-gradient-to-br from-white/20 to-transparent rounded-full blur-2xl"></div>
          </div>
          <div className="relative z-10 p-8">
            <DialogHeader>
              <div className="flex items-center justify-between mb-4">
                <div className="flex items-center gap-4">
                  <div className="p-3 rounded-full bg-white/20 backdrop-blur-sm shadow-lg">
                    <CurrentStatusIcon className={cn('w-8 h-8', currentStatusInfo.color)} />
                  </div>
                  <div>
                    <DialogTitle className="text-3xl font-bold text-gray-800">{dict.header.title.replace('{{id}}', suggestion.id.slice(-8))}</DialogTitle>
                    <DialogDescription className="text-lg text-gray-600 mt-1">
                      {dict.header.description.replace('{{party1}}', fullParty1Name).replace('{{party2}}', fullParty2Name)}
                    </DialogDescription>
                  </div>
                </div>
                <Button variant="ghost" size="icon" onClick={onClose} className="rounded-full h-12 w-12 text-gray-500 hover:text-gray-700 hover:bg-white/50 backdrop-blur-sm">
                  <X className="w-6 h-6" />
                </Button>
              </div>
              <div className="flex items-center gap-4">
                <Badge className={cn('px-4 py-2 font-bold shadow-lg bg-gradient-to-r text-white', currentPriorityInfo.color)}>
                  <CurrentPriorityIcon className="w-4 h-4 ml-2" />
                  {dict.header.priorityLabel.replace('{{priority}}', currentPriorityInfo.label)}
                </Badge>
                <Badge className="px-4 py-2 bg-white/20 backdrop-blur-sm text-gray-700 border border-white/30">
                  {dict.header.currentStatusLabel.replace('{{status}}', getStatusLabel(suggestion.status))}
                </Badge>
              </div>
            </DialogHeader>
          </div>
        </div>
        <div className="p-8 space-y-8">
          <Alert className="border-0 bg-gradient-to-r from-blue-50 to-cyan-50 shadow-lg rounded-2xl">
            <AlertTriangle className="h-5 w-5 text-blue-500" />
            <AlertDescription className="text-blue-800 font-medium">
              <strong>{dict.infoAlert.title}</strong> {dict.infoAlert.createdFor.replace('{{party1}}', fullParty1Name).replace('{{party2}}', fullParty2Name)}
              <br />
              <strong>{dict.infoAlert.status.replace('{{status}}', getStatusLabel(suggestion.status))}</strong> •{' '}
              <strong>{dict.infoAlert.priority.replace('{{priority}}', currentPriorityInfo.label)}</strong>
            </AlertDescription>
          </Alert>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
            <div className="space-y-4 p-6 bg-white rounded-2xl shadow-xl border-0 hover:shadow-2xl transition-all duration-300">
              <div className="flex items-center gap-3 mb-4">
                <div className={cn('p-2 rounded-full bg-gradient-to-r text-white shadow-lg', currentPriorityInfo.color)}><Star className="w-5 h-5" /></div>
                <Label className="text-lg font-bold text-gray-800">{dict.sections.priority.title}</Label>
              </div>
              <Select value={priority} onValueChange={(value) => setPriority(value as Priority)}>
                <SelectTrigger className="h-12 border-2 border-gray-200 hover:border-purple-300 focus:border-purple-500 rounded-xl transition-all">
                  <SelectValue placeholder={dict.sections.priority.placeholder} />
                </SelectTrigger>
                <SelectContent>
                  {Object.keys(dict.priorityLabels).map((p) => {
                    const info = getPriorityInfo(p as Priority);
                    const Icon = info.icon;
                    return (
                      <SelectItem key={p} value={p}>
                        <div className="flex items-center gap-2"><Icon className={cn('w-4 h-4', info.textColor)} />{info.label}</div>
                      </SelectItem>
                    );
                  })}
                </SelectContent>
              </Select>
            </div>
            <div className="space-y-4 p-6 bg-white rounded-2xl shadow-xl border-0 hover:shadow-2xl transition-all duration-300">
              <div className="flex items-center justify-between mb-4">
                <div className="flex items-center gap-3">
                  <div className="p-2 rounded-full bg-gradient-to-r from-purple-500 to-pink-500 text-white shadow-lg"><RefreshCw className="w-5 h-5" /></div>
                  <Label className="text-lg font-bold text-gray-800">{dict.sections.statusChange.title}</Label>
                </div>
                <Button type="button" variant={showStatusChange ? 'default' : 'outline'} size="sm" onClick={() => setShowStatusChange(!showStatusChange)} className={cn('rounded-xl transition-all duration-300', showStatusChange ? 'bg-gradient-to-r from-purple-600 to-pink-600 text-white shadow-lg' : 'border-2 border-purple-200 text-purple-600 hover:bg-purple-50')}>
                  <RefreshCw className="w-4 h-4 ml-2" />{showStatusChange ? dict.sections.statusChange.cancelChangeButton : dict.sections.statusChange.changeButton}
                </Button>
              </div>
              {showStatusChange && (
                <div className="space-y-4 p-4 border-2 border-purple-100 rounded-xl bg-gradient-to-r from-purple-50 to-pink-50">
                  <Select value={selectedStatus || ''} onValueChange={(value) => setSelectedStatus(value && value !== 'NO_CHANGE' ? value as MatchSuggestionStatus : null)}>
                    <SelectTrigger className="h-12 border-2 border-purple-200 bg-white"><SelectValue placeholder={dict.sections.statusChange.placeholder} /></SelectTrigger>
                    <SelectContent>
                      <SelectItem value="NO_CHANGE">{dict.sections.statusChange.noChangeOption}</SelectItem>
                      {getAvailableStatuses().map((status) => (<SelectItem key={status} value={status}>{getStatusLabel(status)}</SelectItem>))}
                    </SelectContent>
                  </Select>
                  {selectedStatus && (
                    <div>
                      <Label className="text-sm font-medium text-purple-800">{dict.sections.statusChange.notesLabel}</Label>
                      <Textarea value={statusNotes} onChange={(e) => setStatusNotes(e.target.value)} placeholder={dict.sections.statusChange.notesPlaceholder} className="mt-2 h-20 border-2 border-purple-200 focus:border-purple-400 rounded-xl" />
                    </div>
                  )}
                </div>
              )}
            </div>
          </div>
          <div className="p-6 bg-white rounded-2xl shadow-xl border-0 hover:shadow-2xl transition-all duration-300">
            <div className="flex items-center gap-3 mb-4">
              <div className="p-2 rounded-full bg-gradient-to-r from-orange-500 to-amber-500 text-white shadow-lg"><Calendar className="w-5 h-5" /></div>
              <Label className="text-lg font-bold text-gray-800">{dict.sections.decisionDeadline.title}</Label>
            </div>
            <DatePicker value={{ from: decisionDeadline, to: undefined }} onChange={({ from }) => setDecisionDeadline(from)} />
          </div>
          <div className="p-6 bg-white rounded-2xl shadow-xl border-0 hover:shadow-2xl transition-all duration-300">
            <div className="flex items-center gap-3 mb-4">
              <div className="p-2 rounded-full bg-gradient-to-r from-emerald-500 to-green-500 text-white shadow-lg"><Heart className="w-5 h-5" /></div>
              <Label className="text-lg font-bold text-gray-800">{dict.sections.matchingReason.title}</Label>
            </div>
            <Textarea value={matchingReason} onChange={(e) => setMatchingReason(e.target.value)} placeholder={dict.sections.matchingReason.placeholder} className="h-32 border-2 border-gray-200 focus:border-emerald-400 rounded-xl transition-all resize-none" />
          </div>
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
            <div className="p-6 bg-white rounded-2xl shadow-xl border-0 hover:shadow-2xl transition-all duration-300">
              <div className="flex items-center gap-3 mb-4">
                <div className="p-2 rounded-full bg-gradient-to-r from-blue-500 to-cyan-500 text-white shadow-lg"><User className="w-5 h-5" /></div>
                <Label className="text-lg font-bold text-gray-800">{dict.sections.firstPartyNotes.title.replace('{{name}}', suggestion.firstParty.firstName)}</Label>
              </div>
              <Textarea value={firstPartyNotes} onChange={(e) => setFirstPartyNotes(e.target.value)} placeholder={dict.sections.firstPartyNotes.placeholder} className="h-32 border-2 border-gray-200 focus:border-blue-400 rounded-xl transition-all resize-none" />
            </div>
            <div className="p-6 bg-white rounded-2xl shadow-xl border-0 hover:shadow-2xl transition-all duration-300">
              <div className="flex items-center gap-3 mb-4">
                <div className="p-2 rounded-full bg-gradient-to-r from-purple-500 to-pink-500 text-white shadow-lg"><User className="w-5 h-5" /></div>
                <Label className="text-lg font-bold text-gray-800">{dict.sections.secondPartyNotes.title.replace('{{name}}', suggestion.secondParty.firstName)}</Label>
              </div>
              <Textarea value={secondPartyNotes} onChange={(e) => setSecondPartyNotes(e.target.value)} placeholder={dict.sections.secondPartyNotes.placeholder} className="h-32 border-2 border-gray-200 focus:border-purple-400 rounded-xl transition-all resize-none" />
            </div>
          </div>
          <div className="p-6 bg-white rounded-2xl shadow-xl border-0 hover:shadow-2xl transition-all duration-300">
            <div className="flex items-center gap-3 mb-4">
              <div className="p-2 rounded-full bg-gradient-to-r from-amber-500 to-orange-500 text-white shadow-lg"><MessageCircle className="w-5 h-5" /></div>
              <Label className="text-lg font-bold text-gray-800">{dict.sections.internalNotes.title}</Label>
            </div>
            <Textarea value={internalNotes} onChange={(e) => setInternalNotes(e.target.value)} placeholder={dict.sections.internalNotes.placeholder} className="h-32 border-2 border-gray-200 focus:border-amber-400 rounded-xl transition-all resize-none" />
          </div>
        </div>
        <DialogFooter className="p-8 border-t border-gray-100 bg-gradient-to-r from-gray-50 to-slate-50">
          <div className="flex justify-between w-full items-center">
            <span className="text-sm text-gray-500 font-medium">{dict.footer.info}</span>
            <div className="flex gap-4">
              <Button variant="outline" onClick={onClose} disabled={isSubmitting} className="px-8 py-3 border-2 border-gray-300 hover:bg-gray-50 rounded-xl transition-all">{dict.footer.cancelButton}</Button>
              <Button onClick={handleSubmit} disabled={isSubmitting} className="px-8 py-3 bg-gradient-to-r from-purple-600 via-pink-600 to-blue-600 hover:from-purple-700 hover:via-pink-700 hover:to-blue-700 text-white shadow-xl hover:shadow-2xl transition-all duration-300 rounded-xl transform hover:scale-105">
                {isSubmitting ? (<><RefreshCw className="w-5 h-5 ml-2 animate-spin" />{dict.footer.savingButton}</>) : (<><Save className="w-5 h-5 ml-2" />{dict.footer.saveButton}</>)}
              </Button>
            </div>
          </div>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
};

export default EditSuggestionForm;
--- End of Content for EditSuggestionForm.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\suggestions\MessageForm.tsx
--------------------------------------------------------------------------------
Content:
import React, { useState } from 'react';
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription,
  DialogFooter,
} from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';
import { Textarea } from '@/components/ui/textarea';
import { Label } from '@/components/ui/label';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select';
import { toast } from 'sonner';
import {
  MessageCircle,
  Send,
  AlertCircle,
  Users,
  User,
  Clock,
  Sparkles,
  X,
  Mail,
  Bell,
  Info,
  Heart,
  Zap,
} from 'lucide-react';
import type { Suggestion } from '@/types/suggestions';
import { Badge } from '@/components/ui/badge';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { cn } from '@/lib/utils';

interface MessageFormProps {
  isOpen: boolean;
  onClose: () => void;
  suggestion: Suggestion | null;
  onSend: (data: {
    suggestionId: string;
    partyType: 'first' | 'second' | 'both';
    messageType: 'message' | 'reminder' | 'update';
    messageContent: string;
  }) => Promise<void>;
}

const MessageForm: React.FC<MessageFormProps> = ({
  isOpen,
  onClose,
  suggestion,
  onSend,
}) => {
  const [partyType, setPartyType] = useState<'first' | 'second' | 'both'>(
    'both'
  );
  const [messageType, setMessageType] = useState<
    'message' | 'reminder' | 'update'
  >('message');
  const [messageContent, setMessageContent] = useState('');
  const [isSubmitting, setIsSubmitting] = useState(false);

  const handleSubmit = async () => {
    if (!suggestion || !messageContent.trim()) return;

    try {
      setIsSubmitting(true);

      await onSend({
        suggestionId: suggestion.id,
        partyType,
        messageType,
        messageContent,
      });

      toast.success(
        `ההודעה נשלחה ${
          partyType === 'first'
            ? `ל${suggestion.firstParty.firstName}`
            : partyType === 'second'
              ? `ל${suggestion.secondParty.firstName}`
              : 'לשני הצדדים'
        }`
      );

      // Reset form
      setMessageContent('');
      setPartyType('both');
      setMessageType('message');
      onClose();
    } catch (error) {
      toast.error('שגיאה בשליחת ההודעה');
      console.error('Error sending message:', error);
    } finally {
      setIsSubmitting(false);
    }
  };

  const getMessagePlaceholder = () => {
    switch (messageType) {
      case 'reminder':
        return 'הודעת תזכורת למועמד/ת לגבי ההצעה...';
      case 'update':
        return 'עדכון לגבי סטטוס ההצעה או מידע חדש...';
      default:
        return 'הודעה אישית למועמד/ת...';
    }
  };

  const getMessageTypeInfo = (type: string) => {
    switch (type) {
      case 'reminder':
        return {
          label: 'תזכורת',
          icon: Clock,
          color: 'from-yellow-500 to-amber-500',
          bgColor: 'from-yellow-50 to-amber-50',
          description: 'הודעה להזכרה על ההצעה או פעולה נדרשת',
        };
      case 'update':
        return {
          label: 'עדכון סטטוס',
          icon: Info,
          color: 'from-blue-500 to-cyan-500',
          bgColor: 'from-blue-50 to-cyan-50',
          description: 'עדכון על שינוי במצב ההצעה או מידע חדש',
        };
      default:
        return {
          label: 'הודעה רגילה',
          icon: MessageCircle,
          color: 'from-purple-500 to-pink-500',
          bgColor: 'from-purple-50 to-pink-50',
          description: 'הודעה אישית כללית',
        };
    }
  };

  const getPartyTypeInfo = (type: string) => {
    switch (type) {
      case 'first':
        return {
          label: `${suggestion?.firstParty.firstName} ${suggestion?.firstParty.lastName} (צד א')`,
          icon: User,
          color: 'from-green-500 to-emerald-500',
        };
      case 'second':
        return {
          label: `${suggestion?.secondParty.firstName} ${suggestion?.secondParty.lastName} (צד ב')`,
          icon: User,
          color: 'from-blue-500 to-cyan-500',
        };
      default:
        return {
          label: 'שני הצדדים',
          icon: Users,
          color: 'from-purple-500 to-pink-500',
        };
    }
  };

  if (!suggestion) return null;

  const messageTypeInfo = getMessageTypeInfo(messageType);
  const partyTypeInfo = getPartyTypeInfo(partyType);
  const MessageTypeIcon = messageTypeInfo.icon;
  const PartyTypeIcon = partyTypeInfo.icon;

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent
        className="max-w-4xl border-0 shadow-2xl rounded-3xl p-0 overflow-hidden"
        dir="rtl"
      >
        {/* Hero Header */}
        <div
          className={cn(
            'relative overflow-hidden bg-gradient-to-br',
            messageTypeInfo.bgColor,
            'border-b border-gray-100'
          )}
        >
          <div className="absolute inset-0">
            <div className="absolute top-0 right-0 w-64 h-64 bg-gradient-to-br from-white/30 to-transparent rounded-full blur-3xl"></div>
            <div className="absolute bottom-0 left-0 w-48 h-48 bg-gradient-to-br from-white/20 to-transparent rounded-full blur-2xl"></div>
          </div>

          <div className="relative z-10 p-8">
            <DialogHeader>
              <div className="flex items-center justify-between mb-4">
                <div className="flex items-center gap-4">
                  <div className="p-3 rounded-full bg-white/20 backdrop-blur-sm shadow-lg">
                    <Send className="w-8 h-8 text-purple-600" />
                  </div>
                  <div>
                    <DialogTitle className="text-3xl font-bold text-gray-800">
                      שליחת הודעה
                    </DialogTitle>
                    <DialogDescription className="text-lg text-gray-600 mt-1">
                      שליחת הודעה הקשורה להצעת השידוך בין{' '}
                      {suggestion.firstParty.firstName}{' '}
                      {suggestion.firstParty.lastName} ל
                      {suggestion.secondParty.firstName}{' '}
                      {suggestion.secondParty.lastName}
                    </DialogDescription>
                  </div>
                </div>

                <Button
                  variant="ghost"
                  size="icon"
                  onClick={onClose}
                  className="rounded-full h-12 w-12 text-gray-500 hover:text-gray-700 hover:bg-white/50 backdrop-blur-sm"
                >
                  <X className="w-6 h-6" />
                </Button>
              </div>

              <div className="flex items-center gap-4">
                <Badge
                  className={cn(
                    'px-4 py-2 font-bold shadow-lg bg-gradient-to-r text-white',
                    messageTypeInfo.color
                  )}
                >
                  <MessageTypeIcon className="w-4 h-4 ml-2" />
                  {messageTypeInfo.label}
                </Badge>

                <Badge
                  className={cn(
                    'px-4 py-2 font-bold shadow-lg bg-gradient-to-r text-white',
                    partyTypeInfo.color
                  )}
                >
                  <PartyTypeIcon className="w-4 h-4 ml-2" />
                  {partyTypeInfo.label}
                </Badge>
              </div>
            </DialogHeader>
          </div>
        </div>

        <div className="p-8 space-y-8">
          {/* Suggestion Info Alert */}
          <Alert className="border-0 bg-gradient-to-r from-indigo-50 to-purple-50 shadow-lg rounded-2xl">
            <Heart className="h-5 w-5 text-indigo-500" />
            <AlertDescription className="text-indigo-800 font-medium">
              <strong>הצעה #{suggestion.id.slice(-8)}:</strong> הודעה זו תישלח
              במסגרת הצעת השידוך הפעילה.
              <br />
              <strong>סטטוס נוכחי:</strong> {suggestion.status} •{' '}
              <strong>עדיפות:</strong> {suggestion.priority}
            </AlertDescription>
          </Alert>

          <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
            {/* Recipient Selection */}
            <div className="p-6 bg-white rounded-2xl shadow-xl border-0 hover:shadow-2xl transition-all duration-300">
              <div className="flex items-center gap-3 mb-4">
                <div className="p-2 rounded-full bg-gradient-to-r from-green-500 to-emerald-500 text-white shadow-lg">
                  <Users className="w-5 h-5" />
                </div>
                <Label className="text-lg font-bold text-gray-800">
                  שלח אל
                </Label>
              </div>

              <Select
                value={partyType}
                onValueChange={(value) =>
                  setPartyType(value as 'first' | 'second' | 'both')
                }
              >
                <SelectTrigger className="h-12 border-2 border-gray-200 hover:border-green-300 focus:border-green-500 rounded-xl transition-all">
                  <SelectValue placeholder="בחר נמען" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="first">
                    <div className="flex items-center gap-3">
                      <User className="w-4 h-4 text-green-500" />
                      <div className="text-right">
                        <div className="font-medium">
                          {suggestion.firstParty.firstName}{' '}
                          {suggestion.firstParty.lastName}
                        </div>
                        <div className="text-xs text-gray-500">
                          (צד א&apos;)
                        </div>{' '}
                      </div>
                    </div>
                  </SelectItem>
                  <SelectItem value="second">
                    <div className="flex items-center gap-3">
                      <User className="w-4 h-4 text-blue-500" />
                      <div className="text-right">
                        <div className="font-medium">
                          {suggestion.secondParty.firstName}{' '}
                          {suggestion.secondParty.lastName}
                        </div>
                        <div className="text-xs text-gray-500">
                          (צד ב&apos;)
                        </div>{' '}
                      </div>
                    </div>
                  </SelectItem>
                  <SelectItem value="both">
                    <div className="flex items-center gap-3">
                      <Users className="w-4 h-4 text-purple-500" />
                      <div className="font-medium">שני הצדדים</div>
                    </div>
                  </SelectItem>
                </SelectContent>
              </Select>

              <div className="mt-3 p-3 bg-green-50 rounded-xl">
                <p className="text-sm text-green-700">
                  <PartyTypeIcon className="w-4 h-4 inline ml-1" />
                  ההודעה תישלח ל{partyTypeInfo.label}
                </p>
              </div>
            </div>

            {/* Message Type */}
            <div className="p-6 bg-white rounded-2xl shadow-xl border-0 hover:shadow-2xl transition-all duration-300">
              <div className="flex items-center gap-3 mb-4">
                <div
                  className={cn(
                    'p-2 rounded-full bg-gradient-to-r text-white shadow-lg',
                    messageTypeInfo.color
                  )}
                >
                  <MessageTypeIcon className="w-5 h-5" />
                </div>
                <Label className="text-lg font-bold text-gray-800">
                  סוג ההודעה
                </Label>
              </div>

              <Select
                value={messageType}
                onValueChange={(value) =>
                  setMessageType(value as 'message' | 'reminder' | 'update')
                }
              >
                <SelectTrigger className="h-12 border-2 border-gray-200 hover:border-purple-300 focus:border-purple-500 rounded-xl transition-all">
                  <SelectValue placeholder="בחר סוג הודעה" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="message">
                    <div className="flex items-center gap-3">
                      <MessageCircle className="w-4 h-4 text-purple-500" />
                      <div className="text-right">
                        <div className="font-medium">הודעה רגילה</div>
                        <div className="text-xs text-gray-500">
                          הודעה אישית כללית
                        </div>
                      </div>
                    </div>
                  </SelectItem>
                  <SelectItem value="reminder">
                    <div className="flex items-center gap-3">
                      <Clock className="w-4 h-4 text-yellow-500" />
                      <div className="text-right">
                        <div className="font-medium">תזכורת</div>
                        <div className="text-xs text-gray-500">
                          הזכרה על פעולה נדרשת
                        </div>
                      </div>
                    </div>
                  </SelectItem>
                  <SelectItem value="update">
                    <div className="flex items-center gap-3">
                      <Info className="w-4 h-4 text-blue-500" />
                      <div className="text-right">
                        <div className="font-medium">עדכון סטטוס</div>
                        <div className="text-xs text-gray-500">
                          עדכון על שינוי במצב
                        </div>
                      </div>
                    </div>
                  </SelectItem>
                </SelectContent>
              </Select>

              <div
                className={cn(
                  'mt-3 p-3 rounded-xl bg-gradient-to-r',
                  messageTypeInfo.bgColor
                )}
              >
                <p
                  className="text-sm font-medium"
                  style={{ color: messageTypeInfo.color.split(' ')[1] }}
                >
                  <MessageTypeIcon className="w-4 h-4 inline ml-1" />
                  {messageTypeInfo.description}
                </p>
              </div>
            </div>
          </div>

          {/* Message Content */}
          <div className="p-6 bg-white rounded-2xl shadow-xl border-0 hover:shadow-2xl transition-all duration-300">
            <div className="flex items-center gap-3 mb-4">
              <div className="p-2 rounded-full bg-gradient-to-r from-indigo-500 to-purple-500 text-white shadow-lg">
                <Mail className="w-5 h-5" />
              </div>
              <Label className="text-lg font-bold text-gray-800">
                תוכן ההודעה
              </Label>
            </div>

            <Textarea
              value={messageContent}
              onChange={(e) => setMessageContent(e.target.value)}
              placeholder={getMessagePlaceholder()}
              className="h-48 border-2 border-gray-200 focus:border-indigo-400 rounded-xl transition-all resize-none text-lg"
              dir="rtl"
            />

            <div className="mt-3 flex items-center justify-between">
              <div className="flex items-center gap-2 text-sm text-gray-500">
                <Sparkles className="w-4 h-4" />
                <span>המערכת תוסיף אוטומטית חתימה מקצועית</span>
              </div>
              <div className="text-sm text-gray-500">
                {messageContent.length}/1000 תווים
              </div>
            </div>
          </div>

          {/* Preview Section */}
          {messageContent.trim() && (
            <div className="p-6 bg-gradient-to-r from-gray-50 to-slate-50 rounded-2xl border-2 border-gray-200">
              <div className="flex items-center gap-3 mb-4">
                <div className="p-2 rounded-full bg-gradient-to-r from-gray-500 to-slate-500 text-white shadow-lg">
                  <Zap className="w-5 h-5" />
                </div>
                <h3 className="text-lg font-bold text-gray-800">
                  תצוגה מקדימה
                </h3>
              </div>

              <div className="bg-white p-4 rounded-xl border-2 border-gray-100 shadow-inner">
                <div className="text-sm text-gray-600 mb-2">
                  אל: {partyTypeInfo.label} • סוג: {messageTypeInfo.label}
                </div>
                <div className="text-gray-800 leading-relaxed whitespace-pre-wrap">
                  {messageContent}
                </div>
                <div className="mt-4 pt-3 border-t border-gray-100 text-xs text-gray-500">
                  בברכה,
                  <br />
                  צוות מערכת השידוכים
                </div>
              </div>
            </div>
          )}
        </div>

        <DialogFooter className="p-8 border-t border-gray-100 bg-gradient-to-r from-gray-50 to-slate-50">
          <div className="flex justify-between w-full items-center">
            <div className="flex items-center gap-2 text-sm text-gray-500">
              <Bell className="w-4 h-4" />
              <span>הנמענים יקבלו התראה באימייל ובוואטסאפ</span>
            </div>
            <div className="flex gap-4">
              <Button
                variant="outline"
                onClick={onClose}
                disabled={isSubmitting}
                className="px-8 py-3 border-2 border-gray-300 hover:bg-gray-50 rounded-xl transition-all"
              >
                ביטול
              </Button>
              <Button
                onClick={handleSubmit}
                disabled={isSubmitting || !messageContent.trim()}
                className="px-8 py-3 bg-gradient-to-r from-purple-600 via-pink-600 to-blue-600 hover:from-purple-700 hover:via-pink-700 hover:to-blue-700 text-white shadow-xl hover:shadow-2xl transition-all duration-300 rounded-xl transform hover:scale-105"
              >
                {isSubmitting ? (
                  <>
                    <Send className="w-5 h-5 ml-2 animate-pulse" />
                    שולח...
                  </>
                ) : (
                  <>
                    <Send className="w-5 h-5 ml-2" />
                    שלח הודעה
                  </>
                )}
              </Button>
            </div>
          </div>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
};

export default MessageForm;
--- End of Content for MessageForm.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\suggestions\suggestions_contents.txt
--------------------------------------------------------------------------------
[This is the output log file itself. Content not included.]

================================================================================
Directory: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\suggestions\NewSuggestionForm
================================================================================

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\suggestions\NewSuggestionForm\CandidateSelector.tsx
--------------------------------------------------------------------------------
Content:
// src/app/components/matchmaker/suggestions/NewSuggestionForm/CandidateSelector.tsx

import React, { useState, useCallback, KeyboardEvent } from 'react';
import {
  Search,
  AlertTriangle,
  Clock,
  User,
  Crown,
  Star,
  Heart,
  Sparkles,
  MapPin,
  Award,
  Zap,
  Shield,
} from 'lucide-react';
import { Input } from '@/components/ui/input';
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from '@/components/ui/popover';
import {
  Command,
  CommandEmpty,
  CommandGroup,
  CommandInput,
  CommandList,
} from '@/components/ui/command';
import { Button } from '@/components/ui/button';
import { Card, CardContent } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';
import {
  calculateAge,
  cn,
  getRelativeCloudinaryPath,
  getInitials,
} from '@/lib/utils';
import type { Candidate } from '../../new/types/candidates';
import { toast } from 'sonner';
import type { MatchmakerPageDictionary } from '@/types/dictionary';

interface CandidateSelectorProps {
  dict: MatchmakerPageDictionary['newSuggestionForm']['candidateSelector'];
  value: Candidate | null;
  onChange: (candidate: Candidate | null) => void;
  otherParty?: Candidate | null;
  label: string;
  candidates: Candidate[];
  className?: string;
  fieldName: string;
  error?: string;
}

const EnhancedCandidateCard: React.FC<{
  dict: MatchmakerPageDictionary['newSuggestionForm']['candidateSelector'];
  candidate: Candidate;
  onClick: () => void;
  isActive: boolean;
  isBlocked: boolean;
}> = ({ dict, candidate, onClick, isActive, isBlocked }) => {
  const age = calculateAge(new Date(candidate.profile.birthDate));
  const mainImage = candidate.images.find((img) => img.isMain)?.url;

  const getStatusInfo = () => {
    if (isBlocked) {
      return {
        icon: Shield,
        label: dict.status.blocked,
        className:
          'bg-gradient-to-r from-red-500 to-pink-500 text-white animate-pulse',
        description: dict.status.blockedDescription.replace(
          '{{name}}',
          candidate.suggestionStatus?.withCandidateName || ''
        ),
      };
    }

    if (candidate.suggestionStatus?.status === 'PENDING') {
      return {
        icon: Clock,
        label: dict.status.pending,
        className: 'bg-gradient-to-r from-yellow-500 to-amber-500 text-white',
        description: dict.status.pendingDescription.replace(
          '{{name}}',
          candidate.suggestionStatus.withCandidateName
        ),
      };
    }

    return {
      icon: Star,
      label: dict.status.available,
      className: 'bg-gradient-to-r from-green-500 to-emerald-500 text-white',
      description: dict.status.availableDescription,
    };
  };

  const statusInfo = getStatusInfo();
  const StatusIcon = statusInfo.icon;

  return (
    <div
      className={cn(
        'group relative overflow-hidden rounded-2xl transition-all duration-300 cursor-pointer',
        'bg-gradient-to-br from-white via-gray-50/30 to-white border-2 shadow-lg hover:shadow-2xl',
        isActive && 'ring-4 ring-purple-500 ring-opacity-50 border-purple-300',
        isBlocked && 'opacity-60 cursor-not-allowed',
        !isBlocked && 'hover:scale-105 hover:border-purple-300'
      )}
      onClick={!isBlocked ? onClick : undefined}
    >
      <div className="absolute inset-0">
        <div className="absolute top-0 right-0 w-20 h-20 bg-gradient-to-br from-purple-200/20 to-pink-200/20 rounded-full blur-xl opacity-0 group-hover:opacity-100 transition-opacity duration-500"></div>
        <div className="absolute bottom-0 left-0 w-16 h-16 bg-gradient-to-br from-cyan-200/20 to-blue-200/20 rounded-full blur-lg opacity-0 group-hover:opacity-100 transition-opacity duration-700"></div>
      </div>

      <div className="relative z-10 p-4 space-y-4">
        <div className="flex items-center justify-between">
          <Badge className={cn('shadow-lg font-bold', statusInfo.className)}>
            <StatusIcon className="w-3 h-3 ml-1" />
            {statusInfo.label}
          </Badge>

          {candidate.profile.religiousLevel && (
            <Badge className="bg-gradient-to-r from-indigo-500 to-purple-500 text-white shadow-lg">
              <Crown className="w-3 h-3 ml-1" />
              {candidate.profile.religiousLevel}
            </Badge>
          )}
        </div>

        <div className="flex items-center gap-4">
          <div className="relative">
            <Avatar className="w-16 h-16 border-4 border-white shadow-xl ring-2 ring-purple-200 group-hover:ring-purple-400 transition-all duration-300">
              {mainImage ? (
                <AvatarImage
                  src={getRelativeCloudinaryPath(mainImage)}
                  alt={`${candidate.firstName} ${candidate.lastName}`}
                  className="object-cover"
                />
              ) : (
                <AvatarFallback className="bg-gradient-to-br from-purple-500 to-pink-500 text-white font-bold text-lg">
                  {getInitials(`${candidate.firstName} ${candidate.lastName}`)}
                </AvatarFallback>
              )}
            </Avatar>
            <div className="absolute -bottom-1 -right-1 w-5 h-5 bg-gradient-to-r from-green-400 to-emerald-400 border-2 border-white rounded-full shadow-lg animate-pulse"></div>
          </div>

          <div className="flex-1 min-w-0">
            <h3 className="text-lg font-bold text-gray-800 truncate group-hover:text-purple-700 transition-colors">
              {candidate.firstName} {candidate.lastName}
            </h3>

            <div className="flex items-center gap-2 mt-1">
              <div className="flex items-center gap-1 text-sm text-gray-600">
                <User className="w-4 h-4 text-blue-500" />
                <span className="font-medium">
                  {age} {dict.card.years}
                </span>
              </div>

              {candidate.profile.city && (
                <div className="flex items-center gap-1 text-sm text-gray-600">
                  <MapPin className="w-4 h-4 text-green-500" />
                  <span className="truncate">{candidate.profile.city}</span>
                </div>
              )}
            </div>
          </div>
        </div>

        <div className="grid grid-cols-2 gap-3">
          {candidate.profile.occupation && (
            <div className="flex items-center gap-2 p-2 bg-gradient-to-r from-blue-50 to-cyan-50 rounded-lg border border-blue-100 shadow-sm">
              <Award className="w-4 h-4 text-blue-500 flex-shrink-0" />
              <span className="text-sm font-medium text-blue-700 truncate">
                {candidate.profile.occupation}
              </span>
            </div>
          )}

          {candidate.profile.education && (
            <div className="flex items-center gap-2 p-2 bg-gradient-to-r from-purple-50 to-pink-50 rounded-lg border border-purple-100 shadow-sm">
              <Sparkles className="w-4 h-4 text-purple-500 flex-shrink-0" />
              <span className="text-sm font-medium text-purple-700 truncate">
                {candidate.profile.education}
              </span>
            </div>
          )}
        </div>

        {isBlocked && (
          <div className="p-3 bg-gradient-to-r from-red-50 to-pink-50 rounded-lg border border-red-200">
            <div className="flex items-start gap-2">
              <AlertTriangle className="w-4 h-4 text-red-500 mt-0.5 flex-shrink-0" />
              <div className="text-sm text-red-700">
                <p className="font-medium">{dict.card.cannotSelect}</p>
                <p className="text-xs">{statusInfo.description}</p>
              </div>
            </div>
          </div>
        )}
      </div>
      <div className="absolute inset-0 bg-gradient-to-r from-purple-500/5 to-pink-500/5 opacity-0 group-hover:opacity-100 transition-opacity duration-300 pointer-events-none"></div>
    </div>
  );
};

const CandidateSelector: React.FC<CandidateSelectorProps> = ({
  dict,
  value,
  onChange,
  otherParty,
  label,
  candidates,
  className,
  error,
}) => {
  const [open, setOpen] = useState(false);
  const [inputValue, setInputValue] = useState('');
  const [activeIndex, setActiveIndex] = useState(-1);

  const filteredCandidates = candidates.filter((candidate) => {
    if (otherParty && candidate.id === otherParty.id) return false;

    if (inputValue) {
      const searchTerm = inputValue.toLowerCase();
      return (
        candidate.firstName.toLowerCase().includes(searchTerm) ||
        candidate.lastName.toLowerCase().includes(searchTerm) ||
        candidate.profile.city?.toLowerCase().includes(searchTerm) ||
        candidate.profile.occupation?.toLowerCase().includes(searchTerm)
      );
    }
    return true;
  });

  const formatCandidateDisplay = useCallback((candidate: Candidate) => {
    const age = calculateAge(new Date(candidate.profile.birthDate));
    return `${candidate.firstName} ${candidate.lastName}, ${age}${
      candidate.profile.city ? `, ${candidate.profile.city}` : ''
    }`;
  }, []);

  const handleSelect = useCallback(
    (candidate: Candidate) => {
      if (candidate.suggestionStatus?.status === 'BLOCKED') {
        toast.error(dict.toasts.cannotSelectError.title, {
          description: dict.toasts.cannotSelectError.description
            .replace('{{name}}', `${candidate.firstName} ${candidate.lastName}`)
            .replace(
              '{{withName}}',
              candidate.suggestionStatus.withCandidateName
            ),
        });
        return;
      }

      onChange(candidate);
      setOpen(false);
      setInputValue('');
      setActiveIndex(-1);
    },
    [onChange, dict]
  );

  const handleKeyDown = (e: KeyboardEvent) => {
    if (!open) return;

    switch (e.key) {
      case 'ArrowDown':
        e.preventDefault();
        setActiveIndex((prev) =>
          prev < filteredCandidates.length - 1 ? prev + 1 : prev
        );
        break;
      case 'ArrowUp':
        e.preventDefault();
        setActiveIndex((prev) => (prev > 0 ? prev - 1 : prev));
        break;
      case 'Enter':
        e.preventDefault();
        if (activeIndex >= 0 && activeIndex < filteredCandidates.length) {
          handleSelect(filteredCandidates[activeIndex]);
        }
        break;
      case 'Escape':
        e.preventDefault();
        setOpen(false);
        setActiveIndex(-1);
        break;
    }
  };

  return (
    <div className={className}>
      <div className="space-y-3">
        <div className="flex items-center gap-3">
          <div className="p-2 rounded-full bg-gradient-to-r from-purple-500 to-pink-500 text-white shadow-lg">
            <User className="w-5 h-5" />
          </div>
          <label className="text-lg font-bold text-gray-800">{label}</label>
        </div>
        <Popover open={open} onOpenChange={setOpen}>
          <PopoverTrigger asChild>
            <div className="relative group">
              <div className="absolute inset-0 bg-gradient-to-r from-purple-500/20 to-pink-500/20 rounded-2xl blur opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
              <div className="relative">
                <Search className="absolute right-4 top-1/2 transform -translate-y-1/2 h-5 w-5 text-purple-400 group-hover:text-purple-600 transition-colors" />
                <Input
                  value={value ? formatCandidateDisplay(value) : inputValue}
                  onChange={(e) => {
                    setInputValue(e.target.value);
                    if (!open) setOpen(true);
                    setActiveIndex(-1);
                  }}
                  onKeyDown={handleKeyDown}
                  onClick={() => !open && setOpen(true)}
                  placeholder={dict.searchPlaceholder}
                  className={cn(
                    'h-14 pr-14 text-right text-lg border-2 transition-all duration-300 rounded-2xl shadow-lg',
                    'bg-white/80 backdrop-blur-sm',
                    'border-purple-200 hover:border-purple-300 focus:border-purple-500 focus:ring-purple-200',
                    'placeholder:text-gray-400',
                    error &&
                      'border-red-300 focus:border-red-500 focus:ring-red-200'
                  )}
                  role="combobox"
                  aria-expanded={open}
                  aria-controls="candidate-listbox"
                  aria-activedescendant={
                    activeIndex >= 0
                      ? `candidate-${filteredCandidates[activeIndex]?.id}`
                      : undefined
                  }
                />
                <div className="absolute left-4 top-1/2 transform -translate-y-1/2">
                  <Sparkles className="h-4 w-4 text-purple-400" />
                </div>
              </div>
            </div>
          </PopoverTrigger>
          <PopoverContent
            className="p-0 w-[500px] border-0 shadow-2xl rounded-2xl bg-white/95 backdrop-blur-sm"
            align="start"
            side="bottom"
            sideOffset={8}
          >
            <Command shouldFilter={false}>
              <div className="relative">
                <CommandInput
                  placeholder={dict.commandInputPlaceholder}
                  value={inputValue}
                  onValueChange={setInputValue}
                  className="h-12 border-0 text-right text-lg bg-gradient-to-r from-purple-50 to-pink-50"
                />
                <div className="absolute right-4 top-1/2 transform -translate-y-1/2">
                  <Search className="h-4 w-4 text-purple-400" />
                </div>
              </div>
              <CommandList
                className="max-h-[400px] overflow-auto p-2"
                id="candidate-listbox"
                role="listbox"
              >
                {filteredCandidates.length === 0 ? (
                  <div className="text-center p-8">
                    <div className="w-16 h-16 rounded-full bg-gradient-to-br from-gray-100 to-gray-200 flex items-center justify-center mx-auto mb-4">
                      <Search className="w-8 h-8 text-gray-400" />
                    </div>
                    <h3 className="text-lg font-bold text-gray-800 mb-2">
                      {dict.noResults.title}
                    </h3>
                    <p className="text-gray-600">
                      {dict.noResults.description}
                    </p>
                  </div>
                ) : (
                  <CommandGroup>
                    <div className="grid gap-3">
                      {filteredCandidates.map((candidate, index) => {
                        const isBlocked =
                          candidate.suggestionStatus?.status === 'BLOCKED';
                        return (
                          <EnhancedCandidateCard
                            key={candidate.id}
                            dict={dict}
                            candidate={candidate}
                            onClick={() => handleSelect(candidate)}
                            isActive={index === activeIndex}
                            isBlocked={isBlocked}
                          />
                        );
                      })}
                    </div>
                  </CommandGroup>
                )}
              </CommandList>
            </Command>
          </PopoverContent>
        </Popover>
        {error && (
          <div className="flex items-center gap-2 p-3 bg-gradient-to-r from-red-50 to-pink-50 rounded-xl border border-red-200">
            <AlertTriangle className="w-4 h-4 text-red-500" />
            <p className="text-sm text-red-600 font-medium">{error}</p>
          </div>
        )}
      </div>
      {value && (
        <Card className="mt-4 border-0 shadow-xl bg-gradient-to-br from-white via-purple-50/30 to-pink-50/30 rounded-2xl overflow-hidden">
          <CardContent className="p-6">
            <div className="flex items-center justify-between mb-4">
              <div className="flex items-center gap-3">
                <div className="p-2 rounded-full bg-gradient-to-r from-green-500 to-emerald-500 text-white shadow-lg">
                  <Heart className="w-5 h-5" />
                </div>
                <h4 className="text-lg font-bold text-gray-800">
                  {dict.selectedDisplay.title}
                </h4>
              </div>
              <Button
                variant="ghost"
                size="sm"
                onClick={() => onChange(null)}
                className="text-red-600 hover:text-red-700 hover:bg-red-50 rounded-xl transition-all duration-300"
              >
                <Zap className="w-4 h-4 ml-1" />
                {dict.selectedDisplay.removeButton}
              </Button>
            </div>
            <EnhancedCandidateCard
              dict={dict}
              candidate={value}
              onClick={() => {}}
              isActive={true}
              isBlocked={false}
            />
            <div className="flex gap-3 mt-4">
              <Button
                variant="outline"
                size="sm"
                onClick={() => {
                  /* Implement view profile handler */
                }}
                className="flex-1 border-2 border-purple-200 text-purple-600 hover:bg-purple-50 rounded-xl transition-all duration-300"
              >
                <User className="w-4 h-4 ml-2" />
                {dict.selectedDisplay.viewProfileButton}
              </Button>
            </div>
          </CardContent>
        </Card>
      )}
    </div>
  );
};

export default CandidateSelector;
--- End of Content for CandidateSelector.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\suggestions\NewSuggestionForm\MatchPreview.tsx
--------------------------------------------------------------------------------
Content:
// src/app/components/matchmaker/suggestions/NewSuggestionForm/MatchPreview.tsx

import React from 'react';
import { Card, CardContent } from '@/components/ui/card';
import { Progress } from '@/components/ui/progress';
import { Badge } from '@/components/ui/badge';
import {
  AlertCircle,
  Heart,
  Star,
  Sparkles,
  TrendingUp,
  Award,
  Crown,
  Gem,
  Zap,
  Target,
  Trophy,
  Gift,
} from 'lucide-react';
import { calculateMatchScore } from '../utils/matchingAlgorithm';
import type { Candidate } from '../../new/types/candidates';
import type { MatchScore } from '../utils/matchingAlgorithm';
import { cn } from '@/lib/utils';
import type { MatchmakerPageDictionary } from '@/types/dictionary';

interface MatchPreviewProps {
  dict: MatchmakerPageDictionary['newSuggestionForm']['matchPreview'];
  firstParty: Candidate;
  secondParty: Candidate;
  className?: string;
}

const MatchCriteriaCard: React.FC<{
  dict: MatchmakerPageDictionary['newSuggestionForm']['matchPreview'];
  criterion: {
    name: string;
    score: number;
    reason?: string;
  };
  index: number;
}> = ({ dict, criterion, index }) => {
  const getCriterionInfo = (name: string) => {
    switch (name) {
      case 'age':
        return {
          icon: Target,
          label: dict.criteria.age,
          color: 'from-blue-500 to-cyan-500',
          bgColor: 'from-blue-50 to-cyan-50',
        };
      case 'location':
        return {
          icon: Crown,
          label: dict.criteria.location,
          color: 'from-green-500 to-emerald-500',
          bgColor: 'from-green-50 to-emerald-50',
        };
      case 'religious':
        return {
          icon: Sparkles,
          label: dict.criteria.religious,
          color: 'from-purple-500 to-pink-500',
          bgColor: 'from-purple-50 to-pink-50',
        };
      default:
        return {
          icon: Star,
          label: name,
          color: 'from-gray-500 to-slate-500',
          bgColor: 'from-gray-50 to-slate-50',
        };
    }
  };

  const info = getCriterionInfo(criterion.name);
  const IconComponent = info.icon;
  const scorePercentage = Math.round(criterion.score * 100);

  const getScoreCategory = (score: number) => {
    if (score >= 0.9)
      return {
        label: dict.scoreCategories.perfect,
        color: 'text-emerald-600',
        bgColor: 'bg-emerald-100',
      };
    if (score >= 0.8)
      return {
        label: dict.scoreCategories.excellent,
        color: 'text-green-600',
        bgColor: 'bg-green-100',
      };
    if (score >= 0.7)
      return {
        label: dict.scoreCategories.good,
        color: 'text-blue-600',
        bgColor: 'bg-blue-100',
      };
    if (score >= 0.5)
      return {
        label: dict.scoreCategories.medium,
        color: 'text-yellow-600',
        bgColor: 'bg-yellow-100',
      };
    return {
      label: dict.scoreCategories.low,
      color: 'text-red-600',
      bgColor: 'bg-red-100',
    };
  };

  const scoreCategory = getScoreCategory(criterion.score);

  return (
    <div
      className={cn(
        'relative overflow-hidden rounded-2xl transition-all duration-500 group hover:scale-105',
        'bg-gradient-to-br',
        info.bgColor,
        'border border-white/50 shadow-lg hover:shadow-2xl'
      )}
      style={{
        animationDelay: `${index * 150}ms`,
        animationFillMode: 'both',
      }}
    >
      <div className="absolute inset-0">
        <div className="absolute top-0 right-0 w-16 h-16 bg-gradient-to-br from-white/30 to-transparent rounded-full blur-xl opacity-0 group-hover:opacity-100 transition-opacity duration-500"></div>
        <div className="absolute bottom-0 left-0 w-12 h-12 bg-gradient-to-br from-white/20 to-transparent rounded-full blur-lg opacity-0 group-hover:opacity-100 transition-opacity duration-700"></div>
      </div>

      <div className="relative z-10 p-6 space-y-4">
        <div className="flex items-center justify-between">
          <div className="flex items-center gap-3">
            <div
              className={cn(
                'p-3 rounded-full shadow-lg group-hover:scale-110 transition-transform bg-gradient-to-r text-white',
                info.color
              )}
            >
              <IconComponent className="w-5 h-5" />
            </div>
            <h4 className="text-lg font-bold text-gray-800">{info.label}</h4>
          </div>

          <Badge
            className={cn(
              'px-3 py-1 font-bold shadow-lg',
              scoreCategory.bgColor,
              scoreCategory.color
            )}
          >
            {scoreCategory.label}
          </Badge>
        </div>

        <div className="space-y-3">
          <div className="flex items-center justify-between">
            <span className="text-sm font-medium text-gray-600">
              {dict.scoreLabel}
            </span>
            <span className="text-2xl font-bold text-gray-800">
              {scorePercentage}%
            </span>
          </div>
          <div className="relative">
            <Progress
              value={scorePercentage}
              className="h-3 bg-white/50 shadow-inner"
            />
            <div className="absolute inset-0 rounded-full bg-gradient-to-r from-transparent via-white/20 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-500"></div>
          </div>
        </div>

        {criterion.reason && (
          <div className="p-3 bg-white/60 backdrop-blur-sm rounded-xl border border-white/50 shadow-inner">
            <p className="text-sm text-gray-700 leading-relaxed font-medium">
              {criterion.reason}
            </p>
          </div>
        )}
      </div>
    </div>
  );
};

const MatchPreview: React.FC<MatchPreviewProps> = ({
  dict,
  firstParty,
  secondParty,
  className,
}) => {
  const matchScore: MatchScore | null = calculateMatchScore(
    firstParty.profile,
    secondParty.profile
  );

  if (!matchScore) {
    return (
      <Card
        className={cn(
          'border-0 shadow-xl rounded-3xl overflow-hidden',
          className
        )}
      >
        <CardContent className="p-8">
          <div className="text-center space-y-6">
            <div className="w-24 h-24 rounded-full bg-gradient-to-br from-yellow-100 to-amber-100 flex items-center justify-center mx-auto shadow-xl">
              <AlertCircle className="w-12 h-12 text-yellow-500" />
            </div>
            <div>
              <h3 className="text-xl font-bold text-gray-800 mb-2">
                {dict.errorState.title}
              </h3>
              <p className="text-gray-600">{dict.errorState.description}</p>
            </div>
            <div className="p-4 bg-gradient-to-r from-yellow-50 to-amber-50 rounded-2xl border border-yellow-200">
              <p className="text-sm text-yellow-800 font-medium">
                {dict.errorState.suggestion}
              </p>
            </div>
          </div>
        </CardContent>
      </Card>
    );
  }

  const getMatchQuality = (score: number) => {
    const qualityMap = {
      perfect: {
        icon: Crown,
        bgGradient: 'from-purple-500 to-pink-500',
        bgColor: 'from-purple-50 to-pink-50',
        animation: 'animate-pulse',
      },
      excellent: {
        icon: Gem,
        bgGradient: 'from-emerald-500 to-green-500',
        bgColor: 'from-emerald-50 to-green-50',
        animation: '',
      },
      good: {
        icon: Trophy,
        bgGradient: 'from-blue-500 to-cyan-500',
        bgColor: 'from-blue-50 to-cyan-50',
        animation: '',
      },
      medium: {
        icon: Star,
        bgGradient: 'from-yellow-500 to-amber-500',
        bgColor: 'from-yellow-50 to-amber-50',
        animation: '',
      },
      low: {
        icon: AlertCircle,
        bgGradient: 'from-red-500 to-pink-500',
        bgColor: 'from-red-50 to-pink-50',
        animation: '',
      },
    };

    if (score >= 95)
      return { ...dict.qualityLevels.perfect, ...qualityMap.perfect };
    if (score >= 85)
      return { ...dict.qualityLevels.excellent, ...qualityMap.excellent };
    if (score >= 75) return { ...dict.qualityLevels.good, ...qualityMap.good };
    if (score >= 60)
      return { ...dict.qualityLevels.medium, ...qualityMap.medium };
    return { ...dict.qualityLevels.low, ...qualityMap.low };
  };

  const quality = getMatchQuality(matchScore.score);
  const Icon = quality.icon;

  return (
    <Card
      className={cn(
        'border-0 shadow-2xl rounded-3xl overflow-hidden transition-all duration-500 hover:shadow-3xl',
        'bg-gradient-to-br',
        quality.bgColor,
        className
      )}
    >
      <div className="absolute inset-0">
        <div className="absolute top-0 right-0 w-64 h-64 bg-gradient-to-br from-white/20 to-transparent rounded-full blur-3xl animate-float"></div>
        <div
          className="absolute bottom-0 left-0 w-48 h-48 bg-gradient-to-br from-white/10 to-transparent rounded-full blur-2xl animate-float"
          style={{ animationDelay: '2s' }}
        ></div>
        <div
          className="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-80 h-80 bg-gradient-to-br from-white/5 to-transparent rounded-full blur-3xl animate-float"
          style={{ animationDelay: '4s' }}
        ></div>
      </div>

      <CardContent className="relative z-10 p-8 space-y-8">
        <div className="text-center space-y-6">
          <div className="flex items-center justify-center">
            <div
              className={cn(
                'p-6 rounded-full shadow-2xl bg-gradient-to-r text-white transform hover:scale-110 transition-transform duration-300',
                quality.bgGradient,
                quality.animation
              )}
            >
              <Icon className="w-12 h-12" />
            </div>
          </div>
          <div className="space-y-2">
            <h2 className="text-3xl font-bold text-gray-800">{quality.text}</h2>
            <p className="text-lg text-gray-600 leading-relaxed">
              {quality.description}
            </p>
          </div>
          <div className="relative">
            <div className="flex items-center justify-center gap-4 mb-4">
              <div className="text-center">
                <div className="text-5xl font-bold bg-gradient-to-r from-purple-600 via-pink-600 to-blue-600 bg-clip-text text-transparent">
                  {Math.round(matchScore.score)}%
                </div>
                <p className="text-sm font-medium text-gray-600 mt-1">
                  {dict.generalScoreLabel}
                </p>
              </div>
            </div>
            <div className="relative w-32 h-32 mx-auto">
              <svg
                className="w-32 h-32 transform -rotate-90"
                viewBox="0 0 100 100"
              >
                <circle
                  cx="50"
                  cy="50"
                  r="40"
                  stroke="currentColor"
                  strokeWidth="8"
                  fill="transparent"
                  className="text-gray-200"
                />
                <circle
                  cx="50"
                  cy="50"
                  r="40"
                  stroke="url(#gradient)"
                  strokeWidth="8"
                  fill="transparent"
                  strokeDasharray={`${2 * Math.PI * 40}`}
                  strokeDashoffset={`${2 * Math.PI * 40 * (1 - matchScore.score / 100)}`}
                  className="transition-all duration-1000 ease-out"
                  strokeLinecap="round"
                />
                <defs>
                  <linearGradient
                    id="gradient"
                    x1="0%"
                    y1="0%"
                    x2="100%"
                    y2="0%"
                  >
                    <stop offset="0%" stopColor="#8B5CF6" />
                    <stop offset="50%" stopColor="#EC4899" />
                    <stop offset="100%" stopColor="#3B82F6" />
                  </linearGradient>
                </defs>
              </svg>
              <div className="absolute inset-0 flex items-center justify-center">
                <Sparkles className="w-8 h-8 text-purple-500 animate-pulse" />
              </div>
            </div>
          </div>
        </div>
        <div className="space-y-6">
          <div className="text-center">
            <h3 className="text-2xl font-bold text-gray-800 mb-2 flex items-center justify-center gap-3">
              <TrendingUp className="w-6 h-6 text-purple-500" />
              {dict.criteriaSection.title}
            </h3>
            <p className="text-gray-600">{dict.criteriaSection.description}</p>
          </div>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
            {matchScore.criteria.map((criterion, index) => (
              <div key={criterion.name} className="animate-fade-in-up">
                <MatchCriteriaCard
                  dict={dict}
                  criterion={criterion}
                  index={index}
                />
              </div>
            ))}
          </div>
        </div>
        {matchScore.reasons.length > 0 && (
          <div className="space-y-4">
            <div className="text-center">
              <h4 className="text-xl font-bold text-gray-800 mb-2 flex items-center justify-center gap-3">
                <Heart className="w-5 h-5 text-red-500" />
                {dict.reasonsSection.title}
              </h4>
            </div>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              {matchScore.reasons.map((reason, index) => (
                <div
                  key={index}
                  className="flex items-start gap-3 p-4 bg-white/60 backdrop-blur-sm rounded-2xl border border-white/50 shadow-lg hover:shadow-xl transition-all duration-300 group"
                  style={{
                    animationDelay: `${(index + 3) * 150}ms`,
                    animationFillMode: 'both',
                  }}
                >
                  <div className="p-2 rounded-full bg-gradient-to-r from-green-500 to-emerald-500 text-white shadow-lg group-hover:scale-110 transition-transform">
                    <Gift className="w-4 h-4" />
                  </div>
                  <p className="text-gray-700 leading-relaxed font-medium flex-1">
                    {reason}
                  </p>
                </div>
              ))}
            </div>
          </div>
        )}
        <div className="p-6 bg-white/70 backdrop-blur-sm rounded-2xl border border-white/50 shadow-xl">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-4">
              <div className="p-3 rounded-full bg-gradient-to-r from-indigo-500 to-purple-500 text-white shadow-lg">
                <Award className="w-6 h-6" />
              </div>
              <div>
                <h4 className="text-lg font-bold text-gray-800">
                  {dict.summary.title}
                </h4>
                <p className="text-gray-600">{dict.summary.description}</p>
              </div>
            </div>
            <div className="text-right">
              <div className="flex items-center gap-2">
                {matchScore.score >= 80 ? (
                  <>
                    <Zap className="w-5 h-5 text-green-500" />
                    <span className="font-bold text-green-600">
                      {dict.summary.recommendations.high}
                    </span>
                  </>
                ) : matchScore.score >= 60 ? (
                  <>
                    <Star className="w-5 h-5 text-blue-500" />
                    <span className="font-bold text-blue-600">
                      {dict.summary.recommendations.medium}
                    </span>
                  </>
                ) : (
                  <>
                    <AlertCircle className="w-5 h-5 text-yellow-500" />
                    <span className="font-bold text-yellow-600">
                      {dict.summary.recommendations.low}
                    </span>
                  </>
                )}
              </div>
              <p className="text-sm text-gray-500 mt-1">
                {dict.summary.basedOn.replace(
                  '{{count}}',
                  matchScore.criteria.length.toString()
                )}
              </p>
            </div>
          </div>
        </div>
      </CardContent>
    </Card>
  );
};

export default MatchPreview;
--- End of Content for MatchPreview.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\suggestions\NewSuggestionForm\NewSuggestionForm_contents.txt
--------------------------------------------------------------------------------
Content:
################################################################################
# Directory Content Map For: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\app\components\matchmaker\suggestions\NewSuggestionForm
# Generated on: 2025-08-18 14:36:43
################################################################################

================================================================================
Directory: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\app\components\matchmaker\suggestions\NewSuggestionForm
================================================================================

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\app\components\matchmaker\suggestions\NewSuggestionForm\CandidateSelector.tsx
--------------------------------------------------------------------------------
Content:
// src/app/components/matchmaker/suggestions/NewSuggestionForm/CandidateSelector.tsx

import React, { useState, useCallback, KeyboardEvent } from 'react';
import {
  Search,
  AlertTriangle,
  Clock,
  User,
  Crown,
  Star,
  Heart,
  Sparkles,
  MapPin,
  Award,
  Zap,
  Shield,
} from 'lucide-react';
import { Input } from '@/components/ui/input';
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from '@/components/ui/popover';
import {
  Command,
  CommandEmpty,
  CommandGroup,
  CommandInput,
  CommandList,
} from '@/components/ui/command';
import { Button } from '@/components/ui/button';
import { Card, CardContent } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';
import {
  calculateAge,
  cn,
  getRelativeCloudinaryPath,
  getInitials,
} from '@/lib/utils';
import type { Candidate } from '../../new/types/candidates';
import { toast } from 'sonner';

interface CandidateSelectorProps {
  value: Candidate | null;
  onChange: (candidate: Candidate | null) => void;
  otherParty?: Candidate | null;
  label: string;
  candidates: Candidate[];
  className?: string;
  fieldName: string;
  error?: string;
}

const EnhancedCandidateCard: React.FC<{
  candidate: Candidate;
  onClick: () => void;
  isActive: boolean;
  isBlocked: boolean;
}> = ({ candidate, onClick, isActive, isBlocked }) => {
  const age = calculateAge(new Date(candidate.profile.birthDate));
  const mainImage = candidate.images.find((img) => img.isMain)?.url;

  const getStatusInfo = () => {
    if (isBlocked) {
      return {
        icon: Shield,
        label: 'חסום',
        className:
          'bg-gradient-to-r from-red-500 to-pink-500 text-white animate-pulse',
        description: `בהצעה פעילה עם ${candidate.suggestionStatus?.withCandidateName}`,
      };
    }

    if (candidate.suggestionStatus?.status === 'PENDING') {
      return {
        icon: Clock,
        label: 'ממתין',
        className: 'bg-gradient-to-r from-yellow-500 to-amber-500 text-white',
        description: `הצעה ממתינה עם ${candidate.suggestionStatus.withCandidateName}`,
      };
    }

    return {
      icon: Star,
      label: 'זמין',
      className: 'bg-gradient-to-r from-green-500 to-emerald-500 text-white',
      description: 'זמין להצעה חדשה',
    };
  };

  const statusInfo = getStatusInfo();
  const StatusIcon = statusInfo.icon;

  return (
    <div
      className={cn(
        'group relative overflow-hidden rounded-2xl transition-all duration-300 cursor-pointer',
        'bg-gradient-to-br from-white via-gray-50/30 to-white border-2 shadow-lg hover:shadow-2xl',
        isActive && 'ring-4 ring-purple-500 ring-opacity-50 border-purple-300',
        isBlocked && 'opacity-60 cursor-not-allowed',
        !isBlocked && 'hover:scale-105 hover:border-purple-300'
      )}
      onClick={!isBlocked ? onClick : undefined}
    >
      {/* Background decorative elements */}
      <div className="absolute inset-0">
        <div className="absolute top-0 right-0 w-20 h-20 bg-gradient-to-br from-purple-200/20 to-pink-200/20 rounded-full blur-xl opacity-0 group-hover:opacity-100 transition-opacity duration-500"></div>
        <div className="absolute bottom-0 left-0 w-16 h-16 bg-gradient-to-br from-cyan-200/20 to-blue-200/20 rounded-full blur-lg opacity-0 group-hover:opacity-100 transition-opacity duration-700"></div>
      </div>

      <div className="relative z-10 p-4 space-y-4">
        {/* Header with status */}
        <div className="flex items-center justify-between">
          <Badge className={cn('shadow-lg font-bold', statusInfo.className)}>
            <StatusIcon className="w-3 h-3 ml-1" />
            {statusInfo.label}
          </Badge>

          {candidate.profile.religiousLevel && (
            <Badge className="bg-gradient-to-r from-indigo-500 to-purple-500 text-white shadow-lg">
              <Crown className="w-3 h-3 ml-1" />
              {candidate.profile.religiousLevel}
            </Badge>
          )}
        </div>

        {/* Profile section */}
        <div className="flex items-center gap-4">
          <div className="relative">
            <Avatar className="w-16 h-16 border-4 border-white shadow-xl ring-2 ring-purple-200 group-hover:ring-purple-400 transition-all duration-300">
              {mainImage ? (
                <AvatarImage
                  src={getRelativeCloudinaryPath(mainImage)}
                  alt={`${candidate.firstName} ${candidate.lastName}`}
                  className="object-cover"
                />
              ) : (
                <AvatarFallback className="bg-gradient-to-br from-purple-500 to-pink-500 text-white font-bold text-lg">
                  {getInitials(`${candidate.firstName} ${candidate.lastName}`)}
                </AvatarFallback>
              )}
            </Avatar>

            {/* Online indicator */}
            <div className="absolute -bottom-1 -right-1 w-5 h-5 bg-gradient-to-r from-green-400 to-emerald-400 border-2 border-white rounded-full shadow-lg animate-pulse"></div>
          </div>

          <div className="flex-1 min-w-0">
            <h3 className="text-lg font-bold text-gray-800 truncate group-hover:text-purple-700 transition-colors">
              {candidate.firstName} {candidate.lastName}
            </h3>

            <div className="flex items-center gap-2 mt-1">
              <div className="flex items-center gap-1 text-sm text-gray-600">
                <User className="w-4 h-4 text-blue-500" />
                <span className="font-medium">{age} שנים</span>
              </div>

              {candidate.profile.city && (
                <div className="flex items-center gap-1 text-sm text-gray-600">
                  <MapPin className="w-4 h-4 text-green-500" />
                  <span className="truncate">{candidate.profile.city}</span>
                </div>
              )}
            </div>
          </div>
        </div>

        {/* Details grid */}
        <div className="grid grid-cols-2 gap-3">
          {candidate.profile.occupation && (
            <div className="flex items-center gap-2 p-2 bg-gradient-to-r from-blue-50 to-cyan-50 rounded-lg border border-blue-100 shadow-sm">
              <Award className="w-4 h-4 text-blue-500 flex-shrink-0" />
              <span className="text-sm font-medium text-blue-700 truncate">
                {candidate.profile.occupation}
              </span>
            </div>
          )}

          {candidate.profile.education && (
            <div className="flex items-center gap-2 p-2 bg-gradient-to-r from-purple-50 to-pink-50 rounded-lg border border-purple-100 shadow-sm">
              <Sparkles className="w-4 h-4 text-purple-500 flex-shrink-0" />
              <span className="text-sm font-medium text-purple-700 truncate">
                {candidate.profile.education}
              </span>
            </div>
          )}
        </div>

        {/* Status description */}
        {isBlocked && (
          <div className="p-3 bg-gradient-to-r from-red-50 to-pink-50 rounded-lg border border-red-200">
            <div className="flex items-start gap-2">
              <AlertTriangle className="w-4 h-4 text-red-500 mt-0.5 flex-shrink-0" />
              <div className="text-sm text-red-700">
                <p className="font-medium">לא ניתן לבחור</p>
                <p className="text-xs">{statusInfo.description}</p>
              </div>
            </div>
          </div>
        )}
      </div>

      {/* Hover overlay */}
      <div className="absolute inset-0 bg-gradient-to-r from-purple-500/5 to-pink-500/5 opacity-0 group-hover:opacity-100 transition-opacity duration-300 pointer-events-none"></div>
    </div>
  );
};

const CandidateSelector: React.FC<CandidateSelectorProps> = ({
  value,
  onChange,
  otherParty,
  label,
  candidates,
  className,
  error,
}) => {
  const [open, setOpen] = useState(false);
  const [inputValue, setInputValue] = useState('');
  const [activeIndex, setActiveIndex] = useState(-1);

  const filteredCandidates = candidates.filter((candidate) => {
    if (otherParty && candidate.id === otherParty.id) return false;

    if (inputValue) {
      const searchTerm = inputValue.toLowerCase();
      return (
        candidate.firstName.toLowerCase().includes(searchTerm) ||
        candidate.lastName.toLowerCase().includes(searchTerm) ||
        candidate.profile.city?.toLowerCase().includes(searchTerm) ||
        candidate.profile.occupation?.toLowerCase().includes(searchTerm)
      );
    }
    return true;
  });

  const formatCandidateDisplay = useCallback((candidate: Candidate) => {
    const age = calculateAge(new Date(candidate.profile.birthDate));
    return `${candidate.firstName} ${candidate.lastName}, ${age}${
      candidate.profile.city ? `, ${candidate.profile.city}` : ''
    }`;
  }, []);

  const handleSelect = useCallback(
    (candidate: Candidate) => {
      if (candidate.suggestionStatus?.status === 'BLOCKED') {
        toast.error('לא ניתן לבחור מועמד זה', {
          description: `${candidate.firstName} ${candidate.lastName} כבר נמצא/ת בהצעה פעילה עם ${candidate.suggestionStatus.withCandidateName}.`,
        });
        return;
      }

      onChange(candidate);
      setOpen(false);
      setInputValue('');
      setActiveIndex(-1);
    },
    [onChange]
  );

  const handleKeyDown = (e: KeyboardEvent) => {
    if (!open) return;

    switch (e.key) {
      case 'ArrowDown':
        e.preventDefault();
        setActiveIndex((prev) =>
          prev < filteredCandidates.length - 1 ? prev + 1 : prev
        );
        break;
      case 'ArrowUp':
        e.preventDefault();
        setActiveIndex((prev) => (prev > 0 ? prev - 1 : prev));
        break;
      case 'Enter':
        e.preventDefault();
        if (activeIndex >= 0 && activeIndex < filteredCandidates.length) {
          handleSelect(filteredCandidates[activeIndex]);
        }
        break;
      case 'Escape':
        e.preventDefault();
        setOpen(false);
        setActiveIndex(-1);
        break;
    }
  };

  return (
    <div className={className}>
      <div className="space-y-3">
        {/* Enhanced Label */}
        <div className="flex items-center gap-3">
          <div className="p-2 rounded-full bg-gradient-to-r from-purple-500 to-pink-500 text-white shadow-lg">
            <User className="w-5 h-5" />
          </div>
          <label className="text-lg font-bold text-gray-800">{label}</label>
        </div>

        {/* Enhanced Search Input */}
        <Popover open={open} onOpenChange={setOpen}>
          <PopoverTrigger asChild>
            <div className="relative group">
              <div className="absolute inset-0 bg-gradient-to-r from-purple-500/20 to-pink-500/20 rounded-2xl blur opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
              <div className="relative">
                <Search className="absolute right-4 top-1/2 transform -translate-y-1/2 h-5 w-5 text-purple-400 group-hover:text-purple-600 transition-colors" />
                <Input
                  value={value ? formatCandidateDisplay(value) : inputValue}
                  onChange={(e) => {
                    setInputValue(e.target.value);
                    if (!open) setOpen(true);
                    setActiveIndex(-1);
                  }}
                  onKeyDown={handleKeyDown}
                  onClick={() => !open && setOpen(true)}
                  placeholder="חפש/י מועמד/ת..."
                  className={cn(
                    'h-14 pr-14 text-right text-lg border-2 transition-all duration-300 rounded-2xl shadow-lg',
                    'bg-white/80 backdrop-blur-sm',
                    'border-purple-200 hover:border-purple-300 focus:border-purple-500 focus:ring-purple-200',
                    'placeholder:text-gray-400',
                    error &&
                      'border-red-300 focus:border-red-500 focus:ring-red-200'
                  )}
                  role="combobox"
                  aria-expanded={open}
                  aria-controls="candidate-listbox"
                  aria-activedescendant={
                    activeIndex >= 0
                      ? `candidate-${filteredCandidates[activeIndex]?.id}`
                      : undefined
                  }
                />
                <div className="absolute left-4 top-1/2 transform -translate-y-1/2">
                  <Sparkles className="h-4 w-4 text-purple-400" />
                </div>
              </div>
            </div>
          </PopoverTrigger>

          <PopoverContent
            className="p-0 w-[500px] border-0 shadow-2xl rounded-2xl bg-white/95 backdrop-blur-sm"
            align="start"
            side="bottom"
            sideOffset={8}
          >
            <Command shouldFilter={false}>
              <div className="relative">
                <CommandInput
                  placeholder="חיפוש מועמדים..."
                  value={inputValue}
                  onValueChange={setInputValue}
                  className="h-12 border-0 text-right text-lg bg-gradient-to-r from-purple-50 to-pink-50"
                />
                <div className="absolute right-4 top-1/2 transform -translate-y-1/2">
                  <Search className="h-4 w-4 text-purple-400" />
                </div>
              </div>

              <CommandList
                className="max-h-[400px] overflow-auto p-2"
                id="candidate-listbox"
                role="listbox"
              >
                <CommandEmpty>
                  <div className="text-center p-8">
                    <div className="w-16 h-16 rounded-full bg-gradient-to-br from-gray-100 to-gray-200 flex items-center justify-center mx-auto mb-4">
                      <Search className="w-8 h-8 text-gray-400" />
                    </div>
                    <h3 className="text-lg font-bold text-gray-800 mb-2">
                      לא נמצאו תוצאות
                    </h3>
                    <p className="text-gray-600">נסה לשנות את מונחי החיפוש</p>
                  </div>
                </CommandEmpty>

                <CommandGroup>
                  <div className="grid gap-3">
                    {filteredCandidates.map((candidate, index) => {
                      const isBlocked =
                        candidate.suggestionStatus?.status === 'BLOCKED';
                      return (
                        <EnhancedCandidateCard
                          key={candidate.id}
                          candidate={candidate}
                          onClick={() => handleSelect(candidate)}
                          isActive={index === activeIndex}
                          isBlocked={isBlocked}
                        />
                      );
                    })}
                  </div>
                </CommandGroup>
              </CommandList>
            </Command>
          </PopoverContent>
        </Popover>

        {error && (
          <div className="flex items-center gap-2 p-3 bg-gradient-to-r from-red-50 to-pink-50 rounded-xl border border-red-200">
            <AlertTriangle className="w-4 h-4 text-red-500" />
            <p className="text-sm text-red-600 font-medium">{error}</p>
          </div>
        )}
      </div>

      {/* Selected Candidate Display */}
      {value && (
        <Card className="mt-4 border-0 shadow-xl bg-gradient-to-br from-white via-purple-50/30 to-pink-50/30 rounded-2xl overflow-hidden">
          <CardContent className="p-6">
            <div className="flex items-center justify-between mb-4">
              <div className="flex items-center gap-3">
                <div className="p-2 rounded-full bg-gradient-to-r from-green-500 to-emerald-500 text-white shadow-lg">
                  <Heart className="w-5 h-5" />
                </div>
                <h4 className="text-lg font-bold text-gray-800">
                  מועמד/ת נבחר/ת
                </h4>
              </div>

              <Button
                variant="ghost"
                size="sm"
                onClick={() => onChange(null)}
                className="text-red-600 hover:text-red-700 hover:bg-red-50 rounded-xl transition-all duration-300"
              >
                <Zap className="w-4 h-4 ml-1" />
                הסר בחירה
              </Button>
            </div>

            <EnhancedCandidateCard
              candidate={value}
              onClick={() => {}}
              isActive={true}
              isBlocked={false}
            />

            <div className="flex gap-3 mt-4">
              <Button
                variant="outline"
                size="sm"
                onClick={() => {
                  /* Implement view profile handler */
                }}
                className="flex-1 border-2 border-purple-200 text-purple-600 hover:bg-purple-50 rounded-xl transition-all duration-300"
              >
                <User className="w-4 h-4 ml-2" />
                צפה בפרופיל מלא
              </Button>
            </div>
          </CardContent>
        </Card>
      )}
    </div>
  );
};

export default CandidateSelector;
--- End of Content for CandidateSelector.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\app\components\matchmaker\suggestions\NewSuggestionForm\MatchPreview.tsx
--------------------------------------------------------------------------------
Content:
// src/app/components/matchmaker/suggestions/NewSuggestionForm/MatchPreview.tsx

import React from 'react';
import { Card, CardContent } from '@/components/ui/card';
import { Progress } from '@/components/ui/progress';
import { Badge } from '@/components/ui/badge';
import {
  CheckCircle,
  AlertCircle,
  XCircle,
  Heart,
  Star,
  Sparkles,
  TrendingUp,
  Award,
  Crown,
  Gem,
  Zap,
  Target,
  Trophy,
  Flame,
  Gift,
} from 'lucide-react';
import { calculateMatchScore } from '../utils/matchingAlgorithm';
import type { Candidate } from '../../new/types/candidates';
import type { MatchScore } from '../utils/matchingAlgorithm';
import { cn } from '@/lib/utils';

interface MatchPreviewProps {
  firstParty: Candidate;
  secondParty: Candidate;
  className?: string;
}

const MatchCriteriaCard: React.FC<{
  criterion: {
    name: string;
    score: number;
    reason?: string;
  };
  index: number;
}> = ({ criterion, index }) => {
  const getCriterionInfo = (name: string) => {
    switch (name) {
      case 'age':
        return {
          icon: Target,
          label: 'גיל',
          color: 'from-blue-500 to-cyan-500',
          bgColor: 'from-blue-50 to-cyan-50',
        };
      case 'location':
        return {
          icon: Crown,
          label: 'מיקום',
          color: 'from-green-500 to-emerald-500',
          bgColor: 'from-green-50 to-emerald-50',
        };
      case 'religious':
        return {
          icon: Sparkles,
          label: 'רמה דתית',
          color: 'from-purple-500 to-pink-500',
          bgColor: 'from-purple-50 to-pink-50',
        };
      default:
        return {
          icon: Star,
          label: name,
          color: 'from-gray-500 to-slate-500',
          bgColor: 'from-gray-50 to-slate-50',
        };
    }
  };

  const info = getCriterionInfo(criterion.name);
  const IconComponent = info.icon;
  const scorePercentage = Math.round(criterion.score * 100);

  const getScoreCategory = (score: number) => {
    if (score >= 0.9)
      return {
        label: 'מושלם',
        color: 'text-emerald-600',
        bgColor: 'bg-emerald-100',
      };
    if (score >= 0.8)
      return {
        label: 'מצוין',
        color: 'text-green-600',
        bgColor: 'bg-green-100',
      };
    if (score >= 0.7)
      return { label: 'טוב', color: 'text-blue-600', bgColor: 'bg-blue-100' };
    if (score >= 0.5)
      return {
        label: 'בינוני',
        color: 'text-yellow-600',
        bgColor: 'bg-yellow-100',
      };
    return { label: 'נמוך', color: 'text-red-600', bgColor: 'bg-red-100' };
  };

  const scoreCategory = getScoreCategory(criterion.score);

  return (
    <div
      className={cn(
        'relative overflow-hidden rounded-2xl transition-all duration-500 group hover:scale-105',
        'bg-gradient-to-br',
        info.bgColor,
        'border border-white/50 shadow-lg hover:shadow-2xl'
      )}
      style={{
        animationDelay: `${index * 150}ms`,
        animationFillMode: 'both',
      }}
    >
      {/* Background decoration */}
      <div className="absolute inset-0">
        <div className="absolute top-0 right-0 w-16 h-16 bg-gradient-to-br from-white/30 to-transparent rounded-full blur-xl opacity-0 group-hover:opacity-100 transition-opacity duration-500"></div>
        <div className="absolute bottom-0 left-0 w-12 h-12 bg-gradient-to-br from-white/20 to-transparent rounded-full blur-lg opacity-0 group-hover:opacity-100 transition-opacity duration-700"></div>
      </div>

      <div className="relative z-10 p-6 space-y-4">
        {/* Header */}
        <div className="flex items-center justify-between">
          <div className="flex items-center gap-3">
            <div
              className={cn(
                'p-3 rounded-full shadow-lg group-hover:scale-110 transition-transform bg-gradient-to-r text-white',
                info.color
              )}
            >
              <IconComponent className="w-5 h-5" />
            </div>
            <h4 className="text-lg font-bold text-gray-800">{info.label}</h4>
          </div>

          <Badge
            className={cn(
              'px-3 py-1 font-bold shadow-lg',
              scoreCategory.bgColor,
              scoreCategory.color
            )}
          >
            {scoreCategory.label}
          </Badge>
        </div>

        {/* Score visualization */}
        <div className="space-y-3">
          <div className="flex items-center justify-between">
            <span className="text-sm font-medium text-gray-600">התאמה</span>
            <span className="text-2xl font-bold text-gray-800">
              {scorePercentage}%
            </span>
          </div>

          <div className="relative">
            <Progress
              value={scorePercentage}
              className="h-3 bg-white/50 shadow-inner"
            />
            <div className="absolute inset-0 rounded-full bg-gradient-to-r from-transparent via-white/20 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-500"></div>
          </div>
        </div>

        {/* Reason */}
        {criterion.reason && (
          <div className="p-3 bg-white/60 backdrop-blur-sm rounded-xl border border-white/50 shadow-inner">
            <p className="text-sm text-gray-700 leading-relaxed font-medium">
              {criterion.reason}
            </p>
          </div>
        )}
      </div>
    </div>
  );
};

const MatchPreview: React.FC<MatchPreviewProps> = ({
  firstParty,
  secondParty,
  className,
}) => {
  // Calculate match score using the existing algorithm
  const matchScore: MatchScore | null = calculateMatchScore(
    firstParty.profile,
    secondParty.profile
  );

  if (!matchScore) {
    return (
      <Card
        className={cn(
          'border-0 shadow-xl rounded-3xl overflow-hidden',
          className
        )}
      >
        <CardContent className="p-8">
          <div className="text-center space-y-6">
            <div className="w-24 h-24 rounded-full bg-gradient-to-br from-yellow-100 to-amber-100 flex items-center justify-center mx-auto shadow-xl">
              <AlertCircle className="w-12 h-12 text-yellow-500" />
            </div>
            <div>
              <h3 className="text-xl font-bold text-gray-800 mb-2">
                לא ניתן לחשב התאמה
              </h3>
              <p className="text-gray-600">
                חסרים נתונים חיוניים לחישוב ההתאמה
              </p>
            </div>
            <div className="p-4 bg-gradient-to-r from-yellow-50 to-amber-50 rounded-2xl border border-yellow-200">
              <p className="text-sm text-yellow-800 font-medium">
                אנא ודא שלשני המועמדים יש פרופיל מלא עם תאריך לידה, עיר מגורים
                ורמה דתית
              </p>
            </div>
          </div>
        </CardContent>
      </Card>
    );
  }

  // Determine match quality with enhanced categories
  const getMatchQuality = (score: number) => {
    if (score >= 95)
      return {
        icon: Crown,
        color: 'text-purple-600',
        bgGradient: 'from-purple-500 to-pink-500',
        bgColor: 'from-purple-50 to-pink-50',
        text: 'התאמה מושלמת',
        description: 'זוג אידיאלי עם התאמה יוצאת דופן!',
        animation: 'animate-pulse',
      };
    if (score >= 85)
      return {
        icon: Gem,
        color: 'text-emerald-600',
        bgGradient: 'from-emerald-500 to-green-500',
        bgColor: 'from-emerald-50 to-green-50',
        text: 'התאמה מעולה',
        description: 'זוג עם פוטנציאל גבוה להצלחה',
        animation: '',
      };
    if (score >= 75)
      return {
        icon: Trophy,
        color: 'text-blue-600',
        bgGradient: 'from-blue-500 to-cyan-500',
        bgColor: 'from-blue-50 to-cyan-50',
        text: 'התאמה טובה',
        description: 'התאמה איכותית עם סיכויים טובים',
        animation: '',
      };
    if (score >= 60)
      return {
        icon: Star,
        color: 'text-yellow-600',
        bgGradient: 'from-yellow-500 to-amber-500',
        bgColor: 'from-yellow-50 to-amber-50',
        text: 'התאמה בינונית',
        description: 'יש פוטנציאל, שווה לבדוק',
        animation: '',
      };
    return {
      icon: AlertCircle,
      color: 'text-red-600',
      bgGradient: 'from-red-500 to-pink-500',
      bgColor: 'from-red-50 to-pink-50',
      text: 'התאמה נמוכה',
      description: 'התאמה מוגבלת, יש לשקול בזהירות',
      animation: '',
    };
  };

  const quality = getMatchQuality(matchScore.score);
  const Icon = quality.icon;

  return (
    <Card
      className={cn(
        'border-0 shadow-2xl rounded-3xl overflow-hidden transition-all duration-500 hover:shadow-3xl',
        'bg-gradient-to-br',
        quality.bgColor,
        className
      )}
    >
      {/* Animated background */}
      <div className="absolute inset-0">
        <div className="absolute top-0 right-0 w-64 h-64 bg-gradient-to-br from-white/20 to-transparent rounded-full blur-3xl animate-float"></div>
        <div
          className="absolute bottom-0 left-0 w-48 h-48 bg-gradient-to-br from-white/10 to-transparent rounded-full blur-2xl animate-float"
          style={{ animationDelay: '2s' }}
        ></div>
        <div
          className="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-80 h-80 bg-gradient-to-br from-white/5 to-transparent rounded-full blur-3xl animate-float"
          style={{ animationDelay: '4s' }}
        ></div>
      </div>

      <CardContent className="relative z-10 p-8 space-y-8">
        {/* Header Section */}
        <div className="text-center space-y-6">
          <div className="flex items-center justify-center">
            <div
              className={cn(
                'p-6 rounded-full shadow-2xl bg-gradient-to-r text-white transform hover:scale-110 transition-transform duration-300',
                quality.bgGradient,
                quality.animation
              )}
            >
              <Icon className="w-12 h-12" />
            </div>
          </div>

          <div className="space-y-2">
            <h2 className="text-3xl font-bold text-gray-800">{quality.text}</h2>
            <p className="text-lg text-gray-600 leading-relaxed">
              {quality.description}
            </p>
          </div>

          {/* Score display */}
          <div className="relative">
            <div className="flex items-center justify-center gap-4 mb-4">
              <div className="text-center">
                <div className="text-5xl font-bold bg-gradient-to-r from-purple-600 via-pink-600 to-blue-600 bg-clip-text text-transparent">
                  {Math.round(matchScore.score)}%
                </div>
                <p className="text-sm font-medium text-gray-600 mt-1">
                  ציון התאמה כללי
                </p>
              </div>
            </div>

            {/* Progress Ring */}
            <div className="relative w-32 h-32 mx-auto">
              <svg
                className="w-32 h-32 transform -rotate-90"
                viewBox="0 0 100 100"
              >
                <circle
                  cx="50"
                  cy="50"
                  r="40"
                  stroke="currentColor"
                  strokeWidth="8"
                  fill="transparent"
                  className="text-gray-200"
                />
                <circle
                  cx="50"
                  cy="50"
                  r="40"
                  stroke="url(#gradient)"
                  strokeWidth="8"
                  fill="transparent"
                  strokeDasharray={`${2 * Math.PI * 40}`}
                  strokeDashoffset={`${2 * Math.PI * 40 * (1 - matchScore.score / 100)}`}
                  className="transition-all duration-1000 ease-out"
                  strokeLinecap="round"
                />
                <defs>
                  <linearGradient
                    id="gradient"
                    x1="0%"
                    y1="0%"
                    x2="100%"
                    y2="0%"
                  >
                    <stop offset="0%" stopColor="#8B5CF6" />
                    <stop offset="50%" stopColor="#EC4899" />
                    <stop offset="100%" stopColor="#3B82F6" />
                  </linearGradient>
                </defs>
              </svg>
              <div className="absolute inset-0 flex items-center justify-center">
                <Sparkles className="w-8 h-8 text-purple-500 animate-pulse" />
              </div>
            </div>
          </div>
        </div>

        {/* Match Criteria Section */}
        <div className="space-y-6">
          <div className="text-center">
            <h3 className="text-2xl font-bold text-gray-800 mb-2 flex items-center justify-center gap-3">
              <TrendingUp className="w-6 h-6 text-purple-500" />
              פירוט קריטריונים
            </h3>
            <p className="text-gray-600">ניתוח מפורט של רמות ההתאמה השונות</p>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
            {matchScore.criteria.map((criterion, index) => (
              <div key={criterion.name} className="animate-fade-in-up">
                <MatchCriteriaCard criterion={criterion} index={index} />
              </div>
            ))}
          </div>
        </div>

        {/* Match Reasons Section */}
        {matchScore.reasons.length > 0 && (
          <div className="space-y-4">
            <div className="text-center">
              <h4 className="text-xl font-bold text-gray-800 mb-2 flex items-center justify-center gap-3">
                <Heart className="w-5 h-5 text-red-500" />
                סיבות להתאמה
              </h4>
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              {matchScore.reasons.map((reason, index) => (
                <div
                  key={index}
                  className="flex items-start gap-3 p-4 bg-white/60 backdrop-blur-sm rounded-2xl border border-white/50 shadow-lg hover:shadow-xl transition-all duration-300 group"
                  style={{
                    animationDelay: `${(index + 3) * 150}ms`,
                    animationFillMode: 'both',
                  }}
                >
                  <div className="p-2 rounded-full bg-gradient-to-r from-green-500 to-emerald-500 text-white shadow-lg group-hover:scale-110 transition-transform">
                    <Gift className="w-4 h-4" />
                  </div>
                  <p className="text-gray-700 leading-relaxed font-medium flex-1">
                    {reason}
                  </p>
                </div>
              ))}
            </div>
          </div>
        )}

        {/* Summary Card */}
        <div className="p-6 bg-white/70 backdrop-blur-sm rounded-2xl border border-white/50 shadow-xl">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-4">
              <div className="p-3 rounded-full bg-gradient-to-r from-indigo-500 to-purple-500 text-white shadow-lg">
                <Award className="w-6 h-6" />
              </div>
              <div>
                <h4 className="text-lg font-bold text-gray-800">סיכום התאמה</h4>
                <p className="text-gray-600">המלצה מבוססת ניתוח</p>
              </div>
            </div>

            <div className="text-right">
              <div className="flex items-center gap-2">
                {matchScore.score >= 80 ? (
                  <>
                    <Zap className="w-5 h-5 text-green-500" />
                    <span className="font-bold text-green-600">
                      מומלץ בחום!
                    </span>
                  </>
                ) : matchScore.score >= 60 ? (
                  <>
                    <Star className="w-5 h-5 text-blue-500" />
                    <span className="font-bold text-blue-600">שווה לנסות</span>
                  </>
                ) : (
                  <>
                    <AlertCircle className="w-5 h-5 text-yellow-500" />
                    <span className="font-bold text-yellow-600">
                      צריך שיקול
                    </span>
                  </>
                )}
              </div>
              <p className="text-sm text-gray-500 mt-1">
                מבוסס על {matchScore.criteria.length} קריטריונים
              </p>
            </div>
          </div>
        </div>
      </CardContent>
    </Card>
  );
};

export default MatchPreview;
--- End of Content for MatchPreview.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\app\components\matchmaker\suggestions\NewSuggestionForm\NewSuggestionForm_contents.txt
--------------------------------------------------------------------------------
[This is the output log file itself. Content not included.]

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\app\components\matchmaker\suggestions\NewSuggestionForm\SuggestionDetails.tsx
--------------------------------------------------------------------------------
Content:
// src/app/components/matchmaker/suggestions/NewSuggestionForm/SuggestionDetails.tsx

'use client';
import React, { useState } from 'react';
import { useFormContext } from 'react-hook-form';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select';
import { Card, CardContent } from '@/components/ui/card';
import { Priority } from '@prisma/client';
import { Label } from '@/components/ui/label';
import { Button } from '@/components/ui/button';
import { Textarea } from '@/components/ui/textarea';
import { toast } from 'sonner';
import {
  Loader2,
  Sparkles,
  AlertTriangle,
  Star,
  Flame,
  Target,
  Shield,
  Heart,
  MessageCircle,
  User,
  Calendar,
  Zap,
  Crown,
  Award,
  Gift,
  Clock,
  Wand2,
  Brain,
  Eye,
  Users,
} from 'lucide-react';
import { Alert, AlertDescription } from '@/components/ui/alert';
import type { NewSuggestionFormData } from './schema';
import type { Candidate } from '../../new/types/candidates';
import { cn } from '@/lib/utils';

interface SuggestionDetailsProps {
  firstParty: Candidate;
  secondParty: Candidate;
}

const EnhancedSection: React.FC<{
  icon: React.ElementType;
  title: string;
  description?: string;
  gradient: string;
  children: React.ReactNode;
  className?: string;
}> = ({ icon: Icon, title, description, gradient, children, className }) => (
  <Card
    className={cn(
      'border-0 shadow-xl hover:shadow-2xl transition-all duration-500 group overflow-hidden rounded-3xl',
      'bg-gradient-to-br from-white via-gray-50/30 to-white',
      className
    )}
  >
    {/* Background decoration */}
    <div className="absolute inset-0">
      <div className="absolute top-0 right-0 w-32 h-32 bg-gradient-to-br from-purple-200/20 to-pink-200/20 rounded-full blur-2xl opacity-0 group-hover:opacity-100 transition-opacity duration-700"></div>
      <div className="absolute bottom-0 left-0 w-24 h-24 bg-gradient-to-br from-cyan-200/20 to-blue-200/20 rounded-full blur-xl opacity-0 group-hover:opacity-100 transition-opacity duration-900"></div>
    </div>

    <CardContent className="relative z-10 p-8 space-y-6">
      {/* Header */}
      <div className="flex items-center gap-4 mb-6">
        <div
          className={cn(
            'p-4 rounded-2xl shadow-xl group-hover:scale-110 transition-transform duration-300 bg-gradient-to-r text-white',
            gradient
          )}
        >
          <Icon className="w-8 h-8" />
        </div>
        <div className="flex-1">
          <h3
            className="text-2xl font-bold text-gray-800 group-hover:text-transparent group-hover:bg-gradient-to-r group-hover:bg-clip-text transition-all duration-300"
            style={{
              backgroundImage: `linear-gradient(to right, ${gradient.replace('from-', '').replace('to-', ', ')})`,
            }}
          >
            {title}
          </h3>
          {description && (
            <p className="text-gray-600 mt-1 leading-relaxed">{description}</p>
          )}
        </div>
      </div>

      {children}
    </CardContent>
  </Card>
);

const PriorityBadge: React.FC<{ priority: Priority }> = ({ priority }) => {
  const getPriorityInfo = (p: Priority) => {
    switch (p) {
      case Priority.URGENT:
        return {
          label: 'דחוף',
          icon: Flame,
          className:
            'bg-gradient-to-r from-red-500 to-pink-500 text-white animate-pulse shadow-xl',
          description: 'דורש טיפול מיידי!',
        };
      case Priority.HIGH:
        return {
          label: 'גבוהה',
          icon: Star,
          className:
            'bg-gradient-to-r from-orange-500 to-amber-500 text-white shadow-xl',
          description: 'עדיפות גבוהה',
        };
      case Priority.MEDIUM:
        return {
          label: 'רגילה',
          icon: Target,
          className:
            'bg-gradient-to-r from-blue-500 to-cyan-500 text-white shadow-xl',
          description: 'עדיפות רגילה',
        };
      case Priority.LOW:
        return {
          label: 'נמוכה',
          icon: Shield,
          className:
            'bg-gradient-to-r from-gray-500 to-slate-500 text-white shadow-xl',
          description: 'עדיפות נמוכה',
        };
      default:
        return {
          label: 'רגילה',
          icon: Target,
          className:
            'bg-gradient-to-r from-blue-500 to-cyan-500 text-white shadow-xl',
          description: 'עדיפות רגילה',
        };
    }
  };

  const info = getPriorityInfo(priority);
  const IconComponent = info.icon;

  return (
    <div
      className={cn(
        'flex items-center gap-2 px-4 py-2 rounded-xl font-bold',
        info.className
      )}
    >
      <IconComponent className="w-4 h-4" />
      <span>{info.label}</span>
    </div>
  );
};

const SuggestionDetails: React.FC<SuggestionDetailsProps> = ({
  firstParty,
  secondParty,
}) => {
  const {
    register,
    formState: { errors },
    setValue,
    watch,
  } = useFormContext<NewSuggestionFormData>();
  const [isGeneratingRationale, setIsGeneratingRationale] = useState(false);

  const priority = watch('priority', Priority.MEDIUM);

  const handleGenerateRationale = async () => {
    setIsGeneratingRationale(true);
    toast.info('ה-AI מנסח את חבילת הנימוקים...', {
      description: 'זה יכול לקחת כמה שניות',
      duration: 3000,
    });

    try {
      const response = await fetch('/api/ai/generate-suggestion-rationale', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          userId1: firstParty.id,
          userId2: secondParty.id,
        }),
      });

      const data = await response.json();

      if (!response.ok || !data.success || !data.rationales) {
        throw new Error(data.error || 'שגיאה ביצור הנימוקים');
      }

      const { generalRationale, rationaleForParty1, rationaleForParty2 } =
        data.rationales;

      setValue('matchingReason', generalRationale, {
        shouldValidate: true,
        shouldDirty: true,
      });
      setValue('firstPartyNotes', rationaleForParty1, {
        shouldValidate: true,
        shouldDirty: true,
      });
      setValue('secondPartyNotes', rationaleForParty2, {
        shouldValidate: true,
        shouldDirty: true,
      });

      toast.success('הנימוקים נוצרו בהצלחה!', {
        description: 'כל השדות מולאו באופן אוטומטי עם תוכן מותאם אישית',
        duration: 5000,
      });
    } catch (error) {
      console.error('Failed to generate rationales:', error);
      toast.error(error instanceof Error ? error.message : 'שגיאה לא צפויה', {
        description: 'נסה שוב או מלא את השדות ידנית',
      });
    } finally {
      setIsGeneratingRationale(false);
    }
  };

  return (
    <div className="space-y-8">
      {/* Priority Section */}
      <EnhancedSection
        icon={Crown}
        title="עדיפות ההצעה"
        description="קבע את רמת החשיבות והדחיפות של ההצעה"
        gradient="from-purple-500 to-pink-500"
      >
        <div className="space-y-4">
          <div className="flex items-center justify-between">
            <Label className="text-lg font-semibold text-gray-700">
              בחר רמת עדיפות
            </Label>
            <PriorityBadge priority={priority} />
          </div>

          <Select
            onValueChange={(value: Priority) =>
              setValue('priority', value, { shouldValidate: true })
            }
            defaultValue={priority}
            name="priority"
          >
            <SelectTrigger className="h-14 border-2 border-purple-200 hover:border-purple-300 focus:border-purple-500 rounded-2xl bg-white/80 backdrop-blur-sm shadow-lg transition-all text-lg">
              <SelectValue placeholder="בחר/י עדיפות" />
            </SelectTrigger>
            <SelectContent className="border-0 shadow-2xl rounded-2xl bg-white/95 backdrop-blur-sm">
              <SelectItem value={Priority.URGENT}>
                <div className="flex items-center gap-3 py-2">
                  <Flame className="w-5 h-5 text-red-500" />
                  <div>
                    <div className="font-bold text-red-600">דחופה</div>
                    <div className="text-xs text-red-500">דורש טיפול מיידי</div>
                  </div>
                </div>
              </SelectItem>
              <SelectItem value={Priority.HIGH}>
                <div className="flex items-center gap-3 py-2">
                  <Star className="w-5 h-5 text-orange-500" />
                  <div>
                    <div className="font-bold text-orange-600">גבוהה</div>
                    <div className="text-xs text-orange-500">עדיפות מוגברת</div>
                  </div>
                </div>
              </SelectItem>
              <SelectItem value={Priority.MEDIUM}>
                <div className="flex items-center gap-3 py-2">
                  <Target className="w-5 h-5 text-blue-500" />
                  <div>
                    <div className="font-bold text-blue-600">רגילה</div>
                    <div className="text-xs text-blue-500">עדיפות סטנדרטית</div>
                  </div>
                </div>
              </SelectItem>
              <SelectItem value={Priority.LOW}>
                <div className="flex items-center gap-3 py-2">
                  <Shield className="w-5 h-5 text-gray-500" />
                  <div>
                    <div className="font-bold text-gray-600">נמוכה</div>
                    <div className="text-xs text-gray-500">ללא דחיפות</div>
                  </div>
                </div>
              </SelectItem>
            </SelectContent>
          </Select>

          {errors.priority && (
            <div className="flex items-center gap-2 p-3 bg-gradient-to-r from-red-50 to-pink-50 rounded-xl border border-red-200">
              <AlertTriangle className="w-4 h-4 text-red-500" />
              <p className="text-sm text-red-600 font-medium">
                {errors.priority.message}
              </p>
            </div>
          )}
        </div>
      </EnhancedSection>

      {/* AI-Generated Matching Reason */}
      <EnhancedSection
        icon={Brain}
        title="סיבת ההתאמה הכללית"
        description="נימוק מפורט המסביר מדוע יש התאמה בין הצדדים"
        gradient="from-emerald-500 to-green-500"
      >
        <div className="space-y-6">
          <div className="flex items-center justify-between">
            <Label className="text-lg font-semibold text-gray-700">
              תוכן יוצג לצדדים
            </Label>
            <Button
              type="button"
              onClick={handleGenerateRationale}
              disabled={isGeneratingRationale}
              className="bg-gradient-to-r from-purple-600 via-pink-600 to-blue-600 hover:from-purple-700 hover:via-pink-700 hover:to-blue-700 text-white shadow-xl hover:shadow-2xl transition-all duration-300 rounded-2xl px-6 py-3 font-bold"
            >
              {isGeneratingRationale ? (
                <>
                  <Loader2 className="w-5 h-5 ml-2 animate-spin" />
                  <span>מנסח...</span>
                </>
              ) : (
                <>
                  <Wand2 className="w-5 h-5 ml-2 text-yellow-300" />
                  <span>צור נימוקים (AI)</span>
                </>
              )}
            </Button>
          </div>

          <Textarea
            id="matchingReason"
            {...register('matchingReason')}
            placeholder="נימוק כללי המסביר מדוע יש התאמה בין הצדדים..."
            className="min-h-[140px] border-2 border-emerald-200 hover:border-emerald-300 focus:border-emerald-500 rounded-2xl bg-white/80 backdrop-blur-sm shadow-lg transition-all text-lg resize-none"
          />

          {errors.matchingReason && (
            <div className="flex items-center gap-2 p-3 bg-gradient-to-r from-red-50 to-pink-50 rounded-xl border border-red-200">
              <AlertTriangle className="w-4 h-4 text-red-500" />
              <p className="text-sm text-red-600 font-medium">
                {errors.matchingReason.message}
              </p>
            </div>
          )}

          <Alert className="border-0 bg-gradient-to-r from-blue-50 to-cyan-50 shadow-lg rounded-2xl">
            <Sparkles className="h-5 w-5 text-blue-500" />
            <AlertDescription className="text-blue-800 font-medium leading-relaxed">
              💡 <strong>טיפ חכם:</strong> לחיצה על כפתור ה-AI תמלא אוטומטית את
              שדה זה וגם את שדות ההערות האישיות לכל צד עם תוכן מותאם ומקצועי.
            </AlertDescription>
          </Alert>
        </div>
      </EnhancedSection>

      {/* Personal Notes for Each Party */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
        {/* First Party Notes */}
        <EnhancedSection
          icon={User}
          title={`הערות אישיות ל${firstParty.firstName}`}
          description="טקסט אישי המדגיש את היתרונות של הצד השני עבורו"
          gradient="from-blue-500 to-cyan-500"
          className="lg:col-span-1"
        >
          <div className="space-y-4">
            <div className="flex items-center gap-3 p-4 bg-gradient-to-r from-blue-50 to-cyan-50 rounded-2xl border border-blue-100">
              <div className="w-12 h-12 rounded-full bg-gradient-to-r from-blue-500 to-cyan-500 flex items-center justify-center text-white font-bold shadow-lg">
                {firstParty.firstName[0]}
              </div>
              <div>
                <div className="font-bold text-blue-800">
                  {firstParty.firstName} {firstParty.lastName}
                </div>
                <div className="text-sm text-blue-600">צד א' בהצעה</div>
              </div>
            </div>

            <Textarea
              id="firstPartyNotes"
              {...register('firstPartyNotes')}
              placeholder={`טקסט אישי המדגיש את היתרונות של ${secondParty.firstName} עבור ${firstParty.firstName}...`}
              className="min-h-[160px] border-2 border-blue-200 hover:border-blue-300 focus:border-blue-500 rounded-2xl bg-white/80 backdrop-blur-sm shadow-lg transition-all text-lg resize-none"
            />

            {errors.firstPartyNotes && (
              <div className="flex items-center gap-2 p-3 bg-gradient-to-r from-red-50 to-pink-50 rounded-xl border border-red-200">
                <AlertTriangle className="w-4 h-4 text-red-500" />
                <p className="text-sm text-red-600 font-medium">
                  {errors.firstPartyNotes.message}
                </p>
              </div>
            )}
          </div>
        </EnhancedSection>

        {/* Second Party Notes */}
        <EnhancedSection
          icon={User}
          title={`הערות אישיות ל${secondParty.firstName}`}
          description="טקסט אישי המדגיש את היתרונות של הצד השני עבורה"
          gradient="from-purple-500 to-pink-500"
          className="lg:col-span-1"
        >
          <div className="space-y-4">
            <div className="flex items-center gap-3 p-4 bg-gradient-to-r from-purple-50 to-pink-50 rounded-2xl border border-purple-100">
              <div className="w-12 h-12 rounded-full bg-gradient-to-r from-purple-500 to-pink-500 flex items-center justify-center text-white font-bold shadow-lg">
                {secondParty.firstName[0]}
              </div>
              <div>
                <div className="font-bold text-purple-800">
                  {secondParty.firstName} {secondParty.lastName}
                </div>
                <div className="text-sm text-purple-600">צד ב' בהצעה</div>
              </div>
            </div>

            <Textarea
              id="secondPartyNotes"
              {...register('secondPartyNotes')}
              placeholder={`טקסט אישי המדגיש את היתרונות של ${firstParty.firstName} עבור ${secondParty.firstName}...`}
              className="min-h-[160px] border-2 border-purple-200 hover:border-purple-300 focus:border-purple-500 rounded-2xl bg-white/80 backdrop-blur-sm shadow-lg transition-all text-lg resize-none"
            />

            {errors.secondPartyNotes && (
              <div className="flex items-center gap-2 p-3 bg-gradient-to-r from-red-50 to-pink-50 rounded-xl border border-red-200">
                <AlertTriangle className="w-4 h-4 text-red-500" />
                <p className="text-sm text-red-600 font-medium">
                  {errors.secondPartyNotes.message}
                </p>
              </div>
            )}
          </div>
        </EnhancedSection>
      </div>

      {/* Internal Notes */}
      <EnhancedSection
        icon={MessageCircle}
        title="הערות פנימיות"
        description="הערות והנחיות לשימוש צוות השדכנים בלבד"
        gradient="from-amber-500 to-orange-500"
      >
        <div className="space-y-4">
          <div className="flex items-center gap-3 p-4 bg-gradient-to-r from-amber-50 to-orange-50 rounded-2xl border border-amber-100">
            <div className="p-3 rounded-full bg-gradient-to-r from-amber-500 to-orange-500 text-white shadow-lg">
              <Eye className="w-5 h-5" />
            </div>
            <div>
              <div className="font-bold text-amber-800">מידע סודי</div>
              <div className="text-sm text-amber-600">
                נראה רק לצוות השדכנים
              </div>
            </div>
          </div>

          <Textarea
            id="internalNotes"
            {...register('internalNotes')}
            placeholder="הערות והנחיות לשימוש פנימי בלבד..."
            className="min-h-[120px] border-2 border-amber-200 hover:border-amber-300 focus:border-amber-500 rounded-2xl bg-white/80 backdrop-blur-sm shadow-lg transition-all text-lg resize-none"
          />

          {errors.internalNotes && (
            <div className="flex items-center gap-2 p-3 bg-gradient-to-r from-red-50 to-pink-50 rounded-xl border border-red-200">
              <AlertTriangle className="w-4 h-4 text-red-500" />
              <p className="text-sm text-red-600 font-medium">
                {errors.internalNotes.message}
              </p>
            </div>
          )}
        </div>
      </EnhancedSection>

      {/* Decision Deadline */}
      <EnhancedSection
        icon={Clock}
        title="תאריך יעד להחלטה"
        description="קבע את המועד האחרון למתן תגובה מהצדדים"
        gradient="from-indigo-500 to-purple-500"
      >
        <div className="space-y-4">
          <Label className="text-lg font-semibold text-gray-700">
            בחר תקופת זמן למענה
          </Label>

          <Select
            onValueChange={(value) => {
              const days = parseInt(value, 10);
              const deadline = new Date();
              deadline.setDate(deadline.getDate() + days);
              setValue('decisionDeadline', deadline, { shouldValidate: true });
            }}
            defaultValue="14"
          >
            <SelectTrigger className="h-14 border-2 border-indigo-200 hover:border-indigo-300 focus:border-indigo-500 rounded-2xl bg-white/80 backdrop-blur-sm shadow-lg transition-all text-lg">
              <SelectValue />
            </SelectTrigger>
            <SelectContent className="border-0 shadow-2xl rounded-2xl bg-white/95 backdrop-blur-sm">
              <SelectItem value="3">
                <div className="flex items-center gap-3 py-2">
                  <Zap className="w-5 h-5 text-red-500" />
                  <div>
                    <div className="font-bold text-red-600">3 ימים</div>
                    <div className="text-xs text-red-500">מהיר וזריז</div>
                  </div>
                </div>
              </SelectItem>
              <SelectItem value="7">
                <div className="flex items-center gap-3 py-2">
                  <Award className="w-5 h-5 text-orange-500" />
                  <div>
                    <div className="font-bold text-orange-600">7 ימים</div>
                    <div className="text-xs text-orange-500">תקופה קצרה</div>
                  </div>
                </div>
              </SelectItem>
              <SelectItem value="14">
                <div className="flex items-center gap-3 py-2">
                  <Target className="w-5 h-5 text-blue-500" />
                  <div>
                    <div className="font-bold text-blue-600">14 ימים</div>
                    <div className="text-xs text-blue-500">
                      תקופה סטנדרטית (מומלץ)
                    </div>
                  </div>
                </div>
              </SelectItem>
              <SelectItem value="30">
                <div className="flex items-center gap-3 py-2">
                  <Shield className="w-5 h-5 text-green-500" />
                  <div>
                    <div className="font-bold text-green-600">30 ימים</div>
                    <div className="text-xs text-green-500">תקופה מורחבת</div>
                  </div>
                </div>
              </SelectItem>
            </SelectContent>
          </Select>

          {errors.decisionDeadline && (
            <div className="flex items-center gap-2 p-3 bg-gradient-to-r from-red-50 to-pink-50 rounded-xl border border-red-200">
              <AlertTriangle className="w-4 h-4 text-red-500" />
              <p className="text-sm text-red-600 font-medium">
                {errors.decisionDeadline.message}
              </p>
            </div>
          )}

          <div className="p-4 bg-gradient-to-r from-indigo-50 to-purple-50 rounded-2xl border border-indigo-100">
            <div className="flex items-start gap-3">
              <Calendar className="w-5 h-5 text-indigo-500 mt-1" />
              <div>
                <div className="font-bold text-indigo-800 mb-1">מידע חשוב</div>
                <p className="text-sm text-indigo-700 leading-relaxed">
                  לאחר תקופת הזמן שנבחרה, אם לא התקבלה תגובה מאחד הצדדים, ההצעה
                  תועבר אוטומטית לסטטוס "פג תוקף".
                </p>
              </div>
            </div>
          </div>
        </div>
      </EnhancedSection>

      {/* Summary Card */}
      <Card className="border-0 shadow-2xl bg-gradient-to-br from-gray-50 via-white to-gray-50 rounded-3xl overflow-hidden">
        <CardContent className="p-8">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-4">
              <div className="p-4 rounded-2xl bg-gradient-to-r from-gray-500 to-slate-500 text-white shadow-xl">
                <Users className="w-8 h-8" />
              </div>
              <div>
                <h3 className="text-2xl font-bold text-gray-800">
                  סיכום ההצעה
                </h3>
                <p className="text-gray-600 leading-relaxed">
                  כל הפרטים מוכנים ליצירת ההצעה
                </p>
              </div>
            </div>

            <div className="text-center">
              <div className="flex items-center gap-2 mb-2">
                <Gift className="w-5 h-5 text-purple-500" />
                <span className="font-bold text-purple-600">מוכן ליצירה!</span>
              </div>
              <p className="text-sm text-gray-500">
                לאחר יצירת ההצעה, היא תישלח אוטומטי לצד הראשון
              </p>
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  );
};

export default SuggestionDetails;
--- End of Content for SuggestionDetails.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\app\components\matchmaker\suggestions\NewSuggestionForm\index.tsx
--------------------------------------------------------------------------------
Content:
// src/app/components/matchmaker/suggestions/NewSuggestionForm/index.tsx

'use client';
import React, { useState, useEffect } from 'react';
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription,
  DialogFooter,
  DialogClose,
} from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';
import { toast } from 'sonner';
import { useForm, FormProvider } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { Priority, MatchSuggestionStatus } from '@prisma/client';
import { Separator } from '@/components/ui/separator';
import {
  UserPlus,
  Sparkles,
  Loader2,
  BarChart2,
  CheckCircle,
  Users,
  Heart,
  Crown,
  Zap,
  Star,
  Award,
  Gem,
  Target,
  ArrowRight,
  ArrowLeft,
  Eye,
  X,
  Wand2,
  Gift,
} from 'lucide-react';

// Types
import type { Candidate } from '../../new/types/candidates';
import { newSuggestionSchema, type NewSuggestionFormData } from './schema';

// Components
import SuggestionDetails from './SuggestionDetails';
import MatchPreview from './MatchPreview';
import CandidateSelector from './CandidateSelector';
import { AiMatchAnalysisDialog } from '../../new/dialogs/AiMatchAnalysisDialog';
import { cn } from '@/lib/utils';

interface NewSuggestionFormProps {
  isOpen: boolean;
  onClose: () => void;
  candidates: Candidate[];
  selectedCandidate?: Candidate | null;
  onSubmit: (data: NewSuggestionFormData) => Promise<void>;
}

const StepIndicator: React.FC<{
  currentStep: number;
  totalSteps: number;
  steps: Array<{ label: string; icon: React.ElementType; description: string }>;
}> = ({ currentStep, totalSteps, steps }) => (
  <div className="flex items-center justify-center mb-8">
    <div className="flex items-center gap-4">
      {steps.map((step, index) => {
        const isActive = index === currentStep;
        const isCompleted = index < currentStep;
        const StepIcon = step.icon;

        return (
          <React.Fragment key={index}>
            <div className="flex flex-col items-center">
              <div
                className={cn(
                  'flex items-center justify-center w-16 h-16 rounded-full transition-all duration-500 shadow-lg',
                  isActive &&
                    'bg-gradient-to-r from-purple-600 to-pink-600 text-white scale-110 shadow-2xl',
                  isCompleted &&
                    'bg-gradient-to-r from-green-500 to-emerald-500 text-white shadow-xl',
                  !isActive &&
                    !isCompleted &&
                    'bg-gray-100 text-gray-400 shadow-md'
                )}
              >
                <StepIcon className="w-8 h-8" />
              </div>
              <div className="mt-3 text-center">
                <div
                  className={cn(
                    'text-sm font-bold transition-colors',
                    isActive && 'text-purple-600',
                    isCompleted && 'text-green-600',
                    !isActive && !isCompleted && 'text-gray-400'
                  )}
                >
                  {step.label}
                </div>
                <div className="text-xs text-gray-500 mt-1 max-w-[120px]">
                  {step.description}
                </div>
              </div>
            </div>

            {index < totalSteps - 1 && (
              <div
                className={cn(
                  'w-16 h-1 rounded-full transition-all duration-500 mt-2',
                  index < currentStep
                    ? 'bg-gradient-to-r from-green-500 to-emerald-500'
                    : 'bg-gray-200'
                )}
              />
            )}
          </React.Fragment>
        );
      })}
    </div>
  </div>
);

const NewSuggestionForm: React.FC<NewSuggestionFormProps> = ({
  isOpen,
  onClose,
  candidates,
  selectedCandidate,
  onSubmit,
}) => {
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [firstParty, setFirstParty] = useState<Candidate | null>(null);
  const [secondParty, setSecondParty] = useState<Candidate | null>(null);
  const [showAnalysisDialog, setShowAnalysisDialog] = useState(false);
  const [currentStep, setCurrentStep] = useState(0);

  const steps = [
    {
      label: 'בחירת מועמדים',
      icon: Users,
      description: 'בחר את שני הצדדים להצעה',
    },
    {
      label: 'ניתוח התאמה',
      icon: BarChart2,
      description: 'בדוק את רמת ההתאמה',
    },
    {
      label: 'פרטי ההצעה',
      icon: Heart,
      description: 'הוסף נימוקים ופרטים',
    },
  ];

  const form = useForm<NewSuggestionFormData>({
    resolver: zodResolver(newSuggestionSchema),
    defaultValues: {
      priority: Priority.MEDIUM,
      status: MatchSuggestionStatus.DRAFT,
      decisionDeadline: new Date(new Date().setDate(new Date().getDate() + 14)),
    },
  });

  // Reset form and state when dialog opens or selectedCandidate changes
  useEffect(() => {
    if (isOpen) {
      form.reset({
        priority: Priority.MEDIUM,
        status: MatchSuggestionStatus.DRAFT,
        decisionDeadline: new Date(
          new Date().setDate(new Date().getDate() + 14)
        ),
        firstPartyId: selectedCandidate?.id || '',
        secondPartyId: '',
      });
      setFirstParty(selectedCandidate || null);
      setSecondParty(null);
      setCurrentStep(0);
    }
  }, [isOpen, selectedCandidate, form]);

  const handleCandidateSelect =
    (type: 'first' | 'second') => (candidate: Candidate | null) => {
      const setter = type === 'first' ? setFirstParty : setSecondParty;
      const fieldName = type === 'first' ? 'firstPartyId' : 'secondPartyId';
      setter(candidate);
      form.setValue(fieldName, candidate?.id || '', {
        shouldValidate: true,
        shouldDirty: true,
      });
    };

  const handleNext = () => {
    if (currentStep === 0 && (!firstParty || !secondParty)) {
      toast.error('יש לבחור את שני הצדדים להצעה.');
      return;
    }
    setCurrentStep((prev) => Math.min(prev + 1, steps.length - 1));
  };

  const handlePrevious = () => {
    setCurrentStep((prev) => Math.max(prev - 1, 0));
  };

  const handleSubmit = form.handleSubmit(async (data) => {
    if (!firstParty || !secondParty) {
      toast.error('יש לבחור את שני הצדדים להצעה.');
      return;
    }

    setIsSubmitting(true);
    try {
      await onSubmit(data);
      toast.success('ההצעה נוצרה בהצלחה!', {
        description: 'ההצעה נשלחה אוטומטית לצד הראשון',
        duration: 5000,
      });
      onClose();
    } catch (error) {
      toast.error(
        'שגיאה ביצירת ההצעה: ' +
          (error instanceof Error ? error.message : 'שגיאה לא ידועה')
      );
    } finally {
      setIsSubmitting(false);
    }
  });

  const maleCandidates = candidates.filter((c) => c.profile.gender === 'MALE');
  const femaleCandidates = candidates.filter(
    (c) => c.profile.gender === 'FEMALE'
  );

  const canProceedToNextStep = () => {
    switch (currentStep) {
      case 0:
        return firstParty && secondParty;
      case 1:
        return firstParty && secondParty;
      case 2:
        return true;
      default:
        return false;
    }
  };

  const renderStepContent = () => {
    switch (currentStep) {
      case 0:
        return (
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
            <CandidateSelector
              label="צד א' (גבר)"
              value={firstParty}
              onChange={handleCandidateSelect('first')}
              candidates={maleCandidates}
              otherParty={secondParty}
              fieldName="firstPartyId"
              error={form.formState.errors.firstPartyId?.message}
            />

            <CandidateSelector
              label="צד ב' (אישה)"
              value={secondParty}
              onChange={handleCandidateSelect('second')}
              candidates={femaleCandidates}
              otherParty={firstParty}
              fieldName="secondPartyId"
              error={form.formState.errors.secondPartyId?.message}
            />
          </div>
        );

      case 1:
        if (!firstParty || !secondParty) {
          return (
            <div className="flex items-center justify-center h-64">
              <div className="text-center text-gray-500">
                <Users className="mx-auto h-16 w-16 text-gray-300 mb-4" />
                <p className="text-lg font-medium">
                  יש לבחור תחילה את שני המועמדים
                </p>
              </div>
            </div>
          );
        }

        return (
          <div className="space-y-8">
            <MatchPreview firstParty={firstParty} secondParty={secondParty} />

            <div className="flex justify-center">
              <Button
                type="button"
                variant="outline"
                onClick={() => setShowAnalysisDialog(true)}
                className="bg-gradient-to-r from-indigo-50 to-purple-50 border-2 border-indigo-200 text-indigo-700 hover:bg-gradient-to-r hover:from-indigo-100 hover:to-purple-100 hover:border-indigo-300 rounded-2xl px-8 py-4 font-bold text-lg shadow-lg hover:shadow-xl transition-all duration-300"
              >
                <BarChart2 className="w-6 h-6 ml-3" />
                ניתוח התאמה מלא (AI)
                <Sparkles className="w-5 h-5 mr-2 text-purple-500" />
              </Button>
            </div>
          </div>
        );

      case 2:
        if (!firstParty || !secondParty) {
          return (
            <div className="flex items-center justify-center h-64">
              <div className="text-center text-gray-500">
                <Users className="mx-auto h-16 w-16 text-gray-300 mb-4" />
                <p className="text-lg font-medium">
                  יש לבחור תחילה את שני המועמדים
                </p>
              </div>
            </div>
          );
        }

        return (
          <SuggestionDetails
            firstParty={firstParty}
            secondParty={secondParty}
          />
        );

      default:
        return null;
    }
  };

  return (
    <>
      <Dialog open={isOpen} onOpenChange={onClose}>
        <DialogContent
          className="max-w-7xl w-full min-h-[90vh] flex flex-col p-0 border-0 shadow-2xl rounded-3xl overflow-hidden bg-gradient-to-br from-white via-purple-50/20 to-pink-50/20"
          dir="rtl"
        >
          {/* Enhanced Header */}
          <div className="relative bg-gradient-to-r from-purple-50 via-cyan-50/30 to-emerald-50/20 border-b border-purple-100/50 p-8 flex-shrink-0">
            {/* Background decoration */}
            <div className="absolute inset-0">
              <div className="absolute top-0 right-0 w-64 h-64 bg-gradient-to-br from-purple-200/30 to-pink-200/30 rounded-full blur-3xl"></div>
              <div className="absolute bottom-0 left-0 w-48 h-48 bg-gradient-to-br from-cyan-200/30 to-blue-200/30 rounded-full blur-2xl"></div>
            </div>

            <div className="relative z-10">
              <DialogHeader className="text-center mb-8">
                <div className="flex items-center justify-between mb-6">
                  <div className="flex items-center gap-4">
                    <div className="p-4 rounded-2xl bg-gradient-to-r from-purple-500 to-pink-500 text-white shadow-xl">
                      <UserPlus className="w-10 h-10" />
                    </div>
                    <div className="text-right">
                      <DialogTitle className="text-3xl font-bold bg-gradient-to-r from-purple-600 via-pink-600 to-blue-600 bg-clip-text text-transparent">
                        יצירת הצעת שידוך חדשה
                      </DialogTitle>
                      <DialogDescription className="text-lg text-gray-600 mt-2">
                        בחר שני מועמדים, נתח את ההתאמה והגדר את פרטי ההצעה
                      </DialogDescription>
                    </div>
                  </div>

                  <Button
                    variant="ghost"
                    size="icon"
                    onClick={onClose}
                    className="rounded-full h-12 w-12 text-gray-500 hover:text-gray-700 hover:bg-white/50 backdrop-blur-sm"
                  >
                    <X className="w-6 h-6" />
                  </Button>
                </div>

                <StepIndicator
                  currentStep={currentStep}
                  totalSteps={steps.length}
                  steps={steps}
                />
              </DialogHeader>
            </div>
          </div>

          {/* Content Area */}
          <div className="flex-1 overflow-y-auto p-8">
            <FormProvider {...form}>
              <form onSubmit={handleSubmit} className="h-full">
                <div className="animate-fade-in-up">{renderStepContent()}</div>
              </form>
            </FormProvider>
          </div>

          {/* Enhanced Footer */}
          <div className="border-t border-purple-100 bg-gradient-to-r from-gray-50 to-slate-50 p-6 flex-shrink-0">
            <div className="flex items-center justify-between">
              <div className="flex items-center gap-4">
                {currentStep > 0 && (
                  <Button
                    type="button"
                    variant="outline"
                    onClick={handlePrevious}
                    className="px-6 py-3 border-2 border-gray-300 hover:bg-gray-50 rounded-xl transition-all duration-300 font-bold"
                  >
                    <ArrowRight className="w-5 h-5 ml-2" />
                    חזור
                  </Button>
                )}

                {currentStep < steps.length - 1 ? (
                  <Button
                    type="button"
                    onClick={handleNext}
                    disabled={!canProceedToNextStep()}
                    className="px-8 py-3 bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-700 hover:to-pink-700 text-white shadow-xl hover:shadow-2xl transition-all duration-300 rounded-xl font-bold disabled:opacity-50 disabled:cursor-not-allowed"
                  >
                    המשך
                    <ArrowLeft className="w-5 h-5 mr-2" />
                  </Button>
                ) : (
                  <Button
                    type="submit"
                    onClick={handleSubmit}
                    disabled={isSubmitting || !firstParty || !secondParty}
                    className="px-8 py-3 bg-gradient-to-r from-emerald-600 via-green-600 to-emerald-600 hover:from-emerald-700 hover:via-green-700 hover:to-emerald-700 text-white shadow-xl hover:shadow-2xl transition-all duration-300 rounded-xl font-bold disabled:opacity-50 disabled:cursor-not-allowed"
                  >
                    {isSubmitting ? (
                      <>
                        <Loader2 className="w-5 h-5 ml-2 animate-spin" />
                        יוצר הצעה...
                      </>
                    ) : (
                      <>
                        <Gift className="w-5 h-5 ml-2" />
                        צור הצעה
                        <Sparkles className="w-4 h-4 mr-2" />
                      </>
                    )}
                  </Button>
                )}
              </div>

              <div className="text-sm text-gray-500 space-y-1">
                <div className="flex items-center gap-2">
                  <Crown className="w-4 h-4 text-purple-500" />
                  <span>
                    שלב {currentStep + 1} מתוך {steps.length}
                  </span>
                </div>
                <p className="text-xs">
                  לאחר יצירת ההצעה, היא תופיע בסטטוס טיוטה.
                </p>
              </div>
            </div>
          </div>
        </DialogContent>
      </Dialog>

      {firstParty && secondParty && (
        <AiMatchAnalysisDialog
          isOpen={showAnalysisDialog}
          onClose={() => setShowAnalysisDialog(false)}
          targetCandidate={firstParty}
          comparisonCandidates={[secondParty]}
        />
      )}
    </>
  );
};

export default NewSuggestionForm;
--- End of Content for index.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\app\components\matchmaker\suggestions\NewSuggestionForm\schema.ts
--------------------------------------------------------------------------------
Content:
import { z } from "zod";
import { addDays, isBefore } from 'date-fns';

// Validation rules

const MIN_DECISION_DAYS = 1;
const MAX_DECISION_DAYS = 30;

// Helper function to validate dates
const isValidDeadlineDate = (date: Date | null | undefined, minDays: number, maxDays: number) => {
  if (!date) return false;
  
  const today = new Date();
  const minDate = addDays(today, minDays);
  const maxDate = addDays(today, maxDays);
  
  return !isBefore(date, minDate) && !isBefore(maxDate, date);
};

// Schema for new suggestion
export const newSuggestionSchema = z.object({
  firstPartyId: z.string({
    required_error: "יש לבחור מועמד/ת ראשון/ה",
  }),
  
  secondPartyId: z.string({
    required_error: "יש לבחור מועמד/ת שני/ה",
  }),
  
  priority: z.enum(['LOW', 'MEDIUM', 'HIGH', 'URGENT'] as const, {
    required_error: "יש לבחור רמת עדיפות",
  }),

  status: z.enum([
    'DRAFT',
    'PENDING_FIRST_PARTY',
    'FIRST_PARTY_APPROVED',
    'FIRST_PARTY_DECLINED',
    'PENDING_SECOND_PARTY',
    'SECOND_PARTY_APPROVED',
    'SECOND_PARTY_DECLINED',
    'AWAITING_MATCHMAKER_APPROVAL',
    'CONTACT_DETAILS_SHARED',
    'AWAITING_FIRST_DATE_FEEDBACK',
    'THINKING_AFTER_DATE',
    'PROCEEDING_TO_SECOND_DATE',
    'ENDED_AFTER_FIRST_DATE',
    'MEETING_PENDING',
    'MEETING_SCHEDULED',
    'MATCH_APPROVED',
    'MATCH_DECLINED',
    'DATING',
    'ENGAGED',
    'MARRIED',
    'EXPIRED',
    'CLOSED',
    'CANCELLED'
  ] as const, {
    required_error: "יש לבחור סטטוס",
  }).default('DRAFT'),

  matchingReason: z.string()
    .max(500, "סיבת ההתאמה לא יכולה להכיל יותר מ-500 תווים")
    .optional(),

  internalNotes: z.string()
    .max(1000, "ההערות הפנימיות לא יכולות להכיל יותר מ-1000 תווים")
    .optional(),

  firstPartyNotes: z.string()
    .max(500, "ההערות לצד א' לא יכולות להכיל יותר מ-500 תווים")
    .optional(),

  secondPartyNotes: z.string()
    .max(500, "ההערות לצד ב' לא יכולות להכיל יותר מ-500 תווים")
    .optional(),


  decisionDeadline: z.date({
    required_error: "יש לבחור תאריך יעד להחלטה ",
  })
}).refine(
  (data) => data.firstPartyId !== data.secondPartyId,
  {
    message: "לא ניתן ליצור הצעה עבור אותו מועמד",
    path: ["secondPartyId"]
  }

).refine(
  (data) => isValidDeadlineDate(data.decisionDeadline, MIN_DECISION_DAYS, MAX_DECISION_DAYS),
  {
    message: `תאריך היעד להחלטה סופית חייב להיות בין ${MIN_DECISION_DAYS} ל-${MAX_DECISION_DAYS} ימים מהיום`,
    path: ["decisionDeadline"]
  }
);

export type NewSuggestionFormData = z.infer<typeof newSuggestionSchema>;

// Status mapping for display
export const suggestionStatusMap = {
  DRAFT: "טיוטה",
  PENDING_FIRST_PARTY: "ממתין לתשובת צד א'",
  FIRST_PARTY_APPROVED: "צד א' אישר",
  FIRST_PARTY_DECLINED: "צד א' דחה",
  PENDING_SECOND_PARTY: "ממתין לתשובת צד ב'",
  SECOND_PARTY_APPROVED: "צד ב' אישר",
  SECOND_PARTY_DECLINED: "צד ב' דחה",
  AWAITING_MATCHMAKER_APPROVAL: "ממתין לאישור שדכן",
  CONTACT_DETAILS_SHARED: "פרטי קשר הועברו",
  AWAITING_FIRST_DATE_FEEDBACK: "ממתין למשוב פגישה ראשונה",
  THINKING_AFTER_DATE: "בשלב מחשבה אחרי פגישה",
  PROCEEDING_TO_SECOND_DATE: "ממשיכים לפגישה שנייה",
  ENDED_AFTER_FIRST_DATE: "הסתיים אחרי פגישה ראשונה",
  MEETING_PENDING: "ממתין לקביעת פגישה",
  MEETING_SCHEDULED: "פגישה נקבעה",
  MATCH_APPROVED: "ההצעה אושרה",
  MATCH_DECLINED: "ההצעה נדחתה",
  DATING: "בתהליך היכרות",
  ENGAGED: "מאורסים",
  MARRIED: "נישאו",
  EXPIRED: "פג תוקף",
  CLOSED: "ההצעה נסגרה",
  CANCELLED: "ההצעה בוטלה"
} as const;

// Priority mapping for display
export const priorityMap = {
  LOW: { label: "נמוכה", color: "text-gray-500" },
  MEDIUM: { label: "רגילה", color: "text-blue-500" },
  HIGH: { label: "גבוהה", color: "text-yellow-500" },
  URGENT: { label: "דחופה", color: "text-red-500" }
} as const;
--- End of Content for schema.ts ---

--- End of Content for NewSuggestionForm_contents.txt ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\suggestions\NewSuggestionForm\SuggestionDetails.tsx
--------------------------------------------------------------------------------
Content:
// src/app/components/matchmaker/suggestions/NewSuggestionForm/SuggestionDetails.tsx

'use client';
import React, { useState } from 'react';
import { useFormContext } from 'react-hook-form';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select';
import { Card, CardContent } from '@/components/ui/card';
import { Priority } from '@prisma/client';
import { Label } from '@/components/ui/label';
import { Button } from '@/components/ui/button';
import { Textarea } from '@/components/ui/textarea';
import { toast } from 'sonner';
import {
  Loader2,
  Sparkles,
  AlertTriangle,
  Star,
  Flame,
  Target,
  Shield,
  Heart,
  MessageCircle,
  User,
  Calendar,
  Zap,
  Crown,
  Award,
  Gift,
  Clock,
  Wand2,
  Brain,
  Eye,
  Users,
} from 'lucide-react';
import { Alert, AlertDescription } from '@/components/ui/alert';
import type { NewSuggestionFormData } from './schema';
import type { Candidate } from '../../new/types/candidates';
import { cn } from '@/lib/utils';
import type { MatchmakerPageDictionary } from '@/types/dictionary';

interface SuggestionDetailsProps {
  dict: MatchmakerPageDictionary['newSuggestionForm']['suggestionDetails'];
  firstParty: Candidate;
  secondParty: Candidate;
}

const EnhancedSection: React.FC<{
  icon: React.ElementType;
  title: string;
  description?: string;
  gradient: string;
  children: React.ReactNode;
  className?: string;
}> = ({ icon: Icon, title, description, gradient, children, className }) => (
  <Card
    className={cn(
      'border-0 shadow-xl hover:shadow-2xl transition-all duration-500 group overflow-hidden rounded-3xl',
      'bg-gradient-to-br from-white via-gray-50/30 to-white',
      className
    )}
  >
    <div className="absolute inset-0">
      <div className="absolute top-0 right-0 w-32 h-32 bg-gradient-to-br from-purple-200/20 to-pink-200/20 rounded-full blur-2xl opacity-0 group-hover:opacity-100 transition-opacity duration-700"></div>
      <div className="absolute bottom-0 left-0 w-24 h-24 bg-gradient-to-br from-cyan-200/20 to-blue-200/20 rounded-full blur-xl opacity-0 group-hover:opacity-100 transition-opacity duration-900"></div>
    </div>
    <CardContent className="relative z-10 p-8 space-y-6">
      <div className="flex items-center gap-4 mb-6">
        <div
          className={cn(
            'p-4 rounded-2xl shadow-xl group-hover:scale-110 transition-transform duration-300 bg-gradient-to-r text-white',
            gradient
          )}
        >
          <Icon className="w-8 h-8" />
        </div>
        <div className="flex-1">
          <h3
            className="text-2xl font-bold text-gray-800 group-hover:text-transparent group-hover:bg-gradient-to-r group-hover:bg-clip-text transition-all duration-300"
            style={{
              backgroundImage: `linear-gradient(to right, ${gradient.replace('from-', '').replace('to-', ', ')})`,
            }}
          >
            {title}
          </h3>
          {description && (
            <p className="text-gray-600 mt-1 leading-relaxed">{description}</p>
          )}
        </div>
      </div>
      {children}
    </CardContent>
  </Card>
);

const PriorityBadge: React.FC<{
  priority: Priority;
  dict: MatchmakerPageDictionary['newSuggestionForm']['suggestionDetails']['priority'];
}> = ({ priority, dict }) => {
  const getPriorityInfo = (p: Priority) => {
    switch (p) {
      case Priority.URGENT:
        return {
          label: dict.options.URGENT.title,
          icon: Flame,
          className:
            'bg-gradient-to-r from-red-500 to-pink-500 text-white animate-pulse shadow-xl',
        };
      case Priority.HIGH:
        return {
          label: dict.options.HIGH.title,
          icon: Star,
          className:
            'bg-gradient-to-r from-orange-500 to-amber-500 text-white shadow-xl',
        };
      case Priority.MEDIUM:
        return {
          label: dict.options.MEDIUM.title,
          icon: Target,
          className:
            'bg-gradient-to-r from-blue-500 to-cyan-500 text-white shadow-xl',
        };
      case Priority.LOW:
        return {
          label: dict.options.LOW.title,
          icon: Shield,
          className:
            'bg-gradient-to-r from-gray-500 to-slate-500 text-white shadow-xl',
        };
      default:
        return {
          label: dict.options.MEDIUM.title,
          icon: Target,
          className:
            'bg-gradient-to-r from-blue-500 to-cyan-500 text-white shadow-xl',
        };
    }
  };

  const info = getPriorityInfo(priority);
  const IconComponent = info.icon;

  return (
    <div
      className={cn(
        'flex items-center gap-2 px-4 py-2 rounded-xl font-bold',
        info.className
      )}
    >
      <IconComponent className="w-4 h-4" />
      <span>{info.label}</span>
    </div>
  );
};

const SuggestionDetails: React.FC<SuggestionDetailsProps> = ({
  dict,
  firstParty,
  secondParty,
}) => {
  const {
    register,
    formState: { errors },
    setValue,
    watch,
  } = useFormContext<NewSuggestionFormData>();
  const [isGeneratingRationale, setIsGeneratingRationale] = useState(false);
  const priority = watch('priority', Priority.MEDIUM);

  const handleGenerateRationale = async () => {
    setIsGeneratingRationale(true);
    toast.info(dict.toasts.aiLoading.title, {
      description: dict.toasts.aiLoading.description,
      duration: 3000,
    });
    try {
      const response = await fetch('/api/ai/generate-suggestion-rationale', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          userId1: firstParty.id,
          userId2: secondParty.id,
        }),
      });
      const data = await response.json();
      if (!response.ok || !data.success || !data.rationales) {
        throw new Error(data.error || 'Error generating rationale');
      }
      const { generalRationale, rationaleForParty1, rationaleForParty2 } =
        data.rationales;
      setValue('matchingReason', generalRationale, {
        shouldValidate: true,
        shouldDirty: true,
      });
      setValue('firstPartyNotes', rationaleForParty1, {
        shouldValidate: true,
        shouldDirty: true,
      });
      setValue('secondPartyNotes', rationaleForParty2, {
        shouldValidate: true,
        shouldDirty: true,
      });
      toast.success(dict.toasts.aiSuccess.title, {
        description: dict.toasts.aiSuccess.description,
        duration: 5000,
      });
    } catch (error) {
      console.error('Failed to generate rationales:', error);
      toast.error(dict.toasts.aiError.title, {
        description: dict.toasts.aiError.description,
      });
    } finally {
      setIsGeneratingRationale(false);
    }
  };

  return (
    <div className="space-y-8">
      <EnhancedSection
        icon={Crown}
        title={dict.priority.title}
        description={dict.priority.description}
        gradient="from-purple-500 to-pink-500"
      >
        <div className="space-y-4">
          <div className="flex items-center justify-between">
            <Label className="text-lg font-semibold text-gray-700">
              {dict.priority.label}
            </Label>
            <PriorityBadge priority={priority} dict={dict.priority} />
          </div>
          <Select
            onValueChange={(value: Priority) =>
              setValue('priority', value, { shouldValidate: true })
            }
            defaultValue={priority}
            name="priority"
          >
            <SelectTrigger className="h-14 border-2 border-purple-200 hover:border-purple-300 focus:border-purple-500 rounded-2xl bg-white/80 backdrop-blur-sm shadow-lg transition-all text-lg">
              <SelectValue placeholder={dict.priority.placeholder} />
            </SelectTrigger>
            <SelectContent className="border-0 shadow-2xl rounded-2xl bg-white/95 backdrop-blur-sm">
              <SelectItem value={Priority.URGENT}>
                <div className="flex items-center gap-3 py-2">
                  <Flame className="w-5 h-5 text-red-500" />
                  <div>
                    <div className="font-bold text-red-600">
                      {dict.priority.options.URGENT.title}
                    </div>
                    <div className="text-xs text-red-500">
                      {dict.priority.options.URGENT.description}
                    </div>
                  </div>
                </div>
              </SelectItem>
              <SelectItem value={Priority.HIGH}>
                <div className="flex items-center gap-3 py-2">
                  <Star className="w-5 h-5 text-orange-500" />
                  <div>
                    <div className="font-bold text-orange-600">
                      {dict.priority.options.HIGH.title}
                    </div>
                    <div className="text-xs text-orange-500">
                      {dict.priority.options.HIGH.description}
                    </div>
                  </div>
                </div>
              </SelectItem>
              <SelectItem value={Priority.MEDIUM}>
                <div className="flex items-center gap-3 py-2">
                  <Target className="w-5 h-5 text-blue-500" />
                  <div>
                    <div className="font-bold text-blue-600">
                      {dict.priority.options.MEDIUM.title}
                    </div>
                    <div className="text-xs text-blue-500">
                      {dict.priority.options.MEDIUM.description}
                    </div>
                  </div>
                </div>
              </SelectItem>
              <SelectItem value={Priority.LOW}>
                <div className="flex items-center gap-3 py-2">
                  <Shield className="w-5 h-5 text-gray-500" />
                  <div>
                    <div className="font-bold text-gray-600">
                      {dict.priority.options.LOW.title}
                    </div>
                    <div className="text-xs text-gray-500">
                      {dict.priority.options.LOW.description}
                    </div>
                  </div>
                </div>
              </SelectItem>
            </SelectContent>
          </Select>
          {errors.priority && (
            <div className="flex items-center gap-2 p-3 bg-gradient-to-r from-red-50 to-pink-50 rounded-xl border border-red-200">
              <AlertTriangle className="w-4 h-4 text-red-500" />
              <p className="text-sm text-red-600 font-medium">
                {errors.priority.message}
              </p>
            </div>
          )}
        </div>
      </EnhancedSection>

      <EnhancedSection
        icon={Brain}
        title={dict.rationale.title}
        description={dict.rationale.description}
        gradient="from-emerald-500 to-green-500"
      >
        <div className="space-y-6">
          <div className="flex items-center justify-between">
            <Label className="text-lg font-semibold text-gray-700">
              {dict.rationale.label}
            </Label>
            <Button
              type="button"
              onClick={handleGenerateRationale}
              disabled={isGeneratingRationale}
              className="bg-gradient-to-r from-purple-600 via-pink-600 to-blue-600 hover:from-purple-700 hover:via-pink-700 hover:to-blue-700 text-white shadow-xl hover:shadow-2xl transition-all duration-300 rounded-2xl px-6 py-3 font-bold"
            >
              {isGeneratingRationale ? (
                <>
                  <Loader2 className="w-5 h-5 ml-2 animate-spin" />
                  <span>{dict.rationale.aiButtonLoading}</span>
                </>
              ) : (
                <>
                  <Wand2 className="w-5 h-5 ml-2 text-yellow-300" />
                  <span>{dict.rationale.aiButton}</span>
                </>
              )}
            </Button>
          </div>
          <Textarea
            id="matchingReason"
            {...register('matchingReason')}
            placeholder={dict.rationale.placeholder}
            className="min-h-[140px] border-2 border-emerald-200 hover:border-emerald-300 focus:border-emerald-500 rounded-2xl bg-white/80 backdrop-blur-sm shadow-lg transition-all text-lg resize-none"
          />
          {errors.matchingReason && (
            <div className="flex items-center gap-2 p-3 bg-gradient-to-r from-red-50 to-pink-50 rounded-xl border border-red-200">
              <AlertTriangle className="w-4 h-4 text-red-500" />
              <p className="text-sm text-red-600 font-medium">
                {errors.matchingReason.message}
              </p>
            </div>
          )}
          <Alert className="border-0 bg-gradient-to-r from-blue-50 to-cyan-50 shadow-lg rounded-2xl">
            <Sparkles className="h-5 w-5 text-blue-500" />
            <AlertDescription
              className="text-blue-800 font-medium leading-relaxed"
              dangerouslySetInnerHTML={{ __html: dict.rationale.aiTip }}
            />
          </Alert>
        </div>
      </EnhancedSection>

      <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
        <EnhancedSection
          icon={User}
          title={dict.notes.party1Title.replace(
            '{{name}}',
            firstParty.firstName
          )}
          description={dict.notes.description}
          gradient="from-blue-500 to-cyan-500"
          className="lg:col-span-1"
        >
          <div className="space-y-4">
            <div className="flex items-center gap-3 p-4 bg-gradient-to-r from-blue-50 to-cyan-50 rounded-2xl border border-blue-100">
              <div className="w-12 h-12 rounded-full bg-gradient-to-r from-blue-500 to-cyan-500 flex items-center justify-center text-white font-bold shadow-lg">
                {firstParty.firstName[0]}
              </div>
              <div>
                <div className="font-bold text-blue-800">
                  {firstParty.firstName} {firstParty.lastName}
                </div>
                <div className="text-sm text-blue-600">
                  {dict.notes.party1Label}
                </div>
              </div>
            </div>
            <Textarea
              id="firstPartyNotes"
              {...register('firstPartyNotes')}
              placeholder={dict.notes.party1Placeholder
                .replace('{{otherName}}', secondParty.firstName)
                .replace('{{name}}', firstParty.firstName)}
              className="min-h-[160px] border-2 border-blue-200 hover:border-blue-300 focus:border-blue-500 rounded-2xl bg-white/80 backdrop-blur-sm shadow-lg transition-all text-lg resize-none"
            />
            {errors.firstPartyNotes && (
              <div className="flex items-center gap-2 p-3 bg-gradient-to-r from-red-50 to-pink-50 rounded-xl border border-red-200">
                <AlertTriangle className="w-4 h-4 text-red-500" />
                <p className="text-sm text-red-600 font-medium">
                  {errors.firstPartyNotes.message}
                </p>
              </div>
            )}
          </div>
        </EnhancedSection>
        <EnhancedSection
          icon={User}
          title={dict.notes.party2Title.replace(
            '{{name}}',
            secondParty.firstName
          )}
          description={dict.notes.description}
          gradient="from-purple-500 to-pink-500"
          className="lg:col-span-1"
        >
          <div className="space-y-4">
            <div className="flex items-center gap-3 p-4 bg-gradient-to-r from-purple-50 to-pink-50 rounded-2xl border border-purple-100">
              <div className="w-12 h-12 rounded-full bg-gradient-to-r from-purple-500 to-pink-500 flex items-center justify-center text-white font-bold shadow-lg">
                {secondParty.firstName[0]}
              </div>
              <div>
                <div className="font-bold text-purple-800">
                  {secondParty.firstName} {secondParty.lastName}
                </div>
                <div className="text-sm text-purple-600">
                  {dict.notes.party2Label}
                </div>
              </div>
            </div>
            <Textarea
              id="secondPartyNotes"
              {...register('secondPartyNotes')}
              placeholder={dict.notes.party2Placeholder
                .replace('{{otherName}}', firstParty.firstName)
                .replace('{{name}}', secondParty.firstName)}
              className="min-h-[160px] border-2 border-purple-200 hover:border-purple-300 focus:border-purple-500 rounded-2xl bg-white/80 backdrop-blur-sm shadow-lg transition-all text-lg resize-none"
            />
            {errors.secondPartyNotes && (
              <div className="flex items-center gap-2 p-3 bg-gradient-to-r from-red-50 to-pink-50 rounded-xl border border-red-200">
                <AlertTriangle className="w-4 h-4 text-red-500" />
                <p className="text-sm text-red-600 font-medium">
                  {errors.secondPartyNotes.message}
                </p>
              </div>
            )}
          </div>
        </EnhancedSection>
      </div>

      <EnhancedSection
        icon={MessageCircle}
        title={dict.internalNotes.title}
        description={dict.internalNotes.description}
        gradient="from-amber-500 to-orange-500"
      >
        <div className="space-y-4">
          <div className="flex items-center gap-3 p-4 bg-gradient-to-r from-amber-50 to-orange-50 rounded-2xl border border-amber-100">
            <div className="p-3 rounded-full bg-gradient-to-r from-amber-500 to-orange-500 text-white shadow-lg">
              <Eye className="w-5 h-5" />
            </div>
            <div>
              <div className="font-bold text-amber-800">
                {dict.internalNotes.secretInfo}
              </div>
              <div className="text-sm text-amber-600">
                {dict.internalNotes.visibleTo}
              </div>
            </div>
          </div>
          <Textarea
            id="internalNotes"
            {...register('internalNotes')}
            placeholder={dict.internalNotes.placeholder}
            className="min-h-[120px] border-2 border-amber-200 hover:border-amber-300 focus:border-amber-500 rounded-2xl bg-white/80 backdrop-blur-sm shadow-lg transition-all text-lg resize-none"
          />
          {errors.internalNotes && (
            <div className="flex items-center gap-2 p-3 bg-gradient-to-r from-red-50 to-pink-50 rounded-xl border border-red-200">
              <AlertTriangle className="w-4 h-4 text-red-500" />
              <p className="text-sm text-red-600 font-medium">
                {errors.internalNotes.message}
              </p>
            </div>
          )}
        </div>
      </EnhancedSection>

      <EnhancedSection
        icon={Clock}
        title={dict.deadline.title}
        description={dict.deadline.description}
        gradient="from-indigo-500 to-purple-500"
      >
        <div className="space-y-4">
          <Label className="text-lg font-semibold text-gray-700">
            {dict.deadline.label}
          </Label>
          <Select
            onValueChange={(value) => {
              const days = parseInt(value, 10);
              const deadline = new Date();
              deadline.setDate(deadline.getDate() + days);
              setValue('decisionDeadline', deadline, { shouldValidate: true });
            }}
            defaultValue="14"
          >
            <SelectTrigger className="h-14 border-2 border-indigo-200 hover:border-indigo-300 focus:border-indigo-500 rounded-2xl bg-white/80 backdrop-blur-sm shadow-lg transition-all text-lg">
              <SelectValue />
            </SelectTrigger>
            <SelectContent className="border-0 shadow-2xl rounded-2xl bg-white/95 backdrop-blur-sm">
              <SelectItem value="3">
                <div className="flex items-center gap-3 py-2">
                  <Zap className="w-5 h-5 text-red-500" />
                  <div>
                    <div className="font-bold text-red-600">
                      {dict.deadline.options['3'].title}
                    </div>
                    <div className="text-xs text-red-500">
                      {dict.deadline.options['3'].description}
                    </div>
                  </div>
                </div>
              </SelectItem>
              <SelectItem value="7">
                <div className="flex items-center gap-3 py-2">
                  <Award className="w-5 h-5 text-orange-500" />
                  <div>
                    <div className="font-bold text-orange-600">
                      {dict.deadline.options['7'].title}
                    </div>
                    <div className="text-xs text-orange-500">
                      {dict.deadline.options['7'].description}
                    </div>
                  </div>
                </div>
              </SelectItem>
              <SelectItem value="14">
                <div className="flex items-center gap-3 py-2">
                  <Target className="w-5 h-5 text-blue-500" />
                  <div>
                    <div className="font-bold text-blue-600">
                      {dict.deadline.options['14'].title}
                    </div>
                    <div className="text-xs text-blue-500">
                      {dict.deadline.options['14'].description}
                    </div>
                  </div>
                </div>
              </SelectItem>
              <SelectItem value="30">
                <div className="flex items-center gap-3 py-2">
                  <Shield className="w-5 h-5 text-green-500" />
                  <div>
                    <div className="font-bold text-green-600">
                      {dict.deadline.options['30'].title}
                    </div>
                    <div className="text-xs text-green-500">
                      {dict.deadline.options['30'].description}
                    </div>
                  </div>
                </div>
              </SelectItem>
            </SelectContent>
          </Select>
          {errors.decisionDeadline && (
            <div className="flex items-center gap-2 p-3 bg-gradient-to-r from-red-50 to-pink-50 rounded-xl border border-red-200">
              <AlertTriangle className="w-4 h-4 text-red-500" />
              <p className="text-sm text-red-600 font-medium">
                {errors.decisionDeadline.message}
              </p>
            </div>
          )}
          <div className="p-4 bg-gradient-to-r from-indigo-50 to-purple-50 rounded-2xl border border-indigo-100">
            <div className="flex items-start gap-3">
              <Calendar className="w-5 h-5 text-indigo-500 mt-1" />
              <div>
                <div className="font-bold text-indigo-800 mb-1">
                  {dict.deadline.infoBox.title}
                </div>
                <p className="text-sm text-indigo-700 leading-relaxed">
                  {dict.deadline.infoBox.body}
                </p>
              </div>
            </div>
          </div>
        </div>
      </EnhancedSection>

      <Card className="border-0 shadow-2xl bg-gradient-to-br from-gray-50 via-white to-gray-50 rounded-3xl overflow-hidden">
        <CardContent className="p-8">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-4">
              <div className="p-4 rounded-2xl bg-gradient-to-r from-gray-500 to-slate-500 text-white shadow-xl">
                <Users className="w-8 h-8" />
              </div>
              <div>
                <h3 className="text-2xl font-bold text-gray-800">
                  {dict.summary.title}
                </h3>
                <p className="text-gray-600 leading-relaxed">
                  {dict.summary.description}
                </p>
              </div>
            </div>
            <div className="text-center">
              <div className="flex items-center gap-2 mb-2">
                <Gift className="w-5 h-5 text-purple-500" />
                <span className="font-bold text-purple-600">
                  {dict.summary.ready}
                </span>
              </div>
              <p className="text-sm text-gray-500">{dict.summary.info}</p>
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  );
};

export default SuggestionDetails;
--- End of Content for SuggestionDetails.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\suggestions\NewSuggestionForm\index.tsx
--------------------------------------------------------------------------------
Content:
// src/app/components/matchmaker/suggestions/NewSuggestionForm/index.tsx

'use client';
import React, { useState, useEffect } from 'react';
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription,
} from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';
import { toast } from 'sonner';
import { useForm, FormProvider } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { Priority, MatchSuggestionStatus } from '@prisma/client';
import {
  UserPlus,
  Sparkles,
  Loader2,
  BarChart2,
  Users,
  Heart,
  ArrowRight,
  ArrowLeft,
  X,
  Gift,
  Check,
  Crown,
} from 'lucide-react';

// Types
import type { Candidate } from '../../new/types/candidates';
import { newSuggestionSchema, type NewSuggestionFormData } from './schema';
import type { MatchmakerPageDictionary } from '@/types/dictionary';

// Components
import SuggestionDetails from './SuggestionDetails';
import MatchPreview from './MatchPreview';
import CandidateSelector from './CandidateSelector';
import { AiMatchAnalysisDialog } from '../../new/dialogs/AiMatchAnalysisDialog';
import { cn } from '@/lib/utils';

interface NewSuggestionFormProps {
  dict: MatchmakerPageDictionary['candidatesManager'];
  isOpen: boolean;
  onClose: () => void;
  candidates: Candidate[];
  selectedCandidate?: Candidate | null;
  onSubmit: (data: NewSuggestionFormData) => Promise<void>;
}

const StepIndicator: React.FC<{
  currentStep: number;
  steps: Array<{ label: string; icon: React.ElementType }>;
}> = ({ currentStep, steps }) => (
  <div className="flex items-center justify-center">
    {steps.map((step, index) => {
      const isActive = index === currentStep;
      const isCompleted = index < currentStep;
      const StepIcon = step.icon;

      return (
        <React.Fragment key={index}>
          <div className="flex flex-col items-center text-center">
            <div
              className={cn(
                'flex items-center justify-center w-12 h-12 rounded-full transition-all duration-300 shadow-md',
                isActive &&
                  'bg-gradient-to-r from-purple-600 to-pink-600 text-white scale-110 shadow-lg',
                isCompleted &&
                  'bg-gradient-to-r from-green-500 to-emerald-500 text-white',
                !isActive && !isCompleted && 'bg-gray-200 text-gray-500'
              )}
            >
              {isCompleted ? (
                <Check className="w-6 h-6" />
              ) : (
                <StepIcon className="w-6 h-6" />
              )}
            </div>
            <p
              className={cn(
                'mt-2 text-xs font-semibold w-24',
                isActive && 'text-purple-600',
                isCompleted && 'text-green-600',
                !isActive && !isCompleted && 'text-gray-500'
              )}
            >
              {step.label}
            </p>
          </div>

          {index < steps.length - 1 && (
            <div
              className={cn(
                'w-16 h-1 mx-2 rounded-full transition-colors duration-300',
                isCompleted ? 'bg-green-500' : 'bg-gray-200'
              )}
            />
          )}
        </React.Fragment>
      );
    })}
  </div>
);

const NewSuggestionForm: React.FC<NewSuggestionFormProps> = ({
  dict,
  isOpen,
  onClose,
  candidates,
  selectedCandidate,
  onSubmit,
}) => {
  const formDict = dict.newSuggestionForm;
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [firstParty, setFirstParty] = useState<Candidate | null>(null);
  const [secondParty, setSecondParty] = useState<Candidate | null>(null);
  const [showAnalysisDialog, setShowAnalysisDialog] = useState(false);
  const [currentStep, setCurrentStep] = useState(0);

  const steps = [
    { label: formDict.steps.select.label, icon: Users },
    { label: formDict.steps.analyze.label, icon: BarChart2 },
    { label: formDict.steps.details.label, icon: Heart },
  ];

  const form = useForm<NewSuggestionFormData>({
    resolver: zodResolver(newSuggestionSchema),
    defaultValues: {
      priority: Priority.MEDIUM,
      status: MatchSuggestionStatus.DRAFT,
      decisionDeadline: new Date(new Date().setDate(new Date().getDate() + 14)),
    },
  });

  useEffect(() => {
    if (isOpen) {
      form.reset({
        priority: Priority.MEDIUM,
        status: MatchSuggestionStatus.DRAFT,
        decisionDeadline: new Date(
          new Date().setDate(new Date().getDate() + 14)
        ),
        firstPartyId: selectedCandidate?.id || '',
        secondPartyId: '',
      });
      setFirstParty(selectedCandidate || null);
      setSecondParty(null);
      setCurrentStep(0);
    }
  }, [isOpen, selectedCandidate, form]);

  const handleCandidateSelect =
    (type: 'first' | 'second') => (candidate: Candidate | null) => {
      const setter = type === 'first' ? setFirstParty : setSecondParty;
      const fieldName = type === 'first' ? 'firstPartyId' : 'secondPartyId';
      setter(candidate);
      form.setValue(fieldName, candidate?.id || '', {
        shouldValidate: true,
        shouldDirty: true,
      });
    };

  const handleNext = () => {
    if (currentStep === 0 && (!firstParty || !secondParty)) {
      toast.error(formDict.toasts.selectParties);
      return;
    }
    setCurrentStep((prev) => Math.min(prev + 1, steps.length - 1));
  };

  const handlePrevious = () => {
    setCurrentStep((prev) => Math.max(prev - 1, 0));
  };

  const handleSubmit = form.handleSubmit(async (data) => {
    if (!firstParty || !secondParty) {
      toast.error(formDict.toasts.selectParties);
      return;
    }

    setIsSubmitting(true);
    try {
      await onSubmit(data);
      toast.success(formDict.toasts.createSuccess);
      onClose();
    } catch (error) {
      toast.error(
        `${formDict.toasts.createError}: ${error instanceof Error ? error.message : ''}`
      );
    } finally {
      setIsSubmitting(false);
    }
  });

  const maleCandidates = candidates.filter((c) => c.profile.gender === 'MALE');
  const femaleCandidates = candidates.filter(
    (c) => c.profile.gender === 'FEMALE'
  );

  const canProceedToNextStep = () => {
    switch (currentStep) {
      case 0:
        return firstParty && secondParty;
      case 1:
        return firstParty && secondParty;
      case 2:
        return true;
      default:
        return false;
    }
  };

  const renderStepContent = () => {
    switch (currentStep) {
      case 0:
        return (
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
            <CandidateSelector
              dict={formDict.candidateSelector} // ✅ העברת המילון
              label="צד א' (גבר)"
              value={firstParty}
              onChange={handleCandidateSelect('first')}
              candidates={maleCandidates}
              otherParty={secondParty}
              fieldName="firstPartyId"
              error={form.formState.errors.firstPartyId?.message}
            />
            <CandidateSelector
              dict={formDict.candidateSelector} // ✅ העברת המילון
              label="צד ב' (אישה)"
              value={secondParty}
              onChange={handleCandidateSelect('second')}
              candidates={femaleCandidates}
              otherParty={firstParty}
              fieldName="secondPartyId"
              error={form.formState.errors.secondPartyId?.message}
            />
          </div>
        );
      case 1:
        if (!firstParty || !secondParty) {
          return (
            <div className="flex items-center justify-center h-full">
              <div className="text-center text-gray-500">
                <Users className="mx-auto h-16 w-16 text-gray-300 mb-4" />
                <p className="text-lg font-medium">
                  {formDict.emptyState.title}
                </p>
              </div>
            </div>
          );
        }
        return (
          <div className="space-y-8">
            <MatchPreview
              dict={dict.newSuggestionForm.matchPreview} // ✅ העברת המילון
              firstParty={firstParty}
              secondParty={secondParty}
            />
            <div className="flex justify-center">
              <Button
                type="button"
                variant="outline"
                onClick={() => setShowAnalysisDialog(true)}
                className="bg-gradient-to-r from-indigo-50 to-purple-50 border-2 border-indigo-200 text-indigo-700 hover:bg-gradient-to-r hover:from-indigo-100 hover:to-purple-100 hover:border-indigo-300 rounded-2xl px-8 py-4 font-bold text-lg shadow-lg hover:shadow-xl transition-all duration-300"
              >
                <BarChart2 className="w-6 h-6 ml-3" />
                {formDict.buttons.fullAnalysis}
                <Sparkles className="w-5 h-5 mr-2 text-purple-500" />
              </Button>
            </div>
          </div>
        );
      case 2:
        if (!firstParty || !secondParty) {
          return (
            <div className="flex items-center justify-center h-full">
              <div className="text-center text-gray-500">
                <Users className="mx-auto h-16 w-16 text-gray-300 mb-4" />
                <p className="text-lg font-medium">
                  {formDict.emptyState.title}
                </p>
              </div>
            </div>
          );
        }
        return (
          <SuggestionDetails
            dict={dict.newSuggestionForm.suggestionDetails} // ✅ העברת המילון
            firstParty={firstParty}
            secondParty={secondParty}
          />
        );
      default:
        return null;
    }
  };

  return (
    <>
      <Dialog open={isOpen} onOpenChange={onClose}>
        <DialogContent
          className="max-w-7xl w-full h-[95vh] flex flex-col p-0 border-0 shadow-2xl rounded-3xl bg-gray-50"
          dir="rtl"
        >
          <div className="relative border-b p-4 flex-shrink-0 bg-white">
            <div className="flex justify-between items-center w-full">
              <div className="flex items-center gap-4">
                <div className="p-3 rounded-xl bg-gradient-to-r from-purple-500 to-pink-500 text-white shadow-lg">
                  <UserPlus className="w-8 h-8" />
                </div>
                <div className="text-right">
                  <DialogTitle className="text-2xl font-bold text-gray-800">
                    {formDict.header.title}
                  </DialogTitle>
                  <DialogDescription className="text-md text-gray-500 mt-1">
                    {formDict.footer.step
                      .replace('{{current}}', (currentStep + 1).toString())
                      .replace('{{total}}', steps.length.toString())}
                    : {steps[currentStep].label}
                  </DialogDescription>
                </div>
              </div>
              <div className="flex-1 flex justify-center">
                <StepIndicator currentStep={currentStep} steps={steps} />
              </div>
              <Button
                variant="ghost"
                size="icon"
                onClick={onClose}
                className="rounded-full h-10 w-10 text-gray-500 hover:text-gray-700 hover:bg-gray-100"
              >
                <X className="w-5 h-5" />
              </Button>
            </div>
          </div>
          <div className="flex-1 overflow-y-auto p-6 lg:p-8 bg-gradient-to-br from-white via-purple-50/20 to-pink-50/20">
            <FormProvider {...form}>
              <form onSubmit={handleSubmit} className="h-full">
                <div className="animate-fade-in-up">{renderStepContent()}</div>
              </form>
            </FormProvider>
          </div>
          <div className="border-t bg-white p-4 flex-shrink-0">
            <div className="flex items-center justify-between">
              <div className="flex items-center gap-3">
                {currentStep > 0 && (
                  <Button
                    type="button"
                    variant="outline"
                    onClick={handlePrevious}
                    className="px-6 py-3 border-2 border-gray-300 hover:bg-gray-50 rounded-xl transition-all duration-300 font-bold"
                  >
                    <ArrowRight className="w-5 h-5 ml-2" />
                    {formDict.buttons.back}
                  </Button>
                )}
                {currentStep < steps.length - 1 ? (
                  <Button
                    type="button"
                    onClick={handleNext}
                    disabled={!canProceedToNextStep()}
                    className="px-8 py-3 bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-700 hover:to-pink-700 text-white shadow-lg hover:shadow-xl transition-all duration-300 rounded-xl font-bold disabled:opacity-50 disabled:cursor-not-allowed"
                  >
                    {formDict.buttons.continue}
                    <ArrowLeft className="w-5 h-5 mr-2" />
                  </Button>
                ) : (
                  <Button
                    type="submit"
                    onClick={handleSubmit}
                    disabled={isSubmitting || !firstParty || !secondParty}
                    className="px-8 py-3 bg-gradient-to-r from-emerald-600 to-green-600 hover:from-emerald-700 hover:to-green-700 text-white shadow-lg hover:shadow-xl transition-all duration-300 rounded-xl font-bold disabled:opacity-50 disabled:cursor-not-allowed"
                  >
                    {isSubmitting ? (
                      <>
                        <Loader2 className="w-5 h-5 ml-2 animate-spin" />
                        {formDict.buttons.creating}
                      </>
                    ) : (
                      <>
                        <Gift className="w-5 h-5 ml-2" />
                        {formDict.buttons.create}
                        <Sparkles className="w-4 h-4 mr-2" />
                      </>
                    )}
                  </Button>
                )}
              </div>
              <div className="text-sm text-gray-500 flex items-center gap-2">
                <Crown className="w-4 h-4 text-purple-500" />
                <span>
                  {firstParty && secondParty
                    ? `${firstParty.firstName} ו${secondParty.firstName}`
                    : formDict.steps.select.label}
                </span>
              </div>
            </div>
          </div>
        </DialogContent>
      </Dialog>
      {firstParty && secondParty && (
        <AiMatchAnalysisDialog
          isOpen={showAnalysisDialog}
          onClose={() => setShowAnalysisDialog(false)}
          targetCandidate={firstParty}
          comparisonCandidates={[secondParty]}
          dict={dict.aiAnalysis}
        />
      )}
    </>
  );
};

export default NewSuggestionForm;
--- End of Content for index.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\suggestions\NewSuggestionForm\schema.ts
--------------------------------------------------------------------------------
Content:
import { z } from "zod";
import { addDays, isBefore } from 'date-fns';

// Validation rules

const MIN_DECISION_DAYS = 1;
const MAX_DECISION_DAYS = 30;

// Helper function to validate dates
const isValidDeadlineDate = (date: Date | null | undefined, minDays: number, maxDays: number) => {
  if (!date) return false;
  
  const today = new Date();
  const minDate = addDays(today, minDays);
  const maxDate = addDays(today, maxDays);
  
  return !isBefore(date, minDate) && !isBefore(maxDate, date);
};

// Schema for new suggestion
export const newSuggestionSchema = z.object({
  firstPartyId: z.string({
    required_error: "יש לבחור מועמד/ת ראשון/ה",
  }),
  
  secondPartyId: z.string({
    required_error: "יש לבחור מועמד/ת שני/ה",
  }),
  
  priority: z.enum(['LOW', 'MEDIUM', 'HIGH', 'URGENT'] as const, {
    required_error: "יש לבחור רמת עדיפות",
  }),

  status: z.enum([
    'DRAFT',
    'PENDING_FIRST_PARTY',
    'FIRST_PARTY_APPROVED',
    'FIRST_PARTY_DECLINED',
    'PENDING_SECOND_PARTY',
    'SECOND_PARTY_APPROVED',
    'SECOND_PARTY_DECLINED',
    'AWAITING_MATCHMAKER_APPROVAL',
    'CONTACT_DETAILS_SHARED',
    'AWAITING_FIRST_DATE_FEEDBACK',
    'THINKING_AFTER_DATE',
    'PROCEEDING_TO_SECOND_DATE',
    'ENDED_AFTER_FIRST_DATE',
    'MEETING_PENDING',
    'MEETING_SCHEDULED',
    'MATCH_APPROVED',
    'MATCH_DECLINED',
    'DATING',
    'ENGAGED',
    'MARRIED',
    'EXPIRED',
    'CLOSED',
    'CANCELLED'
  ] as const, {
    required_error: "יש לבחור סטטוס",
  }).default('DRAFT'),

  matchingReason: z.string()
    .max(500, "סיבת ההתאמה לא יכולה להכיל יותר מ-500 תווים")
    .optional(),

  internalNotes: z.string()
    .max(1000, "ההערות הפנימיות לא יכולות להכיל יותר מ-1000 תווים")
    .optional(),

  firstPartyNotes: z.string()
    .max(500, "ההערות לצד א' לא יכולות להכיל יותר מ-500 תווים")
    .optional(),

  secondPartyNotes: z.string()
    .max(500, "ההערות לצד ב' לא יכולות להכיל יותר מ-500 תווים")
    .optional(),


  decisionDeadline: z.date({
    required_error: "יש לבחור תאריך יעד להחלטה ",
  })
}).refine(
  (data) => data.firstPartyId !== data.secondPartyId,
  {
    message: "לא ניתן ליצור הצעה עבור אותו מועמד",
    path: ["secondPartyId"]
  }

).refine(
  (data) => isValidDeadlineDate(data.decisionDeadline, MIN_DECISION_DAYS, MAX_DECISION_DAYS),
  {
    message: `תאריך היעד להחלטה סופית חייב להיות בין ${MIN_DECISION_DAYS} ל-${MAX_DECISION_DAYS} ימים מהיום`,
    path: ["decisionDeadline"]
  }
);

export type NewSuggestionFormData = z.infer<typeof newSuggestionSchema>;

// Status mapping for display
export const suggestionStatusMap = {
  DRAFT: "טיוטה",
  PENDING_FIRST_PARTY: "ממתין לתשובת צד א'",
  FIRST_PARTY_APPROVED: "צד א' אישר",
  FIRST_PARTY_DECLINED: "צד א' דחה",
  PENDING_SECOND_PARTY: "ממתין לתשובת צד ב'",
  SECOND_PARTY_APPROVED: "צד ב' אישר",
  SECOND_PARTY_DECLINED: "צד ב' דחה",
  AWAITING_MATCHMAKER_APPROVAL: "ממתין לאישור שדכן",
  CONTACT_DETAILS_SHARED: "פרטי קשר הועברו",
  AWAITING_FIRST_DATE_FEEDBACK: "ממתין למשוב פגישה ראשונה",
  THINKING_AFTER_DATE: "בשלב מחשבה אחרי פגישה",
  PROCEEDING_TO_SECOND_DATE: "ממשיכים לפגישה שנייה",
  ENDED_AFTER_FIRST_DATE: "הסתיים אחרי פגישה ראשונה",
  MEETING_PENDING: "ממתין לקביעת פגישה",
  MEETING_SCHEDULED: "פגישה נקבעה",
  MATCH_APPROVED: "ההצעה אושרה",
  MATCH_DECLINED: "ההצעה נדחתה",
  DATING: "בתהליך היכרות",
  ENGAGED: "מאורסים",
  MARRIED: "נישאו",
  EXPIRED: "פג תוקף",
  CLOSED: "ההצעה נסגרה",
  CANCELLED: "ההצעה בוטלה"
} as const;

// Priority mapping for display
export const priorityMap = {
  LOW: { label: "נמוכה", color: "text-gray-500" },
  MEDIUM: { label: "רגילה", color: "text-blue-500" },
  HIGH: { label: "גבוהה", color: "text-yellow-500" },
  URGENT: { label: "דחופה", color: "text-red-500" }
} as const;
--- End of Content for schema.ts ---

================================================================================
Directory: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\suggestions\cards
================================================================================

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\suggestions\cards\SuggestionCard.tsx
--------------------------------------------------------------------------------
Content:
// src/app/components/matchmaker/suggestions/cards/SuggestionCard.tsx

import React, { useState, useEffect } from 'react';
import { Card, CardContent } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from '@/components/ui/dropdown-menu';
import Image from 'next/image';
import {
  Clock,
  User,
  MessageCircle,
  Eye,
  AlertCircle,
  MoreHorizontal,
  Send,
  RefreshCw,
  Trash2,
  Edit,
  CheckCircle,
  XCircle,
  CalendarClock,
  Heart,
  MapPin,
  Calendar,
  Star,
  Sparkles,
  ChevronDown,
  ChevronUp,
  Crown,
  Zap,
  Award,
  Target,
  Users,
  Quote,
  Briefcase,
  GraduationCap,
  ArrowRight,
  Phone,
  Mail,
  Gift,
  Flame,
  TrendingUp,
  Shield,
  Gem,
} from 'lucide-react';
import { formatDistanceToNow } from 'date-fns';
import { he } from 'date-fns/locale';
import type {
  MatchSuggestionStatus,
  Priority,
  UserImage,
} from '@prisma/client';
import type {
  Suggestion,
  ActionAdditionalData,
  SuggestionParty,
} from '@/types/suggestions';
import { Progress } from '@/components/ui/progress';
import { cn, getRelativeCloudinaryPath, getInitials } from '@/lib/utils';
import { Avatar, AvatarFallback } from '@/components/ui/avatar';
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from '@/components/ui/tooltip';
import type { MatchmakerPageDictionary } from '@/types/dictionary';

// Media query hook
const useMediaQuery = (query: string) => {
  const [matches, setMatches] = useState(false);
  useEffect(() => {
    const media = window.matchMedia(query);
    if (media.matches !== matches) {
      setMatches(media.matches);
    }
    const listener = () => setMatches(media.matches);
    window.addEventListener('resize', listener);
    return () => window.removeEventListener('resize', listener);
  }, [matches, query]);
  return matches;
};

interface SuggestionCardProps {
  suggestion: Suggestion;
  onAction: (
    type:
      | 'view'
      | 'contact'
      | 'message'
      | 'edit'
      | 'delete'
      | 'resend'
      | 'changeStatus'
      | 'reminder',
    suggestion: Suggestion,
    additionalData?: ActionAdditionalData
  ) => void;
  dict: MatchmakerPageDictionary['suggestionsDashboard']['suggestionCard'];
  className?: string;
  variant?: 'full' | 'compact';
}

const calculateAge = (birthDate: Date): number => {
  const today = new Date();
  const birth = new Date(birthDate);
  let age = today.getFullYear() - birth.getFullYear();
  const monthDiff = today.getMonth() - birth.getMonth();
  if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birth.getDate())) {
    age--;
  }
  return age;
};

const getEnhancedStatusInfo = (status: MatchSuggestionStatus) => {
  const defaults = {
    icon: RefreshCw,
    progress: 30,
    pulse: false,
    color: 'text-gray-600',
    bgColor: 'from-gray-50 to-slate-50',
  };
  const statusMap: Partial<
    Record<MatchSuggestionStatus, Partial<typeof defaults>>
  > = {
    PENDING_FIRST_PARTY: {
      color: 'text-yellow-600',
      bgColor: 'from-yellow-50 to-amber-50',
      icon: Clock,
      progress: 25,
      pulse: true,
    },
    PENDING_SECOND_PARTY: {
      color: 'text-blue-600',
      bgColor: 'from-blue-50 to-cyan-50',
      icon: Clock,
      progress: 50,
      pulse: true,
    },
    FIRST_PARTY_APPROVED: {
      color: 'text-green-600',
      bgColor: 'from-green-50 to-emerald-50',
      icon: CheckCircle,
      progress: 40,
    },
    SECOND_PARTY_APPROVED: {
      color: 'text-green-600',
      bgColor: 'from-green-50 to-emerald-50',
      icon: CheckCircle,
      progress: 60,
    },
    FIRST_PARTY_DECLINED: {
      color: 'text-red-600',
      bgColor: 'from-red-50 to-pink-50',
      icon: XCircle,
      progress: 100,
    },
    SECOND_PARTY_DECLINED: {
      color: 'text-red-600',
      bgColor: 'from-red-50 to-pink-50',
      icon: XCircle,
      progress: 100,
    },
    CONTACT_DETAILS_SHARED: {
      color: 'text-purple-600',
      bgColor: 'from-purple-50 to-pink-50',
      icon: Send,
      progress: 70,
    },
    DATING: {
      color: 'text-pink-600',
      bgColor: 'from-pink-50 to-rose-50',
      icon: Heart,
      progress: 80,
    },
    ENGAGED: {
      color: 'text-yellow-600',
      bgColor: 'from-yellow-50 to-orange-50',
      icon: Gem,
      progress: 95,
    },
    MARRIED: {
      color: 'text-emerald-600',
      bgColor: 'from-emerald-50 to-green-50',
      icon: Crown,
      progress: 100,
    },
    AWAITING_FIRST_DATE_FEEDBACK: {
      color: 'text-orange-600',
      bgColor: 'from-orange-50 to-amber-50',
      icon: AlertCircle,
      progress: 75,
      pulse: true,
    },
    EXPIRED: {
      color: 'text-gray-600',
      bgColor: 'from-gray-50 to-slate-50',
      icon: Clock,
      progress: 100,
    },
  };
  return { ...defaults, ...(statusMap[status] || {}) };
};

const getEnhancedPriorityInfo = (priority: Priority) => {
  const priorityMap = {
    URGENT: {
      icon: Flame,
      borderColor: 'border-red-500',
      bgGradient: 'from-red-50 to-pink-50',
      badgeClass:
        'bg-gradient-to-r from-red-500 to-pink-500 text-white border-0 shadow-xl animate-pulse',
    },
    HIGH: {
      icon: Star,
      borderColor: 'border-orange-500',
      bgGradient: 'from-orange-50 to-amber-50',
      badgeClass:
        'bg-gradient-to-r from-orange-500 to-amber-500 text-white border-0 shadow-lg',
    },
    MEDIUM: {
      icon: Target,
      borderColor: 'border-blue-500',
      bgGradient: 'from-blue-50 to-cyan-50',
      badgeClass:
        'bg-gradient-to-r from-blue-500 to-cyan-500 text-white border-0 shadow-lg',
    },
    LOW: {
      icon: Shield,
      borderColor: 'border-gray-400',
      bgGradient: 'from-gray-50 to-slate-50',
      badgeClass:
        'bg-gradient-to-r from-gray-500 to-slate-500 text-white border-0 shadow-lg',
    },
  };
  return priorityMap[priority] || priorityMap.MEDIUM;
};

const getDaysLeft = (decisionDeadline?: Date | string | null) => {
  if (!decisionDeadline) return null;
  const deadline = new Date(decisionDeadline);
  const today = new Date();
  const diffTime = deadline.getTime() - today.getTime();
  const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
  return diffDays > 0 ? diffDays : 0;
};

const HighlightPill: React.FC<{
  icon: React.ElementType;
  text: string;
  color?: string;
}> = ({ icon: Icon, text, color = 'from-blue-500 to-cyan-500' }) => (
  <div
    className={cn(
      'flex items-center gap-2 rounded-full bg-white/80 backdrop-blur-sm border-2 px-3 py-1.5 text-xs font-medium shadow-lg hover:shadow-xl transition-all duration-300 hover:scale-105',
      'border-transparent bg-gradient-to-r text-white',
      color
    )}
  >
    <Icon className="w-3 h-3" />
    <span>{text}</span>
  </div>
);

const MatchmakerInfo: React.FC<{
  dict: MatchmakerPageDictionary['suggestionsDashboard']['suggestionCard']['matchmakerInfo'];
  matchmaker: { firstName: string; lastName: string } | undefined;
  className?: string;
}> = ({ dict, matchmaker, className }) => {
  if (!matchmaker) {
    return (
      <div
        className={cn(
          'flex items-center gap-3 p-3 bg-gradient-to-r from-gray-50 to-slate-50 rounded-xl border border-gray-100 shadow-sm',
          className
        )}
      >
        <div className="text-center text-gray-500">
          <p className="text-sm">{dict.noInfo}</p>
        </div>
      </div>
    );
  }
  return (
    <div
      className={cn(
        'flex items-center gap-3 p-3 bg-gradient-to-r from-purple-50 to-pink-50 rounded-xl border border-purple-100 shadow-sm',
        className
      )}
    >
      <Avatar className="w-10 h-10 border-2 border-white shadow-lg">
        <AvatarFallback className="bg-gradient-to-br from-purple-500 to-pink-500 text-white font-bold text-sm">
          {getInitials(`${matchmaker.firstName} ${matchmaker.lastName}`)}
        </AvatarFallback>
      </Avatar>
      <div>
        <p className="text-xs font-medium text-purple-600">{dict.label}</p>
        <p className="text-sm font-bold text-gray-800">
          {matchmaker.firstName} {matchmaker.lastName}
        </p>
      </div>
    </div>
  );
};

const PartyDisplay: React.FC<{
  party: SuggestionParty;
  isCompact?: boolean;
}> = ({ party, isCompact = false }) => {
  const imageUrl =
    party.images.find((img: UserImage) => img.isMain)?.url ||
    '/placeholders/user.png';
  return (
    <div className="flex flex-col items-center gap-3">
      <div
        className={cn(
          'relative rounded-full overflow-hidden shadow-xl border-3 border-white',
          isCompact ? 'h-12 w-12' : 'h-16 w-16'
        )}
      >
        <Image
          src={getRelativeCloudinaryPath(imageUrl)}
          alt={party.firstName}
          fill
          className="object-cover"
          sizes={isCompact ? '3rem' : '4rem'}
        />
      </div>
      <div className="text-center">
        <h4
          className={cn(
            'font-bold text-gray-800',
            isCompact ? 'text-sm' : 'text-base'
          )}
        >
          {party.firstName} {party.lastName}
        </h4>
        {party.profile?.city && (
          <div
            className={cn(
              'flex items-center justify-center gap-1 text-gray-600',
              isCompact ? 'text-xs' : 'text-sm'
            )}
          >
            <MapPin className="w-3 h-3 text-green-500" />
            <span>{party.profile.city}</span>
          </div>
        )}
      </div>
    </div>
  );
};

const SuggestionCard: React.FC<SuggestionCardProps> = ({
  suggestion,
  onAction,
  dict,
  className,
  variant = 'full',
}) => {
  const isMobile = useMediaQuery('(max-width: 768px)');

  const { firstParty, secondParty, matchmaker } = suggestion;
  const statusInfo = getEnhancedStatusInfo(suggestion.status);
  const priorityInfo = getEnhancedPriorityInfo(suggestion.priority);
  const statusText = dict.statuses[suggestion.status] || dict.statuses.DEFAULT;
  const priorityText =
    dict.priorities[suggestion.priority] || dict.priorities.MEDIUM;
  const daysLeft = getDaysLeft(suggestion.decisionDeadline);
  const firstPartyAge = calculateAge(firstParty.profile.birthDate);
  const secondPartyAge = calculateAge(secondParty.profile.birthDate);

  const highlights = [
    {
      text: dict.highlights.familyValues,
      icon: Heart,
      color: 'from-pink-500 to-rose-500',
    },
    {
      text: dict.highlights.religiousView,
      icon: Sparkles,
      color: 'from-purple-500 to-indigo-500',
    },
    {
      text: dict.highlights.location,
      icon: MapPin,
      color: 'from-green-500 to-emerald-500',
    },
  ].slice(0, 3);

  if (isMobile && variant === 'compact') {
    const StatusIcon = statusInfo.icon;
    return (
      <Card
        className={cn(
          'w-full cursor-pointer hover:shadow-xl transition-all duration-300 group overflow-hidden',
          'border-l-4 bg-gradient-to-br from-white to-gray-50/50',
          priorityInfo.borderColor,
          className
        )}
        onClick={() => onAction('view', suggestion)}
      >
        <CardContent className="p-4">
          <div className="flex justify-between items-start mb-3">
            <div className="flex-1">
              <h4 className="font-bold text-gray-800 mb-2 text-sm leading-tight">
                {firstParty.firstName} ו{secondParty.firstName}
              </h4>
              <div className="flex items-center gap-2 mb-2">
                <div className="flex -space-x-2">
                  <Image
                    src={getRelativeCloudinaryPath(
                      firstParty.images.find((img) => img.isMain)?.url ||
                        '/placeholders/user.png'
                    )}
                    alt={firstParty.firstName}
                    width={24}
                    height={24}
                    className="rounded-full border-2 border-white shadow-md"
                  />
                  <Image
                    src={getRelativeCloudinaryPath(
                      secondParty.images.find((img) => img.isMain)?.url ||
                        '/placeholders/user.png'
                    )}
                    alt={secondParty.firstName}
                    width={24}
                    height={24}
                    className="rounded-full border-2 border-white shadow-md"
                  />
                </div>
                <span className="text-xs text-gray-500 font-medium">
                  {firstPartyAge}, {secondPartyAge}
                </span>
              </div>
            </div>
            <div
              className={cn(
                'p-2 rounded-full shadow-lg group-hover:scale-110 transition-transform bg-gradient-to-r',
                statusInfo.bgColor
              )}
            >
              <StatusIcon className={cn('w-4 h-4', statusInfo.color)} />
            </div>
          </div>
          <Badge
            className={cn(
              'text-xs font-bold bg-opacity-20 border',
              priorityInfo.borderColor,
              statusInfo.color
            )}
          >
            {statusText.shortLabel}
          </Badge>
        </CardContent>
      </Card>
    );
  }

  if (isMobile && variant === 'full') {
    return (
      <Card
        className={cn(
          'overflow-hidden shadow-xl border-0 bg-gradient-to-br from-white via-purple-50/20 to-pink-50/20 hover:shadow-2xl transition-all duration-500 group',
          className
        )}
      >
        <CardContent className="p-6 space-y-6">
          <div className="relative">
            <div className="relative z-10 flex justify-between items-center">
              <h3 className="text-2xl font-bold bg-gradient-to-r from-purple-600 via-pink-600 to-blue-600 bg-clip-text text-transparent">
                {dict.mobile.title}
              </h3>
              <Badge
                className={cn(
                  'text-sm font-bold shadow-xl',
                  priorityInfo.badgeClass
                )}
              >
                <statusInfo.icon className="w-4 h-4 ml-2" />
                {statusText.label}
              </Badge>
            </div>
          </div>
          {suggestion.priority === 'URGENT' && (
            <div className="flex items-center gap-2 p-3 bg-gradient-to-r from-red-100 to-pink-100 border border-red-200 rounded-xl shadow-lg">
              <Flame className="w-5 h-5 text-red-500 animate-pulse" />
              <span className="text-red-700 font-bold text-sm">
                {dict.mobile.urgentTitle}
              </span>
            </div>
          )}
          <MatchmakerInfo dict={dict.matchmakerInfo} matchmaker={matchmaker} />
          <div>
            <h4 className="font-bold text-lg mb-3 text-center text-gray-700 flex items-center justify-center gap-2">
              <Sparkles className="w-5 h-5 text-purple-500" />
              {dict.mobile.connectionPoints}
            </h4>
            <div className="flex flex-wrap justify-center gap-2">
              {highlights.map((highlight, index) => (
                <HighlightPill
                  key={index}
                  icon={highlight.icon}
                  text={highlight.text}
                  color={highlight.color}
                />
              ))}
            </div>
          </div>
          <div className="space-y-6">
            <PartyDisplay party={firstParty} />
            <div className="flex justify-center">
              <div className="p-3 rounded-full bg-gradient-to-r from-purple-500 to-pink-500 text-white shadow-xl">
                <Heart className="w-6 h-6" />
              </div>
            </div>
            <PartyDisplay party={secondParty} />
          </div>
          {suggestion.matchingReason && (
            <div className="p-4 bg-gradient-to-r from-cyan-50 to-blue-50 border border-cyan-200 rounded-xl shadow-inner">
              <div className="flex items-start gap-3">
                <Quote className="w-5 h-5 text-cyan-500 mt-1 flex-shrink-0" />
                <div>
                  <h4 className="font-bold text-cyan-800 mb-2">
                    {dict.mobile.matchReasonTitle}
                  </h4>
                  <p className="text-cyan-900 leading-relaxed italic font-medium text-sm">
                    &quot;{suggestion.matchingReason}&quot;
                  </p>
                </div>
              </div>
            </div>
          )}
          <div className="space-y-2">
            <div className="flex justify-between text-sm text-gray-600">
              <span>{statusText.description}</span>
              <span>{statusInfo.progress}%</span>
            </div>
            <Progress
              value={statusInfo.progress}
              className="h-2 bg-gray-100 shadow-inner"
            />
          </div>
          <div className="pt-4 border-t border-purple-100 space-y-4">
            <Button
              size="lg"
              className="w-full bg-gradient-to-r from-purple-600 via-pink-600 to-blue-600 hover:from-purple-700 hover:via-pink-700 hover:to-blue-700 shadow-xl hover:shadow-2xl transition-all duration-300 rounded-2xl h-14 font-bold text-lg transform hover:scale-105"
              onClick={() => onAction('view', suggestion)}
            >
              <Eye className="w-6 h-6 ml-3" />
              {dict.mobile.viewDetailsButton}
              <ArrowRight className="w-5 h-5 mr-2" />
            </Button>
            <div className="flex justify-between items-center">
              <span className="text-xs text-gray-500 font-medium">
                {dict.mobile.sentTime.replace(
                  '{{timeAgo}}',
                  formatDistanceToNow(new Date(suggestion.createdAt), {
                    addSuffix: true,
                    locale: he,
                  })
                )}
              </span>
              <DropdownMenu>
                <DropdownMenuTrigger asChild>
                  <Button
                    size="sm"
                    variant="ghost"
                    className="text-gray-500 hover:bg-purple-50 rounded-full"
                  >
                    <MoreHorizontal className="w-5 h-5" />
                  </Button>
                </DropdownMenuTrigger>
                <DropdownMenuContent align="end" className="w-48">
                  <DropdownMenuItem
                    onClick={() => onAction('edit', suggestion)}
                  >
                    <Edit className="w-4 h-4 ml-2" />
                    <span>{dict.actions.edit}</span>
                  </DropdownMenuItem>
                  <DropdownMenuItem
                    onClick={() => onAction('message', suggestion)}
                  >
                    <MessageCircle className="w-4 h-4 ml-2" />
                    <span>{dict.actions.sendMessage}</span>
                  </DropdownMenuItem>
                  <DropdownMenuItem
                    onClick={() => onAction('delete', suggestion)}
                    className="text-red-600 focus:text-red-600"
                  >
                    <Trash2 className="w-4 h-4 ml-2" />
                    <span>{dict.actions.delete}</span>
                  </DropdownMenuItem>
                </DropdownMenuContent>
              </DropdownMenu>
            </div>
          </div>
        </CardContent>
      </Card>
    );
  }

  const StatusIcon = statusInfo.icon;
  const PriorityIcon = priorityInfo.icon;
  const canBeResent = [
    'EXPIRED',
    'FIRST_PARTY_DECLINED',
    'SECOND_PARTY_DECLINED',
  ].includes(suggestion.status);

  return (
    <TooltipProvider>
      <Card
        className={cn(
          'overflow-hidden hover:shadow-2xl transition-all duration-500 group border-0 bg-gradient-to-br from-white via-gray-50/30 to-purple-50/20',
          className
        )}
      >
        <div
          className={cn(
            'p-6 border-b relative overflow-hidden bg-gradient-to-r shadow-lg',
            statusInfo.bgColor
          )}
        >
          <div className="absolute top-0 right-0 w-32 h-32 bg-gradient-to-br from-white/20 to-transparent rounded-full blur-2xl"></div>
          <div className="absolute bottom-0 left-0 w-24 h-24 bg-gradient-to-br from-white/10 to-transparent rounded-full blur-xl"></div>
          <div className="relative z-10">
            <div className="flex justify-between items-center mb-4">
              <div className="flex items-center gap-3">
                <div
                  className={cn(
                    'p-3 rounded-full shadow-lg group-hover:scale-110 transition-transform bg-white/20 backdrop-blur-sm'
                  )}
                >
                  <StatusIcon className={cn('w-6 h-6', statusInfo.color)} />
                </div>
                <div>
                  <span className="font-bold text-gray-900 text-lg">
                    {statusText.label}
                  </span>
                  <p className="text-sm text-gray-600 mt-1">
                    {statusText.description}
                  </p>
                </div>
              </div>
              <div className="flex items-center gap-3">
                <Badge className={priorityInfo.badgeClass}>
                  <PriorityIcon className="w-4 h-4 ml-2" />
                  {priorityText.label}
                </Badge>
                {daysLeft !== null &&
                  daysLeft <= 3 &&
                  suggestion.status !== 'EXPIRED' && (
                    <Badge className="bg-gradient-to-r from-red-500 to-pink-500 text-white border-0 shadow-xl animate-pulse">
                      <Clock className="w-3 h-3 ml-1" />
                      {daysLeft === 0
                        ? dict.deadline.lastDay
                        : dict.deadline.daysLeft.replace(
                            '{{count}}',
                            daysLeft.toString()
                          )}
                    </Badge>
                  )}
              </div>
            </div>
            <Progress
              value={statusInfo.progress}
              className="h-3 bg-white/30 shadow-inner"
            />
          </div>
        </div>
        <div className="p-6 space-y-6">
          <MatchmakerInfo dict={dict.matchmakerInfo} matchmaker={matchmaker} />
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div className="space-y-4 p-5 bg-gradient-to-br from-blue-50 to-cyan-50 rounded-2xl border border-blue-100 shadow-lg hover:shadow-xl transition-all duration-300">
              <PartyDisplay party={firstParty} />
              <div className="flex flex-wrap items-stretch gap-3 text-sm">
                {firstParty.profile?.occupation && (
                  <div className="flex-1 min-w-[120px] flex items-start gap-2 p-2 bg-white/70 rounded-lg shadow-sm">
                    <Briefcase className="w-4 h-4 text-blue-500 mt-0.5 flex-shrink-0" />
                    <span className="font-medium text-gray-700">
                      {firstParty.profile.occupation}
                    </span>
                  </div>
                )}
                {firstParty.profile?.education && (
                  <div className="flex-1 min-w-[120px] flex items-start gap-2 p-2 bg-white/70 rounded-lg shadow-sm">
                    <GraduationCap className="w-4 h-4 text-purple-500 mt-0.5 flex-shrink-0" />
                    <span className="font-medium text-gray-700">
                      {firstParty.profile.education}
                    </span>
                  </div>
                )}
              </div>
              {(suggestion.status === 'FIRST_PARTY_APPROVED' ||
                suggestion.status === 'FIRST_PARTY_DECLINED') && (
                <Badge
                  className={
                    suggestion.status === 'FIRST_PARTY_APPROVED'
                      ? 'bg-gradient-to-r from-green-500 to-emerald-500 text-white border-0 shadow-lg'
                      : 'bg-gradient-to-r from-red-500 to-pink-500 text-white border-0 shadow-lg'
                  }
                >
                  {suggestion.status === 'FIRST_PARTY_APPROVED' ? (
                    <>
                      <CheckCircle className="w-4 h-4 ml-2" />
                      {dict.desktop.partyStatus.approved}
                    </>
                  ) : (
                    <>
                      <XCircle className="w-4 h-4 ml-2" />
                      {dict.desktop.partyStatus.declined}
                    </>
                  )}
                </Badge>
              )}
            </div>
            <div className="space-y-4 p-5 bg-gradient-to-br from-purple-50 to-pink-50 rounded-2xl border border-purple-100 shadow-lg hover:shadow-xl transition-all duration-300">
              <PartyDisplay party={secondParty} />
              <div className="flex flex-wrap items-stretch gap-3 text-sm">
                {secondParty.profile?.occupation && (
                  <div className="flex-1 min-w-[120px] flex items-start gap-2 p-2 bg-white/70 rounded-lg shadow-sm">
                    <Briefcase className="w-4 h-4 text-purple-500 mt-0.5 flex-shrink-0" />
                    <span className="font-medium text-gray-700">
                      {secondParty.profile.occupation}
                    </span>
                  </div>
                )}
                {secondParty.profile?.education && (
                  <div className="flex-1 min-w-[120px] flex items-start gap-2 p-2 bg-white/70 rounded-lg shadow-sm">
                    <GraduationCap className="w-4 h-4 text-pink-500 mt-0.5 flex-shrink-0" />
                    <span className="font-medium text-gray-700">
                      {secondParty.profile.education}
                    </span>
                  </div>
                )}
              </div>
              {(suggestion.status === 'SECOND_PARTY_APPROVED' ||
                suggestion.status === 'SECOND_PARTY_DECLINED') && (
                <Badge
                  className={
                    suggestion.status === 'SECOND_PARTY_APPROVED'
                      ? 'bg-gradient-to-r from-green-500 to-emerald-500 text-white border-0 shadow-lg'
                      : 'bg-gradient-to-r from-red-500 to-pink-500 text-white border-0 shadow-lg'
                  }
                >
                  {suggestion.status === 'SECOND_PARTY_APPROVED' ? (
                    <>
                      <CheckCircle className="w-4 h-4 ml-2" />
                      {dict.desktop.partyStatus.approved}
                    </>
                  ) : (
                    <>
                      <XCircle className="w-4 h-4 ml-2" />
                      {dict.desktop.partyStatus.declined}
                    </>
                  )}
                </Badge>
              )}
            </div>
          </div>
          <div className="p-5 bg-gradient-to-r from-cyan-50 to-blue-50 rounded-2xl border border-cyan-100 shadow-lg">
            <h4 className="font-bold text-lg mb-3 text-cyan-800 flex items-center gap-2">
              <Sparkles className="w-5 h-5 text-cyan-500" />
              {dict.desktop.connectionPoints}
            </h4>
            <div className="flex flex-wrap gap-2">
              {highlights.map((highlight, index) => (
                <HighlightPill
                  key={index}
                  icon={highlight.icon}
                  text={highlight.text}
                  color={highlight.color}
                />
              ))}
            </div>
          </div>
          {suggestion.matchingReason && (
            <div className="p-5 bg-gradient-to-r from-emerald-50 to-green-50 rounded-2xl border border-emerald-100 shadow-lg">
              <h5 className="text-sm font-bold text-emerald-700 mb-2 flex items-center gap-2">
                <Quote className="w-4 h-4" />
                {dict.desktop.matchReasonTitle}
              </h5>
              <p className="text-emerald-800 leading-relaxed font-medium">
                {suggestion.matchingReason}
              </p>
            </div>
          )}
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4 text-sm">
            <div className="flex items-center gap-2 p-3 bg-gray-50 rounded-xl shadow-sm">
              <Clock className="w-4 h-4 text-gray-500" />
              <div>
                <p className="font-medium text-gray-600">
                  {dict.desktop.timeline.created}
                </p>
                <p className="text-gray-800">
                  {formatDistanceToNow(new Date(suggestion.createdAt), {
                    addSuffix: true,
                    locale: he,
                  })}
                </p>
              </div>
            </div>
            {suggestion.decisionDeadline && (
              <div className="flex items-center gap-2 p-3 bg-orange-50 rounded-xl shadow-sm">
                <CalendarClock className="w-4 h-4 text-orange-500" />
                <div>
                  <p className="font-medium text-orange-600">
                    {dict.desktop.timeline.deadline}
                  </p>
                  <p className="text-orange-800">
                    {daysLeft !== null
                      ? daysLeft === 0
                        ? dict.deadline.today
                        : dict.deadline.decisionInDays.replace(
                            '{{count}}',
                            daysLeft.toString()
                          )
                      : dict.deadline.noDeadline}
                  </p>
                </div>
              </div>
            )}
            <div className="flex items-center gap-2 p-3 bg-blue-50 rounded-xl shadow-sm">
              <TrendingUp className="w-4 h-4 text-blue-500" />
              <div>
                <p className="font-medium text-blue-600">
                  {dict.desktop.timeline.progress}
                </p>
                <p className="text-blue-800">
                  {dict.desktop.timeline.progressCompleted.replace(
                    '{{percent}}',
                    statusInfo.progress.toString()
                  )}
                </p>
              </div>
            </div>
          </div>
          <div className="flex items-center justify-between pt-4 border-t border-gray-100">
            <div className="flex items-center gap-2">
              <Button
                variant="ghost"
                size="sm"
                onClick={() => onAction('message', suggestion)}
                className="text-blue-600 hover:text-blue-700 hover:bg-blue-50 rounded-xl font-medium"
              >
                <MessageCircle className="w-4 h-4 ml-2" />
                {dict.actions.sendMessage}
              </Button>
              {canBeResent && (
                <Button
                  variant="ghost"
                  size="sm"
                  onClick={() => onAction('resend', suggestion)}
                  className="text-green-600 hover:text-green-700 hover:bg-green-50 rounded-xl font-medium"
                >
                  <RefreshCw className="w-4 h-4 ml-2" />
                  {dict.actions.resend}
                </Button>
              )}
            </div>
            <div className="flex items-center gap-2">
              <Button
                variant="default"
                size="sm"
                onClick={() => onAction('view', suggestion)}
                className="bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-700 hover:to-pink-700 shadow-lg hover:shadow-xl transition-all duration-300 rounded-xl font-medium"
              >
                <Eye className="w-4 h-4 ml-2" />
                {dict.actions.viewDetails}
              </Button>
              <DropdownMenu>
                <DropdownMenuTrigger asChild>
                  <Button
                    size="sm"
                    variant="ghost"
                    className="px-2 hover:bg-gray-100 rounded-xl"
                  >
                    <MoreHorizontal className="w-4 h-4" />
                  </Button>
                </DropdownMenuTrigger>
                <DropdownMenuContent align="end" className="w-48">
                  <DropdownMenuItem
                    onClick={() => onAction('edit', suggestion)}
                  >
                    <Edit className="w-4 h-4 ml-2" />
                    <span>{dict.actions.edit}</span>
                  </DropdownMenuItem>
                  {canBeResent && (
                    <DropdownMenuItem
                      onClick={() => onAction('resend', suggestion)}
                    >
                      <RefreshCw className="w-4 h-4 ml-2" />
                      <span>{dict.actions.resend}</span>
                    </DropdownMenuItem>
                  )}
                  <DropdownMenuItem
                    onClick={() => onAction('delete', suggestion)}
                    className="text-red-600 focus:text-red-600 focus:bg-red-50"
                  >
                    <Trash2 className="w-4 h-4 ml-2" />
                    <span>{dict.actions.delete}</span>
                  </DropdownMenuItem>
                </DropdownMenuContent>
              </DropdownMenu>
            </div>
          </div>
        </div>
      </Card>
    </TooltipProvider>
  );
};

export default SuggestionCard;
--- End of Content for SuggestionCard.tsx ---

================================================================================
Directory: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\suggestions\container
================================================================================

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\suggestions\container\MatchmakerDashboard.tsx
--------------------------------------------------------------------------------
Content:
'use client';

import React, { useState, useCallback, useEffect, useMemo } from 'react';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Card, CardContent } from '@/components/ui/card';
import { useSession } from 'next-auth/react';
import type {
  SuggestionsDictionary,
  MatchmakerPageDictionary,
  ProfilePageDictionary,
} from '@/types/dictionary';
import {
  Plus,
  RefreshCw,
  BarChart,
  Loader2,
  List,
  Archive,
  LayoutGrid,
  Filter,
  Search,
  TrendingUp,
  Users,
  Clock,
  CheckCircle,
  XCircle,
  Heart,
  Sparkles,
  Calendar,
  Target,
  Crown,
  Zap,
  Eye,
  MessageCircle,
  Settings,
  Award,
  Activity,
  Star,
  ArrowUp,
  ArrowDown,
} from 'lucide-react';
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
} from '@/components/ui/alert-dialog';
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
} from '@/components/ui/dialog';
import {
  Sheet,
  SheetContent,
  SheetHeader,
  SheetTitle,
  SheetTrigger,
} from '@/components/ui/sheet';
import { ToggleGroup, ToggleGroupItem } from '@/components/ui/toggle-group';
import { toast } from 'sonner';
import { MatchSuggestionStatus, Priority } from '@prisma/client';
import { cn } from '@/lib/utils';

// Type imports
import type {
  Suggestion,
  SuggestionFilters,
  ActionAdditionalData,
} from '@/types/suggestions';
import type { NewSuggestionFormData } from '../../suggestions/NewSuggestionForm/schema';
import type { Candidate } from '../../new/types/candidates';

// Hooks
import { useCandidates } from '../../new/hooks/useCandidates';

// Components
import NewSuggestionForm from '../../suggestions/NewSuggestionForm';
import SuggestionActionBar from './SuggestionActionBar';
import SuggestionDetailsDialog from '../details/SuggestionDetailsDialog';
import SuggestionCard from '../cards/SuggestionCard';
import EditSuggestionForm from '../EditSuggestionForm';
import MessageForm from '../MessageForm';
import MonthlyTrendModal from './MonthlyTrendModal';
import { ScrollArea } from '@/components/ui/scroll-area';
import { Input } from '@/components/ui/input';

// Media query hook
const useMediaQuery = (query: string) => {
  const [matches, setMatches] = useState(false);
  useEffect(() => {
    if (typeof window === 'undefined') return;
    const media = window.matchMedia(query);
    if (media.matches !== matches) {
      setMatches(media.matches);
    }
    const listener = () => setMatches(media.matches);
    window.addEventListener('resize', listener);
    return () => window.removeEventListener('resize', listener);
  }, [matches, query]);
  return matches;
};

// Enhanced Hero Section Component
const MatchmakerHeroSection: React.FC<{
  dict: MatchmakerPageDictionary['suggestionsDashboard']['heroSection'];
  onNewSuggestion: () => void;
  onRefresh: () => void;
  isRefreshing: boolean;
  stats: {
    total: number;
    pending: number;
    active: number;
    success: number;
    thisMonth: number;
    successRate: number;
  };
}> = ({ dict, onNewSuggestion, onRefresh, isRefreshing, stats }) => {
  return (
    <div className="relative min-h-[400px] bg-gradient-to-br from-purple-50 via-cyan-50/30 to-emerald-50/20 overflow-hidden rounded-3xl shadow-2xl mb-8">
      <div className="absolute inset-0">
        <div className="absolute top-10 right-10 w-64 h-64 bg-gradient-to-br from-purple-200/30 to-pink-200/30 rounded-full blur-3xl animate-float"></div>
        <div
          className="absolute bottom-10 left-10 w-48 h-48 bg-gradient-to-br from-cyan-200/30 to-blue-200/30 rounded-full blur-2xl animate-float"
          style={{ animationDelay: '2s' }}
        ></div>
        <div
          className="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-80 h-80 bg-gradient-to-br from-emerald-200/20 to-green-200/20 rounded-full blur-3xl animate-float"
          style={{ animationDelay: '4s' }}
        ></div>
      </div>

      <div className="relative z-10 p-8 lg:p-12">
        <div className="text-center mb-8">
          <div className="inline-flex items-center gap-3 mb-6">
            <div className="p-4 rounded-full bg-gradient-to-r from-purple-500 to-pink-500 text-white shadow-lg">
              <Crown className="w-10 h-10" />
            </div>
          </div>
          <h1 className="text-4xl md:text-5xl font-bold bg-gradient-to-r from-purple-600 via-pink-600 to-blue-600 bg-clip-text text-transparent mb-4">
            {dict.title}
          </h1>
          <p className="text-xl text-gray-700 max-w-2xl mx-auto leading-relaxed">
            {dict.subtitle}
          </p>
        </div>
        <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mb-8">
          <Card className="border-0 shadow-lg bg-white/80 backdrop-blur-sm hover:shadow-xl transition-all duration-300 group">
            <CardContent className="p-4 text-center">
              <div className="flex items-center justify-center gap-2 mb-2">
                <div className="p-2 rounded-full bg-gradient-to-r from-blue-500 to-cyan-500 text-white shadow-lg group-hover:scale-110 transition-transform">
                  <Users className="w-5 h-5" />
                </div>
                <span className="text-2xl font-bold text-blue-600">
                  {stats.total}
                </span>
              </div>
              <p className="text-sm text-gray-600 font-medium">
                {dict.totalSuggestions}
              </p>
            </CardContent>
          </Card>
          <Card className="border-0 shadow-lg bg-white/80 backdrop-blur-sm hover:shadow-xl transition-all duration-300 group">
            <CardContent className="p-4 text-center">
              <div className="flex items-center justify-center gap-2 mb-2">
                <div className="p-2 rounded-full bg-gradient-to-r from-orange-500 to-amber-500 text-white shadow-lg group-hover:scale-110 transition-transform">
                  <Clock className="w-5 h-5" />
                </div>
                <span className="text-2xl font-bold text-orange-600">
                  {stats.pending}
                </span>
              </div>
              <p className="text-sm text-gray-600 font-medium">
                {dict.pendingResponse}
              </p>
            </CardContent>
          </Card>
          <Card className="border-0 shadow-lg bg-white/80 backdrop-blur-sm hover:shadow-xl transition-all duration-300 group">
            <CardContent className="p-4 text-center">
              <div className="flex items-center justify-center gap-2 mb-2">
                <div className="p-2 rounded-full bg-gradient-to-r from-green-500 to-emerald-500 text-white shadow-lg group-hover:scale-110 transition-transform">
                  <Heart className="w-5 h-5" />
                </div>
                <span className="text-2xl font-bold text-green-600">
                  {stats.success}
                </span>
              </div>
              <p className="text-sm text-gray-600 font-medium">
                {dict.successfulMatches}
              </p>
            </CardContent>
          </Card>
          <Card className="border-0 shadow-lg bg-white/80 backdrop-blur-sm hover:shadow-xl transition-all duration-300 group">
            <CardContent className="p-4 text-center">
              <div className="flex items-center justify-center gap-2 mb-2">
                <div className="p-2 rounded-full bg-gradient-to-r from-purple-500 to-pink-500 text-white shadow-lg group-hover:scale-110 transition-transform">
                  <TrendingUp className="w-5 h-5" />
                </div>
                <span className="text-2xl font-bold text-purple-600">
                  {stats.successRate}%
                </span>
              </div>
              <p className="text-sm text-gray-600 font-medium">
                {dict.successRate}
              </p>
            </CardContent>
          </Card>
        </div>
        <div className="flex flex-col md:flex-row items-center justify-center gap-4">
          <Button
            onClick={onNewSuggestion}
            size="lg"
            className="bg-gradient-to-r from-purple-600 via-pink-600 to-blue-600 hover:from-purple-700 hover:via-pink-700 hover:to-blue-700 text-white shadow-xl hover:shadow-2xl transition-all duration-300 rounded-2xl px-8 py-4 font-bold text-lg transform hover:scale-105"
          >
            <Plus className="w-6 h-6 ml-3" />
            {dict.newSuggestionButton}
            <Sparkles className="w-5 h-5 mr-2" />
          </Button>
          <Button
            variant="outline"
            size="lg"
            onClick={onRefresh}
            disabled={isRefreshing}
            className="border-2 border-purple-300 text-purple-600 hover:bg-purple-50 shadow-lg hover:shadow-xl transition-all duration-300 rounded-2xl px-6 py-4 font-bold text-lg transform hover:scale-105"
          >
            <RefreshCw
              className={cn('w-5 h-5 ml-2', isRefreshing && 'animate-spin')}
            />
            {isRefreshing ? dict.refreshingButton : dict.refreshButton}
          </Button>
        </div>
      </div>
    </div>
  );
};

// Payload types
interface SuggestionUpdatePayload {
  priority?: Priority;
  status?: MatchSuggestionStatus;
  statusNotes?: string;
  matchingReason?: string;
  firstPartyNotes?: string;
  secondPartyNotes?: string;
  internalNotes?: string;
  decisionDeadline?: Date;
}

interface SendMessagePayload {
  suggestionId: string;
  partyType: 'first' | 'second' | 'both';
  messageType: 'message' | 'reminder' | 'update';
  messageContent: string;
}

type DialogActionData = {
  suggestionId?: string;
  newStatus?: MatchSuggestionStatus;
  notes?: string;
  suggestion?: Suggestion;
  partyType?: 'first' | 'second' | 'both';
  type?: string;
};

type ConfirmActionData = {
  suggestionId: string;
  partyType?: 'first' | 'second' | 'both';
  type?: string;
};

type SuggestionCardActionType =
  | 'view'
  | 'contact'
  | 'message'
  | 'edit'
  | 'delete'
  | 'resend'
  | 'changeStatus'
  | 'reminder';

type SuggestionDetailsActionType =
  | SuggestionCardActionType
  | 'sendReminder'
  | 'shareContacts'
  | 'scheduleMeeting'
  | 'viewMeetings'
  | 'exportHistory'
  | 'export'
  | 'resendToAll';

interface MatchmakerDashboardProps {
  suggestionsDict: SuggestionsDictionary;
  matchmakerDict: MatchmakerPageDictionary;
  profileDict: ProfilePageDictionary;
}

export default function MatchmakerDashboard({
  suggestionsDict,
  matchmakerDict,
  profileDict,
}: MatchmakerDashboardProps) {
  const dashboardDict = matchmakerDict.suggestionsDashboard;
  const toastsDict = dashboardDict.toasts;

  const isMobile = useMediaQuery('(max-width: 768px)');
  const [mobileView, setMobileView] = useState<'list' | 'kanban'>('list');
  const [showMobileFilters, setShowMobileFilters] = useState(false);
  const { data: session } = useSession();

  const [activeTab, setActiveTab] = useState('pending');
  const [showNewSuggestion, setShowNewSuggestion] = useState(false);
  const [searchQuery, setSearchQuery] = useState('');
  const [filters, setFilters] = useState<SuggestionFilters>({});
  const [suggestions, setSuggestions] = useState<Suggestion[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [isRefreshing, setIsRefreshing] = useState(false);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [selectedSuggestion, setSelectedSuggestion] =
    useState<Suggestion | null>(null);
  const [showConfirmDialog, setShowConfirmDialog] = useState(false);
  const [confirmAction, setConfirmAction] = useState<{
    type: string;
    data: ConfirmActionData;
  } | null>(null);
  const [showEditForm, setShowEditForm] = useState(false);
  const [showMessageForm, setShowMessageForm] = useState(false);
  const [showMonthlyTrendDialog, setShowMonthlyTrendDialog] = useState(false);

  const { candidates: allCandidates } = useCandidates();

  const fetchSuggestions = useCallback(async () => {
    setIsLoading(true);
    try {
      const response = await fetch('/api/matchmaker/suggestions');
      if (!response.ok) throw new Error('Failed to fetch suggestions');
      const data = await response.json();
      setSuggestions(data);
    } catch (error: unknown) {
      console.error('Error fetching suggestions:', error);
      toast.error(toastsDict.loadError);
    } finally {
      setIsLoading(false);
    }
  }, [toastsDict.loadError]);

  useEffect(() => {
    fetchSuggestions();
  }, [fetchSuggestions]);

  const filteredSuggestions = useMemo(() => {
    return suggestions.filter((s) => {
      if (searchQuery) {
        const query = searchQuery.toLowerCase();
        const match =
          (s.firstParty.firstName + ' ' + s.firstParty.lastName)
            .toLowerCase()
            .includes(query) ||
          (s.secondParty.firstName + ' ' + s.secondParty.lastName)
            .toLowerCase()
            .includes(query) ||
          (s.firstParty.profile?.city &&
            s.firstParty.profile.city.toLowerCase().includes(query)) ||
          (s.secondParty.profile?.city &&
            s.secondParty.profile.city.toLowerCase().includes(query));
        if (!match) return false;
      }
      if (filters.priority?.length && !filters.priority.includes(s.priority))
        return false;
      if (filters.status?.length && !filters.status.includes(s.status))
        return false;
      if (filters.dateRange) {
        const createdAt = new Date(s.createdAt);
        if (
          createdAt < filters.dateRange.start ||
          (filters.dateRange.end && createdAt > filters.dateRange.end)
        )
          return false;
      }
      return true;
    });
  }, [suggestions, searchQuery, filters]);

  const pendingSuggestions = useMemo(
    () => filteredSuggestions.filter((s) => s.category === 'PENDING'),
    [filteredSuggestions]
  );
  const activeSuggestions = useMemo(
    () => filteredSuggestions.filter((s) => s.category === 'ACTIVE'),
    [filteredSuggestions]
  );
  const historySuggestions = useMemo(
    () => filteredSuggestions.filter((s) => s.category === 'HISTORY'),
    [filteredSuggestions]
  );

  const pendingCount = pendingSuggestions.length;
  const activeCount = activeSuggestions.length;
  const historyCount = historySuggestions.length;

  const handleRefresh = async () => {
    setIsRefreshing(true);
    await fetchSuggestions();
    setIsRefreshing(false);
    toast.success(toastsDict.refreshSuccess);
  };

  const handleNewSuggestion = async (data: NewSuggestionFormData) => {
    try {
      const response = await fetch('/api/matchmaker/suggestions', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(data),
      });
      if (!response.ok)
        throw new Error(
          (await response.json()).error || 'Failed to create suggestion'
        );
      setShowNewSuggestion(false);
      toast.success(toastsDict.createSuccess);
      await fetchSuggestions();
    } catch (error: unknown) {
      console.error('Error creating suggestion:', error);
      toast.error(
        `${toastsDict.createError}: ${error instanceof Error ? error.message : ''}`
      );
    }
  };

  const handleSuggestionDeleted = useCallback(
    (deletedId: string) => {
      setSuggestions((prev) => prev.filter((s) => s.id !== deletedId));
      if (selectedSuggestion?.id === deletedId) setSelectedSuggestion(null);
    },
    [selectedSuggestion]
  );

  const handleConfirmAction = async () => {
    if (!confirmAction) return;
    try {
      if (confirmAction.type === 'delete') {
        const response = await fetch(
          `/api/matchmaker/suggestions/${confirmAction.data.suggestionId}/delete`,
          { method: 'DELETE' }
        );
        if (!response.ok) throw new Error('Failed to delete suggestion');
        handleSuggestionDeleted(confirmAction.data.suggestionId);
        toast.success(toastsDict.deleteSuccess);
      }
    } catch (error: unknown) {
      toast.error(toastsDict.deleteError);
    } finally {
      setShowConfirmDialog(false);
      setConfirmAction(null);
    }
  };

  const handleStatusChange = async (
    suggestionId: string,
    newStatus: MatchSuggestionStatus,
    notes?: string
  ) => {
    try {
      const response = await fetch(
        `/api/matchmaker/suggestions/${suggestionId}/status`,
        {
          method: 'PATCH',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            status: newStatus,
            notes: notes || `סטטוס שונה ממממשק ניהול`,
          }),
        }
      );
      if (!response.ok)
        throw new Error(
          (await response.json()).error || 'Failed to update status'
        );
      toast.success(toastsDict.statusUpdateSuccess);
      fetchSuggestions();
    } catch (error: unknown) {
      console.error('Error updating suggestion status:', error);
      toast.error(
        `${toastsDict.statusUpdateError}: ${error instanceof Error ? error.message : ''}`
      );
    }
  };

  const handleUpdateSuggestion = async (data: {
    suggestionId: string;
    updates: SuggestionUpdatePayload;
  }) => {
    try {
      setIsSubmitting(true);
      // ... (API logic remains)
      toast.success(toastsDict.updateSuccess);
      setShowEditForm(false);
      await fetchSuggestions();
    } catch (error) {
      console.error('Error updating suggestion:', error);
      toast.error(
        `${toastsDict.updateError}: ${error instanceof Error ? error.message : 'שגיאה לא ידועה'}`
      );
    } finally {
      setIsSubmitting(false);
    }
  };

  const handleSendMessage = async (data: SendMessagePayload) => {
    try {
      // ... (API logic remains)
      toast.success(toastsDict.messageSentSuccess);
      setShowMessageForm(false);
    } catch (error: unknown) {
      toast.error(
        `${toastsDict.messageSentError}: ${error instanceof Error ? error.message : ''}`
      );
    }
  };

  const handleDialogAction = (
    action: SuggestionDetailsActionType,
    data?: DialogActionData
  ) => {
    setSelectedSuggestion(data?.suggestion || null);
    if (action === 'view' && data?.suggestion) {
      setSelectedSuggestion(data.suggestion);
    } else if (action === 'delete' && data?.suggestionId) {
      setConfirmAction({
        type: 'delete',
        data: { suggestionId: data.suggestionId },
      });
      setShowConfirmDialog(true);
    } else if (action === 'edit' && data?.suggestion) {
      setShowEditForm(true);
    } else if (action === 'message' && data?.suggestion) {
      setShowMessageForm(true);
    } else if (
      action === 'changeStatus' &&
      data?.suggestionId &&
      data.newStatus
    ) {
      handleStatusChange(data.suggestionId, data.newStatus, data.notes);
    }
  };

  const handleSuggestionAction = (
    type: SuggestionCardActionType,
    suggestion: Suggestion,
    additionalData?: ActionAdditionalData
  ) => {
    handleDialogAction(type, {
      ...additionalData,
      suggestionId: suggestion.id,
      suggestion,
    });
  };

  const kanbanColumns = useMemo(() => {
    const columns: {
      title: string;
      suggestions: Suggestion[];
      color: string;
      icon: React.ElementType;
    }[] = [
      {
        title: dashboardDict.kanban.requiresAction,
        suggestions: [],
        color: 'from-red-500 to-orange-500',
        icon: Clock,
      },
      {
        title: dashboardDict.kanban.pendingResponse,
        suggestions: [],
        color: 'from-yellow-500 to-amber-500',
        icon: MessageCircle,
      },
      {
        title: dashboardDict.kanban.inProgress,
        suggestions: [],
        color: 'from-green-500 to-emerald-500',
        icon: Target,
      },
      {
        title: dashboardDict.kanban.history,
        suggestions: [],
        color: 'from-gray-500 to-slate-500',
        icon: Archive,
      },
    ];
    // ... (logic remains the same)
    return columns;
  }, [filteredSuggestions, dashboardDict.kanban]);

  const heroStats = useMemo(() => {
    // ... (logic remains the same)
    const total = suggestions.length;
    const pending = suggestions.filter(
      (s) =>
        s.status === 'PENDING_FIRST_PARTY' ||
        s.status === 'PENDING_SECOND_PARTY'
    ).length;
    const active = suggestions.filter(
      (s) => !['CLOSED', 'CANCELLED', 'EXPIRED'].includes(s.status)
    ).length;
    const success = suggestions.filter((s) =>
      ['MARRIED', 'ENGAGED', 'DATING'].includes(s.status)
    ).length;
    const thisMonth = suggestions.filter((s) => {
      const created = new Date(s.createdAt);
      const now = new Date();
      return (
        created.getMonth() === now.getMonth() &&
        created.getFullYear() === now.getFullYear()
      );
    }).length;
    const successRate = total > 0 ? Math.round((success / total) * 100) : 0;
    return { total, pending, active, success, thisMonth, successRate };
  }, [suggestions]);

  const renderMobileFilters = () => (
    <Sheet open={showMobileFilters} onOpenChange={setShowMobileFilters}>
      <SheetTrigger asChild>
        <Button
          variant="outline"
          size="sm"
          className="bg-white/80 backdrop-blur-sm shadow-lg"
        >
          <Filter className="w-4 h-4 mr-2" />
          {dashboardDict.mobile.filter}
        </Button>
      </SheetTrigger>
      <SheetContent className="w-full">
        <SheetHeader>
          <SheetTitle>{dashboardDict.mobile.filter}</SheetTitle>
        </SheetHeader>
        <div className="py-4">
          <SuggestionActionBar
            searchQuery={searchQuery}
            onSearchChange={setSearchQuery}
            filters={filters}
            onFiltersChange={setFilters}
            totalCount={suggestions.length}
            activeCount={activeCount}
            pendingCount={pendingCount}
            historyCount={historyCount}
            dict={dashboardDict.actionBar}
          />
        </div>
      </SheetContent>
    </Sheet>
  );

  const renderMobileView = () => (
    <div className="min-h-screen bg-gradient-to-br from-slate-50 via-cyan-50/20 to-emerald-50/20">
      <div className="p-4">
        <MatchmakerHeroSection
          dict={dashboardDict.heroSection}
          onNewSuggestion={() => setShowNewSuggestion(true)}
          onRefresh={handleRefresh}
          isRefreshing={isRefreshing}
          stats={heroStats}
        />
      </div>
      <div className="flex items-center justify-between p-4 bg-white/80 backdrop-blur-sm border-b sticky top-0 z-10 shadow-lg">
        <div className="relative flex-1">
          <Search className="absolute right-3 top-2.5 h-4 w-4 text-gray-400" />
          <Input
            placeholder={dashboardDict.mobile.searchPlaceholder}
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
            className="pl-10 text-right pr-10 bg-white/90 shadow-sm border-purple-200 focus:border-purple-400"
          />
        </div>
        <div className="mr-2">{renderMobileFilters()}</div>
        <ToggleGroup
          type="single"
          value={mobileView}
          onValueChange={(value: 'list' | 'kanban') =>
            value && setMobileView(value)
          }
          className="mr-2"
        >
          <ToggleGroupItem
            value="list"
            aria-label={dashboardDict.mobile.list}
            className="data-[state=on]:bg-purple-100 data-[state=on]:text-purple-700"
          >
            <List className="h-4 w-4" />
          </ToggleGroupItem>
          <ToggleGroupItem
            value="kanban"
            aria-label={dashboardDict.mobile.kanban}
            className="data-[state=on]:bg-purple-100 data-[state=on]:text-purple-700"
          >
            <LayoutGrid className="h-4 w-4" />
          </ToggleGroupItem>
        </ToggleGroup>
      </div>
      {isLoading ? (
        <div className="flex-1 flex items-center justify-center p-8">
          <div className="text-center">
            <Loader2 className="w-12 h-12 animate-spin text-purple-600 mx-auto mb-4" />
            <p className="text-lg font-semibold text-gray-700">
              {dashboardDict.mainContent.loadingText}
            </p>
          </div>
        </div>
      ) : mobileView === 'kanban' ? (
        <ScrollArea className="w-full whitespace-nowrap flex-1">
          <div className="flex gap-4 p-4 h-full">
            {kanbanColumns.map((col, idx) => {
              const IconComponent = col.icon;
              return (
                <div
                  key={idx}
                  className="w-72 flex-shrink-0 bg-white/90 backdrop-blur-sm rounded-2xl shadow-xl flex flex-col border border-gray-200"
                >
                  <div
                    className={cn(
                      'p-4 font-semibold text-sm border-b sticky top-0 bg-gradient-to-r text-white rounded-t-2xl z-10 shadow-lg',
                      col.color
                    )}
                  >
                    <div className="flex items-center justify-between">
                      <div className="flex items-center gap-2">
                        <IconComponent className="w-5 h-5" />
                        <span>{col.title}</span>
                      </div>
                      <Badge
                        variant="secondary"
                        className="bg-white/20 text-white border-white/30"
                      >
                        {col.suggestions.length}
                      </Badge>
                    </div>
                  </div>
                  <ScrollArea className="flex-1 p-3">
                    <div className="space-y-3">
                      {col.suggestions.length > 0 ? (
                        col.suggestions.map((s) => (
                          <SuggestionCard
                            key={s.id}
                            suggestion={s}
                            onAction={handleSuggestionAction}
                            variant="compact"
                            className="shadow-lg hover:shadow-xl transition-all duration-300"
                            dict={dashboardDict.suggestionCard}
                          />
                        ))
                      ) : (
                        <div className="p-6 text-center text-sm text-gray-500 bg-gray-50 rounded-xl">
                          <IconComponent className="w-8 h-8 mx-auto mb-2 text-gray-400" />
                          <p>{dashboardDict.kanban.noSuggestions}</p>
                        </div>
                      )}
                    </div>
                  </ScrollArea>
                </div>
              );
            })}
          </div>
        </ScrollArea>
      ) : (
        <ScrollArea className="flex-1">
          <div className="p-4 space-y-4">
            {filteredSuggestions.map((s) => (
              <SuggestionCard
                key={s.id}
                suggestion={s}
                onAction={handleSuggestionAction}
                variant="full"
                className="shadow-lg hover:shadow-xl transition-all duration-300"
                dict={dashboardDict.suggestionCard}
              />
            ))}
            {filteredSuggestions.length === 0 && (
              <div className="text-center p-12">
                <div className="w-24 h-24 rounded-full bg-gradient-to-br from-purple-100 to-pink-100 flex items-center justify-center mx-auto mb-6">
                  <Users className="w-12 h-12 text-purple-400" />
                </div>
                <h3 className="text-xl font-bold text-gray-800 mb-2">
                  {dashboardDict.mobile.noMatches.title}
                </h3>
                <p className="text-gray-600">
                  {dashboardDict.mobile.noMatches.description}
                </p>
              </div>
            )}
          </div>
        </ScrollArea>
      )}
      <div className="p-4 bg-white/80 backdrop-blur-sm border-t sticky bottom-0">
        <Button
          onClick={() => setShowNewSuggestion(true)}
          className="w-full bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-700 hover:to-pink-700 shadow-xl text-lg py-6 rounded-2xl"
        >
          <Plus className="w-6 h-6 mr-3" />
          {dashboardDict.mobile.newSuggestionButton}
          <Sparkles className="w-5 h-5 ml-2" />
        </Button>
      </div>
    </div>
  );

  const renderDesktopView = () => (
    <div className="min-h-screen bg-gradient-to-br from-slate-50 via-cyan-50/20 to-emerald-50/20">
      <div className="container mx-auto p-6 space-y-8">
        <MatchmakerHeroSection
          dict={dashboardDict.heroSection}
          onNewSuggestion={() => setShowNewSuggestion(true)}
          onRefresh={handleRefresh}
          isRefreshing={isRefreshing}
          stats={heroStats}
        />
        <Card className="shadow-2xl border-0 bg-white/95 backdrop-blur-sm overflow-hidden rounded-3xl">
          <div className="bg-gradient-to-r from-white via-purple-50/30 to-pink-50/30 border-b border-purple-100 p-6">
            <Tabs value={activeTab} onValueChange={setActiveTab}>
              <div className="flex items-center justify-between mb-6">
                <div className="flex items-center gap-3">
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={() => setShowMonthlyTrendDialog(true)}
                    className="border-purple-200 hover:bg-purple-50 text-purple-600"
                  >
                    <BarChart className="w-4 h-4 mr-2" />
                    {dashboardDict.mainContent.monthlyTrendButton}
                  </Button>
                </div>
                <TabsList className="bg-purple-50/50 rounded-2xl p-1 h-14">
                  <TabsTrigger
                    value="pending"
                    className="flex items-center gap-3 px-6 py-3 rounded-xl transition-all data-[state=active]:bg-white data-[state=active]:shadow-lg font-semibold text-base"
                  >
                    <Clock className="w-5 h-5 text-orange-500" />
                    <span>{dashboardDict.mainContent.tabs.pending}</span>
                    {pendingCount > 0 && (
                      <Badge className="bg-orange-500 text-white border-0 px-2 py-1 text-xs font-bold rounded-full min-w-[24px] h-6">
                        {pendingCount}
                      </Badge>
                    )}
                  </TabsTrigger>
                  <TabsTrigger
                    value="active"
                    className="flex items-center gap-3 px-6 py-3 rounded-xl transition-all data-[state=active]:bg-white data-[state=active]:shadow-lg font-semibold text-base"
                  >
                    <Target className="w-5 h-5 text-green-500" />
                    <span>{dashboardDict.mainContent.tabs.active}</span>
                    {activeCount > 0 && (
                      <Badge className="bg-green-500 text-white border-0 px-2 py-1 text-xs font-bold rounded-full min-w-[24px] h-6">
                        {activeCount}
                      </Badge>
                    )}
                  </TabsTrigger>
                  <TabsTrigger
                    value="history"
                    className="flex items-center gap-3 px-6 py-3 rounded-xl transition-all data-[state=active]:bg-white data-[state=active]:shadow-lg font-semibold text-base"
                  >
                    <Archive className="w-5 h-5 text-gray-500" />
                    <span>{dashboardDict.mainContent.tabs.history}</span>
                    {historyCount > 0 && (
                      <Badge className="bg-gray-500 text-white border-0 px-2 py-1 text-xs font-bold rounded-full min-w-[24px] h-6">
                        {historyCount}
                      </Badge>
                    )}
                  </TabsTrigger>
                </TabsList>
              </div>
              <SuggestionActionBar
                searchQuery={searchQuery}
                onSearchChange={setSearchQuery}
                filters={filters}
                onFiltersChange={setFilters}
                totalCount={suggestions.length}
                activeCount={activeCount}
                pendingCount={pendingCount}
                historyCount={historyCount}
                dict={dashboardDict.actionBar}
              />
              {isLoading ? (
                <div className="flex items-center justify-center h-64">
                  <div className="text-center">
                    <Loader2 className="w-12 h-12 animate-spin text-purple-600 mx-auto mb-4" />
                    <p className="text-lg font-semibold text-gray-700">
                      {dashboardDict.mainContent.loadingText}
                    </p>
                  </div>
                </div>
              ) : (
                <>
                  <TabsContent value="pending" className="mt-6">
                    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                      {pendingSuggestions.map((suggestion) => (
                        <div key={suggestion.id} className="animate-fade-in-up">
                          <SuggestionCard
                            suggestion={suggestion}
                            onAction={handleSuggestionAction}
                            className="shadow-lg hover:shadow-xl transition-all duration-300"
                            dict={dashboardDict.suggestionCard}
                          />
                        </div>
                      ))}
                    </div>
                    {pendingSuggestions.length === 0 && (
                      <div className="text-center p-12">
                        <div className="w-24 h-24 rounded-full bg-gradient-to-br from-orange-100 to-amber-100 flex items-center justify-center mx-auto mb-6">
                          <Clock className="w-12 h-12 text-orange-400" />
                        </div>
                        <h3 className="text-xl font-bold text-gray-800 mb-2">
                          {dashboardDict.mainContent.emptyStates.pending.title}
                        </h3>
                        <p className="text-gray-600">
                          {
                            dashboardDict.mainContent.emptyStates.pending
                              .description
                          }
                        </p>
                      </div>
                    )}
                  </TabsContent>
                  <TabsContent value="active" className="mt-6">
                    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                      {activeSuggestions.map((suggestion) => (
                        <div key={suggestion.id} className="animate-fade-in-up">
                          <SuggestionCard
                            suggestion={suggestion}
                            onAction={handleSuggestionAction}
                            className="shadow-lg hover:shadow-xl transition-all duration-300"
                            dict={dashboardDict.suggestionCard}
                          />
                        </div>
                      ))}
                    </div>
                    {activeSuggestions.length === 0 && (
                      <div className="text-center p-12">
                        <div className="w-24 h-24 rounded-full bg-gradient-to-br from-green-100 to-emerald-100 flex items-center justify-center mx-auto mb-6">
                          <Target className="w-12 h-12 text-green-400" />
                        </div>
                        <h3 className="text-xl font-bold text-gray-800 mb-2">
                          {dashboardDict.mainContent.emptyStates.active.title}
                        </h3>
                        <p className="text-gray-600">
                          {
                            dashboardDict.mainContent.emptyStates.active
                              .description
                          }
                        </p>
                      </div>
                    )}
                  </TabsContent>
                  <TabsContent value="history" className="mt-6">
                    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                      {historySuggestions.map((suggestion) => (
                        <div key={suggestion.id} className="animate-fade-in-up">
                          <SuggestionCard
                            suggestion={suggestion}
                            onAction={handleSuggestionAction}
                            className="shadow-lg hover:shadow-xl transition-all duration-300"
                            dict={dashboardDict.suggestionCard}
                          />
                        </div>
                      ))}
                    </div>
                    {historySuggestions.length === 0 && (
                      <div className="text-center p-12">
                        <div className="w-24 h-24 rounded-full bg-gradient-to-br from-gray-100 to-slate-100 flex items-center justify-center mx-auto mb-6">
                          <Archive className="w-12 h-12 text-gray-400" />
                        </div>
                        <h3 className="text-xl font-bold text-gray-800 mb-2">
                          {dashboardDict.mainContent.emptyStates.history.title}
                        </h3>
                        <p className="text-gray-600">
                          {
                            dashboardDict.mainContent.emptyStates.history
                              .description
                          }
                        </p>
                      </div>
                    )}
                  </TabsContent>
                </>
              )}
            </Tabs>
          </div>
        </Card>
      </div>
    </div>
  );

  return (
    <div className={cn('min-h-screen', !isMobile && 'p-0', isMobile && 'p-0')}>
      {isMobile ? renderMobileView() : renderDesktopView()}
      <NewSuggestionForm
        isOpen={showNewSuggestion}
        onClose={() => setShowNewSuggestion(false)}
        candidates={allCandidates}
        onSubmit={handleNewSuggestion}
        dict={matchmakerDict.candidatesManager}
      />
      <SuggestionDetailsDialog
        suggestion={selectedSuggestion}
        isOpen={!!selectedSuggestion}
        onClose={() => setSelectedSuggestion(null)}
        onAction={handleDialogAction}
        userId={session?.user?.id || ''}
        matchmakerDict={matchmakerDict} // ✅ העברת המילון המלא של השדכן
        suggestionsDict={suggestionsDict}
        profileDict={profileDict} // ✅ הוספת השורה הזו
        // ✅ העברת המילון של ההצעות
      />

      <Dialog
        open={showMonthlyTrendDialog}
        onOpenChange={setShowMonthlyTrendDialog}
      >
        <DialogContent className="max-w-4xl">
          <DialogHeader>
            <DialogTitle>
              {dashboardDict.dialogs.monthlyTrend.title}
            </DialogTitle>
          </DialogHeader>
          <MonthlyTrendModal
            dict={dashboardDict.monthlyTrendModal}
            suggestions={suggestions}
          />
        </DialogContent>
      </Dialog>
      <EditSuggestionForm
        isOpen={showEditForm}
        onClose={() => setShowEditForm(false)}
        suggestion={selectedSuggestion}
        onSave={handleUpdateSuggestion}
        dict={dashboardDict.editSuggestionForm}
      />
      <MessageForm
        isOpen={showMessageForm}
        onClose={() => setShowMessageForm(false)}
        suggestion={selectedSuggestion}
        onSend={handleSendMessage}
      />
      {confirmAction && (
        <AlertDialog
          open={showConfirmDialog}
          onOpenChange={setShowConfirmDialog}
        >
          <AlertDialogContent className="border-0 shadow-2xl rounded-2xl">
            <AlertDialogHeader>
              <AlertDialogTitle className="text-xl font-bold text-center">
                {dashboardDict.dialogs.deleteConfirm.title}
              </AlertDialogTitle>
              <AlertDialogDescription className="text-center text-gray-600 leading-relaxed">
                {dashboardDict.dialogs.deleteConfirm.description}
              </AlertDialogDescription>
            </AlertDialogHeader>
            <AlertDialogFooter className="gap-3">
              <AlertDialogCancel className="rounded-xl">
                {dashboardDict.dialogs.deleteConfirm.cancel}
              </AlertDialogCancel>
              <AlertDialogAction
                onClick={handleConfirmAction}
                className="bg-gradient-to-r from-red-500 to-red-600 hover:from-red-600 hover:to-red-700 rounded-xl"
              >
                {dashboardDict.dialogs.deleteConfirm.confirm}
              </AlertDialogAction>
            </AlertDialogFooter>
          </AlertDialogContent>
        </AlertDialog>
      )}
    </div>
  );
}
--- End of Content for MatchmakerDashboard.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\suggestions\container\MonthlyTrendModal.tsx
--------------------------------------------------------------------------------
Content:
import React, { useMemo } from 'react';
import { Card, CardContent } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import {
  BarChart,
  Bar,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip,
  ResponsiveContainer,
  Legend,
  LineChart,
  Line,
  Area,
  AreaChart,
  PieChart,
  Pie,
  Cell,
  RadialBarChart,
  RadialBar,
} from 'recharts';
import {
  TrendingUp,
  TrendingDown,
  Calendar,
  BarChart3,
  LineChart as LineChartIcon,
  PieChart as PieChartIcon,
  Activity,
  Users,
  CheckCircle,
  Clock,
  Heart,
  Award,
  Target,
  ArrowUp,
  ArrowDown,
  Sparkles,
  Star,
  Crown,
  Zap,
  Download,
  RefreshCw,
  Eye,
  XCircle,
} from 'lucide-react';
import type { Suggestion } from '@/types/suggestions';
import { cn } from '@/lib/utils';
import type { MatchmakerPageDictionary } from '@/types/dictionary';

interface MonthlyTrendModalProps {
  dict: MatchmakerPageDictionary['suggestionsDashboard']['monthlyTrendModal'];
  suggestions: Suggestion[];
}

interface MonthlyData {
  month: string;
  year: number;
  count: number;
  active: number;
  pending: number;
  success: number;
  declined: number;
}

interface TrendCardProps {
  title: string;
  value: number;
  trend: number;
  icon: React.ElementType;
  gradient: string;
  description: string;
}

const TrendCard: React.FC<TrendCardProps> = ({
  title,
  value,
  trend,
  icon: Icon,
  gradient,
  description,
}) => (
  <Card className="border-0 shadow-xl hover:shadow-2xl transition-all duration-300 group overflow-hidden rounded-2xl">
    <div
      className={cn('absolute inset-0 opacity-5 bg-gradient-to-br', gradient)}
    />
    <div className="absolute top-0 right-0 w-20 h-20 bg-gradient-to-br from-white/20 to-transparent rounded-full blur-xl" />

    <CardContent className="relative z-10 p-6">
      <div className="flex items-center justify-between mb-4">
        <div
          className={cn(
            'p-3 rounded-full shadow-lg group-hover:scale-110 transition-transform bg-gradient-to-r text-white',
            gradient
          )}
        >
          <Icon className="w-6 h-6" />
        </div>
        <div
          className={cn(
            'flex items-center gap-1 px-3 py-1 rounded-full text-sm font-bold',
            trend >= 0
              ? 'bg-green-100 text-green-700'
              : 'bg-red-100 text-red-700'
          )}
        >
          {trend >= 0 ? (
            <ArrowUp className="w-3 h-3" />
          ) : (
            <ArrowDown className="w-3 h-3" />
          )}
          {Math.abs(trend)}%
        </div>
      </div>

      <div className="space-y-2">
        <h3 className="text-3xl font-bold text-gray-800">{value}</h3>
        <p className="text-sm font-medium text-gray-600">{title}</p>
        <p className="text-xs text-gray-500 leading-relaxed">{description}</p>
      </div>
    </CardContent>
  </Card>
);

const MonthlyTrendModal: React.FC<MonthlyTrendModalProps> = ({
  dict,
  suggestions,
}) => {
  const monthlyData = useMemo(() => {
    const data = suggestions.reduce(
      (acc, s) => {
        const createdDate = new Date(s.createdAt);
        const month = createdDate.getMonth();
        const year = createdDate.getFullYear();
        const key = `${year}-${month + 1}`;

        if (!acc[key]) {
          acc[key] = {
            month: new Date(year, month).toLocaleString('he', {
              month: 'short',
            }),
            year: year,
            count: 0,
            active: 0,
            pending: 0,
            success: 0,
            declined: 0,
          };
        }

        acc[key].count += 1;
        if (s.category === 'ACTIVE') acc[key].active += 1;
        if (s.category === 'PENDING') acc[key].pending += 1;
        if (['MARRIED', 'ENGAGED'].includes(s.status)) acc[key].success += 1;
        if (
          s.status === 'FIRST_PARTY_DECLINED' ||
          s.status === 'SECOND_PARTY_DECLINED'
        ) {
          acc[key].declined += 1;
        }

        return acc;
      },
      {} as Record<string, MonthlyData>
    );

    return Object.values(data).sort((a, b) => {
      if (a.year !== b.year) return a.year - b.year;
      const monthA = new Date(
        a.year,
        a.month === 'ינו' ? 0 : new Date(`1 ${a.month} 2000`).getMonth()
      ).getMonth();
      const monthB = new Date(
        b.year,
        b.month === 'ינו' ? 0 : new Date(`1 ${b.month} 2000`).getMonth()
      ).getMonth();
      return monthA - monthB;
    });
  }, [suggestions]);

  const trends = useMemo(() => {
    if (monthlyData.length < 2)
      return { active: 0, pending: 0, success: 0, total: 0 };
    const current = monthlyData[monthlyData.length - 1];
    const previous = monthlyData[monthlyData.length - 2];
    const calculateTrend = (current: number, previous: number) => {
      if (previous === 0) return current > 0 ? 100 : 0;
      return Math.round(((current - previous) / previous) * 100);
    };
    return {
      active: calculateTrend(current.active, previous.active),
      pending: calculateTrend(current.pending, previous.pending),
      success: calculateTrend(current.success, previous.success),
      total: calculateTrend(current.count, previous.count),
    };
  }, [monthlyData]);

  const chartData = monthlyData.map((month) => ({
    name: `${month.month} ${month.year}`,
    [dict.charts.legend.active]: month.active,
    [dict.charts.legend.pending]: month.pending,
    [dict.charts.legend.success]: month.success,
    [dict.charts.legend.declined]: month.declined,
  }));

  const pieData =
    monthlyData.length > 0
      ? [
          {
            name: dict.charts.legend.active,
            value: monthlyData[monthlyData.length - 1].active,
            color: '#3B82F6',
          },
          {
            name: dict.charts.legend.pending,
            value: monthlyData[monthlyData.length - 1].pending,
            color: '#F59E0B',
          },
          {
            name: dict.charts.legend.success,
            value: monthlyData[monthlyData.length - 1].success,
            color: '#10B981',
          },
          {
            name: dict.charts.legend.declined,
            value: monthlyData[monthlyData.length - 1].declined,
            color: '#EF4444',
          },
        ]
      : [];

  const COLORS = ['#3B82F6', '#F59E0B', '#10B981', '#EF4444'];

  if (monthlyData.length === 0) {
    return (
      <div className="p-12 text-center">
        <div className="w-24 h-24 rounded-full bg-gradient-to-br from-purple-100 to-pink-100 flex items-center justify-center mx-auto mb-6">
          <BarChart3 className="w-12 h-12 text-purple-400" />
        </div>
        <h3 className="text-xl font-bold text-gray-800 mb-2">
          {dict.emptyState.title}
        </h3>
        <p className="text-gray-600">{dict.emptyState.description}</p>
      </div>
    );
  }

  const currentMonth = monthlyData[monthlyData.length - 1];
  const trendLabel =
    trends.total >= 0
      ? dict.trendCards.trendLabel.increase
      : dict.trendCards.trendLabel.decrease;

  return (
    <div className="space-y-8">
      <div className="relative">
        <div className="absolute inset-0 bg-gradient-to-r from-purple-50 via-cyan-50/30 to-emerald-50/20 rounded-3xl"></div>
        <div className="relative z-10 p-8 text-center">
          <div className="flex items-center justify-center gap-3 mb-4">
            <div className="p-3 rounded-full bg-gradient-to-r from-purple-500 to-pink-500 text-white shadow-xl">
              <TrendingUp className="w-8 h-8" />
            </div>
          </div>
          <h2 className="text-3xl font-bold bg-gradient-to-r from-purple-600 via-pink-600 to-blue-600 bg-clip-text text-transparent mb-2">
            {dict.header.title}
          </h2>
          <p className="text-gray-600 text-lg">{dict.header.subtitle}</p>
        </div>
      </div>
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
        <TrendCard
          title={dict.trendCards.total.title}
          value={currentMonth.count}
          trend={trends.total}
          icon={Users}
          gradient="from-blue-500 to-cyan-500"
          description={dict.trendCards.total.description.replace(
            '{{trend}}',
            trendLabel
          )}
        />
        <TrendCard
          title={dict.trendCards.active.title}
          value={currentMonth.active}
          trend={trends.active}
          icon={Target}
          gradient="from-green-500 to-emerald-500"
          description={dict.trendCards.active.description}
        />
        <TrendCard
          title={dict.trendCards.pending.title}
          value={currentMonth.pending}
          trend={trends.pending}
          icon={Clock}
          gradient="from-yellow-500 to-amber-500"
          description={dict.trendCards.pending.description}
        />
        <TrendCard
          title={dict.trendCards.success.title}
          value={currentMonth.success}
          trend={trends.success}
          icon={Crown}
          gradient="from-purple-500 to-pink-500"
          description={dict.trendCards.success.description}
        />
      </div>
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
        <Card className="border-0 shadow-xl hover:shadow-2xl transition-all duration-300 bg-white overflow-hidden rounded-2xl">
          <CardContent className="p-6">
            <div className="flex items-center justify-between mb-6">
              <div className="flex items-center gap-3">
                <div className="p-3 rounded-full bg-gradient-to-r from-blue-500 to-cyan-500 text-white shadow-lg">
                  <BarChart3 className="w-6 h-6" />
                </div>
                <h3 className="text-xl font-bold text-gray-800">
                  {dict.charts.areaChart.title}
                </h3>
              </div>
              <Badge className="bg-gradient-to-r from-blue-500 to-cyan-500 text-white px-3 py-1 rounded-full">
                {dict.charts.areaChart.badge.replace(
                  '{{count}}',
                  monthlyData.length.toString()
                )}
              </Badge>
            </div>
            <div className="h-80">
              <ResponsiveContainer width="100%" height="100%">
                <AreaChart data={chartData}>
                  <defs>
                    <linearGradient
                      id="colorActive"
                      x1="0"
                      y1="0"
                      x2="0"
                      y2="1"
                    >
                      <stop offset="5%" stopColor="#3B82F6" stopOpacity={0.3} />
                      <stop offset="95%" stopColor="#3B82F6" stopOpacity={0} />
                    </linearGradient>
                    <linearGradient
                      id="colorPending"
                      x1="0"
                      y1="0"
                      x2="0"
                      y2="1"
                    >
                      <stop offset="5%" stopColor="#F59E0B" stopOpacity={0.3} />
                      <stop offset="95%" stopColor="#F59E0B" stopOpacity={0} />
                    </linearGradient>
                    <linearGradient
                      id="colorSuccess"
                      x1="0"
                      y1="0"
                      x2="0"
                      y2="1"
                    >
                      <stop offset="5%" stopColor="#10B981" stopOpacity={0.3} />
                      <stop offset="95%" stopColor="#10B981" stopOpacity={0} />
                    </linearGradient>
                  </defs>
                  <CartesianGrid strokeDasharray="3 3" stroke="#e5e7eb" />
                  <XAxis dataKey="name" stroke="#6b7280" fontSize={12} />
                  <YAxis stroke="#6b7280" fontSize={12} />
                  <Tooltip
                    contentStyle={{
                      backgroundColor: 'white',
                      border: 'none',
                      borderRadius: '12px',
                      boxShadow: '0 20px 25px -5px rgba(0, 0, 0, 0.1)',
                    }}
                    formatter={(value, name) => [value, name]}
                    labelFormatter={(label) =>
                      dict.charts.tooltip.monthLabel.replace('{{label}}', label)
                    }
                  />
                  <Area
                    type="monotone"
                    dataKey={dict.charts.legend.active}
                    stroke="#3B82F6"
                    fillOpacity={1}
                    fill="url(#colorActive)"
                    strokeWidth={3}
                  />
                  <Area
                    type="monotone"
                    dataKey={dict.charts.legend.pending}
                    stroke="#F59E0B"
                    fillOpacity={1}
                    fill="url(#colorPending)"
                    strokeWidth={3}
                  />
                  <Area
                    type="monotone"
                    dataKey={dict.charts.legend.success}
                    stroke="#10B981"
                    fillOpacity={1}
                    fill="url(#colorSuccess)"
                    strokeWidth={3}
                  />
                </AreaChart>
              </ResponsiveContainer>
            </div>
          </CardContent>
        </Card>
        <Card className="border-0 shadow-xl hover:shadow-2xl transition-all duration-300 bg-white overflow-hidden rounded-2xl">
          <CardContent className="p-6">
            <div className="flex items-center justify-between mb-6">
              <div className="flex items-center gap-3">
                <div className="p-3 rounded-full bg-gradient-to-r from-purple-500 to-pink-500 text-white shadow-lg">
                  <PieChartIcon className="w-6 h-6" />
                </div>
                <h3 className="text-xl font-bold text-gray-800">
                  {dict.charts.pieChart.title}
                </h3>
              </div>
              <Badge className="bg-gradient-to-r from-purple-500 to-pink-500 text-white px-3 py-1 rounded-full">
                {dict.charts.pieChart.badge
                  .replace('{{month}}', currentMonth.month)
                  .replace('{{year}}', currentMonth.year.toString())}
              </Badge>
            </div>
            <div className="h-80">
              <ResponsiveContainer width="100%" height="100%">
                <PieChart>
                  <Pie
                    data={pieData}
                    cx="50%"
                    cy="50%"
                    labelLine={false}
                    label={({ name, percent }) =>
                      `${name} ${(percent * 100).toFixed(0)}%`
                    }
                    outerRadius={100}
                    fill="#8884d8"
                    dataKey="value"
                  >
                    {pieData.map((entry, index) => (
                      <Cell
                        key={`cell-${index}`}
                        fill={COLORS[index % COLORS.length]}
                      />
                    ))}
                  </Pie>
                  <Tooltip
                    contentStyle={{
                      backgroundColor: 'white',
                      border: 'none',
                      borderRadius: '12px',
                      boxShadow: '0 20px 25px -5px rgba(0, 0, 0, 0.1)',
                    }}
                  />
                </PieChart>
              </ResponsiveContainer>
            </div>
          </CardContent>
        </Card>
      </div>
      <Card className="border-0 shadow-xl bg-white overflow-hidden rounded-2xl">
        <CardContent className="p-6">
          <div className="flex items-center justify-between mb-6">
            <div className="flex items-center gap-3">
              <div className="p-3 rounded-full bg-gradient-to-r from-emerald-500 to-green-500 text-white shadow-lg">
                <Activity className="w-6 h-6" />
              </div>
              <h3 className="text-xl font-bold text-gray-800">
                {dict.table.title}
              </h3>
            </div>
            <div className="flex gap-2">
              <Button
                variant="outline"
                size="sm"
                className="rounded-xl border-emerald-200 text-emerald-600 hover:bg-emerald-50"
              >
                <Download className="w-4 h-4 ml-2" />
                {dict.table.exportButton}
              </Button>
              <Button
                variant="outline"
                size="sm"
                className="rounded-xl border-blue-200 text-blue-600 hover:bg-blue-50"
              >
                <Eye className="w-4 h-4 ml-2" />
                {dict.table.viewAllButton}
              </Button>
            </div>
          </div>
          <div className="overflow-x-auto">
            <table className="w-full">
              <thead>
                <tr className="bg-gradient-to-r from-gray-50 to-slate-50">
                  <th className="p-4 text-right font-bold text-gray-800 border-b border-gray-200 rounded-tr-xl">
                    {dict.table.headers.month}
                  </th>
                  <th className="p-4 text-center font-bold text-gray-800 border-b border-gray-200">
                    {dict.table.headers.total}
                  </th>
                  <th className="p-4 text-center font-bold text-gray-800 border-b border-gray-200">
                    {dict.table.headers.active}
                  </th>
                  <th className="p-4 text-center font-bold text-gray-800 border-b border-gray-200">
                    {dict.table.headers.pending}
                  </th>
                  <th className="p-4 text-center font-bold text-gray-800 border-b border-gray-200">
                    {dict.table.headers.success}
                  </th>
                  <th className="p-4 text-center font-bold text-gray-800 border-b border-gray-200 rounded-tl-xl">
                    {dict.table.headers.declined}
                  </th>
                </tr>
              </thead>
              <tbody>
                {monthlyData
                  .slice()
                  .reverse()
                  .map((month, idx) => (
                    <tr
                      key={idx}
                      className={cn(
                        'hover:bg-gradient-to-r hover:from-blue-50 hover:to-cyan-50 transition-all duration-200',
                        idx % 2 === 0 ? 'bg-white' : 'bg-gray-50/50',
                        idx === 0 &&
                          'bg-gradient-to-r from-blue-50 to-cyan-50 font-semibold'
                      )}
                    >
                      <td className="p-4 border-b border-gray-100">
                        <div className="flex items-center gap-2">
                          <Calendar className="w-4 h-4 text-blue-500" />
                          <span className="font-bold text-gray-800">
                            {month.month} {month.year}
                          </span>
                          {idx === 0 && (
                            <Badge className="bg-gradient-to-r from-blue-500 to-cyan-500 text-white text-xs px-2 py-1">
                              {dict.table.currentMonthBadge}
                            </Badge>
                          )}
                        </div>
                      </td>
                      <td className="p-4 text-center border-b border-gray-100">
                        <div className="flex items-center justify-center gap-2">
                          <Users className="w-4 h-4 text-blue-500" />
                          <span className="font-bold text-blue-600">
                            {month.count}
                          </span>
                        </div>
                      </td>
                      <td className="p-4 text-center border-b border-gray-100">
                        <div className="flex items-center justify-center gap-2">
                          <Target className="w-4 h-4 text-green-500" />
                          <span className="font-bold text-green-600">
                            {month.active}
                          </span>
                        </div>
                      </td>
                      <td className="p-4 text-center border-b border-gray-100">
                        <div className="flex items-center justify-center gap-2">
                          <Clock className="w-4 h-4 text-yellow-500" />
                          <span className="font-bold text-yellow-600">
                            {month.pending}
                          </span>
                        </div>
                      </td>
                      <td className="p-4 text-center border-b border-gray-100">
                        <div className="flex items-center justify-center gap-2">
                          <Crown className="w-4 h-4 text-purple-500" />
                          <span className="font-bold text-purple-600">
                            {month.success}
                          </span>
                        </div>
                      </td>
                      <td className="p-4 text-center border-b border-gray-100">
                        <div className="flex items-center justify-center gap-2">
                          <XCircle className="w-4 h-4 text-red-500" />
                          <span className="font-bold text-red-600">
                            {month.declined}
                          </span>
                        </div>
                      </td>
                    </tr>
                  ))}
              </tbody>
            </table>
          </div>
        </CardContent>
      </Card>
      <Card className="border-0 shadow-xl bg-gradient-to-r from-indigo-50 to-purple-50 overflow-hidden rounded-2xl">
        <CardContent className="p-8">
          <div className="flex items-center gap-4 mb-6">
            <div className="p-4 rounded-full bg-gradient-to-r from-indigo-500 to-purple-500 text-white shadow-xl">
              <Sparkles className="w-8 h-8" />
            </div>
            <div>
              <h3 className="text-2xl font-bold text-indigo-800">
                {dict.insights.title}
              </h3>
              <p className="text-indigo-600">{dict.insights.subtitle}</p>
            </div>
          </div>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            <div className="p-6 bg-white/70 rounded-xl shadow-lg">
              <div className="flex items-center gap-3 mb-3">
                <TrendingUp className="w-6 h-6 text-green-500" />
                <h4 className="font-bold text-gray-800">
                  {dict.insights.growth.title}
                </h4>
              </div>
              <p className="text-sm text-gray-700 leading-relaxed">
                {trends.total >= 0
                  ? dict.insights.growth.increase.replace(
                      '{{trend}}',
                      trends.total.toString()
                    )
                  : dict.insights.growth.decrease.replace(
                      '{{trend}}',
                      Math.abs(trends.total).toString()
                    )}
              </p>
            </div>
            <div className="p-6 bg-white/70 rounded-xl shadow-lg">
              <div className="flex items-center gap-3 mb-3">
                <Award className="w-6 h-6 text-purple-500" />
                <h4 className="font-bold text-gray-800">
                  {dict.insights.successRate.title}
                </h4>
              </div>
              <p className="text-sm text-gray-700 leading-relaxed">
                {currentMonth.count > 0
                  ? dict.insights.successRate.rate.replace(
                      '{{rate}}',
                      Math.round(
                        (currentMonth.success / currentMonth.count) * 100
                      ).toString()
                    )
                  : dict.insights.successRate.noData}
              </p>
            </div>
            <div className="p-6 bg-white/70 rounded-xl shadow-lg">
              <div className="flex items-center gap-3 mb-3">
                <Activity className="w-6 h-6 text-blue-500" />
                <h4 className="font-bold text-gray-800">
                  {dict.insights.currentActivity.title}
                </h4>
              </div>
              <p className="text-sm text-gray-700 leading-relaxed">
                {dict.insights.currentActivity.body.replace(
                  '{{count}}',
                  (currentMonth.active + currentMonth.pending).toString()
                )}
              </p>
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  );
};

export default MonthlyTrendModal;
--- End of Content for MonthlyTrendModal.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\suggestions\container\SuggestionActionBar.tsx
--------------------------------------------------------------------------------
Content:
import React, { useState } from 'react';
import { Input } from '@/components/ui/input';
import { Button } from '@/components/ui/button';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select';
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from '@/components/ui/popover';
import { Badge } from '@/components/ui/badge';
import { DatePicker } from '@/components/ui/date-picker';
import {
  Search,
  Filter,
  X,
  Calendar,
  User,
  Clock,
  ChevronDown,
  AlertCircle,
  CheckCircle,
  XCircle,
  RefreshCw,
  SlidersHorizontal,
  Sparkles,
  Target,
  Zap,
  Settings,
  TrendingUp,
  Star,
  Flame,
  Shield,
} from 'lucide-react';
import { Checkbox } from '@/components/ui/checkbox';
import { Priority, MatchSuggestionStatus } from '@prisma/client';
import type { SuggestionFilters, SortByOption } from '@/types/suggestions';
import { Card, CardContent } from '@/components/ui/card';
import { cn } from '@/lib/utils';
import type { MatchmakerPageDictionary } from '@/types/dictionary';

interface SuggestionActionBarProps {
  dict: MatchmakerPageDictionary['suggestionsDashboard']['actionBar'];
  searchQuery: string;
  onSearchChange: (value: string) => void;
  filters: SuggestionFilters;
  onFiltersChange: (filters: SuggestionFilters) => void;
  totalCount: number;
  activeCount: number;
  pendingCount: number;
  historyCount: number;
}

const SuggestionActionBar: React.FC<SuggestionActionBarProps> = ({
  dict,
  searchQuery,
  onSearchChange,
  filters,
  onFiltersChange,
}) => {
  const [showAdvancedFilters, setShowAdvancedFilters] = useState(false);
  const activeFilters = Object.keys(filters).length;
  const [dateRange, setDateRange] = useState<{
    from: Date | undefined;
    to: Date | undefined;
  }>({
    from: filters.dateRange?.start,
    to: filters.dateRange?.end,
  });

  const handleRemoveFilter = (key: keyof SuggestionFilters) => {
    const newFilters = { ...filters };
    delete newFilters[key];
    onFiltersChange(newFilters);
  };

  const handleDateRangeChange = (range: {
    from: Date | undefined;
    to: Date | undefined;
  }) => {
    setDateRange(range);
    if (range.from) {
      onFiltersChange({
        ...filters,
        dateRange: { start: range.from, end: range.to || new Date() },
      });
    } else {
      const newFilters = { ...filters };
      delete newFilters.dateRange;
      onFiltersChange(newFilters);
    }
  };

  // ✅ תיקון: יצירת אובייקט מיפוי לאייקונים במקום פונקציה חסרה
  const priorityInfoMap: Record<
    string,
    { icon: React.ElementType; color: string }
  > = {
    URGENT: { icon: Flame, color: 'text-red-600' },
    HIGH: { icon: Star, color: 'text-orange-600' },
    MEDIUM: { icon: Target, color: 'text-blue-600' },
    LOW: { icon: Shield, color: 'text-gray-600' },
  };

  const statusOptions: {
    value: MatchSuggestionStatus;
    icon: React.ElementType;
    color: string;
  }[] = [
    { value: 'PENDING_FIRST_PARTY', icon: Clock, color: 'text-yellow-600' },
    { value: 'PENDING_SECOND_PARTY', icon: Clock, color: 'text-blue-600' },
    {
      value: 'FIRST_PARTY_APPROVED',
      icon: CheckCircle,
      color: 'text-green-600',
    },
    {
      value: 'SECOND_PARTY_APPROVED',
      icon: CheckCircle,
      color: 'text-green-600',
    },
    { value: 'DATING', icon: AlertCircle, color: 'text-pink-600' },
  ];

  return (
    <div className="space-y-6">
      <Card className="border-0 shadow-xl bg-gradient-to-r from-white via-purple-50/30 to-pink-50/30 overflow-hidden rounded-2xl">
        <CardContent className="p-6">
          <div className="flex flex-col lg:flex-row gap-4 items-center">
            <div className="relative flex-1 w-full lg:w-auto">
              <div className="absolute inset-0 bg-gradient-to-r from-purple-500/5 to-pink-500/5 rounded-xl"></div>
              <Search className="absolute right-4 top-1/2 transform -translate-y-1/2 h-5 w-5 text-purple-400" />
              <Input
                value={searchQuery}
                onChange={(e) => onSearchChange(e.target.value)}
                placeholder={dict.searchPlaceholder}
                className="relative z-10 h-14 pr-14 text-right border-2 border-purple-200 hover:border-purple-300 focus:border-purple-500 rounded-xl bg-white/80 backdrop-blur-sm shadow-lg transition-all duration-300 text-lg"
              />
              <div className="absolute left-3 top-1/2 transform -translate-y-1/2">
                <Sparkles className="h-4 w-4 text-purple-400" />
              </div>
            </div>
            <div className="w-full lg:w-auto">
              <Select
                value={filters.priority?.[0] || 'all'}
                onValueChange={(value) =>
                  onFiltersChange({
                    ...filters,
                    priority: value === 'all' ? undefined : [value as Priority],
                  })
                }
              >
                <SelectTrigger className="h-14 w-full lg:w-48 border-2 border-purple-200 hover:border-purple-300 focus:border-purple-500 rounded-xl bg-white/80 backdrop-blur-sm shadow-lg transition-all">
                  <div className="flex items-center gap-2">
                    <Star className="w-5 h-5 text-purple-500" />
                    <SelectValue
                      placeholder={dict.priorityFilter.placeholder}
                    />
                  </div>
                </SelectTrigger>
                <SelectContent className="border-0 shadow-2xl rounded-xl">
                  <SelectItem value="all">
                    <div className="flex items-center gap-3">
                      <div className="w-3 h-3 rounded-full bg-gradient-to-r from-purple-500 to-pink-500"></div>
                      {dict.priorityFilter.all}
                    </div>
                  </SelectItem>
                  {/* ✅ תיקון: הלולאה תוקנה להשתמש במפת האייקונים */}
                  {Object.entries(dict.priorityFilter.options).map(
                    ([key, label]: [string, string]) => {
                      const info =
                        priorityInfoMap[key] || priorityInfoMap.MEDIUM;
                      const Icon = info.icon;
                      return (
                        <SelectItem key={key} value={key}>
                          <div className="flex items-center gap-3">
                            <Icon className={cn('w-4 h-4', info.color)} />
                            {label}
                          </div>
                        </SelectItem>
                      );
                    }
                  )}
                </SelectContent>
              </Select>
            </div>
            <Popover>
              <PopoverTrigger asChild>
                <Button
                  variant="outline"
                  className="h-14 px-6 border-2 border-purple-200 hover:border-purple-300 hover:bg-purple-50 rounded-xl bg-white/80 backdrop-blur-sm shadow-lg transition-all duration-300"
                >
                  <Calendar className="h-5 w-5 ml-2 text-purple-500" />
                  <span className="font-medium">{dict.buttons.dateRange}</span>
                  <ChevronDown className="h-4 w-4 mr-2 text-purple-400" />
                </Button>
              </PopoverTrigger>
              <PopoverContent
                className="w-auto p-4 border-0 shadow-2xl rounded-2xl bg-white/95 backdrop-blur-sm"
                align="end"
              >
                <div className="space-y-4">
                  <div className="flex items-center gap-2">
                    <Calendar className="w-5 h-5 text-purple-500" />
                    <h4 className="font-bold text-gray-800">
                      {dict.buttons.dateRange}
                    </h4>
                  </div>
                  <DatePicker
                    onChange={handleDateRangeChange}
                    value={dateRange}
                    isRange={true}
                  />
                  <div className="flex justify-end">
                    <Button
                      size="sm"
                      variant="outline"
                      onClick={() =>
                        handleDateRangeChange({
                          from: undefined,
                          to: undefined,
                        })
                      }
                      className="rounded-xl border-purple-200 text-purple-600 hover:bg-purple-50"
                    >
                      {dict.buttons.clearDate}
                    </Button>
                  </div>
                </div>
              </PopoverContent>
            </Popover>
            <Button
              variant={showAdvancedFilters ? 'default' : 'outline'}
              onClick={() => setShowAdvancedFilters(!showAdvancedFilters)}
              className={cn(
                'h-14 px-6 rounded-xl transition-all duration-300 font-bold',
                showAdvancedFilters
                  ? 'bg-gradient-to-r from-purple-600 to-pink-600 text-white shadow-xl hover:shadow-2xl'
                  : 'border-2 border-purple-200 hover:border-purple-300 hover:bg-purple-50 bg-white/80 backdrop-blur-sm shadow-lg text-purple-600'
              )}
            >
              <SlidersHorizontal className="w-5 h-5 ml-2" />
              {dict.buttons.advancedFilters}
              {activeFilters > 0 && (
                <Badge className="mr-2 bg-white/20 text-current border-white/30 px-2 py-1">
                  {activeFilters}
                </Badge>
              )}
            </Button>
          </div>
        </CardContent>
      </Card>
      {showAdvancedFilters && (
        <Card className="border-0 shadow-xl bg-gradient-to-r from-purple-50 to-pink-50 rounded-2xl overflow-hidden">
          <CardContent className="p-6">
            <div className="flex items-center justify-between mb-6">
              <div className="flex items-center gap-3">
                <div className="p-3 rounded-full bg-gradient-to-r from-purple-500 to-pink-500 text-white shadow-lg">
                  <SlidersHorizontal className="w-6 h-6" />
                </div>
                <h3 className="text-xl font-bold text-gray-800">
                  {dict.advancedFilters.title}
                </h3>
              </div>
              <Button
                variant="ghost"
                size="sm"
                className="h-10 px-3 rounded-xl hover:bg-white/50"
                onClick={() => setShowAdvancedFilters(false)}
              >
                <X className="h-5 w-5" />
              </Button>
            </div>
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
              <div className="space-y-4">
                <div className="flex items-center gap-3">
                  <div className="p-2 rounded-full bg-gradient-to-r from-blue-500 to-cyan-500 text-white shadow-lg">
                    <Zap className="w-4 h-4" />
                  </div>
                  <h4 className="font-bold text-gray-800">
                    {dict.advancedFilters.statusTitle}
                  </h4>
                </div>
                <div className="space-y-3 max-h-60 overflow-y-auto">
                  {statusOptions.map((status) => {
                    const Icon = status.icon;
                    const label =
                      dict.advancedFilters.statusOptions[
                        status.value as keyof typeof dict.advancedFilters.statusOptions
                      ];
                    return (
                      <div
                        key={status.value}
                        className="flex items-center space-x-2 p-3 bg-white/70 rounded-xl hover:bg-white/90 transition-all"
                      >
                        <Checkbox
                          id={`status-${status.value}`}
                          checked={filters.status?.includes(
                            status.value as MatchSuggestionStatus
                          )}
                          onCheckedChange={(checked) => {
                            const newStatus = checked
                              ? [...(filters.status || []), status.value]
                              : filters.status?.filter(
                                  (s) => s !== status.value
                                );
                            onFiltersChange({
                              ...filters,
                              status: newStatus as MatchSuggestionStatus[],
                            });
                          }}
                        />
                        <label
                          htmlFor={`status-${status.value}`}
                          className="text-sm mr-2 flex items-center gap-2 cursor-pointer flex-1"
                        >
                          <Icon className={cn('h-4 w-4', status.color)} />
                          {label}
                        </label>
                      </div>
                    );
                  })}
                </div>
              </div>
              <div className="space-y-4">
                <div className="flex items-center gap-3">
                  <div className="p-2 rounded-full bg-gradient-to-r from-green-500 to-emerald-500 text-white shadow-lg">
                    <User className="w-4 h-4" />
                  </div>
                  <h4 className="font-bold text-gray-800">
                    {dict.advancedFilters.participantsTitle}
                  </h4>
                </div>
                <div className="p-4 bg-white/70 rounded-xl">
                  <Select
                    value={filters.userId || 'all'}
                    onValueChange={(value) =>
                      onFiltersChange({
                        ...filters,
                        userId: value === 'all' ? undefined : value,
                      })
                    }
                  >
                    <SelectTrigger className="border-2 border-green-200 focus:border-green-400 rounded-xl">
                      <div className="flex items-center gap-2">
                        <User className="h-4 w-4 text-green-500" />
                        <SelectValue
                          placeholder={dict.advancedFilters.participantsTitle}
                        />
                      </div>
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="all">
                        {dict.advancedFilters.participantOptions.all}
                      </SelectItem>
                      <SelectItem value="user1">ישראל ישראלי</SelectItem>
                      <SelectItem value="user2">שרה כהן</SelectItem>
                      <SelectItem value="user3">דוד לוי</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
              </div>
              <div className="space-y-4">
                <div className="flex items-center gap-3">
                  <div className="p-2 rounded-full bg-gradient-to-r from-purple-500 to-pink-500 text-white shadow-lg">
                    <TrendingUp className="w-4 h-4" />
                  </div>
                  <h4 className="font-bold text-gray-800">
                    {dict.advancedFilters.sortByTitle}
                  </h4>
                </div>
                <div className="p-4 bg-white/70 rounded-xl">
                  <Select
                    value={filters.sortBy || 'lastActivity'}
                    onValueChange={(value) =>
                      onFiltersChange({
                        ...filters,
                        sortBy: value as SortByOption,
                      })
                    }
                  >
                    <SelectTrigger className="border-2 border-purple-200 focus:border-purple-400 rounded-xl">
                      <div className="flex items-center gap-2">
                        <TrendingUp className="h-4 w-4 text-purple-500" />
                        <SelectValue
                          placeholder={dict.advancedFilters.sortByTitle}
                        />
                      </div>
                    </SelectTrigger>
                    <SelectContent>
                      {Object.entries(dict.advancedFilters.sortOptions).map(
                        ([key, label]) => (
                          <SelectItem key={key} value={key}>
                            {label}
                          </SelectItem>
                        )
                      )}
                    </SelectContent>
                  </Select>
                </div>
              </div>
            </div>
          </CardContent>
        </Card>
      )}
      {activeFilters > 0 && (
        <Card className="border-0 shadow-lg bg-gradient-to-r from-indigo-50 to-purple-50 rounded-2xl">
          <CardContent className="p-4">
            <div className="flex items-center justify-between">
              <div className="flex items-center gap-3">
                <div className="p-2 rounded-full bg-gradient-to-r from-indigo-500 to-purple-500 text-white shadow-lg">
                  <Filter className="w-4 h-4" />
                </div>
                <span className="font-bold text-indigo-800">
                  {dict.activeFilters.title}
                </span>
              </div>
              <div className="flex items-center gap-2 flex-wrap">
                {filters.priority && (
                  <Badge className="bg-gradient-to-r from-orange-500 to-amber-500 text-white border-0 shadow-lg px-3 py-1 rounded-xl">
                    <Star className="w-3 h-3 ml-1" />
                    {dict.activeFilters.priorityLabel}:{' '}
                    {dict.priorityFilter.options[filters.priority[0]]}
                    <button
                      onClick={() => handleRemoveFilter('priority')}
                      className="ml-2 hover:bg-white/20 rounded-full p-0.5 transition-all"
                    >
                      <X className="w-3 h-3" />
                    </button>
                  </Badge>
                )}
                {filters.dateRange && (
                  <Badge className="bg-gradient-to-r from-blue-500 to-cyan-500 text-white border-0 shadow-lg px-3 py-1 rounded-xl">
                    <Calendar className="w-3 h-3 ml-1" />
                    {dict.activeFilters.dateLabel}:{' '}
                    {new Date(filters.dateRange.start).toLocaleDateString(
                      'he-IL'
                    )}
                    {filters.dateRange.end &&
                      ` - ${new Date(filters.dateRange.end).toLocaleDateString('he-IL')}`}
                    <button
                      onClick={() => handleRemoveFilter('dateRange')}
                      className="ml-2 hover:bg-white/20 rounded-full p-0.5 transition-all"
                    >
                      <X className="w-3 h-3" />
                    </button>
                  </Badge>
                )}
                {filters.status && filters.status.length > 0 && (
                  <Badge className="bg-gradient-to-r from-green-500 to-emerald-500 text-white border-0 shadow-lg px-3 py-1 rounded-xl">
                    <AlertCircle className="w-3 h-3 ml-1" />
                    {dict.activeFilters.statusLabel}:{' '}
                    {filters.status.length === 1
                      ? dict.activeFilters.statusValues.single
                      : dict.activeFilters.statusValues.multiple.replace(
                          '{{count}}',
                          filters.status.length.toString()
                        )}
                    <button
                      onClick={() => handleRemoveFilter('status')}
                      className="ml-2 hover:bg-white/20 rounded-full p-0.5 transition-all"
                    >
                      <X className="w-3 h-3" />
                    </button>
                  </Badge>
                )}
                {filters.userId && (
                  <Badge className="bg-gradient-to-r from-purple-500 to-pink-500 text-white border-0 shadow-lg px-3 py-1 rounded-xl">
                    <User className="w-3 h-3 ml-1" />
                    {dict.activeFilters.userLabel}:{' '}
                    {dict.activeFilters.userValue}
                    <button
                      onClick={() => handleRemoveFilter('userId')}
                      className="ml-2 hover:bg-white/20 rounded-full p-0.5 transition-all"
                    >
                      <X className="w-3 h-3" />
                    </button>
                  </Badge>
                )}
                <Button
                  variant="ghost"
                  size="sm"
                  onClick={() => onFiltersChange({})}
                  className="text-indigo-600 hover:text-indigo-700 hover:bg-indigo-100 rounded-xl transition-all font-medium"
                >
                  <RefreshCw className="w-3 h-3 ml-1" />
                  {dict.buttons.clearAll}
                </Button>
              </div>
            </div>
          </CardContent>
        </Card>
      )}
    </div>
  );
};

export default SuggestionActionBar;
--- End of Content for SuggestionActionBar.tsx ---

================================================================================
Directory: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\suggestions\details
================================================================================

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\suggestions\details\SuggestionDetailsDialog.tsx
--------------------------------------------------------------------------------
Content:
// src/app/components/matchmaker/suggestions/details/SuggestionDetailsDialog.tsx
'use client';

import React, { useState, useEffect } from 'react';
import InquiryThreadView from '@/components/suggestions/inquiries/InquiryThreadView';
import { useNotifications } from '@/app/[locale]/contexts/NotificationContext';

import { Dialog, DialogContent } from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select';
import { ProfileCard } from '@/components/profile';
import { Timeline } from '@/components/ui/timeline';
import {
  AlertCircle,
  CheckCircle,
  XCircle,
  MessageCircle,
  Send,
  RefreshCw,
  Edit,
  Calendar,
  Clock,
  Download,
  AlarmClock,
  Trash2,
  MapPin,
  Mail,
  Phone,
  User,
  ExternalLink,
  Crown,
  Heart,
  Gem,
  Eye,
  Settings,
  Briefcase,
  GraduationCap,
  Quote,
  Archive,
  Maximize,
  Minimize,
  X as CloseIcon,
  LucideIcon,
} from 'lucide-react';
import { Textarea } from '@/components/ui/textarea';
import { toast } from 'sonner';

import { MatchSuggestionStatus, UserImage } from '@prisma/client';
import type {
  ExtendedMatchSuggestion,
  ActionAdditionalData,
  SuggestionParty,
} from '@/types/suggestions';
import type { QuestionnaireResponse } from '@/types/next-auth';
import Image from 'next/image';
import { getRelativeCloudinaryPath, cn, getInitials } from '@/lib/utils';
import { Avatar, AvatarFallback } from '@/components/ui/avatar';
import { Progress } from '@/components/ui/progress';
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from '@/components/ui/tooltip';
import type {
  MatchmakerPageDictionary,
  SuggestionsDictionary,
  ProfilePageDictionary,
} from '@/types/dictionary';

type SuggestionDetailsActionType =
  | 'view'
  | 'contact'
  | 'message'
  | 'edit'
  | 'delete'
  | 'resend'
  | 'changeStatus'
  | 'reminder'
  | 'sendReminder'
  | 'shareContacts'
  | 'scheduleMeeting'
  | 'viewMeetings'
  | 'exportHistory'
  | 'export'
  | 'resendToAll';

interface DialogActionData extends ActionAdditionalData {
  suggestionId?: string;
  newStatus?: MatchSuggestionStatus;
  notes?: string;
  suggestion?: ExtendedMatchSuggestion;
  partyId?: string;
  type?: string;
  partyType?: 'first' | 'second' | 'both';
}

interface SuggestionDetailsDialogProps {
  suggestion: ExtendedMatchSuggestion | null;
  isOpen: boolean;
  onClose: () => void;
  onAction: (
    action: SuggestionDetailsActionType,
    data?: DialogActionData
  ) => void;
  userId: string;
  matchmakerDict: MatchmakerPageDictionary;
  suggestionsDict: SuggestionsDictionary;
  profileDict: ProfilePageDictionary; // ✅ הוספת המילון החדש
}

interface StatusInfo {
  icon: LucideIcon;
  color: string;
  bgColor: string;
  badgeColor: string;
  progress: number;
}

const getEnhancedStatusInfo = (status: MatchSuggestionStatus): StatusInfo => {
  const statusInfoMap: Record<
    string,
    Omit<StatusInfo, 'label' | 'description'>
  > = {
    DRAFT: {
      icon: Edit,
      color: 'text-gray-600',
      bgColor: 'from-gray-50 to-slate-50',
      badgeColor: 'bg-gradient-to-r from-gray-500 to-slate-500 text-white',
      progress: 10,
    },
    PENDING_FIRST_PARTY: {
      icon: Clock,
      color: 'text-yellow-600',
      bgColor: 'from-yellow-50 to-amber-50',
      badgeColor: 'bg-gradient-to-r from-yellow-500 to-amber-500 text-white',
      progress: 25,
    },
    FIRST_PARTY_APPROVED: {
      icon: CheckCircle,
      color: 'text-green-600',
      bgColor: 'from-green-50 to-emerald-50',
      badgeColor: 'bg-gradient-to-r from-green-500 to-emerald-500 text-white',
      progress: 40,
    },
    FIRST_PARTY_DECLINED: {
      icon: XCircle,
      color: 'text-red-600',
      bgColor: 'from-red-50 to-pink-50',
      badgeColor: 'bg-gradient-to-r from-red-500 to-pink-500 text-white',
      progress: 0,
    },
    PENDING_SECOND_PARTY: {
      icon: Clock,
      color: 'text-blue-600',
      bgColor: 'from-blue-50 to-cyan-50',
      badgeColor: 'bg-gradient-to-r from-blue-500 to-cyan-500 text-white',
      progress: 50,
    },
    SECOND_PARTY_APPROVED: {
      icon: CheckCircle,
      color: 'text-green-600',
      bgColor: 'from-green-50 to-emerald-50',
      badgeColor: 'bg-gradient-to-r from-green-500 to-emerald-500 text-white',
      progress: 60,
    },
    SECOND_PARTY_DECLINED: {
      icon: XCircle,
      color: 'text-red-600',
      bgColor: 'from-red-50 to-pink-50',
      badgeColor: 'bg-gradient-to-r from-red-500 to-pink-500 text-white',
      progress: 0,
    },
    CONTACT_DETAILS_SHARED: {
      icon: Send,
      color: 'text-purple-600',
      bgColor: 'from-purple-50 to-pink-50',
      badgeColor: 'bg-gradient-to-r from-purple-500 to-pink-500 text-white',
      progress: 70,
    },
    AWAITING_FIRST_DATE_FEEDBACK: {
      icon: MessageCircle,
      color: 'text-orange-600',
      bgColor: 'from-orange-50 to-amber-50',
      badgeColor: 'bg-gradient-to-r from-orange-500 to-amber-500 text-white',
      progress: 75,
    },
    DATING: {
      icon: Heart,
      color: 'text-pink-600',
      bgColor: 'from-pink-50 to-rose-50',
      badgeColor: 'bg-gradient-to-r from-pink-500 to-rose-500 text-white',
      progress: 80,
    },
    ENGAGED: {
      icon: Gem,
      color: 'text-yellow-600',
      bgColor: 'from-yellow-50 to-orange-50',
      badgeColor: 'bg-gradient-to-r from-yellow-500 to-orange-500 text-white',
      progress: 95,
    },
    MARRIED: {
      icon: Crown,
      color: 'text-emerald-600',
      bgColor: 'from-emerald-50 to-green-50',
      badgeColor: 'bg-gradient-to-r from-emerald-500 to-green-500 text-white',
      progress: 100,
    },
    EXPIRED: {
      icon: AlarmClock,
      color: 'text-gray-600',
      bgColor: 'from-gray-50 to-slate-50',
      badgeColor: 'bg-gradient-to-r from-gray-500 to-slate-500 text-white',
      progress: 0,
    },
    CLOSED: {
      icon: Archive,
      color: 'text-gray-600',
      bgColor: 'from-gray-50 to-slate-50',
      badgeColor: 'bg-gradient-to-r from-gray-500 to-slate-500 text-white',
      progress: 0,
    },
    CANCELLED: {
      icon: XCircle,
      color: 'text-red-600',
      bgColor: 'from-red-50 to-pink-50',
      badgeColor: 'bg-gradient-to-r from-red-500 to-pink-500 text-white',
      progress: 0,
    },
    AWAITING_MATCHMAKER_APPROVAL: {
      icon: User,
      color: 'text-blue-600',
      bgColor: 'from-blue-50 to-cyan-50',
      badgeColor: 'bg-blue-500',
      progress: 65,
    },
    THINKING_AFTER_DATE: {
      icon: Clock,
      color: 'text-indigo-600',
      bgColor: 'from-indigo-50 to-violet-50',
      badgeColor: 'bg-indigo-500',
      progress: 77,
    },
    PROCEEDING_TO_SECOND_DATE: {
      icon: CheckCircle,
      color: 'text-teal-600',
      bgColor: 'from-teal-50 to-cyan-50',
      badgeColor: 'bg-teal-500',
      progress: 78,
    },
    ENDED_AFTER_FIRST_DATE: {
      icon: XCircle,
      color: 'text-red-600',
      bgColor: 'from-red-50 to-pink-50',
      badgeColor: 'bg-red-500',
      progress: 0,
    },
    MEETING_PENDING: {
      icon: Calendar,
      color: 'text-purple-600',
      bgColor: 'from-purple-50 to-pink-50',
      badgeColor: 'bg-purple-500',
      progress: 72,
    },
    MEETING_SCHEDULED: {
      icon: Calendar,
      color: 'text-green-600',
      bgColor: 'from-green-50 to-emerald-50',
      badgeColor: 'bg-green-500',
      progress: 74,
    },
    MATCH_APPROVED: {
      icon: CheckCircle,
      color: 'text-green-600',
      bgColor: 'from-green-50 to-emerald-50',
      badgeColor: 'bg-green-500',
      progress: 60,
    },
    MATCH_DECLINED: {
      icon: XCircle,
      color: 'text-red-600',
      bgColor: 'from-red-50 to-pink-50',
      badgeColor: 'bg-red-500',
      progress: 0,
    },
  };
  return (
    statusInfoMap[status] || {
      icon: RefreshCw,
      color: 'text-gray-600',
      bgColor: 'from-gray-50 to-slate-50',
      badgeColor: 'bg-gray-500',
      progress: 10,
    }
  );
};

const formatDateSafely = (
  dateInput: Date | string | null | undefined,
  placeholder: string
): string => {
  if (!dateInput) return placeholder;
  const date = typeof dateInput === 'string' ? new Date(dateInput) : dateInput;
  if (!(date instanceof Date) || isNaN(date.getTime())) return 'Invalid Date';
  return new Intl.DateTimeFormat('he-IL', {
    year: 'numeric',
    month: '2-digit',
    day: '2-digit',
    hour: '2-digit',
    minute: '2-digit',
  }).format(date);
};

const getDaysRemaining = (
  deadline: Date | string | null | undefined
): number | null => {
  if (!deadline) return null;
  const deadlineDate =
    typeof deadline === 'string' ? new Date(deadline) : deadline;
  if (!(deadlineDate instanceof Date) || isNaN(deadlineDate.getTime()))
    return null;
  const today = new Date();
  const diffTime = deadlineDate.getTime() - today.getTime();
  return Math.ceil(diffTime / (1000 * 60 * 60 * 24));
};

// ... Internal Components updated to receive and use dict ...

const SuggestionDetailsDialog: React.FC<SuggestionDetailsDialogProps> = ({
  suggestion,
  isOpen,
  onClose,
  onAction,
  userId,
  matchmakerDict,
  suggestionsDict,
  profileDict,
}) => {
  const dict = matchmakerDict.suggestionDetailsDialog;
  const [activeTab, setActiveTab] = useState('overview');
  const [firstPartyQuestionnaire, setFirstPartyQuestionnaire] =
    useState<QuestionnaireResponse | null>(null);
  const [secondPartyQuestionnaire, setSecondPartyQuestionnaire] =
    useState<QuestionnaireResponse | null>(null);
  const [isLoading, setIsLoading] = useState(false);
  const [isFullscreen, setIsFullscreen] = useState(false);
  const [statusChangeNote, setStatusChangeNote] = useState('');
  const [newStatus, setNewStatus] = useState<MatchSuggestionStatus | null>(
    null
  );
  const [showStatusChange, setShowStatusChange] = useState(false);
  const { refreshNotifications } = useNotifications();

  useEffect(() => {
    if (isOpen && suggestion) {
      setActiveTab('overview');
      setShowStatusChange(false);
      setNewStatus(null);
      setStatusChangeNote('');

      const hasUnread = suggestion.inquiries?.some(
        (inq) => inq.toUserId === userId && inq.status === 'PENDING'
      );
      if (hasUnread) {
        const markAsRead = async () => {
          try {
            await fetch(
              `/api/suggestions/${suggestion.id}/inquiries/mark-as-read`,
              { method: 'POST' }
            );
            refreshNotifications();
          } catch (error) {
            console.error('Failed to mark inquiries as read:', error);
          }
        };
        markAsRead();
      }
    }
  }, [isOpen, suggestion, userId, refreshNotifications]);

  const handleStatusChange = async () => {
    if (!newStatus || !suggestion) return;
    setIsLoading(true);
    try {
      onAction('changeStatus', {
        suggestionId: suggestion.id,
        newStatus,
        notes: statusChangeNote,
      });
      setShowStatusChange(false);
      setStatusChangeNote('');
      setNewStatus(null);
    } catch (error) {
      console.error('Error changing status:', error);
      toast.error(
        `${dict.toasts.statusUpdateError}: ${error instanceof Error ? error.message : ''}`
      );
    } finally {
      setIsLoading(false);
    }
  };

  if (!suggestion) return null;

  const statusInfo = getEnhancedStatusInfo(suggestion.status);
  const statusLabel = dict.statusLabels[suggestion.status] || suggestion.status;
  const statusDescription = dict.statusLabels[suggestion.status] || '';
  const priorityLabel =
    dict.priorityLabels[suggestion.priority] || suggestion.priority;

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent
        className={cn(
          'p-0 shadow-2xl border-0 bg-white overflow-hidden z-[50] flex flex-col transition-all duration-300 ease-in-out',
          isFullscreen
            ? '!w-screen !h-screen !max-w-none !max-h-none !rounded-none !fixed !inset-0 !m-0'
            : 'md:max-w-7xl md:w-[95vw] md:h-[95vh] md:rounded-3xl'
        )}
        dir="rtl"
        onOpenAutoFocus={(e) => e.preventDefault()}
      >
        <Tabs
          value={activeTab}
          onValueChange={setActiveTab}
          className="flex-1 flex flex-col overflow-hidden"
        >
          {/* Header and Tabs Component */}
          <div
            className={cn(
              'relative bg-gradient-to-br',
              statusInfo.bgColor,
              'border-b border-gray-100/80 flex-shrink-0'
            )}
          >
            <div className="absolute inset-0">
              <div className="absolute top-0 right-0 w-64 h-64 bg-gradient-to-br from-white/20 to-transparent rounded-full blur-3xl opacity-50"></div>
              <div className="absolute bottom-0 left-0 w-48 h-48 bg-gradient-to-br from-white/10 to-transparent rounded-full blur-2xl opacity-40"></div>
            </div>
            <div className="relative z-10 p-6 space-y-4">
              <div className="flex items-start justify-between">
                <div className="flex items-center gap-4">
                  <div className="p-3 rounded-full bg-white/20 backdrop-blur-sm shadow-lg">
                    <statusInfo.icon
                      className={cn('w-7 h-7', statusInfo.color)}
                    />
                  </div>
                  <div>
                    <h1 className="text-xl lg:text-2xl font-bold text-gray-800">
                      {dict.header.title.replace(
                        '{{id}}',
                        suggestion.id.toString().split('-')[0]
                      )}
                    </h1>
                    <p className="text-md text-gray-600 mt-1">
                      {dict.header.subtitle
                        .replace('{{party1}}', suggestion.firstParty.firstName)
                        .replace(
                          '{{party2}}',
                          suggestion.secondParty.firstName
                        )}
                    </p>
                  </div>
                </div>
                <div className="flex items-center gap-2">
                  <Badge
                    className={cn(
                      'text-sm font-bold shadow-md',
                      statusInfo.badgeColor
                    )}
                  >
                    <statusInfo.icon className="w-4 h-4 ml-2" />
                    {statusLabel}
                  </Badge>
                  <TooltipProvider>
                    <Tooltip>
                      <TooltipTrigger asChild>
                        <Button
                          variant="ghost"
                          size="icon"
                          onClick={() => setIsFullscreen(!isFullscreen)}
                          className="rounded-full h-10 w-10 text-gray-500 hover:text-gray-700 hover:bg-white/50 backdrop-blur-sm"
                        >
                          {isFullscreen ? (
                            <Minimize className="w-5 h-5" />
                          ) : (
                            <Maximize className="w-5 h-5" />
                          )}
                        </Button>
                      </TooltipTrigger>
                      <TooltipContent>
                        <p>
                          {isFullscreen
                            ? dict.header.minimizeTooltip
                            : dict.header.fullscreenTooltip}
                        </p>
                      </TooltipContent>
                    </Tooltip>
                  </TooltipProvider>
                  <Button
                    variant="ghost"
                    size="icon"
                    onClick={onClose}
                    className="rounded-full h-10 w-10 text-gray-500 hover:text-gray-700 hover:bg-white/50 backdrop-blur-sm"
                  >
                    <CloseIcon className="w-5 h-5" />
                  </Button>
                </div>
              </div>
              <TabsList className="grid w-full grid-cols-3 sm:grid-cols-6 bg-white/60 backdrop-blur-sm rounded-2xl p-1.5 h-auto shadow-lg border border-white/50">
                {Object.entries(dict.tabs).map(([key, label]) => {
                  const IconComponent =
                    {
                      overview: Eye,
                      party1: User,
                      party2: User,
                      timeline: Calendar,
                      communication: MessageCircle,
                      actions: Settings,
                    }[key] || Eye;
                  return (
                    <TabsTrigger
                      key={key}
                      value={key}
                      onClick={() => setActiveTab(key)}
                      className={cn(
                        'flex flex-col items-center justify-center gap-1 rounded-xl text-xs font-bold transition-all duration-300 py-2 hover:scale-105 relative overflow-hidden group',
                        activeTab === key
                          ? 'bg-white text-primary shadow-md'
                          : 'text-gray-600 hover:bg-white/50'
                      )}
                    >
                      <IconComponent className="w-5 h-5 relative z-10" />
                      <span className="relative z-10 hidden sm:inline">
                        {label}
                      </span>
                    </TabsTrigger>
                  );
                })}
              </TabsList>
            </div>
          </div>

          <div className="flex-1 overflow-y-auto bg-slate-50">
            <TabsContent value="overview" className="m-0 h-full">
              {/* OverviewTabContent Component would be here, but we'll inline it */}
            </TabsContent>
            <TabsContent value="firstParty" className="m-0 h-full">
              <div className="p-6">
                <ProfileCard
                  profile={suggestion.firstParty.profile}
                  images={suggestion.firstParty.images}
                  questionnaire={firstPartyQuestionnaire}
                  viewMode="matchmaker"
                  isProfileComplete={suggestion.firstParty.isProfileComplete}
                  dict={profileDict.profileCard}
                />
              </div>
            </TabsContent>
            <TabsContent value="secondParty" className="m-0 h-full">
              <div className="p-6">
                <ProfileCard
                  profile={suggestion.secondParty.profile}
                  images={suggestion.secondParty.images}
                  questionnaire={secondPartyQuestionnaire}
                  viewMode="matchmaker"
                  isProfileComplete={suggestion.secondParty.isProfileComplete}
                  dict={profileDict.profileCard}
                />
              </div>
            </TabsContent>
            <TabsContent value="timeline" className="m-0 h-full">
              <div className="p-6">
                <div className="bg-white rounded-2xl shadow-xl border-0 p-6">
                  <h3 className="text-2xl font-bold mb-6 flex items-center gap-3">
                    <div className="p-3 rounded-full bg-gradient-to-r from-orange-500 to-amber-500 text-white shadow-lg">
                      <Calendar className="w-6 h-6" />
                    </div>
                    {dict.timeline.title}
                  </h3>
                  <Timeline
                    items={(suggestion?.statusHistory || []).map((history) => {
                      const historyStatusInfo = getEnhancedStatusInfo(
                        history.status as MatchSuggestionStatus
                      );
                      return {
                        title:
                          dict.statusLabels[history.status] || history.status,
                        description: history.notes || dict.timeline.noNotes,
                        date:
                          typeof history.createdAt === 'string'
                            ? new Date(history.createdAt)
                            : history.createdAt,
                        icon: historyStatusInfo.icon,
                      };
                    })}
                  />
                </div>
              </div>
            </TabsContent>
            <TabsContent value="communication" className="m-0 h-full">
              <div className="p-6">
                <div className="bg-white rounded-2xl shadow-xl border-0 p-6">
                  <h3 className="text-2xl font-bold mb-6 flex items-center gap-3">
                    <div className="p-3 rounded-full bg-gradient-to-r from-pink-500 to-rose-500 text-white shadow-lg">
                      <MessageCircle className="w-6 h-6" />
                    </div>
                    {dict.communication.title}
                  </h3>
                  <InquiryThreadView
                    suggestionId={suggestion.id}
                    userId={userId}
                    showComposer={true}
                    dict={suggestionsDict.inquiryThread}
                  />
                </div>
              </div>
            </TabsContent>
            <TabsContent value="actions" className="m-0 h-full">
              <div className="p-6">
                <h3 className="text-2xl font-bold mb-6 flex items-center gap-3">
                  <div className="p-3 rounded-full bg-gradient-to-r from-gray-500 to-slate-500 text-white shadow-lg">
                    <Settings className="w-6 h-6" />
                  </div>
                  {dict.actions.title}
                </h3>
                <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                  <div className="bg-white rounded-2xl shadow-xl border-0 p-6 hover:shadow-2xl transition-all duration-300">
                    <div className="p-3 rounded-full bg-gradient-to-r from-blue-500 to-cyan-500 text-white shadow-lg w-fit mb-4">
                      <RefreshCw className="w-6 h-6" />
                    </div>
                    <h4 className="text-lg font-bold mb-3">
                      {dict.actions.statusChange.title}
                    </h4>
                    <p className="text-sm text-gray-600 mb-4">
                      {dict.actions.statusChange.description}
                    </p>
                    <Button
                      className="w-full bg-gradient-to-r from-blue-600 to-cyan-600 hover:from-blue-700 hover:to-cyan-700 shadow-lg"
                      onClick={() => setShowStatusChange(true)}
                    >
                      <RefreshCw className="w-4 h-4 ml-2" />
                      {dict.actions.statusChange.button}
                    </Button>
                  </div>
                  <div className="bg-white rounded-2xl shadow-xl border-0 p-6 hover:shadow-2xl transition-all duration-300">
                    <div className="p-3 rounded-full bg-gradient-to-r from-amber-500 to-orange-500 text-white shadow-lg w-fit mb-4">
                      <Edit className="w-6 h-6" />
                    </div>
                    <h4 className="text-lg font-bold mb-3">
                      {dict.actions.edit.title}
                    </h4>
                    <p className="text-sm text-gray-600 mb-4">
                      {dict.actions.edit.description}
                    </p>
                    <Button
                      variant="outline"
                      className="w-full border-2 border-amber-200 text-amber-700 hover:bg-amber-50"
                      onClick={() => onAction('edit', { suggestion })}
                    >
                      <Edit className="w-4 h-4 ml-2" />
                      {dict.actions.edit.button}
                    </Button>
                  </div>
                  <div className="bg-white rounded-2xl shadow-xl border-0 p-6 hover:shadow-2xl transition-all duration-300">
                    <div className="p-3 rounded-full bg-gradient-to-r from-red-500 to-pink-500 text-white shadow-lg w-fit mb-4">
                      <Trash2 className="w-6 h-6" />
                    </div>
                    <h4 className="text-lg font-bold mb-3">
                      {dict.actions.delete.title}
                    </h4>
                    <p className="text-sm text-gray-600 mb-4">
                      {dict.actions.delete.description}
                    </p>
                    <Button
                      variant="outline"
                      className="w-full border-2 border-red-200 text-red-700 hover:bg-red-50"
                      onClick={() =>
                        onAction('delete', { suggestionId: suggestion.id })
                      }
                    >
                      <Trash2 className="w-4 h-4 ml-2" />
                      {dict.actions.delete.button}
                    </Button>
                  </div>
                </div>
              </div>
            </TabsContent>
          </div>
        </Tabs>
        {showStatusChange && (
          <div
            className="fixed inset-0 bg-black/60 flex items-center justify-center z-[100]"
            dir="rtl"
          >
            <div className="bg-white p-6 rounded-2xl max-w-md w-full shadow-2xl m-4">
              <h3 className="text-xl font-bold mb-4 flex items-center">
                <RefreshCw className="w-5 h-5 ml-2 text-blue-600" />
                {dict.statusChangeModal.title}
              </h3>
              <div className="space-y-4">
                <div>
                  <label className="block text-sm font-medium mb-1 text-gray-600">
                    {dict.statusChangeModal.currentStatusLabel}
                  </label>
                  <div className="flex items-center p-3 bg-gray-100 rounded-lg border">
                    <statusInfo.icon
                      className={`w-5 h-5 ml-3 ${statusInfo.color}`}
                    />
                    <span className="font-bold">{statusLabel}</span>
                  </div>
                </div>
                <div>
                  <label className="block text-sm font-medium mb-1 text-gray-600">
                    {dict.statusChangeModal.newStatusLabel}
                  </label>
                  <Select
                    value={newStatus || undefined}
                    onValueChange={(value) =>
                      setNewStatus(value as MatchSuggestionStatus)
                    }
                  >
                    <SelectTrigger className="w-full">
                      <SelectValue
                        placeholder={
                          dict.statusChangeModal.newStatusPlaceholder
                        }
                      />
                    </SelectTrigger>
                    <SelectContent className="max-h-60 overflow-y-auto">
                      {Object.entries(dict.statusLabels).map(
                        ([status, label]) => (
                          <SelectItem key={status} value={status}>
                            {label}
                          </SelectItem>
                        )
                      )}
                    </SelectContent>
                  </Select>
                </div>
                <div>
                  <label className="block text-sm font-medium mb-1 text-gray-600">
                    {dict.statusChangeModal.notesLabel}
                  </label>
                  <Textarea
                    value={statusChangeNote}
                    onChange={(e) => setStatusChangeNote(e.target.value)}
                    placeholder={dict.statusChangeModal.notesPlaceholder}
                    className="min-h-[100px] resize-none"
                  />
                </div>
                <div className="flex justify-end gap-3 pt-4 border-t">
                  <Button
                    variant="outline"
                    onClick={() => setShowStatusChange(false)}
                  >
                    {dict.statusChangeModal.cancelButton}
                  </Button>
                  <Button
                    onClick={handleStatusChange}
                    disabled={!newStatus || isLoading}
                    className="bg-blue-600 hover:bg-blue-700"
                  >
                    {isLoading ? (
                      <>
                        <RefreshCw className="w-4 h-4 ml-2 animate-spin" />{' '}
                        {dict.statusChangeModal.savingButton}
                      </>
                    ) : (
                      dict.statusChangeModal.saveButton
                    )}
                  </Button>
                </div>
              </div>
            </div>
          </div>
        )}
      </DialogContent>
    </Dialog>
  );
};

export default SuggestionDetailsDialog;
--- End of Content for SuggestionDetailsDialog.tsx ---

================================================================================
Directory: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\suggestions\hooks
================================================================================

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\suggestions\hooks\useMatchmaking.ts
--------------------------------------------------------------------------------
Content:
// /hooks/useMatchmaking.ts
import { useState, useEffect, useMemo, useCallback } from 'react';
import { AvailabilityStatus } from '@prisma/client';
import { calculateMatchScore, MatchScore } from '../utils/matchingAlgorithm';
import { MATCH_THRESHOLDS } from '../../new/constants/matchingCriteria';
import type { User } from '@/types/next-auth';
// Define types and interfaces
interface UseMatchmakingProps {
  candidates?: User[];
  onMatchFound?: (match: PotentialMatch) => void;
  onMatchScoreUpdate?: (scores: MatchScoreMap) => void;
}

export interface PotentialMatch {
  candidateA: User;
  candidateB: User;
  score: MatchScore;
  matchDate?: Date;
  status: 'new' | 'suggested' | 'rejected';
  lastUpdated: Date;
}

type MatchScoreMap = Map<string, Map<string, MatchScore>>;

interface MatchSuggestion {
  candidate: User;
  score: MatchScore;
  matchDate: Date;
}

export const useMatchmaking = ({
  candidates = [],
  onMatchScoreUpdate
}: UseMatchmakingProps = {}) => {
  // State declarations
  const [matchScores, setMatchScores] = useState<MatchScoreMap>(new Map());
  const [suggestedMatches, setSuggestedMatches] = useState<PotentialMatch[]>([]);
  const [isCalculating, setIsCalculating] = useState(false);
  const [lastCalculation, setLastCalculation] = useState<Date | null>(null);

  // Calculate all possible matches
  const calculateAllMatches = useCallback(() => {
    setIsCalculating(true);
    const newScores = new Map<string, Map<string, MatchScore>>();
    const newMatches: PotentialMatch[] = [];

    candidates.forEach((candidateA, indexA) => {
      const candidateAScores = new Map<string, MatchScore>();
      newScores.set(candidateA.id, candidateAScores);

      candidates.slice(indexA + 1).forEach(candidateB => {
        // Check basic compatibility conditions
        if (
          candidateA.profile?.gender === candidateB.profile?.gender ||
          candidateA.profile?.availabilityStatus !== AvailabilityStatus.AVAILABLE ||
          candidateB.profile?.availabilityStatus !== AvailabilityStatus.AVAILABLE
        ) {
          return;
        }

        // Calculate match score
        const matchScore = calculateMatchScore(candidateA.profile, candidateB.profile);
        
        if (matchScore) {
          candidateAScores.set(candidateB.id, matchScore);

          // Add to potential matches if score is good enough
          if (matchScore.score >= MATCH_THRESHOLDS.GOOD) {
            newMatches.push({
              candidateA,
              candidateB,
              score: matchScore,
              matchDate: new Date(),
              status: 'new',
              lastUpdated: new Date()
            });
          }
        }
      });
    });

    setMatchScores(newScores);
    setSuggestedMatches(prev => {
      const existing = new Set(prev.map(m => 
        `${m.candidateA.id}-${m.candidateB.id}`
      ));
      
      return [
        ...prev,
        ...newMatches.filter(m => 
          !existing.has(`${m.candidateA.id}-${m.candidateB.id}`)
        )
      ].sort((a, b) => b.score.score - a.score.score);
    });

    onMatchScoreUpdate?.(newScores);
    setIsCalculating(false);
    setLastCalculation(new Date());
  }, [candidates, onMatchScoreUpdate]);

  // Recalculate matches when candidates list changes
  useEffect(() => {
    if (candidates.length > 0 && !isCalculating) {
      calculateAllMatches();
    }
  }, [candidates, calculateAllMatches, isCalculating]);

  // Get best matches for a specific candidate
  const getBestMatchesForCandidate = useCallback((
    candidateId: string,
    limit: number = 5
  ): MatchSuggestion[] => {
    const candidate = candidates.find(c => c.id === candidateId);
    if (!candidate) return [];

    const matches: MatchSuggestion[] = [];
    const candidateScores = matchScores.get(candidateId);

    if (candidateScores) {
      candidateScores.forEach((score, otherId) => {
        const otherCandidate = candidates.find(c => c.id === otherId);
        if (otherCandidate && score.score >= MATCH_THRESHOLDS.FAIR) {
          matches.push({
            candidate: otherCandidate,
            score,
            matchDate: new Date()
          });
        }
      });
    }

    return matches
      .sort((a, b) => b.score.score - a.score.score)
      .slice(0, limit);
  }, [candidates, matchScores]);

  // Analyze matches by categories
  const matchAnalytics = useMemo(() => {
    const analytics = {
      total: suggestedMatches.length,
      byCategory: {
        excellent: 0,
        good: 0,
        fair: 0,
        poor: 0
      },
      averageScore: 0,
      recentMatches: [] as PotentialMatch[]
    };

    suggestedMatches.forEach(match => {
      if (match.score.score >= MATCH_THRESHOLDS.EXCELLENT) {
        analytics.byCategory.excellent++;
      } else if (match.score.score >= MATCH_THRESHOLDS.GOOD) {
        analytics.byCategory.good++;
      } else if (match.score.score >= MATCH_THRESHOLDS.FAIR) {
        analytics.byCategory.fair++;
      } else {
        analytics.byCategory.poor++;
      }
    });

    analytics.averageScore = suggestedMatches.reduce(
      (sum, match) => sum + match.score.score,
      0
    ) / (suggestedMatches.length || 1);

    // Get recent matches (last week)
    const oneWeekAgo = new Date();
    oneWeekAgo.setDate(oneWeekAgo.getDate() - 7);
    
    analytics.recentMatches = suggestedMatches
      .filter(match => match.matchDate && match.matchDate >= oneWeekAgo)
      .sort((a, b) => 
        (b.matchDate?.getTime() || 0) - (a.matchDate?.getTime() || 0)
      );

    return analytics;
  }, [suggestedMatches]);

  // Update match status
  const updateMatchStatus = useCallback((
    candidateAId: string,
    candidateBId: string,
    status: 'suggested' | 'rejected'
  ) => {
    setSuggestedMatches(prev => prev.map(match => {
      if (
        (match.candidateA.id === candidateAId && match.candidateB.id === candidateBId) ||
        (match.candidateA.id === candidateBId && match.candidateB.id === candidateAId)
      ) {
        return {
          ...match,
          status,
          lastUpdated: new Date()
        };
      }
      return match;
    }));
  }, []);

  // Return hook interface
  return {
    matchScores,
    suggestedMatches,
    isCalculating,
    lastCalculation,
    matchAnalytics,
    getBestMatchesForCandidate,
    calculateAllMatches,
    updateMatchStatus
  };
};

export default useMatchmaking;
--- End of Content for useMatchmaking.ts ---

================================================================================
Directory: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\suggestions\list
================================================================================

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\suggestions\list\ManagerSuggestionsList.tsx
--------------------------------------------------------------------------------
Content:
// FILENAME: src/app/components/matchmaker/suggestions/list/ManagerSuggestionsList.tsx

import React, { useMemo, useState } from 'react';
import { useSession } from 'next-auth/react';
import { Card } from '@/components/ui/card';
import { ScrollArea } from '@/components/ui/scroll-area';
import { Users } from 'lucide-react';
import type {
  Suggestion,
  SuggestionFilters,
  ActionAdditionalData,
} from '@/types/suggestions';
import SuggestionDetailsDialog from '../details/SuggestionDetailsDialog';
import { toast } from 'sonner';
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
} from '@/components/ui/alert-dialog';
import SuggestionCard from '../cards/SuggestionCard'; // Make sure this is imported
import type { SuggestionsDictionary } from '@/types/dictionary';

// Define a more specific action type to avoid 'any'
type SuggestionActionType =
  | 'view'
  | 'contact'
  | 'message'
  | 'edit'
  | 'delete'
  | 'resend'
  | 'changeStatus'
  | 'reminder'
  | 'sendReminder'
  | 'shareContacts'
  | 'scheduleMeeting'
  | 'viewMeetings'
  | 'exportHistory'
  | 'export'
  | 'resendToAll';

interface ManagerSuggestionsListProps {
  suggestions: Suggestion[];
  filters: SuggestionFilters;
  searchQuery: string;
  type: 'active' | 'pending' | 'history';
  onSuggestionDeleted?: (id: string) => void;
  dict: SuggestionsDictionary;
}

const ManagerSuggestionsList: React.FC<ManagerSuggestionsListProps> = ({
  suggestions,
  filters,
  searchQuery,
  type,
  onSuggestionDeleted,
    dict,
}) => {
  const { data: session } = useSession();
  const [selectedSuggestion, setSelectedSuggestion] =
    useState<Suggestion | null>(null);
  const [showDeleteDialog, setShowDeleteDialog] = useState(false);
  const [suggestionToDelete, setSuggestionToDelete] = useState<string | null>(
    null
  );

  const filteredSuggestions = useMemo(() => {
    return suggestions.filter((suggestion) => {
      // Base status filter
      if (
        type === 'active' &&
        [
          'CLOSED',
          'CANCELLED',
          'EXPIRED',
          'FIRST_PARTY_DECLINED',
          'SECOND_PARTY_DECLINED',
        ].includes(suggestion.status)
      ) {
        return false;
      }
      if (type === 'pending' && !suggestion.status.includes('PENDING')) {
        return false;
      }
      if (
        type === 'history' &&
        ![
          'CLOSED',
          'CANCELLED',
          'EXPIRED',
          'FIRST_PARTY_DECLINED',
          'SECOND_PARTY_DECLINED',
          'MARRIED',
          'ENGAGED',
        ].includes(suggestion.status)
      ) {
        return false;
      }

      // Search query
      if (searchQuery && suggestion.firstParty && suggestion.secondParty) {
        const searchTerm = searchQuery.toLowerCase();
        const searchableText =
          `${suggestion.firstParty.firstName} ${suggestion.firstParty.lastName} ${suggestion.secondParty.firstName} ${suggestion.secondParty.lastName} ${suggestion.matchingReason || ''}`.toLowerCase();
        if (!searchableText.includes(searchTerm)) return false;
      }

      // Priority filter
      if (
        filters.priority?.length &&
        !filters.priority.includes(suggestion.priority)
      ) {
        return false;
      }

      // Date range filter
      if (filters.dateRange) {
        const createdAt = new Date(suggestion.createdAt);
        if (
          createdAt < filters.dateRange.start ||
          (filters.dateRange.end && createdAt > filters.dateRange.end)
        ) {
          return false;
        }
      }

      return true;
    });
  }, [suggestions, filters, searchQuery, type]);

  const confirmDelete = async () => {
    if (!suggestionToDelete) return;
    try {
      const response = await fetch(
        `/api/matchmaker/suggestions/${suggestionToDelete}/delete`,
        { method: 'DELETE' }
      );
      if (!response.ok) throw new Error('Failed to delete suggestion');
      toast.success('ההצעה נמחקה בהצלחה');
      if (onSuggestionDeleted) onSuggestionDeleted(suggestionToDelete);
    } catch (error) {
      console.error('Error deleting suggestion:', error);
      toast.error('שגיאה במחיקת ההצעה');
    } finally {
      setShowDeleteDialog(false);
      setSuggestionToDelete(null);
    }
  };

  const handleAction = (
    actionType: SuggestionActionType,
    data?: { suggestion: Suggestion } & ActionAdditionalData
  ) => {
    console.log(
      `Action '${actionType}' triggered for suggestion`,
      data?.suggestion?.id
    );
    if (actionType === 'view' && data?.suggestion) {
      setSelectedSuggestion(data.suggestion);
    }
    // Implement other actions like edit, message etc. here by setting state for their respective dialogs
  };

  if (filteredSuggestions.length === 0) {
    return (
      <div className="flex flex-col items-center justify-center h-64 text-gray-400">
        <Users className="w-12 h-12 mb-4" />
        <p>לא נמצאו הצעות התואמות את הסינון</p>
      </div>
    );
  }

  return (
    <>
      <ScrollArea className="h-[600px] rounded-md border p-4">
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
          {filteredSuggestions.map((suggestion) => {
            if (!suggestion.firstParty || !suggestion.secondParty) {
              return null; // Safety check for corrupted data
            }
            return (
              <SuggestionCard
                key={suggestion.id}
                suggestion={suggestion}
                onAction={(type, suggestionData, additionalData) => {
                  if (type === 'view') {
                    setSelectedSuggestion(suggestionData);
                  } else if (type === 'delete') {
                    setSuggestionToDelete(suggestionData.id);
                    setShowDeleteDialog(true);
                  } else {
                    handleAction(type, {
                      suggestion: suggestionData,
                      ...additionalData,
                    });
                  }
                }}
              />
            );
          })}
        </div>
      </ScrollArea>

      <SuggestionDetailsDialog
        suggestion={selectedSuggestion}
        isOpen={!!selectedSuggestion}
        onClose={() => setSelectedSuggestion(null)}
        onAction={(type, additionalData) =>
          handleAction(type, {
            suggestion: selectedSuggestion!,
            ...additionalData,
          })
        }
        userId={session?.user?.id || ''}
        dict={dict}
      
      />

      <AlertDialog open={showDeleteDialog} onOpenChange={setShowDeleteDialog}>
        <AlertDialogContent>
          <AlertDialogHeader>
            <AlertDialogTitle>האם את/ה בטוח/ה?</AlertDialogTitle>
            <AlertDialogDescription>
              פעולה זו תמחק את ההצעה לצמיתות ולא ניתן יהיה לשחזר אותה.
            </AlertDialogDescription>
          </AlertDialogHeader>
          <AlertDialogFooter>
            <AlertDialogCancel>ביטול</AlertDialogCancel>
            <AlertDialogAction
              onClick={confirmDelete}
              className="bg-red-600 hover:bg-red-700"
            >
              מחיקה
            </AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>
    </>
  );
};

export default ManagerSuggestionsList;
--- End of Content for ManagerSuggestionsList.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\suggestions\list\SuggestionsList.tsx
--------------------------------------------------------------------------------
Content:
import React, { useState, useMemo } from "react";
import { Input } from "@/components/ui/input";
import { Card, CardContent } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Button } from "@/components/ui/button";
import { 
  Search, 
  Filter, 
  SortDesc, 
  LayoutGrid, 
  List, 
  Users, 
  Clock, 
  CheckCircle, 
  XCircle,
  Heart,
  Star,
  TrendingUp,
  Activity,
  BarChart3,
  Eye,
  Sparkles,
  Target,
  Flame,
  Shield,
  Award,
  Crown,
  Zap,
  RefreshCw,
  Calendar,
  MapPin,
} from "lucide-react";
import type { MatchSuggestion } from "@prisma/client";
import type { UserProfile, UserImage } from "@/types/next-auth";
import SuggestionCard from "../cards/SuggestionCard";
import { LoadingContainer } from "../../new/shared/LoadingStates";
import type {
  Suggestion,
  ActionAdditionalData,
  SuggestionStatusHistory,
} from "@/types/suggestions";
import { cn } from "@/lib/utils";
import { ToggleGroup, ToggleGroupItem } from "@/components/ui/toggle-group";

interface PartyInfo {
  id: string;
  firstName: string;
  lastName: string;
  profile: UserProfile;
  images: UserImage[];
}

interface ExtendedMatchSuggestion extends MatchSuggestion {
  firstParty: PartyInfo;
  secondParty: PartyInfo;
  statusHistory: SuggestionStatusHistory[];
}

interface SuggestionsListProps {
  suggestions: ExtendedMatchSuggestion[];
  isLoading?: boolean;
  onAction: (
    type:
      | "view"
      | "contact"
      | "message"
      | "edit"
      | "delete"
      | "resend"
      | "changeStatus"
      | "reminder",
    suggestion: Suggestion,
    additionalData?: ActionAdditionalData
  ) => void;
  className?: string;
}

const SORT_OPTIONS = [
  { value: "latest", label: "החדשים ביותר", icon: TrendingUp },
  { value: "oldest", label: "הישנים ביותר", icon: Calendar },
  { value: "deadline", label: "לפי תאריך יעד", icon: Clock },
  { value: "priority", label: "לפי דחיפות", icon: Flame },
];

const STATUS_OPTIONS = [
  { 
    value: "PENDING_FIRST_PARTY", 
    label: "ממתין לצד א׳", 
    color: "from-yellow-500 to-amber-500",
    icon: Clock
  },
  { 
    value: "PENDING_SECOND_PARTY", 
    label: "ממתין לצד ב׳", 
    color: "from-blue-500 to-cyan-500",
    icon: Clock
  },
  { 
    value: "FIRST_PARTY_APPROVED", 
    label: "צד א׳ אישר", 
    color: "from-green-500 to-emerald-500",
    icon: CheckCircle
  },
  { 
    value: "SECOND_PARTY_APPROVED", 
    label: "צד ב׳ אישר", 
    color: "from-green-500 to-emerald-500",
    icon: CheckCircle
  },
  { 
    value: "CONTACT_DETAILS_SHARED", 
    label: "פרטי קשר שותפו", 
    color: "from-purple-500 to-pink-500",
    icon: Heart
  },
  { 
    value: "DATING", 
    label: "בתהליך היכרות", 
    color: "from-pink-500 to-rose-500",
    icon: Heart
  },
];

// Enhanced Stats Component
const EnhancedListStats: React.FC<{
  total: number;
  pending: number;
  approved: number;
  declined: number;
  urgent: number;
}> = ({ total, pending, approved, declined, urgent }) => (
  <Card className="border-0 shadow-xl bg-gradient-to-r from-white via-purple-50/30 to-pink-50/30 mb-6">
    <CardContent className="p-4">
      <div className="grid grid-cols-2 md:grid-cols-5 gap-4">
        {/* Total */}
        <div className="text-center group">
          <div className="flex items-center justify-center gap-2 mb-1">
            <div className="p-2 rounded-full bg-gradient-to-r from-blue-500 to-cyan-500 text-white shadow-lg group-hover:scale-110 transition-transform">
              <Users className="w-4 h-4" />
            </div>
            <span className="text-2xl font-bold text-blue-600">{total}</span>
          </div>
          <p className="text-xs text-gray-600 font-medium">סך הכל</p>
        </div>

        {/* Pending */}
        <div className="text-center group">
          <div className="flex items-center justify-center gap-2 mb-1">
            <div className="p-2 rounded-full bg-gradient-to-r from-yellow-500 to-amber-500 text-white shadow-lg group-hover:scale-110 transition-transform">
              <Clock className="w-4 h-4" />
            </div>
            <span className="text-2xl font-bold text-yellow-600">{pending}</span>
          </div>
          <p className="text-xs text-gray-600 font-medium">ממתינות</p>
        </div>

        {/* Approved */}
        <div className="text-center group">
          <div className="flex items-center justify-center gap-2 mb-1">
            <div className="p-2 rounded-full bg-gradient-to-r from-green-500 to-emerald-500 text-white shadow-lg group-hover:scale-110 transition-transform">
              <CheckCircle className="w-4 h-4" />
            </div>
            <span className="text-2xl font-bold text-green-600">{approved}</span>
          </div>
          <p className="text-xs text-gray-600 font-medium">מאושרות</p>
        </div>

        {/* Declined */}
        <div className="text-center group">
          <div className="flex items-center justify-center gap-2 mb-1">
            <div className="p-2 rounded-full bg-gradient-to-r from-red-500 to-pink-500 text-white shadow-lg group-hover:scale-110 transition-transform">
              <XCircle className="w-4 h-4" />
            </div>
            <span className="text-2xl font-bold text-red-600">{declined}</span>
          </div>
          <p className="text-xs text-gray-600 font-medium">נדחו</p>
        </div>

        {/* Urgent */}
        <div className="text-center group">
          <div className="flex items-center justify-center gap-2 mb-1">
            <div className="p-2 rounded-full bg-gradient-to-r from-orange-500 to-red-500 text-white shadow-lg group-hover:scale-110 transition-transform animate-pulse">
              <Flame className="w-4 h-4" />
            </div>
            <span className="text-2xl font-bold text-orange-600">{urgent}</span>
          </div>
          <p className="text-xs text-gray-600 font-medium">דחופות</p>
        </div>
      </div>
    </CardContent>
  </Card>
);

// Enhanced Filter Bar
const EnhancedFilterSection: React.FC<{
  searchQuery: string;
  onSearchChange: (query: string) => void;
  sortBy: string;
  onSortChange: (sort: string) => void;
  statusFilter: string[];
  onStatusFilterChange: (status: string[]) => void;
  showFilters: boolean;
  onToggleFilters: () => void;
  viewMode: 'grid' | 'list';
  onViewModeChange: (mode: 'grid' | 'list') => void;
}> = ({
  searchQuery,
  onSearchChange,
  sortBy,
  onSortChange,
  statusFilter,
  onStatusFilterChange,
  showFilters,
  onToggleFilters,
  viewMode,
  onViewModeChange,
}) => (
  <Card className="border-0 shadow-xl bg-gradient-to-r from-white via-cyan-50/30 to-blue-50/30 mb-6">
    <CardContent className="p-6 space-y-4">
      {/* Main Filter Row */}
      <div className="flex flex-col md:flex-row gap-4">
        {/* Search Input */}
        <div className="relative flex-1">
          <Search className="absolute right-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400" />
          <Input
            placeholder="חיפוש לפי שם או עיר..."
            value={searchQuery}
            onChange={(e) => onSearchChange(e.target.value)}
            className="pr-12 text-right bg-white/80 backdrop-blur-sm border-cyan-200 focus:border-cyan-400 focus:ring-cyan-200 rounded-xl h-12 shadow-sm"
          />
        </div>

        {/* Sort Select */}
        <Select value={sortBy} onValueChange={onSortChange}>
          <SelectTrigger className="w-48 h-12 bg-white/80 backdrop-blur-sm border-cyan-200 focus:border-cyan-400 rounded-xl shadow-sm">
            <SortDesc className="w-4 h-4 ml-2" />
            <SelectValue placeholder="מיון לפי..." />
          </SelectTrigger>
          <SelectContent>
            {SORT_OPTIONS.map((option) => {
              const IconComponent = option.icon;
              return (
                <SelectItem key={option.value} value={option.value}>
                  <div className="flex items-center gap-2">
                    <IconComponent className="w-4 h-4" />
                    {option.label}
                  </div>
                </SelectItem>
              );
            })}
          </SelectContent>
        </Select>

        {/* Filter Toggle */}
        <Button
          variant="outline"
          onClick={onToggleFilters}
          className={cn(
            "h-12 border-cyan-200 hover:bg-cyan-50 text-cyan-600 rounded-xl bg-white/80 backdrop-blur-sm shadow-sm",
            showFilters && "bg-cyan-100 border-cyan-300"
          )}
        >
          <Filter className="w-4 h-4 ml-2" />
          סינון
        </Button>

        {/* View Mode Toggle */}
        <ToggleGroup
          type="single"
          value={viewMode}
          onValueChange={(value: 'grid' | 'list') => value && onViewModeChange(value)}
          className="bg-white/80 backdrop-blur-sm shadow-sm rounded-xl border border-cyan-200"
        >
          <ToggleGroupItem 
            value="grid" 
            aria-label="Grid view"
            className="data-[state=on]:bg-cyan-500 data-[state=on]:text-white"
          >
            <LayoutGrid className="h-4 w-4" />
          </ToggleGroupItem>
          <ToggleGroupItem 
            value="list" 
            aria-label="List view"
            className="data-[state=on]:bg-cyan-500 data-[state=on]:text-white"
          >
            <List className="h-4 w-4" />
          </ToggleGroupItem>
        </ToggleGroup>
      </div>

      {/* Advanced Filters */}
      {showFilters && (
        <div className="pt-4 border-t border-cyan-100 space-y-4">
          <div>
            <h4 className="text-sm font-bold text-gray-700 mb-3 flex items-center gap-2">
              <Activity className="w-4 h-4 text-cyan-500" />
              סינון לפי סטטוס
            </h4>
            <div className="flex flex-wrap gap-2">
              {STATUS_OPTIONS.map((status) => {
                const IconComponent = status.icon;
                return (
                  <Button
                    key={status.value}
                    variant={statusFilter.includes(status.value) ? "default" : "outline"}
                    size="sm"
                    onClick={() => {
                      const newFilter = statusFilter.includes(status.value)
                        ? statusFilter.filter((s) => s !== status.value)
                        : [...statusFilter, status.value];
                      onStatusFilterChange(newFilter);
                    }}
                    className={cn(
                      "text-xs rounded-xl transition-all duration-300",
                      statusFilter.includes(status.value)
                        ? `bg-gradient-to-r ${status.color} text-white shadow-lg border-0`
                        : "border-gray-200 hover:bg-gray-50"
                    )}
                  >
                    <IconComponent className="w-3 h-3 ml-1" />
                    {status.label}
                  </Button>
                );
              })}
            </div>
          </div>

          {/* Clear Filters */}
          <div className="flex justify-end">
            <Button
              variant="ghost"
              size="sm"
              onClick={() => onStatusFilterChange([])}
              className="text-gray-500 hover:text-gray-700"
            >
              <RefreshCw className="w-3 h-3 ml-1" />
              נקה סינונים
            </Button>
          </div>
        </div>
      )}
    </CardContent>
  </Card>
);

// Enhanced Empty State
const EnhancedEmptyState: React.FC<{
  isFiltered: boolean;
  onClearFilters: () => void;
}> = ({ isFiltered, onClearFilters }) => (
  <div className="flex flex-col items-center justify-center min-h-[500px] text-center p-12">
    <div className="w-32 h-32 rounded-full bg-gradient-to-br from-purple-100 via-pink-100 to-blue-100 flex items-center justify-center shadow-xl mb-8">
      {isFiltered ? (
        <Search className="w-16 h-16 text-purple-400" />
      ) : (
        <Users className="w-16 h-16 text-purple-400" />
      )}
    </div>
    
    <h3 className="text-2xl font-bold text-gray-800 mb-4">
      {isFiltered ? 'לא נמצאו תוצאות' : 'אין הצעות כרגע'}
    </h3>
    
    <p className="text-gray-600 max-w-md mx-auto mb-6 leading-relaxed">
      {isFiltered 
        ? 'נסה לשנות את קריטריוני החיפוש או הסינון כדי למצוא את מה שאתה מחפש'
        : 'כשיהיו הצעות זמינות, הן יופיעו כאן'
      }
    </p>

    {isFiltered && (
      <Button
        onClick={onClearFilters}
        className="bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-700 hover:to-pink-700 text-white shadow-xl hover:shadow-2xl transition-all duration-300 rounded-xl"
      >
        <RefreshCw className="w-4 h-4 ml-2" />
        נקה סינון
      </Button>
    )}
  </div>
);

const SuggestionsList: React.FC<SuggestionsListProps> = ({
  suggestions,
  isLoading = false,
  onAction,
  className,
}) => {
  // Filter states
  const [searchQuery, setSearchQuery] = useState("");
  const [sortBy, setSortBy] = useState("latest");
  const [statusFilter, setStatusFilter] = useState<string[]>([]);
  const [showFilters, setShowFilters] = useState(false);
  const [viewMode, setViewMode] = useState<'grid' | 'list'>('grid');

  // Calculate stats
  const stats = useMemo(() => {
    const total = suggestions.length;
    const pending = suggestions.filter(s => 
      s.status === 'PENDING_FIRST_PARTY' || s.status === 'PENDING_SECOND_PARTY'
    ).length;
    const approved = suggestions.filter(s => 
      s.status === 'FIRST_PARTY_APPROVED' || s.status === 'SECOND_PARTY_APPROVED'
    ).length;
    const declined = suggestions.filter(s => 
      s.status === 'FIRST_PARTY_DECLINED' || s.status === 'SECOND_PARTY_DECLINED'
    ).length;
    const urgent = suggestions.filter(s => s.priority === 'URGENT').length;

    return { total, pending, approved, declined, urgent };
  }, [suggestions]);

  // Filter and sort suggestions
  const filteredSuggestions = useMemo(() => {
    let result = [...suggestions];

    // Apply status filter
    if (statusFilter.length > 0) {
      result = result.filter((s) => statusFilter.includes(s.status));
    }

    // Apply search filter
    if (searchQuery) {
      const query = searchQuery.toLowerCase();
      result = result.filter((s) => {
        const searchText = `${s.firstParty.firstName} ${s.firstParty.lastName} ${s.secondParty.firstName} ${s.secondParty.lastName} ${s.firstParty.profile?.city || ''} ${s.secondParty.profile?.city || ''}`.toLowerCase();
        return searchText.includes(query);
      });
    }

    // Apply sorting
    switch (sortBy) {
      case "latest":
        result.sort(
          (a, b) =>
            new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime()
        );
        break;
      case "oldest":
        result.sort(
          (a, b) =>
            new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime()
        );
        break;
      case "deadline":
        result.sort((a, b) => {
          if (!a.decisionDeadline) return 1;
          if (!b.decisionDeadline) return -1;
          return (
            new Date(a.decisionDeadline).getTime() -
            new Date(b.decisionDeadline).getTime()
          );
        });
        break;
      case "priority":
        const priorityOrder = { URGENT: 0, HIGH: 1, MEDIUM: 2, LOW: 3 };
        result.sort(
          (a, b) => 
            (priorityOrder[a.priority as keyof typeof priorityOrder] || 4) - 
            (priorityOrder[b.priority as keyof typeof priorityOrder] || 4)
        );
        break;
    }

    return result;
  }, [suggestions, searchQuery, sortBy, statusFilter]);

  const isFiltered = searchQuery !== '' || statusFilter.length > 0;

  const clearAllFilters = () => {
    setSearchQuery('');
    setStatusFilter([]);
  };

  return (
    <div className={cn("space-y-6", className)}>
      {/* Enhanced Stats */}
      <EnhancedListStats {...stats} />

      {/* Enhanced Filter Section */}
      <EnhancedFilterSection
        searchQuery={searchQuery}
        onSearchChange={setSearchQuery}
        sortBy={sortBy}
        onSortChange={setSortBy}
        statusFilter={statusFilter}
        onStatusFilterChange={setStatusFilter}
        showFilters={showFilters}
        onToggleFilters={() => setShowFilters(!showFilters)}
        viewMode={viewMode}
        onViewModeChange={setViewMode}
      />

      {/* Results Summary */}
      <div className="flex justify-between items-center text-sm text-gray-600 px-2">
        <span className="font-medium">
          מציג {filteredSuggestions.length} {filteredSuggestions.length === 1 ? 'הצעה' : 'הצעות'} מתוך {suggestions.length}
        </span>
        {filteredSuggestions.length > 0 && (
          <div className="flex items-center gap-2">
            <Sparkles className="w-4 h-4 text-purple-500" />
            <span className="font-medium text-purple-600">התאמות איכותיות</span>
          </div>
        )}
      </div>

      {/* Suggestions Grid/List */}
      {isLoading ? (
        <LoadingContainer>
          <div className="space-y-6">
            {/* Loading Stats */}
            <Card className="border-0 shadow-xl">
              <CardContent className="p-4">
                <div className="grid grid-cols-2 md:grid-cols-5 gap-4">
                  {Array.from({ length: 5 }).map((_, i) => (
                    <div key={i} className="text-center space-y-2">
                      <div className="w-12 h-12 bg-gray-200 rounded-full mx-auto animate-pulse"></div>
                      <div className="h-4 bg-gray-200 rounded animate-pulse"></div>
                    </div>
                  ))}
                </div>
              </CardContent>
            </Card>

            {/* Loading Cards */}
            <div className={cn(
              viewMode === 'grid'
                ? "grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6"
                : "space-y-4"
            )}>
              {Array.from({ length: 6 }).map((_, i) => (
                <div
                  key={i}
                  className="h-80 bg-gradient-to-br from-gray-100 to-gray-200 rounded-2xl animate-pulse shadow-lg"
                />
              ))}
            </div>
          </div>
        </LoadingContainer>
      ) : filteredSuggestions.length === 0 ? (
        <EnhancedEmptyState
          isFiltered={isFiltered}
          onClearFilters={clearAllFilters}
        />
      ) : (
        <div className={cn(
          "animate-fade-in-up",
          viewMode === 'grid'
            ? "grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6"
            : "space-y-6"
        )}>
          {filteredSuggestions.map((suggestion, index) => (
            <div
              key={suggestion.id}
              className="animate-scale-in"
              style={{
                animationDelay: `${index * 100}ms`,
                animationFillMode: 'both',
              }}
            >
              <SuggestionCard
                suggestion={suggestion as unknown as Suggestion}
                onAction={onAction}
                variant={viewMode === 'list' ? 'full' : 'full'}
                className={cn(
                  "card-hover-elegant shadow-lg hover:shadow-xl transition-all duration-300",
                  viewMode === 'list' && "flex"
                )}
              />
            </div>
          ))}
        </div>
      )}

      {/* Filter Summary */}
      {(searchQuery || statusFilter.length > 0) && (
        <Card className="border-0 shadow-lg bg-gradient-to-r from-purple-50 to-pink-50">
          <CardContent className="p-4">
            <div className="flex items-center justify-between">
              <div className="flex items-center gap-2 text-sm">
                <Filter className="w-4 h-4 text-purple-500" />
                <span className="font-medium text-purple-700">סינון פעיל:</span>
                
                {searchQuery && (
                  <Badge className="bg-gradient-to-r from-blue-500 to-cyan-500 text-white border-0 shadow-sm">
                    חיפוש: {searchQuery}
                  </Badge>
                )}
                
                {statusFilter.map((status) => {
                  const statusOption = STATUS_OPTIONS.find(opt => opt.value === status);
                  if (!statusOption) return null;
                  const IconComponent = statusOption.icon;
                  
                  return (
                    <Badge 
                      key={status}
                      className={cn(
                        `bg-gradient-to-r ${statusOption.color} text-white border-0 shadow-sm`
                      )}
                    >
                      <IconComponent className="w-3 h-3 ml-1" />
                      {statusOption.label}
                    </Badge>
                  );
                })}
              </div>
              
              <Button
                variant="ghost"
                size="sm"
                onClick={clearAllFilters}
                className="text-purple-600 hover:text-purple-700 hover:bg-purple-100 rounded-xl"
              >
                <RefreshCw className="w-3 h-3 ml-1" />
                נקה הכל
              </Button>
            </div>
          </CardContent>
        </Card>
      )}

      {/* Performance Insights */}
      {filteredSuggestions.length > 0 && (
        <Card className="border-0 shadow-lg bg-gradient-to-r from-emerald-50 to-green-50">
          <CardContent className="p-4">
            <div className="flex items-center justify-between">
              <div className="flex items-center gap-3">
                <div className="p-2 rounded-full bg-gradient-to-r from-emerald-500 to-green-500 text-white shadow-lg">
                  <BarChart3 className="w-4 h-4" />
                </div>
                <div>
                  <h4 className="font-bold text-emerald-800">תובנות ביצועים</h4>
                  <p className="text-sm text-emerald-600">
                    {Math.round((stats.approved / stats.total) * 100)}% אחוז אישור •{' '}
                    {stats.urgent > 0 && `${stats.urgent} דחופות •`}{' '}
                    {stats.pending} ממתינות לטיפול
                  </p>
                </div>
              </div>
              
              <div className="flex items-center gap-2">
                <div className="text-right text-xs text-emerald-600">
                  <div className="font-bold">{Math.round((stats.approved / Math.max(stats.total, 1)) * 100)}%</div>
                  <div>הצלחה</div>
                </div>
                <div className="w-16 h-2 bg-emerald-200 rounded-full overflow-hidden">
                  <div 
                    className="h-full bg-gradient-to-r from-emerald-500 to-green-500 transition-all duration-500"
                    style={{ width: `${Math.round((stats.approved / Math.max(stats.total, 1)) * 100)}%` }}
                  />
                </div>
              </div>
            </div>
          </CardContent>
        </Card>
      )}
    </div>
  );
};

export default SuggestionsList;
--- End of Content for SuggestionsList.tsx ---

================================================================================
Directory: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\suggestions\services
================================================================================

(This directory contains subdirectories but no files directly. See subdirectories below.)

================================================================================
Directory: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\suggestions\services\notification
================================================================================

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\suggestions\services\notification\NotificationService.ts
--------------------------------------------------------------------------------
Content:
// src/app/components/matchmaker/suggestions/services/notification/NotificationService.ts

import { MatchSuggestionStatus } from '@prisma/client';
import { SuggestionWithParties } from '../suggestions/StatusTransitionService';

export type RecipientInfo = {
  email: string;
  phone?: string; // Phone number with international prefix, e.g.: +972501234567
  name: string;
};

export type NotificationContent = {
  subject: string;
  body: string;
  htmlBody?: string; // HTML version for email
};

export type NotificationChannel = 'email' | 'whatsapp' | 'sms';

export type NotificationOptions = {
  channels: NotificationChannel[];
  notifyParties?: ('first' | 'second' | 'matchmaker')[];
  priority?: 'high' | 'normal' | 'low';
  attachments?: Array<{
    filename: string;
    content: Buffer | string;
    contentType: string;
  }>;
  customMessage?: string;
  metadata?: Record<string, unknown>;
};

export interface NotificationAdapter {
  canSendTo(recipient: RecipientInfo): boolean;
  send(recipient: RecipientInfo, content: NotificationContent): Promise<boolean>;
  getChannelType(): NotificationChannel;
}

export class NotificationService {
  private static instance: NotificationService;
  private adapters: Map<NotificationChannel, NotificationAdapter> = new Map();

  private constructor() {}

  public static getInstance(): NotificationService {
    if (!NotificationService.instance) {
      NotificationService.instance = new NotificationService();
    }
    return NotificationService.instance;
  }

  public registerAdapter(adapter: NotificationAdapter): void {
    this.adapters.set(adapter.getChannelType(), adapter);
    console.log(`Registered ${adapter.getChannelType()} adapter`);
  }

  public async sendNotification(
    recipient: RecipientInfo,
    content: NotificationContent,
    options: NotificationOptions
  ): Promise<Record<NotificationChannel, boolean>> {
    const results: Record<NotificationChannel, boolean> = {} as Record<NotificationChannel, boolean>;
    console.log(`Attempting to send notification to ${recipient.name} via channels:`, options.channels);

    for (const channel of options.channels) {
      const adapter = this.adapters.get(channel);
      if (!adapter) {
        console.warn(`No adapter registered for channel: ${channel}`);
        results[channel] = false;
        continue;
      }

      if (!adapter.canSendTo(recipient)) {
        console.warn(`Cannot send to recipient via ${channel}: missing required info`);
        results[channel] = false;
        continue;
      }

      try {
        console.log(`Sending ${channel} notification to ${recipient.name}`);
        results[channel] = await adapter.send(recipient, content);
        console.log(`${channel} notification sent successfully: ${results[channel]}`);
      } catch (error) {
        console.error(`Error sending notification via ${channel}:`, error);
        results[channel] = false;
      }
    }

    return results;
  }

  // Dedicated method for handling suggestion-related notifications
  public async handleSuggestionStatusChange(
    suggestion: SuggestionWithParties,
    options: Partial<NotificationOptions> = {}
  ): Promise<void> {
    console.log(`Processing notifications for suggestion ${suggestion.id} with status ${suggestion.status}`);
    
    const templateContent = this.getSuggestionTemplate(suggestion, options.customMessage);
    if (!templateContent) {
      console.log(`No template found for status ${suggestion.status} - skipping notification`);
      return;
    }
  
    const recipientsWithChannels = this.getRecipientsForSuggestion(suggestion);
    console.log(`Found ${recipientsWithChannels.length} potential recipients`);
  
    for (const { recipient, preferredChannels } of recipientsWithChannels) {
      // Filter recipients based on notifyParties if provided
      if (options.notifyParties) {
        const recipientType = this.getRecipientType(recipient, suggestion);
        if (!recipientType || !options.notifyParties.includes(recipientType)) {
          console.log(`Skipping recipient ${recipient.name} (${recipientType}) - not in notifyParties`, options.notifyParties);
          continue;
        }
      }
      
      const channelsToUse = options.channels || preferredChannels || ['email'];
      console.log(`Sending notification to ${recipient.name} via channels:`, channelsToUse);
      
      await this.sendNotification(
        recipient,
        templateContent,
        { ...options, channels: channelsToUse }
      );
    }
    
    console.log(`Finished processing notifications for suggestion ${suggestion.id}`);
  }

  // Helper method to determine recipient type
  private getRecipientType(
    recipient: RecipientInfo, 
    suggestion: SuggestionWithParties
  ): 'first' | 'second' | 'matchmaker' | null {
    if (recipient.email === suggestion.firstParty.email) {
      return 'first';
    } else if (recipient.email === suggestion.secondParty.email) {
      return 'second';
    } else if (recipient.email === suggestion.matchmaker.email) {
      return 'matchmaker';
    }
    return null;
  }

  private getSuggestionTemplate(
    suggestion: SuggestionWithParties,
    customMessage?: string
  ): NotificationContent | null {
    const baseUrl = process.env.NEXT_PUBLIC_BASE_URL || 'http://localhost:3000';
    
    // If there's a custom message, use it instead of the template
    if (customMessage) {
      const reviewUrl = `${baseUrl}/suggestions/${suggestion.id}/review`;
      return {
        subject: "עדכון בהצעת שידוך",
        body: `שלום,\n\n${customMessage}\n\nלצפייה בפרטי ההצעה: ${reviewUrl}\n\nבברכה,\nמערכת השידוכים`,
        htmlBody: `
          <div dir="rtl">
            <h2>שלום,</h2>
            <p>${customMessage}</p>
            <p>לצפייה בפרטי ההצעה: <a href="${reviewUrl}">לחץ כאן</a></p>
            <p>בברכה,<br>מערכת השידוכים</p>
          </div>
        `
      };
    }
    
    // Otherwise use the template based on status
    switch (suggestion.status) {
      case MatchSuggestionStatus.PENDING_FIRST_PARTY:
        return {
          subject: 'הצעת שידוך חדשה עבורך',
          body: `שלום ${suggestion.firstParty.firstName},\n\n${suggestion.matchmaker.firstName} ${suggestion.matchmaker.lastName} הציע/ה עבורך הצעת שידוך.\n\nלצפייה בפרטי ההצעה ומענה: ${baseUrl}/suggestions/${suggestion.id}/review\n\nבברכה,\nצוות המערכת`,
          htmlBody: `<div dir="rtl"><h2>שלום ${suggestion.firstParty.firstName},</h2><p>${suggestion.matchmaker.firstName} ${suggestion.matchmaker.lastName} הציע/ה עבורך הצעת שידוך.</p><p>לצפייה בפרטי ההצעה ומענה, אנא היכנס/י לקישור הבא:</p><p><a href="${baseUrl}/suggestions/${suggestion.id}/review">לצפייה בהצעה</a></p><p>בברכה,<br>צוות המערכת</p></div>`
        };
      
      case MatchSuggestionStatus.FIRST_PARTY_APPROVED:
        return {
          subject: 'עדכון סטטוס - הצעת שידוך אושרה על ידי הצד הראשון',
          body: `שלום ${suggestion.matchmaker.firstName},\n\n${suggestion.firstParty.firstName} ${suggestion.firstParty.lastName} אישר/ה את הצעת השידוך.\n\nההצעה תועבר כעת באופן אוטומטי לצד השני.\n\nלצפייה בפרטים נוספים: ${baseUrl}/dashboard/suggestions/${suggestion.id}\n\nבברכה,\nצוות המערכת`,
          htmlBody: `<div dir="rtl"><h2>שלום ${suggestion.matchmaker.firstName},</h2><p>${suggestion.firstParty.firstName} ${suggestion.firstParty.lastName} אישר/ה את הצעת השידוך.</p><p>ההצעה תועבר כעת באופן אוטומטי לצד השני.</p><p><a href="${baseUrl}/dashboard/suggestions/${suggestion.id}">לצפייה בפרטים נוספים</a></p><p>בברכה,<br>צוות המערכת</p></div>`
        };

      case MatchSuggestionStatus.FIRST_PARTY_DECLINED:
        return {
          subject: 'עדכון סטטוס - הצעת שידוך נדחתה',
          body: `שלום ${suggestion.matchmaker.firstName},\n\n${suggestion.firstParty.firstName} ${suggestion.firstParty.lastName} דחה/תה את הצעת השידוך.\n\nלצפייה בפרטים נוספים: ${baseUrl}/dashboard/suggestions/${suggestion.id}\n\nבברכה,\nצוות המערכת`,
          htmlBody: `<div dir="rtl"><h2>שלום ${suggestion.matchmaker.firstName},</h2><p>${suggestion.firstParty.firstName} ${suggestion.firstParty.lastName} דחה/תה את הצעת השידוך.</p><p><a href="${baseUrl}/dashboard/suggestions/${suggestion.id}">לצפייה בפרטים נוספים</a></p><p>בברכה,<br>צוות המערכת</p></div>`
        };

      case MatchSuggestionStatus.PENDING_SECOND_PARTY:
        return {
          subject: 'הצעת שידוך חדשה עבורך',
          body: `שלום ${suggestion.secondParty.firstName},\n\n${suggestion.matchmaker.firstName} ${suggestion.matchmaker.lastName} הציע/ה עבורך הצעת שידוך.\n\nהצד הראשון כבר אישר את ההצעה.\n\nלצפייה בפרטי ההצעה ומענה: ${baseUrl}/suggestions/${suggestion.id}/review\n\nבברכה,\nצוות המערכת`,
          htmlBody: `<div dir="rtl"><h2>שלום ${suggestion.secondParty.firstName},</h2><p>${suggestion.matchmaker.firstName} ${suggestion.matchmaker.lastName} הציע/ה עבורך הצעת שידוך.</p><p>הצד הראשון כבר אישר את ההצעה.</p><p><a href="${baseUrl}/suggestions/${suggestion.id}/review">לצפייה בפרטי ההצעה ומענה</a></p><p>בברכה,<br>צוות המערכת</p></div>`
        };

      case MatchSuggestionStatus.SECOND_PARTY_APPROVED:
        return {
          subject: 'עדכון סטטוס - הצעת שידוך אושרה על ידי הצד השני',
          body: `שלום ${suggestion.matchmaker.firstName},\n\n${suggestion.secondParty.firstName} ${suggestion.secondParty.lastName} אישר/ה את הצעת השידוך.\n\nשני הצדדים אישרו את ההצעה. ניתן כעת לשתף פרטי קשר.\n\nלצפייה בפרטים נוספים: ${baseUrl}/dashboard/suggestions/${suggestion.id}\n\nבברכה,\nצוות המערכת`,
          htmlBody: `<div dir="rtl"><h2>שלום ${suggestion.matchmaker.firstName},</h2><p>${suggestion.secondParty.firstName} ${suggestion.secondParty.lastName} אישר/ה את הצעת השידוך.</p><p>שני הצדדים אישרו את ההצעה. ניתן כעת לשתף פרטי קשר.</p><p><a href="${baseUrl}/dashboard/suggestions/${suggestion.id}">לצפייה בפרטים נוספים</a></p><p>בברכה,<br>צוות המערכת</p></div>`
        };

      case MatchSuggestionStatus.SECOND_PARTY_DECLINED:
        return {
          subject: 'עדכון סטטוס - הצעת שידוך נדחתה',
          body: `שלום ${suggestion.matchmaker.firstName},\n\n${suggestion.secondParty.firstName} ${suggestion.secondParty.lastName} דחה/תה את הצעת השידוך.\n\nלצפייה בפרטים נוספים: ${baseUrl}/dashboard/suggestions/${suggestion.id}\n\nבברכה,\nצוות המערכת`,
          htmlBody: `<div dir="rtl"><h2>שלום ${suggestion.matchmaker.firstName},</h2><p>${suggestion.secondParty.firstName} ${suggestion.secondParty.lastName} דחה/תה את הצעת השידוך.</p><p><a href="${baseUrl}/dashboard/suggestions/${suggestion.id}">לצפייה בפרטים נוספים</a></p><p>בברכה,<br>צוות המערכת</p></div>`
        };
    
      case MatchSuggestionStatus.CONTACT_DETAILS_SHARED:
        // Prepare contact details with multi-line support
        const firstPartyDetails = this.formatUserDetails(suggestion.firstParty);
        const secondPartyDetails = this.formatUserDetails(suggestion.secondParty);
        
        return {
          subject: 'פרטי קשר להצעת השידוך',
          body: `ברכות! שני הצדדים אישרו את הצעת השידוך.\n\nפרטי הקשר של הצד הראשון:\n${firstPartyDetails}\n\nפרטי הקשר של הצד השני:\n${secondPartyDetails}\n\nאנא צרו קשר בהקדם לתיאום פגישה ראשונה.\n\nבהצלחה!`,
          htmlBody: `<div dir="rtl"><h2>ברכות! שני הצדדים אישרו את הצעת השידוך.</h2><p>פרטי הקשר של הצד הראשון:</p><pre>${firstPartyDetails}</pre><p>פרטי הקשר של הצד השני:</p><pre>${secondPartyDetails}</pre><p>אנא צרו קשר בהקדם לתיאום פגישה ראשונה.</p><p>בהצלחה!</p></div>`
        };
      
      case MatchSuggestionStatus.AWAITING_FIRST_DATE_FEEDBACK:
        return {
          subject: 'בקשה למשוב על הפגישה הראשונה',
          body: `שלום,\n\nנשמח לקבל את המשוב שלך על הפגישה הראשונה.\n\nלשליחת המשוב: ${baseUrl}/suggestions/${suggestion.id}/feedback\n\nבברכה,\nצוות המערכת`,
          htmlBody: `<div dir="rtl"><h2>שלום,</h2><p>נשמח לקבל את המשוב שלך על הפגישה הראשונה.</p><p><a href="${baseUrl}/suggestions/${suggestion.id}/feedback">לשליחת המשוב</a></p><p>בברכה,<br>צוות המערכת</p></div>`
        };

      case MatchSuggestionStatus.THINKING_AFTER_DATE:
        return {
          subject: 'בקשת זמן למחשבה לאחר הפגישה',
          body: `שלום ${suggestion.matchmaker.firstName},\n\nאחד הצדדים ביקש זמן למחשבה לאחר הפגישה.\n\nלצפייה בפרטים נוספים: ${baseUrl}/dashboard/suggestions/${suggestion.id}\n\nבברכה,\nצוות המערכת`,
          htmlBody: `<div dir="rtl"><h2>שלום ${suggestion.matchmaker.firstName},</h2><p>אחד הצדדים ביקש זמן למחשבה לאחר הפגישה.</p><p><a href="${baseUrl}/dashboard/suggestions/${suggestion.id}">לצפייה בפרטים נוספים</a></p><p>בברכה,<br>צוות המערכת</p></div>`
        };

      case MatchSuggestionStatus.DATING:
        return {
          subject: 'עדכון סטטוס - בתהליך היכרות',
          body: `שלום ${suggestion.matchmaker.firstName},\n\nהזוג נמצא בתהליך היכרות.\n\nלצפייה בפרטים: ${baseUrl}/dashboard/suggestions/${suggestion.id}\n\nבברכה,\nצוות המערכת`,
          htmlBody: `<div dir="rtl"><h2>שלום ${suggestion.matchmaker.firstName},</h2><p>הזוג נמצא בתהליך היכרות.</p><p><a href="${baseUrl}/dashboard/suggestions/${suggestion.id}">לצפייה בפרטים</a></p><p>בברכה,<br>צוות המערכת</p></div>`
        };

      case MatchSuggestionStatus.ENGAGED:
        return {
          subject: 'מזל טוב! - אירוסין',
          body: `מזל טוב ${suggestion.firstParty.firstName} ו${suggestion.secondParty.firstName}!\n\nאנו שמחים לשמוע על האירוסין ומאחלים לכם המון הצלחה בהמשך הדרך.\n\nבברכה,\nצוות המערכת`,
          htmlBody: `<div dir="rtl"><h2>מזל טוב ${suggestion.firstParty.firstName} ו${suggestion.secondParty.firstName}!</h2><p>אנו שמחים לשמוע על האירוסין ומאחלים לכם המון הצלחה בהמשך הדרך.</p><p>בברכה,<br>צוות המערכת</p></div>`
        };

      case MatchSuggestionStatus.MARRIED:
        return {
          subject: 'מזל טוב! - חתונה',
          body: `מזל טוב ${suggestion.firstParty.firstName} ו${suggestion.secondParty.firstName}!\n\nאנו שמחים לשמוע על החתונה ומאחלים לכם חיים מאושרים יחד.\n\nבברכה,\nצוות המערכת`,
          htmlBody: `<div dir="rtl"><h2>מזל טוב ${suggestion.firstParty.firstName} ו${suggestion.secondParty.firstName}!</h2><p>אנו שמחים לשמוע על החתונה ומאחלים לכם חיים מאושרים יחד.</p><p>בברכה,<br>צוות המערכת</p></div>`
        };

      case MatchSuggestionStatus.EXPIRED:
        return {
          subject: 'הצעת השידוך פגה',
          body: `שלום ${suggestion.matchmaker.firstName},\n\nהצעת השידוך פגה עקב חוסר מענה במועד.\n\nלצפייה בפרטים: ${baseUrl}/dashboard/suggestions/${suggestion.id}\n\nבברכה,\nצוות המערכת`,
          htmlBody: `<div dir="rtl"><h2>שלום ${suggestion.matchmaker.firstName},</h2><p>הצעת השידוך פגה עקב חוסר מענה במועד.</p><p><a href="${baseUrl}/dashboard/suggestions/${suggestion.id}">לצפייה בפרטים</a></p><p>בברכה,<br>צוות המערכת</p></div>`
        };

      default:
        // For other statuses, return null to skip notification
        console.log(`No template defined for status: ${suggestion.status}`);
        return null;
    }
  }

  private getRecipientsForSuggestion(suggestion: SuggestionWithParties): Array<{
    recipient: RecipientInfo;
    preferredChannels: NotificationChannel[];
  }> {
    const recipients: Array<{
      recipient: RecipientInfo;
      preferredChannels: NotificationChannel[];
    }> = [];
    
    // Logic to determine recipients based on suggestion status
    switch (suggestion.status) {
      case MatchSuggestionStatus.DRAFT:
        recipients.push({
          recipient: {
            email: suggestion.matchmaker.email,
            phone: suggestion.matchmaker.phone || undefined,
            name: `${suggestion.matchmaker.firstName} ${suggestion.matchmaker.lastName}`
          },
          preferredChannels: ['email'] // Email only for drafts
        });
        break;
      
      case MatchSuggestionStatus.PENDING_FIRST_PARTY:
        recipients.push({
          recipient: {
            email: suggestion.firstParty.email,
            phone: suggestion.firstParty.phone || undefined,
            name: `${suggestion.firstParty.firstName} ${suggestion.firstParty.lastName}`
          },
          preferredChannels: ['email', 'whatsapp'] // Email and WhatsApp for candidates
        });
        break;
      
      case MatchSuggestionStatus.FIRST_PARTY_APPROVED:
      case MatchSuggestionStatus.FIRST_PARTY_DECLINED:
        recipients.push({
          recipient: {
            email: suggestion.matchmaker.email,
            phone: suggestion.matchmaker.phone || undefined,
            name: `${suggestion.matchmaker.firstName} ${suggestion.matchmaker.lastName}`
          },
          preferredChannels: ['email', 'whatsapp'] // Email and WhatsApp for matchmaker
        });
        break;
      
      case MatchSuggestionStatus.PENDING_SECOND_PARTY:
        recipients.push({
          recipient: {
            email: suggestion.secondParty.email,
            phone: suggestion.secondParty.phone || undefined,
            name: `${suggestion.secondParty.firstName} ${suggestion.secondParty.lastName}`
          },
          preferredChannels: ['email', 'whatsapp'] // Email and WhatsApp for candidates
        });
        break;
      
      case MatchSuggestionStatus.SECOND_PARTY_APPROVED:
      case MatchSuggestionStatus.SECOND_PARTY_DECLINED:
        recipients.push({
          recipient: {
            email: suggestion.matchmaker.email,
            phone: suggestion.matchmaker.phone || undefined,
            name: `${suggestion.matchmaker.firstName} ${suggestion.matchmaker.lastName}`
          },
          preferredChannels: ['email', 'whatsapp'] // Email and WhatsApp for matchmaker
        });
        break;
      
      case MatchSuggestionStatus.AWAITING_MATCHMAKER_APPROVAL:
        recipients.push({
          recipient: {
            email: suggestion.matchmaker.email,
            phone: suggestion.matchmaker.phone || undefined,
            name: `${suggestion.matchmaker.firstName} ${suggestion.matchmaker.lastName}`
          },
          preferredChannels: ['email', 'whatsapp'] // Email and WhatsApp for matchmaker
        });
        break;
      
      case MatchSuggestionStatus.CONTACT_DETAILS_SHARED:
        // Send to both parties and matchmaker
        recipients.push(
          {
            recipient: {
              email: suggestion.firstParty.email,
              phone: suggestion.firstParty.phone || undefined,
              name: `${suggestion.firstParty.firstName} ${suggestion.firstParty.lastName}`
            },
            preferredChannels: ['email', 'whatsapp']
          },
          {
            recipient: {
              email: suggestion.secondParty.email,
              phone: suggestion.secondParty.phone || undefined,
              name: `${suggestion.secondParty.firstName} ${suggestion.secondParty.lastName}`
            },
            preferredChannels: ['email', 'whatsapp']
          },
          {
            recipient: {
              email: suggestion.matchmaker.email,
              phone: suggestion.matchmaker.phone || undefined,
              name: `${suggestion.matchmaker.firstName} ${suggestion.matchmaker.lastName}`
            },
            preferredChannels: ['email']
          }
        );
        break;
      
      case MatchSuggestionStatus.AWAITING_FIRST_DATE_FEEDBACK:
        // Send to both parties
        recipients.push(
          {
            recipient: {
              email: suggestion.firstParty.email,
              phone: suggestion.firstParty.phone || undefined,
              name: `${suggestion.firstParty.firstName} ${suggestion.firstParty.lastName}`
            },
            preferredChannels: ['email', 'whatsapp']
          },
          {
            recipient: {
              email: suggestion.secondParty.email,
              phone: suggestion.secondParty.phone || undefined,
              name: `${suggestion.secondParty.firstName} ${suggestion.secondParty.lastName}`
            },
            preferredChannels: ['email', 'whatsapp']
          }
        );
        break;
      
      case MatchSuggestionStatus.ENGAGED:
      case MatchSuggestionStatus.MARRIED:
        // Send to both parties and matchmaker
        recipients.push(
          {
            recipient: {
              email: suggestion.firstParty.email,
              phone: suggestion.firstParty.phone || undefined,
              name: `${suggestion.firstParty.firstName} ${suggestion.firstParty.lastName}`
            },
            preferredChannels: ['email', 'whatsapp']
          },
          {
            recipient: {
              email: suggestion.secondParty.email,
              phone: suggestion.secondParty.phone || undefined,
              name: `${suggestion.secondParty.firstName} ${suggestion.secondParty.lastName}`
            },
            preferredChannels: ['email', 'whatsapp']
          },
          {
            recipient: {
              email: suggestion.matchmaker.email,
              phone: suggestion.matchmaker.phone || undefined,
              name: `${suggestion.matchmaker.firstName} ${suggestion.matchmaker.lastName}`
            },
            preferredChannels: ['email', 'whatsapp']
          }
        );
        break;

      default:
        // Default: send to matchmaker only
        recipients.push({
          recipient: {
            email: suggestion.matchmaker.email,
            phone: suggestion.matchmaker.phone || undefined,
            name: `${suggestion.matchmaker.firstName} ${suggestion.matchmaker.lastName}`
          },
          preferredChannels: ['email']
        });
        break;
    }

    return recipients;
  }

  // Helper function to format contact details
  private formatUserDetails(user: { 
    firstName: string; 
    lastName: string; 
    email: string; 
    phone?: string | null 
  }): string {
    const details = [
      `שם: ${user.firstName} ${user.lastName}`,
      `אימייל: ${user.email}`,
    ];

    if (user.phone) {
      details.push(`טלפון: ${user.phone}`);
    }

    return details.join('\n');
  }
}

export const notificationService = NotificationService.getInstance();
--- End of Content for NotificationService.ts ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\suggestions\services\notification\initNotifications.ts
--------------------------------------------------------------------------------
Content:
// src/app/components/matchmaker/suggestions/services/notification/initNotifications.ts

import { notificationService } from './NotificationService';
import { emailAdapter } from './adapters/EmailAdapter';
import { whatsAppAdapter } from './adapters/WhatsAppAdapter';

// Define notification channel type
export type NotificationChannel = 'email' | 'whatsapp' | 'sms';

export type NotificationOptions = {
    channels: NotificationChannel[];
    notifyParties?: ('first' | 'second' | 'matchmaker')[];
    customMessage?: string;
  };

/**
 * Initializes the notification service by registering all available adapters
 * @returns The initialized notification service
 */
export function initNotificationService() {
  // Register adapters
  notificationService.registerAdapter(emailAdapter);
  notificationService.registerAdapter(whatsAppAdapter);
  
  console.log('Notification service initialized with email and WhatsApp adapters');
  
  return notificationService;
}
--- End of Content for initNotifications.ts ---

================================================================================
Directory: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\suggestions\services\notification\adapters
================================================================================

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\suggestions\services\notification\adapters\EmailAdapter.ts
--------------------------------------------------------------------------------
Content:
// src/app/components/matchmaker/suggestions/services/notification/adapters/EmailAdapter.ts

import { NotificationAdapter, NotificationChannel, RecipientInfo, NotificationContent } from '../NotificationService';
import nodemailer from 'nodemailer';

export class EmailAdapter implements NotificationAdapter {
  private static instance: EmailAdapter;
  private transporter: nodemailer.Transporter;

  private constructor() {
    // Configure the transporter exactly like in EmailService
    this.transporter = nodemailer.createTransport({
      service: 'gmail',
      auth: {
        user: process.env.GMAIL_USER || '',
        pass: process.env.GMAIL_APP_PASSWORD || '',
      },
      tls: {
        rejectUnauthorized: false
      }
    });

    // Verify email configuration on initialization
    this.verifyEmailConfig();
  }

  private async verifyEmailConfig(): Promise<void> {
    try {
      await this.transporter.verify();
      console.log('Email configuration verified successfully');
    } catch (error) {
      console.error('Email configuration verification failed:', error);
      // Don't throw, to allow the system to continue even if verification fails
    }
  }

  public static getInstance(): EmailAdapter {
    if (!EmailAdapter.instance) {
      EmailAdapter.instance = new EmailAdapter();
    }
    return EmailAdapter.instance;
  }

  public getChannelType(): NotificationChannel {
    return 'email';
  }

  public canSendTo(recipient: RecipientInfo): boolean {
    return !!recipient.email;
  }

  public async send(recipient: RecipientInfo, content: NotificationContent): Promise<boolean> {
    try {
      const result = await this.transporter.sendMail({
        from: `${process.env.EMAIL_FROM_NAME || 'מערכת השידוכים'} <${process.env.GMAIL_USER || ''}>`,
        to: recipient.email,
        subject: content.subject,
        text: content.body,
        html: content.htmlBody || content.body.replace(/\n/g, '<br>'),
      });

      console.log('Email sent successfully:', {
        messageId: result.messageId,
        response: result.response,
        to: recipient.email,
        subject: content.subject
      });

      return true;
    } catch (error) {
      console.error('Detailed error sending email:', {
        error: error instanceof Error ? {
          name: error.name,
          message: error.message,
          stack: error.stack
        } : error,
        recipient: recipient.email,
        subject: content.subject
      });
      return false;
    }
  }
}

export const emailAdapter = EmailAdapter.getInstance();
--- End of Content for EmailAdapter.ts ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\suggestions\services\notification\adapters\WhatsAppAdapter.ts
--------------------------------------------------------------------------------
Content:
// lib/WhatsAppAdapter.ts
import {
  NotificationAdapter,
  NotificationChannel,
  RecipientInfo,
  NotificationContent as BaseNotificationContent
} from '../NotificationService'; // Assuming NotificationService.ts exists in the same directory
import twilio from 'twilio';
// Import the specific type for message creation options if available
import { MessageListInstanceCreateOptions } from 'twilio/lib/rest/api/v2010/account/message';

// --- Define an extended NotificationContent interface ---
// This adds the optional adapter-specific data structure
interface NotificationContent extends BaseNotificationContent {
  _adapterSpecificData?: {
      contentSid?: string;
      contentVariables?: string; // Should be a JSON string
      // Add other potential adapter-specific fields here
  };
}
// --- End Interface Extension ---

// --- Type Guard for Twilio-like Errors ---
interface PotentialTwilioError {
  code?: number | string;
  message?: string;
  // Add other potential properties like 'status', 'moreInfo', etc. if needed
}

/**
* Type guard to check if an unknown error object might be a Twilio API error
* by checking for the presence of 'code' or 'message' properties.
* @param error The unknown value caught in a catch block.
* @returns True if the error object has properties common to Twilio errors, false otherwise.
*/
function isPotentialTwilioError(error: unknown): error is PotentialTwilioError {
  // Check if it's a non-null object and has either 'code' or 'message' property
  return typeof error === 'object' && error !== null && ('code' in error || 'message' in error);
}
// --- End Type Guard ---

// --- Helper: Logger (optional but recommended) ---
// Using Record<string, unknown> or object instead of any
const logger = {
info: (message: string, meta?: Record<string, unknown> | object) => {
  console.log(JSON.stringify({ timestamp: new Date().toISOString(), level: 'info', service: 'WhatsAppAdapter', message, ...(meta || {}) }));
},
warn: (message: string, meta?: Record<string, unknown> | object) => {
  console.warn(JSON.stringify({ timestamp: new Date().toISOString(), level: 'warn', service: 'WhatsAppAdapter', message, ...(meta || {}) }));
},
error: (message: string, meta?: Record<string, unknown> | object) => {
  let logMeta = meta || {};
  // If the meta object itself is an Error, extract relevant info
  if (meta instanceof Error) {
      logMeta = { name: meta.name, message: meta.message, stack: meta.stack };
  } else if (isPotentialTwilioError(meta)) {
      // If it's potentially a Twilio error passed directly
      logMeta = { code: meta.code, message: meta.message, ...meta };
  }
  console.error(JSON.stringify({ timestamp: new Date().toISOString(), level: 'error', service: 'WhatsAppAdapter', message, ...logMeta }));
},
};
// --- End Logger ---


export class WhatsAppAdapter implements NotificationAdapter {
// Singleton instance
private static instance: WhatsAppAdapter;
// Twilio client instance (typed)
private client: twilio.Twilio | null = null;
// Configured Twilio WhatsApp sender number
private fromNumber: string = '';

/**
 * Private constructor to enforce singleton pattern.
 * Initializes the Twilio client using environment variables.
 */
private constructor() {
  const accountSid = process.env.TWILIO_ACCOUNT_SID;
  const authToken = process.env.TWILIO_AUTH_TOKEN;
  this.fromNumber = process.env.TWILIO_WHATSAPP_NUMBER || ''; // Get number from env

  // Validate configuration
  if (!accountSid || !authToken || !this.fromNumber) {
    logger.error('Missing Twilio configuration details', {
        hasSid: !!accountSid,
        hasToken: !!authToken,
        hasWhatsAppNumber: !!this.fromNumber,
        detail: "WhatsApp notifications will be unavailable."
    });
    // Do not throw, allow graceful degradation if possible
  } else {
    try {
      // Initialize Twilio client
      this.client = twilio(accountSid, authToken);
      logger.info('Twilio client initialized successfully', { fromWhatsAppNumber: this.fromNumber });
    } catch (error: unknown) { // Catch as unknown
      logger.error('Failed to initialize Twilio client during constructor', { error });
      this.client = null; // Ensure client is null on initialization failure
    }
  }
}

/**
 * Gets the singleton instance of the WhatsAppAdapter.
 * @returns The WhatsAppAdapter instance.
 */
public static getInstance(): WhatsAppAdapter {
  if (!WhatsAppAdapter.instance) {
    WhatsAppAdapter.instance = new WhatsAppAdapter();
  }
  return WhatsAppAdapter.instance;
}

/**
 * Returns the channel type handled by this adapter.
 * @returns The notification channel type ('whatsapp').
 */
public getChannelType(): NotificationChannel {
  return 'whatsapp';
}

/**
 * Checks if this adapter is capable of sending a notification to the given recipient.
 * Requires a valid phone number, an initialized Twilio client, and a configured 'from' number.
 * @param recipient Information about the recipient.
 * @returns True if the adapter can send, false otherwise.
 */
public canSendTo(recipient: RecipientInfo): boolean {
  const hasValidPhone = !!recipient.phone && recipient.phone.length > 8; // Basic validation
  const isClientReady = this.client !== null;
  const hasFromNumber = this.fromNumber !== '';
  const canSend = hasValidPhone && isClientReady && hasFromNumber;

  if (!canSend) {
      let reason = 'Unknown';
      if (!hasValidPhone) reason = 'Invalid or missing phone number';
      else if (!isClientReady) reason = 'Twilio client not initialized';
      else if (!hasFromNumber) reason = 'Twilio "from" number not configured';
      logger.warn('Cannot send WhatsApp message due to configuration or recipient data', {
          reason: reason,
          recipientPhone: recipient.phone // Log phone for debugging
      });
  }
  return canSend;
}

/**
 * Formats a phone number into E.164 standard without the leading '+'.
 * Required for Twilio's `to` parameter when prefixed with `whatsapp:`.
 * Handles Israeli numbers starting with '0'.
 * Example: 0501234567 -> 972501234567
 * @param phone The phone number string to format.
 * @returns The formatted phone number string.
 */
private formatPhoneNumber(phone: string): string {
  // Remove all non-digit characters
  let cleaned = phone.replace(/\D/g, '');
  // Prepend country code for Israeli numbers if '0' prefix exists
  if (cleaned.startsWith('0')) {
    cleaned = '972' + cleaned.substring(1);
  }
  // Remove leading '+' if present (it's added later in the `whatsapp:` prefix)
  if (cleaned.startsWith('+')) {
    cleaned = cleaned.substring(1);
  }
  return cleaned;
}

/**
 * Sends a notification via WhatsApp using the Twilio API.
 * Prefers using template messages if configured via `_adapterSpecificData`.
 * Falls back to raw text messages otherwise (less reliable for business-initiated messages).
 * @param recipient Information about the recipient.
 * @param content The notification content, potentially including adapter-specific data.
 * @returns A promise that resolves to true if the message was successfully queued by Twilio, false otherwise.
 */
public async send(recipient: RecipientInfo, content: NotificationContent): Promise<boolean> {
  logger.info('Attempting to send WhatsApp message', {
    recipientPhone: recipient.phone,
    fromNumber: this.fromNumber,
    hasClient: !!this.client,
    contentSid: content._adapterSpecificData?.contentSid,
    hasContentVariables: !!content._adapterSpecificData?.contentVariables,
  });

  // --- Pre-send Checks ---
  if (!this.client) {
    logger.error('Twilio client not initialized. Cannot send WhatsApp message.');
    return false;
  }
  if (!recipient.phone) {
    logger.error('Recipient phone number is missing. Cannot send WhatsApp message.');
    return false;
  }
  if (!this.fromNumber) {
      logger.error('Twilio "from" WhatsApp number is not configured. Cannot send message.');
      return false;
  }
  // --- End Pre-send Checks ---


  try {
    // --- Format Numbers ---
    const toNumberE164 = this.formatPhoneNumber(recipient.phone);
    // Ensure 'from' number has '+' prefix for the whatsapp: schema
    const fromWhatsAppFormatted = `whatsapp:${this.fromNumber.startsWith('+') ? this.fromNumber : '+' + this.fromNumber}`;
    // Ensure 'to' number has '+' prefix for the whatsapp: schema
    const toWhatsAppFormatted = `whatsapp:+${toNumberE164}`;

    logger.info(`Formatted numbers for sending via Twilio`, { from: fromWhatsAppFormatted, to: toWhatsAppFormatted });
    // --- End Format Numbers ---


    // --- Prepare Message Payload ---
    let messagePayload: MessageListInstanceCreateOptions;
    const adapterData = content._adapterSpecificData;

    if (adapterData?.contentSid && adapterData?.contentVariables) {
       // **Use Template Messaging**
       logger.info(`Preparing WhatsApp template message`, { contentSid: adapterData.contentSid });
       messagePayload = {
          from: fromWhatsAppFormatted,
          to: toWhatsAppFormatted,
          contentSid: adapterData.contentSid, // The approved template SID
          contentVariables: adapterData.contentVariables, // JSON string of variables {"1": "value1", "2": "value2"}
          // Optional: Specify Messaging Service SID if using one
          // messagingServiceSid: process.env.TWILIO_MESSAGING_SERVICE_SID
       };
    } else {
       // **Use Raw Text Messaging (Fallback)**
       // Note: This might fail if outside the 24-hour customer service window
       // or if WhatsApp/Twilio policies require templates for this type of message.
       const bodyText = content.body || content.subject || 'הודעה ממערכת השידוכים'; // Determine fallback content
       logger.warn(`Preparing raw text WhatsApp message (using fallback, might fail)`, { bodyLength: bodyText.length });
       messagePayload = {
          from: fromWhatsAppFormatted,
          to: toWhatsAppFormatted,
          body: bodyText, // The actual text message content
          // Optional: Specify Messaging Service SID if using one
          // messagingServiceSid: process.env.TWILIO_MESSAGING_SERVICE_SID
       };
    }
    // --- End Prepare Message Payload ---


    // --- Send Message via Twilio API ---
    logger.info("Sending message payload to Twilio API", { payload: messagePayload }); // Be cautious logging full payload in production if sensitive
    const message = await this.client.messages.create(messagePayload);
    // --- End Send Message ---


    // --- Log Success ---
    // The message status here is typically 'queued' or 'sending'. Delivery confirmation is asynchronous.
    logger.info('WhatsApp message request processed successfully by Twilio', {
      messageSid: message.sid,
      status: message.status,
      to: toWhatsAppFormatted,
      from: fromWhatsAppFormatted,
      price: message.price, // Log cost if available
      priceUnit: message.priceUnit,
      errorCode: message.errorCode, // Log if Twilio detected an error immediately
      errorMessage: message.errorMessage,
    });
    // We return true because Twilio accepted the request. Delivery is not guaranteed at this point.
    return true;
    // --- End Log Success ---

  } catch (error: unknown) { // Catch error as unknown
    // --- Handle Errors ---
    let errorMessage = 'Unknown error occurred while sending WhatsApp message.';
    let errorCode: number | string | undefined;

    // Use the type guard to safely access potential error properties
    if (isPotentialTwilioError(error)) {
        errorCode = error.code;
        errorMessage = error.message || errorMessage;
    } else if (error instanceof Error) {
        // Standard JavaScript Error
        errorMessage = error.message;
    } else if (typeof error === 'string') {
        // Simple string error
        errorMessage = error;
    }

    // Log detailed error information
    logger.error('Failed to send WhatsApp message via Twilio', {
      errorCode,
      errorMessage,
      recipient: `whatsapp:+${this.formatPhoneNumber(recipient.phone)}`, // Log formatted number for debugging
      from: `whatsapp:${this.fromNumber.startsWith('+') ? this.fromNumber : '+' + this.fromNumber}`,
      // Pass the original error object for full details in structured logs
      errorDetails: error
    });

    // Specific handling/logging for common, informative errors
    if (errorCode === 63018 || errorCode === 21614) { // Common codes for non-WhatsApp/incapable numbers
         logger.error(`Recipient number appears invalid or not registered on WhatsApp.`, { phone: recipient.phone, errorCode });
         // Consider adding logic here: maybe mark the user's number as invalid? Notify admin?
    } else if (errorCode === 63016) { // Common code for failing outside the 24-hour window without a template
          logger.warn(`Failed to send non-template message outside 24-hour window.`, { phone: recipient.phone, errorCode });
    }

    return false; // Indicate that sending failed
    // --- End Handle Errors ---
  }
}
}

// Export the singleton instance for use in other parts of the application
export const whatsAppAdapter = WhatsAppAdapter.getInstance();
--- End of Content for WhatsAppAdapter.ts ---

================================================================================
Directory: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\suggestions\services\suggestions
================================================================================

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\suggestions\services\suggestions\StatusTransitionService.ts
--------------------------------------------------------------------------------
Content:
// src/app/components/matchmaker/suggestions/services/suggestions/StatusTransitionService.ts

import { MatchSuggestionStatus, User, MatchSuggestion, Profile } from "@prisma/client";
import prisma from "@/lib/prisma";
import { notificationService } from "../notification/NotificationService";


type UserWithProfile = User & {
  profile: Profile | null;
};

export type SuggestionWithParties = MatchSuggestion & {
  firstParty: UserWithProfile;
  secondParty: UserWithProfile;
  matchmaker: User;
};

type TransitionOptions = {
  sendNotifications?: boolean;
  customMessage?: string;
  notifyParties?: ('first' | 'second' | 'matchmaker')[];
};

export class StatusTransitionService {
  private static instance: StatusTransitionService;
  private constructor() {}

  public static getInstance(): StatusTransitionService {
    if (!StatusTransitionService.instance) {
      StatusTransitionService.instance = new StatusTransitionService();
    }
    return StatusTransitionService.instance;
  }

  async transitionStatus(
    suggestion: SuggestionWithParties,
    newStatus: MatchSuggestionStatus,
    notes?: string,
    options: TransitionOptions = {}
  ): Promise<SuggestionWithParties> {
    const previousStatus = suggestion.status;
    const mergedOptions = {
      sendNotifications: true,
      notifyParties: ['first', 'second', 'matchmaker'],
      ...options
    };

    // Validate the transition
    this.validateStatusTransition(previousStatus, newStatus);

    // Perform the status transition in a transaction
    const updatedSuggestion = await prisma.$transaction(async (tx) => {
      // Update the suggestion status
      const updated = await tx.matchSuggestion.update({
        where: { id: suggestion.id },
        data: {
          status: newStatus,
          previousStatus,
          lastStatusChange: new Date(),
          lastActivity: new Date(),
          
          // Update timing fields based on status
          ...(newStatus === MatchSuggestionStatus.FIRST_PARTY_APPROVED && {
            firstPartyResponded: new Date(),
          }),
          ...(newStatus === MatchSuggestionStatus.PENDING_SECOND_PARTY && {
            secondPartySent: new Date(),
          }),
          ...(newStatus === MatchSuggestionStatus.SECOND_PARTY_APPROVED && {
            secondPartyResponded: new Date(),
          }),
          ...(newStatus === MatchSuggestionStatus.CONTACT_DETAILS_SHARED && {
            closedAt: new Date(),
          }),
          ...(newStatus === MatchSuggestionStatus.MEETING_SCHEDULED && {
            firstMeetingScheduled: new Date(),
          }),
        },
        include: {
          firstParty: {
            include: { profile: true }
          },
          secondParty: {
            include: { profile: true }
          },
          matchmaker: true,
        },
      });

      // Create status history record
      await tx.suggestionStatusHistory.create({
        data: {
          suggestionId: suggestion.id,
          status: newStatus,
          notes: notes || `Status changed from ${previousStatus} to ${newStatus}`,
        },
      });

      return updated;
    });

    // Only send notifications if option is enabled
    if (mergedOptions.sendNotifications) {
      try {
        // Utilize the notification service for all channels (email, WhatsApp, etc.)
        await notificationService.handleSuggestionStatusChange(
          
          updatedSuggestion, 
          {
            channels: ['email', 'whatsapp'],
            notifyParties: mergedOptions.notifyParties as ('first' | 'second' | 'matchmaker')[],
            customMessage: mergedOptions.customMessage
          }
        );
        
        console.log(`Notifications sent for suggestion ${updatedSuggestion.id} status change to ${newStatus}`);
      } catch (error) {
        // Log error but don't fail the transition
        console.error('Error sending status transition notifications:', error);
      }
    }

    return updatedSuggestion;
  }

  private validateStatusTransition(
    currentStatus: MatchSuggestionStatus, 
    newStatus: MatchSuggestionStatus
  ): void {
    const validTransitions: Record<MatchSuggestionStatus, MatchSuggestionStatus[]> = {
      DRAFT: [MatchSuggestionStatus.PENDING_FIRST_PARTY],
      PENDING_FIRST_PARTY: [
        MatchSuggestionStatus.FIRST_PARTY_APPROVED,
        MatchSuggestionStatus.FIRST_PARTY_DECLINED,
        MatchSuggestionStatus.CANCELLED
      ],
      FIRST_PARTY_APPROVED: [
        MatchSuggestionStatus.PENDING_SECOND_PARTY,
        MatchSuggestionStatus.CANCELLED
      ],
      FIRST_PARTY_DECLINED: [
        MatchSuggestionStatus.CLOSED
      ],
      PENDING_SECOND_PARTY: [
        MatchSuggestionStatus.SECOND_PARTY_APPROVED,
        MatchSuggestionStatus.SECOND_PARTY_DECLINED,
        MatchSuggestionStatus.CANCELLED
      ],
      SECOND_PARTY_APPROVED: [
        MatchSuggestionStatus.CONTACT_DETAILS_SHARED,
        MatchSuggestionStatus.CANCELLED
      ],
      SECOND_PARTY_DECLINED: [
        MatchSuggestionStatus.CLOSED
      ],
      AWAITING_MATCHMAKER_APPROVAL: [
        MatchSuggestionStatus.CONTACT_DETAILS_SHARED,
        MatchSuggestionStatus.CANCELLED
      ],
      CONTACT_DETAILS_SHARED: [
        MatchSuggestionStatus.AWAITING_FIRST_DATE_FEEDBACK,
        MatchSuggestionStatus.CANCELLED
      ],
      AWAITING_FIRST_DATE_FEEDBACK: [
        MatchSuggestionStatus.THINKING_AFTER_DATE,
        MatchSuggestionStatus.ENDED_AFTER_FIRST_DATE,
        MatchSuggestionStatus.CANCELLED
      ],
      THINKING_AFTER_DATE: [
        MatchSuggestionStatus.PROCEEDING_TO_SECOND_DATE,
        MatchSuggestionStatus.ENDED_AFTER_FIRST_DATE,
        MatchSuggestionStatus.CANCELLED
      ],
      PROCEEDING_TO_SECOND_DATE: [
        MatchSuggestionStatus.DATING,
        MatchSuggestionStatus.CANCELLED
      ],
      ENDED_AFTER_FIRST_DATE: [
        MatchSuggestionStatus.CLOSED
      ],
      MEETING_PENDING: [
        MatchSuggestionStatus.MEETING_SCHEDULED,
        MatchSuggestionStatus.CANCELLED
      ],
      MEETING_SCHEDULED: [
        MatchSuggestionStatus.DATING,
        MatchSuggestionStatus.CANCELLED
      ],
      MATCH_APPROVED: [
        MatchSuggestionStatus.DATING,
        MatchSuggestionStatus.CANCELLED
      ],
      MATCH_DECLINED: [
        MatchSuggestionStatus.CLOSED
      ],
      DATING: [
        MatchSuggestionStatus.ENGAGED,
        MatchSuggestionStatus.CLOSED,
        MatchSuggestionStatus.CANCELLED
      ],
      ENGAGED: [
        MatchSuggestionStatus.MARRIED,
        MatchSuggestionStatus.CANCELLED
      ],
      MARRIED: [],
      EXPIRED: [],
      CLOSED: [],
      CANCELLED: []
    };

    if (!validTransitions[currentStatus]?.includes(newStatus)) {
      throw new Error(
        `Invalid status transition from ${currentStatus} to ${newStatus}. ` +
        `Valid transitions are: ${validTransitions[currentStatus]?.join(', ') || 'none'}`
      );
    }
  }
  
  getStatusLabel(status: MatchSuggestionStatus): string {
    const statusLabels: Record<MatchSuggestionStatus, string> = {
      DRAFT: "טיוטה",
      PENDING_FIRST_PARTY: "ממתין לתשובת הצד הראשון",
      FIRST_PARTY_APPROVED: "הצד הראשון אישר",
      FIRST_PARTY_DECLINED: "הצד הראשון דחה",
      PENDING_SECOND_PARTY: "ממתין לתשובת הצד השני",
      SECOND_PARTY_APPROVED: "הצד השני אישר",
      SECOND_PARTY_DECLINED: "הצד השני דחה",
      AWAITING_MATCHMAKER_APPROVAL: "ממתין לאישור השדכן",
      CONTACT_DETAILS_SHARED: "פרטי קשר שותפו",
      AWAITING_FIRST_DATE_FEEDBACK: "ממתין למשוב פגישה ראשונה",
      THINKING_AFTER_DATE: "בחשיבה לאחר הפגישה",
      PROCEEDING_TO_SECOND_DATE: "התקדמות לפגישה שנייה",
      ENDED_AFTER_FIRST_DATE: "הסתיים לאחר פגישה ראשונה",
      MEETING_PENDING: "פגישה בהמתנה",
      MEETING_SCHEDULED: "פגישה קבועה",
      MATCH_APPROVED: "השידוך אושר",
      MATCH_DECLINED: "השידוך נדחה",
      DATING: "בתהליך היכרות",
      ENGAGED: "אירוסין",
      MARRIED: "נישואין",
      CANCELLED: "בוטל",
      CLOSED: "נסגר",
      EXPIRED: "פג תוקף"
    };
    
    return statusLabels[status] || status;
  }
  
  // Get available actions for current status based on user role
  getAvailableActions(
    suggestion: SuggestionWithParties, 
    userId: string
  ): { id: string; label: string; nextStatus: MatchSuggestionStatus }[] {
    const isFirstParty = suggestion.firstPartyId === userId;
    const isSecondParty = suggestion.secondPartyId === userId;
    const isMatchmaker = suggestion.matchmakerId === userId;
    
    const actions: Record<MatchSuggestionStatus, { 
      firstParty?: { id: string; label: string; nextStatus: MatchSuggestionStatus }[];
      secondParty?: { id: string; label: string; nextStatus: MatchSuggestionStatus }[];
      matchmaker?: { id: string; label: string; nextStatus: MatchSuggestionStatus }[];
    }> = {
      DRAFT: {
        matchmaker: [
          { id: "send-to-first", label: "שליחה לצד הראשון", nextStatus: MatchSuggestionStatus.PENDING_FIRST_PARTY }
        ]
      },
      PENDING_FIRST_PARTY: {
        firstParty: [
          { id: "approve", label: "אישור ההצעה", nextStatus: MatchSuggestionStatus.FIRST_PARTY_APPROVED },
          { id: "decline", label: "דחיית ההצעה", nextStatus: MatchSuggestionStatus.FIRST_PARTY_DECLINED }
        ],
        matchmaker: [
          { id: "cancel", label: "ביטול ההצעה", nextStatus: MatchSuggestionStatus.CANCELLED }
        ]
      },
      FIRST_PARTY_APPROVED: {
        matchmaker: [
          { id: "send-to-second", label: "שליחה לצד השני", nextStatus: MatchSuggestionStatus.PENDING_SECOND_PARTY },
          { id: "cancel", label: "ביטול ההצעה", nextStatus: MatchSuggestionStatus.CANCELLED }
        ]
      },
      FIRST_PARTY_DECLINED: {
        matchmaker: [
          { id: "close", label: "סגירת הצעה", nextStatus: MatchSuggestionStatus.CLOSED }
        ]
      },
      PENDING_SECOND_PARTY: {
        secondParty: [
          { id: "approve", label: "אישור ההצעה", nextStatus: MatchSuggestionStatus.SECOND_PARTY_APPROVED },
          { id: "decline", label: "דחיית ההצעה", nextStatus: MatchSuggestionStatus.SECOND_PARTY_DECLINED }
        ],
        matchmaker: [
          { id: "cancel", label: "ביטול ההצעה", nextStatus: MatchSuggestionStatus.CANCELLED }
        ]
      },
      SECOND_PARTY_APPROVED: {
        matchmaker: [
          { id: "share-contacts", label: "שיתוף פרטי קשר", nextStatus: MatchSuggestionStatus.CONTACT_DETAILS_SHARED },
          { id: "cancel", label: "ביטול ההצעה", nextStatus: MatchSuggestionStatus.CANCELLED }
        ]
      },
      SECOND_PARTY_DECLINED: {
        matchmaker: [
          { id: "close", label: "סגירת הצעה", nextStatus: MatchSuggestionStatus.CLOSED }
        ]
      },
      AWAITING_MATCHMAKER_APPROVAL: {
        matchmaker: [
          { id: "approve-share", label: "אישור שיתוף פרטים", nextStatus: MatchSuggestionStatus.CONTACT_DETAILS_SHARED },
          { id: "cancel", label: "ביטול ההצעה", nextStatus: MatchSuggestionStatus.CANCELLED }
        ]
      },
      CONTACT_DETAILS_SHARED: {
        firstParty: [
          { id: "provide-feedback", label: "דיווח משוב לאחר פגישה", nextStatus: MatchSuggestionStatus.AWAITING_FIRST_DATE_FEEDBACK }
        ],
        secondParty: [
          { id: "provide-feedback", label: "דיווח משוב לאחר פגישה", nextStatus: MatchSuggestionStatus.AWAITING_FIRST_DATE_FEEDBACK }
        ],
        matchmaker: [
          { id: "request-feedback", label: "בקש משוב", nextStatus: MatchSuggestionStatus.AWAITING_FIRST_DATE_FEEDBACK },
          { id: "cancel", label: "ביטול ההצעה", nextStatus: MatchSuggestionStatus.CANCELLED }
        ]
      },
      AWAITING_FIRST_DATE_FEEDBACK: {
         matchmaker: [
            { id: "mark-thinking", label: "סמן כ'בחשיבה'", nextStatus: MatchSuggestionStatus.THINKING_AFTER_DATE },
            { id: "mark-ended-first", label: "סמן כ'הסתיים לאחר פגישה'", nextStatus: MatchSuggestionStatus.ENDED_AFTER_FIRST_DATE },
            { id: "cancel", label: "ביטול ההצעה", nextStatus: MatchSuggestionStatus.CANCELLED }
         ]
      },
      THINKING_AFTER_DATE: {
         matchmaker: [
            { id: "proceed-second", label: "המשך לפגישה שניה", nextStatus: MatchSuggestionStatus.PROCEEDING_TO_SECOND_DATE },
            { id: "mark-ended-first", label: "סמן כ'הסתיים לאחר פגישה'", nextStatus: MatchSuggestionStatus.ENDED_AFTER_FIRST_DATE },
            { id: "cancel", label: "ביטול ההצעה", nextStatus: MatchSuggestionStatus.CANCELLED }
         ]
      },
      PROCEEDING_TO_SECOND_DATE: {
         matchmaker: [
            { id: "mark-dating", label: "סמן כ'בתהליך היכרות'", nextStatus: MatchSuggestionStatus.DATING },
            { id: "cancel", label: "ביטול ההצעה", nextStatus: MatchSuggestionStatus.CANCELLED }
         ]
      },
      ENDED_AFTER_FIRST_DATE: {
        matchmaker: [
          { id: "close", label: "סגירת הצעה", nextStatus: MatchSuggestionStatus.CLOSED }
        ]
      },
      MEETING_PENDING: {
         matchmaker: [
            { id: "schedule-meeting", label: "קביעת פגישה", nextStatus: MatchSuggestionStatus.MEETING_SCHEDULED },
            { id: "cancel", label: "ביטול ההצעה", nextStatus: MatchSuggestionStatus.CANCELLED }
         ]
      },
      MEETING_SCHEDULED: {
         matchmaker: [
            { id: "mark-dating", label: "סמן כ'בתהליך היכרות'", nextStatus: MatchSuggestionStatus.DATING },
            { id: "cancel", label: "ביטול ההצעה", nextStatus: MatchSuggestionStatus.CANCELLED }
         ]
      },
      MATCH_APPROVED: {
         matchmaker: [
            { id: "mark-dating", label: "סמן כ'בתהליך היכרות'", nextStatus: MatchSuggestionStatus.DATING },
            { id: "cancel", label: "ביטול ההצעה", nextStatus: MatchSuggestionStatus.CANCELLED }
         ]
      },
      MATCH_DECLINED: {
        matchmaker: [
          { id: "close", label: "סגירת הצעה", nextStatus: MatchSuggestionStatus.CLOSED }
        ]
      },
      DATING: {
        matchmaker: [
          { id: "mark-engaged", label: "עדכון אירוסין", nextStatus: MatchSuggestionStatus.ENGAGED },
          { id: "close", label: "סגירת תהליך", nextStatus: MatchSuggestionStatus.CLOSED },
          { id: "cancel", label: "ביטול השידוך", nextStatus: MatchSuggestionStatus.CANCELLED }
        ]
      },
      ENGAGED: {
        matchmaker: [
          { id: "mark-married", label: "עדכון נישואין", nextStatus: MatchSuggestionStatus.MARRIED },
          { id: "cancel", label: "ביטול אירוסין", nextStatus: MatchSuggestionStatus.CANCELLED }
        ]
      },
      MARRIED: {},
      EXPIRED: {},
      CLOSED: {},
      CANCELLED: {}
    };
    
    if (isFirstParty && actions[suggestion.status]?.firstParty) {
      return actions[suggestion.status].firstParty || [];
    }
    
    if (isSecondParty && actions[suggestion.status]?.secondParty) {
      return actions[suggestion.status].secondParty || [];
    }
    
    if (isMatchmaker && actions[suggestion.status]?.matchmaker) {
      return actions[suggestion.status].matchmaker || [];
    }
    
    return [];
  }
}

// Export singleton instance
export const statusTransitionService = StatusTransitionService.getInstance();
--- End of Content for StatusTransitionService.ts ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\suggestions\services\suggestions\SuggestionService.ts
--------------------------------------------------------------------------------
Content:
// src/app/components/matchmaker/suggestions/services/suggestions/SuggestionService.ts

import { MatchSuggestionStatus, Priority, UserRole } from "@prisma/client";
import prisma from "@/lib/prisma";
import { statusTransitionService, type SuggestionWithParties } from "./StatusTransitionService";
import { initNotificationService } from "../notification/initNotifications";
import type { 
  CreateSuggestionData,
  UpdateSuggestionData,
} from "@/types/suggestions";

// Initialize notification service
const notificationService = initNotificationService();
const BLOCKING_SUGGESTION_STATUSES: MatchSuggestionStatus[] = [
  'FIRST_PARTY_APPROVED',
  'SECOND_PARTY_APPROVED',
  'AWAITING_MATCHMAKER_APPROVAL',
  'CONTACT_DETAILS_SHARED',
  'AWAITING_FIRST_DATE_FEEDBACK',
  'THINKING_AFTER_DATE',
  'PROCEEDING_TO_SECOND_DATE',
  'MEETING_PENDING',
  'MEETING_SCHEDULED',
  'MATCH_APPROVED',
  'DATING',
];
export class SuggestionService {
  private static instance: SuggestionService;

  private constructor() {}

  public static getInstance(): SuggestionService {
    if (!SuggestionService.instance) {
      SuggestionService.instance = new SuggestionService();
    }
    return SuggestionService.instance;
  }

  /**
   * יצירת הצעת שידוך חדשה
   */
  public async createSuggestion(data: CreateSuggestionData): Promise<SuggestionWithParties> {
    // 1. וידוא הרשאות השדכן
    const matchmaker = await prisma.user.findUnique({
      where: { id: data.matchmakerId },
    });

    // קוד חדש ומתוקן
const allowedRoles: UserRole[] = [UserRole.MATCHMAKER, UserRole.ADMIN];
if (!matchmaker || !allowedRoles.includes(matchmaker.role)) {
  throw new Error("Unauthorized - User must be a Matchmaker or Admin");
}
  // --- START: NEW VALIDATION LOGIC ---
    // Fetch both parties to get their names for error messages
    const [firstParty, secondParty] = await Promise.all([
        prisma.user.findUnique({ where: { id: data.firstPartyId } }),
        prisma.user.findUnique({ where: { id: data.secondPartyId } })
    ]);

    if (!firstParty || !secondParty) {
        throw new Error("One or both candidates not found.");
    }
    
    // Check for BLOCKING suggestions for either party
    const blockingSuggestion = await prisma.matchSuggestion.findFirst({
        where: {
            OR: [
                { firstPartyId: data.firstPartyId },
                { secondPartyId: data.firstPartyId },
                { firstPartyId: data.secondPartyId },
                { secondPartyId: data.secondPartyId },
            ],
            status: {
                in: BLOCKING_SUGGESTION_STATUSES,
            },
        },
    });

    if (blockingSuggestion) {
        const hasBlockingSuggestion = (id: string) => 
            blockingSuggestion.firstPartyId === id || blockingSuggestion.secondPartyId === id;
            
        if (hasBlockingSuggestion(data.firstPartyId)) {
            throw new Error(`לא ניתן ליצור הצעה חדשה. ל${firstParty.firstName} ${firstParty.lastName} יש כבר הצעה פעילה.`);
        }
        if (hasBlockingSuggestion(data.secondPartyId)) {
            throw new Error(`לא ניתן ליצור הצעה חדשה. ל${secondParty.firstName} ${secondParty.lastName} יש כבר הצעה פעילה.`);
        }
    }

    // 4. יצירת ההצעה בטרנזקציה
    const suggestion = await prisma.$transaction(async (tx) => {
      // יצירת ההצעה עם הנתונים המנוקים
      console.log('Decision deadline value:', data.decisionDeadline);
      console.log('Decision deadline type:', typeof data.decisionDeadline);
      
      const cleanedData = {
        matchmakerId: data.matchmakerId,
        firstPartyId: data.firstPartyId,
        secondPartyId: data.secondPartyId,
        status: MatchSuggestionStatus.PENDING_FIRST_PARTY,
        priority: data.priority || Priority.MEDIUM,
        matchingReason: data.notes?.matchingReason || null,
        firstPartyNotes: data.notes?.forFirstParty || null,
        secondPartyNotes: data.notes?.forSecondParty || null,
        internalNotes: data.notes?.internal || null,
        followUpNotes: data.notes?.followUpNotes || null,
        decisionDeadline: new Date(data.decisionDeadline),
        firstPartySent: new Date(),
        lastActivity: new Date(),
        lastStatusChange: new Date()
      };

      const newSuggestion = await tx.matchSuggestion.create({
        data: cleanedData,
        include: {
          firstParty: {
            include: { profile: true }
          },
          secondParty: {
            include: { profile: true }
          },
          matchmaker: true,
        },
      });

      // יצירת רשומת היסטוריה ראשונית
      await tx.suggestionStatusHistory.create({
        data: {
          suggestionId: newSuggestion.id,
          status: newSuggestion.status,
          notes: "Initial suggestion created and sent to first party",
        },
      });

      return newSuggestion;
    });

    // 5. שליחת התראות באמצעות מערכת ההתראות המאוחדת
    try {
      console.log('Sending notifications for new suggestion...');
      await notificationService.handleSuggestionStatusChange(
        suggestion,
        {
          channels: ['email', 'whatsapp'],
          notifyParties: ['first'] // רק לצד הראשון בשלב זה
        }
      );
    } catch (error) {
      console.error('Error sending initial suggestion notifications:', error);
      // לא לעצור את התהליך - רק לדווח על השגיאה
    }

    return suggestion;
  }

  /**
   * עדכון פרטי הצעת שידוך
   */
  public async updateSuggestion(
    id: string,
    matchmakerId: string,
    data: UpdateSuggestionData
  ): Promise<SuggestionWithParties> {
    // 1. בדיקת קיום ההצעה והרשאות
    const suggestion = await prisma.matchSuggestion.findUnique({
      where: { id },
      include: {
        firstParty: {
          include: { profile: true }
        },
        secondParty: {
          include: { profile: true }
        },
        matchmaker: true,
      },
    });

    if (!suggestion) {
      throw new Error("Suggestion not found");
    }

    if (suggestion.matchmakerId !== matchmakerId) {
      throw new Error("Unauthorized - Only the original matchmaker can update the suggestion");
    }

    // 2. ניקוי והכנת נתוני העדכון
    const cleanedUpdateData = {
      ...(data.notes?.matchingReason !== undefined && { 
        matchingReason: data.notes.matchingReason 
      }),
      ...(data.notes?.forFirstParty !== undefined && { 
        firstPartyNotes: data.notes.forFirstParty 
      }),
      ...(data.notes?.forSecondParty !== undefined && { 
        secondPartyNotes: data.notes.forSecondParty 
      }),
      ...(data.notes?.internal !== undefined && { 
        internalNotes: data.notes.internal 
      }),
      ...(data.notes?.followUpNotes !== undefined && { 
        followUpNotes: data.notes.followUpNotes 
      }),
      ...(data.priority && { priority: data.priority }),
      ...(data.responseDeadline && { 
        responseDeadline: new Date(data.responseDeadline) 
      }),
      ...(data.decisionDeadline && { 
        decisionDeadline: new Date(data.decisionDeadline) 
      }),
      lastActivity: new Date()
    };

    // 3. עדכון הנתונים
    return await prisma.matchSuggestion.update({
      where: { id },
      data: cleanedUpdateData,
      include: {
        firstParty: {
          include: { profile: true }
        },
        secondParty: {
          include: { profile: true }
        },
        matchmaker: true,
      },
    });
  }

  /**
   * עדכון סטטוס של הצעת שידוך
   */
  public async updateSuggestionStatus(
    id: string,
    newStatus: MatchSuggestionStatus,
    userId: string,
    notes?: string
  ): Promise<SuggestionWithParties> {
    const suggestion = await prisma.matchSuggestion.findUnique({
      where: { id },
      include: {
        firstParty: {
          include: { profile: true }
        },
        secondParty: {
          include: { profile: true }
        },
        matchmaker: true,
      },
    });

    if (!suggestion) {
      throw new Error("Suggestion not found");
    }

    this.validateStatusChangePermission(suggestion, userId, newStatus);
    return await statusTransitionService.transitionStatus(suggestion, newStatus, notes);
  }

  /**
   * קבלת פרטי הצעת שידוך
   */
  public async getSuggestionDetails(id: string, userId: string): Promise<SuggestionWithParties> {
    const suggestion = await prisma.matchSuggestion.findUnique({
      where: { id },
      include: {
        firstParty: {
          include: { profile: true }
        },
        secondParty: {
          include: { profile: true }
        },
        matchmaker: true,
        statusHistory: {
          orderBy: { createdAt: "desc" },
        },
        meetings: {
          include: {
            feedback: true
          }
        },
      },
    });

    if (!suggestion) {
      throw new Error("Suggestion not found");
    }

    if (
      userId !== suggestion.matchmakerId &&
      userId !== suggestion.firstPartyId &&
      userId !== suggestion.secondPartyId
    ) {
      throw new Error("Unauthorized to view this suggestion");
    }

    return suggestion;
  }

  /**
   * קבלת רשימת הצעות שידוך של משתמש
   */
  public async getUserSuggestions(userId: string): Promise<SuggestionWithParties[]> {
    return await prisma.matchSuggestion.findMany({
      where: {
        OR: [
          { matchmakerId: userId },
          { firstPartyId: userId },
          { secondPartyId: userId },
        ],
      },
      include: {
        firstParty: {
          include: { profile: true }
        },
        secondParty: {
          include: { profile: true }
        },
        matchmaker: true,
        statusHistory: {
          orderBy: { createdAt: "desc" },
        },
        meetings: {
          include: {
            feedback: true
          }
        },
      },
      orderBy: {
        lastActivity: "desc",
      },
    });
  }

  /**
   * אימות הרשאות לשינוי סטטוס
   */
  private validateStatusChangePermission(
    suggestion: SuggestionWithParties,
    userId: string,
    newStatus: MatchSuggestionStatus
  ): void {
    const isMatchmaker = userId === suggestion.matchmakerId;
    const isFirstParty = userId === suggestion.firstPartyId;

    switch (newStatus) {
      case MatchSuggestionStatus.FIRST_PARTY_APPROVED:
      case MatchSuggestionStatus.FIRST_PARTY_DECLINED:
        if (!isFirstParty) throw new Error("Only first party can approve/decline at this stage");
        break;

      default:
        if (!isMatchmaker) throw new Error("Only matchmaker can change status at this stage");
    }
  }

  /**
   * בדיקת קיום הצעה פעילה בין שני מועמדים
   */
  private async checkExistingSuggestion(
    firstPartyId: string,
    secondPartyId: string
  ): Promise<SuggestionWithParties | null> {
    return await prisma.matchSuggestion.findFirst({
      where: {
        AND: [
          {
            OR: [
              { firstPartyId, secondPartyId },
              { firstPartyId: secondPartyId, secondPartyId: firstPartyId },
            ],
          },
          {
            status: {
              notIn: [
                MatchSuggestionStatus.CLOSED,
                MatchSuggestionStatus.CANCELLED,
                MatchSuggestionStatus.EXPIRED,
                MatchSuggestionStatus.MATCH_DECLINED,
              ],
            },
          },
        ],
      },
      include: {
        firstParty: {
          include: { profile: true }
        },
        secondParty: {
          include: { profile: true }
        },
        matchmaker: true,
      },
    });
  }
}
export const suggestionService = SuggestionService.getInstance();
--- End of Content for SuggestionService.ts ---

================================================================================
Directory: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\suggestions\utils
================================================================================

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\suggestions\utils\matchingAlgorithm.ts
--------------------------------------------------------------------------------
Content:
import { AvailabilityStatus } from '@prisma/client';
import type { UserProfile } from '@/types/next-auth';

export interface MatchScore {
  score: number;
  criteria: MatchCriteria[];
  compatibility: number;
  reasons: string[];
}

export interface MatchCriteria {
  name: string;
  weight: number;
  score: number;
  reason?: string;
}

interface AgePreference {
  min: number;
  max: number;
}

const calculateAge = (birthDate: Date): number => {
  const today = new Date();
  const birth = new Date(birthDate);
  let age = today.getFullYear() - birth.getFullYear();
  const monthDiff = today.getMonth() - birth.getMonth();
  if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birth.getDate())) {
    age--;
  }
  return age;
};

const calculateAgeCompatibility = (
  profileA: UserProfile,
  profileB: UserProfile,
  preferences: { ageA?: AgePreference; ageB?: AgePreference }
): MatchCriteria => {
  const ageA = calculateAge(profileA.birthDate);
  const ageB = calculateAge(profileB.birthDate);
  const ageDiff = Math.abs(ageA - ageB);
  
  let score = 0;
  let reason = '';

  // בדיקת העדפות גיל הדדית
  const aPrefsMatch = preferences.ageA ? 
    (ageB >= preferences.ageA.min && ageB <= preferences.ageA.max) : true;
  const bPrefsMatch = preferences.ageB ?
    (ageA >= preferences.ageB.min && ageA <= preferences.ageB.max) : true;

  if (aPrefsMatch && bPrefsMatch) {
    if (ageDiff <= 2) {
      score = 1;
      reason = 'הפרש גילאים אידיאלי';
    } else if (ageDiff <= 5) {
      score = 0.8;
      reason = 'הפרש גילאים טוב';
    } else if (ageDiff <= 8) {
      score = 0.6;
      reason = 'הפרש גילאים סביר';
    } else {
      score = 0.4;
      reason = 'הפרש גילאים גדול';
    }
  } else {
    score = 0.2;
    reason = 'לא תואם להעדפות הגיל';
  }

  return {
    name: 'age',
    weight: 15,
    score,
    reason
  };
};

const calculateLocationCompatibility = (
  profileA: UserProfile,
  profileB: UserProfile
): MatchCriteria => {
  let score = 0;
  let reason = '';

  if (!profileA.city || !profileB.city) {
    return {
      name: 'location',
      weight: 10,
      score: 0.5,
      reason: 'חסר מידע על מיקום'
    };
  }

  const sameCity = profileA.city === profileB.city;
  const preferredLocationsA = profileA.preferredLocations || [];
  const preferredLocationsB = profileB.preferredLocations || [];

  if (sameCity) {
    score = 1;
    reason = 'גרים באותה עיר';
  } else if (
    preferredLocationsA.includes(profileB.city) &&
    preferredLocationsB.includes(profileA.city)
  ) {
    score = 0.8;
    reason = 'מיקום מועדף הדדי';
  } else if (
    preferredLocationsA.includes(profileB.city) ||
    preferredLocationsB.includes(profileA.city)
  ) {
    score = 0.6;
    reason = 'מיקום מועדף חד צדדי';
  } else {
    score = 0.4;
    reason = 'ערים שונות';
  }

  return {
    name: 'location',
    weight: 10,
    score,
    reason
  };
};

const calculateReligiousCompatibility = (
  profileA: UserProfile,
  profileB: UserProfile
): MatchCriteria => {
  let score = 0;
  let reason = '';

  if (!profileA.religiousLevel || !profileB.religiousLevel) {
    return {
      name: 'religious',
      weight: 20,
      score: 0.5,
      reason: 'חסר מידע על רמת דתיות'
    };
  }

  const sameLevel = profileA.religiousLevel === profileB.religiousLevel;
  const preferredLevelsA = profileA.preferredReligiousLevels || [];
  const preferredLevelsB = profileB.preferredReligiousLevels || [];

  if (sameLevel) {
    score = 1;
    reason = 'רמת דתיות זהה';
  } else if (
    preferredLevelsA.includes(profileB.religiousLevel) &&
    preferredLevelsB.includes(profileA.religiousLevel)
  ) {
    score = 0.8;
    reason = 'רמת דתיות מועדפת הדדית';
  } else if (
    preferredLevelsA.includes(profileB.religiousLevel) ||
    preferredLevelsB.includes(profileA.religiousLevel)
  ) {
    score = 0.6;
    reason = 'רמת דתיות מועדפת חד צדדית';
  } else {
    score = 0.3;
    reason = 'רמות דתיות שונות';
  }

  return {
    name: 'religious',
    weight: 20,
    score,
    reason
  };
};

export const calculateMatchScore = (
  profileA: UserProfile,
  profileB: UserProfile
): MatchScore | null => {
  // בדיקת תנאי סף
  if (
    profileA.gender === profileB.gender ||
    profileA.availabilityStatus !== AvailabilityStatus.AVAILABLE ||
    profileB.availabilityStatus !== AvailabilityStatus.AVAILABLE
  ) {
    return null;
  }

  // חישוב קריטריונים
  const ageCriteria = calculateAgeCompatibility(
    profileA,
    profileB,
    {
      ageA: profileA.preferredAgeMin && profileA.preferredAgeMax
        ? { min: profileA.preferredAgeMin, max: profileA.preferredAgeMax }
        : undefined,
      ageB: profileB.preferredAgeMin && profileB.preferredAgeMax
        ? { min: profileB.preferredAgeMin, max: profileB.preferredAgeMax }
        : undefined
    }
  );

  const locationCriteria = calculateLocationCompatibility(profileA, profileB);
  const religiousCriteria = calculateReligiousCompatibility(profileA, profileB);

  const criteria = [
    ageCriteria,
    locationCriteria,
    religiousCriteria
  ];

  // חישוב ציון סופי
  const totalWeight = criteria.reduce((sum, c) => sum + c.weight, 0);
  const weightedScore = criteria.reduce((sum, c) => sum + (c.score * c.weight), 0);
  const finalScore = (weightedScore / totalWeight) * 100;

  // סיבות להתאמה
  const reasons = criteria
    .filter(c => c.score >= 0.6)
    .map(c => c.reason)
    .filter((reason): reason is string => reason !== undefined);

  return {
    score: Math.round(finalScore),
    criteria,
    compatibility: finalScore / 100,
    reasons
  };
};

export const findBestMatches = (
  profile: UserProfile,
  profiles: UserProfile[],
  limit: number = 10
): { profile: UserProfile; score: MatchScore }[] => {
  const matches = profiles
    .filter(p => p.id !== profile.id)
    .map(p => {
      const score = calculateMatchScore(profile, p);
      return score ? { profile: p, score } : null;
    })
    .filter((match): match is { profile: UserProfile; score: MatchScore } => match !== null)
    .sort((a, b) => b.score.score - a.score.score);

  return matches.slice(0, limit);
};

const matchingAlgorithm = {
  calculateMatchScore,
  findBestMatches
};

export default matchingAlgorithm;
--- End of Content for matchingAlgorithm.ts ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\suggestions\utils\statisticsCalculator.ts
--------------------------------------------------------------------------------
Content:
// /utils/statisticsCalculator.ts
import type { Candidate } from '../../new/types/candidates';
import { Gender, AvailabilityStatus } from '@prisma/client';


export interface AgeDistribution {
  ageGroups: Record<string, number>;
  averageAge: number;
  medianAge: number;
}

export interface LocationDistribution {
  cities: Record<string, number>;
  topCities: Array<{ city: string; count: number }>;
}

export interface ReligiousDistribution {
  levels: Record<string, number>;
  percentages: Record<string, number>;
}

export interface ActivityStats {
  activeLastWeek: number;
  activeLastMonth: number;
  averageLoginFrequency: number;
  completedProfiles: number;
}

export interface MatchingStats {
  totalMatches: number;
  successfulMatches: number;
  averageMatchScore: number;
  matchesByStatus: Record<string, number>;
}

const calculateAge = (birthDate: Date): number => {
  const today = new Date();
  const birth = new Date(birthDate);
  let age = today.getFullYear() - birth.getFullYear();
  const monthDiff = today.getMonth() - birth.getMonth();
  if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birth.getDate())) {
    age--;
  }
  return age;
};

export const calculateAgeDistribution = (candidates: Candidate[]): AgeDistribution => {
  const ages = candidates.map(c => calculateAge(c.profile.birthDate));
  
  // חישוב קבוצות גיל
  const ageGroups = ages.reduce((acc, age) => {
    const group = `${Math.floor(age / 5) * 5}-${Math.floor(age / 5) * 5 + 4}`;
    acc[group] = (acc[group] || 0) + 1;
    return acc;
  }, {} as Record<string, number>);

  // חישוב ממוצע
  const averageAge = ages.reduce((sum, age) => sum + age, 0) / ages.length;

  // חישוב חציון
  const sortedAges = [...ages].sort((a, b) => a - b);
  const medianAge = sortedAges.length % 2 === 0
    ? (sortedAges[sortedAges.length / 2 - 1] + sortedAges[sortedAges.length / 2]) / 2
    : sortedAges[Math.floor(sortedAges.length / 2)];

  return {
    ageGroups,
    averageAge: Math.round(averageAge * 10) / 10,
    medianAge
  };
};

export const calculateLocationDistribution = (
  candidates: Candidate[],
  topCount: number = 10
): LocationDistribution => {
  // ספירת מועמדים לפי ערים
  const cities = candidates.reduce((acc, candidate) => {
    const city = candidate.profile.city || 'לא צוין';
    acc[city] = (acc[city] || 0) + 1;
    return acc;
  }, {} as Record<string, number>);

  // מיון הערים לפי כמות מועמדים
  const topCities = Object.entries(cities)
    .map(([city, count]) => ({ city, count }))
    .sort((a, b) => b.count - a.count)
    .slice(0, topCount);

  return {
    cities,
    topCities
  };
};

export const calculateReligiousDistribution = (candidates: Candidate[]): ReligiousDistribution => {
  const total = candidates.length;
  
  // ספירת מועמדים לפי רמת דתיות
  const levels = candidates.reduce((acc, candidate) => {
    const level = candidate.profile.religiousLevel || 'לא צוין';
    acc[level] = (acc[level] || 0) + 1;
    return acc;
  }, {} as Record<string, number>);

  // חישוב אחוזים
  const percentages = Object.entries(levels).reduce((acc, [level, count]) => {
    acc[level] = Math.round((count / total) * 100);
    return acc;
  }, {} as Record<string, number>);

  return {
    levels,
    percentages
  };
};

export const calculateActivityStats = (candidates: Candidate[]): ActivityStats => {
  const now = new Date();
  const weekAgo = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);
  const monthAgo = new Date(now.getTime() - 30 * 24 * 60 * 60 * 1000);

  const activeLastWeek = candidates.filter(c => 
    c.profile.lastActive && new Date(c.profile.lastActive) >= weekAgo
  ).length;

  const activeLastMonth = candidates.filter(c =>
    c.profile.lastActive && new Date(c.profile.lastActive) >= monthAgo
  ).length;

  // חישוב תדירות התחברות ממוצעת (בימים)
  const loginGaps = candidates
    .filter(c => c.profile.lastActive)
    .map(c => {
      const lastActive = new Date(c.profile.lastActive!);
      return Math.floor((now.getTime() - lastActive.getTime()) / (24 * 60 * 60 * 1000));
    });

  const averageLoginFrequency = loginGaps.length > 0
    ? loginGaps.reduce((sum, gap) => sum + gap, 0) / loginGaps.length
    : 0;

  // ספירת פרופילים מלאים
  const completedProfiles = candidates.filter(c => 
    c.profile.about &&
    c.profile.religiousLevel &&
    c.profile.city &&
    c.images.length > 0
  ).length;

  return {
    activeLastWeek,
    activeLastMonth,
    averageLoginFrequency: Math.round(averageLoginFrequency * 10) / 10,
    completedProfiles
  };
};

export const calculateGenderStats = (candidates: Candidate[]) => {
  const maleCount = candidates.filter(c => c.profile.gender === Gender.MALE).length;
  const femaleCount = candidates.filter(c => c.profile.gender === Gender.FEMALE).length;
  
  return {
    maleCount,
    femaleCount,
    ratio: maleCount / femaleCount,
    total: candidates.length,
    percentages: {
      male: Math.round((maleCount / candidates.length) * 100),
      female: Math.round((femaleCount / candidates.length) * 100)
    }
  };
};

export const calculateAvailabilityStats = (candidates: Candidate[]) => {
  const total = candidates.length;
  const statusCounts = candidates.reduce((acc, candidate) => {
    const status = candidate.profile.availabilityStatus;
    acc[status] = (acc[status] || 0) + 1;
    return acc;
  }, {} as Record<AvailabilityStatus, number>);

  return {
    counts: statusCounts,
    percentages: Object.entries(statusCounts).reduce((acc, [status, count]) => {
      acc[status] = Math.round((count / total) * 100);
      return acc;
    }, {} as Record<string, number>)
  };
};

export const calculateCompletionStats = (candidates: Candidate[]) => {
  const total = candidates.length;
  const  stats = {
    hasPhotos: 0,
    hasAbout: 0,
    hasReferences: 0,
    hasPreferences: 0,
    isVerified: 0,
    fullyCompleted: 0
  };

  candidates.forEach(candidate => {
    if (candidate.images.length > 0) stats.hasPhotos++;
    if (candidate.profile.about) stats.hasAbout++;
    if (candidate.profile.preferredAgeMin && candidate.profile.preferredAgeMax) stats.hasPreferences++;
    if (candidate.isVerified) stats.isVerified++;
    
    // בדיקת פרופיל מלא
    if (
      candidate.images.length > 0 &&
      candidate.profile.about &&
      candidate.profile.religiousLevel &&
      candidate.profile.city &&
      candidate.profile.preferredAgeMin &&
      candidate.profile.preferredAgeMax
    ) {
      stats.fullyCompleted++;
    }
  });

  return {
    counts: stats,
    percentages: {
      hasPhotos: Math.round((stats.hasPhotos / total) * 100),
      hasAbout: Math.round((stats.hasAbout / total) * 100),
      hasReferences: Math.round((stats.hasReferences / total) * 100),
      hasPreferences: Math.round((stats.hasPreferences / total) * 100),
      isVerified: Math.round((stats.isVerified / total) * 100),
      fullyCompleted: Math.round((stats.fullyCompleted / total) * 100)
    }
  };
};

const statisticsCalculator = {
  calculateAgeDistribution,
  calculateLocationDistribution,
  calculateReligiousDistribution,
  calculateActivityStats,
  calculateGenderStats,
  calculateAvailabilityStats,
  calculateCompletionStats
};

export default statisticsCalculator;
--- End of Content for statisticsCalculator.ts ---

--- End of Content for suggestions_contents.txt ---

================================================================================
Directory: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\suggestions\NewSuggestionForm
================================================================================

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\suggestions\NewSuggestionForm\CandidateSelector.tsx
--------------------------------------------------------------------------------
Content:
// src/app/components/matchmaker/suggestions/NewSuggestionForm/CandidateSelector.tsx

import React, { useState, useCallback, KeyboardEvent } from 'react';
import {
  Search,
  AlertTriangle,
  Clock,
  User,
  Crown,
  Star,
  Heart,
  Sparkles,
  MapPin,
  Award,
  Zap,
  Shield,
} from 'lucide-react';
import { Input } from '@/components/ui/input';
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from '@/components/ui/popover';
import {
  Command,
  CommandEmpty,
  CommandGroup,
  CommandInput,
  CommandList,
} from '@/components/ui/command';
import { Button } from '@/components/ui/button';
import { Card, CardContent } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';
import {
  calculateAge,
  cn,
  getRelativeCloudinaryPath,
  getInitials,
} from '@/lib/utils';
import type { Candidate } from '../../new/types/candidates';
import { toast } from 'sonner';
import type { CandidateSelectorDict } from '@/types/dictionaries/matchmaker'; // <--- ייבוא הטיפוס של המילון

// ===> עדכון Props <===
interface CandidateSelectorProps {
  dict: CandidateSelectorDict; // <-- הוספת המילון כ-prop
  value: Candidate | null;
  onChange: (candidate: Candidate | null) => void;
  otherParty?: Candidate | null;
  label: string;
  candidates: Candidate[];
  className?: string;
  fieldName: string;
  error?: string;
}

const EnhancedCandidateCard: React.FC<{
  dict: CandidateSelectorDict; // <-- קבלת המילון
  candidate: Candidate;
  onClick: () => void;
  isActive: boolean;
  isBlocked: boolean;
}> = ({ dict, candidate, onClick, isActive, isBlocked }) => {
  const age = calculateAge(new Date(candidate.profile.birthDate));
  const mainImage = candidate.images.find((img) => img.isMain)?.url;

  const getStatusInfo = () => {
    if (isBlocked) {
      return {
        icon: Shield,
        label: dict.status.blocked,
        className:
          'bg-gradient-to-r from-red-500 to-pink-500 text-white animate-pulse',
        description: dict.status.blockedDescription.replace(
          '{{name}}',
          candidate.suggestionStatus?.withCandidateName || ''
        ),
      };
    }

    if (candidate.suggestionStatus?.status === 'PENDING') {
      return {
        icon: Clock,
        label: dict.status.pending,
        className: 'bg-gradient-to-r from-yellow-500 to-amber-500 text-white',
        description: dict.status.pendingDescription.replace(
          '{{name}}',
          candidate.suggestionStatus.withCandidateName
        ),
      };
    }

    return {
      icon: Star,
      label: dict.status.available,
      className: 'bg-gradient-to-r from-green-500 to-emerald-500 text-white',
      description: dict.status.availableDescription,
    };
  };

  const statusInfo = getStatusInfo();
  const StatusIcon = statusInfo.icon;

  return (
    <div
      className={cn(
        'group relative overflow-hidden rounded-2xl transition-all duration-300 cursor-pointer',
        'bg-gradient-to-br from-white via-gray-50/30 to-white border-2 shadow-lg hover:shadow-2xl',
        isActive && 'ring-4 ring-purple-500 ring-opacity-50 border-purple-300',
        isBlocked && 'opacity-60 cursor-not-allowed',
        !isBlocked && 'hover:scale-105 hover:border-purple-300'
      )}
      onClick={!isBlocked ? onClick : undefined}
    >
      <div className="absolute inset-0">
        <div className="absolute top-0 right-0 w-20 h-20 bg-gradient-to-br from-purple-200/20 to-pink-200/20 rounded-full blur-xl opacity-0 group-hover:opacity-100 transition-opacity duration-500"></div>
        <div className="absolute bottom-0 left-0 w-16 h-16 bg-gradient-to-br from-cyan-200/20 to-blue-200/20 rounded-full blur-lg opacity-0 group-hover:opacity-100 transition-opacity duration-700"></div>
      </div>
      <div className="relative z-10 p-4 space-y-4">
        <div className="flex items-center justify-between">
          <Badge className={cn('shadow-lg font-bold', statusInfo.className)}>
            <StatusIcon className="w-3 h-3 ml-1" />
            {statusInfo.label}
          </Badge>
          {candidate.profile.religiousLevel && (
            <Badge className="bg-gradient-to-r from-indigo-500 to-purple-500 text-white shadow-lg">
              <Crown className="w-3 h-3 ml-1" />
              {candidate.profile.religiousLevel}
            </Badge>
          )}
        </div>
        <div className="flex items-center gap-4">
          <div className="relative">
            <Avatar className="w-16 h-16 border-4 border-white shadow-xl ring-2 ring-purple-200 group-hover:ring-purple-400 transition-all duration-300">
              {mainImage ? (
                <AvatarImage
                  src={getRelativeCloudinaryPath(mainImage)}
                  alt={`${candidate.firstName} ${candidate.lastName}`}
                  className="object-cover"
                />
              ) : (
                <AvatarFallback className="bg-gradient-to-br from-purple-500 to-pink-500 text-white font-bold text-lg">
                  {getInitials(`${candidate.firstName} ${candidate.lastName}`)}
                </AvatarFallback>
              )}
            </Avatar>
            <div className="absolute -bottom-1 -right-1 w-5 h-5 bg-gradient-to-r from-green-400 to-emerald-400 border-2 border-white rounded-full shadow-lg animate-pulse"></div>
          </div>
          <div className="flex-1 min-w-0">
            <h3 className="text-lg font-bold text-gray-800 truncate group-hover:text-purple-700 transition-colors">
              {candidate.firstName} {candidate.lastName}
            </h3>
            <div className="flex items-center gap-2 mt-1">
              <div className="flex items-center gap-1 text-sm text-gray-600">
                <User className="w-4 h-4 text-blue-500" />
                <span className="font-medium">
                  {age} {dict.card.years}
                </span>
              </div>
              {candidate.profile.city && (
                <div className="flex items-center gap-1 text-sm text-gray-600">
                  <MapPin className="w-4 h-4 text-green-500" />
                  <span className="truncate">{candidate.profile.city}</span>
                </div>
              )}
            </div>
          </div>
        </div>
        <div className="grid grid-cols-2 gap-3">
          {candidate.profile.occupation && (
            <div className="flex items-center gap-2 p-2 bg-gradient-to-r from-blue-50 to-cyan-50 rounded-lg border border-blue-100 shadow-sm">
              <Award className="w-4 h-4 text-blue-500 flex-shrink-0" />
              <span className="text-sm font-medium text-blue-700 truncate">
                {candidate.profile.occupation}
              </span>
            </div>
          )}
          {candidate.profile.education && (
            <div className="flex items-center gap-2 p-2 bg-gradient-to-r from-purple-50 to-pink-50 rounded-lg border border-purple-100 shadow-sm">
              <Sparkles className="w-4 h-4 text-purple-500 flex-shrink-0" />
              <span className="text-sm font-medium text-purple-700 truncate">
                {candidate.profile.education}
              </span>
            </div>
          )}
        </div>
        {isBlocked && (
          <div className="p-3 bg-gradient-to-r from-red-50 to-pink-50 rounded-lg border border-red-200">
            <div className="flex items-start gap-2">
              <AlertTriangle className="w-4 h-4 text-red-500 mt-0.5 flex-shrink-0" />
              <div className="text-sm text-red-700">
                <p className="font-medium">{dict.card.cannotSelect}</p>
                <p className="text-xs">{statusInfo.description}</p>
              </div>
            </div>
          </div>
        )}
      </div>
      <div className="absolute inset-0 bg-gradient-to-r from-purple-500/5 to-pink-500/5 opacity-0 group-hover:opacity-100 transition-opacity duration-300 pointer-events-none"></div>
    </div>
  );
};

const CandidateSelector: React.FC<CandidateSelectorProps> = ({
  dict,
  value,
  onChange,
  otherParty,
  label,
  candidates,
  className,
  error,
}) => {
  const [open, setOpen] = useState(false);
  const [inputValue, setInputValue] = useState('');
  const [activeIndex, setActiveIndex] = useState(-1);

  const filteredCandidates = candidates.filter((candidate) => {
    if (otherParty && candidate.id === otherParty.id) return false;
    if (inputValue) {
      const searchTerm = inputValue.toLowerCase();
      return (
        candidate.firstName.toLowerCase().includes(searchTerm) ||
        candidate.lastName.toLowerCase().includes(searchTerm) ||
        candidate.profile.city?.toLowerCase().includes(searchTerm) ||
        candidate.profile.occupation?.toLowerCase().includes(searchTerm)
      );
    }
    return true;
  });

  const formatCandidateDisplay = useCallback((candidate: Candidate) => {
    const age = calculateAge(new Date(candidate.profile.birthDate));
    return `${candidate.firstName} ${candidate.lastName}, ${age}${
      candidate.profile.city ? `, ${candidate.profile.city}` : ''
    }`;
  }, []);

  const handleSelect = useCallback(
    (candidate: Candidate) => {
      if (candidate.suggestionStatus?.status === 'BLOCKED') {
        toast.error(dict.toasts.cannotSelectError.title, {
          description: dict.toasts.cannotSelectError.description
            .replace('{{name}}', `${candidate.firstName} ${candidate.lastName}`)
            .replace(
              '{{withName}}',
              candidate.suggestionStatus.withCandidateName
            ),
        });
        return;
      }
      onChange(candidate);
      setOpen(false);
      setInputValue('');
      setActiveIndex(-1);
    },
    [onChange, dict]
  );

  const handleKeyDown = (e: KeyboardEvent) => {
    if (!open) return;
    switch (e.key) {
      case 'ArrowDown':
        e.preventDefault();
        setActiveIndex((prev) =>
          prev < filteredCandidates.length - 1 ? prev + 1 : prev
        );
        break;
      case 'ArrowUp':
        e.preventDefault();
        setActiveIndex((prev) => (prev > 0 ? prev - 1 : prev));
        break;
      case 'Enter':
        e.preventDefault();
        if (activeIndex >= 0 && activeIndex < filteredCandidates.length) {
          handleSelect(filteredCandidates[activeIndex]);
        }
        break;
      case 'Escape':
        e.preventDefault();
        setOpen(false);
        setActiveIndex(-1);
        break;
    }
  };

  return (
    <div className={className}>
      <div className="space-y-3">
        <div className="flex items-center gap-3">
          <div className="p-2 rounded-full bg-gradient-to-r from-purple-500 to-pink-500 text-white shadow-lg">
            <User className="w-5 h-5" />
          </div>
          <label className="text-lg font-bold text-gray-800">{label}</label>
        </div>
        <Popover open={open} onOpenChange={setOpen}>
          <PopoverTrigger asChild>
            <div className="relative group">
              <div className="absolute inset-0 bg-gradient-to-r from-purple-500/20 to-pink-500/20 rounded-2xl blur opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
              <div className="relative">
                <Search className="absolute right-4 top-1/2 transform -translate-y-1/2 h-5 w-5 text-purple-400 group-hover:text-purple-600 transition-colors" />
                <Input
                  value={value ? formatCandidateDisplay(value) : inputValue}
                  onChange={(e) => {
                    setInputValue(e.target.value);
                    if (!open) setOpen(true);
                    setActiveIndex(-1);
                  }}
                  onKeyDown={handleKeyDown}
                  onClick={() => !open && setOpen(true)}
                  placeholder={dict.searchPlaceholder}
                  className={cn(
                    'h-14 pr-14 text-right text-lg border-2 transition-all duration-300 rounded-2xl shadow-lg',
                    'bg-white/80 backdrop-blur-sm',
                    'border-purple-200 hover:border-purple-300 focus:border-purple-500 focus:ring-purple-200',
                    'placeholder:text-gray-400',
                    error &&
                      'border-red-300 focus:border-red-500 focus:ring-red-200'
                  )}
                  role="combobox"
                  aria-expanded={open}
                  aria-controls="candidate-listbox"
                  aria-activedescendant={
                    activeIndex >= 0
                      ? `candidate-${filteredCandidates[activeIndex]?.id}`
                      : undefined
                  }
                />
                <div className="absolute left-4 top-1/2 transform -translate-y-1/2">
                  <Sparkles className="h-4 w-4 text-purple-400" />
                </div>
              </div>
            </div>
          </PopoverTrigger>
          <PopoverContent
            className="p-0 w-[500px] border-0 shadow-2xl rounded-2xl bg-white/95 backdrop-blur-sm"
            align="start"
            side="bottom"
            sideOffset={8}
          >
            <Command shouldFilter={false}>
              <div className="relative">
                <CommandInput
                  placeholder={dict.commandInputPlaceholder}
                  value={inputValue}
                  onValueChange={setInputValue}
                  className="h-12 border-0 text-right text-lg bg-gradient-to-r from-purple-50 to-pink-50"
                />
                <div className="absolute right-4 top-1/2 transform -translate-y-1/2">
                  <Search className="h-4 w-4 text-purple-400" />
                </div>
              </div>
              <CommandList
                className="max-h-[400px] overflow-auto p-2"
                id="candidate-listbox"
                role="listbox"
              >
                {filteredCandidates.length === 0 ? (
                  <div className="text-center p-8">
                    <div className="w-16 h-16 rounded-full bg-gradient-to-br from-gray-100 to-gray-200 flex items-center justify-center mx-auto mb-4">
                      <Search className="w-8 h-8 text-gray-400" />
                    </div>
                    <h3 className="text-lg font-bold text-gray-800 mb-2">
                      {dict.noResults.title}
                    </h3>
                    <p className="text-gray-600">
                      {dict.noResults.description}
                    </p>
                  </div>
                ) : (
                  <CommandGroup>
                    <div className="grid gap-3">
                      {filteredCandidates.map((candidate, index) => (
                        <EnhancedCandidateCard
                          key={candidate.id}
                          dict={dict}
                          candidate={candidate}
                          onClick={() => handleSelect(candidate)}
                          isActive={index === activeIndex}
                          isBlocked={
                            candidate.suggestionStatus?.status === 'BLOCKED'
                          }
                        />
                      ))}
                    </div>
                  </CommandGroup>
                )}
              </CommandList>
            </Command>
          </PopoverContent>
        </Popover>
        {error && (
          <div className="flex items-center gap-2 p-3 bg-gradient-to-r from-red-50 to-pink-50 rounded-xl border border-red-200">
            <AlertTriangle className="w-4 h-4 text-red-500" />
            <p className="text-sm text-red-600 font-medium">{error}</p>
          </div>
        )}
      </div>
      {value && (
        <Card className="mt-4 border-0 shadow-xl bg-gradient-to-br from-white via-purple-50/30 to-pink-50/30 rounded-2xl overflow-hidden">
          <CardContent className="p-6">
            <div className="flex items-center justify-between mb-4">
              <div className="flex items-center gap-3">
                <div className="p-2 rounded-full bg-gradient-to-r from-green-500 to-emerald-500 text-white shadow-lg">
                  <Heart className="w-5 h-5" />
                </div>
                <h4 className="text-lg font-bold text-gray-800">
                  {dict.selectedDisplay.title}
                </h4>
              </div>
              <Button
                variant="ghost"
                size="sm"
                onClick={() => onChange(null)}
                className="text-red-600 hover:text-red-700 hover:bg-red-50 rounded-xl transition-all duration-300"
              >
                <Zap className="w-4 h-4 ml-1" />
                {dict.selectedDisplay.removeButton}
              </Button>
            </div>
            <EnhancedCandidateCard
              dict={dict}
              candidate={value}
              onClick={() => {}}
              isActive={true}
              isBlocked={false}
            />
            <div className="flex gap-3 mt-4">
              <Button
                variant="outline"
                size="sm"
                onClick={() => {}}
                className="flex-1 border-2 border-purple-200 text-purple-600 hover:bg-purple-50 rounded-xl transition-all duration-300"
              >
                <User className="w-4 h-4 ml-2" />
                {dict.selectedDisplay.viewProfileButton}
              </Button>
            </div>
          </CardContent>
        </Card>
      )}
    </div>
  );
};

export default CandidateSelector;
--- End of Content for CandidateSelector.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\suggestions\NewSuggestionForm\MatchPreview.tsx
--------------------------------------------------------------------------------
Content:
// src/components/matchmaker/suggestions/NewSuggestionForm/MatchPreview.tsx

import React from 'react';
import { Card, CardContent } from '@/components/ui/card';
import { Progress } from '@/components/ui/progress';
import { Badge } from '@/components/ui/badge';
import {
  AlertCircle,
  Heart,
  Star,
  Sparkles,
  TrendingUp,
  Award,
  Crown,
  Gem,
  Zap,
  Target,
  Trophy,
  Gift,
} from 'lucide-react';
import { calculateMatchScore } from '../utils/matchingAlgorithm';
import type { Candidate } from '../../new/types/candidates';
import type { MatchScore } from '../utils/matchingAlgorithm';
import { cn } from '@/lib/utils';
import type { MatchmakerPageDictionary } from '@/types/dictionary';

interface MatchPreviewProps {
  dict: MatchmakerPageDictionary['suggestionsDashboard']['newSuggestionForm']['matchPreview'];
  firstParty: Candidate;
  secondParty: Candidate;
  className?: string;
}

/**
 * Helper function to dynamically access nested dictionary properties using a dot-notation key.
 * @param dict - The dictionary object to search within.
 * @param key - The dot-separated key (e.g., "age.reasons.ideal").
 * @returns The translated string or the key itself as a fallback.
 */
const getTranslatedReason = (dict: any, key: string): string => {
  try {
    const keys = key.split('.');
    let result = dict;
    for (const k of keys) {
      if (result[k] === undefined) {
        // If any part of the path is missing, return the original key
        return key;
      }
      result = result[k];
    }
    return typeof result === 'string' ? result : key;
  } catch (error) {
    console.warn(`Translation key not found: ${key}`);
    return key; // Fallback to the key itself if an error occurs
  }
};

const MatchCriteriaCard: React.FC<{
  dict: MatchmakerPageDictionary['suggestionsDashboard']['newSuggestionForm']['matchPreview'];
  criterion: {
    name: string;
    score: number;
    reason?: string;
  };
  index: number;
}> = ({ dict, criterion, index }) => {
  const getCriterionInfo = (name: string) => {
    switch (name) {
      case 'age':
        return {
          icon: Target,
          label: dict.criteria.age,
          color: 'from-blue-500 to-cyan-500',
          bgColor: 'from-blue-50 to-cyan-50',
        };
      case 'location':
        return {
          icon: Crown,
          label: dict.criteria.location,
          color: 'from-green-500 to-emerald-500',
          bgColor: 'from-green-50 to-emerald-50',
        };
      case 'religious':
        return {
          icon: Sparkles,
          label: dict.criteria.religious,
          color: 'from-purple-500 to-pink-500',
          bgColor: 'from-purple-50 to-pink-50',
        };
      default:
        return {
          icon: Star,
          label: name,
          color: 'from-gray-500 to-slate-500',
          bgColor: 'from-gray-50 to-slate-50',
        };
    }
  };

  const info = getCriterionInfo(criterion.name);
  const IconComponent = info.icon;
  const scorePercentage = Math.round(criterion.score * 100);
  const translatedReason = criterion.reason
    ? getTranslatedReason(dict.criteria, criterion.reason)
    : '';

  const getScoreCategory = (score: number) => {
    if (score >= 0.9)
      return {
        label: dict.scoreCategories.perfect,
        color: 'text-emerald-600',
        bgColor: 'bg-emerald-100',
      };
    if (score >= 0.8)
      return {
        label: dict.scoreCategories.excellent,
        color: 'text-green-600',
        bgColor: 'bg-green-100',
      };
    if (score >= 0.7)
      return {
        label: dict.scoreCategories.good,
        color: 'text-blue-600',
        bgColor: 'bg-blue-100',
      };
    if (score >= 0.5)
      return {
        label: dict.scoreCategories.medium,
        color: 'text-yellow-600',
        bgColor: 'bg-yellow-100',
      };
    return {
      label: dict.scoreCategories.low,
      color: 'text-red-600',
      bgColor: 'bg-red-100',
    };
  };

  const scoreCategory = getScoreCategory(criterion.score);

  return (
    <div
      className={cn(
        'relative overflow-hidden rounded-2xl transition-all duration-500 group hover:scale-105',
        'bg-gradient-to-br',
        info.bgColor,
        'border border-white/50 shadow-lg hover:shadow-2xl'
      )}
      style={{
        animationDelay: `${index * 150}ms`,
        animationFillMode: 'both',
      }}
    >
      <div className="absolute inset-0">
        <div className="absolute top-0 right-0 w-16 h-16 bg-gradient-to-br from-white/30 to-transparent rounded-full blur-xl opacity-0 group-hover:opacity-100 transition-opacity duration-500"></div>
        <div className="absolute bottom-0 left-0 w-12 h-12 bg-gradient-to-br from-white/20 to-transparent rounded-full blur-lg opacity-0 group-hover:opacity-100 transition-opacity duration-700"></div>
      </div>
      <div className="relative z-10 p-6 space-y-4">
        <div className="flex items-center justify-between">
          <div className="flex items-center gap-3">
            <div
              className={cn(
                'p-3 rounded-full shadow-lg group-hover:scale-110 transition-transform bg-gradient-to-r text-white',
                info.color
              )}
            >
              <IconComponent className="w-5 h-5" />
            </div>
            <h4 className="text-lg font-bold text-gray-800">{info.label}</h4>
          </div>
          <Badge
            className={cn(
              'px-3 py-1 font-bold shadow-lg',
              scoreCategory.bgColor,
              scoreCategory.color
            )}
          >
            {scoreCategory.label}
          </Badge>
        </div>
        <div className="space-y-3">
          <div className="flex items-center justify-between">
            <span className="text-sm font-medium text-gray-600">
              {dict.scoreLabel}
            </span>
            <span className="text-2xl font-bold text-gray-800">
              {scorePercentage}%
            </span>
          </div>
          <div className="relative">
            <Progress
              value={scorePercentage}
              className="h-3 bg-white/50 shadow-inner"
            />
            <div className="absolute inset-0 rounded-full bg-gradient-to-r from-transparent via-white/20 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-500"></div>
          </div>
        </div>
        {translatedReason && (
          <div className="p-3 bg-white/60 backdrop-blur-sm rounded-xl border border-white/50 shadow-inner">
            <p className="text-sm text-gray-700 leading-relaxed font-medium">
              {translatedReason}
            </p>
          </div>
        )}
      </div>
    </div>
  );
};

const MatchPreview: React.FC<MatchPreviewProps> = ({
  dict,
  firstParty,
  secondParty,
  className,
}) => {
  const matchScore: MatchScore | null = calculateMatchScore(
    firstParty.profile,
    secondParty.profile
  );

  if (!matchScore) {
    return (
      <Card
        className={cn(
          'border-0 shadow-xl rounded-3xl overflow-hidden',
          className
        )}
      >
        <CardContent className="p-8">
          <div className="text-center space-y-6">
            <div className="w-24 h-24 rounded-full bg-gradient-to-br from-yellow-100 to-amber-100 flex items-center justify-center mx-auto shadow-xl">
              <AlertCircle className="w-12 h-12 text-yellow-500" />
            </div>
            <div>
              <h3 className="text-xl font-bold text-gray-800 mb-2">
                {dict.errorState.title}
              </h3>
              <p className="text-gray-600">{dict.errorState.description}</p>
            </div>
            <div className="p-4 bg-gradient-to-r from-yellow-50 to-amber-50 rounded-2xl border border-yellow-200">
              <p className="text-sm text-yellow-800 font-medium">
                {dict.errorState.suggestion}
              </p>
            </div>
          </div>
        </CardContent>
      </Card>
    );
  }

  const getMatchQuality = (score: number) => {
    const qualityMap = {
      perfect: {
        icon: Crown,
        bgGradient: 'from-purple-500 to-pink-500',
        bgColor: 'from-purple-50 to-pink-50',
        animation: 'animate-pulse',
      },
      excellent: {
        icon: Gem,
        bgGradient: 'from-emerald-500 to-green-500',
        bgColor: 'from-emerald-50 to-green-50',
        animation: '',
      },
      good: {
        icon: Trophy,
        bgGradient: 'from-blue-500 to-cyan-500',
        bgColor: 'from-blue-50 to-cyan-50',
        animation: '',
      },
      medium: {
        icon: Star,
        bgGradient: 'from-yellow-500 to-amber-500',
        bgColor: 'from-yellow-50 to-amber-50',
        animation: '',
      },
      low: {
        icon: AlertCircle,
        bgGradient: 'from-red-500 to-pink-500',
        bgColor: 'from-red-50 to-pink-50',
        animation: '',
      },
    };

    if (score >= 95)
      return { ...dict.qualityLevels.perfect, ...qualityMap.perfect };
    if (score >= 85)
      return { ...dict.qualityLevels.excellent, ...qualityMap.excellent };
    if (score >= 75) return { ...dict.qualityLevels.good, ...qualityMap.good };
    if (score >= 60)
      return { ...dict.qualityLevels.medium, ...qualityMap.medium };
    return { ...dict.qualityLevels.low, ...qualityMap.low };
  };

  const quality = getMatchQuality(matchScore.score);
  const Icon = quality.icon;

  return (
    <Card
      className={cn(
        'border-0 shadow-2xl rounded-3xl overflow-hidden transition-all duration-500 hover:shadow-3xl',
        'bg-gradient-to-br',
        quality.bgColor,
        className
      )}
    >
      <div className="absolute inset-0">
        <div className="absolute top-0 right-0 w-64 h-64 bg-gradient-to-br from-white/20 to-transparent rounded-full blur-3xl animate-float"></div>
        <div
          className="absolute bottom-0 left-0 w-48 h-48 bg-gradient-to-br from-white/10 to-transparent rounded-full blur-2xl animate-float"
          style={{ animationDelay: '2s' }}
        ></div>
        <div
          className="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-80 h-80 bg-gradient-to-br from-white/5 to-transparent rounded-full blur-3xl animate-float"
          style={{ animationDelay: '4s' }}
        ></div>
      </div>
      <CardContent className="relative z-10 p-8 space-y-8">
        <div className="text-center space-y-6">
          <div className="flex items-center justify-center">
            <div
              className={cn(
                'p-6 rounded-full shadow-2xl bg-gradient-to-r text-white transform hover:scale-110 transition-transform duration-300',
                quality.bgGradient,
                quality.animation
              )}
            >
              <Icon className="w-12 h-12" />
            </div>
          </div>
          <div className="space-y-2">
            <h2 className="text-3xl font-bold text-gray-800">{quality.text}</h2>
            <p className="text-lg text-gray-600 leading-relaxed">
              {quality.description}
            </p>
          </div>
          <div className="relative">
            <div className="flex items-center justify-center gap-4 mb-4">
              <div className="text-center">
                <div className="text-5xl font-bold bg-gradient-to-r from-purple-600 via-pink-600 to-blue-600 bg-clip-text text-transparent">
                  {Math.round(matchScore.score)}%
                </div>
                <p className="text-sm font-medium text-gray-600 mt-1">
                  {dict.generalScoreLabel}
                </p>
              </div>
            </div>
            <div className="relative w-32 h-32 mx-auto">
              <svg
                className="w-32 h-32 transform -rotate-90"
                viewBox="0 0 100 100"
              >
                <circle
                  cx="50"
                  cy="50"
                  r="40"
                  stroke="currentColor"
                  strokeWidth="8"
                  fill="transparent"
                  className="text-gray-200"
                />
                <circle
                  cx="50"
                  cy="50"
                  r="40"
                  stroke="url(#gradient)"
                  strokeWidth="8"
                  fill="transparent"
                  strokeDasharray={`${2 * Math.PI * 40}`}
                  strokeDashoffset={`${2 * Math.PI * 40 * (1 - matchScore.score / 100)}`}
                  className="transition-all duration-1000 ease-out"
                  strokeLinecap="round"
                />
                <defs>
                  <linearGradient
                    id="gradient"
                    x1="0%"
                    y1="0%"
                    x2="100%"
                    y2="0%"
                  >
                    <stop offset="0%" stopColor="#8B5CF6" />
                    <stop offset="50%" stopColor="#EC4899" />
                    <stop offset="100%" stopColor="#3B82F6" />
                  </linearGradient>
                </defs>
              </svg>
              <div className="absolute inset-0 flex items-center justify-center">
                <Sparkles className="w-8 h-8 text-purple-500 animate-pulse" />
              </div>
            </div>
          </div>
        </div>
        <div className="space-y-6">
          <div className="text-center">
            <h3 className="text-2xl font-bold text-gray-800 mb-2 flex items-center justify-center gap-3">
              <TrendingUp className="w-6 h-6 text-purple-500" />
              {dict.criteriaSection.title}
            </h3>
            <p className="text-gray-600">{dict.criteriaSection.description}</p>
          </div>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
            {matchScore.criteria.map((criterion, index) => (
              <div key={criterion.name} className="animate-fade-in-up">
                <MatchCriteriaCard
                  dict={dict}
                  criterion={criterion}
                  index={index}
                />
              </div>
            ))}
          </div>
        </div>
        {matchScore.reasons.length > 0 && (
          <div className="space-y-4">
            <div className="text-center">
              <h4 className="text-xl font-bold text-gray-800 mb-2 flex items-center justify-center gap-3">
                <Heart className="w-5 h-5 text-red-500" />
                {dict.reasonsSection.title}
              </h4>
            </div>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              {matchScore.reasons.map((reasonKey, index) => (
                <div
                  key={index}
                  className="flex items-start gap-3 p-4 bg-white/60 backdrop-blur-sm rounded-2xl border border-white/50 shadow-lg hover:shadow-xl transition-all duration-300 group"
                  style={{
                    animationDelay: `${(index + 3) * 150}ms`,
                    animationFillMode: 'both',
                  }}
                >
                  <div className="p-2 rounded-full bg-gradient-to-r from-green-500 to-emerald-500 text-white shadow-lg group-hover:scale-110 transition-transform">
                    <Gift className="w-4 h-4" />
                  </div>
                  <p className="text-gray-700 leading-relaxed font-medium flex-1">
                    {getTranslatedReason(dict.criteria, reasonKey)}
                  </p>
                </div>
              ))}
            </div>
          </div>
        )}
        <div className="p-6 bg-white/70 backdrop-blur-sm rounded-2xl border border-white/50 shadow-xl">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-4">
              <div className="p-3 rounded-full bg-gradient-to-r from-indigo-500 to-purple-500 text-white shadow-lg">
                <Award className="w-6 h-6" />
              </div>
              <div>
                <h4 className="text-lg font-bold text-gray-800">
                  {dict.summary.title}
                </h4>
                <p className="text-gray-600">{dict.summary.description}</p>
              </div>
            </div>
            <div className="text-right">
              <div className="flex items-center gap-2">
                {matchScore.score >= 80 ? (
                  <>
                    <Zap className="w-5 h-5 text-green-500" />
                    <span className="font-bold text-green-600">
                      {dict.summary.recommendations.high}
                    </span>
                  </>
                ) : matchScore.score >= 60 ? (
                  <>
                    <Star className="w-5 h-5 text-blue-500" />
                    <span className="font-bold text-blue-600">
                      {dict.summary.recommendations.medium}
                    </span>
                  </>
                ) : (
                  <>
                    <AlertCircle className="w-5 h-5 text-yellow-500" />
                    <span className="font-bold text-yellow-600">
                      {dict.summary.recommendations.low}
                    </span>
                  </>
                )}
              </div>
              <p className="text-sm text-gray-500 mt-1">
                {dict.summary.basedOn.replace(
                  '{{count}}',
                  matchScore.criteria.length.toString()
                )}
              </p>
            </div>
          </div>
        </div>
      </CardContent>
    </Card>
  );
};

export default MatchPreview;
--- End of Content for MatchPreview.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\suggestions\NewSuggestionForm\NewSuggestionForm_contents.txt
--------------------------------------------------------------------------------
Content:
################################################################################
# Directory Content Map For: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\app\components\matchmaker\suggestions\NewSuggestionForm
# Generated on: 2025-08-18 14:36:43
################################################################################

================================================================================
Directory: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\app\components\matchmaker\suggestions\NewSuggestionForm
================================================================================

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\app\components\matchmaker\suggestions\NewSuggestionForm\CandidateSelector.tsx
--------------------------------------------------------------------------------
Content:
// src/app/components/matchmaker/suggestions/NewSuggestionForm/CandidateSelector.tsx

import React, { useState, useCallback, KeyboardEvent } from 'react';
import {
  Search,
  AlertTriangle,
  Clock,
  User,
  Crown,
  Star,
  Heart,
  Sparkles,
  MapPin,
  Award,
  Zap,
  Shield,
} from 'lucide-react';
import { Input } from '@/components/ui/input';
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from '@/components/ui/popover';
import {
  Command,
  CommandEmpty,
  CommandGroup,
  CommandInput,
  CommandList,
} from '@/components/ui/command';
import { Button } from '@/components/ui/button';
import { Card, CardContent } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';
import {
  calculateAge,
  cn,
  getRelativeCloudinaryPath,
  getInitials,
} from '@/lib/utils';
import type { Candidate } from '../../new/types/candidates';
import { toast } from 'sonner';

interface CandidateSelectorProps {
  value: Candidate | null;
  onChange: (candidate: Candidate | null) => void;
  otherParty?: Candidate | null;
  label: string;
  candidates: Candidate[];
  className?: string;
  fieldName: string;
  error?: string;
}

const EnhancedCandidateCard: React.FC<{
  candidate: Candidate;
  onClick: () => void;
  isActive: boolean;
  isBlocked: boolean;
}> = ({ candidate, onClick, isActive, isBlocked }) => {
  const age = calculateAge(new Date(candidate.profile.birthDate));
  const mainImage = candidate.images.find((img) => img.isMain)?.url;

  const getStatusInfo = () => {
    if (isBlocked) {
      return {
        icon: Shield,
        label: 'חסום',
        className:
          'bg-gradient-to-r from-red-500 to-pink-500 text-white animate-pulse',
        description: `בהצעה פעילה עם ${candidate.suggestionStatus?.withCandidateName}`,
      };
    }

    if (candidate.suggestionStatus?.status === 'PENDING') {
      return {
        icon: Clock,
        label: 'ממתין',
        className: 'bg-gradient-to-r from-yellow-500 to-amber-500 text-white',
        description: `הצעה ממתינה עם ${candidate.suggestionStatus.withCandidateName}`,
      };
    }

    return {
      icon: Star,
      label: 'זמין',
      className: 'bg-gradient-to-r from-green-500 to-emerald-500 text-white',
      description: 'זמין להצעה חדשה',
    };
  };

  const statusInfo = getStatusInfo();
  const StatusIcon = statusInfo.icon;

  return (
    <div
      className={cn(
        'group relative overflow-hidden rounded-2xl transition-all duration-300 cursor-pointer',
        'bg-gradient-to-br from-white via-gray-50/30 to-white border-2 shadow-lg hover:shadow-2xl',
        isActive && 'ring-4 ring-purple-500 ring-opacity-50 border-purple-300',
        isBlocked && 'opacity-60 cursor-not-allowed',
        !isBlocked && 'hover:scale-105 hover:border-purple-300'
      )}
      onClick={!isBlocked ? onClick : undefined}
    >
      {/* Background decorative elements */}
      <div className="absolute inset-0">
        <div className="absolute top-0 right-0 w-20 h-20 bg-gradient-to-br from-purple-200/20 to-pink-200/20 rounded-full blur-xl opacity-0 group-hover:opacity-100 transition-opacity duration-500"></div>
        <div className="absolute bottom-0 left-0 w-16 h-16 bg-gradient-to-br from-cyan-200/20 to-blue-200/20 rounded-full blur-lg opacity-0 group-hover:opacity-100 transition-opacity duration-700"></div>
      </div>

      <div className="relative z-10 p-4 space-y-4">
        {/* Header with status */}
        <div className="flex items-center justify-between">
          <Badge className={cn('shadow-lg font-bold', statusInfo.className)}>
            <StatusIcon className="w-3 h-3 ml-1" />
            {statusInfo.label}
          </Badge>

          {candidate.profile.religiousLevel && (
            <Badge className="bg-gradient-to-r from-indigo-500 to-purple-500 text-white shadow-lg">
              <Crown className="w-3 h-3 ml-1" />
              {candidate.profile.religiousLevel}
            </Badge>
          )}
        </div>

        {/* Profile section */}
        <div className="flex items-center gap-4">
          <div className="relative">
            <Avatar className="w-16 h-16 border-4 border-white shadow-xl ring-2 ring-purple-200 group-hover:ring-purple-400 transition-all duration-300">
              {mainImage ? (
                <AvatarImage
                  src={getRelativeCloudinaryPath(mainImage)}
                  alt={`${candidate.firstName} ${candidate.lastName}`}
                  className="object-cover"
                />
              ) : (
                <AvatarFallback className="bg-gradient-to-br from-purple-500 to-pink-500 text-white font-bold text-lg">
                  {getInitials(`${candidate.firstName} ${candidate.lastName}`)}
                </AvatarFallback>
              )}
            </Avatar>

            {/* Online indicator */}
            <div className="absolute -bottom-1 -right-1 w-5 h-5 bg-gradient-to-r from-green-400 to-emerald-400 border-2 border-white rounded-full shadow-lg animate-pulse"></div>
          </div>

          <div className="flex-1 min-w-0">
            <h3 className="text-lg font-bold text-gray-800 truncate group-hover:text-purple-700 transition-colors">
              {candidate.firstName} {candidate.lastName}
            </h3>

            <div className="flex items-center gap-2 mt-1">
              <div className="flex items-center gap-1 text-sm text-gray-600">
                <User className="w-4 h-4 text-blue-500" />
                <span className="font-medium">{age} שנים</span>
              </div>

              {candidate.profile.city && (
                <div className="flex items-center gap-1 text-sm text-gray-600">
                  <MapPin className="w-4 h-4 text-green-500" />
                  <span className="truncate">{candidate.profile.city}</span>
                </div>
              )}
            </div>
          </div>
        </div>

        {/* Details grid */}
        <div className="grid grid-cols-2 gap-3">
          {candidate.profile.occupation && (
            <div className="flex items-center gap-2 p-2 bg-gradient-to-r from-blue-50 to-cyan-50 rounded-lg border border-blue-100 shadow-sm">
              <Award className="w-4 h-4 text-blue-500 flex-shrink-0" />
              <span className="text-sm font-medium text-blue-700 truncate">
                {candidate.profile.occupation}
              </span>
            </div>
          )}

          {candidate.profile.education && (
            <div className="flex items-center gap-2 p-2 bg-gradient-to-r from-purple-50 to-pink-50 rounded-lg border border-purple-100 shadow-sm">
              <Sparkles className="w-4 h-4 text-purple-500 flex-shrink-0" />
              <span className="text-sm font-medium text-purple-700 truncate">
                {candidate.profile.education}
              </span>
            </div>
          )}
        </div>

        {/* Status description */}
        {isBlocked && (
          <div className="p-3 bg-gradient-to-r from-red-50 to-pink-50 rounded-lg border border-red-200">
            <div className="flex items-start gap-2">
              <AlertTriangle className="w-4 h-4 text-red-500 mt-0.5 flex-shrink-0" />
              <div className="text-sm text-red-700">
                <p className="font-medium">לא ניתן לבחור</p>
                <p className="text-xs">{statusInfo.description}</p>
              </div>
            </div>
          </div>
        )}
      </div>

      {/* Hover overlay */}
      <div className="absolute inset-0 bg-gradient-to-r from-purple-500/5 to-pink-500/5 opacity-0 group-hover:opacity-100 transition-opacity duration-300 pointer-events-none"></div>
    </div>
  );
};

const CandidateSelector: React.FC<CandidateSelectorProps> = ({
  value,
  onChange,
  otherParty,
  label,
  candidates,
  className,
  error,
}) => {
  const [open, setOpen] = useState(false);
  const [inputValue, setInputValue] = useState('');
  const [activeIndex, setActiveIndex] = useState(-1);

  const filteredCandidates = candidates.filter((candidate) => {
    if (otherParty && candidate.id === otherParty.id) return false;

    if (inputValue) {
      const searchTerm = inputValue.toLowerCase();
      return (
        candidate.firstName.toLowerCase().includes(searchTerm) ||
        candidate.lastName.toLowerCase().includes(searchTerm) ||
        candidate.profile.city?.toLowerCase().includes(searchTerm) ||
        candidate.profile.occupation?.toLowerCase().includes(searchTerm)
      );
    }
    return true;
  });

  const formatCandidateDisplay = useCallback((candidate: Candidate) => {
    const age = calculateAge(new Date(candidate.profile.birthDate));
    return `${candidate.firstName} ${candidate.lastName}, ${age}${
      candidate.profile.city ? `, ${candidate.profile.city}` : ''
    }`;
  }, []);

  const handleSelect = useCallback(
    (candidate: Candidate) => {
      if (candidate.suggestionStatus?.status === 'BLOCKED') {
        toast.error('לא ניתן לבחור מועמד זה', {
          description: `${candidate.firstName} ${candidate.lastName} כבר נמצא/ת בהצעה פעילה עם ${candidate.suggestionStatus.withCandidateName}.`,
        });
        return;
      }

      onChange(candidate);
      setOpen(false);
      setInputValue('');
      setActiveIndex(-1);
    },
    [onChange]
  );

  const handleKeyDown = (e: KeyboardEvent) => {
    if (!open) return;

    switch (e.key) {
      case 'ArrowDown':
        e.preventDefault();
        setActiveIndex((prev) =>
          prev < filteredCandidates.length - 1 ? prev + 1 : prev
        );
        break;
      case 'ArrowUp':
        e.preventDefault();
        setActiveIndex((prev) => (prev > 0 ? prev - 1 : prev));
        break;
      case 'Enter':
        e.preventDefault();
        if (activeIndex >= 0 && activeIndex < filteredCandidates.length) {
          handleSelect(filteredCandidates[activeIndex]);
        }
        break;
      case 'Escape':
        e.preventDefault();
        setOpen(false);
        setActiveIndex(-1);
        break;
    }
  };

  return (
    <div className={className}>
      <div className="space-y-3">
        {/* Enhanced Label */}
        <div className="flex items-center gap-3">
          <div className="p-2 rounded-full bg-gradient-to-r from-purple-500 to-pink-500 text-white shadow-lg">
            <User className="w-5 h-5" />
          </div>
          <label className="text-lg font-bold text-gray-800">{label}</label>
        </div>

        {/* Enhanced Search Input */}
        <Popover open={open} onOpenChange={setOpen}>
          <PopoverTrigger asChild>
            <div className="relative group">
              <div className="absolute inset-0 bg-gradient-to-r from-purple-500/20 to-pink-500/20 rounded-2xl blur opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
              <div className="relative">
                <Search className="absolute right-4 top-1/2 transform -translate-y-1/2 h-5 w-5 text-purple-400 group-hover:text-purple-600 transition-colors" />
                <Input
                  value={value ? formatCandidateDisplay(value) : inputValue}
                  onChange={(e) => {
                    setInputValue(e.target.value);
                    if (!open) setOpen(true);
                    setActiveIndex(-1);
                  }}
                  onKeyDown={handleKeyDown}
                  onClick={() => !open && setOpen(true)}
                  placeholder="חפש/י מועמד/ת..."
                  className={cn(
                    'h-14 pr-14 text-right text-lg border-2 transition-all duration-300 rounded-2xl shadow-lg',
                    'bg-white/80 backdrop-blur-sm',
                    'border-purple-200 hover:border-purple-300 focus:border-purple-500 focus:ring-purple-200',
                    'placeholder:text-gray-400',
                    error &&
                      'border-red-300 focus:border-red-500 focus:ring-red-200'
                  )}
                  role="combobox"
                  aria-expanded={open}
                  aria-controls="candidate-listbox"
                  aria-activedescendant={
                    activeIndex >= 0
                      ? `candidate-${filteredCandidates[activeIndex]?.id}`
                      : undefined
                  }
                />
                <div className="absolute left-4 top-1/2 transform -translate-y-1/2">
                  <Sparkles className="h-4 w-4 text-purple-400" />
                </div>
              </div>
            </div>
          </PopoverTrigger>

          <PopoverContent
            className="p-0 w-[500px] border-0 shadow-2xl rounded-2xl bg-white/95 backdrop-blur-sm"
            align="start"
            side="bottom"
            sideOffset={8}
          >
            <Command shouldFilter={false}>
              <div className="relative">
                <CommandInput
                  placeholder="חיפוש מועמדים..."
                  value={inputValue}
                  onValueChange={setInputValue}
                  className="h-12 border-0 text-right text-lg bg-gradient-to-r from-purple-50 to-pink-50"
                />
                <div className="absolute right-4 top-1/2 transform -translate-y-1/2">
                  <Search className="h-4 w-4 text-purple-400" />
                </div>
              </div>

              <CommandList
                className="max-h-[400px] overflow-auto p-2"
                id="candidate-listbox"
                role="listbox"
              >
                <CommandEmpty>
                  <div className="text-center p-8">
                    <div className="w-16 h-16 rounded-full bg-gradient-to-br from-gray-100 to-gray-200 flex items-center justify-center mx-auto mb-4">
                      <Search className="w-8 h-8 text-gray-400" />
                    </div>
                    <h3 className="text-lg font-bold text-gray-800 mb-2">
                      לא נמצאו תוצאות
                    </h3>
                    <p className="text-gray-600">נסה לשנות את מונחי החיפוש</p>
                  </div>
                </CommandEmpty>

                <CommandGroup>
                  <div className="grid gap-3">
                    {filteredCandidates.map((candidate, index) => {
                      const isBlocked =
                        candidate.suggestionStatus?.status === 'BLOCKED';
                      return (
                        <EnhancedCandidateCard
                          key={candidate.id}
                          candidate={candidate}
                          onClick={() => handleSelect(candidate)}
                          isActive={index === activeIndex}
                          isBlocked={isBlocked}
                        />
                      );
                    })}
                  </div>
                </CommandGroup>
              </CommandList>
            </Command>
          </PopoverContent>
        </Popover>

        {error && (
          <div className="flex items-center gap-2 p-3 bg-gradient-to-r from-red-50 to-pink-50 rounded-xl border border-red-200">
            <AlertTriangle className="w-4 h-4 text-red-500" />
            <p className="text-sm text-red-600 font-medium">{error}</p>
          </div>
        )}
      </div>

      {/* Selected Candidate Display */}
      {value && (
        <Card className="mt-4 border-0 shadow-xl bg-gradient-to-br from-white via-purple-50/30 to-pink-50/30 rounded-2xl overflow-hidden">
          <CardContent className="p-6">
            <div className="flex items-center justify-between mb-4">
              <div className="flex items-center gap-3">
                <div className="p-2 rounded-full bg-gradient-to-r from-green-500 to-emerald-500 text-white shadow-lg">
                  <Heart className="w-5 h-5" />
                </div>
                <h4 className="text-lg font-bold text-gray-800">
                  מועמד/ת נבחר/ת
                </h4>
              </div>

              <Button
                variant="ghost"
                size="sm"
                onClick={() => onChange(null)}
                className="text-red-600 hover:text-red-700 hover:bg-red-50 rounded-xl transition-all duration-300"
              >
                <Zap className="w-4 h-4 ml-1" />
                הסר בחירה
              </Button>
            </div>

            <EnhancedCandidateCard
              candidate={value}
              onClick={() => {}}
              isActive={true}
              isBlocked={false}
            />

            <div className="flex gap-3 mt-4">
              <Button
                variant="outline"
                size="sm"
                onClick={() => {
                  /* Implement view profile handler */
                }}
                className="flex-1 border-2 border-purple-200 text-purple-600 hover:bg-purple-50 rounded-xl transition-all duration-300"
              >
                <User className="w-4 h-4 ml-2" />
                צפה בפרופיל מלא
              </Button>
            </div>
          </CardContent>
        </Card>
      )}
    </div>
  );
};

export default CandidateSelector;
--- End of Content for CandidateSelector.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\app\components\matchmaker\suggestions\NewSuggestionForm\MatchPreview.tsx
--------------------------------------------------------------------------------
Content:
// src/app/components/matchmaker/suggestions/NewSuggestionForm/MatchPreview.tsx

import React from 'react';
import { Card, CardContent } from '@/components/ui/card';
import { Progress } from '@/components/ui/progress';
import { Badge } from '@/components/ui/badge';
import {
  CheckCircle,
  AlertCircle,
  XCircle,
  Heart,
  Star,
  Sparkles,
  TrendingUp,
  Award,
  Crown,
  Gem,
  Zap,
  Target,
  Trophy,
  Flame,
  Gift,
} from 'lucide-react';
import { calculateMatchScore } from '../utils/matchingAlgorithm';
import type { Candidate } from '../../new/types/candidates';
import type { MatchScore } from '../utils/matchingAlgorithm';
import { cn } from '@/lib/utils';

interface MatchPreviewProps {
  firstParty: Candidate;
  secondParty: Candidate;
  className?: string;
}

const MatchCriteriaCard: React.FC<{
  criterion: {
    name: string;
    score: number;
    reason?: string;
  };
  index: number;
}> = ({ criterion, index }) => {
  const getCriterionInfo = (name: string) => {
    switch (name) {
      case 'age':
        return {
          icon: Target,
          label: 'גיל',
          color: 'from-blue-500 to-cyan-500',
          bgColor: 'from-blue-50 to-cyan-50',
        };
      case 'location':
        return {
          icon: Crown,
          label: 'מיקום',
          color: 'from-green-500 to-emerald-500',
          bgColor: 'from-green-50 to-emerald-50',
        };
      case 'religious':
        return {
          icon: Sparkles,
          label: 'רמה דתית',
          color: 'from-purple-500 to-pink-500',
          bgColor: 'from-purple-50 to-pink-50',
        };
      default:
        return {
          icon: Star,
          label: name,
          color: 'from-gray-500 to-slate-500',
          bgColor: 'from-gray-50 to-slate-50',
        };
    }
  };

  const info = getCriterionInfo(criterion.name);
  const IconComponent = info.icon;
  const scorePercentage = Math.round(criterion.score * 100);

  const getScoreCategory = (score: number) => {
    if (score >= 0.9)
      return {
        label: 'מושלם',
        color: 'text-emerald-600',
        bgColor: 'bg-emerald-100',
      };
    if (score >= 0.8)
      return {
        label: 'מצוין',
        color: 'text-green-600',
        bgColor: 'bg-green-100',
      };
    if (score >= 0.7)
      return { label: 'טוב', color: 'text-blue-600', bgColor: 'bg-blue-100' };
    if (score >= 0.5)
      return {
        label: 'בינוני',
        color: 'text-yellow-600',
        bgColor: 'bg-yellow-100',
      };
    return { label: 'נמוך', color: 'text-red-600', bgColor: 'bg-red-100' };
  };

  const scoreCategory = getScoreCategory(criterion.score);

  return (
    <div
      className={cn(
        'relative overflow-hidden rounded-2xl transition-all duration-500 group hover:scale-105',
        'bg-gradient-to-br',
        info.bgColor,
        'border border-white/50 shadow-lg hover:shadow-2xl'
      )}
      style={{
        animationDelay: `${index * 150}ms`,
        animationFillMode: 'both',
      }}
    >
      {/* Background decoration */}
      <div className="absolute inset-0">
        <div className="absolute top-0 right-0 w-16 h-16 bg-gradient-to-br from-white/30 to-transparent rounded-full blur-xl opacity-0 group-hover:opacity-100 transition-opacity duration-500"></div>
        <div className="absolute bottom-0 left-0 w-12 h-12 bg-gradient-to-br from-white/20 to-transparent rounded-full blur-lg opacity-0 group-hover:opacity-100 transition-opacity duration-700"></div>
      </div>

      <div className="relative z-10 p-6 space-y-4">
        {/* Header */}
        <div className="flex items-center justify-between">
          <div className="flex items-center gap-3">
            <div
              className={cn(
                'p-3 rounded-full shadow-lg group-hover:scale-110 transition-transform bg-gradient-to-r text-white',
                info.color
              )}
            >
              <IconComponent className="w-5 h-5" />
            </div>
            <h4 className="text-lg font-bold text-gray-800">{info.label}</h4>
          </div>

          <Badge
            className={cn(
              'px-3 py-1 font-bold shadow-lg',
              scoreCategory.bgColor,
              scoreCategory.color
            )}
          >
            {scoreCategory.label}
          </Badge>
        </div>

        {/* Score visualization */}
        <div className="space-y-3">
          <div className="flex items-center justify-between">
            <span className="text-sm font-medium text-gray-600">התאמה</span>
            <span className="text-2xl font-bold text-gray-800">
              {scorePercentage}%
            </span>
          </div>

          <div className="relative">
            <Progress
              value={scorePercentage}
              className="h-3 bg-white/50 shadow-inner"
            />
            <div className="absolute inset-0 rounded-full bg-gradient-to-r from-transparent via-white/20 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-500"></div>
          </div>
        </div>

        {/* Reason */}
        {criterion.reason && (
          <div className="p-3 bg-white/60 backdrop-blur-sm rounded-xl border border-white/50 shadow-inner">
            <p className="text-sm text-gray-700 leading-relaxed font-medium">
              {criterion.reason}
            </p>
          </div>
        )}
      </div>
    </div>
  );
};

const MatchPreview: React.FC<MatchPreviewProps> = ({
  firstParty,
  secondParty,
  className,
}) => {
  // Calculate match score using the existing algorithm
  const matchScore: MatchScore | null = calculateMatchScore(
    firstParty.profile,
    secondParty.profile
  );

  if (!matchScore) {
    return (
      <Card
        className={cn(
          'border-0 shadow-xl rounded-3xl overflow-hidden',
          className
        )}
      >
        <CardContent className="p-8">
          <div className="text-center space-y-6">
            <div className="w-24 h-24 rounded-full bg-gradient-to-br from-yellow-100 to-amber-100 flex items-center justify-center mx-auto shadow-xl">
              <AlertCircle className="w-12 h-12 text-yellow-500" />
            </div>
            <div>
              <h3 className="text-xl font-bold text-gray-800 mb-2">
                לא ניתן לחשב התאמה
              </h3>
              <p className="text-gray-600">
                חסרים נתונים חיוניים לחישוב ההתאמה
              </p>
            </div>
            <div className="p-4 bg-gradient-to-r from-yellow-50 to-amber-50 rounded-2xl border border-yellow-200">
              <p className="text-sm text-yellow-800 font-medium">
                אנא ודא שלשני המועמדים יש פרופיל מלא עם תאריך לידה, עיר מגורים
                ורמה דתית
              </p>
            </div>
          </div>
        </CardContent>
      </Card>
    );
  }

  // Determine match quality with enhanced categories
  const getMatchQuality = (score: number) => {
    if (score >= 95)
      return {
        icon: Crown,
        color: 'text-purple-600',
        bgGradient: 'from-purple-500 to-pink-500',
        bgColor: 'from-purple-50 to-pink-50',
        text: 'התאמה מושלמת',
        description: 'זוג אידיאלי עם התאמה יוצאת דופן!',
        animation: 'animate-pulse',
      };
    if (score >= 85)
      return {
        icon: Gem,
        color: 'text-emerald-600',
        bgGradient: 'from-emerald-500 to-green-500',
        bgColor: 'from-emerald-50 to-green-50',
        text: 'התאמה מעולה',
        description: 'זוג עם פוטנציאל גבוה להצלחה',
        animation: '',
      };
    if (score >= 75)
      return {
        icon: Trophy,
        color: 'text-blue-600',
        bgGradient: 'from-blue-500 to-cyan-500',
        bgColor: 'from-blue-50 to-cyan-50',
        text: 'התאמה טובה',
        description: 'התאמה איכותית עם סיכויים טובים',
        animation: '',
      };
    if (score >= 60)
      return {
        icon: Star,
        color: 'text-yellow-600',
        bgGradient: 'from-yellow-500 to-amber-500',
        bgColor: 'from-yellow-50 to-amber-50',
        text: 'התאמה בינונית',
        description: 'יש פוטנציאל, שווה לבדוק',
        animation: '',
      };
    return {
      icon: AlertCircle,
      color: 'text-red-600',
      bgGradient: 'from-red-500 to-pink-500',
      bgColor: 'from-red-50 to-pink-50',
      text: 'התאמה נמוכה',
      description: 'התאמה מוגבלת, יש לשקול בזהירות',
      animation: '',
    };
  };

  const quality = getMatchQuality(matchScore.score);
  const Icon = quality.icon;

  return (
    <Card
      className={cn(
        'border-0 shadow-2xl rounded-3xl overflow-hidden transition-all duration-500 hover:shadow-3xl',
        'bg-gradient-to-br',
        quality.bgColor,
        className
      )}
    >
      {/* Animated background */}
      <div className="absolute inset-0">
        <div className="absolute top-0 right-0 w-64 h-64 bg-gradient-to-br from-white/20 to-transparent rounded-full blur-3xl animate-float"></div>
        <div
          className="absolute bottom-0 left-0 w-48 h-48 bg-gradient-to-br from-white/10 to-transparent rounded-full blur-2xl animate-float"
          style={{ animationDelay: '2s' }}
        ></div>
        <div
          className="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-80 h-80 bg-gradient-to-br from-white/5 to-transparent rounded-full blur-3xl animate-float"
          style={{ animationDelay: '4s' }}
        ></div>
      </div>

      <CardContent className="relative z-10 p-8 space-y-8">
        {/* Header Section */}
        <div className="text-center space-y-6">
          <div className="flex items-center justify-center">
            <div
              className={cn(
                'p-6 rounded-full shadow-2xl bg-gradient-to-r text-white transform hover:scale-110 transition-transform duration-300',
                quality.bgGradient,
                quality.animation
              )}
            >
              <Icon className="w-12 h-12" />
            </div>
          </div>

          <div className="space-y-2">
            <h2 className="text-3xl font-bold text-gray-800">{quality.text}</h2>
            <p className="text-lg text-gray-600 leading-relaxed">
              {quality.description}
            </p>
          </div>

          {/* Score display */}
          <div className="relative">
            <div className="flex items-center justify-center gap-4 mb-4">
              <div className="text-center">
                <div className="text-5xl font-bold bg-gradient-to-r from-purple-600 via-pink-600 to-blue-600 bg-clip-text text-transparent">
                  {Math.round(matchScore.score)}%
                </div>
                <p className="text-sm font-medium text-gray-600 mt-1">
                  ציון התאמה כללי
                </p>
              </div>
            </div>

            {/* Progress Ring */}
            <div className="relative w-32 h-32 mx-auto">
              <svg
                className="w-32 h-32 transform -rotate-90"
                viewBox="0 0 100 100"
              >
                <circle
                  cx="50"
                  cy="50"
                  r="40"
                  stroke="currentColor"
                  strokeWidth="8"
                  fill="transparent"
                  className="text-gray-200"
                />
                <circle
                  cx="50"
                  cy="50"
                  r="40"
                  stroke="url(#gradient)"
                  strokeWidth="8"
                  fill="transparent"
                  strokeDasharray={`${2 * Math.PI * 40}`}
                  strokeDashoffset={`${2 * Math.PI * 40 * (1 - matchScore.score / 100)}`}
                  className="transition-all duration-1000 ease-out"
                  strokeLinecap="round"
                />
                <defs>
                  <linearGradient
                    id="gradient"
                    x1="0%"
                    y1="0%"
                    x2="100%"
                    y2="0%"
                  >
                    <stop offset="0%" stopColor="#8B5CF6" />
                    <stop offset="50%" stopColor="#EC4899" />
                    <stop offset="100%" stopColor="#3B82F6" />
                  </linearGradient>
                </defs>
              </svg>
              <div className="absolute inset-0 flex items-center justify-center">
                <Sparkles className="w-8 h-8 text-purple-500 animate-pulse" />
              </div>
            </div>
          </div>
        </div>

        {/* Match Criteria Section */}
        <div className="space-y-6">
          <div className="text-center">
            <h3 className="text-2xl font-bold text-gray-800 mb-2 flex items-center justify-center gap-3">
              <TrendingUp className="w-6 h-6 text-purple-500" />
              פירוט קריטריונים
            </h3>
            <p className="text-gray-600">ניתוח מפורט של רמות ההתאמה השונות</p>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
            {matchScore.criteria.map((criterion, index) => (
              <div key={criterion.name} className="animate-fade-in-up">
                <MatchCriteriaCard criterion={criterion} index={index} />
              </div>
            ))}
          </div>
        </div>

        {/* Match Reasons Section */}
        {matchScore.reasons.length > 0 && (
          <div className="space-y-4">
            <div className="text-center">
              <h4 className="text-xl font-bold text-gray-800 mb-2 flex items-center justify-center gap-3">
                <Heart className="w-5 h-5 text-red-500" />
                סיבות להתאמה
              </h4>
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              {matchScore.reasons.map((reason, index) => (
                <div
                  key={index}
                  className="flex items-start gap-3 p-4 bg-white/60 backdrop-blur-sm rounded-2xl border border-white/50 shadow-lg hover:shadow-xl transition-all duration-300 group"
                  style={{
                    animationDelay: `${(index + 3) * 150}ms`,
                    animationFillMode: 'both',
                  }}
                >
                  <div className="p-2 rounded-full bg-gradient-to-r from-green-500 to-emerald-500 text-white shadow-lg group-hover:scale-110 transition-transform">
                    <Gift className="w-4 h-4" />
                  </div>
                  <p className="text-gray-700 leading-relaxed font-medium flex-1">
                    {reason}
                  </p>
                </div>
              ))}
            </div>
          </div>
        )}

        {/* Summary Card */}
        <div className="p-6 bg-white/70 backdrop-blur-sm rounded-2xl border border-white/50 shadow-xl">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-4">
              <div className="p-3 rounded-full bg-gradient-to-r from-indigo-500 to-purple-500 text-white shadow-lg">
                <Award className="w-6 h-6" />
              </div>
              <div>
                <h4 className="text-lg font-bold text-gray-800">סיכום התאמה</h4>
                <p className="text-gray-600">המלצה מבוססת ניתוח</p>
              </div>
            </div>

            <div className="text-right">
              <div className="flex items-center gap-2">
                {matchScore.score >= 80 ? (
                  <>
                    <Zap className="w-5 h-5 text-green-500" />
                    <span className="font-bold text-green-600">
                      מומלץ בחום!
                    </span>
                  </>
                ) : matchScore.score >= 60 ? (
                  <>
                    <Star className="w-5 h-5 text-blue-500" />
                    <span className="font-bold text-blue-600">שווה לנסות</span>
                  </>
                ) : (
                  <>
                    <AlertCircle className="w-5 h-5 text-yellow-500" />
                    <span className="font-bold text-yellow-600">
                      צריך שיקול
                    </span>
                  </>
                )}
              </div>
              <p className="text-sm text-gray-500 mt-1">
                מבוסס על {matchScore.criteria.length} קריטריונים
              </p>
            </div>
          </div>
        </div>
      </CardContent>
    </Card>
  );
};

export default MatchPreview;
--- End of Content for MatchPreview.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\app\components\matchmaker\suggestions\NewSuggestionForm\NewSuggestionForm_contents.txt
--------------------------------------------------------------------------------
[This is the output log file itself. Content not included.]

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\app\components\matchmaker\suggestions\NewSuggestionForm\SuggestionDetails.tsx
--------------------------------------------------------------------------------
Content:
// src/app/components/matchmaker/suggestions/NewSuggestionForm/SuggestionDetails.tsx

'use client';
import React, { useState } from 'react';
import { useFormContext } from 'react-hook-form';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select';
import { Card, CardContent } from '@/components/ui/card';
import { Priority } from '@prisma/client';
import { Label } from '@/components/ui/label';
import { Button } from '@/components/ui/button';
import { Textarea } from '@/components/ui/textarea';
import { toast } from 'sonner';
import {
  Loader2,
  Sparkles,
  AlertTriangle,
  Star,
  Flame,
  Target,
  Shield,
  Heart,
  MessageCircle,
  User,
  Calendar,
  Zap,
  Crown,
  Award,
  Gift,
  Clock,
  Wand2,
  Brain,
  Eye,
  Users,
} from 'lucide-react';
import { Alert, AlertDescription } from '@/components/ui/alert';
import type { NewSuggestionFormData } from './schema';
import type { Candidate } from '../../new/types/candidates';
import { cn } from '@/lib/utils';

interface SuggestionDetailsProps {
  firstParty: Candidate;
  secondParty: Candidate;
}

const EnhancedSection: React.FC<{
  icon: React.ElementType;
  title: string;
  description?: string;
  gradient: string;
  children: React.ReactNode;
  className?: string;
}> = ({ icon: Icon, title, description, gradient, children, className }) => (
  <Card
    className={cn(
      'border-0 shadow-xl hover:shadow-2xl transition-all duration-500 group overflow-hidden rounded-3xl',
      'bg-gradient-to-br from-white via-gray-50/30 to-white',
      className
    )}
  >
    {/* Background decoration */}
    <div className="absolute inset-0">
      <div className="absolute top-0 right-0 w-32 h-32 bg-gradient-to-br from-purple-200/20 to-pink-200/20 rounded-full blur-2xl opacity-0 group-hover:opacity-100 transition-opacity duration-700"></div>
      <div className="absolute bottom-0 left-0 w-24 h-24 bg-gradient-to-br from-cyan-200/20 to-blue-200/20 rounded-full blur-xl opacity-0 group-hover:opacity-100 transition-opacity duration-900"></div>
    </div>

    <CardContent className="relative z-10 p-8 space-y-6">
      {/* Header */}
      <div className="flex items-center gap-4 mb-6">
        <div
          className={cn(
            'p-4 rounded-2xl shadow-xl group-hover:scale-110 transition-transform duration-300 bg-gradient-to-r text-white',
            gradient
          )}
        >
          <Icon className="w-8 h-8" />
        </div>
        <div className="flex-1">
          <h3
            className="text-2xl font-bold text-gray-800 group-hover:text-transparent group-hover:bg-gradient-to-r group-hover:bg-clip-text transition-all duration-300"
            style={{
              backgroundImage: `linear-gradient(to right, ${gradient.replace('from-', '').replace('to-', ', ')})`,
            }}
          >
            {title}
          </h3>
          {description && (
            <p className="text-gray-600 mt-1 leading-relaxed">{description}</p>
          )}
        </div>
      </div>

      {children}
    </CardContent>
  </Card>
);

const PriorityBadge: React.FC<{ priority: Priority }> = ({ priority }) => {
  const getPriorityInfo = (p: Priority) => {
    switch (p) {
      case Priority.URGENT:
        return {
          label: 'דחוף',
          icon: Flame,
          className:
            'bg-gradient-to-r from-red-500 to-pink-500 text-white animate-pulse shadow-xl',
          description: 'דורש טיפול מיידי!',
        };
      case Priority.HIGH:
        return {
          label: 'גבוהה',
          icon: Star,
          className:
            'bg-gradient-to-r from-orange-500 to-amber-500 text-white shadow-xl',
          description: 'עדיפות גבוהה',
        };
      case Priority.MEDIUM:
        return {
          label: 'רגילה',
          icon: Target,
          className:
            'bg-gradient-to-r from-blue-500 to-cyan-500 text-white shadow-xl',
          description: 'עדיפות רגילה',
        };
      case Priority.LOW:
        return {
          label: 'נמוכה',
          icon: Shield,
          className:
            'bg-gradient-to-r from-gray-500 to-slate-500 text-white shadow-xl',
          description: 'עדיפות נמוכה',
        };
      default:
        return {
          label: 'רגילה',
          icon: Target,
          className:
            'bg-gradient-to-r from-blue-500 to-cyan-500 text-white shadow-xl',
          description: 'עדיפות רגילה',
        };
    }
  };

  const info = getPriorityInfo(priority);
  const IconComponent = info.icon;

  return (
    <div
      className={cn(
        'flex items-center gap-2 px-4 py-2 rounded-xl font-bold',
        info.className
      )}
    >
      <IconComponent className="w-4 h-4" />
      <span>{info.label}</span>
    </div>
  );
};

const SuggestionDetails: React.FC<SuggestionDetailsProps> = ({
  firstParty,
  secondParty,
}) => {
  const {
    register,
    formState: { errors },
    setValue,
    watch,
  } = useFormContext<NewSuggestionFormData>();
  const [isGeneratingRationale, setIsGeneratingRationale] = useState(false);

  const priority = watch('priority', Priority.MEDIUM);

  const handleGenerateRationale = async () => {
    setIsGeneratingRationale(true);
    toast.info('ה-AI מנסח את חבילת הנימוקים...', {
      description: 'זה יכול לקחת כמה שניות',
      duration: 3000,
    });

    try {
      const response = await fetch('/api/ai/generate-suggestion-rationale', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          userId1: firstParty.id,
          userId2: secondParty.id,
        }),
      });

      const data = await response.json();

      if (!response.ok || !data.success || !data.rationales) {
        throw new Error(data.error || 'שגיאה ביצור הנימוקים');
      }

      const { generalRationale, rationaleForParty1, rationaleForParty2 } =
        data.rationales;

      setValue('matchingReason', generalRationale, {
        shouldValidate: true,
        shouldDirty: true,
      });
      setValue('firstPartyNotes', rationaleForParty1, {
        shouldValidate: true,
        shouldDirty: true,
      });
      setValue('secondPartyNotes', rationaleForParty2, {
        shouldValidate: true,
        shouldDirty: true,
      });

      toast.success('הנימוקים נוצרו בהצלחה!', {
        description: 'כל השדות מולאו באופן אוטומטי עם תוכן מותאם אישית',
        duration: 5000,
      });
    } catch (error) {
      console.error('Failed to generate rationales:', error);
      toast.error(error instanceof Error ? error.message : 'שגיאה לא צפויה', {
        description: 'נסה שוב או מלא את השדות ידנית',
      });
    } finally {
      setIsGeneratingRationale(false);
    }
  };

  return (
    <div className="space-y-8">
      {/* Priority Section */}
      <EnhancedSection
        icon={Crown}
        title="עדיפות ההצעה"
        description="קבע את רמת החשיבות והדחיפות של ההצעה"
        gradient="from-purple-500 to-pink-500"
      >
        <div className="space-y-4">
          <div className="flex items-center justify-between">
            <Label className="text-lg font-semibold text-gray-700">
              בחר רמת עדיפות
            </Label>
            <PriorityBadge priority={priority} />
          </div>

          <Select
            onValueChange={(value: Priority) =>
              setValue('priority', value, { shouldValidate: true })
            }
            defaultValue={priority}
            name="priority"
          >
            <SelectTrigger className="h-14 border-2 border-purple-200 hover:border-purple-300 focus:border-purple-500 rounded-2xl bg-white/80 backdrop-blur-sm shadow-lg transition-all text-lg">
              <SelectValue placeholder="בחר/י עדיפות" />
            </SelectTrigger>
            <SelectContent className="border-0 shadow-2xl rounded-2xl bg-white/95 backdrop-blur-sm">
              <SelectItem value={Priority.URGENT}>
                <div className="flex items-center gap-3 py-2">
                  <Flame className="w-5 h-5 text-red-500" />
                  <div>
                    <div className="font-bold text-red-600">דחופה</div>
                    <div className="text-xs text-red-500">דורש טיפול מיידי</div>
                  </div>
                </div>
              </SelectItem>
              <SelectItem value={Priority.HIGH}>
                <div className="flex items-center gap-3 py-2">
                  <Star className="w-5 h-5 text-orange-500" />
                  <div>
                    <div className="font-bold text-orange-600">גבוהה</div>
                    <div className="text-xs text-orange-500">עדיפות מוגברת</div>
                  </div>
                </div>
              </SelectItem>
              <SelectItem value={Priority.MEDIUM}>
                <div className="flex items-center gap-3 py-2">
                  <Target className="w-5 h-5 text-blue-500" />
                  <div>
                    <div className="font-bold text-blue-600">רגילה</div>
                    <div className="text-xs text-blue-500">עדיפות סטנדרטית</div>
                  </div>
                </div>
              </SelectItem>
              <SelectItem value={Priority.LOW}>
                <div className="flex items-center gap-3 py-2">
                  <Shield className="w-5 h-5 text-gray-500" />
                  <div>
                    <div className="font-bold text-gray-600">נמוכה</div>
                    <div className="text-xs text-gray-500">ללא דחיפות</div>
                  </div>
                </div>
              </SelectItem>
            </SelectContent>
          </Select>

          {errors.priority && (
            <div className="flex items-center gap-2 p-3 bg-gradient-to-r from-red-50 to-pink-50 rounded-xl border border-red-200">
              <AlertTriangle className="w-4 h-4 text-red-500" />
              <p className="text-sm text-red-600 font-medium">
                {errors.priority.message}
              </p>
            </div>
          )}
        </div>
      </EnhancedSection>

      {/* AI-Generated Matching Reason */}
      <EnhancedSection
        icon={Brain}
        title="סיבת ההתאמה הכללית"
        description="נימוק מפורט המסביר מדוע יש התאמה בין הצדדים"
        gradient="from-emerald-500 to-green-500"
      >
        <div className="space-y-6">
          <div className="flex items-center justify-between">
            <Label className="text-lg font-semibold text-gray-700">
              תוכן יוצג לצדדים
            </Label>
            <Button
              type="button"
              onClick={handleGenerateRationale}
              disabled={isGeneratingRationale}
              className="bg-gradient-to-r from-purple-600 via-pink-600 to-blue-600 hover:from-purple-700 hover:via-pink-700 hover:to-blue-700 text-white shadow-xl hover:shadow-2xl transition-all duration-300 rounded-2xl px-6 py-3 font-bold"
            >
              {isGeneratingRationale ? (
                <>
                  <Loader2 className="w-5 h-5 ml-2 animate-spin" />
                  <span>מנסח...</span>
                </>
              ) : (
                <>
                  <Wand2 className="w-5 h-5 ml-2 text-yellow-300" />
                  <span>צור נימוקים (AI)</span>
                </>
              )}
            </Button>
          </div>

          <Textarea
            id="matchingReason"
            {...register('matchingReason')}
            placeholder="נימוק כללי המסביר מדוע יש התאמה בין הצדדים..."
            className="min-h-[140px] border-2 border-emerald-200 hover:border-emerald-300 focus:border-emerald-500 rounded-2xl bg-white/80 backdrop-blur-sm shadow-lg transition-all text-lg resize-none"
          />

          {errors.matchingReason && (
            <div className="flex items-center gap-2 p-3 bg-gradient-to-r from-red-50 to-pink-50 rounded-xl border border-red-200">
              <AlertTriangle className="w-4 h-4 text-red-500" />
              <p className="text-sm text-red-600 font-medium">
                {errors.matchingReason.message}
              </p>
            </div>
          )}

          <Alert className="border-0 bg-gradient-to-r from-blue-50 to-cyan-50 shadow-lg rounded-2xl">
            <Sparkles className="h-5 w-5 text-blue-500" />
            <AlertDescription className="text-blue-800 font-medium leading-relaxed">
              💡 <strong>טיפ חכם:</strong> לחיצה על כפתור ה-AI תמלא אוטומטית את
              שדה זה וגם את שדות ההערות האישיות לכל צד עם תוכן מותאם ומקצועי.
            </AlertDescription>
          </Alert>
        </div>
      </EnhancedSection>

      {/* Personal Notes for Each Party */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
        {/* First Party Notes */}
        <EnhancedSection
          icon={User}
          title={`הערות אישיות ל${firstParty.firstName}`}
          description="טקסט אישי המדגיש את היתרונות של הצד השני עבורו"
          gradient="from-blue-500 to-cyan-500"
          className="lg:col-span-1"
        >
          <div className="space-y-4">
            <div className="flex items-center gap-3 p-4 bg-gradient-to-r from-blue-50 to-cyan-50 rounded-2xl border border-blue-100">
              <div className="w-12 h-12 rounded-full bg-gradient-to-r from-blue-500 to-cyan-500 flex items-center justify-center text-white font-bold shadow-lg">
                {firstParty.firstName[0]}
              </div>
              <div>
                <div className="font-bold text-blue-800">
                  {firstParty.firstName} {firstParty.lastName}
                </div>
                <div className="text-sm text-blue-600">צד א' בהצעה</div>
              </div>
            </div>

            <Textarea
              id="firstPartyNotes"
              {...register('firstPartyNotes')}
              placeholder={`טקסט אישי המדגיש את היתרונות של ${secondParty.firstName} עבור ${firstParty.firstName}...`}
              className="min-h-[160px] border-2 border-blue-200 hover:border-blue-300 focus:border-blue-500 rounded-2xl bg-white/80 backdrop-blur-sm shadow-lg transition-all text-lg resize-none"
            />

            {errors.firstPartyNotes && (
              <div className="flex items-center gap-2 p-3 bg-gradient-to-r from-red-50 to-pink-50 rounded-xl border border-red-200">
                <AlertTriangle className="w-4 h-4 text-red-500" />
                <p className="text-sm text-red-600 font-medium">
                  {errors.firstPartyNotes.message}
                </p>
              </div>
            )}
          </div>
        </EnhancedSection>

        {/* Second Party Notes */}
        <EnhancedSection
          icon={User}
          title={`הערות אישיות ל${secondParty.firstName}`}
          description="טקסט אישי המדגיש את היתרונות של הצד השני עבורה"
          gradient="from-purple-500 to-pink-500"
          className="lg:col-span-1"
        >
          <div className="space-y-4">
            <div className="flex items-center gap-3 p-4 bg-gradient-to-r from-purple-50 to-pink-50 rounded-2xl border border-purple-100">
              <div className="w-12 h-12 rounded-full bg-gradient-to-r from-purple-500 to-pink-500 flex items-center justify-center text-white font-bold shadow-lg">
                {secondParty.firstName[0]}
              </div>
              <div>
                <div className="font-bold text-purple-800">
                  {secondParty.firstName} {secondParty.lastName}
                </div>
                <div className="text-sm text-purple-600">צד ב' בהצעה</div>
              </div>
            </div>

            <Textarea
              id="secondPartyNotes"
              {...register('secondPartyNotes')}
              placeholder={`טקסט אישי המדגיש את היתרונות של ${firstParty.firstName} עבור ${secondParty.firstName}...`}
              className="min-h-[160px] border-2 border-purple-200 hover:border-purple-300 focus:border-purple-500 rounded-2xl bg-white/80 backdrop-blur-sm shadow-lg transition-all text-lg resize-none"
            />

            {errors.secondPartyNotes && (
              <div className="flex items-center gap-2 p-3 bg-gradient-to-r from-red-50 to-pink-50 rounded-xl border border-red-200">
                <AlertTriangle className="w-4 h-4 text-red-500" />
                <p className="text-sm text-red-600 font-medium">
                  {errors.secondPartyNotes.message}
                </p>
              </div>
            )}
          </div>
        </EnhancedSection>
      </div>

      {/* Internal Notes */}
      <EnhancedSection
        icon={MessageCircle}
        title="הערות פנימיות"
        description="הערות והנחיות לשימוש צוות השדכנים בלבד"
        gradient="from-amber-500 to-orange-500"
      >
        <div className="space-y-4">
          <div className="flex items-center gap-3 p-4 bg-gradient-to-r from-amber-50 to-orange-50 rounded-2xl border border-amber-100">
            <div className="p-3 rounded-full bg-gradient-to-r from-amber-500 to-orange-500 text-white shadow-lg">
              <Eye className="w-5 h-5" />
            </div>
            <div>
              <div className="font-bold text-amber-800">מידע סודי</div>
              <div className="text-sm text-amber-600">
                נראה רק לצוות השדכנים
              </div>
            </div>
          </div>

          <Textarea
            id="internalNotes"
            {...register('internalNotes')}
            placeholder="הערות והנחיות לשימוש פנימי בלבד..."
            className="min-h-[120px] border-2 border-amber-200 hover:border-amber-300 focus:border-amber-500 rounded-2xl bg-white/80 backdrop-blur-sm shadow-lg transition-all text-lg resize-none"
          />

          {errors.internalNotes && (
            <div className="flex items-center gap-2 p-3 bg-gradient-to-r from-red-50 to-pink-50 rounded-xl border border-red-200">
              <AlertTriangle className="w-4 h-4 text-red-500" />
              <p className="text-sm text-red-600 font-medium">
                {errors.internalNotes.message}
              </p>
            </div>
          )}
        </div>
      </EnhancedSection>

      {/* Decision Deadline */}
      <EnhancedSection
        icon={Clock}
        title="תאריך יעד להחלטה"
        description="קבע את המועד האחרון למתן תגובה מהצדדים"
        gradient="from-indigo-500 to-purple-500"
      >
        <div className="space-y-4">
          <Label className="text-lg font-semibold text-gray-700">
            בחר תקופת זמן למענה
          </Label>

          <Select
            onValueChange={(value) => {
              const days = parseInt(value, 10);
              const deadline = new Date();
              deadline.setDate(deadline.getDate() + days);
              setValue('decisionDeadline', deadline, { shouldValidate: true });
            }}
            defaultValue="14"
          >
            <SelectTrigger className="h-14 border-2 border-indigo-200 hover:border-indigo-300 focus:border-indigo-500 rounded-2xl bg-white/80 backdrop-blur-sm shadow-lg transition-all text-lg">
              <SelectValue />
            </SelectTrigger>
            <SelectContent className="border-0 shadow-2xl rounded-2xl bg-white/95 backdrop-blur-sm">
              <SelectItem value="3">
                <div className="flex items-center gap-3 py-2">
                  <Zap className="w-5 h-5 text-red-500" />
                  <div>
                    <div className="font-bold text-red-600">3 ימים</div>
                    <div className="text-xs text-red-500">מהיר וזריז</div>
                  </div>
                </div>
              </SelectItem>
              <SelectItem value="7">
                <div className="flex items-center gap-3 py-2">
                  <Award className="w-5 h-5 text-orange-500" />
                  <div>
                    <div className="font-bold text-orange-600">7 ימים</div>
                    <div className="text-xs text-orange-500">תקופה קצרה</div>
                  </div>
                </div>
              </SelectItem>
              <SelectItem value="14">
                <div className="flex items-center gap-3 py-2">
                  <Target className="w-5 h-5 text-blue-500" />
                  <div>
                    <div className="font-bold text-blue-600">14 ימים</div>
                    <div className="text-xs text-blue-500">
                      תקופה סטנדרטית (מומלץ)
                    </div>
                  </div>
                </div>
              </SelectItem>
              <SelectItem value="30">
                <div className="flex items-center gap-3 py-2">
                  <Shield className="w-5 h-5 text-green-500" />
                  <div>
                    <div className="font-bold text-green-600">30 ימים</div>
                    <div className="text-xs text-green-500">תקופה מורחבת</div>
                  </div>
                </div>
              </SelectItem>
            </SelectContent>
          </Select>

          {errors.decisionDeadline && (
            <div className="flex items-center gap-2 p-3 bg-gradient-to-r from-red-50 to-pink-50 rounded-xl border border-red-200">
              <AlertTriangle className="w-4 h-4 text-red-500" />
              <p className="text-sm text-red-600 font-medium">
                {errors.decisionDeadline.message}
              </p>
            </div>
          )}

          <div className="p-4 bg-gradient-to-r from-indigo-50 to-purple-50 rounded-2xl border border-indigo-100">
            <div className="flex items-start gap-3">
              <Calendar className="w-5 h-5 text-indigo-500 mt-1" />
              <div>
                <div className="font-bold text-indigo-800 mb-1">מידע חשוב</div>
                <p className="text-sm text-indigo-700 leading-relaxed">
                  לאחר תקופת הזמן שנבחרה, אם לא התקבלה תגובה מאחד הצדדים, ההצעה
                  תועבר אוטומטית לסטטוס "פג תוקף".
                </p>
              </div>
            </div>
          </div>
        </div>
      </EnhancedSection>

      {/* Summary Card */}
      <Card className="border-0 shadow-2xl bg-gradient-to-br from-gray-50 via-white to-gray-50 rounded-3xl overflow-hidden">
        <CardContent className="p-8">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-4">
              <div className="p-4 rounded-2xl bg-gradient-to-r from-gray-500 to-slate-500 text-white shadow-xl">
                <Users className="w-8 h-8" />
              </div>
              <div>
                <h3 className="text-2xl font-bold text-gray-800">
                  סיכום ההצעה
                </h3>
                <p className="text-gray-600 leading-relaxed">
                  כל הפרטים מוכנים ליצירת ההצעה
                </p>
              </div>
            </div>

            <div className="text-center">
              <div className="flex items-center gap-2 mb-2">
                <Gift className="w-5 h-5 text-purple-500" />
                <span className="font-bold text-purple-600">מוכן ליצירה!</span>
              </div>
              <p className="text-sm text-gray-500">
                לאחר יצירת ההצעה, היא תישלח אוטומטי לצד הראשון
              </p>
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  );
};

export default SuggestionDetails;
--- End of Content for SuggestionDetails.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\app\components\matchmaker\suggestions\NewSuggestionForm\index.tsx
--------------------------------------------------------------------------------
Content:
// src/app/components/matchmaker/suggestions/NewSuggestionForm/index.tsx

'use client';
import React, { useState, useEffect } from 'react';
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription,
  DialogFooter,
  DialogClose,
} from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';
import { toast } from 'sonner';
import { useForm, FormProvider } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { Priority, MatchSuggestionStatus } from '@prisma/client';
import { Separator } from '@/components/ui/separator';
import {
  UserPlus,
  Sparkles,
  Loader2,
  BarChart2,
  CheckCircle,
  Users,
  Heart,
  Crown,
  Zap,
  Star,
  Award,
  Gem,
  Target,
  ArrowRight,
  ArrowLeft,
  Eye,
  X,
  Wand2,
  Gift,
} from 'lucide-react';

// Types
import type { Candidate } from '../../new/types/candidates';
import { newSuggestionSchema, type NewSuggestionFormData } from './schema';

// Components
import SuggestionDetails from './SuggestionDetails';
import MatchPreview from './MatchPreview';
import CandidateSelector from './CandidateSelector';
import { AiMatchAnalysisDialog } from '../../new/dialogs/AiMatchAnalysisDialog';
import { cn } from '@/lib/utils';

interface NewSuggestionFormProps {
  isOpen: boolean;
  onClose: () => void;
  candidates: Candidate[];
  selectedCandidate?: Candidate | null;
  onSubmit: (data: NewSuggestionFormData) => Promise<void>;
}

const StepIndicator: React.FC<{
  currentStep: number;
  totalSteps: number;
  steps: Array<{ label: string; icon: React.ElementType; description: string }>;
}> = ({ currentStep, totalSteps, steps }) => (
  <div className="flex items-center justify-center mb-8">
    <div className="flex items-center gap-4">
      {steps.map((step, index) => {
        const isActive = index === currentStep;
        const isCompleted = index < currentStep;
        const StepIcon = step.icon;

        return (
          <React.Fragment key={index}>
            <div className="flex flex-col items-center">
              <div
                className={cn(
                  'flex items-center justify-center w-16 h-16 rounded-full transition-all duration-500 shadow-lg',
                  isActive &&
                    'bg-gradient-to-r from-purple-600 to-pink-600 text-white scale-110 shadow-2xl',
                  isCompleted &&
                    'bg-gradient-to-r from-green-500 to-emerald-500 text-white shadow-xl',
                  !isActive &&
                    !isCompleted &&
                    'bg-gray-100 text-gray-400 shadow-md'
                )}
              >
                <StepIcon className="w-8 h-8" />
              </div>
              <div className="mt-3 text-center">
                <div
                  className={cn(
                    'text-sm font-bold transition-colors',
                    isActive && 'text-purple-600',
                    isCompleted && 'text-green-600',
                    !isActive && !isCompleted && 'text-gray-400'
                  )}
                >
                  {step.label}
                </div>
                <div className="text-xs text-gray-500 mt-1 max-w-[120px]">
                  {step.description}
                </div>
              </div>
            </div>

            {index < totalSteps - 1 && (
              <div
                className={cn(
                  'w-16 h-1 rounded-full transition-all duration-500 mt-2',
                  index < currentStep
                    ? 'bg-gradient-to-r from-green-500 to-emerald-500'
                    : 'bg-gray-200'
                )}
              />
            )}
          </React.Fragment>
        );
      })}
    </div>
  </div>
);

const NewSuggestionForm: React.FC<NewSuggestionFormProps> = ({
  isOpen,
  onClose,
  candidates,
  selectedCandidate,
  onSubmit,
}) => {
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [firstParty, setFirstParty] = useState<Candidate | null>(null);
  const [secondParty, setSecondParty] = useState<Candidate | null>(null);
  const [showAnalysisDialog, setShowAnalysisDialog] = useState(false);
  const [currentStep, setCurrentStep] = useState(0);

  const steps = [
    {
      label: 'בחירת מועמדים',
      icon: Users,
      description: 'בחר את שני הצדדים להצעה',
    },
    {
      label: 'ניתוח התאמה',
      icon: BarChart2,
      description: 'בדוק את רמת ההתאמה',
    },
    {
      label: 'פרטי ההצעה',
      icon: Heart,
      description: 'הוסף נימוקים ופרטים',
    },
  ];

  const form = useForm<NewSuggestionFormData>({
    resolver: zodResolver(newSuggestionSchema),
    defaultValues: {
      priority: Priority.MEDIUM,
      status: MatchSuggestionStatus.DRAFT,
      decisionDeadline: new Date(new Date().setDate(new Date().getDate() + 14)),
    },
  });

  // Reset form and state when dialog opens or selectedCandidate changes
  useEffect(() => {
    if (isOpen) {
      form.reset({
        priority: Priority.MEDIUM,
        status: MatchSuggestionStatus.DRAFT,
        decisionDeadline: new Date(
          new Date().setDate(new Date().getDate() + 14)
        ),
        firstPartyId: selectedCandidate?.id || '',
        secondPartyId: '',
      });
      setFirstParty(selectedCandidate || null);
      setSecondParty(null);
      setCurrentStep(0);
    }
  }, [isOpen, selectedCandidate, form]);

  const handleCandidateSelect =
    (type: 'first' | 'second') => (candidate: Candidate | null) => {
      const setter = type === 'first' ? setFirstParty : setSecondParty;
      const fieldName = type === 'first' ? 'firstPartyId' : 'secondPartyId';
      setter(candidate);
      form.setValue(fieldName, candidate?.id || '', {
        shouldValidate: true,
        shouldDirty: true,
      });
    };

  const handleNext = () => {
    if (currentStep === 0 && (!firstParty || !secondParty)) {
      toast.error('יש לבחור את שני הצדדים להצעה.');
      return;
    }
    setCurrentStep((prev) => Math.min(prev + 1, steps.length - 1));
  };

  const handlePrevious = () => {
    setCurrentStep((prev) => Math.max(prev - 1, 0));
  };

  const handleSubmit = form.handleSubmit(async (data) => {
    if (!firstParty || !secondParty) {
      toast.error('יש לבחור את שני הצדדים להצעה.');
      return;
    }

    setIsSubmitting(true);
    try {
      await onSubmit(data);
      toast.success('ההצעה נוצרה בהצלחה!', {
        description: 'ההצעה נשלחה אוטומטית לצד הראשון',
        duration: 5000,
      });
      onClose();
    } catch (error) {
      toast.error(
        'שגיאה ביצירת ההצעה: ' +
          (error instanceof Error ? error.message : 'שגיאה לא ידועה')
      );
    } finally {
      setIsSubmitting(false);
    }
  });

  const maleCandidates = candidates.filter((c) => c.profile.gender === 'MALE');
  const femaleCandidates = candidates.filter(
    (c) => c.profile.gender === 'FEMALE'
  );

  const canProceedToNextStep = () => {
    switch (currentStep) {
      case 0:
        return firstParty && secondParty;
      case 1:
        return firstParty && secondParty;
      case 2:
        return true;
      default:
        return false;
    }
  };

  const renderStepContent = () => {
    switch (currentStep) {
      case 0:
        return (
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
            <CandidateSelector
              label="צד א' (גבר)"
              value={firstParty}
              onChange={handleCandidateSelect('first')}
              candidates={maleCandidates}
              otherParty={secondParty}
              fieldName="firstPartyId"
              error={form.formState.errors.firstPartyId?.message}
            />

            <CandidateSelector
              label="צד ב' (אישה)"
              value={secondParty}
              onChange={handleCandidateSelect('second')}
              candidates={femaleCandidates}
              otherParty={firstParty}
              fieldName="secondPartyId"
              error={form.formState.errors.secondPartyId?.message}
            />
          </div>
        );

      case 1:
        if (!firstParty || !secondParty) {
          return (
            <div className="flex items-center justify-center h-64">
              <div className="text-center text-gray-500">
                <Users className="mx-auto h-16 w-16 text-gray-300 mb-4" />
                <p className="text-lg font-medium">
                  יש לבחור תחילה את שני המועמדים
                </p>
              </div>
            </div>
          );
        }

        return (
          <div className="space-y-8">
            <MatchPreview firstParty={firstParty} secondParty={secondParty} />

            <div className="flex justify-center">
              <Button
                type="button"
                variant="outline"
                onClick={() => setShowAnalysisDialog(true)}
                className="bg-gradient-to-r from-indigo-50 to-purple-50 border-2 border-indigo-200 text-indigo-700 hover:bg-gradient-to-r hover:from-indigo-100 hover:to-purple-100 hover:border-indigo-300 rounded-2xl px-8 py-4 font-bold text-lg shadow-lg hover:shadow-xl transition-all duration-300"
              >
                <BarChart2 className="w-6 h-6 ml-3" />
                ניתוח התאמה מלא (AI)
                <Sparkles className="w-5 h-5 mr-2 text-purple-500" />
              </Button>
            </div>
          </div>
        );

      case 2:
        if (!firstParty || !secondParty) {
          return (
            <div className="flex items-center justify-center h-64">
              <div className="text-center text-gray-500">
                <Users className="mx-auto h-16 w-16 text-gray-300 mb-4" />
                <p className="text-lg font-medium">
                  יש לבחור תחילה את שני המועמדים
                </p>
              </div>
            </div>
          );
        }

        return (
          <SuggestionDetails
            firstParty={firstParty}
            secondParty={secondParty}
          />
        );

      default:
        return null;
    }
  };

  return (
    <>
      <Dialog open={isOpen} onOpenChange={onClose}>
        <DialogContent
          className="max-w-7xl w-full min-h-[90vh] flex flex-col p-0 border-0 shadow-2xl rounded-3xl overflow-hidden bg-gradient-to-br from-white via-purple-50/20 to-pink-50/20"
          dir="rtl"
        >
          {/* Enhanced Header */}
          <div className="relative bg-gradient-to-r from-purple-50 via-cyan-50/30 to-emerald-50/20 border-b border-purple-100/50 p-8 flex-shrink-0">
            {/* Background decoration */}
            <div className="absolute inset-0">
              <div className="absolute top-0 right-0 w-64 h-64 bg-gradient-to-br from-purple-200/30 to-pink-200/30 rounded-full blur-3xl"></div>
              <div className="absolute bottom-0 left-0 w-48 h-48 bg-gradient-to-br from-cyan-200/30 to-blue-200/30 rounded-full blur-2xl"></div>
            </div>

            <div className="relative z-10">
              <DialogHeader className="text-center mb-8">
                <div className="flex items-center justify-between mb-6">
                  <div className="flex items-center gap-4">
                    <div className="p-4 rounded-2xl bg-gradient-to-r from-purple-500 to-pink-500 text-white shadow-xl">
                      <UserPlus className="w-10 h-10" />
                    </div>
                    <div className="text-right">
                      <DialogTitle className="text-3xl font-bold bg-gradient-to-r from-purple-600 via-pink-600 to-blue-600 bg-clip-text text-transparent">
                        יצירת הצעת שידוך חדשה
                      </DialogTitle>
                      <DialogDescription className="text-lg text-gray-600 mt-2">
                        בחר שני מועמדים, נתח את ההתאמה והגדר את פרטי ההצעה
                      </DialogDescription>
                    </div>
                  </div>

                  <Button
                    variant="ghost"
                    size="icon"
                    onClick={onClose}
                    className="rounded-full h-12 w-12 text-gray-500 hover:text-gray-700 hover:bg-white/50 backdrop-blur-sm"
                  >
                    <X className="w-6 h-6" />
                  </Button>
                </div>

                <StepIndicator
                  currentStep={currentStep}
                  totalSteps={steps.length}
                  steps={steps}
                />
              </DialogHeader>
            </div>
          </div>

          {/* Content Area */}
          <div className="flex-1 overflow-y-auto p-8">
            <FormProvider {...form}>
              <form onSubmit={handleSubmit} className="h-full">
                <div className="animate-fade-in-up">{renderStepContent()}</div>
              </form>
            </FormProvider>
          </div>

          {/* Enhanced Footer */}
          <div className="border-t border-purple-100 bg-gradient-to-r from-gray-50 to-slate-50 p-6 flex-shrink-0">
            <div className="flex items-center justify-between">
              <div className="flex items-center gap-4">
                {currentStep > 0 && (
                  <Button
                    type="button"
                    variant="outline"
                    onClick={handlePrevious}
                    className="px-6 py-3 border-2 border-gray-300 hover:bg-gray-50 rounded-xl transition-all duration-300 font-bold"
                  >
                    <ArrowRight className="w-5 h-5 ml-2" />
                    חזור
                  </Button>
                )}

                {currentStep < steps.length - 1 ? (
                  <Button
                    type="button"
                    onClick={handleNext}
                    disabled={!canProceedToNextStep()}
                    className="px-8 py-3 bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-700 hover:to-pink-700 text-white shadow-xl hover:shadow-2xl transition-all duration-300 rounded-xl font-bold disabled:opacity-50 disabled:cursor-not-allowed"
                  >
                    המשך
                    <ArrowLeft className="w-5 h-5 mr-2" />
                  </Button>
                ) : (
                  <Button
                    type="submit"
                    onClick={handleSubmit}
                    disabled={isSubmitting || !firstParty || !secondParty}
                    className="px-8 py-3 bg-gradient-to-r from-emerald-600 via-green-600 to-emerald-600 hover:from-emerald-700 hover:via-green-700 hover:to-emerald-700 text-white shadow-xl hover:shadow-2xl transition-all duration-300 rounded-xl font-bold disabled:opacity-50 disabled:cursor-not-allowed"
                  >
                    {isSubmitting ? (
                      <>
                        <Loader2 className="w-5 h-5 ml-2 animate-spin" />
                        יוצר הצעה...
                      </>
                    ) : (
                      <>
                        <Gift className="w-5 h-5 ml-2" />
                        צור הצעה
                        <Sparkles className="w-4 h-4 mr-2" />
                      </>
                    )}
                  </Button>
                )}
              </div>

              <div className="text-sm text-gray-500 space-y-1">
                <div className="flex items-center gap-2">
                  <Crown className="w-4 h-4 text-purple-500" />
                  <span>
                    שלב {currentStep + 1} מתוך {steps.length}
                  </span>
                </div>
                <p className="text-xs">
                  לאחר יצירת ההצעה, היא תופיע בסטטוס טיוטה.
                </p>
              </div>
            </div>
          </div>
        </DialogContent>
      </Dialog>

      {firstParty && secondParty && (
        <AiMatchAnalysisDialog
          isOpen={showAnalysisDialog}
          onClose={() => setShowAnalysisDialog(false)}
          targetCandidate={firstParty}
          comparisonCandidates={[secondParty]}
        />
      )}
    </>
  );
};

export default NewSuggestionForm;
--- End of Content for index.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\app\components\matchmaker\suggestions\NewSuggestionForm\schema.ts
--------------------------------------------------------------------------------
Content:
import { z } from "zod";
import { addDays, isBefore } from 'date-fns';

// Validation rules

const MIN_DECISION_DAYS = 1;
const MAX_DECISION_DAYS = 30;

// Helper function to validate dates
const isValidDeadlineDate = (date: Date | null | undefined, minDays: number, maxDays: number) => {
  if (!date) return false;
  
  const today = new Date();
  const minDate = addDays(today, minDays);
  const maxDate = addDays(today, maxDays);
  
  return !isBefore(date, minDate) && !isBefore(maxDate, date);
};

// Schema for new suggestion
export const newSuggestionSchema = z.object({
  firstPartyId: z.string({
    required_error: "יש לבחור מועמד/ת ראשון/ה",
  }),
  
  secondPartyId: z.string({
    required_error: "יש לבחור מועמד/ת שני/ה",
  }),
  
  priority: z.enum(['LOW', 'MEDIUM', 'HIGH', 'URGENT'] as const, {
    required_error: "יש לבחור רמת עדיפות",
  }),

  status: z.enum([
    'DRAFT',
    'PENDING_FIRST_PARTY',
    'FIRST_PARTY_APPROVED',
    'FIRST_PARTY_DECLINED',
    'PENDING_SECOND_PARTY',
    'SECOND_PARTY_APPROVED',
    'SECOND_PARTY_DECLINED',
    'AWAITING_MATCHMAKER_APPROVAL',
    'CONTACT_DETAILS_SHARED',
    'AWAITING_FIRST_DATE_FEEDBACK',
    'THINKING_AFTER_DATE',
    'PROCEEDING_TO_SECOND_DATE',
    'ENDED_AFTER_FIRST_DATE',
    'MEETING_PENDING',
    'MEETING_SCHEDULED',
    'MATCH_APPROVED',
    'MATCH_DECLINED',
    'DATING',
    'ENGAGED',
    'MARRIED',
    'EXPIRED',
    'CLOSED',
    'CANCELLED'
  ] as const, {
    required_error: "יש לבחור סטטוס",
  }).default('DRAFT'),

  matchingReason: z.string()
    .max(500, "סיבת ההתאמה לא יכולה להכיל יותר מ-500 תווים")
    .optional(),

  internalNotes: z.string()
    .max(1000, "ההערות הפנימיות לא יכולות להכיל יותר מ-1000 תווים")
    .optional(),

  firstPartyNotes: z.string()
    .max(500, "ההערות לצד א' לא יכולות להכיל יותר מ-500 תווים")
    .optional(),

  secondPartyNotes: z.string()
    .max(500, "ההערות לצד ב' לא יכולות להכיל יותר מ-500 תווים")
    .optional(),


  decisionDeadline: z.date({
    required_error: "יש לבחור תאריך יעד להחלטה ",
  })
}).refine(
  (data) => data.firstPartyId !== data.secondPartyId,
  {
    message: "לא ניתן ליצור הצעה עבור אותו מועמד",
    path: ["secondPartyId"]
  }

).refine(
  (data) => isValidDeadlineDate(data.decisionDeadline, MIN_DECISION_DAYS, MAX_DECISION_DAYS),
  {
    message: `תאריך היעד להחלטה סופית חייב להיות בין ${MIN_DECISION_DAYS} ל-${MAX_DECISION_DAYS} ימים מהיום`,
    path: ["decisionDeadline"]
  }
);

export type NewSuggestionFormData = z.infer<typeof newSuggestionSchema>;

// Status mapping for display
export const suggestionStatusMap = {
  DRAFT: "טיוטה",
  PENDING_FIRST_PARTY: "ממתין לתשובת צד א'",
  FIRST_PARTY_APPROVED: "צד א' אישר",
  FIRST_PARTY_DECLINED: "צד א' דחה",
  PENDING_SECOND_PARTY: "ממתין לתשובת צד ב'",
  SECOND_PARTY_APPROVED: "צד ב' אישר",
  SECOND_PARTY_DECLINED: "צד ב' דחה",
  AWAITING_MATCHMAKER_APPROVAL: "ממתין לאישור שדכן",
  CONTACT_DETAILS_SHARED: "פרטי קשר הועברו",
  AWAITING_FIRST_DATE_FEEDBACK: "ממתין למשוב פגישה ראשונה",
  THINKING_AFTER_DATE: "בשלב מחשבה אחרי פגישה",
  PROCEEDING_TO_SECOND_DATE: "ממשיכים לפגישה שנייה",
  ENDED_AFTER_FIRST_DATE: "הסתיים אחרי פגישה ראשונה",
  MEETING_PENDING: "ממתין לקביעת פגישה",
  MEETING_SCHEDULED: "פגישה נקבעה",
  MATCH_APPROVED: "ההצעה אושרה",
  MATCH_DECLINED: "ההצעה נדחתה",
  DATING: "בתהליך היכרות",
  ENGAGED: "מאורסים",
  MARRIED: "נישאו",
  EXPIRED: "פג תוקף",
  CLOSED: "ההצעה נסגרה",
  CANCELLED: "ההצעה בוטלה"
} as const;

// Priority mapping for display
export const priorityMap = {
  LOW: { label: "נמוכה", color: "text-gray-500" },
  MEDIUM: { label: "רגילה", color: "text-blue-500" },
  HIGH: { label: "גבוהה", color: "text-yellow-500" },
  URGENT: { label: "דחופה", color: "text-red-500" }
} as const;
--- End of Content for schema.ts ---

--- End of Content for NewSuggestionForm_contents.txt ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\suggestions\NewSuggestionForm\SuggestionDetails.tsx
--------------------------------------------------------------------------------
Content:
// src/app/components/matchmaker/suggestions/NewSuggestionForm/SuggestionDetails.tsx

'use client';
import React, { useState } from 'react';
import { useFormContext } from 'react-hook-form';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select';
import { Card, CardContent } from '@/components/ui/card';
import { Priority } from '@prisma/client';
import { Label } from '@/components/ui/label';
import { Button } from '@/components/ui/button';
import { Textarea } from '@/components/ui/textarea';
import { toast } from 'sonner';
import {
  Loader2,
  Sparkles,
  AlertTriangle,
  Star,
  Flame,
  Target,
  Shield,
  Heart,
  MessageCircle,
  User,
  Calendar,
  Zap,
  Crown,
  Award,
  Gift,
  Clock,
  Wand2,
  Brain,
  Eye,
  Users,
} from 'lucide-react';
import { Alert, AlertDescription } from '@/components/ui/alert';
import type { NewSuggestionFormData } from './schema';
import type { Candidate } from '../../new/types/candidates';
import { cn } from '@/lib/utils';
import type { MatchmakerPageDictionary } from '@/types/dictionary';

interface SuggestionDetailsProps {
  dict: MatchmakerPageDictionary['suggestionsDashboard']['newSuggestionForm']['suggestionDetails'];
  firstParty: Candidate;
  secondParty: Candidate;
}

const EnhancedSection: React.FC<{
  icon: React.ElementType;
  title: string;
  description?: string;
  gradient: string;
  children: React.ReactNode;
  className?: string;
}> = ({ icon: Icon, title, description, gradient, children, className }) => (
  <Card
    className={cn(
      'border-0 shadow-xl hover:shadow-2xl transition-all duration-500 group overflow-hidden rounded-3xl',
      'bg-gradient-to-br from-white via-gray-50/30 to-white',
      className
    )}
  >
    <div className="absolute inset-0">
      <div className="absolute top-0 right-0 w-32 h-32 bg-gradient-to-br from-purple-200/20 to-pink-200/20 rounded-full blur-2xl opacity-0 group-hover:opacity-100 transition-opacity duration-700"></div>
      <div className="absolute bottom-0 left-0 w-24 h-24 bg-gradient-to-br from-cyan-200/20 to-blue-200/20 rounded-full blur-xl opacity-0 group-hover:opacity-100 transition-opacity duration-900"></div>
    </div>
    <CardContent className="relative z-10 p-8 space-y-6">
      <div className="flex items-center gap-4 mb-6">
        <div
          className={cn(
            'p-4 rounded-2xl shadow-xl group-hover:scale-110 transition-transform duration-300 bg-gradient-to-r text-white',
            gradient
          )}
        >
          <Icon className="w-8 h-8" />
        </div>
        <div className="flex-1">
          <h3
            className="text-2xl font-bold text-gray-800 group-hover:text-transparent group-hover:bg-gradient-to-r group-hover:bg-clip-text transition-all duration-300"
            style={{
              backgroundImage: `linear-gradient(to right, ${gradient.replace('from-', '').replace('to-', ', ')})`,
            }}
          >
            {title}
          </h3>
          {description && (
            <p className="text-gray-600 mt-1 leading-relaxed">{description}</p>
          )}
        </div>
      </div>
      {children}
    </CardContent>
  </Card>
);

const PriorityBadge: React.FC<{
  priority: Priority;
  dict: MatchmakerPageDictionary['suggestionsDashboard']['newSuggestionForm']['suggestionDetails']['priority'];
}> = ({ priority, dict }) => {
  const getPriorityInfo = (p: Priority) => {
    switch (p) {
      case Priority.URGENT:
        return {
          label: dict.options.URGENT.title,
          icon: Flame,
          className:
            'bg-gradient-to-r from-red-500 to-pink-500 text-white animate-pulse shadow-xl',
        };
      case Priority.HIGH:
        return {
          label: dict.options.HIGH.title,
          icon: Star,
          className:
            'bg-gradient-to-r from-orange-500 to-amber-500 text-white shadow-xl',
        };
      case Priority.MEDIUM:
        return {
          label: dict.options.MEDIUM.title,
          icon: Target,
          className:
            'bg-gradient-to-r from-blue-500 to-cyan-500 text-white shadow-xl',
        };
      case Priority.LOW:
        return {
          label: dict.options.LOW.title,
          icon: Shield,
          className:
            'bg-gradient-to-r from-gray-500 to-slate-500 text-white shadow-xl',
        };
      default:
        return {
          label: dict.options.MEDIUM.title,
          icon: Target,
          className:
            'bg-gradient-to-r from-blue-500 to-cyan-500 text-white shadow-xl',
        };
    }
  };

  const info = getPriorityInfo(priority);
  const IconComponent = info.icon;

  return (
    <div
      className={cn(
        'flex items-center gap-2 px-4 py-2 rounded-xl font-bold',
        info.className
      )}
    >
      <IconComponent className="w-4 h-4" />
      <span>{info.label}</span>
    </div>
  );
};

const SuggestionDetails: React.FC<SuggestionDetailsProps> = ({
  dict,
  firstParty,
  secondParty,
}) => {
  const {
    register,
    formState: { errors },
    setValue,
    watch,
  } = useFormContext<NewSuggestionFormData>();
  const [isGeneratingRationale, setIsGeneratingRationale] = useState(false);
  const priority = watch('priority', Priority.MEDIUM);

  const handleGenerateRationale = async () => {
    setIsGeneratingRationale(true);
    toast.info(dict.toasts.aiLoading.title, {
      description: dict.toasts.aiLoading.description,
      duration: 3000,
    });
    try {
      const response = await fetch('/api/ai/generate-suggestion-rationale', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          userId1: firstParty.id,
          userId2: secondParty.id,
        }),
      });
      const data = await response.json();
      if (!response.ok || !data.success || !data.rationales) {
        throw new Error(data.error || 'Error generating rationale');
      }
      const { generalRationale, rationaleForParty1, rationaleForParty2 } =
        data.rationales;
      setValue('matchingReason', generalRationale, {
        shouldValidate: true,
        shouldDirty: true,
      });
      setValue('firstPartyNotes', rationaleForParty1, {
        shouldValidate: true,
        shouldDirty: true,
      });
      setValue('secondPartyNotes', rationaleForParty2, {
        shouldValidate: true,
        shouldDirty: true,
      });
      toast.success(dict.toasts.aiSuccess.title, {
        description: dict.toasts.aiSuccess.description,
        duration: 5000,
      });
    } catch (error) {
      console.error('Failed to generate rationales:', error);
      toast.error(dict.toasts.aiError.title, {
        description: dict.toasts.aiError.description,
      });
    } finally {
      setIsGeneratingRationale(false);
    }
  };

  return (
    <div className="space-y-8">
      <EnhancedSection
        icon={Crown}
        title={dict.priority.title}
        description={dict.priority.description}
        gradient="from-purple-500 to-pink-500"
      >
        <div className="space-y-4">
          <div className="flex items-center justify-between">
            <Label className="text-lg font-semibold text-gray-700">
              {dict.priority.label}
            </Label>
            <PriorityBadge priority={priority} dict={dict.priority} />
          </div>
          <Select
            onValueChange={(value: Priority) =>
              setValue('priority', value, { shouldValidate: true })
            }
            defaultValue={priority}
            name="priority"
          >
            <SelectTrigger className="h-14 border-2 border-purple-200 hover:border-purple-300 focus:border-purple-500 rounded-2xl bg-white/80 backdrop-blur-sm shadow-lg transition-all text-lg">
              <SelectValue placeholder={dict.priority.placeholder} />
            </SelectTrigger>
            <SelectContent className="border-0 shadow-2xl rounded-2xl bg-white/95 backdrop-blur-sm">
              <SelectItem value={Priority.URGENT}>
                <div className="flex items-center gap-3 py-2">
                  <Flame className="w-5 h-5 text-red-500" />
                  <div>
                    <div className="font-bold text-red-600">
                      {dict.priority.options.URGENT.title}
                    </div>
                    <div className="text-xs text-red-500">
                      {dict.priority.options.URGENT.description}
                    </div>
                  </div>
                </div>
              </SelectItem>
              <SelectItem value={Priority.HIGH}>
                <div className="flex items-center gap-3 py-2">
                  <Star className="w-5 h-5 text-orange-500" />
                  <div>
                    <div className="font-bold text-orange-600">
                      {dict.priority.options.HIGH.title}
                    </div>
                    <div className="text-xs text-orange-500">
                      {dict.priority.options.HIGH.description}
                    </div>
                  </div>
                </div>
              </SelectItem>
              <SelectItem value={Priority.MEDIUM}>
                <div className="flex items-center gap-3 py-2">
                  <Target className="w-5 h-5 text-blue-500" />
                  <div>
                    <div className="font-bold text-blue-600">
                      {dict.priority.options.MEDIUM.title}
                    </div>
                    <div className="text-xs text-blue-500">
                      {dict.priority.options.MEDIUM.description}
                    </div>
                  </div>
                </div>
              </SelectItem>
              <SelectItem value={Priority.LOW}>
                <div className="flex items-center gap-3 py-2">
                  <Shield className="w-5 h-5 text-gray-500" />
                  <div>
                    <div className="font-bold text-gray-600">
                      {dict.priority.options.LOW.title}
                    </div>
                    <div className="text-xs text-gray-500">
                      {dict.priority.options.LOW.description}
                    </div>
                  </div>
                </div>
              </SelectItem>
            </SelectContent>
          </Select>
          {errors.priority && (
            <div className="flex items-center gap-2 p-3 bg-gradient-to-r from-red-50 to-pink-50 rounded-xl border border-red-200">
              <AlertTriangle className="w-4 h-4 text-red-500" />
              <p className="text-sm text-red-600 font-medium">
                {errors.priority.message}
              </p>
            </div>
          )}
        </div>
      </EnhancedSection>

      <EnhancedSection
        icon={Brain}
        title={dict.rationale.title}
        description={dict.rationale.description}
        gradient="from-emerald-500 to-green-500"
      >
        <div className="space-y-6">
          <div className="flex items-center justify-between">
            <Label className="text-lg font-semibold text-gray-700">
              {dict.rationale.label}
            </Label>
            <Button
              type="button"
              onClick={handleGenerateRationale}
              disabled={isGeneratingRationale}
              className="bg-gradient-to-r from-purple-600 via-pink-600 to-blue-600 hover:from-purple-700 hover:via-pink-700 hover:to-blue-700 text-white shadow-xl hover:shadow-2xl transition-all duration-300 rounded-2xl px-6 py-3 font-bold"
            >
              {isGeneratingRationale ? (
                <>
                  <Loader2 className="w-5 h-5 ml-2 animate-spin" />
                  <span>{dict.rationale.aiButtonLoading}</span>
                </>
              ) : (
                <>
                  <Wand2 className="w-5 h-5 ml-2 text-yellow-300" />
                  <span>{dict.rationale.aiButton}</span>
                </>
              )}
            </Button>
          </div>
          <Textarea
            id="matchingReason"
            {...register('matchingReason')}
            placeholder={dict.rationale.placeholder}
            className="min-h-[140px] border-2 border-emerald-200 hover:border-emerald-300 focus:border-emerald-500 rounded-2xl bg-white/80 backdrop-blur-sm shadow-lg transition-all text-lg resize-none"
          />
          {errors.matchingReason && (
            <div className="flex items-center gap-2 p-3 bg-gradient-to-r from-red-50 to-pink-50 rounded-xl border border-red-200">
              <AlertTriangle className="w-4 h-4 text-red-500" />
              <p className="text-sm text-red-600 font-medium">
                {errors.matchingReason.message}
              </p>
            </div>
          )}
          <Alert className="border-0 bg-gradient-to-r from-blue-50 to-cyan-50 shadow-lg rounded-2xl">
            <Sparkles className="h-5 w-5 text-blue-500" />
            <AlertDescription
              className="text-blue-800 font-medium leading-relaxed"
              dangerouslySetInnerHTML={{ __html: dict.rationale.aiTip }}
            />
          </Alert>
        </div>
      </EnhancedSection>

      <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
        <EnhancedSection
          icon={User}
          title={dict.notes.party1Title.replace(
            '{{name}}',
            firstParty.firstName
          )}
          description={dict.notes.description}
          gradient="from-blue-500 to-cyan-500"
          className="lg:col-span-1"
        >
          <div className="space-y-4">
            <div className="flex items-center gap-3 p-4 bg-gradient-to-r from-blue-50 to-cyan-50 rounded-2xl border border-blue-100">
              <div className="w-12 h-12 rounded-full bg-gradient-to-r from-blue-500 to-cyan-500 flex items-center justify-center text-white font-bold shadow-lg">
                {firstParty.firstName[0]}
              </div>
              <div>
                <div className="font-bold text-blue-800">
                  {firstParty.firstName} {firstParty.lastName}
                </div>
                <div className="text-sm text-blue-600">
                  {dict.notes.party1Label}
                </div>
              </div>
            </div>
            <Textarea
              id="firstPartyNotes"
              {...register('firstPartyNotes')}
              placeholder={dict.notes.party1Placeholder
                .replace('{{otherName}}', secondParty.firstName)
                .replace('{{name}}', firstParty.firstName)}
              className="min-h-[160px] border-2 border-blue-200 hover:border-blue-300 focus:border-blue-500 rounded-2xl bg-white/80 backdrop-blur-sm shadow-lg transition-all text-lg resize-none"
            />
            {errors.firstPartyNotes && (
              <div className="flex items-center gap-2 p-3 bg-gradient-to-r from-red-50 to-pink-50 rounded-xl border border-red-200">
                <AlertTriangle className="w-4 h-4 text-red-500" />
                <p className="text-sm text-red-600 font-medium">
                  {errors.firstPartyNotes.message}
                </p>
              </div>
            )}
          </div>
        </EnhancedSection>
        <EnhancedSection
          icon={User}
          title={dict.notes.party2Title.replace(
            '{{name}}',
            secondParty.firstName
          )}
          description={dict.notes.description}
          gradient="from-purple-500 to-pink-500"
          className="lg:col-span-1"
        >
          <div className="space-y-4">
            <div className="flex items-center gap-3 p-4 bg-gradient-to-r from-purple-50 to-pink-50 rounded-2xl border border-purple-100">
              <div className="w-12 h-12 rounded-full bg-gradient-to-r from-purple-500 to-pink-500 flex items-center justify-center text-white font-bold shadow-lg">
                {secondParty.firstName[0]}
              </div>
              <div>
                <div className="font-bold text-purple-800">
                  {secondParty.firstName} {secondParty.lastName}
                </div>
                <div className="text-sm text-purple-600">
                  {dict.notes.party2Label}
                </div>
              </div>
            </div>
            <Textarea
              id="secondPartyNotes"
              {...register('secondPartyNotes')}
              placeholder={dict.notes.party2Placeholder
                .replace('{{otherName}}', firstParty.firstName)
                .replace('{{name}}', secondParty.firstName)}
              className="min-h-[160px] border-2 border-purple-200 hover:border-purple-300 focus:border-purple-500 rounded-2xl bg-white/80 backdrop-blur-sm shadow-lg transition-all text-lg resize-none"
            />
            {errors.secondPartyNotes && (
              <div className="flex items-center gap-2 p-3 bg-gradient-to-r from-red-50 to-pink-50 rounded-xl border border-red-200">
                <AlertTriangle className="w-4 h-4 text-red-500" />
                <p className="text-sm text-red-600 font-medium">
                  {errors.secondPartyNotes.message}
                </p>
              </div>
            )}
          </div>
        </EnhancedSection>
      </div>

      <EnhancedSection
        icon={MessageCircle}
        title={dict.internalNotes.title}
        description={dict.internalNotes.description}
        gradient="from-amber-500 to-orange-500"
      >
        <div className="space-y-4">
          <div className="flex items-center gap-3 p-4 bg-gradient-to-r from-amber-50 to-orange-50 rounded-2xl border border-amber-100">
            <div className="p-3 rounded-full bg-gradient-to-r from-amber-500 to-orange-500 text-white shadow-lg">
              <Eye className="w-5 h-5" />
            </div>
            <div>
              <div className="font-bold text-amber-800">
                {dict.internalNotes.secretInfo}
              </div>
              <div className="text-sm text-amber-600">
                {dict.internalNotes.visibleTo}
              </div>
            </div>
          </div>
          <Textarea
            id="internalNotes"
            {...register('internalNotes')}
            placeholder={dict.internalNotes.placeholder}
            className="min-h-[120px] border-2 border-amber-200 hover:border-amber-300 focus:border-amber-500 rounded-2xl bg-white/80 backdrop-blur-sm shadow-lg transition-all text-lg resize-none"
          />
          {errors.internalNotes && (
            <div className="flex items-center gap-2 p-3 bg-gradient-to-r from-red-50 to-pink-50 rounded-xl border border-red-200">
              <AlertTriangle className="w-4 h-4 text-red-500" />
              <p className="text-sm text-red-600 font-medium">
                {errors.internalNotes.message}
              </p>
            </div>
          )}
        </div>
      </EnhancedSection>

      <EnhancedSection
        icon={Clock}
        title={dict.deadline.title}
        description={dict.deadline.description}
        gradient="from-indigo-500 to-purple-500"
      >
        <div className="space-y-4">
          <Label className="text-lg font-semibold text-gray-700">
            {dict.deadline.label}
          </Label>
          <Select
            onValueChange={(value) => {
              const days = parseInt(value, 10);
              const deadline = new Date();
              deadline.setDate(deadline.getDate() + days);
              setValue('decisionDeadline', deadline, { shouldValidate: true });
            }}
            defaultValue="14"
          >
            <SelectTrigger className="h-14 border-2 border-indigo-200 hover:border-indigo-300 focus:border-indigo-500 rounded-2xl bg-white/80 backdrop-blur-sm shadow-lg transition-all text-lg">
              <SelectValue />
            </SelectTrigger>
            <SelectContent className="border-0 shadow-2xl rounded-2xl bg-white/95 backdrop-blur-sm">
              <SelectItem value="3">
                <div className="flex items-center gap-3 py-2">
                  <Zap className="w-5 h-5 text-red-500" />
                  <div>
                    <div className="font-bold text-red-600">
                      {dict.deadline.options['3'].title}
                    </div>
                    <div className="text-xs text-red-500">
                      {dict.deadline.options['3'].description}
                    </div>
                  </div>
                </div>
              </SelectItem>
              <SelectItem value="7">
                <div className="flex items-center gap-3 py-2">
                  <Award className="w-5 h-5 text-orange-500" />
                  <div>
                    <div className="font-bold text-orange-600">
                      {dict.deadline.options['7'].title}
                    </div>
                    <div className="text-xs text-orange-500">
                      {dict.deadline.options['7'].description}
                    </div>
                  </div>
                </div>
              </SelectItem>
              <SelectItem value="14">
                <div className="flex items-center gap-3 py-2">
                  <Target className="w-5 h-5 text-blue-500" />
                  <div>
                    <div className="font-bold text-blue-600">
                      {dict.deadline.options['14'].title}
                    </div>
                    <div className="text-xs text-blue-500">
                      {dict.deadline.options['14'].description}
                    </div>
                  </div>
                </div>
              </SelectItem>
              <SelectItem value="30">
                <div className="flex items-center gap-3 py-2">
                  <Shield className="w-5 h-5 text-green-500" />
                  <div>
                    <div className="font-bold text-green-600">
                      {dict.deadline.options['30'].title}
                    </div>
                    <div className="text-xs text-green-500">
                      {dict.deadline.options['30'].description}
                    </div>
                  </div>
                </div>
              </SelectItem>
            </SelectContent>
          </Select>
          {errors.decisionDeadline && (
            <div className="flex items-center gap-2 p-3 bg-gradient-to-r from-red-50 to-pink-50 rounded-xl border border-red-200">
              <AlertTriangle className="w-4 h-4 text-red-500" />
              <p className="text-sm text-red-600 font-medium">
                {errors.decisionDeadline.message}
              </p>
            </div>
          )}
          <div className="p-4 bg-gradient-to-r from-indigo-50 to-purple-50 rounded-2xl border border-indigo-100">
            <div className="flex items-start gap-3">
              <Calendar className="w-5 h-5 text-indigo-500 mt-1" />
              <div>
                <div className="font-bold text-indigo-800 mb-1">
                  {dict.deadline.infoBox.title}
                </div>
                <p className="text-sm text-indigo-700 leading-relaxed">
                  {dict.deadline.infoBox.body}
                </p>
              </div>
            </div>
          </div>
        </div>
      </EnhancedSection>

      <Card className="border-0 shadow-2xl bg-gradient-to-br from-gray-50 via-white to-gray-50 rounded-3xl overflow-hidden">
        <CardContent className="p-8">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-4">
              <div className="p-4 rounded-2xl bg-gradient-to-r from-gray-500 to-slate-500 text-white shadow-xl">
                <Users className="w-8 h-8" />
              </div>
              <div>
                <h3 className="text-2xl font-bold text-gray-800">
                  {dict.summary.title}
                </h3>
                <p className="text-gray-600 leading-relaxed">
                  {dict.summary.description}
                </p>
              </div>
            </div>
            <div className="text-center">
              <div className="flex items-center gap-2 mb-2">
                <Gift className="w-5 h-5 text-purple-500" />
                <span className="font-bold text-purple-600">
                  {dict.summary.ready}
                </span>
              </div>
              <p className="text-sm text-gray-500">{dict.summary.info}</p>
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  );
};

export default SuggestionDetails;
--- End of Content for SuggestionDetails.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\suggestions\NewSuggestionForm\index.tsx
--------------------------------------------------------------------------------
Content:
// src/app/components/matchmaker/suggestions/NewSuggestionForm/index.tsx

'use client';
import React, { useState, useEffect } from 'react';
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription,
} from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';
import { toast } from 'sonner';
import { useForm, FormProvider } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { Priority, MatchSuggestionStatus } from '@prisma/client';
import {
  UserPlus,
  Sparkles,
  Loader2,
  BarChart2,
  Users,
  Heart,
  ArrowRight,
  ArrowLeft,
  X,
  Gift,
  Check,
  Crown,
} from 'lucide-react';

// Types
import type { Candidate } from '../../new/types/candidates';
import { newSuggestionSchema, type NewSuggestionFormData } from './schema';
// <=== שינוי 1: עדכון הטיפוס של המילון שמתקבל ===>
import type { MatchmakerPageDictionary } from '@/types/dictionaries/matchmaker';

// Components
import SuggestionDetails from './SuggestionDetails';
import MatchPreview from './MatchPreview';
import CandidateSelector from './CandidateSelector';
import { AiMatchAnalysisDialog } from '../../new/dialogs/AiMatchAnalysisDialog';
import { cn } from '@/lib/utils';

interface NewSuggestionFormProps {
  locale: string;
  dict: MatchmakerPageDictionary;
  isOpen: boolean;
  onClose: () => void;
  candidates: Candidate[];
  selectedCandidate?: Candidate | null;
  onSubmit: (data: NewSuggestionFormData) => Promise<void>;
}

const StepIndicator: React.FC<{
  currentStep: number;
  steps: Array<{ label: string; icon: React.ElementType }>;
}> = ({ currentStep, steps }) => (
  <div className="flex items-center justify-center">
    {steps.map((step, index) => {
      const isActive = index === currentStep;
      const isCompleted = index < currentStep;
      const StepIcon = step.icon;

      return (
        <React.Fragment key={index}>
          <div className="flex flex-col items-center text-center">
            <div
              className={cn(
                'flex items-center justify-center w-12 h-12 rounded-full transition-all duration-300 shadow-md',
                isActive &&
                  'bg-gradient-to-r from-purple-600 to-pink-600 text-white scale-110 shadow-lg',
                isCompleted &&
                  'bg-gradient-to-r from-green-500 to-emerald-500 text-white',
                !isActive && !isCompleted && 'bg-gray-200 text-gray-500'
              )}
            >
              {isCompleted ? (
                <Check className="w-6 h-6" />
              ) : (
                <StepIcon className="w-6 h-6" />
              )}
            </div>
            <p
              className={cn(
                'mt-2 text-xs font-semibold w-24',
                isActive && 'text-purple-600',
                isCompleted && 'text-green-600',
                !isActive && !isCompleted && 'text-gray-500'
              )}
            >
              {step.label}
            </p>
          </div>

          {index < steps.length - 1 && (
            <div
              className={cn(
                'w-16 h-1 mx-2 rounded-full transition-colors duration-300',
                isCompleted ? 'bg-green-500' : 'bg-gray-200'
              )}
            />
          )}
        </React.Fragment>
      );
    })}
  </div>
);

const NewSuggestionForm: React.FC<NewSuggestionFormProps> = ({
  dict,
  isOpen,
  onClose,
  candidates,
  selectedCandidate,
  locale, // <--- הוסף את זה

  onSubmit,
}) => {
  // <=== שינוי 3: שימוש בנתיב הנכון והמלא לאובייקט המילון של הטופס ===>
  const formDict = dict.suggestionsDashboard.newSuggestionForm;

  const [isSubmitting, setIsSubmitting] = useState(false);
  const [firstParty, setFirstParty] = useState<Candidate | null>(null);
  const [secondParty, setSecondParty] = useState<Candidate | null>(null);
  const [showAnalysisDialog, setShowAnalysisDialog] = useState(false);
  const [currentStep, setCurrentStep] = useState(0);

  // <=== שינוי 4: בניית מערך השלבים מתוך המילון ===>
  const steps = [
    { label: formDict.steps.select.label, icon: Users },
    { label: formDict.steps.analyze.label, icon: BarChart2 },
    { label: formDict.steps.details.label, icon: Heart },
  ];

  const form = useForm<NewSuggestionFormData>({
    resolver: zodResolver(newSuggestionSchema),
    defaultValues: {
      priority: Priority.MEDIUM,
      status: MatchSuggestionStatus.DRAFT,
      decisionDeadline: new Date(new Date().setDate(new Date().getDate() + 14)),
    },
  });

  useEffect(() => {
    if (isOpen) {
      form.reset({
        priority: Priority.MEDIUM,
        status: MatchSuggestionStatus.DRAFT,
        decisionDeadline: new Date(
          new Date().setDate(new Date().getDate() + 14)
        ),
        firstPartyId: selectedCandidate?.id || '',
        secondPartyId: '',
      });
      setFirstParty(selectedCandidate || null);
      setSecondParty(null);
      setCurrentStep(0);
    }
  }, [isOpen, selectedCandidate, form]);

  const handleCandidateSelect =
    (type: 'first' | 'second') => (candidate: Candidate | null) => {
      const setter = type === 'first' ? setFirstParty : setSecondParty;
      const fieldName = type === 'first' ? 'firstPartyId' : 'secondPartyId';
      setter(candidate);
      form.setValue(fieldName, candidate?.id || '', {
        shouldValidate: true,
        shouldDirty: true,
      });
    };

  const handleNext = () => {
    if (currentStep === 0 && (!firstParty || !secondParty)) {
      toast.error(formDict.toasts.selectParties);
      return;
    }
    setCurrentStep((prev) => Math.min(prev + 1, steps.length - 1));
  };

  const handlePrevious = () => {
    setCurrentStep((prev) => Math.max(prev - 1, 0));
  };

  const handleSubmit = form.handleSubmit(async (data) => {
    if (!firstParty || !secondParty) {
      toast.error(formDict.toasts.selectParties);
      return;
    }

    setIsSubmitting(true);
    try {
      await onSubmit(data);
      toast.success(formDict.toasts.createSuccess, {
        duration: 5000,
      });
      onClose();
    } catch (error) {
      toast.error(
        `${formDict.toasts.createError}: ${error instanceof Error ? error.message : ''}`
      );
    } finally {
      setIsSubmitting(false);
    }
  });

  const maleCandidates = candidates.filter((c) => c.profile.gender === 'MALE');
  const femaleCandidates = candidates.filter(
    (c) => c.profile.gender === 'FEMALE'
  );

  const canProceedToNextStep = () => {
    switch (currentStep) {
      case 0:
        return firstParty && secondParty;
      case 1:
        return firstParty && secondParty;
      case 2:
        return true;
      default:
        return false;
    }
  };

  const renderStepContent = () => {
    switch (currentStep) {
      case 0:
        return (
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
            <CandidateSelector
              dict={formDict.candidateSelector}
              label={formDict.party1Label}
              value={firstParty}
              onChange={handleCandidateSelect('first')}
              candidates={maleCandidates}
              otherParty={secondParty}
              fieldName="firstPartyId"
              error={form.formState.errors.firstPartyId?.message}
            />
            <CandidateSelector
              dict={formDict.candidateSelector}
              label={formDict.party2Label}
              value={secondParty}
              onChange={handleCandidateSelect('second')}
              candidates={femaleCandidates}
              otherParty={firstParty}
              fieldName="secondPartyId"
              error={form.formState.errors.secondPartyId?.message}
            />
          </div>
        );

      case 1:
        if (!firstParty || !secondParty) {
          return (
            <div className="flex items-center justify-center h-full">
              <div className="text-center text-gray-500">
                <Users className="mx-auto h-16 w-16 text-gray-300 mb-4" />
                <p className="text-lg font-medium">
                  {formDict.emptyState.title}
                </p>
              </div>
            </div>
          );
        }
        return (
          <div className="space-y-8">
            {/* <=== שינוי 5: העברת החלק הנכון במילון לקומפוננטת הילד ===> */}
            <MatchPreview
              dict={formDict.matchPreview}
              firstParty={firstParty}
              secondParty={secondParty}
            />
            <div className="flex justify-center">
              <Button
                type="button"
                variant="outline"
                onClick={() => setShowAnalysisDialog(true)}
                className="bg-gradient-to-r from-indigo-50 to-purple-50 border-2 border-indigo-200 text-indigo-700 hover:bg-gradient-to-r hover:from-indigo-100 hover:to-purple-100 hover:border-indigo-300 rounded-2xl px-8 py-4 font-bold text-lg shadow-lg hover:shadow-xl transition-all duration-300"
              >
                <BarChart2 className="w-6 h-6 ml-3" />
                {formDict.buttons.fullAnalysis}
                <Sparkles className="w-5 h-5 mr-2 text-purple-500" />
              </Button>
            </div>
          </div>
        );

      case 2:
        if (!firstParty || !secondParty) {
          return (
            <div className="flex items-center justify-center h-full">
              <div className="text-center text-gray-500">
                <Users className="mx-auto h-16 w-16 text-gray-300 mb-4" />
                <p className="text-lg font-medium">
                  {formDict.emptyState.title}
                </p>
              </div>
            </div>
          );
        }
        return (
          // <=== שינוי 6: העברת החלק הנכון במילון לקומפוננטת הילד ===>
          <SuggestionDetails
            dict={formDict.suggestionDetails}
            firstParty={firstParty}
            secondParty={secondParty}
          />
        );

      default:
        return null;
    }
  };

  return (
    <>
      <Dialog open={isOpen} onOpenChange={onClose}>
        <DialogContent
          className="max-w-7xl w-full h-[95vh] flex flex-col p-0 border-0 shadow-2xl rounded-3xl bg-gray-50"
          dir="rtl"
        >
          <div className="relative border-b p-4 flex-shrink-0 bg-white">
            <div className="flex justify-between items-center w-full">
              <div className="flex items-center gap-4">
                <div className="p-3 rounded-xl bg-gradient-to-r from-purple-500 to-pink-500 text-white shadow-lg">
                  <UserPlus className="w-8 h-8" />
                </div>
                <div className="text-right">
                  <DialogTitle className="text-2xl font-bold text-gray-800">
                    {formDict.header.title}
                  </DialogTitle>
                  <DialogDescription className="text-md text-gray-500 mt-1">
                    {formDict.header.description
                      .replace('{{current}}', (currentStep + 1).toString())
                      .replace('{{total}}', steps.length.toString())
                      .replace('{{label}}', steps[currentStep].label)}
                  </DialogDescription>
                </div>
              </div>

              <div className="flex-1 flex justify-center">
                <StepIndicator currentStep={currentStep} steps={steps} />
              </div>

              <Button
                variant="ghost"
                size="icon"
                onClick={onClose}
                className="rounded-full h-10 w-10 text-gray-500 hover:text-gray-700 hover:bg-gray-100"
              >
                <X className="w-5 h-5" />
              </Button>
            </div>
          </div>

          <div className="flex-1 overflow-y-auto p-6 lg:p-8 bg-gradient-to-br from-white via-purple-50/20 to-pink-50/20">
            <FormProvider {...form}>
              <form onSubmit={handleSubmit} className="h-full">
                <div className="animate-fade-in-up">{renderStepContent()}</div>
              </form>
            </FormProvider>
          </div>

          <div className="border-t bg-white p-4 flex-shrink-0">
            <div className="flex items-center justify-between">
              <div className="flex items-center gap-3">
                {currentStep > 0 && (
                  <Button
                    type="button"
                    variant="outline"
                    onClick={handlePrevious}
                    className="px-6 py-3 border-2 border-gray-300 hover:bg-gray-50 rounded-xl transition-all duration-300 font-bold"
                  >
                    <ArrowRight className="w-5 h-5 ml-2" />
                    {formDict.buttons.back}
                  </Button>
                )}
                {currentStep < steps.length - 1 ? (
                  <Button
                    type="button"
                    onClick={handleNext}
                    disabled={!canProceedToNextStep()}
                    className="px-8 py-3 bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-700 hover:to-pink-700 text-white shadow-lg hover:shadow-xl transition-all duration-300 rounded-xl font-bold disabled:opacity-50 disabled:cursor-not-allowed"
                  >
                    {formDict.buttons.continue}
                    <ArrowLeft className="w-5 h-5 mr-2" />
                  </Button>
                ) : (
                  <Button
                    type="submit"
                    onClick={handleSubmit}
                    disabled={isSubmitting || !firstParty || !secondParty}
                    className="px-8 py-3 bg-gradient-to-r from-emerald-600 to-green-600 hover:from-emerald-700 hover:to-green-700 text-white shadow-lg hover:shadow-xl transition-all duration-300 rounded-xl font-bold disabled:opacity-50 disabled:cursor-not-allowed"
                  >
                    {isSubmitting ? (
                      <>
                        <Loader2 className="w-5 h-5 ml-2 animate-spin" />
                        {formDict.buttons.creating}
                      </>
                    ) : (
                      <>
                        <Gift className="w-5 h-5 ml-2" />
                        {formDict.buttons.create}
                        <Sparkles className="w-4 h-4 mr-2" />
                      </>
                    )}
                  </Button>
                )}
              </div>
              <div className="text-sm text-gray-500 flex items-center gap-2">
                <Crown className="w-4 h-4 text-purple-500" />
                <span>{formDict.footer.info}</span>
              </div>
            </div>
          </div>
        </DialogContent>
      </Dialog>

      {firstParty && secondParty && (
        <AiMatchAnalysisDialog
          isOpen={showAnalysisDialog}
          onClose={() => setShowAnalysisDialog(false)}
          targetCandidate={firstParty}
          comparisonCandidates={[secondParty]}
          // <=== שינוי 7: העברת החלק הנכון של המילון לדיאלוג ה-AI ===>
          dict={dict.candidatesManager.aiAnalysis}
          locale={locale} // <--- הוסף את השורה הזו
        />
      )}
    </>
  );
};

export default NewSuggestionForm;
--- End of Content for index.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\suggestions\NewSuggestionForm\schema.ts
--------------------------------------------------------------------------------
Content:
import { z } from "zod";
import { addDays, isBefore } from 'date-fns';

// Validation rules

const MIN_DECISION_DAYS = 1;
const MAX_DECISION_DAYS = 30;

// Helper function to validate dates
const isValidDeadlineDate = (date: Date | null | undefined, minDays: number, maxDays: number) => {
  if (!date) return false;
  
  const today = new Date();
  const minDate = addDays(today, minDays);
  const maxDate = addDays(today, maxDays);
  
  return !isBefore(date, minDate) && !isBefore(maxDate, date);
};

// Schema for new suggestion
export const newSuggestionSchema = z.object({
  firstPartyId: z.string({
    required_error: "יש לבחור מועמד/ת ראשון/ה",
  }),
  
  secondPartyId: z.string({
    required_error: "יש לבחור מועמד/ת שני/ה",
  }),
  
  priority: z.enum(['LOW', 'MEDIUM', 'HIGH', 'URGENT'] as const, {
    required_error: "יש לבחור רמת עדיפות",
  }),

  status: z.enum([
    'DRAFT',
    'PENDING_FIRST_PARTY',
    'FIRST_PARTY_APPROVED',
    'FIRST_PARTY_DECLINED',
    'PENDING_SECOND_PARTY',
    'SECOND_PARTY_APPROVED',
    'SECOND_PARTY_DECLINED',
    'AWAITING_MATCHMAKER_APPROVAL',
    'CONTACT_DETAILS_SHARED',
    'AWAITING_FIRST_DATE_FEEDBACK',
    'THINKING_AFTER_DATE',
    'PROCEEDING_TO_SECOND_DATE',
    'ENDED_AFTER_FIRST_DATE',
    'MEETING_PENDING',
    'MEETING_SCHEDULED',
    'MATCH_APPROVED',
    'MATCH_DECLINED',
    'DATING',
    'ENGAGED',
    'MARRIED',
    'EXPIRED',
    'CLOSED',
    'CANCELLED'
  ] as const, {
    required_error: "יש לבחור סטטוס",
  }).default('DRAFT'),

  matchingReason: z.string()
    .max(500, "סיבת ההתאמה לא יכולה להכיל יותר מ-500 תווים")
    .optional(),

  internalNotes: z.string()
    .max(1000, "ההערות הפנימיות לא יכולות להכיל יותר מ-1000 תווים")
    .optional(),

  firstPartyNotes: z.string()
    .max(500, "ההערות לצד א' לא יכולות להכיל יותר מ-500 תווים")
    .optional(),

  secondPartyNotes: z.string()
    .max(500, "ההערות לצד ב' לא יכולות להכיל יותר מ-500 תווים")
    .optional(),


  decisionDeadline: z.date({
    required_error: "יש לבחור תאריך יעד להחלטה ",
  })
}).refine(
  (data) => data.firstPartyId !== data.secondPartyId,
  {
    message: "לא ניתן ליצור הצעה עבור אותו מועמד",
    path: ["secondPartyId"]
  }

).refine(
  (data) => isValidDeadlineDate(data.decisionDeadline, MIN_DECISION_DAYS, MAX_DECISION_DAYS),
  {
    message: `תאריך היעד להחלטה סופית חייב להיות בין ${MIN_DECISION_DAYS} ל-${MAX_DECISION_DAYS} ימים מהיום`,
    path: ["decisionDeadline"]
  }
);

export type NewSuggestionFormData = z.infer<typeof newSuggestionSchema>;

// Status mapping for display
export const suggestionStatusMap = {
  DRAFT: "טיוטה",
  PENDING_FIRST_PARTY: "ממתין לתשובת צד א'",
  FIRST_PARTY_APPROVED: "צד א' אישר",
  FIRST_PARTY_DECLINED: "צד א' דחה",
  PENDING_SECOND_PARTY: "ממתין לתשובת צד ב'",
  SECOND_PARTY_APPROVED: "צד ב' אישר",
  SECOND_PARTY_DECLINED: "צד ב' דחה",
  AWAITING_MATCHMAKER_APPROVAL: "ממתין לאישור שדכן",
  CONTACT_DETAILS_SHARED: "פרטי קשר הועברו",
  AWAITING_FIRST_DATE_FEEDBACK: "ממתין למשוב פגישה ראשונה",
  THINKING_AFTER_DATE: "בשלב מחשבה אחרי פגישה",
  PROCEEDING_TO_SECOND_DATE: "ממשיכים לפגישה שנייה",
  ENDED_AFTER_FIRST_DATE: "הסתיים אחרי פגישה ראשונה",
  MEETING_PENDING: "ממתין לקביעת פגישה",
  MEETING_SCHEDULED: "פגישה נקבעה",
  MATCH_APPROVED: "ההצעה אושרה",
  MATCH_DECLINED: "ההצעה נדחתה",
  DATING: "בתהליך היכרות",
  ENGAGED: "מאורסים",
  MARRIED: "נישאו",
  EXPIRED: "פג תוקף",
  CLOSED: "ההצעה נסגרה",
  CANCELLED: "ההצעה בוטלה"
} as const;

// Priority mapping for display
export const priorityMap = {
  LOW: { label: "נמוכה", color: "text-gray-500" },
  MEDIUM: { label: "רגילה", color: "text-blue-500" },
  HIGH: { label: "גבוהה", color: "text-yellow-500" },
  URGENT: { label: "דחופה", color: "text-red-500" }
} as const;
--- End of Content for schema.ts ---

================================================================================
Directory: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\suggestions\cards
================================================================================

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\suggestions\cards\SuggestionCard.tsx
--------------------------------------------------------------------------------
Content:
// src/app/components/matchmaker/suggestions/cards/SuggestionCard.tsx

import React, { useState, useEffect } from 'react';
import { Card, CardContent } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from '@/components/ui/dropdown-menu';
import Image from 'next/image';
import {
  Clock,
  User,
  MessageCircle,
  Eye,
  AlertCircle,
  MoreHorizontal,
  Send,
  RefreshCw,
  Trash2,
  Edit,
  CheckCircle,
  XCircle,
  CalendarClock,
  Heart,
  MapPin,
  Calendar,
  Star,
  Sparkles,
  ChevronDown,
  ChevronUp,
  Crown,
  Zap,
  Award,
  Target,
  Users,
  Quote,
  Briefcase,
  GraduationCap,
  ArrowRight,
  Phone,
  Mail,
  Gift,
  Flame,
  TrendingUp,
  Shield,
  Gem,
} from 'lucide-react';
import { formatDistanceToNow } from 'date-fns';
import { he } from 'date-fns/locale';
import type {
  MatchSuggestionStatus,
  Priority,
  UserImage,
} from '@prisma/client';
import type {
  Suggestion,
  ActionAdditionalData,
  SuggestionParty,
} from '@/types/suggestions';
import { Progress } from '@/components/ui/progress';
import { cn, getRelativeCloudinaryPath, getInitials } from '@/lib/utils';
import { Avatar, AvatarFallback } from '@/components/ui/avatar';
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from '@/components/ui/tooltip';
import type { MatchmakerPageDictionary } from '@/types/dictionary';

// Media query hook
const useMediaQuery = (query: string) => {
  const [matches, setMatches] = useState(false);
  useEffect(() => {
    const media = window.matchMedia(query);
    if (media.matches !== matches) {
      setMatches(media.matches);
    }
    const listener = () => setMatches(media.matches);
    window.addEventListener('resize', listener);
    return () => window.removeEventListener('resize', listener);
  }, [matches, query]);
  return matches;
};

interface SuggestionCardProps {
  suggestion: Suggestion;
  onAction: (
    type:
      | 'view'
      | 'contact'
      | 'message'
      | 'edit'
      | 'delete'
      | 'resend'
      | 'changeStatus'
      | 'reminder',
    suggestion: Suggestion,
    additionalData?: ActionAdditionalData
  ) => void;
  dict: MatchmakerPageDictionary['suggestionsDashboard']['suggestionCard'];
  className?: string;
  variant?: 'full' | 'compact';
}

const calculateAge = (birthDate: Date): number => {
  const today = new Date();
  const birth = new Date(birthDate);
  let age = today.getFullYear() - birth.getFullYear();
  const monthDiff = today.getMonth() - birth.getMonth();
  if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birth.getDate())) {
    age--;
  }
  return age;
};

const getEnhancedStatusInfo = (status: MatchSuggestionStatus) => {
  const defaults = {
    icon: RefreshCw,
    progress: 30,
    pulse: false,
    color: 'text-gray-600',
    bgColor: 'from-gray-50 to-slate-50',
  };
  const statusMap: Partial<
    Record<MatchSuggestionStatus, Partial<typeof defaults>>
  > = {
    PENDING_FIRST_PARTY: {
      color: 'text-yellow-600',
      bgColor: 'from-yellow-50 to-amber-50',
      icon: Clock,
      progress: 25,
      pulse: true,
    },
    PENDING_SECOND_PARTY: {
      color: 'text-blue-600',
      bgColor: 'from-blue-50 to-cyan-50',
      icon: Clock,
      progress: 50,
      pulse: true,
    },
    FIRST_PARTY_APPROVED: {
      color: 'text-green-600',
      bgColor: 'from-green-50 to-emerald-50',
      icon: CheckCircle,
      progress: 40,
    },
    SECOND_PARTY_APPROVED: {
      color: 'text-green-600',
      bgColor: 'from-green-50 to-emerald-50',
      icon: CheckCircle,
      progress: 60,
    },
    FIRST_PARTY_DECLINED: {
      color: 'text-red-600',
      bgColor: 'from-red-50 to-pink-50',
      icon: XCircle,
      progress: 100,
    },
    SECOND_PARTY_DECLINED: {
      color: 'text-red-600',
      bgColor: 'from-red-50 to-pink-50',
      icon: XCircle,
      progress: 100,
    },
    CONTACT_DETAILS_SHARED: {
      color: 'text-purple-600',
      bgColor: 'from-purple-50 to-pink-50',
      icon: Send,
      progress: 70,
    },
    DATING: {
      color: 'text-pink-600',
      bgColor: 'from-pink-50 to-rose-50',
      icon: Heart,
      progress: 80,
    },
    ENGAGED: {
      color: 'text-yellow-600',
      bgColor: 'from-yellow-50 to-orange-50',
      icon: Gem,
      progress: 95,
    },
    MARRIED: {
      color: 'text-emerald-600',
      bgColor: 'from-emerald-50 to-green-50',
      icon: Crown,
      progress: 100,
    },
    AWAITING_FIRST_DATE_FEEDBACK: {
      color: 'text-orange-600',
      bgColor: 'from-orange-50 to-amber-50',
      icon: AlertCircle,
      progress: 75,
      pulse: true,
    },
    EXPIRED: {
      color: 'text-gray-600',
      bgColor: 'from-gray-50 to-slate-50',
      icon: Clock,
      progress: 100,
    },
  };
  return { ...defaults, ...(statusMap[status] || {}) };
};

const getEnhancedPriorityInfo = (priority: Priority) => {
  const priorityMap = {
    URGENT: {
      icon: Flame,
      borderColor: 'border-red-500',
      bgGradient: 'from-red-50 to-pink-50',
      badgeClass:
        'bg-gradient-to-r from-red-500 to-pink-500 text-white border-0 shadow-xl animate-pulse',
    },
    HIGH: {
      icon: Star,
      borderColor: 'border-orange-500',
      bgGradient: 'from-orange-50 to-amber-50',
      badgeClass:
        'bg-gradient-to-r from-orange-500 to-amber-500 text-white border-0 shadow-lg',
    },
    MEDIUM: {
      icon: Target,
      borderColor: 'border-blue-500',
      bgGradient: 'from-blue-50 to-cyan-50',
      badgeClass:
        'bg-gradient-to-r from-blue-500 to-cyan-500 text-white border-0 shadow-lg',
    },
    LOW: {
      icon: Shield,
      borderColor: 'border-gray-400',
      bgGradient: 'from-gray-50 to-slate-50',
      badgeClass:
        'bg-gradient-to-r from-gray-500 to-slate-500 text-white border-0 shadow-lg',
    },
  };
  return priorityMap[priority] || priorityMap.MEDIUM;
};

const getDaysLeft = (decisionDeadline?: Date | string | null) => {
  if (!decisionDeadline) return null;
  const deadline = new Date(decisionDeadline);
  const today = new Date();
  const diffTime = deadline.getTime() - today.getTime();
  const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
  return diffDays > 0 ? diffDays : 0;
};

const HighlightPill: React.FC<{
  icon: React.ElementType;
  text: string;
  color?: string;
}> = ({ icon: Icon, text, color = 'from-blue-500 to-cyan-500' }) => (
  <div
    className={cn(
      'flex items-center gap-2 rounded-full bg-white/80 backdrop-blur-sm border-2 px-3 py-1.5 text-xs font-medium shadow-lg hover:shadow-xl transition-all duration-300 hover:scale-105',
      'border-transparent bg-gradient-to-r text-white',
      color
    )}
  >
    <Icon className="w-3 h-3" />
    <span>{text}</span>
  </div>
);

const MatchmakerInfo: React.FC<{
  dict: MatchmakerPageDictionary['suggestionsDashboard']['suggestionCard']['matchmakerInfo'];
  matchmaker: { firstName: string; lastName: string } | undefined;
  className?: string;
}> = ({ dict, matchmaker, className }) => {
  if (!matchmaker) {
    return (
      <div
        className={cn(
          'flex items-center gap-3 p-3 bg-gradient-to-r from-gray-50 to-slate-50 rounded-xl border border-gray-100 shadow-sm',
          className
        )}
      >
        <div className="text-center text-gray-500">
          <p className="text-sm">{dict.noInfo}</p>
        </div>
      </div>
    );
  }
  return (
    <div
      className={cn(
        'flex items-center gap-3 p-3 bg-gradient-to-r from-purple-50 to-pink-50 rounded-xl border border-purple-100 shadow-sm',
        className
      )}
    >
      <Avatar className="w-10 h-10 border-2 border-white shadow-lg">
        <AvatarFallback className="bg-gradient-to-br from-purple-500 to-pink-500 text-white font-bold text-sm">
          {getInitials(`${matchmaker.firstName} ${matchmaker.lastName}`)}
        </AvatarFallback>
      </Avatar>
      <div>
        <p className="text-xs font-medium text-purple-600">{dict.label}</p>
        <p className="text-sm font-bold text-gray-800">
          {matchmaker.firstName} {matchmaker.lastName}
        </p>
      </div>
    </div>
  );
};

const PartyDisplay: React.FC<{
  party: SuggestionParty;
  isCompact?: boolean;
}> = ({ party, isCompact = false }) => {
  const imageUrl =
    party.images.find((img: UserImage) => img.isMain)?.url ||
    '/placeholders/user.png';
  return (
    <div className="flex flex-col items-center gap-3">
      <div
        className={cn(
          'relative rounded-full overflow-hidden shadow-xl border-3 border-white',
          isCompact ? 'h-12 w-12' : 'h-16 w-16'
        )}
      >
        <Image
          src={getRelativeCloudinaryPath(imageUrl)}
          alt={party.firstName}
          fill
          className="object-cover"
          sizes={isCompact ? '3rem' : '4rem'}
        />
      </div>
      <div className="text-center">
        <h4
          className={cn(
            'font-bold text-gray-800',
            isCompact ? 'text-sm' : 'text-base'
          )}
        >
          {party.firstName} {party.lastName}
        </h4>
        {party.profile?.city && (
          <div
            className={cn(
              'flex items-center justify-center gap-1 text-gray-600',
              isCompact ? 'text-xs' : 'text-sm'
            )}
          >
            <MapPin className="w-3 h-3 text-green-500" />
            <span>{party.profile.city}</span>
          </div>
        )}
      </div>
    </div>
  );
};

const SuggestionCard: React.FC<SuggestionCardProps> = ({
  suggestion,
  onAction,
  dict,
  className,
  variant = 'full',
}) => {
  const isMobile = useMediaQuery('(max-width: 768px)');

  const { firstParty, secondParty, matchmaker } = suggestion;
  const statusInfo = getEnhancedStatusInfo(suggestion.status);
  const priorityInfo = getEnhancedPriorityInfo(suggestion.priority);
  const statusText = dict.statuses[suggestion.status] || dict.statuses.DEFAULT;
  const priorityText =
    dict.priorities[suggestion.priority] || dict.priorities.MEDIUM;
  const daysLeft = getDaysLeft(suggestion.decisionDeadline);
  const firstPartyAge = calculateAge(firstParty.profile.birthDate);
  const secondPartyAge = calculateAge(secondParty.profile.birthDate);

  const highlights = [
    {
      text: dict.highlights.familyValues,
      icon: Heart,
      color: 'from-pink-500 to-rose-500',
    },
    {
      text: dict.highlights.religiousView,
      icon: Sparkles,
      color: 'from-purple-500 to-indigo-500',
    },
    {
      text: dict.highlights.location,
      icon: MapPin,
      color: 'from-green-500 to-emerald-500',
    },
  ].slice(0, 3);

  if (isMobile && variant === 'compact') {
    const StatusIcon = statusInfo.icon;
    return (
      <Card
        className={cn(
          'w-full cursor-pointer hover:shadow-xl transition-all duration-300 group overflow-hidden',
          'border-l-4 bg-gradient-to-br from-white to-gray-50/50',
          priorityInfo.borderColor,
          className
        )}
        onClick={() => onAction('view', suggestion)}
      >
        <CardContent className="p-4">
          <div className="flex justify-between items-start mb-3">
            <div className="flex-1">
              <h4 className="font-bold text-gray-800 mb-2 text-sm leading-tight">
                {firstParty.firstName} ו{secondParty.firstName}
              </h4>
              <div className="flex items-center gap-2 mb-2">
                <div className="flex -space-x-2">
                  <Image
                    src={getRelativeCloudinaryPath(
                      firstParty.images.find((img) => img.isMain)?.url ||
                        '/placeholders/user.png'
                    )}
                    alt={firstParty.firstName}
                    width={24}
                    height={24}
                    className="rounded-full border-2 border-white shadow-md"
                  />
                  <Image
                    src={getRelativeCloudinaryPath(
                      secondParty.images.find((img) => img.isMain)?.url ||
                        '/placeholders/user.png'
                    )}
                    alt={secondParty.firstName}
                    width={24}
                    height={24}
                    className="rounded-full border-2 border-white shadow-md"
                  />
                </div>
                <span className="text-xs text-gray-500 font-medium">
                  {firstPartyAge}, {secondPartyAge}
                </span>
              </div>
            </div>
            <div
              className={cn(
                'p-2 rounded-full shadow-lg group-hover:scale-110 transition-transform bg-gradient-to-r',
                statusInfo.bgColor
              )}
            >
              <StatusIcon className={cn('w-4 h-4', statusInfo.color)} />
            </div>
          </div>
          <Badge
            className={cn(
              'text-xs font-bold bg-opacity-20 border',
              priorityInfo.borderColor,
              statusInfo.color
            )}
          >
            {statusText.shortLabel}
          </Badge>
        </CardContent>
      </Card>
    );
  }

  if (isMobile && variant === 'full') {
    return (
      <Card
        className={cn(
          'overflow-hidden shadow-xl border-0 bg-gradient-to-br from-white via-purple-50/20 to-pink-50/20 hover:shadow-2xl transition-all duration-500 group',
          className
        )}
      >
        <CardContent className="p-6 space-y-6">
          <div className="relative">
            <div className="relative z-10 flex justify-between items-center">
              <h3 className="text-2xl font-bold bg-gradient-to-r from-purple-600 via-pink-600 to-blue-600 bg-clip-text text-transparent">
                {dict.mobile.title}
              </h3>
              <Badge
                className={cn(
                  'text-sm font-bold shadow-xl',
                  priorityInfo.badgeClass
                )}
              >
                <statusInfo.icon className="w-4 h-4 ml-2" />
                {statusText.label}
              </Badge>
            </div>
          </div>
          {suggestion.priority === 'URGENT' && (
            <div className="flex items-center gap-2 p-3 bg-gradient-to-r from-red-100 to-pink-100 border border-red-200 rounded-xl shadow-lg">
              <Flame className="w-5 h-5 text-red-500 animate-pulse" />
              <span className="text-red-700 font-bold text-sm">
                {dict.mobile.urgentTitle}
              </span>
            </div>
          )}
          <MatchmakerInfo dict={dict.matchmakerInfo} matchmaker={matchmaker} />
          <div>
            <h4 className="font-bold text-lg mb-3 text-center text-gray-700 flex items-center justify-center gap-2">
              <Sparkles className="w-5 h-5 text-purple-500" />
              {dict.mobile.connectionPoints}
            </h4>
            <div className="flex flex-wrap justify-center gap-2">
              {highlights.map((highlight, index) => (
                <HighlightPill
                  key={index}
                  icon={highlight.icon}
                  text={highlight.text}
                  color={highlight.color}
                />
              ))}
            </div>
          </div>
          <div className="space-y-6">
            <PartyDisplay party={firstParty} />
            <div className="flex justify-center">
              <div className="p-3 rounded-full bg-gradient-to-r from-purple-500 to-pink-500 text-white shadow-xl">
                <Heart className="w-6 h-6" />
              </div>
            </div>
            <PartyDisplay party={secondParty} />
          </div>
          {suggestion.matchingReason && (
            <div className="p-4 bg-gradient-to-r from-cyan-50 to-blue-50 border border-cyan-200 rounded-xl shadow-inner">
              <div className="flex items-start gap-3">
                <Quote className="w-5 h-5 text-cyan-500 mt-1 flex-shrink-0" />
                <div>
                  <h4 className="font-bold text-cyan-800 mb-2">
                    {dict.mobile.matchReasonTitle}
                  </h4>
                  <p className="text-cyan-900 leading-relaxed italic font-medium text-sm">
                    &quot;{suggestion.matchingReason}&quot;
                  </p>
                </div>
              </div>
            </div>
          )}
          <div className="space-y-2">
            <div className="flex justify-between text-sm text-gray-600">
              <span>{statusText.description}</span>
              <span>{statusInfo.progress}%</span>
            </div>
            <Progress
              value={statusInfo.progress}
              className="h-2 bg-gray-100 shadow-inner"
            />
          </div>
          <div className="pt-4 border-t border-purple-100 space-y-4">
            <Button
              size="lg"
              className="w-full bg-gradient-to-r from-purple-600 via-pink-600 to-blue-600 hover:from-purple-700 hover:via-pink-700 hover:to-blue-700 shadow-xl hover:shadow-2xl transition-all duration-300 rounded-2xl h-14 font-bold text-lg transform hover:scale-105"
              onClick={() => onAction('view', suggestion)}
            >
              <Eye className="w-6 h-6 ml-3" />
              {dict.mobile.viewDetailsButton}
              <ArrowRight className="w-5 h-5 mr-2" />
            </Button>
            <div className="flex justify-between items-center">
              <span className="text-xs text-gray-500 font-medium">
                {dict.mobile.sentTime.replace(
                  '{{timeAgo}}',
                  formatDistanceToNow(new Date(suggestion.createdAt), {
                    addSuffix: true,
                    locale: he,
                  })
                )}
              </span>
              <DropdownMenu>
                <DropdownMenuTrigger asChild>
                  <Button
                    size="sm"
                    variant="ghost"
                    className="text-gray-500 hover:bg-purple-50 rounded-full"
                  >
                    <MoreHorizontal className="w-5 h-5" />
                  </Button>
                </DropdownMenuTrigger>
                <DropdownMenuContent align="end" className="w-48">
                  <DropdownMenuItem
                    onClick={() => onAction('edit', suggestion)}
                  >
                    <Edit className="w-4 h-4 ml-2" />
                    <span>{dict.actions.edit}</span>
                  </DropdownMenuItem>
                  <DropdownMenuItem
                    onClick={() => onAction('message', suggestion)}
                  >
                    <MessageCircle className="w-4 h-4 ml-2" />
                    <span>{dict.actions.sendMessage}</span>
                  </DropdownMenuItem>
                  <DropdownMenuItem
                    onClick={() => onAction('delete', suggestion)}
                    className="text-red-600 focus:text-red-600"
                  >
                    <Trash2 className="w-4 h-4 ml-2" />
                    <span>{dict.actions.delete}</span>
                  </DropdownMenuItem>
                </DropdownMenuContent>
              </DropdownMenu>
            </div>
          </div>
        </CardContent>
      </Card>
    );
  }

  const StatusIcon = statusInfo.icon;
  const PriorityIcon = priorityInfo.icon;
  const canBeResent = [
    'EXPIRED',
    'FIRST_PARTY_DECLINED',
    'SECOND_PARTY_DECLINED',
  ].includes(suggestion.status);

  return (
    <TooltipProvider>
      <Card
        className={cn(
          'overflow-hidden hover:shadow-2xl transition-all duration-500 group border-0 bg-gradient-to-br from-white via-gray-50/30 to-purple-50/20',
          className
        )}
      >
        <div
          className={cn(
            'p-6 border-b relative overflow-hidden bg-gradient-to-r shadow-lg',
            statusInfo.bgColor
          )}
        >
          <div className="absolute top-0 right-0 w-32 h-32 bg-gradient-to-br from-white/20 to-transparent rounded-full blur-2xl"></div>
          <div className="absolute bottom-0 left-0 w-24 h-24 bg-gradient-to-br from-white/10 to-transparent rounded-full blur-xl"></div>
          <div className="relative z-10">
            <div className="flex justify-between items-center mb-4">
              <div className="flex items-center gap-3">
                <div
                  className={cn(
                    'p-3 rounded-full shadow-lg group-hover:scale-110 transition-transform bg-white/20 backdrop-blur-sm'
                  )}
                >
                  <StatusIcon className={cn('w-6 h-6', statusInfo.color)} />
                </div>
                <div>
                  <span className="font-bold text-gray-900 text-lg">
                    {statusText.label}
                  </span>
                  <p className="text-sm text-gray-600 mt-1">
                    {statusText.description}
                  </p>
                </div>
              </div>
              <div className="flex items-center gap-3">
                <Badge className={priorityInfo.badgeClass}>
                  <PriorityIcon className="w-4 h-4 ml-2" />
                  {priorityText.label}
                </Badge>
                {daysLeft !== null &&
                  daysLeft <= 3 &&
                  suggestion.status !== 'EXPIRED' && (
                    <Badge className="bg-gradient-to-r from-red-500 to-pink-500 text-white border-0 shadow-xl animate-pulse">
                      <Clock className="w-3 h-3 ml-1" />
                      {daysLeft === 0
                        ? dict.deadline.lastDay
                        : dict.deadline.daysLeft.replace(
                            '{{count}}',
                            daysLeft.toString()
                          )}
                    </Badge>
                  )}
              </div>
            </div>
            <Progress
              value={statusInfo.progress}
              className="h-3 bg-white/30 shadow-inner"
            />
          </div>
        </div>
        <div className="p-6 space-y-6">
          <MatchmakerInfo dict={dict.matchmakerInfo} matchmaker={matchmaker} />
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div className="space-y-4 p-5 bg-gradient-to-br from-blue-50 to-cyan-50 rounded-2xl border border-blue-100 shadow-lg hover:shadow-xl transition-all duration-300">
              <PartyDisplay party={firstParty} />
              <div className="flex flex-wrap items-stretch gap-3 text-sm">
                {firstParty.profile?.occupation && (
                  <div className="flex-1 min-w-[120px] flex items-start gap-2 p-2 bg-white/70 rounded-lg shadow-sm">
                    <Briefcase className="w-4 h-4 text-blue-500 mt-0.5 flex-shrink-0" />
                    <span className="font-medium text-gray-700">
                      {firstParty.profile.occupation}
                    </span>
                  </div>
                )}
                {firstParty.profile?.education && (
                  <div className="flex-1 min-w-[120px] flex items-start gap-2 p-2 bg-white/70 rounded-lg shadow-sm">
                    <GraduationCap className="w-4 h-4 text-purple-500 mt-0.5 flex-shrink-0" />
                    <span className="font-medium text-gray-700">
                      {firstParty.profile.education}
                    </span>
                  </div>
                )}
              </div>
              {(suggestion.status === 'FIRST_PARTY_APPROVED' ||
                suggestion.status === 'FIRST_PARTY_DECLINED') && (
                <Badge
                  className={
                    suggestion.status === 'FIRST_PARTY_APPROVED'
                      ? 'bg-gradient-to-r from-green-500 to-emerald-500 text-white border-0 shadow-lg'
                      : 'bg-gradient-to-r from-red-500 to-pink-500 text-white border-0 shadow-lg'
                  }
                >
                  {suggestion.status === 'FIRST_PARTY_APPROVED' ? (
                    <>
                      <CheckCircle className="w-4 h-4 ml-2" />
                      {dict.desktop.partyStatus.approved}
                    </>
                  ) : (
                    <>
                      <XCircle className="w-4 h-4 ml-2" />
                      {dict.desktop.partyStatus.declined}
                    </>
                  )}
                </Badge>
              )}
            </div>
            <div className="space-y-4 p-5 bg-gradient-to-br from-purple-50 to-pink-50 rounded-2xl border border-purple-100 shadow-lg hover:shadow-xl transition-all duration-300">
              <PartyDisplay party={secondParty} />
              <div className="flex flex-wrap items-stretch gap-3 text-sm">
                {secondParty.profile?.occupation && (
                  <div className="flex-1 min-w-[120px] flex items-start gap-2 p-2 bg-white/70 rounded-lg shadow-sm">
                    <Briefcase className="w-4 h-4 text-purple-500 mt-0.5 flex-shrink-0" />
                    <span className="font-medium text-gray-700">
                      {secondParty.profile.occupation}
                    </span>
                  </div>
                )}
                {secondParty.profile?.education && (
                  <div className="flex-1 min-w-[120px] flex items-start gap-2 p-2 bg-white/70 rounded-lg shadow-sm">
                    <GraduationCap className="w-4 h-4 text-pink-500 mt-0.5 flex-shrink-0" />
                    <span className="font-medium text-gray-700">
                      {secondParty.profile.education}
                    </span>
                  </div>
                )}
              </div>
              {(suggestion.status === 'SECOND_PARTY_APPROVED' ||
                suggestion.status === 'SECOND_PARTY_DECLINED') && (
                <Badge
                  className={
                    suggestion.status === 'SECOND_PARTY_APPROVED'
                      ? 'bg-gradient-to-r from-green-500 to-emerald-500 text-white border-0 shadow-lg'
                      : 'bg-gradient-to-r from-red-500 to-pink-500 text-white border-0 shadow-lg'
                  }
                >
                  {suggestion.status === 'SECOND_PARTY_APPROVED' ? (
                    <>
                      <CheckCircle className="w-4 h-4 ml-2" />
                      {dict.desktop.partyStatus.approved}
                    </>
                  ) : (
                    <>
                      <XCircle className="w-4 h-4 ml-2" />
                      {dict.desktop.partyStatus.declined}
                    </>
                  )}
                </Badge>
              )}
            </div>
          </div>
          <div className="p-5 bg-gradient-to-r from-cyan-50 to-blue-50 rounded-2xl border border-cyan-100 shadow-lg">
            <h4 className="font-bold text-lg mb-3 text-cyan-800 flex items-center gap-2">
              <Sparkles className="w-5 h-5 text-cyan-500" />
              {dict.desktop.connectionPoints}
            </h4>
            <div className="flex flex-wrap gap-2">
              {highlights.map((highlight, index) => (
                <HighlightPill
                  key={index}
                  icon={highlight.icon}
                  text={highlight.text}
                  color={highlight.color}
                />
              ))}
            </div>
          </div>
          {suggestion.matchingReason && (
            <div className="p-5 bg-gradient-to-r from-emerald-50 to-green-50 rounded-2xl border border-emerald-100 shadow-lg">
              <h5 className="text-sm font-bold text-emerald-700 mb-2 flex items-center gap-2">
                <Quote className="w-4 h-4" />
                {dict.desktop.matchReasonTitle}
              </h5>
              <p className="text-emerald-800 leading-relaxed font-medium">
                {suggestion.matchingReason}
              </p>
            </div>
          )}
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4 text-sm">
            <div className="flex items-center gap-2 p-3 bg-gray-50 rounded-xl shadow-sm">
              <Clock className="w-4 h-4 text-gray-500" />
              <div>
                <p className="font-medium text-gray-600">
                  {dict.desktop.timeline.created}
                </p>
                <p className="text-gray-800">
                  {formatDistanceToNow(new Date(suggestion.createdAt), {
                    addSuffix: true,
                    locale: he,
                  })}
                </p>
              </div>
            </div>
            {suggestion.decisionDeadline && (
              <div className="flex items-center gap-2 p-3 bg-orange-50 rounded-xl shadow-sm">
                <CalendarClock className="w-4 h-4 text-orange-500" />
                <div>
                  <p className="font-medium text-orange-600">
                    {dict.desktop.timeline.deadline}
                  </p>
                  <p className="text-orange-800">
                    {daysLeft !== null
                      ? daysLeft === 0
                        ? dict.deadline.today
                        : dict.deadline.decisionInDays.replace(
                            '{{count}}',
                            daysLeft.toString()
                          )
                      : dict.deadline.noDeadline}
                  </p>
                </div>
              </div>
            )}
            <div className="flex items-center gap-2 p-3 bg-blue-50 rounded-xl shadow-sm">
              <TrendingUp className="w-4 h-4 text-blue-500" />
              <div>
                <p className="font-medium text-blue-600">
                  {dict.desktop.timeline.progress}
                </p>
                <p className="text-blue-800">
                  {dict.desktop.timeline.progressCompleted.replace(
                    '{{percent}}',
                    statusInfo.progress.toString()
                  )}
                </p>
              </div>
            </div>
          </div>
          <div className="flex items-center justify-between pt-4 border-t border-gray-100">
            <div className="flex items-center gap-2">
              <Button
                variant="ghost"
                size="sm"
                onClick={() => onAction('message', suggestion)}
                className="text-blue-600 hover:text-blue-700 hover:bg-blue-50 rounded-xl font-medium"
              >
                <MessageCircle className="w-4 h-4 ml-2" />
                {dict.actions.sendMessage}
              </Button>
              {canBeResent && (
                <Button
                  variant="ghost"
                  size="sm"
                  onClick={() => onAction('resend', suggestion)}
                  className="text-green-600 hover:text-green-700 hover:bg-green-50 rounded-xl font-medium"
                >
                  <RefreshCw className="w-4 h-4 ml-2" />
                  {dict.actions.resend}
                </Button>
              )}
            </div>
            <div className="flex items-center gap-2">
              <Button
                variant="default"
                size="sm"
                onClick={() => onAction('view', suggestion)}
                className="bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-700 hover:to-pink-700 shadow-lg hover:shadow-xl transition-all duration-300 rounded-xl font-medium"
              >
                <Eye className="w-4 h-4 ml-2" />
                {dict.actions.viewDetails}
              </Button>
              <DropdownMenu>
                <DropdownMenuTrigger asChild>
                  <Button
                    size="sm"
                    variant="ghost"
                    className="px-2 hover:bg-gray-100 rounded-xl"
                  >
                    <MoreHorizontal className="w-4 h-4" />
                  </Button>
                </DropdownMenuTrigger>
                <DropdownMenuContent align="end" className="w-48">
                  <DropdownMenuItem
                    onClick={() => onAction('edit', suggestion)}
                  >
                    <Edit className="w-4 h-4 ml-2" />
                    <span>{dict.actions.edit}</span>
                  </DropdownMenuItem>
                  {canBeResent && (
                    <DropdownMenuItem
                      onClick={() => onAction('resend', suggestion)}
                    >
                      <RefreshCw className="w-4 h-4 ml-2" />
                      <span>{dict.actions.resend}</span>
                    </DropdownMenuItem>
                  )}
                  <DropdownMenuItem
                    onClick={() => onAction('delete', suggestion)}
                    className="text-red-600 focus:text-red-600 focus:bg-red-50"
                  >
                    <Trash2 className="w-4 h-4 ml-2" />
                    <span>{dict.actions.delete}</span>
                  </DropdownMenuItem>
                </DropdownMenuContent>
              </DropdownMenu>
            </div>
          </div>
        </div>
      </Card>
    </TooltipProvider>
  );
};

export default SuggestionCard;
--- End of Content for SuggestionCard.tsx ---

================================================================================
Directory: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\suggestions\container
================================================================================

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\suggestions\container\MatchmakerDashboard.tsx
--------------------------------------------------------------------------------
Content:
'use client';

import React, { useState, useCallback, useEffect, useMemo } from 'react';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Card, CardContent } from '@/components/ui/card';
import { useSession } from 'next-auth/react';
import { useParams } from 'next/navigation';
import type {
  SuggestionsDictionary,
  MatchmakerPageDictionary,
  ProfilePageDictionary,
} from '@/types/dictionary';
import {
  Plus,
  RefreshCw,
  BarChart,
  Loader2,
  List,
  Archive,
  LayoutGrid,
  Filter,
  Search,
  TrendingUp,
  Users,
  Clock,
  CheckCircle,
  XCircle,
  Heart,
  Sparkles,
  Calendar,
  Target,
  Crown,
  Zap,
  Eye,
  MessageCircle,
  Settings,
  Award,
  Activity,
  Star,
  ArrowUp,
  ArrowDown,
} from 'lucide-react';
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
} from '@/components/ui/alert-dialog';
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
} from '@/components/ui/dialog';
import {
  Sheet,
  SheetContent,
  SheetHeader,
  SheetTitle,
  SheetTrigger,
} from '@/components/ui/sheet';
import { ToggleGroup, ToggleGroupItem } from '@/components/ui/toggle-group';
import { toast } from 'sonner';
import { MatchSuggestionStatus, Priority } from '@prisma/client';
import { cn } from '@/lib/utils';

// Type imports
import type {
  Suggestion,
  SuggestionFilters,
  ActionAdditionalData,
} from '@/types/suggestions';
import type { NewSuggestionFormData } from '../../suggestions/NewSuggestionForm/schema';
import type { Candidate } from '../../new/types/candidates';

// Hooks
import { useCandidates } from '../../new/hooks/useCandidates';

// Components
import NewSuggestionForm from '../../suggestions/NewSuggestionForm';
import SuggestionActionBar from './SuggestionActionBar';
import SuggestionDetailsDialog from '../details/SuggestionDetailsDialog';
import SuggestionCard from '../cards/SuggestionCard';
import EditSuggestionForm from '../EditSuggestionForm';
import MessageForm from '../MessageForm';
import MonthlyTrendModal from './MonthlyTrendModal';
import { ScrollArea } from '@/components/ui/scroll-area';
import { Input } from '@/components/ui/input';

// Media query hook
const useMediaQuery = (query: string) => {
  const [matches, setMatches] = useState(false);
  useEffect(() => {
    if (typeof window === 'undefined') return;
    const media = window.matchMedia(query);
    if (media.matches !== matches) {
      setMatches(media.matches);
    }
    const listener = () => setMatches(media.matches);
    window.addEventListener('resize', listener);
    return () => window.removeEventListener('resize', listener);
  }, [matches, query]);
  return matches;
};

// Enhanced Hero Section Component
const MatchmakerHeroSection: React.FC<{
  dict: MatchmakerPageDictionary['suggestionsDashboard']['heroSection'];
  onNewSuggestion: () => void;
  onRefresh: () => void;
  isRefreshing: boolean;
  stats: {
    total: number;
    pending: number;
    active: number;
    success: number;
    thisMonth: number;
    successRate: number;
  };
}> = ({ dict, onNewSuggestion, onRefresh, isRefreshing, stats }) => {
  return (
    <div className="relative min-h-[400px] bg-gradient-to-br from-purple-50 via-cyan-50/30 to-emerald-50/20 overflow-hidden rounded-3xl shadow-2xl mb-8">
      <div className="absolute inset-0">
        <div className="absolute top-10 right-10 w-64 h-64 bg-gradient-to-br from-purple-200/30 to-pink-200/30 rounded-full blur-3xl animate-float"></div>
        <div
          className="absolute bottom-10 left-10 w-48 h-48 bg-gradient-to-br from-cyan-200/30 to-blue-200/30 rounded-full blur-2xl animate-float"
          style={{ animationDelay: '2s' }}
        ></div>
        <div
          className="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-80 h-80 bg-gradient-to-br from-emerald-200/20 to-green-200/20 rounded-full blur-3xl animate-float"
          style={{ animationDelay: '4s' }}
        ></div>
      </div>

      <div className="relative z-10 p-8 lg:p-12">
        <div className="text-center mb-8">
          <div className="inline-flex items-center gap-3 mb-6">
            <div className="p-4 rounded-full bg-gradient-to-r from-purple-500 to-pink-500 text-white shadow-lg">
              <Crown className="w-10 h-10" />
            </div>
          </div>
          <h1 className="text-4xl md:text-5xl font-bold bg-gradient-to-r from-purple-600 via-pink-600 to-blue-600 bg-clip-text text-transparent mb-4">
            {dict.title}
          </h1>
          <p className="text-xl text-gray-700 max-w-2xl mx-auto leading-relaxed">
            {dict.subtitle}
          </p>
        </div>
        <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mb-8">
          <Card className="border-0 shadow-lg bg-white/80 backdrop-blur-sm hover:shadow-xl transition-all duration-300 group">
            <CardContent className="p-4 text-center">
              <div className="flex items-center justify-center gap-2 mb-2">
                <div className="p-2 rounded-full bg-gradient-to-r from-blue-500 to-cyan-500 text-white shadow-lg group-hover:scale-110 transition-transform">
                  <Users className="w-5 h-5" />
                </div>
                <span className="text-2xl font-bold text-blue-600">
                  {stats.total}
                </span>
              </div>
              <p className="text-sm text-gray-600 font-medium">
                {dict.totalSuggestions}
              </p>
            </CardContent>
          </Card>
          <Card className="border-0 shadow-lg bg-white/80 backdrop-blur-sm hover:shadow-xl transition-all duration-300 group">
            <CardContent className="p-4 text-center">
              <div className="flex items-center justify-center gap-2 mb-2">
                <div className="p-2 rounded-full bg-gradient-to-r from-orange-500 to-amber-500 text-white shadow-lg group-hover:scale-110 transition-transform">
                  <Clock className="w-5 h-5" />
                </div>
                <span className="text-2xl font-bold text-orange-600">
                  {stats.pending}
                </span>
              </div>
              <p className="text-sm text-gray-600 font-medium">
                {dict.pendingResponse}
              </p>
            </CardContent>
          </Card>
          <Card className="border-0 shadow-lg bg-white/80 backdrop-blur-sm hover:shadow-xl transition-all duration-300 group">
            <CardContent className="p-4 text-center">
              <div className="flex items-center justify-center gap-2 mb-2">
                <div className="p-2 rounded-full bg-gradient-to-r from-green-500 to-emerald-500 text-white shadow-lg group-hover:scale-110 transition-transform">
                  <Heart className="w-5 h-5" />
                </div>
                <span className="text-2xl font-bold text-green-600">
                  {stats.success}
                </span>
              </div>
              <p className="text-sm text-gray-600 font-medium">
                {dict.successfulMatches}
              </p>
            </CardContent>
          </Card>
          <Card className="border-0 shadow-lg bg-white/80 backdrop-blur-sm hover:shadow-xl transition-all duration-300 group">
            <CardContent className="p-4 text-center">
              <div className="flex items-center justify-center gap-2 mb-2">
                <div className="p-2 rounded-full bg-gradient-to-r from-purple-500 to-pink-500 text-white shadow-lg group-hover:scale-110 transition-transform">
                  <TrendingUp className="w-5 h-5" />
                </div>
                <span className="text-2xl font-bold text-purple-600">
                  {stats.successRate}%
                </span>
              </div>
              <p className="text-sm text-gray-600 font-medium">
                {dict.successRate}
              </p>
            </CardContent>
          </Card>
        </div>
        <div className="flex flex-col md:flex-row items-center justify-center gap-4">
          <Button
            onClick={onNewSuggestion}
            size="lg"
            className="bg-gradient-to-r from-purple-600 via-pink-600 to-blue-600 hover:from-purple-700 hover:via-pink-700 hover:to-blue-700 text-white shadow-xl hover:shadow-2xl transition-all duration-300 rounded-2xl px-8 py-4 font-bold text-lg transform hover:scale-105"
          >
            <Plus className="w-6 h-6 ml-3" />
            {dict.newSuggestionButton}
            <Sparkles className="w-5 h-5 mr-2" />
          </Button>
          <Button
            variant="outline"
            size="lg"
            onClick={onRefresh}
            disabled={isRefreshing}
            className="border-2 border-purple-300 text-purple-600 hover:bg-purple-50 shadow-lg hover:shadow-xl transition-all duration-300 rounded-2xl px-6 py-4 font-bold text-lg transform hover:scale-105"
          >
            <RefreshCw
              className={cn('w-5 h-5 ml-2', isRefreshing && 'animate-spin')}
            />
            {isRefreshing ? dict.refreshingButton : dict.refreshButton}
          </Button>
        </div>
      </div>
    </div>
  );
};

// Payload types
interface SuggestionUpdatePayload {
  priority?: Priority;
  status?: MatchSuggestionStatus;
  statusNotes?: string;
  matchingReason?: string;
  firstPartyNotes?: string;
  secondPartyNotes?: string;
  internalNotes?: string;
  decisionDeadline?: Date;
}

interface SendMessagePayload {
  suggestionId: string;
  partyType: 'first' | 'second' | 'both';
  messageType: 'message' | 'reminder' | 'update';
  messageContent: string;
}

type DialogActionData = {
  suggestionId?: string;
  newStatus?: MatchSuggestionStatus;
  notes?: string;
  suggestion?: Suggestion;
  partyType?: 'first' | 'second' | 'both';
  type?: string;
};

type ConfirmActionData = {
  suggestionId: string;
  partyType?: 'first' | 'second' | 'both';
  type?: string;
};

type SuggestionCardActionType =
  | 'view'
  | 'contact'
  | 'message'
  | 'edit'
  | 'delete'
  | 'resend'
  | 'changeStatus'
  | 'reminder';

type SuggestionDetailsActionType =
  | SuggestionCardActionType
  | 'sendReminder'
  | 'shareContacts'
  | 'scheduleMeeting'
  | 'viewMeetings'
  | 'exportHistory'
  | 'export'
  | 'resendToAll';

interface MatchmakerDashboardProps {
  suggestionsDict: SuggestionsDictionary;
  matchmakerDict: MatchmakerPageDictionary;
  profileDict: ProfilePageDictionary;
}

export default function MatchmakerDashboard({
  suggestionsDict,
  matchmakerDict,
  profileDict,
}: MatchmakerDashboardProps) {
  const params = useParams(); // <--- הוסף את השורה הזו
  const locale = Array.isArray(params.lang)
    ? params.lang[0]
    : params.lang || 'en'; // <--- הוסף את השורה הזו

  const dashboardDict = matchmakerDict.suggestionsDashboard;
  const toastsDict = dashboardDict.toasts;

  const isMobile = useMediaQuery('(max-width: 768px)');
  const [mobileView, setMobileView] = useState<'list' | 'kanban'>('list');
  const [showMobileFilters, setShowMobileFilters] = useState(false);
  const { data: session } = useSession();

  const [activeTab, setActiveTab] = useState('pending');
  const [showNewSuggestion, setShowNewSuggestion] = useState(false);
  const [searchQuery, setSearchQuery] = useState('');
  const [filters, setFilters] = useState<SuggestionFilters>({});
  const [suggestions, setSuggestions] = useState<Suggestion[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [isRefreshing, setIsRefreshing] = useState(false);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [selectedSuggestion, setSelectedSuggestion] =
    useState<Suggestion | null>(null);
  const [showConfirmDialog, setShowConfirmDialog] = useState(false);
  const [confirmAction, setConfirmAction] = useState<{
    type: string;
    data: ConfirmActionData;
  } | null>(null);
  const [showEditForm, setShowEditForm] = useState(false);
  const [showMessageForm, setShowMessageForm] = useState(false);
  const [showMonthlyTrendDialog, setShowMonthlyTrendDialog] = useState(false);

  const { candidates: allCandidates } = useCandidates();

  const fetchSuggestions = useCallback(async () => {
    setIsLoading(true);
    try {
      const response = await fetch('/api/matchmaker/suggestions');
      if (!response.ok) throw new Error('Failed to fetch suggestions');
      const data = await response.json();
      setSuggestions(data);
    } catch (error: unknown) {
      console.error('Error fetching suggestions:', error);
      toast.error(toastsDict.loadError);
    } finally {
      setIsLoading(false);
    }
  }, [toastsDict.loadError]);

  useEffect(() => {
    fetchSuggestions();
  }, [fetchSuggestions]);

  const filteredSuggestions = useMemo(() => {
    return suggestions.filter((s) => {
      if (searchQuery) {
        const query = searchQuery.toLowerCase();
        const match =
          (s.firstParty.firstName + ' ' + s.firstParty.lastName)
            .toLowerCase()
            .includes(query) ||
          (s.secondParty.firstName + ' ' + s.secondParty.lastName)
            .toLowerCase()
            .includes(query) ||
          (s.firstParty.profile?.city &&
            s.firstParty.profile.city.toLowerCase().includes(query)) ||
          (s.secondParty.profile?.city &&
            s.secondParty.profile.city.toLowerCase().includes(query));
        if (!match) return false;
      }
      if (filters.priority?.length && !filters.priority.includes(s.priority))
        return false;
      if (filters.status?.length && !filters.status.includes(s.status))
        return false;
      if (filters.dateRange) {
        const createdAt = new Date(s.createdAt);
        if (
          createdAt < filters.dateRange.start ||
          (filters.dateRange.end && createdAt > filters.dateRange.end)
        )
          return false;
      }
      return true;
    });
  }, [suggestions, searchQuery, filters]);

  const pendingSuggestions = useMemo(
    () => filteredSuggestions.filter((s) => s.category === 'PENDING'),
    [filteredSuggestions]
  );
  const activeSuggestions = useMemo(
    () => filteredSuggestions.filter((s) => s.category === 'ACTIVE'),
    [filteredSuggestions]
  );
  const historySuggestions = useMemo(
    () => filteredSuggestions.filter((s) => s.category === 'HISTORY'),
    [filteredSuggestions]
  );

  const pendingCount = pendingSuggestions.length;
  const activeCount = activeSuggestions.length;
  const historyCount = historySuggestions.length;

  const handleRefresh = async () => {
    setIsRefreshing(true);
    await fetchSuggestions();
    setIsRefreshing(false);
    toast.success(toastsDict.refreshSuccess);
  };

  const handleNewSuggestion = async (data: NewSuggestionFormData) => {
    try {
      const response = await fetch('/api/matchmaker/suggestions', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(data),
      });
      if (!response.ok)
        throw new Error(
          (await response.json()).error || 'Failed to create suggestion'
        );
      setShowNewSuggestion(false);
      toast.success(toastsDict.createSuccess);
      await fetchSuggestions();
    } catch (error: unknown) {
      console.error('Error creating suggestion:', error);
      toast.error(
        `${toastsDict.createError}: ${error instanceof Error ? error.message : ''}`
      );
    }
  };

  const handleSuggestionDeleted = useCallback(
    (deletedId: string) => {
      setSuggestions((prev) => prev.filter((s) => s.id !== deletedId));
      if (selectedSuggestion?.id === deletedId) setSelectedSuggestion(null);
    },
    [selectedSuggestion]
  );

  const handleConfirmAction = async () => {
    if (!confirmAction) return;
    try {
      if (confirmAction.type === 'delete') {
        const response = await fetch(
          `/api/matchmaker/suggestions/${confirmAction.data.suggestionId}/delete`,
          { method: 'DELETE' }
        );
        if (!response.ok) throw new Error('Failed to delete suggestion');
        handleSuggestionDeleted(confirmAction.data.suggestionId);
        toast.success(toastsDict.deleteSuccess);
      }
    } catch (error: unknown) {
      toast.error(toastsDict.deleteError);
    } finally {
      setShowConfirmDialog(false);
      setConfirmAction(null);
    }
  };

  const handleStatusChange = async (
    suggestionId: string,
    newStatus: MatchSuggestionStatus,
    notes?: string
  ) => {
    try {
      const response = await fetch(
        `/api/matchmaker/suggestions/${suggestionId}/status`,
        {
          method: 'PATCH',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            status: newStatus,
            notes: notes || `סטטוס שונה ממממשק ניהול`,
          }),
        }
      );
      if (!response.ok)
        throw new Error(
          (await response.json()).error || 'Failed to update status'
        );
      toast.success(toastsDict.statusUpdateSuccess);
      fetchSuggestions();
    } catch (error: unknown) {
      console.error('Error updating suggestion status:', error);
      toast.error(
        `${toastsDict.statusUpdateError}: ${error instanceof Error ? error.message : ''}`
      );
    }
  };

  const handleUpdateSuggestion = async (data: {
    suggestionId: string;
    updates: SuggestionUpdatePayload;
  }) => {
    try {
      setIsSubmitting(true);
      // ... (API logic remains)
      toast.success(toastsDict.updateSuccess);
      setShowEditForm(false);
      await fetchSuggestions();
    } catch (error) {
      console.error('Error updating suggestion:', error);
      toast.error(
        `${toastsDict.updateError}: ${error instanceof Error ? error.message : 'שגיאה לא ידועה'}`
      );
    } finally {
      setIsSubmitting(false);
    }
  };

  const handleSendMessage = async (data: SendMessagePayload) => {
    try {
      // ... (API logic remains)
      toast.success(toastsDict.messageSentSuccess);
      setShowMessageForm(false);
    } catch (error: unknown) {
      toast.error(
        `${toastsDict.messageSentError}: ${error instanceof Error ? error.message : ''}`
      );
    }
  };

  const handleDialogAction = (
    action: SuggestionDetailsActionType,
    data?: DialogActionData
  ) => {
    setSelectedSuggestion(data?.suggestion || null);
    if (action === 'view' && data?.suggestion) {
      setSelectedSuggestion(data.suggestion);
    } else if (action === 'delete' && data?.suggestionId) {
      setConfirmAction({
        type: 'delete',
        data: { suggestionId: data.suggestionId },
      });
      setShowConfirmDialog(true);
    } else if (action === 'edit' && data?.suggestion) {
      setShowEditForm(true);
    } else if (action === 'message' && data?.suggestion) {
      setShowMessageForm(true);
    } else if (
      action === 'changeStatus' &&
      data?.suggestionId &&
      data.newStatus
    ) {
      handleStatusChange(data.suggestionId, data.newStatus, data.notes);
    }
  };

  const handleSuggestionAction = (
    type: SuggestionCardActionType,
    suggestion: Suggestion,
    additionalData?: ActionAdditionalData
  ) => {
    handleDialogAction(type, {
      ...additionalData,
      suggestionId: suggestion.id,
      suggestion,
    });
  };

  const kanbanColumns = useMemo(() => {
    const columns: {
      [key: string]: {
        title: string;
        suggestions: Suggestion[];
        color: string;
        icon: React.ElementType;
      };
    } = {
      requiresAction: {
        title: dashboardDict.kanban.requiresAction,
        suggestions: [],
        color: 'from-red-500 to-orange-500',
        icon: Clock,
      },
      pendingResponse: {
        title: dashboardDict.kanban.pendingResponse,
        suggestions: [],
        color: 'from-yellow-500 to-amber-500',
        icon: MessageCircle,
      },
      inProgress: {
        title: dashboardDict.kanban.inProgress,
        suggestions: [],
        color: 'from-green-500 to-emerald-500',
        icon: Target,
      },
      history: {
        title: dashboardDict.kanban.history,
        suggestions: [],
        color: 'from-gray-500 to-slate-500',
        icon: Archive,
      },
    };

    for (const suggestion of filteredSuggestions) {
      if (suggestion.category === 'HISTORY') {
        columns.history.suggestions.push(suggestion);
      } else if (
        ['PENDING_FIRST_PARTY', 'PENDING_SECOND_PARTY'].includes(
          suggestion.status
        )
      ) {
        columns.requiresAction.suggestions.push(suggestion);
      } else if (
        [
          'APPROVED_BY_FIRST_PARTY',
          'APPROVED_BY_SECOND_PARTY',
          'AWAITING_REVIEW',
        ].includes(suggestion.status)
      ) {
        columns.pendingResponse.suggestions.push(suggestion);
      } else if (suggestion.category === 'ACTIVE') {
        columns.inProgress.suggestions.push(suggestion);
      }
    }

    return Object.values(columns);
  }, [filteredSuggestions, dashboardDict.kanban]);
  const heroStats = useMemo(() => {
    // ... (logic remains the same)
    const total = suggestions.length;
    const pending = suggestions.filter(
      (s) =>
        s.status === 'PENDING_FIRST_PARTY' ||
        s.status === 'PENDING_SECOND_PARTY'
    ).length;
    const active = suggestions.filter(
      (s) => !['CLOSED', 'CANCELLED', 'EXPIRED'].includes(s.status)
    ).length;
    const success = suggestions.filter((s) =>
      ['MARRIED', 'ENGAGED', 'DATING'].includes(s.status)
    ).length;
    const thisMonth = suggestions.filter((s) => {
      const created = new Date(s.createdAt);
      const now = new Date();
      return (
        created.getMonth() === now.getMonth() &&
        created.getFullYear() === now.getFullYear()
      );
    }).length;
    const successRate = total > 0 ? Math.round((success / total) * 100) : 0;
    return { total, pending, active, success, thisMonth, successRate };
  }, [suggestions]);

  const renderMobileFilters = () => (
    <Sheet open={showMobileFilters} onOpenChange={setShowMobileFilters}>
      <SheetTrigger asChild>
        <Button
          variant="outline"
          size="sm"
          className="bg-white/80 backdrop-blur-sm shadow-lg"
        >
          <Filter className="w-4 h-4 mr-2" />
          {dashboardDict.mobile.filter}
        </Button>
      </SheetTrigger>
      <SheetContent className="w-full">
        <SheetHeader>
          <SheetTitle>{dashboardDict.mobile.filter}</SheetTitle>
        </SheetHeader>
        <div className="py-4">
          <SuggestionActionBar
            searchQuery={searchQuery}
            onSearchChange={setSearchQuery}
            filters={filters}
            onFiltersChange={setFilters}
            totalCount={suggestions.length}
            activeCount={activeCount}
            pendingCount={pendingCount}
            historyCount={historyCount}
            dict={dashboardDict.actionBar}
          />
        </div>
      </SheetContent>
    </Sheet>
  );

  const renderMobileView = () => (
    <div className="min-h-screen bg-gradient-to-br from-slate-50 via-cyan-50/20 to-emerald-50/20">
      <div className="p-4">
        <MatchmakerHeroSection
          dict={dashboardDict.heroSection}
          onNewSuggestion={() => setShowNewSuggestion(true)}
          onRefresh={handleRefresh}
          isRefreshing={isRefreshing}
          stats={heroStats}
        />
      </div>
      <div className="flex items-center justify-between p-4 bg-white/80 backdrop-blur-sm border-b sticky top-0 z-10 shadow-lg">
        <div className="relative flex-1">
          <Search className="absolute right-3 top-2.5 h-4 w-4 text-gray-400" />
          <Input
            placeholder={dashboardDict.mobile.searchPlaceholder}
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
            className="pl-10 text-right pr-10 bg-white/90 shadow-sm border-purple-200 focus:border-purple-400"
          />
        </div>
        <div className="mr-2">{renderMobileFilters()}</div>
        <ToggleGroup
          type="single"
          value={mobileView}
          onValueChange={(value: 'list' | 'kanban') =>
            value && setMobileView(value)
          }
          className="mr-2"
        >
          <ToggleGroupItem
            value="list"
            aria-label={dashboardDict.mobile.list}
            className="data-[state=on]:bg-purple-100 data-[state=on]:text-purple-700"
          >
            <List className="h-4 w-4" />
          </ToggleGroupItem>
          <ToggleGroupItem
            value="kanban"
            aria-label={dashboardDict.mobile.kanban}
            className="data-[state=on]:bg-purple-100 data-[state=on]:text-purple-700"
          >
            <LayoutGrid className="h-4 w-4" />
          </ToggleGroupItem>
        </ToggleGroup>
      </div>
      {isLoading ? (
        <div className="flex-1 flex items-center justify-center p-8">
          <div className="text-center">
            <Loader2 className="w-12 h-12 animate-spin text-purple-600 mx-auto mb-4" />
            <p className="text-lg font-semibold text-gray-700">
              {dashboardDict.mainContent.loadingText}
            </p>
          </div>
        </div>
      ) : mobileView === 'kanban' ? (
        <ScrollArea className="w-full whitespace-nowrap flex-1">
          <div className="flex gap-4 p-4 h-full">
            {kanbanColumns.map((col, idx) => {
              const IconComponent = col.icon;
              return (
                <div
                  key={idx}
                  className="w-72 flex-shrink-0 bg-white/90 backdrop-blur-sm rounded-2xl shadow-xl flex flex-col border border-gray-200"
                >
                  <div
                    className={cn(
                      'p-4 font-semibold text-sm border-b sticky top-0 bg-gradient-to-r text-white rounded-t-2xl z-10 shadow-lg',
                      col.color
                    )}
                  >
                    <div className="flex items-center justify-between">
                      <div className="flex items-center gap-2">
                        <IconComponent className="w-5 h-5" />
                        <span>{col.title}</span>
                      </div>
                      <Badge
                        variant="secondary"
                        className="bg-white/20 text-white border-white/30"
                      >
                        {col.suggestions.length}
                      </Badge>
                    </div>
                  </div>
                  <ScrollArea className="flex-1 p-3">
                    <div className="space-y-3">
                      {col.suggestions.length > 0 ? (
                        col.suggestions.map((s) => (
                          <SuggestionCard
                            key={s.id}
                            suggestion={s}
                            onAction={handleSuggestionAction}
                            variant="compact"
                            className="shadow-lg hover:shadow-xl transition-all duration-300"
                            dict={dashboardDict.suggestionCard}
                          />
                        ))
                      ) : (
                        <div className="p-6 text-center text-sm text-gray-500 bg-gray-50 rounded-xl">
                          <IconComponent className="w-8 h-8 mx-auto mb-2 text-gray-400" />
                          <p>{dashboardDict.kanban.noSuggestions}</p>
                        </div>
                      )}
                    </div>
                  </ScrollArea>
                </div>
              );
            })}
          </div>
        </ScrollArea>
      ) : (
        <ScrollArea className="flex-1">
          <div className="p-4 space-y-4">
            {filteredSuggestions.map((s) => (
              <SuggestionCard
                key={s.id}
                suggestion={s}
                onAction={handleSuggestionAction}
                variant="full"
                className="shadow-lg hover:shadow-xl transition-all duration-300"
                dict={dashboardDict.suggestionCard}
              />
            ))}
            {filteredSuggestions.length === 0 && (
              <div className="text-center p-12">
                <div className="w-24 h-24 rounded-full bg-gradient-to-br from-purple-100 to-pink-100 flex items-center justify-center mx-auto mb-6">
                  <Users className="w-12 h-12 text-purple-400" />
                </div>
                <h3 className="text-xl font-bold text-gray-800 mb-2">
                  {dashboardDict.mobile.noMatches.title}
                </h3>
                <p className="text-gray-600">
                  {dashboardDict.mobile.noMatches.description}
                </p>
              </div>
            )}
          </div>
        </ScrollArea>
      )}
      <div className="p-4 bg-white/80 backdrop-blur-sm border-t sticky bottom-0">
        <Button
          onClick={() => setShowNewSuggestion(true)}
          className="w-full bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-700 hover:to-pink-700 shadow-xl text-lg py-6 rounded-2xl"
        >
          <Plus className="w-6 h-6 mr-3" />
          {dashboardDict.mobile.newSuggestionButton}
          <Sparkles className="w-5 h-5 ml-2" />
        </Button>
      </div>
    </div>
  );

  const renderDesktopView = () => (
    <div className="min-h-screen bg-gradient-to-br from-slate-50 via-cyan-50/20 to-emerald-50/20">
      <div className="container mx-auto p-6 space-y-8">
        <MatchmakerHeroSection
          dict={dashboardDict.heroSection}
          onNewSuggestion={() => setShowNewSuggestion(true)}
          onRefresh={handleRefresh}
          isRefreshing={isRefreshing}
          stats={heroStats}
        />
        <Card className="shadow-2xl border-0 bg-white/95 backdrop-blur-sm overflow-hidden rounded-3xl">
          <div className="bg-gradient-to-r from-white via-purple-50/30 to-pink-50/30 border-b border-purple-100 p-6">
            <Tabs value={activeTab} onValueChange={setActiveTab}>
              <div className="flex items-center justify-between mb-6">
                <div className="flex items-center gap-3">
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={() => setShowMonthlyTrendDialog(true)}
                    className="border-purple-200 hover:bg-purple-50 text-purple-600"
                  >
                    <BarChart className="w-4 h-4 mr-2" />
                    {dashboardDict.mainContent.monthlyTrendButton}
                  </Button>
                </div>
                <TabsList className="bg-purple-50/50 rounded-2xl p-1 h-14">
                  <TabsTrigger
                    value="pending"
                    className="flex items-center gap-3 px-6 py-3 rounded-xl transition-all data-[state=active]:bg-white data-[state=active]:shadow-lg font-semibold text-base"
                  >
                    <Clock className="w-5 h-5 text-orange-500" />
                    <span>{dashboardDict.mainContent.tabs.pending}</span>
                    {pendingCount > 0 && (
                      <Badge className="bg-orange-500 text-white border-0 px-2 py-1 text-xs font-bold rounded-full min-w-[24px] h-6">
                        {pendingCount}
                      </Badge>
                    )}
                  </TabsTrigger>
                  <TabsTrigger
                    value="active"
                    className="flex items-center gap-3 px-6 py-3 rounded-xl transition-all data-[state=active]:bg-white data-[state=active]:shadow-lg font-semibold text-base"
                  >
                    <Target className="w-5 h-5 text-green-500" />
                    <span>{dashboardDict.mainContent.tabs.active}</span>
                    {activeCount > 0 && (
                      <Badge className="bg-green-500 text-white border-0 px-2 py-1 text-xs font-bold rounded-full min-w-[24px] h-6">
                        {activeCount}
                      </Badge>
                    )}
                  </TabsTrigger>
                  <TabsTrigger
                    value="history"
                    className="flex items-center gap-3 px-6 py-3 rounded-xl transition-all data-[state=active]:bg-white data-[state=active]:shadow-lg font-semibold text-base"
                  >
                    <Archive className="w-5 h-5 text-gray-500" />
                    <span>{dashboardDict.mainContent.tabs.history}</span>
                    {historyCount > 0 && (
                      <Badge className="bg-gray-500 text-white border-0 px-2 py-1 text-xs font-bold rounded-full min-w-[24px] h-6">
                        {historyCount}
                      </Badge>
                    )}
                  </TabsTrigger>
                </TabsList>
              </div>
              <SuggestionActionBar
                searchQuery={searchQuery}
                onSearchChange={setSearchQuery}
                filters={filters}
                onFiltersChange={setFilters}
                totalCount={suggestions.length}
                activeCount={activeCount}
                pendingCount={pendingCount}
                historyCount={historyCount}
                dict={dashboardDict.actionBar}
              />
              {isLoading ? (
                <div className="flex items-center justify-center h-64">
                  <div className="text-center">
                    <Loader2 className="w-12 h-12 animate-spin text-purple-600 mx-auto mb-4" />
                    <p className="text-lg font-semibold text-gray-700">
                      {dashboardDict.mainContent.loadingText}
                    </p>
                  </div>
                </div>
              ) : (
                <>
                  <TabsContent value="pending" className="mt-6">
                    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                      {pendingSuggestions.map((suggestion) => (
                        <div key={suggestion.id} className="animate-fade-in-up">
                          <SuggestionCard
                            suggestion={suggestion}
                            onAction={handleSuggestionAction}
                            className="shadow-lg hover:shadow-xl transition-all duration-300"
                            dict={dashboardDict.suggestionCard}
                          />
                        </div>
                      ))}
                    </div>
                    {pendingSuggestions.length === 0 && (
                      <div className="text-center p-12">
                        <div className="w-24 h-24 rounded-full bg-gradient-to-br from-orange-100 to-amber-100 flex items-center justify-center mx-auto mb-6">
                          <Clock className="w-12 h-12 text-orange-400" />
                        </div>
                        <h3 className="text-xl font-bold text-gray-800 mb-2">
                          {dashboardDict.mainContent.emptyStates.pending.title}
                        </h3>
                        <p className="text-gray-600">
                          {
                            dashboardDict.mainContent.emptyStates.pending
                              .description
                          }
                        </p>
                      </div>
                    )}
                  </TabsContent>
                  <TabsContent value="active" className="mt-6">
                    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                      {activeSuggestions.map((suggestion) => (
                        <div key={suggestion.id} className="animate-fade-in-up">
                          <SuggestionCard
                            suggestion={suggestion}
                            onAction={handleSuggestionAction}
                            className="shadow-lg hover:shadow-xl transition-all duration-300"
                            dict={dashboardDict.suggestionCard}
                          />
                        </div>
                      ))}
                    </div>
                    {activeSuggestions.length === 0 && (
                      <div className="text-center p-12">
                        <div className="w-24 h-24 rounded-full bg-gradient-to-br from-green-100 to-emerald-100 flex items-center justify-center mx-auto mb-6">
                          <Target className="w-12 h-12 text-green-400" />
                        </div>
                        <h3 className="text-xl font-bold text-gray-800 mb-2">
                          {dashboardDict.mainContent.emptyStates.active.title}
                        </h3>
                        <p className="text-gray-600">
                          {
                            dashboardDict.mainContent.emptyStates.active
                              .description
                          }
                        </p>
                      </div>
                    )}
                  </TabsContent>
                  <TabsContent value="history" className="mt-6">
                    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                      {historySuggestions.map((suggestion) => (
                        <div key={suggestion.id} className="animate-fade-in-up">
                          <SuggestionCard
                            suggestion={suggestion}
                            onAction={handleSuggestionAction}
                            className="shadow-lg hover:shadow-xl transition-all duration-300"
                            dict={dashboardDict.suggestionCard}
                          />
                        </div>
                      ))}
                    </div>
                    {historySuggestions.length === 0 && (
                      <div className="text-center p-12">
                        <div className="w-24 h-24 rounded-full bg-gradient-to-br from-gray-100 to-slate-100 flex items-center justify-center mx-auto mb-6">
                          <Archive className="w-12 h-12 text-gray-400" />
                        </div>
                        <h3 className="text-xl font-bold text-gray-800 mb-2">
                          {dashboardDict.mainContent.emptyStates.history.title}
                        </h3>
                        <p className="text-gray-600">
                          {
                            dashboardDict.mainContent.emptyStates.history
                              .description
                          }
                        </p>
                      </div>
                    )}
                  </TabsContent>
                </>
              )}
            </Tabs>
          </div>
        </Card>
      </div>
    </div>
  );

  return (
    <div className={cn('min-h-screen', !isMobile && 'p-0', isMobile && 'p-0')}>
      {isMobile ? renderMobileView() : renderDesktopView()}
      <NewSuggestionForm
        isOpen={showNewSuggestion}
        onClose={() => setShowNewSuggestion(false)}
        candidates={allCandidates}
        onSubmit={handleNewSuggestion}
        locale={locale} // <--- הוסף את השורה הזו
        dict={matchmakerDict}
      />
      <SuggestionDetailsDialog
        suggestion={selectedSuggestion}
        isOpen={!!selectedSuggestion}
        onClose={() => setSelectedSuggestion(null)}
        onAction={handleDialogAction}
        userId={session?.user?.id || ''}
        matchmakerDict={matchmakerDict} // ✅ העברת המילון המלא של השדכן
        suggestionsDict={suggestionsDict}
        profileDict={profileDict} // ✅ הוספת השורה הזו
        // ✅ העברת המילון של ההצעות
      />

      <Dialog
        open={showMonthlyTrendDialog}
        onOpenChange={setShowMonthlyTrendDialog}
      >
        <DialogContent className="max-w-4xl">
          <DialogHeader>
            <DialogTitle>
              {dashboardDict.dialogs.monthlyTrend.title}
            </DialogTitle>
          </DialogHeader>
          <MonthlyTrendModal
            dict={dashboardDict.monthlyTrendModal}
            suggestions={suggestions}
          />
        </DialogContent>
      </Dialog>
      <EditSuggestionForm
        isOpen={showEditForm}
        onClose={() => setShowEditForm(false)}
        suggestion={selectedSuggestion}
        onSave={handleUpdateSuggestion}
        dict={dashboardDict.editSuggestionForm}
      />
      <MessageForm
        isOpen={showMessageForm}
        onClose={() => setShowMessageForm(false)}
        suggestion={selectedSuggestion}
        onSend={handleSendMessage}
        dict={dashboardDict.messageForm}
      />
      {confirmAction && (
        <AlertDialog
          open={showConfirmDialog}
          onOpenChange={setShowConfirmDialog}
        >
          <AlertDialogContent className="border-0 shadow-2xl rounded-2xl">
            <AlertDialogHeader>
              <AlertDialogTitle className="text-xl font-bold text-center">
                {dashboardDict.dialogs.deleteConfirm.title}
              </AlertDialogTitle>
              <AlertDialogDescription className="text-center text-gray-600 leading-relaxed">
                {dashboardDict.dialogs.deleteConfirm.description}
              </AlertDialogDescription>
            </AlertDialogHeader>
            <AlertDialogFooter className="gap-3">
              <AlertDialogCancel className="rounded-xl">
                {dashboardDict.dialogs.deleteConfirm.cancel}
              </AlertDialogCancel>
              <AlertDialogAction
                onClick={handleConfirmAction}
                className="bg-gradient-to-r from-red-500 to-red-600 hover:from-red-600 hover:to-red-700 rounded-xl"
              >
                {dashboardDict.dialogs.deleteConfirm.confirm}
              </AlertDialogAction>
            </AlertDialogFooter>
          </AlertDialogContent>
        </AlertDialog>
      )}
    </div>
  );
}
--- End of Content for MatchmakerDashboard.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\suggestions\container\MonthlyTrendModal.tsx
--------------------------------------------------------------------------------
Content:
import React, { useMemo } from 'react';
import { Card, CardContent } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import {
  BarChart,
  Bar,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip,
  ResponsiveContainer,
  Legend,
  LineChart,
  Line,
  Area,
  AreaChart,
  PieChart,
  Pie,
  Cell,
  RadialBarChart,
  RadialBar,
} from 'recharts';
import {
  TrendingUp,
  TrendingDown,
  Calendar,
  BarChart3,
  LineChart as LineChartIcon,
  PieChart as PieChartIcon,
  Activity,
  Users,
  CheckCircle,
  Clock,
  Heart,
  Award,
  Target,
  ArrowUp,
  ArrowDown,
  Sparkles,
  Star,
  Crown,
  Zap,
  Download,
  RefreshCw,
  Eye,
  XCircle,
} from 'lucide-react';
import type { Suggestion } from '@/types/suggestions';
import { cn } from '@/lib/utils';
import type { MatchmakerPageDictionary } from '@/types/dictionary';

interface MonthlyTrendModalProps {
  dict: MatchmakerPageDictionary['suggestionsDashboard']['monthlyTrendModal'];
  suggestions: Suggestion[];
}

interface MonthlyData {
  month: string;
  year: number;
  count: number;
  active: number;
  pending: number;
  success: number;
  declined: number;
}

interface TrendCardProps {
  title: string;
  value: number;
  trend: number;
  icon: React.ElementType;
  gradient: string;
  description: string;
}

const TrendCard: React.FC<TrendCardProps> = ({
  title,
  value,
  trend,
  icon: Icon,
  gradient,
  description,
}) => (
  <Card className="border-0 shadow-xl hover:shadow-2xl transition-all duration-300 group overflow-hidden rounded-2xl">
    <div
      className={cn('absolute inset-0 opacity-5 bg-gradient-to-br', gradient)}
    />
    <div className="absolute top-0 right-0 w-20 h-20 bg-gradient-to-br from-white/20 to-transparent rounded-full blur-xl" />

    <CardContent className="relative z-10 p-6">
      <div className="flex items-center justify-between mb-4">
        <div
          className={cn(
            'p-3 rounded-full shadow-lg group-hover:scale-110 transition-transform bg-gradient-to-r text-white',
            gradient
          )}
        >
          <Icon className="w-6 h-6" />
        </div>
        <div
          className={cn(
            'flex items-center gap-1 px-3 py-1 rounded-full text-sm font-bold',
            trend >= 0
              ? 'bg-green-100 text-green-700'
              : 'bg-red-100 text-red-700'
          )}
        >
          {trend >= 0 ? (
            <ArrowUp className="w-3 h-3" />
          ) : (
            <ArrowDown className="w-3 h-3" />
          )}
          {Math.abs(trend)}%
        </div>
      </div>

      <div className="space-y-2">
        <h3 className="text-3xl font-bold text-gray-800">{value}</h3>
        <p className="text-sm font-medium text-gray-600">{title}</p>
        <p className="text-xs text-gray-500 leading-relaxed">{description}</p>
      </div>
    </CardContent>
  </Card>
);

const MonthlyTrendModal: React.FC<MonthlyTrendModalProps> = ({
  dict,
  suggestions,
}) => {
  const monthlyData = useMemo(() => {
    const data = suggestions.reduce(
      (acc, s) => {
        const createdDate = new Date(s.createdAt);
        const month = createdDate.getMonth();
        const year = createdDate.getFullYear();
        const key = `${year}-${month + 1}`;

        if (!acc[key]) {
          acc[key] = {
            month: new Date(year, month).toLocaleString('he', {
              month: 'short',
            }),
            year: year,
            count: 0,
            active: 0,
            pending: 0,
            success: 0,
            declined: 0,
          };
        }

        acc[key].count += 1;
        if (s.category === 'ACTIVE') acc[key].active += 1;
        if (s.category === 'PENDING') acc[key].pending += 1;
        if (['MARRIED', 'ENGAGED'].includes(s.status)) acc[key].success += 1;
        if (
          s.status === 'FIRST_PARTY_DECLINED' ||
          s.status === 'SECOND_PARTY_DECLINED'
        ) {
          acc[key].declined += 1;
        }

        return acc;
      },
      {} as Record<string, MonthlyData>
    );

    return Object.values(data).sort((a, b) => {
      if (a.year !== b.year) return a.year - b.year;
      const monthA = new Date(
        a.year,
        a.month === 'ינו' ? 0 : new Date(`1 ${a.month} 2000`).getMonth()
      ).getMonth();
      const monthB = new Date(
        b.year,
        b.month === 'ינו' ? 0 : new Date(`1 ${b.month} 2000`).getMonth()
      ).getMonth();
      return monthA - monthB;
    });
  }, [suggestions]);

  const trends = useMemo(() => {
    if (monthlyData.length < 2)
      return { active: 0, pending: 0, success: 0, total: 0 };
    const current = monthlyData[monthlyData.length - 1];
    const previous = monthlyData[monthlyData.length - 2];
    const calculateTrend = (current: number, previous: number) => {
      if (previous === 0) return current > 0 ? 100 : 0;
      return Math.round(((current - previous) / previous) * 100);
    };
    return {
      active: calculateTrend(current.active, previous.active),
      pending: calculateTrend(current.pending, previous.pending),
      success: calculateTrend(current.success, previous.success),
      total: calculateTrend(current.count, previous.count),
    };
  }, [monthlyData]);

  const chartData = monthlyData.map((month) => ({
    name: `${month.month} ${month.year}`,
    [dict.charts.legend.active]: month.active,
    [dict.charts.legend.pending]: month.pending,
    [dict.charts.legend.success]: month.success,
    [dict.charts.legend.declined]: month.declined,
  }));

  const pieData =
    monthlyData.length > 0
      ? [
          {
            name: dict.charts.legend.active,
            value: monthlyData[monthlyData.length - 1].active,
            color: '#3B82F6',
          },
          {
            name: dict.charts.legend.pending,
            value: monthlyData[monthlyData.length - 1].pending,
            color: '#F59E0B',
          },
          {
            name: dict.charts.legend.success,
            value: monthlyData[monthlyData.length - 1].success,
            color: '#10B981',
          },
          {
            name: dict.charts.legend.declined,
            value: monthlyData[monthlyData.length - 1].declined,
            color: '#EF4444',
          },
        ]
      : [];

  const COLORS = ['#3B82F6', '#F59E0B', '#10B981', '#EF4444'];

  if (monthlyData.length === 0) {
    return (
      <div className="p-12 text-center">
        <div className="w-24 h-24 rounded-full bg-gradient-to-br from-purple-100 to-pink-100 flex items-center justify-center mx-auto mb-6">
          <BarChart3 className="w-12 h-12 text-purple-400" />
        </div>
        <h3 className="text-xl font-bold text-gray-800 mb-2">
          {dict.emptyState.title}
        </h3>
        <p className="text-gray-600">{dict.emptyState.description}</p>
      </div>
    );
  }

  const currentMonth = monthlyData[monthlyData.length - 1];
  const trendLabel =
    trends.total >= 0
      ? dict.trendCards.trendLabel.increase
      : dict.trendCards.trendLabel.decrease;

  return (
    <div className="space-y-8">
      <div className="relative">
        <div className="absolute inset-0 bg-gradient-to-r from-purple-50 via-cyan-50/30 to-emerald-50/20 rounded-3xl"></div>
        <div className="relative z-10 p-8 text-center">
          <div className="flex items-center justify-center gap-3 mb-4">
            <div className="p-3 rounded-full bg-gradient-to-r from-purple-500 to-pink-500 text-white shadow-xl">
              <TrendingUp className="w-8 h-8" />
            </div>
          </div>
          <h2 className="text-3xl font-bold bg-gradient-to-r from-purple-600 via-pink-600 to-blue-600 bg-clip-text text-transparent mb-2">
            {dict.header.title}
          </h2>
          <p className="text-gray-600 text-lg">{dict.header.subtitle}</p>
        </div>
      </div>
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
        <TrendCard
          title={dict.trendCards.total.title}
          value={currentMonth.count}
          trend={trends.total}
          icon={Users}
          gradient="from-blue-500 to-cyan-500"
          description={dict.trendCards.total.description.replace(
            '{{trend}}',
            trendLabel
          )}
        />
        <TrendCard
          title={dict.trendCards.active.title}
          value={currentMonth.active}
          trend={trends.active}
          icon={Target}
          gradient="from-green-500 to-emerald-500"
          description={dict.trendCards.active.description}
        />
        <TrendCard
          title={dict.trendCards.pending.title}
          value={currentMonth.pending}
          trend={trends.pending}
          icon={Clock}
          gradient="from-yellow-500 to-amber-500"
          description={dict.trendCards.pending.description}
        />
        <TrendCard
          title={dict.trendCards.success.title}
          value={currentMonth.success}
          trend={trends.success}
          icon={Crown}
          gradient="from-purple-500 to-pink-500"
          description={dict.trendCards.success.description}
        />
      </div>
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
        <Card className="border-0 shadow-xl hover:shadow-2xl transition-all duration-300 bg-white overflow-hidden rounded-2xl">
          <CardContent className="p-6">
            <div className="flex items-center justify-between mb-6">
              <div className="flex items-center gap-3">
                <div className="p-3 rounded-full bg-gradient-to-r from-blue-500 to-cyan-500 text-white shadow-lg">
                  <BarChart3 className="w-6 h-6" />
                </div>
                <h3 className="text-xl font-bold text-gray-800">
                  {dict.charts.areaChart.title}
                </h3>
              </div>
              <Badge className="bg-gradient-to-r from-blue-500 to-cyan-500 text-white px-3 py-1 rounded-full">
                {dict.charts.areaChart.badge.replace(
                  '{{count}}',
                  monthlyData.length.toString()
                )}
              </Badge>
            </div>
            <div className="h-80">
              <ResponsiveContainer width="100%" height="100%">
                <AreaChart data={chartData}>
                  <defs>
                    <linearGradient
                      id="colorActive"
                      x1="0"
                      y1="0"
                      x2="0"
                      y2="1"
                    >
                      <stop offset="5%" stopColor="#3B82F6" stopOpacity={0.3} />
                      <stop offset="95%" stopColor="#3B82F6" stopOpacity={0} />
                    </linearGradient>
                    <linearGradient
                      id="colorPending"
                      x1="0"
                      y1="0"
                      x2="0"
                      y2="1"
                    >
                      <stop offset="5%" stopColor="#F59E0B" stopOpacity={0.3} />
                      <stop offset="95%" stopColor="#F59E0B" stopOpacity={0} />
                    </linearGradient>
                    <linearGradient
                      id="colorSuccess"
                      x1="0"
                      y1="0"
                      x2="0"
                      y2="1"
                    >
                      <stop offset="5%" stopColor="#10B981" stopOpacity={0.3} />
                      <stop offset="95%" stopColor="#10B981" stopOpacity={0} />
                    </linearGradient>
                  </defs>
                  <CartesianGrid strokeDasharray="3 3" stroke="#e5e7eb" />
                  <XAxis dataKey="name" stroke="#6b7280" fontSize={12} />
                  <YAxis stroke="#6b7280" fontSize={12} />
                  <Tooltip
                    contentStyle={{
                      backgroundColor: 'white',
                      border: 'none',
                      borderRadius: '12px',
                      boxShadow: '0 20px 25px -5px rgba(0, 0, 0, 0.1)',
                    }}
                    formatter={(value, name) => [value, name]}
                    labelFormatter={(label) =>
                      dict.charts.tooltip.monthLabel.replace('{{label}}', label)
                    }
                  />
                  <Area
                    type="monotone"
                    dataKey={dict.charts.legend.active}
                    stroke="#3B82F6"
                    fillOpacity={1}
                    fill="url(#colorActive)"
                    strokeWidth={3}
                  />
                  <Area
                    type="monotone"
                    dataKey={dict.charts.legend.pending}
                    stroke="#F59E0B"
                    fillOpacity={1}
                    fill="url(#colorPending)"
                    strokeWidth={3}
                  />
                  <Area
                    type="monotone"
                    dataKey={dict.charts.legend.success}
                    stroke="#10B981"
                    fillOpacity={1}
                    fill="url(#colorSuccess)"
                    strokeWidth={3}
                  />
                </AreaChart>
              </ResponsiveContainer>
            </div>
          </CardContent>
        </Card>
        <Card className="border-0 shadow-xl hover:shadow-2xl transition-all duration-300 bg-white overflow-hidden rounded-2xl">
          <CardContent className="p-6">
            <div className="flex items-center justify-between mb-6">
              <div className="flex items-center gap-3">
                <div className="p-3 rounded-full bg-gradient-to-r from-purple-500 to-pink-500 text-white shadow-lg">
                  <PieChartIcon className="w-6 h-6" />
                </div>
                <h3 className="text-xl font-bold text-gray-800">
                  {dict.charts.pieChart.title}
                </h3>
              </div>
              <Badge className="bg-gradient-to-r from-purple-500 to-pink-500 text-white px-3 py-1 rounded-full">
                {dict.charts.pieChart.badge
                  .replace('{{month}}', currentMonth.month)
                  .replace('{{year}}', currentMonth.year.toString())}
              </Badge>
            </div>
            <div className="h-80">
              <ResponsiveContainer width="100%" height="100%">
                <PieChart>
                  <Pie
                    data={pieData}
                    cx="50%"
                    cy="50%"
                    labelLine={false}
                    label={({ name, percent }) =>
                      `${name} ${(percent * 100).toFixed(0)}%`
                    }
                    outerRadius={100}
                    fill="#8884d8"
                    dataKey="value"
                  >
                    {pieData.map((entry, index) => (
                      <Cell
                        key={`cell-${index}`}
                        fill={COLORS[index % COLORS.length]}
                      />
                    ))}
                  </Pie>
                  <Tooltip
                    contentStyle={{
                      backgroundColor: 'white',
                      border: 'none',
                      borderRadius: '12px',
                      boxShadow: '0 20px 25px -5px rgba(0, 0, 0, 0.1)',
                    }}
                  />
                </PieChart>
              </ResponsiveContainer>
            </div>
          </CardContent>
        </Card>
      </div>
      <Card className="border-0 shadow-xl bg-white overflow-hidden rounded-2xl">
        <CardContent className="p-6">
          <div className="flex items-center justify-between mb-6">
            <div className="flex items-center gap-3">
              <div className="p-3 rounded-full bg-gradient-to-r from-emerald-500 to-green-500 text-white shadow-lg">
                <Activity className="w-6 h-6" />
              </div>
              <h3 className="text-xl font-bold text-gray-800">
                {dict.table.title}
              </h3>
            </div>
            <div className="flex gap-2">
              <Button
                variant="outline"
                size="sm"
                className="rounded-xl border-emerald-200 text-emerald-600 hover:bg-emerald-50"
              >
                <Download className="w-4 h-4 ml-2" />
                {dict.table.exportButton}
              </Button>
              <Button
                variant="outline"
                size="sm"
                className="rounded-xl border-blue-200 text-blue-600 hover:bg-blue-50"
              >
                <Eye className="w-4 h-4 ml-2" />
                {dict.table.viewAllButton}
              </Button>
            </div>
          </div>
          <div className="overflow-x-auto">
            <table className="w-full">
              <thead>
                <tr className="bg-gradient-to-r from-gray-50 to-slate-50">
                  <th className="p-4 text-right font-bold text-gray-800 border-b border-gray-200 rounded-tr-xl">
                    {dict.table.headers.month}
                  </th>
                  <th className="p-4 text-center font-bold text-gray-800 border-b border-gray-200">
                    {dict.table.headers.total}
                  </th>
                  <th className="p-4 text-center font-bold text-gray-800 border-b border-gray-200">
                    {dict.table.headers.active}
                  </th>
                  <th className="p-4 text-center font-bold text-gray-800 border-b border-gray-200">
                    {dict.table.headers.pending}
                  </th>
                  <th className="p-4 text-center font-bold text-gray-800 border-b border-gray-200">
                    {dict.table.headers.success}
                  </th>
                  <th className="p-4 text-center font-bold text-gray-800 border-b border-gray-200 rounded-tl-xl">
                    {dict.table.headers.declined}
                  </th>
                </tr>
              </thead>
              <tbody>
                {monthlyData
                  .slice()
                  .reverse()
                  .map((month, idx) => (
                    <tr
                      key={idx}
                      className={cn(
                        'hover:bg-gradient-to-r hover:from-blue-50 hover:to-cyan-50 transition-all duration-200',
                        idx % 2 === 0 ? 'bg-white' : 'bg-gray-50/50',
                        idx === 0 &&
                          'bg-gradient-to-r from-blue-50 to-cyan-50 font-semibold'
                      )}
                    >
                      <td className="p-4 border-b border-gray-100">
                        <div className="flex items-center gap-2">
                          <Calendar className="w-4 h-4 text-blue-500" />
                          <span className="font-bold text-gray-800">
                            {month.month} {month.year}
                          </span>
                          {idx === 0 && (
                            <Badge className="bg-gradient-to-r from-blue-500 to-cyan-500 text-white text-xs px-2 py-1">
                              {dict.table.currentMonthBadge}
                            </Badge>
                          )}
                        </div>
                      </td>
                      <td className="p-4 text-center border-b border-gray-100">
                        <div className="flex items-center justify-center gap-2">
                          <Users className="w-4 h-4 text-blue-500" />
                          <span className="font-bold text-blue-600">
                            {month.count}
                          </span>
                        </div>
                      </td>
                      <td className="p-4 text-center border-b border-gray-100">
                        <div className="flex items-center justify-center gap-2">
                          <Target className="w-4 h-4 text-green-500" />
                          <span className="font-bold text-green-600">
                            {month.active}
                          </span>
                        </div>
                      </td>
                      <td className="p-4 text-center border-b border-gray-100">
                        <div className="flex items-center justify-center gap-2">
                          <Clock className="w-4 h-4 text-yellow-500" />
                          <span className="font-bold text-yellow-600">
                            {month.pending}
                          </span>
                        </div>
                      </td>
                      <td className="p-4 text-center border-b border-gray-100">
                        <div className="flex items-center justify-center gap-2">
                          <Crown className="w-4 h-4 text-purple-500" />
                          <span className="font-bold text-purple-600">
                            {month.success}
                          </span>
                        </div>
                      </td>
                      <td className="p-4 text-center border-b border-gray-100">
                        <div className="flex items-center justify-center gap-2">
                          <XCircle className="w-4 h-4 text-red-500" />
                          <span className="font-bold text-red-600">
                            {month.declined}
                          </span>
                        </div>
                      </td>
                    </tr>
                  ))}
              </tbody>
            </table>
          </div>
        </CardContent>
      </Card>
      <Card className="border-0 shadow-xl bg-gradient-to-r from-indigo-50 to-purple-50 overflow-hidden rounded-2xl">
        <CardContent className="p-8">
          <div className="flex items-center gap-4 mb-6">
            <div className="p-4 rounded-full bg-gradient-to-r from-indigo-500 to-purple-500 text-white shadow-xl">
              <Sparkles className="w-8 h-8" />
            </div>
            <div>
              <h3 className="text-2xl font-bold text-indigo-800">
                {dict.insights.title}
              </h3>
              <p className="text-indigo-600">{dict.insights.subtitle}</p>
            </div>
          </div>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            <div className="p-6 bg-white/70 rounded-xl shadow-lg">
              <div className="flex items-center gap-3 mb-3">
                <TrendingUp className="w-6 h-6 text-green-500" />
                <h4 className="font-bold text-gray-800">
                  {dict.insights.growth.title}
                </h4>
              </div>
              <p className="text-sm text-gray-700 leading-relaxed">
                {trends.total >= 0
                  ? dict.insights.growth.increase.replace(
                      '{{trend}}',
                      trends.total.toString()
                    )
                  : dict.insights.growth.decrease.replace(
                      '{{trend}}',
                      Math.abs(trends.total).toString()
                    )}
              </p>
            </div>
            <div className="p-6 bg-white/70 rounded-xl shadow-lg">
              <div className="flex items-center gap-3 mb-3">
                <Award className="w-6 h-6 text-purple-500" />
                <h4 className="font-bold text-gray-800">
                  {dict.insights.successRate.title}
                </h4>
              </div>
              <p className="text-sm text-gray-700 leading-relaxed">
                {currentMonth.count > 0
                  ? dict.insights.successRate.rate.replace(
                      '{{rate}}',
                      Math.round(
                        (currentMonth.success / currentMonth.count) * 100
                      ).toString()
                    )
                  : dict.insights.successRate.noData}
              </p>
            </div>
            <div className="p-6 bg-white/70 rounded-xl shadow-lg">
              <div className="flex items-center gap-3 mb-3">
                <Activity className="w-6 h-6 text-blue-500" />
                <h4 className="font-bold text-gray-800">
                  {dict.insights.currentActivity.title}
                </h4>
              </div>
              <p className="text-sm text-gray-700 leading-relaxed">
                {dict.insights.currentActivity.body.replace(
                  '{{count}}',
                  (currentMonth.active + currentMonth.pending).toString()
                )}
              </p>
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  );
};

export default MonthlyTrendModal;
--- End of Content for MonthlyTrendModal.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\suggestions\container\SuggestionActionBar.tsx
--------------------------------------------------------------------------------
Content:
import React, { useState } from 'react';
import { Input } from '@/components/ui/input';
import { Button } from '@/components/ui/button';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select';
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from '@/components/ui/popover';
import { Badge } from '@/components/ui/badge';
import { DatePicker } from '@/components/ui/date-picker';
import {
  Search,
  Filter,
  X,
  Calendar,
  User,
  Clock,
  ChevronDown,
  AlertCircle,
  CheckCircle,
  XCircle,
  RefreshCw,
  SlidersHorizontal,
  Sparkles,
  Target,
  Zap,
  Settings,
  TrendingUp,
  Star,
  Flame,
  Shield,
} from 'lucide-react';
import { Checkbox } from '@/components/ui/checkbox';
import { Priority, MatchSuggestionStatus } from '@prisma/client';
import type { SuggestionFilters, SortByOption } from '@/types/suggestions';
import { Card, CardContent } from '@/components/ui/card';
import { cn } from '@/lib/utils';
import type { MatchmakerPageDictionary } from '@/types/dictionary';

interface SuggestionActionBarProps {
  dict: MatchmakerPageDictionary['suggestionsDashboard']['actionBar'];
  searchQuery: string;
  onSearchChange: (value: string) => void;
  filters: SuggestionFilters;
  onFiltersChange: (filters: SuggestionFilters) => void;
  totalCount: number;
  activeCount: number;
  pendingCount: number;
  historyCount: number;
}

const SuggestionActionBar: React.FC<SuggestionActionBarProps> = ({
  dict,
  searchQuery,
  onSearchChange,
  filters,
  onFiltersChange,
}) => {
  const [showAdvancedFilters, setShowAdvancedFilters] = useState(false);
  const activeFilters = Object.keys(filters).length;
  const [dateRange, setDateRange] = useState<{
    from: Date | undefined;
    to: Date | undefined;
  }>({
    from: filters.dateRange?.start,
    to: filters.dateRange?.end,
  });

  const handleRemoveFilter = (key: keyof SuggestionFilters) => {
    const newFilters = { ...filters };
    delete newFilters[key];
    onFiltersChange(newFilters);
  };

  const handleDateRangeChange = (range: {
    from: Date | undefined;
    to: Date | undefined;
  }) => {
    setDateRange(range);
    if (range.from) {
      onFiltersChange({
        ...filters,
        dateRange: { start: range.from, end: range.to || new Date() },
      });
    } else {
      const newFilters = { ...filters };
      delete newFilters.dateRange;
      onFiltersChange(newFilters);
    }
  };

  // ✅ תיקון: יצירת אובייקט מיפוי לאייקונים במקום פונקציה חסרה
  const priorityInfoMap: Record<
    string,
    { icon: React.ElementType; color: string }
  > = {
    URGENT: { icon: Flame, color: 'text-red-600' },
    HIGH: { icon: Star, color: 'text-orange-600' },
    MEDIUM: { icon: Target, color: 'text-blue-600' },
    LOW: { icon: Shield, color: 'text-gray-600' },
  };

  const statusOptions: {
    value: MatchSuggestionStatus;
    icon: React.ElementType;
    color: string;
  }[] = [
    { value: 'PENDING_FIRST_PARTY', icon: Clock, color: 'text-yellow-600' },
    { value: 'PENDING_SECOND_PARTY', icon: Clock, color: 'text-blue-600' },
    {
      value: 'FIRST_PARTY_APPROVED',
      icon: CheckCircle,
      color: 'text-green-600',
    },
    {
      value: 'SECOND_PARTY_APPROVED',
      icon: CheckCircle,
      color: 'text-green-600',
    },
    { value: 'DATING', icon: AlertCircle, color: 'text-pink-600' },
  ];

  return (
    <div className="space-y-6">
      <Card className="border-0 shadow-xl bg-gradient-to-r from-white via-purple-50/30 to-pink-50/30 overflow-hidden rounded-2xl">
        <CardContent className="p-6">
          <div className="flex flex-col lg:flex-row gap-4 items-center">
            <div className="relative flex-1 w-full lg:w-auto">
              <div className="absolute inset-0 bg-gradient-to-r from-purple-500/5 to-pink-500/5 rounded-xl"></div>
              <Search className="absolute right-4 top-1/2 transform -translate-y-1/2 h-5 w-5 text-purple-400" />
              <Input
                value={searchQuery}
                onChange={(e) => onSearchChange(e.target.value)}
                placeholder={dict.searchPlaceholder}
                className="relative z-10 h-14 pr-14 text-right border-2 border-purple-200 hover:border-purple-300 focus:border-purple-500 rounded-xl bg-white/80 backdrop-blur-sm shadow-lg transition-all duration-300 text-lg"
              />
              <div className="absolute left-3 top-1/2 transform -translate-y-1/2">
                <Sparkles className="h-4 w-4 text-purple-400" />
              </div>
            </div>
            <div className="w-full lg:w-auto">
              <Select
                value={filters.priority?.[0] || 'all'}
                onValueChange={(value) =>
                  onFiltersChange({
                    ...filters,
                    priority: value === 'all' ? undefined : [value as Priority],
                  })
                }
              >
                <SelectTrigger className="h-14 w-full lg:w-48 border-2 border-purple-200 hover:border-purple-300 focus:border-purple-500 rounded-xl bg-white/80 backdrop-blur-sm shadow-lg transition-all">
                  <div className="flex items-center gap-2">
                    <Star className="w-5 h-5 text-purple-500" />
                    <SelectValue
                      placeholder={dict.priorityFilter.placeholder}
                    />
                  </div>
                </SelectTrigger>
                <SelectContent className="border-0 shadow-2xl rounded-xl">
                  <SelectItem value="all">
                    <div className="flex items-center gap-3">
                      <div className="w-3 h-3 rounded-full bg-gradient-to-r from-purple-500 to-pink-500"></div>
                      {dict.priorityFilter.all}
                    </div>
                  </SelectItem>
                  {/* ✅ תיקון: הלולאה תוקנה להשתמש במפת האייקונים */}
                  {Object.entries(dict.priorityFilter.options).map(
                    ([key, label]: [string, string]) => {
                      const info =
                        priorityInfoMap[key] || priorityInfoMap.MEDIUM;
                      const Icon = info.icon;
                      return (
                        <SelectItem key={key} value={key}>
                          <div className="flex items-center gap-3">
                            <Icon className={cn('w-4 h-4', info.color)} />
                            {label}
                          </div>
                        </SelectItem>
                      );
                    }
                  )}
                </SelectContent>
              </Select>
            </div>
            <Popover>
              <PopoverTrigger asChild>
                <Button
                  variant="outline"
                  className="h-14 px-6 border-2 border-purple-200 hover:border-purple-300 hover:bg-purple-50 rounded-xl bg-white/80 backdrop-blur-sm shadow-lg transition-all duration-300"
                >
                  <Calendar className="h-5 w-5 ml-2 text-purple-500" />
                  <span className="font-medium">{dict.buttons.dateRange}</span>
                  <ChevronDown className="h-4 w-4 mr-2 text-purple-400" />
                </Button>
              </PopoverTrigger>
              <PopoverContent
                className="w-auto p-4 border-0 shadow-2xl rounded-2xl bg-white/95 backdrop-blur-sm"
                align="end"
              >
                <div className="space-y-4">
                  <div className="flex items-center gap-2">
                    <Calendar className="w-5 h-5 text-purple-500" />
                    <h4 className="font-bold text-gray-800">
                      {dict.buttons.dateRange}
                    </h4>
                  </div>
                  <DatePicker
                    onChange={handleDateRangeChange}
                    value={dateRange}
                    isRange={true}
                  />
                  <div className="flex justify-end">
                    <Button
                      size="sm"
                      variant="outline"
                      onClick={() =>
                        handleDateRangeChange({
                          from: undefined,
                          to: undefined,
                        })
                      }
                      className="rounded-xl border-purple-200 text-purple-600 hover:bg-purple-50"
                    >
                      {dict.buttons.clearDate}
                    </Button>
                  </div>
                </div>
              </PopoverContent>
            </Popover>
            <Button
              variant={showAdvancedFilters ? 'default' : 'outline'}
              onClick={() => setShowAdvancedFilters(!showAdvancedFilters)}
              className={cn(
                'h-14 px-6 rounded-xl transition-all duration-300 font-bold',
                showAdvancedFilters
                  ? 'bg-gradient-to-r from-purple-600 to-pink-600 text-white shadow-xl hover:shadow-2xl'
                  : 'border-2 border-purple-200 hover:border-purple-300 hover:bg-purple-50 bg-white/80 backdrop-blur-sm shadow-lg text-purple-600'
              )}
            >
              <SlidersHorizontal className="w-5 h-5 ml-2" />
              {dict.buttons.advancedFilters}
              {activeFilters > 0 && (
                <Badge className="mr-2 bg-white/20 text-current border-white/30 px-2 py-1">
                  {activeFilters}
                </Badge>
              )}
            </Button>
          </div>
        </CardContent>
      </Card>
      {showAdvancedFilters && (
        <Card className="border-0 shadow-xl bg-gradient-to-r from-purple-50 to-pink-50 rounded-2xl overflow-hidden">
          <CardContent className="p-6">
            <div className="flex items-center justify-between mb-6">
              <div className="flex items-center gap-3">
                <div className="p-3 rounded-full bg-gradient-to-r from-purple-500 to-pink-500 text-white shadow-lg">
                  <SlidersHorizontal className="w-6 h-6" />
                </div>
                <h3 className="text-xl font-bold text-gray-800">
                  {dict.advancedFilters.title}
                </h3>
              </div>
              <Button
                variant="ghost"
                size="sm"
                className="h-10 px-3 rounded-xl hover:bg-white/50"
                onClick={() => setShowAdvancedFilters(false)}
              >
                <X className="h-5 w-5" />
              </Button>
            </div>
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
              <div className="space-y-4">
                <div className="flex items-center gap-3">
                  <div className="p-2 rounded-full bg-gradient-to-r from-blue-500 to-cyan-500 text-white shadow-lg">
                    <Zap className="w-4 h-4" />
                  </div>
                  <h4 className="font-bold text-gray-800">
                    {dict.advancedFilters.statusTitle}
                  </h4>
                </div>
                <div className="space-y-3 max-h-60 overflow-y-auto">
                  {statusOptions.map((status) => {
                    const Icon = status.icon;
                    const label =
                      dict.advancedFilters.statusOptions[
                        status.value as keyof typeof dict.advancedFilters.statusOptions
                      ];
                    return (
                      <div
                        key={status.value}
                        className="flex items-center space-x-2 p-3 bg-white/70 rounded-xl hover:bg-white/90 transition-all"
                      >
                        <Checkbox
                          id={`status-${status.value}`}
                          checked={filters.status?.includes(
                            status.value as MatchSuggestionStatus
                          )}
                          onCheckedChange={(checked) => {
                            const newStatus = checked
                              ? [...(filters.status || []), status.value]
                              : filters.status?.filter(
                                  (s) => s !== status.value
                                );
                            onFiltersChange({
                              ...filters,
                              status: newStatus as MatchSuggestionStatus[],
                            });
                          }}
                        />
                        <label
                          htmlFor={`status-${status.value}`}
                          className="text-sm mr-2 flex items-center gap-2 cursor-pointer flex-1"
                        >
                          <Icon className={cn('h-4 w-4', status.color)} />
                          {label}
                        </label>
                      </div>
                    );
                  })}
                </div>
              </div>
              <div className="space-y-4">
                <div className="flex items-center gap-3">
                  <div className="p-2 rounded-full bg-gradient-to-r from-green-500 to-emerald-500 text-white shadow-lg">
                    <User className="w-4 h-4" />
                  </div>
                  <h4 className="font-bold text-gray-800">
                    {dict.advancedFilters.participantsTitle}
                  </h4>
                </div>
                <div className="p-4 bg-white/70 rounded-xl">
                  <Select
                    value={filters.userId || 'all'}
                    onValueChange={(value) =>
                      onFiltersChange({
                        ...filters,
                        userId: value === 'all' ? undefined : value,
                      })
                    }
                  >
                    <SelectTrigger className="border-2 border-green-200 focus:border-green-400 rounded-xl">
                      <div className="flex items-center gap-2">
                        <User className="h-4 w-4 text-green-500" />
                        <SelectValue
                          placeholder={dict.advancedFilters.participantsTitle}
                        />
                      </div>
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="all">
                        {dict.advancedFilters.participantOptions.all}
                      </SelectItem>
                      <SelectItem value="user1">ישראל ישראלי</SelectItem>
                      <SelectItem value="user2">שרה כהן</SelectItem>
                      <SelectItem value="user3">דוד לוי</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
              </div>
              <div className="space-y-4">
                <div className="flex items-center gap-3">
                  <div className="p-2 rounded-full bg-gradient-to-r from-purple-500 to-pink-500 text-white shadow-lg">
                    <TrendingUp className="w-4 h-4" />
                  </div>
                  <h4 className="font-bold text-gray-800">
                    {dict.advancedFilters.sortByTitle}
                  </h4>
                </div>
                <div className="p-4 bg-white/70 rounded-xl">
                  <Select
                    value={filters.sortBy || 'lastActivity'}
                    onValueChange={(value) =>
                      onFiltersChange({
                        ...filters,
                        sortBy: value as SortByOption,
                      })
                    }
                  >
                    <SelectTrigger className="border-2 border-purple-200 focus:border-purple-400 rounded-xl">
                      <div className="flex items-center gap-2">
                        <TrendingUp className="h-4 w-4 text-purple-500" />
                        <SelectValue
                          placeholder={dict.advancedFilters.sortByTitle}
                        />
                      </div>
                    </SelectTrigger>
                    <SelectContent>
                      {Object.entries(dict.advancedFilters.sortOptions).map(
                        ([key, label]) => (
                          <SelectItem key={key} value={key}>
                            {label}
                          </SelectItem>
                        )
                      )}
                    </SelectContent>
                  </Select>
                </div>
              </div>
            </div>
          </CardContent>
        </Card>
      )}
      {activeFilters > 0 && (
        <Card className="border-0 shadow-lg bg-gradient-to-r from-indigo-50 to-purple-50 rounded-2xl">
          <CardContent className="p-4">
            <div className="flex items-center justify-between">
              <div className="flex items-center gap-3">
                <div className="p-2 rounded-full bg-gradient-to-r from-indigo-500 to-purple-500 text-white shadow-lg">
                  <Filter className="w-4 h-4" />
                </div>
                <span className="font-bold text-indigo-800">
                  {dict.activeFilters.title}
                </span>
              </div>
              <div className="flex items-center gap-2 flex-wrap">
                {filters.priority && (
                  <Badge className="bg-gradient-to-r from-orange-500 to-amber-500 text-white border-0 shadow-lg px-3 py-1 rounded-xl">
                    <Star className="w-3 h-3 ml-1" />
                    {dict.activeFilters.priorityLabel}:{' '}
                    {dict.priorityFilter.options[filters.priority[0]]}
                    <button
                      onClick={() => handleRemoveFilter('priority')}
                      className="ml-2 hover:bg-white/20 rounded-full p-0.5 transition-all"
                    >
                      <X className="w-3 h-3" />
                    </button>
                  </Badge>
                )}
                {filters.dateRange && (
                  <Badge className="bg-gradient-to-r from-blue-500 to-cyan-500 text-white border-0 shadow-lg px-3 py-1 rounded-xl">
                    <Calendar className="w-3 h-3 ml-1" />
                    {dict.activeFilters.dateLabel}:{' '}
                    {new Date(filters.dateRange.start).toLocaleDateString(
                      'he-IL'
                    )}
                    {filters.dateRange.end &&
                      ` - ${new Date(filters.dateRange.end).toLocaleDateString('he-IL')}`}
                    <button
                      onClick={() => handleRemoveFilter('dateRange')}
                      className="ml-2 hover:bg-white/20 rounded-full p-0.5 transition-all"
                    >
                      <X className="w-3 h-3" />
                    </button>
                  </Badge>
                )}
                {filters.status && filters.status.length > 0 && (
                  <Badge className="bg-gradient-to-r from-green-500 to-emerald-500 text-white border-0 shadow-lg px-3 py-1 rounded-xl">
                    <AlertCircle className="w-3 h-3 ml-1" />
                    {dict.activeFilters.statusLabel}:{' '}
                    {filters.status.length === 1
                      ? dict.activeFilters.statusValues.single
                      : dict.activeFilters.statusValues.multiple.replace(
                          '{{count}}',
                          filters.status.length.toString()
                        )}
                    <button
                      onClick={() => handleRemoveFilter('status')}
                      className="ml-2 hover:bg-white/20 rounded-full p-0.5 transition-all"
                    >
                      <X className="w-3 h-3" />
                    </button>
                  </Badge>
                )}
                {filters.userId && (
                  <Badge className="bg-gradient-to-r from-purple-500 to-pink-500 text-white border-0 shadow-lg px-3 py-1 rounded-xl">
                    <User className="w-3 h-3 ml-1" />
                    {dict.activeFilters.userLabel}:{' '}
                    {dict.activeFilters.userValue}
                    <button
                      onClick={() => handleRemoveFilter('userId')}
                      className="ml-2 hover:bg-white/20 rounded-full p-0.5 transition-all"
                    >
                      <X className="w-3 h-3" />
                    </button>
                  </Badge>
                )}
                <Button
                  variant="ghost"
                  size="sm"
                  onClick={() => onFiltersChange({})}
                  className="text-indigo-600 hover:text-indigo-700 hover:bg-indigo-100 rounded-xl transition-all font-medium"
                >
                  <RefreshCw className="w-3 h-3 ml-1" />
                  {dict.buttons.clearAll}
                </Button>
              </div>
            </div>
          </CardContent>
        </Card>
      )}
    </div>
  );
};

export default SuggestionActionBar;
--- End of Content for SuggestionActionBar.tsx ---

================================================================================
Directory: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\suggestions\details
================================================================================

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\suggestions\details\SuggestionDetailsDialog.tsx
--------------------------------------------------------------------------------
Content:
// src/app/components/matchmaker/suggestions/details/SuggestionDetailsDialog.tsx
'use client';

import React, { useState, useEffect } from 'react';
import InquiryThreadView from '@/components/suggestions/inquiries/InquiryThreadView';
import { useNotifications } from '@/app/[locale]/contexts/NotificationContext';

import { Dialog, DialogContent } from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select';
import { ProfileCard } from '@/components/profile';
import { Timeline } from '@/components/ui/timeline';
import {
  AlertCircle,
  CheckCircle,
  XCircle,
  MessageCircle,
  Send,
  RefreshCw,
  Edit,
  Calendar,
  Clock,
  Download,
  AlarmClock,
  Trash2,
  MapPin,
  Mail,
  Phone,
  User,
  ExternalLink,
  Crown,
  Heart,
  Gem,
  Eye,
  Settings,
  Briefcase,
  GraduationCap,
  Quote,
  Archive,
  Maximize,
  Minimize,
  X as CloseIcon,
  LucideIcon,
} from 'lucide-react';
import { Textarea } from '@/components/ui/textarea';
import { toast } from 'sonner';

import { MatchSuggestionStatus, UserImage } from '@prisma/client';
import type {
  ExtendedMatchSuggestion,
  ActionAdditionalData,
  SuggestionParty,
} from '@/types/suggestions';
import type { QuestionnaireResponse } from '@/types/next-auth';
import Image from 'next/image';
import { getRelativeCloudinaryPath, cn, getInitials } from '@/lib/utils';
import { Avatar, AvatarFallback } from '@/components/ui/avatar';
import { Progress } from '@/components/ui/progress';
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from '@/components/ui/tooltip';
import type {
  MatchmakerPageDictionary,
  SuggestionsDictionary,
  ProfilePageDictionary,
} from '@/types/dictionary';

type SuggestionDetailsActionType =
  | 'view'
  | 'contact'
  | 'message'
  | 'edit'
  | 'delete'
  | 'resend'
  | 'changeStatus'
  | 'reminder'
  | 'sendReminder'
  | 'shareContacts'
  | 'scheduleMeeting'
  | 'viewMeetings'
  | 'exportHistory'
  | 'export'
  | 'resendToAll';

interface DialogActionData extends ActionAdditionalData {
  suggestionId?: string;
  newStatus?: MatchSuggestionStatus;
  notes?: string;
  suggestion?: ExtendedMatchSuggestion;
  partyId?: string;
  type?: string;
  partyType?: 'first' | 'second' | 'both';
}

interface SuggestionDetailsDialogProps {
  suggestion: ExtendedMatchSuggestion | null;
  isOpen: boolean;
  onClose: () => void;
  onAction: (
    action: SuggestionDetailsActionType,
    data?: DialogActionData
  ) => void;
  userId: string;
  matchmakerDict: MatchmakerPageDictionary;
  suggestionsDict: SuggestionsDictionary;
  profileDict: ProfilePageDictionary; // ✅ הוספת המילון החדש
}

interface StatusInfo {
  icon: LucideIcon;
  color: string;
  bgColor: string;
  badgeColor: string;
  progress: number;
}

const getEnhancedStatusInfo = (status: MatchSuggestionStatus): StatusInfo => {
  const statusInfoMap: Record<
    string,
    Omit<StatusInfo, 'label' | 'description'>
  > = {
    DRAFT: {
      icon: Edit,
      color: 'text-gray-600',
      bgColor: 'from-gray-50 to-slate-50',
      badgeColor: 'bg-gradient-to-r from-gray-500 to-slate-500 text-white',
      progress: 10,
    },
    PENDING_FIRST_PARTY: {
      icon: Clock,
      color: 'text-yellow-600',
      bgColor: 'from-yellow-50 to-amber-50',
      badgeColor: 'bg-gradient-to-r from-yellow-500 to-amber-500 text-white',
      progress: 25,
    },
    FIRST_PARTY_APPROVED: {
      icon: CheckCircle,
      color: 'text-green-600',
      bgColor: 'from-green-50 to-emerald-50',
      badgeColor: 'bg-gradient-to-r from-green-500 to-emerald-500 text-white',
      progress: 40,
    },
    FIRST_PARTY_DECLINED: {
      icon: XCircle,
      color: 'text-red-600',
      bgColor: 'from-red-50 to-pink-50',
      badgeColor: 'bg-gradient-to-r from-red-500 to-pink-500 text-white',
      progress: 0,
    },
    PENDING_SECOND_PARTY: {
      icon: Clock,
      color: 'text-blue-600',
      bgColor: 'from-blue-50 to-cyan-50',
      badgeColor: 'bg-gradient-to-r from-blue-500 to-cyan-500 text-white',
      progress: 50,
    },
    SECOND_PARTY_APPROVED: {
      icon: CheckCircle,
      color: 'text-green-600',
      bgColor: 'from-green-50 to-emerald-50',
      badgeColor: 'bg-gradient-to-r from-green-500 to-emerald-500 text-white',
      progress: 60,
    },
    SECOND_PARTY_DECLINED: {
      icon: XCircle,
      color: 'text-red-600',
      bgColor: 'from-red-50 to-pink-50',
      badgeColor: 'bg-gradient-to-r from-red-500 to-pink-500 text-white',
      progress: 0,
    },
    CONTACT_DETAILS_SHARED: {
      icon: Send,
      color: 'text-purple-600',
      bgColor: 'from-purple-50 to-pink-50',
      badgeColor: 'bg-gradient-to-r from-purple-500 to-pink-500 text-white',
      progress: 70,
    },
    AWAITING_FIRST_DATE_FEEDBACK: {
      icon: MessageCircle,
      color: 'text-orange-600',
      bgColor: 'from-orange-50 to-amber-50',
      badgeColor: 'bg-gradient-to-r from-orange-500 to-amber-500 text-white',
      progress: 75,
    },
    DATING: {
      icon: Heart,
      color: 'text-pink-600',
      bgColor: 'from-pink-50 to-rose-50',
      badgeColor: 'bg-gradient-to-r from-pink-500 to-rose-500 text-white',
      progress: 80,
    },
    ENGAGED: {
      icon: Gem,
      color: 'text-yellow-600',
      bgColor: 'from-yellow-50 to-orange-50',
      badgeColor: 'bg-gradient-to-r from-yellow-500 to-orange-500 text-white',
      progress: 95,
    },
    MARRIED: {
      icon: Crown,
      color: 'text-emerald-600',
      bgColor: 'from-emerald-50 to-green-50',
      badgeColor: 'bg-gradient-to-r from-emerald-500 to-green-500 text-white',
      progress: 100,
    },
    EXPIRED: {
      icon: AlarmClock,
      color: 'text-gray-600',
      bgColor: 'from-gray-50 to-slate-50',
      badgeColor: 'bg-gradient-to-r from-gray-500 to-slate-500 text-white',
      progress: 0,
    },
    CLOSED: {
      icon: Archive,
      color: 'text-gray-600',
      bgColor: 'from-gray-50 to-slate-50',
      badgeColor: 'bg-gradient-to-r from-gray-500 to-slate-500 text-white',
      progress: 0,
    },
    CANCELLED: {
      icon: XCircle,
      color: 'text-red-600',
      bgColor: 'from-red-50 to-pink-50',
      badgeColor: 'bg-gradient-to-r from-red-500 to-pink-500 text-white',
      progress: 0,
    },
    AWAITING_MATCHMAKER_APPROVAL: {
      icon: User,
      color: 'text-blue-600',
      bgColor: 'from-blue-50 to-cyan-50',
      badgeColor: 'bg-blue-500',
      progress: 65,
    },
    THINKING_AFTER_DATE: {
      icon: Clock,
      color: 'text-indigo-600',
      bgColor: 'from-indigo-50 to-violet-50',
      badgeColor: 'bg-indigo-500',
      progress: 77,
    },
    PROCEEDING_TO_SECOND_DATE: {
      icon: CheckCircle,
      color: 'text-teal-600',
      bgColor: 'from-teal-50 to-cyan-50',
      badgeColor: 'bg-teal-500',
      progress: 78,
    },
    ENDED_AFTER_FIRST_DATE: {
      icon: XCircle,
      color: 'text-red-600',
      bgColor: 'from-red-50 to-pink-50',
      badgeColor: 'bg-red-500',
      progress: 0,
    },
    MEETING_PENDING: {
      icon: Calendar,
      color: 'text-purple-600',
      bgColor: 'from-purple-50 to-pink-50',
      badgeColor: 'bg-purple-500',
      progress: 72,
    },
    MEETING_SCHEDULED: {
      icon: Calendar,
      color: 'text-green-600',
      bgColor: 'from-green-50 to-emerald-50',
      badgeColor: 'bg-green-500',
      progress: 74,
    },
    MATCH_APPROVED: {
      icon: CheckCircle,
      color: 'text-green-600',
      bgColor: 'from-green-50 to-emerald-50',
      badgeColor: 'bg-green-500',
      progress: 60,
    },
    MATCH_DECLINED: {
      icon: XCircle,
      color: 'text-red-600',
      bgColor: 'from-red-50 to-pink-50',
      badgeColor: 'bg-red-500',
      progress: 0,
    },
  };
  return (
    statusInfoMap[status] || {
      icon: RefreshCw,
      color: 'text-gray-600',
      bgColor: 'from-gray-50 to-slate-50',
      badgeColor: 'bg-gray-500',
      progress: 10,
    }
  );
};

const formatDateSafely = (
  dateInput: Date | string | null | undefined,
  placeholder: string
): string => {
  if (!dateInput) return placeholder;
  const date = typeof dateInput === 'string' ? new Date(dateInput) : dateInput;
  if (!(date instanceof Date) || isNaN(date.getTime())) return 'Invalid Date';
  return new Intl.DateTimeFormat('he-IL', {
    year: 'numeric',
    month: '2-digit',
    day: '2-digit',
    hour: '2-digit',
    minute: '2-digit',
  }).format(date);
};

const getDaysRemaining = (
  deadline: Date | string | null | undefined
): number | null => {
  if (!deadline) return null;
  const deadlineDate =
    typeof deadline === 'string' ? new Date(deadline) : deadline;
  if (!(deadlineDate instanceof Date) || isNaN(deadlineDate.getTime()))
    return null;
  const today = new Date();
  const diffTime = deadlineDate.getTime() - today.getTime();
  return Math.ceil(diffTime / (1000 * 60 * 60 * 24));
};

// ... Internal Components updated to receive and use dict ...

const SuggestionDetailsDialog: React.FC<SuggestionDetailsDialogProps> = ({
  suggestion,
  isOpen,
  onClose,
  onAction,
  userId,
  matchmakerDict,
  suggestionsDict,
  profileDict,
}) => {
  const dict = matchmakerDict.suggestionDetailsDialog;
  const [activeTab, setActiveTab] = useState('overview');
  const [firstPartyQuestionnaire, setFirstPartyQuestionnaire] =
    useState<QuestionnaireResponse | null>(null);
  const [secondPartyQuestionnaire, setSecondPartyQuestionnaire] =
    useState<QuestionnaireResponse | null>(null);
  const [isLoading, setIsLoading] = useState(false);
  const [isFullscreen, setIsFullscreen] = useState(false);
  const [statusChangeNote, setStatusChangeNote] = useState('');
  const [newStatus, setNewStatus] = useState<MatchSuggestionStatus | null>(
    null
  );
  const [showStatusChange, setShowStatusChange] = useState(false);
  const { refreshNotifications } = useNotifications();

  useEffect(() => {
    if (isOpen && suggestion) {
      setActiveTab('overview');
      setShowStatusChange(false);
      setNewStatus(null);
      setStatusChangeNote('');

      const hasUnread = suggestion.inquiries?.some(
        (inq) => inq.toUserId === userId && inq.status === 'PENDING'
      );
      if (hasUnread) {
        const markAsRead = async () => {
          try {
            await fetch(
              `/api/suggestions/${suggestion.id}/inquiries/mark-as-read`,
              { method: 'POST' }
            );
            refreshNotifications();
          } catch (error) {
            console.error('Failed to mark inquiries as read:', error);
          }
        };
        markAsRead();
      }
    }
  }, [isOpen, suggestion, userId, refreshNotifications]);

  const handleStatusChange = async () => {
    if (!newStatus || !suggestion) return;
    setIsLoading(true);
    try {
      onAction('changeStatus', {
        suggestionId: suggestion.id,
        newStatus,
        notes: statusChangeNote,
      });
      setShowStatusChange(false);
      setStatusChangeNote('');
      setNewStatus(null);
    } catch (error) {
      console.error('Error changing status:', error);
      toast.error(
        `${dict.toasts.statusUpdateError}: ${error instanceof Error ? error.message : ''}`
      );
    } finally {
      setIsLoading(false);
    }
  };

  if (!suggestion) return null;

  const statusInfo = getEnhancedStatusInfo(suggestion.status);
  const statusLabel = dict.statusLabels[suggestion.status] || suggestion.status;
  const statusDescription = dict.statusLabels[suggestion.status] || '';
  const priorityLabel =
    dict.priorityLabels[suggestion.priority] || suggestion.priority;

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent
        className={cn(
          'p-0 shadow-2xl border-0 bg-white overflow-hidden z-[50] flex flex-col transition-all duration-300 ease-in-out',
          isFullscreen
            ? '!w-screen !h-screen !max-w-none !max-h-none !rounded-none !fixed !inset-0 !m-0'
            : 'md:max-w-7xl md:w-[95vw] md:h-[95vh] md:rounded-3xl'
        )}
        dir="rtl"
        onOpenAutoFocus={(e) => e.preventDefault()}
      >
        <Tabs
          value={activeTab}
          onValueChange={setActiveTab}
          className="flex-1 flex flex-col overflow-hidden"
        >
          {/* Header and Tabs Component */}
          <div
            className={cn(
              'relative bg-gradient-to-br',
              statusInfo.bgColor,
              'border-b border-gray-100/80 flex-shrink-0'
            )}
          >
            <div className="absolute inset-0">
              <div className="absolute top-0 right-0 w-64 h-64 bg-gradient-to-br from-white/20 to-transparent rounded-full blur-3xl opacity-50"></div>
              <div className="absolute bottom-0 left-0 w-48 h-48 bg-gradient-to-br from-white/10 to-transparent rounded-full blur-2xl opacity-40"></div>
            </div>
            <div className="relative z-10 p-6 space-y-4">
              <div className="flex items-start justify-between">
                <div className="flex items-center gap-4">
                  <div className="p-3 rounded-full bg-white/20 backdrop-blur-sm shadow-lg">
                    <statusInfo.icon
                      className={cn('w-7 h-7', statusInfo.color)}
                    />
                  </div>
                  <div>
                    <h1 className="text-xl lg:text-2xl font-bold text-gray-800">
                      {dict.header.title.replace(
                        '{{id}}',
                        suggestion.id.toString().split('-')[0]
                      )}
                    </h1>
                    <p className="text-md text-gray-600 mt-1">
                      {dict.header.subtitle
                        .replace('{{party1}}', suggestion.firstParty.firstName)
                        .replace(
                          '{{party2}}',
                          suggestion.secondParty.firstName
                        )}
                    </p>
                  </div>
                </div>
                <div className="flex items-center gap-2">
                  <Badge
                    className={cn(
                      'text-sm font-bold shadow-md',
                      statusInfo.badgeColor
                    )}
                  >
                    <statusInfo.icon className="w-4 h-4 ml-2" />
                    {statusLabel}
                  </Badge>
                  <TooltipProvider>
                    <Tooltip>
                      <TooltipTrigger asChild>
                        <Button
                          variant="ghost"
                          size="icon"
                          onClick={() => setIsFullscreen(!isFullscreen)}
                          className="rounded-full h-10 w-10 text-gray-500 hover:text-gray-700 hover:bg-white/50 backdrop-blur-sm"
                        >
                          {isFullscreen ? (
                            <Minimize className="w-5 h-5" />
                          ) : (
                            <Maximize className="w-5 h-5" />
                          )}
                        </Button>
                      </TooltipTrigger>
                      <TooltipContent>
                        <p>
                          {isFullscreen
                            ? dict.header.minimizeTooltip
                            : dict.header.fullscreenTooltip}
                        </p>
                      </TooltipContent>
                    </Tooltip>
                  </TooltipProvider>
                  <Button
                    variant="ghost"
                    size="icon"
                    onClick={onClose}
                    className="rounded-full h-10 w-10 text-gray-500 hover:text-gray-700 hover:bg-white/50 backdrop-blur-sm"
                  >
                    <CloseIcon className="w-5 h-5" />
                  </Button>
                </div>
              </div>
              <TabsList className="grid w-full grid-cols-3 sm:grid-cols-6 bg-white/60 backdrop-blur-sm rounded-2xl p-1.5 h-auto shadow-lg border border-white/50">
                {Object.entries(dict.tabs).map(([key, label]) => {
                  const IconComponent =
                    {
                      overview: Eye,
                      party1: User,
                      party2: User,
                      timeline: Calendar,
                      communication: MessageCircle,
                      actions: Settings,
                    }[key] || Eye;
                  return (
                    <TabsTrigger
                      key={key}
                      value={key}
                      onClick={() => setActiveTab(key)}
                      className={cn(
                        'flex flex-col items-center justify-center gap-1 rounded-xl text-xs font-bold transition-all duration-300 py-2 hover:scale-105 relative overflow-hidden group',
                        activeTab === key
                          ? 'bg-white text-primary shadow-md'
                          : 'text-gray-600 hover:bg-white/50'
                      )}
                    >
                      <IconComponent className="w-5 h-5 relative z-10" />
                      <span className="relative z-10 hidden sm:inline">
                        {label}
                      </span>
                    </TabsTrigger>
                  );
                })}
              </TabsList>
            </div>
          </div>

          <div className="flex-1 overflow-y-auto bg-slate-50">
            <TabsContent value="overview" className="m-0 h-full">
              {/* OverviewTabContent Component would be here, but we'll inline it */}
            </TabsContent>
            <TabsContent value="firstParty" className="m-0 h-full">
              <div className="p-6">
                <ProfileCard
                  profile={suggestion.firstParty.profile}
                  images={suggestion.firstParty.images}
                  questionnaire={firstPartyQuestionnaire}
                  viewMode="matchmaker"
                  isProfileComplete={suggestion.firstParty.isProfileComplete}
                  dict={profileDict.profileCard}
                />
              </div>
            </TabsContent>
            <TabsContent value="secondParty" className="m-0 h-full">
              <div className="p-6">
                <ProfileCard
                  profile={suggestion.secondParty.profile}
                  images={suggestion.secondParty.images}
                  questionnaire={secondPartyQuestionnaire}
                  viewMode="matchmaker"
                  isProfileComplete={suggestion.secondParty.isProfileComplete}
                  dict={profileDict.profileCard}
                />
              </div>
            </TabsContent>
            <TabsContent value="timeline" className="m-0 h-full">
              <div className="p-6">
                <div className="bg-white rounded-2xl shadow-xl border-0 p-6">
                  <h3 className="text-2xl font-bold mb-6 flex items-center gap-3">
                    <div className="p-3 rounded-full bg-gradient-to-r from-orange-500 to-amber-500 text-white shadow-lg">
                      <Calendar className="w-6 h-6" />
                    </div>
                    {dict.timeline.title}
                  </h3>
                  <Timeline
                    items={(suggestion?.statusHistory || []).map((history) => {
                      const historyStatusInfo = getEnhancedStatusInfo(
                        history.status as MatchSuggestionStatus
                      );
                      return {
                        title:
                          dict.statusLabels[history.status] || history.status,
                        description: history.notes || dict.timeline.noNotes,
                        date:
                          typeof history.createdAt === 'string'
                            ? new Date(history.createdAt)
                            : history.createdAt,
                        icon: historyStatusInfo.icon,
                      };
                    })}
                  />
                </div>
              </div>
            </TabsContent>
            <TabsContent value="communication" className="m-0 h-full">
              <div className="p-6">
                <div className="bg-white rounded-2xl shadow-xl border-0 p-6">
                  <h3 className="text-2xl font-bold mb-6 flex items-center gap-3">
                    <div className="p-3 rounded-full bg-gradient-to-r from-pink-500 to-rose-500 text-white shadow-lg">
                      <MessageCircle className="w-6 h-6" />
                    </div>
                    {dict.communication.title}
                  </h3>
                  <InquiryThreadView
                    suggestionId={suggestion.id}
                    userId={userId}
                    showComposer={true}
                    dict={suggestionsDict.inquiryThread}
                  />
                </div>
              </div>
            </TabsContent>
            <TabsContent value="actions" className="m-0 h-full">
              <div className="p-6">
                <h3 className="text-2xl font-bold mb-6 flex items-center gap-3">
                  <div className="p-3 rounded-full bg-gradient-to-r from-gray-500 to-slate-500 text-white shadow-lg">
                    <Settings className="w-6 h-6" />
                  </div>
                  {dict.actions.title}
                </h3>
                <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                  <div className="bg-white rounded-2xl shadow-xl border-0 p-6 hover:shadow-2xl transition-all duration-300">
                    <div className="p-3 rounded-full bg-gradient-to-r from-blue-500 to-cyan-500 text-white shadow-lg w-fit mb-4">
                      <RefreshCw className="w-6 h-6" />
                    </div>
                    <h4 className="text-lg font-bold mb-3">
                      {dict.actions.statusChange.title}
                    </h4>
                    <p className="text-sm text-gray-600 mb-4">
                      {dict.actions.statusChange.description}
                    </p>
                    <Button
                      className="w-full bg-gradient-to-r from-blue-600 to-cyan-600 hover:from-blue-700 hover:to-cyan-700 shadow-lg"
                      onClick={() => setShowStatusChange(true)}
                    >
                      <RefreshCw className="w-4 h-4 ml-2" />
                      {dict.actions.statusChange.button}
                    </Button>
                  </div>
                  <div className="bg-white rounded-2xl shadow-xl border-0 p-6 hover:shadow-2xl transition-all duration-300">
                    <div className="p-3 rounded-full bg-gradient-to-r from-amber-500 to-orange-500 text-white shadow-lg w-fit mb-4">
                      <Edit className="w-6 h-6" />
                    </div>
                    <h4 className="text-lg font-bold mb-3">
                      {dict.actions.edit.title}
                    </h4>
                    <p className="text-sm text-gray-600 mb-4">
                      {dict.actions.edit.description}
                    </p>
                    <Button
                      variant="outline"
                      className="w-full border-2 border-amber-200 text-amber-700 hover:bg-amber-50"
                      onClick={() => onAction('edit', { suggestion })}
                    >
                      <Edit className="w-4 h-4 ml-2" />
                      {dict.actions.edit.button}
                    </Button>
                  </div>
                  <div className="bg-white rounded-2xl shadow-xl border-0 p-6 hover:shadow-2xl transition-all duration-300">
                    <div className="p-3 rounded-full bg-gradient-to-r from-red-500 to-pink-500 text-white shadow-lg w-fit mb-4">
                      <Trash2 className="w-6 h-6" />
                    </div>
                    <h4 className="text-lg font-bold mb-3">
                      {dict.actions.delete.title}
                    </h4>
                    <p className="text-sm text-gray-600 mb-4">
                      {dict.actions.delete.description}
                    </p>
                    <Button
                      variant="outline"
                      className="w-full border-2 border-red-200 text-red-700 hover:bg-red-50"
                      onClick={() =>
                        onAction('delete', { suggestionId: suggestion.id })
                      }
                    >
                      <Trash2 className="w-4 h-4 ml-2" />
                      {dict.actions.delete.button}
                    </Button>
                  </div>
                </div>
              </div>
            </TabsContent>
          </div>
        </Tabs>
        {showStatusChange && (
          <div
            className="fixed inset-0 bg-black/60 flex items-center justify-center z-[100]"
            dir="rtl"
          >
            <div className="bg-white p-6 rounded-2xl max-w-md w-full shadow-2xl m-4">
              <h3 className="text-xl font-bold mb-4 flex items-center">
                <RefreshCw className="w-5 h-5 ml-2 text-blue-600" />
                {dict.statusChangeModal.title}
              </h3>
              <div className="space-y-4">
                <div>
                  <label className="block text-sm font-medium mb-1 text-gray-600">
                    {dict.statusChangeModal.currentStatusLabel}
                  </label>
                  <div className="flex items-center p-3 bg-gray-100 rounded-lg border">
                    <statusInfo.icon
                      className={`w-5 h-5 ml-3 ${statusInfo.color}`}
                    />
                    <span className="font-bold">{statusLabel}</span>
                  </div>
                </div>
                <div>
                  <label className="block text-sm font-medium mb-1 text-gray-600">
                    {dict.statusChangeModal.newStatusLabel}
                  </label>
                  <Select
                    value={newStatus || undefined}
                    onValueChange={(value) =>
                      setNewStatus(value as MatchSuggestionStatus)
                    }
                  >
                    <SelectTrigger className="w-full">
                      <SelectValue
                        placeholder={
                          dict.statusChangeModal.newStatusPlaceholder
                        }
                      />
                    </SelectTrigger>
                    <SelectContent className="max-h-60 overflow-y-auto">
                      {Object.entries(dict.statusLabels).map(
                        ([status, label]) => (
                          <SelectItem key={status} value={status}>
                            {label}
                          </SelectItem>
                        )
                      )}
                    </SelectContent>
                  </Select>
                </div>
                <div>
                  <label className="block text-sm font-medium mb-1 text-gray-600">
                    {dict.statusChangeModal.notesLabel}
                  </label>
                  <Textarea
                    value={statusChangeNote}
                    onChange={(e) => setStatusChangeNote(e.target.value)}
                    placeholder={dict.statusChangeModal.notesPlaceholder}
                    className="min-h-[100px] resize-none"
                  />
                </div>
                <div className="flex justify-end gap-3 pt-4 border-t">
                  <Button
                    variant="outline"
                    onClick={() => setShowStatusChange(false)}
                  >
                    {dict.statusChangeModal.cancelButton}
                  </Button>
                  <Button
                    onClick={handleStatusChange}
                    disabled={!newStatus || isLoading}
                    className="bg-blue-600 hover:bg-blue-700"
                  >
                    {isLoading ? (
                      <>
                        <RefreshCw className="w-4 h-4 ml-2 animate-spin" />{' '}
                        {dict.statusChangeModal.savingButton}
                      </>
                    ) : (
                      dict.statusChangeModal.saveButton
                    )}
                  </Button>
                </div>
              </div>
            </div>
          </div>
        )}
      </DialogContent>
    </Dialog>
  );
};

export default SuggestionDetailsDialog;
--- End of Content for SuggestionDetailsDialog.tsx ---

================================================================================
Directory: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\suggestions\hooks
================================================================================

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\suggestions\hooks\useMatchmaking.ts
--------------------------------------------------------------------------------
Content:
// /hooks/useMatchmaking.ts
import { useState, useEffect, useMemo, useCallback } from 'react';
import { AvailabilityStatus } from '@prisma/client';
import { calculateMatchScore, MatchScore } from '../utils/matchingAlgorithm';
import { MATCH_THRESHOLDS } from '../../new/constants/matchingCriteria';
import type { User } from '@/types/next-auth';
// Define types and interfaces
interface UseMatchmakingProps {
  candidates?: User[];
  onMatchFound?: (match: PotentialMatch) => void;
  onMatchScoreUpdate?: (scores: MatchScoreMap) => void;
}

export interface PotentialMatch {
  candidateA: User;
  candidateB: User;
  score: MatchScore;
  matchDate?: Date;
  status: 'new' | 'suggested' | 'rejected';
  lastUpdated: Date;
}

type MatchScoreMap = Map<string, Map<string, MatchScore>>;

interface MatchSuggestion {
  candidate: User;
  score: MatchScore;
  matchDate: Date;
}

export const useMatchmaking = ({
  candidates = [],
  onMatchScoreUpdate
}: UseMatchmakingProps = {}) => {
  // State declarations
  const [matchScores, setMatchScores] = useState<MatchScoreMap>(new Map());
  const [suggestedMatches, setSuggestedMatches] = useState<PotentialMatch[]>([]);
  const [isCalculating, setIsCalculating] = useState(false);
  const [lastCalculation, setLastCalculation] = useState<Date | null>(null);

  // Calculate all possible matches
  const calculateAllMatches = useCallback(() => {
    setIsCalculating(true);
    const newScores = new Map<string, Map<string, MatchScore>>();
    const newMatches: PotentialMatch[] = [];

    candidates.forEach((candidateA, indexA) => {
      const candidateAScores = new Map<string, MatchScore>();
      newScores.set(candidateA.id, candidateAScores);

      candidates.slice(indexA + 1).forEach(candidateB => {
        // Check basic compatibility conditions
        if (
          candidateA.profile?.gender === candidateB.profile?.gender ||
          candidateA.profile?.availabilityStatus !== AvailabilityStatus.AVAILABLE ||
          candidateB.profile?.availabilityStatus !== AvailabilityStatus.AVAILABLE
        ) {
          return;
        }

        // Calculate match score
        const matchScore = calculateMatchScore(candidateA.profile, candidateB.profile);
        
        if (matchScore) {
          candidateAScores.set(candidateB.id, matchScore);

          // Add to potential matches if score is good enough
          if (matchScore.score >= MATCH_THRESHOLDS.GOOD) {
            newMatches.push({
              candidateA,
              candidateB,
              score: matchScore,
              matchDate: new Date(),
              status: 'new',
              lastUpdated: new Date()
            });
          }
        }
      });
    });

    setMatchScores(newScores);
    setSuggestedMatches(prev => {
      const existing = new Set(prev.map(m => 
        `${m.candidateA.id}-${m.candidateB.id}`
      ));
      
      return [
        ...prev,
        ...newMatches.filter(m => 
          !existing.has(`${m.candidateA.id}-${m.candidateB.id}`)
        )
      ].sort((a, b) => b.score.score - a.score.score);
    });

    onMatchScoreUpdate?.(newScores);
    setIsCalculating(false);
    setLastCalculation(new Date());
  }, [candidates, onMatchScoreUpdate]);

  // Recalculate matches when candidates list changes
  useEffect(() => {
    if (candidates.length > 0 && !isCalculating) {
      calculateAllMatches();
    }
  }, [candidates, calculateAllMatches, isCalculating]);

  // Get best matches for a specific candidate
  const getBestMatchesForCandidate = useCallback((
    candidateId: string,
    limit: number = 5
  ): MatchSuggestion[] => {
    const candidate = candidates.find(c => c.id === candidateId);
    if (!candidate) return [];

    const matches: MatchSuggestion[] = [];
    const candidateScores = matchScores.get(candidateId);

    if (candidateScores) {
      candidateScores.forEach((score, otherId) => {
        const otherCandidate = candidates.find(c => c.id === otherId);
        if (otherCandidate && score.score >= MATCH_THRESHOLDS.FAIR) {
          matches.push({
            candidate: otherCandidate,
            score,
            matchDate: new Date()
          });
        }
      });
    }

    return matches
      .sort((a, b) => b.score.score - a.score.score)
      .slice(0, limit);
  }, [candidates, matchScores]);

  // Analyze matches by categories
  const matchAnalytics = useMemo(() => {
    const analytics = {
      total: suggestedMatches.length,
      byCategory: {
        excellent: 0,
        good: 0,
        fair: 0,
        poor: 0
      },
      averageScore: 0,
      recentMatches: [] as PotentialMatch[]
    };

    suggestedMatches.forEach(match => {
      if (match.score.score >= MATCH_THRESHOLDS.EXCELLENT) {
        analytics.byCategory.excellent++;
      } else if (match.score.score >= MATCH_THRESHOLDS.GOOD) {
        analytics.byCategory.good++;
      } else if (match.score.score >= MATCH_THRESHOLDS.FAIR) {
        analytics.byCategory.fair++;
      } else {
        analytics.byCategory.poor++;
      }
    });

    analytics.averageScore = suggestedMatches.reduce(
      (sum, match) => sum + match.score.score,
      0
    ) / (suggestedMatches.length || 1);

    // Get recent matches (last week)
    const oneWeekAgo = new Date();
    oneWeekAgo.setDate(oneWeekAgo.getDate() - 7);
    
    analytics.recentMatches = suggestedMatches
      .filter(match => match.matchDate && match.matchDate >= oneWeekAgo)
      .sort((a, b) => 
        (b.matchDate?.getTime() || 0) - (a.matchDate?.getTime() || 0)
      );

    return analytics;
  }, [suggestedMatches]);

  // Update match status
  const updateMatchStatus = useCallback((
    candidateAId: string,
    candidateBId: string,
    status: 'suggested' | 'rejected'
  ) => {
    setSuggestedMatches(prev => prev.map(match => {
      if (
        (match.candidateA.id === candidateAId && match.candidateB.id === candidateBId) ||
        (match.candidateA.id === candidateBId && match.candidateB.id === candidateAId)
      ) {
        return {
          ...match,
          status,
          lastUpdated: new Date()
        };
      }
      return match;
    }));
  }, []);

  // Return hook interface
  return {
    matchScores,
    suggestedMatches,
    isCalculating,
    lastCalculation,
    matchAnalytics,
    getBestMatchesForCandidate,
    calculateAllMatches,
    updateMatchStatus
  };
};

export default useMatchmaking;
--- End of Content for useMatchmaking.ts ---

================================================================================
Directory: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\suggestions\list
================================================================================

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\suggestions\list\ManagerSuggestionsList.tsx
--------------------------------------------------------------------------------
Content:
// src/components/matchmaker/suggestions/list/ManagerSuggestionsList.tsx

import React, { useMemo, useState } from 'react';
import { Card } from '@/components/ui/card';
import { ScrollArea } from '@/components/ui/scroll-area';
import { Users } from 'lucide-react';
import type {
  Suggestion,
  SuggestionFilters,
  ActionAdditionalData,
} from '@/types/suggestions';
import { toast } from 'sonner';
import SuggestionCard from '../cards/SuggestionCard';
import type { MatchmakerPageDictionary } from '@/types/dictionary';

type SuggestionActionType =
  | 'view'
  | 'contact'
  | 'message'
  | 'edit'
  | 'delete'
  | 'resend'
  | 'changeStatus'
  | 'reminder';

interface ManagerSuggestionsListProps {
  suggestions: Suggestion[];
  filters: SuggestionFilters;
  searchQuery: string;
  type: 'active' | 'pending' | 'history';
  onAction: (
    actionType: SuggestionActionType,
    data: { suggestion: Suggestion } & ActionAdditionalData
  ) => void;
  dict: MatchmakerPageDictionary['suggestionsDashboard'];
}

const ManagerSuggestionsList: React.FC<ManagerSuggestionsListProps> = ({
  suggestions,
  filters,
  searchQuery,
  type,
  onAction,
  dict,
}) => {
  const listDict = dict.managerSuggestionsList;

  const filteredSuggestions = useMemo(() => {
    return suggestions.filter((suggestion) => {
      // Base status filter
      if (
        type === 'active' &&
        [
          'CLOSED',
          'CANCELLED',
          'EXPIRED',
          'FIRST_PARTY_DECLINED',
          'SECOND_PARTY_DECLINED',
        ].includes(suggestion.status)
      ) {
        return false;
      }
      if (type === 'pending' && !suggestion.status.includes('PENDING')) {
        return false;
      }
      if (
        type === 'history' &&
        ![
          'CLOSED',
          'CANCELLED',
          'EXPIRED',
          'FIRST_PARTY_DECLINED',
          'SECOND_PARTY_DECLINED',
          'MARRIED',
          'ENGAGED',
        ].includes(suggestion.status)
      ) {
        return false;
      }

      // Search query
      if (searchQuery && suggestion.firstParty && suggestion.secondParty) {
        const searchTerm = searchQuery.toLowerCase();
        const searchableText =
          `${suggestion.firstParty.firstName} ${suggestion.firstParty.lastName} ${suggestion.secondParty.firstName} ${suggestion.secondParty.lastName} ${suggestion.matchingReason || ''}`.toLowerCase();
        if (!searchableText.includes(searchTerm)) return false;
      }

      // Priority filter
      if (
        filters.priority?.length &&
        !filters.priority.includes(suggestion.priority)
      ) {
        return false;
      }

      // Date range filter
      if (filters.dateRange) {
        const createdAt = new Date(suggestion.createdAt);
        if (
          createdAt < filters.dateRange.start ||
          (filters.dateRange.end && createdAt > filters.dateRange.end)
        ) {
          return false;
        }
      }

      return true;
    });
  }, [suggestions, filters, searchQuery, type]);

  if (filteredSuggestions.length === 0) {
    return (
      <div className="flex flex-col items-center justify-center h-64 text-gray-400 text-center">
        <Users className="w-12 h-12 mb-4" />
        <h3 className="text-lg font-semibold text-gray-600">
          {listDict.emptyState.title}
        </h3>
        <p>{listDict.emptyState.description}</p>
      </div>
    );
  }

  return (
    <ScrollArea className="h-[600px] rounded-md border p-4">
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
        {filteredSuggestions.map((suggestion) => {
          if (!suggestion.firstParty || !suggestion.secondParty) {
            return null; // Safety check for corrupted data
          }
          return (
            <SuggestionCard
              key={suggestion.id}
              suggestion={suggestion}
              onAction={(type, suggestionData, additionalData) =>
                onAction(type, {
                  suggestion: suggestionData,
                  ...additionalData,
                })
              }
              dict={dict.suggestionCard}
            />
          );
        })}
      </div>
    </ScrollArea>
  );
};

export default ManagerSuggestionsList;
--- End of Content for ManagerSuggestionsList.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\suggestions\list\SuggestionsList.tsx
--------------------------------------------------------------------------------
Content:
// src/components/matchmaker/suggestions/list/SuggestionsList.tsx

import React, { useState, useMemo } from 'react';
import { Input } from '@/components/ui/input';
import { Card, CardContent } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select';
import { Button } from '@/components/ui/button';
import {
  Search,
  Filter,
  SortDesc,
  LayoutGrid,
  List,
  Users,
  Clock,
  CheckCircle,
  XCircle,
  Heart,
  Star,
  TrendingUp,
  Activity,
  BarChart3,
  Eye,
  Sparkles,
  Target,
  Flame,
  Shield,
  Award,
  Crown,
  Zap,
  RefreshCw,
  Calendar,
  MapPin,
} from 'lucide-react';
import type { MatchSuggestion } from '@prisma/client';
import type { UserProfile, UserImage } from '@/types/next-auth';
import SuggestionCard from '../cards/SuggestionCard';
import { LoadingContainer } from '../../new/shared/LoadingStates';
import type {
  Suggestion,
  ActionAdditionalData,
  SuggestionStatusHistory,
} from '@/types/suggestions';
import { cn } from '@/lib/utils';
import { ToggleGroup, ToggleGroupItem } from '@/components/ui/toggle-group';
import type { MatchmakerPageDictionary } from '@/types/dictionary';

// Define outside the component to avoid re-creation
const STATIC_SORT_OPTIONS = [
  { value: 'latest', icon: TrendingUp },
  { value: 'oldest', icon: Calendar },
  { value: 'deadline', icon: Clock },
  { value: 'priority', icon: Flame },
];

const STATIC_STATUS_OPTIONS = [
  {
    value: 'PENDING_FIRST_PARTY',
    color: 'from-yellow-500 to-amber-500',
    icon: Clock,
  },
  {
    value: 'PENDING_SECOND_PARTY',
    color: 'from-blue-500 to-cyan-500',
    icon: Clock,
  },
  {
    value: 'FIRST_PARTY_APPROVED',
    color: 'from-green-500 to-emerald-500',
    icon: CheckCircle,
  },
  {
    value: 'SECOND_PARTY_APPROVED',
    color: 'from-green-500 to-emerald-500',
    icon: CheckCircle,
  },
  {
    value: 'CONTACT_DETAILS_SHARED',
    color: 'from-purple-500 to-pink-500',
    icon: Heart,
  },
  { value: 'DATING', color: 'from-pink-500 to-rose-500', icon: Heart },
];

interface PartyInfo {
  id: string;
  firstName: string;
  lastName: string;
  profile: UserProfile;
  images: UserImage[];
}

interface ExtendedMatchSuggestion extends MatchSuggestion {
  firstParty: PartyInfo;
  secondParty: PartyInfo;
  statusHistory: SuggestionStatusHistory[];
}

interface SuggestionsListProps {
  suggestions: ExtendedMatchSuggestion[];
  isLoading?: boolean;
  onAction: (
    type:
      | 'view'
      | 'contact'
      | 'message'
      | 'edit'
      | 'delete'
      | 'resend'
      | 'changeStatus'
      | 'reminder',
    suggestion: Suggestion,
    additionalData?: ActionAdditionalData
  ) => void;
  className?: string;
  dict: MatchmakerPageDictionary['suggestionsDashboard'];
}

const EnhancedListStats: React.FC<{
  dict: MatchmakerPageDictionary['suggestionsDashboard']['suggestionsList']['stats'];
  total: number;
  pending: number;
  approved: number;
  declined: number;
  urgent: number;
}> = ({ dict, total, pending, approved, declined, urgent }) => (
  <Card className="border-0 shadow-xl bg-gradient-to-r from-white via-purple-50/30 to-pink-50/30 mb-6">
    <CardContent className="p-4">
      <div className="grid grid-cols-2 md:grid-cols-5 gap-4">
        <div className="text-center group">
          <div className="flex items-center justify-center gap-2 mb-1">
            <div className="p-2 rounded-full bg-gradient-to-r from-blue-500 to-cyan-500 text-white shadow-lg group-hover:scale-110 transition-transform">
              <Users className="w-4 h-4" />
            </div>
            <span className="text-2xl font-bold text-blue-600">{total}</span>
          </div>
          <p className="text-xs text-gray-600 font-medium">{dict.total}</p>
        </div>
        <div className="text-center group">
          <div className="flex items-center justify-center gap-2 mb-1">
            <div className="p-2 rounded-full bg-gradient-to-r from-yellow-500 to-amber-500 text-white shadow-lg group-hover:scale-110 transition-transform">
              <Clock className="w-4 h-4" />
            </div>
            <span className="text-2xl font-bold text-yellow-600">
              {pending}
            </span>
          </div>
          <p className="text-xs text-gray-600 font-medium">{dict.pending}</p>
        </div>
        <div className="text-center group">
          <div className="flex items-center justify-center gap-2 mb-1">
            <div className="p-2 rounded-full bg-gradient-to-r from-green-500 to-emerald-500 text-white shadow-lg group-hover:scale-110 transition-transform">
              <CheckCircle className="w-4 h-4" />
            </div>
            <span className="text-2xl font-bold text-green-600">
              {approved}
            </span>
          </div>
          <p className="text-xs text-gray-600 font-medium">{dict.approved}</p>
        </div>
        <div className="text-center group">
          <div className="flex items-center justify-center gap-2 mb-1">
            <div className="p-2 rounded-full bg-gradient-to-r from-red-500 to-pink-500 text-white shadow-lg group-hover:scale-110 transition-transform">
              <XCircle className="w-4 h-4" />
            </div>
            <span className="text-2xl font-bold text-red-600">{declined}</span>
          </div>
          <p className="text-xs text-gray-600 font-medium">{dict.declined}</p>
        </div>
        <div className="text-center group">
          <div className="flex items-center justify-center gap-2 mb-1">
            <div className="p-2 rounded-full bg-gradient-to-r from-orange-500 to-red-500 text-white shadow-lg group-hover:scale-110 transition-transform animate-pulse">
              <Flame className="w-4 h-4" />
            </div>
            <span className="text-2xl font-bold text-orange-600">{urgent}</span>
          </div>
          <p className="text-xs text-gray-600 font-medium">{dict.urgent}</p>
        </div>
      </div>
    </CardContent>
  </Card>
);

const EnhancedFilterSection: React.FC<{
  dict: MatchmakerPageDictionary['suggestionsDashboard']['suggestionsList']['filters'];
  searchQuery: string;
  onSearchChange: (query: string) => void;
  sortBy: string;
  onSortChange: (sort: string) => void;
  statusFilter: string[];
  onStatusFilterChange: (status: string[]) => void;
  showFilters: boolean;
  onToggleFilters: () => void;
  viewMode: 'grid' | 'list';
  onViewModeChange: (mode: 'grid' | 'list') => void;
}> = ({
  dict,
  searchQuery,
  onSearchChange,
  sortBy,
  onSortChange,
  statusFilter,
  onStatusFilterChange,
  showFilters,
  onToggleFilters,
  viewMode,
  onViewModeChange,
}) => (
  <Card className="border-0 shadow-xl bg-gradient-to-r from-white via-cyan-50/30 to-blue-50/30 mb-6">
    <CardContent className="p-6 space-y-4">
      <div className="flex flex-col md:flex-row gap-4">
        <div className="relative flex-1">
          <Search className="absolute right-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400" />
          <Input
            placeholder={dict.searchPlaceholder}
            value={searchQuery}
            onChange={(e) => onSearchChange(e.target.value)}
            className="pr-12 text-right bg-white/80 backdrop-blur-sm border-cyan-200 focus:border-cyan-400 focus:ring-cyan-200 rounded-xl h-12 shadow-sm"
          />
        </div>
        <Select value={sortBy} onValueChange={onSortChange}>
          <SelectTrigger className="w-48 h-12 bg-white/80 backdrop-blur-sm border-cyan-200 focus:border-cyan-400 rounded-xl shadow-sm">
            <SortDesc className="w-4 h-4 ml-2" />
            <SelectValue placeholder={dict.sortPlaceholder} />
          </SelectTrigger>
          <SelectContent>
            {STATIC_SORT_OPTIONS.map((option) => {
              const IconComponent = option.icon;
              return (
                <SelectItem key={option.value} value={option.value}>
                  <div className="flex items-center gap-2">
                    <IconComponent className="w-4 h-4" />
                    {
                      dict.sortOptions[
                        option.value as keyof typeof dict.sortOptions
                      ]
                    }
                  </div>
                </SelectItem>
              );
            })}
          </SelectContent>
        </Select>
        <Button
          variant="outline"
          onClick={onToggleFilters}
          className={cn(
            'h-12 border-cyan-200 hover:bg-cyan-50 text-cyan-600 rounded-xl bg-white/80 backdrop-blur-sm shadow-sm',
            showFilters && 'bg-cyan-100 border-cyan-300'
          )}
        >
          <Filter className="w-4 h-4 ml-2" />
          {dict.filterButton}
        </Button>
        <ToggleGroup
          type="single"
          value={viewMode}
          onValueChange={(value: 'grid' | 'list') =>
            value && onViewModeChange(value)
          }
          className="bg-white/80 backdrop-blur-sm shadow-sm rounded-xl border border-cyan-200"
        >
          <ToggleGroupItem
            value="grid"
            aria-label={dict.viewModes.grid}
            className="data-[state=on]:bg-cyan-500 data-[state=on]:text-white"
          >
            <LayoutGrid className="h-4 w-4" />
          </ToggleGroupItem>
          <ToggleGroupItem
            value="list"
            aria-label={dict.viewModes.list}
            className="data-[state=on]:bg-cyan-500 data-[state=on]:text-white"
          >
            <List className="h-4 w-4" />
          </ToggleGroupItem>
        </ToggleGroup>
      </div>
      {showFilters && (
        <div className="pt-4 border-t border-cyan-100 space-y-4">
          <div>
            <h4 className="text-sm font-bold text-gray-700 mb-3 flex items-center gap-2">
              <Activity className="w-4 h-4 text-cyan-500" />
              {dict.advancedFilterTitle}
            </h4>
            <div className="flex flex-wrap gap-2">
              {STATIC_STATUS_OPTIONS.map((status) => {
                const IconComponent = status.icon;
                return (
                  <Button
                    key={status.value}
                    variant={
                      statusFilter.includes(status.value)
                        ? 'default'
                        : 'outline'
                    }
                    size="sm"
                    onClick={() => {
                      const newFilter = statusFilter.includes(status.value)
                        ? statusFilter.filter((s) => s !== status.value)
                        : [...statusFilter, status.value];
                      onStatusFilterChange(newFilter);
                    }}
                    className={cn(
                      'text-xs rounded-xl transition-all duration-300',
                      statusFilter.includes(status.value)
                        ? `bg-gradient-to-r ${status.color} text-white shadow-lg border-0`
                        : 'border-gray-200 hover:bg-gray-50'
                    )}
                  >
                    <IconComponent className="w-3 h-3 ml-1" />
                    {
                      dict.statusOptions[
                        status.value as keyof typeof dict.statusOptions
                      ]
                    }
                  </Button>
                );
              })}
            </div>
          </div>
          <div className="flex justify-end">
            <Button
              variant="ghost"
              size="sm"
              onClick={() => onStatusFilterChange([])}
              className="text-gray-500 hover:text-gray-700"
            >
              <RefreshCw className="w-3 h-3 ml-1" />
              {dict.clearFiltersButton}
            </Button>
          </div>
        </div>
      )}
    </CardContent>
  </Card>
);

const EnhancedEmptyState: React.FC<{
  dict: MatchmakerPageDictionary['suggestionsDashboard']['suggestionsList']['emptyState'];
  isFiltered: boolean;
  onClearFilters: () => void;
}> = ({ dict, isFiltered, onClearFilters }) => (
  <div className="flex flex-col items-center justify-center min-h-[500px] text-center p-12">
    <div className="w-32 h-32 rounded-full bg-gradient-to-br from-purple-100 via-pink-100 to-blue-100 flex items-center justify-center shadow-xl mb-8">
      {isFiltered ? (
        <Search className="w-16 h-16 text-purple-400" />
      ) : (
        <Users className="w-16 h-16 text-purple-400" />
      )}
    </div>
    <h3 className="text-2xl font-bold text-gray-800 mb-4">
      {isFiltered ? dict.filtered.title : dict.default.title}
    </h3>
    <p className="text-gray-600 max-w-md mx-auto mb-6 leading-relaxed">
      {isFiltered ? dict.filtered.description : dict.default.description}
    </p>
    {isFiltered && (
      <Button
        onClick={onClearFilters}
        className="bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-700 hover:to-pink-700 text-white shadow-xl hover:shadow-2xl transition-all duration-300 rounded-xl"
      >
        <RefreshCw className="w-4 h-4 ml-2" />
        {dict.clearButton}
      </Button>
    )}
  </div>
);

const SuggestionsList: React.FC<SuggestionsListProps> = ({
  suggestions,
  isLoading = false,
  onAction,
  className,
  dict: dashboardDict,
}) => {
  const dict = dashboardDict.suggestionsList;
  const [searchQuery, setSearchQuery] = useState('');
  const [sortBy, setSortBy] = useState('latest');
  const [statusFilter, setStatusFilter] = useState<string[]>([]);
  const [showFilters, setShowFilters] = useState(false);
  const [viewMode, setViewMode] = useState<'grid' | 'list'>('grid');

  const stats = useMemo(() => {
    const total = suggestions.length;
    const pending = suggestions.filter((s) =>
      s.status.includes('PENDING')
    ).length;
    const approved = suggestions.filter((s) =>
      s.status.includes('APPROVED')
    ).length;
    const declined = suggestions.filter((s) =>
      s.status.includes('DECLINED')
    ).length;
    const urgent = suggestions.filter((s) => s.priority === 'URGENT').length;
    return { total, pending, approved, declined, urgent };
  }, [suggestions]);

  const filteredSuggestions = useMemo(() => {
    let result = [...suggestions];

    if (statusFilter.length > 0) {
      result = result.filter((s) => statusFilter.includes(s.status));
    }

    if (searchQuery) {
      const query = searchQuery.toLowerCase();
      result = result.filter((s) => {
        const searchText =
          `${s.firstParty.firstName} ${s.firstParty.lastName} ${s.secondParty.firstName} ${s.secondParty.lastName} ${s.firstParty.profile?.city || ''} ${s.secondParty.profile?.city || ''}`.toLowerCase();
        return searchText.includes(query);
      });
    }

    switch (sortBy) {
      case 'latest':
        result.sort(
          (a, b) =>
            new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime()
        );
        break;
      case 'oldest':
        result.sort(
          (a, b) =>
            new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime()
        );
        break;
      case 'deadline':
        result.sort((a, b) => {
          if (!a.decisionDeadline) return 1;
          if (!b.decisionDeadline) return -1;
          return (
            new Date(a.decisionDeadline).getTime() -
            new Date(b.decisionDeadline).getTime()
          );
        });
        break;
      case 'priority':
        const priorityOrder = { URGENT: 0, HIGH: 1, MEDIUM: 2, LOW: 3 };
        result.sort(
          (a, b) =>
            (priorityOrder[a.priority as keyof typeof priorityOrder] || 4) -
            (priorityOrder[b.priority as keyof typeof priorityOrder] || 4)
        );
        break;
    }

    return result;
  }, [suggestions, searchQuery, sortBy, statusFilter]);

  const isFiltered = searchQuery !== '' || statusFilter.length > 0;
  const clearAllFilters = () => {
    setSearchQuery('');
    setStatusFilter([]);
  };

  const resultsLabel =
    filteredSuggestions.length === 1
      ? dict.results.itemLabel_one
      : dict.results.itemLabel_other;

  return (
    <div className={cn('space-y-6', className)}>
      <EnhancedListStats dict={dict.stats} {...stats} />
      <EnhancedFilterSection
        dict={dict.filters}
        searchQuery={searchQuery}
        onSearchChange={setSearchQuery}
        sortBy={sortBy}
        onSortChange={setSortBy}
        statusFilter={statusFilter}
        onStatusFilterChange={setStatusFilter}
        showFilters={showFilters}
        onToggleFilters={() => setShowFilters(!showFilters)}
        viewMode={viewMode}
        onViewModeChange={setViewMode}
      />
      <div className="flex justify-between items-center text-sm text-gray-600 px-2">
        <span className="font-medium">
          {dict.results.summary
            .replace('{{count}}', filteredSuggestions.length.toString())
            .replace('{{label}}', resultsLabel)
            .replace('{{total}}', suggestions.length.toString())}
        </span>
        {filteredSuggestions.length > 0 && (
          <div className="flex items-center gap-2">
            <Sparkles className="w-4 h-4 text-purple-500" />
            <span className="font-medium text-purple-600">
              {dict.results.qualityMatches}
            </span>
          </div>
        )}
      </div>
      {isLoading ? (
        <LoadingContainer>
          <div
            className={cn(
              viewMode === 'grid'
                ? 'grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6'
                : 'space-y-4'
            )}
          >
            {Array.from({ length: 6 }).map((_, i) => (
              <div
                key={i}
                className="h-80 bg-gradient-to-br from-gray-100 to-gray-200 rounded-2xl animate-pulse shadow-lg"
              />
            ))}
          </div>
        </LoadingContainer>
      ) : filteredSuggestions.length === 0 ? (
        <EnhancedEmptyState
          dict={dict.emptyState}
          isFiltered={isFiltered}
          onClearFilters={clearAllFilters}
        />
      ) : (
        <div
          className={cn(
            'animate-fade-in-up',
            viewMode === 'grid'
              ? 'grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6'
              : 'space-y-6'
          )}
        >
          {filteredSuggestions.map((suggestion, index) => (
            <div
              key={suggestion.id}
              className="animate-scale-in"
              style={{
                animationDelay: `${index * 100}ms`,
                animationFillMode: 'both',
              }}
            >
              <SuggestionCard
                suggestion={suggestion as unknown as Suggestion}
                onAction={onAction}
                dict={dashboardDict.suggestionCard}
                className="h-full"
              />
            </div>
          ))}
        </div>
      )}
      {isFiltered && (
        <Card className="border-0 shadow-lg bg-gradient-to-r from-purple-50 to-pink-50">
          <CardContent className="p-4">
            <div className="flex items-center justify-between">
              <div className="flex items-center gap-2 text-sm flex-wrap">
                <Filter className="w-4 h-4 text-purple-500" />
                <span className="font-medium text-purple-700">
                  {dict.activeFilters.title}
                </span>
                {searchQuery && (
                  <Badge className="bg-gradient-to-r from-blue-500 to-cyan-500 text-white border-0 shadow-sm">
                    {dict.activeFilters.searchLabel.replace(
                      '{{query}}',
                      searchQuery
                    )}
                  </Badge>
                )}
                {statusFilter.map((status) => {
                  const statusOption = STATIC_STATUS_OPTIONS.find(
                    (opt) => opt.value === status
                  );
                  if (!statusOption) return null;
                  const IconComponent = statusOption.icon;
                  return (
                    <Badge
                      key={status}
                      className={cn(
                        `bg-gradient-to-r ${statusOption.color} text-white border-0 shadow-sm`
                      )}
                    >
                      <IconComponent className="w-3 h-3 ml-1" />
                      {
                        dict.filters.statusOptions[
                          status as keyof typeof dict.filters.statusOptions
                        ]
                      }
                    </Badge>
                  );
                })}
              </div>
              <Button
                variant="ghost"
                size="sm"
                onClick={clearAllFilters}
                className="text-purple-600 hover:text-purple-700 hover:bg-purple-100 rounded-xl"
              >
                <RefreshCw className="w-3 h-3 ml-1" />
                {dict.activeFilters.clearAllButton}
              </Button>
            </div>
          </CardContent>
        </Card>
      )}
      {filteredSuggestions.length > 0 && (
        <Card className="border-0 shadow-lg bg-gradient-to-r from-emerald-50 to-green-50">
          <CardContent className="p-4">
            <div className="flex items-center justify-between">
              <div className="flex items-center gap-3">
                <div className="p-2 rounded-full bg-gradient-to-r from-emerald-500 to-green-500 text-white shadow-lg">
                  <BarChart3 className="w-4 h-4" />
                </div>
                <div>
                  <h4 className="font-bold text-emerald-800">
                    {dict.performance.title}
                  </h4>
                  <p className="text-sm text-emerald-600">
                    {dict.performance.description
                      .replace(
                        '{{rate}}',
                        Math.round(
                          (stats.approved / Math.max(stats.total, 1)) * 100
                        ).toString()
                      )
                      .replace('{{urgentCount}}', stats.urgent.toString())
                      .replace('{{pendingCount}}', stats.pending.toString())}
                  </p>
                </div>
              </div>
              <div className="flex items-center gap-2">
                <div className="text-right text-xs text-emerald-600">
                  <div className="font-bold">
                    {Math.round(
                      (stats.approved / Math.max(stats.total, 1)) * 100
                    )}
                    %
                  </div>
                  <div>{dict.performance.successLabel}</div>
                </div>
                <div className="w-16 h-2 bg-emerald-200 rounded-full overflow-hidden">
                  <div
                    className="h-full bg-gradient-to-r from-emerald-500 to-green-500 transition-all duration-500"
                    style={{
                      width: `${Math.round((stats.approved / Math.max(stats.total, 1)) * 100)}%`,
                    }}
                  />
                </div>
              </div>
            </div>
          </CardContent>
        </Card>
      )}
    </div>
  );
};

export default SuggestionsList;
--- End of Content for SuggestionsList.tsx ---

================================================================================
Directory: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\suggestions\services
================================================================================

(This directory contains subdirectories but no files directly. See subdirectories below.)

================================================================================
Directory: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\suggestions\services\notification
================================================================================

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\suggestions\services\notification\NotificationService.ts
--------------------------------------------------------------------------------
Content:
// src/app/components/matchmaker/suggestions/services/notification/NotificationService.ts

import { MatchSuggestionStatus } from '@prisma/client';
import { SuggestionWithParties } from '../suggestions/StatusTransitionService';

export type RecipientInfo = {
  email: string;
  phone?: string; // Phone number with international prefix, e.g.: +972501234567
  name: string;
};

export type NotificationContent = {
  subject: string;
  body: string;
  htmlBody?: string; // HTML version for email
};

export type NotificationChannel = 'email' | 'whatsapp' | 'sms';

export type NotificationOptions = {
  channels: NotificationChannel[];
  notifyParties?: ('first' | 'second' | 'matchmaker')[];
  priority?: 'high' | 'normal' | 'low';
  attachments?: Array<{
    filename: string;
    content: Buffer | string;
    contentType: string;
  }>;
  customMessage?: string;
  metadata?: Record<string, unknown>;
};

export interface NotificationAdapter {
  canSendTo(recipient: RecipientInfo): boolean;
  send(recipient: RecipientInfo, content: NotificationContent): Promise<boolean>;
  getChannelType(): NotificationChannel;
}

export class NotificationService {
  private static instance: NotificationService;
  private adapters: Map<NotificationChannel, NotificationAdapter> = new Map();

  private constructor() {}

  public static getInstance(): NotificationService {
    if (!NotificationService.instance) {
      NotificationService.instance = new NotificationService();
    }
    return NotificationService.instance;
  }

  public registerAdapter(adapter: NotificationAdapter): void {
    this.adapters.set(adapter.getChannelType(), adapter);
    console.log(`Registered ${adapter.getChannelType()} adapter`);
  }

  public async sendNotification(
    recipient: RecipientInfo,
    content: NotificationContent,
    options: NotificationOptions
  ): Promise<Record<NotificationChannel, boolean>> {
    const results: Record<NotificationChannel, boolean> = {} as Record<NotificationChannel, boolean>;
    console.log(`Attempting to send notification to ${recipient.name} via channels:`, options.channels);

    for (const channel of options.channels) {
      const adapter = this.adapters.get(channel);
      if (!adapter) {
        console.warn(`No adapter registered for channel: ${channel}`);
        results[channel] = false;
        continue;
      }

      if (!adapter.canSendTo(recipient)) {
        console.warn(`Cannot send to recipient via ${channel}: missing required info`);
        results[channel] = false;
        continue;
      }

      try {
        console.log(`Sending ${channel} notification to ${recipient.name}`);
        results[channel] = await adapter.send(recipient, content);
        console.log(`${channel} notification sent successfully: ${results[channel]}`);
      } catch (error) {
        console.error(`Error sending notification via ${channel}:`, error);
        results[channel] = false;
      }
    }

    return results;
  }

  // Dedicated method for handling suggestion-related notifications
  public async handleSuggestionStatusChange(
    suggestion: SuggestionWithParties,
    options: Partial<NotificationOptions> = {}
  ): Promise<void> {
    console.log(`Processing notifications for suggestion ${suggestion.id} with status ${suggestion.status}`);
    
    const templateContent = this.getSuggestionTemplate(suggestion, options.customMessage);
    if (!templateContent) {
      console.log(`No template found for status ${suggestion.status} - skipping notification`);
      return;
    }
  
    const recipientsWithChannels = this.getRecipientsForSuggestion(suggestion);
    console.log(`Found ${recipientsWithChannels.length} potential recipients`);
  
    for (const { recipient, preferredChannels } of recipientsWithChannels) {
      // Filter recipients based on notifyParties if provided
      if (options.notifyParties) {
        const recipientType = this.getRecipientType(recipient, suggestion);
        if (!recipientType || !options.notifyParties.includes(recipientType)) {
          console.log(`Skipping recipient ${recipient.name} (${recipientType}) - not in notifyParties`, options.notifyParties);
          continue;
        }
      }
      
      const channelsToUse = options.channels || preferredChannels || ['email'];
      console.log(`Sending notification to ${recipient.name} via channels:`, channelsToUse);
      
      await this.sendNotification(
        recipient,
        templateContent,
        { ...options, channels: channelsToUse }
      );
    }
    
    console.log(`Finished processing notifications for suggestion ${suggestion.id}`);
  }

  // Helper method to determine recipient type
  private getRecipientType(
    recipient: RecipientInfo, 
    suggestion: SuggestionWithParties
  ): 'first' | 'second' | 'matchmaker' | null {
    if (recipient.email === suggestion.firstParty.email) {
      return 'first';
    } else if (recipient.email === suggestion.secondParty.email) {
      return 'second';
    } else if (recipient.email === suggestion.matchmaker.email) {
      return 'matchmaker';
    }
    return null;
  }

  private getSuggestionTemplate(
    suggestion: SuggestionWithParties,
    customMessage?: string
  ): NotificationContent | null {
    const baseUrl = process.env.NEXT_PUBLIC_BASE_URL || 'http://localhost:3000';
    
    // If there's a custom message, use it instead of the template
    if (customMessage) {
      const reviewUrl = `${baseUrl}/suggestions/${suggestion.id}/review`;
      return {
        subject: "עדכון בהצעת שידוך",
        body: `שלום,\n\n${customMessage}\n\nלצפייה בפרטי ההצעה: ${reviewUrl}\n\nבברכה,\nמערכת השידוכים`,
        htmlBody: `
          <div dir="rtl">
            <h2>שלום,</h2>
            <p>${customMessage}</p>
            <p>לצפייה בפרטי ההצעה: <a href="${reviewUrl}">לחץ כאן</a></p>
            <p>בברכה,<br>מערכת השידוכים</p>
          </div>
        `
      };
    }
    
    // Otherwise use the template based on status
    switch (suggestion.status) {
      case MatchSuggestionStatus.PENDING_FIRST_PARTY:
        return {
          subject: 'הצעת שידוך חדשה עבורך',
          body: `שלום ${suggestion.firstParty.firstName},\n\n${suggestion.matchmaker.firstName} ${suggestion.matchmaker.lastName} הציע/ה עבורך הצעת שידוך.\n\nלצפייה בפרטי ההצעה ומענה: ${baseUrl}/suggestions/${suggestion.id}/review\n\nבברכה,\nצוות המערכת`,
          htmlBody: `<div dir="rtl"><h2>שלום ${suggestion.firstParty.firstName},</h2><p>${suggestion.matchmaker.firstName} ${suggestion.matchmaker.lastName} הציע/ה עבורך הצעת שידוך.</p><p>לצפייה בפרטי ההצעה ומענה, אנא היכנס/י לקישור הבא:</p><p><a href="${baseUrl}/suggestions/${suggestion.id}/review">לצפייה בהצעה</a></p><p>בברכה,<br>צוות המערכת</p></div>`
        };
      
      case MatchSuggestionStatus.FIRST_PARTY_APPROVED:
        return {
          subject: 'עדכון סטטוס - הצעת שידוך אושרה על ידי הצד הראשון',
          body: `שלום ${suggestion.matchmaker.firstName},\n\n${suggestion.firstParty.firstName} ${suggestion.firstParty.lastName} אישר/ה את הצעת השידוך.\n\nההצעה תועבר כעת באופן אוטומטי לצד השני.\n\nלצפייה בפרטים נוספים: ${baseUrl}/dashboard/suggestions/${suggestion.id}\n\nבברכה,\nצוות המערכת`,
          htmlBody: `<div dir="rtl"><h2>שלום ${suggestion.matchmaker.firstName},</h2><p>${suggestion.firstParty.firstName} ${suggestion.firstParty.lastName} אישר/ה את הצעת השידוך.</p><p>ההצעה תועבר כעת באופן אוטומטי לצד השני.</p><p><a href="${baseUrl}/dashboard/suggestions/${suggestion.id}">לצפייה בפרטים נוספים</a></p><p>בברכה,<br>צוות המערכת</p></div>`
        };

      case MatchSuggestionStatus.FIRST_PARTY_DECLINED:
        return {
          subject: 'עדכון סטטוס - הצעת שידוך נדחתה',
          body: `שלום ${suggestion.matchmaker.firstName},\n\n${suggestion.firstParty.firstName} ${suggestion.firstParty.lastName} דחה/תה את הצעת השידוך.\n\nלצפייה בפרטים נוספים: ${baseUrl}/dashboard/suggestions/${suggestion.id}\n\nבברכה,\nצוות המערכת`,
          htmlBody: `<div dir="rtl"><h2>שלום ${suggestion.matchmaker.firstName},</h2><p>${suggestion.firstParty.firstName} ${suggestion.firstParty.lastName} דחה/תה את הצעת השידוך.</p><p><a href="${baseUrl}/dashboard/suggestions/${suggestion.id}">לצפייה בפרטים נוספים</a></p><p>בברכה,<br>צוות המערכת</p></div>`
        };

      case MatchSuggestionStatus.PENDING_SECOND_PARTY:
        return {
          subject: 'הצעת שידוך חדשה עבורך',
          body: `שלום ${suggestion.secondParty.firstName},\n\n${suggestion.matchmaker.firstName} ${suggestion.matchmaker.lastName} הציע/ה עבורך הצעת שידוך.\n\nהצד הראשון כבר אישר את ההצעה.\n\nלצפייה בפרטי ההצעה ומענה: ${baseUrl}/suggestions/${suggestion.id}/review\n\nבברכה,\nצוות המערכת`,
          htmlBody: `<div dir="rtl"><h2>שלום ${suggestion.secondParty.firstName},</h2><p>${suggestion.matchmaker.firstName} ${suggestion.matchmaker.lastName} הציע/ה עבורך הצעת שידוך.</p><p>הצד הראשון כבר אישר את ההצעה.</p><p><a href="${baseUrl}/suggestions/${suggestion.id}/review">לצפייה בפרטי ההצעה ומענה</a></p><p>בברכה,<br>צוות המערכת</p></div>`
        };

      case MatchSuggestionStatus.SECOND_PARTY_APPROVED:
        return {
          subject: 'עדכון סטטוס - הצעת שידוך אושרה על ידי הצד השני',
          body: `שלום ${suggestion.matchmaker.firstName},\n\n${suggestion.secondParty.firstName} ${suggestion.secondParty.lastName} אישר/ה את הצעת השידוך.\n\nשני הצדדים אישרו את ההצעה. ניתן כעת לשתף פרטי קשר.\n\nלצפייה בפרטים נוספים: ${baseUrl}/dashboard/suggestions/${suggestion.id}\n\nבברכה,\nצוות המערכת`,
          htmlBody: `<div dir="rtl"><h2>שלום ${suggestion.matchmaker.firstName},</h2><p>${suggestion.secondParty.firstName} ${suggestion.secondParty.lastName} אישר/ה את הצעת השידוך.</p><p>שני הצדדים אישרו את ההצעה. ניתן כעת לשתף פרטי קשר.</p><p><a href="${baseUrl}/dashboard/suggestions/${suggestion.id}">לצפייה בפרטים נוספים</a></p><p>בברכה,<br>צוות המערכת</p></div>`
        };

      case MatchSuggestionStatus.SECOND_PARTY_DECLINED:
        return {
          subject: 'עדכון סטטוס - הצעת שידוך נדחתה',
          body: `שלום ${suggestion.matchmaker.firstName},\n\n${suggestion.secondParty.firstName} ${suggestion.secondParty.lastName} דחה/תה את הצעת השידוך.\n\nלצפייה בפרטים נוספים: ${baseUrl}/dashboard/suggestions/${suggestion.id}\n\nבברכה,\nצוות המערכת`,
          htmlBody: `<div dir="rtl"><h2>שלום ${suggestion.matchmaker.firstName},</h2><p>${suggestion.secondParty.firstName} ${suggestion.secondParty.lastName} דחה/תה את הצעת השידוך.</p><p><a href="${baseUrl}/dashboard/suggestions/${suggestion.id}">לצפייה בפרטים נוספים</a></p><p>בברכה,<br>צוות המערכת</p></div>`
        };
    
      case MatchSuggestionStatus.CONTACT_DETAILS_SHARED:
        // Prepare contact details with multi-line support
        const firstPartyDetails = this.formatUserDetails(suggestion.firstParty);
        const secondPartyDetails = this.formatUserDetails(suggestion.secondParty);
        
        return {
          subject: 'פרטי קשר להצעת השידוך',
          body: `ברכות! שני הצדדים אישרו את הצעת השידוך.\n\nפרטי הקשר של הצד הראשון:\n${firstPartyDetails}\n\nפרטי הקשר של הצד השני:\n${secondPartyDetails}\n\nאנא צרו קשר בהקדם לתיאום פגישה ראשונה.\n\nבהצלחה!`,
          htmlBody: `<div dir="rtl"><h2>ברכות! שני הצדדים אישרו את הצעת השידוך.</h2><p>פרטי הקשר של הצד הראשון:</p><pre>${firstPartyDetails}</pre><p>פרטי הקשר של הצד השני:</p><pre>${secondPartyDetails}</pre><p>אנא צרו קשר בהקדם לתיאום פגישה ראשונה.</p><p>בהצלחה!</p></div>`
        };
      
      case MatchSuggestionStatus.AWAITING_FIRST_DATE_FEEDBACK:
        return {
          subject: 'בקשה למשוב על הפגישה הראשונה',
          body: `שלום,\n\nנשמח לקבל את המשוב שלך על הפגישה הראשונה.\n\nלשליחת המשוב: ${baseUrl}/suggestions/${suggestion.id}/feedback\n\nבברכה,\nצוות המערכת`,
          htmlBody: `<div dir="rtl"><h2>שלום,</h2><p>נשמח לקבל את המשוב שלך על הפגישה הראשונה.</p><p><a href="${baseUrl}/suggestions/${suggestion.id}/feedback">לשליחת המשוב</a></p><p>בברכה,<br>צוות המערכת</p></div>`
        };

      case MatchSuggestionStatus.THINKING_AFTER_DATE:
        return {
          subject: 'בקשת זמן למחשבה לאחר הפגישה',
          body: `שלום ${suggestion.matchmaker.firstName},\n\nאחד הצדדים ביקש זמן למחשבה לאחר הפגישה.\n\nלצפייה בפרטים נוספים: ${baseUrl}/dashboard/suggestions/${suggestion.id}\n\nבברכה,\nצוות המערכת`,
          htmlBody: `<div dir="rtl"><h2>שלום ${suggestion.matchmaker.firstName},</h2><p>אחד הצדדים ביקש זמן למחשבה לאחר הפגישה.</p><p><a href="${baseUrl}/dashboard/suggestions/${suggestion.id}">לצפייה בפרטים נוספים</a></p><p>בברכה,<br>צוות המערכת</p></div>`
        };

      case MatchSuggestionStatus.DATING:
        return {
          subject: 'עדכון סטטוס - בתהליך היכרות',
          body: `שלום ${suggestion.matchmaker.firstName},\n\nהזוג נמצא בתהליך היכרות.\n\nלצפייה בפרטים: ${baseUrl}/dashboard/suggestions/${suggestion.id}\n\nבברכה,\nצוות המערכת`,
          htmlBody: `<div dir="rtl"><h2>שלום ${suggestion.matchmaker.firstName},</h2><p>הזוג נמצא בתהליך היכרות.</p><p><a href="${baseUrl}/dashboard/suggestions/${suggestion.id}">לצפייה בפרטים</a></p><p>בברכה,<br>צוות המערכת</p></div>`
        };

      case MatchSuggestionStatus.ENGAGED:
        return {
          subject: 'מזל טוב! - אירוסין',
          body: `מזל טוב ${suggestion.firstParty.firstName} ו${suggestion.secondParty.firstName}!\n\nאנו שמחים לשמוע על האירוסין ומאחלים לכם המון הצלחה בהמשך הדרך.\n\nבברכה,\nצוות המערכת`,
          htmlBody: `<div dir="rtl"><h2>מזל טוב ${suggestion.firstParty.firstName} ו${suggestion.secondParty.firstName}!</h2><p>אנו שמחים לשמוע על האירוסין ומאחלים לכם המון הצלחה בהמשך הדרך.</p><p>בברכה,<br>צוות המערכת</p></div>`
        };

      case MatchSuggestionStatus.MARRIED:
        return {
          subject: 'מזל טוב! - חתונה',
          body: `מזל טוב ${suggestion.firstParty.firstName} ו${suggestion.secondParty.firstName}!\n\nאנו שמחים לשמוע על החתונה ומאחלים לכם חיים מאושרים יחד.\n\nבברכה,\nצוות המערכת`,
          htmlBody: `<div dir="rtl"><h2>מזל טוב ${suggestion.firstParty.firstName} ו${suggestion.secondParty.firstName}!</h2><p>אנו שמחים לשמוע על החתונה ומאחלים לכם חיים מאושרים יחד.</p><p>בברכה,<br>צוות המערכת</p></div>`
        };

      case MatchSuggestionStatus.EXPIRED:
        return {
          subject: 'הצעת השידוך פגה',
          body: `שלום ${suggestion.matchmaker.firstName},\n\nהצעת השידוך פגה עקב חוסר מענה במועד.\n\nלצפייה בפרטים: ${baseUrl}/dashboard/suggestions/${suggestion.id}\n\nבברכה,\nצוות המערכת`,
          htmlBody: `<div dir="rtl"><h2>שלום ${suggestion.matchmaker.firstName},</h2><p>הצעת השידוך פגה עקב חוסר מענה במועד.</p><p><a href="${baseUrl}/dashboard/suggestions/${suggestion.id}">לצפייה בפרטים</a></p><p>בברכה,<br>צוות המערכת</p></div>`
        };

      default:
        // For other statuses, return null to skip notification
        console.log(`No template defined for status: ${suggestion.status}`);
        return null;
    }
  }

  private getRecipientsForSuggestion(suggestion: SuggestionWithParties): Array<{
    recipient: RecipientInfo;
    preferredChannels: NotificationChannel[];
  }> {
    const recipients: Array<{
      recipient: RecipientInfo;
      preferredChannels: NotificationChannel[];
    }> = [];
    
    // Logic to determine recipients based on suggestion status
    switch (suggestion.status) {
      case MatchSuggestionStatus.DRAFT:
        recipients.push({
          recipient: {
            email: suggestion.matchmaker.email,
            phone: suggestion.matchmaker.phone || undefined,
            name: `${suggestion.matchmaker.firstName} ${suggestion.matchmaker.lastName}`
          },
          preferredChannels: ['email'] // Email only for drafts
        });
        break;
      
      case MatchSuggestionStatus.PENDING_FIRST_PARTY:
        recipients.push({
          recipient: {
            email: suggestion.firstParty.email,
            phone: suggestion.firstParty.phone || undefined,
            name: `${suggestion.firstParty.firstName} ${suggestion.firstParty.lastName}`
          },
          preferredChannels: ['email', 'whatsapp'] // Email and WhatsApp for candidates
        });
        break;
      
      case MatchSuggestionStatus.FIRST_PARTY_APPROVED:
      case MatchSuggestionStatus.FIRST_PARTY_DECLINED:
        recipients.push({
          recipient: {
            email: suggestion.matchmaker.email,
            phone: suggestion.matchmaker.phone || undefined,
            name: `${suggestion.matchmaker.firstName} ${suggestion.matchmaker.lastName}`
          },
          preferredChannels: ['email', 'whatsapp'] // Email and WhatsApp for matchmaker
        });
        break;
      
      case MatchSuggestionStatus.PENDING_SECOND_PARTY:
        recipients.push({
          recipient: {
            email: suggestion.secondParty.email,
            phone: suggestion.secondParty.phone || undefined,
            name: `${suggestion.secondParty.firstName} ${suggestion.secondParty.lastName}`
          },
          preferredChannels: ['email', 'whatsapp'] // Email and WhatsApp for candidates
        });
        break;
      
      case MatchSuggestionStatus.SECOND_PARTY_APPROVED:
      case MatchSuggestionStatus.SECOND_PARTY_DECLINED:
        recipients.push({
          recipient: {
            email: suggestion.matchmaker.email,
            phone: suggestion.matchmaker.phone || undefined,
            name: `${suggestion.matchmaker.firstName} ${suggestion.matchmaker.lastName}`
          },
          preferredChannels: ['email', 'whatsapp'] // Email and WhatsApp for matchmaker
        });
        break;
      
      case MatchSuggestionStatus.AWAITING_MATCHMAKER_APPROVAL:
        recipients.push({
          recipient: {
            email: suggestion.matchmaker.email,
            phone: suggestion.matchmaker.phone || undefined,
            name: `${suggestion.matchmaker.firstName} ${suggestion.matchmaker.lastName}`
          },
          preferredChannels: ['email', 'whatsapp'] // Email and WhatsApp for matchmaker
        });
        break;
      
      case MatchSuggestionStatus.CONTACT_DETAILS_SHARED:
        // Send to both parties and matchmaker
        recipients.push(
          {
            recipient: {
              email: suggestion.firstParty.email,
              phone: suggestion.firstParty.phone || undefined,
              name: `${suggestion.firstParty.firstName} ${suggestion.firstParty.lastName}`
            },
            preferredChannels: ['email', 'whatsapp']
          },
          {
            recipient: {
              email: suggestion.secondParty.email,
              phone: suggestion.secondParty.phone || undefined,
              name: `${suggestion.secondParty.firstName} ${suggestion.secondParty.lastName}`
            },
            preferredChannels: ['email', 'whatsapp']
          },
          {
            recipient: {
              email: suggestion.matchmaker.email,
              phone: suggestion.matchmaker.phone || undefined,
              name: `${suggestion.matchmaker.firstName} ${suggestion.matchmaker.lastName}`
            },
            preferredChannels: ['email']
          }
        );
        break;
      
      case MatchSuggestionStatus.AWAITING_FIRST_DATE_FEEDBACK:
        // Send to both parties
        recipients.push(
          {
            recipient: {
              email: suggestion.firstParty.email,
              phone: suggestion.firstParty.phone || undefined,
              name: `${suggestion.firstParty.firstName} ${suggestion.firstParty.lastName}`
            },
            preferredChannels: ['email', 'whatsapp']
          },
          {
            recipient: {
              email: suggestion.secondParty.email,
              phone: suggestion.secondParty.phone || undefined,
              name: `${suggestion.secondParty.firstName} ${suggestion.secondParty.lastName}`
            },
            preferredChannels: ['email', 'whatsapp']
          }
        );
        break;
      
      case MatchSuggestionStatus.ENGAGED:
      case MatchSuggestionStatus.MARRIED:
        // Send to both parties and matchmaker
        recipients.push(
          {
            recipient: {
              email: suggestion.firstParty.email,
              phone: suggestion.firstParty.phone || undefined,
              name: `${suggestion.firstParty.firstName} ${suggestion.firstParty.lastName}`
            },
            preferredChannels: ['email', 'whatsapp']
          },
          {
            recipient: {
              email: suggestion.secondParty.email,
              phone: suggestion.secondParty.phone || undefined,
              name: `${suggestion.secondParty.firstName} ${suggestion.secondParty.lastName}`
            },
            preferredChannels: ['email', 'whatsapp']
          },
          {
            recipient: {
              email: suggestion.matchmaker.email,
              phone: suggestion.matchmaker.phone || undefined,
              name: `${suggestion.matchmaker.firstName} ${suggestion.matchmaker.lastName}`
            },
            preferredChannels: ['email', 'whatsapp']
          }
        );
        break;

      default:
        // Default: send to matchmaker only
        recipients.push({
          recipient: {
            email: suggestion.matchmaker.email,
            phone: suggestion.matchmaker.phone || undefined,
            name: `${suggestion.matchmaker.firstName} ${suggestion.matchmaker.lastName}`
          },
          preferredChannels: ['email']
        });
        break;
    }

    return recipients;
  }

  // Helper function to format contact details
  private formatUserDetails(user: { 
    firstName: string; 
    lastName: string; 
    email: string; 
    phone?: string | null 
  }): string {
    const details = [
      `שם: ${user.firstName} ${user.lastName}`,
      `אימייל: ${user.email}`,
    ];

    if (user.phone) {
      details.push(`טלפון: ${user.phone}`);
    }

    return details.join('\n');
  }
}

export const notificationService = NotificationService.getInstance();
--- End of Content for NotificationService.ts ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\suggestions\services\notification\initNotifications.ts
--------------------------------------------------------------------------------
Content:
// src/app/components/matchmaker/suggestions/services/notification/initNotifications.ts

import { notificationService } from './NotificationService';
import { emailAdapter } from './adapters/EmailAdapter';
import { whatsAppAdapter } from './adapters/WhatsAppAdapter';

// Define notification channel type
export type NotificationChannel = 'email' | 'whatsapp' | 'sms';

export type NotificationOptions = {
    channels: NotificationChannel[];
    notifyParties?: ('first' | 'second' | 'matchmaker')[];
    customMessage?: string;
  };

/**
 * Initializes the notification service by registering all available adapters
 * @returns The initialized notification service
 */
export function initNotificationService() {
  // Register adapters
  notificationService.registerAdapter(emailAdapter);
  notificationService.registerAdapter(whatsAppAdapter);
  
  console.log('Notification service initialized with email and WhatsApp adapters');
  
  return notificationService;
}
--- End of Content for initNotifications.ts ---

================================================================================
Directory: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\suggestions\services\notification\adapters
================================================================================

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\suggestions\services\notification\adapters\EmailAdapter.ts
--------------------------------------------------------------------------------
Content:
// src/app/components/matchmaker/suggestions/services/notification/adapters/EmailAdapter.ts

import { NotificationAdapter, NotificationChannel, RecipientInfo, NotificationContent } from '../NotificationService';
import nodemailer from 'nodemailer';

export class EmailAdapter implements NotificationAdapter {
  private static instance: EmailAdapter;
  private transporter: nodemailer.Transporter;

  private constructor() {
    // Configure the transporter exactly like in EmailService
    this.transporter = nodemailer.createTransport({
      service: 'gmail',
      auth: {
        user: process.env.GMAIL_USER || '',
        pass: process.env.GMAIL_APP_PASSWORD || '',
      },
      tls: {
        rejectUnauthorized: false
      }
    });

    // Verify email configuration on initialization
    this.verifyEmailConfig();
  }

  private async verifyEmailConfig(): Promise<void> {
    try {
      await this.transporter.verify();
      console.log('Email configuration verified successfully');
    } catch (error) {
      console.error('Email configuration verification failed:', error);
      // Don't throw, to allow the system to continue even if verification fails
    }
  }

  public static getInstance(): EmailAdapter {
    if (!EmailAdapter.instance) {
      EmailAdapter.instance = new EmailAdapter();
    }
    return EmailAdapter.instance;
  }

  public getChannelType(): NotificationChannel {
    return 'email';
  }

  public canSendTo(recipient: RecipientInfo): boolean {
    return !!recipient.email;
  }

  public async send(recipient: RecipientInfo, content: NotificationContent): Promise<boolean> {
    try {
      const result = await this.transporter.sendMail({
        from: `${process.env.EMAIL_FROM_NAME || 'מערכת השידוכים'} <${process.env.GMAIL_USER || ''}>`,
        to: recipient.email,
        subject: content.subject,
        text: content.body,
        html: content.htmlBody || content.body.replace(/\n/g, '<br>'),
      });

      console.log('Email sent successfully:', {
        messageId: result.messageId,
        response: result.response,
        to: recipient.email,
        subject: content.subject
      });

      return true;
    } catch (error) {
      console.error('Detailed error sending email:', {
        error: error instanceof Error ? {
          name: error.name,
          message: error.message,
          stack: error.stack
        } : error,
        recipient: recipient.email,
        subject: content.subject
      });
      return false;
    }
  }
}

export const emailAdapter = EmailAdapter.getInstance();
--- End of Content for EmailAdapter.ts ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\suggestions\services\notification\adapters\WhatsAppAdapter.ts
--------------------------------------------------------------------------------
Content:
// lib/WhatsAppAdapter.ts
import {
  NotificationAdapter,
  NotificationChannel,
  RecipientInfo,
  NotificationContent as BaseNotificationContent
} from '../NotificationService'; // Assuming NotificationService.ts exists in the same directory
import twilio from 'twilio';
// Import the specific type for message creation options if available
import { MessageListInstanceCreateOptions } from 'twilio/lib/rest/api/v2010/account/message';

// --- Define an extended NotificationContent interface ---
// This adds the optional adapter-specific data structure
interface NotificationContent extends BaseNotificationContent {
  _adapterSpecificData?: {
      contentSid?: string;
      contentVariables?: string; // Should be a JSON string
      // Add other potential adapter-specific fields here
  };
}
// --- End Interface Extension ---

// --- Type Guard for Twilio-like Errors ---
interface PotentialTwilioError {
  code?: number | string;
  message?: string;
  // Add other potential properties like 'status', 'moreInfo', etc. if needed
}

/**
* Type guard to check if an unknown error object might be a Twilio API error
* by checking for the presence of 'code' or 'message' properties.
* @param error The unknown value caught in a catch block.
* @returns True if the error object has properties common to Twilio errors, false otherwise.
*/
function isPotentialTwilioError(error: unknown): error is PotentialTwilioError {
  // Check if it's a non-null object and has either 'code' or 'message' property
  return typeof error === 'object' && error !== null && ('code' in error || 'message' in error);
}
// --- End Type Guard ---

// --- Helper: Logger (optional but recommended) ---
// Using Record<string, unknown> or object instead of any
const logger = {
info: (message: string, meta?: Record<string, unknown> | object) => {
  console.log(JSON.stringify({ timestamp: new Date().toISOString(), level: 'info', service: 'WhatsAppAdapter', message, ...(meta || {}) }));
},
warn: (message: string, meta?: Record<string, unknown> | object) => {
  console.warn(JSON.stringify({ timestamp: new Date().toISOString(), level: 'warn', service: 'WhatsAppAdapter', message, ...(meta || {}) }));
},
error: (message: string, meta?: Record<string, unknown> | object) => {
  let logMeta = meta || {};
  // If the meta object itself is an Error, extract relevant info
  if (meta instanceof Error) {
      logMeta = { name: meta.name, message: meta.message, stack: meta.stack };
  } else if (isPotentialTwilioError(meta)) {
      // If it's potentially a Twilio error passed directly
      logMeta = { code: meta.code, message: meta.message, ...meta };
  }
  console.error(JSON.stringify({ timestamp: new Date().toISOString(), level: 'error', service: 'WhatsAppAdapter', message, ...logMeta }));
},
};
// --- End Logger ---


export class WhatsAppAdapter implements NotificationAdapter {
// Singleton instance
private static instance: WhatsAppAdapter;
// Twilio client instance (typed)
private client: twilio.Twilio | null = null;
// Configured Twilio WhatsApp sender number
private fromNumber: string = '';

/**
 * Private constructor to enforce singleton pattern.
 * Initializes the Twilio client using environment variables.
 */
private constructor() {
  const accountSid = process.env.TWILIO_ACCOUNT_SID;
  const authToken = process.env.TWILIO_AUTH_TOKEN;
  this.fromNumber = process.env.TWILIO_WHATSAPP_NUMBER || ''; // Get number from env

  // Validate configuration
  if (!accountSid || !authToken || !this.fromNumber) {
    logger.error('Missing Twilio configuration details', {
        hasSid: !!accountSid,
        hasToken: !!authToken,
        hasWhatsAppNumber: !!this.fromNumber,
        detail: "WhatsApp notifications will be unavailable."
    });
    // Do not throw, allow graceful degradation if possible
  } else {
    try {
      // Initialize Twilio client
      this.client = twilio(accountSid, authToken);
      logger.info('Twilio client initialized successfully', { fromWhatsAppNumber: this.fromNumber });
    } catch (error: unknown) { // Catch as unknown
      logger.error('Failed to initialize Twilio client during constructor', { error });
      this.client = null; // Ensure client is null on initialization failure
    }
  }
}

/**
 * Gets the singleton instance of the WhatsAppAdapter.
 * @returns The WhatsAppAdapter instance.
 */
public static getInstance(): WhatsAppAdapter {
  if (!WhatsAppAdapter.instance) {
    WhatsAppAdapter.instance = new WhatsAppAdapter();
  }
  return WhatsAppAdapter.instance;
}

/**
 * Returns the channel type handled by this adapter.
 * @returns The notification channel type ('whatsapp').
 */
public getChannelType(): NotificationChannel {
  return 'whatsapp';
}

/**
 * Checks if this adapter is capable of sending a notification to the given recipient.
 * Requires a valid phone number, an initialized Twilio client, and a configured 'from' number.
 * @param recipient Information about the recipient.
 * @returns True if the adapter can send, false otherwise.
 */
public canSendTo(recipient: RecipientInfo): boolean {
  const hasValidPhone = !!recipient.phone && recipient.phone.length > 8; // Basic validation
  const isClientReady = this.client !== null;
  const hasFromNumber = this.fromNumber !== '';
  const canSend = hasValidPhone && isClientReady && hasFromNumber;

  if (!canSend) {
      let reason = 'Unknown';
      if (!hasValidPhone) reason = 'Invalid or missing phone number';
      else if (!isClientReady) reason = 'Twilio client not initialized';
      else if (!hasFromNumber) reason = 'Twilio "from" number not configured';
      logger.warn('Cannot send WhatsApp message due to configuration or recipient data', {
          reason: reason,
          recipientPhone: recipient.phone // Log phone for debugging
      });
  }
  return canSend;
}

/**
 * Formats a phone number into E.164 standard without the leading '+'.
 * Required for Twilio's `to` parameter when prefixed with `whatsapp:`.
 * Handles Israeli numbers starting with '0'.
 * Example: 0501234567 -> 972501234567
 * @param phone The phone number string to format.
 * @returns The formatted phone number string.
 */
private formatPhoneNumber(phone: string): string {
  // Remove all non-digit characters
  let cleaned = phone.replace(/\D/g, '');
  // Prepend country code for Israeli numbers if '0' prefix exists
  if (cleaned.startsWith('0')) {
    cleaned = '972' + cleaned.substring(1);
  }
  // Remove leading '+' if present (it's added later in the `whatsapp:` prefix)
  if (cleaned.startsWith('+')) {
    cleaned = cleaned.substring(1);
  }
  return cleaned;
}

/**
 * Sends a notification via WhatsApp using the Twilio API.
 * Prefers using template messages if configured via `_adapterSpecificData`.
 * Falls back to raw text messages otherwise (less reliable for business-initiated messages).
 * @param recipient Information about the recipient.
 * @param content The notification content, potentially including adapter-specific data.
 * @returns A promise that resolves to true if the message was successfully queued by Twilio, false otherwise.
 */
public async send(recipient: RecipientInfo, content: NotificationContent): Promise<boolean> {
  logger.info('Attempting to send WhatsApp message', {
    recipientPhone: recipient.phone,
    fromNumber: this.fromNumber,
    hasClient: !!this.client,
    contentSid: content._adapterSpecificData?.contentSid,
    hasContentVariables: !!content._adapterSpecificData?.contentVariables,
  });

  // --- Pre-send Checks ---
  if (!this.client) {
    logger.error('Twilio client not initialized. Cannot send WhatsApp message.');
    return false;
  }
  if (!recipient.phone) {
    logger.error('Recipient phone number is missing. Cannot send WhatsApp message.');
    return false;
  }
  if (!this.fromNumber) {
      logger.error('Twilio "from" WhatsApp number is not configured. Cannot send message.');
      return false;
  }
  // --- End Pre-send Checks ---


  try {
    // --- Format Numbers ---
    const toNumberE164 = this.formatPhoneNumber(recipient.phone);
    // Ensure 'from' number has '+' prefix for the whatsapp: schema
    const fromWhatsAppFormatted = `whatsapp:${this.fromNumber.startsWith('+') ? this.fromNumber : '+' + this.fromNumber}`;
    // Ensure 'to' number has '+' prefix for the whatsapp: schema
    const toWhatsAppFormatted = `whatsapp:+${toNumberE164}`;

    logger.info(`Formatted numbers for sending via Twilio`, { from: fromWhatsAppFormatted, to: toWhatsAppFormatted });
    // --- End Format Numbers ---


    // --- Prepare Message Payload ---
    let messagePayload: MessageListInstanceCreateOptions;
    const adapterData = content._adapterSpecificData;

    if (adapterData?.contentSid && adapterData?.contentVariables) {
       // **Use Template Messaging**
       logger.info(`Preparing WhatsApp template message`, { contentSid: adapterData.contentSid });
       messagePayload = {
          from: fromWhatsAppFormatted,
          to: toWhatsAppFormatted,
          contentSid: adapterData.contentSid, // The approved template SID
          contentVariables: adapterData.contentVariables, // JSON string of variables {"1": "value1", "2": "value2"}
          // Optional: Specify Messaging Service SID if using one
          // messagingServiceSid: process.env.TWILIO_MESSAGING_SERVICE_SID
       };
    } else {
       // **Use Raw Text Messaging (Fallback)**
       // Note: This might fail if outside the 24-hour customer service window
       // or if WhatsApp/Twilio policies require templates for this type of message.
       const bodyText = content.body || content.subject || 'הודעה ממערכת השידוכים'; // Determine fallback content
       logger.warn(`Preparing raw text WhatsApp message (using fallback, might fail)`, { bodyLength: bodyText.length });
       messagePayload = {
          from: fromWhatsAppFormatted,
          to: toWhatsAppFormatted,
          body: bodyText, // The actual text message content
          // Optional: Specify Messaging Service SID if using one
          // messagingServiceSid: process.env.TWILIO_MESSAGING_SERVICE_SID
       };
    }
    // --- End Prepare Message Payload ---


    // --- Send Message via Twilio API ---
    logger.info("Sending message payload to Twilio API", { payload: messagePayload }); // Be cautious logging full payload in production if sensitive
    const message = await this.client.messages.create(messagePayload);
    // --- End Send Message ---


    // --- Log Success ---
    // The message status here is typically 'queued' or 'sending'. Delivery confirmation is asynchronous.
    logger.info('WhatsApp message request processed successfully by Twilio', {
      messageSid: message.sid,
      status: message.status,
      to: toWhatsAppFormatted,
      from: fromWhatsAppFormatted,
      price: message.price, // Log cost if available
      priceUnit: message.priceUnit,
      errorCode: message.errorCode, // Log if Twilio detected an error immediately
      errorMessage: message.errorMessage,
    });
    // We return true because Twilio accepted the request. Delivery is not guaranteed at this point.
    return true;
    // --- End Log Success ---

  } catch (error: unknown) { // Catch error as unknown
    // --- Handle Errors ---
    let errorMessage = 'Unknown error occurred while sending WhatsApp message.';
    let errorCode: number | string | undefined;

    // Use the type guard to safely access potential error properties
    if (isPotentialTwilioError(error)) {
        errorCode = error.code;
        errorMessage = error.message || errorMessage;
    } else if (error instanceof Error) {
        // Standard JavaScript Error
        errorMessage = error.message;
    } else if (typeof error === 'string') {
        // Simple string error
        errorMessage = error;
    }

    // Log detailed error information
    logger.error('Failed to send WhatsApp message via Twilio', {
      errorCode,
      errorMessage,
      recipient: `whatsapp:+${this.formatPhoneNumber(recipient.phone)}`, // Log formatted number for debugging
      from: `whatsapp:${this.fromNumber.startsWith('+') ? this.fromNumber : '+' + this.fromNumber}`,
      // Pass the original error object for full details in structured logs
      errorDetails: error
    });

    // Specific handling/logging for common, informative errors
    if (errorCode === 63018 || errorCode === 21614) { // Common codes for non-WhatsApp/incapable numbers
         logger.error(`Recipient number appears invalid or not registered on WhatsApp.`, { phone: recipient.phone, errorCode });
         // Consider adding logic here: maybe mark the user's number as invalid? Notify admin?
    } else if (errorCode === 63016) { // Common code for failing outside the 24-hour window without a template
          logger.warn(`Failed to send non-template message outside 24-hour window.`, { phone: recipient.phone, errorCode });
    }

    return false; // Indicate that sending failed
    // --- End Handle Errors ---
  }
}
}

// Export the singleton instance for use in other parts of the application
export const whatsAppAdapter = WhatsAppAdapter.getInstance();
--- End of Content for WhatsAppAdapter.ts ---

================================================================================
Directory: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\suggestions\services\suggestions
================================================================================

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\suggestions\services\suggestions\StatusTransitionService.ts
--------------------------------------------------------------------------------
Content:
// src/app/components/matchmaker/suggestions/services/suggestions/StatusTransitionService.ts

import { MatchSuggestionStatus, User, MatchSuggestion, Profile } from "@prisma/client";
import prisma from "@/lib/prisma";
import { notificationService } from "../notification/NotificationService";


type UserWithProfile = User & {
  profile: Profile | null;
};

export type SuggestionWithParties = MatchSuggestion & {
  firstParty: UserWithProfile;
  secondParty: UserWithProfile;
  matchmaker: User;
};

type TransitionOptions = {
  sendNotifications?: boolean;
  customMessage?: string;
  notifyParties?: ('first' | 'second' | 'matchmaker')[];
};

export class StatusTransitionService {
  private static instance: StatusTransitionService;
  private constructor() {}

  public static getInstance(): StatusTransitionService {
    if (!StatusTransitionService.instance) {
      StatusTransitionService.instance = new StatusTransitionService();
    }
    return StatusTransitionService.instance;
  }

  async transitionStatus(
    suggestion: SuggestionWithParties,
    newStatus: MatchSuggestionStatus,
    notes?: string,
    options: TransitionOptions = {}
  ): Promise<SuggestionWithParties> {
    const previousStatus = suggestion.status;
    const mergedOptions = {
      sendNotifications: true,
      notifyParties: ['first', 'second', 'matchmaker'],
      ...options
    };

    // Validate the transition
    this.validateStatusTransition(previousStatus, newStatus);

    // Perform the status transition in a transaction
    const updatedSuggestion = await prisma.$transaction(async (tx) => {
      // Update the suggestion status
      const updated = await tx.matchSuggestion.update({
        where: { id: suggestion.id },
        data: {
          status: newStatus,
          previousStatus,
          lastStatusChange: new Date(),
          lastActivity: new Date(),
          
          // Update timing fields based on status
          ...(newStatus === MatchSuggestionStatus.FIRST_PARTY_APPROVED && {
            firstPartyResponded: new Date(),
          }),
          ...(newStatus === MatchSuggestionStatus.PENDING_SECOND_PARTY && {
            secondPartySent: new Date(),
          }),
          ...(newStatus === MatchSuggestionStatus.SECOND_PARTY_APPROVED && {
            secondPartyResponded: new Date(),
          }),
          ...(newStatus === MatchSuggestionStatus.CONTACT_DETAILS_SHARED && {
            closedAt: new Date(),
          }),
          ...(newStatus === MatchSuggestionStatus.MEETING_SCHEDULED && {
            firstMeetingScheduled: new Date(),
          }),
        },
        include: {
          firstParty: {
            include: { profile: true }
          },
          secondParty: {
            include: { profile: true }
          },
          matchmaker: true,
        },
      });

      // Create status history record
      await tx.suggestionStatusHistory.create({
        data: {
          suggestionId: suggestion.id,
          status: newStatus,
          notes: notes || `Status changed from ${previousStatus} to ${newStatus}`,
        },
      });

      return updated;
    });

    // Only send notifications if option is enabled
    if (mergedOptions.sendNotifications) {
      try {
        // Utilize the notification service for all channels (email, WhatsApp, etc.)
        await notificationService.handleSuggestionStatusChange(
          
          updatedSuggestion, 
          {
            channels: ['email', 'whatsapp'],
            notifyParties: mergedOptions.notifyParties as ('first' | 'second' | 'matchmaker')[],
            customMessage: mergedOptions.customMessage
          }
        );
        
        console.log(`Notifications sent for suggestion ${updatedSuggestion.id} status change to ${newStatus}`);
      } catch (error) {
        // Log error but don't fail the transition
        console.error('Error sending status transition notifications:', error);
      }
    }

    return updatedSuggestion;
  }

  private validateStatusTransition(
    currentStatus: MatchSuggestionStatus, 
    newStatus: MatchSuggestionStatus
  ): void {
    const validTransitions: Record<MatchSuggestionStatus, MatchSuggestionStatus[]> = {
      DRAFT: [MatchSuggestionStatus.PENDING_FIRST_PARTY],
      PENDING_FIRST_PARTY: [
        MatchSuggestionStatus.FIRST_PARTY_APPROVED,
        MatchSuggestionStatus.FIRST_PARTY_DECLINED,
        MatchSuggestionStatus.CANCELLED
      ],
      FIRST_PARTY_APPROVED: [
        MatchSuggestionStatus.PENDING_SECOND_PARTY,
        MatchSuggestionStatus.CANCELLED
      ],
      FIRST_PARTY_DECLINED: [
        MatchSuggestionStatus.CLOSED
      ],
      PENDING_SECOND_PARTY: [
        MatchSuggestionStatus.SECOND_PARTY_APPROVED,
        MatchSuggestionStatus.SECOND_PARTY_DECLINED,
        MatchSuggestionStatus.CANCELLED
      ],
      SECOND_PARTY_APPROVED: [
        MatchSuggestionStatus.CONTACT_DETAILS_SHARED,
        MatchSuggestionStatus.CANCELLED
      ],
      SECOND_PARTY_DECLINED: [
        MatchSuggestionStatus.CLOSED
      ],
      AWAITING_MATCHMAKER_APPROVAL: [
        MatchSuggestionStatus.CONTACT_DETAILS_SHARED,
        MatchSuggestionStatus.CANCELLED
      ],
      CONTACT_DETAILS_SHARED: [
        MatchSuggestionStatus.AWAITING_FIRST_DATE_FEEDBACK,
        MatchSuggestionStatus.CANCELLED
      ],
      AWAITING_FIRST_DATE_FEEDBACK: [
        MatchSuggestionStatus.THINKING_AFTER_DATE,
        MatchSuggestionStatus.ENDED_AFTER_FIRST_DATE,
        MatchSuggestionStatus.CANCELLED
      ],
      THINKING_AFTER_DATE: [
        MatchSuggestionStatus.PROCEEDING_TO_SECOND_DATE,
        MatchSuggestionStatus.ENDED_AFTER_FIRST_DATE,
        MatchSuggestionStatus.CANCELLED
      ],
      PROCEEDING_TO_SECOND_DATE: [
        MatchSuggestionStatus.DATING,
        MatchSuggestionStatus.CANCELLED
      ],
      ENDED_AFTER_FIRST_DATE: [
        MatchSuggestionStatus.CLOSED
      ],
      MEETING_PENDING: [
        MatchSuggestionStatus.MEETING_SCHEDULED,
        MatchSuggestionStatus.CANCELLED
      ],
      MEETING_SCHEDULED: [
        MatchSuggestionStatus.DATING,
        MatchSuggestionStatus.CANCELLED
      ],
      MATCH_APPROVED: [
        MatchSuggestionStatus.DATING,
        MatchSuggestionStatus.CANCELLED
      ],
      MATCH_DECLINED: [
        MatchSuggestionStatus.CLOSED
      ],
      DATING: [
        MatchSuggestionStatus.ENGAGED,
        MatchSuggestionStatus.CLOSED,
        MatchSuggestionStatus.CANCELLED
      ],
      ENGAGED: [
        MatchSuggestionStatus.MARRIED,
        MatchSuggestionStatus.CANCELLED
      ],
      MARRIED: [],
      EXPIRED: [],
      CLOSED: [],
      CANCELLED: []
    };

    if (!validTransitions[currentStatus]?.includes(newStatus)) {
      throw new Error(
        `Invalid status transition from ${currentStatus} to ${newStatus}. ` +
        `Valid transitions are: ${validTransitions[currentStatus]?.join(', ') || 'none'}`
      );
    }
  }
  
  getStatusLabel(status: MatchSuggestionStatus): string {
    const statusLabels: Record<MatchSuggestionStatus, string> = {
      DRAFT: "טיוטה",
      PENDING_FIRST_PARTY: "ממתין לתשובת הצד הראשון",
      FIRST_PARTY_APPROVED: "הצד הראשון אישר",
      FIRST_PARTY_DECLINED: "הצד הראשון דחה",
      PENDING_SECOND_PARTY: "ממתין לתשובת הצד השני",
      SECOND_PARTY_APPROVED: "הצד השני אישר",
      SECOND_PARTY_DECLINED: "הצד השני דחה",
      AWAITING_MATCHMAKER_APPROVAL: "ממתין לאישור השדכן",
      CONTACT_DETAILS_SHARED: "פרטי קשר שותפו",
      AWAITING_FIRST_DATE_FEEDBACK: "ממתין למשוב פגישה ראשונה",
      THINKING_AFTER_DATE: "בחשיבה לאחר הפגישה",
      PROCEEDING_TO_SECOND_DATE: "התקדמות לפגישה שנייה",
      ENDED_AFTER_FIRST_DATE: "הסתיים לאחר פגישה ראשונה",
      MEETING_PENDING: "פגישה בהמתנה",
      MEETING_SCHEDULED: "פגישה קבועה",
      MATCH_APPROVED: "השידוך אושר",
      MATCH_DECLINED: "השידוך נדחה",
      DATING: "בתהליך היכרות",
      ENGAGED: "אירוסין",
      MARRIED: "נישואין",
      CANCELLED: "בוטל",
      CLOSED: "נסגר",
      EXPIRED: "פג תוקף"
    };
    
    return statusLabels[status] || status;
  }
  
  // Get available actions for current status based on user role
  getAvailableActions(
    suggestion: SuggestionWithParties, 
    userId: string
  ): { id: string; label: string; nextStatus: MatchSuggestionStatus }[] {
    const isFirstParty = suggestion.firstPartyId === userId;
    const isSecondParty = suggestion.secondPartyId === userId;
    const isMatchmaker = suggestion.matchmakerId === userId;
    
    const actions: Record<MatchSuggestionStatus, { 
      firstParty?: { id: string; label: string; nextStatus: MatchSuggestionStatus }[];
      secondParty?: { id: string; label: string; nextStatus: MatchSuggestionStatus }[];
      matchmaker?: { id: string; label: string; nextStatus: MatchSuggestionStatus }[];
    }> = {
      DRAFT: {
        matchmaker: [
          { id: "send-to-first", label: "שליחה לצד הראשון", nextStatus: MatchSuggestionStatus.PENDING_FIRST_PARTY }
        ]
      },
      PENDING_FIRST_PARTY: {
        firstParty: [
          { id: "approve", label: "אישור ההצעה", nextStatus: MatchSuggestionStatus.FIRST_PARTY_APPROVED },
          { id: "decline", label: "דחיית ההצעה", nextStatus: MatchSuggestionStatus.FIRST_PARTY_DECLINED }
        ],
        matchmaker: [
          { id: "cancel", label: "ביטול ההצעה", nextStatus: MatchSuggestionStatus.CANCELLED }
        ]
      },
      FIRST_PARTY_APPROVED: {
        matchmaker: [
          { id: "send-to-second", label: "שליחה לצד השני", nextStatus: MatchSuggestionStatus.PENDING_SECOND_PARTY },
          { id: "cancel", label: "ביטול ההצעה", nextStatus: MatchSuggestionStatus.CANCELLED }
        ]
      },
      FIRST_PARTY_DECLINED: {
        matchmaker: [
          { id: "close", label: "סגירת הצעה", nextStatus: MatchSuggestionStatus.CLOSED }
        ]
      },
      PENDING_SECOND_PARTY: {
        secondParty: [
          { id: "approve", label: "אישור ההצעה", nextStatus: MatchSuggestionStatus.SECOND_PARTY_APPROVED },
          { id: "decline", label: "דחיית ההצעה", nextStatus: MatchSuggestionStatus.SECOND_PARTY_DECLINED }
        ],
        matchmaker: [
          { id: "cancel", label: "ביטול ההצעה", nextStatus: MatchSuggestionStatus.CANCELLED }
        ]
      },
      SECOND_PARTY_APPROVED: {
        matchmaker: [
          { id: "share-contacts", label: "שיתוף פרטי קשר", nextStatus: MatchSuggestionStatus.CONTACT_DETAILS_SHARED },
          { id: "cancel", label: "ביטול ההצעה", nextStatus: MatchSuggestionStatus.CANCELLED }
        ]
      },
      SECOND_PARTY_DECLINED: {
        matchmaker: [
          { id: "close", label: "סגירת הצעה", nextStatus: MatchSuggestionStatus.CLOSED }
        ]
      },
      AWAITING_MATCHMAKER_APPROVAL: {
        matchmaker: [
          { id: "approve-share", label: "אישור שיתוף פרטים", nextStatus: MatchSuggestionStatus.CONTACT_DETAILS_SHARED },
          { id: "cancel", label: "ביטול ההצעה", nextStatus: MatchSuggestionStatus.CANCELLED }
        ]
      },
      CONTACT_DETAILS_SHARED: {
        firstParty: [
          { id: "provide-feedback", label: "דיווח משוב לאחר פגישה", nextStatus: MatchSuggestionStatus.AWAITING_FIRST_DATE_FEEDBACK }
        ],
        secondParty: [
          { id: "provide-feedback", label: "דיווח משוב לאחר פגישה", nextStatus: MatchSuggestionStatus.AWAITING_FIRST_DATE_FEEDBACK }
        ],
        matchmaker: [
          { id: "request-feedback", label: "בקש משוב", nextStatus: MatchSuggestionStatus.AWAITING_FIRST_DATE_FEEDBACK },
          { id: "cancel", label: "ביטול ההצעה", nextStatus: MatchSuggestionStatus.CANCELLED }
        ]
      },
      AWAITING_FIRST_DATE_FEEDBACK: {
         matchmaker: [
            { id: "mark-thinking", label: "סמן כ'בחשיבה'", nextStatus: MatchSuggestionStatus.THINKING_AFTER_DATE },
            { id: "mark-ended-first", label: "סמן כ'הסתיים לאחר פגישה'", nextStatus: MatchSuggestionStatus.ENDED_AFTER_FIRST_DATE },
            { id: "cancel", label: "ביטול ההצעה", nextStatus: MatchSuggestionStatus.CANCELLED }
         ]
      },
      THINKING_AFTER_DATE: {
         matchmaker: [
            { id: "proceed-second", label: "המשך לפגישה שניה", nextStatus: MatchSuggestionStatus.PROCEEDING_TO_SECOND_DATE },
            { id: "mark-ended-first", label: "סמן כ'הסתיים לאחר פגישה'", nextStatus: MatchSuggestionStatus.ENDED_AFTER_FIRST_DATE },
            { id: "cancel", label: "ביטול ההצעה", nextStatus: MatchSuggestionStatus.CANCELLED }
         ]
      },
      PROCEEDING_TO_SECOND_DATE: {
         matchmaker: [
            { id: "mark-dating", label: "סמן כ'בתהליך היכרות'", nextStatus: MatchSuggestionStatus.DATING },
            { id: "cancel", label: "ביטול ההצעה", nextStatus: MatchSuggestionStatus.CANCELLED }
         ]
      },
      ENDED_AFTER_FIRST_DATE: {
        matchmaker: [
          { id: "close", label: "סגירת הצעה", nextStatus: MatchSuggestionStatus.CLOSED }
        ]
      },
      MEETING_PENDING: {
         matchmaker: [
            { id: "schedule-meeting", label: "קביעת פגישה", nextStatus: MatchSuggestionStatus.MEETING_SCHEDULED },
            { id: "cancel", label: "ביטול ההצעה", nextStatus: MatchSuggestionStatus.CANCELLED }
         ]
      },
      MEETING_SCHEDULED: {
         matchmaker: [
            { id: "mark-dating", label: "סמן כ'בתהליך היכרות'", nextStatus: MatchSuggestionStatus.DATING },
            { id: "cancel", label: "ביטול ההצעה", nextStatus: MatchSuggestionStatus.CANCELLED }
         ]
      },
      MATCH_APPROVED: {
         matchmaker: [
            { id: "mark-dating", label: "סמן כ'בתהליך היכרות'", nextStatus: MatchSuggestionStatus.DATING },
            { id: "cancel", label: "ביטול ההצעה", nextStatus: MatchSuggestionStatus.CANCELLED }
         ]
      },
      MATCH_DECLINED: {
        matchmaker: [
          { id: "close", label: "סגירת הצעה", nextStatus: MatchSuggestionStatus.CLOSED }
        ]
      },
      DATING: {
        matchmaker: [
          { id: "mark-engaged", label: "עדכון אירוסין", nextStatus: MatchSuggestionStatus.ENGAGED },
          { id: "close", label: "סגירת תהליך", nextStatus: MatchSuggestionStatus.CLOSED },
          { id: "cancel", label: "ביטול השידוך", nextStatus: MatchSuggestionStatus.CANCELLED }
        ]
      },
      ENGAGED: {
        matchmaker: [
          { id: "mark-married", label: "עדכון נישואין", nextStatus: MatchSuggestionStatus.MARRIED },
          { id: "cancel", label: "ביטול אירוסין", nextStatus: MatchSuggestionStatus.CANCELLED }
        ]
      },
      MARRIED: {},
      EXPIRED: {},
      CLOSED: {},
      CANCELLED: {}
    };
    
    if (isFirstParty && actions[suggestion.status]?.firstParty) {
      return actions[suggestion.status].firstParty || [];
    }
    
    if (isSecondParty && actions[suggestion.status]?.secondParty) {
      return actions[suggestion.status].secondParty || [];
    }
    
    if (isMatchmaker && actions[suggestion.status]?.matchmaker) {
      return actions[suggestion.status].matchmaker || [];
    }
    
    return [];
  }
}

// Export singleton instance
export const statusTransitionService = StatusTransitionService.getInstance();
--- End of Content for StatusTransitionService.ts ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\suggestions\services\suggestions\SuggestionService.ts
--------------------------------------------------------------------------------
Content:
// src/app/components/matchmaker/suggestions/services/suggestions/SuggestionService.ts

import { MatchSuggestionStatus, Priority, UserRole } from "@prisma/client";
import prisma from "@/lib/prisma";
import { statusTransitionService, type SuggestionWithParties } from "./StatusTransitionService";
import { initNotificationService } from "../notification/initNotifications";
import type { 
  CreateSuggestionData,
  UpdateSuggestionData,
} from "@/types/suggestions";

// Initialize notification service
const notificationService = initNotificationService();
const BLOCKING_SUGGESTION_STATUSES: MatchSuggestionStatus[] = [
  'FIRST_PARTY_APPROVED',
  'SECOND_PARTY_APPROVED',
  'AWAITING_MATCHMAKER_APPROVAL',
  'CONTACT_DETAILS_SHARED',
  'AWAITING_FIRST_DATE_FEEDBACK',
  'THINKING_AFTER_DATE',
  'PROCEEDING_TO_SECOND_DATE',
  'MEETING_PENDING',
  'MEETING_SCHEDULED',
  'MATCH_APPROVED',
  'DATING',
];
export class SuggestionService {
  private static instance: SuggestionService;

  private constructor() {}

  public static getInstance(): SuggestionService {
    if (!SuggestionService.instance) {
      SuggestionService.instance = new SuggestionService();
    }
    return SuggestionService.instance;
  }

  /**
   * יצירת הצעת שידוך חדשה
   */
  public async createSuggestion(data: CreateSuggestionData): Promise<SuggestionWithParties> {
    // 1. וידוא הרשאות השדכן
    const matchmaker = await prisma.user.findUnique({
      where: { id: data.matchmakerId },
    });

    // קוד חדש ומתוקן
const allowedRoles: UserRole[] = [UserRole.MATCHMAKER, UserRole.ADMIN];
if (!matchmaker || !allowedRoles.includes(matchmaker.role)) {
  throw new Error("Unauthorized - User must be a Matchmaker or Admin");
}
  // --- START: NEW VALIDATION LOGIC ---
    // Fetch both parties to get their names for error messages
    const [firstParty, secondParty] = await Promise.all([
        prisma.user.findUnique({ where: { id: data.firstPartyId } }),
        prisma.user.findUnique({ where: { id: data.secondPartyId } })
    ]);

    if (!firstParty || !secondParty) {
        throw new Error("One or both candidates not found.");
    }
    
    // Check for BLOCKING suggestions for either party
    const blockingSuggestion = await prisma.matchSuggestion.findFirst({
        where: {
            OR: [
                { firstPartyId: data.firstPartyId },
                { secondPartyId: data.firstPartyId },
                { firstPartyId: data.secondPartyId },
                { secondPartyId: data.secondPartyId },
            ],
            status: {
                in: BLOCKING_SUGGESTION_STATUSES,
            },
        },
    });

    if (blockingSuggestion) {
        const hasBlockingSuggestion = (id: string) => 
            blockingSuggestion.firstPartyId === id || blockingSuggestion.secondPartyId === id;
            
        if (hasBlockingSuggestion(data.firstPartyId)) {
            throw new Error(`לא ניתן ליצור הצעה חדשה. ל${firstParty.firstName} ${firstParty.lastName} יש כבר הצעה פעילה.`);
        }
        if (hasBlockingSuggestion(data.secondPartyId)) {
            throw new Error(`לא ניתן ליצור הצעה חדשה. ל${secondParty.firstName} ${secondParty.lastName} יש כבר הצעה פעילה.`);
        }
    }

    // 4. יצירת ההצעה בטרנזקציה
    const suggestion = await prisma.$transaction(async (tx) => {
      // יצירת ההצעה עם הנתונים המנוקים
      console.log('Decision deadline value:', data.decisionDeadline);
      console.log('Decision deadline type:', typeof data.decisionDeadline);
      
      const cleanedData = {
        matchmakerId: data.matchmakerId,
        firstPartyId: data.firstPartyId,
        secondPartyId: data.secondPartyId,
        status: MatchSuggestionStatus.PENDING_FIRST_PARTY,
        priority: data.priority || Priority.MEDIUM,
        matchingReason: data.notes?.matchingReason || null,
        firstPartyNotes: data.notes?.forFirstParty || null,
        secondPartyNotes: data.notes?.forSecondParty || null,
        internalNotes: data.notes?.internal || null,
        followUpNotes: data.notes?.followUpNotes || null,
        decisionDeadline: new Date(data.decisionDeadline),
        firstPartySent: new Date(),
        lastActivity: new Date(),
        lastStatusChange: new Date()
      };

      const newSuggestion = await tx.matchSuggestion.create({
        data: cleanedData,
        include: {
          firstParty: {
            include: { profile: true }
          },
          secondParty: {
            include: { profile: true }
          },
          matchmaker: true,
        },
      });

      // יצירת רשומת היסטוריה ראשונית
      await tx.suggestionStatusHistory.create({
        data: {
          suggestionId: newSuggestion.id,
          status: newSuggestion.status,
          notes: "Initial suggestion created and sent to first party",
        },
      });

      return newSuggestion;
    });

    // 5. שליחת התראות באמצעות מערכת ההתראות המאוחדת
    try {
      console.log('Sending notifications for new suggestion...');
      await notificationService.handleSuggestionStatusChange(
        suggestion,
        {
          channels: ['email', 'whatsapp'],
          notifyParties: ['first'] // רק לצד הראשון בשלב זה
        }
      );
    } catch (error) {
      console.error('Error sending initial suggestion notifications:', error);
      // לא לעצור את התהליך - רק לדווח על השגיאה
    }

    return suggestion;
  }

  /**
   * עדכון פרטי הצעת שידוך
   */
  public async updateSuggestion(
    id: string,
    matchmakerId: string,
    data: UpdateSuggestionData
  ): Promise<SuggestionWithParties> {
    // 1. בדיקת קיום ההצעה והרשאות
    const suggestion = await prisma.matchSuggestion.findUnique({
      where: { id },
      include: {
        firstParty: {
          include: { profile: true }
        },
        secondParty: {
          include: { profile: true }
        },
        matchmaker: true,
      },
    });

    if (!suggestion) {
      throw new Error("Suggestion not found");
    }

    if (suggestion.matchmakerId !== matchmakerId) {
      throw new Error("Unauthorized - Only the original matchmaker can update the suggestion");
    }

    // 2. ניקוי והכנת נתוני העדכון
    const cleanedUpdateData = {
      ...(data.notes?.matchingReason !== undefined && { 
        matchingReason: data.notes.matchingReason 
      }),
      ...(data.notes?.forFirstParty !== undefined && { 
        firstPartyNotes: data.notes.forFirstParty 
      }),
      ...(data.notes?.forSecondParty !== undefined && { 
        secondPartyNotes: data.notes.forSecondParty 
      }),
      ...(data.notes?.internal !== undefined && { 
        internalNotes: data.notes.internal 
      }),
      ...(data.notes?.followUpNotes !== undefined && { 
        followUpNotes: data.notes.followUpNotes 
      }),
      ...(data.priority && { priority: data.priority }),
      ...(data.responseDeadline && { 
        responseDeadline: new Date(data.responseDeadline) 
      }),
      ...(data.decisionDeadline && { 
        decisionDeadline: new Date(data.decisionDeadline) 
      }),
      lastActivity: new Date()
    };

    // 3. עדכון הנתונים
    return await prisma.matchSuggestion.update({
      where: { id },
      data: cleanedUpdateData,
      include: {
        firstParty: {
          include: { profile: true }
        },
        secondParty: {
          include: { profile: true }
        },
        matchmaker: true,
      },
    });
  }

  /**
   * עדכון סטטוס של הצעת שידוך
   */
  public async updateSuggestionStatus(
    id: string,
    newStatus: MatchSuggestionStatus,
    userId: string,
    notes?: string
  ): Promise<SuggestionWithParties> {
    const suggestion = await prisma.matchSuggestion.findUnique({
      where: { id },
      include: {
        firstParty: {
          include: { profile: true }
        },
        secondParty: {
          include: { profile: true }
        },
        matchmaker: true,
      },
    });

    if (!suggestion) {
      throw new Error("Suggestion not found");
    }

    this.validateStatusChangePermission(suggestion, userId, newStatus);
    return await statusTransitionService.transitionStatus(suggestion, newStatus, notes);
  }

  /**
   * קבלת פרטי הצעת שידוך
   */
  public async getSuggestionDetails(id: string, userId: string): Promise<SuggestionWithParties> {
    const suggestion = await prisma.matchSuggestion.findUnique({
      where: { id },
      include: {
        firstParty: {
          include: { profile: true }
        },
        secondParty: {
          include: { profile: true }
        },
        matchmaker: true,
        statusHistory: {
          orderBy: { createdAt: "desc" },
        },
        meetings: {
          include: {
            feedback: true
          }
        },
      },
    });

    if (!suggestion) {
      throw new Error("Suggestion not found");
    }

    if (
      userId !== suggestion.matchmakerId &&
      userId !== suggestion.firstPartyId &&
      userId !== suggestion.secondPartyId
    ) {
      throw new Error("Unauthorized to view this suggestion");
    }

    return suggestion;
  }

  /**
   * קבלת רשימת הצעות שידוך של משתמש
   */
  public async getUserSuggestions(userId: string): Promise<SuggestionWithParties[]> {
    return await prisma.matchSuggestion.findMany({
      where: {
        OR: [
          { matchmakerId: userId },
          { firstPartyId: userId },
          { secondPartyId: userId },
        ],
      },
      include: {
        firstParty: {
          include: { profile: true }
        },
        secondParty: {
          include: { profile: true }
        },
        matchmaker: true,
        statusHistory: {
          orderBy: { createdAt: "desc" },
        },
        meetings: {
          include: {
            feedback: true
          }
        },
      },
      orderBy: {
        lastActivity: "desc",
      },
    });
  }

  /**
   * אימות הרשאות לשינוי סטטוס
   */
  private validateStatusChangePermission(
    suggestion: SuggestionWithParties,
    userId: string,
    newStatus: MatchSuggestionStatus
  ): void {
    const isMatchmaker = userId === suggestion.matchmakerId;
    const isFirstParty = userId === suggestion.firstPartyId;

    switch (newStatus) {
      case MatchSuggestionStatus.FIRST_PARTY_APPROVED:
      case MatchSuggestionStatus.FIRST_PARTY_DECLINED:
        if (!isFirstParty) throw new Error("Only first party can approve/decline at this stage");
        break;

      default:
        if (!isMatchmaker) throw new Error("Only matchmaker can change status at this stage");
    }
  }

  /**
   * בדיקת קיום הצעה פעילה בין שני מועמדים
   */
  private async checkExistingSuggestion(
    firstPartyId: string,
    secondPartyId: string
  ): Promise<SuggestionWithParties | null> {
    return await prisma.matchSuggestion.findFirst({
      where: {
        AND: [
          {
            OR: [
              { firstPartyId, secondPartyId },
              { firstPartyId: secondPartyId, secondPartyId: firstPartyId },
            ],
          },
          {
            status: {
              notIn: [
                MatchSuggestionStatus.CLOSED,
                MatchSuggestionStatus.CANCELLED,
                MatchSuggestionStatus.EXPIRED,
                MatchSuggestionStatus.MATCH_DECLINED,
              ],
            },
          },
        ],
      },
      include: {
        firstParty: {
          include: { profile: true }
        },
        secondParty: {
          include: { profile: true }
        },
        matchmaker: true,
      },
    });
  }
}
export const suggestionService = SuggestionService.getInstance();
--- End of Content for SuggestionService.ts ---

================================================================================
Directory: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\suggestions\utils
================================================================================

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\suggestions\utils\matchingAlgorithm.ts
--------------------------------------------------------------------------------
Content:
// src/components/matchmaker/suggestions/utils/matchingAlgorithm.ts

import { AvailabilityStatus } from '@prisma/client';
import type { UserProfile } from '@/types/next-auth';

export interface MatchScore {
  score: number;
  criteria: MatchCriteria[];
  compatibility: number;
  reasons: string[]; // This will now contain keys, e.g., "age.reasons.ideal"
}

export interface MatchCriteria {
  name: string;
  weight: number;
  score: number;
  reason?: string; // This will also be a key
}

interface AgePreference {
  min: number;
  max: number;
}

const calculateAge = (birthDate: Date): number => {
  const today = new Date();
  const birth = new Date(birthDate);
  let age = today.getFullYear() - birth.getFullYear();
  const monthDiff = today.getMonth() - birth.getMonth();
  if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birth.getDate())) {
    age--;
  }
  return age;
};

const calculateAgeCompatibility = (
  profileA: UserProfile,
  profileB: UserProfile,
  preferences: { ageA?: AgePreference; ageB?: AgePreference }
): MatchCriteria => {
  const ageA = calculateAge(profileA.birthDate);
  const ageB = calculateAge(profileB.birthDate);
  const ageDiff = Math.abs(ageA - ageB);
  
  let score = 0;
  let reason = '';

  const aPrefsMatch = preferences.ageA ? 
    (ageB >= preferences.ageA.min && ageB <= preferences.ageA.max) : true;
  const bPrefsMatch = preferences.ageB ?
    (ageA >= preferences.ageB.min && ageA <= preferences.ageB.max) : true;

  if (aPrefsMatch && bPrefsMatch) {
    if (ageDiff <= 2) {
      score = 1;
      reason = 'age.reasons.ideal';
    } else if (ageDiff <= 5) {
      score = 0.8;
      reason = 'age.reasons.good';
    } else if (ageDiff <= 8) {
      score = 0.6;
      reason = 'age.reasons.fair';
    } else {
      score = 0.4;
      reason = 'age.reasons.large';
    }
  } else {
    score = 0.2;
    reason = 'age.reasons.preferenceMismatch';
  }

  return {
    name: 'age',
    weight: 15,
    score,
    reason
  };
};

const calculateLocationCompatibility = (
  profileA: UserProfile,
  profileB: UserProfile
): MatchCriteria => {
  let score = 0;
  let reason = '';

  if (!profileA.city || !profileB.city) {
    return {
      name: 'location',
      weight: 10,
      score: 0.5,
      reason: 'location.reasons.noData'
    };
  }

  const sameCity = profileA.city === profileB.city;
  const preferredLocationsA = profileA.preferredLocations || [];
  const preferredLocationsB = profileB.preferredLocations || [];

  if (sameCity) {
    score = 1;
    reason = 'location.reasons.sameCity';
  } else if (
    preferredLocationsA.includes(profileB.city) &&
    preferredLocationsB.includes(profileA.city)
  ) {
    score = 0.8;
    reason = 'location.reasons.mutualPreference';
  } else if (
    preferredLocationsA.includes(profileB.city) ||
    preferredLocationsB.includes(profileA.city)
  ) {
    score = 0.6;
    reason = 'location.reasons.oneWayPreference';
  } else {
    score = 0.4;
    reason = 'location.reasons.differentCities';
  }

  return {
    name: 'location',
    weight: 10,
    score,
    reason
  };
};

const calculateReligiousCompatibility = (
  profileA: UserProfile,
  profileB: UserProfile
): MatchCriteria => {
  let score = 0;
  let reason = '';

  if (!profileA.religiousLevel || !profileB.religiousLevel) {
    return {
      name: 'religious',
      weight: 20,
      score: 0.5,
      reason: 'religious.reasons.noData'
    };
  }

  const sameLevel = profileA.religiousLevel === profileB.religiousLevel;
  const preferredLevelsA = profileA.preferredReligiousLevels || [];
  const preferredLevelsB = profileB.preferredReligiousLevels || [];

  if (sameLevel) {
    score = 1;
    reason = 'religious.reasons.sameLevel';
  } else if (
    preferredLevelsA.includes(profileB.religiousLevel) &&
    preferredLevelsB.includes(profileA.religiousLevel)
  ) {
    score = 0.8;
    reason = 'religious.reasons.mutualPreference';
  } else if (
    preferredLevelsA.includes(profileB.religiousLevel) ||
    preferredLevelsB.includes(profileA.religiousLevel)
  ) {
    score = 0.6;
    reason = 'religious.reasons.oneWayPreference';
  } else {
    score = 0.3;
    reason = 'religious.reasons.differentLevels';
  }

  return {
    name: 'religious',
    weight: 20,
    score,
    reason
  };
};

export const calculateMatchScore = (
  profileA: UserProfile,
  profileB: UserProfile
): MatchScore | null => {
  if (
    profileA.gender === profileB.gender ||
    profileA.availabilityStatus !== AvailabilityStatus.AVAILABLE ||
    profileB.availabilityStatus !== AvailabilityStatus.AVAILABLE
  ) {
    return null;
  }

  const ageCriteria = calculateAgeCompatibility(
    profileA,
    profileB,
    {
      ageA: profileA.preferredAgeMin && profileA.preferredAgeMax
        ? { min: profileA.preferredAgeMin, max: profileA.preferredAgeMax }
        : undefined,
      ageB: profileB.preferredAgeMin && profileB.preferredAgeMax
        ? { min: profileB.preferredAgeMin, max: profileB.preferredAgeMax }
        : undefined
    }
  );

  const locationCriteria = calculateLocationCompatibility(profileA, profileB);
  const religiousCriteria = calculateReligiousCompatibility(profileA, profileB);

  const criteria = [
    ageCriteria,
    locationCriteria,
    religiousCriteria
  ];

  const totalWeight = criteria.reduce((sum, c) => sum + c.weight, 0);
  const weightedScore = criteria.reduce((sum, c) => sum + (c.score * c.weight), 0);
  const finalScore = (weightedScore / totalWeight) * 100;

  const reasons = criteria
    .filter(c => c.score >= 0.6)
    .map(c => c.reason)
    .filter((reason): reason is string => reason !== undefined);

  return {
    score: Math.round(finalScore),
    criteria,
    compatibility: finalScore / 100,
    reasons
  };
};
--- End of Content for matchingAlgorithm.ts ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\matchmaker\suggestions\utils\statisticsCalculator.ts
--------------------------------------------------------------------------------
Content:
// /utils/statisticsCalculator.ts
import type { Candidate } from '../../new/types/candidates';
import { Gender, AvailabilityStatus } from '@prisma/client';


export interface AgeDistribution {
  ageGroups: Record<string, number>;
  averageAge: number;
  medianAge: number;
}

export interface LocationDistribution {
  cities: Record<string, number>;
  topCities: Array<{ city: string; count: number }>;
}

export interface ReligiousDistribution {
  levels: Record<string, number>;
  percentages: Record<string, number>;
}

export interface ActivityStats {
  activeLastWeek: number;
  activeLastMonth: number;
  averageLoginFrequency: number;
  completedProfiles: number;
}

export interface MatchingStats {
  totalMatches: number;
  successfulMatches: number;
  averageMatchScore: number;
  matchesByStatus: Record<string, number>;
}

const calculateAge = (birthDate: Date): number => {
  const today = new Date();
  const birth = new Date(birthDate);
  let age = today.getFullYear() - birth.getFullYear();
  const monthDiff = today.getMonth() - birth.getMonth();
  if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birth.getDate())) {
    age--;
  }
  return age;
};

export const calculateAgeDistribution = (candidates: Candidate[]): AgeDistribution => {
  const ages = candidates.map(c => calculateAge(c.profile.birthDate));
  
  // חישוב קבוצות גיל
  const ageGroups = ages.reduce((acc, age) => {
    const group = `${Math.floor(age / 5) * 5}-${Math.floor(age / 5) * 5 + 4}`;
    acc[group] = (acc[group] || 0) + 1;
    return acc;
  }, {} as Record<string, number>);

  // חישוב ממוצע
  const averageAge = ages.reduce((sum, age) => sum + age, 0) / ages.length;

  // חישוב חציון
  const sortedAges = [...ages].sort((a, b) => a - b);
  const medianAge = sortedAges.length % 2 === 0
    ? (sortedAges[sortedAges.length / 2 - 1] + sortedAges[sortedAges.length / 2]) / 2
    : sortedAges[Math.floor(sortedAges.length / 2)];

  return {
    ageGroups,
    averageAge: Math.round(averageAge * 10) / 10,
    medianAge
  };
};

export const calculateLocationDistribution = (
  candidates: Candidate[],
  topCount: number = 10
): LocationDistribution => {
  // ספירת מועמדים לפי ערים
  const cities = candidates.reduce((acc, candidate) => {
    const city = candidate.profile.city || 'לא צוין';
    acc[city] = (acc[city] || 0) + 1;
    return acc;
  }, {} as Record<string, number>);

  // מיון הערים לפי כמות מועמדים
  const topCities = Object.entries(cities)
    .map(([city, count]) => ({ city, count }))
    .sort((a, b) => b.count - a.count)
    .slice(0, topCount);

  return {
    cities,
    topCities
  };
};

export const calculateReligiousDistribution = (candidates: Candidate[]): ReligiousDistribution => {
  const total = candidates.length;
  
  // ספירת מועמדים לפי רמת דתיות
  const levels = candidates.reduce((acc, candidate) => {
    const level = candidate.profile.religiousLevel || 'לא צוין';
    acc[level] = (acc[level] || 0) + 1;
    return acc;
  }, {} as Record<string, number>);

  // חישוב אחוזים
  const percentages = Object.entries(levels).reduce((acc, [level, count]) => {
    acc[level] = Math.round((count / total) * 100);
    return acc;
  }, {} as Record<string, number>);

  return {
    levels,
    percentages
  };
};

export const calculateActivityStats = (candidates: Candidate[]): ActivityStats => {
  const now = new Date();
  const weekAgo = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);
  const monthAgo = new Date(now.getTime() - 30 * 24 * 60 * 60 * 1000);

  const activeLastWeek = candidates.filter(c => 
    c.profile.lastActive && new Date(c.profile.lastActive) >= weekAgo
  ).length;

  const activeLastMonth = candidates.filter(c =>
    c.profile.lastActive && new Date(c.profile.lastActive) >= monthAgo
  ).length;

  // חישוב תדירות התחברות ממוצעת (בימים)
  const loginGaps = candidates
    .filter(c => c.profile.lastActive)
    .map(c => {
      const lastActive = new Date(c.profile.lastActive!);
      return Math.floor((now.getTime() - lastActive.getTime()) / (24 * 60 * 60 * 1000));
    });

  const averageLoginFrequency = loginGaps.length > 0
    ? loginGaps.reduce((sum, gap) => sum + gap, 0) / loginGaps.length
    : 0;

  // ספירת פרופילים מלאים
  const completedProfiles = candidates.filter(c => 
    c.profile.about &&
    c.profile.religiousLevel &&
    c.profile.city &&
    c.images.length > 0
  ).length;

  return {
    activeLastWeek,
    activeLastMonth,
    averageLoginFrequency: Math.round(averageLoginFrequency * 10) / 10,
    completedProfiles
  };
};

export const calculateGenderStats = (candidates: Candidate[]) => {
  const maleCount = candidates.filter(c => c.profile.gender === Gender.MALE).length;
  const femaleCount = candidates.filter(c => c.profile.gender === Gender.FEMALE).length;
  
  return {
    maleCount,
    femaleCount,
    ratio: maleCount / femaleCount,
    total: candidates.length,
    percentages: {
      male: Math.round((maleCount / candidates.length) * 100),
      female: Math.round((femaleCount / candidates.length) * 100)
    }
  };
};

export const calculateAvailabilityStats = (candidates: Candidate[]) => {
  const total = candidates.length;
  const statusCounts = candidates.reduce((acc, candidate) => {
    const status = candidate.profile.availabilityStatus;
    acc[status] = (acc[status] || 0) + 1;
    return acc;
  }, {} as Record<AvailabilityStatus, number>);

  return {
    counts: statusCounts,
    percentages: Object.entries(statusCounts).reduce((acc, [status, count]) => {
      acc[status] = Math.round((count / total) * 100);
      return acc;
    }, {} as Record<string, number>)
  };
};

export const calculateCompletionStats = (candidates: Candidate[]) => {
  const total = candidates.length;
  const  stats = {
    hasPhotos: 0,
    hasAbout: 0,
    hasReferences: 0,
    hasPreferences: 0,
    isVerified: 0,
    fullyCompleted: 0
  };

  candidates.forEach(candidate => {
    if (candidate.images.length > 0) stats.hasPhotos++;
    if (candidate.profile.about) stats.hasAbout++;
    if (candidate.profile.preferredAgeMin && candidate.profile.preferredAgeMax) stats.hasPreferences++;
    if (candidate.isVerified) stats.isVerified++;
    
    // בדיקת פרופיל מלא
    if (
      candidate.images.length > 0 &&
      candidate.profile.about &&
      candidate.profile.religiousLevel &&
      candidate.profile.city &&
      candidate.profile.preferredAgeMin &&
      candidate.profile.preferredAgeMax
    ) {
      stats.fullyCompleted++;
    }
  });

  return {
    counts: stats,
    percentages: {
      hasPhotos: Math.round((stats.hasPhotos / total) * 100),
      hasAbout: Math.round((stats.hasAbout / total) * 100),
      hasReferences: Math.round((stats.hasReferences / total) * 100),
      hasPreferences: Math.round((stats.hasPreferences / total) * 100),
      isVerified: Math.round((stats.isVerified / total) * 100),
      fullyCompleted: Math.round((stats.fullyCompleted / total) * 100)
    }
  };
};

const statisticsCalculator = {
  calculateAgeDistribution,
  calculateLocationDistribution,
  calculateReligiousDistribution,
  calculateActivityStats,
  calculateGenderStats,
  calculateAvailabilityStats,
  calculateCompletionStats
};

export default statisticsCalculator;
--- End of Content for statisticsCalculator.ts ---

