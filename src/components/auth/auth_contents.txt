################################################################################
# Directory Content Map For: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\auth
# Generated on: 2025-09-01 12:59:37
################################################################################

================================================================================
Directory: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\auth
================================================================================

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\auth\AuthError.tsx
--------------------------------------------------------------------------------
Content:
// src/app/components/auth/AuthError.tsx

'use client';

import { useSearchParams, useRouter } from "next/navigation";
import { Card, CardHeader, CardTitle, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { AlertTriangle } from "lucide-react";

export default function AuthError() {
  const searchParams = useSearchParams();
  const router = useRouter();
  const error = searchParams.get("error");

  const getErrorMessage = (error: string | null) => {
    switch (error) {
      case "CredentialsSignin": return "פרטי ההתחברות שהזנת אינם נכונים. אנא נסה שנית.";
      case "OAuthAccountNotLinked": return "כתובת מייל זו כבר משויכת לספק אחר (למשל, גוגל). אנא התחבר באמצעותו.";
      default: return "אירעה שגיאה לא צפויה בתהליך האימות. אנא נסה שנית.";
    }
  };

  return (
    <Card className="w-full max-w-md">
      <CardHeader className="text-center">
        <AlertTriangle className="mx-auto h-12 w-12 text-red-500" />
        <CardTitle className="text-2xl font-bold text-red-600 mt-4">
          אירעה שגיאה
        </CardTitle>
      </CardHeader>
      <CardContent className="space-y-4 text-center">
        <p className="text-gray-600">{getErrorMessage(error)}</p>
        <Button onClick={() => router.push("/auth/signin")} className="w-full">
          חזרה לדף ההתחברות
        </Button>
      </CardContent>
    </Card>
  );
}
--- End of Content for AuthError.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\auth\ConsentCheckbox.tsx
--------------------------------------------------------------------------------
Content:
// src/components/auth/ConsentCheckbox.tsx
'use client';

import React from 'react';
import Link from 'next/link';
import type { RegisterStepsDict } from '@/types/dictionaries/auth';

interface ConsentCheckboxProps {
  checked: boolean;
  onChange: (isChecked: boolean) => void;
  error?: string | null;
  dict: RegisterStepsDict['consentCheckbox'];
}

const ConsentCheckbox: React.FC<ConsentCheckboxProps> = ({
  checked,
  onChange,
  error,
  dict,
}) => {
  const textParts = dict.text.split(/\{termsLink\}|\{privacyLink\}/);

  return (
    <div className="space-y-2">
      <div className="flex items-start space-x-2 rtl:space-x-reverse">
        <input
          type="checkbox"
          id="termsConsent"
          checked={checked}
          onChange={(e) => onChange(e.target.checked)}
          className={`mt-1 h-4 w-4 text-cyan-600 border-gray-300 rounded focus:ring-cyan-500 ${error ? 'border-red-500' : ''}`}
        />
        <label htmlFor="termsConsent" className="text-sm text-gray-700">
          {textParts[0]}
          <Link
            href="/legal/terms-of-service"
            target="_blank"
            className="font-medium text-cyan-600 hover:text-cyan-700 underline"
          >
            {dict.termsLink}
          </Link>
          {textParts[1]}
          <Link
            href="/legal/privacy-policy"
            target="_blank"
            className="font-medium text-cyan-600 hover:text-cyan-700 underline"
          >
            {dict.privacyLink}
          </Link>
          {textParts[2]}
        </label>
      </div>
      {error && <p className="text-xs text-red-500">{error}</p>}
    </div>
  );
};

export default ConsentCheckbox;
--- End of Content for ConsentCheckbox.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\auth\ForgotPasswordForm.tsx
--------------------------------------------------------------------------------
Content:
// src/app/components/auth/ForgotPasswordForm.tsx
"use client";

import { useState, FormEvent } from "react";
import { useRouter } from "next/navigation"; // <--- 1. Import useRouter
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Mail, Loader2, AlertCircle } from "lucide-react";
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import Link from "next/link";

export default function ForgotPasswordForm() {
  const router = useRouter(); // <--- 2. Initialize router
  const [email, setEmail] = useState("");
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  // The success message might not be seen if we redirect immediately.
  // Consider removing it or using a toast notification system for a brief message before redirect.
  // const [successMessage, setSuccessMessage] = useState<string | null>(null);

  const handleSubmit = async (e: FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    setIsLoading(true);
    setError(null);
    // setSuccessMessage(null); // If redirecting, this isn't needed

    if (!email) {
      setError("אנא הזן את כתובת המייל שלך.");
      setIsLoading(false);
      return;
    }

    try {
      const response = await fetch("/api/auth/request-password-reset", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ email }),
      });

      const data = await response.json();

      if (!response.ok || !data.success) {
        throw new Error(data.error || "אירעה שגיאה בבקשת איפוס הסיסמה.");
      }

      // 3. Redirect to the reset password page on success
      // The API's success message (data.message) is generic for security and won't be shown here.
      // The ResetPasswordForm will guide the user.
      router.push(`/auth/reset-password?email=${encodeURIComponent(email)}`);
      
      // setEmail(""); // Clearing email is not strictly necessary as we are navigating away

    } catch (err) {
      setError(err instanceof Error ? err.message : "אירעה שגיאה לא צפויה.");
      setIsLoading(false); // Ensure isLoading is set to false in case of an error before navigation
    }
    // setIsLoading(false); // If navigation occurs, this line might not be reached or necessary.
                         // It's important that isLoading is false if an error occurs and we don't navigate.
  };

  return (
    <div className="w-full max-w-md bg-white rounded-xl shadow-xl overflow-hidden relative">
      <div className="absolute top-0 left-0 right-0 h-2 bg-gradient-to-r from-cyan-500 to-pink-500"></div>
      <div className="p-6 sm:p-8">
        <div className="text-center mb-6">
          <h1 className="text-2xl font-bold text-gray-800 mb-2">
            שכחת סיסמה?
          </h1>
          <p className="text-gray-600 text-sm">
            אין בעיה! הזן את כתובת המייל שלך למטה, ואם היא קיימת במערכת, נשלח לך קוד לאיפוס הסיסמה.
          </p>
        </div>

        {error && (
          <Alert variant="destructive" className="mb-4">
            <AlertCircle className="h-4 w-4" />
            <AlertTitle>שגיאה</AlertTitle>
            <AlertDescription>{error}</AlertDescription>
          </Alert>
        )}

        {/* Success message is removed because we are redirecting. 
            If you want to show a message on the next page, 
            you could pass a query param like ?request_sent=true
        */}
        {/*
        {successMessage && (
          <Alert variant="default" className="mb-4 bg-green-50 border-green-200 text-green-700">
            <CheckCircle className="h-4 w-4 text-green-600" />
            <AlertTitle>הבקשה נשלחה</AlertTitle>
            <AlertDescription>{successMessage}</AlertDescription>
          </Alert>
        )}
        */}
        
        {/* Form is always shown unless you conditionally hide it during loading/after success,
            but since we redirect, this logic can be simpler.
        */}
        {/* {!successMessage && ( // This condition can be removed if successMessage state is removed */}
          <form onSubmit={handleSubmit} className="space-y-6">
            <div className="space-y-1">
              <label htmlFor="email-forgot" className="block text-sm font-medium text-gray-700">
                כתובת מייל
              </label>
              <div className="relative">
                <Mail className="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-5 w-5" />
                <Input
                  type="email"
                  id="email-forgot"
                  value={email}
                  onChange={(e) => setEmail(e.target.value)}
                  placeholder="you@example.com"
                  required
                  className="w-full pr-10 pl-3 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-cyan-200 focus:border-cyan-500 focus:outline-none"
                  disabled={isLoading}
                />
              </div>
            </div>

            <Button
              type="submit"
              disabled={isLoading}
              className="w-full py-3 bg-gradient-to-r from-cyan-500 to-pink-500 hover:from-cyan-600 hover:to-pink-600 shadow-lg flex items-center justify-center gap-2"
            >
              {isLoading ? (
                <>
                  <Loader2 className="h-5 w-5 animate-spin mr-2" />
                  <span>שולח...</span>
                </>
              ) : (
                "שלח בקשה לאיפוס סיסמה" // Changed text slightly
              )}
            </Button>
          </form>
        {/* )} */}

        <div className="mt-6 text-center">
          <Link
            href="/auth/signin"
            className="text-sm text-cyan-600 hover:text-cyan-700 hover:underline"
          >
            חזרה להתחברות
          </Link>
        </div>
      </div>
    </div>
  );
}
--- End of Content for ForgotPasswordForm.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\auth\ProgressBar.tsx
--------------------------------------------------------------------------------
Content:
"use client";

import React from "react";
import { motion } from "framer-motion";

interface ProgressBarProps {
  currentStep: number;
  totalSteps: number;
}

const ProgressBar: React.FC<ProgressBarProps> = ({
  currentStep,
  totalSteps,
}) => {
  // Calculate percentage
  const percentage = (currentStep / totalSteps) * 100;

  // Generate step markers
  const steps = Array.from({ length: totalSteps }, (_, i) => i + 1);

  return (
    <div className="w-full relative">
      {/* Step labels */}
      <div className="flex justify-between mb-2">
        {steps.map((step) => (
          <div
            key={step}
            className={`text-xs font-medium transition-colors duration-300 ${
              step <= currentStep ? "text-gray-800" : "text-gray-400"
            }`}
          >
            שלב {step}
          </div>
        ))}
      </div>

      {/* Progress bar track */}
      <div className="h-2 bg-gray-200 rounded-full overflow-hidden">
        {/* Animated progress fill */}
        <motion.div
          className="h-full bg-gradient-to-r from-cyan-500 to-pink-500"
          initial={{ width: `${((currentStep - 1) / totalSteps) * 100}%` }}
          animate={{ width: `${percentage}%` }}
          transition={{ duration: 0.5, ease: "easeInOut" }}
        />
      </div>

      {/* Step markers */}
      <div className="relative flex justify-between mt-1">
        {steps.map((step) => (
          <motion.div
            key={step}
            className={`w-6 h-6 rounded-full flex items-center justify-center -mt-4 z-10 transition-all duration-300
              ${
                step <= currentStep
                  ? "bg-gradient-to-r from-cyan-500 to-pink-500 shadow-md text-white"
                  : "bg-white border-2 border-gray-300 text-gray-500"
              }`}
            initial={{ scale: step === currentStep ? 0.8 : 1 }}
            animate={{ scale: step === currentStep ? 1.1 : 1 }}
            transition={{ duration: 0.3 }}
          >
            <span className="text-xs font-semibold">{step}</span>
          </motion.div>
        ))}
      </div>
    </div>
  );
};

export default ProgressBar;
--- End of Content for ProgressBar.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\auth\RegisterSteps.tsx
--------------------------------------------------------------------------------
Content:
// src/components/auth/RegisterSteps.tsx
'use client';

import React, { useEffect, useState } from 'react';
import { useRouter, useSearchParams } from 'next/navigation';
import { useSession } from 'next-auth/react';
import { RegistrationProvider, useRegistration } from './RegistrationContext';
import WelcomeStep from './steps/WelcomeStep';
import BasicInfoStep from './steps/BasicInfoStep';
import EmailVerificationCodeStep from './steps/EmailVerificationCodeStep';
import PersonalDetailsStep from './steps/PersonalDetailsStep';
import OptionalInfoStep from './steps/OptionalInfoStep';
import CompleteStep from './steps/CompleteStep';
import ProgressBar from './ProgressBar';
import { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert';
import { Info, Loader2 } from 'lucide-react';
import type { User as SessionUserType } from '@/types/next-auth';
import type { RegisterStepsDict } from '@/types/dictionaries/auth';

/**
 * הגדרת ה-Props עבור הקומפוננטה הראשית.
 * היא מקבלת את המילון (dict) ואת השפה (locale).
 */
interface RegisterStepsProps {
  dict: RegisterStepsDict;
  locale: 'he' | 'en'; // הוספת locale לממשק
}

/**
 * רכיב התוכן הפנימי שמכיל את הלוגיקה המרכזית של תהליך ההרשמה.
 * הוא מקבל את המילון והשפה מההורה שלו.
 */
const RegisterStepsContent: React.FC<{
  dict: RegisterStepsDict;
  locale: 'he' | 'en';
}> = ({
  dict,
  locale, // קבלת locale כ-prop
}) => {
  const {
    data: registrationContextData,
    initializeFromSession,
    resetForm,
    goToStep,
  } = useRegistration();
  const router = useRouter();
  const { data: session, status: sessionStatus } = useSession();
  const searchParams = useSearchParams();

  const [showIncompleteProfileMessage, setShowIncompleteProfileMessage] =
    useState(false);
  const [initializationAttempted, setInitializationAttempted] = useState(false);

  // useEffect שמנהל את מצב ההרשמה והסשן
  useEffect(() => {
    const reasonParam = searchParams.get('reason');
    if (
      (reasonParam === 'complete_profile' || reasonParam === 'verify_phone') &&
      !registrationContextData.isCompletingProfile
    ) {
      setShowIncompleteProfileMessage(true);
    } else {
      setShowIncompleteProfileMessage(false);
    }
  }, [searchParams, registrationContextData.isCompletingProfile]);

  useEffect(() => {
    if (sessionStatus === 'loading') {
      return;
    }
    if (sessionStatus === 'authenticated' && session?.user) {
      const user = session.user as SessionUserType;
      if (
        user.isProfileComplete &&
        user.isPhoneVerified &&
        user.termsAndPrivacyAcceptedAt
      ) {
        if (
          typeof window !== 'undefined' &&
          window.location.pathname !== '/profile'
        ) {
          router.push('/profile');
        }
        return;
      }

      const needsSetup =
        !user.termsAndPrivacyAcceptedAt ||
        !user.isProfileComplete ||
        !user.isPhoneVerified;
      if (
        needsSetup &&
        (!initializationAttempted ||
          (registrationContextData.step === 0 &&
            !registrationContextData.isVerifyingEmailCode))
      ) {
        initializeFromSession(user);
        setInitializationAttempted(true);
      }
    } else if (sessionStatus === 'unauthenticated') {
      const registrationInProgress =
        registrationContextData.step > 0 ||
        registrationContextData.isVerifyingEmailCode;
      if (registrationInProgress) {
        resetForm();
      }
    }
  }, [
    sessionStatus,
    session,
    router,
    registrationContextData,
    initializeFromSession,
    resetForm,
    goToStep,
    initializationAttempted,
    searchParams,
  ]);

  /**
   * פונקציה שמחזירה את רכיב-השלב המתאים למצב הנוכחי.
   * זה המקום בו אנו מוודאים שה-prop 'locale' מועבר לכל רכיב-בן שצריך אותו.
   */
  const renderStep = (): React.ReactNode => {
    if (sessionStatus === 'loading') {
      return (
        <div className="flex justify-center p-10">
          <Loader2 className="h-8 w-8 animate-spin text-cyan-600" />
        </div>
      );
    }

    if (
      registrationContextData.isVerifyingEmailCode &&
      !registrationContextData.isCompletingProfile
    ) {
      // ============================ התיקון שפותר את השגיאה ============================
      // מעבירים את ה-locale לרכיב אימות המייל, כפי שנדרש בממשק שלו
      return (
        <EmailVerificationCodeStep
          dict={dict.steps.emailVerification}
          locale={locale}
        />
      );
      // ==============================================================================
    }

    if (registrationContextData.isCompletingProfile) {
      switch (registrationContextData.step) {
        case 2:
          return (
            <PersonalDetailsStep
              dict={dict.steps.personalDetails}
              consentDict={dict.consentCheckbox}
            />
          );
        case 3:
          return <OptionalInfoStep dict={dict.steps.optionalInfo}  locale={locale}/>;
        case 4:
          return <CompleteStep dict={dict.steps.complete} />;
        default:
          resetForm();
          return <WelcomeStep dict={dict.steps.welcome}  locale={locale} />;
      }
    }

    switch (registrationContextData.step) {
      case 0:
        return <WelcomeStep dict={dict.steps.welcome}  locale={locale}/>;
      case 1:
        return (
          <BasicInfoStep
            dict={dict.steps.basicInfo}
            consentDict={dict.consentCheckbox}
            locale={locale} // <<<<<<<<<<<< העברת ה-locale גם לשלב זה
          />
        );
      default:
        resetForm();
        return <WelcomeStep dict={dict.steps.welcome}  locale={locale}/>;
    }
  };

  // לוגיקה לקביעת הכותרות וסרגל ההתקדמות (משתמשת במילון)
  let pageTitle = dict.headers.registerTitle;
  let stepDescription = dict.headers.welcomeDescription;
  let currentProgressBarStep = 0;
  let totalProgressBarSteps = 3;
  let showProgressBar = false;

  if (
    registrationContextData.isVerifyingEmailCode &&
    !registrationContextData.isCompletingProfile
  ) {
    pageTitle = dict.headers.verifyEmailTitle;
    stepDescription = dict.headers.verifyEmailDescription.replace(
      '{{email}}',
      registrationContextData.emailForVerification || ''
    );
    showProgressBar = true;
    currentProgressBarStep = 1;
  } else if (registrationContextData.isCompletingProfile) {
    pageTitle = dict.headers.completeProfileTitle;
    totalProgressBarSteps = 2;
    if (registrationContextData.step === 2) {
      stepDescription = session?.user?.termsAndPrivacyAcceptedAt
        ? dict.headers.personalDetailsConsentedDescription
        : dict.headers.personalDetailsDescription;
      currentProgressBarStep = 1;
      showProgressBar = true;
    } else if (registrationContextData.step === 3) {
      stepDescription = dict.headers.optionalInfoDescription;
      currentProgressBarStep = 2;
      showProgressBar = true;
    } else if (registrationContextData.step === 4) {
      stepDescription = session?.user?.isPhoneVerified
        ? dict.headers.completionReadyDescription
        : dict.headers.completionPhoneVerificationDescription;
      showProgressBar = false;
    } else {
      stepDescription = dict.headers.loadingProfileDescription;
    }
  } else {
    if (registrationContextData.step === 1) {
      pageTitle = dict.headers.registerTitle;
      stepDescription = dict.headers.accountCreationDescription;
      currentProgressBarStep = 1;
      showProgressBar = true;
    }
  }

  return (
    <div className="min-h-screen flex flex-col items-center justify-center bg-gradient-to-br from-cyan-50 via-white to-pink-50 p-4 sm:p-8">
      <div className="mb-6 text-center">
        <h1 className="text-transparent bg-clip-text bg-gradient-to-r from-cyan-500 to-pink-500 text-3xl font-bold mb-2">
          {pageTitle}
        </h1>
        <p className="text-gray-600 max-w-md mx-auto">{stepDescription}</p>
      </div>

      {showIncompleteProfileMessage && (
        <Alert className="mb-6 w-full max-w-md bg-yellow-50 border-yellow-200 text-yellow-800 shadow-md">
          <Info className="h-5 w-5 text-yellow-600 flex-shrink-0 mt-1" />
          <div className="ml-3 rtl:mr-3 rtl:ml-0">
            <AlertTitle className="font-semibold mb-1">
              {dict.incompleteProfileAlert.title}
            </AlertTitle>
            <AlertDescription className="text-sm">
              {searchParams.get('reason') === 'verify_phone'
                ? dict.incompleteProfileAlert.verifyPhoneDescription
                : dict.incompleteProfileAlert.description}
            </AlertDescription>
          </div>
        </Alert>
      )}

      {showProgressBar && (
        <div className="w-full max-w-md mb-6">
          <ProgressBar
            currentStep={currentProgressBarStep}
            totalSteps={totalProgressBarSteps}
          />
        </div>
      )}

      <div className="w-full max-w-md bg-white rounded-xl shadow-xl overflow-hidden relative">
        <div className="p-6 sm:p-8">{renderStep()}</div>
      </div>

      <div className="mt-8 text-center text-sm text-gray-500">
        {dict.contactSupport}{' '}
        <a href="/contact" className="text-cyan-600 hover:underline">
          {dict.contactSupportLink}
        </a>
      </div>
    </div>
  );
};

/**
 * רכיב הייצוא הראשי (Wrapper).
 * הוא עוטף את כל הלוגיקה ב-RegistrationProvider כדי לספק את הקונטקסט
 * לכל רכיבי-הבן שלו. הוא מקבל את המילון והשפה מה-page.tsx.
 */
export default function RegisterSteps({ dict, locale }: RegisterStepsProps) {
  return (
    <RegistrationProvider>
      <RegisterStepsContent dict={dict} locale={locale} />
    </RegistrationProvider>
  );
}
--- End of Content for RegisterSteps.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\auth\RegistrationContext.tsx
--------------------------------------------------------------------------------
Content:
// src/app/components/auth/RegistrationContext.tsx
"use client";

import React, {
  createContext,
  useContext,
  useState,
  ReactNode,
  useCallback,
} from "react";
import { Gender, UserStatus, UserSource } from "@prisma/client";
import type { User as SessionUserType } from "@/types/next-auth";

export interface RegistrationData {
  email: string;
  password: string;
  firstName: string;
  lastName: string;
  phone: string;
  gender: Gender | ""; // "" for unselected, or actual Gender enum value
  birthDate: string;
  maritalStatus: string;
  height?: number;
  occupation?: string;
  education?: string;
  step: number;
  isGoogleSignup: boolean;
  isCompletingProfile: boolean;
  isVerifyingEmailCode: boolean;
  emailForVerification: string | null;
}

const initialRegistrationData: RegistrationData = {
  email: "",
  password: "",
  firstName: "",
  lastName: "",
  phone: "",
  gender: "", // Initialized as empty string
  birthDate: "",
  maritalStatus: "",
  height: undefined,
  occupation: "",
  education: "",
  step: 0,
  isGoogleSignup: false,
  isCompletingProfile: false,
  isVerifyingEmailCode: false,
  emailForVerification: null,
};

interface RegistrationContextType {
  data: RegistrationData;
  setData: React.Dispatch<React.SetStateAction<RegistrationData>>;
  updateField: <K extends keyof RegistrationData>(
    field: K,
    value: RegistrationData[K]
  ) => void;
  nextStep: () => void;
  prevStep: () => void;
  goToStep: (step: number) => void;
  resetForm: () => void;
  setGoogleSignup: (googleUserData: {
    email: string;
    firstName?: string;
    lastName?: string;
  }) => void;
  initializeFromSession: (sessionUser: SessionUserType) => void;
  proceedToEmailVerification: (email: string) => void;
  completeEmailVerification: () => void;
  exitEmailVerification: () => void;
}

const RegistrationContext = createContext<RegistrationContextType>({
  data: initialRegistrationData,
  setData: () => console.warn("RegistrationProvider not found"),
  updateField: () => console.warn("RegistrationProvider not found"),
  nextStep: () => console.warn("RegistrationProvider not found"),
  prevStep: () => console.warn("RegistrationProvider not found"),
  goToStep: () => console.warn("RegistrationProvider not found"),
  resetForm: () => console.warn("RegistrationProvider not found"),
  setGoogleSignup: () => console.warn("RegistrationProvider not found"),
  initializeFromSession: () => console.warn("RegistrationProvider not found"),
  proceedToEmailVerification: () => console.warn("RegistrationProvider not found"),
  completeEmailVerification: () => console.warn("RegistrationProvider not found"),
  exitEmailVerification: () => console.warn("RegistrationProvider not found"),
});

export const RegistrationProvider: React.FC<{ children: ReactNode }> = ({
  children,
}) => {
  const [data, setData] = useState<RegistrationData>(initialRegistrationData);

  const updateField = useCallback(
    <K extends keyof RegistrationData>(
      field: K,
      value: RegistrationData[K]
    ) => {
      setData((prev) => ({ ...prev, [field]: value }));
    },
    []
  );

  const nextStep = useCallback(() => {
    setData((prev) => {
      if (prev.isVerifyingEmailCode) return prev;
      const currentMaxStep = 3;
      if (prev.step === 1 && !prev.isCompletingProfile && !prev.isGoogleSignup) return prev;
      if (prev.step < currentMaxStep) return { ...prev, step: prev.step + 1 };
      if (prev.step === currentMaxStep) return { ...prev, step: 4 };
      return prev;
    });
  }, []);

  const prevStep = useCallback(() => {
    setData((prev) => {
      if (prev.isVerifyingEmailCode) {
        return { ...prev, isVerifyingEmailCode: false, emailForVerification: null, step: 1 };
      }
      if (prev.step > 0) {
        if (prev.step === 4) return { ...prev, step: 3 };
        return { ...prev, step: prev.step - 1 };
      }
      return prev;
    });
  }, []);

  const goToStep = useCallback((stepNum: number) => {
    setData((prev) => ({
      ...prev,
      step: stepNum,
      isVerifyingEmailCode: false,
      emailForVerification: null,
    }));
  }, []);

  const resetForm = useCallback(() => {
    setData(initialRegistrationData);
  }, []);

  const setGoogleSignup = useCallback(
    (googleUserData: { email: string; firstName?: string; lastName?: string }) => {
      setData({
        ...initialRegistrationData,
        email: googleUserData.email,
        isGoogleSignup: true,
      });
    },
    []
  );

  const initializeFromSession = useCallback(
    (sessionUser: SessionUserType) => {
      // אנחנו משתמשים בצורת העדכון הפונקציונלית של setData
      // כדי לקבל גישה למצב הקודם של הקונטקסט (prevData).
      setData((prevData) => {
        const isGoogleAcc = !!(
          sessionUser.source === UserSource.REGISTRATION &&
          sessionUser.accounts?.some(acc => acc.provider === 'google')
        );

        // המרת מגדר מהסשן לטיפוס הנכון
        const sessionGender: Gender | "" = sessionUser.profile?.gender || "";

        // אובייקט זה תמיד יכיל את הנתונים המעודכנים ביותר מהסשן,
        // וישמש לעדכון שדות הטופס בקונטקסט.
        const baseStateFromSession = {
          email: sessionUser.email || "",
          firstName: sessionUser.firstName || "",
          lastName: sessionUser.lastName || "",
          phone: sessionUser.phone || "",
          gender: sessionGender,
          birthDate: sessionUser.profile?.birthDate
            ? new Date(sessionUser.profile.birthDate).toISOString().split("T")[0]
            : "",
          maritalStatus: sessionUser.profile?.maritalStatus || "",
          height: sessionUser.profile?.height ?? undefined,
          occupation: sessionUser.profile?.occupation || "",
          education: sessionUser.profile?.education || "",
        };

        // תרחיש 1: משתמש חדש עם אימייל/סיסמה צריך לאמת מייל.
        // זהו תחילתו של תהליך, ולכן זה בסדר לאפס את המצב לנקודת התחלה נקייה.
        if (
          sessionUser.status === UserStatus.PENDING_EMAIL_VERIFICATION &&
          !isGoogleAcc &&
          !sessionUser.isVerified
        ) {
          return {
            ...initialRegistrationData, // איפוס המצב
            ...baseStateFromSession,    // מילוי במידע הבסיסי מהסשן
            isVerifyingEmailCode: true,
            emailForVerification: sessionUser.email,
            step: 1,
            isCompletingProfile: false,
            isGoogleSignup: false,
          };
        }

        // תרחיש 2: המשתמש נכנס לתהליך השלמת פרופיל בפעם הראשונה
        // (למשל, אחרי התחברות עם גוגל, או אחרי אימות מייל).
        // גם זו התחלה של תהליך, ואיפוס המצב הוא תקין.
        if (!sessionUser.isProfileComplete) {
          return {
            ...initialRegistrationData, // איפוס המצב
            ...baseStateFromSession,    // מילוי במידע הבסיסי מהסשן
            isCompletingProfile: true,
            isGoogleSignup: isGoogleAcc,
            step: 2, // התחל משלב פרטים אישיים
            isVerifyingEmailCode: false,
          };
        }

        // תרחיש 3: הפרופיל הושלם, אך הטלפון עדיין לא אומת.
        // >>> זהו התיקון הקריטי <<<
        // מצב זה מתרחש אחרי שהמשתמש לחץ "שלח" ב-OptionalInfoStep.
        // כאן אסור לנו לאפס את נתוני הטופס.
        if (sessionUser.isProfileComplete && !sessionUser.isPhoneVerified) {
          return {
            ...prevData, // *** התיקון: שמור את נתוני הטופס הקיימים (גובה, עיסוק וכו') ***
            ...baseStateFromSession, // עדכן את השדות עם המידע העדכני ביותר מה-DB
            isCompletingProfile: true,
            isGoogleSignup: isGoogleAcc,
            step: 4, // זה יעביר נכון לרכיב CompleteStep
            isVerifyingEmailCode: false,
          };
        }
        
        // תרחיש ברירת מחדל: המשתמש מאומת אך לא מתאים לאף תרחיש "השלמה" ספציפי.
        // לדוגמה, בריענון עמוד. אנחנו רק רוצים לסנכרן את הקונטקסט עם הסשן
        // מבלי לאפס את כל המצב (כמו השלב הנוכחי בתהליך).
        return { 
            ...prevData, // שמור על המצב הקיים של הקונטקסט
            ...baseStateFromSession, // ועדכן אותו עם מידע טרי מהסשן
            isGoogleSignup: isGoogleAcc,
        };
      });
    },
    [] // התלויות ריקות כי setData מובטח להיות יציב ולא נעשה שימוש ב-state חיצוני אחר.
  );

  const proceedToEmailVerification = useCallback((emailToVerify: string) => {
    setData((prev) => ({
      ...prev,
      isVerifyingEmailCode: true,
      emailForVerification: emailToVerify,
    }));
  }, []);

  const completeEmailVerification = useCallback(() => {
    setData((prev) => ({
      ...prev,
      isVerifyingEmailCode: false,
      emailForVerification: null,
      isCompletingProfile: true,
      step: 2,
    }));
  }, []);

  const exitEmailVerification = useCallback(() => {
    setData((prev) => ({
      ...prev,
      isVerifyingEmailCode: false,
      emailForVerification: null,
      step: 1,
    }));
  }, []);

  const value: RegistrationContextType = {
    data,
    setData,
    updateField,
    nextStep,
    prevStep,
    goToStep,
    resetForm,
    setGoogleSignup,
    initializeFromSession,
    proceedToEmailVerification,
    completeEmailVerification,
    exitEmailVerification,
  };

  return (
    <RegistrationContext.Provider value={value}>
      {children}
    </RegistrationContext.Provider>
  );
};

export const useRegistration = (): RegistrationContextType => {
  const context = useContext(RegistrationContext);
  if (context === undefined || Object.keys(context).every(
      (key) =>
        typeof context[key as keyof RegistrationContextType] === "function" &&
        context[key as keyof RegistrationContextType]
          .toString()
          .includes("RegistrationProvider not found")
    )
  ) {
    throw new Error(
      "useRegistration must be used within a RegistrationProvider"
    );
  }
  return context;
};
--- End of Content for RegistrationContext.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\auth\ResetPasswordForm.tsx
--------------------------------------------------------------------------------
Content:
// src/app/components/auth/ResetPasswordForm.tsx
'use client';

import { useState, FormEvent, useEffect } from 'react';
import { useRouter, useSearchParams } from 'next/navigation';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import {
  Lock,
  KeySquare,
  Loader2,
  AlertCircle,
  CheckCircle,
  Eye,
  EyeOff,
  Mail,
} from 'lucide-react';
import { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert';
import Link from 'next/link';

// Password validation function (similar to your RegisterForm)
const validatePassword = (value: string): string | null => {
  const passwordRegex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)[a-zA-Z\d]{8,}$/;
  if (!passwordRegex.test(value)) {
    return 'הסיסמה חייבת להכיל לפחות 8 תווים, אות גדולה, אות קטנה ומספר.';
  }
  return null;
};

export default function ResetPasswordForm() {
  const router = useRouter();
  const searchParams = useSearchParams();

  const [email, setEmail] = useState(''); // To prefill if passed, or keep empty
  const [otp, setOtp] = useState('');
  const [newPassword, setNewPassword] = useState('');
  const [confirmPassword, setConfirmPassword] = useState('');

  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [passwordError, setPasswordError] = useState<string | null>(null);
  const [successMessage, setSuccessMessage] = useState<string | null>(null);
  const [showPassword, setShowPassword] = useState(false);
  const [showConfirmPassword, setShowConfirmPassword] = useState(false);

  useEffect(() => {
    const emailFromQuery = searchParams.get('email');
    const tokenFromQuery = searchParams.get('token'); // If you decide to also prefill OTP via token

    if (emailFromQuery) {
      setEmail(emailFromQuery);
    }
    if (tokenFromQuery) {
      // This 'token' from query is the OTP
      setOtp(tokenFromQuery);
    }
  }, [searchParams]);

  const handleSubmit = async (e: FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    setIsLoading(true);
    setError(null);
    setPasswordError(null);
    setSuccessMessage(null);

    if (!email) {
      setError('כתובת המייל חסרה. אנא חזור להתחלה ונסה שנית.');
      setIsLoading(false);
      return;
    }
    if (!otp || otp.length !== 6 || !/^\d+$/.test(otp)) {
      setError('קוד האימות (OTP) חייב להיות בן 6 ספרות.');
      setIsLoading(false);
      return;
    }
    const passValidationError = validatePassword(newPassword);
    if (passValidationError) {
      setPasswordError(passValidationError);
      setIsLoading(false);
      return;
    }
    if (newPassword !== confirmPassword) {
      setError('הסיסמאות אינן תואמות.');
      setIsLoading(false);
      return;
    }

    try {
      const response = await fetch('/api/auth/reset-password', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ email, otp, newPassword }),
      });

      const data = await response.json();

      if (!response.ok || !data.success) {
        throw new Error(data.error || 'אירעה שגיאה באיפוס הסיסמה.');
      }

      setSuccessMessage(
        data.message || 'הסיסמה אופסה בהצלחה! כעת תוכל להתחבר עם הסיסמה החדשה.'
      );
      // Clear fields on success
      setOtp('');
      setNewPassword('');
      setConfirmPassword('');
      // Optionally redirect after a delay or with a button
      setTimeout(() => {
        router.push('/auth/signin?reset=success');
      }, 3000);
    } catch (err) {
      setError(err instanceof Error ? err.message : 'אירעה שגיאה לא צפויה.');
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="w-full max-w-md bg-white rounded-xl shadow-xl overflow-hidden relative">
      <div className="absolute top-0 left-0 right-0 h-2 bg-gradient-to-r from-cyan-500 to-pink-500"></div>
      <div className="p-6 sm:p-8">
        <div className="text-center mb-6">
          <h1 className="text-2xl font-bold text-gray-800 mb-2">איפוס סיסמה</h1>
          <p className="text-gray-600 text-sm">
            הזן את קוד האימות (OTP) שקיבלת במייל ואת הסיסמה החדשה שלך.
          </p>
        </div>

        {error && (
          <Alert variant="destructive" className="mb-4" role="alert">
            <AlertCircle className="h-4 w-4" />
            <AlertTitle>שגיאה</AlertTitle>
            <AlertDescription>{error}</AlertDescription>
          </Alert>
        )}
        {passwordError && !error && (
          <Alert variant="destructive" className="mb-4" role="alert">
            <AlertCircle className="h-4 w-4" />
            <AlertTitle>שגיאת סיסמה</AlertTitle>
            <AlertDescription id="password-error-message">
              {passwordError}
            </AlertDescription>
          </Alert>
        )}

        {successMessage && (
          <Alert
            variant="default"
            className="mb-4 bg-green-50 border-green-200 text-green-700"
          >
            <CheckCircle className="h-4 w-4 text-green-600" />
            <AlertTitle>הצלחה!</AlertTitle>
            <AlertDescription>
              {successMessage} אתה מועבר לדף ההתחברות...
            </AlertDescription>
          </Alert>
        )}

        {!successMessage && ( // Only show form if no success message
          <form onSubmit={handleSubmit} className="space-y-5">
            <div className="space-y-1">
              <label
                htmlFor="email-reset"
                className="block text-sm font-medium text-gray-700"
              >
                כתובת מייל (לאימות) <span className="text-red-500">*</span>
              </label>
              <div className="relative">
                <Mail className="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-5 w-5" />
                <Input
                  type="email"
                  id="email-reset"
                  value={email}
                  onChange={(e) => setEmail(e.target.value)}
                  placeholder="you@example.com"
                  required
                  className="w-full pr-10 pl-3 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-cyan-200 focus:border-cyan-500 focus:outline-none"
                  disabled={isLoading || !!searchParams.get('email')} // Disable if email came from query
                />
              </div>
            </div>
            <div className="space-y-1">
              <label
                htmlFor="otp-reset"
                className="block text-sm font-medium text-gray-700"
              >
                קוד אימות (OTP) <span className="text-red-500">*</span>
              </label>
              <div className="relative">
                <KeySquare className="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-5 w-5" />
                <Input
                  type="text"
                  id="otp-reset"
                  value={otp}
                  onChange={(e) =>
                    setOtp(e.target.value.replace(/[^0-9]/g, '').slice(0, 6))
                  }
                  placeholder="xxxxxx"
                  maxLength={6}
                  required
                  className="w-full pr-10 pl-3 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-cyan-200 focus:border-cyan-500 focus:outline-none tracking-widest text-center"
                  disabled={isLoading}
                  inputMode="numeric"
                />
              </div>
            </div>

            <div className="space-y-1">
              <label
                htmlFor="new-password-reset"
                className="block text-sm font-medium text-gray-700"
              >
                סיסמה חדשה <span className="text-red-500">*</span>
              </label>
              <div className="relative">
                <Lock className="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-5 w-5" />
                <Input
                  type={showPassword ? 'text' : 'password'}
                  id="new-password-reset"
                  aria-describedby={
                    passwordError ? 'password-error-message' : 'password-hint'
                  }
                  aria-invalid={!!passwordError}
                  value={newPassword}
                  onChange={(e) => {
                    setNewPassword(e.target.value);
                    const validationErr = validatePassword(e.target.value);
                    if (e.target.value && validationErr)
                      setPasswordError(validationErr);
                    else setPasswordError(null);
                  }}
                  placeholder="לפחות 8 תווים, אות גדולה, קטנה ומספר"
                  required
                  className={`w-full pr-10 pl-10 py-3 border rounded-lg focus:ring-2 focus:outline-none ${
                    passwordError
                      ? 'border-red-500 focus:ring-red-200'
                      : 'border-gray-300 focus:ring-cyan-200 focus:border-cyan-500'
                  }`}
                  disabled={isLoading}
                />
                <button
                  type="button"
                  onClick={() => setShowPassword(!showPassword)}
                  className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-500 hover:text-gray-700"
                  aria-label={showPassword ? 'הסתר סיסמה' : 'הצג סיסמה'}
                >
                  {showPassword ? (
                    <EyeOff className="h-5 w-5" />
                  ) : (
                    <Eye className="h-5 w-5" />
                  )}
                </button>
              </div>
              {!passwordError && (
                <p id="password-hint" className="mt-1 text-xs text-gray-500">
                  חייבת להכיל לפחות 8 תווים, אות גדולה, אות קטנה ומספר.
                </p>
              )}
            </div>

            <div className="space-y-1">
              <label
                htmlFor="confirm-password-reset"
                className="block text-sm font-medium text-gray-700"
              >
                אימות סיסמה חדשה <span className="text-red-500">*</span>
              </label>
              <div className="relative">
                <Lock className="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-5 w-5" />
                <Input
                  type={showConfirmPassword ? 'text' : 'password'}
                  id="confirm-password-reset"
                  value={confirmPassword}
                  onChange={(e) => setConfirmPassword(e.target.value)}
                  placeholder="הזן את הסיסמה החדשה שוב"
                  required
                  className="w-full pr-10 pl-10 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-cyan-200 focus:border-cyan-500 focus:outline-none"
                  disabled={isLoading}
                />
                <button
                  type="button"
                  onClick={() => setShowConfirmPassword(!showConfirmPassword)}
                  className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-500 hover:text-gray-700"
                  aria-label={showConfirmPassword ? 'הסתר סיסמה' : 'הצג סיסמה'}
                >
                  {showConfirmPassword ? (
                    <EyeOff className="h-5 w-5" />
                  ) : (
                    <Eye className="h-5 w-5" />
                  )}
                </button>
              </div>
            </div>

            <Button
              type="submit"
              disabled={
                isLoading ||
                !!passwordError ||
                !otp ||
                !newPassword ||
                !confirmPassword ||
                newPassword !== confirmPassword
              }
              className="w-full py-3 bg-gradient-to-r from-cyan-500 to-pink-500 hover:from-cyan-600 hover:to-pink-600 shadow-lg flex items-center justify-center gap-2"
            >
              {isLoading ? (
                <>
                  <Loader2 className="h-5 w-5 animate-spin mr-2" />
                  <span>מאפס סיסמה...</span>
                </>
              ) : (
                'אפס סיסמה'
              )}
            </Button>
          </form>
        )}

        <div className="mt-6 text-center">
          <Link
            href="/auth/signin"
            className="text-sm text-cyan-600 hover:text-cyan-700 hover:underline"
          >
            חזרה להתחברות
          </Link>
        </div>
      </div>
    </div>
  );
}
--- End of Content for ResetPasswordForm.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\auth\SignInForm.tsx
--------------------------------------------------------------------------------
Content:
// src/app/components/auth/SignInForm.tsx
'use client';

import { useState, useEffect, FormEvent } from 'react';
import { useSearchParams, useRouter } from 'next/navigation';
import { useSession } from 'next-auth/react';
import { signIn } from 'next-auth/react';
import { Button } from '@/components/ui/button';
import { Label } from '@/components/ui/label'; // --- התחל תיקון נגישות ---
import { Mail, Lock, AlertCircle, Loader2 } from 'lucide-react';
import Link from 'next/link';

export default function SignInForm() {
  const router = useRouter();
  const searchParams = useSearchParams();
  const { data: session, status } = useSession();

  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [error, setError] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [isGoogleLoading, setIsGoogleLoading] = useState(false);

  useEffect(() => {
    if (status === 'authenticated') {
      // @ts-ignore - אנחנו יודעים שהוספנו את המאפיינים האלה לסשן
      const redirectUrl = session?.redirectUrl || '/profile';
      router.push(redirectUrl);
    }
  }, [status, session, router]);

  useEffect(() => {
    const errorMessage = searchParams.get('error');
    const resetSuccess = searchParams.get('reset');

    if (resetSuccess === 'success') {
      setError('');
    }

    if (errorMessage) {
      switch (errorMessage) {
        case 'CredentialsSignin':
          setError('אימייל או סיסמה אינם נכונים. אנא נסה שנית.');
          break;
        case 'OAuthAccountNotLinked':
          setError(
            'חשבון זה כבר מקושר באמצעות ספק אחר. אנא התחבר באמצעות הספק המקורי.'
          );
          break;
        default:
          setError(`אירעה שגיאה בהתחברות (${errorMessage}). נסה שנית.`);
      }
    }
  }, [searchParams]);

  useEffect(() => {
    const emailParam = searchParams.get('email');
    if (emailParam) {
      setEmail(emailParam);
    }
  }, [searchParams]);

  const handleSubmit = async (e: FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    setError('');
    setIsLoading(true);

    if (!email || !password) {
      setError('אנא הזן אימייל וסיסמה.');
      setIsLoading(false);
      return;
    }

    try {
      localStorage.setItem('last_user_email', email);

      const result = await signIn('credentials', {
        email: email.toLowerCase(),
        password,
        redirect: false,
      });

      if (result?.ok && result.url) {
        router.push(result.url);
      } else if (!result?.ok) {
        if (result?.error === 'CredentialsSignin') {
          setError('אימייל או סיסמה אינם נכונים.');
        } else {
          setError(result?.error || 'אירעה שגיאה לא צפויה בהתחברות.');
        }
      }
    } catch (err) {
      console.error('Unexpected sign-in error in handleSubmit:', err);
      setError('אירעה שגיאה לא צפויה בהתחברות, נסה שנית.');
    } finally {
      setIsLoading(false);
    }
  };

  const handleGoogleSignIn = async () => {
    setIsGoogleLoading(true);
    setError('');
    localStorage.setItem('google_auth_in_progress', 'true');
    localStorage.setItem('auth_method', 'google');

    try {
      await signIn('google');
    } catch (error) {
      console.error('Google sign-in error:', error);
      setError('אירעה שגיאה בהתחברות עם גוגל. נסה שנית.');
      setIsGoogleLoading(false);
    }
  };

  if (status === 'loading' || status === 'authenticated') {
    return (
      <div
        className="flex w-full max-w-md flex-col items-center justify-center rounded-xl bg-white p-8 text-center shadow-xl"
        style={{ minHeight: '520px' }}
      >
        <div className="mb-4 h-12 w-12">
          <Loader2 className="h-full w-full animate-spin text-cyan-500" />
        </div>
        <h2 className="mb-2 text-2xl font-bold text-gray-800">
          {status === 'authenticated' ? 'התחברת בהצלחה!' : 'טוען נתונים...'}
        </h2>
        <p className="text-gray-600">
          {status === 'authenticated'
            ? 'אנו מעבירים אותך לאזור האישי שלך. '
            : 'אנא המתן בזמן שאנו בודקים את פרטי ההתחברות שלך.'}
        </p>
      </div>
    );
  }

  return (
    <div className="w-full max-w-md bg-white rounded-xl shadow-xl overflow-hidden relative">
      <div className="absolute top-0 left-0 right-0 h-2 bg-gradient-to-r from-cyan-500 to-pink-500"></div>

      <div className="p-6 sm:p-8">
        <div className="text-center mb-6">
          <h1 className="text-2xl font-bold text-gray-800 mb-2">
            התחברות למערכת
          </h1>
          <p className="text-gray-600">
            ברוכים השבים! המשיכו למצוא את השידוך המושלם.
          </p>
        </div>

        {error && (
          // --- התחל תיקון נגישות ---
          <div
            role="alert"
            className="mb-4 p-3 bg-red-50 border border-red-200 rounded-lg flex items-center gap-2"
          >
            <AlertCircle className="h-5 w-5 text-red-500 flex-shrink-0" />
            <p id="form-error-message" className="text-red-600 text-sm">
              {error}
            </p>
          </div>
          // --- סיים תיקון נגישות ---
        )}

        <form
          onSubmit={handleSubmit}
          className="space-y-4 mb-6"
          aria-describedby={error ? 'form-error-message' : undefined}
        >
          <div className="space-y-1">
            <Label
              htmlFor="email"
              className="block text-sm font-medium text-gray-700"
            >
              אימייל
            </Label>
            <div className="relative">
              <Mail className="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-5 w-5" />
              <input
                type="email"
                id="email"
                name="email"
                autoComplete="email"
                value={email}
                onChange={(e) => setEmail(e.target.value)}
                className="w-full pr-10 pl-3 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-cyan-200 focus:border-cyan-500 focus:outline-none"
                placeholder="you@example.com"
                required
                aria-required="true"
                disabled={isLoading || isGoogleLoading}
              />
            </div>
          </div>

          <div className="space-y-1">
            <Label
              htmlFor="password"
              className="block text-sm font-medium text-gray-700"
            >
              סיסמה
            </Label>
            <div className="relative">
              <Lock className="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-5 w-5" />
              <input
                type="password"
                id="password"
                name="password"
                autoComplete="current-password"
                value={password}
                onChange={(e) => setPassword(e.target.value)}
                className="w-full pr-10 pl-3 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-cyan-200 focus:border-cyan-500 focus:outline-none"
                placeholder="הסיסמה שלך"
                required
                aria-required="true"
                disabled={isLoading || isGoogleLoading}
              />
            </div>
            <div className="flex justify-end">
              <Link
                href="/auth/forgot-password"
                className="text-sm text-cyan-600 hover:text-cyan-700 hover:underline mt-1"
              >
                שכחת סיסמה?
              </Link>
            </div>
          </div>

          <Button
            type="submit"
            disabled={isLoading || isGoogleLoading}
            className="w-full py-3 bg-gradient-to-r from-cyan-500 to-pink-500 hover:from-cyan-600 hover:to-pink-600 shadow-lg flex items-center justify-center gap-2 relative overflow-hidden group"
          >
            {isLoading ? (
              <>
                <Loader2 className="h-5 w-5 animate-spin mr-1" />
                <span>מתחבר...</span>
              </>
            ) : (
              <>
                <span className="absolute inset-0 w-full h-full bg-gradient-to-r from-white/0 via-white/30 to-white/0 transform -translate-x-full group-hover:animate-shimmer"></span>
                <span>התחברות</span>
              </>
            )}
          </Button>
        </form>

        <div className="relative mb-6">
          <div className="absolute inset-0 flex items-center">
            <div className="w-full border-t border-gray-300" />
          </div>
          <div className="relative flex justify-center text-sm">
            <span className="px-2 bg-white text-gray-500">או</span>
          </div>
        </div>

        <Button
          type="button"
          onClick={handleGoogleSignIn}
          disabled={isLoading || isGoogleLoading}
          variant="outline"
          size="lg"
          className="w-full relative border-2 border-gray-300 hover:border-gray-400 py-3 rounded-xl flex items-center justify-center gap-3 group"
        >
          {isGoogleLoading ? (
            <>
              <Loader2 className="animate-spin h-5 w-5 mr-1" />
              <span>מתחבר עם Google...</span>
            </>
          ) : (
            <>
              <svg className="h-5 w-5" viewBox="0 0 24 24" aria-hidden="true">
                <path
                  d="M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z"
                  fill="#4285F4"
                />
                <path
                  d="M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z"
                  fill="#34A853"
                />
                <path
                  d="M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z"
                  fill="#FBBC05"
                />
                <path
                  d="M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z"
                  fill="#EA4335"
                />
              </svg>
              <span className="text-gray-700 font-medium">
                התחברות עם Google
              </span>
            </>
          )}
        </Button>

        <div className="mt-6 text-center">
          <p className="text-gray-600 text-sm">
            אין לך חשבון עדיין?{' '}
            <Link
              href="/auth/register"
              className="text-cyan-600 font-medium hover:text-cyan-700 hover:underline"
            >
              הרשמה עכשיו
            </Link>
          </p>
        </div>
      </div>
    </div>
  );
}
--- End of Content for SignInForm.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\auth\VerifyEmailClient.tsx
--------------------------------------------------------------------------------
Content:
// /auth/verify-email/page.tsx
"use client";

import { useState, useEffect, useRef } from "react";
import { useRouter, useSearchParams } from "next/navigation";
import { useSession } from "next-auth/react";
import { Card, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Alert, AlertDescription } from "@/components/ui/alert";
import { Loader2 } from "lucide-react";

interface VerificationState {
  status: "pending" | "verifying" | "success" | "error";
  message: string;
}

export default function VerifyEmailPage() {
  const router = useRouter();
  const searchParams = useSearchParams();
  const { data: session } = useSession();

  const navigationTimeoutIdRef = useRef<NodeJS.Timeout | null>(null);

  // Ref to ensure the API call logic runs only once after the component has "settled" from StrictMode effects.
  const verificationApiCallMadeRef = useRef(false);

  const [verification, setVerification] = useState<VerificationState>({
    status: "pending",
    message: "",
  });

  const [isResending, setIsResending] = useState(false);

  const handleResendVerification = async () => {
    // ... (same as before)
    const emailFromQuery = searchParams.get("email");
    if (!emailFromQuery) {
      setVerification({
        status: "error",
        message: "לא ניתן לשלוח מחדש ללא כתובת אימייל.",
      });
      return;
    }
    setIsResending(true);
    setVerification({ status: "pending", message: "" });
    try {
      const response = await fetch("/api/auth/resend-verification", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ email: emailFromQuery, type: "EMAIL" }),
      });
      const data = await response.json();
      if (!response.ok)
        throw new Error(data.error || "שגיאה בשליחת מייל האימות מחדש");
      setVerification({
        status: "pending",
        message: "מייל אימות חדש נשלח בהצלחה. אנא בדוק את תיבת הדואר.",
      });
    } catch (error) {
      setVerification({
        status: "error",
        message:
          error instanceof Error
            ? error.message
            : "שגיאה בשליחת מייל האימות מחדש",
      });
    } finally {
      setIsResending(false);
    }
  };

  useEffect(() => {
    let isEffectMounted = true; // Tracks if the current effect instance is still mounted
    const controller = new AbortController();

    const processVerification = async () => {
      if (verificationApiCallMadeRef.current) {
      
        return;
      }
      verificationApiCallMadeRef.current = true; // Mark that we are making the call

      const rawTokenParam = searchParams.get("token");
      const emailFromQuery = searchParams.get("email");
      let actualToken: string | null = null;

      if (rawTokenParam) {
        // ... (token extraction logic)
        if (
          rawTokenParam.includes("://") &&
          rawTokenParam.includes("?token=")
        ) {
          try {
            const nestedUrl = new URL(rawTokenParam);
            actualToken = nestedUrl.searchParams.get("token");
           
          } catch (error) {
            console.warn(
              "VerifyEmailPage: Could not parse rawTokenParam as a URL:",
              rawTokenParam,
              error
            );
            actualToken = rawTokenParam;
          }
        } else {
          actualToken = rawTokenParam;
        
        }
      }

      if (!actualToken) {
        if (emailFromQuery) {
         
          if (isEffectMounted)
            setVerification({
              status: "pending",
              message: "שלחנו מייל אימות לכתובת:",
            });
        } else {
         
          if (isEffectMounted)
            setVerification({
              status: "error",
              message: "קישור האימות אינו תקין (חסר מידע נדרש).",
            });
        }
        return; // Stop further processing
      }

      if (isEffectMounted)
        setVerification({ status: "verifying", message: "" });
    

      // Session check
      if (
        session?.user?.email &&
        emailFromQuery &&
        session.user.email !== emailFromQuery
      ) {
        console.warn(
          "VerifyEmailPage: User logged in with different email. Aborting."
        );
        if (isEffectMounted)
          setVerification({
            status: "error",
            message:
              "אתה מחובר עם חשבון מייל אחר. אנא התנתק ונסה שוב את הלינק.",
          });
        return;
      }

      try {
        const response = await fetch("/api/auth/verify", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ token: actualToken, type: "EMAIL" }),
          signal: controller.signal,
        });

        let data;
        try {
          data = await response.json();
        } catch (jsonError) {
          console.error(
            "VerifyEmailPage (API): Failed to parse JSON response.",
            jsonError
          );
          if (response.ok && response.status !== 204)
            throw new Error("תגובה לא תקינה מהשרת (JSON parsing failed).");
          else if (!response.ok)
            throw new Error("תגובה לא תקינה מהשרת במהלך האימות.");
        }

        if (controller.signal.aborted) {
          return;
        }

        if (!response.ok) {
          const errorMessage =
            data?.error || `שגיאה באימות החשבון (סטטוס ${response.status})`;
          throw new Error(errorMessage);
        }

        if (isEffectMounted) {
          setVerification({
            status: "success",
            message: "החשבון אומת בהצלחה!",
          });
          navigationTimeoutIdRef.current = setTimeout(() => {
            if (isEffectMounted) {
              // Check mount status again before navigating
              router.push("/auth/signin");
            } else {
            
            }
          }, 1500);
        }
      } catch (error: unknown) {
        if (controller.signal.aborted) {
          // Check if the error is due to our own abort
        
        } else if (isEffectMounted) {
          console.error(
            "VerifyEmailPage (API) [catch]: Error during API verification:",
            error
          );
          let errorMessage = "שגיאה באימות החשבון";
          if (error instanceof Error) {
            if (error.message.includes("הטוקן כבר נוצל"))
              errorMessage =
                "הטוקן הזה כבר נוצל לאימות. אם נרשמת בהצלחה, נסה להתחבר.";
            else if (error.message.includes("תוקף הטוקן פג"))
              errorMessage =
                "תוקף קישור האימות פג. אנא נסה לשלוח מייל אימות מחדש.";
            else if (error.message.includes("תגובה לא תקינה מהשרת"))
              errorMessage = error.message;
            else errorMessage = error.message;
          } else {
            errorMessage = "אירעה שגיאה לא צפויה במהלך האימות.";
          }
          setVerification({ status: "error", message: errorMessage });
        }
      }
    };

    processVerification();

    return () => {
     
      isEffectMounted = false; // Mark that this effect instance is being cleaned up
      controller.abort();
      if (navigationTimeoutIdRef.current) {
        clearTimeout(navigationTimeoutIdRef.current);
   
      }
      // Do NOT reset verificationApiCallMadeRef.current here.
      // It should ensure the logic runs only once per component true lifecycle.
    };
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [searchParams, router, session]); // Dependencies

  // ... (JSX remains the same)
  return (
    <div className="min-h-screen flex items-center justify-center p-4">
      <Card className="w-full max-w-md">
        <CardContent className="p-6 space-y-4">
          {verification.status === "pending" && (
            <div className="text-center space-y-4">
              <h2 className="text-xl font-semibold">אימות חשבון</h2>
              {verification.message && (
                <Alert
                  variant="default"
                  className="text-sm text-center bg-blue-50 border-blue-200 text-blue-800"
                >
                  <AlertDescription>
                    {verification.message ||
                      (searchParams.get("email")
                        ? "שלחנו מייל אימות לכתובת:"
                        : "טוען מידע...")}
                  </AlertDescription>
                </Alert>
              )}
              {!verification.message && searchParams.get("email") && (
                <p>שלחנו מייל אימות לכתובת:</p>
              )}
              <p className="font-medium">
                {searchParams.get("email") || "לא צוינה כתובת"}
              </p>
              <p>אנא בדקו את תיבת הדואר שלכם ולחצו על הקישור לאימות החשבון.</p>
              {searchParams.get("email") && (
                <Button
                  onClick={handleResendVerification}
                  disabled={isResending}
                  className="mt-4"
                >
                  {isResending ? (
                    <>
                      <Loader2 className="mr-2 h-4 w-4 animate-spin" /> שולח
                      מייל חדש...
                    </>
                  ) : (
                    "שלח מייל אימות מחדש"
                  )}
                </Button>
              )}
            </div>
          )}
          {verification.status === "verifying" && (
            <div className="flex flex-col items-center space-y-4">
              <Loader2 className="h-8 w-8 animate-spin text-blue-500" />
              <p className="text-gray-600">מאמת את החשבון...</p>
            </div>
          )}
          {verification.status === "success" && (
            <div className="text-center space-y-4">
              <h2 className="text-xl font-semibold text-green-600">
                {verification.message}
              </h2>
              <p className="text-gray-600">
                החשבון אומת בהצלחה. מעביר אותך להתחברות...
              </p>
              <Loader2 className="h-6 w-6 animate-spin mx-auto mt-4 text-gray-400" />
            </div>
          )}
          {verification.status === "error" && (
            <div className="space-y-4">
              <Alert variant="destructive">
                <AlertDescription>{verification.message}</AlertDescription>
              </Alert>
              {searchParams.get("email") &&
                !verification.message.includes("הטוקן הזה כבר נוצל") &&
                !verification.message.includes("מחובר עם חשבון מייל אחר") &&
                (verification.message.includes("תוקף קישור האימות פג") ||
                  verification.message.includes(
                    "שגיאה בשליחת מייל האימות מחדש"
                  ) ||
                  (verification.message.includes("שגיאה באימות החשבון") &&
                    !verification.message.includes(
                      "פורמט קישור האימות אינו תקין"
                    ) &&
                    !verification.message.includes("תגובה לא תקינה מהשרת")) ||
                  verification.message.includes("תגובה לא תקינה מהשרת")) && (
                  <div className="flex justify-center">
                    <Button
                      onClick={handleResendVerification}
                      disabled={isResending}
                      variant="outline"
                      className="mt-2"
                    >
                      {isResending ? (
                        <>
                          <Loader2 className="mr-2 h-4 w-4 animate-spin" /> שולח
                          מייל חדש...
                        </>
                      ) : (
                        "נסה לשלוח מייל אימות מחדש"
                      )}
                    </Button>
                  </div>
                )}
              <div className="flex justify-center mt-4">
                <Button onClick={() => router.push("/auth/signin")}>
                  חזור לדף ההתחברות
                </Button>
              </div>
            </div>
          )}
        </CardContent>
      </Card>
    </div>
  );
}
--- End of Content for VerifyEmailClient.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\auth\auth_contents.txt
--------------------------------------------------------------------------------
[This is the output log file itself. Content not included.]

================================================================================
Directory: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\auth\steps
================================================================================

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\auth\steps\BasicInfoStep.tsx
--------------------------------------------------------------------------------
Content:
// src/components/auth/steps/BasicInfoStep.tsx
'use client';

import { useState, useEffect } from 'react';
import { useRegistration } from '../RegistrationContext';
import { Button } from '@/components/ui/button';
import { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert';
import {
  ArrowLeft,
  ArrowRight,
  User,
  Mail,
  Lock,
  AlertCircle,
  Loader2,
  Eye,
  EyeOff,
} from 'lucide-react';
import { motion } from 'framer-motion';
import ConsentCheckbox from '../ConsentCheckbox';
import type { RegisterStepsDict } from '@/types/dictionaries/auth';

interface BasicInfoStepProps {
  dict: RegisterStepsDict['steps']['basicInfo'];
  consentDict: RegisterStepsDict['consentCheckbox'];
  locale: 'he' | 'en'; // הוסף את locale
}

const isValidEmail = (email: string): boolean => {
  const emailRegex = /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,}$/i;
  return email.trim() !== '' && emailRegex.test(email);
};

const isValidPassword = (password: string): boolean => {
  const passwordRegex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)[a-zA-Z\d]{8,}$/;
  return passwordRegex.test(password);
};

const BasicInfoStep: React.FC<BasicInfoStepProps> = ({
  dict,
  consentDict,
  locale,
}) => {
  // קבל את locale
  const { data, updateField, prevStep, proceedToEmailVerification } =
    useRegistration();
  const [passwordError, setPasswordError] = useState('');
  const [emailError, setEmailError] = useState('');
  const [isFormValid, setIsFormValid] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const [apiError, setApiError] = useState<string | null>(null);
  const [consentChecked, setConsentChecked] = useState(false);
  const [consentError, setConsentError] = useState<string | null>(null);
  const [marketingConsent, setMarketingConsent] = useState(false);
  const [passwordVisible, setPasswordVisible] = useState(false); // הוספנו לטובת הצגת/הסתרת סיסמה

  useEffect(() => {
    const isEmailValid = isValidEmail(data.email);
    const isPasswordValid = isValidPassword(data.password);
    const isNameValid =
      data.firstName.trim().length > 0 && data.lastName.trim().length > 0;

    setIsFormValid(
      isEmailValid &&
        isPasswordValid &&
        isNameValid &&
        consentChecked &&
        !isLoading
    );
  }, [
    data.email,
    data.password,
    data.firstName,
    data.lastName,
    consentChecked,
    isLoading,
  ]);

  const handleRegisterSubmit = async () => {
    setConsentError(null);
    if (!consentChecked) {
      setConsentError(dict.errors.consentRequired);
      return;
    }

    if (!isFormValid) {
      setApiError(dict.errors.fillFields);
      return;
    }

    setIsLoading(true);
    setApiError(null);

    try {
      const response = await fetch(`/api/auth/register?locale=${locale}`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          email: data.email,
          password: data.password,
          firstName: data.firstName,
          lastName: data.lastName,
          marketingConsent: marketingConsent,
        }),
      });

      const result = await response.json();

      if (!response.ok) {
        throw new Error(result.error || dict.errors.default);
      }

      proceedToEmailVerification(result.email);
    } catch (error) {
      setApiError(error instanceof Error ? error.message : dict.errors.default);
    } finally {
      setIsLoading(false);
    }
  };

  const containerVariants = {
    hidden: { opacity: 0 },
    visible: { opacity: 1, transition: { staggerChildren: 0.1 } },
  };
  const itemVariants = {
    hidden: { opacity: 0, y: 20 },
    visible: { opacity: 1, y: 0, transition: { duration: 0.5 } },
  };

  return (
    <motion.div
      className="space-y-5"
      variants={containerVariants}
      initial="hidden"
      animate="visible"
    >
      {apiError && (
        <motion.div variants={itemVariants}>
          <Alert variant="destructive" role="alert">
            <AlertCircle className="h-4 w-4" />
            <AlertTitle>{dict.errors.title}</AlertTitle>
            <AlertDescription>{apiError}</AlertDescription>
          </Alert>
        </motion.div>
      )}

      <motion.h2
        className="text-xl font-bold text-gray-800 mb-4"
        variants={itemVariants}
      >
        {dict.title}
      </motion.h2>

      <motion.div variants={itemVariants} className="space-y-4">
        {/* Email Field */}
        <div className="space-y-1">
          <label
            htmlFor="emailBasic"
            className="block text-sm font-medium text-gray-700"
          >
            {dict.emailLabel} <span className="text-red-500">*</span>
          </label>
          <div className="relative">
            <Mail className="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-5 w-5" />
            <input
              type="email"
              id="emailBasic"
              value={data.email}
              onChange={(e) => updateField('email', e.target.value)}
              onBlur={() =>
                setEmailError(
                  isValidEmail(data.email) ? '' : dict.errors.invalidEmail
                )
              }
              placeholder={dict.emailPlaceholder}
              disabled={isLoading}
              required
              // === FIX: Restored className for styling and error states ===
              className={`w-full pr-10 pl-3 py-3 border rounded-lg focus:ring-2 focus:outline-none transition-colors ${
                isLoading ? 'bg-gray-100' : ''
              } ${
                emailError
                  ? 'border-red-500 focus:ring-red-200'
                  : 'border-gray-300 focus:ring-cyan-200 focus:border-cyan-500'
              }`}
            />
          </div>
          {emailError && (
            <p role="alert" className="text-red-500 text-xs mt-1">
              {emailError}
            </p>
          )}
        </div>
        {/* Password Field */}
        <div className="space-y-1">
          <label
            htmlFor="passwordBasic"
            className="block text-sm font-medium text-gray-700"
          >
            {dict.passwordLabel} <span className="text-red-500">*</span>
          </label>
          <div className="relative">
            <Lock className="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-5 w-5 pointer-events-none" />
            <input
              type={passwordVisible ? 'text' : 'password'}
              id="passwordBasic"
              value={data.password}
              onChange={(e) => updateField('password', e.target.value)}
              onBlur={() =>
                setPasswordError(
                  isValidPassword(data.password)
                    ? ''
                    : dict.errors.invalidPassword
                )
              }
              placeholder={dict.passwordPlaceholder}
              disabled={isLoading}
              required
              // הוספנו ריווח פנימי משמאל (pl-10) כדי שהטקסט לא יכנס מתחת לעינית
              className={`w-full pr-10 pl-10 py-3 border rounded-lg focus:ring-2 focus:outline-none transition-colors ${
                isLoading ? 'bg-gray-100' : ''
              } ${
                passwordError
                  ? 'border-red-500 focus:ring-red-200'
                  : 'border-gray-300 focus:ring-cyan-200 focus:border-cyan-500'
              }`}
            />
            {/* === FIX: Most reliable way to vertically center an absolute icon === */}
            <button
              type="button"
              onClick={() => setPasswordVisible(!passwordVisible)}
              className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-500 hover:text-gray-700"
              aria-label={passwordVisible ? 'הסתר סיסמה' : 'הצג סיסמה'}
            >
              {passwordVisible ? (
                <EyeOff className="h-5 w-5" />
              ) : (
                <Eye className="h-5 w-5" />
              )}
            </button>
          </div>
          {passwordError ? (
            <p role="alert" className="text-red-500 text-xs mt-1">
              {passwordError}
            </p>
          ) : (
            <p className="text-gray-500 text-xs mt-1">{dict.passwordHint}</p>
          )}
        </div>
        {/* Name Fields */}
        <div className="space-y-1">
          <label
            htmlFor="firstNameBasic"
            className="block text-sm font-medium text-gray-700"
          >
            {dict.firstNameLabel} <span className="text-red-500">*</span>
          </label>
          <div className="relative">
            <User className="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-5 w-5" />
            <input
              type="text"
              id="firstNameBasic"
              value={data.firstName}
              onChange={(e) => updateField('firstName', e.target.value)}
              placeholder={dict.firstNamePlaceholder}
              disabled={isLoading}
              required
              // === FIX: Restored className for consistent styling ===
              className={`w-full pr-10 pl-3 py-3 border rounded-lg focus:ring-2 focus:outline-none transition-colors ${
                isLoading ? 'bg-gray-100' : ''
              } border-gray-300 focus:ring-cyan-200 focus:border-cyan-500`}
            />
          </div>
        </div>
        <div className="space-y-1">
          <label
            htmlFor="lastNameBasic"
            className="block text-sm font-medium text-gray-700"
          >
            {dict.lastNameLabel} <span className="text-red-500">*</span>
          </label>
          <div className="relative">
            <User className="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-5 w-5" />
            <input
              type="text"
              id="lastNameBasic"
              value={data.lastName}
              onChange={(e) => updateField('lastName', e.target.value)}
              placeholder={dict.lastNamePlaceholder}
              disabled={isLoading}
              required
              // === FIX: Restored className for consistent styling ===
              className={`w-full pr-10 pl-3 py-3 border rounded-lg focus:ring-2 focus:outline-none transition-colors ${
                isLoading ? 'bg-gray-100' : ''
              } border-gray-300 focus:ring-cyan-200 focus:border-cyan-500`}
            />
          </div>
        </div>
      </motion.div>

      <motion.div variants={itemVariants} className="mt-6">
        <ConsentCheckbox
          checked={consentChecked}
          onChange={(isChecked) => {
            setConsentChecked(isChecked);
            if (isChecked) setConsentError(null);
          }}
          error={consentError}
          dict={consentDict}
        />
      </motion.div>

      <motion.div variants={itemVariants} className="mt-4">
        <div className="flex items-start space-x-2 rtl:space-x-reverse">
          <input
            type="checkbox"
            id="marketingConsent"
            checked={marketingConsent}
            onChange={(e) => setMarketingConsent(e.target.checked)}
            className="mt-1 h-4 w-4 text-cyan-600 border-gray-300 rounded focus:ring-cyan-500"
          />
          <label htmlFor="marketingConsent" className="text-sm text-gray-700">
            {dict.marketingConsent}
          </label>
        </div>
      </motion.div>

      <motion.div
        variants={itemVariants}
        className="flex justify-between pt-4 mt-6 border-t border-gray-200"
      >
        <Button
          type="button"
          onClick={prevStep}
          variant="outline"
          disabled={isLoading}
          // === FIX: Restored specific button styling ===
          className="flex items-center gap-2"
        >
          <ArrowRight className="h-4 w-4 ml-2" /> {dict.backButton}
        </Button>
        <Button
          type="button"
          onClick={handleRegisterSubmit}
          disabled={!isFormValid || isLoading}
          // === FIX: Restored gradient and hover effect styling ===
          className={`flex items-center gap-2 min-w-[200px] justify-center text-white font-medium px-4 py-2.5 rounded-lg transition-opacity
            ${
              isFormValid && !isLoading
                ? 'bg-gradient-to-r from-cyan-500 to-pink-500 hover:from-cyan-600 hover:to-pink-600 shadow-md hover:shadow-lg'
                : 'bg-gray-300 cursor-not-allowed'
            }`}
        >
          {isLoading ? (
            <>
              <Loader2 className="h-5 w-5 animate-spin mr-2" />
              <span>{dict.nextButtonLoading}</span>
            </>
          ) : (
            <>
              <span>{dict.nextButton}</span>
              <ArrowLeft className="h-4 w-4 mr-2" />
            </>
          )}
        </Button>
      </motion.div>
    </motion.div>
  );
};

export default BasicInfoStep;
--- End of Content for BasicInfoStep.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\auth\steps\CompleteStep.tsx
--------------------------------------------------------------------------------
Content:
// src/components/auth/steps/CompleteStep.tsx
'use client';

import { useRouter } from 'next/navigation';
import { Button } from '@/components/ui/button';
import {
  ArrowLeft,
  CheckCircle,
  Mail,
  User,
  Phone,
  Loader2,
} from 'lucide-react';
import { motion } from 'framer-motion';
import Link from 'next/link';
import { useSession } from 'next-auth/react';
import { UserStatus } from '@prisma/client';
import type { User as SessionUserType } from '@/types/next-auth';
import type { RegisterStepsDict } from '@/types/dictionaries/auth';

interface CompleteStepProps {
  dict: RegisterStepsDict['steps']['complete'];
}

const containerVariants = {
  hidden: { opacity: 0, scale: 0.95 },
  visible: {
    opacity: 1,
    scale: 1,
    transition: { staggerChildren: 0.1, delayChildren: 0.2 },
  },
};

const itemVariants = {
  hidden: { opacity: 0, y: 20 },
  visible: { opacity: 1, y: 0, transition: { type: 'spring', stiffness: 100 } },
};

const circleVariants = {
  hidden: { opacity: 0, scale: 0.5 },
  visible: {
    opacity: 1,
    scale: 1,
    transition: { duration: 0.5, ease: 'easeOut' },
  },
};

const CompleteStep: React.FC<CompleteStepProps> = ({ dict }) => {
  const router = useRouter();
  const { data: session, status: sessionStatus } = useSession();

  if (sessionStatus === 'loading') {
    return (
      <div className="flex flex-col items-center justify-center h-64 text-center space-y-4">
        <Loader2 className="h-10 w-10 animate-spin text-cyan-600" />
        <p className="text-lg text-gray-600">{dict.loading}</p>
      </div>
    );
  }

  if (sessionStatus === 'unauthenticated' || !session?.user) {
    // Should be handled by parent, but as a fallback:
    router.push('/auth/signin');
    return null;
  }

  const user = session.user as SessionUserType;

  // Scenario 1: Needs email verification
  if (user.status === UserStatus.PENDING_EMAIL_VERIFICATION) {
    return (
      <motion.div
        className="space-y-6 text-center"
        variants={containerVariants}
        initial="hidden"
        animate="visible"
      >
        <motion.div className="flex justify-center" variants={circleVariants}>
          <div className="w-24 h-24 rounded-full bg-cyan-100 flex items-center justify-center">
            <Mail className="h-12 w-12 text-cyan-600" />
          </div>
        </motion.div>
        <motion.h2
          className="text-2xl font-bold text-gray-800"
          variants={itemVariants}
        >
          {dict.verifyEmailTitle}
        </motion.h2>
        <motion.p className="text-gray-600" variants={itemVariants}>
          {dict.verifyEmailSubtitle}{' '}
          <span className="font-bold text-gray-700">{user.email}</span>.
          <br />
          {dict.verifyEmailPrompt}
        </motion.p>
      </motion.div>
    );
  }

  // Scenario 2: Needs profile completion
  if (!user.isProfileComplete) {
    return (
      <motion.div
        className="space-y-6 text-center"
        variants={containerVariants}
        initial="hidden"
        animate="visible"
      >
        <motion.div className="flex justify-center" variants={circleVariants}>
          <div className="w-24 h-24 rounded-full bg-indigo-100 flex items-center justify-center">
            <User className="h-12 w-12 text-indigo-600" />
          </div>
        </motion.div>
        <motion.h2
          className="text-2xl font-bold text-gray-800"
          variants={itemVariants}
        >
          {dict.completeProfileTitle}
        </motion.h2>
        <motion.p className="text-gray-600" variants={itemVariants}>
          {dict.completeProfileSubtitle}
        </motion.p>
        <motion.div variants={itemVariants}>
          <Button
            onClick={() =>
              router.push('/auth/register?reason=complete_profile')
            }
            className="w-full"
          >
            {dict.completeProfileButton}
          </Button>
        </motion.div>
      </motion.div>
    );
  }

  // Scenario 3: Needs phone verification
  if (!user.isPhoneVerified) {
    return (
      <motion.div
        className="space-y-6 text-center"
        variants={containerVariants}
        initial="hidden"
        animate="visible"
      >
        <motion.div className="flex justify-center" variants={circleVariants}>
          <div className="w-24 h-24 rounded-full bg-pink-100 flex items-center justify-center">
            <Phone className="h-12 w-12 text-pink-600" />
          </div>
        </motion.div>
        <motion.h2
          className="text-2xl font-bold text-gray-800"
          variants={itemVariants}
        >
          {dict.verifyPhoneTitle}
        </motion.h2>
        <motion.p className="text-gray-600" variants={itemVariants}>
          {dict.verifyPhoneSubtitle}
        </motion.p>
        <motion.div variants={itemVariants}>
          <Button
            onClick={() => router.push('/auth/verify-phone')}
            className="w-full"
          >
            {dict.verifyPhoneButton}
          </Button>
        </motion.div>
      </motion.div>
    );
  }

  // Scenario 4: Everything is complete
  return (
    <motion.div
      className="space-y-6 text-center"
      variants={containerVariants}
      initial="hidden"
      animate="visible"
    >
      <motion.div className="flex justify-center" variants={circleVariants}>
        <div className="w-24 h-24 rounded-full bg-green-100 flex items-center justify-center">
          <CheckCircle className="h-12 w-12 text-green-600" />
        </div>
      </motion.div>
      <motion.h2
        className="text-2xl font-bold text-gray-800"
        variants={itemVariants}
      >
        {dict.allDoneTitle}
      </motion.h2>
      <motion.p className="text-gray-600" variants={itemVariants}>
        {dict.allDoneSubtitle}
      </motion.p>
      <motion.div variants={itemVariants} className="flex flex-col gap-4">
        <Button onClick={() => router.push('/profile')} className="w-full">
          <User className="h-4 w-4 ml-2" /> {dict.myProfileButton}
        </Button>
        <Button
          onClick={() => router.push('/questionnaire')}
          variant="outline"
          className="w-full"
        >
          {dict.questionnaireButton}
        </Button>
        <Link href="/" className="text-sm text-gray-500 hover:underline mt-2">
          {dict.backToHomeLink}
        </Link>
      </motion.div>
    </motion.div>
  );
};

export default CompleteStep;
--- End of Content for CompleteStep.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\auth\steps\EmailVerificationCodeStep.tsx
--------------------------------------------------------------------------------
Content:
// src/components/auth/steps/EmailVerificationCodeStep.tsx
'use client';

import { useState, useRef, KeyboardEvent, useEffect, FormEvent } from 'react';
import { useRouter } from 'next/navigation';
import { signIn } from 'next-auth/react';
import { useRegistration } from '../RegistrationContext';
import { Button } from '@/components/ui/button';
import { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert';
import { Loader2, AlertCircle, MailCheck, ArrowRight } from 'lucide-react';
import { motion } from 'framer-motion';
import { Input } from '@/components/ui/input';
import type { RegisterStepsDict } from '@/types/dictionaries/auth';

const OTP_LENGTH = 6;

interface EmailVerificationCodeStepProps {
  dict: RegisterStepsDict['steps']['emailVerification'];
    locale: 'he' | 'en'; // הוסף את locale

}

const EmailVerificationCodeStep: React.FC<EmailVerificationCodeStepProps> = ({
  dict,
  locale,
}) => {
  const {
    data: registrationData,
    exitEmailVerification: goBackToBasicInfo,
    completeEmailVerification,
  } = useRegistration();
  const router = useRouter();
  const [otp, setOtp] = useState<string[]>(new Array(OTP_LENGTH).fill(''));
  const [isLoading, setIsLoading] = useState(false);
  const [isResending, setIsResending] = useState(false);
  const [apiError, setApiError] = useState<string | null>(null);
  const [resendMessage, setResendMessage] = useState<string | null>(null);
  const inputRefs = useRef<(HTMLInputElement | null)[]>([]);

  useEffect(() => {
    inputRefs.current[0]?.focus();
  }, []);

  const handleChange = (element: HTMLInputElement, index: number) => {
    const value = element.value.replace(/[^0-9]/g, '');
    const newOtp = [...otp];
    newOtp[index] = value.slice(-1); // Only take the last digit
    setOtp(newOtp);

    if (value && index < OTP_LENGTH - 1) {
      inputRefs.current[index + 1]?.focus();
    }
  };

  const handleKeyDown = (e: KeyboardEvent<HTMLInputElement>, index: number) => {
    if (e.key === 'Backspace' && !otp[index] && index > 0) {
      inputRefs.current[index - 1]?.focus();
    }
  };

  const handleFormSubmit = async (e: FormEvent) => {
    e.preventDefault();
    const enteredCode = otp.join('');
    if (enteredCode.length !== OTP_LENGTH) {
      setApiError(
        dict.errors.incompleteCode.replace('{{length}}', OTP_LENGTH.toString())
      );
      return;
    }

    setIsLoading(true);
    setApiError(null);
    setResendMessage(null);

    try {
      const response = await fetch(`/api/auth/resend-verification-code?locale=${locale}`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          email: registrationData.emailForVerification,
          code: enteredCode,
        }),
      });
      const result = await response.json();
      if (!response.ok || !result.success || !result.authToken) {
        throw new Error(result.error || dict.errors.default);
      }

      const signInResult = await signIn('email-verified-autologin', {
        authToken: result.authToken,
        redirect: false,
      });

      if (signInResult?.ok) {
        completeEmailVerification();
        router.push('/auth/register');
      } else {
        throw new Error(
          dict.errors.autoSignInFailed.replace(
            '{error}',
            signInResult?.error || 'Unknown error'
          )
        );
      }
    } catch (error) {
      setApiError(error instanceof Error ? error.message : dict.errors.default);
      setIsLoading(false);
    }
  };

  const handleResendCode = async () => {
    setIsResending(true);
    setApiError(null);
    setResendMessage(null);
    try {
      const response = await fetch('/api/auth/resend-verification-code', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ email: registrationData.emailForVerification }),
      });
      const result = await response.json();
      if (!response.ok) throw new Error(result.error);
      setResendMessage(dict.alerts.resent);
    } catch (error) {
      setApiError(error instanceof Error ? error.message : dict.errors.default);
    } finally {
      setIsResending(false);
    }
  };

  const containerVariants = {
    hidden: { opacity: 0 },
    visible: { opacity: 1, transition: { staggerChildren: 0.1 } },
  };
  const itemVariants = {
    hidden: { opacity: 0, y: 20 },
    visible: { opacity: 1, y: 0, transition: { duration: 0.5 } },
  };

  return (
    <motion.div
      className="space-y-6 text-center"
      variants={containerVariants}
      initial="hidden"
      animate="visible"
    >
      <motion.div variants={itemVariants}>
        <MailCheck className="h-12 w-12 text-cyan-500 mx-auto mb-3" />
        <h2 className="text-2xl font-bold text-gray-800">{dict.title}</h2>
        <p className="text-gray-600 mt-2">
          {dict.subtitle.replace('{{length}}', OTP_LENGTH.toString())}{' '}
          <strong className="font-semibold text-gray-700">
            {registrationData.emailForVerification || dict.yourEmail}
          </strong>
          .
        </p>
      </motion.div>

      {apiError && (
        <motion.div variants={itemVariants}>
          <Alert variant="destructive" role="alert">
            <AlertCircle className="h-4 w-4" />
            <AlertTitle>{dict.errors.title}</AlertTitle>
            <AlertDescription>{apiError}</AlertDescription>
          </Alert>
        </motion.div>
      )}
      {resendMessage && !apiError && (
        <motion.div variants={itemVariants}>
          <Alert
            variant="default"
            className="bg-green-50 border-green-300 text-green-700"
            role="status"
          >
            <MailCheck className="h-4 w-4 text-green-600" />
            <AlertTitle>{dict.alerts.title}</AlertTitle>
            <AlertDescription>{resendMessage}</AlertDescription>
          </Alert>
        </motion.div>
      )}

      <form onSubmit={handleFormSubmit}>
        <motion.div
          variants={itemVariants}
          className="flex justify-center space-x-2 rtl:space-x-reverse"
          dir="ltr"
        >
          {otp.map((digit, index) => (
            <Input
              key={index}
              type="text"
              maxLength={1}
              value={digit}
              onChange={(e) =>
                handleChange(e.target as HTMLInputElement, index)
              }
              onKeyDown={(e) =>
                handleKeyDown(e as KeyboardEvent<HTMLInputElement>, index)
              }
              ref={(el) => {
                inputRefs.current[index] = el;
              }}
              className="w-12 h-14 text-center text-xl font-semibold"
              disabled={isLoading || isResending}
              aria-label={`OTP digit ${index + 1}`}
              autoComplete="one-time-code"
              inputMode="numeric"
            />
          ))}
        </motion.div>

        <motion.div variants={itemVariants} className="mt-6">
          <Button
            type="submit"
            disabled={
              isLoading || isResending || otp.join('').length !== OTP_LENGTH
            }
            className="w-full"
          >
            {isLoading ? (
              <>
                <Loader2 className="h-5 w-5 animate-spin ml-2" />
                <span>{dict.submitButtonLoading}</span>
              </>
            ) : (
              dict.submitButton
            )}
          </Button>
        </motion.div>
      </form>

      <motion.div
        variants={itemVariants}
        className="text-sm text-gray-500 mt-2"
      >
        {dict.resendPrompt}{' '}
        <Button
          type="button"
          variant="link"
          onClick={handleResendCode}
          disabled={isLoading || isResending}
          className="p-0 h-auto text-cyan-600"
        >
          {isResending ? (
            <>
              <Loader2 className="h-4 w-4 animate-spin ml-1" />
              <span>{dict.resendButtonLoading}</span>
            </>
          ) : (
            dict.resendButton
          )}
        </Button>
      </motion.div>

      <motion.div variants={itemVariants} className="mt-6">
        <Button
          type="button"
          onClick={goBackToBasicInfo}
          variant="outline"
          disabled={isLoading || isResending}
        >
          <ArrowRight className="h-4 w-4 ml-2" /> {dict.backButton}
        </Button>
      </motion.div>
    </motion.div>
  );
};

export default EmailVerificationCodeStep;
--- End of Content for EmailVerificationCodeStep.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\auth\steps\OptionalInfoStep.tsx
--------------------------------------------------------------------------------
Content:
// src/components/auth/steps/OptionalInfoStep.tsx
'use client';

import { useState } from 'react';
import { useRouter } from 'next/navigation';
import { useSession } from 'next-auth/react';
import { useRegistration } from '../RegistrationContext';
import { Button } from '@/components/ui/button';
import { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert';
import { Input } from '@/components/ui/input';
import {
  ArrowLeft,
  ArrowRight,
  Ruler,
  Briefcase,
  GraduationCap,
  Loader2,
  AlertCircle,
} from 'lucide-react';
import { motion } from 'framer-motion';
import type { RegisterStepsDict } from '@/types/dictionaries/auth';
import SubmissionStatusIndicator, {
  SubmissionStatus,
} from './SubmissionStatusIndicator';

// הממשק המלא של ה-props
interface OptionalInfoStepProps {
  dict: RegisterStepsDict['steps']['optionalInfo'];
  locale: 'he' | 'en';
}

const OptionalInfoStep: React.FC<OptionalInfoStepProps> = ({
  dict,
  locale,
}) => {
  const { data, updateField, prevStep } = useRegistration();
  const router = useRouter();
  const { update: updateSessionHook } = useSession();
  const [submissionStatus, setSubmissionStatus] =
    useState<SubmissionStatus>('idle');
  const [error, setError] = useState<string | null>(null);

  const handleSubmit = async () => {
    setSubmissionStatus('savingProfile');
    setError(null);
    try {
      const profileData = {
        firstName: data.firstName,
        lastName: data.lastName,
        phone: data.phone,
        gender: data.gender,
        birthDate: data.birthDate,
        maritalStatus: data.maritalStatus,
        height: data.height,
        occupation: data.occupation,
        education: data.education,
      };

      if (
        !profileData.firstName ||
        !profileData.lastName ||
        !profileData.phone ||
        !profileData.gender ||
        !profileData.birthDate ||
        !profileData.maritalStatus
      ) {
        throw new Error(dict.errors.missingData);
      }

      const profileResponse = await fetch('/api/auth/complete-profile', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(profileData),
      });
      if (!profileResponse.ok) {
        const errorData = await profileResponse.json();
        throw new Error(errorData.error || dict.errors.default);
      }

      setSubmissionStatus('updatingSession');
      await updateSessionHook();

      setSubmissionStatus('sendingCode');
      const sendCodeResponse = await fetch('/api/auth/send-phone-code', {
        method: 'POST',
      });
      if (!sendCodeResponse.ok) {
        const errorData = await sendCodeResponse.json();
        throw new Error(errorData.error || dict.errors.default);
      }

      setSubmissionStatus('allDone');

      setTimeout(() => {
        // ====================== LOGGING START: Client-Side Navigation ======================
        console.log(
          `\n\n=========================================================`
        );
        console.log(`--- [Client-Side | OptionalInfoStep] ---`);
        console.log(`Timestamp: ${new Date().toISOString()}`);
        console.log(
          `➡️  Preparing to navigate after completing optional info.`
        );

        // בדיקה קריטית של ה-locale שהתקבל כ-prop
        console.log(`   Value of 'locale' prop received: "${locale}"`);

        if (!locale || (locale !== 'he' && locale !== 'en')) {
          console.error(
            `❌ CRITICAL ERROR: The 'locale' prop is invalid or undefined! Value: "${locale}". This will cause a redirect loop or incorrect language.`
          );
          console.log(
            `   This error originates from how this component is rendered by its parent (RegisterClient.tsx).`
          );
        }

        const targetUrl = `/${locale}/auth/verify-phone`;

        console.log(`   Constructed Target URL: "${targetUrl}"`);
        console.log(`   Executing: router.push("${targetUrl}")`);
        console.log(
          `=========================================================\n`
        );
        // ======================= LOGGING END =======================

        router.push(targetUrl);
      }, 1500);
    } catch (err) {
      setError(err instanceof Error ? err.message : dict.errors.default);
      setSubmissionStatus('error');
    }
  };

  const isSubmitting =
    submissionStatus !== 'idle' && submissionStatus !== 'error';

  const containerVariants = {
    hidden: { opacity: 0 },
    visible: { opacity: 1, transition: { staggerChildren: 0.1 } },
  };
  const itemVariants = {
    hidden: { opacity: 0, y: 20 },
    visible: { opacity: 1, y: 0, transition: { duration: 0.5 } },
  };

  return (
    <>
      <SubmissionStatusIndicator
        currentStatus={submissionStatus}
        dict={dict.status}
      />

      <motion.div
        className={`space-y-5 ${isSubmitting ? 'blur-sm pointer-events-none' : ''}`}
        variants={containerVariants}
        initial="hidden"
        animate="visible"
      >
        <motion.h2
          className="text-xl font-bold text-gray-800"
          variants={itemVariants}
        >
          {dict.title}
        </motion.h2>
        <motion.p className="text-gray-600 text-sm" variants={itemVariants}>
          {dict.subtitle}
        </motion.p>

        {error && (
          <motion.div variants={itemVariants}>
            <Alert variant="destructive" role="alert">
              <AlertCircle className="h-4 w-4" />
              <AlertTitle>{dict.errors.title}</AlertTitle>
              <AlertDescription>{error}</AlertDescription>
            </Alert>
          </motion.div>
        )}

        <motion.div variants={itemVariants} className="space-y-4">
          <div className="space-y-1">
            <label
              htmlFor="heightOptional"
              className="block text-sm font-medium text-gray-700 flex items-center gap-1"
            >
              <Ruler className="h-4 w-4 text-gray-400" />
              {dict.heightLabel}
            </label>
            <Input
              type="number"
              id="heightOptional"
              min="120"
              max="220"
              value={data.height ?? ''}
              onChange={(e) =>
                updateField(
                  'height',
                  e.target.value ? parseInt(e.target.value, 10) : undefined
                )
              }
              placeholder={dict.heightPlaceholder}
              disabled={isSubmitting}
              className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-cyan-200 focus:border-cyan-500 focus:outline-none"
            />
          </div>
          <div className="space-y-1">
            <label
              htmlFor="occupationOptional"
              className="block text-sm font-medium text-gray-700 flex items-center gap-1"
            >
              <Briefcase className="h-4 w-4 text-gray-400" />
              {dict.occupationLabel}
            </label>
            <Input
              type="text"
              id="occupationOptional"
              value={data.occupation ?? ''}
              onChange={(e) => updateField('occupation', e.target.value)}
              placeholder={dict.occupationPlaceholder}
              disabled={isSubmitting}
              className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-cyan-200 focus:border-cyan-500 focus:outline-none"
            />
          </div>
          <div className="space-y-1">
            <label
              htmlFor="educationOptional"
              className="block text-sm font-medium text-gray-700 flex items-center gap-1"
            >
              <GraduationCap className="h-4 w-4 text-gray-400" />
              {dict.educationLabel}
            </label>
            <Input
              type="text"
              id="educationOptional"
              value={data.education ?? ''}
              onChange={(e) => updateField('education', e.target.value)}
              placeholder={dict.educationPlaceholder}
              disabled={isSubmitting}
              className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-cyan-200 focus:border-cyan-500 focus:outline-none"
            />
          </div>
        </motion.div>

        <motion.div
          variants={itemVariants}
          className="flex justify-between pt-4 mt-6"
        >
          <Button
            type="button"
            onClick={prevStep}
            variant="outline"
            disabled={isSubmitting}
          >
            <ArrowRight className="h-4 w-4 ml-2" />
            {dict.backButton}
          </Button>
          <Button
            type="button"
            onClick={handleSubmit}
            disabled={isSubmitting}
            className={`flex items-center gap-2 ${isSubmitting ? 'bg-gray-400' : 'bg-gradient-to-r from-cyan-500 to-pink-500'}`}
          >
            {isSubmitting ? (
              <>
                <Loader2 className="h-5 w-5 animate-spin mr-2" />
                <span>בתהליך...</span>
              </>
            ) : (
              <>
                {dict.nextButton} <ArrowLeft className="h-4 w-4 mr-2" />
              </>
            )}
          </Button>
        </motion.div>
      </motion.div>
    </>
  );
};

export default OptionalInfoStep;
--- End of Content for OptionalInfoStep.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\auth\steps\PersonalDetailsStep.tsx
--------------------------------------------------------------------------------
Content:
// src/components/auth/steps/PersonalDetailsStep.tsx
'use client';

import { useState, useEffect } from 'react';
import { useSession } from 'next-auth/react';
import { useRegistration } from '../RegistrationContext';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import {
  ArrowLeft,
  ArrowRight,
  Phone,
  Calendar,
  Users,
  Edit3,
  Loader2,
  AlertCircle,
} from 'lucide-react';
import { Gender } from '@prisma/client';
import { motion } from 'framer-motion';
import ConsentCheckbox from '../ConsentCheckbox';
import { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert';
import type { RegisterStepsDict } from '@/types/dictionaries/auth';

interface PersonalDetailsStepProps {
  dict: RegisterStepsDict['steps']['personalDetails'];
  consentDict: RegisterStepsDict['consentCheckbox'];
}

const PersonalDetailsStep: React.FC<PersonalDetailsStepProps> = ({
  dict,
  consentDict,
}) => {
  const {
    data: registrationState,
    updateField,
    nextStep,
    prevStep,
  } = useRegistration();
  const { data: session, update: updateSessionHook } = useSession();

  const [firstNameError, setFirstNameError] = useState('');
  const [lastNameError, setLastNameError] = useState('');
  const [phoneError, setPhoneError] = useState('');
  const [ageError, setAgeError] = useState('');
  const [isFormValid, setIsFormValid] = useState(false);
  const [consentChecked, setConsentChecked] = useState(
    !!session?.user?.termsAndPrivacyAcceptedAt
  );
  const [consentError, setConsentError] = useState<string | null>(null);
  const [isSubmittingConsent, setIsSubmittingConsent] = useState(false);
  const [generalApiError, setGeneralApiError] = useState<string | null>(null);

  const userHasAlreadyConsented = !!session?.user?.termsAndPrivacyAcceptedAt;

  const validateFirstName = (name: string) =>
    name.trim()
      ? setFirstNameError('')
      : setFirstNameError(dict.errors.firstNameRequired);
  const validateLastName = (name: string) =>
    name.trim()
      ? setLastNameError('')
      : setLastNameError(dict.errors.lastNameRequired);
  const validatePhone = (phone: string) => {
    if (!phone.trim()) setPhoneError(dict.errors.phoneRequired);
    else if (!/^0\d{9}$/.test(phone)) setPhoneError(dict.errors.phoneInvalid);
    else setPhoneError('');
  };
  const validateAge = (birthDate: string) => {
    if (!birthDate) return setAgeError(dict.errors.birthDateRequired);
    const age = new Date().getFullYear() - new Date(birthDate).getFullYear();
    if (age < 18) setAgeError(dict.errors.ageTooLow);
    else if (age > 120) setAgeError(dict.errors.ageTooHigh);
    else setAgeError('');
  };

  useEffect(() => {
    const isFieldsValid =
      registrationState.firstName.trim() &&
      registrationState.lastName.trim() &&
      /^0\d{9}$/.test(registrationState.phone) &&
      registrationState.birthDate &&
      registrationState.gender &&
      registrationState.maritalStatus;
    const consentRequirementMet = userHasAlreadyConsented || consentChecked;
    setIsFormValid(!!isFieldsValid && consentRequirementMet);
  }, [registrationState, consentChecked, userHasAlreadyConsented]);

  const handleContinue = async () => {
    validateFirstName(registrationState.firstName);
    validateLastName(registrationState.lastName);
    validatePhone(registrationState.phone);
    validateAge(registrationState.birthDate);

    if (!userHasAlreadyConsented && !consentChecked) {
      setConsentError(dict.errors.consentRequired);
      return;
    }
    if (!isFormValid) return;

    if (!userHasAlreadyConsented) {
      setIsSubmittingConsent(true);
      try {
        const consentResponse = await fetch('/api/user/accept-terms', {
          method: 'POST',
        });
        if (!consentResponse.ok) throw new Error();
        await updateSessionHook();
      } catch (error) {
        setGeneralApiError(dict.errors.consentApiError);
        setIsSubmittingConsent(false);
        return;
      }
      setIsSubmittingConsent(false);
    }
    nextStep();
  };

  const containerVariants = {
    hidden: { opacity: 0 },
    visible: { opacity: 1, transition: { staggerChildren: 0.07 } },
  };
  const itemVariants = {
    hidden: { opacity: 0, y: 15 },
    visible: { opacity: 1, y: 0, transition: { duration: 0.4 } },
  };

  return (
    <motion.div
      className="space-y-5"
      variants={containerVariants}
      initial="hidden"
      animate="visible"
    >
      <motion.h2
        className="text-xl font-semibold text-gray-800"
        variants={itemVariants}
      >
        {dict.title}
      </motion.h2>
      <motion.p className="text-sm text-gray-500" variants={itemVariants}>
        {dict.subtitle}
      </motion.p>
      {generalApiError && (
        <Alert variant="destructive">
          <AlertCircle className="h-4 w-4" />
          <AlertTitle>Error</AlertTitle>
          <AlertDescription>{generalApiError}</AlertDescription>
        </Alert>
      )}

      <motion.div variants={itemVariants} className="space-y-4">
        {/* === FIX: Restored classNames for all inputs and select elements === */}
        <div className="space-y-1">
          <label htmlFor="firstNamePersonal">
            {dict.firstNameLabel} <span className="text-red-500">*</span>
          </label>
          <div className="relative">
            <Edit3 className="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-5 w-5" />
            <Input
              id="firstNamePersonal"
              value={registrationState.firstName}
              onChange={(e) => updateField('firstName', e.target.value)}
              onBlur={(e) => validateFirstName(e.target.value)}
              placeholder={dict.firstNamePlaceholder}
              required
              disabled={isSubmittingConsent}
              className={`w-full pr-10 pl-3 py-3 border rounded-lg focus:ring-2 focus:outline-none ${firstNameError ? 'border-red-400 focus:ring-red-200' : 'border-gray-300 focus:ring-cyan-200 focus:border-cyan-500'}`}
            />
          </div>
          {firstNameError && (
            <p className="text-red-500 text-xs mt-1">{firstNameError}</p>
          )}
        </div>
        <div className="space-y-1">
          <label htmlFor="lastNamePersonal">
            {dict.lastNameLabel} <span className="text-red-500">*</span>
          </label>
          <div className="relative">
            <Edit3 className="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-5 w-5" />
            <Input
              id="lastNamePersonal"
              value={registrationState.lastName}
              onChange={(e) => updateField('lastName', e.target.value)}
              onBlur={(e) => validateLastName(e.target.value)}
              placeholder={dict.lastNamePlaceholder}
              required
              disabled={isSubmittingConsent}
              className={`w-full pr-10 pl-3 py-3 border rounded-lg focus:ring-2 focus:outline-none ${lastNameError ? 'border-red-400 focus:ring-red-200' : 'border-gray-300 focus:ring-cyan-200 focus:border-cyan-500'}`}
            />
          </div>
          {lastNameError && (
            <p className="text-red-500 text-xs mt-1">{lastNameError}</p>
          )}
        </div>
        <div className="space-y-1">
          <label htmlFor="phonePersonal">
            {dict.phoneLabel} <span className="text-red-500">*</span>
          </label>
          <div className="relative">
            <Phone className="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-5 w-5" />
            <Input
              id="phonePersonal"
              type="tel"
              value={registrationState.phone}
              onChange={(e) => updateField('phone', e.target.value)}
              onBlur={(e) => validatePhone(e.target.value)}
              placeholder={dict.phonePlaceholder}
              required
              maxLength={10}
              disabled={isSubmittingConsent}
              className={`w-full pr-10 pl-3 py-3 border rounded-lg focus:ring-2 focus:outline-none ${phoneError ? 'border-red-400 focus:ring-red-200' : 'border-gray-300 focus:ring-cyan-200 focus:border-cyan-500'}`}
            />
          </div>
          {phoneError && (
            <p className="text-red-500 text-xs mt-1">{phoneError}</p>
          )}
        </div>
        <div className="space-y-1">
          <label>
            {dict.genderLabel} <span className="text-red-500">*</span>
          </label>
          <div className="grid grid-cols-2 gap-3 mt-1">
            <Button
              type="button"
              onClick={() => updateField('gender', Gender.MALE)}
              variant={
                registrationState.gender === Gender.MALE ? 'default' : 'outline'
              }
              disabled={isSubmittingConsent}
              className={`flex items-center justify-center gap-2 py-3 rounded-lg border-2 ${registrationState.gender === Gender.MALE ? 'border-cyan-500 bg-cyan-50 text-cyan-700' : 'border-gray-200'}`}
            >
              👨 {dict.male}
            </Button>
            <Button
              type="button"
              onClick={() => updateField('gender', Gender.FEMALE)}
              variant={
                registrationState.gender === Gender.FEMALE
                  ? 'default'
                  : 'outline'
              }
              disabled={isSubmittingConsent}
              className={`flex items-center justify-center gap-2 py-3 rounded-lg border-2 ${registrationState.gender === Gender.FEMALE ? 'border-pink-500 bg-pink-50 text-pink-700' : 'border-gray-200'}`}
            >
              👩 {dict.female}
            </Button>
          </div>
        </div>
        <div className="space-y-1">
          <label htmlFor="birthDatePersonal">
            {dict.birthDateLabel} <span className="text-red-500">*</span>
          </label>
          <div className="relative">
            <Calendar className="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-5 w-5" />
            <Input
              id="birthDatePersonal"
              type="date"
              value={registrationState.birthDate}
              onChange={(e) => updateField('birthDate', e.target.value)}
              onBlur={(e) => validateAge(e.target.value)}
              required
              disabled={isSubmittingConsent}
              className={`w-full pr-10 pl-3 py-3 border rounded-lg focus:ring-2 focus:outline-none ${ageError ? 'border-red-400 focus:ring-red-200' : 'border-gray-300 focus:ring-cyan-200 focus:border-cyan-500'}`}
            />
          </div>
          {ageError && <p className="text-red-500 text-xs mt-1">{ageError}</p>}
        </div>
        <div className="space-y-1">
          <label htmlFor="maritalStatusPersonal">
            {dict.maritalStatusLabel} <span className="text-red-500">*</span>
          </label>
          <div className="relative">
            <Users className="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-5 w-5" />
            <select
              id="maritalStatusPersonal"
              value={registrationState.maritalStatus}
              onChange={(e) => updateField('maritalStatus', e.target.value)}
              required
              disabled={isSubmittingConsent}
              className={`w-full pr-10 pl-3 py-3 border rounded-lg focus:ring-2 focus:outline-none appearance-none bg-white ${'border-gray-300 focus:ring-cyan-200 focus:border-cyan-500'}`}
            >
              <option value="" disabled>
                {dict.maritalStatusPlaceholder}
              </option>
              <option value="רווק/ה">{dict.maritalStatuses.single}</option>
              <option value="גרוש/ה">{dict.maritalStatuses.divorced}</option>
              <option value="אלמן/ה">{dict.maritalStatuses.widowed}</option>
            </select>
          </div>
        </div>
      </motion.div>

      {!userHasAlreadyConsented && (
        <motion.div variants={itemVariants} className="mt-6 pt-4 border-t">
          <ConsentCheckbox
            checked={consentChecked}
            onChange={setConsentChecked}
            error={consentError}
            dict={consentDict}
          />
        </motion.div>
      )}

      <motion.div
        variants={itemVariants}
        className="flex justify-between items-center pt-5 mt-6 border-t"
      >
        <Button
          onClick={prevStep}
          variant="outline"
          disabled={isSubmittingConsent}
        >
          <ArrowRight className="h-4 w-4 ml-2" />
          {dict.backButton}
        </Button>
        <Button
          onClick={handleContinue}
          disabled={!isFormValid || isSubmittingConsent}
          className={`flex items-center gap-2 ${!isFormValid || isSubmittingConsent ? 'bg-gray-300' : 'bg-gradient-to-r from-cyan-500 to-pink-500'}`}
        >
          {isSubmittingConsent ? (
            <>
              <Loader2 className="h-5 w-5 animate-spin mr-2" />
              <span>{dict.nextButtonLoading}</span>
            </>
          ) : (
            <>
              {dict.nextButton} <ArrowLeft className="h-4 w-4 mr-2" />
            </>
          )}
        </Button>
      </motion.div>
    </motion.div>
  );
};

export default PersonalDetailsStep;
--- End of Content for PersonalDetailsStep.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\auth\steps\SubmissionStatusIndicator.tsx
--------------------------------------------------------------------------------
Content:
// src/components/auth/steps/SubmissionStatusIndicator.tsx
'use client';

import { CheckCircle, Loader2, ShieldCheck } from 'lucide-react';
import { motion, AnimatePresence } from 'framer-motion';

// === NEW: Added 'allDone' to the status types ===
export type SubmissionStatus =
  | 'idle'
  | 'savingProfile'
  | 'updatingSession'
  | 'sendingCode'
  | 'allDone' // <-- The new success state
  | 'error';

interface Step {
  id: SubmissionStatus;
  text: string;
}

interface SubmissionStatusIndicatorProps {
  currentStatus: SubmissionStatus;
  dict: {
    saving: string;
    updating: string;
    sendingCode: string;
  };
}

const SubmissionStatusIndicator: React.FC<SubmissionStatusIndicatorProps> = ({
  currentStatus,
  dict,
}) => {
  const steps: Step[] = [
    { id: 'savingProfile', text: dict.saving },
    { id: 'updatingSession', text: dict.updating },
    { id: 'sendingCode', text: dict.sendingCode },
  ];

  const getStepStatus = (
    stepId: SubmissionStatus,
    currentStatus: SubmissionStatus
  ): 'completed' | 'in-progress' | 'pending' => {
    // === NEW: If the status is 'allDone', all steps are completed ===
    if (currentStatus === 'allDone') {
      return 'completed';
    }
    
    const stepIndex = steps.findIndex((s) => s.id === stepId);
    const currentIndex = steps.findIndex((s) => s.id === currentStatus);

    if (currentIndex === -1 || currentStatus === 'idle' || currentStatus === 'error') {
      return 'pending';
    }
    if (stepIndex < currentIndex) {
      return 'completed';
    }
    if (stepIndex === currentIndex) {
      return 'in-progress';
    }
    return 'pending';
  };

  const statusIcons = {
    completed: <CheckCircle className="h-6 w-6 text-green-500" />,
    'in-progress': <Loader2 className="h-6 w-6 animate-spin text-cyan-500" />,
    pending: <div className="h-6 w-6 rounded-full border-2 border-gray-300"></div>,
  };

  const isVisible = currentStatus !== 'idle' && currentStatus !== 'error';

  return (
    <AnimatePresence>
      {isVisible && (
        // === FIX: Stronger, more visible backdrop ===
        <motion.div
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          exit={{ opacity: 0 }}
          className="fixed inset-0 bg-black/50 backdrop-blur-md flex items-center justify-center z-50 p-4"
        >
          <motion.div
            initial={{ scale: 0.9, opacity: 0 }}
            animate={{ scale: 1, opacity: 1 }}
            transition={{ type: 'spring', stiffness: 260, damping: 20 }}
            className="bg-white rounded-xl shadow-2xl w-full max-w-sm overflow-hidden"
          >
            {/* === NEW: Themed gradient top bar for better design === */}
            <div className="h-2 bg-gradient-to-r from-cyan-500 to-pink-500"></div>
            
            <div className="p-6 text-center">
              <div className="flex justify-center items-center gap-2 mb-4">
                <ShieldCheck className="h-7 w-7 text-cyan-500" />
                <h3 className="text-xl font-bold text-gray-800">
                  מאמתים את הפרטים
                </h3>
              </div>

              <p className="text-sm text-gray-600 mb-6">
                זה לוקח רק מספר שניות, נא לא לסגור את החלון.
              </p>

              <div className="space-y-4">
                {steps.map((step) => {
                  const status = getStepStatus(step.id, currentStatus);
                  return (
                    <div key={step.id} className="flex items-center gap-4 text-right p-2 bg-gray-50 rounded-lg">
                      <div className="flex-shrink-0 w-6 h-6 flex items-center justify-center">
                        {statusIcons[status]}
                      </div>
                      <span className={`text-base font-medium ${status === 'pending' ? 'text-gray-400' : 'text-gray-700'}`}>
                        {step.text}
                      </span>
                    </div>
                  );
                })}
              </div>

              {/* === NEW: Final success message before redirecting === */}
              {currentStatus === 'allDone' && (
                  <motion.div
                    initial={{ opacity: 0 }}
                    animate={{ opacity: 1 }}
                    className="mt-6 flex items-center justify-center gap-2 text-green-600"
                  >
                    <CheckCircle className="h-5 w-5" />
                    <p className="font-semibold">הכל מוכן! מעבירים אותך...</p>
                  </motion.div>
              )}
            </div>
          </motion.div>
        </motion.div>
      )}
    </AnimatePresence>
  );
};

export default SubmissionStatusIndicator;
--- End of Content for SubmissionStatusIndicator.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\auth\steps\WelcomeStep.tsx
--------------------------------------------------------------------------------
Content:
// src/components/auth/steps/WelcomeStep.tsx
'use client';

import { useState } from 'react';
import { useRegistration } from '../RegistrationContext';
import { signIn } from 'next-auth/react';
import { Button } from '@/components/ui/button';
import { Heart, ArrowLeft, Mail, Loader2 } from 'lucide-react';
import Link from 'next/link';
import type { RegisterStepsDict } from '@/types/dictionaries/auth';

// 1. הרחבת הממשק
interface WelcomeStepProps {
  dict: RegisterStepsDict['steps']['welcome'];
  locale: 'he' | 'en';
}

// 2. קבלת locale מה-props
const WelcomeStep: React.FC<WelcomeStepProps> = ({ dict, locale }) => {
  const { nextStep } = useRegistration();
  const [isGoogleLoading, setIsGoogleLoading] = useState(false);

  const handleGoogleSignIn = async () => {
    try {
      setIsGoogleLoading(true);
      localStorage.setItem('registration_started', 'true');
      // 3. הוספת פרמטר השפה לקריאה
      await signIn('google', undefined, { hl: locale });
    } catch (error) {
      console.error('Google sign-in error:', error);
      setIsGoogleLoading(false);
    }
  };

  const handleEmailSignUp = () => {
    nextStep();
  };

  // ... (JSX נשאר ללא שינוי) ...
  return (
    <div className="space-y-6 text-center">
      <div className="flex justify-center mb-4">
        <div className="relative">
          <div className="w-20 h-20 rounded-full bg-pink-100 flex items-center justify-center animate-pulse">
            <Heart className="h-10 w-10 text-pink-500 fill-pink-500" />
          </div>
          <div className="absolute -top-2 -right-2 w-8 h-8 rounded-full bg-cyan-500 flex items-center justify-center text-white font-bold animate-bounce">
            <span className="text-sm">👋</span>
          </div>
        </div>
      </div>

      <h2 className="text-2xl font-bold text-gray-800">{dict.title}</h2>

      <p className="text-gray-600 max-w-sm mx-auto">{dict.subtitle}</p>

      <div className="space-y-4 mt-8">
        <Button
          onClick={handleGoogleSignIn}
          disabled={isGoogleLoading}
          variant="outline"
          size="lg"
          className="w-full relative border-2 border-gray-300 hover:border-gray-400 py-6 rounded-xl flex items-center justify-center gap-3 group"
        >
          {isGoogleLoading ? (
            <Loader2 className="animate-spin h-5 w-5" />
          ) : (
            <>
              <svg className="h-5 w-5" viewBox="0 0 24 24" aria-hidden="true">
                <path
                  d="M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z"
                  fill="#4285F4"
                />
                <path
                  d="M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z"
                  fill="#34A853"
                />
                <path
                  d="M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z"
                  fill="#FBBC05"
                />
                <path
                  d="M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z"
                  fill="#EA4335"
                />
              </svg>
              <span className="text-gray-700 font-medium">
                {dict.googleButton}
              </span>
            </>
          )}
        </Button>

        <Button
          onClick={handleEmailSignUp}
          size="lg"
          className="w-full py-6 rounded-xl bg-gradient-to-r from-cyan-500 to-pink-500 hover:from-cyan-600 hover:to-pink-600 shadow-lg flex items-center justify-center gap-3 group relative overflow-hidden"
        >
          <span className="absolute inset-0 w-full h-full bg-gradient-to-r from-white/0 via-white/30 to-white/0 transform -translate-x-full group-hover:animate-shimmer"></span>
          <Mail className="h-5 w-5 text-white" />
          <span className="text-white font-medium">{dict.emailButton}</span>
          <ArrowLeft className="h-5 w-5 text-white opacity-0 group-hover:opacity-100 transition-opacity" />
        </Button>
      </div>

      <div className="mt-8 pt-4 border-t border-gray-200">
        <p className="text-gray-600 text-sm">
          {dict.signInPrompt}{' '}
          <Link
            href="/auth/signin"
            className="text-cyan-600 font-medium hover:text-cyan-700 hover:underline"
          >
            {dict.signInLink}
          </Link>
        </p>
      </div>
    </div>
  );
};

export default WelcomeStep;
--- End of Content for WelcomeStep.tsx ---

