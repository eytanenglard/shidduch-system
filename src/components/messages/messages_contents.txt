################################################################################
# Directory Content Map For: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\messages
# Generated on: 2025-09-01 13:20:37
################################################################################

================================================================================
Directory: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\messages
================================================================================

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\messages\AvailabilityRequestCard.tsx
--------------------------------------------------------------------------------
Content:
// FILENAME: src/app/components/messages/AvailabilityRequestCard.tsx

import { Card, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Progress } from '@/components/ui/progress';
import { Clock, CheckCircle, XCircle } from 'lucide-react';
// --- START OF FIX ---
// Changed 'ExtendedInquiry' to 'ExtendedAvailabilityInquiry'
import type { ExtendedAvailabilityInquiry } from '@/types/messages';
// --- END OF FIX ---

interface AvailabilityRequestCardProps {
  // --- START OF FIX ---
  // Updated the prop type to use the new name
  inquiry: ExtendedAvailabilityInquiry;
  // --- END OF FIX ---
  currentUserId: string;
  onRespond: (inquiryId: string, isAvailable: boolean) => Promise<void>;
}

export default function AvailabilityRequestCard({
  inquiry,
  currentUserId,
  onRespond,
}: AvailabilityRequestCardProps) {
  const isFirstParty = inquiry.firstPartyId === currentUserId;
  const isSecondParty = inquiry.secondPartyId === currentUserId;
  const totalResponses = [
    inquiry.firstPartyResponse,
    inquiry.secondPartyResponse,
  ].filter((r) => r !== null).length;
  const progress = (totalResponses / 2) * 100;

  // Since this component is specifically for AvailabilityInquiry, its internal logic
  // for displaying responses and actions remains correct. The only change needed was the type import.
  return (
    <Card>
      <CardContent className="p-6">
        <div className="flex justify-between items-start mb-4">
          <div>
            <h3 className="font-medium">בקשת בדיקת זמינות</h3>
            <p className="text-sm text-gray-600">
              מאת {inquiry.matchmaker.firstName} {inquiry.matchmaker.lastName}
            </p>
          </div>
          <Clock className="w-5 h-5 text-gray-400" />
        </div>

        <div className="space-y-4">
          <div className="grid grid-cols-2 gap-4">
            <div>
              <div className="text-sm text-gray-500">צד ראשון</div>
              <div className="flex items-center mt-1">
                {inquiry.firstPartyResponse === null ? (
                  <Clock className="w-4 h-4 text-yellow-500 mr-1" />
                ) : inquiry.firstPartyResponse ? (
                  <CheckCircle className="w-4 h-4 text-green-500 mr-1" />
                ) : (
                  <XCircle className="w-4 h-4 text-red-500 mr-1" />
                )}
                <span>
                  {inquiry.firstParty.firstName} {inquiry.firstParty.lastName}
                </span>
              </div>
            </div>
            <div>
              <div className="text-sm text-gray-500">צד שני</div>
              <div className="flex items-center mt-1">
                {inquiry.secondPartyResponse === null ? (
                  <Clock className="w-4 h-4 text-yellow-500 mr-1" />
                ) : inquiry.secondPartyResponse ? (
                  <CheckCircle className="w-4 h-4 text-green-500 mr-1" />
                ) : (
                  <XCircle className="w-4 h-4 text-red-500 mr-1" />
                )}
                <span>
                  {inquiry.secondParty.firstName} {inquiry.secondParty.lastName}
                </span>
              </div>
            </div>
          </div>

          <div className="space-y-2">
            <div className="flex justify-between text-sm text-gray-500">
              <span>התקדמות</span>
              <span>{progress}%</span>
            </div>
            <Progress value={progress} className="w-full" />
          </div>

          {inquiry.note && (
            <div className="text-sm text-gray-600">
              <strong>הערה:</strong> {inquiry.note}
            </div>
          )}

          {isFirstParty && inquiry.firstPartyResponse === null && (
            <div className="flex gap-2 mt-4">
              <Button
                onClick={() => onRespond(inquiry.id, true)}
                className="flex-1 bg-green-600 hover:bg-green-700"
              >
                <CheckCircle className="mr-2 h-4 w-4" /> אני זמין/ה
              </Button>
              <Button
                onClick={() => onRespond(inquiry.id, false)}
                variant="outline"
                className="flex-1"
              >
                <XCircle className="mr-2 h-4 w-4" /> לא זמין/ה כרגע
              </Button>
            </div>
          )}

          {isSecondParty && inquiry.secondPartyResponse === null && (
            <div className="flex gap-2 mt-4">
              <Button
                onClick={() => onRespond(inquiry.id, true)}
                className="flex-1 bg-green-600 hover:bg-green-700"
              >
                <CheckCircle className="mr-2 h-4 w-4" /> אני זמין/ה
              </Button>
              <Button
                onClick={() => onRespond(inquiry.id, false)}
                variant="outline"
                className="flex-1"
              >
                <XCircle className="mr-2 h-4 w-4" /> לא זמין/ה כרגע
              </Button>
            </div>
          )}
        </div>
      </CardContent>
    </Card>
  );
}
--- End of Content for AvailabilityRequestCard.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\messages\MessageList.tsx
--------------------------------------------------------------------------------
Content:
// src/app/components/messages/MessageList.tsx
import React from 'react';
import type { UnifiedMessage } from '@/types/messages';
import MessageListItem from './MessageListItem'; // זה יתחיל לעבוד אחרי שתיצור את הקובץ הבא
import { ScrollArea } from '@/components/ui/scroll-area';
import { useSession } from 'next-auth/react';

interface MessageListProps {
  messages: UnifiedMessage[];
  selectedMessageId: string | null;
  onSelectMessage: (message: UnifiedMessage) => void;
}

const MessageList: React.FC<MessageListProps> = ({ messages, selectedMessageId, onSelectMessage }) => {
  const { data: session } = useSession();
  const userId = session?.user?.id;

  if (!userId) return null; // הגנה למקרה שהסשן לא טעון

  return (
    <div className="bg-white h-full flex flex-col">
      <div className="p-4 border-b">
        <h2 className="text-xl font-bold text-gray-800">מרכז הפעילות</h2>
        <p className="text-sm text-gray-500">{messages.length} הצעות ועדכונים</p>
      </div>
      <ScrollArea className="flex-1">
        <div className="p-2 space-y-1">
          {messages.map((message) => (
            <MessageListItem
              key={message.id}
              message={message}
              isSelected={message.id === selectedMessageId}
              onSelect={() => onSelectMessage(message)}
              userId={userId}
            />
          ))}
        </div>
      </ScrollArea>
    </div>
  );
};

export default MessageList;
--- End of Content for MessageList.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\messages\MessageListItem.tsx
--------------------------------------------------------------------------------
Content:
// FILENAME: src/app/components/messages/MessageListItem.tsx

import React from 'react';
import Image from 'next/image';
import { Avatar, AvatarFallback } from '@/components/ui/avatar';
import { Badge } from '@/components/ui/badge';
import { cn, getInitials, getRelativeCloudinaryPath } from '@/lib/utils';
import { formatDistanceToNow } from 'date-fns';
import { he } from 'date-fns/locale';
import type { UnifiedMessage } from '@/types/messages';
import { CheckCircle, Zap, MessageCircle, Info, Heart } from 'lucide-react';

interface MessageListItemProps {
  message: UnifiedMessage;
  isSelected: boolean;
  onSelect: () => void;
  userId: string;
}

// קומפוננטת עזר לבחירת אייקון וצבע
const MessageIcon: React.FC<{ type: UnifiedMessage['type'] }> = ({ type }) => {
  switch (type) {
    case 'ACTION_REQUIRED':
      return <Zap className="w-3 h-3 text-orange-500 fill-current" />;
    case 'MATCHMAKER_MESSAGE':
    case 'INQUIRY_RESPONSE':
      return <MessageCircle className="w-3 h-3 text-blue-500 fill-current" />;
    case 'STATUS_UPDATE':
      return <Info className="w-3 h-3 text-cyan-500" />;
    case 'NEW_SUGGESTION':
      return <Heart className="w-3 h-3 text-pink-500 fill-current" />;
    default:
      return null;
  }
};

const MessageListItem: React.FC<MessageListItemProps> = ({
  message,
  isSelected,
  onSelect,
  userId,
}) => {
  // במידה ואין payload או suggestion, לא נציג את הפריט
  const suggestion = message.payload?.suggestion;
  if (!suggestion) return null;

  // זיהוי הצד השני בהצעה
  const otherParty =
    suggestion.firstPartyId === userId
      ? suggestion.secondParty
      : suggestion.firstParty;
  if (!otherParty) return null; // הגנה נוספת

  const isActionRequired = message.type === 'ACTION_REQUIRED';
  const mainImage = otherParty.images?.find((img) => img.isMain);

  return (
    <button
      onClick={onSelect}
      className={cn(
        'w-full text-right p-3 rounded-xl transition-all duration-200 flex items-start gap-4',
        isSelected ? 'bg-cyan-50 border border-cyan-200' : 'hover:bg-gray-100'
      )}
    >
      {/* Avatar Section with Icon */}
      <div className="relative flex-shrink-0">
        <Avatar className="w-12 h-12 border-2 border-white shadow-md">
          {mainImage?.url ? (
            <Image
              src={getRelativeCloudinaryPath(mainImage.url)}
              alt={otherParty.firstName}
              fill
              className="object-cover"
              sizes="48px"
            />
          ) : (
            <AvatarFallback
              className={cn(
                'font-bold text-white',
                isActionRequired
                  ? 'bg-gradient-to-br from-orange-500 to-amber-500'
                  : 'bg-gradient-to-br from-cyan-500 to-blue-500'
              )}
            >
              {getInitials(`${otherParty.firstName} ${otherParty.lastName}`)}
            </AvatarFallback>
          )}
        </Avatar>
        {/* אייקון קטן המציין את סוג ההודעה */}
        <div className="absolute -bottom-1 -left-1 p-1 bg-white rounded-full shadow-lg">
          <MessageIcon type={message.type} />
        </div>
      </div>

      {/* Content Section */}
      <div className="flex-1 min-w-0">
        <div className="flex justify-between items-center">
          <h3 className="font-bold text-gray-800 truncate">{message.title}</h3>
          <span className="text-xs text-gray-400 flex-shrink-0">
            {formatDistanceToNow(new Date(message.timestamp), {
              addSuffix: true,
              locale: he,
            })}
          </span>
        </div>
        <p className="text-sm text-gray-600 truncate">{message.description}</p>

        {/* תג "התאמה!" מיוחד */}
        {message.type === 'STATUS_UPDATE' &&
          suggestion.status === 'CONTACT_DETAILS_SHARED' && (
            <Badge className="mt-1 bg-gradient-to-r from-emerald-500 to-green-500 text-white border-0 text-xs shadow-md">
              <CheckCircle className="w-3 h-3 ml-1" />
              התאמה!
            </Badge>
          )}
      </div>
    </button>
  );
};

export default MessageListItem;
--- End of Content for MessageListItem.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\messages\MessagesPage.tsx
--------------------------------------------------------------------------------
Content:
// FILENAME: src/app/components/messages/MessagesPage.tsx

'use client';

import { useNotifications } from '@/app/[locale]/contexts/NotificationContext';
import { useState, useEffect, useCallback } from 'react';
import { useSession } from 'next-auth/react';
import { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Textarea } from '@/components/ui/textarea';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { toast } from 'sonner';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select';
import { Clock, CheckCircle, XCircle, Loader2, Users } from 'lucide-react';
// --- START OF FIX ---
// Changed 'ExtendedInquiry' to 'ExtendedAvailabilityInquiry' to match the updated types file
import type { ExtendedAvailabilityInquiry } from '@/types/messages';
// --- END OF FIX ---
import { Session } from 'next-auth';

// This component is now specifically for the matchmaker's view of availability requests.
// The candidate's message center is handled by MessageList.tsx which uses the unified feed.

export default function MessagesPage() {
  const { data: session } = useSession() as { data: Session | null };
  const { refreshNotifications } = useNotifications();
  // --- START OF FIX ---
  // Updated the state type to use the new name
  const [inquiries, setInquiries] = useState<ExtendedAvailabilityInquiry[]>([]);
  // --- END OF FIX ---
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');
  const [filters, setFilters] = useState({
    status: 'pending',
    timeframe: 'all',
  });
  const [note, setNote] = useState('');

  const loadInquiries = useCallback(async () => {
    try {
      setLoading(true);
      const queryParams = new URLSearchParams({
        status: filters.status,
        timeframe: filters.timeframe,
      });

      // This API endpoint is specific to matchmakers fetching availability inquiries
      const response = await fetch(`/api/matchmaker/inquiries?${queryParams}`);
      if (!response.ok)
        throw new Error('Failed to load availability inquiries');
      const data = await response.json();
      setInquiries(data);
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Failed to load inquiries');
    } finally {
      setLoading(false);
    }
  }, [filters]);

  useEffect(() => {
    if (session?.user) {
      loadInquiries();
    }
  }, [session, loadInquiries]);

  const handleResponse = async (inquiryId: string, isAvailable: boolean) => {
    try {
      const response = await fetch(
        `/api/matchmaker/inquiries/${inquiryId}/respond`,
        {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ isAvailable, note }),
        }
      );

      if (!response.ok) {
        throw new Error('Failed to submit response');
      }

      await loadInquiries();
      await refreshNotifications();
      setNote('');
      toast.success('תגובתך נשמרה בהצלחה!');
    } catch (err) {
      const errorMessage =
        err instanceof Error ? err.message : 'Failed to submit response';
      setError(errorMessage);
      toast.error(errorMessage);
    }
  };

  if (loading) {
    return (
      <div className="flex justify-center items-center min-h-screen">
        <Loader2 className="w-8 h-8 animate-spin" />
      </div>
    );
  }

  if (inquiries.length === 0) {
    return (
      <Card className="max-w-4xl mx-auto mt-8">
        <CardContent className="p-6 text-center">
          <Users className="w-12 h-12 mx-auto text-gray-400 mb-4" />
          <h3 className="text-lg font-medium">אין בקשות זמינות</h3>
          <p className="text-gray-500">
            כרגע אין בקשות לבדיקת זמינות הממתינות לך.
          </p>
        </CardContent>
      </Card>
    );
  }

  // The rest of the component's JSX remains the same as it correctly handles the logic
  // for displaying and responding to Availability Inquiries.
  return (
    <div className="container mx-auto py-8 px-4">
      <Card className="mb-6">
        <CardHeader className="flex flex-row items-center justify-between">
          <CardTitle>בקשות לבדיקת זמינות</CardTitle>
          <div className="flex gap-4">
            <Select
              value={filters.status}
              onValueChange={(value) =>
                setFilters((prev) => ({ ...prev, status: value }))
              }
            >
              <SelectTrigger className="w-[180px]">
                <SelectValue placeholder="סינון לפי סטטוס" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="all">הכל</SelectItem>
                <SelectItem value="pending">ממתין לתגובה</SelectItem>
                <SelectItem value="completed">טופל</SelectItem>
              </SelectContent>
            </Select>
            <Select
              value={filters.timeframe}
              onValueChange={(value) =>
                setFilters((prev) => ({ ...prev, timeframe: value }))
              }
            >
              <SelectTrigger className="w-[180px]">
                <SelectValue placeholder="סינון לפי זמן" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="all">הכל</SelectItem>
                <SelectItem value="today">היום</SelectItem>
                <SelectItem value="week">שבוע אחרון</SelectItem>
                <SelectItem value="month">חודש אחרון</SelectItem>
              </SelectContent>
            </Select>
          </div>
        </CardHeader>
      </Card>
      {error && (
        <Alert variant="destructive" className="mb-6">
          <AlertDescription>{error}</AlertDescription>
        </Alert>
      )}
      <div className="grid grid-cols-1 gap-6">
        {inquiries.map((inquiry) => (
          <Card key={inquiry.id}>
            <CardContent className="p-6">
              <div className="flex justify-between items-start mb-4">
                <div>
                  <h3 className="font-medium">בקשת בדיקת זמינות</h3>
                  <p className="text-sm text-gray-600">
                    מאת {inquiry.matchmaker.firstName}{' '}
                    {inquiry.matchmaker.lastName}
                  </p>
                </div>
                <Clock className="w-5 h-5 text-gray-400" />
              </div>
              <div className="space-y-4">
                {inquiry.note && (
                  <div className="text-sm text-gray-600 mt-2">
                    <strong>הערה:</strong> {inquiry.note}
                  </div>
                )}
                {!inquiry.firstPartyResponse && (
                  <>
                    <div className="space-y-2">
                      <label className="block text-sm font-medium">
                        הערות (אופציונלי):
                      </label>
                      <Textarea
                        value={note}
                        onChange={(e) => setNote(e.target.value)}
                        placeholder="הוסף/י הערות..."
                        className="w-full"
                      />
                    </div>
                    <div className="flex gap-2 mt-4">
                      <Button
                        onClick={() => handleResponse(inquiry.id, true)}
                        className="flex-1 bg-green-600 hover:bg-green-700"
                      >
                        <CheckCircle className="mr-2 h-4 w-4" /> אני זמין/ה
                      </Button>
                      <Button
                        onClick={() => handleResponse(inquiry.id, false)}
                        variant="outline"
                        className="flex-1"
                      >
                        <XCircle className="mr-2 h-4 w-4" /> לא זמין/ה כרגע
                      </Button>
                    </div>
                  </>
                )}
                {inquiry.firstPartyResponse !== null && (
                  <div className="space-y-4">
                    <div
                      className={`flex items-center gap-2 p-2 rounded-md ${inquiry.firstPartyResponse ? 'bg-green-50 text-green-700' : 'bg-red-50 text-red-700'}`}
                    >
                      {inquiry.firstPartyResponse ? (
                        <CheckCircle className="h-5 w-5" />
                      ) : (
                        <XCircle className="h-5 w-5" />
                      )}
                      <span>
                        {inquiry.firstPartyResponse
                          ? 'אישרת זמינות'
                          : 'ציינת שאינך זמין/ה'}
                      </span>
                    </div>
                    <div>
                      <Button
                        onClick={() =>
                          handleResponse(
                            inquiry.id,
                            !inquiry.firstPartyResponse
                          )
                        }
                        className={`w-full ${inquiry.firstPartyResponse ? 'bg-red-600 hover:bg-red-700' : 'bg-green-600 hover:bg-green-700'}`}
                      >
                        {inquiry.firstPartyResponse ? (
                          <>
                            <XCircle className="mr-2 h-4 w-4" /> שינוי תשובה -
                            אינני זמין/ה
                          </>
                        ) : (
                          <>
                            <CheckCircle className="mr-2 h-4 w-4" /> שינוי תשובה
                            - אני זמין/ה
                          </>
                        )}
                      </Button>
                    </div>
                  </div>
                )}
              </div>
            </CardContent>
          </Card>
        ))}
      </div>
    </div>
  );
}
--- End of Content for MessagesPage.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\messages\NotificationCard.tsx
--------------------------------------------------------------------------------
Content:
// src/app/components/messages/NotificationCard.tsx

import React from 'react';
import Link from 'next/link';
import Image from 'next/image';
import { Card, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Avatar, AvatarFallback } from '@/components/ui/avatar';
import { Badge } from '@/components/ui/badge';
import { formatDistanceToNow } from 'date-fns';
import { he } from 'date-fns/locale';
// ================== שינוי 1: הוספת הייבוא ==================
import { cn, getInitials, getRelativeCloudinaryPath } from '@/lib/utils';
import type { FeedItem } from '@/types/messages';
import {
  Heart,
  MessageCircle,
  ArrowLeft,
  Zap,
  CheckCircle,
  Info,
} from 'lucide-react';

interface NotificationCardProps {
  item: FeedItem;
  userId: string;
}

const NotificationCard: React.FC<NotificationCardProps> = ({
  item,
  userId,
}) => {
  const iconMap: Record<
    FeedItem['type'],
    { icon: React.ElementType; color: string; gradient: string }
  > = {
    NEW_SUGGESTION: {
      icon: Heart,
      color: 'text-pink-500',
      gradient: 'from-pink-400 to-rose-500',
    },
    ACTION_REQUIRED: {
      icon: Zap,
      color: 'text-orange-500',
      gradient: 'from-orange-400 to-amber-500',
    },
    STATUS_UPDATE: {
      icon: CheckCircle,
      color: 'text-green-500',
      gradient: 'from-emerald-400 to-green-500',
    },
    MATCHMAKER_MESSAGE: {
      icon: MessageCircle,
      color: 'text-blue-500',
      gradient: 'from-blue-400 to-cyan-500',
    },
    INQUIRY_RESPONSE: {
      icon: Info,
      color: 'text-cyan-500',
      gradient: 'from-cyan-400 to-teal-500',
    },
    AVAILABILITY_INQUIRY: {
      icon: MessageCircle,
      color: 'text-blue-500',
      gradient: 'from-blue-400 to-cyan-500',
    },
  };

  const { icon: Icon, gradient } = iconMap[item.type] || {
    icon: Info,
    color: 'text-gray-500',
    gradient: 'from-gray-400 to-slate-500',
  };
  const suggestion = item.payload.suggestion;
  const matchmaker = suggestion?.matchmaker;

  const otherParty = suggestion
    ? suggestion.firstPartyId === userId
      ? suggestion.secondParty
      : suggestion.firstParty
    : null;
  const mainImage = otherParty?.images?.find((img) => img.isMain);

  return (
    <Card className="shadow-lg border-0 transition-all duration-300 hover:shadow-xl hover:-translate-y-1 bg-white">
      <CardContent className="p-5 flex items-start gap-4">
        {/* Icons Column */}
        <div className="flex flex-col items-center gap-2 flex-shrink-0">
          <div
            className={cn(
              'w-12 h-12 rounded-full flex items-center justify-center bg-gradient-to-br shadow-md',
              gradient
            )}
          >
            <Icon className="w-6 h-6 text-white" />
          </div>
          {matchmaker && (
            <Avatar
              className="w-10 h-10 border-2 border-white"
              title={`הצעה מהשדכן/ית ${matchmaker.firstName}`}
            >
              <AvatarFallback className="bg-gray-200 text-gray-600 text-sm font-bold">
                {getInitials(`${matchmaker.firstName} ${matchmaker.lastName}`)}
              </AvatarFallback>
            </Avatar>
          )}
        </div>

        {/* Content Column */}
        <div className="flex-1 min-w-0">
          <div className="flex justify-between items-start">
            <div className="flex-1">
              <h3 className="font-bold text-gray-800 text-lg leading-tight">
                {item.title}
              </h3>
              <p className="text-sm text-gray-600 mt-1">{item.description}</p>
            </div>
            <span className="text-xs text-gray-400 flex-shrink-0 pl-2">
              {formatDistanceToNow(new Date(item.timestamp), {
                addSuffix: true,
                locale: he,
              })}
            </span>
          </div>

          {/* Link to Suggestion */}
          <div className="mt-4 pt-4 border-t border-gray-100 flex justify-between items-center">
            {otherParty && (
              <div className="flex items-center gap-2">
                <Avatar className="w-8 h-8 border-2 border-white shadow">
                  {mainImage?.url ? (
                    // ================== שינוי 2: שימוש בפונקציית העזר ==================
                    <Image
                      src={getRelativeCloudinaryPath(mainImage.url)}
                      alt={otherParty.firstName}
                      fill
                      className="object-cover"
                      sizes="32px"
                    />
                  ) : (
                    <AvatarFallback className="bg-gray-300 text-gray-700 font-bold text-xs">
                      {getInitials(
                        `${otherParty.firstName} ${otherParty.lastName}`
                      )}
                    </AvatarFallback>
                  )}
                </Avatar>
                <span className="text-sm font-medium text-gray-700">
                  עם {otherParty.firstName}
                </span>
              </div>
            )}
            <Link href={item.link} passHref>
              <Button className="bg-gradient-to-r from-purple-500 to-pink-500 text-white rounded-full shadow-md hover:shadow-lg transition-all duration-300">
                צפה בפרטים
                <ArrowLeft className="mr-2 h-4 w-4" />
              </Button>
            </Link>
          </div>
        </div>
      </CardContent>
    </Card>
  );
};

export default NotificationCard;
--- End of Content for NotificationCard.tsx ---

--------------------------------------------------------------------------------
File: C:\Users\eytan\Desktop\NeshamaTech\shidduch-system\src\components\messages\messages_contents.txt
--------------------------------------------------------------------------------
[This is the output log file itself. Content not included.]

